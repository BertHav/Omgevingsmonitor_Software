
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028c04  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004980  08028cc8  08028cc8  00029cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d648  0802d648  0002f448  2**0
                  CONTENTS
  4 .ARM          00000008  0802d648  0802d648  0002e648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d650  0802d650  0002f448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802d650  0802d650  0002e650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802d654  0802d654  0002e654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000448  20000000  0802d658  0002f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003200  20000448  0802daa0  0002f448  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003648  0802daa0  0002f648  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002f448  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003694d  00000000  00000000  0002f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009ce7  00000000  00000000  00065dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d98  00000000  00000000  0006faa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021f4  00000000  00000000  00072840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024255  00000000  00000000  00074a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00045fcb  00000000  00000000  00098c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2ecf  00000000  00000000  000dec54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00181b23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bb64  00000000  00000000  00181bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018d738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0018d7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0018fd21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000448 	.word	0x20000448
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08028cac 	.word	0x08028cac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000044c 	.word	0x2000044c
 8000104:	08028cac 	.word	0x08028cac

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	0802c76c 	.word	0x0802c76c
 8000e0c:	0802c7ac 	.word	0x0802c7ac
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0802c7e8 	.word	0x0802c7e8
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af02      	add	r7, sp, #8
 8003656:	0004      	movs	r4, r0
 8003658:	0008      	movs	r0, r1
 800365a:	60ba      	str	r2, [r7, #8]
 800365c:	0019      	movs	r1, r3
 800365e:	260e      	movs	r6, #14
 8003660:	19bb      	adds	r3, r7, r6
 8003662:	1c22      	adds	r2, r4, #0
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	230c      	movs	r3, #12
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	1c02      	adds	r2, r0, #0
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	1dbb      	adds	r3, r7, #6
 8003670:	1c0a      	adds	r2, r1, #0
 8003672:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003674:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <WriteMemRegister+0x58>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 800367c:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <WriteMemRegister+0x58>)
 800367e:	681c      	ldr	r4, [r3, #0]
 8003680:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <WriteMemRegister+0x5c>)
 8003682:	7918      	ldrb	r0, [r3, #4]
 8003684:	68bd      	ldr	r5, [r7, #8]
 8003686:	230c      	movs	r3, #12
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	881a      	ldrh	r2, [r3, #0]
 800368c:	19bb      	adds	r3, r7, r6
 800368e:	8819      	ldrh	r1, [r3, #0]
 8003690:	1dbb      	adds	r3, r7, #6
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	002b      	movs	r3, r5
 8003698:	47a0      	blx	r4
 800369a:	0003      	movs	r3, r0
 800369c:	e000      	b.n	80036a0 <WriteMemRegister+0x50>
  }
  return false;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b005      	add	sp, #20
 80036a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a8:	20000474 	.word	0x20000474
 80036ac:	200004a4 	.word	0x200004a4

080036b0 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80036b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	0004      	movs	r4, r0
 80036b8:	0008      	movs	r0, r1
 80036ba:	60ba      	str	r2, [r7, #8]
 80036bc:	0019      	movs	r1, r3
 80036be:	260e      	movs	r6, #14
 80036c0:	19bb      	adds	r3, r7, r6
 80036c2:	1c22      	adds	r2, r4, #0
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	230c      	movs	r3, #12
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	1c02      	adds	r2, r0, #0
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	1c0a      	adds	r2, r1, #0
 80036d2:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 80036d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <ReadMemRegister+0x58>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 80036dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003708 <ReadMemRegister+0x58>)
 80036de:	681c      	ldr	r4, [r3, #0]
 80036e0:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <ReadMemRegister+0x5c>)
 80036e2:	7918      	ldrb	r0, [r3, #4]
 80036e4:	68bd      	ldr	r5, [r7, #8]
 80036e6:	230c      	movs	r3, #12
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	881a      	ldrh	r2, [r3, #0]
 80036ec:	19bb      	adds	r3, r7, r6
 80036ee:	8819      	ldrh	r1, [r3, #0]
 80036f0:	1dbb      	adds	r3, r7, #6
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	002b      	movs	r3, r5
 80036f8:	47a0      	blx	r4
 80036fa:	0003      	movs	r3, r0
 80036fc:	e000      	b.n	8003700 <ReadMemRegister+0x50>
  }
  return false;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b005      	add	sp, #20
 8003706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003708:	20000470 	.word	0x20000470
 800370c:	200004a4 	.word	0x200004a4

08003710 <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003714:	4b02      	ldr	r3, [pc, #8]	@ (8003720 <ResetENS160samplecounter+0x10>)
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	2000046c 	.word	0x2000046c

08003724 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 800372c:	f00f fcfe 	bl	801312c <HAL_GetTick>
 8003730:	0002      	movs	r2, r0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	18d2      	adds	r2, r2, r3
 8003736:	4b03      	ldr	r3, [pc, #12]	@ (8003744 <setENS160TimeStamp+0x20>)
 8003738:	601a      	str	r2, [r3, #0]
}
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b002      	add	sp, #8
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	20000468 	.word	0x20000468

08003748 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003752:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <ENS_Init+0x20>)
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003758:	4b04      	ldr	r3, [pc, #16]	@ (800376c <ENS_Init+0x24>)
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	601a      	str	r2, [r3, #0]
}	
 800375e:	46c0      	nop			@ (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	b002      	add	sp, #8
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			@ (mov r8, r8)
 8003768:	20000470 	.word	0x20000470
 800376c:	20000474 	.word	0x20000474

08003770 <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003776:	1dbb      	adds	r3, r7, #6
 8003778:	22f0      	movs	r2, #240	@ 0xf0
 800377a:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 800377c:	1dba      	adds	r2, r7, #6
 800377e:	2301      	movs	r3, #1
 8003780:	2101      	movs	r1, #1
 8003782:	2010      	movs	r0, #16
 8003784:	f7ff ff64 	bl	8003650 <WriteMemRegister>
 8003788:	0003      	movs	r3, r0
 800378a:	001a      	movs	r2, r3
 800378c:	1dfb      	adds	r3, r7, #7
 800378e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003790:	201e      	movs	r0, #30
 8003792:	f00f fcd5 	bl	8013140 <HAL_Delay>
	return result;
 8003796:	1dfb      	adds	r3, r7, #7
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	1e5a      	subs	r2, r3, #1
 800379c:	4193      	sbcs	r3, r2
 800379e:	b2db      	uxtb	r3, r3
}
 80037a0:	0018      	movs	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b002      	add	sp, #8
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 80037ae:	003b      	movs	r3, r7
 80037b0:	2200      	movs	r2, #0
 80037b2:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 80037b4:	1dfb      	adds	r3, r7, #7
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 80037ba:	003a      	movs	r2, r7
 80037bc:	2302      	movs	r3, #2
 80037be:	2101      	movs	r1, #1
 80037c0:	2000      	movs	r0, #0
 80037c2:	f7ff ff75 	bl	80036b0 <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 80037c6:	003b      	movs	r3, r7
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	b21a      	sxth	r2, r3
 80037cc:	003b      	movs	r3, r7
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	b21b      	sxth	r3, r3
 80037d4:	4313      	orrs	r3, r2
 80037d6:	b21a      	sxth	r2, r3
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 80037dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003850 <ENS160_checkPartID+0xa8>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d015      	beq.n	8003810 <ENS160_checkPartID+0x68>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	881a      	ldrh	r2, [r3, #0]
 80037e8:	23b0      	movs	r3, #176	@ 0xb0
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d009      	beq.n	8003804 <ENS160_checkPartID+0x5c>
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	881a      	ldrh	r2, [r3, #0]
 80037f4:	2362      	movs	r3, #98	@ 0x62
 80037f6:	33ff      	adds	r3, #255	@ 0xff
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d101      	bne.n	8003800 <ENS160_checkPartID+0x58>
 80037fc:	4b15      	ldr	r3, [pc, #84]	@ (8003854 <ENS160_checkPartID+0xac>)
 80037fe:	e002      	b.n	8003806 <ENS160_checkPartID+0x5e>
 8003800:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <ENS160_checkPartID+0xb0>)
 8003802:	e000      	b.n	8003806 <ENS160_checkPartID+0x5e>
 8003804:	4b15      	ldr	r3, [pc, #84]	@ (800385c <ENS160_checkPartID+0xb4>)
 8003806:	4a16      	ldr	r2, [pc, #88]	@ (8003860 <ENS160_checkPartID+0xb8>)
 8003808:	4916      	ldr	r1, [pc, #88]	@ (8003864 <ENS160_checkPartID+0xbc>)
 800380a:	2003      	movs	r0, #3
 800380c:	f00e ff58 	bl	80126c0 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003810:	1d3b      	adds	r3, r7, #4
 8003812:	881a      	ldrh	r2, [r3, #0]
 8003814:	23b0      	movs	r3, #176	@ 0xb0
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	429a      	cmp	r2, r3
 800381a:	d106      	bne.n	800382a <ENS160_checkPartID+0x82>
	  hwsw._revENS16x = 0;
 800381c:	4b12      	ldr	r3, [pc, #72]	@ (8003868 <ENS160_checkPartID+0xc0>)
 800381e:	2200      	movs	r2, #0
 8003820:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003822:	1dfb      	adds	r3, r7, #7
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	e00b      	b.n	8003842 <ENS160_checkPartID+0x9a>
	}
	else if (part_id == ENS161_PARTID) {
 800382a:	1d3b      	adds	r3, r7, #4
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	2362      	movs	r3, #98	@ 0x62
 8003830:	33ff      	adds	r3, #255	@ 0xff
 8003832:	429a      	cmp	r2, r3
 8003834:	d105      	bne.n	8003842 <ENS160_checkPartID+0x9a>
	  hwsw._revENS16x = 1;
 8003836:	4b0c      	ldr	r3, [pc, #48]	@ (8003868 <ENS160_checkPartID+0xc0>)
 8003838:	2201      	movs	r2, #1
 800383a:	70da      	strb	r2, [r3, #3]
	  result = true;
 800383c:	1dfb      	adds	r3, r7, #7
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	781b      	ldrb	r3, [r3, #0]
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b002      	add	sp, #8
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	20000464 	.word	0x20000464
 8003854:	08028cc8 	.word	0x08028cc8
 8003858:	08028cd4 	.word	0x08028cd4
 800385c:	08028cd8 	.word	0x08028cd8
 8003860:	08028ce4 	.word	0x08028ce4
 8003864:	08028d04 	.word	0x08028d04
 8003868:	200004a4 	.word	0x200004a4

0800386c <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003872:	4a27      	ldr	r2, [pc, #156]	@ (8003910 <ENS160_clearCommand+0xa4>)
 8003874:	2301      	movs	r3, #1
 8003876:	2101      	movs	r1, #1
 8003878:	2012      	movs	r0, #18
 800387a:	f7ff fee9 	bl	8003650 <WriteMemRegister>
 800387e:	0003      	movs	r3, r0
 8003880:	001a      	movs	r2, r3
 8003882:	4b24      	ldr	r3, [pc, #144]	@ (8003914 <ENS160_clearCommand+0xa8>)
 8003884:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003886:	200a      	movs	r0, #10
 8003888:	f00f fc5a 	bl	8013140 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 800388c:	4b20      	ldr	r3, [pc, #128]	@ (8003910 <ENS160_clearCommand+0xa4>)
 800388e:	22cc      	movs	r2, #204	@ 0xcc
 8003890:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003892:	4a1f      	ldr	r2, [pc, #124]	@ (8003910 <ENS160_clearCommand+0xa4>)
 8003894:	2301      	movs	r3, #1
 8003896:	2101      	movs	r1, #1
 8003898:	2012      	movs	r0, #18
 800389a:	f7ff fed9 	bl	8003650 <WriteMemRegister>
 800389e:	0003      	movs	r3, r0
 80038a0:	001a      	movs	r2, r3
 80038a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003914 <ENS160_clearCommand+0xa8>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4013      	ands	r3, r2
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003914 <ENS160_clearCommand+0xa8>)
 80038ac:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80038ae:	200a      	movs	r0, #10
 80038b0:	f00f fc46 	bl	8013140 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 80038b4:	4a16      	ldr	r2, [pc, #88]	@ (8003910 <ENS160_clearCommand+0xa4>)
 80038b6:	2301      	movs	r3, #1
 80038b8:	2101      	movs	r1, #1
 80038ba:	2020      	movs	r0, #32
 80038bc:	f7ff fef8 	bl	80036b0 <ReadMemRegister>
 80038c0:	0003      	movs	r3, r0
 80038c2:	001a      	movs	r2, r3
 80038c4:	4b13      	ldr	r3, [pc, #76]	@ (8003914 <ENS160_clearCommand+0xa8>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	4013      	ands	r3, r2
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	4b11      	ldr	r3, [pc, #68]	@ (8003914 <ENS160_clearCommand+0xa8>)
 80038ce:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 80038d0:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <ENS160_clearCommand+0xac>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d010      	beq.n	80038fa <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 80038d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003910 <ENS160_clearCommand+0xa4>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	0018      	movs	r0, r3
 80038de:	4b0c      	ldr	r3, [pc, #48]	@ (8003910 <ENS160_clearCommand+0xa4>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <ENS160_clearCommand+0x7e>
 80038e6:	4b0d      	ldr	r3, [pc, #52]	@ (800391c <ENS160_clearCommand+0xb0>)
 80038e8:	e000      	b.n	80038ec <ENS160_clearCommand+0x80>
 80038ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <ENS160_clearCommand+0xb4>)
 80038ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003924 <ENS160_clearCommand+0xb8>)
 80038ee:	490e      	ldr	r1, [pc, #56]	@ (8003928 <ENS160_clearCommand+0xbc>)
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	0003      	movs	r3, r0
 80038f4:	2003      	movs	r0, #3
 80038f6:	f00e fee3 	bl	80126c0 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80038fa:	200a      	movs	r0, #10
 80038fc:	f00f fc20 	bl	8013140 <HAL_Delay>
		
	return result;
 8003900:	4b04      	ldr	r3, [pc, #16]	@ (8003914 <ENS160_clearCommand+0xa8>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	1e5a      	subs	r2, r3, #1
 8003906:	4193      	sbcs	r3, r2
 8003908:	b2db      	uxtb	r3, r3
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	200004ac 	.word	0x200004ac
 8003914:	200004ad 	.word	0x200004ad
 8003918:	20000464 	.word	0x20000464
 800391c:	08028d08 	.word	0x08028d08
 8003920:	08028cd4 	.word	0x08028cd4
 8003924:	08028d0c 	.word	0x08028d0c
 8003928:	08028d04 	.word	0x08028d04

0800392c <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b085      	sub	sp, #20
 8003930:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003932:	f7ff ff9b 	bl	800386c <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003936:	200a      	movs	r0, #10
 8003938:	f00f fc02 	bl	8013140 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 800393c:	1d3b      	adds	r3, r7, #4
 800393e:	220e      	movs	r2, #14
 8003940:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003942:	1d3a      	adds	r2, r7, #4
 8003944:	2301      	movs	r3, #1
 8003946:	2101      	movs	r1, #1
 8003948:	2012      	movs	r0, #18
 800394a:	f7ff fe81 	bl	8003650 <WriteMemRegister>

	HAL_Delay(10);
 800394e:	200a      	movs	r0, #10
 8003950:	f00f fbf6 	bl	8013140 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003954:	1d3a      	adds	r2, r7, #4
 8003956:	2303      	movs	r3, #3
 8003958:	2101      	movs	r1, #1
 800395a:	204c      	movs	r0, #76	@ 0x4c
 800395c:	f7ff fea8 	bl	80036b0 <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003960:	1d3b      	adds	r3, r7, #4
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	4b1a      	ldr	r3, [pc, #104]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 8003966:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	785a      	ldrb	r2, [r3, #1]
 800396c:	4b18      	ldr	r3, [pc, #96]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 800396e:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	789a      	ldrb	r2, [r3, #2]
 8003974:	4b16      	ldr	r3, [pc, #88]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 8003976:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003978:	4b15      	ldr	r3, [pc, #84]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b06      	cmp	r3, #6
 800397e:	d903      	bls.n	8003988 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003980:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 8003982:	2201      	movs	r2, #1
 8003984:	70da      	strb	r2, [r3, #3]
 8003986:	e002      	b.n	800398e <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003988:	4b11      	ldr	r3, [pc, #68]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 800398a:	2200      	movs	r2, #0
 800398c:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 800398e:	4b11      	ldr	r3, [pc, #68]	@ (80039d4 <ENS160_getFirmware+0xa8>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00f      	beq.n	80039b6 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003996:	4b0e      	ldr	r3, [pc, #56]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	001c      	movs	r4, r3
 800399c:	4b0c      	ldr	r3, [pc, #48]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	0018      	movs	r0, r3
 80039a2:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 80039a4:	789b      	ldrb	r3, [r3, #2]
 80039a6:	4a0c      	ldr	r2, [pc, #48]	@ (80039d8 <ENS160_getFirmware+0xac>)
 80039a8:	490c      	ldr	r1, [pc, #48]	@ (80039dc <ENS160_getFirmware+0xb0>)
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	9000      	str	r0, [sp, #0]
 80039ae:	0023      	movs	r3, r4
 80039b0:	2003      	movs	r0, #3
 80039b2:	f00e fe85 	bl	80126c0 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80039b6:	200a      	movs	r0, #10
 80039b8:	f00f fbc2 	bl	8013140 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	1e5a      	subs	r2, r3, #1
 80039c2:	4193      	sbcs	r3, r2
 80039c4:	b2db      	uxtb	r3, r3
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b003      	add	sp, #12
 80039cc:	bd90      	pop	{r4, r7, pc}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	200004a4 	.word	0x200004a4
 80039d4:	20000464 	.word	0x20000464
 80039d8:	08028d38 	.word	0x08028d38
 80039dc:	08028d04 	.word	0x08028d04

080039e0 <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	0002      	movs	r2, r0
 80039e8:	1dfb      	adds	r3, r7, #7
 80039ea:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 80039ec:	1dfb      	adds	r3, r7, #7
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d108      	bne.n	8003a06 <ENS160_setMode+0x26>
 80039f4:	4b10      	ldr	r3, [pc, #64]	@ (8003a38 <ENS160_setMode+0x58>)
 80039f6:	78db      	ldrb	r3, [r3, #3]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <ENS160_setMode+0x26>
	  result = 1;
 80039fc:	230f      	movs	r3, #15
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]
 8003a04:	e00a      	b.n	8003a1c <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003a06:	1dfa      	adds	r2, r7, #7
 8003a08:	2301      	movs	r3, #1
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	2010      	movs	r0, #16
 8003a0e:	f7ff fe1f 	bl	8003650 <WriteMemRegister>
 8003a12:	0003      	movs	r3, r0
 8003a14:	001a      	movs	r2, r3
 8003a16:	230f      	movs	r3, #15
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003a1c:	200a      	movs	r0, #10
 8003a1e:	f00f fb8f 	bl	8013140 <HAL_Delay>
	
	return result;
 8003a22:	230f      	movs	r3, #15
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	1e5a      	subs	r2, r3, #1
 8003a2a:	4193      	sbcs	r3, r2
 8003a2c:	b2db      	uxtb	r3, r3
}
 8003a2e:	0018      	movs	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b004      	add	sp, #16
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	200004a4 	.word	0x200004a4

08003a3c <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003a48:	4b37      	ldr	r3, [pc, #220]	@ (8003b28 <ENS_DeviceConnected+0xec>)
 8003a4a:	2252      	movs	r2, #82	@ 0x52
 8003a4c:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003a4e:	1dbb      	adds	r3, r7, #6
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	e02d      	b.n	8003ab2 <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003a56:	f7ff fe8b 	bl	8003770 <ENS160_reset>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	001a      	movs	r2, r3
 8003a5e:	1dfb      	adds	r3, r7, #7
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	401a      	ands	r2, r3
 8003a64:	1dfb      	adds	r3, r7, #7
 8003a66:	1e51      	subs	r1, r2, #1
 8003a68:	418a      	sbcs	r2, r1
 8003a6a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003a6c:	f7ff fe9c 	bl	80037a8 <ENS160_checkPartID>
 8003a70:	0003      	movs	r3, r0
 8003a72:	001a      	movs	r2, r3
 8003a74:	1dfb      	adds	r3, r7, #7
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	401a      	ands	r2, r3
 8003a7a:	1dfb      	adds	r3, r7, #7
 8003a7c:	1e51      	subs	r1, r2, #1
 8003a7e:	418a      	sbcs	r2, r1
 8003a80:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003a82:	1dfb      	adds	r3, r7, #7
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	4053      	eors	r3, r2
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00b      	beq.n	8003aa8 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003a90:	4a26      	ldr	r2, [pc, #152]	@ (8003b2c <ENS_DeviceConnected+0xf0>)
 8003a92:	4b27      	ldr	r3, [pc, #156]	@ (8003b30 <ENS_DeviceConnected+0xf4>)
 8003a94:	0019      	movs	r1, r3
 8003a96:	2002      	movs	r0, #2
 8003a98:	f00e fe12 	bl	80126c0 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003a9c:	4b22      	ldr	r3, [pc, #136]	@ (8003b28 <ENS_DeviceConnected+0xec>)
 8003a9e:	2253      	movs	r2, #83	@ 0x53
 8003aa0:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003aa2:	1dfb      	adds	r3, r7, #7
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003aa8:	1dbb      	adds	r3, r7, #6
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	1dbb      	adds	r3, r7, #6
 8003aae:	3201      	adds	r2, #1
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	1dbb      	adds	r3, r7, #6
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d9cd      	bls.n	8003a56 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003aba:	1dfb      	adds	r3, r7, #7
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d02b      	beq.n	8003b1a <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f7ff ff8c 	bl	80039e0 <ENS160_setMode>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	001a      	movs	r2, r3
 8003acc:	1dfb      	adds	r3, r7, #7
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	401a      	ands	r2, r3
 8003ad2:	1dfb      	adds	r3, r7, #7
 8003ad4:	1e51      	subs	r1, r2, #1
 8003ad6:	418a      	sbcs	r2, r1
 8003ad8:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003ada:	f7ff fec7 	bl	800386c <ENS160_clearCommand>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	1dfb      	adds	r3, r7, #7
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	1dfb      	adds	r3, r7, #7
 8003aea:	1e51      	subs	r1, r2, #1
 8003aec:	418a      	sbcs	r2, r1
 8003aee:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003af0:	f7ff ff1c 	bl	800392c <ENS160_getFirmware>
 8003af4:	0003      	movs	r3, r0
 8003af6:	001a      	movs	r2, r3
 8003af8:	1dfb      	adds	r3, r7, #7
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	401a      	ands	r2, r3
 8003afe:	1dfb      	adds	r3, r7, #7
 8003b00:	1e51      	subs	r1, r2, #1
 8003b02:	418a      	sbcs	r2, r1
 8003b04:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003b06:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <ENS_DeviceConnected+0xf8>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b38 <ENS_DeviceConnected+0xfc>)
 8003b10:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <ENS_DeviceConnected+0x100>)
 8003b12:	0019      	movs	r1, r3
 8003b14:	2003      	movs	r0, #3
 8003b16:	f00e fdd3 	bl	80126c0 <CreateLine>
    }
  }
  return _available;
 8003b1a:	1dfb      	adds	r3, r7, #7
 8003b1c:	781b      	ldrb	r3, [r3, #0]
}
 8003b1e:	0018      	movs	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b002      	add	sp, #8
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			@ (mov r8, r8)
 8003b28:	200004a4 	.word	0x200004a4
 8003b2c:	08028d54 	.word	0x08028d54
 8003b30:	08028d74 	.word	0x08028d74
 8003b34:	20000464 	.word	0x20000464
 8003b38:	08028d78 	.word	0x08028d78
 8003b3c:	08028d04 	.word	0x08028d04

08003b40 <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003b46:	1dfa      	adds	r2, r7, #7
 8003b48:	2301      	movs	r3, #1
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	2020      	movs	r0, #32
 8003b4e:	f7ff fdaf 	bl	80036b0 <ReadMemRegister>

  if (debugENS160) {
 8003b52:	4b08      	ldr	r3, [pc, #32]	@ (8003b74 <ENS160_readStatus+0x34>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003b5a:	1dfb      	adds	r3, r7, #7
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	4a06      	ldr	r2, [pc, #24]	@ (8003b78 <ENS160_readStatus+0x38>)
 8003b60:	4906      	ldr	r1, [pc, #24]	@ (8003b7c <ENS160_readStatus+0x3c>)
 8003b62:	2003      	movs	r0, #3
 8003b64:	f00e fdac 	bl	80126c0 <CreateLine>
  }
  return status;
 8003b68:	1dfb      	adds	r3, r7, #7
 8003b6a:	781b      	ldrb	r3, [r3, #0]
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b002      	add	sp, #8
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000464 	.word	0x20000464
 8003b78:	08028dac 	.word	0x08028dac
 8003b7c:	08028d04 	.word	0x08028d04

08003b80 <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003b80:	b5b0      	push	{r4, r5, r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	0002      	movs	r2, r0
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003b8c:	2317      	movs	r3, #23
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003b94:	4b32      	ldr	r3, [pc, #200]	@ (8003c60 <ENS160_measure+0xe0>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003b9c:	4a31      	ldr	r2, [pc, #196]	@ (8003c64 <ENS160_measure+0xe4>)
 8003b9e:	4b32      	ldr	r3, [pc, #200]	@ (8003c68 <ENS160_measure+0xe8>)
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	2003      	movs	r0, #3
 8003ba4:	f00e fd8c 	bl	80126c0 <CreateLine>
	}
	
	if (waitForNew) {
 8003ba8:	1dfb      	adds	r3, r7, #7
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d010      	beq.n	8003bd2 <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	f00f fac5 	bl	8013140 <HAL_Delay>
			status = ENS160_readStatus();
 8003bb6:	2516      	movs	r5, #22
 8003bb8:	197c      	adds	r4, r7, r5
 8003bba:	f7ff ffc1 	bl	8003b40 <ENS160_readStatus>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003bc2:	197b      	adds	r3, r7, r5
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	4013      	ands	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ef      	beq.n	8003bb0 <ENS160_measure+0x30>
 8003bd0:	e002      	b.n	8003bd8 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003bd2:	200a      	movs	r0, #10
 8003bd4:	f00f fab4 	bl	8013140 <HAL_Delay>
	}
	
	newData = true;
 8003bd8:	2317      	movs	r3, #23
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 8003be0:	240c      	movs	r4, #12
 8003be2:	193a      	adds	r2, r7, r4
 8003be4:	2307      	movs	r3, #7
 8003be6:	2101      	movs	r1, #1
 8003be8:	2021      	movs	r0, #33	@ 0x21
 8003bea:	f7ff fd61 	bl	80036b0 <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 8003bee:	0021      	movs	r1, r4
 8003bf0:	187b      	adds	r3, r7, r1
 8003bf2:	781a      	ldrb	r2, [r3, #0]
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c6c <ENS160_measure+0xec>)
 8003bf6:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8003bf8:	187b      	adds	r3, r7, r1
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21a      	sxth	r2, r3
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	789b      	ldrb	r3, [r3, #2]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	b21b      	sxth	r3, r3
 8003c06:	4313      	orrs	r3, r2
 8003c08:	b21b      	sxth	r3, r3
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	4b17      	ldr	r3, [pc, #92]	@ (8003c6c <ENS160_measure+0xec>)
 8003c0e:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	78db      	ldrb	r3, [r3, #3]
 8003c14:	b21a      	sxth	r2, r3
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	791b      	ldrb	r3, [r3, #4]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	b21b      	sxth	r3, r3
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	b21b      	sxth	r3, r3
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <ENS160_measure+0xec>)
 8003c26:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8003c28:	4b11      	ldr	r3, [pc, #68]	@ (8003c70 <ENS160_measure+0xf0>)
 8003c2a:	78db      	ldrb	r3, [r3, #3]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00c      	beq.n	8003c4a <ENS160_measure+0xca>
 8003c30:	187b      	adds	r3, r7, r1
 8003c32:	795b      	ldrb	r3, [r3, #5]
 8003c34:	b21a      	sxth	r2, r3
 8003c36:	187b      	adds	r3, r7, r1
 8003c38:	799b      	ldrb	r3, [r3, #6]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	b21b      	sxth	r3, r3
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <ENS160_measure+0xec>)
 8003c46:	80da      	strh	r2, [r3, #6]
 8003c48:	e002      	b.n	8003c50 <ENS160_measure+0xd0>
  	else pred._data_aqi500 = 0;
 8003c4a:	4b08      	ldr	r3, [pc, #32]	@ (8003c6c <ENS160_measure+0xec>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8003c50:	2317      	movs	r3, #23
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	781b      	ldrb	r3, [r3, #0]
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b006      	add	sp, #24
 8003c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	20000464 	.word	0x20000464
 8003c64:	08028dc0 	.word	0x08028dc0
 8003c68:	08028d04 	.word	0x08028d04
 8003c6c:	2000049c 	.word	0x2000049c
 8003c70:	200004a4 	.word	0x200004a4

08003c74 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	0002      	movs	r2, r0
 8003c7c:	1dfb      	adds	r3, r7, #7
 8003c7e:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 8003c80:	2317      	movs	r3, #23
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	2200      	movs	r2, #0
 8003c86:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 8003c88:	4bae      	ldr	r3, [pc, #696]	@ (8003f44 <ENS160_measureRaw+0x2d0>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 8003c90:	4aad      	ldr	r2, [pc, #692]	@ (8003f48 <ENS160_measureRaw+0x2d4>)
 8003c92:	4bae      	ldr	r3, [pc, #696]	@ (8003f4c <ENS160_measureRaw+0x2d8>)
 8003c94:	0019      	movs	r1, r3
 8003c96:	2003      	movs	r0, #3
 8003c98:	f00e fd12 	bl	80126c0 <CreateLine>
	}
	
	if (waitForNew) {
 8003c9c:	1dfb      	adds	r3, r7, #7
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d010      	beq.n	8003cc6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	f00f fa4b 	bl	8013140 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003caa:	240b      	movs	r4, #11
 8003cac:	193a      	adds	r2, r7, r4
 8003cae:	2301      	movs	r3, #1
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	2020      	movs	r0, #32
 8003cb4:	f7ff fcfc 	bl	80036b0 <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 8003cb8:	193b      	adds	r3, r7, r4
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0ee      	beq.n	8003ca4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 8003cc6:	240c      	movs	r4, #12
 8003cc8:	193a      	adds	r2, r7, r4
 8003cca:	2308      	movs	r3, #8
 8003ccc:	2101      	movs	r1, #1
 8003cce:	2048      	movs	r0, #72	@ 0x48
 8003cd0:	f7ff fcee 	bl	80036b0 <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8003cd4:	193b      	adds	r3, r7, r4
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	001a      	movs	r2, r3
 8003cda:	193b      	adds	r3, r7, r4
 8003cdc:	785b      	ldrb	r3, [r3, #1]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f7fd fcc0 	bl	8001668 <__aeabi_ui2f>
 8003ce8:	1c03      	adds	r3, r0, #0
 8003cea:	218a      	movs	r1, #138	@ 0x8a
 8003cec:	05c9      	lsls	r1, r1, #23
 8003cee:	1c18      	adds	r0, r3, #0
 8003cf0:	f7fc ff70 	bl	8000bd4 <__aeabi_fdiv>
 8003cf4:	1c03      	adds	r3, r0, #0
 8003cf6:	1c18      	adds	r0, r3, #0
 8003cf8:	f7ff fbb4 	bl	8003464 <__aeabi_f2d>
 8003cfc:	0002      	movs	r2, r0
 8003cfe:	000b      	movs	r3, r1
 8003d00:	2000      	movs	r0, #0
 8003d02:	2180      	movs	r1, #128	@ 0x80
 8003d04:	05c9      	lsls	r1, r1, #23
 8003d06:	f023 fcfb 	bl	8027700 <pow>
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	000b      	movs	r3, r1
 8003d0e:	0010      	movs	r0, r2
 8003d10:	0019      	movs	r1, r3
 8003d12:	f7fc fc9b 	bl	800064c <__aeabi_d2uiz>
 8003d16:	0002      	movs	r2, r0
 8003d18:	4b8d      	ldr	r3, [pc, #564]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003d1a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8003d1c:	193b      	adds	r3, r7, r4
 8003d1e:	789b      	ldrb	r3, [r3, #2]
 8003d20:	001a      	movs	r2, r3
 8003d22:	193b      	adds	r3, r7, r4
 8003d24:	78db      	ldrb	r3, [r3, #3]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7fd fc9c 	bl	8001668 <__aeabi_ui2f>
 8003d30:	1c03      	adds	r3, r0, #0
 8003d32:	218a      	movs	r1, #138	@ 0x8a
 8003d34:	05c9      	lsls	r1, r1, #23
 8003d36:	1c18      	adds	r0, r3, #0
 8003d38:	f7fc ff4c 	bl	8000bd4 <__aeabi_fdiv>
 8003d3c:	1c03      	adds	r3, r0, #0
 8003d3e:	1c18      	adds	r0, r3, #0
 8003d40:	f7ff fb90 	bl	8003464 <__aeabi_f2d>
 8003d44:	0002      	movs	r2, r0
 8003d46:	000b      	movs	r3, r1
 8003d48:	2000      	movs	r0, #0
 8003d4a:	2180      	movs	r1, #128	@ 0x80
 8003d4c:	05c9      	lsls	r1, r1, #23
 8003d4e:	f023 fcd7 	bl	8027700 <pow>
 8003d52:	0002      	movs	r2, r0
 8003d54:	000b      	movs	r3, r1
 8003d56:	0010      	movs	r0, r2
 8003d58:	0019      	movs	r1, r3
 8003d5a:	f7fc fc77 	bl	800064c <__aeabi_d2uiz>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	4b7b      	ldr	r3, [pc, #492]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003d62:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8003d64:	193b      	adds	r3, r7, r4
 8003d66:	791b      	ldrb	r3, [r3, #4]
 8003d68:	001a      	movs	r2, r3
 8003d6a:	193b      	adds	r3, r7, r4
 8003d6c:	795b      	ldrb	r3, [r3, #5]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	4313      	orrs	r3, r2
 8003d72:	0018      	movs	r0, r3
 8003d74:	f7fd fc78 	bl	8001668 <__aeabi_ui2f>
 8003d78:	1c03      	adds	r3, r0, #0
 8003d7a:	218a      	movs	r1, #138	@ 0x8a
 8003d7c:	05c9      	lsls	r1, r1, #23
 8003d7e:	1c18      	adds	r0, r3, #0
 8003d80:	f7fc ff28 	bl	8000bd4 <__aeabi_fdiv>
 8003d84:	1c03      	adds	r3, r0, #0
 8003d86:	1c18      	adds	r0, r3, #0
 8003d88:	f7ff fb6c 	bl	8003464 <__aeabi_f2d>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	000b      	movs	r3, r1
 8003d90:	2000      	movs	r0, #0
 8003d92:	2180      	movs	r1, #128	@ 0x80
 8003d94:	05c9      	lsls	r1, r1, #23
 8003d96:	f023 fcb3 	bl	8027700 <pow>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	000b      	movs	r3, r1
 8003d9e:	0010      	movs	r0, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	f7fc fc53 	bl	800064c <__aeabi_d2uiz>
 8003da6:	0002      	movs	r2, r0
 8003da8:	4b69      	ldr	r3, [pc, #420]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003daa:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8003dac:	193b      	adds	r3, r7, r4
 8003dae:	799b      	ldrb	r3, [r3, #6]
 8003db0:	001a      	movs	r2, r3
 8003db2:	193b      	adds	r3, r7, r4
 8003db4:	79db      	ldrb	r3, [r3, #7]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	4313      	orrs	r3, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7fd fc54 	bl	8001668 <__aeabi_ui2f>
 8003dc0:	1c03      	adds	r3, r0, #0
 8003dc2:	218a      	movs	r1, #138	@ 0x8a
 8003dc4:	05c9      	lsls	r1, r1, #23
 8003dc6:	1c18      	adds	r0, r3, #0
 8003dc8:	f7fc ff04 	bl	8000bd4 <__aeabi_fdiv>
 8003dcc:	1c03      	adds	r3, r0, #0
 8003dce:	1c18      	adds	r0, r3, #0
 8003dd0:	f7ff fb48 	bl	8003464 <__aeabi_f2d>
 8003dd4:	0002      	movs	r2, r0
 8003dd6:	000b      	movs	r3, r1
 8003dd8:	2000      	movs	r0, #0
 8003dda:	2180      	movs	r1, #128	@ 0x80
 8003ddc:	05c9      	lsls	r1, r1, #23
 8003dde:	f023 fc8f 	bl	8027700 <pow>
 8003de2:	0002      	movs	r2, r0
 8003de4:	000b      	movs	r3, r1
 8003de6:	0010      	movs	r0, r2
 8003de8:	0019      	movs	r1, r3
 8003dea:	f7fc fc2f 	bl	800064c <__aeabi_d2uiz>
 8003dee:	0002      	movs	r2, r0
 8003df0:	4b57      	ldr	r3, [pc, #348]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003df2:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8003df4:	193a      	adds	r2, r7, r4
 8003df6:	2308      	movs	r3, #8
 8003df8:	2101      	movs	r1, #1
 8003dfa:	2028      	movs	r0, #40	@ 0x28
 8003dfc:	f7ff fc58 	bl	80036b0 <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8003e00:	193b      	adds	r3, r7, r4
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	001a      	movs	r2, r3
 8003e06:	193b      	adds	r3, r7, r4
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7fd fc2a 	bl	8001668 <__aeabi_ui2f>
 8003e14:	1c03      	adds	r3, r0, #0
 8003e16:	218a      	movs	r1, #138	@ 0x8a
 8003e18:	05c9      	lsls	r1, r1, #23
 8003e1a:	1c18      	adds	r0, r3, #0
 8003e1c:	f7fc feda 	bl	8000bd4 <__aeabi_fdiv>
 8003e20:	1c03      	adds	r3, r0, #0
 8003e22:	1c18      	adds	r0, r3, #0
 8003e24:	f7ff fb1e 	bl	8003464 <__aeabi_f2d>
 8003e28:	0002      	movs	r2, r0
 8003e2a:	000b      	movs	r3, r1
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	2180      	movs	r1, #128	@ 0x80
 8003e30:	05c9      	lsls	r1, r1, #23
 8003e32:	f023 fc65 	bl	8027700 <pow>
 8003e36:	0002      	movs	r2, r0
 8003e38:	000b      	movs	r3, r1
 8003e3a:	0010      	movs	r0, r2
 8003e3c:	0019      	movs	r1, r3
 8003e3e:	f7fc fc05 	bl	800064c <__aeabi_d2uiz>
 8003e42:	0002      	movs	r2, r0
 8003e44:	4b42      	ldr	r3, [pc, #264]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003e46:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8003e48:	193b      	adds	r3, r7, r4
 8003e4a:	789b      	ldrb	r3, [r3, #2]
 8003e4c:	001a      	movs	r2, r3
 8003e4e:	193b      	adds	r3, r7, r4
 8003e50:	78db      	ldrb	r3, [r3, #3]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	4313      	orrs	r3, r2
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7fd fc06 	bl	8001668 <__aeabi_ui2f>
 8003e5c:	1c03      	adds	r3, r0, #0
 8003e5e:	218a      	movs	r1, #138	@ 0x8a
 8003e60:	05c9      	lsls	r1, r1, #23
 8003e62:	1c18      	adds	r0, r3, #0
 8003e64:	f7fc feb6 	bl	8000bd4 <__aeabi_fdiv>
 8003e68:	1c03      	adds	r3, r0, #0
 8003e6a:	1c18      	adds	r0, r3, #0
 8003e6c:	f7ff fafa 	bl	8003464 <__aeabi_f2d>
 8003e70:	0002      	movs	r2, r0
 8003e72:	000b      	movs	r3, r1
 8003e74:	2000      	movs	r0, #0
 8003e76:	2180      	movs	r1, #128	@ 0x80
 8003e78:	05c9      	lsls	r1, r1, #23
 8003e7a:	f023 fc41 	bl	8027700 <pow>
 8003e7e:	0002      	movs	r2, r0
 8003e80:	000b      	movs	r3, r1
 8003e82:	0010      	movs	r0, r2
 8003e84:	0019      	movs	r1, r3
 8003e86:	f7fc fbe1 	bl	800064c <__aeabi_d2uiz>
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	4b30      	ldr	r3, [pc, #192]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003e8e:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8003e90:	193b      	adds	r3, r7, r4
 8003e92:	791b      	ldrb	r3, [r3, #4]
 8003e94:	001a      	movs	r2, r3
 8003e96:	193b      	adds	r3, r7, r4
 8003e98:	795b      	ldrb	r3, [r3, #5]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7fd fbe2 	bl	8001668 <__aeabi_ui2f>
 8003ea4:	1c03      	adds	r3, r0, #0
 8003ea6:	218a      	movs	r1, #138	@ 0x8a
 8003ea8:	05c9      	lsls	r1, r1, #23
 8003eaa:	1c18      	adds	r0, r3, #0
 8003eac:	f7fc fe92 	bl	8000bd4 <__aeabi_fdiv>
 8003eb0:	1c03      	adds	r3, r0, #0
 8003eb2:	1c18      	adds	r0, r3, #0
 8003eb4:	f7ff fad6 	bl	8003464 <__aeabi_f2d>
 8003eb8:	0002      	movs	r2, r0
 8003eba:	000b      	movs	r3, r1
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	2180      	movs	r1, #128	@ 0x80
 8003ec0:	05c9      	lsls	r1, r1, #23
 8003ec2:	f023 fc1d 	bl	8027700 <pow>
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	000b      	movs	r3, r1
 8003eca:	0010      	movs	r0, r2
 8003ecc:	0019      	movs	r1, r3
 8003ece:	f7fc fbbd 	bl	800064c <__aeabi_d2uiz>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003ed6:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8003ed8:	193b      	adds	r3, r7, r4
 8003eda:	799b      	ldrb	r3, [r3, #6]
 8003edc:	001a      	movs	r2, r3
 8003ede:	193b      	adds	r3, r7, r4
 8003ee0:	79db      	ldrb	r3, [r3, #7]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7fd fbbe 	bl	8001668 <__aeabi_ui2f>
 8003eec:	1c03      	adds	r3, r0, #0
 8003eee:	218a      	movs	r1, #138	@ 0x8a
 8003ef0:	05c9      	lsls	r1, r1, #23
 8003ef2:	1c18      	adds	r0, r3, #0
 8003ef4:	f7fc fe6e 	bl	8000bd4 <__aeabi_fdiv>
 8003ef8:	1c03      	adds	r3, r0, #0
 8003efa:	1c18      	adds	r0, r3, #0
 8003efc:	f7ff fab2 	bl	8003464 <__aeabi_f2d>
 8003f00:	0002      	movs	r2, r0
 8003f02:	000b      	movs	r3, r1
 8003f04:	2000      	movs	r0, #0
 8003f06:	2180      	movs	r1, #128	@ 0x80
 8003f08:	05c9      	lsls	r1, r1, #23
 8003f0a:	f023 fbf9 	bl	8027700 <pow>
 8003f0e:	0002      	movs	r2, r0
 8003f10:	000b      	movs	r3, r1
 8003f12:	0010      	movs	r0, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	f7fc fb99 	bl	800064c <__aeabi_d2uiz>
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003f1e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8003f20:	193a      	adds	r2, r7, r4
 8003f22:	2301      	movs	r3, #1
 8003f24:	2101      	movs	r1, #1
 8003f26:	2038      	movs	r0, #56	@ 0x38
 8003f28:	f7ff fbc2 	bl	80036b0 <ReadMemRegister>
    raw._misr = i2cbuf[0];
 8003f2c:	193b      	adds	r3, r7, r4
 8003f2e:	7819      	ldrb	r1, [r3, #0]
 8003f30:	4b07      	ldr	r3, [pc, #28]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003f32:	2220      	movs	r2, #32
 8003f34:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8003f36:	2317      	movs	r3, #23
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	781b      	ldrb	r3, [r3, #0]
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b007      	add	sp, #28
 8003f42:	bd90      	pop	{r4, r7, pc}
 8003f44:	20000464 	.word	0x20000464
 8003f48:	08028ddc 	.word	0x08028ddc
 8003f4c:	08028d04 	.word	0x08028d04
 8003f50:	20000478 	.word	0x20000478

08003f54 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	1dbb      	adds	r3, r7, #6
 8003f5e:	801a      	strh	r2, [r3, #0]
 8003f60:	1d3b      	adds	r3, r7, #4
 8003f62:	1c0a      	adds	r2, r1, #0
 8003f64:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8003f66:	1dbb      	adds	r3, r7, #6
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	2108      	movs	r1, #8
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 8003f72:	1dbb      	adds	r3, r7, #6
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	187b      	adds	r3, r7, r1
 8003f7e:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	187b      	adds	r3, r7, r1
 8003f88:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 8003f8a:	1d3b      	adds	r3, r7, #4
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 8003f98:	187a      	adds	r2, r7, r1
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	2013      	movs	r0, #19
 8003fa0:	f7ff fb56 	bl	8003650 <WriteMemRegister>
 8003fa4:	0003      	movs	r3, r0
 8003fa6:	001a      	movs	r2, r3
 8003fa8:	210f      	movs	r1, #15
 8003faa:	187b      	adds	r3, r7, r1
 8003fac:	701a      	strb	r2, [r3, #0]
  return result;
 8003fae:	187b      	adds	r3, r7, r1
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	1e5a      	subs	r2, r3, #1
 8003fb4:	4193      	sbcs	r3, r2
 8003fb6:	b2db      	uxtb	r3, r3
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b004      	add	sp, #16
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 8003fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 8003fca:	4916      	ldr	r1, [pc, #88]	@ (8004024 <ENS160_set_envdata+0x64>)
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7fc fc77 	bl	80008c0 <__aeabi_fadd>
 8003fd2:	1c03      	adds	r3, r0, #0
 8003fd4:	2185      	movs	r1, #133	@ 0x85
 8003fd6:	05c9      	lsls	r1, r1, #23
 8003fd8:	1c18      	adds	r0, r3, #0
 8003fda:	f7fc ffe1 	bl	8000fa0 <__aeabi_fmul>
 8003fde:	1c03      	adds	r3, r0, #0
 8003fe0:	250e      	movs	r5, #14
 8003fe2:	197c      	adds	r4, r7, r5
 8003fe4:	1c18      	adds	r0, r3, #0
 8003fe6:	f7fc fb19 	bl	800061c <__aeabi_f2uiz>
 8003fea:	0003      	movs	r3, r0
 8003fec:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 8003fee:	2188      	movs	r1, #136	@ 0x88
 8003ff0:	05c9      	lsls	r1, r1, #23
 8003ff2:	6838      	ldr	r0, [r7, #0]
 8003ff4:	f7fc ffd4 	bl	8000fa0 <__aeabi_fmul>
 8003ff8:	1c03      	adds	r3, r0, #0
 8003ffa:	260c      	movs	r6, #12
 8003ffc:	19bc      	adds	r4, r7, r6
 8003ffe:	1c18      	adds	r0, r3, #0
 8004000:	f7fc fb0c 	bl	800061c <__aeabi_f2uiz>
 8004004:	0003      	movs	r3, r0
 8004006:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004008:	19bb      	adds	r3, r7, r6
 800400a:	881a      	ldrh	r2, [r3, #0]
 800400c:	197b      	adds	r3, r7, r5
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	0011      	movs	r1, r2
 8004012:	0018      	movs	r0, r3
 8004014:	f7ff ff9e 	bl	8003f54 <ENS160_set_envdata210>
 8004018:	0003      	movs	r3, r0
}
 800401a:	0018      	movs	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	b005      	add	sp, #20
 8004020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	43889333 	.word	0x43889333

08004028 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b085      	sub	sp, #20
 800402c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800402e:	4bd0      	ldr	r3, [pc, #832]	@ (8004370 <ENS_Upkeep+0x348>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	0018      	movs	r0, r3
 8004034:	f00e faee 	bl	8012614 <TimestampIsReached>
 8004038:	0003      	movs	r3, r0
 800403a:	001a      	movs	r2, r3
 800403c:	2301      	movs	r3, #1
 800403e:	4053      	eors	r3, r2
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <ENS_Upkeep+0x24>
    return ENSState;
 8004046:	4bcb      	ldr	r3, [pc, #812]	@ (8004374 <ENS_Upkeep+0x34c>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	e212      	b.n	8004472 <ENS_Upkeep+0x44a>
  }
  switch(ENSState) {
 800404c:	4bc9      	ldr	r3, [pc, #804]	@ (8004374 <ENS_Upkeep+0x34c>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d900      	bls.n	8004056 <ENS_Upkeep+0x2e>
 8004054:	e1f6      	b.n	8004444 <ENS_Upkeep+0x41c>
 8004056:	009a      	lsls	r2, r3, #2
 8004058:	4bc7      	ldr	r3, [pc, #796]	@ (8004378 <ENS_Upkeep+0x350>)
 800405a:	18d3      	adds	r3, r2, r3
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004060:	4ac6      	ldr	r2, [pc, #792]	@ (800437c <ENS_Upkeep+0x354>)
 8004062:	4bc7      	ldr	r3, [pc, #796]	@ (8004380 <ENS_Upkeep+0x358>)
 8004064:	0019      	movs	r1, r3
 8004066:	2003      	movs	r0, #3
 8004068:	f00e fb2a 	bl	80126c0 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800406c:	f00f f85e 	bl	801312c <HAL_GetTick>
 8004070:	0003      	movs	r3, r0
 8004072:	4ac4      	ldr	r2, [pc, #784]	@ (8004384 <ENS_Upkeep+0x35c>)
 8004074:	189a      	adds	r2, r3, r2
 8004076:	4bbe      	ldr	r3, [pc, #760]	@ (8004370 <ENS_Upkeep+0x348>)
 8004078:	601a      	str	r2, [r3, #0]
    break;
 800407a:	e1f8      	b.n	800446e <ENS_Upkeep+0x446>


  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 800407c:	f008 fc12 	bl	800c8a4 <getSensorLock>
 8004080:	1e03      	subs	r3, r0, #0
 8004082:	d000      	beq.n	8004086 <ENS_Upkeep+0x5e>
 8004084:	e1ea      	b.n	800445c <ENS_Upkeep+0x434>
      break;
    }
    setSensorLock(ENS160);
 8004086:	2005      	movs	r0, #5
 8004088:	f008 fbf8 	bl	800c87c <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 800408c:	1d3c      	adds	r4, r7, #4
 800408e:	2002      	movs	r0, #2
 8004090:	f7ff fca6 	bl	80039e0 <ENS160_setMode>
 8004094:	0003      	movs	r3, r0
 8004096:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <ENS_Upkeep+0x7c>
 80040a0:	4bb9      	ldr	r3, [pc, #740]	@ (8004388 <ENS_Upkeep+0x360>)
 80040a2:	e000      	b.n	80040a6 <ENS_Upkeep+0x7e>
 80040a4:	4bb9      	ldr	r3, [pc, #740]	@ (800438c <ENS_Upkeep+0x364>)
 80040a6:	4aba      	ldr	r2, [pc, #744]	@ (8004390 <ENS_Upkeep+0x368>)
 80040a8:	49b5      	ldr	r1, [pc, #724]	@ (8004380 <ENS_Upkeep+0x358>)
 80040aa:	2003      	movs	r0, #3
 80040ac:	f00e fb08 	bl	80126c0 <CreateLine>
    setSensorLock(FREE);
 80040b0:	2000      	movs	r0, #0
 80040b2:	f008 fbe3 	bl	800c87c <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 80040b6:	4baf      	ldr	r3, [pc, #700]	@ (8004374 <ENS_Upkeep+0x34c>)
 80040b8:	2203      	movs	r2, #3
 80040ba:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80040bc:	f00f f836 	bl	801312c <HAL_GetTick>
 80040c0:	0003      	movs	r3, r0
 80040c2:	22fa      	movs	r2, #250	@ 0xfa
 80040c4:	0092      	lsls	r2, r2, #2
 80040c6:	189a      	adds	r2, r3, r2
 80040c8:	4ba9      	ldr	r3, [pc, #676]	@ (8004370 <ENS_Upkeep+0x348>)
 80040ca:	601a      	str	r2, [r3, #0]
    break;
 80040cc:	e1cf      	b.n	800446e <ENS_Upkeep+0x446>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 80040ce:	f008 fbe9 	bl	800c8a4 <getSensorLock>
 80040d2:	1e03      	subs	r3, r0, #0
 80040d4:	d000      	beq.n	80040d8 <ENS_Upkeep+0xb0>
 80040d6:	e1c3      	b.n	8004460 <ENS_Upkeep+0x438>
      break;
    }
    setSensorLock(ENS160);
 80040d8:	2005      	movs	r0, #5
 80040da:	f008 fbcf 	bl	800c87c <setSensorLock>
    status = ENS160_readStatus();
 80040de:	1d7c      	adds	r4, r7, #5
 80040e0:	f7ff fd2e 	bl	8003b40 <ENS160_readStatus>
 80040e4:	0003      	movs	r3, r0
 80040e6:	7023      	strb	r3, [r4, #0]
    setSensorLock(FREE);
 80040e8:	2000      	movs	r0, #0
 80040ea:	f008 fbc7 	bl	800c87c <setSensorLock>
    if ((status & 0x0C) != 0) {
 80040ee:	1d7b      	adds	r3, r7, #5
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	220c      	movs	r2, #12
 80040f4:	4013      	ands	r3, r2
 80040f6:	d02e      	beq.n	8004156 <ENS_Upkeep+0x12e>
      switch (status >> 2) {
 80040f8:	1d7b      	adds	r3, r7, #5
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	089b      	lsrs	r3, r3, #2
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b03      	cmp	r3, #3
 8004102:	d013      	beq.n	800412c <ENS_Upkeep+0x104>
 8004104:	dc19      	bgt.n	800413a <ENS_Upkeep+0x112>
 8004106:	2b01      	cmp	r3, #1
 8004108:	d002      	beq.n	8004110 <ENS_Upkeep+0xe8>
 800410a:	2b02      	cmp	r3, #2
 800410c:	d007      	beq.n	800411e <ENS_Upkeep+0xf6>
 800410e:	e014      	b.n	800413a <ENS_Upkeep+0x112>
      case 1:
        Debug("ENS160 Warm-Up phase");
 8004110:	4aa0      	ldr	r2, [pc, #640]	@ (8004394 <ENS_Upkeep+0x36c>)
 8004112:	4b9b      	ldr	r3, [pc, #620]	@ (8004380 <ENS_Upkeep+0x358>)
 8004114:	0019      	movs	r1, r3
 8004116:	2003      	movs	r0, #3
 8004118:	f00e fad2 	bl	80126c0 <CreateLine>
        break;
 800411c:	e00d      	b.n	800413a <ENS_Upkeep+0x112>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800411e:	4a9e      	ldr	r2, [pc, #632]	@ (8004398 <ENS_Upkeep+0x370>)
 8004120:	4b97      	ldr	r3, [pc, #604]	@ (8004380 <ENS_Upkeep+0x358>)
 8004122:	0019      	movs	r1, r3
 8004124:	2003      	movs	r0, #3
 8004126:	f00e facb 	bl	80126c0 <CreateLine>
        break;
 800412a:	e006      	b.n	800413a <ENS_Upkeep+0x112>
      case 3:
        Debug("ENS160 Invalid output");
 800412c:	4a9b      	ldr	r2, [pc, #620]	@ (800439c <ENS_Upkeep+0x374>)
 800412e:	4b94      	ldr	r3, [pc, #592]	@ (8004380 <ENS_Upkeep+0x358>)
 8004130:	0019      	movs	r1, r3
 8004132:	2003      	movs	r0, #3
 8004134:	f00e fac4 	bl	80126c0 <CreateLine>
        break;
 8004138:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 800413a:	1d7b      	adds	r3, r7, #5
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2203      	movs	r2, #3
 8004140:	4013      	ands	r3, r2
 8004142:	d108      	bne.n	8004156 <ENS_Upkeep+0x12e>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004144:	f00e fff2 	bl	801312c <HAL_GetTick>
 8004148:	0003      	movs	r3, r0
 800414a:	22fa      	movs	r2, #250	@ 0xfa
 800414c:	0092      	lsls	r2, r2, #2
 800414e:	189a      	adds	r2, r3, r2
 8004150:	4b87      	ldr	r3, [pc, #540]	@ (8004370 <ENS_Upkeep+0x348>)
 8004152:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 8004154:	e18b      	b.n	800446e <ENS_Upkeep+0x446>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 8004156:	4b87      	ldr	r3, [pc, #540]	@ (8004374 <ENS_Upkeep+0x34c>)
 8004158:	2204      	movs	r2, #4
 800415a:	701a      	strb	r2, [r3, #0]
    break;
 800415c:	e187      	b.n	800446e <ENS_Upkeep+0x446>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 800415e:	f008 fba1 	bl	800c8a4 <getSensorLock>
 8004162:	1e03      	subs	r3, r0, #0
 8004164:	d036      	beq.n	80041d4 <ENS_Upkeep+0x1ac>
 8004166:	f008 fb9d 	bl	800c8a4 <getSensorLock>
 800416a:	0003      	movs	r3, r0
 800416c:	2b05      	cmp	r3, #5
 800416e:	d031      	beq.n	80041d4 <ENS_Upkeep+0x1ac>
      uint8_t locktype = getSensorLock();
 8004170:	1dbc      	adds	r4, r7, #6
 8004172:	f008 fb97 	bl	800c8a4 <getSensorLock>
 8004176:	0003      	movs	r3, r0
 8004178:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 800417a:	1dbb      	adds	r3, r7, #6
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d019      	beq.n	80041b6 <ENS_Upkeep+0x18e>
 8004182:	1dbb      	adds	r3, r7, #6
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d013      	beq.n	80041b2 <ENS_Upkeep+0x18a>
 800418a:	1dbb      	adds	r3, r7, #6
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d00d      	beq.n	80041ae <ENS_Upkeep+0x186>
 8004192:	1dbb      	adds	r3, r7, #6
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b03      	cmp	r3, #3
 8004198:	d007      	beq.n	80041aa <ENS_Upkeep+0x182>
 800419a:	1dbb      	adds	r3, r7, #6
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b05      	cmp	r3, #5
 80041a0:	d101      	bne.n	80041a6 <ENS_Upkeep+0x17e>
 80041a2:	4b7f      	ldr	r3, [pc, #508]	@ (80043a0 <ENS_Upkeep+0x378>)
 80041a4:	e008      	b.n	80041b8 <ENS_Upkeep+0x190>
 80041a6:	4b7f      	ldr	r3, [pc, #508]	@ (80043a4 <ENS_Upkeep+0x37c>)
 80041a8:	e006      	b.n	80041b8 <ENS_Upkeep+0x190>
 80041aa:	4b7f      	ldr	r3, [pc, #508]	@ (80043a8 <ENS_Upkeep+0x380>)
 80041ac:	e004      	b.n	80041b8 <ENS_Upkeep+0x190>
 80041ae:	4b7f      	ldr	r3, [pc, #508]	@ (80043ac <ENS_Upkeep+0x384>)
 80041b0:	e002      	b.n	80041b8 <ENS_Upkeep+0x190>
 80041b2:	4b7f      	ldr	r3, [pc, #508]	@ (80043b0 <ENS_Upkeep+0x388>)
 80041b4:	e000      	b.n	80041b8 <ENS_Upkeep+0x190>
 80041b6:	4b7f      	ldr	r3, [pc, #508]	@ (80043b4 <ENS_Upkeep+0x38c>)
 80041b8:	4a7f      	ldr	r2, [pc, #508]	@ (80043b8 <ENS_Upkeep+0x390>)
 80041ba:	4971      	ldr	r1, [pc, #452]	@ (8004380 <ENS_Upkeep+0x358>)
 80041bc:	2003      	movs	r0, #3
 80041be:	f00e fa7f 	bl	80126c0 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 80041c2:	f00e ffb3 	bl	801312c <HAL_GetTick>
 80041c6:	0003      	movs	r3, r0
 80041c8:	334e      	adds	r3, #78	@ 0x4e
 80041ca:	33ff      	adds	r3, #255	@ 0xff
 80041cc:	001a      	movs	r2, r3
 80041ce:	4b68      	ldr	r3, [pc, #416]	@ (8004370 <ENS_Upkeep+0x348>)
 80041d0:	601a      	str	r2, [r3, #0]
      break;
 80041d2:	e14c      	b.n	800446e <ENS_Upkeep+0x446>
    }
    setSensorLock(ENS160);
 80041d4:	2005      	movs	r0, #5
 80041d6:	f008 fb51 	bl	800c87c <setSensorLock>
    status = ENS160_readStatus();
 80041da:	1d7c      	adds	r4, r7, #5
 80041dc:	f7ff fcb0 	bl	8003b40 <ENS160_readStatus>
 80041e0:	0003      	movs	r3, r0
 80041e2:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 80041e4:	1d7b      	adds	r3, r7, #5
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2202      	movs	r2, #2
 80041ea:	4013      	ands	r3, r2
 80041ec:	d10b      	bne.n	8004206 <ENS_Upkeep+0x1de>
      ENS160TimeStamp = HAL_GetTick() + 500;
 80041ee:	f00e ff9d 	bl	801312c <HAL_GetTick>
 80041f2:	0003      	movs	r3, r0
 80041f4:	33f5      	adds	r3, #245	@ 0xf5
 80041f6:	33ff      	adds	r3, #255	@ 0xff
 80041f8:	001a      	movs	r2, r3
 80041fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004370 <ENS_Upkeep+0x348>)
 80041fc:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      setSensorLock(FREE);
 80041fe:	2000      	movs	r0, #0
 8004200:	f008 fb3c 	bl	800c87c <setSensorLock>
      break;
 8004204:	e133      	b.n	800446e <ENS_Upkeep+0x446>
    }
    ENS160_measure(false);
 8004206:	2000      	movs	r0, #0
 8004208:	f7ff fcba 	bl	8003b80 <ENS160_measure>
    HAL_Delay(10);
 800420c:	200a      	movs	r0, #10
 800420e:	f00e ff97 	bl	8013140 <HAL_Delay>
    ENS160_measureRaw(false);
 8004212:	2000      	movs	r0, #0
 8004214:	f7ff fd2e 	bl	8003c74 <ENS160_measureRaw>
    HAL_Delay(10);
 8004218:	200a      	movs	r0, #10
 800421a:	f00e ff91 	bl	8013140 <HAL_Delay>
    setSensorLock(FREE);
 800421e:	2000      	movs	r0, #0
 8004220:	f008 fb2c 	bl	800c87c <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 8004224:	4b53      	ldr	r3, [pc, #332]	@ (8004374 <ENS_Upkeep+0x34c>)
 8004226:	2206      	movs	r2, #6
 8004228:	701a      	strb	r2, [r3, #0]
    break;
 800422a:	e120      	b.n	800446e <ENS_Upkeep+0x446>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 800422c:	4b63      	ldr	r3, [pc, #396]	@ (80043bc <ENS_Upkeep+0x394>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d13b      	bne.n	80042ac <ENS_Upkeep+0x284>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 8004234:	4b62      	ldr	r3, [pc, #392]	@ (80043c0 <ENS_Upkeep+0x398>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	001c      	movs	r4, r3
 800423a:	4b61      	ldr	r3, [pc, #388]	@ (80043c0 <ENS_Upkeep+0x398>)
 800423c:	885b      	ldrh	r3, [r3, #2]
 800423e:	0018      	movs	r0, r3
 8004240:	4b5f      	ldr	r3, [pc, #380]	@ (80043c0 <ENS_Upkeep+0x398>)
 8004242:	889b      	ldrh	r3, [r3, #4]
 8004244:	4a5f      	ldr	r2, [pc, #380]	@ (80043c4 <ENS_Upkeep+0x39c>)
 8004246:	4960      	ldr	r1, [pc, #384]	@ (80043c8 <ENS_Upkeep+0x3a0>)
 8004248:	9301      	str	r3, [sp, #4]
 800424a:	9000      	str	r0, [sp, #0]
 800424c:	0023      	movs	r3, r4
 800424e:	2002      	movs	r0, #2
 8004250:	f00e fa36 	bl	80126c0 <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 8004254:	4b5d      	ldr	r3, [pc, #372]	@ (80043cc <ENS_Upkeep+0x3a4>)
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	4b5c      	ldr	r3, [pc, #368]	@ (80043cc <ENS_Upkeep+0x3a4>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a5c      	ldr	r2, [pc, #368]	@ (80043d0 <ENS_Upkeep+0x3a8>)
 800425e:	495a      	ldr	r1, [pc, #360]	@ (80043c8 <ENS_Upkeep+0x3a0>)
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	0003      	movs	r3, r0
 8004264:	2002      	movs	r0, #2
 8004266:	f00e fa2b 	bl	80126c0 <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 800426a:	4b58      	ldr	r3, [pc, #352]	@ (80043cc <ENS_Upkeep+0x3a4>)
 800426c:	6898      	ldr	r0, [r3, #8]
 800426e:	4b57      	ldr	r3, [pc, #348]	@ (80043cc <ENS_Upkeep+0x3a4>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	4a58      	ldr	r2, [pc, #352]	@ (80043d4 <ENS_Upkeep+0x3ac>)
 8004274:	4954      	ldr	r1, [pc, #336]	@ (80043c8 <ENS_Upkeep+0x3a0>)
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	0003      	movs	r3, r0
 800427a:	2002      	movs	r0, #2
 800427c:	f00e fa20 	bl	80126c0 <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 8004280:	4b52      	ldr	r3, [pc, #328]	@ (80043cc <ENS_Upkeep+0x3a4>)
 8004282:	6918      	ldr	r0, [r3, #16]
 8004284:	4b51      	ldr	r3, [pc, #324]	@ (80043cc <ENS_Upkeep+0x3a4>)
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	4a53      	ldr	r2, [pc, #332]	@ (80043d8 <ENS_Upkeep+0x3b0>)
 800428a:	494f      	ldr	r1, [pc, #316]	@ (80043c8 <ENS_Upkeep+0x3a0>)
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	0003      	movs	r3, r0
 8004290:	2002      	movs	r0, #2
 8004292:	f00e fa15 	bl	80126c0 <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 8004296:	4b4d      	ldr	r3, [pc, #308]	@ (80043cc <ENS_Upkeep+0x3a4>)
 8004298:	6998      	ldr	r0, [r3, #24]
 800429a:	4b4c      	ldr	r3, [pc, #304]	@ (80043cc <ENS_Upkeep+0x3a4>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	4a4f      	ldr	r2, [pc, #316]	@ (80043dc <ENS_Upkeep+0x3b4>)
 80042a0:	4949      	ldr	r1, [pc, #292]	@ (80043c8 <ENS_Upkeep+0x3a0>)
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	0003      	movs	r3, r0
 80042a6:	2002      	movs	r0, #2
 80042a8:	f00e fa0a 	bl	80126c0 <CreateLine>
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 80042ac:	4b43      	ldr	r3, [pc, #268]	@ (80043bc <ENS_Upkeep+0x394>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	d103      	bne.n	80042bc <ENS_Upkeep+0x294>
 80042b4:	4b41      	ldr	r3, [pc, #260]	@ (80043bc <ENS_Upkeep+0x394>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	e005      	b.n	80042c8 <ENS_Upkeep+0x2a0>
 80042bc:	4b3f      	ldr	r3, [pc, #252]	@ (80043bc <ENS_Upkeep+0x394>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	3301      	adds	r3, #1
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	4b3d      	ldr	r3, [pc, #244]	@ (80043bc <ENS_Upkeep+0x394>)
 80042c6:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 80042c8:	4b3d      	ldr	r3, [pc, #244]	@ (80043c0 <ENS_Upkeep+0x398>)
 80042ca:	7818      	ldrb	r0, [r3, #0]
 80042cc:	4b3c      	ldr	r3, [pc, #240]	@ (80043c0 <ENS_Upkeep+0x398>)
 80042ce:	8859      	ldrh	r1, [r3, #2]
 80042d0:	4b3b      	ldr	r3, [pc, #236]	@ (80043c0 <ENS_Upkeep+0x398>)
 80042d2:	889b      	ldrh	r3, [r3, #4]
 80042d4:	001a      	movs	r2, r3
 80042d6:	f000 f9fb 	bl	80046d0 <setENS160>
    ENSState = ENS_LOW_POWER;
 80042da:	4b26      	ldr	r3, [pc, #152]	@ (8004374 <ENS_Upkeep+0x34c>)
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
    break;
 80042e0:	e0c5      	b.n	800446e <ENS_Upkeep+0x446>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80042e2:	f00e ff23 	bl	801312c <HAL_GetTick>
 80042e6:	0003      	movs	r3, r0
 80042e8:	22fa      	movs	r2, #250	@ 0xfa
 80042ea:	0092      	lsls	r2, r2, #2
 80042ec:	189a      	adds	r2, r3, r2
 80042ee:	4b20      	ldr	r3, [pc, #128]	@ (8004370 <ENS_Upkeep+0x348>)
 80042f0:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 80042f2:	4b3b      	ldr	r3, [pc, #236]	@ (80043e0 <ENS_Upkeep+0x3b8>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2201      	movs	r2, #1
 80042f8:	4053      	eors	r3, r2
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d032      	beq.n	8004366 <ENS_Upkeep+0x33e>
 8004300:	4b38      	ldr	r3, [pc, #224]	@ (80043e4 <ENS_Upkeep+0x3bc>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2201      	movs	r2, #1
 8004306:	4053      	eors	r3, r2
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d02b      	beq.n	8004366 <ENS_Upkeep+0x33e>
 800430e:	4b2b      	ldr	r3, [pc, #172]	@ (80043bc <ENS_Upkeep+0x394>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d927      	bls.n	8004366 <ENS_Upkeep+0x33e>
      if (getSensorLock() != FREE) {
 8004316:	f008 fac5 	bl	800c8a4 <getSensorLock>
 800431a:	1e03      	subs	r3, r0, #0
 800431c:	d000      	beq.n	8004320 <ENS_Upkeep+0x2f8>
 800431e:	e0a1      	b.n	8004464 <ENS_Upkeep+0x43c>
        break;
      }
      setSensorLock(ENS160);
 8004320:	2005      	movs	r0, #5
 8004322:	f008 faab 	bl	800c87c <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 8004326:	1cfc      	adds	r4, r7, #3
 8004328:	2000      	movs	r0, #0
 800432a:	f7ff fb59 	bl	80039e0 <ENS160_setMode>
 800432e:	0003      	movs	r3, r0
 8004330:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 8004332:	1cfb      	adds	r3, r7, #3
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <ENS_Upkeep+0x316>
 800433a:	4b13      	ldr	r3, [pc, #76]	@ (8004388 <ENS_Upkeep+0x360>)
 800433c:	e000      	b.n	8004340 <ENS_Upkeep+0x318>
 800433e:	4b13      	ldr	r3, [pc, #76]	@ (800438c <ENS_Upkeep+0x364>)
 8004340:	4a1e      	ldr	r2, [pc, #120]	@ (80043bc <ENS_Upkeep+0x394>)
 8004342:	7812      	ldrb	r2, [r2, #0]
 8004344:	0010      	movs	r0, r2
 8004346:	4a28      	ldr	r2, [pc, #160]	@ (80043e8 <ENS_Upkeep+0x3c0>)
 8004348:	490d      	ldr	r1, [pc, #52]	@ (8004380 <ENS_Upkeep+0x358>)
 800434a:	9000      	str	r0, [sp, #0]
 800434c:	2003      	movs	r0, #3
 800434e:	f00e f9b7 	bl	80126c0 <CreateLine>
      setSensorLock(FREE);
 8004352:	2000      	movs	r0, #0
 8004354:	f008 fa92 	bl	800c87c <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 8004358:	f00e fee8 	bl	801312c <HAL_GetTick>
 800435c:	0003      	movs	r3, r0
 800435e:	4a23      	ldr	r2, [pc, #140]	@ (80043ec <ENS_Upkeep+0x3c4>)
 8004360:	189a      	adds	r2, r3, r2
 8004362:	4b03      	ldr	r3, [pc, #12]	@ (8004370 <ENS_Upkeep+0x348>)
 8004364:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 8004366:	4b03      	ldr	r3, [pc, #12]	@ (8004374 <ENS_Upkeep+0x34c>)
 8004368:	2208      	movs	r2, #8
 800436a:	701a      	strb	r2, [r3, #0]
    break;
 800436c:	e07f      	b.n	800446e <ENS_Upkeep+0x446>
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	20000468 	.word	0x20000468
 8004374:	20000000 	.word	0x20000000
 8004378:	0802c828 	.word	0x0802c828
 800437c:	08028dfc 	.word	0x08028dfc
 8004380:	08028d04 	.word	0x08028d04
 8004384:	002f9b80 	.word	0x002f9b80
 8004388:	08028e30 	.word	0x08028e30
 800438c:	08028e38 	.word	0x08028e38
 8004390:	08028e40 	.word	0x08028e40
 8004394:	08028e64 	.word	0x08028e64
 8004398:	08028e7c 	.word	0x08028e7c
 800439c:	08028e9c 	.word	0x08028e9c
 80043a0:	08028eb4 	.word	0x08028eb4
 80043a4:	08028ebc 	.word	0x08028ebc
 80043a8:	08028ec4 	.word	0x08028ec4
 80043ac:	08028ecc 	.word	0x08028ecc
 80043b0:	08028ed4 	.word	0x08028ed4
 80043b4:	08028edc 	.word	0x08028edc
 80043b8:	08028ee4 	.word	0x08028ee4
 80043bc:	2000046c 	.word	0x2000046c
 80043c0:	2000049c 	.word	0x2000049c
 80043c4:	08028f0c 	.word	0x08028f0c
 80043c8:	08028d74 	.word	0x08028d74
 80043cc:	20000478 	.word	0x20000478
 80043d0:	08028f38 	.word	0x08028f38
 80043d4:	08028f54 	.word	0x08028f54
 80043d8:	08028f70 	.word	0x08028f70
 80043dc:	08028f8c 	.word	0x08028f8c
 80043e0:	20001e7d 	.word	0x20001e7d
 80043e4:	20001e7e 	.word	0x20001e7e
 80043e8:	08028fa8 	.word	0x08028fa8
 80043ec:	0000afc8 	.word	0x0000afc8

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 80043f0:	f008 fa58 	bl	800c8a4 <getSensorLock>
 80043f4:	1e03      	subs	r3, r0, #0
 80043f6:	d137      	bne.n	8004468 <ENS_Upkeep+0x440>
        break;
      }
      setSensorLock(ENS160);
 80043f8:	2005      	movs	r0, #5
 80043fa:	f008 fa3f 	bl	800c87c <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 80043fe:	1cba      	adds	r2, r7, #2
 8004400:	2301      	movs	r3, #1
 8004402:	2101      	movs	r1, #1
 8004404:	2010      	movs	r0, #16
 8004406:	f7ff f953 	bl	80036b0 <ReadMemRegister>
      if (data == 0) {
 800440a:	1cbb      	adds	r3, r7, #2
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d111      	bne.n	8004436 <ENS_Upkeep+0x40e>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004412:	1dfc      	adds	r4, r7, #7
 8004414:	2002      	movs	r0, #2
 8004416:	f7ff fae3 	bl	80039e0 <ENS160_setMode>
 800441a:	0003      	movs	r3, r0
 800441c:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 800441e:	1dfb      	adds	r3, r7, #7
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <ENS_Upkeep+0x402>
 8004426:	4b15      	ldr	r3, [pc, #84]	@ (800447c <ENS_Upkeep+0x454>)
 8004428:	e000      	b.n	800442c <ENS_Upkeep+0x404>
 800442a:	4b15      	ldr	r3, [pc, #84]	@ (8004480 <ENS_Upkeep+0x458>)
 800442c:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <ENS_Upkeep+0x45c>)
 800442e:	4916      	ldr	r1, [pc, #88]	@ (8004488 <ENS_Upkeep+0x460>)
 8004430:	2003      	movs	r0, #3
 8004432:	f00e f945 	bl	80126c0 <CreateLine>
      }
      setSensorLock(FREE);
 8004436:	2000      	movs	r0, #0
 8004438:	f008 fa20 	bl	800c87c <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 800443c:	4b13      	ldr	r3, [pc, #76]	@ (800448c <ENS_Upkeep+0x464>)
 800443e:	2203      	movs	r2, #3
 8004440:	701a      	strb	r2, [r3, #0]
    break;
 8004442:	e014      	b.n	800446e <ENS_Upkeep+0x446>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 8004444:	4b11      	ldr	r3, [pc, #68]	@ (800448c <ENS_Upkeep+0x464>)
 8004446:	2202      	movs	r2, #2
 8004448:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 800444a:	f008 fa2b 	bl	800c8a4 <getSensorLock>
 800444e:	0003      	movs	r3, r0
 8004450:	2b05      	cmp	r3, #5
 8004452:	d00b      	beq.n	800446c <ENS_Upkeep+0x444>
      setSensorLock(FREE);
 8004454:	2000      	movs	r0, #0
 8004456:	f008 fa11 	bl	800c87c <setSensorLock>
    }
    break;
 800445a:	e007      	b.n	800446c <ENS_Upkeep+0x444>
      break;
 800445c:	46c0      	nop			@ (mov r8, r8)
 800445e:	e006      	b.n	800446e <ENS_Upkeep+0x446>
      break;
 8004460:	46c0      	nop			@ (mov r8, r8)
 8004462:	e004      	b.n	800446e <ENS_Upkeep+0x446>
        break;
 8004464:	46c0      	nop			@ (mov r8, r8)
 8004466:	e002      	b.n	800446e <ENS_Upkeep+0x446>
        break;
 8004468:	46c0      	nop			@ (mov r8, r8)
 800446a:	e000      	b.n	800446e <ENS_Upkeep+0x446>
    break;
 800446c:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 800446e:	4b07      	ldr	r3, [pc, #28]	@ (800448c <ENS_Upkeep+0x464>)
 8004470:	781b      	ldrb	r3, [r3, #0]
}
 8004472:	0018      	movs	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	b003      	add	sp, #12
 8004478:	bd90      	pop	{r4, r7, pc}
 800447a:	46c0      	nop			@ (mov r8, r8)
 800447c:	08028e30 	.word	0x08028e30
 8004480:	08028e38 	.word	0x08028e38
 8004484:	08028fe0 	.word	0x08028fe0
 8004488:	08028d04 	.word	0x08028d04
 800448c:	20000000 	.word	0x20000000

08004490 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8004494:	4b02      	ldr	r3, [pc, #8]	@ (80044a0 <forceNTPupdate+0x10>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000688 	.word	0x20000688

080044a4 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80044ac:	f00e fe3e 	bl	801312c <HAL_GetTick>
 80044b0:	0002      	movs	r2, r0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	18d2      	adds	r2, r2, r3
 80044b6:	4b03      	ldr	r3, [pc, #12]	@ (80044c4 <setESPTimeStamp+0x20>)
 80044b8:	601a      	str	r2, [r3, #0]
}
 80044ba:	46c0      	nop			@ (mov r8, r8)
 80044bc:	46bd      	mov	sp, r7
 80044be:	b002      	add	sp, #8
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	20000684 	.word	0x20000684

080044c8 <setCharges>:
void setCharges(){
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80044cc:	f004 fa36 	bl	800893c <ReadBatteryVoltage>
 80044d0:	1c02      	adds	r2, r0, #0
 80044d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <setCharges+0x3c>)
 80044d4:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 80044d6:	f004 fa93 	bl	8008a00 <ReadSolarVoltage>
 80044da:	0003      	movs	r3, r0
 80044dc:	0018      	movs	r0, r3
 80044de:	f7fe ff6f 	bl	80033c0 <__aeabi_i2d>
 80044e2:	2200      	movs	r2, #0
 80044e4:	4b08      	ldr	r3, [pc, #32]	@ (8004508 <setCharges+0x40>)
 80044e6:	f7fd fc65 	bl	8001db4 <__aeabi_ddiv>
 80044ea:	0002      	movs	r2, r0
 80044ec:	000b      	movs	r3, r1
 80044ee:	0010      	movs	r0, r2
 80044f0:	0019      	movs	r1, r3
 80044f2:	f7fe ffff 	bl	80034f4 <__aeabi_d2f>
 80044f6:	1c02      	adds	r2, r0, #0
 80044f8:	4b04      	ldr	r3, [pc, #16]	@ (800450c <setCharges+0x44>)
 80044fa:	601a      	str	r2, [r3, #0]
}
 80044fc:	46c0      	nop			@ (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	200005dc 	.word	0x200005dc
 8004508:	408f4000 	.word	0x408f4000
 800450c:	200005e0 	.word	0x200005e0

08004510 <checkEEprom>:
bool checkEEprom(){
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8004516:	4b15      	ldr	r3, [pc, #84]	@ (800456c <checkEEprom+0x5c>)
 8004518:	4815      	ldr	r0, [pc, #84]	@ (8004570 <checkEEprom+0x60>)
 800451a:	220c      	movs	r2, #12
 800451c:	0019      	movs	r1, r3
 800451e:	f006 fc5f 	bl	800ade0 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8004522:	1dfb      	adds	r3, r7, #7
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	e00e      	b.n	8004548 <checkEEprom+0x38>
    configSum += tempConfig[i];
 800452a:	1dfb      	adds	r3, r7, #7
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	4a0f      	ldr	r2, [pc, #60]	@ (800456c <checkEEprom+0x5c>)
 8004530:	5cd3      	ldrb	r3, [r2, r3]
 8004532:	001a      	movs	r2, r3
 8004534:	4b0f      	ldr	r3, [pc, #60]	@ (8004574 <checkEEprom+0x64>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	18d2      	adds	r2, r2, r3
 800453a:	4b0e      	ldr	r3, [pc, #56]	@ (8004574 <checkEEprom+0x64>)
 800453c:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800453e:	1dfb      	adds	r3, r7, #7
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	1dfb      	adds	r3, r7, #7
 8004544:	3201      	adds	r2, #1
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	1dfb      	adds	r3, r7, #7
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b0b      	cmp	r3, #11
 800454e:	d9ec      	bls.n	800452a <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8004550:	4b08      	ldr	r3, [pc, #32]	@ (8004574 <checkEEprom+0x64>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	425a      	negs	r2, r3
 8004556:	4153      	adcs	r3, r2
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4b07      	ldr	r3, [pc, #28]	@ (8004578 <checkEEprom+0x68>)
 800455c:	701a      	strb	r2, [r3, #0]
  return test;
 800455e:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <checkEEprom+0x68>)
 8004560:	781b      	ldrb	r3, [r3, #0]
}
 8004562:	0018      	movs	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	b002      	add	sp, #8
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			@ (mov r8, r8)
 800456c:	20000708 	.word	0x20000708
 8004570:	0808000c 	.word	0x0808000c
 8004574:	20000714 	.word	0x20000714
 8004578:	20000718 	.word	0x20000718

0800457c <checkName>:
bool checkName(){
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004582:	4b15      	ldr	r3, [pc, #84]	@ (80045d8 <checkName+0x5c>)
 8004584:	4815      	ldr	r0, [pc, #84]	@ (80045dc <checkName+0x60>)
 8004586:	2220      	movs	r2, #32
 8004588:	0019      	movs	r1, r3
 800458a:	f006 fc29 	bl	800ade0 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800458e:	1dfb      	adds	r3, r7, #7
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	e00e      	b.n	80045b4 <checkName+0x38>
    configSum += nameConfig[i];
 8004596:	1dfb      	adds	r3, r7, #7
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	4a0f      	ldr	r2, [pc, #60]	@ (80045d8 <checkName+0x5c>)
 800459c:	5cd3      	ldrb	r3, [r2, r3]
 800459e:	001a      	movs	r2, r3
 80045a0:	4b0f      	ldr	r3, [pc, #60]	@ (80045e0 <checkName+0x64>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	18d2      	adds	r2, r2, r3
 80045a6:	4b0e      	ldr	r3, [pc, #56]	@ (80045e0 <checkName+0x64>)
 80045a8:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80045aa:	1dfb      	adds	r3, r7, #7
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	1dfb      	adds	r3, r7, #7
 80045b0:	3201      	adds	r2, #1
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	1dfb      	adds	r3, r7, #7
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b0b      	cmp	r3, #11
 80045ba:	d9ec      	bls.n	8004596 <checkName+0x1a>
  }
  test = (configSum != 0);
 80045bc:	4b08      	ldr	r3, [pc, #32]	@ (80045e0 <checkName+0x64>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	1e5a      	subs	r2, r3, #1
 80045c2:	4193      	sbcs	r3, r2
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	4b07      	ldr	r3, [pc, #28]	@ (80045e4 <checkName+0x68>)
 80045c8:	701a      	strb	r2, [r3, #0]
  return test;
 80045ca:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <checkName+0x68>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b002      	add	sp, #8
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			@ (mov r8, r8)
 80045d8:	2000071c 	.word	0x2000071c
 80045dc:	08080090 	.word	0x08080090
 80045e0:	2000073c 	.word	0x2000073c
 80045e4:	20000740 	.word	0x20000740

080045e8 <setHIDS>:


void setHIDS(float temp, float humid){
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80045f2:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <setHIDS+0x20>)
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 80045f8:	4b03      	ldr	r3, [pc, #12]	@ (8004608 <setHIDS+0x20>)
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b002      	add	sp, #8
 8004604:	bd80      	pop	{r7, pc}
 8004606:	46c0      	nop			@ (mov r8, r8)
 8004608:	20000694 	.word	0x20000694

0800460c <setVOC>:

void setVOC(uint16_t voc) {
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	0002      	movs	r2, r0
 8004614:	1dbb      	adds	r3, r7, #6
 8004616:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004618:	4b04      	ldr	r3, [pc, #16]	@ (800462c <setVOC+0x20>)
 800461a:	1dba      	adds	r2, r7, #6
 800461c:	2150      	movs	r1, #80	@ 0x50
 800461e:	8812      	ldrh	r2, [r2, #0]
 8004620:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004622:	46c0      	nop			@ (mov r8, r8)
 8004624:	46bd      	mov	sp, r7
 8004626:	b002      	add	sp, #8
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	20000694 	.word	0x20000694

08004630 <setAHT2x>:

void setAHT2x(float airhum, float airtemp) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 800463a:	4b10      	ldr	r3, [pc, #64]	@ (800467c <setAHT2x+0x4c>)
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (airhum > MeasVal.AHT2x_humiditymax) {
 8004640:	4b0e      	ldr	r3, [pc, #56]	@ (800467c <setAHT2x+0x4c>)
 8004642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004644:	1c19      	adds	r1, r3, #0
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fb ff86 	bl	8000558 <__aeabi_fcmpgt>
 800464c:	1e03      	subs	r3, r0, #0
 800464e:	d002      	beq.n	8004656 <setAHT2x+0x26>
    MeasVal.AHT2x_humiditymax = airhum;
 8004650:	4b0a      	ldr	r3, [pc, #40]	@ (800467c <setAHT2x+0x4c>)
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  MeasVal.AHT2x_temperature = airtemp;
 8004656:	4b09      	ldr	r3, [pc, #36]	@ (800467c <setAHT2x+0x4c>)
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (airtemp > MeasVal.AHT2x_temperaturemax) {
 800465c:	4b07      	ldr	r3, [pc, #28]	@ (800467c <setAHT2x+0x4c>)
 800465e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004660:	1c19      	adds	r1, r3, #0
 8004662:	6838      	ldr	r0, [r7, #0]
 8004664:	f7fb ff78 	bl	8000558 <__aeabi_fcmpgt>
 8004668:	1e03      	subs	r3, r0, #0
 800466a:	d100      	bne.n	800466e <setAHT2x+0x3e>
    MeasVal.AHT2x_temperaturemax = airtemp;
  }
}
 800466c:	e002      	b.n	8004674 <setAHT2x+0x44>
    MeasVal.AHT2x_temperaturemax = airtemp;
 800466e:	4b03      	ldr	r3, [pc, #12]	@ (800467c <setAHT2x+0x4c>)
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004674:	46c0      	nop			@ (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	b002      	add	sp, #8
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000694 	.word	0x20000694

08004680 <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 800468a:	4b10      	ldr	r3, [pc, #64]	@ (80046cc <setBMP280+0x4c>)
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	641a      	str	r2, [r3, #64]	@ 0x40
  if (airtemp > MeasVal.BMP280_temperaturemax) {
 8004690:	4b0e      	ldr	r3, [pc, #56]	@ (80046cc <setBMP280+0x4c>)
 8004692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004694:	1c19      	adds	r1, r3, #0
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fb ff5e 	bl	8000558 <__aeabi_fcmpgt>
 800469c:	1e03      	subs	r3, r0, #0
 800469e:	d002      	beq.n	80046a6 <setBMP280+0x26>
    MeasVal.BMP280_temperaturemax = airtemp;
 80046a0:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <setBMP280+0x4c>)
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  MeasVal.BMP280_airpressure = airhpa;
 80046a6:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <setBMP280+0x4c>)
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	649a      	str	r2, [r3, #72]	@ 0x48
  if (airhpa > MeasVal.BMP280_airpressuremax) {
 80046ac:	4b07      	ldr	r3, [pc, #28]	@ (80046cc <setBMP280+0x4c>)
 80046ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b0:	1c19      	adds	r1, r3, #0
 80046b2:	6838      	ldr	r0, [r7, #0]
 80046b4:	f7fb ff50 	bl	8000558 <__aeabi_fcmpgt>
 80046b8:	1e03      	subs	r3, r0, #0
 80046ba:	d100      	bne.n	80046be <setBMP280+0x3e>
    MeasVal.BMP280_airpressuremax = airhpa;
  }
}
 80046bc:	e002      	b.n	80046c4 <setBMP280+0x44>
    MeasVal.BMP280_airpressuremax = airhpa;
 80046be:	4b03      	ldr	r3, [pc, #12]	@ (80046cc <setBMP280+0x4c>)
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80046c4:	46c0      	nop			@ (mov r8, r8)
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b002      	add	sp, #8
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20000694 	.word	0x20000694

080046d0 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	0004      	movs	r4, r0
 80046d8:	0008      	movs	r0, r1
 80046da:	0011      	movs	r1, r2
 80046dc:	1dfb      	adds	r3, r7, #7
 80046de:	1c22      	adds	r2, r4, #0
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	1d3b      	adds	r3, r7, #4
 80046e4:	1c02      	adds	r2, r0, #0
 80046e6:	801a      	strh	r2, [r3, #0]
 80046e8:	1cbb      	adds	r3, r7, #2
 80046ea:	1c0a      	adds	r2, r1, #0
 80046ec:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 80046ee:	4b15      	ldr	r3, [pc, #84]	@ (8004744 <setENS160+0x74>)
 80046f0:	1dfa      	adds	r2, r7, #7
 80046f2:	215c      	movs	r1, #92	@ 0x5c
 80046f4:	7812      	ldrb	r2, [r2, #0]
 80046f6:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 80046f8:	4b12      	ldr	r3, [pc, #72]	@ (8004744 <setENS160+0x74>)
 80046fa:	225d      	movs	r2, #93	@ 0x5d
 80046fc:	5c9b      	ldrb	r3, [r3, r2]
 80046fe:	1dfa      	adds	r2, r7, #7
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d904      	bls.n	8004710 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004706:	4b0f      	ldr	r3, [pc, #60]	@ (8004744 <setENS160+0x74>)
 8004708:	1dfa      	adds	r2, r7, #7
 800470a:	215d      	movs	r1, #93	@ 0x5d
 800470c:	7812      	ldrb	r2, [r2, #0]
 800470e:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004710:	4b0c      	ldr	r3, [pc, #48]	@ (8004744 <setENS160+0x74>)
 8004712:	1d3a      	adds	r2, r7, #4
 8004714:	2152      	movs	r1, #82	@ 0x52
 8004716:	8812      	ldrh	r2, [r2, #0]
 8004718:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 800471a:	4b0a      	ldr	r3, [pc, #40]	@ (8004744 <setENS160+0x74>)
 800471c:	1cba      	adds	r2, r7, #2
 800471e:	2158      	movs	r1, #88	@ 0x58
 8004720:	8812      	ldrh	r2, [r2, #0]
 8004722:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004724:	4b07      	ldr	r3, [pc, #28]	@ (8004744 <setENS160+0x74>)
 8004726:	225a      	movs	r2, #90	@ 0x5a
 8004728:	5a9b      	ldrh	r3, [r3, r2]
 800472a:	1cba      	adds	r2, r7, #2
 800472c:	8812      	ldrh	r2, [r2, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d904      	bls.n	800473c <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004732:	4b04      	ldr	r3, [pc, #16]	@ (8004744 <setENS160+0x74>)
 8004734:	1cba      	adds	r2, r7, #2
 8004736:	215a      	movs	r1, #90	@ 0x5a
 8004738:	8812      	ldrh	r2, [r2, #0]
 800473a:	525a      	strh	r2, [r3, r1]
  }
}
 800473c:	46c0      	nop			@ (mov r8, r8)
 800473e:	46bd      	mov	sp, r7
 8004740:	b003      	add	sp, #12
 8004742:	bd90      	pop	{r4, r7, pc}
 8004744:	20000694 	.word	0x20000694

08004748 <sethPa>:

void sethPa(float hPa) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  MeasVal.hPaValue = hPa;
 8004750:	4b09      	ldr	r3, [pc, #36]	@ (8004778 <sethPa+0x30>)
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	66da      	str	r2, [r3, #108]	@ 0x6c
  if (hPa > MeasVal.hPaValuemax) {
 8004756:	4b08      	ldr	r3, [pc, #32]	@ (8004778 <sethPa+0x30>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	1c19      	adds	r1, r3, #0
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fb fefb 	bl	8000558 <__aeabi_fcmpgt>
 8004762:	1e03      	subs	r3, r0, #0
 8004764:	d100      	bne.n	8004768 <sethPa+0x20>
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 8004766:	e002      	b.n	800476e <sethPa+0x26>
    MeasVal.hPaValuemax = hPa;
 8004768:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <sethPa+0x30>)
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	671a      	str	r2, [r3, #112]	@ 0x70
}
 800476e:	46c0      	nop			@ (mov r8, r8)
 8004770:	46bd      	mov	sp, r7
 8004772:	b002      	add	sp, #8
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			@ (mov r8, r8)
 8004778:	20000694 	.word	0x20000694

0800477c <setMic>:


void setMic(float dB, float dBmax, float dBAavg){
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004788:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <setMic+0x28>)
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	661a      	str	r2, [r3, #96]	@ 0x60
  MeasVal.dBApeak = dBmax;
 800478e:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <setMic+0x28>)
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	665a      	str	r2, [r3, #100]	@ 0x64
  MeasVal.dBAaverage = dBAavg;
 8004794:	4b03      	ldr	r3, [pc, #12]	@ (80047a4 <setMic+0x28>)
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	669a      	str	r2, [r3, #104]	@ 0x68
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	46bd      	mov	sp, r7
 800479e:	b004      	add	sp, #16
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	20000694 	.word	0x20000694

080047a8 <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	0002      	movs	r2, r0
 80047b0:	1dbb      	adds	r3, r7, #6
 80047b2:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 80047b4:	1dbb      	adds	r3, r7, #6
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fc ff09 	bl	80015d0 <__aeabi_i2f>
 80047be:	1c03      	adds	r3, r0, #0
 80047c0:	490d      	ldr	r1, [pc, #52]	@ (80047f8 <setPM1p0+0x50>)
 80047c2:	1c18      	adds	r0, r3, #0
 80047c4:	f7fc fa06 	bl	8000bd4 <__aeabi_fdiv>
 80047c8:	1c03      	adds	r3, r0, #0
 80047ca:	1c1a      	adds	r2, r3, #0
 80047cc:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <setPM1p0+0x54>)
 80047ce:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 80047d0:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <setPM1p0+0x54>)
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	4b09      	ldr	r3, [pc, #36]	@ (80047fc <setPM1p0+0x54>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	1c19      	adds	r1, r3, #0
 80047da:	1c10      	adds	r0, r2, #0
 80047dc:	f7fb febc 	bl	8000558 <__aeabi_fcmpgt>
 80047e0:	1e03      	subs	r3, r0, #0
 80047e2:	d100      	bne.n	80047e6 <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 80047e4:	e003      	b.n	80047ee <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 80047e6:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <setPM1p0+0x54>)
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	4b04      	ldr	r3, [pc, #16]	@ (80047fc <setPM1p0+0x54>)
 80047ec:	60da      	str	r2, [r3, #12]
}
 80047ee:	46c0      	nop			@ (mov r8, r8)
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b002      	add	sp, #8
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	41200000 	.word	0x41200000
 80047fc:	20000694 	.word	0x20000694

08004800 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	0002      	movs	r2, r0
 8004808:	1dbb      	adds	r3, r7, #6
 800480a:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 800480c:	1dbb      	adds	r3, r7, #6
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	0018      	movs	r0, r3
 8004812:	f7fc fedd 	bl	80015d0 <__aeabi_i2f>
 8004816:	1c03      	adds	r3, r0, #0
 8004818:	490d      	ldr	r1, [pc, #52]	@ (8004850 <setPM2p5+0x50>)
 800481a:	1c18      	adds	r0, r3, #0
 800481c:	f7fc f9da 	bl	8000bd4 <__aeabi_fdiv>
 8004820:	1c03      	adds	r3, r0, #0
 8004822:	1c1a      	adds	r2, r3, #0
 8004824:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <setPM2p5+0x54>)
 8004826:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004828:	4b0a      	ldr	r3, [pc, #40]	@ (8004854 <setPM2p5+0x54>)
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	4b09      	ldr	r3, [pc, #36]	@ (8004854 <setPM2p5+0x54>)
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	1c19      	adds	r1, r3, #0
 8004832:	1c10      	adds	r0, r2, #0
 8004834:	f7fb fe90 	bl	8000558 <__aeabi_fcmpgt>
 8004838:	1e03      	subs	r3, r0, #0
 800483a:	d100      	bne.n	800483e <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 800483c:	e003      	b.n	8004846 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 800483e:	4b05      	ldr	r3, [pc, #20]	@ (8004854 <setPM2p5+0x54>)
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	4b04      	ldr	r3, [pc, #16]	@ (8004854 <setPM2p5+0x54>)
 8004844:	615a      	str	r2, [r3, #20]
}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	46bd      	mov	sp, r7
 800484a:	b002      	add	sp, #8
 800484c:	bd80      	pop	{r7, pc}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	41200000 	.word	0x41200000
 8004854:	20000694 	.word	0x20000694

08004858 <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	0002      	movs	r2, r0
 8004860:	1dbb      	adds	r3, r7, #6
 8004862:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004864:	1dbb      	adds	r3, r7, #6
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	0018      	movs	r0, r3
 800486a:	f7fc feb1 	bl	80015d0 <__aeabi_i2f>
 800486e:	1c03      	adds	r3, r0, #0
 8004870:	490d      	ldr	r1, [pc, #52]	@ (80048a8 <setPM4p0+0x50>)
 8004872:	1c18      	adds	r0, r3, #0
 8004874:	f7fc f9ae 	bl	8000bd4 <__aeabi_fdiv>
 8004878:	1c03      	adds	r3, r0, #0
 800487a:	1c1a      	adds	r2, r3, #0
 800487c:	4b0b      	ldr	r3, [pc, #44]	@ (80048ac <setPM4p0+0x54>)
 800487e:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004880:	4b0a      	ldr	r3, [pc, #40]	@ (80048ac <setPM4p0+0x54>)
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	4b09      	ldr	r3, [pc, #36]	@ (80048ac <setPM4p0+0x54>)
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	1c19      	adds	r1, r3, #0
 800488a:	1c10      	adds	r0, r2, #0
 800488c:	f7fb fe64 	bl	8000558 <__aeabi_fcmpgt>
 8004890:	1e03      	subs	r3, r0, #0
 8004892:	d100      	bne.n	8004896 <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004894:	e003      	b.n	800489e <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004896:	4b05      	ldr	r3, [pc, #20]	@ (80048ac <setPM4p0+0x54>)
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	4b04      	ldr	r3, [pc, #16]	@ (80048ac <setPM4p0+0x54>)
 800489c:	61da      	str	r2, [r3, #28]
}
 800489e:	46c0      	nop			@ (mov r8, r8)
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b002      	add	sp, #8
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	46c0      	nop			@ (mov r8, r8)
 80048a8:	41200000 	.word	0x41200000
 80048ac:	20000694 	.word	0x20000694

080048b0 <setPM10>:

void setPM10(uint16_t PM10) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	0002      	movs	r2, r0
 80048b8:	1dbb      	adds	r3, r7, #6
 80048ba:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 80048bc:	1dbb      	adds	r3, r7, #6
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7fc fe85 	bl	80015d0 <__aeabi_i2f>
 80048c6:	1c03      	adds	r3, r0, #0
 80048c8:	490d      	ldr	r1, [pc, #52]	@ (8004900 <setPM10+0x50>)
 80048ca:	1c18      	adds	r0, r3, #0
 80048cc:	f7fc f982 	bl	8000bd4 <__aeabi_fdiv>
 80048d0:	1c03      	adds	r3, r0, #0
 80048d2:	1c1a      	adds	r2, r3, #0
 80048d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004904 <setPM10+0x54>)
 80048d6:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80048d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004904 <setPM10+0x54>)
 80048da:	6a1a      	ldr	r2, [r3, #32]
 80048dc:	4b09      	ldr	r3, [pc, #36]	@ (8004904 <setPM10+0x54>)
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	1c19      	adds	r1, r3, #0
 80048e2:	1c10      	adds	r0, r2, #0
 80048e4:	f7fb fe38 	bl	8000558 <__aeabi_fcmpgt>
 80048e8:	1e03      	subs	r3, r0, #0
 80048ea:	d100      	bne.n	80048ee <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 80048ec:	e003      	b.n	80048f6 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 80048ee:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <setPM10+0x54>)
 80048f0:	6a1a      	ldr	r2, [r3, #32]
 80048f2:	4b04      	ldr	r3, [pc, #16]	@ (8004904 <setPM10+0x54>)
 80048f4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b002      	add	sp, #8
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	46c0      	nop			@ (mov r8, r8)
 8004900:	41200000 	.word	0x41200000
 8004904:	20000694 	.word	0x20000694

08004908 <setNOx>:

void setNOx(uint16_t nox) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	0002      	movs	r2, r0
 8004910:	1dbb      	adds	r3, r7, #6
 8004912:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 8004914:	4b0a      	ldr	r3, [pc, #40]	@ (8004940 <setNOx+0x38>)
 8004916:	1dba      	adds	r2, r7, #6
 8004918:	2154      	movs	r1, #84	@ 0x54
 800491a:	8812      	ldrh	r2, [r2, #0]
 800491c:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 800491e:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <setNOx+0x38>)
 8004920:	2256      	movs	r2, #86	@ 0x56
 8004922:	5a9b      	ldrh	r3, [r3, r2]
 8004924:	1dba      	adds	r2, r7, #6
 8004926:	8812      	ldrh	r2, [r2, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d904      	bls.n	8004936 <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 800492c:	4b04      	ldr	r3, [pc, #16]	@ (8004940 <setNOx+0x38>)
 800492e:	1dba      	adds	r2, r7, #6
 8004930:	2156      	movs	r1, #86	@ 0x56
 8004932:	8812      	ldrh	r2, [r2, #0]
 8004934:	525a      	strh	r2, [r3, r1]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8004936:	46c0      	nop			@ (mov r8, r8)
 8004938:	46bd      	mov	sp, r7
 800493a:	b002      	add	sp, #8
 800493c:	bd80      	pop	{r7, pc}
 800493e:	46c0      	nop			@ (mov r8, r8)
 8004940:	20000694 	.word	0x20000694

08004944 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004948:	f008 fb62 	bl	800d010 <sen5x_Get_sen5x_enable_state>
 800494c:	1e03      	subs	r3, r0, #0
 800494e:	d00f      	beq.n	8004970 <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004950:	4b14      	ldr	r3, [pc, #80]	@ (80049a4 <resetMaxMeasurementValues+0x60>)
 8004952:	2200      	movs	r2, #0
 8004954:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004956:	4b13      	ldr	r3, [pc, #76]	@ (80049a4 <resetMaxMeasurementValues+0x60>)
 8004958:	2200      	movs	r2, #0
 800495a:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 800495c:	4b11      	ldr	r3, [pc, #68]	@ (80049a4 <resetMaxMeasurementValues+0x60>)
 800495e:	2200      	movs	r2, #0
 8004960:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004962:	4b10      	ldr	r3, [pc, #64]	@ (80049a4 <resetMaxMeasurementValues+0x60>)
 8004964:	2200      	movs	r2, #0
 8004966:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004968:	4b0e      	ldr	r3, [pc, #56]	@ (80049a4 <resetMaxMeasurementValues+0x60>)
 800496a:	2256      	movs	r2, #86	@ 0x56
 800496c:	2100      	movs	r1, #0
 800496e:	5299      	strh	r1, [r3, r2]
  }
  MeasVal.AHT2x_humiditymax = 0.0;
 8004970:	4b0c      	ldr	r3, [pc, #48]	@ (80049a4 <resetMaxMeasurementValues+0x60>)
 8004972:	2200      	movs	r2, #0
 8004974:	635a      	str	r2, [r3, #52]	@ 0x34
  MeasVal.AHT2x_temperaturemax = 0.0;
 8004976:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <resetMaxMeasurementValues+0x60>)
 8004978:	2200      	movs	r2, #0
 800497a:	63da      	str	r2, [r3, #60]	@ 0x3c
  MeasVal.BMP280_temperaturemax = 0.0;
 800497c:	4b09      	ldr	r3, [pc, #36]	@ (80049a4 <resetMaxMeasurementValues+0x60>)
 800497e:	2200      	movs	r2, #0
 8004980:	645a      	str	r2, [r3, #68]	@ 0x44
  MeasVal.BMP280_airpressuremax = 0.0;
 8004982:	4b08      	ldr	r3, [pc, #32]	@ (80049a4 <resetMaxMeasurementValues+0x60>)
 8004984:	2200      	movs	r2, #0
 8004986:	64da      	str	r2, [r3, #76]	@ 0x4c
  MeasVal.eCO2Indexmax = 0;
 8004988:	4b06      	ldr	r3, [pc, #24]	@ (80049a4 <resetMaxMeasurementValues+0x60>)
 800498a:	225a      	movs	r2, #90	@ 0x5a
 800498c:	2100      	movs	r1, #0
 800498e:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004990:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <resetMaxMeasurementValues+0x60>)
 8004992:	225d      	movs	r2, #93	@ 0x5d
 8004994:	2100      	movs	r1, #0
 8004996:	5499      	strb	r1, [r3, r2]
  MeasVal.hPaValuemax = 0.0;
 8004998:	4b02      	ldr	r3, [pc, #8]	@ (80049a4 <resetMaxMeasurementValues+0x60>)
 800499a:	2200      	movs	r2, #0
 800499c:	671a      	str	r2, [r3, #112]	@ 0x70
}
 800499e:	46c0      	nop			@ (mov r8, r8)
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000694 	.word	0x20000694

080049a8 <SetConfigMode>:

void SetConfigMode(){
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 80049ac:	4b0a      	ldr	r3, [pc, #40]	@ (80049d8 <SetConfigMode+0x30>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2201      	movs	r2, #1
 80049b2:	4053      	eors	r3, r2
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 80049ba:	4a08      	ldr	r2, [pc, #32]	@ (80049dc <SetConfigMode+0x34>)
 80049bc:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <SetConfigMode+0x38>)
 80049be:	0019      	movs	r1, r3
 80049c0:	2003      	movs	r0, #3
 80049c2:	f00d fe7d 	bl	80126c0 <CreateLine>
  }
  ReconfigSet = true;
 80049c6:	4b04      	ldr	r3, [pc, #16]	@ (80049d8 <SetConfigMode+0x30>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	701a      	strb	r2, [r3, #0]
  usblog = false;
 80049cc:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <SetConfigMode+0x3c>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	200005bb 	.word	0x200005bb
 80049dc:	08029010 	.word	0x08029010
 80049e0:	08029030 	.word	0x08029030
 80049e4:	20000207 	.word	0x20000207

080049e8 <GetReconfigMode>:

bool GetReconfigMode() {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  return ReconfigSet;
 80049ec:	4b02      	ldr	r3, [pc, #8]	@ (80049f8 <GetReconfigMode+0x10>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
}
 80049f0:	0018      	movs	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	200005bb 	.word	0x200005bb

080049fc <ESP_GetUID>:

void ESP_GetUID(){
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8004a00:	f00e fbde 	bl	80131c0 <HAL_GetUIDw0>
 8004a04:	0002      	movs	r2, r0
 8004a06:	4b07      	ldr	r3, [pc, #28]	@ (8004a24 <ESP_GetUID+0x28>)
 8004a08:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8004a0a:	f00e fbe3 	bl	80131d4 <HAL_GetUIDw1>
 8004a0e:	0002      	movs	r2, r0
 8004a10:	4b04      	ldr	r3, [pc, #16]	@ (8004a24 <ESP_GetUID+0x28>)
 8004a12:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8004a14:	f00e fbe8 	bl	80131e8 <HAL_GetUIDw2>
 8004a18:	0002      	movs	r2, r0
 8004a1a:	4b02      	ldr	r3, [pc, #8]	@ (8004a24 <ESP_GetUID+0x28>)
 8004a1c:	609a      	str	r2, [r3, #8]
}
 8004a1e:	46c0      	nop			@ (mov r8, r8)
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	200005c4 	.word	0x200005c4

08004a28 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004a30:	4b08      	ldr	r3, [pc, #32]	@ (8004a54 <ESP_Init+0x2c>)
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004a36:	4b08      	ldr	r3, [pc, #32]	@ (8004a58 <ESP_Init+0x30>)
 8004a38:	2202      	movs	r2, #2
 8004a3a:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8004a3c:	f7ff ffde 	bl	80049fc <ESP_GetUID>
  beurs = checkEEprom();
 8004a40:	f7ff fd66 	bl	8004510 <checkEEprom>
 8004a44:	0003      	movs	r3, r0
 8004a46:	001a      	movs	r2, r3
 8004a48:	4b04      	ldr	r3, [pc, #16]	@ (8004a5c <ESP_Init+0x34>)
 8004a4a:	701a      	strb	r2, [r3, #0]
}
 8004a4c:	46c0      	nop			@ (mov r8, r8)
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b002      	add	sp, #8
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	200004b0 	.word	0x200004b0
 8004a58:	2000002c 	.word	0x2000002c
 8004a5c:	200005be 	.word	0x200005be

08004a60 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004a60:	b5b0      	push	{r4, r5, r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	000a      	movs	r2, r1
 8004a6a:	1cbb      	adds	r3, r7, #2
 8004a6c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004a6e:	4b11      	ldr	r3, [pc, #68]	@ (8004ab4 <ESP_Send+0x54>)
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	250f      	movs	r5, #15
 8004a74:	197c      	adds	r4, r7, r5
 8004a76:	1cbb      	adds	r3, r7, #2
 8004a78:	881a      	ldrh	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	f017 f917 	bl	801bcb0 <HAL_UART_Transmit_DMA>
 8004a82:	0003      	movs	r3, r0
 8004a84:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004a86:	197b      	adds	r3, r7, r5
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab8 <ESP_Send+0x58>)
 8004a90:	4b0a      	ldr	r3, [pc, #40]	@ (8004abc <ESP_Send+0x5c>)
 8004a92:	0019      	movs	r1, r3
 8004a94:	2001      	movs	r0, #1
 8004a96:	f00d fe13 	bl	80126c0 <CreateLine>
    return false;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e006      	b.n	8004aac <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4b07      	ldr	r3, [pc, #28]	@ (8004ac0 <ESP_Send+0x60>)
 8004aa2:	0011      	movs	r1, r2
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f01f fe7d 	bl	80247a4 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8004aaa:	2301      	movs	r3, #1
}
 8004aac:	0018      	movs	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b004      	add	sp, #16
 8004ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ab4:	200004b0 	.word	0x200004b0
 8004ab8:	08029034 	.word	0x08029034
 8004abc:	08029054 	.word	0x08029054
 8004ac0:	08029058 	.word	0x08029058

08004ac4 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	000a      	movs	r2, r1
 8004ace:	1cbb      	adds	r3, r7, #2
 8004ad0:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8004c48 <ESP_Receive+0x184>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004ad8:	260f      	movs	r6, #15
 8004ada:	19bb      	adds	r3, r7, r6
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8004c4c <ESP_Receive+0x188>)
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	250d      	movs	r5, #13
 8004ae6:	197c      	adds	r4, r7, r5
 8004ae8:	1cbb      	adds	r3, r7, #2
 8004aea:	881a      	ldrh	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	0019      	movs	r1, r3
 8004af0:	f017 f96e 	bl	801bdd0 <HAL_UART_Receive_DMA>
 8004af4:	0003      	movs	r3, r0
 8004af6:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004af8:	002c      	movs	r4, r5
 8004afa:	193b      	adds	r3, r7, r4
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d100      	bne.n	8004b04 <ESP_Receive+0x40>
 8004b02:	e09c      	b.n	8004c3e <ESP_Receive+0x17a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004b04:	4b51      	ldr	r3, [pc, #324]	@ (8004c4c <ESP_Receive+0x188>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2284      	movs	r2, #132	@ 0x84
 8004b0a:	589b      	ldr	r3, [r3, r2]
 8004b0c:	4a50      	ldr	r2, [pc, #320]	@ (8004c50 <ESP_Receive+0x18c>)
 8004b0e:	4951      	ldr	r1, [pc, #324]	@ (8004c54 <ESP_Receive+0x190>)
 8004b10:	2001      	movs	r0, #1
 8004b12:	f00d fdd5 	bl	80126c0 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8004b16:	193b      	adds	r3, r7, r4
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d008      	beq.n	8004b32 <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8004b20:	4a4d      	ldr	r2, [pc, #308]	@ (8004c58 <ESP_Receive+0x194>)
 8004b22:	4b4c      	ldr	r3, [pc, #304]	@ (8004c54 <ESP_Receive+0x190>)
 8004b24:	0019      	movs	r1, r3
 8004b26:	2001      	movs	r0, #1
 8004b28:	f00d fdca 	bl	80126c0 <CreateLine>
      reset = true;
 8004b2c:	19bb      	adds	r3, r7, r6
 8004b2e:	2201      	movs	r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8004b32:	230d      	movs	r3, #13
 8004b34:	18fb      	adds	r3, r7, r3
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d005      	beq.n	8004b4a <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8004b3e:	4a47      	ldr	r2, [pc, #284]	@ (8004c5c <ESP_Receive+0x198>)
 8004b40:	4b44      	ldr	r3, [pc, #272]	@ (8004c54 <ESP_Receive+0x190>)
 8004b42:	0019      	movs	r1, r3
 8004b44:	2001      	movs	r0, #1
 8004b46:	f00d fdbb 	bl	80126c0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8004b4a:	230d      	movs	r3, #13
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2204      	movs	r2, #4
 8004b52:	4013      	ands	r3, r2
 8004b54:	d005      	beq.n	8004b62 <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8004b56:	4a42      	ldr	r2, [pc, #264]	@ (8004c60 <ESP_Receive+0x19c>)
 8004b58:	4b3e      	ldr	r3, [pc, #248]	@ (8004c54 <ESP_Receive+0x190>)
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	f00d fdaf 	bl	80126c0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004b62:	230d      	movs	r3, #13
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2208      	movs	r2, #8
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d005      	beq.n	8004b7a <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8004b6e:	4a3d      	ldr	r2, [pc, #244]	@ (8004c64 <ESP_Receive+0x1a0>)
 8004b70:	4b38      	ldr	r3, [pc, #224]	@ (8004c54 <ESP_Receive+0x190>)
 8004b72:	0019      	movs	r1, r3
 8004b74:	2001      	movs	r0, #1
 8004b76:	f00d fda3 	bl	80126c0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8004b7a:	230d      	movs	r3, #13
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2210      	movs	r2, #16
 8004b82:	4013      	ands	r3, r2
 8004b84:	d005      	beq.n	8004b92 <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8004b86:	4a38      	ldr	r2, [pc, #224]	@ (8004c68 <ESP_Receive+0x1a4>)
 8004b88:	4b32      	ldr	r3, [pc, #200]	@ (8004c54 <ESP_Receive+0x190>)
 8004b8a:	0019      	movs	r1, r3
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	f00d fd97 	bl	80126c0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8004b92:	230d      	movs	r3, #13
 8004b94:	18fb      	adds	r3, r7, r3
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d005      	beq.n	8004baa <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8004b9e:	4a33      	ldr	r2, [pc, #204]	@ (8004c6c <ESP_Receive+0x1a8>)
 8004ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8004c54 <ESP_Receive+0x190>)
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	f00d fd8b 	bl	80126c0 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8004baa:	230d      	movs	r3, #13
 8004bac:	18fb      	adds	r3, r7, r3
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2240      	movs	r2, #64	@ 0x40
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d005      	beq.n	8004bc2 <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8004bb6:	4a2e      	ldr	r2, [pc, #184]	@ (8004c70 <ESP_Receive+0x1ac>)
 8004bb8:	4b26      	ldr	r3, [pc, #152]	@ (8004c54 <ESP_Receive+0x190>)
 8004bba:	0019      	movs	r1, r3
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	f00d fd7f 	bl	80126c0 <CreateLine>
    }
#endif
    if (reset) {
 8004bc2:	230f      	movs	r3, #15
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d033      	beq.n	8004c34 <ESP_Receive+0x170>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004bcc:	4b29      	ldr	r3, [pc, #164]	@ (8004c74 <ESP_Receive+0x1b0>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f00f fd3b 	bl	801464e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004bd8:	2001      	movs	r0, #1
 8004bda:	f00e fab1 	bl	8013140 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004bde:	2380      	movs	r3, #128	@ 0x80
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	4825      	ldr	r0, [pc, #148]	@ (8004c78 <ESP_Receive+0x1b4>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	0019      	movs	r1, r3
 8004be8:	f00f fd31 	bl	801464e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004bec:	2001      	movs	r0, #1
 8004bee:	f00e faa7 	bl	8013140 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004bf2:	4b20      	ldr	r3, [pc, #128]	@ (8004c74 <ESP_Receive+0x1b0>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f00f fd28 	bl	801464e <HAL_GPIO_WritePin>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 8004bfe:	230e      	movs	r3, #14
 8004c00:	18fb      	adds	r3, r7, r3
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	e00e      	b.n	8004c26 <ESP_Receive+0x162>
        SetAllREDLED();
 8004c08:	f00c fc70 	bl	80114ec <SetAllREDLED>
        SetLEDsOff();
 8004c0c:	f00c fc52 	bl	80114b4 <SetLEDsOff>
        HAL_Delay(500);
 8004c10:	23fa      	movs	r3, #250	@ 0xfa
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	0018      	movs	r0, r3
 8004c16:	f00e fa93 	bl	8013140 <HAL_Delay>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 8004c1a:	210e      	movs	r1, #14
 8004c1c:	187b      	adds	r3, r7, r1
 8004c1e:	781a      	ldrb	r2, [r3, #0]
 8004c20:	187b      	adds	r3, r7, r1
 8004c22:	3201      	adds	r2, #1
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	230e      	movs	r3, #14
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b05      	cmp	r3, #5
 8004c2e:	d9eb      	bls.n	8004c08 <ESP_Receive+0x144>
      }
      HAL_NVIC_SystemReset();
 8004c30:	f00e ff45 	bl	8013abe <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8004c34:	4b04      	ldr	r3, [pc, #16]	@ (8004c48 <ESP_Receive+0x184>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	701a      	strb	r2, [r3, #0]
    return false;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e000      	b.n	8004c40 <ESP_Receive+0x17c>
  }
  return true;
 8004c3e:	2301      	movs	r3, #1
}
 8004c40:	0018      	movs	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b005      	add	sp, #20
 8004c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c48:	200004b4 	.word	0x200004b4
 8004c4c:	200004b0 	.word	0x200004b0
 8004c50:	08029068 	.word	0x08029068
 8004c54:	08029054 	.word	0x08029054
 8004c58:	08029098 	.word	0x08029098
 8004c5c:	080290bc 	.word	0x080290bc
 8004c60:	080290e0 	.word	0x080290e0
 8004c64:	08029104 	.word	0x08029104
 8004c68:	08029128 	.word	0x08029128
 8004c6c:	08029154 	.word	0x08029154
 8004c70:	08029184 	.word	0x08029184
 8004c74:	50001c00 	.word	0x50001c00
 8004c78:	50000800 	.word	0x50000800

08004c7c <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8004c84:	4b39      	ldr	r3, [pc, #228]	@ (8004d6c <HAL_UART_ErrorCallback+0xf0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d16b      	bne.n	8004d66 <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2284      	movs	r2, #132	@ 0x84
 8004c92:	589b      	ldr	r3, [r3, r2]
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d065      	beq.n	8004d64 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2284      	movs	r2, #132	@ 0x84
 8004c9c:	589b      	ldr	r3, [r3, r2]
 8004c9e:	4a34      	ldr	r2, [pc, #208]	@ (8004d70 <HAL_UART_ErrorCallback+0xf4>)
 8004ca0:	4934      	ldr	r1, [pc, #208]	@ (8004d74 <HAL_UART_ErrorCallback+0xf8>)
 8004ca2:	2003      	movs	r0, #3
 8004ca4:	f00d fd0c 	bl	80126c0 <CreateLine>
    switch (huart->ErrorCode) {
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2284      	movs	r2, #132	@ 0x84
 8004cac:	589b      	ldr	r3, [r3, r2]
 8004cae:	2b0c      	cmp	r3, #12
 8004cb0:	d851      	bhi.n	8004d56 <HAL_UART_ErrorCallback+0xda>
 8004cb2:	009a      	lsls	r2, r3, #2
 8004cb4:	4b30      	ldr	r3, [pc, #192]	@ (8004d78 <HAL_UART_ErrorCallback+0xfc>)
 8004cb6:	18d3      	adds	r3, r2, r3
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8004cbc:	4a2f      	ldr	r2, [pc, #188]	@ (8004d7c <HAL_UART_ErrorCallback+0x100>)
 8004cbe:	4b30      	ldr	r3, [pc, #192]	@ (8004d80 <HAL_UART_ErrorCallback+0x104>)
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	f00d fcfc 	bl	80126c0 <CreateLine>
        break;
 8004cc8:	e04d      	b.n	8004d66 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 8004cca:	4a2e      	ldr	r2, [pc, #184]	@ (8004d84 <HAL_UART_ErrorCallback+0x108>)
 8004ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8004d80 <HAL_UART_ErrorCallback+0x104>)
 8004cce:	0019      	movs	r1, r3
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	f00d fcf5 	bl	80126c0 <CreateLine>
        break;
 8004cd6:	e046      	b.n	8004d66 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8004cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8004d88 <HAL_UART_ErrorCallback+0x10c>)
 8004cda:	4b29      	ldr	r3, [pc, #164]	@ (8004d80 <HAL_UART_ErrorCallback+0x104>)
 8004cdc:	0019      	movs	r1, r3
 8004cde:	2001      	movs	r0, #1
 8004ce0:	f00d fcee 	bl	80126c0 <CreateLine>
        break;
 8004ce4:	e03f      	b.n	8004d66 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8004ce6:	4a29      	ldr	r2, [pc, #164]	@ (8004d8c <HAL_UART_ErrorCallback+0x110>)
 8004ce8:	4b25      	ldr	r3, [pc, #148]	@ (8004d80 <HAL_UART_ErrorCallback+0x104>)
 8004cea:	0019      	movs	r1, r3
 8004cec:	2001      	movs	r0, #1
 8004cee:	f00d fce7 	bl	80126c0 <CreateLine>
        break;
 8004cf2:	e038      	b.n	8004d66 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8004cf4:	4a26      	ldr	r2, [pc, #152]	@ (8004d90 <HAL_UART_ErrorCallback+0x114>)
 8004cf6:	4b22      	ldr	r3, [pc, #136]	@ (8004d80 <HAL_UART_ErrorCallback+0x104>)
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	2001      	movs	r0, #1
 8004cfc:	f00d fce0 	bl	80126c0 <CreateLine>
        break;
 8004d00:	e031      	b.n	8004d66 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8004d02:	4a24      	ldr	r2, [pc, #144]	@ (8004d94 <HAL_UART_ErrorCallback+0x118>)
 8004d04:	4b1e      	ldr	r3, [pc, #120]	@ (8004d80 <HAL_UART_ErrorCallback+0x104>)
 8004d06:	0019      	movs	r1, r3
 8004d08:	2001      	movs	r0, #1
 8004d0a:	f00d fcd9 	bl	80126c0 <CreateLine>
        break;
 8004d0e:	e02a      	b.n	8004d66 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8004d10:	4a21      	ldr	r2, [pc, #132]	@ (8004d98 <HAL_UART_ErrorCallback+0x11c>)
 8004d12:	4b1b      	ldr	r3, [pc, #108]	@ (8004d80 <HAL_UART_ErrorCallback+0x104>)
 8004d14:	0019      	movs	r1, r3
 8004d16:	2001      	movs	r0, #1
 8004d18:	f00d fcd2 	bl	80126c0 <CreateLine>
        break;
 8004d1c:	e023      	b.n	8004d66 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8004d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004d9c <HAL_UART_ErrorCallback+0x120>)
 8004d20:	4b17      	ldr	r3, [pc, #92]	@ (8004d80 <HAL_UART_ErrorCallback+0x104>)
 8004d22:	0019      	movs	r1, r3
 8004d24:	2001      	movs	r0, #1
 8004d26:	f00d fccb 	bl	80126c0 <CreateLine>
        break;
 8004d2a:	e01c      	b.n	8004d66 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8004d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004da0 <HAL_UART_ErrorCallback+0x124>)
 8004d2e:	4b14      	ldr	r3, [pc, #80]	@ (8004d80 <HAL_UART_ErrorCallback+0x104>)
 8004d30:	0019      	movs	r1, r3
 8004d32:	2001      	movs	r0, #1
 8004d34:	f00d fcc4 	bl	80126c0 <CreateLine>
        break;
 8004d38:	e015      	b.n	8004d66 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8004d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8004da4 <HAL_UART_ErrorCallback+0x128>)
 8004d3c:	4b10      	ldr	r3, [pc, #64]	@ (8004d80 <HAL_UART_ErrorCallback+0x104>)
 8004d3e:	0019      	movs	r1, r3
 8004d40:	2001      	movs	r0, #1
 8004d42:	f00d fcbd 	bl	80126c0 <CreateLine>
        break;
 8004d46:	e00e      	b.n	8004d66 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8004d48:	4a17      	ldr	r2, [pc, #92]	@ (8004da8 <HAL_UART_ErrorCallback+0x12c>)
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d80 <HAL_UART_ErrorCallback+0x104>)
 8004d4c:	0019      	movs	r1, r3
 8004d4e:	2001      	movs	r0, #1
 8004d50:	f00d fcb6 	bl	80126c0 <CreateLine>
        break;
 8004d54:	e007      	b.n	8004d66 <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8004d56:	4a15      	ldr	r2, [pc, #84]	@ (8004dac <HAL_UART_ErrorCallback+0x130>)
 8004d58:	4b09      	ldr	r3, [pc, #36]	@ (8004d80 <HAL_UART_ErrorCallback+0x104>)
 8004d5a:	0019      	movs	r1, r3
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	f00d fcaf 	bl	80126c0 <CreateLine>
 8004d62:	e000      	b.n	8004d66 <HAL_UART_ErrorCallback+0xea>
      return;
 8004d64:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b002      	add	sp, #8
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	200004b0 	.word	0x200004b0
 8004d70:	080291b4 	.word	0x080291b4
 8004d74:	08029030 	.word	0x08029030
 8004d78:	0802c8d8 	.word	0x0802c8d8
 8004d7c:	080291e4 	.word	0x080291e4
 8004d80:	08029054 	.word	0x08029054
 8004d84:	08029218 	.word	0x08029218
 8004d88:	08029244 	.word	0x08029244
 8004d8c:	08029278 	.word	0x08029278
 8004d90:	080292a4 	.word	0x080292a4
 8004d94:	080292cc 	.word	0x080292cc
 8004d98:	080292fc 	.word	0x080292fc
 8004d9c:	08029334 	.word	0x08029334
 8004da0:	0802936c 	.word	0x0802936c
 8004da4:	08029394 	.word	0x08029394
 8004da8:	080293bc 	.word	0x080293bc
 8004dac:	080293e8 	.word	0x080293e8

08004db0 <isKeyValid>:

bool isKeyValid(uint8_t data[]) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b42      	cmp	r3, #66	@ 0x42
 8004dbe:	d905      	bls.n	8004dcc <isKeyValid+0x1c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2bff      	cmp	r3, #255	@ 0xff
 8004dc6:	d001      	beq.n	8004dcc <isKeyValid+0x1c>
    return true;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e01b      	b.n	8004e04 <isKeyValid+0x54>
  else {
    printf("Error sensor seems to have no stored key: ");
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8004e0c <isKeyValid+0x5c>)
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f01f fce8 	bl	80247a4 <iprintf>
    for (int i = 0; i < 12; i++) {
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	e00c      	b.n	8004df4 <isKeyValid+0x44>
      printf("%02x", data[i]);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	18d3      	adds	r3, r2, r3
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	001a      	movs	r2, r3
 8004de4:	4b0a      	ldr	r3, [pc, #40]	@ (8004e10 <isKeyValid+0x60>)
 8004de6:	0011      	movs	r1, r2
 8004de8:	0018      	movs	r0, r3
 8004dea:	f01f fcdb 	bl	80247a4 <iprintf>
    for (int i = 0; i < 12; i++) {
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3301      	adds	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b0b      	cmp	r3, #11
 8004df8:	ddef      	ble.n	8004dda <isKeyValid+0x2a>
    }
    printf("\r\n");
 8004dfa:	4b06      	ldr	r3, [pc, #24]	@ (8004e14 <isKeyValid+0x64>)
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f01f fd37 	bl	8024870 <puts>
    return false;
 8004e02:	2300      	movs	r3, #0
  }
}
 8004e04:	0018      	movs	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b004      	add	sp, #16
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	0802940c 	.word	0x0802940c
 8004e10:	08029438 	.word	0x08029438
 8004e14:	08029440 	.word	0x08029440

08004e18 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e010      	b.n	8004e4a <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	1898      	adds	r0, r3, r2
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	18d3      	adds	r3, r2, r3
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	001a      	movs	r2, r3
 8004e3c:	4b07      	ldr	r3, [pc, #28]	@ (8004e5c <uint8ArrayToString+0x44>)
 8004e3e:	0019      	movs	r1, r3
 8004e40:	f01f fd20 	bl	8024884 <siprintf>
  for (int i = 0; i < 12; i++) {
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3301      	adds	r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b0b      	cmp	r3, #11
 8004e4e:	ddeb      	ble.n	8004e28 <uint8ArrayToString+0x10>
  }
}
 8004e50:	46c0      	nop			@ (mov r8, r8)
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b004      	add	sp, #16
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	46c0      	nop			@ (mov r8, r8)
 8004e5c:	08029438 	.word	0x08029438

08004e60 <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8004e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e62:	b089      	sub	sp, #36	@ 0x24
 8004e64:	af04      	add	r7, sp, #16
 8004e66:	6039      	str	r1, [r7, #0]
 8004e68:	0011      	movs	r1, r2
 8004e6a:	1dfb      	adds	r3, r7, #7
 8004e6c:	1c02      	adds	r2, r0, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
 8004e70:	1dbb      	adds	r3, r7, #6
 8004e72:	1c0a      	adds	r2, r1, #0
 8004e74:	701a      	strb	r2, [r3, #0]

#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 8004e76:	f7ff fb81 	bl	800457c <checkName>
 8004e7a:	1e03      	subs	r3, r0, #0
 8004e7c:	d00a      	beq.n	8004e94 <CreateMessage+0x34>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004e7e:	4b03      	ldr	r3, [pc, #12]	@ (8004e8c <CreateMessage+0x2c>)
 8004e80:	4803      	ldr	r0, [pc, #12]	@ (8004e90 <CreateMessage+0x30>)
 8004e82:	2220      	movs	r2, #32
 8004e84:	0019      	movs	r1, r3
 8004e86:	f005 ffab 	bl	800ade0 <ReadUint8ArrayEEprom>
 8004e8a:	e009      	b.n	8004ea0 <CreateMessage+0x40>
 8004e8c:	20000744 	.word	0x20000744
 8004e90:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8004e94:	4bee      	ldr	r3, [pc, #952]	@ (8005250 <CreateMessage+0x3f0>)
 8004e96:	4aef      	ldr	r2, [pc, #956]	@ (8005254 <CreateMessage+0x3f4>)
 8004e98:	6811      	ldr	r1, [r2, #0]
 8004e9a:	6019      	str	r1, [r3, #0]
 8004e9c:	7912      	ldrb	r2, [r2, #4]
 8004e9e:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8004ea0:	f7ff fb12 	bl	80044c8 <setCharges>
  uint16_t index = 0;
 8004ea4:	260e      	movs	r6, #14
 8004ea6:	19bb      	adds	r3, r7, r6
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8004eac:	19bb      	adds	r3, r7, r6
 8004eae:	881a      	ldrh	r2, [r3, #0]
 8004eb0:	4be9      	ldr	r3, [pc, #932]	@ (8005258 <CreateMessage+0x3f8>)
 8004eb2:	18d3      	adds	r3, r2, r3
 8004eb4:	4ae9      	ldr	r2, [pc, #932]	@ (800525c <CreateMessage+0x3fc>)
 8004eb6:	0011      	movs	r1, r2
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f01f fce3 	bl	8024884 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 8004ebe:	4be8      	ldr	r3, [pc, #928]	@ (8005260 <CreateMessage+0x400>)
 8004ec0:	48e8      	ldr	r0, [pc, #928]	@ (8005264 <CreateMessage+0x404>)
 8004ec2:	220c      	movs	r2, #12
 8004ec4:	0019      	movs	r1, r3
 8004ec6:	f005 ff8b 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8004eca:	4ae5      	ldr	r2, [pc, #916]	@ (8005260 <CreateMessage+0x400>)
 8004ecc:	4be6      	ldr	r3, [pc, #920]	@ (8005268 <CreateMessage+0x408>)
 8004ece:	0011      	movs	r1, r2
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f7ff ffa1 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8004ed6:	4be5      	ldr	r3, [pc, #916]	@ (800526c <CreateMessage+0x40c>)
 8004ed8:	689c      	ldr	r4, [r3, #8]
 8004eda:	4be5      	ldr	r3, [pc, #916]	@ (8005270 <CreateMessage+0x410>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	1c18      	adds	r0, r3, #0
 8004ee0:	f7fe fac0 	bl	8003464 <__aeabi_f2d>
 8004ee4:	0002      	movs	r2, r0
 8004ee6:	000b      	movs	r3, r1
 8004ee8:	4dd9      	ldr	r5, [pc, #868]	@ (8005250 <CreateMessage+0x3f0>)
 8004eea:	49e2      	ldr	r1, [pc, #904]	@ (8005274 <CreateMessage+0x414>)
 8004eec:	48e2      	ldr	r0, [pc, #904]	@ (8005278 <CreateMessage+0x418>)
 8004eee:	9202      	str	r2, [sp, #8]
 8004ef0:	9303      	str	r3, [sp, #12]
 8004ef2:	4bdd      	ldr	r3, [pc, #884]	@ (8005268 <CreateMessage+0x408>)
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	002b      	movs	r3, r5
 8004ef8:	0022      	movs	r2, r4
 8004efa:	f01f fcc3 	bl	8024884 <siprintf>
#endif
index = strlen(message);
 8004efe:	4bd6      	ldr	r3, [pc, #856]	@ (8005258 <CreateMessage+0x3f8>)
 8004f00:	0018      	movs	r0, r3
 8004f02:	f7fb f933 	bl	800016c <strlen>
 8004f06:	0002      	movs	r2, r0
 8004f08:	19bb      	adds	r3, r7, r6
 8004f0a:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004f0c:	1dbb      	adds	r3, r7, #6
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d019      	beq.n	8004f48 <CreateMessage+0xe8>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004f14:	4bd0      	ldr	r3, [pc, #832]	@ (8005258 <CreateMessage+0x3f8>)
 8004f16:	0018      	movs	r0, r3
 8004f18:	f7fb f928 	bl	800016c <strlen>
 8004f1c:	0003      	movs	r3, r0
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	4bcd      	ldr	r3, [pc, #820]	@ (8005258 <CreateMessage+0x3f8>)
 8004f22:	0011      	movs	r1, r2
 8004f24:	0018      	movs	r0, r3
 8004f26:	f7ff fd9b 	bl	8004a60 <ESP_Send>
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	001a      	movs	r2, r3
 8004f2e:	4bd3      	ldr	r3, [pc, #844]	@ (800527c <CreateMessage+0x41c>)
 8004f30:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004f32:	4bd3      	ldr	r3, [pc, #844]	@ (8005280 <CreateMessage+0x420>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	001a      	movs	r2, r3
 8004f38:	4bd0      	ldr	r3, [pc, #832]	@ (800527c <CreateMessage+0x41c>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	1e5a      	subs	r2, r3, #1
 8004f40:	4193      	sbcs	r3, r2
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	4bce      	ldr	r3, [pc, #824]	@ (8005280 <CreateMessage+0x420>)
 8004f46:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 8004f48:	4bc5      	ldr	r3, [pc, #788]	@ (8005260 <CreateMessage+0x400>)
 8004f4a:	48ce      	ldr	r0, [pc, #824]	@ (8005284 <CreateMessage+0x424>)
 8004f4c:	220c      	movs	r2, #12
 8004f4e:	0019      	movs	r1, r3
 8004f50:	f005 ff46 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8004f54:	4ac2      	ldr	r2, [pc, #776]	@ (8005260 <CreateMessage+0x400>)
 8004f56:	4bc4      	ldr	r3, [pc, #784]	@ (8005268 <CreateMessage+0x408>)
 8004f58:	0011      	movs	r1, r2
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f7ff ff5c 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8004f60:	4bc2      	ldr	r3, [pc, #776]	@ (800526c <CreateMessage+0x40c>)
 8004f62:	689c      	ldr	r4, [r3, #8]
 8004f64:	4bc2      	ldr	r3, [pc, #776]	@ (8005270 <CreateMessage+0x410>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	1c18      	adds	r0, r3, #0
 8004f6a:	f7fe fa7b 	bl	8003464 <__aeabi_f2d>
 8004f6e:	0002      	movs	r2, r0
 8004f70:	000b      	movs	r3, r1
 8004f72:	4db7      	ldr	r5, [pc, #732]	@ (8005250 <CreateMessage+0x3f0>)
 8004f74:	49c4      	ldr	r1, [pc, #784]	@ (8005288 <CreateMessage+0x428>)
 8004f76:	48b8      	ldr	r0, [pc, #736]	@ (8005258 <CreateMessage+0x3f8>)
 8004f78:	9202      	str	r2, [sp, #8]
 8004f7a:	9303      	str	r3, [sp, #12]
 8004f7c:	4bba      	ldr	r3, [pc, #744]	@ (8005268 <CreateMessage+0x408>)
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	002b      	movs	r3, r5
 8004f82:	0022      	movs	r2, r4
 8004f84:	f01f fc7e 	bl	8024884 <siprintf>
#endif
  index += strlen(message);
 8004f88:	4bb3      	ldr	r3, [pc, #716]	@ (8005258 <CreateMessage+0x3f8>)
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f7fb f8ee 	bl	800016c <strlen>
 8004f90:	0003      	movs	r3, r0
 8004f92:	b299      	uxth	r1, r3
 8004f94:	220e      	movs	r2, #14
 8004f96:	18bb      	adds	r3, r7, r2
 8004f98:	18ba      	adds	r2, r7, r2
 8004f9a:	8812      	ldrh	r2, [r2, #0]
 8004f9c:	188a      	adds	r2, r1, r2
 8004f9e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004fa0:	1dbb      	adds	r3, r7, #6
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d019      	beq.n	8004fdc <CreateMessage+0x17c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004fa8:	4bab      	ldr	r3, [pc, #684]	@ (8005258 <CreateMessage+0x3f8>)
 8004faa:	0018      	movs	r0, r3
 8004fac:	f7fb f8de 	bl	800016c <strlen>
 8004fb0:	0003      	movs	r3, r0
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	4ba8      	ldr	r3, [pc, #672]	@ (8005258 <CreateMessage+0x3f8>)
 8004fb6:	0011      	movs	r1, r2
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f7ff fd51 	bl	8004a60 <ESP_Send>
 8004fbe:	0003      	movs	r3, r0
 8004fc0:	001a      	movs	r2, r3
 8004fc2:	4bae      	ldr	r3, [pc, #696]	@ (800527c <CreateMessage+0x41c>)
 8004fc4:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004fc6:	4bae      	ldr	r3, [pc, #696]	@ (8005280 <CreateMessage+0x420>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	001a      	movs	r2, r3
 8004fcc:	4bab      	ldr	r3, [pc, #684]	@ (800527c <CreateMessage+0x41c>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	1e5a      	subs	r2, r3, #1
 8004fd4:	4193      	sbcs	r3, r2
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	4ba9      	ldr	r3, [pc, #676]	@ (8005280 <CreateMessage+0x420>)
 8004fda:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 8004fdc:	4ba0      	ldr	r3, [pc, #640]	@ (8005260 <CreateMessage+0x400>)
 8004fde:	48ab      	ldr	r0, [pc, #684]	@ (800528c <CreateMessage+0x42c>)
 8004fe0:	220c      	movs	r2, #12
 8004fe2:	0019      	movs	r1, r3
 8004fe4:	f005 fefc 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8004fe8:	4a9d      	ldr	r2, [pc, #628]	@ (8005260 <CreateMessage+0x400>)
 8004fea:	4b9f      	ldr	r3, [pc, #636]	@ (8005268 <CreateMessage+0x408>)
 8004fec:	0011      	movs	r1, r2
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f7ff ff12 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
 8004ff4:	4b9d      	ldr	r3, [pc, #628]	@ (800526c <CreateMessage+0x40c>)
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	4b9d      	ldr	r3, [pc, #628]	@ (8005270 <CreateMessage+0x410>)
 8004ffa:	2150      	movs	r1, #80	@ 0x50
 8004ffc:	5a5b      	ldrh	r3, [r3, r1]
 8004ffe:	4c94      	ldr	r4, [pc, #592]	@ (8005250 <CreateMessage+0x3f0>)
 8005000:	49a3      	ldr	r1, [pc, #652]	@ (8005290 <CreateMessage+0x430>)
 8005002:	4895      	ldr	r0, [pc, #596]	@ (8005258 <CreateMessage+0x3f8>)
 8005004:	9301      	str	r3, [sp, #4]
 8005006:	4b98      	ldr	r3, [pc, #608]	@ (8005268 <CreateMessage+0x408>)
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	0023      	movs	r3, r4
 800500c:	f01f fc3a 	bl	8024884 <siprintf>
#endif
  index += strlen(message);
 8005010:	4b91      	ldr	r3, [pc, #580]	@ (8005258 <CreateMessage+0x3f8>)
 8005012:	0018      	movs	r0, r3
 8005014:	f7fb f8aa 	bl	800016c <strlen>
 8005018:	0003      	movs	r3, r0
 800501a:	b299      	uxth	r1, r3
 800501c:	220e      	movs	r2, #14
 800501e:	18bb      	adds	r3, r7, r2
 8005020:	18ba      	adds	r2, r7, r2
 8005022:	8812      	ldrh	r2, [r2, #0]
 8005024:	188a      	adds	r2, r1, r2
 8005026:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005028:	1dbb      	adds	r3, r7, #6
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d019      	beq.n	8005064 <CreateMessage+0x204>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005030:	4b89      	ldr	r3, [pc, #548]	@ (8005258 <CreateMessage+0x3f8>)
 8005032:	0018      	movs	r0, r3
 8005034:	f7fb f89a 	bl	800016c <strlen>
 8005038:	0003      	movs	r3, r0
 800503a:	b29a      	uxth	r2, r3
 800503c:	4b86      	ldr	r3, [pc, #536]	@ (8005258 <CreateMessage+0x3f8>)
 800503e:	0011      	movs	r1, r2
 8005040:	0018      	movs	r0, r3
 8005042:	f7ff fd0d 	bl	8004a60 <ESP_Send>
 8005046:	0003      	movs	r3, r0
 8005048:	001a      	movs	r2, r3
 800504a:	4b8c      	ldr	r3, [pc, #560]	@ (800527c <CreateMessage+0x41c>)
 800504c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800504e:	4b8c      	ldr	r3, [pc, #560]	@ (8005280 <CreateMessage+0x420>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	001a      	movs	r2, r3
 8005054:	4b89      	ldr	r3, [pc, #548]	@ (800527c <CreateMessage+0x41c>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	4013      	ands	r3, r2
 800505a:	1e5a      	subs	r2, r3, #1
 800505c:	4193      	sbcs	r3, r2
 800505e:	b2da      	uxtb	r2, r3
 8005060:	4b87      	ldr	r3, [pc, #540]	@ (8005280 <CreateMessage+0x420>)
 8005062:	701a      	strb	r2, [r3, #0]
  }

  if (IsBMP280SensorPresent()) {
 8005064:	f006 ffe6 	bl	800c034 <IsBMP280SensorPresent>
 8005068:	1e03      	subs	r3, r0, #0
 800506a:	d100      	bne.n	800506e <CreateMessage+0x20e>
 800506c:	e0a7      	b.n	80051be <CreateMessage+0x35e>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 800506e:	4b7c      	ldr	r3, [pc, #496]	@ (8005260 <CreateMessage+0x400>)
 8005070:	4888      	ldr	r0, [pc, #544]	@ (8005294 <CreateMessage+0x434>)
 8005072:	220c      	movs	r2, #12
 8005074:	0019      	movs	r1, r3
 8005076:	f005 feb3 	bl	800ade0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer) && (MeasVal.hPaValuemax != 0.0)) {
 800507a:	4b79      	ldr	r3, [pc, #484]	@ (8005260 <CreateMessage+0x400>)
 800507c:	0018      	movs	r0, r3
 800507e:	f7ff fe97 	bl	8004db0 <isKeyValid>
 8005082:	1e03      	subs	r3, r0, #0
 8005084:	d04b      	beq.n	800511e <CreateMessage+0x2be>
 8005086:	4b7a      	ldr	r3, [pc, #488]	@ (8005270 <CreateMessage+0x410>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508a:	2100      	movs	r1, #0
 800508c:	1c18      	adds	r0, r3, #0
 800508e:	f7fb fa49 	bl	8000524 <__aeabi_fcmpeq>
 8005092:	1e03      	subs	r3, r0, #0
 8005094:	d143      	bne.n	800511e <CreateMessage+0x2be>
      uint8ArrayToString(Buffer, keybuffer);
 8005096:	4a72      	ldr	r2, [pc, #456]	@ (8005260 <CreateMessage+0x400>)
 8005098:	4b73      	ldr	r3, [pc, #460]	@ (8005268 <CreateMessage+0x408>)
 800509a:	0011      	movs	r1, r2
 800509c:	0018      	movs	r0, r3
 800509e:	f7ff febb 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.hPaValuemax);
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.hPaValuemax);
 80050a2:	4b72      	ldr	r3, [pc, #456]	@ (800526c <CreateMessage+0x40c>)
 80050a4:	689c      	ldr	r4, [r3, #8]
 80050a6:	4b72      	ldr	r3, [pc, #456]	@ (8005270 <CreateMessage+0x410>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050aa:	1c18      	adds	r0, r3, #0
 80050ac:	f7fe f9da 	bl	8003464 <__aeabi_f2d>
 80050b0:	0002      	movs	r2, r0
 80050b2:	000b      	movs	r3, r1
 80050b4:	4d66      	ldr	r5, [pc, #408]	@ (8005250 <CreateMessage+0x3f0>)
 80050b6:	4978      	ldr	r1, [pc, #480]	@ (8005298 <CreateMessage+0x438>)
 80050b8:	4867      	ldr	r0, [pc, #412]	@ (8005258 <CreateMessage+0x3f8>)
 80050ba:	9202      	str	r2, [sp, #8]
 80050bc:	9303      	str	r3, [sp, #12]
 80050be:	4b6a      	ldr	r3, [pc, #424]	@ (8005268 <CreateMessage+0x408>)
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	002b      	movs	r3, r5
 80050c4:	0022      	movs	r2, r4
 80050c6:	f01f fbdd 	bl	8024884 <siprintf>
#endif
      index += strlen(message);
 80050ca:	4b63      	ldr	r3, [pc, #396]	@ (8005258 <CreateMessage+0x3f8>)
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7fb f84d 	bl	800016c <strlen>
 80050d2:	0003      	movs	r3, r0
 80050d4:	b299      	uxth	r1, r3
 80050d6:	220e      	movs	r2, #14
 80050d8:	18bb      	adds	r3, r7, r2
 80050da:	18ba      	adds	r2, r7, r2
 80050dc:	8812      	ldrh	r2, [r2, #0]
 80050de:	188a      	adds	r2, r1, r2
 80050e0:	801a      	strh	r2, [r3, #0]
      if (send) {
 80050e2:	1dbb      	adds	r3, r7, #6
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d019      	beq.n	800511e <CreateMessage+0x2be>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80050ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005258 <CreateMessage+0x3f8>)
 80050ec:	0018      	movs	r0, r3
 80050ee:	f7fb f83d 	bl	800016c <strlen>
 80050f2:	0003      	movs	r3, r0
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	4b58      	ldr	r3, [pc, #352]	@ (8005258 <CreateMessage+0x3f8>)
 80050f8:	0011      	movs	r1, r2
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7ff fcb0 	bl	8004a60 <ESP_Send>
 8005100:	0003      	movs	r3, r0
 8005102:	001a      	movs	r2, r3
 8005104:	4b5d      	ldr	r3, [pc, #372]	@ (800527c <CreateMessage+0x41c>)
 8005106:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005108:	4b5d      	ldr	r3, [pc, #372]	@ (8005280 <CreateMessage+0x420>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	001a      	movs	r2, r3
 800510e:	4b5b      	ldr	r3, [pc, #364]	@ (800527c <CreateMessage+0x41c>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	4013      	ands	r3, r2
 8005114:	1e5a      	subs	r2, r3, #1
 8005116:	4193      	sbcs	r3, r2
 8005118:	b2da      	uxtb	r2, r3
 800511a:	4b59      	ldr	r3, [pc, #356]	@ (8005280 <CreateMessage+0x420>)
 800511c:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 800511e:	4b50      	ldr	r3, [pc, #320]	@ (8005260 <CreateMessage+0x400>)
 8005120:	485e      	ldr	r0, [pc, #376]	@ (800529c <CreateMessage+0x43c>)
 8005122:	220c      	movs	r2, #12
 8005124:	0019      	movs	r1, r3
 8005126:	f005 fe5b 	bl	800ade0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer)) {
 800512a:	4b4d      	ldr	r3, [pc, #308]	@ (8005260 <CreateMessage+0x400>)
 800512c:	0018      	movs	r0, r3
 800512e:	f7ff fe3f 	bl	8004db0 <isKeyValid>
 8005132:	1e03      	subs	r3, r0, #0
 8005134:	d043      	beq.n	80051be <CreateMessage+0x35e>
      uint8ArrayToString(Buffer, keybuffer);
 8005136:	4a4a      	ldr	r2, [pc, #296]	@ (8005260 <CreateMessage+0x400>)
 8005138:	4b4b      	ldr	r3, [pc, #300]	@ (8005268 <CreateMessage+0x408>)
 800513a:	0011      	movs	r1, r2
 800513c:	0018      	movs	r0, r3
 800513e:	f7ff fe6b 	bl	8004e18 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperaturemax);
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperaturemax);
 8005142:	4b4a      	ldr	r3, [pc, #296]	@ (800526c <CreateMessage+0x40c>)
 8005144:	689c      	ldr	r4, [r3, #8]
 8005146:	4b4a      	ldr	r3, [pc, #296]	@ (8005270 <CreateMessage+0x410>)
 8005148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514a:	1c18      	adds	r0, r3, #0
 800514c:	f7fe f98a 	bl	8003464 <__aeabi_f2d>
 8005150:	0002      	movs	r2, r0
 8005152:	000b      	movs	r3, r1
 8005154:	4d3e      	ldr	r5, [pc, #248]	@ (8005250 <CreateMessage+0x3f0>)
 8005156:	4952      	ldr	r1, [pc, #328]	@ (80052a0 <CreateMessage+0x440>)
 8005158:	483f      	ldr	r0, [pc, #252]	@ (8005258 <CreateMessage+0x3f8>)
 800515a:	9202      	str	r2, [sp, #8]
 800515c:	9303      	str	r3, [sp, #12]
 800515e:	4b42      	ldr	r3, [pc, #264]	@ (8005268 <CreateMessage+0x408>)
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	002b      	movs	r3, r5
 8005164:	0022      	movs	r2, r4
 8005166:	f01f fb8d 	bl	8024884 <siprintf>
  #endif
      index += strlen(message);
 800516a:	4b3b      	ldr	r3, [pc, #236]	@ (8005258 <CreateMessage+0x3f8>)
 800516c:	0018      	movs	r0, r3
 800516e:	f7fa fffd 	bl	800016c <strlen>
 8005172:	0003      	movs	r3, r0
 8005174:	b299      	uxth	r1, r3
 8005176:	220e      	movs	r2, #14
 8005178:	18bb      	adds	r3, r7, r2
 800517a:	18ba      	adds	r2, r7, r2
 800517c:	8812      	ldrh	r2, [r2, #0]
 800517e:	188a      	adds	r2, r1, r2
 8005180:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005182:	1dbb      	adds	r3, r7, #6
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d019      	beq.n	80051be <CreateMessage+0x35e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800518a:	4b33      	ldr	r3, [pc, #204]	@ (8005258 <CreateMessage+0x3f8>)
 800518c:	0018      	movs	r0, r3
 800518e:	f7fa ffed 	bl	800016c <strlen>
 8005192:	0003      	movs	r3, r0
 8005194:	b29a      	uxth	r2, r3
 8005196:	4b30      	ldr	r3, [pc, #192]	@ (8005258 <CreateMessage+0x3f8>)
 8005198:	0011      	movs	r1, r2
 800519a:	0018      	movs	r0, r3
 800519c:	f7ff fc60 	bl	8004a60 <ESP_Send>
 80051a0:	0003      	movs	r3, r0
 80051a2:	001a      	movs	r2, r3
 80051a4:	4b35      	ldr	r3, [pc, #212]	@ (800527c <CreateMessage+0x41c>)
 80051a6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80051a8:	4b35      	ldr	r3, [pc, #212]	@ (8005280 <CreateMessage+0x420>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	001a      	movs	r2, r3
 80051ae:	4b33      	ldr	r3, [pc, #204]	@ (800527c <CreateMessage+0x41c>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	4013      	ands	r3, r2
 80051b4:	1e5a      	subs	r2, r3, #1
 80051b6:	4193      	sbcs	r3, r2
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	4b31      	ldr	r3, [pc, #196]	@ (8005280 <CreateMessage+0x420>)
 80051bc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 80051be:	4b28      	ldr	r3, [pc, #160]	@ (8005260 <CreateMessage+0x400>)
 80051c0:	4838      	ldr	r0, [pc, #224]	@ (80052a4 <CreateMessage+0x444>)
 80051c2:	220c      	movs	r2, #12
 80051c4:	0019      	movs	r1, r3
 80051c6:	f005 fe0b 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80051ca:	4a25      	ldr	r2, [pc, #148]	@ (8005260 <CreateMessage+0x400>)
 80051cc:	4b26      	ldr	r3, [pc, #152]	@ (8005268 <CreateMessage+0x408>)
 80051ce:	0011      	movs	r1, r2
 80051d0:	0018      	movs	r0, r3
 80051d2:	f7ff fe21 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 80051d6:	4b25      	ldr	r3, [pc, #148]	@ (800526c <CreateMessage+0x40c>)
 80051d8:	689c      	ldr	r4, [r3, #8]
 80051da:	4b25      	ldr	r3, [pc, #148]	@ (8005270 <CreateMessage+0x410>)
 80051dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051de:	1c18      	adds	r0, r3, #0
 80051e0:	f7fe f940 	bl	8003464 <__aeabi_f2d>
 80051e4:	0002      	movs	r2, r0
 80051e6:	000b      	movs	r3, r1
 80051e8:	4d19      	ldr	r5, [pc, #100]	@ (8005250 <CreateMessage+0x3f0>)
 80051ea:	492f      	ldr	r1, [pc, #188]	@ (80052a8 <CreateMessage+0x448>)
 80051ec:	481a      	ldr	r0, [pc, #104]	@ (8005258 <CreateMessage+0x3f8>)
 80051ee:	9202      	str	r2, [sp, #8]
 80051f0:	9303      	str	r3, [sp, #12]
 80051f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005268 <CreateMessage+0x408>)
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	002b      	movs	r3, r5
 80051f8:	0022      	movs	r2, r4
 80051fa:	f01f fb43 	bl	8024884 <siprintf>
#endif
  index += strlen(message);
 80051fe:	4b16      	ldr	r3, [pc, #88]	@ (8005258 <CreateMessage+0x3f8>)
 8005200:	0018      	movs	r0, r3
 8005202:	f7fa ffb3 	bl	800016c <strlen>
 8005206:	0003      	movs	r3, r0
 8005208:	b299      	uxth	r1, r3
 800520a:	220e      	movs	r2, #14
 800520c:	18bb      	adds	r3, r7, r2
 800520e:	18ba      	adds	r2, r7, r2
 8005210:	8812      	ldrh	r2, [r2, #0]
 8005212:	188a      	adds	r2, r1, r2
 8005214:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005216:	1dbb      	adds	r3, r7, #6
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d048      	beq.n	80052b0 <CreateMessage+0x450>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800521e:	4b0e      	ldr	r3, [pc, #56]	@ (8005258 <CreateMessage+0x3f8>)
 8005220:	0018      	movs	r0, r3
 8005222:	f7fa ffa3 	bl	800016c <strlen>
 8005226:	0003      	movs	r3, r0
 8005228:	b29a      	uxth	r2, r3
 800522a:	4b0b      	ldr	r3, [pc, #44]	@ (8005258 <CreateMessage+0x3f8>)
 800522c:	0011      	movs	r1, r2
 800522e:	0018      	movs	r0, r3
 8005230:	f7ff fc16 	bl	8004a60 <ESP_Send>
 8005234:	0003      	movs	r3, r0
 8005236:	001a      	movs	r2, r3
 8005238:	4b10      	ldr	r3, [pc, #64]	@ (800527c <CreateMessage+0x41c>)
 800523a:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800523c:	4b10      	ldr	r3, [pc, #64]	@ (8005280 <CreateMessage+0x420>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	001a      	movs	r2, r3
 8005242:	4b0e      	ldr	r3, [pc, #56]	@ (800527c <CreateMessage+0x41c>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	4013      	ands	r3, r2
 8005248:	1e5a      	subs	r2, r3, #1
 800524a:	4193      	sbcs	r3, r2
 800524c:	b2da      	uxtb	r2, r3
 800524e:	e02d      	b.n	80052ac <CreateMessage+0x44c>
 8005250:	20000744 	.word	0x20000744
 8005254:	0802c86c 	.word	0x0802c86c
 8005258:	200005e4 	.word	0x200005e4
 800525c:	08029444 	.word	0x08029444
 8005260:	20000764 	.word	0x20000764
 8005264:	0808000c 	.word	0x0808000c
 8005268:	20000770 	.word	0x20000770
 800526c:	200005c4 	.word	0x200005c4
 8005270:	20000694 	.word	0x20000694
 8005274:	08029448 	.word	0x08029448
 8005278:	200005e5 	.word	0x200005e5
 800527c:	20000789 	.word	0x20000789
 8005280:	2000002d 	.word	0x2000002d
 8005284:	08080018 	.word	0x08080018
 8005288:	0802949c 	.word	0x0802949c
 800528c:	08080030 	.word	0x08080030
 8005290:	080294f4 	.word	0x080294f4
 8005294:	0808003c 	.word	0x0808003c
 8005298:	08029548 	.word	0x08029548
 800529c:	080800e0 	.word	0x080800e0
 80052a0:	080295a4 	.word	0x080295a4
 80052a4:	08080048 	.word	0x08080048
 80052a8:	08029600 	.word	0x08029600
 80052ac:	4bec      	ldr	r3, [pc, #944]	@ (8005660 <CreateMessage+0x800>)
 80052ae:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 80052b0:	1dfb      	adds	r3, r7, #7
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2201      	movs	r2, #1
 80052b6:	4053      	eors	r3, r2
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d100      	bne.n	80052c0 <CreateMessage+0x460>
 80052be:	e1fb      	b.n	80056b8 <CreateMessage+0x858>
    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 80052c0:	4be8      	ldr	r3, [pc, #928]	@ (8005664 <CreateMessage+0x804>)
 80052c2:	48e9      	ldr	r0, [pc, #932]	@ (8005668 <CreateMessage+0x808>)
 80052c4:	220c      	movs	r2, #12
 80052c6:	0019      	movs	r1, r3
 80052c8:	f005 fd8a 	bl	800ade0 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 80052cc:	4ae5      	ldr	r2, [pc, #916]	@ (8005664 <CreateMessage+0x804>)
 80052ce:	4be7      	ldr	r3, [pc, #924]	@ (800566c <CreateMessage+0x80c>)
 80052d0:	0011      	movs	r1, r2
 80052d2:	0018      	movs	r0, r3
 80052d4:	f7ff fda0 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 80052d8:	4be5      	ldr	r3, [pc, #916]	@ (8005670 <CreateMessage+0x810>)
 80052da:	689c      	ldr	r4, [r3, #8]
 80052dc:	4be5      	ldr	r3, [pc, #916]	@ (8005674 <CreateMessage+0x814>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	1c18      	adds	r0, r3, #0
 80052e2:	f7fe f8bf 	bl	8003464 <__aeabi_f2d>
 80052e6:	0002      	movs	r2, r0
 80052e8:	000b      	movs	r3, r1
 80052ea:	4de3      	ldr	r5, [pc, #908]	@ (8005678 <CreateMessage+0x818>)
 80052ec:	49e3      	ldr	r1, [pc, #908]	@ (800567c <CreateMessage+0x81c>)
 80052ee:	48e4      	ldr	r0, [pc, #912]	@ (8005680 <CreateMessage+0x820>)
 80052f0:	9202      	str	r2, [sp, #8]
 80052f2:	9303      	str	r3, [sp, #12]
 80052f4:	4bdd      	ldr	r3, [pc, #884]	@ (800566c <CreateMessage+0x80c>)
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	002b      	movs	r3, r5
 80052fa:	0022      	movs	r2, r4
 80052fc:	f01f fac2 	bl	8024884 <siprintf>
#endif
    index += strlen(message);
 8005300:	4bdf      	ldr	r3, [pc, #892]	@ (8005680 <CreateMessage+0x820>)
 8005302:	0018      	movs	r0, r3
 8005304:	f7fa ff32 	bl	800016c <strlen>
 8005308:	0003      	movs	r3, r0
 800530a:	b299      	uxth	r1, r3
 800530c:	220e      	movs	r2, #14
 800530e:	18bb      	adds	r3, r7, r2
 8005310:	18ba      	adds	r2, r7, r2
 8005312:	8812      	ldrh	r2, [r2, #0]
 8005314:	188a      	adds	r2, r1, r2
 8005316:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005318:	1dbb      	adds	r3, r7, #6
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d019      	beq.n	8005354 <CreateMessage+0x4f4>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005320:	4bd7      	ldr	r3, [pc, #860]	@ (8005680 <CreateMessage+0x820>)
 8005322:	0018      	movs	r0, r3
 8005324:	f7fa ff22 	bl	800016c <strlen>
 8005328:	0003      	movs	r3, r0
 800532a:	b29a      	uxth	r2, r3
 800532c:	4bd4      	ldr	r3, [pc, #848]	@ (8005680 <CreateMessage+0x820>)
 800532e:	0011      	movs	r1, r2
 8005330:	0018      	movs	r0, r3
 8005332:	f7ff fb95 	bl	8004a60 <ESP_Send>
 8005336:	0003      	movs	r3, r0
 8005338:	001a      	movs	r2, r3
 800533a:	4bd2      	ldr	r3, [pc, #840]	@ (8005684 <CreateMessage+0x824>)
 800533c:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 800533e:	4bc8      	ldr	r3, [pc, #800]	@ (8005660 <CreateMessage+0x800>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	001a      	movs	r2, r3
 8005344:	4bcf      	ldr	r3, [pc, #828]	@ (8005684 <CreateMessage+0x824>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	4013      	ands	r3, r2
 800534a:	1e5a      	subs	r2, r3, #1
 800534c:	4193      	sbcs	r3, r2
 800534e:	b2da      	uxtb	r2, r3
 8005350:	4bc3      	ldr	r3, [pc, #780]	@ (8005660 <CreateMessage+0x800>)
 8005352:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8005354:	4bcc      	ldr	r3, [pc, #816]	@ (8005688 <CreateMessage+0x828>)
 8005356:	791b      	ldrb	r3, [r3, #4]
 8005358:	2b35      	cmp	r3, #53	@ 0x35
 800535a:	d147      	bne.n	80053ec <CreateMessage+0x58c>
 800535c:	f003 fba4 	bl	8008aa8 <Check_USB_PowerOn>
 8005360:	1e03      	subs	r3, r0, #0
 8005362:	d043      	beq.n	80053ec <CreateMessage+0x58c>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 8005364:	4bbf      	ldr	r3, [pc, #764]	@ (8005664 <CreateMessage+0x804>)
 8005366:	48c9      	ldr	r0, [pc, #804]	@ (800568c <CreateMessage+0x82c>)
 8005368:	220c      	movs	r2, #12
 800536a:	0019      	movs	r1, r3
 800536c:	f005 fd38 	bl	800ade0 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005370:	4abc      	ldr	r2, [pc, #752]	@ (8005664 <CreateMessage+0x804>)
 8005372:	4bbe      	ldr	r3, [pc, #760]	@ (800566c <CreateMessage+0x80c>)
 8005374:	0011      	movs	r1, r2
 8005376:	0018      	movs	r0, r3
 8005378:	f7ff fd4e 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 800537c:	4bbc      	ldr	r3, [pc, #752]	@ (8005670 <CreateMessage+0x810>)
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	4bc3      	ldr	r3, [pc, #780]	@ (8005690 <CreateMessage+0x830>)
 8005382:	2156      	movs	r1, #86	@ 0x56
 8005384:	5a5b      	ldrh	r3, [r3, r1]
 8005386:	4cbc      	ldr	r4, [pc, #752]	@ (8005678 <CreateMessage+0x818>)
 8005388:	49c2      	ldr	r1, [pc, #776]	@ (8005694 <CreateMessage+0x834>)
 800538a:	48bd      	ldr	r0, [pc, #756]	@ (8005680 <CreateMessage+0x820>)
 800538c:	9301      	str	r3, [sp, #4]
 800538e:	4bb7      	ldr	r3, [pc, #732]	@ (800566c <CreateMessage+0x80c>)
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	0023      	movs	r3, r4
 8005394:	f01f fa76 	bl	8024884 <siprintf>
#endif
      index += strlen(message);
 8005398:	4bb9      	ldr	r3, [pc, #740]	@ (8005680 <CreateMessage+0x820>)
 800539a:	0018      	movs	r0, r3
 800539c:	f7fa fee6 	bl	800016c <strlen>
 80053a0:	0003      	movs	r3, r0
 80053a2:	b299      	uxth	r1, r3
 80053a4:	220e      	movs	r2, #14
 80053a6:	18bb      	adds	r3, r7, r2
 80053a8:	18ba      	adds	r2, r7, r2
 80053aa:	8812      	ldrh	r2, [r2, #0]
 80053ac:	188a      	adds	r2, r1, r2
 80053ae:	801a      	strh	r2, [r3, #0]
      if (send) {
 80053b0:	1dbb      	adds	r3, r7, #6
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d019      	beq.n	80053ec <CreateMessage+0x58c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80053b8:	4bb1      	ldr	r3, [pc, #708]	@ (8005680 <CreateMessage+0x820>)
 80053ba:	0018      	movs	r0, r3
 80053bc:	f7fa fed6 	bl	800016c <strlen>
 80053c0:	0003      	movs	r3, r0
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	4bae      	ldr	r3, [pc, #696]	@ (8005680 <CreateMessage+0x820>)
 80053c6:	0011      	movs	r1, r2
 80053c8:	0018      	movs	r0, r3
 80053ca:	f7ff fb49 	bl	8004a60 <ESP_Send>
 80053ce:	0003      	movs	r3, r0
 80053d0:	001a      	movs	r2, r3
 80053d2:	4bac      	ldr	r3, [pc, #688]	@ (8005684 <CreateMessage+0x824>)
 80053d4:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80053d6:	4ba2      	ldr	r3, [pc, #648]	@ (8005660 <CreateMessage+0x800>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	001a      	movs	r2, r3
 80053dc:	4ba9      	ldr	r3, [pc, #676]	@ (8005684 <CreateMessage+0x824>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	4013      	ands	r3, r2
 80053e2:	1e5a      	subs	r2, r3, #1
 80053e4:	4193      	sbcs	r3, r2
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	4b9d      	ldr	r3, [pc, #628]	@ (8005660 <CreateMessage+0x800>)
 80053ea:	701a      	strb	r2, [r3, #0]
      }
    }
    if (sen5x_Get_sen5x_enable_state()) {
 80053ec:	f007 fe10 	bl	800d010 <sen5x_Get_sen5x_enable_state>
 80053f0:	1e03      	subs	r3, r0, #0
 80053f2:	d100      	bne.n	80053f6 <CreateMessage+0x596>
 80053f4:	e160      	b.n	80056b8 <CreateMessage+0x858>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 80053f6:	4b9b      	ldr	r3, [pc, #620]	@ (8005664 <CreateMessage+0x804>)
 80053f8:	48a7      	ldr	r0, [pc, #668]	@ (8005698 <CreateMessage+0x838>)
 80053fa:	220c      	movs	r2, #12
 80053fc:	0019      	movs	r1, r3
 80053fe:	f005 fcef 	bl	800ade0 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer)) {
 8005402:	4b98      	ldr	r3, [pc, #608]	@ (8005664 <CreateMessage+0x804>)
 8005404:	0018      	movs	r0, r3
 8005406:	f7ff fcd3 	bl	8004db0 <isKeyValid>
 800540a:	1e03      	subs	r3, r0, #0
 800540c:	d043      	beq.n	8005496 <CreateMessage+0x636>
        uint8ArrayToString(Buffer, keybuffer);
 800540e:	4a95      	ldr	r2, [pc, #596]	@ (8005664 <CreateMessage+0x804>)
 8005410:	4b96      	ldr	r3, [pc, #600]	@ (800566c <CreateMessage+0x80c>)
 8005412:	0011      	movs	r1, r2
 8005414:	0018      	movs	r0, r3
 8005416:	f7ff fcff 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
 800541a:	4b95      	ldr	r3, [pc, #596]	@ (8005670 <CreateMessage+0x810>)
 800541c:	689c      	ldr	r4, [r3, #8]
 800541e:	4b9c      	ldr	r3, [pc, #624]	@ (8005690 <CreateMessage+0x830>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	1c18      	adds	r0, r3, #0
 8005424:	f7fe f81e 	bl	8003464 <__aeabi_f2d>
 8005428:	0002      	movs	r2, r0
 800542a:	000b      	movs	r3, r1
 800542c:	4d92      	ldr	r5, [pc, #584]	@ (8005678 <CreateMessage+0x818>)
 800542e:	499b      	ldr	r1, [pc, #620]	@ (800569c <CreateMessage+0x83c>)
 8005430:	4893      	ldr	r0, [pc, #588]	@ (8005680 <CreateMessage+0x820>)
 8005432:	9202      	str	r2, [sp, #8]
 8005434:	9303      	str	r3, [sp, #12]
 8005436:	4b8d      	ldr	r3, [pc, #564]	@ (800566c <CreateMessage+0x80c>)
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	002b      	movs	r3, r5
 800543c:	0022      	movs	r2, r4
 800543e:	f01f fa21 	bl	8024884 <siprintf>
#endif
        index += strlen(message);
 8005442:	4b8f      	ldr	r3, [pc, #572]	@ (8005680 <CreateMessage+0x820>)
 8005444:	0018      	movs	r0, r3
 8005446:	f7fa fe91 	bl	800016c <strlen>
 800544a:	0003      	movs	r3, r0
 800544c:	b299      	uxth	r1, r3
 800544e:	220e      	movs	r2, #14
 8005450:	18bb      	adds	r3, r7, r2
 8005452:	18ba      	adds	r2, r7, r2
 8005454:	8812      	ldrh	r2, [r2, #0]
 8005456:	188a      	adds	r2, r1, r2
 8005458:	801a      	strh	r2, [r3, #0]
        if (send) {
 800545a:	1dbb      	adds	r3, r7, #6
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d019      	beq.n	8005496 <CreateMessage+0x636>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005462:	4b87      	ldr	r3, [pc, #540]	@ (8005680 <CreateMessage+0x820>)
 8005464:	0018      	movs	r0, r3
 8005466:	f7fa fe81 	bl	800016c <strlen>
 800546a:	0003      	movs	r3, r0
 800546c:	b29a      	uxth	r2, r3
 800546e:	4b84      	ldr	r3, [pc, #528]	@ (8005680 <CreateMessage+0x820>)
 8005470:	0011      	movs	r1, r2
 8005472:	0018      	movs	r0, r3
 8005474:	f7ff faf4 	bl	8004a60 <ESP_Send>
 8005478:	0003      	movs	r3, r0
 800547a:	001a      	movs	r2, r3
 800547c:	4b81      	ldr	r3, [pc, #516]	@ (8005684 <CreateMessage+0x824>)
 800547e:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005480:	4b77      	ldr	r3, [pc, #476]	@ (8005660 <CreateMessage+0x800>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	001a      	movs	r2, r3
 8005486:	4b7f      	ldr	r3, [pc, #508]	@ (8005684 <CreateMessage+0x824>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	4013      	ands	r3, r2
 800548c:	1e5a      	subs	r2, r3, #1
 800548e:	4193      	sbcs	r3, r2
 8005490:	b2da      	uxtb	r2, r3
 8005492:	4b73      	ldr	r3, [pc, #460]	@ (8005660 <CreateMessage+0x800>)
 8005494:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005496:	4b73      	ldr	r3, [pc, #460]	@ (8005664 <CreateMessage+0x804>)
 8005498:	4881      	ldr	r0, [pc, #516]	@ (80056a0 <CreateMessage+0x840>)
 800549a:	220c      	movs	r2, #12
 800549c:	0019      	movs	r1, r3
 800549e:	f005 fc9f 	bl	800ade0 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 80054a2:	4a70      	ldr	r2, [pc, #448]	@ (8005664 <CreateMessage+0x804>)
 80054a4:	4b71      	ldr	r3, [pc, #452]	@ (800566c <CreateMessage+0x80c>)
 80054a6:	0011      	movs	r1, r2
 80054a8:	0018      	movs	r0, r3
 80054aa:	f7ff fcb5 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 80054ae:	4b70      	ldr	r3, [pc, #448]	@ (8005670 <CreateMessage+0x810>)
 80054b0:	689c      	ldr	r4, [r3, #8]
 80054b2:	4b77      	ldr	r3, [pc, #476]	@ (8005690 <CreateMessage+0x830>)
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	1c18      	adds	r0, r3, #0
 80054b8:	f7fd ffd4 	bl	8003464 <__aeabi_f2d>
 80054bc:	0002      	movs	r2, r0
 80054be:	000b      	movs	r3, r1
 80054c0:	4d6d      	ldr	r5, [pc, #436]	@ (8005678 <CreateMessage+0x818>)
 80054c2:	4978      	ldr	r1, [pc, #480]	@ (80056a4 <CreateMessage+0x844>)
 80054c4:	486e      	ldr	r0, [pc, #440]	@ (8005680 <CreateMessage+0x820>)
 80054c6:	9202      	str	r2, [sp, #8]
 80054c8:	9303      	str	r3, [sp, #12]
 80054ca:	4b68      	ldr	r3, [pc, #416]	@ (800566c <CreateMessage+0x80c>)
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	002b      	movs	r3, r5
 80054d0:	0022      	movs	r2, r4
 80054d2:	f01f f9d7 	bl	8024884 <siprintf>
#endif
      index += strlen(message);
 80054d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005680 <CreateMessage+0x820>)
 80054d8:	0018      	movs	r0, r3
 80054da:	f7fa fe47 	bl	800016c <strlen>
 80054de:	0003      	movs	r3, r0
 80054e0:	b299      	uxth	r1, r3
 80054e2:	220e      	movs	r2, #14
 80054e4:	18bb      	adds	r3, r7, r2
 80054e6:	18ba      	adds	r2, r7, r2
 80054e8:	8812      	ldrh	r2, [r2, #0]
 80054ea:	188a      	adds	r2, r1, r2
 80054ec:	801a      	strh	r2, [r3, #0]
      if (send) {
 80054ee:	1dbb      	adds	r3, r7, #6
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d019      	beq.n	800552a <CreateMessage+0x6ca>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80054f6:	4b62      	ldr	r3, [pc, #392]	@ (8005680 <CreateMessage+0x820>)
 80054f8:	0018      	movs	r0, r3
 80054fa:	f7fa fe37 	bl	800016c <strlen>
 80054fe:	0003      	movs	r3, r0
 8005500:	b29a      	uxth	r2, r3
 8005502:	4b5f      	ldr	r3, [pc, #380]	@ (8005680 <CreateMessage+0x820>)
 8005504:	0011      	movs	r1, r2
 8005506:	0018      	movs	r0, r3
 8005508:	f7ff faaa 	bl	8004a60 <ESP_Send>
 800550c:	0003      	movs	r3, r0
 800550e:	001a      	movs	r2, r3
 8005510:	4b5c      	ldr	r3, [pc, #368]	@ (8005684 <CreateMessage+0x824>)
 8005512:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005514:	4b52      	ldr	r3, [pc, #328]	@ (8005660 <CreateMessage+0x800>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	001a      	movs	r2, r3
 800551a:	4b5a      	ldr	r3, [pc, #360]	@ (8005684 <CreateMessage+0x824>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	4013      	ands	r3, r2
 8005520:	1e5a      	subs	r2, r3, #1
 8005522:	4193      	sbcs	r3, r2
 8005524:	b2da      	uxtb	r2, r3
 8005526:	4b4e      	ldr	r3, [pc, #312]	@ (8005660 <CreateMessage+0x800>)
 8005528:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 800552a:	4b4e      	ldr	r3, [pc, #312]	@ (8005664 <CreateMessage+0x804>)
 800552c:	485e      	ldr	r0, [pc, #376]	@ (80056a8 <CreateMessage+0x848>)
 800552e:	220c      	movs	r2, #12
 8005530:	0019      	movs	r1, r3
 8005532:	f005 fc55 	bl	800ade0 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer)) {
 8005536:	4b4b      	ldr	r3, [pc, #300]	@ (8005664 <CreateMessage+0x804>)
 8005538:	0018      	movs	r0, r3
 800553a:	f7ff fc39 	bl	8004db0 <isKeyValid>
 800553e:	1e03      	subs	r3, r0, #0
 8005540:	d043      	beq.n	80055ca <CreateMessage+0x76a>
        uint8ArrayToString(Buffer, keybuffer);
 8005542:	4a48      	ldr	r2, [pc, #288]	@ (8005664 <CreateMessage+0x804>)
 8005544:	4b49      	ldr	r3, [pc, #292]	@ (800566c <CreateMessage+0x80c>)
 8005546:	0011      	movs	r1, r2
 8005548:	0018      	movs	r0, r3
 800554a:	f7ff fc65 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
 800554e:	4b48      	ldr	r3, [pc, #288]	@ (8005670 <CreateMessage+0x810>)
 8005550:	689c      	ldr	r4, [r3, #8]
 8005552:	4b4f      	ldr	r3, [pc, #316]	@ (8005690 <CreateMessage+0x830>)
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	1c18      	adds	r0, r3, #0
 8005558:	f7fd ff84 	bl	8003464 <__aeabi_f2d>
 800555c:	0002      	movs	r2, r0
 800555e:	000b      	movs	r3, r1
 8005560:	4d45      	ldr	r5, [pc, #276]	@ (8005678 <CreateMessage+0x818>)
 8005562:	4952      	ldr	r1, [pc, #328]	@ (80056ac <CreateMessage+0x84c>)
 8005564:	4846      	ldr	r0, [pc, #280]	@ (8005680 <CreateMessage+0x820>)
 8005566:	9202      	str	r2, [sp, #8]
 8005568:	9303      	str	r3, [sp, #12]
 800556a:	4b40      	ldr	r3, [pc, #256]	@ (800566c <CreateMessage+0x80c>)
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	002b      	movs	r3, r5
 8005570:	0022      	movs	r2, r4
 8005572:	f01f f987 	bl	8024884 <siprintf>
#endif
        index += strlen(message);
 8005576:	4b42      	ldr	r3, [pc, #264]	@ (8005680 <CreateMessage+0x820>)
 8005578:	0018      	movs	r0, r3
 800557a:	f7fa fdf7 	bl	800016c <strlen>
 800557e:	0003      	movs	r3, r0
 8005580:	b299      	uxth	r1, r3
 8005582:	220e      	movs	r2, #14
 8005584:	18bb      	adds	r3, r7, r2
 8005586:	18ba      	adds	r2, r7, r2
 8005588:	8812      	ldrh	r2, [r2, #0]
 800558a:	188a      	adds	r2, r1, r2
 800558c:	801a      	strh	r2, [r3, #0]
        if (send) {
 800558e:	1dbb      	adds	r3, r7, #6
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d019      	beq.n	80055ca <CreateMessage+0x76a>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005596:	4b3a      	ldr	r3, [pc, #232]	@ (8005680 <CreateMessage+0x820>)
 8005598:	0018      	movs	r0, r3
 800559a:	f7fa fde7 	bl	800016c <strlen>
 800559e:	0003      	movs	r3, r0
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	4b37      	ldr	r3, [pc, #220]	@ (8005680 <CreateMessage+0x820>)
 80055a4:	0011      	movs	r1, r2
 80055a6:	0018      	movs	r0, r3
 80055a8:	f7ff fa5a 	bl	8004a60 <ESP_Send>
 80055ac:	0003      	movs	r3, r0
 80055ae:	001a      	movs	r2, r3
 80055b0:	4b34      	ldr	r3, [pc, #208]	@ (8005684 <CreateMessage+0x824>)
 80055b2:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 80055b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005660 <CreateMessage+0x800>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	001a      	movs	r2, r3
 80055ba:	4b32      	ldr	r3, [pc, #200]	@ (8005684 <CreateMessage+0x824>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	4013      	ands	r3, r2
 80055c0:	1e5a      	subs	r2, r3, #1
 80055c2:	4193      	sbcs	r3, r2
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	4b26      	ldr	r3, [pc, #152]	@ (8005660 <CreateMessage+0x800>)
 80055c8:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 80055ca:	4b26      	ldr	r3, [pc, #152]	@ (8005664 <CreateMessage+0x804>)
 80055cc:	4838      	ldr	r0, [pc, #224]	@ (80056b0 <CreateMessage+0x850>)
 80055ce:	220c      	movs	r2, #12
 80055d0:	0019      	movs	r1, r3
 80055d2:	f005 fc05 	bl	800ade0 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 80055d6:	4a23      	ldr	r2, [pc, #140]	@ (8005664 <CreateMessage+0x804>)
 80055d8:	4b24      	ldr	r3, [pc, #144]	@ (800566c <CreateMessage+0x80c>)
 80055da:	0011      	movs	r1, r2
 80055dc:	0018      	movs	r0, r3
 80055de:	f7ff fc1b 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 80055e2:	4b23      	ldr	r3, [pc, #140]	@ (8005670 <CreateMessage+0x810>)
 80055e4:	689c      	ldr	r4, [r3, #8]
 80055e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005690 <CreateMessage+0x830>)
 80055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ea:	1c18      	adds	r0, r3, #0
 80055ec:	f7fd ff3a 	bl	8003464 <__aeabi_f2d>
 80055f0:	0002      	movs	r2, r0
 80055f2:	000b      	movs	r3, r1
 80055f4:	4d20      	ldr	r5, [pc, #128]	@ (8005678 <CreateMessage+0x818>)
 80055f6:	492f      	ldr	r1, [pc, #188]	@ (80056b4 <CreateMessage+0x854>)
 80055f8:	4821      	ldr	r0, [pc, #132]	@ (8005680 <CreateMessage+0x820>)
 80055fa:	9202      	str	r2, [sp, #8]
 80055fc:	9303      	str	r3, [sp, #12]
 80055fe:	4b1b      	ldr	r3, [pc, #108]	@ (800566c <CreateMessage+0x80c>)
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	002b      	movs	r3, r5
 8005604:	0022      	movs	r2, r4
 8005606:	f01f f93d 	bl	8024884 <siprintf>
#endif
      index += strlen(message);
 800560a:	4b1d      	ldr	r3, [pc, #116]	@ (8005680 <CreateMessage+0x820>)
 800560c:	0018      	movs	r0, r3
 800560e:	f7fa fdad 	bl	800016c <strlen>
 8005612:	0003      	movs	r3, r0
 8005614:	b299      	uxth	r1, r3
 8005616:	220e      	movs	r2, #14
 8005618:	18bb      	adds	r3, r7, r2
 800561a:	18ba      	adds	r2, r7, r2
 800561c:	8812      	ldrh	r2, [r2, #0]
 800561e:	188a      	adds	r2, r1, r2
 8005620:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005622:	1dbb      	adds	r3, r7, #6
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d046      	beq.n	80056b8 <CreateMessage+0x858>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800562a:	4b15      	ldr	r3, [pc, #84]	@ (8005680 <CreateMessage+0x820>)
 800562c:	0018      	movs	r0, r3
 800562e:	f7fa fd9d 	bl	800016c <strlen>
 8005632:	0003      	movs	r3, r0
 8005634:	b29a      	uxth	r2, r3
 8005636:	4b12      	ldr	r3, [pc, #72]	@ (8005680 <CreateMessage+0x820>)
 8005638:	0011      	movs	r1, r2
 800563a:	0018      	movs	r0, r3
 800563c:	f7ff fa10 	bl	8004a60 <ESP_Send>
 8005640:	0003      	movs	r3, r0
 8005642:	001a      	movs	r2, r3
 8005644:	4b0f      	ldr	r3, [pc, #60]	@ (8005684 <CreateMessage+0x824>)
 8005646:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005648:	4b05      	ldr	r3, [pc, #20]	@ (8005660 <CreateMessage+0x800>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	001a      	movs	r2, r3
 800564e:	4b0d      	ldr	r3, [pc, #52]	@ (8005684 <CreateMessage+0x824>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	4013      	ands	r3, r2
 8005654:	1e5a      	subs	r2, r3, #1
 8005656:	4193      	sbcs	r3, r2
 8005658:	b2da      	uxtb	r2, r3
 800565a:	4b01      	ldr	r3, [pc, #4]	@ (8005660 <CreateMessage+0x800>)
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e02b      	b.n	80056b8 <CreateMessage+0x858>
 8005660:	2000002d 	.word	0x2000002d
 8005664:	20000764 	.word	0x20000764
 8005668:	08080078 	.word	0x08080078
 800566c:	20000770 	.word	0x20000770
 8005670:	200005c4 	.word	0x200005c4
 8005674:	200005e0 	.word	0x200005e0
 8005678:	20000744 	.word	0x20000744
 800567c:	0802965c 	.word	0x0802965c
 8005680:	200005e4 	.word	0x200005e4
 8005684:	20000789 	.word	0x20000789
 8005688:	20000ef0 	.word	0x20000ef0
 800568c:	08080024 	.word	0x08080024
 8005690:	20000694 	.word	0x20000694
 8005694:	080296bc 	.word	0x080296bc
 8005698:	080800b0 	.word	0x080800b0
 800569c:	08029710 	.word	0x08029710
 80056a0:	08080054 	.word	0x08080054
 80056a4:	08029768 	.word	0x08029768
 80056a8:	080800bc 	.word	0x080800bc
 80056ac:	080297c4 	.word	0x080297c4
 80056b0:	08080060 	.word	0x08080060
 80056b4:	0802981c 	.word	0x0802981c
      }
    }
  }

  if (IsAHT20SensorPresent()) {
 80056b8:	f006 fcb2 	bl	800c020 <IsAHT20SensorPresent>
 80056bc:	1e03      	subs	r3, r0, #0
 80056be:	d100      	bne.n	80056c2 <CreateMessage+0x862>
 80056c0:	e09f      	b.n	8005802 <CreateMessage+0x9a2>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 80056c2:	4beb      	ldr	r3, [pc, #940]	@ (8005a70 <CreateMessage+0xc10>)
 80056c4:	48eb      	ldr	r0, [pc, #940]	@ (8005a74 <CreateMessage+0xc14>)
 80056c6:	220c      	movs	r2, #12
 80056c8:	0019      	movs	r1, r3
 80056ca:	f005 fb89 	bl	800ade0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer)) {
 80056ce:	4be8      	ldr	r3, [pc, #928]	@ (8005a70 <CreateMessage+0xc10>)
 80056d0:	0018      	movs	r0, r3
 80056d2:	f7ff fb6d 	bl	8004db0 <isKeyValid>
 80056d6:	1e03      	subs	r3, r0, #0
 80056d8:	d043      	beq.n	8005762 <CreateMessage+0x902>
      uint8ArrayToString(Buffer, keybuffer);
 80056da:	4ae5      	ldr	r2, [pc, #916]	@ (8005a70 <CreateMessage+0xc10>)
 80056dc:	4be6      	ldr	r3, [pc, #920]	@ (8005a78 <CreateMessage+0xc18>)
 80056de:	0011      	movs	r1, r2
 80056e0:	0018      	movs	r0, r3
 80056e2:	f7ff fb99 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperaturemax);
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperaturemax);
 80056e6:	4be5      	ldr	r3, [pc, #916]	@ (8005a7c <CreateMessage+0xc1c>)
 80056e8:	689c      	ldr	r4, [r3, #8]
 80056ea:	4be5      	ldr	r3, [pc, #916]	@ (8005a80 <CreateMessage+0xc20>)
 80056ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ee:	1c18      	adds	r0, r3, #0
 80056f0:	f7fd feb8 	bl	8003464 <__aeabi_f2d>
 80056f4:	0002      	movs	r2, r0
 80056f6:	000b      	movs	r3, r1
 80056f8:	4de2      	ldr	r5, [pc, #904]	@ (8005a84 <CreateMessage+0xc24>)
 80056fa:	49e3      	ldr	r1, [pc, #908]	@ (8005a88 <CreateMessage+0xc28>)
 80056fc:	48e3      	ldr	r0, [pc, #908]	@ (8005a8c <CreateMessage+0xc2c>)
 80056fe:	9202      	str	r2, [sp, #8]
 8005700:	9303      	str	r3, [sp, #12]
 8005702:	4bdd      	ldr	r3, [pc, #884]	@ (8005a78 <CreateMessage+0xc18>)
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	002b      	movs	r3, r5
 8005708:	0022      	movs	r2, r4
 800570a:	f01f f8bb 	bl	8024884 <siprintf>
#endif
      index += strlen(message);
 800570e:	4bdf      	ldr	r3, [pc, #892]	@ (8005a8c <CreateMessage+0xc2c>)
 8005710:	0018      	movs	r0, r3
 8005712:	f7fa fd2b 	bl	800016c <strlen>
 8005716:	0003      	movs	r3, r0
 8005718:	b299      	uxth	r1, r3
 800571a:	220e      	movs	r2, #14
 800571c:	18bb      	adds	r3, r7, r2
 800571e:	18ba      	adds	r2, r7, r2
 8005720:	8812      	ldrh	r2, [r2, #0]
 8005722:	188a      	adds	r2, r1, r2
 8005724:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005726:	1dbb      	adds	r3, r7, #6
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d019      	beq.n	8005762 <CreateMessage+0x902>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800572e:	4bd7      	ldr	r3, [pc, #860]	@ (8005a8c <CreateMessage+0xc2c>)
 8005730:	0018      	movs	r0, r3
 8005732:	f7fa fd1b 	bl	800016c <strlen>
 8005736:	0003      	movs	r3, r0
 8005738:	b29a      	uxth	r2, r3
 800573a:	4bd4      	ldr	r3, [pc, #848]	@ (8005a8c <CreateMessage+0xc2c>)
 800573c:	0011      	movs	r1, r2
 800573e:	0018      	movs	r0, r3
 8005740:	f7ff f98e 	bl	8004a60 <ESP_Send>
 8005744:	0003      	movs	r3, r0
 8005746:	001a      	movs	r2, r3
 8005748:	4bd1      	ldr	r3, [pc, #836]	@ (8005a90 <CreateMessage+0xc30>)
 800574a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800574c:	4bd1      	ldr	r3, [pc, #836]	@ (8005a94 <CreateMessage+0xc34>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	001a      	movs	r2, r3
 8005752:	4bcf      	ldr	r3, [pc, #828]	@ (8005a90 <CreateMessage+0xc30>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	4013      	ands	r3, r2
 8005758:	1e5a      	subs	r2, r3, #1
 800575a:	4193      	sbcs	r3, r2
 800575c:	b2da      	uxtb	r2, r3
 800575e:	4bcd      	ldr	r3, [pc, #820]	@ (8005a94 <CreateMessage+0xc34>)
 8005760:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 8005762:	4bc3      	ldr	r3, [pc, #780]	@ (8005a70 <CreateMessage+0xc10>)
 8005764:	48cc      	ldr	r0, [pc, #816]	@ (8005a98 <CreateMessage+0xc38>)
 8005766:	220c      	movs	r2, #12
 8005768:	0019      	movs	r1, r3
 800576a:	f005 fb39 	bl	800ade0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer)) {
 800576e:	4bc0      	ldr	r3, [pc, #768]	@ (8005a70 <CreateMessage+0xc10>)
 8005770:	0018      	movs	r0, r3
 8005772:	f7ff fb1d 	bl	8004db0 <isKeyValid>
 8005776:	1e03      	subs	r3, r0, #0
 8005778:	d043      	beq.n	8005802 <CreateMessage+0x9a2>
      uint8ArrayToString(Buffer, keybuffer);
 800577a:	4abd      	ldr	r2, [pc, #756]	@ (8005a70 <CreateMessage+0xc10>)
 800577c:	4bbe      	ldr	r3, [pc, #760]	@ (8005a78 <CreateMessage+0xc18>)
 800577e:	0011      	movs	r1, r2
 8005780:	0018      	movs	r0, r3
 8005782:	f7ff fb49 	bl	8004e18 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humiditymax);
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humiditymax);
 8005786:	4bbd      	ldr	r3, [pc, #756]	@ (8005a7c <CreateMessage+0xc1c>)
 8005788:	689c      	ldr	r4, [r3, #8]
 800578a:	4bbd      	ldr	r3, [pc, #756]	@ (8005a80 <CreateMessage+0xc20>)
 800578c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800578e:	1c18      	adds	r0, r3, #0
 8005790:	f7fd fe68 	bl	8003464 <__aeabi_f2d>
 8005794:	0002      	movs	r2, r0
 8005796:	000b      	movs	r3, r1
 8005798:	4dba      	ldr	r5, [pc, #744]	@ (8005a84 <CreateMessage+0xc24>)
 800579a:	49c0      	ldr	r1, [pc, #768]	@ (8005a9c <CreateMessage+0xc3c>)
 800579c:	48bb      	ldr	r0, [pc, #748]	@ (8005a8c <CreateMessage+0xc2c>)
 800579e:	9202      	str	r2, [sp, #8]
 80057a0:	9303      	str	r3, [sp, #12]
 80057a2:	4bb5      	ldr	r3, [pc, #724]	@ (8005a78 <CreateMessage+0xc18>)
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	002b      	movs	r3, r5
 80057a8:	0022      	movs	r2, r4
 80057aa:	f01f f86b 	bl	8024884 <siprintf>
  #endif
      index += strlen(message);
 80057ae:	4bb7      	ldr	r3, [pc, #732]	@ (8005a8c <CreateMessage+0xc2c>)
 80057b0:	0018      	movs	r0, r3
 80057b2:	f7fa fcdb 	bl	800016c <strlen>
 80057b6:	0003      	movs	r3, r0
 80057b8:	b299      	uxth	r1, r3
 80057ba:	220e      	movs	r2, #14
 80057bc:	18bb      	adds	r3, r7, r2
 80057be:	18ba      	adds	r2, r7, r2
 80057c0:	8812      	ldrh	r2, [r2, #0]
 80057c2:	188a      	adds	r2, r1, r2
 80057c4:	801a      	strh	r2, [r3, #0]
      if (send) {
 80057c6:	1dbb      	adds	r3, r7, #6
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d019      	beq.n	8005802 <CreateMessage+0x9a2>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80057ce:	4baf      	ldr	r3, [pc, #700]	@ (8005a8c <CreateMessage+0xc2c>)
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7fa fccb 	bl	800016c <strlen>
 80057d6:	0003      	movs	r3, r0
 80057d8:	b29a      	uxth	r2, r3
 80057da:	4bac      	ldr	r3, [pc, #688]	@ (8005a8c <CreateMessage+0xc2c>)
 80057dc:	0011      	movs	r1, r2
 80057de:	0018      	movs	r0, r3
 80057e0:	f7ff f93e 	bl	8004a60 <ESP_Send>
 80057e4:	0003      	movs	r3, r0
 80057e6:	001a      	movs	r2, r3
 80057e8:	4ba9      	ldr	r3, [pc, #676]	@ (8005a90 <CreateMessage+0xc30>)
 80057ea:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80057ec:	4ba9      	ldr	r3, [pc, #676]	@ (8005a94 <CreateMessage+0xc34>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	001a      	movs	r2, r3
 80057f2:	4ba7      	ldr	r3, [pc, #668]	@ (8005a90 <CreateMessage+0xc30>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	4013      	ands	r3, r2
 80057f8:	1e5a      	subs	r2, r3, #1
 80057fa:	4193      	sbcs	r3, r2
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	4ba5      	ldr	r3, [pc, #660]	@ (8005a94 <CreateMessage+0xc34>)
 8005800:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8005802:	f006 fc21 	bl	800c048 <IsENS160SensorPresent>
 8005806:	1e03      	subs	r3, r0, #0
 8005808:	d100      	bne.n	800580c <CreateMessage+0x9ac>
 800580a:	e0dd      	b.n	80059c8 <CreateMessage+0xb68>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 800580c:	4b98      	ldr	r3, [pc, #608]	@ (8005a70 <CreateMessage+0xc10>)
 800580e:	48a4      	ldr	r0, [pc, #656]	@ (8005aa0 <CreateMessage+0xc40>)
 8005810:	220c      	movs	r2, #12
 8005812:	0019      	movs	r1, r3
 8005814:	f005 fae4 	bl	800ade0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer)) {
 8005818:	4b95      	ldr	r3, [pc, #596]	@ (8005a70 <CreateMessage+0xc10>)
 800581a:	0018      	movs	r0, r3
 800581c:	f7ff fac8 	bl	8004db0 <isKeyValid>
 8005820:	1e03      	subs	r3, r0, #0
 8005822:	d03d      	beq.n	80058a0 <CreateMessage+0xa40>
      uint8ArrayToString(Buffer, keybuffer);
 8005824:	4a92      	ldr	r2, [pc, #584]	@ (8005a70 <CreateMessage+0xc10>)
 8005826:	4b94      	ldr	r3, [pc, #592]	@ (8005a78 <CreateMessage+0xc18>)
 8005828:	0011      	movs	r1, r2
 800582a:	0018      	movs	r0, r3
 800582c:	f7ff faf4 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
 8005830:	4b92      	ldr	r3, [pc, #584]	@ (8005a7c <CreateMessage+0xc1c>)
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	4b92      	ldr	r3, [pc, #584]	@ (8005a80 <CreateMessage+0xc20>)
 8005836:	215d      	movs	r1, #93	@ 0x5d
 8005838:	5c5b      	ldrb	r3, [r3, r1]
 800583a:	4c92      	ldr	r4, [pc, #584]	@ (8005a84 <CreateMessage+0xc24>)
 800583c:	4999      	ldr	r1, [pc, #612]	@ (8005aa4 <CreateMessage+0xc44>)
 800583e:	4893      	ldr	r0, [pc, #588]	@ (8005a8c <CreateMessage+0xc2c>)
 8005840:	9301      	str	r3, [sp, #4]
 8005842:	4b8d      	ldr	r3, [pc, #564]	@ (8005a78 <CreateMessage+0xc18>)
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	0023      	movs	r3, r4
 8005848:	f01f f81c 	bl	8024884 <siprintf>
#endif
      index += strlen(message);
 800584c:	4b8f      	ldr	r3, [pc, #572]	@ (8005a8c <CreateMessage+0xc2c>)
 800584e:	0018      	movs	r0, r3
 8005850:	f7fa fc8c 	bl	800016c <strlen>
 8005854:	0003      	movs	r3, r0
 8005856:	b299      	uxth	r1, r3
 8005858:	220e      	movs	r2, #14
 800585a:	18bb      	adds	r3, r7, r2
 800585c:	18ba      	adds	r2, r7, r2
 800585e:	8812      	ldrh	r2, [r2, #0]
 8005860:	188a      	adds	r2, r1, r2
 8005862:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005864:	1dbb      	adds	r3, r7, #6
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d019      	beq.n	80058a0 <CreateMessage+0xa40>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800586c:	4b87      	ldr	r3, [pc, #540]	@ (8005a8c <CreateMessage+0xc2c>)
 800586e:	0018      	movs	r0, r3
 8005870:	f7fa fc7c 	bl	800016c <strlen>
 8005874:	0003      	movs	r3, r0
 8005876:	b29a      	uxth	r2, r3
 8005878:	4b84      	ldr	r3, [pc, #528]	@ (8005a8c <CreateMessage+0xc2c>)
 800587a:	0011      	movs	r1, r2
 800587c:	0018      	movs	r0, r3
 800587e:	f7ff f8ef 	bl	8004a60 <ESP_Send>
 8005882:	0003      	movs	r3, r0
 8005884:	001a      	movs	r2, r3
 8005886:	4b82      	ldr	r3, [pc, #520]	@ (8005a90 <CreateMessage+0xc30>)
 8005888:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800588a:	4b82      	ldr	r3, [pc, #520]	@ (8005a94 <CreateMessage+0xc34>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	001a      	movs	r2, r3
 8005890:	4b7f      	ldr	r3, [pc, #508]	@ (8005a90 <CreateMessage+0xc30>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	4013      	ands	r3, r2
 8005896:	1e5a      	subs	r2, r3, #1
 8005898:	4193      	sbcs	r3, r2
 800589a:	b2da      	uxtb	r2, r3
 800589c:	4b7d      	ldr	r3, [pc, #500]	@ (8005a94 <CreateMessage+0xc34>)
 800589e:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 80058a0:	4b73      	ldr	r3, [pc, #460]	@ (8005a70 <CreateMessage+0xc10>)
 80058a2:	4881      	ldr	r0, [pc, #516]	@ (8005aa8 <CreateMessage+0xc48>)
 80058a4:	220c      	movs	r2, #12
 80058a6:	0019      	movs	r1, r3
 80058a8:	f005 fa9a 	bl	800ade0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer)) {
 80058ac:	4b70      	ldr	r3, [pc, #448]	@ (8005a70 <CreateMessage+0xc10>)
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7ff fa7e 	bl	8004db0 <isKeyValid>
 80058b4:	1e03      	subs	r3, r0, #0
 80058b6:	d03d      	beq.n	8005934 <CreateMessage+0xad4>
      uint8ArrayToString(Buffer, keybuffer);
 80058b8:	4a6d      	ldr	r2, [pc, #436]	@ (8005a70 <CreateMessage+0xc10>)
 80058ba:	4b6f      	ldr	r3, [pc, #444]	@ (8005a78 <CreateMessage+0xc18>)
 80058bc:	0011      	movs	r1, r2
 80058be:	0018      	movs	r0, r3
 80058c0:	f7ff faaa 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
 80058c4:	4b6d      	ldr	r3, [pc, #436]	@ (8005a7c <CreateMessage+0xc1c>)
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	4b6d      	ldr	r3, [pc, #436]	@ (8005a80 <CreateMessage+0xc20>)
 80058ca:	2152      	movs	r1, #82	@ 0x52
 80058cc:	5a5b      	ldrh	r3, [r3, r1]
 80058ce:	4c6d      	ldr	r4, [pc, #436]	@ (8005a84 <CreateMessage+0xc24>)
 80058d0:	4976      	ldr	r1, [pc, #472]	@ (8005aac <CreateMessage+0xc4c>)
 80058d2:	486e      	ldr	r0, [pc, #440]	@ (8005a8c <CreateMessage+0xc2c>)
 80058d4:	9301      	str	r3, [sp, #4]
 80058d6:	4b68      	ldr	r3, [pc, #416]	@ (8005a78 <CreateMessage+0xc18>)
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	0023      	movs	r3, r4
 80058dc:	f01e ffd2 	bl	8024884 <siprintf>
#endif
      index += strlen(message);
 80058e0:	4b6a      	ldr	r3, [pc, #424]	@ (8005a8c <CreateMessage+0xc2c>)
 80058e2:	0018      	movs	r0, r3
 80058e4:	f7fa fc42 	bl	800016c <strlen>
 80058e8:	0003      	movs	r3, r0
 80058ea:	b299      	uxth	r1, r3
 80058ec:	220e      	movs	r2, #14
 80058ee:	18bb      	adds	r3, r7, r2
 80058f0:	18ba      	adds	r2, r7, r2
 80058f2:	8812      	ldrh	r2, [r2, #0]
 80058f4:	188a      	adds	r2, r1, r2
 80058f6:	801a      	strh	r2, [r3, #0]
      if (send) {
 80058f8:	1dbb      	adds	r3, r7, #6
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d019      	beq.n	8005934 <CreateMessage+0xad4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005900:	4b62      	ldr	r3, [pc, #392]	@ (8005a8c <CreateMessage+0xc2c>)
 8005902:	0018      	movs	r0, r3
 8005904:	f7fa fc32 	bl	800016c <strlen>
 8005908:	0003      	movs	r3, r0
 800590a:	b29a      	uxth	r2, r3
 800590c:	4b5f      	ldr	r3, [pc, #380]	@ (8005a8c <CreateMessage+0xc2c>)
 800590e:	0011      	movs	r1, r2
 8005910:	0018      	movs	r0, r3
 8005912:	f7ff f8a5 	bl	8004a60 <ESP_Send>
 8005916:	0003      	movs	r3, r0
 8005918:	001a      	movs	r2, r3
 800591a:	4b5d      	ldr	r3, [pc, #372]	@ (8005a90 <CreateMessage+0xc30>)
 800591c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800591e:	4b5d      	ldr	r3, [pc, #372]	@ (8005a94 <CreateMessage+0xc34>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	001a      	movs	r2, r3
 8005924:	4b5a      	ldr	r3, [pc, #360]	@ (8005a90 <CreateMessage+0xc30>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	4013      	ands	r3, r2
 800592a:	1e5a      	subs	r2, r3, #1
 800592c:	4193      	sbcs	r3, r2
 800592e:	b2da      	uxtb	r2, r3
 8005930:	4b58      	ldr	r3, [pc, #352]	@ (8005a94 <CreateMessage+0xc34>)
 8005932:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 8005934:	4b4e      	ldr	r3, [pc, #312]	@ (8005a70 <CreateMessage+0xc10>)
 8005936:	485e      	ldr	r0, [pc, #376]	@ (8005ab0 <CreateMessage+0xc50>)
 8005938:	220c      	movs	r2, #12
 800593a:	0019      	movs	r1, r3
 800593c:	f005 fa50 	bl	800ade0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer)) {
 8005940:	4b4b      	ldr	r3, [pc, #300]	@ (8005a70 <CreateMessage+0xc10>)
 8005942:	0018      	movs	r0, r3
 8005944:	f7ff fa34 	bl	8004db0 <isKeyValid>
 8005948:	1e03      	subs	r3, r0, #0
 800594a:	d03d      	beq.n	80059c8 <CreateMessage+0xb68>
      uint8ArrayToString(Buffer, keybuffer);
 800594c:	4a48      	ldr	r2, [pc, #288]	@ (8005a70 <CreateMessage+0xc10>)
 800594e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a78 <CreateMessage+0xc18>)
 8005950:	0011      	movs	r1, r2
 8005952:	0018      	movs	r0, r3
 8005954:	f7ff fa60 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
 8005958:	4b48      	ldr	r3, [pc, #288]	@ (8005a7c <CreateMessage+0xc1c>)
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	4b48      	ldr	r3, [pc, #288]	@ (8005a80 <CreateMessage+0xc20>)
 800595e:	215a      	movs	r1, #90	@ 0x5a
 8005960:	5a5b      	ldrh	r3, [r3, r1]
 8005962:	4c48      	ldr	r4, [pc, #288]	@ (8005a84 <CreateMessage+0xc24>)
 8005964:	4953      	ldr	r1, [pc, #332]	@ (8005ab4 <CreateMessage+0xc54>)
 8005966:	4849      	ldr	r0, [pc, #292]	@ (8005a8c <CreateMessage+0xc2c>)
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	4b43      	ldr	r3, [pc, #268]	@ (8005a78 <CreateMessage+0xc18>)
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	0023      	movs	r3, r4
 8005970:	f01e ff88 	bl	8024884 <siprintf>
#endif
      index += strlen(message);
 8005974:	4b45      	ldr	r3, [pc, #276]	@ (8005a8c <CreateMessage+0xc2c>)
 8005976:	0018      	movs	r0, r3
 8005978:	f7fa fbf8 	bl	800016c <strlen>
 800597c:	0003      	movs	r3, r0
 800597e:	b299      	uxth	r1, r3
 8005980:	220e      	movs	r2, #14
 8005982:	18bb      	adds	r3, r7, r2
 8005984:	18ba      	adds	r2, r7, r2
 8005986:	8812      	ldrh	r2, [r2, #0]
 8005988:	188a      	adds	r2, r1, r2
 800598a:	801a      	strh	r2, [r3, #0]
      if (send) {
 800598c:	1dbb      	adds	r3, r7, #6
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d019      	beq.n	80059c8 <CreateMessage+0xb68>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005994:	4b3d      	ldr	r3, [pc, #244]	@ (8005a8c <CreateMessage+0xc2c>)
 8005996:	0018      	movs	r0, r3
 8005998:	f7fa fbe8 	bl	800016c <strlen>
 800599c:	0003      	movs	r3, r0
 800599e:	b29a      	uxth	r2, r3
 80059a0:	4b3a      	ldr	r3, [pc, #232]	@ (8005a8c <CreateMessage+0xc2c>)
 80059a2:	0011      	movs	r1, r2
 80059a4:	0018      	movs	r0, r3
 80059a6:	f7ff f85b 	bl	8004a60 <ESP_Send>
 80059aa:	0003      	movs	r3, r0
 80059ac:	001a      	movs	r2, r3
 80059ae:	4b38      	ldr	r3, [pc, #224]	@ (8005a90 <CreateMessage+0xc30>)
 80059b0:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80059b2:	4b38      	ldr	r3, [pc, #224]	@ (8005a94 <CreateMessage+0xc34>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	001a      	movs	r2, r3
 80059b8:	4b35      	ldr	r3, [pc, #212]	@ (8005a90 <CreateMessage+0xc30>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	4013      	ands	r3, r2
 80059be:	1e5a      	subs	r2, r3, #1
 80059c0:	4193      	sbcs	r3, r2
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	4b33      	ldr	r3, [pc, #204]	@ (8005a94 <CreateMessage+0xc34>)
 80059c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 80059c8:	4b29      	ldr	r3, [pc, #164]	@ (8005a70 <CreateMessage+0xc10>)
 80059ca:	483b      	ldr	r0, [pc, #236]	@ (8005ab8 <CreateMessage+0xc58>)
 80059cc:	220c      	movs	r2, #12
 80059ce:	0019      	movs	r1, r3
 80059d0:	f005 fa06 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80059d4:	4a26      	ldr	r2, [pc, #152]	@ (8005a70 <CreateMessage+0xc10>)
 80059d6:	4b28      	ldr	r3, [pc, #160]	@ (8005a78 <CreateMessage+0xc18>)
 80059d8:	0011      	movs	r1, r2
 80059da:	0018      	movs	r0, r3
 80059dc:	f7ff fa1c 	bl	8004e18 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 80059e0:	4b26      	ldr	r3, [pc, #152]	@ (8005a7c <CreateMessage+0xc1c>)
 80059e2:	689c      	ldr	r4, [r3, #8]
 80059e4:	4b35      	ldr	r3, [pc, #212]	@ (8005abc <CreateMessage+0xc5c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	1c18      	adds	r0, r3, #0
 80059ea:	f7fd fd3b 	bl	8003464 <__aeabi_f2d>
 80059ee:	0002      	movs	r2, r0
 80059f0:	000b      	movs	r3, r1
 80059f2:	4d24      	ldr	r5, [pc, #144]	@ (8005a84 <CreateMessage+0xc24>)
 80059f4:	4932      	ldr	r1, [pc, #200]	@ (8005ac0 <CreateMessage+0xc60>)
 80059f6:	4825      	ldr	r0, [pc, #148]	@ (8005a8c <CreateMessage+0xc2c>)
 80059f8:	9202      	str	r2, [sp, #8]
 80059fa:	9303      	str	r3, [sp, #12]
 80059fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005a78 <CreateMessage+0xc18>)
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	002b      	movs	r3, r5
 8005a02:	0022      	movs	r2, r4
 8005a04:	f01e ff3e 	bl	8024884 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8005a08:	4b20      	ldr	r3, [pc, #128]	@ (8005a8c <CreateMessage+0xc2c>)
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f7fa fbae 	bl	800016c <strlen>
 8005a10:	0002      	movs	r2, r0
 8005a12:	4b1e      	ldr	r3, [pc, #120]	@ (8005a8c <CreateMessage+0xc2c>)
 8005a14:	18d3      	adds	r3, r2, r3
 8005a16:	4a2b      	ldr	r2, [pc, #172]	@ (8005ac4 <CreateMessage+0xc64>)
 8005a18:	0011      	movs	r1, r2
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f01e ff32 	bl	8024884 <siprintf>
  index += strlen(message);
 8005a20:	4b1a      	ldr	r3, [pc, #104]	@ (8005a8c <CreateMessage+0xc2c>)
 8005a22:	0018      	movs	r0, r3
 8005a24:	f7fa fba2 	bl	800016c <strlen>
 8005a28:	0003      	movs	r3, r0
 8005a2a:	b299      	uxth	r1, r3
 8005a2c:	220e      	movs	r2, #14
 8005a2e:	18bb      	adds	r3, r7, r2
 8005a30:	18ba      	adds	r2, r7, r2
 8005a32:	8812      	ldrh	r2, [r2, #0]
 8005a34:	188a      	adds	r2, r1, r2
 8005a36:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005a38:	1dbb      	adds	r3, r7, #6
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d046      	beq.n	8005ace <CreateMessage+0xc6e>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005a40:	4b12      	ldr	r3, [pc, #72]	@ (8005a8c <CreateMessage+0xc2c>)
 8005a42:	0018      	movs	r0, r3
 8005a44:	f7fa fb92 	bl	800016c <strlen>
 8005a48:	0003      	movs	r3, r0
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a8c <CreateMessage+0xc2c>)
 8005a4e:	0011      	movs	r1, r2
 8005a50:	0018      	movs	r0, r3
 8005a52:	f7ff f805 	bl	8004a60 <ESP_Send>
 8005a56:	0003      	movs	r3, r0
 8005a58:	001a      	movs	r2, r3
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a90 <CreateMessage+0xc30>)
 8005a5c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a94 <CreateMessage+0xc34>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	001a      	movs	r2, r3
 8005a64:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <CreateMessage+0xc30>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	1e5a      	subs	r2, r3, #1
 8005a6c:	4193      	sbcs	r3, r2
 8005a6e:	e02b      	b.n	8005ac8 <CreateMessage+0xc68>
 8005a70:	20000764 	.word	0x20000764
 8005a74:	080800c8 	.word	0x080800c8
 8005a78:	20000770 	.word	0x20000770
 8005a7c:	200005c4 	.word	0x200005c4
 8005a80:	20000694 	.word	0x20000694
 8005a84:	20000744 	.word	0x20000744
 8005a88:	08029878 	.word	0x08029878
 8005a8c:	200005e4 	.word	0x200005e4
 8005a90:	20000789 	.word	0x20000789
 8005a94:	2000002d 	.word	0x2000002d
 8005a98:	080800d4 	.word	0x080800d4
 8005a9c:	080298d4 	.word	0x080298d4
 8005aa0:	080800ec 	.word	0x080800ec
 8005aa4:	08029930 	.word	0x08029930
 8005aa8:	080800f8 	.word	0x080800f8
 8005aac:	08029988 	.word	0x08029988
 8005ab0:	08080104 	.word	0x08080104
 8005ab4:	080299e4 	.word	0x080299e4
 8005ab8:	0808006c 	.word	0x0808006c
 8005abc:	200005dc 	.word	0x200005dc
 8005ac0:	08029a40 	.word	0x08029a40
 8005ac4:	08029a98 	.word	0x08029a98
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <CreateMessage+0xc84>)
 8005acc:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8005ace:	4b05      	ldr	r3, [pc, #20]	@ (8005ae4 <CreateMessage+0xc84>)
 8005ad0:	781a      	ldrb	r2, [r3, #0]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	701a      	strb	r2, [r3, #0]
  return index;
 8005ad6:	230e      	movs	r3, #14
 8005ad8:	18fb      	adds	r3, r7, r3
 8005ada:	881b      	ldrh	r3, [r3, #0]
}
 8005adc:	0018      	movs	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	b005      	add	sp, #20
 8005ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ae4:	2000002d 	.word	0x2000002d

08005ae8 <StartProg>:

void StartProg(){
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8005aec:	2064      	movs	r0, #100	@ 0x64
 8005aee:	f00d fb27 	bl	8013140 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005af2:	4b15      	ldr	r3, [pc, #84]	@ (8005b48 <StartProg+0x60>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	2101      	movs	r1, #1
 8005af8:	0018      	movs	r0, r3
 8005afa:	f00e fda8 	bl	801464e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8005afe:	2064      	movs	r0, #100	@ 0x64
 8005b00:	f00d fb1e 	bl	8013140 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8005b04:	4b10      	ldr	r3, [pc, #64]	@ (8005b48 <StartProg+0x60>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	2102      	movs	r1, #2
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f00e fd9f 	bl	801464e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8005b10:	23fa      	movs	r3, #250	@ 0xfa
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	0018      	movs	r0, r3
 8005b16:	f00d fb13 	bl	8013140 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b48 <StartProg+0x60>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	2101      	movs	r1, #1
 8005b20:	0018      	movs	r0, r3
 8005b22:	f00e fd94 	bl	801464e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8005b26:	23fa      	movs	r3, #250	@ 0xfa
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f00d fb08 	bl	8013140 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8005b30:	4b05      	ldr	r3, [pc, #20]	@ (8005b48 <StartProg+0x60>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	2102      	movs	r1, #2
 8005b36:	0018      	movs	r0, r3
 8005b38:	f00e fd89 	bl	801464e <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8005b3c:	2028      	movs	r0, #40	@ 0x28
 8005b3e:	f00d faff 	bl	8013140 <HAL_Delay>
}
 8005b42:	46c0      	nop			@ (mov r8, r8)
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	50001c00 	.word	0x50001c00

08005b4c <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8005b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b4e:	b0d9      	sub	sp, #356	@ 0x164
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	0008      	movs	r0, r1
 8005b56:	0011      	movs	r1, r2
 8005b58:	4ba4      	ldr	r3, [pc, #656]	@ (8005dec <ParseBuffer+0x2a0>)
 8005b5a:	24b0      	movs	r4, #176	@ 0xb0
 8005b5c:	0064      	lsls	r4, r4, #1
 8005b5e:	191b      	adds	r3, r3, r4
 8005b60:	19db      	adds	r3, r3, r7
 8005b62:	1c02      	adds	r2, r0, #0
 8005b64:	801a      	strh	r2, [r3, #0]
 8005b66:	4ba2      	ldr	r3, [pc, #648]	@ (8005df0 <ParseBuffer+0x2a4>)
 8005b68:	191b      	adds	r3, r3, r4
 8005b6a:	19db      	adds	r3, r3, r7
 8005b6c:	1c0a      	adds	r2, r1, #0
 8005b6e:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8005b70:	2380      	movs	r3, #128	@ 0x80
 8005b72:	005a      	lsls	r2, r3, #1
 8005b74:	2348      	movs	r3, #72	@ 0x48
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	2100      	movs	r1, #0
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	f01e ffe8 	bl	8024b50 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8005b80:	2360      	movs	r3, #96	@ 0x60
 8005b82:	33ff      	adds	r3, #255	@ 0xff
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	2203      	movs	r2, #3
 8005b88:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8005b8a:	23ae      	movs	r3, #174	@ 0xae
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	2200      	movs	r2, #0
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	e013      	b.n	8005bbe <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8005b96:	20ae      	movs	r0, #174	@ 0xae
 8005b98:	0040      	lsls	r0, r0, #1
 8005b9a:	183b      	adds	r3, r7, r0
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	18d2      	adds	r2, r2, r3
 8005ba2:	183b      	adds	r3, r7, r0
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	7811      	ldrb	r1, [r2, #0]
 8005ba8:	4a92      	ldr	r2, [pc, #584]	@ (8005df4 <ParseBuffer+0x2a8>)
 8005baa:	24b0      	movs	r4, #176	@ 0xb0
 8005bac:	0064      	lsls	r4, r4, #1
 8005bae:	1912      	adds	r2, r2, r4
 8005bb0:	19d2      	adds	r2, r2, r7
 8005bb2:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8005bb4:	183b      	adds	r3, r7, r0
 8005bb6:	881a      	ldrh	r2, [r3, #0]
 8005bb8:	183b      	adds	r3, r7, r0
 8005bba:	3201      	adds	r2, #1
 8005bbc:	801a      	strh	r2, [r3, #0]
 8005bbe:	23ae      	movs	r3, #174	@ 0xae
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	18fa      	adds	r2, r7, r3
 8005bc4:	4b89      	ldr	r3, [pc, #548]	@ (8005dec <ParseBuffer+0x2a0>)
 8005bc6:	21b0      	movs	r1, #176	@ 0xb0
 8005bc8:	0049      	lsls	r1, r1, #1
 8005bca:	185b      	adds	r3, r3, r1
 8005bcc:	19db      	adds	r3, r3, r7
 8005bce:	8812      	ldrh	r2, [r2, #0]
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d3df      	bcc.n	8005b96 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8005bd6:	4b85      	ldr	r3, [pc, #532]	@ (8005dec <ParseBuffer+0x2a0>)
 8005bd8:	185b      	adds	r3, r3, r1
 8005bda:	19db      	adds	r3, r3, r7
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	4a85      	ldr	r2, [pc, #532]	@ (8005df4 <ParseBuffer+0x2a8>)
 8005be0:	1852      	adds	r2, r2, r1
 8005be2:	19d2      	adds	r2, r2, r7
 8005be4:	2100      	movs	r1, #0
 8005be6:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8005be8:	f00c fde4 	bl	80127b4 <GetVerboseLevel>
 8005bec:	0003      	movs	r3, r0
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d106      	bne.n	8005c00 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 8005bf2:	2348      	movs	r3, #72	@ 0x48
 8005bf4:	18fa      	adds	r2, r7, r3
 8005bf6:	4b80      	ldr	r3, [pc, #512]	@ (8005df8 <ParseBuffer+0x2ac>)
 8005bf8:	0011      	movs	r1, r2
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f01e fdd2 	bl	80247a4 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	26ac      	movs	r6, #172	@ 0xac
 8005c04:	0076      	lsls	r6, r6, #1
 8005c06:	19ba      	adds	r2, r7, r6
 8005c08:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8005c0a:	4b7c      	ldr	r3, [pc, #496]	@ (8005dfc <ParseBuffer+0x2b0>)
 8005c0c:	25b0      	movs	r5, #176	@ 0xb0
 8005c0e:	006d      	lsls	r5, r5, #1
 8005c10:	195b      	adds	r3, r3, r5
 8005c12:	19db      	adds	r3, r3, r7
 8005c14:	4a7a      	ldr	r2, [pc, #488]	@ (8005e00 <ParseBuffer+0x2b4>)
 8005c16:	8811      	ldrh	r1, [r2, #0]
 8005c18:	8019      	strh	r1, [r3, #0]
 8005c1a:	7892      	ldrb	r2, [r2, #2]
 8005c1c:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8005c1e:	4b79      	ldr	r3, [pc, #484]	@ (8005e04 <ParseBuffer+0x2b8>)
 8005c20:	195b      	adds	r3, r3, r5
 8005c22:	19db      	adds	r3, r3, r7
 8005c24:	4a78      	ldr	r2, [pc, #480]	@ (8005e08 <ParseBuffer+0x2bc>)
 8005c26:	6811      	ldr	r1, [r2, #0]
 8005c28:	6019      	str	r1, [r3, #0]
 8005c2a:	8892      	ldrh	r2, [r2, #4]
 8005c2c:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8005c2e:	4b77      	ldr	r3, [pc, #476]	@ (8005e0c <ParseBuffer+0x2c0>)
 8005c30:	195b      	adds	r3, r3, r5
 8005c32:	19db      	adds	r3, r3, r7
 8005c34:	4a76      	ldr	r2, [pc, #472]	@ (8005e10 <ParseBuffer+0x2c4>)
 8005c36:	6811      	ldr	r1, [r2, #0]
 8005c38:	6019      	str	r1, [r3, #0]
 8005c3a:	7912      	ldrb	r2, [r2, #4]
 8005c3c:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8005c3e:	4b75      	ldr	r3, [pc, #468]	@ (8005e14 <ParseBuffer+0x2c8>)
 8005c40:	195b      	adds	r3, r3, r5
 8005c42:	19db      	adds	r3, r3, r7
 8005c44:	4a74      	ldr	r2, [pc, #464]	@ (8005e18 <ParseBuffer+0x2cc>)
 8005c46:	6811      	ldr	r1, [r2, #0]
 8005c48:	6019      	str	r1, [r3, #0]
 8005c4a:	8892      	ldrh	r2, [r2, #4]
 8005c4c:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8005c4e:	4b73      	ldr	r3, [pc, #460]	@ (8005e1c <ParseBuffer+0x2d0>)
 8005c50:	195b      	adds	r3, r3, r5
 8005c52:	19db      	adds	r3, r3, r7
 8005c54:	223e      	movs	r2, #62	@ 0x3e
 8005c56:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8005c58:	4b71      	ldr	r3, [pc, #452]	@ (8005e20 <ParseBuffer+0x2d4>)
 8005c5a:	195b      	adds	r3, r3, r5
 8005c5c:	19db      	adds	r3, r3, r7
 8005c5e:	4a71      	ldr	r2, [pc, #452]	@ (8005e24 <ParseBuffer+0x2d8>)
 8005c60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005c62:	c313      	stmia	r3!, {r0, r1, r4}
 8005c64:	8811      	ldrh	r1, [r2, #0]
 8005c66:	8019      	strh	r1, [r3, #0]
 8005c68:	7892      	ldrb	r2, [r2, #2]
 8005c6a:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8005c6c:	4b6e      	ldr	r3, [pc, #440]	@ (8005e28 <ParseBuffer+0x2dc>)
 8005c6e:	195b      	adds	r3, r3, r5
 8005c70:	19db      	adds	r3, r3, r7
 8005c72:	4a6e      	ldr	r2, [pc, #440]	@ (8005e2c <ParseBuffer+0x2e0>)
 8005c74:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005c76:	c313      	stmia	r3!, {r0, r1, r4}
 8005c78:	8812      	ldrh	r2, [r2, #0]
 8005c7a:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8005c7c:	4b5c      	ldr	r3, [pc, #368]	@ (8005df0 <ParseBuffer+0x2a4>)
 8005c7e:	195b      	adds	r3, r3, r5
 8005c80:	19db      	adds	r3, r3, r7
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 8005c88:	2344      	movs	r3, #68	@ 0x44
 8005c8a:	18fa      	adds	r2, r7, r3
 8005c8c:	2348      	movs	r3, #72	@ 0x48
 8005c8e:	18fb      	adds	r3, r7, r3
 8005c90:	0011      	movs	r1, r2
 8005c92:	0018      	movs	r0, r3
 8005c94:	f01e ff97 	bl	8024bc6 <strstr>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	19ba      	adds	r2, r7, r6
 8005c9c:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8005c9e:	4b54      	ldr	r3, [pc, #336]	@ (8005df0 <ParseBuffer+0x2a4>)
 8005ca0:	22b0      	movs	r2, #176	@ 0xb0
 8005ca2:	0052      	lsls	r2, r2, #1
 8005ca4:	189b      	adds	r3, r3, r2
 8005ca6:	19db      	adds	r3, r3, r7
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d10c      	bne.n	8005cc8 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 8005cae:	232c      	movs	r3, #44	@ 0x2c
 8005cb0:	18fa      	adds	r2, r7, r3
 8005cb2:	2348      	movs	r3, #72	@ 0x48
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	0011      	movs	r1, r2
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f01e ff84 	bl	8024bc6 <strstr>
 8005cbe:	0003      	movs	r3, r0
 8005cc0:	22ac      	movs	r2, #172	@ 0xac
 8005cc2:	0052      	lsls	r2, r2, #1
 8005cc4:	18ba      	adds	r2, r7, r2
 8005cc6:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8005cc8:	4b49      	ldr	r3, [pc, #292]	@ (8005df0 <ParseBuffer+0x2a4>)
 8005cca:	22b0      	movs	r2, #176	@ 0xb0
 8005ccc:	0052      	lsls	r2, r2, #1
 8005cce:	189b      	adds	r3, r3, r2
 8005cd0:	19db      	adds	r3, r3, r7
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d10c      	bne.n	8005cf2 <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 8005cd8:	2328      	movs	r3, #40	@ 0x28
 8005cda:	18fa      	adds	r2, r7, r3
 8005cdc:	2348      	movs	r3, #72	@ 0x48
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	0011      	movs	r1, r2
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f01e ff6f 	bl	8024bc6 <strstr>
 8005ce8:	0003      	movs	r3, r0
 8005cea:	22ac      	movs	r2, #172	@ 0xac
 8005cec:	0052      	lsls	r2, r2, #1
 8005cee:	18ba      	adds	r2, r7, r2
 8005cf0:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8005cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8005df0 <ParseBuffer+0x2a4>)
 8005cf4:	22b0      	movs	r2, #176	@ 0xb0
 8005cf6:	0052      	lsls	r2, r2, #1
 8005cf8:	189b      	adds	r3, r3, r2
 8005cfa:	19db      	adds	r3, r3, r7
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b05      	cmp	r3, #5
 8005d00:	d10c      	bne.n	8005d1c <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 8005d02:	2308      	movs	r3, #8
 8005d04:	18fa      	adds	r2, r7, r3
 8005d06:	2348      	movs	r3, #72	@ 0x48
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	0011      	movs	r1, r2
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f01e ff5a 	bl	8024bc6 <strstr>
 8005d12:	0003      	movs	r3, r0
 8005d14:	22ac      	movs	r2, #172	@ 0xac
 8005d16:	0052      	lsls	r2, r2, #1
 8005d18:	18ba      	adds	r2, r7, r2
 8005d1a:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8005d1c:	233c      	movs	r3, #60	@ 0x3c
 8005d1e:	18fa      	adds	r2, r7, r3
 8005d20:	2448      	movs	r4, #72	@ 0x48
 8005d22:	193b      	adds	r3, r7, r4
 8005d24:	0011      	movs	r1, r2
 8005d26:	0018      	movs	r0, r3
 8005d28:	f01e ff4d 	bl	8024bc6 <strstr>
 8005d2c:	0003      	movs	r3, r0
 8005d2e:	22aa      	movs	r2, #170	@ 0xaa
 8005d30:	0052      	lsls	r2, r2, #1
 8005d32:	18ba      	adds	r2, r7, r2
 8005d34:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8005d36:	2318      	movs	r3, #24
 8005d38:	18fa      	adds	r2, r7, r3
 8005d3a:	193b      	adds	r3, r7, r4
 8005d3c:	0011      	movs	r1, r2
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f01e ff41 	bl	8024bc6 <strstr>
 8005d44:	0003      	movs	r3, r0
 8005d46:	22a8      	movs	r2, #168	@ 0xa8
 8005d48:	0052      	lsls	r2, r2, #1
 8005d4a:	18ba      	adds	r2, r7, r2
 8005d4c:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8005d4e:	4a38      	ldr	r2, [pc, #224]	@ (8005e30 <ParseBuffer+0x2e4>)
 8005d50:	193b      	adds	r3, r7, r4
 8005d52:	0011      	movs	r1, r2
 8005d54:	0018      	movs	r0, r3
 8005d56:	f01e ff36 	bl	8024bc6 <strstr>
 8005d5a:	0003      	movs	r3, r0
 8005d5c:	22a6      	movs	r2, #166	@ 0xa6
 8005d5e:	0052      	lsls	r2, r2, #1
 8005d60:	18ba      	adds	r2, r7, r2
 8005d62:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8005d64:	2334      	movs	r3, #52	@ 0x34
 8005d66:	18fa      	adds	r2, r7, r3
 8005d68:	193b      	adds	r3, r7, r4
 8005d6a:	0011      	movs	r1, r2
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f01e ff2a 	bl	8024bc6 <strstr>
 8005d72:	0003      	movs	r3, r0
 8005d74:	22a4      	movs	r2, #164	@ 0xa4
 8005d76:	0052      	lsls	r2, r2, #1
 8005d78:	18ba      	adds	r2, r7, r2
 8005d7a:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8005d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dec <ParseBuffer+0x2a0>)
 8005d7e:	21b0      	movs	r1, #176	@ 0xb0
 8005d80:	0049      	lsls	r1, r1, #1
 8005d82:	185b      	adds	r3, r3, r1
 8005d84:	19db      	adds	r3, r3, r7
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d800      	bhi.n	8005d8e <ParseBuffer+0x242>
 8005d8c:	e0bf      	b.n	8005f0e <ParseBuffer+0x3c2>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8005d8e:	22ac      	movs	r2, #172	@ 0xac
 8005d90:	0052      	lsls	r2, r2, #1
 8005d92:	18bb      	adds	r3, r7, r2
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d052      	beq.n	8005e40 <ParseBuffer+0x2f4>
 8005d9a:	18bb      	adds	r3, r7, r2
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b4f      	cmp	r3, #79	@ 0x4f
 8005da2:	d14d      	bne.n	8005e40 <ParseBuffer+0x2f4>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8005da4:	2360      	movs	r3, #96	@ 0x60
 8005da6:	33ff      	adds	r3, #255	@ 0xff
 8005da8:	18fb      	adds	r3, r7, r3
 8005daa:	2200      	movs	r2, #0
 8005dac:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8005dae:	4b21      	ldr	r3, [pc, #132]	@ (8005e34 <ParseBuffer+0x2e8>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b12      	cmp	r3, #18
 8005db4:	d144      	bne.n	8005e40 <ParseBuffer+0x2f4>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 8005db6:	4b0d      	ldr	r3, [pc, #52]	@ (8005dec <ParseBuffer+0x2a0>)
 8005db8:	185b      	adds	r3, r3, r1
 8005dba:	19db      	adds	r3, r3, r7
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	2b2b      	cmp	r3, #43	@ 0x2b
 8005dc0:	d10b      	bne.n	8005dda <ParseBuffer+0x28e>
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005df4 <ParseBuffer+0x2a8>)
 8005dc4:	185b      	adds	r3, r3, r1
 8005dc6:	19db      	adds	r3, r3, r7
 8005dc8:	2221      	movs	r2, #33	@ 0x21
 8005dca:	5c9b      	ldrb	r3, [r3, r2]
 8005dcc:	2b32      	cmp	r3, #50	@ 0x32
 8005dce:	d104      	bne.n	8005dda <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 8005dd0:	193b      	adds	r3, r7, r4
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f002 ffe8 	bl	8008da8 <ParseTime>
 8005dd8:	e032      	b.n	8005e40 <ParseBuffer+0x2f4>
        }
        else {
          Error("Error getting time");
 8005dda:	4a17      	ldr	r2, [pc, #92]	@ (8005e38 <ParseBuffer+0x2ec>)
 8005ddc:	4b17      	ldr	r3, [pc, #92]	@ (8005e3c <ParseBuffer+0x2f0>)
 8005dde:	0019      	movs	r1, r3
 8005de0:	2001      	movs	r0, #1
 8005de2:	f00c fc6d 	bl	80126c0 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 8005de6:	2306      	movs	r3, #6
 8005de8:	e095      	b.n	8005f16 <ParseBuffer+0x3ca>
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	fffffea2 	.word	0xfffffea2
 8005df0:	fffffea1 	.word	0xfffffea1
 8005df4:	fffffee8 	.word	0xfffffee8
 8005df8:	08029a9c 	.word	0x08029a9c
 8005dfc:	fffffee4 	.word	0xfffffee4
 8005e00:	08029ac8 	.word	0x08029ac8
 8005e04:	fffffedc 	.word	0xfffffedc
 8005e08:	08029acc 	.word	0x08029acc
 8005e0c:	fffffed4 	.word	0xfffffed4
 8005e10:	08029ad4 	.word	0x08029ad4
 8005e14:	fffffecc 	.word	0xfffffecc
 8005e18:	08029adc 	.word	0x08029adc
 8005e1c:	fffffec8 	.word	0xfffffec8
 8005e20:	fffffeb8 	.word	0xfffffeb8
 8005e24:	08029ae4 	.word	0x08029ae4
 8005e28:	fffffea8 	.word	0xfffffea8
 8005e2c:	08029af4 	.word	0x08029af4
 8005e30:	0802c84c 	.word	0x0802c84c
 8005e34:	2000068e 	.word	0x2000068e
 8005e38:	08029ab4 	.word	0x08029ab4
 8005e3c:	08029054 	.word	0x08029054
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8005e40:	22ac      	movs	r2, #172	@ 0xac
 8005e42:	0052      	lsls	r2, r2, #1
 8005e44:	18bb      	adds	r3, r7, r2
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d009      	beq.n	8005e60 <ParseBuffer+0x314>
 8005e4c:	18bb      	adds	r3, r7, r2
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b72      	cmp	r3, #114	@ 0x72
 8005e54:	d104      	bne.n	8005e60 <ParseBuffer+0x314>
      status = RECEIVE_STATUS_READY;
 8005e56:	2360      	movs	r3, #96	@ 0x60
 8005e58:	33ff      	adds	r3, #255	@ 0xff
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8005e60:	22ac      	movs	r2, #172	@ 0xac
 8005e62:	0052      	lsls	r2, r2, #1
 8005e64:	18bb      	adds	r3, r7, r2
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d009      	beq.n	8005e80 <ParseBuffer+0x334>
 8005e6c:	18bb      	adds	r3, r7, r2
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e74:	d104      	bne.n	8005e80 <ParseBuffer+0x334>
      status = RECEIVE_STATUS_START;
 8005e76:	2360      	movs	r3, #96	@ 0x60
 8005e78:	33ff      	adds	r3, #255	@ 0xff
 8005e7a:	18fb      	adds	r3, r7, r3
 8005e7c:	2205      	movs	r2, #5
 8005e7e:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8005e80:	22ac      	movs	r2, #172	@ 0xac
 8005e82:	0052      	lsls	r2, r2, #1
 8005e84:	18bb      	adds	r3, r7, r2
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <ParseBuffer+0x354>
 8005e8c:	18bb      	adds	r3, r7, r2
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b2b      	cmp	r3, #43	@ 0x2b
 8005e94:	d104      	bne.n	8005ea0 <ParseBuffer+0x354>
      status = RECEIVE_STATUS_TIME;
 8005e96:	2360      	movs	r3, #96	@ 0x60
 8005e98:	33ff      	adds	r3, #255	@ 0xff
 8005e9a:	18fb      	adds	r3, r7, r3
 8005e9c:	220b      	movs	r2, #11
 8005e9e:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8005ea0:	22aa      	movs	r2, #170	@ 0xaa
 8005ea2:	0052      	lsls	r2, r2, #1
 8005ea4:	18bb      	adds	r3, r7, r2
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d004      	beq.n	8005eb6 <ParseBuffer+0x36a>
 8005eac:	18bb      	adds	r3, r7, r2
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b45      	cmp	r3, #69	@ 0x45
 8005eb4:	d00a      	beq.n	8005ecc <ParseBuffer+0x380>
 8005eb6:	22a4      	movs	r2, #164	@ 0xa4
 8005eb8:	0052      	lsls	r2, r2, #1
 8005eba:	18bb      	adds	r3, r7, r2
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d009      	beq.n	8005ed6 <ParseBuffer+0x38a>
 8005ec2:	18bb      	adds	r3, r7, r2
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b46      	cmp	r3, #70	@ 0x46
 8005eca:	d104      	bne.n	8005ed6 <ParseBuffer+0x38a>
      status = RECEIVE_STATUS_ERROR;
 8005ecc:	2360      	movs	r3, #96	@ 0x60
 8005ece:	33ff      	adds	r3, #255	@ 0xff
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8005ed6:	22a8      	movs	r2, #168	@ 0xa8
 8005ed8:	0052      	lsls	r2, r2, #1
 8005eda:	18bb      	adds	r3, r7, r2
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <ParseBuffer+0x3a6>
 8005ee2:	18bb      	adds	r3, r7, r2
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b57      	cmp	r3, #87	@ 0x57
 8005eea:	d102      	bne.n	8005ef2 <ParseBuffer+0x3a6>
      ConnectionMade = true;
 8005eec:	4b0c      	ldr	r3, [pc, #48]	@ (8005f20 <ParseBuffer+0x3d4>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 8005ef2:	22a6      	movs	r2, #166	@ 0xa6
 8005ef4:	0052      	lsls	r2, r2, #1
 8005ef6:	18bb      	adds	r3, r7, r2
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <ParseBuffer+0x3c2>
 8005efe:	18bb      	adds	r3, r7, r2
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b32      	cmp	r3, #50	@ 0x32
 8005f06:	d102      	bne.n	8005f0e <ParseBuffer+0x3c2>
      beurs = true;
 8005f08:	4b06      	ldr	r3, [pc, #24]	@ (8005f24 <ParseBuffer+0x3d8>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8005f0e:	2360      	movs	r3, #96	@ 0x60
 8005f10:	33ff      	adds	r3, #255	@ 0xff
 8005f12:	18fb      	adds	r3, r7, r3
 8005f14:	781b      	ldrb	r3, [r3, #0]

}
 8005f16:	0018      	movs	r0, r3
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	b059      	add	sp, #356	@ 0x164
 8005f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f1e:	46c0      	nop			@ (mov r8, r8)
 8005f20:	200005bc 	.word	0x200005bc
 8005f24:	200005be 	.word	0x200005be

08005f28 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f5c <PollAwake+0x34>)
 8005f30:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	0018      	movs	r0, r3
 8005f36:	f7fa f919 	bl	800016c <strlen>
 8005f3a:	0003      	movs	r3, r0
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	0011      	movs	r1, r2
 8005f42:	0018      	movs	r0, r3
 8005f44:	f7fe fd8c 	bl	8004a60 <ESP_Send>
 8005f48:	1e03      	subs	r3, r0, #0
 8005f4a:	d001      	beq.n	8005f50 <PollAwake+0x28>
    return true;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <PollAwake+0x2a>
  }
  else{
    return false;
 8005f50:	2300      	movs	r3, #0
  }
}
 8005f52:	0018      	movs	r0, r3
 8005f54:	46bd      	mov	sp, r7
 8005f56:	b002      	add	sp, #8
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	46c0      	nop			@ (mov r8, r8)
 8005f5c:	08029b04 	.word	0x08029b04

08005f60 <RFPower>:

bool RFPower(){
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8005f66:	4b0b      	ldr	r3, [pc, #44]	@ (8005f94 <RFPower+0x34>)
 8005f68:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f7fa f8fd 	bl	800016c <strlen>
 8005f72:	0003      	movs	r3, r0
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	0011      	movs	r1, r2
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	f7fe fd70 	bl	8004a60 <ESP_Send>
 8005f80:	1e03      	subs	r3, r0, #0
 8005f82:	d001      	beq.n	8005f88 <RFPower+0x28>
    return true;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <RFPower+0x2a>
  }
  else{
    return false;
 8005f88:	2300      	movs	r3, #0
  }
}
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	b002      	add	sp, #8
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	46c0      	nop			@ (mov r8, r8)
 8005f94:	08029b0c 	.word	0x08029b0c

08005f98 <CheckRFPower>:

bool CheckRFPower(){
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fcc <CheckRFPower+0x34>)
 8005fa0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f7fa f8e1 	bl	800016c <strlen>
 8005faa:	0003      	movs	r3, r0
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	0011      	movs	r1, r2
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f7fe fd54 	bl	8004a60 <ESP_Send>
 8005fb8:	1e03      	subs	r3, r0, #0
 8005fba:	d001      	beq.n	8005fc0 <CheckRFPower+0x28>
    return true;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e000      	b.n	8005fc2 <CheckRFPower+0x2a>
  }
  else{
    return false;
 8005fc0:	2300      	movs	r3, #0
  }
}
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b002      	add	sp, #8
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	46c0      	nop			@ (mov r8, r8)
 8005fcc:	08029b1c 	.word	0x08029b1c

08005fd0 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006004 <ATRestore+0x34>)
 8005fd8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f7fa f8c5 	bl	800016c <strlen>
 8005fe2:	0003      	movs	r3, r0
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	0011      	movs	r1, r2
 8005fea:	0018      	movs	r0, r3
 8005fec:	f7fe fd38 	bl	8004a60 <ESP_Send>
 8005ff0:	1e03      	subs	r3, r0, #0
 8005ff2:	d001      	beq.n	8005ff8 <ATRestore+0x28>
    return true;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <ATRestore+0x2a>
  }
  else{
    return false;
 8005ff8:	2300      	movs	r3, #0
  }
}
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b002      	add	sp, #8
 8006000:	bd80      	pop	{r7, pc}
 8006002:	46c0      	nop			@ (mov r8, r8)
 8006004:	08029b2c 	.word	0x08029b2c

08006008 <CWINIT>:

bool CWINIT(){
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800600e:	4b0b      	ldr	r3, [pc, #44]	@ (800603c <CWINIT+0x34>)
 8006010:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	0018      	movs	r0, r3
 8006016:	f7fa f8a9 	bl	800016c <strlen>
 800601a:	0003      	movs	r3, r0
 800601c:	b29a      	uxth	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	0011      	movs	r1, r2
 8006022:	0018      	movs	r0, r3
 8006024:	f7fe fd1c 	bl	8004a60 <ESP_Send>
 8006028:	1e03      	subs	r3, r0, #0
 800602a:	d001      	beq.n	8006030 <CWINIT+0x28>
    return true;
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <CWINIT+0x2a>
  }
  else{
    return false;
 8006030:	2300      	movs	r3, #0
  }
}
 8006032:	0018      	movs	r0, r3
 8006034:	46bd      	mov	sp, r7
 8006036:	b002      	add	sp, #8
 8006038:	bd80      	pop	{r7, pc}
 800603a:	46c0      	nop			@ (mov r8, r8)
 800603c:	08029b3c 	.word	0x08029b3c

08006040 <CWMODE1>:

bool CWMODE1(){
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8006046:	4b0b      	ldr	r3, [pc, #44]	@ (8006074 <CWMODE1+0x34>)
 8006048:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	0018      	movs	r0, r3
 800604e:	f7fa f88d 	bl	800016c <strlen>
 8006052:	0003      	movs	r3, r0
 8006054:	b29a      	uxth	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	0011      	movs	r1, r2
 800605a:	0018      	movs	r0, r3
 800605c:	f7fe fd00 	bl	8004a60 <ESP_Send>
 8006060:	1e03      	subs	r3, r0, #0
 8006062:	d001      	beq.n	8006068 <CWMODE1+0x28>
    return true;
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <CWMODE1+0x2a>
  }
  else{
    return false;
 8006068:	2300      	movs	r3, #0
  }
}
 800606a:	0018      	movs	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	b002      	add	sp, #8
 8006070:	bd80      	pop	{r7, pc}
 8006072:	46c0      	nop			@ (mov r8, r8)
 8006074:	08029b4c 	.word	0x08029b4c

08006078 <CWMODE2>:

bool CWMODE2(){
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800607e:	4b0b      	ldr	r3, [pc, #44]	@ (80060ac <CWMODE2+0x34>)
 8006080:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	0018      	movs	r0, r3
 8006086:	f7fa f871 	bl	800016c <strlen>
 800608a:	0003      	movs	r3, r0
 800608c:	b29a      	uxth	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	0011      	movs	r1, r2
 8006092:	0018      	movs	r0, r3
 8006094:	f7fe fce4 	bl	8004a60 <ESP_Send>
 8006098:	1e03      	subs	r3, r0, #0
 800609a:	d001      	beq.n	80060a0 <CWMODE2+0x28>
    return true;
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <CWMODE2+0x2a>
  }
  else{
    return false;
 80060a0:	2300      	movs	r3, #0
  }
}
 80060a2:	0018      	movs	r0, r3
 80060a4:	46bd      	mov	sp, r7
 80060a6:	b002      	add	sp, #8
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	46c0      	nop			@ (mov r8, r8)
 80060ac:	08029b5c 	.word	0x08029b5c

080060b0 <CWAUTOCONN>:

bool CWAUTOCONN(){
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80060b6:	4b0b      	ldr	r3, [pc, #44]	@ (80060e4 <CWAUTOCONN+0x34>)
 80060b8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	0018      	movs	r0, r3
 80060be:	f7fa f855 	bl	800016c <strlen>
 80060c2:	0003      	movs	r3, r0
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	0011      	movs	r1, r2
 80060ca:	0018      	movs	r0, r3
 80060cc:	f7fe fcc8 	bl	8004a60 <ESP_Send>
 80060d0:	1e03      	subs	r3, r0, #0
 80060d2:	d001      	beq.n	80060d8 <CWAUTOCONN+0x28>
    return true;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e000      	b.n	80060da <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80060d8:	2300      	movs	r3, #0
  }
}
 80060da:	0018      	movs	r0, r3
 80060dc:	46bd      	mov	sp, r7
 80060de:	b002      	add	sp, #8
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	46c0      	nop			@ (mov r8, r8)
 80060e4:	08029b6c 	.word	0x08029b6c

080060e8 <CWJAP>:

bool CWJAP(){
 80060e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ea:	46c6      	mov	lr, r8
 80060ec:	b500      	push	{lr}
 80060ee:	b0a2      	sub	sp, #136	@ 0x88
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	466b      	mov	r3, sp
 80060f4:	4698      	mov	r8, r3
  beursTest = true;
 80060f6:	4b39      	ldr	r3, [pc, #228]	@ (80061dc <CWJAP+0xf4>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80060fc:	2618      	movs	r6, #24
 80060fe:	19bb      	adds	r3, r7, r6
 8006100:	2264      	movs	r2, #100	@ 0x64
 8006102:	2100      	movs	r1, #0
 8006104:	0018      	movs	r0, r3
 8006106:	f01e fd23 	bl	8024b50 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 800610a:	4b35      	ldr	r3, [pc, #212]	@ (80061e0 <CWJAP+0xf8>)
 800610c:	4a35      	ldr	r2, [pc, #212]	@ (80061e4 <CWJAP+0xfc>)
 800610e:	4936      	ldr	r1, [pc, #216]	@ (80061e8 <CWJAP+0x100>)
 8006110:	19b8      	adds	r0, r7, r6
 8006112:	f01e fbb7 	bl	8024884 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8006116:	19bb      	adds	r3, r7, r6
 8006118:	0018      	movs	r0, r3
 800611a:	f7fa f827 	bl	800016c <strlen>
 800611e:	0002      	movs	r2, r0
 8006120:	216f      	movs	r1, #111	@ 0x6f
 8006122:	0030      	movs	r0, r6
 8006124:	180b      	adds	r3, r1, r0
 8006126:	19db      	adds	r3, r3, r7
 8006128:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800612a:	180b      	adds	r3, r1, r0
 800612c:	19db      	adds	r3, r3, r7
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	3301      	adds	r3, #1
 8006132:	1e5a      	subs	r2, r3, #1
 8006134:	2180      	movs	r1, #128	@ 0x80
 8006136:	1879      	adds	r1, r7, r1
 8006138:	600a      	str	r2, [r1, #0]
 800613a:	001a      	movs	r2, r3
 800613c:	60ba      	str	r2, [r7, #8]
 800613e:	2200      	movs	r2, #0
 8006140:	60fa      	str	r2, [r7, #12]
 8006142:	68b8      	ldr	r0, [r7, #8]
 8006144:	68f9      	ldr	r1, [r7, #12]
 8006146:	0002      	movs	r2, r0
 8006148:	0f52      	lsrs	r2, r2, #29
 800614a:	000e      	movs	r6, r1
 800614c:	00f6      	lsls	r6, r6, #3
 800614e:	617e      	str	r6, [r7, #20]
 8006150:	697e      	ldr	r6, [r7, #20]
 8006152:	4316      	orrs	r6, r2
 8006154:	617e      	str	r6, [r7, #20]
 8006156:	0002      	movs	r2, r0
 8006158:	00d2      	lsls	r2, r2, #3
 800615a:	613a      	str	r2, [r7, #16]
 800615c:	001a      	movs	r2, r3
 800615e:	603a      	str	r2, [r7, #0]
 8006160:	2200      	movs	r2, #0
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	6838      	ldr	r0, [r7, #0]
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	0002      	movs	r2, r0
 800616a:	0f52      	lsrs	r2, r2, #29
 800616c:	000e      	movs	r6, r1
 800616e:	00f5      	lsls	r5, r6, #3
 8006170:	4315      	orrs	r5, r2
 8006172:	0002      	movs	r2, r0
 8006174:	00d4      	lsls	r4, r2, #3
 8006176:	3307      	adds	r3, #7
 8006178:	08db      	lsrs	r3, r3, #3
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	466a      	mov	r2, sp
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	469d      	mov	sp, r3
 8006182:	466b      	mov	r3, sp
 8006184:	3300      	adds	r3, #0
 8006186:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8006188:	246f      	movs	r4, #111	@ 0x6f
 800618a:	2518      	movs	r5, #24
 800618c:	1963      	adds	r3, r4, r5
 800618e:	19db      	adds	r3, r3, r7
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	3301      	adds	r3, #1
 8006194:	001a      	movs	r2, r3
 8006196:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006198:	2100      	movs	r1, #0
 800619a:	0018      	movs	r0, r3
 800619c:	f01e fcd8 	bl	8024b50 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80061a0:	1963      	adds	r3, r4, r5
 80061a2:	19db      	adds	r3, r3, r7
 80061a4:	781a      	ldrb	r2, [r3, #0]
 80061a6:	1979      	adds	r1, r7, r5
 80061a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80061aa:	0018      	movs	r0, r3
 80061ac:	f01e fcf7 	bl	8024b9e <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80061b0:	1963      	adds	r3, r4, r5
 80061b2:	19db      	adds	r3, r3, r7
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80061ba:	0011      	movs	r1, r2
 80061bc:	0018      	movs	r0, r3
 80061be:	f7fe fc4f 	bl	8004a60 <ESP_Send>
 80061c2:	1e03      	subs	r3, r0, #0
 80061c4:	d001      	beq.n	80061ca <CWJAP+0xe2>
    return true;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <CWJAP+0xe4>
  }
  else{
    return false;
 80061ca:	2300      	movs	r3, #0
 80061cc:	46c5      	mov	sp, r8
  }
}
 80061ce:	0018      	movs	r0, r3
 80061d0:	46bd      	mov	sp, r7
 80061d2:	b022      	add	sp, #136	@ 0x88
 80061d4:	bc80      	pop	{r7}
 80061d6:	46b8      	mov	r8, r7
 80061d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061da:	46c0      	nop			@ (mov r8, r8)
 80061dc:	200005bd 	.word	0x200005bd
 80061e0:	0802c858 	.word	0x0802c858
 80061e4:	0802c84c 	.word	0x0802c84c
 80061e8:	08029b80 	.word	0x08029b80

080061ec <CWMODE3>:

bool CWMODE3(){
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80061f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006220 <CWMODE3+0x34>)
 80061f4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	0018      	movs	r0, r3
 80061fa:	f7f9 ffb7 	bl	800016c <strlen>
 80061fe:	0003      	movs	r3, r0
 8006200:	b29a      	uxth	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	0011      	movs	r1, r2
 8006206:	0018      	movs	r0, r3
 8006208:	f7fe fc2a 	bl	8004a60 <ESP_Send>
 800620c:	1e03      	subs	r3, r0, #0
 800620e:	d001      	beq.n	8006214 <CWMODE3+0x28>
    return true;
 8006210:	2301      	movs	r3, #1
 8006212:	e000      	b.n	8006216 <CWMODE3+0x2a>
  }
  else{
    return false;
 8006214:	2300      	movs	r3, #0
  }
}
 8006216:	0018      	movs	r0, r3
 8006218:	46bd      	mov	sp, r7
 800621a:	b002      	add	sp, #8
 800621c:	bd80      	pop	{r7, pc}
 800621e:	46c0      	nop			@ (mov r8, r8)
 8006220:	08029b98 	.word	0x08029b98

08006224 <CWSTATE>:

bool CWSTATE(){
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 800622a:	4b0b      	ldr	r3, [pc, #44]	@ (8006258 <CWSTATE+0x34>)
 800622c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	0018      	movs	r0, r3
 8006232:	f7f9 ff9b 	bl	800016c <strlen>
 8006236:	0003      	movs	r3, r0
 8006238:	b29a      	uxth	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	0011      	movs	r1, r2
 800623e:	0018      	movs	r0, r3
 8006240:	f7fe fc0e 	bl	8004a60 <ESP_Send>
 8006244:	1e03      	subs	r3, r0, #0
 8006246:	d001      	beq.n	800624c <CWSTATE+0x28>
    return true;
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <CWSTATE+0x2a>
  }
  else{
    return false;
 800624c:	2300      	movs	r3, #0
  }
}
 800624e:	0018      	movs	r0, r3
 8006250:	46bd      	mov	sp, r7
 8006252:	b002      	add	sp, #8
 8006254:	bd80      	pop	{r7, pc}
 8006256:	46c0      	nop			@ (mov r8, r8)
 8006258:	08029ba8 	.word	0x08029ba8

0800625c <CWSAP>:

bool CWSAP(){
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8006262:	4b0b      	ldr	r3, [pc, #44]	@ (8006290 <CWSAP+0x34>)
 8006264:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	0018      	movs	r0, r3
 800626a:	f7f9 ff7f 	bl	800016c <strlen>
 800626e:	0003      	movs	r3, r0
 8006270:	b29a      	uxth	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	0011      	movs	r1, r2
 8006276:	0018      	movs	r0, r3
 8006278:	f7fe fbf2 	bl	8004a60 <ESP_Send>
 800627c:	1e03      	subs	r3, r0, #0
 800627e:	d001      	beq.n	8006284 <CWSAP+0x28>
    return true;
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <CWSAP+0x2a>
  }
  else{
    return false;
 8006284:	2300      	movs	r3, #0
  }
}
 8006286:	0018      	movs	r0, r3
 8006288:	46bd      	mov	sp, r7
 800628a:	b002      	add	sp, #8
 800628c:	bd80      	pop	{r7, pc}
 800628e:	46c0      	nop			@ (mov r8, r8)
 8006290:	08029bb8 	.word	0x08029bb8

08006294 <CIPMUX>:

bool CIPMUX(){
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800629a:	4b0b      	ldr	r3, [pc, #44]	@ (80062c8 <CIPMUX+0x34>)
 800629c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	0018      	movs	r0, r3
 80062a2:	f7f9 ff63 	bl	800016c <strlen>
 80062a6:	0003      	movs	r3, r0
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	0011      	movs	r1, r2
 80062ae:	0018      	movs	r0, r3
 80062b0:	f7fe fbd6 	bl	8004a60 <ESP_Send>
 80062b4:	1e03      	subs	r3, r0, #0
 80062b6:	d001      	beq.n	80062bc <CIPMUX+0x28>
    return true;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <CIPMUX+0x2a>
  }
  else{
    return false;
 80062bc:	2300      	movs	r3, #0
  }
}
 80062be:	0018      	movs	r0, r3
 80062c0:	46bd      	mov	sp, r7
 80062c2:	b002      	add	sp, #8
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	46c0      	nop			@ (mov r8, r8)
 80062c8:	08029bdc 	.word	0x08029bdc

080062cc <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80062d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006300 <WEBSERVER+0x34>)
 80062d4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	0018      	movs	r0, r3
 80062da:	f7f9 ff47 	bl	800016c <strlen>
 80062de:	0003      	movs	r3, r0
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	0011      	movs	r1, r2
 80062e6:	0018      	movs	r0, r3
 80062e8:	f7fe fbba 	bl	8004a60 <ESP_Send>
 80062ec:	1e03      	subs	r3, r0, #0
 80062ee:	d001      	beq.n	80062f4 <WEBSERVER+0x28>
    return true;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <WEBSERVER+0x2a>
  }
  else{
    return false;
 80062f4:	2300      	movs	r3, #0
  }
}
 80062f6:	0018      	movs	r0, r3
 80062f8:	46bd      	mov	sp, r7
 80062fa:	b002      	add	sp, #8
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	46c0      	nop			@ (mov r8, r8)
 8006300:	08029bec 	.word	0x08029bec

08006304 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8006304:	b590      	push	{r4, r7, lr}
 8006306:	b085      	sub	sp, #20
 8006308:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 800630a:	1cfb      	adds	r3, r7, #3
 800630c:	2200      	movs	r2, #0
 800630e:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8006310:	4b26      	ldr	r3, [pc, #152]	@ (80063ac <HTTPCPOST+0xa8>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	1dbc      	adds	r4, r7, #6
 8006316:	1cf9      	adds	r1, r7, #3
 8006318:	2200      	movs	r2, #0
 800631a:	0018      	movs	r0, r3
 800631c:	f7fe fda0 	bl	8004e60 <CreateMessage>
 8006320:	0003      	movs	r3, r0
 8006322:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8006324:	4b21      	ldr	r3, [pc, #132]	@ (80063ac <HTTPCPOST+0xa8>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d007      	beq.n	800633c <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 800632c:	1dbb      	adds	r3, r7, #6
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	4a1f      	ldr	r2, [pc, #124]	@ (80063b0 <HTTPCPOST+0xac>)
 8006332:	4920      	ldr	r1, [pc, #128]	@ (80063b4 <HTTPCPOST+0xb0>)
 8006334:	4820      	ldr	r0, [pc, #128]	@ (80063b8 <HTTPCPOST+0xb4>)
 8006336:	f01e faa5 	bl	8024884 <siprintf>
 800633a:	e015      	b.n	8006368 <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 800633c:	4b1f      	ldr	r3, [pc, #124]	@ (80063bc <HTTPCPOST+0xb8>)
 800633e:	4820      	ldr	r0, [pc, #128]	@ (80063c0 <HTTPCPOST+0xbc>)
 8006340:	220c      	movs	r2, #12
 8006342:	0019      	movs	r1, r3
 8006344:	f004 fd4c 	bl	800ade0 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8006348:	4a1c      	ldr	r2, [pc, #112]	@ (80063bc <HTTPCPOST+0xb8>)
 800634a:	4b1e      	ldr	r3, [pc, #120]	@ (80063c4 <HTTPCPOST+0xc0>)
 800634c:	0011      	movs	r1, r2
 800634e:	0018      	movs	r0, r3
 8006350:	f7fe fd62 	bl	8004e18 <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8006354:	1dbb      	adds	r3, r7, #6
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	4c1a      	ldr	r4, [pc, #104]	@ (80063c4 <HTTPCPOST+0xc0>)
 800635a:	4a1b      	ldr	r2, [pc, #108]	@ (80063c8 <HTTPCPOST+0xc4>)
 800635c:	491b      	ldr	r1, [pc, #108]	@ (80063cc <HTTPCPOST+0xc8>)
 800635e:	4816      	ldr	r0, [pc, #88]	@ (80063b8 <HTTPCPOST+0xb4>)
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	0023      	movs	r3, r4
 8006364:	f01e fa8e 	bl	8024884 <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8006368:	4b13      	ldr	r3, [pc, #76]	@ (80063b8 <HTTPCPOST+0xb4>)
 800636a:	0018      	movs	r0, r3
 800636c:	f7f9 fefe 	bl	800016c <strlen>
 8006370:	0002      	movs	r2, r0
 8006372:	1d3b      	adds	r3, r7, #4
 8006374:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8006376:	1d3b      	adds	r3, r7, #4
 8006378:	8818      	ldrh	r0, [r3, #0]
 800637a:	1cfb      	adds	r3, r7, #3
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	4a14      	ldr	r2, [pc, #80]	@ (80063d0 <HTTPCPOST+0xcc>)
 8006380:	4914      	ldr	r1, [pc, #80]	@ (80063d4 <HTTPCPOST+0xd0>)
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	0003      	movs	r3, r0
 8006386:	2003      	movs	r0, #3
 8006388:	f00c f99a 	bl	80126c0 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 800638c:	1d3b      	adds	r3, r7, #4
 800638e:	881a      	ldrh	r2, [r3, #0]
 8006390:	4b09      	ldr	r3, [pc, #36]	@ (80063b8 <HTTPCPOST+0xb4>)
 8006392:	0011      	movs	r1, r2
 8006394:	0018      	movs	r0, r3
 8006396:	f7fe fb63 	bl	8004a60 <ESP_Send>
 800639a:	1e03      	subs	r3, r0, #0
 800639c:	d001      	beq.n	80063a2 <HTTPCPOST+0x9e>
    return true;
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 80063a2:	2300      	movs	r3, #0
  }
}
 80063a4:	0018      	movs	r0, r3
 80063a6:	46bd      	mov	sp, r7
 80063a8:	b003      	add	sp, #12
 80063aa:	bd90      	pop	{r4, r7, pc}
 80063ac:	200005be 	.word	0x200005be
 80063b0:	0802c874 	.word	0x0802c874
 80063b4:	08029c04 	.word	0x08029c04
 80063b8:	200005e4 	.word	0x200005e4
 80063bc:	2000078c 	.word	0x2000078c
 80063c0:	08080000 	.word	0x08080000
 80063c4:	20000798 	.word	0x20000798
 80063c8:	0802c8b0 	.word	0x0802c8b0
 80063cc:	08029c3c 	.word	0x08029c3c
 80063d0:	08029c7c 	.word	0x08029c7c
 80063d4:	08029030 	.word	0x08029030

080063d8 <SENDDATA>:

bool SENDDATA(){
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af02      	add	r7, sp, #8
  bool result = false;
 80063de:	1dfb      	adds	r3, r7, #7
 80063e0:	2200      	movs	r2, #0
 80063e2:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 80063e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006420 <SENDDATA+0x48>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	1df9      	adds	r1, r7, #7
 80063ea:	2201      	movs	r2, #1
 80063ec:	0018      	movs	r0, r3
 80063ee:	f7fe fd37 	bl	8004e60 <CreateMessage>
 80063f2:	0003      	movs	r3, r0
 80063f4:	001a      	movs	r2, r3
 80063f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006424 <SENDDATA+0x4c>)
 80063f8:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 80063fa:	1dfb      	adds	r3, r7, #7
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	0018      	movs	r0, r3
 8006400:	4b08      	ldr	r3, [pc, #32]	@ (8006424 <SENDDATA+0x4c>)
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	4a08      	ldr	r2, [pc, #32]	@ (8006428 <SENDDATA+0x50>)
 8006406:	4909      	ldr	r1, [pc, #36]	@ (800642c <SENDDATA+0x54>)
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	0003      	movs	r3, r0
 800640c:	2003      	movs	r0, #3
 800640e:	f00c f957 	bl	80126c0 <CreateLine>
  return result;
 8006412:	1dfb      	adds	r3, r7, #7
 8006414:	781b      	ldrb	r3, [r3, #0]
}
 8006416:	0018      	movs	r0, r3
 8006418:	46bd      	mov	sp, r7
 800641a:	b002      	add	sp, #8
 800641c:	bd80      	pop	{r7, pc}
 800641e:	46c0      	nop			@ (mov r8, r8)
 8006420:	200005be 	.word	0x200005be
 8006424:	200005d8 	.word	0x200005d8
 8006428:	08029cd8 	.word	0x08029cd8
 800642c:	08029030 	.word	0x08029030

08006430 <SLEEP>:

bool SLEEP(){
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006436:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <SLEEP+0x34>)
 8006438:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	0018      	movs	r0, r3
 800643e:	f7f9 fe95 	bl	800016c <strlen>
 8006442:	0003      	movs	r3, r0
 8006444:	b29a      	uxth	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	0011      	movs	r1, r2
 800644a:	0018      	movs	r0, r3
 800644c:	f7fe fb08 	bl	8004a60 <ESP_Send>
 8006450:	1e03      	subs	r3, r0, #0
 8006452:	d001      	beq.n	8006458 <SLEEP+0x28>
    return true;
 8006454:	2301      	movs	r3, #1
 8006456:	e000      	b.n	800645a <SLEEP+0x2a>
  }
  else{
    return false;
 8006458:	2300      	movs	r3, #0
  }
}
 800645a:	0018      	movs	r0, r3
 800645c:	46bd      	mov	sp, r7
 800645e:	b002      	add	sp, #8
 8006460:	bd80      	pop	{r7, pc}
 8006462:	46c0      	nop			@ (mov r8, r8)
 8006464:	08029d14 	.word	0x08029d14

08006468 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 800646e:	4b0d      	ldr	r3, [pc, #52]	@ (80064a4 <CIPSNTPCFG+0x3c>)
 8006470:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	0018      	movs	r0, r3
 8006476:	f7f9 fe79 	bl	800016c <strlen>
 800647a:	0003      	movs	r3, r0
 800647c:	b29a      	uxth	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	0011      	movs	r1, r2
 8006482:	0018      	movs	r0, r3
 8006484:	f7fe faec 	bl	8004a60 <ESP_Send>
 8006488:	1e03      	subs	r3, r0, #0
 800648a:	d006      	beq.n	800649a <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 800648c:	23fa      	movs	r3, #250	@ 0xfa
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	0018      	movs	r0, r3
 8006492:	f00c fe55 	bl	8013140 <HAL_Delay>
    return true;
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 800649a:	2300      	movs	r3, #0
  }
}
 800649c:	0018      	movs	r0, r3
 800649e:	46bd      	mov	sp, r7
 80064a0:	b002      	add	sp, #8
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	08029d24 	.word	0x08029d24

080064a8 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 80064ae:	4b0b      	ldr	r3, [pc, #44]	@ (80064dc <CIPSNTPTIME+0x34>)
 80064b0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	0018      	movs	r0, r3
 80064b6:	f7f9 fe59 	bl	800016c <strlen>
 80064ba:	0003      	movs	r3, r0
 80064bc:	b29a      	uxth	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	0011      	movs	r1, r2
 80064c2:	0018      	movs	r0, r3
 80064c4:	f7fe facc 	bl	8004a60 <ESP_Send>
 80064c8:	1e03      	subs	r3, r0, #0
 80064ca:	d001      	beq.n	80064d0 <CIPSNTPTIME+0x28>
    return true;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e000      	b.n	80064d2 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 80064d0:	2300      	movs	r3, #0
  }
}
 80064d2:	0018      	movs	r0, r3
 80064d4:	46bd      	mov	sp, r7
 80064d6:	b002      	add	sp, #8
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	46c0      	nop			@ (mov r8, r8)
 80064dc:	08029d74 	.word	0x08029d74

080064e0 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 80064e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006514 <CIPSNTPINTV+0x34>)
 80064e8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	0018      	movs	r0, r3
 80064ee:	f7f9 fe3d 	bl	800016c <strlen>
 80064f2:	0003      	movs	r3, r0
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	0011      	movs	r1, r2
 80064fa:	0018      	movs	r0, r3
 80064fc:	f7fe fab0 	bl	8004a60 <ESP_Send>
 8006500:	1e03      	subs	r3, r0, #0
 8006502:	d001      	beq.n	8006508 <CIPSNTPINTV+0x28>
    return true;
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006508:	2300      	movs	r3, #0
  }
}
 800650a:	0018      	movs	r0, r3
 800650c:	46bd      	mov	sp, r7
 800650e:	b002      	add	sp, #8
 8006510:	bd80      	pop	{r7, pc}
 8006512:	46c0      	nop			@ (mov r8, r8)
 8006514:	08029d88 	.word	0x08029d88

08006518 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006518:	b5b0      	push	{r4, r5, r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	0002      	movs	r2, r0
 8006520:	1dfb      	adds	r3, r7, #7
 8006522:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006524:	4b6c      	ldr	r3, [pc, #432]	@ (80066d8 <DMA_ProcessBuffer+0x1c0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	b29a      	uxth	r2, r3
 800652c:	200e      	movs	r0, #14
 800652e:	183b      	adds	r3, r7, r0
 8006530:	2180      	movs	r1, #128	@ 0x80
 8006532:	0049      	lsls	r1, r1, #1
 8006534:	1a8a      	subs	r2, r1, r2
 8006536:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006538:	230d      	movs	r3, #13
 800653a:	18fb      	adds	r3, r7, r3
 800653c:	2203      	movs	r2, #3
 800653e:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006540:	183b      	adds	r3, r7, r0
 8006542:	881a      	ldrh	r2, [r3, #0]
 8006544:	2380      	movs	r3, #128	@ 0x80
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	429a      	cmp	r2, r3
 800654a:	d903      	bls.n	8006554 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 800654c:	183b      	adds	r3, r7, r0
 800654e:	2280      	movs	r2, #128	@ 0x80
 8006550:	0052      	lsls	r2, r2, #1
 8006552:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006554:	4b61      	ldr	r3, [pc, #388]	@ (80066dc <DMA_ProcessBuffer+0x1c4>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	b2db      	uxtb	r3, r3
 800655a:	001a      	movs	r2, r3
 800655c:	230e      	movs	r3, #14
 800655e:	18fb      	adds	r3, r7, r3
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	4293      	cmp	r3, r2
 8006564:	d131      	bne.n	80065ca <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006566:	4b5e      	ldr	r3, [pc, #376]	@ (80066e0 <DMA_ProcessBuffer+0x1c8>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b14      	cmp	r3, #20
 800656c:	d91b      	bls.n	80065a6 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 800656e:	4b5c      	ldr	r3, [pc, #368]	@ (80066e0 <DMA_ProcessBuffer+0x1c8>)
 8006570:	2200      	movs	r2, #0
 8006572:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006574:	4b5b      	ldr	r3, [pc, #364]	@ (80066e4 <DMA_ProcessBuffer+0x1cc>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d107      	bne.n	800658c <DMA_ProcessBuffer+0x74>
 800657c:	4b5a      	ldr	r3, [pc, #360]	@ (80066e8 <DMA_ProcessBuffer+0x1d0>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006584:	230d      	movs	r3, #13
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	2207      	movs	r2, #7
 800658a:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 800658c:	4b55      	ldr	r3, [pc, #340]	@ (80066e4 <DMA_ProcessBuffer+0x1cc>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b08      	cmp	r3, #8
 8006592:	d103      	bne.n	800659c <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006594:	4b55      	ldr	r3, [pc, #340]	@ (80066ec <DMA_ProcessBuffer+0x1d4>)
 8006596:	220b      	movs	r2, #11
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	e016      	b.n	80065ca <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 800659c:	230d      	movs	r3, #13
 800659e:	18fb      	adds	r3, r7, r3
 80065a0:	2206      	movs	r2, #6
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	e011      	b.n	80065ca <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 80065a6:	4b4e      	ldr	r3, [pc, #312]	@ (80066e0 <DMA_ProcessBuffer+0x1c8>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	3301      	adds	r3, #1
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	4b4c      	ldr	r3, [pc, #304]	@ (80066e0 <DMA_ProcessBuffer+0x1c8>)
 80065b0:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 80065b2:	f00c fdbb 	bl	801312c <HAL_GetTick>
 80065b6:	0003      	movs	r3, r0
 80065b8:	33f5      	adds	r3, #245	@ 0xf5
 80065ba:	33ff      	adds	r3, #255	@ 0xff
 80065bc:	001a      	movs	r2, r3
 80065be:	4b4c      	ldr	r3, [pc, #304]	@ (80066f0 <DMA_ProcessBuffer+0x1d8>)
 80065c0:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 80065c2:	230d      	movs	r3, #13
 80065c4:	18fb      	adds	r3, r7, r3
 80065c6:	2204      	movs	r2, #4
 80065c8:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 80065ca:	4b44      	ldr	r3, [pc, #272]	@ (80066dc <DMA_ProcessBuffer+0x1c4>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	001a      	movs	r2, r3
 80065d2:	210e      	movs	r1, #14
 80065d4:	187b      	adds	r3, r7, r1
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	4293      	cmp	r3, r2
 80065da:	d100      	bne.n	80065de <DMA_ProcessBuffer+0xc6>
 80065dc:	e075      	b.n	80066ca <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 80065de:	4b40      	ldr	r3, [pc, #256]	@ (80066e0 <DMA_ProcessBuffer+0x1c8>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 80065e4:	4b43      	ldr	r3, [pc, #268]	@ (80066f4 <DMA_ProcessBuffer+0x1dc>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	4b3c      	ldr	r3, [pc, #240]	@ (80066dc <DMA_ProcessBuffer+0x1c4>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d109      	bne.n	8006608 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 80065f4:	187b      	adds	r3, r7, r1
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	4b3e      	ldr	r3, [pc, #248]	@ (80066f4 <DMA_ProcessBuffer+0x1dc>)
 80065fc:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 80065fe:	230d      	movs	r3, #13
 8006600:	18fb      	adds	r3, r7, r3
 8006602:	220a      	movs	r2, #10
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	e060      	b.n	80066ca <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006608:	4b3a      	ldr	r3, [pc, #232]	@ (80066f4 <DMA_ProcessBuffer+0x1dc>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	001a      	movs	r2, r3
 8006610:	210e      	movs	r1, #14
 8006612:	187b      	adds	r3, r7, r1
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	4293      	cmp	r3, r2
 8006618:	d009      	beq.n	800662e <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 800661a:	187b      	adds	r3, r7, r1
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	b2da      	uxtb	r2, r3
 8006620:	4b34      	ldr	r3, [pc, #208]	@ (80066f4 <DMA_ProcessBuffer+0x1dc>)
 8006622:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006624:	230d      	movs	r3, #13
 8006626:	18fb      	adds	r3, r7, r3
 8006628:	220a      	movs	r2, #10
 800662a:	701a      	strb	r2, [r3, #0]
 800662c:	e04d      	b.n	80066ca <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 800662e:	4b2b      	ldr	r3, [pc, #172]	@ (80066dc <DMA_ProcessBuffer+0x1c4>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	001a      	movs	r2, r3
 8006636:	210e      	movs	r1, #14
 8006638:	187b      	adds	r3, r7, r1
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	4293      	cmp	r3, r2
 800663e:	d917      	bls.n	8006670 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8006640:	4b26      	ldr	r3, [pc, #152]	@ (80066dc <DMA_ProcessBuffer+0x1c4>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	001a      	movs	r2, r3
 8006648:	4b2b      	ldr	r3, [pc, #172]	@ (80066f8 <DMA_ProcessBuffer+0x1e0>)
 800664a:	18d0      	adds	r0, r2, r3
 800664c:	4b23      	ldr	r3, [pc, #140]	@ (80066dc <DMA_ProcessBuffer+0x1c4>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	001a      	movs	r2, r3
 8006654:	187b      	adds	r3, r7, r1
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	1a9b      	subs	r3, r3, r2
 800665a:	b299      	uxth	r1, r3
 800665c:	230d      	movs	r3, #13
 800665e:	18fc      	adds	r4, r7, r3
 8006660:	1dfb      	adds	r3, r7, #7
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	001a      	movs	r2, r3
 8006666:	f7ff fa71 	bl	8005b4c <ParseBuffer>
 800666a:	0003      	movs	r3, r0
 800666c:	7023      	strb	r3, [r4, #0]
 800666e:	e026      	b.n	80066be <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8006670:	4b1a      	ldr	r3, [pc, #104]	@ (80066dc <DMA_ProcessBuffer+0x1c4>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	b2db      	uxtb	r3, r3
 8006676:	001a      	movs	r2, r3
 8006678:	4b1f      	ldr	r3, [pc, #124]	@ (80066f8 <DMA_ProcessBuffer+0x1e0>)
 800667a:	18d0      	adds	r0, r2, r3
 800667c:	4b17      	ldr	r3, [pc, #92]	@ (80066dc <DMA_ProcessBuffer+0x1c4>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	b2db      	uxtb	r3, r3
 8006682:	001a      	movs	r2, r3
 8006684:	2380      	movs	r3, #128	@ 0x80
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	1a9b      	subs	r3, r3, r2
 800668a:	b299      	uxth	r1, r3
 800668c:	250d      	movs	r5, #13
 800668e:	197c      	adds	r4, r7, r5
 8006690:	1dfb      	adds	r3, r7, #7
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	001a      	movs	r2, r3
 8006696:	f7ff fa59 	bl	8005b4c <ParseBuffer>
 800669a:	0003      	movs	r3, r0
 800669c:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 800669e:	210e      	movs	r1, #14
 80066a0:	187b      	adds	r3, r7, r1
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00a      	beq.n	80066be <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80066a8:	197c      	adds	r4, r7, r5
 80066aa:	1dfb      	adds	r3, r7, #7
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	187b      	adds	r3, r7, r1
 80066b0:	8819      	ldrh	r1, [r3, #0]
 80066b2:	4b11      	ldr	r3, [pc, #68]	@ (80066f8 <DMA_ProcessBuffer+0x1e0>)
 80066b4:	0018      	movs	r0, r3
 80066b6:	f7ff fa49 	bl	8005b4c <ParseBuffer>
 80066ba:	0003      	movs	r3, r0
 80066bc:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 80066be:	230e      	movs	r3, #14
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	4b05      	ldr	r3, [pc, #20]	@ (80066dc <DMA_ProcessBuffer+0x1c4>)
 80066c8:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 80066ca:	230d      	movs	r3, #13
 80066cc:	18fb      	adds	r3, r7, r3
 80066ce:	781b      	ldrb	r3, [r3, #0]
}
 80066d0:	0018      	movs	r0, r3
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b004      	add	sp, #16
 80066d6:	bdb0      	pop	{r4, r5, r7, pc}
 80066d8:	20002184 	.word	0x20002184
 80066dc:	200007b1 	.word	0x200007b1
 80066e0:	2000068c 	.word	0x2000068c
 80066e4:	2000068e 	.word	0x2000068e
 80066e8:	20000001 	.word	0x20000001
 80066ec:	2000002c 	.word	0x2000002c
 80066f0:	20000684 	.word	0x20000684
 80066f4:	200007b2 	.word	0x200007b2
 80066f8:	200004b8 	.word	0x200004b8

080066fc <clearDMABuffer>:

void clearDMABuffer(){
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8006700:	2380      	movs	r3, #128	@ 0x80
 8006702:	005a      	lsls	r2, r3, #1
 8006704:	4b03      	ldr	r3, [pc, #12]	@ (8006714 <clearDMABuffer+0x18>)
 8006706:	2100      	movs	r1, #0
 8006708:	0018      	movs	r0, r3
 800670a:	f01e fa21 	bl	8024b50 <memset>
}
 800670e:	46c0      	nop			@ (mov r8, r8)
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	200004b8 	.word	0x200004b8

08006718 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	0002      	movs	r2, r0
 8006720:	1dfb      	adds	r3, r7, #7
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	1dbb      	adds	r3, r7, #6
 8006726:	1c0a      	adds	r2, r1, #0
 8006728:	701a      	strb	r2, [r3, #0]
  bool value = false;
 800672a:	210f      	movs	r1, #15
 800672c:	187b      	adds	r3, r7, r1
 800672e:	2200      	movs	r2, #0
 8006730:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8006732:	1dbb      	adds	r3, r7, #6
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d105      	bne.n	8006746 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 800673a:	187b      	adds	r3, r7, r1
 800673c:	1dfa      	adds	r2, r7, #7
 800673e:	7812      	ldrb	r2, [r2, #0]
 8006740:	4251      	negs	r1, r2
 8006742:	414a      	adcs	r2, r1
 8006744:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8006746:	1dbb      	adds	r3, r7, #6
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d107      	bne.n	800675e <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800674e:	230f      	movs	r3, #15
 8006750:	18fb      	adds	r3, r7, r3
 8006752:	1dfa      	adds	r2, r7, #7
 8006754:	7812      	ldrb	r2, [r2, #0]
 8006756:	3a02      	subs	r2, #2
 8006758:	4251      	negs	r1, r2
 800675a:	414a      	adcs	r2, r1
 800675c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800675e:	1dbb      	adds	r3, r7, #6
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d107      	bne.n	8006776 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8006766:	230f      	movs	r3, #15
 8006768:	18fb      	adds	r3, r7, r3
 800676a:	1dfa      	adds	r2, r7, #7
 800676c:	7812      	ldrb	r2, [r2, #0]
 800676e:	3a05      	subs	r2, #5
 8006770:	4251      	negs	r1, r2
 8006772:	414a      	adcs	r2, r1
 8006774:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8006776:	1dbb      	adds	r3, r7, #6
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b05      	cmp	r3, #5
 800677c:	d107      	bne.n	800678e <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 800677e:	230f      	movs	r3, #15
 8006780:	18fb      	adds	r3, r7, r3
 8006782:	1dfa      	adds	r2, r7, #7
 8006784:	7812      	ldrb	r2, [r2, #0]
 8006786:	3a0b      	subs	r2, #11
 8006788:	4251      	negs	r1, r2
 800678a:	414a      	adcs	r2, r1
 800678c:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 800678e:	230f      	movs	r3, #15
 8006790:	18fb      	adds	r3, r7, r3
 8006792:	781b      	ldrb	r3, [r3, #0]
}
 8006794:	0018      	movs	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	b004      	add	sp, #16
 800679a:	bd80      	pop	{r7, pc}

0800679c <AT_Send>:

bool AT_Send(AT_Commands state){
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	0002      	movs	r2, r0
 80067a4:	1dfb      	adds	r3, r7, #7
 80067a6:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80067a8:	230f      	movs	r3, #15
 80067aa:	18fb      	adds	r3, r7, r3
 80067ac:	2200      	movs	r2, #0
 80067ae:	701a      	strb	r2, [r3, #0]
  switch (state){
 80067b0:	1dfb      	adds	r3, r7, #7
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b14      	cmp	r3, #20
 80067b6:	d900      	bls.n	80067ba <AT_Send+0x1e>
 80067b8:	e19e      	b.n	8006af8 <AT_Send+0x35c>
 80067ba:	009a      	lsls	r2, r3, #2
 80067bc:	4bd2      	ldr	r3, [pc, #840]	@ (8006b08 <AT_Send+0x36c>)
 80067be:	18d3      	adds	r3, r2, r3
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80067c4:	4bd1      	ldr	r3, [pc, #836]	@ (8006b0c <AT_Send+0x370>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	0018      	movs	r0, r3
 80067ca:	f00b ff23 	bl	8012614 <TimestampIsReached>
 80067ce:	1e03      	subs	r3, r0, #0
 80067d0:	d100      	bne.n	80067d4 <AT_Send+0x38>
 80067d2:	e190      	b.n	8006af6 <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 80067d4:	4ace      	ldr	r2, [pc, #824]	@ (8006b10 <AT_Send+0x374>)
 80067d6:	4bcf      	ldr	r3, [pc, #828]	@ (8006b14 <AT_Send+0x378>)
 80067d8:	0019      	movs	r1, r3
 80067da:	2003      	movs	r0, #3
 80067dc:	f00b ff70 	bl	80126c0 <CreateLine>
    ATCommandSend = PollAwake();
 80067e0:	230f      	movs	r3, #15
 80067e2:	18fc      	adds	r4, r7, r3
 80067e4:	f7ff fba0 	bl	8005f28 <PollAwake>
 80067e8:	0003      	movs	r3, r0
 80067ea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80067ec:	f00c fc9e 	bl	801312c <HAL_GetTick>
 80067f0:	0003      	movs	r3, r0
 80067f2:	3332      	adds	r3, #50	@ 0x32
 80067f4:	001a      	movs	r2, r3
 80067f6:	4bc5      	ldr	r3, [pc, #788]	@ (8006b0c <AT_Send+0x370>)
 80067f8:	601a      	str	r2, [r3, #0]
  }
  break;
 80067fa:	e17c      	b.n	8006af6 <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 80067fc:	4ac6      	ldr	r2, [pc, #792]	@ (8006b18 <AT_Send+0x37c>)
 80067fe:	4bc5      	ldr	r3, [pc, #788]	@ (8006b14 <AT_Send+0x378>)
 8006800:	0019      	movs	r1, r3
 8006802:	2003      	movs	r0, #3
 8006804:	f00b ff5c 	bl	80126c0 <CreateLine>
    ATCommandSend = RFPower();
 8006808:	230f      	movs	r3, #15
 800680a:	18fc      	adds	r4, r7, r3
 800680c:	f7ff fba8 	bl	8005f60 <RFPower>
 8006810:	0003      	movs	r3, r0
 8006812:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006814:	f00c fc8a 	bl	801312c <HAL_GetTick>
 8006818:	0003      	movs	r3, r0
 800681a:	330a      	adds	r3, #10
 800681c:	001a      	movs	r2, r3
 800681e:	4bbb      	ldr	r3, [pc, #748]	@ (8006b0c <AT_Send+0x370>)
 8006820:	601a      	str	r2, [r3, #0]
    break;
 8006822:	e169      	b.n	8006af8 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8006824:	4abd      	ldr	r2, [pc, #756]	@ (8006b1c <AT_Send+0x380>)
 8006826:	4bbb      	ldr	r3, [pc, #748]	@ (8006b14 <AT_Send+0x378>)
 8006828:	0019      	movs	r1, r3
 800682a:	2003      	movs	r0, #3
 800682c:	f00b ff48 	bl	80126c0 <CreateLine>
    ATCommandSend = CheckRFPower();
 8006830:	230f      	movs	r3, #15
 8006832:	18fc      	adds	r4, r7, r3
 8006834:	f7ff fbb0 	bl	8005f98 <CheckRFPower>
 8006838:	0003      	movs	r3, r0
 800683a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800683c:	f00c fc76 	bl	801312c <HAL_GetTick>
 8006840:	0003      	movs	r3, r0
 8006842:	330a      	adds	r3, #10
 8006844:	001a      	movs	r2, r3
 8006846:	4bb1      	ldr	r3, [pc, #708]	@ (8006b0c <AT_Send+0x370>)
 8006848:	601a      	str	r2, [r3, #0]
    break;
 800684a:	e155      	b.n	8006af8 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 800684c:	4ab4      	ldr	r2, [pc, #720]	@ (8006b20 <AT_Send+0x384>)
 800684e:	4bb1      	ldr	r3, [pc, #708]	@ (8006b14 <AT_Send+0x378>)
 8006850:	0019      	movs	r1, r3
 8006852:	2003      	movs	r0, #3
 8006854:	f00b ff34 	bl	80126c0 <CreateLine>
    ATCommandSend = ATRestore();
 8006858:	230f      	movs	r3, #15
 800685a:	18fc      	adds	r4, r7, r3
 800685c:	f7ff fbb8 	bl	8005fd0 <ATRestore>
 8006860:	0003      	movs	r3, r0
 8006862:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006864:	f00c fc62 	bl	801312c <HAL_GetTick>
 8006868:	0003      	movs	r3, r0
 800686a:	3332      	adds	r3, #50	@ 0x32
 800686c:	001a      	movs	r2, r3
 800686e:	4ba7      	ldr	r3, [pc, #668]	@ (8006b0c <AT_Send+0x370>)
 8006870:	601a      	str	r2, [r3, #0]
    break;
 8006872:	e141      	b.n	8006af8 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8006874:	4aab      	ldr	r2, [pc, #684]	@ (8006b24 <AT_Send+0x388>)
 8006876:	4ba7      	ldr	r3, [pc, #668]	@ (8006b14 <AT_Send+0x378>)
 8006878:	0019      	movs	r1, r3
 800687a:	2003      	movs	r0, #3
 800687c:	f00b ff20 	bl	80126c0 <CreateLine>
    ATCommandSend = CWINIT();
 8006880:	230f      	movs	r3, #15
 8006882:	18fc      	adds	r4, r7, r3
 8006884:	f7ff fbc0 	bl	8006008 <CWINIT>
 8006888:	0003      	movs	r3, r0
 800688a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800688c:	f00c fc4e 	bl	801312c <HAL_GetTick>
 8006890:	0003      	movs	r3, r0
 8006892:	33f5      	adds	r3, #245	@ 0xf5
 8006894:	33ff      	adds	r3, #255	@ 0xff
 8006896:	001a      	movs	r2, r3
 8006898:	4b9c      	ldr	r3, [pc, #624]	@ (8006b0c <AT_Send+0x370>)
 800689a:	601a      	str	r2, [r3, #0]
    break;
 800689c:	e12c      	b.n	8006af8 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 800689e:	4aa2      	ldr	r2, [pc, #648]	@ (8006b28 <AT_Send+0x38c>)
 80068a0:	4b9c      	ldr	r3, [pc, #624]	@ (8006b14 <AT_Send+0x378>)
 80068a2:	0019      	movs	r1, r3
 80068a4:	2003      	movs	r0, #3
 80068a6:	f00b ff0b 	bl	80126c0 <CreateLine>
    ATCommandSend = CWSTATE();
 80068aa:	230f      	movs	r3, #15
 80068ac:	18fc      	adds	r4, r7, r3
 80068ae:	f7ff fcb9 	bl	8006224 <CWSTATE>
 80068b2:	0003      	movs	r3, r0
 80068b4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80068b6:	f00c fc39 	bl	801312c <HAL_GetTick>
 80068ba:	0003      	movs	r3, r0
 80068bc:	33f5      	adds	r3, #245	@ 0xf5
 80068be:	33ff      	adds	r3, #255	@ 0xff
 80068c0:	001a      	movs	r2, r3
 80068c2:	4b92      	ldr	r3, [pc, #584]	@ (8006b0c <AT_Send+0x370>)
 80068c4:	601a      	str	r2, [r3, #0]
    break;
 80068c6:	e117      	b.n	8006af8 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80068c8:	4a98      	ldr	r2, [pc, #608]	@ (8006b2c <AT_Send+0x390>)
 80068ca:	4b92      	ldr	r3, [pc, #584]	@ (8006b14 <AT_Send+0x378>)
 80068cc:	0019      	movs	r1, r3
 80068ce:	2003      	movs	r0, #3
 80068d0:	f00b fef6 	bl	80126c0 <CreateLine>
    ATCommandSend = CWMODE1();
 80068d4:	230f      	movs	r3, #15
 80068d6:	18fc      	adds	r4, r7, r3
 80068d8:	f7ff fbb2 	bl	8006040 <CWMODE1>
 80068dc:	0003      	movs	r3, r0
 80068de:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80068e0:	f00c fc24 	bl	801312c <HAL_GetTick>
 80068e4:	0003      	movs	r3, r0
 80068e6:	330a      	adds	r3, #10
 80068e8:	001a      	movs	r2, r3
 80068ea:	4b88      	ldr	r3, [pc, #544]	@ (8006b0c <AT_Send+0x370>)
 80068ec:	601a      	str	r2, [r3, #0]
    break;
 80068ee:	e103      	b.n	8006af8 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80068f0:	4a8e      	ldr	r2, [pc, #568]	@ (8006b2c <AT_Send+0x390>)
 80068f2:	4b88      	ldr	r3, [pc, #544]	@ (8006b14 <AT_Send+0x378>)
 80068f4:	0019      	movs	r1, r3
 80068f6:	2003      	movs	r0, #3
 80068f8:	f00b fee2 	bl	80126c0 <CreateLine>
    ATCommandSend = CWMODE2();
 80068fc:	230f      	movs	r3, #15
 80068fe:	18fc      	adds	r4, r7, r3
 8006900:	f7ff fbba 	bl	8006078 <CWMODE2>
 8006904:	0003      	movs	r3, r0
 8006906:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006908:	f00c fc10 	bl	801312c <HAL_GetTick>
 800690c:	0003      	movs	r3, r0
 800690e:	330a      	adds	r3, #10
 8006910:	001a      	movs	r2, r3
 8006912:	4b7e      	ldr	r3, [pc, #504]	@ (8006b0c <AT_Send+0x370>)
 8006914:	601a      	str	r2, [r3, #0]
    break;
 8006916:	e0ef      	b.n	8006af8 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8006918:	4a85      	ldr	r2, [pc, #532]	@ (8006b30 <AT_Send+0x394>)
 800691a:	4b7e      	ldr	r3, [pc, #504]	@ (8006b14 <AT_Send+0x378>)
 800691c:	0019      	movs	r1, r3
 800691e:	2003      	movs	r0, #3
 8006920:	f00b fece 	bl	80126c0 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8006924:	230f      	movs	r3, #15
 8006926:	18fc      	adds	r4, r7, r3
 8006928:	f7ff fbc2 	bl	80060b0 <CWAUTOCONN>
 800692c:	0003      	movs	r3, r0
 800692e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006930:	f00c fbfc 	bl	801312c <HAL_GetTick>
 8006934:	0003      	movs	r3, r0
 8006936:	330a      	adds	r3, #10
 8006938:	001a      	movs	r2, r3
 800693a:	4b74      	ldr	r3, [pc, #464]	@ (8006b0c <AT_Send+0x370>)
 800693c:	601a      	str	r2, [r3, #0]
    break;
 800693e:	e0db      	b.n	8006af8 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8006940:	4a7c      	ldr	r2, [pc, #496]	@ (8006b34 <AT_Send+0x398>)
 8006942:	4b74      	ldr	r3, [pc, #464]	@ (8006b14 <AT_Send+0x378>)
 8006944:	0019      	movs	r1, r3
 8006946:	2003      	movs	r0, #3
 8006948:	f00b feba 	bl	80126c0 <CreateLine>
    ATCommandSend = CWJAP();
 800694c:	230f      	movs	r3, #15
 800694e:	18fc      	adds	r4, r7, r3
 8006950:	f7ff fbca 	bl	80060e8 <CWJAP>
 8006954:	0003      	movs	r3, r0
 8006956:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006958:	f00c fbe8 	bl	801312c <HAL_GetTick>
 800695c:	0003      	movs	r3, r0
 800695e:	3332      	adds	r3, #50	@ 0x32
 8006960:	001a      	movs	r2, r3
 8006962:	4b6a      	ldr	r3, [pc, #424]	@ (8006b0c <AT_Send+0x370>)
 8006964:	601a      	str	r2, [r3, #0]
    break;
 8006966:	e0c7      	b.n	8006af8 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8006968:	4a73      	ldr	r2, [pc, #460]	@ (8006b38 <AT_Send+0x39c>)
 800696a:	4b6a      	ldr	r3, [pc, #424]	@ (8006b14 <AT_Send+0x378>)
 800696c:	0019      	movs	r1, r3
 800696e:	2003      	movs	r0, #3
 8006970:	f00b fea6 	bl	80126c0 <CreateLine>
    ATCommandSend = CWMODE3();
 8006974:	230f      	movs	r3, #15
 8006976:	18fc      	adds	r4, r7, r3
 8006978:	f7ff fc38 	bl	80061ec <CWMODE3>
 800697c:	0003      	movs	r3, r0
 800697e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006980:	f00c fbd4 	bl	801312c <HAL_GetTick>
 8006984:	0003      	movs	r3, r0
 8006986:	330a      	adds	r3, #10
 8006988:	001a      	movs	r2, r3
 800698a:	4b60      	ldr	r3, [pc, #384]	@ (8006b0c <AT_Send+0x370>)
 800698c:	601a      	str	r2, [r3, #0]
    break;
 800698e:	e0b3      	b.n	8006af8 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8006990:	4a6a      	ldr	r2, [pc, #424]	@ (8006b3c <AT_Send+0x3a0>)
 8006992:	4b60      	ldr	r3, [pc, #384]	@ (8006b14 <AT_Send+0x378>)
 8006994:	0019      	movs	r1, r3
 8006996:	2003      	movs	r0, #3
 8006998:	f00b fe92 	bl	80126c0 <CreateLine>
    ATCommandSend = CWSAP();
 800699c:	230f      	movs	r3, #15
 800699e:	18fc      	adds	r4, r7, r3
 80069a0:	f7ff fc5c 	bl	800625c <CWSAP>
 80069a4:	0003      	movs	r3, r0
 80069a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80069a8:	f00c fbc0 	bl	801312c <HAL_GetTick>
 80069ac:	0003      	movs	r3, r0
 80069ae:	330a      	adds	r3, #10
 80069b0:	001a      	movs	r2, r3
 80069b2:	4b56      	ldr	r3, [pc, #344]	@ (8006b0c <AT_Send+0x370>)
 80069b4:	601a      	str	r2, [r3, #0]
    break;
 80069b6:	e09f      	b.n	8006af8 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80069b8:	4a61      	ldr	r2, [pc, #388]	@ (8006b40 <AT_Send+0x3a4>)
 80069ba:	4b56      	ldr	r3, [pc, #344]	@ (8006b14 <AT_Send+0x378>)
 80069bc:	0019      	movs	r1, r3
 80069be:	2003      	movs	r0, #3
 80069c0:	f00b fe7e 	bl	80126c0 <CreateLine>
    ATCommandSend = CIPMUX();
 80069c4:	230f      	movs	r3, #15
 80069c6:	18fc      	adds	r4, r7, r3
 80069c8:	f7ff fc64 	bl	8006294 <CIPMUX>
 80069cc:	0003      	movs	r3, r0
 80069ce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80069d0:	f00c fbac 	bl	801312c <HAL_GetTick>
 80069d4:	0003      	movs	r3, r0
 80069d6:	330a      	adds	r3, #10
 80069d8:	001a      	movs	r2, r3
 80069da:	4b4c      	ldr	r3, [pc, #304]	@ (8006b0c <AT_Send+0x370>)
 80069dc:	601a      	str	r2, [r3, #0]
    break;
 80069de:	e08b      	b.n	8006af8 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 80069e0:	4a58      	ldr	r2, [pc, #352]	@ (8006b44 <AT_Send+0x3a8>)
 80069e2:	4b4c      	ldr	r3, [pc, #304]	@ (8006b14 <AT_Send+0x378>)
 80069e4:	0019      	movs	r1, r3
 80069e6:	2003      	movs	r0, #3
 80069e8:	f00b fe6a 	bl	80126c0 <CreateLine>
    ATCommandSend = WEBSERVER();
 80069ec:	230f      	movs	r3, #15
 80069ee:	18fc      	adds	r4, r7, r3
 80069f0:	f7ff fc6c 	bl	80062cc <WEBSERVER>
 80069f4:	0003      	movs	r3, r0
 80069f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80069f8:	f00c fb98 	bl	801312c <HAL_GetTick>
 80069fc:	0003      	movs	r3, r0
 80069fe:	330a      	adds	r3, #10
 8006a00:	001a      	movs	r2, r3
 8006a02:	4b42      	ldr	r3, [pc, #264]	@ (8006b0c <AT_Send+0x370>)
 8006a04:	601a      	str	r2, [r3, #0]
    break;
 8006a06:	e077      	b.n	8006af8 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8006a08:	230f      	movs	r3, #15
 8006a0a:	18fc      	adds	r4, r7, r3
 8006a0c:	f7ff fc7a 	bl	8006304 <HTTPCPOST>
 8006a10:	0003      	movs	r3, r0
 8006a12:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006a14:	f00c fb8a 	bl	801312c <HAL_GetTick>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	33f5      	adds	r3, #245	@ 0xf5
 8006a1c:	33ff      	adds	r3, #255	@ 0xff
 8006a1e:	001a      	movs	r2, r3
 8006a20:	4b3a      	ldr	r3, [pc, #232]	@ (8006b0c <AT_Send+0x370>)
 8006a22:	601a      	str	r2, [r3, #0]
    break;
 8006a24:	e068      	b.n	8006af8 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 8006a26:	4a48      	ldr	r2, [pc, #288]	@ (8006b48 <AT_Send+0x3ac>)
 8006a28:	4b3a      	ldr	r3, [pc, #232]	@ (8006b14 <AT_Send+0x378>)
 8006a2a:	0019      	movs	r1, r3
 8006a2c:	2003      	movs	r0, #3
 8006a2e:	f00b fe47 	bl	80126c0 <CreateLine>
    ATCommandSend = SENDDATA();
 8006a32:	230f      	movs	r3, #15
 8006a34:	18fc      	adds	r4, r7, r3
 8006a36:	f7ff fccf 	bl	80063d8 <SENDDATA>
 8006a3a:	0003      	movs	r3, r0
 8006a3c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8006a3e:	f00c fb75 	bl	801312c <HAL_GetTick>
 8006a42:	0003      	movs	r3, r0
 8006a44:	33f5      	adds	r3, #245	@ 0xf5
 8006a46:	33ff      	adds	r3, #255	@ 0xff
 8006a48:	001a      	movs	r2, r3
 8006a4a:	4b30      	ldr	r3, [pc, #192]	@ (8006b0c <AT_Send+0x370>)
 8006a4c:	601a      	str	r2, [r3, #0]
    break;
 8006a4e:	e053      	b.n	8006af8 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8006a50:	4a3e      	ldr	r2, [pc, #248]	@ (8006b4c <AT_Send+0x3b0>)
 8006a52:	4b30      	ldr	r3, [pc, #192]	@ (8006b14 <AT_Send+0x378>)
 8006a54:	0019      	movs	r1, r3
 8006a56:	2003      	movs	r0, #3
 8006a58:	f00b fe32 	bl	80126c0 <CreateLine>
    ATCommandSend = SLEEP();
 8006a5c:	230f      	movs	r3, #15
 8006a5e:	18fc      	adds	r4, r7, r3
 8006a60:	f7ff fce6 	bl	8006430 <SLEEP>
 8006a64:	0003      	movs	r3, r0
 8006a66:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006a68:	f00c fb60 	bl	801312c <HAL_GetTick>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	330a      	adds	r3, #10
 8006a70:	001a      	movs	r2, r3
 8006a72:	4b26      	ldr	r3, [pc, #152]	@ (8006b0c <AT_Send+0x370>)
 8006a74:	601a      	str	r2, [r3, #0]
    break;
 8006a76:	e03f      	b.n	8006af8 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8006a78:	4a35      	ldr	r2, [pc, #212]	@ (8006b50 <AT_Send+0x3b4>)
 8006a7a:	4b26      	ldr	r3, [pc, #152]	@ (8006b14 <AT_Send+0x378>)
 8006a7c:	0019      	movs	r1, r3
 8006a7e:	2003      	movs	r0, #3
 8006a80:	f00b fe1e 	bl	80126c0 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8006a84:	230f      	movs	r3, #15
 8006a86:	18fc      	adds	r4, r7, r3
 8006a88:	f7ff fcee 	bl	8006468 <CIPSNTPCFG>
 8006a8c:	0003      	movs	r3, r0
 8006a8e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006a90:	f00c fb4c 	bl	801312c <HAL_GetTick>
 8006a94:	0003      	movs	r3, r0
 8006a96:	330a      	adds	r3, #10
 8006a98:	001a      	movs	r2, r3
 8006a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8006b0c <AT_Send+0x370>)
 8006a9c:	601a      	str	r2, [r3, #0]
    break;
 8006a9e:	e02b      	b.n	8006af8 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8006aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8006b54 <AT_Send+0x3b8>)
 8006aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8006b14 <AT_Send+0x378>)
 8006aa4:	0019      	movs	r1, r3
 8006aa6:	2003      	movs	r0, #3
 8006aa8:	f00b fe0a 	bl	80126c0 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8006aac:	230f      	movs	r3, #15
 8006aae:	18fc      	adds	r4, r7, r3
 8006ab0:	f7ff fcfa 	bl	80064a8 <CIPSNTPTIME>
 8006ab4:	0003      	movs	r3, r0
 8006ab6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006ab8:	f00c fb38 	bl	801312c <HAL_GetTick>
 8006abc:	0003      	movs	r3, r0
 8006abe:	33f5      	adds	r3, #245	@ 0xf5
 8006ac0:	33ff      	adds	r3, #255	@ 0xff
 8006ac2:	001a      	movs	r2, r3
 8006ac4:	4b11      	ldr	r3, [pc, #68]	@ (8006b0c <AT_Send+0x370>)
 8006ac6:	601a      	str	r2, [r3, #0]
    break;
 8006ac8:	e016      	b.n	8006af8 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8006aca:	4a23      	ldr	r2, [pc, #140]	@ (8006b58 <AT_Send+0x3bc>)
 8006acc:	4b11      	ldr	r3, [pc, #68]	@ (8006b14 <AT_Send+0x378>)
 8006ace:	0019      	movs	r1, r3
 8006ad0:	2003      	movs	r0, #3
 8006ad2:	f00b fdf5 	bl	80126c0 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8006ad6:	230f      	movs	r3, #15
 8006ad8:	18fc      	adds	r4, r7, r3
 8006ada:	f7ff fd01 	bl	80064e0 <CIPSNTPINTV>
 8006ade:	0003      	movs	r3, r0
 8006ae0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006ae2:	f00c fb23 	bl	801312c <HAL_GetTick>
 8006ae6:	0003      	movs	r3, r0
 8006ae8:	330a      	adds	r3, #10
 8006aea:	001a      	movs	r2, r3
 8006aec:	4b07      	ldr	r3, [pc, #28]	@ (8006b0c <AT_Send+0x370>)
 8006aee:	601a      	str	r2, [r3, #0]
    break;
 8006af0:	e002      	b.n	8006af8 <AT_Send+0x35c>

  case AT_END:
    break;
 8006af2:	46c0      	nop			@ (mov r8, r8)
 8006af4:	e000      	b.n	8006af8 <AT_Send+0x35c>
  break;
 8006af6:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8006af8:	230f      	movs	r3, #15
 8006afa:	18fb      	adds	r3, r7, r3
 8006afc:	781b      	ldrb	r3, [r3, #0]
}
 8006afe:	0018      	movs	r0, r3
 8006b00:	46bd      	mov	sp, r7
 8006b02:	b005      	add	sp, #20
 8006b04:	bd90      	pop	{r4, r7, pc}
 8006b06:	46c0      	nop			@ (mov r8, r8)
 8006b08:	0802c90c 	.word	0x0802c90c
 8006b0c:	20000684 	.word	0x20000684
 8006b10:	08029da0 	.word	0x08029da0
 8006b14:	08029030 	.word	0x08029030
 8006b18:	08029dac 	.word	0x08029dac
 8006b1c:	08029dc0 	.word	0x08029dc0
 8006b20:	08029dd4 	.word	0x08029dd4
 8006b24:	08029de4 	.word	0x08029de4
 8006b28:	08029df8 	.word	0x08029df8
 8006b2c:	08029e10 	.word	0x08029e10
 8006b30:	08029e28 	.word	0x08029e28
 8006b34:	08029e40 	.word	0x08029e40
 8006b38:	08029e54 	.word	0x08029e54
 8006b3c:	08029e70 	.word	0x08029e70
 8006b40:	08029e8c 	.word	0x08029e8c
 8006b44:	08029ea8 	.word	0x08029ea8
 8006b48:	08029ec4 	.word	0x08029ec4
 8006b4c:	08029ed4 	.word	0x08029ed4
 8006b50:	08029ef8 	.word	0x08029ef8
 8006b54:	08029f0c 	.word	0x08029f0c
 8006b58:	08029f24 	.word	0x08029f24

08006b5c <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8006b5c:	b590      	push	{r4, r7, lr}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8006b62:	1dfb      	adds	r3, r7, #7
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8006b68:	4b7d      	ldr	r3, [pc, #500]	@ (8006d60 <ESP_WakeTest+0x204>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b05      	cmp	r3, #5
 8006b6e:	d900      	bls.n	8006b72 <ESP_WakeTest+0x16>
 8006b70:	e0d9      	b.n	8006d26 <ESP_WakeTest+0x1ca>
 8006b72:	009a      	lsls	r2, r3, #2
 8006b74:	4b7b      	ldr	r3, [pc, #492]	@ (8006d64 <ESP_WakeTest+0x208>)
 8006b76:	18d3      	adds	r3, r2, r3
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8006b7c:	4b7a      	ldr	r3, [pc, #488]	@ (8006d68 <ESP_WakeTest+0x20c>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2201      	movs	r2, #1
 8006b82:	4053      	eors	r3, r2
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d036      	beq.n	8006bf8 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8006b8a:	2380      	movs	r3, #128	@ 0x80
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	4877      	ldr	r0, [pc, #476]	@ (8006d6c <ESP_WakeTest+0x210>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	0019      	movs	r1, r3
 8006b94:	f00d fd5b 	bl	801464e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8006b98:	2032      	movs	r0, #50	@ 0x32
 8006b9a:	f00c fad1 	bl	8013140 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8006b9e:	2380      	movs	r3, #128	@ 0x80
 8006ba0:	011b      	lsls	r3, r3, #4
 8006ba2:	4872      	ldr	r0, [pc, #456]	@ (8006d6c <ESP_WakeTest+0x210>)
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	0019      	movs	r1, r3
 8006ba8:	f00d fd51 	bl	801464e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8006bac:	200a      	movs	r0, #10
 8006bae:	f00c fac7 	bl	8013140 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006bb2:	4b6f      	ldr	r3, [pc, #444]	@ (8006d70 <ESP_WakeTest+0x214>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f00d fd48 	bl	801464e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8006bbe:	200a      	movs	r0, #10
 8006bc0:	f00c fabe 	bl	8013140 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8006bc4:	4b6a      	ldr	r3, [pc, #424]	@ (8006d70 <ESP_WakeTest+0x214>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	2102      	movs	r1, #2
 8006bca:	0018      	movs	r0, r3
 8006bcc:	f00d fd3f 	bl	801464e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8006bd0:	200a      	movs	r0, #10
 8006bd2:	f00c fab5 	bl	8013140 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006bd6:	4b66      	ldr	r3, [pc, #408]	@ (8006d70 <ESP_WakeTest+0x214>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	2101      	movs	r1, #1
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f00d fd36 	bl	801464e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8006be2:	f00c faa3 	bl	801312c <HAL_GetTick>
 8006be6:	0003      	movs	r3, r0
 8006be8:	22af      	movs	r2, #175	@ 0xaf
 8006bea:	0092      	lsls	r2, r2, #2
 8006bec:	189a      	adds	r2, r3, r2
 8006bee:	4b61      	ldr	r3, [pc, #388]	@ (8006d74 <ESP_WakeTest+0x218>)
 8006bf0:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8006bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8006d68 <ESP_WakeTest+0x20c>)
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8006bf8:	2380      	movs	r3, #128	@ 0x80
 8006bfa:	005a      	lsls	r2, r3, #1
 8006bfc:	4b5e      	ldr	r3, [pc, #376]	@ (8006d78 <ESP_WakeTest+0x21c>)
 8006bfe:	0011      	movs	r1, r2
 8006c00:	0018      	movs	r0, r3
 8006c02:	f7fd ff5f 	bl	8004ac4 <ESP_Receive>
 8006c06:	1e03      	subs	r3, r0, #0
 8006c08:	d100      	bne.n	8006c0c <ESP_WakeTest+0xb0>
 8006c0a:	e09f      	b.n	8006d4c <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8006c0c:	4b54      	ldr	r3, [pc, #336]	@ (8006d60 <ESP_WakeTest+0x204>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006c12:	e09b      	b.n	8006d4c <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8006c14:	4b57      	ldr	r3, [pc, #348]	@ (8006d74 <ESP_WakeTest+0x218>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f00b fcfb 	bl	8012614 <TimestampIsReached>
 8006c1e:	1e03      	subs	r3, r0, #0
 8006c20:	d100      	bne.n	8006c24 <ESP_WakeTest+0xc8>
 8006c22:	e095      	b.n	8006d50 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 8006c24:	4b55      	ldr	r3, [pc, #340]	@ (8006d7c <ESP_WakeTest+0x220>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	1dfc      	adds	r4, r7, #7
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f7ff fdb6 	bl	800679c <AT_Send>
 8006c30:	0003      	movs	r3, r0
 8006c32:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8006c34:	1dfb      	adds	r3, r7, #7
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d100      	bne.n	8006c3e <ESP_WakeTest+0xe2>
 8006c3c:	e088      	b.n	8006d50 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8006c3e:	4b48      	ldr	r3, [pc, #288]	@ (8006d60 <ESP_WakeTest+0x204>)
 8006c40:	2202      	movs	r2, #2
 8006c42:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006c44:	e084      	b.n	8006d50 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8006c46:	4b4b      	ldr	r3, [pc, #300]	@ (8006d74 <ESP_WakeTest+0x218>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f00b fce2 	bl	8012614 <TimestampIsReached>
 8006c50:	1e03      	subs	r3, r0, #0
 8006c52:	d100      	bne.n	8006c56 <ESP_WakeTest+0xfa>
 8006c54:	e07e      	b.n	8006d54 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8006c56:	4b4a      	ldr	r3, [pc, #296]	@ (8006d80 <ESP_WakeTest+0x224>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	f7ff fc5c 	bl	8006518 <DMA_ProcessBuffer>
 8006c60:	0003      	movs	r3, r0
 8006c62:	001a      	movs	r2, r3
 8006c64:	4b47      	ldr	r3, [pc, #284]	@ (8006d84 <ESP_WakeTest+0x228>)
 8006c66:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8006c68:	4b46      	ldr	r3, [pc, #280]	@ (8006d84 <ESP_WakeTest+0x228>)
 8006c6a:	781a      	ldrb	r2, [r3, #0]
 8006c6c:	4b44      	ldr	r3, [pc, #272]	@ (8006d80 <ESP_WakeTest+0x224>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	1dbc      	adds	r4, r7, #6
 8006c72:	0019      	movs	r1, r3
 8006c74:	0010      	movs	r0, r2
 8006c76:	f7ff fd4f 	bl	8006718 <ATCompare>
 8006c7a:	0003      	movs	r3, r0
 8006c7c:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8006c7e:	4b41      	ldr	r3, [pc, #260]	@ (8006d84 <ESP_WakeTest+0x228>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d102      	bne.n	8006c8c <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8006c86:	4b36      	ldr	r3, [pc, #216]	@ (8006d60 <ESP_WakeTest+0x204>)
 8006c88:	2201      	movs	r2, #1
 8006c8a:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8006c8c:	4b3d      	ldr	r3, [pc, #244]	@ (8006d84 <ESP_WakeTest+0x228>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b07      	cmp	r3, #7
 8006c92:	d104      	bne.n	8006c9e <ESP_WakeTest+0x142>
          StartProg();
 8006c94:	f7fe ff28 	bl	8005ae8 <StartProg>
          TestState = ESP_TEST_BOOT;
 8006c98:	4b31      	ldr	r3, [pc, #196]	@ (8006d60 <ESP_WakeTest+0x204>)
 8006c9a:	2205      	movs	r2, #5
 8006c9c:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8006c9e:	4b39      	ldr	r3, [pc, #228]	@ (8006d84 <ESP_WakeTest+0x228>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d109      	bne.n	8006cba <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8006ca6:	f00c fa41 	bl	801312c <HAL_GetTick>
 8006caa:	0003      	movs	r3, r0
 8006cac:	3332      	adds	r3, #50	@ 0x32
 8006cae:	001a      	movs	r2, r3
 8006cb0:	4b30      	ldr	r3, [pc, #192]	@ (8006d74 <ESP_WakeTest+0x218>)
 8006cb2:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8006cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8006d60 <ESP_WakeTest+0x204>)
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8006cba:	1dbb      	adds	r3, r7, #6
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d048      	beq.n	8006d54 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 8006cc2:	4b27      	ldr	r3, [pc, #156]	@ (8006d60 <ESP_WakeTest+0x204>)
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006cc8:	e044      	b.n	8006d54 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8006cca:	4b2f      	ldr	r3, [pc, #188]	@ (8006d88 <ESP_WakeTest+0x22c>)
 8006ccc:	22fa      	movs	r2, #250	@ 0xfa
 8006cce:	0112      	lsls	r2, r2, #4
 8006cd0:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 8006cd2:	f00a f9e9 	bl	80110a8 <Calculate_LED_ON>
 8006cd6:	0003      	movs	r3, r0
 8006cd8:	001a      	movs	r2, r3
 8006cda:	4b2b      	ldr	r3, [pc, #172]	@ (8006d88 <ESP_WakeTest+0x22c>)
 8006cdc:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8006cde:	4b2a      	ldr	r3, [pc, #168]	@ (8006d88 <ESP_WakeTest+0x22c>)
 8006ce0:	22fa      	movs	r2, #250	@ 0xfa
 8006ce2:	0112      	lsls	r2, r2, #4
 8006ce4:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8006ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d60 <ESP_WakeTest+0x204>)
 8006ce8:	2204      	movs	r2, #4
 8006cea:	701a      	strb	r2, [r3, #0]

      break;
 8006cec:	e033      	b.n	8006d56 <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 8006cee:	4b27      	ldr	r3, [pc, #156]	@ (8006d8c <ESP_WakeTest+0x230>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8006cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8006d68 <ESP_WakeTest+0x20c>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8006d70 <ESP_WakeTest+0x214>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2101      	movs	r1, #1
 8006d00:	0018      	movs	r0, r3
 8006d02:	f00d fca4 	bl	801464e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8006d06:	2380      	movs	r3, #128	@ 0x80
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	4818      	ldr	r0, [pc, #96]	@ (8006d6c <ESP_WakeTest+0x210>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	0019      	movs	r1, r3
 8006d10:	f00d fc9d 	bl	801464e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8006d14:	4b16      	ldr	r3, [pc, #88]	@ (8006d70 <ESP_WakeTest+0x214>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	2102      	movs	r1, #2
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f00d fc97 	bl	801464e <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8006d20:	f005 fa00 	bl	800c124 <SetESPMeasurementDone>
      break;
 8006d24:	e017      	b.n	8006d56 <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 8006d26:	4b0e      	ldr	r3, [pc, #56]	@ (8006d60 <ESP_WakeTest+0x204>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
      break;
 8006d2c:	e013      	b.n	8006d56 <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8006d2e:	4b16      	ldr	r3, [pc, #88]	@ (8006d88 <ESP_WakeTest+0x22c>)
 8006d30:	22fa      	movs	r2, #250	@ 0xfa
 8006d32:	0112      	lsls	r2, r2, #4
 8006d34:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8006d36:	4b14      	ldr	r3, [pc, #80]	@ (8006d88 <ESP_WakeTest+0x22c>)
 8006d38:	22fa      	movs	r2, #250	@ 0xfa
 8006d3a:	0112      	lsls	r2, r2, #4
 8006d3c:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8006d3e:	f00a f9b3 	bl	80110a8 <Calculate_LED_ON>
 8006d42:	0003      	movs	r3, r0
 8006d44:	001a      	movs	r2, r3
 8006d46:	4b10      	ldr	r3, [pc, #64]	@ (8006d88 <ESP_WakeTest+0x22c>)
 8006d48:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8006d4a:	e004      	b.n	8006d56 <ESP_WakeTest+0x1fa>
      break;
 8006d4c:	46c0      	nop			@ (mov r8, r8)
 8006d4e:	e002      	b.n	8006d56 <ESP_WakeTest+0x1fa>
      break;
 8006d50:	46c0      	nop			@ (mov r8, r8)
 8006d52:	e000      	b.n	8006d56 <ESP_WakeTest+0x1fa>
      break;
 8006d54:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006d56:	46c0      	nop			@ (mov r8, r8)
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	b003      	add	sp, #12
 8006d5c:	bd90      	pop	{r4, r7, pc}
 8006d5e:	46c0      	nop			@ (mov r8, r8)
 8006d60:	20000690 	.word	0x20000690
 8006d64:	0802c960 	.word	0x0802c960
 8006d68:	200005b8 	.word	0x200005b8
 8006d6c:	50000800 	.word	0x50000800
 8006d70:	50001c00 	.word	0x50001c00
 8006d74:	20000684 	.word	0x20000684
 8006d78:	200004b8 	.word	0x200004b8
 8006d7c:	2000068e 	.word	0x2000068e
 8006d80:	2000068d 	.word	0x2000068d
 8006d84:	2000002e 	.word	0x2000002e
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	20000001 	.word	0x20000001

08006d90 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8006d90:	b5b0      	push	{r4, r5, r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8006d96:	1dfb      	adds	r3, r7, #7
 8006d98:	2200      	movs	r2, #0
 8006d9a:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8006d9c:	4bdf      	ldr	r3, [pc, #892]	@ (800711c <ESP_Upkeep+0x38c>)
 8006d9e:	781a      	ldrb	r2, [r3, #0]
 8006da0:	4bdf      	ldr	r3, [pc, #892]	@ (8007120 <ESP_Upkeep+0x390>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d024      	beq.n	8006df2 <ESP_Upkeep+0x62>
 8006da8:	f00b fd04 	bl	80127b4 <GetVerboseLevel>
 8006dac:	0003      	movs	r3, r0
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d11f      	bne.n	8006df2 <ESP_Upkeep+0x62>
    oldEspState = EspState;
 8006db2:	4bda      	ldr	r3, [pc, #872]	@ (800711c <ESP_Upkeep+0x38c>)
 8006db4:	781a      	ldrb	r2, [r3, #0]
 8006db6:	4bda      	ldr	r3, [pc, #872]	@ (8007120 <ESP_Upkeep+0x390>)
 8006db8:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 8006dba:	4bd9      	ldr	r3, [pc, #868]	@ (8007120 <ESP_Upkeep+0x390>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d103      	bne.n	8006dca <ESP_Upkeep+0x3a>
 8006dc2:	4bd8      	ldr	r3, [pc, #864]	@ (8007124 <ESP_Upkeep+0x394>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b0e      	cmp	r3, #14
 8006dc8:	d013      	beq.n	8006df2 <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8006dca:	4bd5      	ldr	r3, [pc, #852]	@ (8007120 <ESP_Upkeep+0x390>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	001d      	movs	r5, r3
 8006dd0:	4bd4      	ldr	r3, [pc, #848]	@ (8007124 <ESP_Upkeep+0x394>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	4bd4      	ldr	r3, [pc, #848]	@ (8007128 <ESP_Upkeep+0x398>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	001c      	movs	r4, r3
 8006ddc:	4bd3      	ldr	r3, [pc, #844]	@ (800712c <ESP_Upkeep+0x39c>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	4ad3      	ldr	r2, [pc, #844]	@ (8007130 <ESP_Upkeep+0x3a0>)
 8006de2:	49d4      	ldr	r1, [pc, #848]	@ (8007134 <ESP_Upkeep+0x3a4>)
 8006de4:	9302      	str	r3, [sp, #8]
 8006de6:	9401      	str	r4, [sp, #4]
 8006de8:	9000      	str	r0, [sp, #0]
 8006dea:	002b      	movs	r3, r5
 8006dec:	2003      	movs	r0, #3
 8006dee:	f00b fc67 	bl	80126c0 <CreateLine>
    }
  }
  switch (EspState) {
 8006df2:	4bca      	ldr	r3, [pc, #808]	@ (800711c <ESP_Upkeep+0x38c>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b0f      	cmp	r3, #15
 8006df8:	d901      	bls.n	8006dfe <ESP_Upkeep+0x6e>
 8006dfa:	f000 fc4c 	bl	8007696 <ESP_Upkeep+0x906>
 8006dfe:	009a      	lsls	r2, r3, #2
 8006e00:	4bcd      	ldr	r3, [pc, #820]	@ (8007138 <ESP_Upkeep+0x3a8>)
 8006e02:	18d3      	adds	r3, r2, r3
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8006e08:	4bc4      	ldr	r3, [pc, #784]	@ (800711c <ESP_Upkeep+0x38c>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	701a      	strb	r2, [r3, #0]
      break;
 8006e0e:	f000 fc5d 	bl	80076cc <ESP_Upkeep+0x93c>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 8006e12:	4bca      	ldr	r3, [pc, #808]	@ (800713c <ESP_Upkeep+0x3ac>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 8006e18:	f005 fbe4 	bl	800c5e4 <AllDevicesReady>
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	001a      	movs	r2, r3
 8006e20:	2301      	movs	r3, #1
 8006e22:	4053      	eors	r3, r2
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <ESP_Upkeep+0x9e>
 8006e2a:	f000 fc40 	bl	80076ae <ESP_Upkeep+0x91e>
        break;
      }
      SetESPIndicator();
 8006e2e:	f00a facd 	bl	80113cc <SetESPIndicator>
      if(!EspTurnedOn){
 8006e32:	4bc3      	ldr	r3, [pc, #780]	@ (8007140 <ESP_Upkeep+0x3b0>)
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2201      	movs	r2, #1
 8006e38:	4053      	eors	r3, r2
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d036      	beq.n	8006eae <ESP_Upkeep+0x11e>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8006e40:	2380      	movs	r3, #128	@ 0x80
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	48bf      	ldr	r0, [pc, #764]	@ (8007144 <ESP_Upkeep+0x3b4>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	0019      	movs	r1, r3
 8006e4a:	f00d fc00 	bl	801464e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8006e4e:	2001      	movs	r0, #1
 8006e50:	f00c f976 	bl	8013140 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8006e54:	2380      	movs	r3, #128	@ 0x80
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	48ba      	ldr	r0, [pc, #744]	@ (8007144 <ESP_Upkeep+0x3b4>)
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	0019      	movs	r1, r3
 8006e5e:	f00d fbf6 	bl	801464e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8006e62:	2001      	movs	r0, #1
 8006e64:	f00c f96c 	bl	8013140 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006e68:	4bb7      	ldr	r3, [pc, #732]	@ (8007148 <ESP_Upkeep+0x3b8>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	0018      	movs	r0, r3
 8006e70:	f00d fbed 	bl	801464e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8006e74:	2001      	movs	r0, #1
 8006e76:	f00c f963 	bl	8013140 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8006e7a:	4bb3      	ldr	r3, [pc, #716]	@ (8007148 <ESP_Upkeep+0x3b8>)
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	2102      	movs	r1, #2
 8006e80:	0018      	movs	r0, r3
 8006e82:	f00d fbe4 	bl	801464e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8006e86:	2001      	movs	r0, #1
 8006e88:	f00c f95a 	bl	8013140 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006e8c:	4bae      	ldr	r3, [pc, #696]	@ (8007148 <ESP_Upkeep+0x3b8>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	2101      	movs	r1, #1
 8006e92:	0018      	movs	r0, r3
 8006e94:	f00d fbdb 	bl	801464e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8006e98:	f00c f948 	bl	801312c <HAL_GetTick>
 8006e9c:	0003      	movs	r3, r0
 8006e9e:	22af      	movs	r2, #175	@ 0xaf
 8006ea0:	0092      	lsls	r2, r2, #2
 8006ea2:	189a      	adds	r2, r3, r2
 8006ea4:	4ba9      	ldr	r3, [pc, #676]	@ (800714c <ESP_Upkeep+0x3bc>)
 8006ea6:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8006ea8:	4ba5      	ldr	r3, [pc, #660]	@ (8007140 <ESP_Upkeep+0x3b0>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8006eae:	2380      	movs	r3, #128	@ 0x80
 8006eb0:	005a      	lsls	r2, r3, #1
 8006eb2:	4ba7      	ldr	r3, [pc, #668]	@ (8007150 <ESP_Upkeep+0x3c0>)
 8006eb4:	0011      	movs	r1, r2
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	f7fd fe04 	bl	8004ac4 <ESP_Receive>
 8006ebc:	1e03      	subs	r3, r0, #0
 8006ebe:	d101      	bne.n	8006ec4 <ESP_Upkeep+0x134>
 8006ec0:	f000 fbf7 	bl	80076b2 <ESP_Upkeep+0x922>
        EspState = ESP_STATE_WAIT_AWAKE;
 8006ec4:	4b95      	ldr	r3, [pc, #596]	@ (800711c <ESP_Upkeep+0x38c>)
 8006ec6:	220f      	movs	r2, #15
 8006ec8:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8006eca:	f00c f92f 	bl	801312c <HAL_GetTick>
 8006ece:	0003      	movs	r3, r0
 8006ed0:	22fa      	movs	r2, #250	@ 0xfa
 8006ed2:	00d2      	lsls	r2, r2, #3
 8006ed4:	189a      	adds	r2, r3, r2
 8006ed6:	4b9f      	ldr	r3, [pc, #636]	@ (8007154 <ESP_Upkeep+0x3c4>)
 8006ed8:	601a      	str	r2, [r3, #0]
      }
      break;
 8006eda:	f000 fbea 	bl	80076b2 <ESP_Upkeep+0x922>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8006ede:	2001      	movs	r0, #1
 8006ee0:	f7ff fb1a 	bl	8006518 <DMA_ProcessBuffer>
 8006ee4:	0003      	movs	r3, r0
 8006ee6:	001a      	movs	r2, r3
 8006ee8:	4b9b      	ldr	r3, [pc, #620]	@ (8007158 <ESP_Upkeep+0x3c8>)
 8006eea:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8006eec:	4b9a      	ldr	r3, [pc, #616]	@ (8007158 <ESP_Upkeep+0x3c8>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	1dbc      	adds	r4, r7, #6
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f7ff fc0f 	bl	8006718 <ATCompare>
 8006efa:	0003      	movs	r3, r0
 8006efc:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8006efe:	1dbb      	adds	r3, r7, #6
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d108      	bne.n	8006f18 <ESP_Upkeep+0x188>
 8006f06:	4b93      	ldr	r3, [pc, #588]	@ (8007154 <ESP_Upkeep+0x3c4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	f00b fb82 	bl	8012614 <TimestampIsReached>
 8006f10:	1e03      	subs	r3, r0, #0
 8006f12:	d101      	bne.n	8006f18 <ESP_Upkeep+0x188>
 8006f14:	f000 fbcf 	bl	80076b6 <ESP_Upkeep+0x926>
          EspState = ESP_STATE_MODE_SELECT;
 8006f18:	4b80      	ldr	r3, [pc, #512]	@ (800711c <ESP_Upkeep+0x38c>)
 8006f1a:	220b      	movs	r2, #11
 8006f1c:	701a      	strb	r2, [r3, #0]
        }
        break;
 8006f1e:	f000 fbca 	bl	80076b6 <ESP_Upkeep+0x926>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8006f22:	4b8e      	ldr	r3, [pc, #568]	@ (800715c <ESP_Upkeep+0x3cc>)
 8006f24:	2209      	movs	r2, #9
 8006f26:	2114      	movs	r1, #20
 8006f28:	0018      	movs	r0, r3
 8006f2a:	f01d fe11 	bl	8024b50 <memset>
      if(!InitIsDone || WifiReset){
 8006f2e:	4b8c      	ldr	r3, [pc, #560]	@ (8007160 <ESP_Upkeep+0x3d0>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2201      	movs	r2, #1
 8006f34:	4053      	eors	r3, r2
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d103      	bne.n	8006f44 <ESP_Upkeep+0x1b4>
 8006f3c:	4b89      	ldr	r3, [pc, #548]	@ (8007164 <ESP_Upkeep+0x3d4>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01a      	beq.n	8006f7a <ESP_Upkeep+0x1ea>
        memcpy(ATCommandArray, AT_INIT, 7);
 8006f44:	4b85      	ldr	r3, [pc, #532]	@ (800715c <ESP_Upkeep+0x3cc>)
 8006f46:	4a88      	ldr	r2, [pc, #544]	@ (8007168 <ESP_Upkeep+0x3d8>)
 8006f48:	6811      	ldr	r1, [r2, #0]
 8006f4a:	6019      	str	r1, [r3, #0]
 8006f4c:	8891      	ldrh	r1, [r2, #4]
 8006f4e:	8099      	strh	r1, [r3, #4]
 8006f50:	7992      	ldrb	r2, [r2, #6]
 8006f52:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8006f54:	4b71      	ldr	r3, [pc, #452]	@ (800711c <ESP_Upkeep+0x38c>)
 8006f56:	2204      	movs	r2, #4
 8006f58:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8006f5a:	4b84      	ldr	r3, [pc, #528]	@ (800716c <ESP_Upkeep+0x3dc>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8006f60:	4b71      	ldr	r3, [pc, #452]	@ (8007128 <ESP_Upkeep+0x398>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8006f66:	4b81      	ldr	r3, [pc, #516]	@ (800716c <ESP_Upkeep+0x3dc>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	001a      	movs	r2, r3
 8006f6c:	4b7b      	ldr	r3, [pc, #492]	@ (800715c <ESP_Upkeep+0x3cc>)
 8006f6e:	5c9a      	ldrb	r2, [r3, r2]
 8006f70:	4b6c      	ldr	r3, [pc, #432]	@ (8007124 <ESP_Upkeep+0x394>)
 8006f72:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8006f74:	4b6d      	ldr	r3, [pc, #436]	@ (800712c <ESP_Upkeep+0x39c>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8006f7a:	4b79      	ldr	r3, [pc, #484]	@ (8007160 <ESP_Upkeep+0x3d0>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d01f      	beq.n	8006fc2 <ESP_Upkeep+0x232>
 8006f82:	4b7b      	ldr	r3, [pc, #492]	@ (8007170 <ESP_Upkeep+0x3e0>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2201      	movs	r2, #1
 8006f88:	4053      	eors	r3, r2
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d018      	beq.n	8006fc2 <ESP_Upkeep+0x232>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8006f90:	4b72      	ldr	r3, [pc, #456]	@ (800715c <ESP_Upkeep+0x3cc>)
 8006f92:	4a78      	ldr	r2, [pc, #480]	@ (8007174 <ESP_Upkeep+0x3e4>)
 8006f94:	6811      	ldr	r1, [r2, #0]
 8006f96:	6019      	str	r1, [r3, #0]
 8006f98:	8892      	ldrh	r2, [r2, #4]
 8006f9a:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8006f9c:	4b5f      	ldr	r3, [pc, #380]	@ (800711c <ESP_Upkeep+0x38c>)
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8006fa2:	4b72      	ldr	r3, [pc, #456]	@ (800716c <ESP_Upkeep+0x3dc>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8006fa8:	4b5f      	ldr	r3, [pc, #380]	@ (8007128 <ESP_Upkeep+0x398>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8006fae:	4b6f      	ldr	r3, [pc, #444]	@ (800716c <ESP_Upkeep+0x3dc>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	001a      	movs	r2, r3
 8006fb4:	4b69      	ldr	r3, [pc, #420]	@ (800715c <ESP_Upkeep+0x3cc>)
 8006fb6:	5c9a      	ldrb	r2, [r3, r2]
 8006fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8007124 <ESP_Upkeep+0x394>)
 8006fba:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8006fbc:	4b5b      	ldr	r3, [pc, #364]	@ (800712c <ESP_Upkeep+0x39c>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8006fc2:	4b67      	ldr	r3, [pc, #412]	@ (8007160 <ESP_Upkeep+0x3d0>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d021      	beq.n	800700e <ESP_Upkeep+0x27e>
 8006fca:	4b69      	ldr	r3, [pc, #420]	@ (8007170 <ESP_Upkeep+0x3e0>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d01d      	beq.n	800700e <ESP_Upkeep+0x27e>
 8006fd2:	4b69      	ldr	r3, [pc, #420]	@ (8007178 <ESP_Upkeep+0x3e8>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	4053      	eors	r3, r2
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d016      	beq.n	800700e <ESP_Upkeep+0x27e>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8006fe0:	4b66      	ldr	r3, [pc, #408]	@ (800717c <ESP_Upkeep+0x3ec>)
 8006fe2:	881a      	ldrh	r2, [r3, #0]
 8006fe4:	4b5d      	ldr	r3, [pc, #372]	@ (800715c <ESP_Upkeep+0x3cc>)
 8006fe6:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8006fe8:	4b4c      	ldr	r3, [pc, #304]	@ (800711c <ESP_Upkeep+0x38c>)
 8006fea:	2204      	movs	r2, #4
 8006fec:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8006fee:	4b5f      	ldr	r3, [pc, #380]	@ (800716c <ESP_Upkeep+0x3dc>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8006ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8007128 <ESP_Upkeep+0x398>)
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8006ffa:	4b5c      	ldr	r3, [pc, #368]	@ (800716c <ESP_Upkeep+0x3dc>)
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	001a      	movs	r2, r3
 8007000:	4b56      	ldr	r3, [pc, #344]	@ (800715c <ESP_Upkeep+0x3cc>)
 8007002:	5c9a      	ldrb	r2, [r3, r2]
 8007004:	4b47      	ldr	r3, [pc, #284]	@ (8007124 <ESP_Upkeep+0x394>)
 8007006:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007008:	4b48      	ldr	r3, [pc, #288]	@ (800712c <ESP_Upkeep+0x39c>)
 800700a:	2200      	movs	r2, #0
 800700c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800700e:	4b54      	ldr	r3, [pc, #336]	@ (8007160 <ESP_Upkeep+0x3d0>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d02c      	beq.n	8007070 <ESP_Upkeep+0x2e0>
 8007016:	4b56      	ldr	r3, [pc, #344]	@ (8007170 <ESP_Upkeep+0x3e0>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d028      	beq.n	8007070 <ESP_Upkeep+0x2e0>
 800701e:	4b56      	ldr	r3, [pc, #344]	@ (8007178 <ESP_Upkeep+0x3e8>)
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d024      	beq.n	8007070 <ESP_Upkeep+0x2e0>
 8007026:	4b56      	ldr	r3, [pc, #344]	@ (8007180 <ESP_Upkeep+0x3f0>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2201      	movs	r2, #1
 800702c:	4053      	eors	r3, r2
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d01d      	beq.n	8007070 <ESP_Upkeep+0x2e0>
        memcpy(ATCommandArray, AT_SEND, 3);
 8007034:	4b49      	ldr	r3, [pc, #292]	@ (800715c <ESP_Upkeep+0x3cc>)
 8007036:	4a53      	ldr	r2, [pc, #332]	@ (8007184 <ESP_Upkeep+0x3f4>)
 8007038:	8811      	ldrh	r1, [r2, #0]
 800703a:	8019      	strh	r1, [r3, #0]
 800703c:	7892      	ldrb	r2, [r2, #2]
 800703e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8007040:	4b36      	ldr	r3, [pc, #216]	@ (800711c <ESP_Upkeep+0x38c>)
 8007042:	2204      	movs	r2, #4
 8007044:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007046:	4b49      	ldr	r3, [pc, #292]	@ (800716c <ESP_Upkeep+0x3dc>)
 8007048:	2200      	movs	r2, #0
 800704a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800704c:	4b36      	ldr	r3, [pc, #216]	@ (8007128 <ESP_Upkeep+0x398>)
 800704e:	2202      	movs	r2, #2
 8007050:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007052:	f00c f86b 	bl	801312c <HAL_GetTick>
 8007056:	0002      	movs	r2, r0
 8007058:	4b4b      	ldr	r3, [pc, #300]	@ (8007188 <ESP_Upkeep+0x3f8>)
 800705a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800705c:	4b43      	ldr	r3, [pc, #268]	@ (800716c <ESP_Upkeep+0x3dc>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	001a      	movs	r2, r3
 8007062:	4b3e      	ldr	r3, [pc, #248]	@ (800715c <ESP_Upkeep+0x3cc>)
 8007064:	5c9a      	ldrb	r2, [r3, r2]
 8007066:	4b2f      	ldr	r3, [pc, #188]	@ (8007124 <ESP_Upkeep+0x394>)
 8007068:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800706a:	4b30      	ldr	r3, [pc, #192]	@ (800712c <ESP_Upkeep+0x39c>)
 800706c:	2200      	movs	r2, #0
 800706e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8007070:	4b3b      	ldr	r3, [pc, #236]	@ (8007160 <ESP_Upkeep+0x3d0>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d027      	beq.n	80070c8 <ESP_Upkeep+0x338>
 8007078:	4b3d      	ldr	r3, [pc, #244]	@ (8007170 <ESP_Upkeep+0x3e0>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d023      	beq.n	80070c8 <ESP_Upkeep+0x338>
 8007080:	4b3d      	ldr	r3, [pc, #244]	@ (8007178 <ESP_Upkeep+0x3e8>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01f      	beq.n	80070c8 <ESP_Upkeep+0x338>
 8007088:	4b3d      	ldr	r3, [pc, #244]	@ (8007180 <ESP_Upkeep+0x3f0>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01b      	beq.n	80070c8 <ESP_Upkeep+0x338>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8007090:	4b3e      	ldr	r3, [pc, #248]	@ (800718c <ESP_Upkeep+0x3fc>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	4b31      	ldr	r3, [pc, #196]	@ (800715c <ESP_Upkeep+0x3cc>)
 8007096:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007098:	4b20      	ldr	r3, [pc, #128]	@ (800711c <ESP_Upkeep+0x38c>)
 800709a:	2204      	movs	r2, #4
 800709c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800709e:	4b33      	ldr	r3, [pc, #204]	@ (800716c <ESP_Upkeep+0x3dc>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80070a4:	4b20      	ldr	r3, [pc, #128]	@ (8007128 <ESP_Upkeep+0x398>)
 80070a6:	2205      	movs	r2, #5
 80070a8:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80070aa:	f00c f83f 	bl	801312c <HAL_GetTick>
 80070ae:	0002      	movs	r2, r0
 80070b0:	4b35      	ldr	r3, [pc, #212]	@ (8007188 <ESP_Upkeep+0x3f8>)
 80070b2:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80070b4:	4b2d      	ldr	r3, [pc, #180]	@ (800716c <ESP_Upkeep+0x3dc>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	001a      	movs	r2, r3
 80070ba:	4b28      	ldr	r3, [pc, #160]	@ (800715c <ESP_Upkeep+0x3cc>)
 80070bc:	5c9a      	ldrb	r2, [r3, r2]
 80070be:	4b19      	ldr	r3, [pc, #100]	@ (8007124 <ESP_Upkeep+0x394>)
 80070c0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80070c2:	4b1a      	ldr	r3, [pc, #104]	@ (800712c <ESP_Upkeep+0x39c>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80070c8:	4b31      	ldr	r3, [pc, #196]	@ (8007190 <ESP_Upkeep+0x400>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d100      	bne.n	80070d2 <ESP_Upkeep+0x342>
 80070d0:	e2f3      	b.n	80076ba <ESP_Upkeep+0x92a>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80070d2:	4b22      	ldr	r3, [pc, #136]	@ (800715c <ESP_Upkeep+0x3cc>)
 80070d4:	4a2f      	ldr	r2, [pc, #188]	@ (8007194 <ESP_Upkeep+0x404>)
 80070d6:	6811      	ldr	r1, [r2, #0]
 80070d8:	6019      	str	r1, [r3, #0]
 80070da:	7912      	ldrb	r2, [r2, #4]
 80070dc:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80070de:	4a2e      	ldr	r2, [pc, #184]	@ (8007198 <ESP_Upkeep+0x408>)
 80070e0:	4b14      	ldr	r3, [pc, #80]	@ (8007134 <ESP_Upkeep+0x3a4>)
 80070e2:	0019      	movs	r1, r3
 80070e4:	2003      	movs	r0, #3
 80070e6:	f00b faeb 	bl	80126c0 <CreateLine>
        DisableConnectedDevices();
 80070ea:	f005 fba1 	bl	800c830 <DisableConnectedDevices>
        usblog = false;
 80070ee:	4b2b      	ldr	r3, [pc, #172]	@ (800719c <ESP_Upkeep+0x40c>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80070f4:	4b09      	ldr	r3, [pc, #36]	@ (800711c <ESP_Upkeep+0x38c>)
 80070f6:	2204      	movs	r2, #4
 80070f8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80070fa:	4b1c      	ldr	r3, [pc, #112]	@ (800716c <ESP_Upkeep+0x3dc>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8007100:	4b09      	ldr	r3, [pc, #36]	@ (8007128 <ESP_Upkeep+0x398>)
 8007102:	2203      	movs	r2, #3
 8007104:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007106:	4b19      	ldr	r3, [pc, #100]	@ (800716c <ESP_Upkeep+0x3dc>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	001a      	movs	r2, r3
 800710c:	4b13      	ldr	r3, [pc, #76]	@ (800715c <ESP_Upkeep+0x3cc>)
 800710e:	5c9a      	ldrb	r2, [r3, r2]
 8007110:	4b04      	ldr	r3, [pc, #16]	@ (8007124 <ESP_Upkeep+0x394>)
 8007112:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007114:	4b05      	ldr	r3, [pc, #20]	@ (800712c <ESP_Upkeep+0x39c>)
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
      }
    break;
 800711a:	e2ce      	b.n	80076ba <ESP_Upkeep+0x92a>
 800711c:	2000002c 	.word	0x2000002c
 8007120:	20000003 	.word	0x20000003
 8007124:	2000068e 	.word	0x2000068e
 8007128:	2000068f 	.word	0x2000068f
 800712c:	2000068d 	.word	0x2000068d
 8007130:	08029f44 	.word	0x08029f44
 8007134:	08029030 	.word	0x08029030
 8007138:	0802c978 	.word	0x0802c978
 800713c:	20000e44 	.word	0x20000e44
 8007140:	200005b8 	.word	0x200005b8
 8007144:	50000800 	.word	0x50000800
 8007148:	50001c00 	.word	0x50001c00
 800714c:	20000684 	.word	0x20000684
 8007150:	200004b8 	.word	0x200004b8
 8007154:	200007b4 	.word	0x200007b4
 8007158:	2000002f 	.word	0x2000002f
 800715c:	20000674 	.word	0x20000674
 8007160:	200005b9 	.word	0x200005b9
 8007164:	200005ba 	.word	0x200005ba
 8007168:	20000004 	.word	0x20000004
 800716c:	2000067e 	.word	0x2000067e
 8007170:	200005bc 	.word	0x200005bc
 8007174:	20000014 	.word	0x20000014
 8007178:	200005bd 	.word	0x200005bd
 800717c:	20000010 	.word	0x20000010
 8007180:	20000002 	.word	0x20000002
 8007184:	2000000c 	.word	0x2000000c
 8007188:	200005d0 	.word	0x200005d0
 800718c:	20000024 	.word	0x20000024
 8007190:	200005bb 	.word	0x200005bb
 8007194:	2000001c 	.word	0x2000001c
 8007198:	08029f70 	.word	0x08029f70
 800719c:	20000207 	.word	0x20000207

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 80071a0:	4bd7      	ldr	r3, [pc, #860]	@ (8007500 <ESP_Upkeep+0x770>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	1dfc      	adds	r4, r7, #7
 80071a6:	0018      	movs	r0, r3
 80071a8:	f7ff faf8 	bl	800679c <AT_Send>
 80071ac:	0003      	movs	r3, r0
 80071ae:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80071b0:	1dfb      	adds	r3, r7, #7
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d100      	bne.n	80071ba <ESP_Upkeep+0x42a>
 80071b8:	e281      	b.n	80076be <ESP_Upkeep+0x92e>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 80071ba:	4bd2      	ldr	r3, [pc, #840]	@ (8007504 <ESP_Upkeep+0x774>)
 80071bc:	2203      	movs	r2, #3
 80071be:	701a      	strb	r2, [r3, #0]
        }
    break;
 80071c0:	e27d      	b.n	80076be <ESP_Upkeep+0x92e>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80071c2:	4bd1      	ldr	r3, [pc, #836]	@ (8007508 <ESP_Upkeep+0x778>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d007      	beq.n	80071da <ESP_Upkeep+0x44a>
 80071ca:	4bd0      	ldr	r3, [pc, #832]	@ (800750c <ESP_Upkeep+0x77c>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d003      	beq.n	80071da <ESP_Upkeep+0x44a>
        EspState = ESP_STATE_MODE_SELECT;
 80071d2:	4bcc      	ldr	r3, [pc, #816]	@ (8007504 <ESP_Upkeep+0x774>)
 80071d4:	220b      	movs	r2, #11
 80071d6:	701a      	strb	r2, [r3, #0]
        break;
 80071d8:	e278      	b.n	80076cc <ESP_Upkeep+0x93c>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 80071da:	4bcd      	ldr	r3, [pc, #820]	@ (8007510 <ESP_Upkeep+0x780>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	0018      	movs	r0, r3
 80071e0:	f00b fa18 	bl	8012614 <TimestampIsReached>
 80071e4:	1e03      	subs	r3, r0, #0
 80071e6:	d100      	bne.n	80071ea <ESP_Upkeep+0x45a>
 80071e8:	e26b      	b.n	80076c2 <ESP_Upkeep+0x932>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80071ea:	4bca      	ldr	r3, [pc, #808]	@ (8007514 <ESP_Upkeep+0x784>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	0018      	movs	r0, r3
 80071f0:	f7ff f992 	bl	8006518 <DMA_ProcessBuffer>
 80071f4:	0003      	movs	r3, r0
 80071f6:	001a      	movs	r2, r3
 80071f8:	4bc7      	ldr	r3, [pc, #796]	@ (8007518 <ESP_Upkeep+0x788>)
 80071fa:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80071fc:	4bc6      	ldr	r3, [pc, #792]	@ (8007518 <ESP_Upkeep+0x788>)
 80071fe:	781a      	ldrb	r2, [r3, #0]
 8007200:	4bc4      	ldr	r3, [pc, #784]	@ (8007514 <ESP_Upkeep+0x784>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	1d7c      	adds	r4, r7, #5
 8007206:	0019      	movs	r1, r3
 8007208:	0010      	movs	r0, r2
 800720a:	f7ff fa85 	bl	8006718 <ATCompare>
 800720e:	0003      	movs	r3, r0
 8007210:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007212:	4bc1      	ldr	r3, [pc, #772]	@ (8007518 <ESP_Upkeep+0x788>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d138      	bne.n	800728c <ESP_Upkeep+0x4fc>
          if(ATCommand == AT_SENDDATA){
 800721a:	4bb9      	ldr	r3, [pc, #740]	@ (8007500 <ESP_Upkeep+0x770>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b0f      	cmp	r3, #15
 8007220:	d108      	bne.n	8007234 <ESP_Upkeep+0x4a4>
            ATCommand = AT_HTTPCPOST;
 8007222:	4bb7      	ldr	r3, [pc, #732]	@ (8007500 <ESP_Upkeep+0x770>)
 8007224:	220e      	movs	r2, #14
 8007226:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007228:	4bba      	ldr	r3, [pc, #744]	@ (8007514 <ESP_Upkeep+0x784>)
 800722a:	2202      	movs	r2, #2
 800722c:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 800722e:	4bbb      	ldr	r3, [pc, #748]	@ (800751c <ESP_Upkeep+0x78c>)
 8007230:	2201      	movs	r2, #1
 8007232:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007234:	4bb3      	ldr	r3, [pc, #716]	@ (8007504 <ESP_Upkeep+0x774>)
 8007236:	2204      	movs	r2, #4
 8007238:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 800723a:	4bb9      	ldr	r3, [pc, #740]	@ (8007520 <ESP_Upkeep+0x790>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	3301      	adds	r3, #1
 8007240:	b2da      	uxtb	r2, r3
 8007242:	4bb7      	ldr	r3, [pc, #732]	@ (8007520 <ESP_Upkeep+0x790>)
 8007244:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8007246:	4bb6      	ldr	r3, [pc, #728]	@ (8007520 <ESP_Upkeep+0x790>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d91e      	bls.n	800728c <ESP_Upkeep+0x4fc>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 800724e:	f00b ff6d 	bl	801312c <HAL_GetTick>
 8007252:	0003      	movs	r3, r0
 8007254:	4ab3      	ldr	r2, [pc, #716]	@ (8007524 <ESP_Upkeep+0x794>)
 8007256:	189a      	adds	r2, r3, r2
 8007258:	4bad      	ldr	r3, [pc, #692]	@ (8007510 <ESP_Upkeep+0x780>)
 800725a:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800725c:	4bb2      	ldr	r3, [pc, #712]	@ (8007528 <ESP_Upkeep+0x798>)
 800725e:	2201      	movs	r2, #1
 8007260:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007262:	f7ff fa4b 	bl	80066fc <clearDMABuffer>
            stop = HAL_GetTick();
 8007266:	f00b ff61 	bl	801312c <HAL_GetTick>
 800726a:	0002      	movs	r2, r0
 800726c:	4baf      	ldr	r3, [pc, #700]	@ (800752c <ESP_Upkeep+0x79c>)
 800726e:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8007270:	4bae      	ldr	r3, [pc, #696]	@ (800752c <ESP_Upkeep+0x79c>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	4bae      	ldr	r3, [pc, #696]	@ (8007530 <ESP_Upkeep+0x7a0>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	4aae      	ldr	r2, [pc, #696]	@ (8007534 <ESP_Upkeep+0x7a4>)
 800727c:	49ae      	ldr	r1, [pc, #696]	@ (8007538 <ESP_Upkeep+0x7a8>)
 800727e:	2001      	movs	r0, #1
 8007280:	f00b fa1e 	bl	80126c0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007284:	4b9f      	ldr	r3, [pc, #636]	@ (8007504 <ESP_Upkeep+0x774>)
 8007286:	220d      	movs	r2, #13
 8007288:	701a      	strb	r2, [r3, #0]
            break;
 800728a:	e21f      	b.n	80076cc <ESP_Upkeep+0x93c>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800728c:	4ba2      	ldr	r3, [pc, #648]	@ (8007518 <ESP_Upkeep+0x788>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b03      	cmp	r3, #3
 8007292:	d106      	bne.n	80072a2 <ESP_Upkeep+0x512>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007294:	f00b ff4a 	bl	801312c <HAL_GetTick>
 8007298:	0003      	movs	r3, r0
 800729a:	330a      	adds	r3, #10
 800729c:	001a      	movs	r2, r3
 800729e:	4b9c      	ldr	r3, [pc, #624]	@ (8007510 <ESP_Upkeep+0x780>)
 80072a0:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80072a2:	4b9d      	ldr	r3, [pc, #628]	@ (8007518 <ESP_Upkeep+0x788>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b0a      	cmp	r3, #10
 80072a8:	d106      	bne.n	80072b8 <ESP_Upkeep+0x528>
          ESPTimeStamp = HAL_GetTick() + 10;
 80072aa:	f00b ff3f 	bl	801312c <HAL_GetTick>
 80072ae:	0003      	movs	r3, r0
 80072b0:	330a      	adds	r3, #10
 80072b2:	001a      	movs	r2, r3
 80072b4:	4b96      	ldr	r3, [pc, #600]	@ (8007510 <ESP_Upkeep+0x780>)
 80072b6:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80072b8:	4b97      	ldr	r3, [pc, #604]	@ (8007518 <ESP_Upkeep+0x788>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b06      	cmp	r3, #6
 80072be:	d14b      	bne.n	8007358 <ESP_Upkeep+0x5c8>
          timeoutcntr++;
 80072c0:	4b9e      	ldr	r3, [pc, #632]	@ (800753c <ESP_Upkeep+0x7ac>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	3301      	adds	r3, #1
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	4b9c      	ldr	r3, [pc, #624]	@ (800753c <ESP_Upkeep+0x7ac>)
 80072ca:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 80072cc:	4a9c      	ldr	r2, [pc, #624]	@ (8007540 <ESP_Upkeep+0x7b0>)
 80072ce:	4b9a      	ldr	r3, [pc, #616]	@ (8007538 <ESP_Upkeep+0x7a8>)
 80072d0:	0019      	movs	r1, r3
 80072d2:	2001      	movs	r0, #1
 80072d4:	f00b f9f4 	bl	80126c0 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 80072d8:	4b98      	ldr	r3, [pc, #608]	@ (800753c <ESP_Upkeep+0x7ac>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d924      	bls.n	800732a <ESP_Upkeep+0x59a>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 80072e0:	f00b ff24 	bl	801312c <HAL_GetTick>
 80072e4:	0003      	movs	r3, r0
 80072e6:	4a97      	ldr	r2, [pc, #604]	@ (8007544 <ESP_Upkeep+0x7b4>)
 80072e8:	189a      	adds	r2, r3, r2
 80072ea:	4b89      	ldr	r3, [pc, #548]	@ (8007510 <ESP_Upkeep+0x780>)
 80072ec:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80072ee:	4b8e      	ldr	r3, [pc, #568]	@ (8007528 <ESP_Upkeep+0x798>)
 80072f0:	2201      	movs	r2, #1
 80072f2:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80072f4:	f7ff fa02 	bl	80066fc <clearDMABuffer>
            stop = HAL_GetTick();
 80072f8:	f00b ff18 	bl	801312c <HAL_GetTick>
 80072fc:	0002      	movs	r2, r0
 80072fe:	4b8b      	ldr	r3, [pc, #556]	@ (800752c <ESP_Upkeep+0x79c>)
 8007300:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8007302:	4b8a      	ldr	r3, [pc, #552]	@ (800752c <ESP_Upkeep+0x79c>)
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b8a      	ldr	r3, [pc, #552]	@ (8007530 <ESP_Upkeep+0x7a0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	4a8e      	ldr	r2, [pc, #568]	@ (8007548 <ESP_Upkeep+0x7b8>)
 800730e:	498a      	ldr	r1, [pc, #552]	@ (8007538 <ESP_Upkeep+0x7a8>)
 8007310:	2001      	movs	r0, #1
 8007312:	f00b f9d5 	bl	80126c0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007316:	4b7b      	ldr	r3, [pc, #492]	@ (8007504 <ESP_Upkeep+0x774>)
 8007318:	220d      	movs	r2, #13
 800731a:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 800731c:	4b78      	ldr	r3, [pc, #480]	@ (8007500 <ESP_Upkeep+0x770>)
 800731e:	2214      	movs	r2, #20
 8007320:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007322:	4b7c      	ldr	r3, [pc, #496]	@ (8007514 <ESP_Upkeep+0x784>)
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
            break;
 8007328:	e1d0      	b.n	80076cc <ESP_Upkeep+0x93c>
          }
          if(ATCommand != AT_SENDDATA){
 800732a:	4b75      	ldr	r3, [pc, #468]	@ (8007500 <ESP_Upkeep+0x770>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b0f      	cmp	r3, #15
 8007330:	d003      	beq.n	800733a <ESP_Upkeep+0x5aa>
            EspState = ESP_STATE_SEND;
 8007332:	4b74      	ldr	r3, [pc, #464]	@ (8007504 <ESP_Upkeep+0x774>)
 8007334:	2204      	movs	r2, #4
 8007336:	701a      	strb	r2, [r3, #0]
 8007338:	e00e      	b.n	8007358 <ESP_Upkeep+0x5c8>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 800733a:	4b71      	ldr	r3, [pc, #452]	@ (8007500 <ESP_Upkeep+0x770>)
 800733c:	220e      	movs	r2, #14
 800733e:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8007340:	4b76      	ldr	r3, [pc, #472]	@ (800751c <ESP_Upkeep+0x78c>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	3b01      	subs	r3, #1
 8007346:	b2da      	uxtb	r2, r3
 8007348:	4b74      	ldr	r3, [pc, #464]	@ (800751c <ESP_Upkeep+0x78c>)
 800734a:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800734c:	4b71      	ldr	r3, [pc, #452]	@ (8007514 <ESP_Upkeep+0x784>)
 800734e:	2202      	movs	r2, #2
 8007350:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8007352:	4b6c      	ldr	r3, [pc, #432]	@ (8007504 <ESP_Upkeep+0x774>)
 8007354:	2204      	movs	r2, #4
 8007356:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8007358:	1d7b      	adds	r3, r7, #5
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d100      	bne.n	8007362 <ESP_Upkeep+0x5d2>
 8007360:	e1af      	b.n	80076c2 <ESP_Upkeep+0x932>
          EspState = ESP_STATE_NEXT_AT;
 8007362:	4b68      	ldr	r3, [pc, #416]	@ (8007504 <ESP_Upkeep+0x774>)
 8007364:	2205      	movs	r2, #5
 8007366:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007368:	e1ab      	b.n	80076c2 <ESP_Upkeep+0x932>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 800736a:	4b6c      	ldr	r3, [pc, #432]	@ (800751c <ESP_Upkeep+0x78c>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	3301      	adds	r3, #1
 8007370:	b2da      	uxtb	r2, r3
 8007372:	4b6a      	ldr	r3, [pc, #424]	@ (800751c <ESP_Upkeep+0x78c>)
 8007374:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8007376:	4b69      	ldr	r3, [pc, #420]	@ (800751c <ESP_Upkeep+0x78c>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	001a      	movs	r2, r3
 800737c:	4b73      	ldr	r3, [pc, #460]	@ (800754c <ESP_Upkeep+0x7bc>)
 800737e:	5c9a      	ldrb	r2, [r3, r2]
 8007380:	4b5f      	ldr	r3, [pc, #380]	@ (8007500 <ESP_Upkeep+0x770>)
 8007382:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007384:	4b5e      	ldr	r3, [pc, #376]	@ (8007500 <ESP_Upkeep+0x770>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b03      	cmp	r3, #3
 800738a:	d102      	bne.n	8007392 <ESP_Upkeep+0x602>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 800738c:	4b61      	ldr	r3, [pc, #388]	@ (8007514 <ESP_Upkeep+0x784>)
 800738e:	2201      	movs	r2, #1
 8007390:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007392:	4b5b      	ldr	r3, [pc, #364]	@ (8007500 <ESP_Upkeep+0x770>)
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b0e      	cmp	r3, #14
 8007398:	d102      	bne.n	80073a0 <ESP_Upkeep+0x610>
        ATExpectation = RECEIVE_EXPECTATION_START;
 800739a:	4b5e      	ldr	r3, [pc, #376]	@ (8007514 <ESP_Upkeep+0x784>)
 800739c:	2202      	movs	r2, #2
 800739e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 80073a0:	4b57      	ldr	r3, [pc, #348]	@ (8007500 <ESP_Upkeep+0x770>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b0e      	cmp	r3, #14
 80073a6:	d006      	beq.n	80073b6 <ESP_Upkeep+0x626>
 80073a8:	4b55      	ldr	r3, [pc, #340]	@ (8007500 <ESP_Upkeep+0x770>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d002      	beq.n	80073b6 <ESP_Upkeep+0x626>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80073b0:	4b58      	ldr	r3, [pc, #352]	@ (8007514 <ESP_Upkeep+0x784>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80073b6:	4b52      	ldr	r3, [pc, #328]	@ (8007500 <ESP_Upkeep+0x770>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b11      	cmp	r3, #17
 80073bc:	d102      	bne.n	80073c4 <ESP_Upkeep+0x634>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 80073be:	4b55      	ldr	r3, [pc, #340]	@ (8007514 <ESP_Upkeep+0x784>)
 80073c0:	2205      	movs	r2, #5
 80073c2:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 80073c4:	4b4f      	ldr	r3, [pc, #316]	@ (8007504 <ESP_Upkeep+0x774>)
 80073c6:	2204      	movs	r2, #4
 80073c8:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 80073ca:	4b4d      	ldr	r3, [pc, #308]	@ (8007500 <ESP_Upkeep+0x770>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b14      	cmp	r3, #20
 80073d0:	d000      	beq.n	80073d4 <ESP_Upkeep+0x644>
 80073d2:	e178      	b.n	80076c6 <ESP_Upkeep+0x936>
        if(Mode == AT_MODE_SEND){
 80073d4:	4b4d      	ldr	r3, [pc, #308]	@ (800750c <ESP_Upkeep+0x77c>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d124      	bne.n	8007426 <ESP_Upkeep+0x696>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80073dc:	f00b fea6 	bl	801312c <HAL_GetTick>
 80073e0:	0003      	movs	r3, r0
 80073e2:	4a50      	ldr	r2, [pc, #320]	@ (8007524 <ESP_Upkeep+0x794>)
 80073e4:	189a      	adds	r2, r3, r2
 80073e6:	4b4a      	ldr	r3, [pc, #296]	@ (8007510 <ESP_Upkeep+0x780>)
 80073e8:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 80073ea:	f7ff f987 	bl	80066fc <clearDMABuffer>
          stop = HAL_GetTick();
 80073ee:	f00b fe9d 	bl	801312c <HAL_GetTick>
 80073f2:	0002      	movs	r2, r0
 80073f4:	4b4d      	ldr	r3, [pc, #308]	@ (800752c <ESP_Upkeep+0x79c>)
 80073f6:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 80073f8:	4b4c      	ldr	r3, [pc, #304]	@ (800752c <ESP_Upkeep+0x79c>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	4b4c      	ldr	r3, [pc, #304]	@ (8007530 <ESP_Upkeep+0x7a0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	4a53      	ldr	r2, [pc, #332]	@ (8007550 <ESP_Upkeep+0x7c0>)
 8007404:	4953      	ldr	r1, [pc, #332]	@ (8007554 <ESP_Upkeep+0x7c4>)
 8007406:	2002      	movs	r0, #2
 8007408:	f00b f95a 	bl	80126c0 <CreateLine>
          ResetdBAmax();
 800740c:	f005 fa98 	bl	800c940 <ResetdBAmax>
          resetMaxMeasurementValues();
 8007410:	f7fd fa98 	bl	8004944 <resetMaxMeasurementValues>
          showTime();
 8007414:	f001 fb78 	bl	8008b08 <showTime>
          ESPTransmitDone = true;
 8007418:	4b43      	ldr	r3, [pc, #268]	@ (8007528 <ESP_Upkeep+0x798>)
 800741a:	2201      	movs	r2, #1
 800741c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 800741e:	4b39      	ldr	r3, [pc, #228]	@ (8007504 <ESP_Upkeep+0x774>)
 8007420:	220d      	movs	r2, #13
 8007422:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007424:	e14f      	b.n	80076c6 <ESP_Upkeep+0x936>
        else if (Mode == AT_MODE_GETTIME) {
 8007426:	4b39      	ldr	r3, [pc, #228]	@ (800750c <ESP_Upkeep+0x77c>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b05      	cmp	r3, #5
 800742c:	d12f      	bne.n	800748e <ESP_Upkeep+0x6fe>
            setTime = false;
 800742e:	4b4a      	ldr	r3, [pc, #296]	@ (8007558 <ESP_Upkeep+0x7c8>)
 8007430:	2200      	movs	r2, #0
 8007432:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007434:	f001 fbba 	bl	8008bac <calculateNextNTPTime>
 8007438:	0002      	movs	r2, r0
 800743a:	4b48      	ldr	r3, [pc, #288]	@ (800755c <ESP_Upkeep+0x7cc>)
 800743c:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 800743e:	4b47      	ldr	r3, [pc, #284]	@ (800755c <ESP_Upkeep+0x7cc>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a47      	ldr	r2, [pc, #284]	@ (8007560 <ESP_Upkeep+0x7d0>)
 8007444:	189a      	adds	r2, r3, r2
 8007446:	4b45      	ldr	r3, [pc, #276]	@ (800755c <ESP_Upkeep+0x7cc>)
 8007448:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 800744a:	4b45      	ldr	r3, [pc, #276]	@ (8007560 <ESP_Upkeep+0x7d0>)
 800744c:	4a45      	ldr	r2, [pc, #276]	@ (8007564 <ESP_Upkeep+0x7d4>)
 800744e:	4941      	ldr	r1, [pc, #260]	@ (8007554 <ESP_Upkeep+0x7c4>)
 8007450:	2002      	movs	r0, #2
 8007452:	f00b f935 	bl	80126c0 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007456:	4b44      	ldr	r3, [pc, #272]	@ (8007568 <ESP_Upkeep+0x7d8>)
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	4b2d      	ldr	r3, [pc, #180]	@ (8007510 <ESP_Upkeep+0x780>)
 800745c:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 800745e:	f7ff f94d 	bl	80066fc <clearDMABuffer>
            stop = HAL_GetTick();
 8007462:	f00b fe63 	bl	801312c <HAL_GetTick>
 8007466:	0002      	movs	r2, r0
 8007468:	4b30      	ldr	r3, [pc, #192]	@ (800752c <ESP_Upkeep+0x79c>)
 800746a:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 800746c:	4b2f      	ldr	r3, [pc, #188]	@ (800752c <ESP_Upkeep+0x79c>)
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	4b2f      	ldr	r3, [pc, #188]	@ (8007530 <ESP_Upkeep+0x7a0>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	4a3d      	ldr	r2, [pc, #244]	@ (800756c <ESP_Upkeep+0x7dc>)
 8007478:	4936      	ldr	r1, [pc, #216]	@ (8007554 <ESP_Upkeep+0x7c4>)
 800747a:	2002      	movs	r0, #2
 800747c:	f00b f920 	bl	80126c0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007480:	4b20      	ldr	r3, [pc, #128]	@ (8007504 <ESP_Upkeep+0x774>)
 8007482:	220d      	movs	r2, #13
 8007484:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007486:	4b21      	ldr	r3, [pc, #132]	@ (800750c <ESP_Upkeep+0x77c>)
 8007488:	2202      	movs	r2, #2
 800748a:	701a      	strb	r2, [r3, #0]
    break;
 800748c:	e11b      	b.n	80076c6 <ESP_Upkeep+0x936>
          EspState = ESP_STATE_RESET;
 800748e:	4b1d      	ldr	r3, [pc, #116]	@ (8007504 <ESP_Upkeep+0x774>)
 8007490:	2209      	movs	r2, #9
 8007492:	701a      	strb	r2, [r3, #0]
    break;
 8007494:	e117      	b.n	80076c6 <ESP_Upkeep+0x936>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007496:	4b36      	ldr	r3, [pc, #216]	@ (8007570 <ESP_Upkeep+0x7e0>)
 8007498:	2200      	movs	r2, #0
 800749a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800749c:	4b35      	ldr	r3, [pc, #212]	@ (8007574 <ESP_Upkeep+0x7e4>)
 800749e:	2200      	movs	r2, #0
 80074a0:	2101      	movs	r1, #1
 80074a2:	0018      	movs	r0, r3
 80074a4:	f00d f8d3 	bl	801464e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80074a8:	2001      	movs	r0, #1
 80074aa:	f00b fe49 	bl	8013140 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80074ae:	2380      	movs	r3, #128	@ 0x80
 80074b0:	011b      	lsls	r3, r3, #4
 80074b2:	4831      	ldr	r0, [pc, #196]	@ (8007578 <ESP_Upkeep+0x7e8>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	0019      	movs	r1, r3
 80074b8:	f00d f8c9 	bl	801464e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80074bc:	2001      	movs	r0, #1
 80074be:	f00b fe3f 	bl	8013140 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80074c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007574 <ESP_Upkeep+0x7e4>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	2102      	movs	r1, #2
 80074c8:	0018      	movs	r0, r3
 80074ca:	f00d f8c0 	bl	801464e <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 80074ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007504 <ESP_Upkeep+0x774>)
 80074d0:	2209      	movs	r2, #9
 80074d2:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80074d4:	2001      	movs	r0, #1
 80074d6:	f00b fe33 	bl	8013140 <HAL_Delay>
      ResetESPIndicator();
 80074da:	f009 ff8f 	bl	80113fc <ResetESPIndicator>
      if (Check_USB_PowerOn() || userToggle) {
 80074de:	f001 fae3 	bl	8008aa8 <Check_USB_PowerOn>
 80074e2:	1e03      	subs	r3, r0, #0
 80074e4:	d103      	bne.n	80074ee <ESP_Upkeep+0x75e>
 80074e6:	4b25      	ldr	r3, [pc, #148]	@ (800757c <ESP_Upkeep+0x7ec>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <ESP_Upkeep+0x762>
        EnabledConnectedDevices();
 80074ee:	f005 f947 	bl	800c780 <EnabledConnectedDevices>
      }
      errorcntr = 0;
 80074f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007520 <ESP_Upkeep+0x790>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 80074f8:	4b10      	ldr	r3, [pc, #64]	@ (800753c <ESP_Upkeep+0x7ac>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	701a      	strb	r2, [r3, #0]
      break;
 80074fe:	e0e5      	b.n	80076cc <ESP_Upkeep+0x93c>
 8007500:	2000068e 	.word	0x2000068e
 8007504:	2000002c 	.word	0x2000002c
 8007508:	200005bb 	.word	0x200005bb
 800750c:	2000068f 	.word	0x2000068f
 8007510:	20000684 	.word	0x20000684
 8007514:	2000068d 	.word	0x2000068d
 8007518:	2000002f 	.word	0x2000002f
 800751c:	2000067e 	.word	0x2000067e
 8007520:	2000067f 	.word	0x2000067f
 8007524:	0003a980 	.word	0x0003a980
 8007528:	200005c0 	.word	0x200005c0
 800752c:	200005d4 	.word	0x200005d4
 8007530:	200005d0 	.word	0x200005d0
 8007534:	08029fa0 	.word	0x08029fa0
 8007538:	08029054 	.word	0x08029054
 800753c:	20000680 	.word	0x20000680
 8007540:	08029fd4 	.word	0x08029fd4
 8007544:	0000c350 	.word	0x0000c350
 8007548:	0802a010 	.word	0x0802a010
 800754c:	20000674 	.word	0x20000674
 8007550:	0802a040 	.word	0x0802a040
 8007554:	0802a058 	.word	0x0802a058
 8007558:	20000002 	.word	0x20000002
 800755c:	20000688 	.word	0x20000688
 8007560:	00012686 	.word	0x00012686
 8007564:	0802a05c 	.word	0x0802a05c
 8007568:	20000028 	.word	0x20000028
 800756c:	0802a0a0 	.word	0x0802a0a0
 8007570:	200005b8 	.word	0x200005b8
 8007574:	50001c00 	.word	0x50001c00
 8007578:	50000800 	.word	0x50000800
 800757c:	20001e7e 	.word	0x20001e7e

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007580:	4b55      	ldr	r3, [pc, #340]	@ (80076d8 <ESP_Upkeep+0x948>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	0018      	movs	r0, r3
 8007586:	f00b f845 	bl	8012614 <TimestampIsReached>
 800758a:	1e03      	subs	r3, r0, #0
 800758c:	d103      	bne.n	8007596 <ESP_Upkeep+0x806>
 800758e:	4b53      	ldr	r3, [pc, #332]	@ (80076dc <ESP_Upkeep+0x94c>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d043      	beq.n	800761e <ESP_Upkeep+0x88e>
        ESPTransmitDone = false;
 8007596:	4b52      	ldr	r3, [pc, #328]	@ (80076e0 <ESP_Upkeep+0x950>)
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 800759c:	4b51      	ldr	r3, [pc, #324]	@ (80076e4 <ESP_Upkeep+0x954>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d105      	bne.n	80075b0 <ESP_Upkeep+0x820>
          InitIsDone = true;
 80075a4:	4b50      	ldr	r3, [pc, #320]	@ (80076e8 <ESP_Upkeep+0x958>)
 80075a6:	2201      	movs	r2, #1
 80075a8:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80075aa:	4b50      	ldr	r3, [pc, #320]	@ (80076ec <ESP_Upkeep+0x95c>)
 80075ac:	220b      	movs	r2, #11
 80075ae:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 80075b0:	4b4c      	ldr	r3, [pc, #304]	@ (80076e4 <ESP_Upkeep+0x954>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d108      	bne.n	80075ca <ESP_Upkeep+0x83a>
          ConnectionMade = true;
 80075b8:	4b4d      	ldr	r3, [pc, #308]	@ (80076f0 <ESP_Upkeep+0x960>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	701a      	strb	r2, [r3, #0]
          beurs = true;
 80075be:	4b4d      	ldr	r3, [pc, #308]	@ (80076f4 <ESP_Upkeep+0x964>)
 80075c0:	2201      	movs	r2, #1
 80075c2:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80075c4:	4b49      	ldr	r3, [pc, #292]	@ (80076ec <ESP_Upkeep+0x95c>)
 80075c6:	220b      	movs	r2, #11
 80075c8:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 80075ca:	4b46      	ldr	r3, [pc, #280]	@ (80076e4 <ESP_Upkeep+0x954>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d102      	bne.n	80075d8 <ESP_Upkeep+0x848>
          EspState = ESP_STATE_INIT;
 80075d2:	4b46      	ldr	r3, [pc, #280]	@ (80076ec <ESP_Upkeep+0x95c>)
 80075d4:	2202      	movs	r2, #2
 80075d6:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 80075d8:	4b42      	ldr	r3, [pc, #264]	@ (80076e4 <ESP_Upkeep+0x954>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d108      	bne.n	80075f2 <ESP_Upkeep+0x862>
          EspState = ESP_STATE_CONFIG;
 80075e0:	4b42      	ldr	r3, [pc, #264]	@ (80076ec <ESP_Upkeep+0x95c>)
 80075e2:	220e      	movs	r2, #14
 80075e4:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 80075e6:	4a44      	ldr	r2, [pc, #272]	@ (80076f8 <ESP_Upkeep+0x968>)
 80075e8:	4b44      	ldr	r3, [pc, #272]	@ (80076fc <ESP_Upkeep+0x96c>)
 80075ea:	0019      	movs	r1, r3
 80075ec:	2002      	movs	r0, #2
 80075ee:	f00b f867 	bl	80126c0 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 80075f2:	4b3c      	ldr	r3, [pc, #240]	@ (80076e4 <ESP_Upkeep+0x954>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d105      	bne.n	8007606 <ESP_Upkeep+0x876>
          EspState = ESP_STATE_MODE_SELECT;
 80075fa:	4b3c      	ldr	r3, [pc, #240]	@ (80076ec <ESP_Upkeep+0x95c>)
 80075fc:	220b      	movs	r2, #11
 80075fe:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8007600:	4b3f      	ldr	r3, [pc, #252]	@ (8007700 <ESP_Upkeep+0x970>)
 8007602:	2201      	movs	r2, #1
 8007604:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007606:	4b35      	ldr	r3, [pc, #212]	@ (80076dc <ESP_Upkeep+0x94c>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d020      	beq.n	8007650 <ESP_Upkeep+0x8c0>
 800760e:	4b35      	ldr	r3, [pc, #212]	@ (80076e4 <ESP_Upkeep+0x954>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2b03      	cmp	r3, #3
 8007614:	d01c      	beq.n	8007650 <ESP_Upkeep+0x8c0>
          EspState = ESP_STATE_INIT;
 8007616:	4b35      	ldr	r3, [pc, #212]	@ (80076ec <ESP_Upkeep+0x95c>)
 8007618:	2202      	movs	r2, #2
 800761a:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 800761c:	e018      	b.n	8007650 <ESP_Upkeep+0x8c0>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 800761e:	f001 fac5 	bl	8008bac <calculateNextNTPTime>
 8007622:	0002      	movs	r2, r0
 8007624:	4b37      	ldr	r3, [pc, #220]	@ (8007704 <ESP_Upkeep+0x974>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	429a      	cmp	r2, r3
 800762a:	d94e      	bls.n	80076ca <ESP_Upkeep+0x93a>
        if(Mode == AT_MODE_SEND ) {
 800762c:	4b2d      	ldr	r3, [pc, #180]	@ (80076e4 <ESP_Upkeep+0x954>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d14a      	bne.n	80076ca <ESP_Upkeep+0x93a>
           Mode = AT_MODE_GETTIME;
 8007634:	4b2b      	ldr	r3, [pc, #172]	@ (80076e4 <ESP_Upkeep+0x954>)
 8007636:	2205      	movs	r2, #5
 8007638:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 800763a:	4b2c      	ldr	r3, [pc, #176]	@ (80076ec <ESP_Upkeep+0x95c>)
 800763c:	2202      	movs	r2, #2
 800763e:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8007640:	4b25      	ldr	r3, [pc, #148]	@ (80076d8 <ESP_Upkeep+0x948>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	4b30      	ldr	r3, [pc, #192]	@ (8007708 <ESP_Upkeep+0x978>)
 8007646:	601a      	str	r2, [r3, #0]
           setTime = true;
 8007648:	4b30      	ldr	r3, [pc, #192]	@ (800770c <ESP_Upkeep+0x97c>)
 800764a:	2201      	movs	r2, #1
 800764c:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800764e:	e03c      	b.n	80076ca <ESP_Upkeep+0x93a>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007650:	46c0      	nop			@ (mov r8, r8)
      break;
 8007652:	e03a      	b.n	80076ca <ESP_Upkeep+0x93a>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8007654:	4b2e      	ldr	r3, [pc, #184]	@ (8007710 <ESP_Upkeep+0x980>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2201      	movs	r2, #1
 800765a:	4053      	eors	r3, r2
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d008      	beq.n	8007674 <ESP_Upkeep+0x8e4>
        Info("Do nothing until reset");
 8007662:	4a25      	ldr	r2, [pc, #148]	@ (80076f8 <ESP_Upkeep+0x968>)
 8007664:	4b25      	ldr	r3, [pc, #148]	@ (80076fc <ESP_Upkeep+0x96c>)
 8007666:	0019      	movs	r1, r3
 8007668:	2002      	movs	r0, #2
 800766a:	f00b f829 	bl	80126c0 <CreateLine>
        msgdone = true;
 800766e:	4b28      	ldr	r3, [pc, #160]	@ (8007710 <ESP_Upkeep+0x980>)
 8007670:	2201      	movs	r2, #1
 8007672:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8007674:	f01a f832 	bl	80216dc <GetUsbRxPointer>
 8007678:	0003      	movs	r3, r0
 800767a:	0018      	movs	r0, r3
 800767c:	f000 f980 	bl	8007980 <Process_PC_Config>
      break;
 8007680:	e024      	b.n	80076cc <ESP_Upkeep+0x93c>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8007682:	4a24      	ldr	r2, [pc, #144]	@ (8007714 <ESP_Upkeep+0x984>)
 8007684:	4b24      	ldr	r3, [pc, #144]	@ (8007718 <ESP_Upkeep+0x988>)
 8007686:	0019      	movs	r1, r3
 8007688:	2001      	movs	r0, #1
 800768a:	f00b f819 	bl	80126c0 <CreateLine>
      EspState = ESP_STATE_INIT;
 800768e:	4b17      	ldr	r3, [pc, #92]	@ (80076ec <ESP_Upkeep+0x95c>)
 8007690:	2202      	movs	r2, #2
 8007692:	701a      	strb	r2, [r3, #0]
      break;
 8007694:	e01a      	b.n	80076cc <ESP_Upkeep+0x93c>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8007696:	4a21      	ldr	r2, [pc, #132]	@ (800771c <ESP_Upkeep+0x98c>)
 8007698:	4b1f      	ldr	r3, [pc, #124]	@ (8007718 <ESP_Upkeep+0x988>)
 800769a:	0019      	movs	r1, r3
 800769c:	2001      	movs	r0, #1
 800769e:	f00b f80f 	bl	80126c0 <CreateLine>
      EspState = ESP_STATE_ERROR;
 80076a2:	4b12      	ldr	r3, [pc, #72]	@ (80076ec <ESP_Upkeep+0x95c>)
 80076a4:	2207      	movs	r2, #7
 80076a6:	701a      	strb	r2, [r3, #0]
      break;
 80076a8:	e010      	b.n	80076cc <ESP_Upkeep+0x93c>
      break;
 80076aa:	46c0      	nop			@ (mov r8, r8)
 80076ac:	e00e      	b.n	80076cc <ESP_Upkeep+0x93c>
        break;
 80076ae:	46c0      	nop			@ (mov r8, r8)
 80076b0:	e00c      	b.n	80076cc <ESP_Upkeep+0x93c>
      break;
 80076b2:	46c0      	nop			@ (mov r8, r8)
 80076b4:	e00a      	b.n	80076cc <ESP_Upkeep+0x93c>
        break;
 80076b6:	46c0      	nop			@ (mov r8, r8)
 80076b8:	e008      	b.n	80076cc <ESP_Upkeep+0x93c>
    break;
 80076ba:	46c0      	nop			@ (mov r8, r8)
 80076bc:	e006      	b.n	80076cc <ESP_Upkeep+0x93c>
    break;
 80076be:	46c0      	nop			@ (mov r8, r8)
 80076c0:	e004      	b.n	80076cc <ESP_Upkeep+0x93c>
      break;
 80076c2:	46c0      	nop			@ (mov r8, r8)
 80076c4:	e002      	b.n	80076cc <ESP_Upkeep+0x93c>
    break;
 80076c6:	46c0      	nop			@ (mov r8, r8)
 80076c8:	e000      	b.n	80076cc <ESP_Upkeep+0x93c>
      break;
 80076ca:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 80076cc:	4b07      	ldr	r3, [pc, #28]	@ (80076ec <ESP_Upkeep+0x95c>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
}
 80076d0:	0018      	movs	r0, r3
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b002      	add	sp, #8
 80076d6:	bdb0      	pop	{r4, r5, r7, pc}
 80076d8:	20000684 	.word	0x20000684
 80076dc:	200005bb 	.word	0x200005bb
 80076e0:	200005c0 	.word	0x200005c0
 80076e4:	2000068f 	.word	0x2000068f
 80076e8:	200005b9 	.word	0x200005b9
 80076ec:	2000002c 	.word	0x2000002c
 80076f0:	200005bc 	.word	0x200005bc
 80076f4:	200005be 	.word	0x200005be
 80076f8:	0802a0c0 	.word	0x0802a0c0
 80076fc:	0802a058 	.word	0x0802a058
 8007700:	200005bd 	.word	0x200005bd
 8007704:	20000688 	.word	0x20000688
 8007708:	20000028 	.word	0x20000028
 800770c:	20000002 	.word	0x20000002
 8007710:	200005bf 	.word	0x200005bf
 8007714:	0802a0d8 	.word	0x0802a0d8
 8007718:	08029054 	.word	0x08029054
 800771c:	0802a0ec 	.word	0x0802a0ec

08007720 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8007728:	4b12      	ldr	r3, [pc, #72]	@ (8007774 <I2CSensors_Init+0x54>)
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 800772e:	4a12      	ldr	r2, [pc, #72]	@ (8007778 <I2CSensors_Init+0x58>)
 8007730:	4b12      	ldr	r3, [pc, #72]	@ (800777c <I2CSensors_Init+0x5c>)
 8007732:	0011      	movs	r1, r2
 8007734:	0018      	movs	r0, r3
 8007736:	f00b f9bf 	bl	8012ab8 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 800773a:	4a0f      	ldr	r2, [pc, #60]	@ (8007778 <I2CSensors_Init+0x58>)
 800773c:	4b0f      	ldr	r3, [pc, #60]	@ (800777c <I2CSensors_Init+0x5c>)
 800773e:	0011      	movs	r1, r2
 8007740:	0018      	movs	r0, r3
 8007742:	f008 f827 	bl	800f794 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 8007746:	4a0e      	ldr	r2, [pc, #56]	@ (8007780 <I2CSensors_Init+0x60>)
 8007748:	490b      	ldr	r1, [pc, #44]	@ (8007778 <I2CSensors_Init+0x58>)
 800774a:	4b0c      	ldr	r3, [pc, #48]	@ (800777c <I2CSensors_Init+0x5c>)
 800774c:	0018      	movs	r0, r3
 800774e:	f002 f96f 	bl	8009a30 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8007752:	4a0c      	ldr	r2, [pc, #48]	@ (8007784 <I2CSensors_Init+0x64>)
 8007754:	4b0c      	ldr	r3, [pc, #48]	@ (8007788 <I2CSensors_Init+0x68>)
 8007756:	0011      	movs	r1, r2
 8007758:	0018      	movs	r0, r3
 800775a:	f002 ff2b 	bl	800a5b4 <BMP_Init>
    ENS_Init(ReadI2CMem, WriteI2CMem);
 800775e:	4a09      	ldr	r2, [pc, #36]	@ (8007784 <I2CSensors_Init+0x64>)
 8007760:	4b09      	ldr	r3, [pc, #36]	@ (8007788 <I2CSensors_Init+0x68>)
 8007762:	0011      	movs	r1, r2
 8007764:	0018      	movs	r0, r3
 8007766:	f7fb ffef 	bl	8003748 <ENS_Init>
}
 800776a:	46c0      	nop			@ (mov r8, r8)
 800776c:	46bd      	mov	sp, r7
 800776e:	b002      	add	sp, #8
 8007770:	bd80      	pop	{r7, pc}
 8007772:	46c0      	nop			@ (mov r8, r8)
 8007774:	200007b8 	.word	0x200007b8
 8007778:	08007839 	.word	0x08007839
 800777c:	080077e5 	.word	0x080077e5
 8007780:	0800778d 	.word	0x0800778d
 8007784:	08007909 	.word	0x08007909
 8007788:	0800788d 	.word	0x0800788d

0800778c <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800778c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800778e:	b087      	sub	sp, #28
 8007790:	af02      	add	r7, sp, #8
 8007792:	6039      	str	r1, [r7, #0]
 8007794:	0011      	movs	r1, r2
 8007796:	1dfb      	adds	r3, r7, #7
 8007798:	1c02      	adds	r2, r0, #0
 800779a:	701a      	strb	r2, [r3, #0]
 800779c:	1dbb      	adds	r3, r7, #6
 800779e:	1c0a      	adds	r2, r1, #0
 80077a0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, (address << 1), buffer, nrBytes, 250);
 80077a2:	4b0f      	ldr	r3, [pc, #60]	@ (80077e0 <ReadI2CDirect+0x54>)
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	1dfb      	adds	r3, r7, #7
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	18db      	adds	r3, r3, r3
 80077ae:	b299      	uxth	r1, r3
 80077b0:	1dbb      	adds	r3, r7, #6
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	260f      	movs	r6, #15
 80077b8:	19bc      	adds	r4, r7, r6
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	25fa      	movs	r5, #250	@ 0xfa
 80077be:	9500      	str	r5, [sp, #0]
 80077c0:	f00d f91c 	bl	80149fc <HAL_I2C_Master_Receive>
 80077c4:	0003      	movs	r3, r0
 80077c6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80077c8:	19bb      	adds	r3, r7, r6
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <ReadI2CDirect+0x48>
        return false;
 80077d0:	2300      	movs	r3, #0
 80077d2:	e000      	b.n	80077d6 <ReadI2CDirect+0x4a>
    }
    return true;
 80077d4:	2301      	movs	r3, #1
}
 80077d6:	0018      	movs	r0, r3
 80077d8:	46bd      	mov	sp, r7
 80077da:	b005      	add	sp, #20
 80077dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077de:	46c0      	nop			@ (mov r8, r8)
 80077e0:	200007b8 	.word	0x200007b8

080077e4 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80077e4:	b5b0      	push	{r4, r5, r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6039      	str	r1, [r7, #0]
 80077ec:	0011      	movs	r1, r2
 80077ee:	1dfb      	adds	r3, r7, #7
 80077f0:	1c02      	adds	r2, r0, #0
 80077f2:	701a      	strb	r2, [r3, #0]
 80077f4:	1dbb      	adds	r3, r7, #6
 80077f6:	1c0a      	adds	r2, r1, #0
 80077f8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80077fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007834 <ReadI2C+0x50>)
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	1dfb      	adds	r3, r7, #7
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	b29b      	uxth	r3, r3
 8007804:	18db      	adds	r3, r3, r3
 8007806:	b299      	uxth	r1, r3
 8007808:	1dbb      	adds	r3, r7, #6
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	b29b      	uxth	r3, r3
 800780e:	250f      	movs	r5, #15
 8007810:	197c      	adds	r4, r7, r5
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	f00d fb00 	bl	8014e18 <HAL_I2C_Master_Receive_DMA>
 8007818:	0003      	movs	r3, r0
 800781a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800781c:	197b      	adds	r3, r7, r5
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <ReadI2C+0x44>
        return false;
 8007824:	2300      	movs	r3, #0
 8007826:	e000      	b.n	800782a <ReadI2C+0x46>
    }
    return true;
 8007828:	2301      	movs	r3, #1
}
 800782a:	0018      	movs	r0, r3
 800782c:	46bd      	mov	sp, r7
 800782e:	b004      	add	sp, #16
 8007830:	bdb0      	pop	{r4, r5, r7, pc}
 8007832:	46c0      	nop			@ (mov r8, r8)
 8007834:	200007b8 	.word	0x200007b8

08007838 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007838:	b5b0      	push	{r4, r5, r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6039      	str	r1, [r7, #0]
 8007840:	0011      	movs	r1, r2
 8007842:	1dfb      	adds	r3, r7, #7
 8007844:	1c02      	adds	r2, r0, #0
 8007846:	701a      	strb	r2, [r3, #0]
 8007848:	1dbb      	adds	r3, r7, #6
 800784a:	1c0a      	adds	r2, r1, #0
 800784c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800784e:	4b0e      	ldr	r3, [pc, #56]	@ (8007888 <WriteI2C+0x50>)
 8007850:	6818      	ldr	r0, [r3, #0]
 8007852:	1dfb      	adds	r3, r7, #7
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	18db      	adds	r3, r3, r3
 800785a:	b299      	uxth	r1, r3
 800785c:	1dbb      	adds	r3, r7, #6
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	b29b      	uxth	r3, r3
 8007862:	250f      	movs	r5, #15
 8007864:	197c      	adds	r4, r7, r5
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	f00d f9d0 	bl	8014c0c <HAL_I2C_Master_Transmit_DMA>
 800786c:	0003      	movs	r3, r0
 800786e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007870:	197b      	adds	r3, r7, r5
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <WriteI2C+0x44>
        return false;
 8007878:	2300      	movs	r3, #0
 800787a:	e000      	b.n	800787e <WriteI2C+0x46>
    }
    return true;
 800787c:	2301      	movs	r3, #1
}
 800787e:	0018      	movs	r0, r3
 8007880:	46bd      	mov	sp, r7
 8007882:	b004      	add	sp, #16
 8007884:	bdb0      	pop	{r4, r5, r7, pc}
 8007886:	46c0      	nop			@ (mov r8, r8)
 8007888:	200007b8 	.word	0x200007b8

0800788c <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800788c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800788e:	b08b      	sub	sp, #44	@ 0x2c
 8007890:	af04      	add	r7, sp, #16
 8007892:	0004      	movs	r4, r0
 8007894:	0008      	movs	r0, r1
 8007896:	0011      	movs	r1, r2
 8007898:	607b      	str	r3, [r7, #4]
 800789a:	250f      	movs	r5, #15
 800789c:	197b      	adds	r3, r7, r5
 800789e:	1c22      	adds	r2, r4, #0
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	260c      	movs	r6, #12
 80078a4:	19bb      	adds	r3, r7, r6
 80078a6:	1c02      	adds	r2, r0, #0
 80078a8:	801a      	strh	r2, [r3, #0]
 80078aa:	230a      	movs	r3, #10
 80078ac:	18fb      	adds	r3, r7, r3
 80078ae:	1c0a      	adds	r2, r1, #0
 80078b0:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 80078b2:	4b14      	ldr	r3, [pc, #80]	@ (8007904 <ReadI2CMem+0x78>)
 80078b4:	6818      	ldr	r0, [r3, #0]
 80078b6:	197b      	adds	r3, r7, r5
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	18db      	adds	r3, r3, r3
 80078be:	b299      	uxth	r1, r3
 80078c0:	2217      	movs	r2, #23
 80078c2:	18bc      	adds	r4, r7, r2
 80078c4:	230a      	movs	r3, #10
 80078c6:	18fb      	adds	r3, r7, r3
 80078c8:	881d      	ldrh	r5, [r3, #0]
 80078ca:	19bb      	adds	r3, r7, r6
 80078cc:	881a      	ldrh	r2, [r3, #0]
 80078ce:	2364      	movs	r3, #100	@ 0x64
 80078d0:	9302      	str	r3, [sp, #8]
 80078d2:	2328      	movs	r3, #40	@ 0x28
 80078d4:	2608      	movs	r6, #8
 80078d6:	199b      	adds	r3, r3, r6
 80078d8:	19db      	adds	r3, r3, r7
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	002b      	movs	r3, r5
 80078e4:	f00d fb9e 	bl	8015024 <HAL_I2C_Mem_Read>
 80078e8:	0003      	movs	r3, r0
 80078ea:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 80078ec:	2217      	movs	r2, #23
 80078ee:	18bb      	adds	r3, r7, r2
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <ReadI2CMem+0x6e>
     return false;
 80078f6:	2300      	movs	r3, #0
 80078f8:	e000      	b.n	80078fc <ReadI2CMem+0x70>
   }
   return true;
 80078fa:	2301      	movs	r3, #1
}
 80078fc:	0018      	movs	r0, r3
 80078fe:	46bd      	mov	sp, r7
 8007900:	b007      	add	sp, #28
 8007902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007904:	200007b8 	.word	0x200007b8

08007908 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800790a:	b089      	sub	sp, #36	@ 0x24
 800790c:	af02      	add	r7, sp, #8
 800790e:	0004      	movs	r4, r0
 8007910:	0008      	movs	r0, r1
 8007912:	0011      	movs	r1, r2
 8007914:	607b      	str	r3, [r7, #4]
 8007916:	250f      	movs	r5, #15
 8007918:	197b      	adds	r3, r7, r5
 800791a:	1c22      	adds	r2, r4, #0
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	260c      	movs	r6, #12
 8007920:	19bb      	adds	r3, r7, r6
 8007922:	1c02      	adds	r2, r0, #0
 8007924:	801a      	strh	r2, [r3, #0]
 8007926:	230a      	movs	r3, #10
 8007928:	18fb      	adds	r3, r7, r3
 800792a:	1c0a      	adds	r2, r1, #0
 800792c:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 800792e:	4b13      	ldr	r3, [pc, #76]	@ (800797c <WriteI2CMem+0x74>)
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	197b      	adds	r3, r7, r5
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	b29b      	uxth	r3, r3
 8007938:	18db      	adds	r3, r3, r3
 800793a:	b299      	uxth	r1, r3
 800793c:	2217      	movs	r2, #23
 800793e:	18bc      	adds	r4, r7, r2
 8007940:	230a      	movs	r3, #10
 8007942:	18fb      	adds	r3, r7, r3
 8007944:	881d      	ldrh	r5, [r3, #0]
 8007946:	19bb      	adds	r3, r7, r6
 8007948:	881a      	ldrh	r2, [r3, #0]
 800794a:	2328      	movs	r3, #40	@ 0x28
 800794c:	2608      	movs	r6, #8
 800794e:	199b      	adds	r3, r3, r6
 8007950:	19db      	adds	r3, r3, r7
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	002b      	movs	r3, r5
 800795c:	f00d fc96 	bl	801528c <HAL_I2C_Mem_Write_DMA>
 8007960:	0003      	movs	r3, r0
 8007962:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007964:	2217      	movs	r2, #23
 8007966:	18bb      	adds	r3, r7, r2
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <WriteI2CMem+0x6a>
     return false;
 800796e:	2300      	movs	r3, #0
 8007970:	e000      	b.n	8007974 <WriteI2CMem+0x6c>
   }
   return true;
 8007972:	2301      	movs	r3, #1
}
 8007974:	0018      	movs	r0, r3
 8007976:	46bd      	mov	sp, r7
 8007978:	b007      	add	sp, #28
 800797a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800797c:	200007b8 	.word	0x200007b8

08007980 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8007980:	b590      	push	{r4, r7, lr}
 8007982:	b0c3      	sub	sp, #268	@ 0x10c
 8007984:	af3e      	add	r7, sp, #248	@ 0xf8
 8007986:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8007988:	f019 fec8 	bl	802171c <GetUsbRxDataSize>
 800798c:	0003      	movs	r3, r0
 800798e:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2b05      	cmp	r3, #5
 8007994:	d971      	bls.n	8007a7a <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2123      	movs	r1, #35	@ 0x23
 800799a:	0018      	movs	r0, r3
 800799c:	f01d f8e0 	bl	8024b60 <strchr>
 80079a0:	0003      	movs	r3, r0
 80079a2:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d065      	beq.n	8007a76 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	785a      	ldrb	r2, [r3, #1]
 80079ae:	4b34      	ldr	r3, [pc, #208]	@ (8007a80 <Process_PC_Config+0x100>)
 80079b0:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	789a      	ldrb	r2, [r3, #2]
 80079b6:	4b32      	ldr	r3, [pc, #200]	@ (8007a80 <Process_PC_Config+0x100>)
 80079b8:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 80079ba:	4b31      	ldr	r3, [pc, #196]	@ (8007a80 <Process_PC_Config+0x100>)
 80079bc:	785b      	ldrb	r3, [r3, #1]
 80079be:	3305      	adds	r3, #5
 80079c0:	001a      	movs	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d351      	bcc.n	8007a6c <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	1cd9      	adds	r1, r3, #3
 80079cc:	4b2c      	ldr	r3, [pc, #176]	@ (8007a80 <Process_PC_Config+0x100>)
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	001a      	movs	r2, r3
 80079d2:	4b2c      	ldr	r3, [pc, #176]	@ (8007a84 <Process_PC_Config+0x104>)
 80079d4:	0018      	movs	r0, r3
 80079d6:	f01d f997 	bl	8024d08 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 80079da:	4b29      	ldr	r3, [pc, #164]	@ (8007a80 <Process_PC_Config+0x100>)
 80079dc:	785b      	ldrb	r3, [r3, #1]
 80079de:	3303      	adds	r3, #3
 80079e0:	001a      	movs	r2, r3
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	189b      	adds	r3, r3, r2
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	021b      	lsls	r3, r3, #8
 80079ea:	b21a      	sxth	r2, r3
 80079ec:	4b24      	ldr	r3, [pc, #144]	@ (8007a80 <Process_PC_Config+0x100>)
 80079ee:	785b      	ldrb	r3, [r3, #1]
 80079f0:	3304      	adds	r3, #4
 80079f2:	68b9      	ldr	r1, [r7, #8]
 80079f4:	18cb      	adds	r3, r1, r3
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	b21b      	sxth	r3, r3
 80079fa:	4313      	orrs	r3, r2
 80079fc:	b21b      	sxth	r3, r3
 80079fe:	b299      	uxth	r1, r3
 8007a00:	4a1f      	ldr	r2, [pc, #124]	@ (8007a80 <Process_PC_Config+0x100>)
 8007a02:	2381      	movs	r3, #129	@ 0x81
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8007a08:	4a1d      	ldr	r2, [pc, #116]	@ (8007a80 <Process_PC_Config+0x100>)
 8007a0a:	2381      	movs	r3, #129	@ 0x81
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	5ad4      	ldrh	r4, [r2, r3]
 8007a10:	4b1b      	ldr	r3, [pc, #108]	@ (8007a80 <Process_PC_Config+0x100>)
 8007a12:	785b      	ldrb	r3, [r3, #1]
 8007a14:	3303      	adds	r3, #3
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	0011      	movs	r1, r2
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f000 f9f9 	bl	8007e14 <CRC16_ARC>
 8007a22:	0003      	movs	r3, r0
 8007a24:	429c      	cmp	r4, r3
 8007a26:	d007      	beq.n	8007a38 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8007a28:	4b15      	ldr	r3, [pc, #84]	@ (8007a80 <Process_PC_Config+0x100>)
 8007a2a:	785a      	ldrb	r2, [r3, #1]
 8007a2c:	4b15      	ldr	r3, [pc, #84]	@ (8007a84 <Process_PC_Config+0x104>)
 8007a2e:	0019      	movs	r1, r3
 8007a30:	2001      	movs	r0, #1
 8007a32:	f000 f99d 	bl	8007d70 <Create_Message>
 8007a36:	e016      	b.n	8007a66 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8007a38:	4c11      	ldr	r4, [pc, #68]	@ (8007a80 <Process_PC_Config+0x100>)
 8007a3a:	466b      	mov	r3, sp
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	0023      	movs	r3, r4
 8007a40:	3310      	adds	r3, #16
 8007a42:	22f4      	movs	r2, #244	@ 0xf4
 8007a44:	0019      	movs	r1, r3
 8007a46:	f01d f95f 	bl	8024d08 <memcpy>
 8007a4a:	6820      	ldr	r0, [r4, #0]
 8007a4c:	6861      	ldr	r1, [r4, #4]
 8007a4e:	68a2      	ldr	r2, [r4, #8]
 8007a50:	68e3      	ldr	r3, [r4, #12]
 8007a52:	f000 f819 	bl	8007a88 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8007a56:	4b0a      	ldr	r3, [pc, #40]	@ (8007a80 <Process_PC_Config+0x100>)
 8007a58:	7818      	ldrb	r0, [r3, #0]
 8007a5a:	4b09      	ldr	r3, [pc, #36]	@ (8007a80 <Process_PC_Config+0x100>)
 8007a5c:	785a      	ldrb	r2, [r3, #1]
 8007a5e:	4b09      	ldr	r3, [pc, #36]	@ (8007a84 <Process_PC_Config+0x104>)
 8007a60:	0019      	movs	r1, r3
 8007a62:	f000 f985 	bl	8007d70 <Create_Message>
                }
                ResetUsbRxDataSize();
 8007a66:	f019 fe41 	bl	80216ec <ResetUsbRxDataSize>
                return;
 8007a6a:	e006      	b.n	8007a7a <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	0018      	movs	r0, r3
 8007a70:	f019 fe5e 	bl	8021730 <GetUsbRxNextChunk>
 8007a74:	e001      	b.n	8007a7a <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8007a76:	f019 fe39 	bl	80216ec <ResetUsbRxDataSize>
        }
    }
}
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	b005      	add	sp, #20
 8007a7e:	bd90      	pop	{r4, r7, pc}
 8007a80:	200007bc 	.word	0x200007bc
 8007a84:	200007be 	.word	0x200007be

08007a88 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8007a88:	b084      	sub	sp, #16
 8007a8a:	b5b0      	push	{r4, r5, r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	2518      	movs	r5, #24
 8007a92:	197c      	adds	r4, r7, r5
 8007a94:	6020      	str	r0, [r4, #0]
 8007a96:	6061      	str	r1, [r4, #4]
 8007a98:	60a2      	str	r2, [r4, #8]
 8007a9a:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8007a9c:	197b      	adds	r3, r7, r5
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2bfe      	cmp	r3, #254	@ 0xfe
 8007aa2:	d100      	bne.n	8007aa6 <ProcessCmd+0x1e>
 8007aa4:	e10c      	b.n	8007cc0 <ProcessCmd+0x238>
 8007aa6:	dd00      	ble.n	8007aaa <ProcessCmd+0x22>
 8007aa8:	e12c      	b.n	8007d04 <ProcessCmd+0x27c>
 8007aaa:	2b16      	cmp	r3, #22
 8007aac:	dc0a      	bgt.n	8007ac4 <ProcessCmd+0x3c>
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	da00      	bge.n	8007ab4 <ProcessCmd+0x2c>
 8007ab2:	e127      	b.n	8007d04 <ProcessCmd+0x27c>
 8007ab4:	2b16      	cmp	r3, #22
 8007ab6:	d900      	bls.n	8007aba <ProcessCmd+0x32>
 8007ab8:	e124      	b.n	8007d04 <ProcessCmd+0x27c>
 8007aba:	009a      	lsls	r2, r3, #2
 8007abc:	4b95      	ldr	r3, [pc, #596]	@ (8007d14 <ProcessCmd+0x28c>)
 8007abe:	18d3      	adds	r3, r2, r3
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	469f      	mov	pc, r3
 8007ac4:	2bfd      	cmp	r3, #253	@ 0xfd
 8007ac6:	d100      	bne.n	8007aca <ProcessCmd+0x42>
 8007ac8:	e0f2      	b.n	8007cb0 <ProcessCmd+0x228>
            }
            break;
        }
    }

}
 8007aca:	e11b      	b.n	8007d04 <ProcessCmd+0x27c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007acc:	2118      	movs	r1, #24
 8007ace:	187b      	adds	r3, r7, r1
 8007ad0:	785b      	ldrb	r3, [r3, #1]
 8007ad2:	001a      	movs	r2, r3
 8007ad4:	187b      	adds	r3, r7, r1
 8007ad6:	1c99      	adds	r1, r3, #2
 8007ad8:	488f      	ldr	r0, [pc, #572]	@ (8007d18 <ProcessCmd+0x290>)
 8007ada:	230c      	movs	r3, #12
 8007adc:	f003 f964 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007ae0:	e110      	b.n	8007d04 <ProcessCmd+0x27c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007ae2:	2118      	movs	r1, #24
 8007ae4:	187b      	adds	r3, r7, r1
 8007ae6:	785b      	ldrb	r3, [r3, #1]
 8007ae8:	001a      	movs	r2, r3
 8007aea:	187b      	adds	r3, r7, r1
 8007aec:	1c99      	adds	r1, r3, #2
 8007aee:	488b      	ldr	r0, [pc, #556]	@ (8007d1c <ProcessCmd+0x294>)
 8007af0:	230c      	movs	r3, #12
 8007af2:	f003 f959 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007af6:	e105      	b.n	8007d04 <ProcessCmd+0x27c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007af8:	2118      	movs	r1, #24
 8007afa:	187b      	adds	r3, r7, r1
 8007afc:	785b      	ldrb	r3, [r3, #1]
 8007afe:	001a      	movs	r2, r3
 8007b00:	187b      	adds	r3, r7, r1
 8007b02:	1c99      	adds	r1, r3, #2
 8007b04:	4886      	ldr	r0, [pc, #536]	@ (8007d20 <ProcessCmd+0x298>)
 8007b06:	230c      	movs	r3, #12
 8007b08:	f003 f94e 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007b0c:	e0fa      	b.n	8007d04 <ProcessCmd+0x27c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007b0e:	2118      	movs	r1, #24
 8007b10:	187b      	adds	r3, r7, r1
 8007b12:	785b      	ldrb	r3, [r3, #1]
 8007b14:	001a      	movs	r2, r3
 8007b16:	187b      	adds	r3, r7, r1
 8007b18:	1c99      	adds	r1, r3, #2
 8007b1a:	4882      	ldr	r0, [pc, #520]	@ (8007d24 <ProcessCmd+0x29c>)
 8007b1c:	230c      	movs	r3, #12
 8007b1e:	f003 f943 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007b22:	e0ef      	b.n	8007d04 <ProcessCmd+0x27c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007b24:	2118      	movs	r1, #24
 8007b26:	187b      	adds	r3, r7, r1
 8007b28:	785b      	ldrb	r3, [r3, #1]
 8007b2a:	001a      	movs	r2, r3
 8007b2c:	187b      	adds	r3, r7, r1
 8007b2e:	1c99      	adds	r1, r3, #2
 8007b30:	487d      	ldr	r0, [pc, #500]	@ (8007d28 <ProcessCmd+0x2a0>)
 8007b32:	230c      	movs	r3, #12
 8007b34:	f003 f938 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007b38:	e0e4      	b.n	8007d04 <ProcessCmd+0x27c>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007b3a:	2118      	movs	r1, #24
 8007b3c:	187b      	adds	r3, r7, r1
 8007b3e:	785b      	ldrb	r3, [r3, #1]
 8007b40:	001a      	movs	r2, r3
 8007b42:	187b      	adds	r3, r7, r1
 8007b44:	1c99      	adds	r1, r3, #2
 8007b46:	4879      	ldr	r0, [pc, #484]	@ (8007d2c <ProcessCmd+0x2a4>)
 8007b48:	230c      	movs	r3, #12
 8007b4a:	f003 f92d 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007b4e:	e0d9      	b.n	8007d04 <ProcessCmd+0x27c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007b50:	2118      	movs	r1, #24
 8007b52:	187b      	adds	r3, r7, r1
 8007b54:	785b      	ldrb	r3, [r3, #1]
 8007b56:	001a      	movs	r2, r3
 8007b58:	187b      	adds	r3, r7, r1
 8007b5a:	1c99      	adds	r1, r3, #2
 8007b5c:	4874      	ldr	r0, [pc, #464]	@ (8007d30 <ProcessCmd+0x2a8>)
 8007b5e:	230c      	movs	r3, #12
 8007b60:	f003 f922 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007b64:	e0ce      	b.n	8007d04 <ProcessCmd+0x27c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007b66:	2118      	movs	r1, #24
 8007b68:	187b      	adds	r3, r7, r1
 8007b6a:	785b      	ldrb	r3, [r3, #1]
 8007b6c:	001a      	movs	r2, r3
 8007b6e:	187b      	adds	r3, r7, r1
 8007b70:	1c99      	adds	r1, r3, #2
 8007b72:	4870      	ldr	r0, [pc, #448]	@ (8007d34 <ProcessCmd+0x2ac>)
 8007b74:	230c      	movs	r3, #12
 8007b76:	f003 f917 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007b7a:	e0c3      	b.n	8007d04 <ProcessCmd+0x27c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007b7c:	2118      	movs	r1, #24
 8007b7e:	187b      	adds	r3, r7, r1
 8007b80:	785b      	ldrb	r3, [r3, #1]
 8007b82:	001a      	movs	r2, r3
 8007b84:	187b      	adds	r3, r7, r1
 8007b86:	1c99      	adds	r1, r3, #2
 8007b88:	486b      	ldr	r0, [pc, #428]	@ (8007d38 <ProcessCmd+0x2b0>)
 8007b8a:	230c      	movs	r3, #12
 8007b8c:	f003 f90c 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007b90:	e0b8      	b.n	8007d04 <ProcessCmd+0x27c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007b92:	2118      	movs	r1, #24
 8007b94:	187b      	adds	r3, r7, r1
 8007b96:	785b      	ldrb	r3, [r3, #1]
 8007b98:	001a      	movs	r2, r3
 8007b9a:	187b      	adds	r3, r7, r1
 8007b9c:	1c99      	adds	r1, r3, #2
 8007b9e:	4867      	ldr	r0, [pc, #412]	@ (8007d3c <ProcessCmd+0x2b4>)
 8007ba0:	230c      	movs	r3, #12
 8007ba2:	f003 f901 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007ba6:	e0ad      	b.n	8007d04 <ProcessCmd+0x27c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007ba8:	2118      	movs	r1, #24
 8007baa:	187b      	adds	r3, r7, r1
 8007bac:	785b      	ldrb	r3, [r3, #1]
 8007bae:	001a      	movs	r2, r3
 8007bb0:	187b      	adds	r3, r7, r1
 8007bb2:	1c99      	adds	r1, r3, #2
 8007bb4:	4862      	ldr	r0, [pc, #392]	@ (8007d40 <ProcessCmd+0x2b8>)
 8007bb6:	230c      	movs	r3, #12
 8007bb8:	f003 f8f6 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007bbc:	e0a2      	b.n	8007d04 <ProcessCmd+0x27c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8007bbe:	2118      	movs	r1, #24
 8007bc0:	187b      	adds	r3, r7, r1
 8007bc2:	785b      	ldrb	r3, [r3, #1]
 8007bc4:	001a      	movs	r2, r3
 8007bc6:	187b      	adds	r3, r7, r1
 8007bc8:	1c99      	adds	r1, r3, #2
 8007bca:	485e      	ldr	r0, [pc, #376]	@ (8007d44 <ProcessCmd+0x2bc>)
 8007bcc:	2320      	movs	r3, #32
 8007bce:	f003 f8eb 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007bd2:	e097      	b.n	8007d04 <ProcessCmd+0x27c>
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007bd4:	2118      	movs	r1, #24
 8007bd6:	187b      	adds	r3, r7, r1
 8007bd8:	785b      	ldrb	r3, [r3, #1]
 8007bda:	001a      	movs	r2, r3
 8007bdc:	187b      	adds	r3, r7, r1
 8007bde:	1c99      	adds	r1, r3, #2
 8007be0:	4859      	ldr	r0, [pc, #356]	@ (8007d48 <ProcessCmd+0x2c0>)
 8007be2:	230c      	movs	r3, #12
 8007be4:	f003 f8e0 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007be8:	e08c      	b.n	8007d04 <ProcessCmd+0x27c>
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007bea:	2118      	movs	r1, #24
 8007bec:	187b      	adds	r3, r7, r1
 8007bee:	785b      	ldrb	r3, [r3, #1]
 8007bf0:	001a      	movs	r2, r3
 8007bf2:	187b      	adds	r3, r7, r1
 8007bf4:	1c99      	adds	r1, r3, #2
 8007bf6:	4855      	ldr	r0, [pc, #340]	@ (8007d4c <ProcessCmd+0x2c4>)
 8007bf8:	230c      	movs	r3, #12
 8007bfa:	f003 f8d5 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007bfe:	e081      	b.n	8007d04 <ProcessCmd+0x27c>
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007c00:	2118      	movs	r1, #24
 8007c02:	187b      	adds	r3, r7, r1
 8007c04:	785b      	ldrb	r3, [r3, #1]
 8007c06:	001a      	movs	r2, r3
 8007c08:	187b      	adds	r3, r7, r1
 8007c0a:	1c99      	adds	r1, r3, #2
 8007c0c:	4850      	ldr	r0, [pc, #320]	@ (8007d50 <ProcessCmd+0x2c8>)
 8007c0e:	230c      	movs	r3, #12
 8007c10:	f003 f8ca 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007c14:	e076      	b.n	8007d04 <ProcessCmd+0x27c>
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007c16:	2118      	movs	r1, #24
 8007c18:	187b      	adds	r3, r7, r1
 8007c1a:	785b      	ldrb	r3, [r3, #1]
 8007c1c:	001a      	movs	r2, r3
 8007c1e:	187b      	adds	r3, r7, r1
 8007c20:	1c99      	adds	r1, r3, #2
 8007c22:	484c      	ldr	r0, [pc, #304]	@ (8007d54 <ProcessCmd+0x2cc>)
 8007c24:	230c      	movs	r3, #12
 8007c26:	f003 f8bf 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007c2a:	e06b      	b.n	8007d04 <ProcessCmd+0x27c>
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007c2c:	2118      	movs	r1, #24
 8007c2e:	187b      	adds	r3, r7, r1
 8007c30:	785b      	ldrb	r3, [r3, #1]
 8007c32:	001a      	movs	r2, r3
 8007c34:	187b      	adds	r3, r7, r1
 8007c36:	1c99      	adds	r1, r3, #2
 8007c38:	4847      	ldr	r0, [pc, #284]	@ (8007d58 <ProcessCmd+0x2d0>)
 8007c3a:	230c      	movs	r3, #12
 8007c3c:	f003 f8b4 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007c40:	e060      	b.n	8007d04 <ProcessCmd+0x27c>
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007c42:	2118      	movs	r1, #24
 8007c44:	187b      	adds	r3, r7, r1
 8007c46:	785b      	ldrb	r3, [r3, #1]
 8007c48:	001a      	movs	r2, r3
 8007c4a:	187b      	adds	r3, r7, r1
 8007c4c:	1c99      	adds	r1, r3, #2
 8007c4e:	4843      	ldr	r0, [pc, #268]	@ (8007d5c <ProcessCmd+0x2d4>)
 8007c50:	230c      	movs	r3, #12
 8007c52:	f003 f8a9 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007c56:	e055      	b.n	8007d04 <ProcessCmd+0x27c>
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007c58:	2118      	movs	r1, #24
 8007c5a:	187b      	adds	r3, r7, r1
 8007c5c:	785b      	ldrb	r3, [r3, #1]
 8007c5e:	001a      	movs	r2, r3
 8007c60:	187b      	adds	r3, r7, r1
 8007c62:	1c99      	adds	r1, r3, #2
 8007c64:	483e      	ldr	r0, [pc, #248]	@ (8007d60 <ProcessCmd+0x2d8>)
 8007c66:	230c      	movs	r3, #12
 8007c68:	f003 f89e 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007c6c:	e04a      	b.n	8007d04 <ProcessCmd+0x27c>
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007c6e:	2118      	movs	r1, #24
 8007c70:	187b      	adds	r3, r7, r1
 8007c72:	785b      	ldrb	r3, [r3, #1]
 8007c74:	001a      	movs	r2, r3
 8007c76:	187b      	adds	r3, r7, r1
 8007c78:	1c99      	adds	r1, r3, #2
 8007c7a:	483a      	ldr	r0, [pc, #232]	@ (8007d64 <ProcessCmd+0x2dc>)
 8007c7c:	230c      	movs	r3, #12
 8007c7e:	f003 f893 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007c82:	e03f      	b.n	8007d04 <ProcessCmd+0x27c>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007c84:	2118      	movs	r1, #24
 8007c86:	187b      	adds	r3, r7, r1
 8007c88:	785b      	ldrb	r3, [r3, #1]
 8007c8a:	001a      	movs	r2, r3
 8007c8c:	187b      	adds	r3, r7, r1
 8007c8e:	1c99      	adds	r1, r3, #2
 8007c90:	4835      	ldr	r0, [pc, #212]	@ (8007d68 <ProcessCmd+0x2e0>)
 8007c92:	230c      	movs	r3, #12
 8007c94:	f003 f888 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007c98:	e034      	b.n	8007d04 <ProcessCmd+0x27c>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007c9a:	2118      	movs	r1, #24
 8007c9c:	187b      	adds	r3, r7, r1
 8007c9e:	785b      	ldrb	r3, [r3, #1]
 8007ca0:	001a      	movs	r2, r3
 8007ca2:	187b      	adds	r3, r7, r1
 8007ca4:	1c99      	adds	r1, r3, #2
 8007ca6:	4831      	ldr	r0, [pc, #196]	@ (8007d6c <ProcessCmd+0x2e4>)
 8007ca8:	230c      	movs	r3, #12
 8007caa:	f003 f87d 	bl	800ada8 <WriteUint8ArrayEepromSafe>
        break;
 8007cae:	e029      	b.n	8007d04 <ProcessCmd+0x27c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8007cb0:	2370      	movs	r3, #112	@ 0x70
 8007cb2:	33ff      	adds	r3, #255	@ 0xff
 8007cb4:	4a18      	ldr	r2, [pc, #96]	@ (8007d18 <ProcessCmd+0x290>)
 8007cb6:	0019      	movs	r1, r3
 8007cb8:	0010      	movs	r0, r2
 8007cba:	f003 f8ba 	bl	800ae32 <ClearEEprom>
        break;
 8007cbe:	e021      	b.n	8007d04 <ProcessCmd+0x27c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8007cc0:	2118      	movs	r1, #24
 8007cc2:	187b      	adds	r3, r7, r1
 8007cc4:	789b      	ldrb	r3, [r3, #2]
 8007cc6:	021b      	lsls	r3, r3, #8
 8007cc8:	b21a      	sxth	r2, r3
 8007cca:	187b      	adds	r3, r7, r1
 8007ccc:	78db      	ldrb	r3, [r3, #3]
 8007cce:	b21b      	sxth	r3, r3
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	b21a      	sxth	r2, r3
 8007cd4:	1dbb      	adds	r3, r7, #6
 8007cd6:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8007cd8:	1dbb      	adds	r3, r7, #6
 8007cda:	881a      	ldrh	r2, [r3, #0]
 8007cdc:	23c0      	movs	r3, #192	@ 0xc0
 8007cde:	015b      	lsls	r3, r3, #5
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d207      	bcs.n	8007cf4 <ProcessCmd+0x26c>
                ClearEEprom(EEPromStartAddr, size);
 8007ce4:	1dbb      	adds	r3, r7, #6
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8007d18 <ProcessCmd+0x290>)
 8007cea:	0019      	movs	r1, r3
 8007cec:	0010      	movs	r0, r2
 8007cee:	f003 f8a0 	bl	800ae32 <ClearEEprom>
            break;
 8007cf2:	e006      	b.n	8007d02 <ProcessCmd+0x27a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8007cf4:	23c0      	movs	r3, #192	@ 0xc0
 8007cf6:	015b      	lsls	r3, r3, #5
 8007cf8:	4a07      	ldr	r2, [pc, #28]	@ (8007d18 <ProcessCmd+0x290>)
 8007cfa:	0019      	movs	r1, r3
 8007cfc:	0010      	movs	r0, r2
 8007cfe:	f003 f898 	bl	800ae32 <ClearEEprom>
            break;
 8007d02:	46c0      	nop			@ (mov r8, r8)
}
 8007d04:	46c0      	nop			@ (mov r8, r8)
 8007d06:	46bd      	mov	sp, r7
 8007d08:	b002      	add	sp, #8
 8007d0a:	bcb0      	pop	{r4, r5, r7}
 8007d0c:	bc08      	pop	{r3}
 8007d0e:	b004      	add	sp, #16
 8007d10:	4718      	bx	r3
 8007d12:	46c0      	nop			@ (mov r8, r8)
 8007d14:	0802c9b8 	.word	0x0802c9b8
 8007d18:	08080000 	.word	0x08080000
 8007d1c:	0808000c 	.word	0x0808000c
 8007d20:	08080018 	.word	0x08080018
 8007d24:	08080024 	.word	0x08080024
 8007d28:	08080030 	.word	0x08080030
 8007d2c:	0808003c 	.word	0x0808003c
 8007d30:	08080048 	.word	0x08080048
 8007d34:	08080054 	.word	0x08080054
 8007d38:	08080060 	.word	0x08080060
 8007d3c:	0808006c 	.word	0x0808006c
 8007d40:	08080078 	.word	0x08080078
 8007d44:	08080090 	.word	0x08080090
 8007d48:	080800b0 	.word	0x080800b0
 8007d4c:	080800bc 	.word	0x080800bc
 8007d50:	080800c8 	.word	0x080800c8
 8007d54:	080800d4 	.word	0x080800d4
 8007d58:	080800e0 	.word	0x080800e0
 8007d5c:	080800ec 	.word	0x080800ec
 8007d60:	080800f8 	.word	0x080800f8
 8007d64:	08080104 	.word	0x08080104
 8007d68:	08080110 	.word	0x08080110
 8007d6c:	08080130 	.word	0x08080130

08007d70 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8007d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6039      	str	r1, [r7, #0]
 8007d78:	0011      	movs	r1, r2
 8007d7a:	1dfb      	adds	r3, r7, #7
 8007d7c:	1c02      	adds	r2, r0, #0
 8007d7e:	701a      	strb	r2, [r3, #0]
 8007d80:	1dbb      	adds	r3, r7, #6
 8007d82:	1c0a      	adds	r2, r1, #0
 8007d84:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 8007d86:	2223      	movs	r2, #35	@ 0x23
 8007d88:	4b20      	ldr	r3, [pc, #128]	@ (8007e0c <Create_Message+0x9c>)
 8007d8a:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8007d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8007e0c <Create_Message+0x9c>)
 8007d8e:	1dfa      	adds	r2, r7, #7
 8007d90:	7812      	ldrb	r2, [r2, #0]
 8007d92:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8007d94:	4b1d      	ldr	r3, [pc, #116]	@ (8007e0c <Create_Message+0x9c>)
 8007d96:	1dba      	adds	r2, r7, #6
 8007d98:	7812      	ldrb	r2, [r2, #0]
 8007d9a:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8007d9c:	1dbb      	adds	r3, r7, #6
 8007d9e:	781a      	ldrb	r2, [r3, #0]
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e10 <Create_Message+0xa0>)
 8007da4:	0018      	movs	r0, r3
 8007da6:	f01c ffaf 	bl	8024d08 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8007daa:	1dbb      	adds	r3, r7, #6
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	250e      	movs	r5, #14
 8007db2:	197b      	adds	r3, r7, r5
 8007db4:	3203      	adds	r2, #3
 8007db6:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8007db8:	260c      	movs	r6, #12
 8007dba:	19bc      	adds	r4, r7, r6
 8007dbc:	197b      	adds	r3, r7, r5
 8007dbe:	881a      	ldrh	r2, [r3, #0]
 8007dc0:	4b12      	ldr	r3, [pc, #72]	@ (8007e0c <Create_Message+0x9c>)
 8007dc2:	0011      	movs	r1, r2
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	f000 f825 	bl	8007e14 <CRC16_ARC>
 8007dca:	0003      	movs	r3, r0
 8007dcc:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8007dce:	0030      	movs	r0, r6
 8007dd0:	183b      	adds	r3, r7, r0
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	0a1b      	lsrs	r3, r3, #8
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	197b      	adds	r3, r7, r5
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	b2d1      	uxtb	r1, r2
 8007dde:	4a0b      	ldr	r2, [pc, #44]	@ (8007e0c <Create_Message+0x9c>)
 8007de0:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8007de2:	197b      	adds	r3, r7, r5
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	3301      	adds	r3, #1
 8007de8:	183a      	adds	r2, r7, r0
 8007dea:	8812      	ldrh	r2, [r2, #0]
 8007dec:	b2d1      	uxtb	r1, r2
 8007dee:	4a07      	ldr	r2, [pc, #28]	@ (8007e0c <Create_Message+0x9c>)
 8007df0:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8007df2:	197b      	adds	r3, r7, r5
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	3302      	adds	r3, #2
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	4b04      	ldr	r3, [pc, #16]	@ (8007e0c <Create_Message+0x9c>)
 8007dfc:	0011      	movs	r1, r2
 8007dfe:	0018      	movs	r0, r3
 8007e00:	f019 fc32 	bl	8021668 <CDC_Transmit_FS>
}
 8007e04:	46c0      	nop			@ (mov r8, r8)
 8007e06:	46bd      	mov	sp, r7
 8007e08:	b005      	add	sp, #20
 8007e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e0c:	200008c8 	.word	0x200008c8
 8007e10:	200008cb 	.word	0x200008cb

08007e14 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	000a      	movs	r2, r1
 8007e1e:	1cbb      	adds	r3, r7, #2
 8007e20:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8007e22:	2316      	movs	r3, #22
 8007e24:	18fb      	adds	r3, r7, r3
 8007e26:	2200      	movs	r2, #0
 8007e28:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	613b      	str	r3, [r7, #16]
 8007e2e:	e02e      	b.n	8007e8e <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	18d3      	adds	r3, r2, r3
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	0019      	movs	r1, r3
 8007e3a:	2216      	movs	r2, #22
 8007e3c:	18bb      	adds	r3, r7, r2
 8007e3e:	18ba      	adds	r2, r7, r2
 8007e40:	8812      	ldrh	r2, [r2, #0]
 8007e42:	404a      	eors	r2, r1
 8007e44:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	e01a      	b.n	8007e82 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8007e4c:	2116      	movs	r1, #22
 8007e4e:	187b      	adds	r3, r7, r1
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	2201      	movs	r2, #1
 8007e54:	4013      	ands	r3, r2
 8007e56:	d00b      	beq.n	8007e70 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8007e58:	187b      	adds	r3, r7, r1
 8007e5a:	187a      	adds	r2, r7, r1
 8007e5c:	8812      	ldrh	r2, [r2, #0]
 8007e5e:	0852      	lsrs	r2, r2, #1
 8007e60:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8007e62:	187b      	adds	r3, r7, r1
 8007e64:	187a      	adds	r2, r7, r1
 8007e66:	8812      	ldrh	r2, [r2, #0]
 8007e68:	490f      	ldr	r1, [pc, #60]	@ (8007ea8 <CRC16_ARC+0x94>)
 8007e6a:	404a      	eors	r2, r1
 8007e6c:	801a      	strh	r2, [r3, #0]
 8007e6e:	e005      	b.n	8007e7c <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8007e70:	2216      	movs	r2, #22
 8007e72:	18bb      	adds	r3, r7, r2
 8007e74:	18ba      	adds	r2, r7, r2
 8007e76:	8812      	ldrh	r2, [r2, #0]
 8007e78:	0852      	lsrs	r2, r2, #1
 8007e7a:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	60fb      	str	r3, [r7, #12]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b07      	cmp	r3, #7
 8007e86:	dde1      	ble.n	8007e4c <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	613b      	str	r3, [r7, #16]
 8007e8e:	1cbb      	adds	r3, r7, #2
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	dbcb      	blt.n	8007e30 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8007e98:	2316      	movs	r3, #22
 8007e9a:	18fb      	adds	r3, r7, r3
 8007e9c:	881b      	ldrh	r3, [r3, #0]
}
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	b006      	add	sp, #24
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	46c0      	nop			@ (mov r8, r8)
 8007ea8:	ffffa001 	.word	0xffffa001

08007eac <printf_USB>:

void printf_USB(const char* message, ...)
{
 8007eac:	b40f      	push	{r0, r1, r2, r3}
 8007eae:	b590      	push	{r4, r7, lr}
 8007eb0:	b0a9      	sub	sp, #164	@ 0xa4
 8007eb2:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8007eb4:	23ac      	movs	r3, #172	@ 0xac
 8007eb6:	2108      	movs	r1, #8
 8007eb8:	185b      	adds	r3, r3, r1
 8007eba:	19db      	adds	r3, r3, r7
 8007ebc:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	23a8      	movs	r3, #168	@ 0xa8
 8007ec2:	185b      	adds	r3, r3, r1
 8007ec4:	19db      	adds	r3, r3, r7
 8007ec6:	6819      	ldr	r1, [r3, #0]
 8007ec8:	2408      	movs	r4, #8
 8007eca:	193b      	adds	r3, r7, r4
 8007ecc:	0018      	movs	r0, r3
 8007ece:	f01c fd93 	bl	80249f8 <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8007ed2:	193b      	adds	r3, r7, r4
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	f7f8 f949 	bl	800016c <strlen>
 8007eda:	0003      	movs	r3, r0
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	193b      	adds	r3, r7, r4
 8007ee0:	0011      	movs	r1, r2
 8007ee2:	0018      	movs	r0, r3
 8007ee4:	f019 fbc0 	bl	8021668 <CDC_Transmit_FS>
}
 8007ee8:	46c0      	nop			@ (mov r8, r8)
 8007eea:	46bd      	mov	sp, r7
 8007eec:	b029      	add	sp, #164	@ 0xa4
 8007eee:	bc90      	pop	{r4, r7}
 8007ef0:	bc08      	pop	{r3}
 8007ef2:	b004      	add	sp, #16
 8007ef4:	4718      	bx	r3

08007ef6 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b082      	sub	sp, #8
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	000a      	movs	r2, r1
 8007f00:	1cfb      	adds	r3, r7, #3
 8007f02:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8007f04:	1cfb      	adds	r3, r7, #3
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <PC_selectout+0x1e>
    printf_USB(msg);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	0018      	movs	r0, r3
 8007f10:	f7ff ffcc 	bl	8007eac <printf_USB>
  }
//  else {
    printf(msg);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	0018      	movs	r0, r3
 8007f18:	f01c fc44 	bl	80247a4 <iprintf>
//  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 8007f1c:	200a      	movs	r0, #10
 8007f1e:	f00b f90f 	bl	8013140 <HAL_Delay>
}
 8007f22:	46c0      	nop			@ (mov r8, r8)
 8007f24:	46bd      	mov	sp, r7
 8007f26:	b002      	add	sp, #8
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <PC_show_Keys>:

void PC_show_Keys() {
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  static uint8_t SSIDConfig[SSIDMaxLength];       // 21
  static uint8_t pwdConfig[pwdMaxLength];         // 22

  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 8007f30:	f000 fdba 	bl	8008aa8 <Check_USB_PowerOn>
 8007f34:	1e03      	subs	r3, r0, #0
 8007f36:	d005      	beq.n	8007f44 <PC_show_Keys+0x18>
    usb_out = true;
 8007f38:	4b01      	ldr	r3, [pc, #4]	@ (8007f40 <PC_show_Keys+0x14>)
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	701a      	strb	r2, [r3, #0]
 8007f3e:	e004      	b.n	8007f4a <PC_show_Keys+0x1e>
 8007f40:	200009cd 	.word	0x200009cd
  }
  else {
    usb_out = false;
 8007f44:	4bfd      	ldr	r3, [pc, #1012]	@ (800833c <PC_show_Keys+0x410>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 8007f4a:	4afd      	ldr	r2, [pc, #1012]	@ (8008340 <PC_show_Keys+0x414>)
 8007f4c:	4bfd      	ldr	r3, [pc, #1012]	@ (8008344 <PC_show_Keys+0x418>)
 8007f4e:	0011      	movs	r1, r2
 8007f50:	0018      	movs	r0, r3
 8007f52:	f01c fc97 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007f56:	4bf9      	ldr	r3, [pc, #996]	@ (800833c <PC_show_Keys+0x410>)
 8007f58:	781a      	ldrb	r2, [r3, #0]
 8007f5a:	4bfa      	ldr	r3, [pc, #1000]	@ (8008344 <PC_show_Keys+0x418>)
 8007f5c:	0011      	movs	r1, r2
 8007f5e:	0018      	movs	r0, r3
 8007f60:	f7ff ffc9 	bl	8007ef6 <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8007f64:	4bf8      	ldr	r3, [pc, #992]	@ (8008348 <PC_show_Keys+0x41c>)
 8007f66:	48f9      	ldr	r0, [pc, #996]	@ (800834c <PC_show_Keys+0x420>)
 8007f68:	220c      	movs	r2, #12
 8007f6a:	0019      	movs	r1, r3
 8007f6c:	f002 ff38 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8007f70:	4af5      	ldr	r2, [pc, #980]	@ (8008348 <PC_show_Keys+0x41c>)
 8007f72:	4bf7      	ldr	r3, [pc, #988]	@ (8008350 <PC_show_Keys+0x424>)
 8007f74:	0011      	movs	r1, r2
 8007f76:	0018      	movs	r0, r3
 8007f78:	f7fc ff4e 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "Box id --------------------------: %s\r\n", Buffer);
 8007f7c:	4af4      	ldr	r2, [pc, #976]	@ (8008350 <PC_show_Keys+0x424>)
 8007f7e:	49f5      	ldr	r1, [pc, #980]	@ (8008354 <PC_show_Keys+0x428>)
 8007f80:	4bf0      	ldr	r3, [pc, #960]	@ (8008344 <PC_show_Keys+0x418>)
 8007f82:	0018      	movs	r0, r3
 8007f84:	f01c fc7e 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007f88:	4bec      	ldr	r3, [pc, #944]	@ (800833c <PC_show_Keys+0x410>)
 8007f8a:	781a      	ldrb	r2, [r3, #0]
 8007f8c:	4bed      	ldr	r3, [pc, #948]	@ (8008344 <PC_show_Keys+0x418>)
 8007f8e:	0011      	movs	r1, r2
 8007f90:	0018      	movs	r0, r3
 8007f92:	f7ff ffb0 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8007f96:	4bf0      	ldr	r3, [pc, #960]	@ (8008358 <PC_show_Keys+0x42c>)
 8007f98:	48f0      	ldr	r0, [pc, #960]	@ (800835c <PC_show_Keys+0x430>)
 8007f9a:	220c      	movs	r2, #12
 8007f9c:	0019      	movs	r1, r3
 8007f9e:	f002 ff1f 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8007fa2:	4aed      	ldr	r2, [pc, #948]	@ (8008358 <PC_show_Keys+0x42c>)
 8007fa4:	4bea      	ldr	r3, [pc, #936]	@ (8008350 <PC_show_Keys+0x424>)
 8007fa6:	0011      	movs	r1, r2
 8007fa8:	0018      	movs	r0, r3
 8007faa:	f7fc ff35 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "01 - Temperature sensor id: -----: %s\r\n", Buffer);
 8007fae:	4ae8      	ldr	r2, [pc, #928]	@ (8008350 <PC_show_Keys+0x424>)
 8007fb0:	49eb      	ldr	r1, [pc, #940]	@ (8008360 <PC_show_Keys+0x434>)
 8007fb2:	4be4      	ldr	r3, [pc, #912]	@ (8008344 <PC_show_Keys+0x418>)
 8007fb4:	0018      	movs	r0, r3
 8007fb6:	f01c fc65 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007fba:	4be0      	ldr	r3, [pc, #896]	@ (800833c <PC_show_Keys+0x410>)
 8007fbc:	781a      	ldrb	r2, [r3, #0]
 8007fbe:	4be1      	ldr	r3, [pc, #900]	@ (8008344 <PC_show_Keys+0x418>)
 8007fc0:	0011      	movs	r1, r2
 8007fc2:	0018      	movs	r0, r3
 8007fc4:	f7ff ff97 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8007fc8:	4be6      	ldr	r3, [pc, #920]	@ (8008364 <PC_show_Keys+0x438>)
 8007fca:	48e7      	ldr	r0, [pc, #924]	@ (8008368 <PC_show_Keys+0x43c>)
 8007fcc:	220c      	movs	r2, #12
 8007fce:	0019      	movs	r1, r3
 8007fd0:	f002 ff06 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8007fd4:	4ae3      	ldr	r2, [pc, #908]	@ (8008364 <PC_show_Keys+0x438>)
 8007fd6:	4bde      	ldr	r3, [pc, #888]	@ (8008350 <PC_show_Keys+0x424>)
 8007fd8:	0011      	movs	r1, r2
 8007fda:	0018      	movs	r0, r3
 8007fdc:	f7fc ff1c 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "02 - Humidity sensor id ---------: %s\r\n", Buffer);
 8007fe0:	4adb      	ldr	r2, [pc, #876]	@ (8008350 <PC_show_Keys+0x424>)
 8007fe2:	49e2      	ldr	r1, [pc, #904]	@ (800836c <PC_show_Keys+0x440>)
 8007fe4:	4bd7      	ldr	r3, [pc, #860]	@ (8008344 <PC_show_Keys+0x418>)
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	f01c fc4c 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007fec:	4bd3      	ldr	r3, [pc, #844]	@ (800833c <PC_show_Keys+0x410>)
 8007fee:	781a      	ldrb	r2, [r3, #0]
 8007ff0:	4bd4      	ldr	r3, [pc, #848]	@ (8008344 <PC_show_Keys+0x418>)
 8007ff2:	0011      	movs	r1, r2
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	f7ff ff7e 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8007ffa:	4bdd      	ldr	r3, [pc, #884]	@ (8008370 <PC_show_Keys+0x444>)
 8007ffc:	48dd      	ldr	r0, [pc, #884]	@ (8008374 <PC_show_Keys+0x448>)
 8007ffe:	220c      	movs	r2, #12
 8008000:	0019      	movs	r1, r3
 8008002:	f002 feed 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008006:	4ada      	ldr	r2, [pc, #872]	@ (8008370 <PC_show_Keys+0x444>)
 8008008:	4bd1      	ldr	r3, [pc, #836]	@ (8008350 <PC_show_Keys+0x424>)
 800800a:	0011      	movs	r1, r2
 800800c:	0018      	movs	r0, r3
 800800e:	f7fc ff03 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "03 - NOx sensor id --------------: %s\r\n", Buffer);
 8008012:	4acf      	ldr	r2, [pc, #828]	@ (8008350 <PC_show_Keys+0x424>)
 8008014:	49d8      	ldr	r1, [pc, #864]	@ (8008378 <PC_show_Keys+0x44c>)
 8008016:	4bcb      	ldr	r3, [pc, #812]	@ (8008344 <PC_show_Keys+0x418>)
 8008018:	0018      	movs	r0, r3
 800801a:	f01c fc33 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800801e:	4bc7      	ldr	r3, [pc, #796]	@ (800833c <PC_show_Keys+0x410>)
 8008020:	781a      	ldrb	r2, [r3, #0]
 8008022:	4bc8      	ldr	r3, [pc, #800]	@ (8008344 <PC_show_Keys+0x418>)
 8008024:	0011      	movs	r1, r2
 8008026:	0018      	movs	r0, r3
 8008028:	f7ff ff65 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 800802c:	4bd3      	ldr	r3, [pc, #844]	@ (800837c <PC_show_Keys+0x450>)
 800802e:	48d4      	ldr	r0, [pc, #848]	@ (8008380 <PC_show_Keys+0x454>)
 8008030:	220c      	movs	r2, #12
 8008032:	0019      	movs	r1, r3
 8008034:	f002 fed4 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008038:	4ad0      	ldr	r2, [pc, #832]	@ (800837c <PC_show_Keys+0x450>)
 800803a:	4bc5      	ldr	r3, [pc, #788]	@ (8008350 <PC_show_Keys+0x424>)
 800803c:	0011      	movs	r1, r2
 800803e:	0018      	movs	r0, r3
 8008040:	f7fc feea 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "04 - VOC sensor id --------------: %s\r\n", Buffer);
 8008044:	4ac2      	ldr	r2, [pc, #776]	@ (8008350 <PC_show_Keys+0x424>)
 8008046:	49cf      	ldr	r1, [pc, #828]	@ (8008384 <PC_show_Keys+0x458>)
 8008048:	4bbe      	ldr	r3, [pc, #760]	@ (8008344 <PC_show_Keys+0x418>)
 800804a:	0018      	movs	r0, r3
 800804c:	f01c fc1a 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008050:	4bba      	ldr	r3, [pc, #744]	@ (800833c <PC_show_Keys+0x410>)
 8008052:	781a      	ldrb	r2, [r3, #0]
 8008054:	4bbb      	ldr	r3, [pc, #748]	@ (8008344 <PC_show_Keys+0x418>)
 8008056:	0011      	movs	r1, r2
 8008058:	0018      	movs	r0, r3
 800805a:	f7ff ff4c 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 800805e:	4bca      	ldr	r3, [pc, #808]	@ (8008388 <PC_show_Keys+0x45c>)
 8008060:	48ca      	ldr	r0, [pc, #808]	@ (800838c <PC_show_Keys+0x460>)
 8008062:	220c      	movs	r2, #12
 8008064:	0019      	movs	r1, r3
 8008066:	f002 febb 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 800806a:	4ac7      	ldr	r2, [pc, #796]	@ (8008388 <PC_show_Keys+0x45c>)
 800806c:	4bb8      	ldr	r3, [pc, #736]	@ (8008350 <PC_show_Keys+0x424>)
 800806e:	0011      	movs	r1, r2
 8008070:	0018      	movs	r0, r3
 8008072:	f7fc fed1 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "05 is former dBa unused\r\n");
 8008076:	4ac6      	ldr	r2, [pc, #792]	@ (8008390 <PC_show_Keys+0x464>)
 8008078:	4bb2      	ldr	r3, [pc, #712]	@ (8008344 <PC_show_Keys+0x418>)
 800807a:	0011      	movs	r1, r2
 800807c:	0018      	movs	r0, r3
 800807e:	f01c fc01 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008082:	4bae      	ldr	r3, [pc, #696]	@ (800833c <PC_show_Keys+0x410>)
 8008084:	781a      	ldrb	r2, [r3, #0]
 8008086:	4baf      	ldr	r3, [pc, #700]	@ (8008344 <PC_show_Keys+0x418>)
 8008088:	0011      	movs	r1, r2
 800808a:	0018      	movs	r0, r3
 800808c:	f7ff ff33 	bl	8007ef6 <PC_selectout>
  sprintf(msg, "05 - Air pressure sensor id -----: %s\r\n", Buffer);
 8008090:	4aaf      	ldr	r2, [pc, #700]	@ (8008350 <PC_show_Keys+0x424>)
 8008092:	49c0      	ldr	r1, [pc, #768]	@ (8008394 <PC_show_Keys+0x468>)
 8008094:	4bab      	ldr	r3, [pc, #684]	@ (8008344 <PC_show_Keys+0x418>)
 8008096:	0018      	movs	r0, r3
 8008098:	f01c fbf4 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800809c:	4ba7      	ldr	r3, [pc, #668]	@ (800833c <PC_show_Keys+0x410>)
 800809e:	781a      	ldrb	r2, [r3, #0]
 80080a0:	4ba8      	ldr	r3, [pc, #672]	@ (8008344 <PC_show_Keys+0x418>)
 80080a2:	0011      	movs	r1, r2
 80080a4:	0018      	movs	r0, r3
 80080a6:	f7ff ff26 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 80080aa:	4bbb      	ldr	r3, [pc, #748]	@ (8008398 <PC_show_Keys+0x46c>)
 80080ac:	48bb      	ldr	r0, [pc, #748]	@ (800839c <PC_show_Keys+0x470>)
 80080ae:	220c      	movs	r2, #12
 80080b0:	0019      	movs	r1, r3
 80080b2:	f002 fe95 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 80080b6:	4ab8      	ldr	r2, [pc, #736]	@ (8008398 <PC_show_Keys+0x46c>)
 80080b8:	4ba5      	ldr	r3, [pc, #660]	@ (8008350 <PC_show_Keys+0x424>)
 80080ba:	0011      	movs	r1, r2
 80080bc:	0018      	movs	r0, r3
 80080be:	f7fc feab 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "06 is former dBc\r\n");
 80080c2:	4ab7      	ldr	r2, [pc, #732]	@ (80083a0 <PC_show_Keys+0x474>)
 80080c4:	4b9f      	ldr	r3, [pc, #636]	@ (8008344 <PC_show_Keys+0x418>)
 80080c6:	0011      	movs	r1, r2
 80080c8:	0018      	movs	r0, r3
 80080ca:	f01c fbdb 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80080ce:	4b9b      	ldr	r3, [pc, #620]	@ (800833c <PC_show_Keys+0x410>)
 80080d0:	781a      	ldrb	r2, [r3, #0]
 80080d2:	4b9c      	ldr	r3, [pc, #624]	@ (8008344 <PC_show_Keys+0x418>)
 80080d4:	0011      	movs	r1, r2
 80080d6:	0018      	movs	r0, r3
 80080d8:	f7ff ff0d 	bl	8007ef6 <PC_selectout>
  sprintf(msg, "06 - Sound dBA sensor id --------: %s\r\n", Buffer);
 80080dc:	4a9c      	ldr	r2, [pc, #624]	@ (8008350 <PC_show_Keys+0x424>)
 80080de:	49b1      	ldr	r1, [pc, #708]	@ (80083a4 <PC_show_Keys+0x478>)
 80080e0:	4b98      	ldr	r3, [pc, #608]	@ (8008344 <PC_show_Keys+0x418>)
 80080e2:	0018      	movs	r0, r3
 80080e4:	f01c fbce 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80080e8:	4b94      	ldr	r3, [pc, #592]	@ (800833c <PC_show_Keys+0x410>)
 80080ea:	781a      	ldrb	r2, [r3, #0]
 80080ec:	4b95      	ldr	r3, [pc, #596]	@ (8008344 <PC_show_Keys+0x418>)
 80080ee:	0011      	movs	r1, r2
 80080f0:	0018      	movs	r0, r3
 80080f2:	f7ff ff00 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 80080f6:	4bac      	ldr	r3, [pc, #688]	@ (80083a8 <PC_show_Keys+0x47c>)
 80080f8:	48ac      	ldr	r0, [pc, #688]	@ (80083ac <PC_show_Keys+0x480>)
 80080fa:	220c      	movs	r2, #12
 80080fc:	0019      	movs	r1, r3
 80080fe:	f002 fe6f 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008102:	4aa9      	ldr	r2, [pc, #676]	@ (80083a8 <PC_show_Keys+0x47c>)
 8008104:	4b92      	ldr	r3, [pc, #584]	@ (8008350 <PC_show_Keys+0x424>)
 8008106:	0011      	movs	r1, r2
 8008108:	0018      	movs	r0, r3
 800810a:	f7fc fe85 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "07 - PM2p5 sensor id ------------: %s\r\n", Buffer);
 800810e:	4a90      	ldr	r2, [pc, #576]	@ (8008350 <PC_show_Keys+0x424>)
 8008110:	49a7      	ldr	r1, [pc, #668]	@ (80083b0 <PC_show_Keys+0x484>)
 8008112:	4b8c      	ldr	r3, [pc, #560]	@ (8008344 <PC_show_Keys+0x418>)
 8008114:	0018      	movs	r0, r3
 8008116:	f01c fbb5 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800811a:	4b88      	ldr	r3, [pc, #544]	@ (800833c <PC_show_Keys+0x410>)
 800811c:	781a      	ldrb	r2, [r3, #0]
 800811e:	4b89      	ldr	r3, [pc, #548]	@ (8008344 <PC_show_Keys+0x418>)
 8008120:	0011      	movs	r1, r2
 8008122:	0018      	movs	r0, r3
 8008124:	f7ff fee7 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008128:	4ba2      	ldr	r3, [pc, #648]	@ (80083b4 <PC_show_Keys+0x488>)
 800812a:	48a3      	ldr	r0, [pc, #652]	@ (80083b8 <PC_show_Keys+0x48c>)
 800812c:	220c      	movs	r2, #12
 800812e:	0019      	movs	r1, r3
 8008130:	f002 fe56 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8008134:	4a9f      	ldr	r2, [pc, #636]	@ (80083b4 <PC_show_Keys+0x488>)
 8008136:	4b86      	ldr	r3, [pc, #536]	@ (8008350 <PC_show_Keys+0x424>)
 8008138:	0011      	movs	r1, r2
 800813a:	0018      	movs	r0, r3
 800813c:	f7fc fe6c 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "08 - PM10 sensor id -------------: %s\r\n", Buffer);
 8008140:	4a83      	ldr	r2, [pc, #524]	@ (8008350 <PC_show_Keys+0x424>)
 8008142:	499e      	ldr	r1, [pc, #632]	@ (80083bc <PC_show_Keys+0x490>)
 8008144:	4b7f      	ldr	r3, [pc, #508]	@ (8008344 <PC_show_Keys+0x418>)
 8008146:	0018      	movs	r0, r3
 8008148:	f01c fb9c 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800814c:	4b7b      	ldr	r3, [pc, #492]	@ (800833c <PC_show_Keys+0x410>)
 800814e:	781a      	ldrb	r2, [r3, #0]
 8008150:	4b7c      	ldr	r3, [pc, #496]	@ (8008344 <PC_show_Keys+0x418>)
 8008152:	0011      	movs	r1, r2
 8008154:	0018      	movs	r0, r3
 8008156:	f7ff fece 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 800815a:	4b99      	ldr	r3, [pc, #612]	@ (80083c0 <PC_show_Keys+0x494>)
 800815c:	4899      	ldr	r0, [pc, #612]	@ (80083c4 <PC_show_Keys+0x498>)
 800815e:	220c      	movs	r2, #12
 8008160:	0019      	movs	r1, r3
 8008162:	f002 fe3d 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 8008166:	4a96      	ldr	r2, [pc, #600]	@ (80083c0 <PC_show_Keys+0x494>)
 8008168:	4b79      	ldr	r3, [pc, #484]	@ (8008350 <PC_show_Keys+0x424>)
 800816a:	0011      	movs	r1, r2
 800816c:	0018      	movs	r0, r3
 800816e:	f7fc fe53 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "09 - Battery voltage sensor id --: %s\r\n", Buffer);
 8008172:	4a77      	ldr	r2, [pc, #476]	@ (8008350 <PC_show_Keys+0x424>)
 8008174:	4994      	ldr	r1, [pc, #592]	@ (80083c8 <PC_show_Keys+0x49c>)
 8008176:	4b73      	ldr	r3, [pc, #460]	@ (8008344 <PC_show_Keys+0x418>)
 8008178:	0018      	movs	r0, r3
 800817a:	f01c fb83 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800817e:	4b6f      	ldr	r3, [pc, #444]	@ (800833c <PC_show_Keys+0x410>)
 8008180:	781a      	ldrb	r2, [r3, #0]
 8008182:	4b70      	ldr	r3, [pc, #448]	@ (8008344 <PC_show_Keys+0x418>)
 8008184:	0011      	movs	r1, r2
 8008186:	0018      	movs	r0, r3
 8008188:	f7ff feb5 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 800818c:	4b8f      	ldr	r3, [pc, #572]	@ (80083cc <PC_show_Keys+0x4a0>)
 800818e:	4890      	ldr	r0, [pc, #576]	@ (80083d0 <PC_show_Keys+0x4a4>)
 8008190:	220c      	movs	r2, #12
 8008192:	0019      	movs	r1, r3
 8008194:	f002 fe24 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008198:	4a8c      	ldr	r2, [pc, #560]	@ (80083cc <PC_show_Keys+0x4a0>)
 800819a:	4b6d      	ldr	r3, [pc, #436]	@ (8008350 <PC_show_Keys+0x424>)
 800819c:	0011      	movs	r1, r2
 800819e:	0018      	movs	r0, r3
 80081a0:	f7fc fe3a 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "10 - Solar voltage sensor id ----: %s\r\n", Buffer);
 80081a4:	4a6a      	ldr	r2, [pc, #424]	@ (8008350 <PC_show_Keys+0x424>)
 80081a6:	498b      	ldr	r1, [pc, #556]	@ (80083d4 <PC_show_Keys+0x4a8>)
 80081a8:	4b66      	ldr	r3, [pc, #408]	@ (8008344 <PC_show_Keys+0x418>)
 80081aa:	0018      	movs	r0, r3
 80081ac:	f01c fb6a 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80081b0:	4b62      	ldr	r3, [pc, #392]	@ (800833c <PC_show_Keys+0x410>)
 80081b2:	781a      	ldrb	r2, [r3, #0]
 80081b4:	4b63      	ldr	r3, [pc, #396]	@ (8008344 <PC_show_Keys+0x418>)
 80081b6:	0011      	movs	r1, r2
 80081b8:	0018      	movs	r0, r3
 80081ba:	f7ff fe9c 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 80081be:	4b86      	ldr	r3, [pc, #536]	@ (80083d8 <PC_show_Keys+0x4ac>)
 80081c0:	4886      	ldr	r0, [pc, #536]	@ (80083dc <PC_show_Keys+0x4b0>)
 80081c2:	220c      	movs	r2, #12
 80081c4:	0019      	movs	r1, r3
 80081c6:	f002 fe0b 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 80081ca:	4a83      	ldr	r2, [pc, #524]	@ (80083d8 <PC_show_Keys+0x4ac>)
 80081cc:	4b60      	ldr	r3, [pc, #384]	@ (8008350 <PC_show_Keys+0x424>)
 80081ce:	0011      	movs	r1, r2
 80081d0:	0018      	movs	r0, r3
 80081d2:	f7fc fe21 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "11 - Charger status (not used) --: %s\r\n", Buffer);
 80081d6:	4a5e      	ldr	r2, [pc, #376]	@ (8008350 <PC_show_Keys+0x424>)
 80081d8:	4981      	ldr	r1, [pc, #516]	@ (80083e0 <PC_show_Keys+0x4b4>)
 80081da:	4b5a      	ldr	r3, [pc, #360]	@ (8008344 <PC_show_Keys+0x418>)
 80081dc:	0018      	movs	r0, r3
 80081de:	f01c fb51 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80081e2:	4b56      	ldr	r3, [pc, #344]	@ (800833c <PC_show_Keys+0x410>)
 80081e4:	781a      	ldrb	r2, [r3, #0]
 80081e6:	4b57      	ldr	r3, [pc, #348]	@ (8008344 <PC_show_Keys+0x418>)
 80081e8:	0011      	movs	r1, r2
 80081ea:	0018      	movs	r0, r3
 80081ec:	f7ff fe83 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80081f0:	4b7c      	ldr	r3, [pc, #496]	@ (80083e4 <PC_show_Keys+0x4b8>)
 80081f2:	487d      	ldr	r0, [pc, #500]	@ (80083e8 <PC_show_Keys+0x4bc>)
 80081f4:	2220      	movs	r2, #32
 80081f6:	0019      	movs	r1, r3
 80081f8:	f002 fdf2 	bl	800ade0 <ReadUint8ArrayEEprom>
  sprintf(msg, "12 - Stored name ----------------: ");
 80081fc:	4a7b      	ldr	r2, [pc, #492]	@ (80083ec <PC_show_Keys+0x4c0>)
 80081fe:	4b51      	ldr	r3, [pc, #324]	@ (8008344 <PC_show_Keys+0x418>)
 8008200:	0011      	movs	r1, r2
 8008202:	0018      	movs	r0, r3
 8008204:	f01c fb3e 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008208:	4b4c      	ldr	r3, [pc, #304]	@ (800833c <PC_show_Keys+0x410>)
 800820a:	781a      	ldrb	r2, [r3, #0]
 800820c:	4b4d      	ldr	r3, [pc, #308]	@ (8008344 <PC_show_Keys+0x418>)
 800820e:	0011      	movs	r1, r2
 8008210:	0018      	movs	r0, r3
 8008212:	f7ff fe70 	bl	8007ef6 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008216:	4a73      	ldr	r2, [pc, #460]	@ (80083e4 <PC_show_Keys+0x4b8>)
 8008218:	4975      	ldr	r1, [pc, #468]	@ (80083f0 <PC_show_Keys+0x4c4>)
 800821a:	4b4a      	ldr	r3, [pc, #296]	@ (8008344 <PC_show_Keys+0x418>)
 800821c:	0018      	movs	r0, r3
 800821e:	f01c fb31 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008222:	4b46      	ldr	r3, [pc, #280]	@ (800833c <PC_show_Keys+0x410>)
 8008224:	781a      	ldrb	r2, [r3, #0]
 8008226:	4b47      	ldr	r3, [pc, #284]	@ (8008344 <PC_show_Keys+0x418>)
 8008228:	0011      	movs	r1, r2
 800822a:	0018      	movs	r0, r3
 800822c:	f7ff fe63 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 8008230:	4b70      	ldr	r3, [pc, #448]	@ (80083f4 <PC_show_Keys+0x4c8>)
 8008232:	4871      	ldr	r0, [pc, #452]	@ (80083f8 <PC_show_Keys+0x4cc>)
 8008234:	220c      	movs	r2, #12
 8008236:	0019      	movs	r1, r3
 8008238:	f002 fdd2 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 800823c:	4a6d      	ldr	r2, [pc, #436]	@ (80083f4 <PC_show_Keys+0x4c8>)
 800823e:	4b44      	ldr	r3, [pc, #272]	@ (8008350 <PC_show_Keys+0x424>)
 8008240:	0011      	movs	r1, r2
 8008242:	0018      	movs	r0, r3
 8008244:	f7fc fde8 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "13 - PM1p0 sensor id ------------: %s\r\n", Buffer);
 8008248:	4a41      	ldr	r2, [pc, #260]	@ (8008350 <PC_show_Keys+0x424>)
 800824a:	496c      	ldr	r1, [pc, #432]	@ (80083fc <PC_show_Keys+0x4d0>)
 800824c:	4b3d      	ldr	r3, [pc, #244]	@ (8008344 <PC_show_Keys+0x418>)
 800824e:	0018      	movs	r0, r3
 8008250:	f01c fb18 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008254:	4b39      	ldr	r3, [pc, #228]	@ (800833c <PC_show_Keys+0x410>)
 8008256:	781a      	ldrb	r2, [r3, #0]
 8008258:	4b3a      	ldr	r3, [pc, #232]	@ (8008344 <PC_show_Keys+0x418>)
 800825a:	0011      	movs	r1, r2
 800825c:	0018      	movs	r0, r3
 800825e:	f7ff fe4a 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 8008262:	4b67      	ldr	r3, [pc, #412]	@ (8008400 <PC_show_Keys+0x4d4>)
 8008264:	4867      	ldr	r0, [pc, #412]	@ (8008404 <PC_show_Keys+0x4d8>)
 8008266:	220c      	movs	r2, #12
 8008268:	0019      	movs	r1, r3
 800826a:	f002 fdb9 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 800826e:	4a64      	ldr	r2, [pc, #400]	@ (8008400 <PC_show_Keys+0x4d4>)
 8008270:	4b37      	ldr	r3, [pc, #220]	@ (8008350 <PC_show_Keys+0x424>)
 8008272:	0011      	movs	r1, r2
 8008274:	0018      	movs	r0, r3
 8008276:	f7fc fdcf 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "14 - PM4p0 sensor id ------------: %s\r\n", Buffer);
 800827a:	4a35      	ldr	r2, [pc, #212]	@ (8008350 <PC_show_Keys+0x424>)
 800827c:	4962      	ldr	r1, [pc, #392]	@ (8008408 <PC_show_Keys+0x4dc>)
 800827e:	4b31      	ldr	r3, [pc, #196]	@ (8008344 <PC_show_Keys+0x418>)
 8008280:	0018      	movs	r0, r3
 8008282:	f01c faff 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008286:	4b2d      	ldr	r3, [pc, #180]	@ (800833c <PC_show_Keys+0x410>)
 8008288:	781a      	ldrb	r2, [r3, #0]
 800828a:	4b2e      	ldr	r3, [pc, #184]	@ (8008344 <PC_show_Keys+0x418>)
 800828c:	0011      	movs	r1, r2
 800828e:	0018      	movs	r0, r3
 8008290:	f7ff fe31 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 8008294:	4b5d      	ldr	r3, [pc, #372]	@ (800840c <PC_show_Keys+0x4e0>)
 8008296:	485e      	ldr	r0, [pc, #376]	@ (8008410 <PC_show_Keys+0x4e4>)
 8008298:	220c      	movs	r2, #12
 800829a:	0019      	movs	r1, r3
 800829c:	f002 fda0 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 80082a0:	4a5a      	ldr	r2, [pc, #360]	@ (800840c <PC_show_Keys+0x4e0>)
 80082a2:	4b2b      	ldr	r3, [pc, #172]	@ (8008350 <PC_show_Keys+0x424>)
 80082a4:	0011      	movs	r1, r2
 80082a6:	0018      	movs	r0, r3
 80082a8:	f7fc fdb6 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "15 - AHT2x Temperature sensor id : %s\r\n", Buffer);
 80082ac:	4a28      	ldr	r2, [pc, #160]	@ (8008350 <PC_show_Keys+0x424>)
 80082ae:	4959      	ldr	r1, [pc, #356]	@ (8008414 <PC_show_Keys+0x4e8>)
 80082b0:	4b24      	ldr	r3, [pc, #144]	@ (8008344 <PC_show_Keys+0x418>)
 80082b2:	0018      	movs	r0, r3
 80082b4:	f01c fae6 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80082b8:	4b20      	ldr	r3, [pc, #128]	@ (800833c <PC_show_Keys+0x410>)
 80082ba:	781a      	ldrb	r2, [r3, #0]
 80082bc:	4b21      	ldr	r3, [pc, #132]	@ (8008344 <PC_show_Keys+0x418>)
 80082be:	0011      	movs	r1, r2
 80082c0:	0018      	movs	r0, r3
 80082c2:	f7ff fe18 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 80082c6:	4b54      	ldr	r3, [pc, #336]	@ (8008418 <PC_show_Keys+0x4ec>)
 80082c8:	4854      	ldr	r0, [pc, #336]	@ (800841c <PC_show_Keys+0x4f0>)
 80082ca:	220c      	movs	r2, #12
 80082cc:	0019      	movs	r1, r3
 80082ce:	f002 fd87 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 80082d2:	4a51      	ldr	r2, [pc, #324]	@ (8008418 <PC_show_Keys+0x4ec>)
 80082d4:	4b1e      	ldr	r3, [pc, #120]	@ (8008350 <PC_show_Keys+0x424>)
 80082d6:	0011      	movs	r1, r2
 80082d8:	0018      	movs	r0, r3
 80082da:	f7fc fd9d 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "16 - AHT2x Humidity sensor id ---: %s\r\n", Buffer);
 80082de:	4a1c      	ldr	r2, [pc, #112]	@ (8008350 <PC_show_Keys+0x424>)
 80082e0:	494f      	ldr	r1, [pc, #316]	@ (8008420 <PC_show_Keys+0x4f4>)
 80082e2:	4b18      	ldr	r3, [pc, #96]	@ (8008344 <PC_show_Keys+0x418>)
 80082e4:	0018      	movs	r0, r3
 80082e6:	f01c facd 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80082ea:	4b14      	ldr	r3, [pc, #80]	@ (800833c <PC_show_Keys+0x410>)
 80082ec:	781a      	ldrb	r2, [r3, #0]
 80082ee:	4b15      	ldr	r3, [pc, #84]	@ (8008344 <PC_show_Keys+0x418>)
 80082f0:	0011      	movs	r1, r2
 80082f2:	0018      	movs	r0, r3
 80082f4:	f7ff fdff 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 80082f8:	4b4a      	ldr	r3, [pc, #296]	@ (8008424 <PC_show_Keys+0x4f8>)
 80082fa:	484b      	ldr	r0, [pc, #300]	@ (8008428 <PC_show_Keys+0x4fc>)
 80082fc:	220c      	movs	r2, #12
 80082fe:	0019      	movs	r1, r3
 8008300:	f002 fd6e 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008304:	4a47      	ldr	r2, [pc, #284]	@ (8008424 <PC_show_Keys+0x4f8>)
 8008306:	4b12      	ldr	r3, [pc, #72]	@ (8008350 <PC_show_Keys+0x424>)
 8008308:	0011      	movs	r1, r2
 800830a:	0018      	movs	r0, r3
 800830c:	f7fc fd84 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "17 - BMP280 Temperature sensor id: %s\r\n", Buffer);
 8008310:	4a0f      	ldr	r2, [pc, #60]	@ (8008350 <PC_show_Keys+0x424>)
 8008312:	4946      	ldr	r1, [pc, #280]	@ (800842c <PC_show_Keys+0x500>)
 8008314:	4b0b      	ldr	r3, [pc, #44]	@ (8008344 <PC_show_Keys+0x418>)
 8008316:	0018      	movs	r0, r3
 8008318:	f01c fab4 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800831c:	4b07      	ldr	r3, [pc, #28]	@ (800833c <PC_show_Keys+0x410>)
 800831e:	781a      	ldrb	r2, [r3, #0]
 8008320:	4b08      	ldr	r3, [pc, #32]	@ (8008344 <PC_show_Keys+0x418>)
 8008322:	0011      	movs	r1, r2
 8008324:	0018      	movs	r0, r3
 8008326:	f7ff fde6 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 800832a:	4b41      	ldr	r3, [pc, #260]	@ (8008430 <PC_show_Keys+0x504>)
 800832c:	4841      	ldr	r0, [pc, #260]	@ (8008434 <PC_show_Keys+0x508>)
 800832e:	220c      	movs	r2, #12
 8008330:	0019      	movs	r1, r3
 8008332:	f002 fd55 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008336:	4a3e      	ldr	r2, [pc, #248]	@ (8008430 <PC_show_Keys+0x504>)
 8008338:	e07e      	b.n	8008438 <PC_show_Keys+0x50c>
 800833a:	46c0      	nop			@ (mov r8, r8)
 800833c:	200009cd 	.word	0x200009cd
 8008340:	0802a11c 	.word	0x0802a11c
 8008344:	200009d0 	.word	0x200009d0
 8008348:	20000a18 	.word	0x20000a18
 800834c:	08080000 	.word	0x08080000
 8008350:	20000a24 	.word	0x20000a24
 8008354:	0802a138 	.word	0x0802a138
 8008358:	20000a40 	.word	0x20000a40
 800835c:	0808000c 	.word	0x0808000c
 8008360:	0802a160 	.word	0x0802a160
 8008364:	20000a4c 	.word	0x20000a4c
 8008368:	08080018 	.word	0x08080018
 800836c:	0802a188 	.word	0x0802a188
 8008370:	20000a58 	.word	0x20000a58
 8008374:	08080024 	.word	0x08080024
 8008378:	0802a1b0 	.word	0x0802a1b0
 800837c:	20000a64 	.word	0x20000a64
 8008380:	08080030 	.word	0x08080030
 8008384:	0802a1d8 	.word	0x0802a1d8
 8008388:	20000a70 	.word	0x20000a70
 800838c:	0808003c 	.word	0x0808003c
 8008390:	0802a200 	.word	0x0802a200
 8008394:	0802a21c 	.word	0x0802a21c
 8008398:	20000a7c 	.word	0x20000a7c
 800839c:	08080048 	.word	0x08080048
 80083a0:	0802a244 	.word	0x0802a244
 80083a4:	0802a258 	.word	0x0802a258
 80083a8:	20000a88 	.word	0x20000a88
 80083ac:	08080054 	.word	0x08080054
 80083b0:	0802a280 	.word	0x0802a280
 80083b4:	20000a94 	.word	0x20000a94
 80083b8:	08080060 	.word	0x08080060
 80083bc:	0802a2a8 	.word	0x0802a2a8
 80083c0:	20000aa0 	.word	0x20000aa0
 80083c4:	0808006c 	.word	0x0808006c
 80083c8:	0802a2d0 	.word	0x0802a2d0
 80083cc:	20000aac 	.word	0x20000aac
 80083d0:	08080078 	.word	0x08080078
 80083d4:	0802a2f8 	.word	0x0802a2f8
 80083d8:	20000ab8 	.word	0x20000ab8
 80083dc:	08080084 	.word	0x08080084
 80083e0:	0802a320 	.word	0x0802a320
 80083e4:	20000ac4 	.word	0x20000ac4
 80083e8:	08080090 	.word	0x08080090
 80083ec:	0802a348 	.word	0x0802a348
 80083f0:	0802a36c 	.word	0x0802a36c
 80083f4:	20000ae4 	.word	0x20000ae4
 80083f8:	080800b0 	.word	0x080800b0
 80083fc:	0802a374 	.word	0x0802a374
 8008400:	20000af0 	.word	0x20000af0
 8008404:	080800bc 	.word	0x080800bc
 8008408:	0802a39c 	.word	0x0802a39c
 800840c:	20000afc 	.word	0x20000afc
 8008410:	080800c8 	.word	0x080800c8
 8008414:	0802a3c4 	.word	0x0802a3c4
 8008418:	20000b08 	.word	0x20000b08
 800841c:	080800d4 	.word	0x080800d4
 8008420:	0802a3ec 	.word	0x0802a3ec
 8008424:	20000b14 	.word	0x20000b14
 8008428:	080800e0 	.word	0x080800e0
 800842c:	0802a414 	.word	0x0802a414
 8008430:	20000b20 	.word	0x20000b20
 8008434:	080800ec 	.word	0x080800ec
 8008438:	4b41      	ldr	r3, [pc, #260]	@ (8008540 <PC_show_Keys+0x614>)
 800843a:	0011      	movs	r1, r2
 800843c:	0018      	movs	r0, r3
 800843e:	f7fc fceb 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "18 - ENS160 AQI sensor id -------: %s\r\n", Buffer);
 8008442:	4a3f      	ldr	r2, [pc, #252]	@ (8008540 <PC_show_Keys+0x614>)
 8008444:	493f      	ldr	r1, [pc, #252]	@ (8008544 <PC_show_Keys+0x618>)
 8008446:	4b40      	ldr	r3, [pc, #256]	@ (8008548 <PC_show_Keys+0x61c>)
 8008448:	0018      	movs	r0, r3
 800844a:	f01c fa1b 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800844e:	4b3f      	ldr	r3, [pc, #252]	@ (800854c <PC_show_Keys+0x620>)
 8008450:	781a      	ldrb	r2, [r3, #0]
 8008452:	4b3d      	ldr	r3, [pc, #244]	@ (8008548 <PC_show_Keys+0x61c>)
 8008454:	0011      	movs	r1, r2
 8008456:	0018      	movs	r0, r3
 8008458:	f7ff fd4d 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 800845c:	4b3c      	ldr	r3, [pc, #240]	@ (8008550 <PC_show_Keys+0x624>)
 800845e:	483d      	ldr	r0, [pc, #244]	@ (8008554 <PC_show_Keys+0x628>)
 8008460:	220c      	movs	r2, #12
 8008462:	0019      	movs	r1, r3
 8008464:	f002 fcbc 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8008468:	4a39      	ldr	r2, [pc, #228]	@ (8008550 <PC_show_Keys+0x624>)
 800846a:	4b35      	ldr	r3, [pc, #212]	@ (8008540 <PC_show_Keys+0x614>)
 800846c:	0011      	movs	r1, r2
 800846e:	0018      	movs	r0, r3
 8008470:	f7fc fcd2 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "19 - ENS160 TVOC sensor id ------: %s\r\n", Buffer);
 8008474:	4a32      	ldr	r2, [pc, #200]	@ (8008540 <PC_show_Keys+0x614>)
 8008476:	4938      	ldr	r1, [pc, #224]	@ (8008558 <PC_show_Keys+0x62c>)
 8008478:	4b33      	ldr	r3, [pc, #204]	@ (8008548 <PC_show_Keys+0x61c>)
 800847a:	0018      	movs	r0, r3
 800847c:	f01c fa02 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008480:	4b32      	ldr	r3, [pc, #200]	@ (800854c <PC_show_Keys+0x620>)
 8008482:	781a      	ldrb	r2, [r3, #0]
 8008484:	4b30      	ldr	r3, [pc, #192]	@ (8008548 <PC_show_Keys+0x61c>)
 8008486:	0011      	movs	r1, r2
 8008488:	0018      	movs	r0, r3
 800848a:	f7ff fd34 	bl	8007ef6 <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 800848e:	4b33      	ldr	r3, [pc, #204]	@ (800855c <PC_show_Keys+0x630>)
 8008490:	4833      	ldr	r0, [pc, #204]	@ (8008560 <PC_show_Keys+0x634>)
 8008492:	220c      	movs	r2, #12
 8008494:	0019      	movs	r1, r3
 8008496:	f002 fca3 	bl	800ade0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 800849a:	4a30      	ldr	r2, [pc, #192]	@ (800855c <PC_show_Keys+0x630>)
 800849c:	4b28      	ldr	r3, [pc, #160]	@ (8008540 <PC_show_Keys+0x614>)
 800849e:	0011      	movs	r1, r2
 80084a0:	0018      	movs	r0, r3
 80084a2:	f7fc fcb9 	bl	8004e18 <uint8ArrayToString>
  sprintf(msg, "20 - ENS160 eCO2 sensor id ------: %s\r\n", Buffer);
 80084a6:	4a26      	ldr	r2, [pc, #152]	@ (8008540 <PC_show_Keys+0x614>)
 80084a8:	492e      	ldr	r1, [pc, #184]	@ (8008564 <PC_show_Keys+0x638>)
 80084aa:	4b27      	ldr	r3, [pc, #156]	@ (8008548 <PC_show_Keys+0x61c>)
 80084ac:	0018      	movs	r0, r3
 80084ae:	f01c f9e9 	bl	8024884 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80084b2:	4b26      	ldr	r3, [pc, #152]	@ (800854c <PC_show_Keys+0x620>)
 80084b4:	781a      	ldrb	r2, [r3, #0]
 80084b6:	4b24      	ldr	r3, [pc, #144]	@ (8008548 <PC_show_Keys+0x61c>)
 80084b8:	0011      	movs	r1, r2
 80084ba:	0018      	movs	r0, r3
 80084bc:	f7ff fd1b 	bl	8007ef6 <PC_selectout>

  printf_USB("\r\nOnly the last two nibbles are necessary.\r\n");
 80084c0:	4b29      	ldr	r3, [pc, #164]	@ (8008568 <PC_show_Keys+0x63c>)
 80084c2:	0018      	movs	r0, r3
 80084c4:	f7ff fcf2 	bl	8007eac <printf_USB>
  HAL_Delay(10);
 80084c8:	200a      	movs	r0, #10
 80084ca:	f00a fe39 	bl	8013140 <HAL_Delay>
  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 80084ce:	4b27      	ldr	r3, [pc, #156]	@ (800856c <PC_show_Keys+0x640>)
 80084d0:	0018      	movs	r0, r3
 80084d2:	f7ff fceb 	bl	8007eac <printf_USB>
  HAL_Delay(10);
 80084d6:	200a      	movs	r0, #10
 80084d8:	f00a fe32 	bl	8013140 <HAL_Delay>
  printf_USB("Command example for air pressure => #05,6a\r\n");
 80084dc:	4b24      	ldr	r3, [pc, #144]	@ (8008570 <PC_show_Keys+0x644>)
 80084de:	0018      	movs	r0, r3
 80084e0:	f7ff fce4 	bl	8007eac <printf_USB>
  HAL_Delay(10);
 80084e4:	200a      	movs	r0, #10
 80084e6:	f00a fe2b 	bl	8013140 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 80084ea:	4b22      	ldr	r3, [pc, #136]	@ (8008574 <PC_show_Keys+0x648>)
 80084ec:	0018      	movs	r0, r3
 80084ee:	f7ff fcdd 	bl	8007eac <printf_USB>
  HAL_Delay(10);
 80084f2:	200a      	movs	r0, #10
 80084f4:	f00a fe24 	bl	8013140 <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 80084f8:	4b1f      	ldr	r3, [pc, #124]	@ (8008578 <PC_show_Keys+0x64c>)
 80084fa:	0018      	movs	r0, r3
 80084fc:	f7ff fcd6 	bl	8007eac <printf_USB>
  HAL_Delay(10);
 8008500:	200a      	movs	r0, #10
 8008502:	f00a fe1d 	bl	8013140 <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 8008506:	4b1d      	ldr	r3, [pc, #116]	@ (800857c <PC_show_Keys+0x650>)
 8008508:	0018      	movs	r0, r3
 800850a:	f7ff fccf 	bl	8007eac <printf_USB>
  HAL_Delay(10);
 800850e:	200a      	movs	r0, #10
 8008510:	f00a fe16 	bl	8013140 <HAL_Delay>
  printf_USB(" $05,67af09374cdef30007b35055\r\n");
 8008514:	4b1a      	ldr	r3, [pc, #104]	@ (8008580 <PC_show_Keys+0x654>)
 8008516:	0018      	movs	r0, r3
 8008518:	f7ff fcc8 	bl	8007eac <printf_USB>
  HAL_Delay(10);
 800851c:	200a      	movs	r0, #10
 800851e:	f00a fe0f 	bl	8013140 <HAL_Delay>
  if (!usb_out) {
 8008522:	4b0a      	ldr	r3, [pc, #40]	@ (800854c <PC_show_Keys+0x620>)
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	2201      	movs	r2, #1
 8008528:	4053      	eors	r3, r2
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <PC_show_Keys+0x60c>
    printf("A key can only be changed by USB input or the configuration programm.\r\n");
 8008530:	4b14      	ldr	r3, [pc, #80]	@ (8008584 <PC_show_Keys+0x658>)
 8008532:	0018      	movs	r0, r3
 8008534:	f01c f99c 	bl	8024870 <puts>
  }
}
 8008538:	46c0      	nop			@ (mov r8, r8)
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	46c0      	nop			@ (mov r8, r8)
 8008540:	20000a24 	.word	0x20000a24
 8008544:	0802a43c 	.word	0x0802a43c
 8008548:	200009d0 	.word	0x200009d0
 800854c:	200009cd 	.word	0x200009cd
 8008550:	20000b2c 	.word	0x20000b2c
 8008554:	080800f8 	.word	0x080800f8
 8008558:	0802a464 	.word	0x0802a464
 800855c:	20000b38 	.word	0x20000b38
 8008560:	08080104 	.word	0x08080104
 8008564:	0802a48c 	.word	0x0802a48c
 8008568:	0802a4b4 	.word	0x0802a4b4
 800856c:	0802a4e4 	.word	0x0802a4e4
 8008570:	0802a4fc 	.word	0x0802a4fc
 8008574:	0802a52c 	.word	0x0802a52c
 8008578:	0802a568 	.word	0x0802a568
 800857c:	0802a5a0 	.word	0x0802a5a0
 8008580:	0802a5d4 	.word	0x0802a5d4
 8008584:	0802a5f4 	.word	0x0802a5f4

08008588 <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	4b1c      	ldr	r3, [pc, #112]	@ (8008608 <ascii_to_uint8+0x80>)
 8008598:	18d3      	adds	r3, r2, r3
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	001a      	movs	r2, r3
 800859e:	2304      	movs	r3, #4
 80085a0:	4013      	ands	r3, r2
 80085a2:	d00a      	beq.n	80085ba <ascii_to_uint8+0x32>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	3301      	adds	r3, #1
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	4b16      	ldr	r3, [pc, #88]	@ (8008608 <ascii_to_uint8+0x80>)
 80085ae:	18d3      	adds	r3, r2, r3
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	001a      	movs	r2, r3
 80085b4:	2304      	movs	r3, #4
 80085b6:	4013      	ands	r3, r2
 80085b8:	d105      	bne.n	80085c6 <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 80085ba:	4b14      	ldr	r3, [pc, #80]	@ (800860c <ascii_to_uint8+0x84>)
 80085bc:	0018      	movs	r0, r3
 80085be:	f7ff fc75 	bl	8007eac <printf_USB>
    return 100;
 80085c2:	2364      	movs	r3, #100	@ 0x64
 80085c4:	e01c      	b.n	8008600 <ascii_to_uint8+0x78>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	1c1a      	adds	r2, r3, #0
 80085cc:	0092      	lsls	r2, r2, #2
 80085ce:	18d3      	adds	r3, r2, r3
 80085d0:	18db      	adds	r3, r3, r3
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3301      	adds	r3, #1
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	18d3      	adds	r3, r2, r3
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	210f      	movs	r1, #15
 80085e0:	187b      	adds	r3, r7, r1
 80085e2:	3a10      	subs	r2, #16
 80085e4:	701a      	strb	r2, [r3, #0]
  if (value > 20) {
 80085e6:	187b      	adds	r3, r7, r1
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	2b14      	cmp	r3, #20
 80085ec:	d905      	bls.n	80085fa <ascii_to_uint8+0x72>
    printf_USB("Error: value out of range\r\n");
 80085ee:	4b08      	ldr	r3, [pc, #32]	@ (8008610 <ascii_to_uint8+0x88>)
 80085f0:	0018      	movs	r0, r3
 80085f2:	f7ff fc5b 	bl	8007eac <printf_USB>
    return 100;
 80085f6:	2364      	movs	r3, #100	@ 0x64
 80085f8:	e002      	b.n	8008600 <ascii_to_uint8+0x78>
  }
  return (uint8_t)value;
 80085fa:	230f      	movs	r3, #15
 80085fc:	18fb      	adds	r3, r7, r3
 80085fe:	781b      	ldrb	r3, [r3, #0]
}
 8008600:	0018      	movs	r0, r3
 8008602:	46bd      	mov	sp, r7
 8008604:	b004      	add	sp, #16
 8008606:	bd80      	pop	{r7, pc}
 8008608:	0802d230 	.word	0x0802d230
 800860c:	0802a63c 	.word	0x0802a63c
 8008610:	0802a664 	.word	0x0802a664

08008614 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8008614:	b590      	push	{r4, r7, lr}
 8008616:	b0c5      	sub	sp, #276	@ 0x114
 8008618:	af3e      	add	r7, sp, #248	@ 0xf8
 800861a:	6078      	str	r0, [r7, #4]
  static uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 800861c:	f019 f87e 	bl	802171c <GetUsbRxDataSize>
 8008620:	0003      	movs	r3, r0
 8008622:	613b      	str	r3, [r7, #16]
  static uint8_t r = 0;
//  uint8_t* message;
  static char Buffer[24];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2124      	movs	r1, #36	@ 0x24
 8008628:	0018      	movs	r0, r3
 800862a:	f01c fa99 	bl	8024b60 <strchr>
 800862e:	0003      	movs	r3, r0
 8008630:	60fb      	str	r3, [r7, #12]
  if ((length == 1) && (message != NULL) && (len != 28)){
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d10f      	bne.n	8008658 <Process_USB_input+0x44>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00c      	beq.n	8008658 <Process_USB_input+0x44>
 800863e:	4baf      	ldr	r3, [pc, #700]	@ (80088fc <Process_USB_input+0x2e8>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b1c      	cmp	r3, #28
 8008644:	d008      	beq.n	8008658 <Process_USB_input+0x44>
      Debug("Switching to input length of 28 for full opensensemap keylength");
 8008646:	4aae      	ldr	r2, [pc, #696]	@ (8008900 <Process_USB_input+0x2ec>)
 8008648:	4bae      	ldr	r3, [pc, #696]	@ (8008904 <Process_USB_input+0x2f0>)
 800864a:	0019      	movs	r1, r3
 800864c:	2003      	movs	r0, #3
 800864e:	f00a f837 	bl	80126c0 <CreateLine>
      len = 28;
 8008652:	4baa      	ldr	r3, [pc, #680]	@ (80088fc <Process_USB_input+0x2e8>)
 8008654:	221c      	movs	r2, #28
 8008656:	601a      	str	r2, [r3, #0]
  }
  if (length > len) {
 8008658:	4ba8      	ldr	r3, [pc, #672]	@ (80088fc <Process_USB_input+0x2e8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	429a      	cmp	r2, r3
 8008660:	d800      	bhi.n	8008664 <Process_USB_input+0x50>
 8008662:	e133      	b.n	80088cc <Process_USB_input+0x2b8>
//    printf_USB("minimum required USB input reached: %s\r\n", (const char*)data);
    printf_USB("USB input: %s\r\n", (const char*)data);
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	4ba8      	ldr	r3, [pc, #672]	@ (8008908 <Process_USB_input+0x2f4>)
 8008668:	0011      	movs	r1, r2
 800866a:	0018      	movs	r0, r3
 800866c:	f7ff fc1e 	bl	8007eac <printf_USB>
    message = (unsigned char*)data;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	60fb      	str	r3, [r7, #12]
    if (message[0] == '$') {
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b24      	cmp	r3, #36	@ 0x24
 800867a:	d102      	bne.n	8008682 <Process_USB_input+0x6e>
      len = 28;
 800867c:	4b9f      	ldr	r3, [pc, #636]	@ (80088fc <Process_USB_input+0x2e8>)
 800867e:	221c      	movs	r2, #28
 8008680:	601a      	str	r2, [r3, #0]
    }
    if((message[0] == '#') || (message[0] == '$')) {
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	2b23      	cmp	r3, #35	@ 0x23
 8008688:	d004      	beq.n	8008694 <Process_USB_input+0x80>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	2b24      	cmp	r3, #36	@ 0x24
 8008690:	d000      	beq.n	8008694 <Process_USB_input+0x80>
 8008692:	e0fe      	b.n	8008892 <Process_USB_input+0x27e>
      received.Command = ascii_to_uint8(&message[1]);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3301      	adds	r3, #1
 8008698:	0018      	movs	r0, r3
 800869a:	f7ff ff75 	bl	8008588 <ascii_to_uint8>
 800869e:	0003      	movs	r3, r0
 80086a0:	001a      	movs	r2, r3
 80086a2:	4b9a      	ldr	r3, [pc, #616]	@ (800890c <Process_USB_input+0x2f8>)
 80086a4:	701a      	strb	r2, [r3, #0]
      if (received.Command == 100) {
 80086a6:	4b99      	ldr	r3, [pc, #612]	@ (800890c <Process_USB_input+0x2f8>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b64      	cmp	r3, #100	@ 0x64
 80086ac:	d101      	bne.n	80086b2 <Process_USB_input+0x9e>
        return false; // value out of range
 80086ae:	2300      	movs	r3, #0
 80086b0:	e11f      	b.n	80088f2 <Process_USB_input+0x2de>
      }
      if (message[3] == ',') {
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3303      	adds	r3, #3
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	2b2c      	cmp	r3, #44	@ 0x2c
 80086ba:	d000      	beq.n	80086be <Process_USB_input+0xaa>
 80086bc:	e0e2      	b.n	8008884 <Process_USB_input+0x270>
        for (uint8_t i=4; i < len; i++) {
 80086be:	2317      	movs	r3, #23
 80086c0:	18fb      	adds	r3, r7, r3
 80086c2:	2204      	movs	r2, #4
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	e084      	b.n	80087d2 <Process_USB_input+0x1be>
//          printf_USB("handling character %c as nr: %d for pos: %d\r\n", message[i], i, r);
          HAL_Delay(10);
 80086c8:	200a      	movs	r0, #10
 80086ca:	f00a fd39 	bl	8013140 <HAL_Delay>
          if (isxdigit(message[i])) {
 80086ce:	2117      	movs	r1, #23
 80086d0:	187b      	adds	r3, r7, r1
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	18d3      	adds	r3, r2, r3
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	1c5a      	adds	r2, r3, #1
 80086dc:	4b8c      	ldr	r3, [pc, #560]	@ (8008910 <Process_USB_input+0x2fc>)
 80086de:	18d3      	adds	r3, r2, r3
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	001a      	movs	r2, r3
 80086e4:	2344      	movs	r3, #68	@ 0x44
 80086e6:	4013      	ands	r3, r2
 80086e8:	d05c      	beq.n	80087a4 <Process_USB_input+0x190>
            result = (result << 4) | (isdigit(message[i]) ? message[i] - '0' : toupper(message[i]) - 'A' + 10);
 80086ea:	4b8a      	ldr	r3, [pc, #552]	@ (8008914 <Process_USB_input+0x300>)
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	011b      	lsls	r3, r3, #4
 80086f0:	b25a      	sxtb	r2, r3
 80086f2:	0008      	movs	r0, r1
 80086f4:	187b      	adds	r3, r7, r1
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	68f9      	ldr	r1, [r7, #12]
 80086fa:	18cb      	adds	r3, r1, r3
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	1c59      	adds	r1, r3, #1
 8008700:	4b83      	ldr	r3, [pc, #524]	@ (8008910 <Process_USB_input+0x2fc>)
 8008702:	18cb      	adds	r3, r1, r3
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	0019      	movs	r1, r3
 8008708:	2304      	movs	r3, #4
 800870a:	400b      	ands	r3, r1
 800870c:	d008      	beq.n	8008720 <Process_USB_input+0x10c>
 800870e:	183b      	adds	r3, r7, r0
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	68f9      	ldr	r1, [r7, #12]
 8008714:	18cb      	adds	r3, r1, r3
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	3b30      	subs	r3, #48	@ 0x30
 800871a:	b2db      	uxtb	r3, r3
 800871c:	b25b      	sxtb	r3, r3
 800871e:	e01e      	b.n	800875e <Process_USB_input+0x14a>
 8008720:	2317      	movs	r3, #23
 8008722:	18fb      	adds	r3, r7, r3
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	68f9      	ldr	r1, [r7, #12]
 8008728:	18c9      	adds	r1, r1, r3
 800872a:	200b      	movs	r0, #11
 800872c:	183b      	adds	r3, r7, r0
 800872e:	7809      	ldrb	r1, [r1, #0]
 8008730:	7019      	strb	r1, [r3, #0]
 8008732:	183b      	adds	r3, r7, r0
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	1c59      	adds	r1, r3, #1
 8008738:	4b75      	ldr	r3, [pc, #468]	@ (8008910 <Process_USB_input+0x2fc>)
 800873a:	18cb      	adds	r3, r1, r3
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	0019      	movs	r1, r3
 8008740:	2303      	movs	r3, #3
 8008742:	400b      	ands	r3, r1
 8008744:	2b02      	cmp	r3, #2
 8008746:	d103      	bne.n	8008750 <Process_USB_input+0x13c>
 8008748:	183b      	adds	r3, r7, r0
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	3b20      	subs	r3, #32
 800874e:	e002      	b.n	8008756 <Process_USB_input+0x142>
 8008750:	230b      	movs	r3, #11
 8008752:	18fb      	adds	r3, r7, r3
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	b2db      	uxtb	r3, r3
 8008758:	3b37      	subs	r3, #55	@ 0x37
 800875a:	b2db      	uxtb	r3, r3
 800875c:	b25b      	sxtb	r3, r3
 800875e:	4313      	orrs	r3, r2
 8008760:	b25b      	sxtb	r3, r3
 8008762:	b2da      	uxtb	r2, r3
 8008764:	4b6b      	ldr	r3, [pc, #428]	@ (8008914 <Process_USB_input+0x300>)
 8008766:	701a      	strb	r2, [r3, #0]
//            printf_USB("Result is 0x%2X\r\n", result);
            HAL_Delay(10);
 8008768:	200a      	movs	r0, #10
 800876a:	f00a fce9 	bl	8013140 <HAL_Delay>
            if (len == 28) {
 800876e:	4b63      	ldr	r3, [pc, #396]	@ (80088fc <Process_USB_input+0x2e8>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b1c      	cmp	r3, #28
 8008774:	d127      	bne.n	80087c6 <Process_USB_input+0x1b2>
              if ((i % 2) == 1) {
 8008776:	2317      	movs	r3, #23
 8008778:	18fb      	adds	r3, r7, r3
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	2201      	movs	r2, #1
 800877e:	4013      	ands	r3, r2
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d01f      	beq.n	80087c6 <Process_USB_input+0x1b2>
                message[r] = result;
 8008786:	4b64      	ldr	r3, [pc, #400]	@ (8008918 <Process_USB_input+0x304>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	001a      	movs	r2, r3
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	189b      	adds	r3, r3, r2
 8008790:	4a60      	ldr	r2, [pc, #384]	@ (8008914 <Process_USB_input+0x300>)
 8008792:	7812      	ldrb	r2, [r2, #0]
 8008794:	701a      	strb	r2, [r3, #0]
//                Debug("message[%d] = 0x%02X",r, message[r]);
                r++;
 8008796:	4b60      	ldr	r3, [pc, #384]	@ (8008918 <Process_USB_input+0x304>)
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	3301      	adds	r3, #1
 800879c:	b2da      	uxtb	r2, r3
 800879e:	4b5e      	ldr	r3, [pc, #376]	@ (8008918 <Process_USB_input+0x304>)
 80087a0:	701a      	strb	r2, [r3, #0]
 80087a2:	e010      	b.n	80087c6 <Process_USB_input+0x1b2>
              }
            }
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c at position %d'\r\n", message[i], i);
 80087a4:	2017      	movs	r0, #23
 80087a6:	183b      	adds	r3, r7, r0
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	18d3      	adds	r3, r2, r3
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	0019      	movs	r1, r3
 80087b2:	183b      	adds	r3, r7, r0
 80087b4:	781a      	ldrb	r2, [r3, #0]
 80087b6:	4b59      	ldr	r3, [pc, #356]	@ (800891c <Process_USB_input+0x308>)
 80087b8:	0018      	movs	r0, r3
 80087ba:	f7ff fb77 	bl	8007eac <printf_USB>
            ResetUsbRxDataSize();
 80087be:	f018 ff95 	bl	80216ec <ResetUsbRxDataSize>
            return false; // Of een andere foutwaarde
 80087c2:	2300      	movs	r3, #0
 80087c4:	e095      	b.n	80088f2 <Process_USB_input+0x2de>
        for (uint8_t i=4; i < len; i++) {
 80087c6:	2117      	movs	r1, #23
 80087c8:	187b      	adds	r3, r7, r1
 80087ca:	781a      	ldrb	r2, [r3, #0]
 80087cc:	187b      	adds	r3, r7, r1
 80087ce:	3201      	adds	r2, #1
 80087d0:	701a      	strb	r2, [r3, #0]
 80087d2:	2317      	movs	r3, #23
 80087d4:	18fb      	adds	r3, r7, r3
 80087d6:	781a      	ldrb	r2, [r3, #0]
 80087d8:	4b48      	ldr	r3, [pc, #288]	@ (80088fc <Process_USB_input+0x2e8>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d200      	bcs.n	80087e2 <Process_USB_input+0x1ce>
 80087e0:	e772      	b.n	80086c8 <Process_USB_input+0xb4>
          }
        }
        if (len == 6) {
 80087e2:	4b46      	ldr	r3, [pc, #280]	@ (80088fc <Process_USB_input+0x2e8>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b06      	cmp	r3, #6
 80087e8:	d112      	bne.n	8008810 <Process_USB_input+0x1fc>
          ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80087ea:	4b4d      	ldr	r3, [pc, #308]	@ (8008920 <Process_USB_input+0x30c>)
 80087ec:	484d      	ldr	r0, [pc, #308]	@ (8008924 <Process_USB_input+0x310>)
 80087ee:	220c      	movs	r2, #12
 80087f0:	0019      	movs	r1, r3
 80087f2:	f002 faf5 	bl	800ade0 <ReadUint8ArrayEEprom>
          boxConfig[11] = result; //overwrite the last byte
 80087f6:	4b47      	ldr	r3, [pc, #284]	@ (8008914 <Process_USB_input+0x300>)
 80087f8:	781a      	ldrb	r2, [r3, #0]
 80087fa:	4b49      	ldr	r3, [pc, #292]	@ (8008920 <Process_USB_input+0x30c>)
 80087fc:	72da      	strb	r2, [r3, #11]
          memcpy(received.Payload, boxConfig, IdSize);
 80087fe:	4b43      	ldr	r3, [pc, #268]	@ (800890c <Process_USB_input+0x2f8>)
 8008800:	2202      	movs	r2, #2
 8008802:	4947      	ldr	r1, [pc, #284]	@ (8008920 <Process_USB_input+0x30c>)
 8008804:	189b      	adds	r3, r3, r2
 8008806:	220c      	movs	r2, #12
 8008808:	0018      	movs	r0, r3
 800880a:	f01c fa7d 	bl	8024d08 <memcpy>
 800880e:	e005      	b.n	800881c <Process_USB_input+0x208>
        }
        else {
          memcpy(received.Payload, message, IdSize);
 8008810:	68f9      	ldr	r1, [r7, #12]
 8008812:	4b45      	ldr	r3, [pc, #276]	@ (8008928 <Process_USB_input+0x314>)
 8008814:	220c      	movs	r2, #12
 8008816:	0018      	movs	r0, r3
 8008818:	f01c fa76 	bl	8024d08 <memcpy>
        }
        received.PayloadLength = IdSize;
 800881c:	4b3b      	ldr	r3, [pc, #236]	@ (800890c <Process_USB_input+0x2f8>)
 800881e:	220c      	movs	r2, #12
 8008820:	705a      	strb	r2, [r3, #1]
        uint8ArrayToString(Buffer, received.Payload);
 8008822:	4a41      	ldr	r2, [pc, #260]	@ (8008928 <Process_USB_input+0x314>)
 8008824:	4b41      	ldr	r3, [pc, #260]	@ (800892c <Process_USB_input+0x318>)
 8008826:	0011      	movs	r1, r2
 8008828:	0018      	movs	r0, r3
 800882a:	f7fc faf5 	bl	8004e18 <uint8ArrayToString>
        ProcessCmd(received);
 800882e:	4c37      	ldr	r4, [pc, #220]	@ (800890c <Process_USB_input+0x2f8>)
 8008830:	466b      	mov	r3, sp
 8008832:	0018      	movs	r0, r3
 8008834:	0023      	movs	r3, r4
 8008836:	3310      	adds	r3, #16
 8008838:	22f4      	movs	r2, #244	@ 0xf4
 800883a:	0019      	movs	r1, r3
 800883c:	f01c fa64 	bl	8024d08 <memcpy>
 8008840:	6820      	ldr	r0, [r4, #0]
 8008842:	6861      	ldr	r1, [r4, #4]
 8008844:	68a2      	ldr	r2, [r4, #8]
 8008846:	68e3      	ldr	r3, [r4, #12]
 8008848:	f7ff f91e 	bl	8007a88 <ProcessCmd>
        ResetUsbRxDataSize();
 800884c:	f018 ff4e 	bl	80216ec <ResetUsbRxDataSize>
        PC_show_Keys();
 8008850:	f7ff fb6c 	bl	8007f2c <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8008854:	2316      	movs	r3, #22
 8008856:	18fb      	adds	r3, r7, r3
 8008858:	2200      	movs	r2, #0
 800885a:	701a      	strb	r2, [r3, #0]
 800885c:	e00b      	b.n	8008876 <Process_USB_input+0x262>
          data[i] = '\0';
 800885e:	2116      	movs	r1, #22
 8008860:	187b      	adds	r3, r7, r1
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	18d3      	adds	r3, r2, r3
 8008868:	2200      	movs	r2, #0
 800886a:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 800886c:	187b      	adds	r3, r7, r1
 800886e:	781a      	ldrb	r2, [r3, #0]
 8008870:	187b      	adds	r3, r7, r1
 8008872:	3201      	adds	r2, #1
 8008874:	701a      	strb	r2, [r3, #0]
 8008876:	2316      	movs	r3, #22
 8008878:	18fb      	adds	r3, r7, r3
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b1f      	cmp	r3, #31
 800887e:	d9ee      	bls.n	800885e <Process_USB_input+0x24a>
        }
        return true;
 8008880:	2301      	movs	r3, #1
 8008882:	e036      	b.n	80088f2 <Process_USB_input+0x2de>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 8008884:	4b2a      	ldr	r3, [pc, #168]	@ (8008930 <Process_USB_input+0x31c>)
 8008886:	0018      	movs	r0, r3
 8008888:	f7ff fb10 	bl	8007eac <printf_USB>
        ResetUsbRxDataSize();
 800888c:	f018 ff2e 	bl	80216ec <ResetUsbRxDataSize>
      if (message[3] == ',') {
 8008890:	e006      	b.n	80088a0 <Process_USB_input+0x28c>
      }
    }
    else {
      len = 6;
 8008892:	4b1a      	ldr	r3, [pc, #104]	@ (80088fc <Process_USB_input+0x2e8>)
 8008894:	2206      	movs	r2, #6
 8008896:	601a      	str	r2, [r3, #0]
      PC_show_Keys();
 8008898:	f7ff fb48 	bl	8007f2c <PC_show_Keys>
      ResetUsbRxDataSize();
 800889c:	f018 ff26 	bl	80216ec <ResetUsbRxDataSize>
    }
    for (uint8_t i=0; i < 32; i++) {
 80088a0:	2315      	movs	r3, #21
 80088a2:	18fb      	adds	r3, r7, r3
 80088a4:	2200      	movs	r2, #0
 80088a6:	701a      	strb	r2, [r3, #0]
 80088a8:	e00b      	b.n	80088c2 <Process_USB_input+0x2ae>
      data[i] = '\0';
 80088aa:	2115      	movs	r1, #21
 80088ac:	187b      	adds	r3, r7, r1
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	18d3      	adds	r3, r2, r3
 80088b4:	2200      	movs	r2, #0
 80088b6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 32; i++) {
 80088b8:	187b      	adds	r3, r7, r1
 80088ba:	781a      	ldrb	r2, [r3, #0]
 80088bc:	187b      	adds	r3, r7, r1
 80088be:	3201      	adds	r2, #1
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	2315      	movs	r3, #21
 80088c4:	18fb      	adds	r3, r7, r3
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b1f      	cmp	r3, #31
 80088ca:	d9ee      	bls.n	80088aa <Process_USB_input+0x296>
    }
  }
  if (formerlength != length) {
 80088cc:	4b19      	ldr	r3, [pc, #100]	@ (8008934 <Process_USB_input+0x320>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d008      	beq.n	80088e8 <Process_USB_input+0x2d4>
    printf_USB("USB input: %s\r", (const char*)data);
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	4b17      	ldr	r3, [pc, #92]	@ (8008938 <Process_USB_input+0x324>)
 80088da:	0011      	movs	r1, r2
 80088dc:	0018      	movs	r0, r3
 80088de:	f7ff fae5 	bl	8007eac <printf_USB>
    formerlength = length;
 80088e2:	4b14      	ldr	r3, [pc, #80]	@ (8008934 <Process_USB_input+0x320>)
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	0018      	movs	r0, r3
 80088ec:	f018 ff20 	bl	8021730 <GetUsbRxNextChunk>

  return false;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	0018      	movs	r0, r3
 80088f4:	46bd      	mov	sp, r7
 80088f6:	b007      	add	sp, #28
 80088f8:	bd90      	pop	{r4, r7, pc}
 80088fa:	46c0      	nop			@ (mov r8, r8)
 80088fc:	20000030 	.word	0x20000030
 8008900:	0802a680 	.word	0x0802a680
 8008904:	0802a6c0 	.word	0x0802a6c0
 8008908:	0802a6c4 	.word	0x0802a6c4
 800890c:	200007bc 	.word	0x200007bc
 8008910:	0802d230 	.word	0x0802d230
 8008914:	200008c0 	.word	0x200008c0
 8008918:	20000b44 	.word	0x20000b44
 800891c:	0802a6d4 	.word	0x0802a6d4
 8008920:	20000b48 	.word	0x20000b48
 8008924:	08080000 	.word	0x08080000
 8008928:	200007be 	.word	0x200007be
 800892c:	20000b54 	.word	0x20000b54
 8008930:	0802a70c 	.word	0x0802a70c
 8008934:	200008c4 	.word	0x200008c4
 8008938:	0802a738 	.word	0x0802a738

0800893c <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8008940:	4b26      	ldr	r3, [pc, #152]	@ (80089dc <ReadBatteryVoltage+0xa0>)
 8008942:	4a27      	ldr	r2, [pc, #156]	@ (80089e0 <ReadBatteryVoltage+0xa4>)
 8008944:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008946:	4b25      	ldr	r3, [pc, #148]	@ (80089dc <ReadBatteryVoltage+0xa0>)
 8008948:	2280      	movs	r2, #128	@ 0x80
 800894a:	0152      	lsls	r2, r2, #5
 800894c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800894e:	4a23      	ldr	r2, [pc, #140]	@ (80089dc <ReadBatteryVoltage+0xa0>)
 8008950:	4b24      	ldr	r3, [pc, #144]	@ (80089e4 <ReadBatteryVoltage+0xa8>)
 8008952:	0011      	movs	r1, r2
 8008954:	0018      	movs	r0, r3
 8008956:	f00a fec1 	bl	80136dc <HAL_ADC_ConfigChannel>
 800895a:	1e03      	subs	r3, r0, #0
 800895c:	d001      	beq.n	8008962 <ReadBatteryVoltage+0x26>
    Error_Handler();
 800895e:	f003 faf9 	bl	800bf54 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8008962:	4b20      	ldr	r3, [pc, #128]	@ (80089e4 <ReadBatteryVoltage+0xa8>)
 8008964:	0018      	movs	r0, r3
 8008966:	f00a fdbd 	bl	80134e4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 800896a:	4b1e      	ldr	r3, [pc, #120]	@ (80089e4 <ReadBatteryVoltage+0xa8>)
 800896c:	2101      	movs	r1, #1
 800896e:	0018      	movs	r0, r3
 8008970:	f00a fe0c 	bl	801358c <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8008974:	4b1b      	ldr	r3, [pc, #108]	@ (80089e4 <ReadBatteryVoltage+0xa8>)
 8008976:	0018      	movs	r0, r3
 8008978:	f00a fea4 	bl	80136c4 <HAL_ADC_GetValue>
 800897c:	0002      	movs	r2, r0
 800897e:	4b1a      	ldr	r3, [pc, #104]	@ (80089e8 <ReadBatteryVoltage+0xac>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4353      	muls	r3, r2
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	4919      	ldr	r1, [pc, #100]	@ (80089ec <ReadBatteryVoltage+0xb0>)
 8008988:	0018      	movs	r0, r3
 800898a:	f7f7 fc0b 	bl	80001a4 <__udivsi3>
 800898e:	0003      	movs	r3, r0
 8008990:	001a      	movs	r2, r3
 8008992:	4b17      	ldr	r3, [pc, #92]	@ (80089f0 <ReadBatteryVoltage+0xb4>)
 8008994:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8008996:	4b16      	ldr	r3, [pc, #88]	@ (80089f0 <ReadBatteryVoltage+0xb4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	0018      	movs	r0, r3
 800899c:	f7f8 fe64 	bl	8001668 <__aeabi_ui2f>
 80089a0:	1c03      	adds	r3, r0, #0
 80089a2:	4914      	ldr	r1, [pc, #80]	@ (80089f4 <ReadBatteryVoltage+0xb8>)
 80089a4:	1c18      	adds	r0, r3, #0
 80089a6:	f7f8 f915 	bl	8000bd4 <__aeabi_fdiv>
 80089aa:	1c03      	adds	r3, r0, #0
 80089ac:	1c1a      	adds	r2, r3, #0
 80089ae:	4b12      	ldr	r3, [pc, #72]	@ (80089f8 <ReadBatteryVoltage+0xbc>)
 80089b0:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 80089b2:	4b0a      	ldr	r3, [pc, #40]	@ (80089dc <ReadBatteryVoltage+0xa0>)
 80089b4:	4a0a      	ldr	r2, [pc, #40]	@ (80089e0 <ReadBatteryVoltage+0xa4>)
 80089b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80089b8:	4b08      	ldr	r3, [pc, #32]	@ (80089dc <ReadBatteryVoltage+0xa0>)
 80089ba:	4a10      	ldr	r2, [pc, #64]	@ (80089fc <ReadBatteryVoltage+0xc0>)
 80089bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089be:	4a07      	ldr	r2, [pc, #28]	@ (80089dc <ReadBatteryVoltage+0xa0>)
 80089c0:	4b08      	ldr	r3, [pc, #32]	@ (80089e4 <ReadBatteryVoltage+0xa8>)
 80089c2:	0011      	movs	r1, r2
 80089c4:	0018      	movs	r0, r3
 80089c6:	f00a fe89 	bl	80136dc <HAL_ADC_ConfigChannel>
 80089ca:	1e03      	subs	r3, r0, #0
 80089cc:	d001      	beq.n	80089d2 <ReadBatteryVoltage+0x96>
    Error_Handler();
 80089ce:	f003 fac1 	bl	800bf54 <Error_Handler>
  }
  return trueValue;
 80089d2:	4b09      	ldr	r3, [pc, #36]	@ (80089f8 <ReadBatteryVoltage+0xbc>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 }
 80089d6:	1c18      	adds	r0, r3, #0
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20000b6c 	.word	0x20000b6c
 80089e0:	38004000 	.word	0x38004000
 80089e4:	20000ba8 	.word	0x20000ba8
 80089e8:	20000034 	.word	0x20000034
 80089ec:	00000fff 	.word	0x00000fff
 80089f0:	20000b74 	.word	0x20000b74
 80089f4:	447a0000 	.word	0x447a0000
 80089f8:	20000b78 	.word	0x20000b78
 80089fc:	00001001 	.word	0x00001001

08008a00 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8008a04:	4b21      	ldr	r3, [pc, #132]	@ (8008a8c <ReadSolarVoltage+0x8c>)
 8008a06:	4a22      	ldr	r2, [pc, #136]	@ (8008a90 <ReadSolarVoltage+0x90>)
 8008a08:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008a0a:	4b20      	ldr	r3, [pc, #128]	@ (8008a8c <ReadSolarVoltage+0x8c>)
 8008a0c:	2280      	movs	r2, #128	@ 0x80
 8008a0e:	0152      	lsls	r2, r2, #5
 8008a10:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008a12:	4a1e      	ldr	r2, [pc, #120]	@ (8008a8c <ReadSolarVoltage+0x8c>)
 8008a14:	4b1f      	ldr	r3, [pc, #124]	@ (8008a94 <ReadSolarVoltage+0x94>)
 8008a16:	0011      	movs	r1, r2
 8008a18:	0018      	movs	r0, r3
 8008a1a:	f00a fe5f 	bl	80136dc <HAL_ADC_ConfigChannel>
 8008a1e:	1e03      	subs	r3, r0, #0
 8008a20:	d001      	beq.n	8008a26 <ReadSolarVoltage+0x26>
    Error_Handler();
 8008a22:	f003 fa97 	bl	800bf54 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8008a26:	4b1b      	ldr	r3, [pc, #108]	@ (8008a94 <ReadSolarVoltage+0x94>)
 8008a28:	0018      	movs	r0, r3
 8008a2a:	f00a fd5b 	bl	80134e4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8008a2e:	4b19      	ldr	r3, [pc, #100]	@ (8008a94 <ReadSolarVoltage+0x94>)
 8008a30:	2101      	movs	r1, #1
 8008a32:	0018      	movs	r0, r3
 8008a34:	f00a fdaa 	bl	801358c <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8008a38:	4b16      	ldr	r3, [pc, #88]	@ (8008a94 <ReadSolarVoltage+0x94>)
 8008a3a:	0018      	movs	r0, r3
 8008a3c:	f00a fe42 	bl	80136c4 <HAL_ADC_GetValue>
 8008a40:	0002      	movs	r2, r0
 8008a42:	4b15      	ldr	r3, [pc, #84]	@ (8008a98 <ReadSolarVoltage+0x98>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	435a      	muls	r2, r3
 8008a48:	0013      	movs	r3, r2
 8008a4a:	005b      	lsls	r3, r3, #1
 8008a4c:	189b      	adds	r3, r3, r2
 8008a4e:	4913      	ldr	r1, [pc, #76]	@ (8008a9c <ReadSolarVoltage+0x9c>)
 8008a50:	0018      	movs	r0, r3
 8008a52:	f7f7 fba7 	bl	80001a4 <__udivsi3>
 8008a56:	0003      	movs	r3, r0
 8008a58:	001a      	movs	r2, r3
 8008a5a:	4b11      	ldr	r3, [pc, #68]	@ (8008aa0 <ReadSolarVoltage+0xa0>)
 8008a5c:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8008a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a8c <ReadSolarVoltage+0x8c>)
 8008a60:	4a0b      	ldr	r2, [pc, #44]	@ (8008a90 <ReadSolarVoltage+0x90>)
 8008a62:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8008a64:	4b09      	ldr	r3, [pc, #36]	@ (8008a8c <ReadSolarVoltage+0x8c>)
 8008a66:	4a0f      	ldr	r2, [pc, #60]	@ (8008aa4 <ReadSolarVoltage+0xa4>)
 8008a68:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008a6a:	4a08      	ldr	r2, [pc, #32]	@ (8008a8c <ReadSolarVoltage+0x8c>)
 8008a6c:	4b09      	ldr	r3, [pc, #36]	@ (8008a94 <ReadSolarVoltage+0x94>)
 8008a6e:	0011      	movs	r1, r2
 8008a70:	0018      	movs	r0, r3
 8008a72:	f00a fe33 	bl	80136dc <HAL_ADC_ConfigChannel>
 8008a76:	1e03      	subs	r3, r0, #0
 8008a78:	d001      	beq.n	8008a7e <ReadSolarVoltage+0x7e>
    Error_Handler();
 8008a7a:	f003 fa6b 	bl	800bf54 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8008a7e:	4b08      	ldr	r3, [pc, #32]	@ (8008aa0 <ReadSolarVoltage+0xa0>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	b29b      	uxth	r3, r3
 }
 8008a84:	0018      	movs	r0, r3
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	46c0      	nop			@ (mov r8, r8)
 8008a8c:	20000b6c 	.word	0x20000b6c
 8008a90:	3c008000 	.word	0x3c008000
 8008a94:	20000ba8 	.word	0x20000ba8
 8008a98:	20000034 	.word	0x20000034
 8008a9c:	00000fff 	.word	0x00000fff
 8008aa0:	20000b7c 	.word	0x20000b7c
 8008aa4:	00001001 	.word	0x00001001

08008aa8 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8008aac:	23a0      	movs	r3, #160	@ 0xa0
 8008aae:	05db      	lsls	r3, r3, #23
 8008ab0:	2180      	movs	r1, #128	@ 0x80
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f00b fdae 	bl	8014614 <HAL_GPIO_ReadPin>
 8008ab8:	0003      	movs	r3, r0
 8008aba:	1e5a      	subs	r2, r3, #1
 8008abc:	4193      	sbcs	r3, r2
 8008abe:	b2db      	uxtb	r3, r3
}
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8008aca:	2380      	movs	r3, #128	@ 0x80
 8008acc:	021a      	lsls	r2, r3, #8
 8008ace:	23a0      	movs	r3, #160	@ 0xa0
 8008ad0:	05db      	lsls	r3, r3, #23
 8008ad2:	0011      	movs	r1, r2
 8008ad4:	0018      	movs	r0, r3
 8008ad6:	f00b fd9d 	bl	8014614 <HAL_GPIO_ReadPin>
 8008ada:	0003      	movs	r3, r0
 8008adc:	1e5a      	subs	r2, r3, #1
 8008ade:	4193      	sbcs	r3, r2
 8008ae0:	b2db      	uxtb	r3, r3
}
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8008aec:	4b05      	ldr	r3, [pc, #20]	@ (8008b04 <UserButton_Pressed+0x1c>)
 8008aee:	2104      	movs	r1, #4
 8008af0:	0018      	movs	r0, r3
 8008af2:	f00b fd8f 	bl	8014614 <HAL_GPIO_ReadPin>
 8008af6:	0003      	movs	r3, r0
 8008af8:	425a      	negs	r2, r3
 8008afa:	4153      	adcs	r3, r2
 8008afc:	b2db      	uxtb	r3, r3
}
 8008afe:	0018      	movs	r0, r3
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	50000c00 	.word	0x50000c00

08008b08 <showTime>:
char strbuf[24] = {0}; //fi length -> 22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8008b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b0a:	46d6      	mov	lr, sl
 8008b0c:	464f      	mov	r7, r9
 8008b0e:	4646      	mov	r6, r8
 8008b10:	b5c0      	push	{r6, r7, lr}
 8008b12:	b08e      	sub	sp, #56	@ 0x38
 8008b14:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8008b16:	4b21      	ldr	r3, [pc, #132]	@ (8008b9c <showTime+0x94>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d036      	beq.n	8008b8c <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008b1e:	003a      	movs	r2, r7
 8008b20:	1d3b      	adds	r3, r7, #4
 8008b22:	0011      	movs	r1, r2
 8008b24:	0018      	movs	r0, r3
 8008b26:	f000 fa3f 	bl	8008fa8 <RTC_GetTime>
  UpdateSystemUptime();
 8008b2a:	f000 f853 	bl	8008bd4 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008b2e:	003b      	movs	r3, r7
 8008b30:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008b32:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008b34:	003b      	movs	r3, r7
 8008b36:	785b      	ldrb	r3, [r3, #1]
 8008b38:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008b3a:	4b19      	ldr	r3, [pc, #100]	@ (8008ba0 <showTime+0x98>)
 8008b3c:	0092      	lsls	r2, r2, #2
 8008b3e:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008b40:	003b      	movs	r3, r7
 8008b42:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008b44:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008b46:	1d3b      	adds	r3, r7, #4
 8008b48:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008b4a:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008b4c:	1d3b      	adds	r3, r7, #4
 8008b4e:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008b50:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008b52:	1d3b      	adds	r3, r7, #4
 8008b54:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008b56:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008b58:	4b12      	ldr	r3, [pc, #72]	@ (8008ba4 <showTime+0x9c>)
 8008b5a:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008b5c:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008b5e:	4b11      	ldr	r3, [pc, #68]	@ (8008ba4 <showTime+0x9c>)
 8008b60:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008b62:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008b64:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba4 <showTime+0x9c>)
 8008b66:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008b68:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba4 <showTime+0x9c>)
 8008b6c:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008b6e:	480e      	ldr	r0, [pc, #56]	@ (8008ba8 <showTime+0xa0>)
 8008b70:	9306      	str	r3, [sp, #24]
 8008b72:	4643      	mov	r3, r8
 8008b74:	9305      	str	r3, [sp, #20]
 8008b76:	4663      	mov	r3, ip
 8008b78:	9304      	str	r3, [sp, #16]
 8008b7a:	9603      	str	r6, [sp, #12]
 8008b7c:	9502      	str	r5, [sp, #8]
 8008b7e:	9401      	str	r4, [sp, #4]
 8008b80:	9100      	str	r1, [sp, #0]
 8008b82:	4653      	mov	r3, sl
 8008b84:	4649      	mov	r1, r9
 8008b86:	f01b fe0d 	bl	80247a4 <iprintf>
 8008b8a:	e000      	b.n	8008b8e <showTime+0x86>
    return;
 8008b8c:	46c0      	nop			@ (mov r8, r8)
}
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	b006      	add	sp, #24
 8008b92:	bce0      	pop	{r5, r6, r7}
 8008b94:	46ba      	mov	sl, r7
 8008b96:	46b1      	mov	r9, r6
 8008b98:	46a8      	mov	r8, r5
 8008b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b9c:	20000b8c 	.word	0x20000b8c
 8008ba0:	20000054 	.word	0x20000054
 8008ba4:	20000b80 	.word	0x20000b80
 8008ba8:	0802a794 	.word	0x0802a794

08008bac <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008bb2:	003a      	movs	r2, r7
 8008bb4:	1d3b      	adds	r3, r7, #4
 8008bb6:	0011      	movs	r1, r2
 8008bb8:	0018      	movs	r0, r3
 8008bba:	f000 f9f5 	bl	8008fa8 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8008bbe:	1d3a      	adds	r2, r7, #4
 8008bc0:	003b      	movs	r3, r7
 8008bc2:	0011      	movs	r1, r2
 8008bc4:	0018      	movs	r0, r3
 8008bc6:	f000 fbc7 	bl	8009358 <makeTime>
 8008bca:	0003      	movs	r3, r0
}
 8008bcc:	0018      	movs	r0, r3
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	b006      	add	sp, #24
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b088      	sub	sp, #32
 8008bd8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8008bda:	003a      	movs	r2, r7
 8008bdc:	1d3b      	adds	r3, r7, #4
 8008bde:	0011      	movs	r1, r2
 8008be0:	0018      	movs	r0, r3
 8008be2:	f000 f9e1 	bl	8008fa8 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8008be6:	1d3a      	adds	r2, r7, #4
 8008be8:	003b      	movs	r3, r7
 8008bea:	0011      	movs	r1, r2
 8008bec:	0018      	movs	r0, r3
 8008bee:	f000 fbb3 	bl	8009358 <makeTime>
 8008bf2:	0002      	movs	r2, r0
 8008bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8008c70 <UpdateSystemUptime+0x9c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	213c      	movs	r1, #60	@ 0x3c
 8008c04:	0018      	movs	r0, r3
 8008c06:	f7f7 fb53 	bl	80002b0 <__aeabi_uidivmod>
 8008c0a:	000b      	movs	r3, r1
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	4b19      	ldr	r3, [pc, #100]	@ (8008c74 <UpdateSystemUptime+0xa0>)
 8008c10:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	213c      	movs	r1, #60	@ 0x3c
 8008c16:	0018      	movs	r0, r3
 8008c18:	f7f7 fac4 	bl	80001a4 <__udivsi3>
 8008c1c:	0003      	movs	r3, r0
 8008c1e:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	213c      	movs	r1, #60	@ 0x3c
 8008c24:	0018      	movs	r0, r3
 8008c26:	f7f7 fb43 	bl	80002b0 <__aeabi_uidivmod>
 8008c2a:	000b      	movs	r3, r1
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	4b11      	ldr	r3, [pc, #68]	@ (8008c74 <UpdateSystemUptime+0xa0>)
 8008c30:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	213c      	movs	r1, #60	@ 0x3c
 8008c36:	0018      	movs	r0, r3
 8008c38:	f7f7 fab4 	bl	80001a4 <__udivsi3>
 8008c3c:	0003      	movs	r3, r0
 8008c3e:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	2118      	movs	r1, #24
 8008c44:	0018      	movs	r0, r3
 8008c46:	f7f7 fb33 	bl	80002b0 <__aeabi_uidivmod>
 8008c4a:	000b      	movs	r3, r1
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	4b09      	ldr	r3, [pc, #36]	@ (8008c74 <UpdateSystemUptime+0xa0>)
 8008c50:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	2118      	movs	r1, #24
 8008c56:	0018      	movs	r0, r3
 8008c58:	f7f7 faa4 	bl	80001a4 <__udivsi3>
 8008c5c:	0003      	movs	r3, r0
 8008c5e:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	4b03      	ldr	r3, [pc, #12]	@ (8008c74 <UpdateSystemUptime+0xa0>)
 8008c66:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8008c68:	46c0      	nop			@ (mov r8, r8)
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	b008      	add	sp, #32
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	20000b8c 	.word	0x20000b8c
 8008c74:	20000b80 	.word	0x20000b80

08008c78 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8008c78:	b590      	push	{r4, r7, lr}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	0008      	movs	r0, r1
 8008c82:	0011      	movs	r1, r2
 8008c84:	1cfb      	adds	r3, r7, #3
 8008c86:	1c02      	adds	r2, r0, #0
 8008c88:	701a      	strb	r2, [r3, #0]
 8008c8a:	1cbb      	adds	r3, r7, #2
 8008c8c:	1c0a      	adds	r2, r1, #0
 8008c8e:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8008c90:	230e      	movs	r3, #14
 8008c92:	18fb      	adds	r3, r7, r3
 8008c94:	2200      	movs	r2, #0
 8008c96:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8008c98:	230f      	movs	r3, #15
 8008c9a:	18fb      	adds	r3, r7, r3
 8008c9c:	1cfa      	adds	r2, r7, #3
 8008c9e:	7812      	ldrb	r2, [r2, #0]
 8008ca0:	701a      	strb	r2, [r3, #0]
 8008ca2:	e015      	b.n	8008cd0 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8008ca4:	200f      	movs	r0, #15
 8008ca6:	183b      	adds	r3, r7, r0
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	18d2      	adds	r2, r2, r3
 8008cae:	240e      	movs	r4, #14
 8008cb0:	193b      	adds	r3, r7, r4
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	7811      	ldrb	r1, [r2, #0]
 8008cb6:	2208      	movs	r2, #8
 8008cb8:	18ba      	adds	r2, r7, r2
 8008cba:	54d1      	strb	r1, [r2, r3]
    pos++;
 8008cbc:	193b      	adds	r3, r7, r4
 8008cbe:	781a      	ldrb	r2, [r3, #0]
 8008cc0:	193b      	adds	r3, r7, r4
 8008cc2:	3201      	adds	r2, #1
 8008cc4:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8008cc6:	183b      	adds	r3, r7, r0
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	183b      	adds	r3, r7, r0
 8008ccc:	3201      	adds	r2, #1
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	200f      	movs	r0, #15
 8008cd2:	183a      	adds	r2, r7, r0
 8008cd4:	1cbb      	adds	r3, r7, #2
 8008cd6:	7812      	ldrb	r2, [r2, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d9e2      	bls.n	8008ca4 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8008cde:	230e      	movs	r3, #14
 8008ce0:	18fb      	adds	r3, r7, r3
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2208      	movs	r2, #8
 8008ce6:	18ba      	adds	r2, r7, r2
 8008ce8:	2100      	movs	r1, #0
 8008cea:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8008cec:	1cfb      	adds	r3, r7, #3
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b13      	cmp	r3, #19
 8008cf2:	d849      	bhi.n	8008d88 <aBuff2int+0x110>
    if (start == 17) { //month
 8008cf4:	1cfb      	adds	r3, r7, #3
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b11      	cmp	r3, #17
 8008cfa:	d122      	bne.n	8008d42 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8008cfc:	183b      	adds	r3, r7, r0
 8008cfe:	2200      	movs	r2, #0
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	e018      	b.n	8008d36 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8008d04:	240f      	movs	r4, #15
 8008d06:	193b      	adds	r3, r7, r4
 8008d08:	781a      	ldrb	r2, [r3, #0]
 8008d0a:	4b25      	ldr	r3, [pc, #148]	@ (8008da0 <aBuff2int+0x128>)
 8008d0c:	0092      	lsls	r2, r2, #2
 8008d0e:	58d2      	ldr	r2, [r2, r3]
 8008d10:	2308      	movs	r3, #8
 8008d12:	18fb      	adds	r3, r7, r3
 8008d14:	0011      	movs	r1, r2
 8008d16:	0018      	movs	r0, r3
 8008d18:	f7f7 fa1e 	bl	8000158 <strcmp>
 8008d1c:	1e03      	subs	r3, r0, #0
 8008d1e:	d104      	bne.n	8008d2a <aBuff2int+0xb2>
          return i+1;
 8008d20:	193b      	adds	r3, r7, r4
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	3301      	adds	r3, #1
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	e035      	b.n	8008d96 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 8008d2a:	210f      	movs	r1, #15
 8008d2c:	187b      	adds	r3, r7, r1
 8008d2e:	781a      	ldrb	r2, [r3, #0]
 8008d30:	187b      	adds	r3, r7, r1
 8008d32:	3201      	adds	r2, #1
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	230f      	movs	r3, #15
 8008d38:	18fb      	adds	r3, r7, r3
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2b0b      	cmp	r3, #11
 8008d3e:	d9e1      	bls.n	8008d04 <aBuff2int+0x8c>
 8008d40:	e022      	b.n	8008d88 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8008d42:	230f      	movs	r3, #15
 8008d44:	18fb      	adds	r3, r7, r3
 8008d46:	2200      	movs	r2, #0
 8008d48:	701a      	strb	r2, [r3, #0]
 8008d4a:	e018      	b.n	8008d7e <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8008d4c:	240f      	movs	r4, #15
 8008d4e:	193b      	adds	r3, r7, r4
 8008d50:	781a      	ldrb	r2, [r3, #0]
 8008d52:	4b14      	ldr	r3, [pc, #80]	@ (8008da4 <aBuff2int+0x12c>)
 8008d54:	0092      	lsls	r2, r2, #2
 8008d56:	58d2      	ldr	r2, [r2, r3]
 8008d58:	2308      	movs	r3, #8
 8008d5a:	18fb      	adds	r3, r7, r3
 8008d5c:	0011      	movs	r1, r2
 8008d5e:	0018      	movs	r0, r3
 8008d60:	f7f7 f9fa 	bl	8000158 <strcmp>
 8008d64:	1e03      	subs	r3, r0, #0
 8008d66:	d104      	bne.n	8008d72 <aBuff2int+0xfa>
          return i+1;
 8008d68:	193b      	adds	r3, r7, r4
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	e011      	b.n	8008d96 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8008d72:	210f      	movs	r1, #15
 8008d74:	187b      	adds	r3, r7, r1
 8008d76:	781a      	ldrb	r2, [r3, #0]
 8008d78:	187b      	adds	r3, r7, r1
 8008d7a:	3201      	adds	r2, #1
 8008d7c:	701a      	strb	r2, [r3, #0]
 8008d7e:	230f      	movs	r3, #15
 8008d80:	18fb      	adds	r3, r7, r3
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b06      	cmp	r3, #6
 8008d86:	d9e1      	bls.n	8008d4c <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8008d88:	2308      	movs	r3, #8
 8008d8a:	18fb      	adds	r3, r7, r3
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	f01a f92e 	bl	8022fee <atoi>
 8008d92:	0003      	movs	r3, r0
 8008d94:	b2db      	uxtb	r3, r3
}
 8008d96:	0018      	movs	r0, r3
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	b005      	add	sp, #20
 8008d9c:	bd90      	pop	{r4, r7, pc}
 8008d9e:	46c0      	nop			@ (mov r8, r8)
 8008da0:	20000054 	.word	0x20000054
 8008da4:	20000038 	.word	0x20000038

08008da8 <ParseTime>:

void ParseTime(char* buffer) {
 8008da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008daa:	b08b      	sub	sp, #44	@ 0x2c
 8008dac:	af02      	add	r7, sp, #8
 8008dae:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008db0:	2408      	movs	r4, #8
 8008db2:	193a      	adds	r2, r7, r4
 8008db4:	260c      	movs	r6, #12
 8008db6:	19bb      	adds	r3, r7, r6
 8008db8:	0011      	movs	r1, r2
 8008dba:	0018      	movs	r0, r3
 8008dbc:	f000 f8f4 	bl	8008fa8 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2219      	movs	r2, #25
 8008dc4:	2118      	movs	r1, #24
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	f7ff ff56 	bl	8008c78 <aBuff2int>
 8008dcc:	0003      	movs	r3, r0
 8008dce:	001a      	movs	r2, r3
 8008dd0:	19bb      	adds	r3, r7, r6
 8008dd2:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	221c      	movs	r2, #28
 8008dd8:	211b      	movs	r1, #27
 8008dda:	0018      	movs	r0, r3
 8008ddc:	f7ff ff4c 	bl	8008c78 <aBuff2int>
 8008de0:	0003      	movs	r3, r0
 8008de2:	001a      	movs	r2, r3
 8008de4:	19bb      	adds	r3, r7, r6
 8008de6:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	221f      	movs	r2, #31
 8008dec:	211e      	movs	r1, #30
 8008dee:	0018      	movs	r0, r3
 8008df0:	f7ff ff42 	bl	8008c78 <aBuff2int>
 8008df4:	0003      	movs	r3, r0
 8008df6:	001a      	movs	r2, r3
 8008df8:	19bb      	adds	r3, r7, r6
 8008dfa:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2224      	movs	r2, #36	@ 0x24
 8008e00:	2123      	movs	r1, #35	@ 0x23
 8008e02:	0018      	movs	r0, r3
 8008e04:	f7ff ff38 	bl	8008c78 <aBuff2int>
 8008e08:	0003      	movs	r3, r0
 8008e0a:	001a      	movs	r2, r3
 8008e0c:	0025      	movs	r5, r4
 8008e0e:	197b      	adds	r3, r7, r5
 8008e10:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2213      	movs	r2, #19
 8008e16:	2111      	movs	r1, #17
 8008e18:	0018      	movs	r0, r3
 8008e1a:	f7ff ff2d 	bl	8008c78 <aBuff2int>
 8008e1e:	0003      	movs	r3, r0
 8008e20:	001a      	movs	r2, r3
 8008e22:	197b      	adds	r3, r7, r5
 8008e24:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2216      	movs	r2, #22
 8008e2a:	2115      	movs	r1, #21
 8008e2c:	0018      	movs	r0, r3
 8008e2e:	f7ff ff23 	bl	8008c78 <aBuff2int>
 8008e32:	0003      	movs	r3, r0
 8008e34:	001a      	movs	r2, r3
 8008e36:	197b      	adds	r3, r7, r5
 8008e38:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	220f      	movs	r2, #15
 8008e3e:	210d      	movs	r1, #13
 8008e40:	0018      	movs	r0, r3
 8008e42:	f7ff ff19 	bl	8008c78 <aBuff2int>
 8008e46:	0003      	movs	r3, r0
 8008e48:	001a      	movs	r2, r3
 8008e4a:	197b      	adds	r3, r7, r5
 8008e4c:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8008e4e:	19bb      	adds	r3, r7, r6
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	001c      	movs	r4, r3
 8008e54:	19bb      	adds	r3, r7, r6
 8008e56:	785b      	ldrb	r3, [r3, #1]
 8008e58:	0018      	movs	r0, r3
 8008e5a:	19bb      	adds	r3, r7, r6
 8008e5c:	789b      	ldrb	r3, [r3, #2]
 8008e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ed0 <ParseTime+0x128>)
 8008e60:	491c      	ldr	r1, [pc, #112]	@ (8008ed4 <ParseTime+0x12c>)
 8008e62:	9301      	str	r3, [sp, #4]
 8008e64:	9000      	str	r0, [sp, #0]
 8008e66:	0023      	movs	r3, r4
 8008e68:	2003      	movs	r0, #3
 8008e6a:	f009 fc29 	bl	80126c0 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8008e6e:	197b      	adds	r3, r7, r5
 8008e70:	789b      	ldrb	r3, [r3, #2]
 8008e72:	001c      	movs	r4, r3
 8008e74:	197b      	adds	r3, r7, r5
 8008e76:	785b      	ldrb	r3, [r3, #1]
 8008e78:	0018      	movs	r0, r3
 8008e7a:	197b      	adds	r3, r7, r5
 8008e7c:	78db      	ldrb	r3, [r3, #3]
 8008e7e:	4a16      	ldr	r2, [pc, #88]	@ (8008ed8 <ParseTime+0x130>)
 8008e80:	4914      	ldr	r1, [pc, #80]	@ (8008ed4 <ParseTime+0x12c>)
 8008e82:	9301      	str	r3, [sp, #4]
 8008e84:	9000      	str	r0, [sp, #0]
 8008e86:	0023      	movs	r3, r4
 8008e88:	2003      	movs	r0, #3
 8008e8a:	f009 fc19 	bl	80126c0 <CreateLine>
  RTC_SetTime(&currentTime);
 8008e8e:	19bb      	adds	r3, r7, r6
 8008e90:	0018      	movs	r0, r3
 8008e92:	f000 f825 	bl	8008ee0 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8008e96:	197b      	adds	r3, r7, r5
 8008e98:	0018      	movs	r0, r3
 8008e9a:	f000 f847 	bl	8008f2c <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8008e9e:	197b      	adds	r3, r7, r5
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d101      	bne.n	8008eaa <ParseTime+0x102>
    reset_fanCleaningDone();
 8008ea6:	f004 f9a7 	bl	800d1f8 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 8008eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8008edc <ParseTime+0x134>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8008eb2:	230c      	movs	r3, #12
 8008eb4:	18fa      	adds	r2, r7, r3
 8008eb6:	2308      	movs	r3, #8
 8008eb8:	18fb      	adds	r3, r7, r3
 8008eba:	0011      	movs	r1, r2
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	f000 fa4b 	bl	8009358 <makeTime>
 8008ec2:	0002      	movs	r2, r0
 8008ec4:	4b05      	ldr	r3, [pc, #20]	@ (8008edc <ParseTime+0x134>)
 8008ec6:	601a      	str	r2, [r3, #0]
  }
}
 8008ec8:	46c0      	nop			@ (mov r8, r8)
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	b009      	add	sp, #36	@ 0x24
 8008ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ed0:	0802a7ec 	.word	0x0802a7ec
 8008ed4:	0802a824 	.word	0x0802a824
 8008ed8:	0802a828 	.word	0x0802a828
 8008edc:	20000b8c 	.word	0x20000b8c

08008ee0 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8008efa:	4b09      	ldr	r3, [pc, #36]	@ (8008f20 <RTC_SetTime+0x40>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	0018      	movs	r0, r3
 8008f04:	f011 fcca 	bl	801a89c <HAL_RTC_SetTime>
 8008f08:	1e03      	subs	r3, r0, #0
 8008f0a:	d005      	beq.n	8008f18 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8008f0c:	4a05      	ldr	r2, [pc, #20]	@ (8008f24 <RTC_SetTime+0x44>)
 8008f0e:	4b06      	ldr	r3, [pc, #24]	@ (8008f28 <RTC_SetTime+0x48>)
 8008f10:	0019      	movs	r1, r3
 8008f12:	2001      	movs	r0, #1
 8008f14:	f009 fbd4 	bl	80126c0 <CreateLine>
    }
}
 8008f18:	46c0      	nop			@ (mov r8, r8)
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	b002      	add	sp, #8
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	20000b88 	.word	0x20000b88
 8008f24:	0802a85c 	.word	0x0802a85c
 8008f28:	0802a878 	.word	0x0802a878

08008f2c <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8008f34:	4b16      	ldr	r3, [pc, #88]	@ (8008f90 <RTC_SetDate+0x64>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6879      	ldr	r1, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	f011 fdb5 	bl	801aaac <HAL_RTC_SetDate>
 8008f42:	1e03      	subs	r3, r0, #0
 8008f44:	d005      	beq.n	8008f52 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 8008f46:	4a13      	ldr	r2, [pc, #76]	@ (8008f94 <RTC_SetDate+0x68>)
 8008f48:	4b13      	ldr	r3, [pc, #76]	@ (8008f98 <RTC_SetDate+0x6c>)
 8008f4a:	0019      	movs	r1, r3
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	f009 fbb7 	bl	80126c0 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 8008f52:	4b0f      	ldr	r3, [pc, #60]	@ (8008f90 <RTC_SetDate+0x64>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2101      	movs	r1, #1
 8008f58:	0018      	movs	r0, r3
 8008f5a:	f012 f8ed 	bl	801b138 <HAL_RTCEx_BKUPRead>
 8008f5e:	0003      	movs	r3, r0
 8008f60:	4a0e      	ldr	r2, [pc, #56]	@ (8008f9c <RTC_SetDate+0x70>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d010      	beq.n	8008f88 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 8008f66:	4a0e      	ldr	r2, [pc, #56]	@ (8008fa0 <RTC_SetDate+0x74>)
 8008f68:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa4 <RTC_SetDate+0x78>)
 8008f6a:	0019      	movs	r1, r3
 8008f6c:	2003      	movs	r0, #3
 8008f6e:	f009 fba7 	bl	80126c0 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8008f72:	f010 fc13 	bl	801979c <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 8008f76:	4b06      	ldr	r3, [pc, #24]	@ (8008f90 <RTC_SetDate+0x64>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a08      	ldr	r2, [pc, #32]	@ (8008f9c <RTC_SetDate+0x70>)
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	0018      	movs	r0, r3
 8008f80:	f012 f8c2 	bl	801b108 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8008f84:	f010 fc18 	bl	80197b8 <HAL_PWR_DisableBkUpAccess>
    }
}
 8008f88:	46c0      	nop			@ (mov r8, r8)
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	b002      	add	sp, #8
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	20000b88 	.word	0x20000b88
 8008f94:	0802a87c 	.word	0x0802a87c
 8008f98:	0802a878 	.word	0x0802a878
 8008f9c:	0000bebe 	.word	0x0000bebe
 8008fa0:	0802a898 	.word	0x0802a898
 8008fa4:	0802a824 	.word	0x0802a824

08008fa8 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8008fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8008fb2:	250f      	movs	r5, #15
 8008fb4:	197b      	adds	r3, r7, r5
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8008fba:	230e      	movs	r3, #14
 8008fbc:	18fb      	adds	r3, r7, r3
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8008fc2:	260c      	movs	r6, #12
 8008fc4:	19bc      	adds	r4, r7, r6
 8008fc6:	f008 fc05 	bl	80117d4 <powerCheck>
 8008fca:	0003      	movs	r3, r0
 8008fcc:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8008fce:	19bb      	adds	r3, r7, r6
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d104      	bne.n	8008fe0 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 8008fd6:	197b      	adds	r3, r7, r5
 8008fd8:	781a      	ldrb	r2, [r3, #0]
 8008fda:	197b      	adds	r3, r7, r5
 8008fdc:	3201      	adds	r2, #1
 8008fde:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8008fe0:	230d      	movs	r3, #13
 8008fe2:	18fb      	adds	r3, r7, r3
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	701a      	strb	r2, [r3, #0]
 8008fe8:	e039      	b.n	800905e <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8008fea:	4b23      	ldr	r3, [pc, #140]	@ (8009078 <RTC_GetTime+0xd0>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f011 fcfc 	bl	801a9f0 <HAL_RTC_GetTime>
 8008ff8:	1e03      	subs	r3, r0, #0
 8008ffa:	d005      	beq.n	8009008 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8008ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800907c <RTC_GetTime+0xd4>)
 8008ffe:	4b20      	ldr	r3, [pc, #128]	@ (8009080 <RTC_GetTime+0xd8>)
 8009000:	0019      	movs	r1, r3
 8009002:	2001      	movs	r0, #1
 8009004:	f009 fb5c 	bl	80126c0 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8009008:	4b1b      	ldr	r3, [pc, #108]	@ (8009078 <RTC_GetTime+0xd0>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	2200      	movs	r2, #0
 8009010:	0018      	movs	r0, r3
 8009012:	f011 fddf 	bl	801abd4 <HAL_RTC_GetDate>
 8009016:	1e03      	subs	r3, r0, #0
 8009018:	d005      	beq.n	8009026 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 800901a:	4a1a      	ldr	r2, [pc, #104]	@ (8009084 <RTC_GetTime+0xdc>)
 800901c:	4b18      	ldr	r3, [pc, #96]	@ (8009080 <RTC_GetTime+0xd8>)
 800901e:	0019      	movs	r1, r3
 8009020:	2001      	movs	r0, #1
 8009022:	f009 fb4d 	bl	80126c0 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 8009026:	230c      	movs	r3, #12
 8009028:	18fb      	adds	r3, r7, r3
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d110      	bne.n	8009052 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	210e      	movs	r1, #14
 8009036:	187a      	adds	r2, r7, r1
 8009038:	7812      	ldrb	r2, [r2, #0]
 800903a:	429a      	cmp	r2, r3
 800903c:	d018      	beq.n	8009070 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 800903e:	187b      	adds	r3, r7, r1
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	7812      	ldrb	r2, [r2, #0]
 8009044:	701a      	strb	r2, [r3, #0]
        t++;
 8009046:	210f      	movs	r1, #15
 8009048:	187b      	adds	r3, r7, r1
 800904a:	781a      	ldrb	r2, [r3, #0]
 800904c:	187b      	adds	r3, r7, r1
 800904e:	3201      	adds	r2, #1
 8009050:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 8009052:	210d      	movs	r1, #13
 8009054:	187b      	adds	r3, r7, r1
 8009056:	781a      	ldrb	r2, [r3, #0]
 8009058:	187b      	adds	r3, r7, r1
 800905a:	3201      	adds	r2, #1
 800905c:	701a      	strb	r2, [r3, #0]
 800905e:	230d      	movs	r3, #13
 8009060:	18fa      	adds	r2, r7, r3
 8009062:	230f      	movs	r3, #15
 8009064:	18fb      	adds	r3, r7, r3
 8009066:	7812      	ldrb	r2, [r2, #0]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	429a      	cmp	r2, r3
 800906c:	d3bd      	bcc.n	8008fea <RTC_GetTime+0x42>
 800906e:	e000      	b.n	8009072 <RTC_GetTime+0xca>
      }
      else {
        return;
 8009070:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8009072:	46bd      	mov	sp, r7
 8009074:	b005      	add	sp, #20
 8009076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009078:	20000b88 	.word	0x20000b88
 800907c:	0802a8b0 	.word	0x0802a8b0
 8009080:	0802a878 	.word	0x0802a878
 8009084:	0802a8cc 	.word	0x0802a8cc

08009088 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800908e:	003a      	movs	r2, r7
 8009090:	1d3b      	adds	r3, r7, #4
 8009092:	0011      	movs	r1, r2
 8009094:	0018      	movs	r0, r3
 8009096:	f7ff ff87 	bl	8008fa8 <RTC_GetTime>
  return currentDate.WeekDay;
 800909a:	003b      	movs	r3, r7
 800909c:	781b      	ldrb	r3, [r3, #0]
}
 800909e:	0018      	movs	r0, r3
 80090a0:	46bd      	mov	sp, r7
 80090a2:	b006      	add	sp, #24
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <getPosixTime>:

uint32_t getPosixTime(void) {
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b086      	sub	sp, #24
 80090aa:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80090ac:	003a      	movs	r2, r7
 80090ae:	1d3b      	adds	r3, r7, #4
 80090b0:	0011      	movs	r1, r2
 80090b2:	0018      	movs	r0, r3
 80090b4:	f7ff ff78 	bl	8008fa8 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 80090b8:	1d3a      	adds	r2, r7, #4
 80090ba:	003b      	movs	r3, r7
 80090bc:	0011      	movs	r1, r2
 80090be:	0018      	movs	r0, r3
 80090c0:	f000 f94a 	bl	8009358 <makeTime>
 80090c4:	0003      	movs	r3, r0
}
 80090c6:	0018      	movs	r0, r3
 80090c8:	46bd      	mov	sp, r7
 80090ca:	b006      	add	sp, #24
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 80090d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090d2:	b08d      	sub	sp, #52	@ 0x34
 80090d4:	af04      	add	r7, sp, #16
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 80090da:	240c      	movs	r4, #12
 80090dc:	193a      	adds	r2, r7, r4
 80090de:	2508      	movs	r5, #8
 80090e0:	1979      	adds	r1, r7, r5
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	0018      	movs	r0, r3
 80090e6:	f000 fa01 	bl	80094ec <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80090ea:	002a      	movs	r2, r5
 80090ec:	18bb      	adds	r3, r7, r2
 80090ee:	789b      	ldrb	r3, [r3, #2]
 80090f0:	001e      	movs	r6, r3
 80090f2:	18bb      	adds	r3, r7, r2
 80090f4:	785b      	ldrb	r3, [r3, #1]
 80090f6:	469c      	mov	ip, r3
 80090f8:	18bb      	adds	r3, r7, r2
 80090fa:	78db      	ldrb	r3, [r3, #3]
 80090fc:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80090fe:	0021      	movs	r1, r4
 8009100:	187b      	adds	r3, r7, r1
 8009102:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009104:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009106:	187b      	adds	r3, r7, r1
 8009108:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800910a:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800910c:	187b      	adds	r3, r7, r1
 800910e:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009110:	4906      	ldr	r1, [pc, #24]	@ (800912c <getUTCfromPosixTime+0x5c>)
 8009112:	6838      	ldr	r0, [r7, #0]
 8009114:	9303      	str	r3, [sp, #12]
 8009116:	9502      	str	r5, [sp, #8]
 8009118:	9401      	str	r4, [sp, #4]
 800911a:	9200      	str	r2, [sp, #0]
 800911c:	4663      	mov	r3, ip
 800911e:	0032      	movs	r2, r6
 8009120:	f01b fbb0 	bl	8024884 <siprintf>
}
 8009124:	46c0      	nop			@ (mov r8, r8)
 8009126:	46bd      	mov	sp, r7
 8009128:	b009      	add	sp, #36	@ 0x24
 800912a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800912c:	0802a8e8 	.word	0x0802a8e8

08009130 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8009138:	4b10      	ldr	r3, [pc, #64]	@ (800917c <RTC_SetWakeUpTimer+0x4c>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	0018      	movs	r0, r3
 800913e:	f011 ff47 	bl	801afd0 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8009142:	4b0e      	ldr	r3, [pc, #56]	@ (800917c <RTC_SetWakeUpTimer+0x4c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	22ff      	movs	r2, #255	@ 0xff
 800914c:	401a      	ands	r2, r3
 800914e:	4b0b      	ldr	r3, [pc, #44]	@ (800917c <RTC_SetWakeUpTimer+0x4c>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	490a      	ldr	r1, [pc, #40]	@ (8009180 <RTC_SetWakeUpTimer+0x50>)
 8009156:	430a      	orrs	r2, r1
 8009158:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800915a:	4b0a      	ldr	r3, [pc, #40]	@ (8009184 <RTC_SetWakeUpTimer+0x54>)
 800915c:	2280      	movs	r2, #128	@ 0x80
 800915e:	0352      	lsls	r2, r2, #13
 8009160:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8009162:	4b06      	ldr	r3, [pc, #24]	@ (800917c <RTC_SetWakeUpTimer+0x4c>)
 8009164:	6818      	ldr	r0, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	3b01      	subs	r3, #1
 800916a:	2204      	movs	r2, #4
 800916c:	0019      	movs	r1, r3
 800916e:	f011 fe57 	bl	801ae20 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8009172:	46c0      	nop			@ (mov r8, r8)
 8009174:	46bd      	mov	sp, r7
 8009176:	b002      	add	sp, #8
 8009178:	bd80      	pop	{r7, pc}
 800917a:	46c0      	nop			@ (mov r8, r8)
 800917c:	20000b88 	.word	0x20000b88
 8009180:	fffffb7f 	.word	0xfffffb7f
 8009184:	40010400 	.word	0x40010400

08009188 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 800918c:	4a0b      	ldr	r2, [pc, #44]	@ (80091bc <Enter_Standby_Mode+0x34>)
 800918e:	4b0c      	ldr	r3, [pc, #48]	@ (80091c0 <Enter_Standby_Mode+0x38>)
 8009190:	0019      	movs	r1, r3
 8009192:	2003      	movs	r0, #3
 8009194:	f009 fa94 	bl	80126c0 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8009198:	2064      	movs	r0, #100	@ 0x64
 800919a:	f009 ffd1 	bl	8013140 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800919e:	4b09      	ldr	r3, [pc, #36]	@ (80091c4 <Enter_Standby_Mode+0x3c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	0018      	movs	r0, r3
 80091a4:	f011 ff14 	bl	801afd0 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 80091a8:	f002 f8f4 	bl	800b394 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 80091ac:	f009 ffec 	bl	8013188 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 80091b0:	f010 fb6e 	bl	8019890 <HAL_PWR_EnterSTANDBYMode>
}
 80091b4:	46c0      	nop			@ (mov r8, r8)
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	46c0      	nop			@ (mov r8, r8)
 80091bc:	0802a93c 	.word	0x0802a93c
 80091c0:	0802a824 	.word	0x0802a824
 80091c4:	20000b88 	.word	0x20000b88

080091c8 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af02      	add	r7, sp, #8
 80091ce:	0002      	movs	r2, r0
 80091d0:	1dbb      	adds	r3, r7, #6
 80091d2:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 80091d4:	4b4e      	ldr	r3, [pc, #312]	@ (8009310 <Enter_Stop_Mode+0x148>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 80091dc:	f003 ffe0 	bl	800d1a0 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 80091e0:	f7ff fbac 	bl	800893c <ReadBatteryVoltage>
 80091e4:	1c03      	adds	r3, r0, #0
 80091e6:	1c18      	adds	r0, r3, #0
 80091e8:	f7fa f93c 	bl	8003464 <__aeabi_f2d>
 80091ec:	0002      	movs	r2, r0
 80091ee:	000b      	movs	r3, r1
 80091f0:	4848      	ldr	r0, [pc, #288]	@ (8009314 <Enter_Stop_Mode+0x14c>)
 80091f2:	4949      	ldr	r1, [pc, #292]	@ (8009318 <Enter_Stop_Mode+0x150>)
 80091f4:	9200      	str	r2, [sp, #0]
 80091f6:	9301      	str	r3, [sp, #4]
 80091f8:	0002      	movs	r2, r0
 80091fa:	2002      	movs	r0, #2
 80091fc:	f009 fa60 	bl	80126c0 <CreateLine>
  powerDisplay(powerCheck());
 8009200:	f008 fae8 	bl	80117d4 <powerCheck>
 8009204:	0003      	movs	r3, r0
 8009206:	0018      	movs	r0, r3
 8009208:	f008 fb00 	bl	801180c <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800920c:	1dbb      	adds	r3, r7, #6
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	4a42      	ldr	r2, [pc, #264]	@ (800931c <Enter_Stop_Mode+0x154>)
 8009212:	4943      	ldr	r1, [pc, #268]	@ (8009320 <Enter_Stop_Mode+0x158>)
 8009214:	2003      	movs	r0, #3
 8009216:	f009 fa53 	bl	80126c0 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800921a:	f7ff ff44 	bl	80090a6 <getPosixTime>
 800921e:	0002      	movs	r2, r0
 8009220:	1dbb      	adds	r3, r7, #6
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	18d3      	adds	r3, r2, r3
 8009226:	4a3f      	ldr	r2, [pc, #252]	@ (8009324 <Enter_Stop_Mode+0x15c>)
 8009228:	0011      	movs	r1, r2
 800922a:	0018      	movs	r0, r3
 800922c:	f7ff ff50 	bl	80090d0 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8009230:	4b3c      	ldr	r3, [pc, #240]	@ (8009324 <Enter_Stop_Mode+0x15c>)
 8009232:	4a3d      	ldr	r2, [pc, #244]	@ (8009328 <Enter_Stop_Mode+0x160>)
 8009234:	4938      	ldr	r1, [pc, #224]	@ (8009318 <Enter_Stop_Mode+0x150>)
 8009236:	2002      	movs	r0, #2
 8009238:	f009 fa42 	bl	80126c0 <CreateLine>
  HAL_Delay(100);
 800923c:	2064      	movs	r0, #100	@ 0x64
 800923e:	f009 ff7f 	bl	8013140 <HAL_Delay>
  HAL_SuspendTick();
 8009242:	f009 ffa1 	bl	8013188 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8009246:	1dbb      	adds	r3, r7, #6
 8009248:	881b      	ldrh	r3, [r3, #0]
 800924a:	0018      	movs	r0, r3
 800924c:	f7ff ff70 	bl	8009130 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009250:	2101      	movs	r1, #1
 8009252:	2001      	movs	r0, #1
 8009254:	f010 fac0 	bl	80197d8 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8009258:	f002 fd2c 	bl	800bcb4 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800925c:	f009 ffa2 	bl	80131a4 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8009260:	1dbb      	adds	r3, r7, #6
 8009262:	881b      	ldrh	r3, [r3, #0]
 8009264:	0018      	movs	r0, r3
 8009266:	f003 ff0f 	bl	800d088 <sen5x_enable>
 800926a:	1e03      	subs	r3, r0, #0
 800926c:	d01e      	beq.n	80092ac <Enter_Stop_Mode+0xe4>
    showTime();
 800926e:	f7ff fc4b 	bl	8008b08 <showTime>
    set_light_on_state();
 8009272:	f004 fc2b 	bl	800dacc <set_light_on_state>
    if (!userToggle) {
 8009276:	4b2d      	ldr	r3, [pc, #180]	@ (800932c <Enter_Stop_Mode+0x164>)
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	2201      	movs	r2, #1
 800927c:	4053      	eors	r3, r2
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	d013      	beq.n	80092ac <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 8009284:	201c      	movs	r0, #28
 8009286:	f7ff ff53 	bl	8009130 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 800928a:	4a24      	ldr	r2, [pc, #144]	@ (800931c <Enter_Stop_Mode+0x154>)
 800928c:	4924      	ldr	r1, [pc, #144]	@ (8009320 <Enter_Stop_Mode+0x158>)
 800928e:	231c      	movs	r3, #28
 8009290:	2003      	movs	r0, #3
 8009292:	f009 fa15 	bl	80126c0 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009296:	2101      	movs	r1, #1
 8009298:	2001      	movs	r0, #1
 800929a:	f010 fa9d 	bl	80197d8 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 800929e:	f002 fd09 	bl	800bcb4 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 80092a2:	f009 ff7f 	bl	80131a4 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 80092a6:	2000      	movs	r0, #0
 80092a8:	f003 fecc 	bl	800d044 <setsen5xReadTimer>
    }
  }
  showTime();
 80092ac:	f7ff fc2c 	bl	8008b08 <showTime>
  EnabledConnectedDevices();
 80092b0:	f003 fa66 	bl	800c780 <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 80092b4:	f003 fb60 	bl	800c978 <ResetDBACalculator>
  ResetSGP40samplecounter();
 80092b8:	f006 fa62 	bl	800f780 <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 80092bc:	f7fa fa28 	bl	8003710 <ResetENS160samplecounter>
  setsen5xSamplecounter(0);
 80092c0:	2000      	movs	r0, #0
 80092c2:	f003 fed1 	bl	800d068 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 80092c6:	4b1a      	ldr	r3, [pc, #104]	@ (8009330 <Enter_Stop_Mode+0x168>)
 80092c8:	0018      	movs	r0, r3
 80092ca:	f7fb f8eb 	bl	80044a4 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 80092ce:	201e      	movs	r0, #30
 80092d0:	f006 fa44 	bl	800f75c <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 80092d4:	205a      	movs	r0, #90	@ 0x5a
 80092d6:	f009 fc4f 	bl	8012b78 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 80092da:	203c      	movs	r0, #60	@ 0x3c
 80092dc:	f000 fb96 	bl	8009a0c <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 80092e0:	205a      	movs	r0, #90	@ 0x5a
 80092e2:	f000 ff35 	bl	800a150 <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 80092e6:	2000      	movs	r0, #0
 80092e8:	f7fa fa1c 	bl	8003724 <setENS160TimeStamp>
  setMICTimeStamp(0);
 80092ec:	2000      	movs	r0, #0
 80092ee:	f003 fb31 	bl	800c954 <setMICTimeStamp>
  ESPTransmitDone = false;
 80092f2:	4b10      	ldr	r3, [pc, #64]	@ (8009334 <Enter_Stop_Mode+0x16c>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 80092f8:	f009 ff18 	bl	801312c <HAL_GetTick>
 80092fc:	0003      	movs	r3, r0
 80092fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009330 <Enter_Stop_Mode+0x168>)
 8009300:	189a      	adds	r2, r3, r2
 8009302:	4b0d      	ldr	r3, [pc, #52]	@ (8009338 <Enter_Stop_Mode+0x170>)
 8009304:	601a      	str	r2, [r3, #0]
}
 8009306:	46c0      	nop			@ (mov r8, r8)
 8009308:	46bd      	mov	sp, r7
 800930a:	b002      	add	sp, #8
 800930c:	bd80      	pop	{r7, pc}
 800930e:	46c0      	nop			@ (mov r8, r8)
 8009310:	20000eed 	.word	0x20000eed
 8009314:	0802a960 	.word	0x0802a960
 8009318:	0802a978 	.word	0x0802a978
 800931c:	0802a97c 	.word	0x0802a97c
 8009320:	0802a824 	.word	0x0802a824
 8009324:	20000b90 	.word	0x20000b90
 8009328:	0802a9a0 	.word	0x0802a9a0
 800932c:	20001e7e 	.word	0x20001e7e
 8009330:	00001194 	.word	0x00001194
 8009334:	200005c0 	.word	0x200005c0
 8009338:	20000e44 	.word	0x20000e44

0800933c <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8009344:	4b03      	ldr	r3, [pc, #12]	@ (8009354 <InitClock+0x18>)
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	601a      	str	r2, [r3, #0]
}
 800934a:	46c0      	nop			@ (mov r8, r8)
 800934c:	46bd      	mov	sp, r7
 800934e:	b002      	add	sp, #8
 8009350:	bd80      	pop	{r7, pc}
 8009352:	46c0      	nop			@ (mov r8, r8)
 8009354:	20000b88 	.word	0x20000b88

08009358 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	78db      	ldrb	r3, [r3, #3]
 8009366:	001a      	movs	r2, r3
 8009368:	0013      	movs	r3, r2
 800936a:	025b      	lsls	r3, r3, #9
 800936c:	189b      	adds	r3, r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	189b      	adds	r3, r3, r2
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	189b      	adds	r3, r3, r2
 8009376:	011a      	lsls	r2, r3, #4
 8009378:	1ad2      	subs	r2, r2, r3
 800937a:	01d3      	lsls	r3, r2, #7
 800937c:	001a      	movs	r2, r3
 800937e:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8009380:	2300      	movs	r3, #0
 8009382:	60fb      	str	r3, [r7, #12]
 8009384:	e028      	b.n	80093d8 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	4a53      	ldr	r2, [pc, #332]	@ (80094d8 <makeTime+0x180>)
 800938a:	4293      	cmp	r3, r2
 800938c:	db21      	blt.n	80093d2 <makeTime+0x7a>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	4a52      	ldr	r2, [pc, #328]	@ (80094dc <makeTime+0x184>)
 8009392:	4694      	mov	ip, r2
 8009394:	4463      	add	r3, ip
 8009396:	001a      	movs	r2, r3
 8009398:	2303      	movs	r3, #3
 800939a:	4013      	ands	r3, r2
 800939c:	d119      	bne.n	80093d2 <makeTime+0x7a>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4a4e      	ldr	r2, [pc, #312]	@ (80094dc <makeTime+0x184>)
 80093a2:	4694      	mov	ip, r2
 80093a4:	4463      	add	r3, ip
 80093a6:	2164      	movs	r1, #100	@ 0x64
 80093a8:	0018      	movs	r0, r3
 80093aa:	f7f7 f86b 	bl	8000484 <__aeabi_idivmod>
 80093ae:	1e0b      	subs	r3, r1, #0
 80093b0:	d10a      	bne.n	80093c8 <makeTime+0x70>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	4a49      	ldr	r2, [pc, #292]	@ (80094dc <makeTime+0x184>)
 80093b6:	4694      	mov	ip, r2
 80093b8:	4463      	add	r3, ip
 80093ba:	22c8      	movs	r2, #200	@ 0xc8
 80093bc:	0051      	lsls	r1, r2, #1
 80093be:	0018      	movs	r0, r3
 80093c0:	f7f7 f860 	bl	8000484 <__aeabi_idivmod>
 80093c4:	1e0b      	subs	r3, r1, #0
 80093c6:	d104      	bne.n	80093d2 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	4a45      	ldr	r2, [pc, #276]	@ (80094e0 <makeTime+0x188>)
 80093cc:	4694      	mov	ip, r2
 80093ce:	4463      	add	r3, ip
 80093d0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	3301      	adds	r3, #1
 80093d6:	60fb      	str	r3, [r7, #12]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	78db      	ldrb	r3, [r3, #3]
 80093dc:	001a      	movs	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	4293      	cmp	r3, r2
 80093e2:	dbd0      	blt.n	8009386 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 80093e4:	2301      	movs	r3, #1
 80093e6:	60fb      	str	r3, [r7, #12]
 80093e8:	e03c      	b.n	8009464 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d125      	bne.n	800943c <makeTime+0xe4>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	78db      	ldrb	r3, [r3, #3]
 80093f4:	4a39      	ldr	r2, [pc, #228]	@ (80094dc <makeTime+0x184>)
 80093f6:	4694      	mov	ip, r2
 80093f8:	4463      	add	r3, ip
 80093fa:	001a      	movs	r2, r3
 80093fc:	2303      	movs	r3, #3
 80093fe:	4013      	ands	r3, r2
 8009400:	d11c      	bne.n	800943c <makeTime+0xe4>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	78db      	ldrb	r3, [r3, #3]
 8009406:	4a35      	ldr	r2, [pc, #212]	@ (80094dc <makeTime+0x184>)
 8009408:	4694      	mov	ip, r2
 800940a:	4463      	add	r3, ip
 800940c:	2164      	movs	r1, #100	@ 0x64
 800940e:	0018      	movs	r0, r3
 8009410:	f7f7 f838 	bl	8000484 <__aeabi_idivmod>
 8009414:	1e0b      	subs	r3, r1, #0
 8009416:	d10b      	bne.n	8009430 <makeTime+0xd8>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	78db      	ldrb	r3, [r3, #3]
 800941c:	4a2f      	ldr	r2, [pc, #188]	@ (80094dc <makeTime+0x184>)
 800941e:	4694      	mov	ip, r2
 8009420:	4463      	add	r3, ip
 8009422:	22c8      	movs	r2, #200	@ 0xc8
 8009424:	0051      	lsls	r1, r2, #1
 8009426:	0018      	movs	r0, r3
 8009428:	f7f7 f82c 	bl	8000484 <__aeabi_idivmod>
 800942c:	1e0b      	subs	r3, r1, #0
 800942e:	d105      	bne.n	800943c <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	4a2c      	ldr	r2, [pc, #176]	@ (80094e4 <makeTime+0x18c>)
 8009434:	4694      	mov	ip, r2
 8009436:	4463      	add	r3, ip
 8009438:	60bb      	str	r3, [r7, #8]
 800943a:	e010      	b.n	800945e <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	3b01      	subs	r3, #1
 8009440:	4a29      	ldr	r2, [pc, #164]	@ (80094e8 <makeTime+0x190>)
 8009442:	5cd3      	ldrb	r3, [r2, r3]
 8009444:	001a      	movs	r2, r3
 8009446:	0013      	movs	r3, r2
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	189b      	adds	r3, r3, r2
 800944c:	011a      	lsls	r2, r3, #4
 800944e:	1ad2      	subs	r2, r2, r3
 8009450:	0113      	lsls	r3, r2, #4
 8009452:	1a9b      	subs	r3, r3, r2
 8009454:	01db      	lsls	r3, r3, #7
 8009456:	001a      	movs	r2, r3
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	189b      	adds	r3, r3, r2
 800945c:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	3301      	adds	r3, #1
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	785b      	ldrb	r3, [r3, #1]
 8009468:	001a      	movs	r2, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4293      	cmp	r3, r2
 800946e:	dbbc      	blt.n	80093ea <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	789b      	ldrb	r3, [r3, #2]
 8009474:	3b01      	subs	r3, #1
 8009476:	001a      	movs	r2, r3
 8009478:	0013      	movs	r3, r2
 800947a:	005b      	lsls	r3, r3, #1
 800947c:	189b      	adds	r3, r3, r2
 800947e:	011a      	lsls	r2, r3, #4
 8009480:	1ad2      	subs	r2, r2, r3
 8009482:	0113      	lsls	r3, r2, #4
 8009484:	1a9b      	subs	r3, r3, r2
 8009486:	01db      	lsls	r3, r3, #7
 8009488:	001a      	movs	r2, r3
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	189b      	adds	r3, r3, r2
 800948e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	001a      	movs	r2, r3
 8009496:	0013      	movs	r3, r2
 8009498:	011b      	lsls	r3, r3, #4
 800949a:	1a9b      	subs	r3, r3, r2
 800949c:	011a      	lsls	r2, r3, #4
 800949e:	1ad2      	subs	r2, r2, r3
 80094a0:	0113      	lsls	r3, r2, #4
 80094a2:	001a      	movs	r2, r3
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	189b      	adds	r3, r3, r2
 80094a8:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	785b      	ldrb	r3, [r3, #1]
 80094ae:	001a      	movs	r2, r3
 80094b0:	0013      	movs	r3, r2
 80094b2:	011b      	lsls	r3, r3, #4
 80094b4:	1a9b      	subs	r3, r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	001a      	movs	r2, r3
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	189b      	adds	r3, r3, r2
 80094be:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	789b      	ldrb	r3, [r3, #2]
 80094c4:	001a      	movs	r2, r3
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	189b      	adds	r3, r3, r2
 80094ca:	60bb      	str	r3, [r7, #8]
  return seconds;
 80094cc:	68bb      	ldr	r3, [r7, #8]
}
 80094ce:	0018      	movs	r0, r3
 80094d0:	46bd      	mov	sp, r7
 80094d2:	b004      	add	sp, #16
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	46c0      	nop			@ (mov r8, r8)
 80094d8:	fffff84f 	.word	0xfffff84f
 80094dc:	000007b2 	.word	0x000007b2
 80094e0:	00015180 	.word	0x00015180
 80094e4:	00263b80 	.word	0x00263b80
 80094e8:	0802ca14 	.word	0x0802ca14

080094ec <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 80094ec:	b590      	push	{r4, r7, lr}
 80094ee:	b089      	sub	sp, #36	@ 0x24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	213c      	movs	r1, #60	@ 0x3c
 8009500:	0018      	movs	r0, r3
 8009502:	f7f6 fed5 	bl	80002b0 <__aeabi_uidivmod>
 8009506:	000b      	movs	r3, r1
 8009508:	b2da      	uxtb	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	213c      	movs	r1, #60	@ 0x3c
 8009512:	0018      	movs	r0, r3
 8009514:	f7f6 fe46 	bl	80001a4 <__udivsi3>
 8009518:	0003      	movs	r3, r0
 800951a:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	213c      	movs	r1, #60	@ 0x3c
 8009520:	0018      	movs	r0, r3
 8009522:	f7f6 fec5 	bl	80002b0 <__aeabi_uidivmod>
 8009526:	000b      	movs	r3, r1
 8009528:	b2da      	uxtb	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	213c      	movs	r1, #60	@ 0x3c
 8009532:	0018      	movs	r0, r3
 8009534:	f7f6 fe36 	bl	80001a4 <__udivsi3>
 8009538:	0003      	movs	r3, r0
 800953a:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	2118      	movs	r1, #24
 8009540:	0018      	movs	r0, r3
 8009542:	f7f6 feb5 	bl	80002b0 <__aeabi_uidivmod>
 8009546:	000b      	movs	r3, r1
 8009548:	b2da      	uxtb	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	2118      	movs	r1, #24
 8009552:	0018      	movs	r0, r3
 8009554:	f7f6 fe26 	bl	80001a4 <__udivsi3>
 8009558:	0003      	movs	r3, r0
 800955a:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	3b01      	subs	r3, #1
 8009560:	2107      	movs	r1, #7
 8009562:	0018      	movs	r0, r3
 8009564:	f7f6 fea4 	bl	80002b0 <__aeabi_uidivmod>
 8009568:	000b      	movs	r3, r1
 800956a:	b2db      	uxtb	r3, r3
 800956c:	3301      	adds	r3, #1
 800956e:	b2da      	uxtb	r2, r3
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	701a      	strb	r2, [r3, #0]
  year = 0;
 8009574:	231f      	movs	r3, #31
 8009576:	18fb      	adds	r3, r7, r3
 8009578:	2200      	movs	r2, #0
 800957a:	701a      	strb	r2, [r3, #0]
  days = 0;
 800957c:	2300      	movs	r3, #0
 800957e:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8009580:	e005      	b.n	800958e <breakPosixTime+0xa2>
    year++;
 8009582:	211f      	movs	r1, #31
 8009584:	187b      	adds	r3, r7, r1
 8009586:	781a      	ldrb	r2, [r3, #0]
 8009588:	187b      	adds	r3, r7, r1
 800958a:	3201      	adds	r2, #1
 800958c:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800958e:	241f      	movs	r4, #31
 8009590:	193b      	adds	r3, r7, r4
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	4a64      	ldr	r2, [pc, #400]	@ (8009728 <breakPosixTime+0x23c>)
 8009596:	4694      	mov	ip, r2
 8009598:	4463      	add	r3, ip
 800959a:	001a      	movs	r2, r3
 800959c:	2303      	movs	r3, #3
 800959e:	4013      	ands	r3, r2
 80095a0:	d119      	bne.n	80095d6 <breakPosixTime+0xea>
 80095a2:	193b      	adds	r3, r7, r4
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	4a60      	ldr	r2, [pc, #384]	@ (8009728 <breakPosixTime+0x23c>)
 80095a8:	4694      	mov	ip, r2
 80095aa:	4463      	add	r3, ip
 80095ac:	2164      	movs	r1, #100	@ 0x64
 80095ae:	0018      	movs	r0, r3
 80095b0:	f7f6 ff68 	bl	8000484 <__aeabi_idivmod>
 80095b4:	1e0b      	subs	r3, r1, #0
 80095b6:	d10b      	bne.n	80095d0 <breakPosixTime+0xe4>
 80095b8:	193b      	adds	r3, r7, r4
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	4a5a      	ldr	r2, [pc, #360]	@ (8009728 <breakPosixTime+0x23c>)
 80095be:	4694      	mov	ip, r2
 80095c0:	4463      	add	r3, ip
 80095c2:	22c8      	movs	r2, #200	@ 0xc8
 80095c4:	0051      	lsls	r1, r2, #1
 80095c6:	0018      	movs	r0, r3
 80095c8:	f7f6 ff5c 	bl	8000484 <__aeabi_idivmod>
 80095cc:	1e0b      	subs	r3, r1, #0
 80095ce:	d102      	bne.n	80095d6 <breakPosixTime+0xea>
 80095d0:	23b7      	movs	r3, #183	@ 0xb7
 80095d2:	005b      	lsls	r3, r3, #1
 80095d4:	e001      	b.n	80095da <breakPosixTime+0xee>
 80095d6:	236e      	movs	r3, #110	@ 0x6e
 80095d8:	33ff      	adds	r3, #255	@ 0xff
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	18d3      	adds	r3, r2, r3
 80095de:	617b      	str	r3, [r7, #20]
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d9cc      	bls.n	8009582 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	241f      	movs	r4, #31
 80095ec:	193a      	adds	r2, r7, r4
 80095ee:	7812      	ldrb	r2, [r2, #0]
 80095f0:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 80095f2:	193b      	adds	r3, r7, r4
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	4a4c      	ldr	r2, [pc, #304]	@ (8009728 <breakPosixTime+0x23c>)
 80095f8:	4694      	mov	ip, r2
 80095fa:	4463      	add	r3, ip
 80095fc:	001a      	movs	r2, r3
 80095fe:	2303      	movs	r3, #3
 8009600:	4013      	ands	r3, r2
 8009602:	d119      	bne.n	8009638 <breakPosixTime+0x14c>
 8009604:	193b      	adds	r3, r7, r4
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	4a47      	ldr	r2, [pc, #284]	@ (8009728 <breakPosixTime+0x23c>)
 800960a:	4694      	mov	ip, r2
 800960c:	4463      	add	r3, ip
 800960e:	2164      	movs	r1, #100	@ 0x64
 8009610:	0018      	movs	r0, r3
 8009612:	f7f6 ff37 	bl	8000484 <__aeabi_idivmod>
 8009616:	1e0b      	subs	r3, r1, #0
 8009618:	d10b      	bne.n	8009632 <breakPosixTime+0x146>
 800961a:	193b      	adds	r3, r7, r4
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	4a42      	ldr	r2, [pc, #264]	@ (8009728 <breakPosixTime+0x23c>)
 8009620:	4694      	mov	ip, r2
 8009622:	4463      	add	r3, ip
 8009624:	22c8      	movs	r2, #200	@ 0xc8
 8009626:	0051      	lsls	r1, r2, #1
 8009628:	0018      	movs	r0, r3
 800962a:	f7f6 ff2b 	bl	8000484 <__aeabi_idivmod>
 800962e:	1e0b      	subs	r3, r1, #0
 8009630:	d102      	bne.n	8009638 <breakPosixTime+0x14c>
 8009632:	23b7      	movs	r3, #183	@ 0xb7
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	e001      	b.n	800963c <breakPosixTime+0x150>
 8009638:	236e      	movs	r3, #110	@ 0x6e
 800963a:	33ff      	adds	r3, #255	@ 0xff
 800963c:	697a      	ldr	r2, [r7, #20]
 800963e:	1ad3      	subs	r3, r2, r3
 8009640:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8009642:	69ba      	ldr	r2, [r7, #24]
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	61bb      	str	r3, [r7, #24]

  days=0;
 800964a:	2300      	movs	r3, #0
 800964c:	617b      	str	r3, [r7, #20]
  month=0;
 800964e:	211e      	movs	r1, #30
 8009650:	187b      	adds	r3, r7, r1
 8009652:	2200      	movs	r2, #0
 8009654:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8009656:	231d      	movs	r3, #29
 8009658:	18fb      	adds	r3, r7, r3
 800965a:	2200      	movs	r2, #0
 800965c:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800965e:	187b      	adds	r3, r7, r1
 8009660:	2200      	movs	r2, #0
 8009662:	701a      	strb	r2, [r3, #0]
 8009664:	e048      	b.n	80096f8 <breakPosixTime+0x20c>
    if (month==1) { // february
 8009666:	231e      	movs	r3, #30
 8009668:	18fb      	adds	r3, r7, r3
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d12a      	bne.n	80096c6 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8009670:	241f      	movs	r4, #31
 8009672:	193b      	adds	r3, r7, r4
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	4a2c      	ldr	r2, [pc, #176]	@ (8009728 <breakPosixTime+0x23c>)
 8009678:	4694      	mov	ip, r2
 800967a:	4463      	add	r3, ip
 800967c:	001a      	movs	r2, r3
 800967e:	2303      	movs	r3, #3
 8009680:	4013      	ands	r3, r2
 8009682:	d11b      	bne.n	80096bc <breakPosixTime+0x1d0>
 8009684:	193b      	adds	r3, r7, r4
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	4a27      	ldr	r2, [pc, #156]	@ (8009728 <breakPosixTime+0x23c>)
 800968a:	4694      	mov	ip, r2
 800968c:	4463      	add	r3, ip
 800968e:	2164      	movs	r1, #100	@ 0x64
 8009690:	0018      	movs	r0, r3
 8009692:	f7f6 fef7 	bl	8000484 <__aeabi_idivmod>
 8009696:	1e0b      	subs	r3, r1, #0
 8009698:	d10b      	bne.n	80096b2 <breakPosixTime+0x1c6>
 800969a:	193b      	adds	r3, r7, r4
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	4a22      	ldr	r2, [pc, #136]	@ (8009728 <breakPosixTime+0x23c>)
 80096a0:	4694      	mov	ip, r2
 80096a2:	4463      	add	r3, ip
 80096a4:	22c8      	movs	r2, #200	@ 0xc8
 80096a6:	0051      	lsls	r1, r2, #1
 80096a8:	0018      	movs	r0, r3
 80096aa:	f7f6 feeb 	bl	8000484 <__aeabi_idivmod>
 80096ae:	1e0b      	subs	r3, r1, #0
 80096b0:	d104      	bne.n	80096bc <breakPosixTime+0x1d0>
        monthLength=29;
 80096b2:	231d      	movs	r3, #29
 80096b4:	18fb      	adds	r3, r7, r3
 80096b6:	221d      	movs	r2, #29
 80096b8:	701a      	strb	r2, [r3, #0]
 80096ba:	e00c      	b.n	80096d6 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 80096bc:	231d      	movs	r3, #29
 80096be:	18fb      	adds	r3, r7, r3
 80096c0:	221c      	movs	r2, #28
 80096c2:	701a      	strb	r2, [r3, #0]
 80096c4:	e007      	b.n	80096d6 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 80096c6:	231e      	movs	r3, #30
 80096c8:	18fb      	adds	r3, r7, r3
 80096ca:	781a      	ldrb	r2, [r3, #0]
 80096cc:	231d      	movs	r3, #29
 80096ce:	18fb      	adds	r3, r7, r3
 80096d0:	4916      	ldr	r1, [pc, #88]	@ (800972c <breakPosixTime+0x240>)
 80096d2:	5c8a      	ldrb	r2, [r1, r2]
 80096d4:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 80096d6:	211d      	movs	r1, #29
 80096d8:	187b      	adds	r3, r7, r1
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d310      	bcc.n	8009704 <breakPosixTime+0x218>
      time -= monthLength;
 80096e2:	187b      	adds	r3, r7, r1
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	69ba      	ldr	r2, [r7, #24]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 80096ec:	211e      	movs	r1, #30
 80096ee:	187b      	adds	r3, r7, r1
 80096f0:	781a      	ldrb	r2, [r3, #0]
 80096f2:	187b      	adds	r3, r7, r1
 80096f4:	3201      	adds	r2, #1
 80096f6:	701a      	strb	r2, [r3, #0]
 80096f8:	231e      	movs	r3, #30
 80096fa:	18fb      	adds	r3, r7, r3
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	2b0b      	cmp	r3, #11
 8009700:	d9b1      	bls.n	8009666 <breakPosixTime+0x17a>
 8009702:	e000      	b.n	8009706 <breakPosixTime+0x21a>
    } else {
        break;
 8009704:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8009706:	231e      	movs	r3, #30
 8009708:	18fb      	adds	r3, r7, r3
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	3301      	adds	r3, #1
 800970e:	b2da      	uxtb	r2, r3
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	b2db      	uxtb	r3, r3
 8009718:	3301      	adds	r3, #1
 800971a:	b2da      	uxtb	r2, r3
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	709a      	strb	r2, [r3, #2]
}
 8009720:	46c0      	nop			@ (mov r8, r8)
 8009722:	46bd      	mov	sp, r7
 8009724:	b009      	add	sp, #36	@ 0x24
 8009726:	bd90      	pop	{r4, r7, pc}
 8009728:	000007b2 	.word	0x000007b2
 800972c:	0802ca14 	.word	0x0802ca14

08009730 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009736:	003b      	movs	r3, r7
 8009738:	0018      	movs	r0, r3
 800973a:	2308      	movs	r3, #8
 800973c:	001a      	movs	r2, r3
 800973e:	2100      	movs	r1, #0
 8009740:	f01b fa06 	bl	8024b50 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8009744:	4b30      	ldr	r3, [pc, #192]	@ (8009808 <MX_ADC_Init+0xd8>)
 8009746:	4a31      	ldr	r2, [pc, #196]	@ (800980c <MX_ADC_Init+0xdc>)
 8009748:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800974a:	4b2f      	ldr	r3, [pc, #188]	@ (8009808 <MX_ADC_Init+0xd8>)
 800974c:	2200      	movs	r2, #0
 800974e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8009750:	4b2d      	ldr	r3, [pc, #180]	@ (8009808 <MX_ADC_Init+0xd8>)
 8009752:	22c0      	movs	r2, #192	@ 0xc0
 8009754:	0612      	lsls	r2, r2, #24
 8009756:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8009758:	4b2b      	ldr	r3, [pc, #172]	@ (8009808 <MX_ADC_Init+0xd8>)
 800975a:	2200      	movs	r2, #0
 800975c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800975e:	4b2a      	ldr	r3, [pc, #168]	@ (8009808 <MX_ADC_Init+0xd8>)
 8009760:	2200      	movs	r2, #0
 8009762:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8009764:	4b28      	ldr	r3, [pc, #160]	@ (8009808 <MX_ADC_Init+0xd8>)
 8009766:	2201      	movs	r2, #1
 8009768:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800976a:	4b27      	ldr	r3, [pc, #156]	@ (8009808 <MX_ADC_Init+0xd8>)
 800976c:	2200      	movs	r2, #0
 800976e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8009770:	4b25      	ldr	r3, [pc, #148]	@ (8009808 <MX_ADC_Init+0xd8>)
 8009772:	2220      	movs	r2, #32
 8009774:	2100      	movs	r1, #0
 8009776:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8009778:	4b23      	ldr	r3, [pc, #140]	@ (8009808 <MX_ADC_Init+0xd8>)
 800977a:	2221      	movs	r2, #33	@ 0x21
 800977c:	2101      	movs	r1, #1
 800977e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009780:	4b21      	ldr	r3, [pc, #132]	@ (8009808 <MX_ADC_Init+0xd8>)
 8009782:	2200      	movs	r2, #0
 8009784:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009786:	4b20      	ldr	r3, [pc, #128]	@ (8009808 <MX_ADC_Init+0xd8>)
 8009788:	22c2      	movs	r2, #194	@ 0xc2
 800978a:	32ff      	adds	r2, #255	@ 0xff
 800978c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800978e:	4b1e      	ldr	r3, [pc, #120]	@ (8009808 <MX_ADC_Init+0xd8>)
 8009790:	222c      	movs	r2, #44	@ 0x2c
 8009792:	2100      	movs	r1, #0
 8009794:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009796:	4b1c      	ldr	r3, [pc, #112]	@ (8009808 <MX_ADC_Init+0xd8>)
 8009798:	2204      	movs	r2, #4
 800979a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800979c:	4b1a      	ldr	r3, [pc, #104]	@ (8009808 <MX_ADC_Init+0xd8>)
 800979e:	2200      	movs	r2, #0
 80097a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80097a2:	4b19      	ldr	r3, [pc, #100]	@ (8009808 <MX_ADC_Init+0xd8>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80097a8:	4b17      	ldr	r3, [pc, #92]	@ (8009808 <MX_ADC_Init+0xd8>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80097ae:	4b16      	ldr	r3, [pc, #88]	@ (8009808 <MX_ADC_Init+0xd8>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80097b4:	4b14      	ldr	r3, [pc, #80]	@ (8009808 <MX_ADC_Init+0xd8>)
 80097b6:	0018      	movs	r0, r3
 80097b8:	f009 fd20 	bl	80131fc <HAL_ADC_Init>
 80097bc:	1e03      	subs	r3, r0, #0
 80097be:	d001      	beq.n	80097c4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80097c0:	f002 fbc8 	bl	800bf54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80097c4:	003b      	movs	r3, r7
 80097c6:	4a12      	ldr	r2, [pc, #72]	@ (8009810 <MX_ADC_Init+0xe0>)
 80097c8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80097ca:	003b      	movs	r3, r7
 80097cc:	2280      	movs	r2, #128	@ 0x80
 80097ce:	0152      	lsls	r2, r2, #5
 80097d0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80097d2:	003a      	movs	r2, r7
 80097d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009808 <MX_ADC_Init+0xd8>)
 80097d6:	0011      	movs	r1, r2
 80097d8:	0018      	movs	r0, r3
 80097da:	f009 ff7f 	bl	80136dc <HAL_ADC_ConfigChannel>
 80097de:	1e03      	subs	r3, r0, #0
 80097e0:	d001      	beq.n	80097e6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80097e2:	f002 fbb7 	bl	800bf54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80097e6:	003b      	movs	r3, r7
 80097e8:	4a0a      	ldr	r2, [pc, #40]	@ (8009814 <MX_ADC_Init+0xe4>)
 80097ea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80097ec:	003a      	movs	r2, r7
 80097ee:	4b06      	ldr	r3, [pc, #24]	@ (8009808 <MX_ADC_Init+0xd8>)
 80097f0:	0011      	movs	r1, r2
 80097f2:	0018      	movs	r0, r3
 80097f4:	f009 ff72 	bl	80136dc <HAL_ADC_ConfigChannel>
 80097f8:	1e03      	subs	r3, r0, #0
 80097fa:	d001      	beq.n	8009800 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80097fc:	f002 fbaa 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8009800:	46c0      	nop			@ (mov r8, r8)
 8009802:	46bd      	mov	sp, r7
 8009804:	b002      	add	sp, #8
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20000ba8 	.word	0x20000ba8
 800980c:	40012400 	.word	0x40012400
 8009810:	38004000 	.word	0x38004000
 8009814:	3c008000 	.word	0x3c008000

08009818 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8009818:	b590      	push	{r4, r7, lr}
 800981a:	b089      	sub	sp, #36	@ 0x24
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009820:	240c      	movs	r4, #12
 8009822:	193b      	adds	r3, r7, r4
 8009824:	0018      	movs	r0, r3
 8009826:	2314      	movs	r3, #20
 8009828:	001a      	movs	r2, r3
 800982a:	2100      	movs	r1, #0
 800982c:	f01b f990 	bl	8024b50 <memset>
  if(adcHandle->Instance==ADC1)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a14      	ldr	r2, [pc, #80]	@ (8009888 <HAL_ADC_MspInit+0x70>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d121      	bne.n	800987e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800983a:	4b14      	ldr	r3, [pc, #80]	@ (800988c <HAL_ADC_MspInit+0x74>)
 800983c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800983e:	4b13      	ldr	r3, [pc, #76]	@ (800988c <HAL_ADC_MspInit+0x74>)
 8009840:	2180      	movs	r1, #128	@ 0x80
 8009842:	0089      	lsls	r1, r1, #2
 8009844:	430a      	orrs	r2, r1
 8009846:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009848:	4b10      	ldr	r3, [pc, #64]	@ (800988c <HAL_ADC_MspInit+0x74>)
 800984a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800984c:	4b0f      	ldr	r3, [pc, #60]	@ (800988c <HAL_ADC_MspInit+0x74>)
 800984e:	2104      	movs	r1, #4
 8009850:	430a      	orrs	r2, r1
 8009852:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009854:	4b0d      	ldr	r3, [pc, #52]	@ (800988c <HAL_ADC_MspInit+0x74>)
 8009856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009858:	2204      	movs	r2, #4
 800985a:	4013      	ands	r3, r2
 800985c:	60bb      	str	r3, [r7, #8]
 800985e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8009860:	193b      	adds	r3, r7, r4
 8009862:	2230      	movs	r2, #48	@ 0x30
 8009864:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009866:	193b      	adds	r3, r7, r4
 8009868:	2203      	movs	r2, #3
 800986a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800986c:	193b      	adds	r3, r7, r4
 800986e:	2200      	movs	r2, #0
 8009870:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009872:	193b      	adds	r3, r7, r4
 8009874:	4a06      	ldr	r2, [pc, #24]	@ (8009890 <HAL_ADC_MspInit+0x78>)
 8009876:	0019      	movs	r1, r3
 8009878:	0010      	movs	r0, r2
 800987a:	f00a fd4d 	bl	8014318 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800987e:	46c0      	nop			@ (mov r8, r8)
 8009880:	46bd      	mov	sp, r7
 8009882:	b009      	add	sp, #36	@ 0x24
 8009884:	bd90      	pop	{r4, r7, pc}
 8009886:	46c0      	nop			@ (mov r8, r8)
 8009888:	40012400 	.word	0x40012400
 800988c:	40021000 	.word	0x40021000
 8009890:	50000800 	.word	0x50000800

08009894 <ReadDirRegister>:
static uint8_t AHTerrors = 0;
AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009894:	b590      	push	{r4, r7, lr}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6039      	str	r1, [r7, #0]
 800989c:	0011      	movs	r1, r2
 800989e:	1dfb      	adds	r3, r7, #7
 80098a0:	1c02      	adds	r2, r0, #0
 80098a2:	701a      	strb	r2, [r3, #0]
 80098a4:	1dbb      	adds	r3, r7, #6
 80098a6:	1c0a      	adds	r2, r1, #0
 80098a8:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 80098aa:	4b0a      	ldr	r3, [pc, #40]	@ (80098d4 <ReadDirRegister+0x40>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00a      	beq.n	80098c8 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 80098b2:	4b08      	ldr	r3, [pc, #32]	@ (80098d4 <ReadDirRegister+0x40>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	1dba      	adds	r2, r7, #6
 80098b8:	7814      	ldrb	r4, [r2, #0]
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	1dfa      	adds	r2, r7, #7
 80098be:	7810      	ldrb	r0, [r2, #0]
 80098c0:	0022      	movs	r2, r4
 80098c2:	4798      	blx	r3
 80098c4:	0003      	movs	r3, r0
 80098c6:	e000      	b.n	80098ca <ReadDirRegister+0x36>
  }
  return false;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	0018      	movs	r0, r3
 80098cc:	46bd      	mov	sp, r7
 80098ce:	b003      	add	sp, #12
 80098d0:	bd90      	pop	{r4, r7, pc}
 80098d2:	46c0      	nop			@ (mov r8, r8)
 80098d4:	20000c10 	.word	0x20000c10

080098d8 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80098d8:	b590      	push	{r4, r7, lr}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6039      	str	r1, [r7, #0]
 80098e0:	0011      	movs	r1, r2
 80098e2:	1dfb      	adds	r3, r7, #7
 80098e4:	1c02      	adds	r2, r0, #0
 80098e6:	701a      	strb	r2, [r3, #0]
 80098e8:	1dbb      	adds	r3, r7, #6
 80098ea:	1c0a      	adds	r2, r1, #0
 80098ec:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 80098ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009918 <ReadRegister+0x40>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 80098f6:	4b08      	ldr	r3, [pc, #32]	@ (8009918 <ReadRegister+0x40>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	1dba      	adds	r2, r7, #6
 80098fc:	7814      	ldrb	r4, [r2, #0]
 80098fe:	6839      	ldr	r1, [r7, #0]
 8009900:	1dfa      	adds	r2, r7, #7
 8009902:	7810      	ldrb	r0, [r2, #0]
 8009904:	0022      	movs	r2, r4
 8009906:	4798      	blx	r3
 8009908:	0003      	movs	r3, r0
 800990a:	e000      	b.n	800990e <ReadRegister+0x36>
  }
  return false;
 800990c:	2300      	movs	r3, #0
}
 800990e:	0018      	movs	r0, r3
 8009910:	46bd      	mov	sp, r7
 8009912:	b003      	add	sp, #12
 8009914:	bd90      	pop	{r4, r7, pc}
 8009916:	46c0      	nop			@ (mov r8, r8)
 8009918:	20000c08 	.word	0x20000c08

0800991c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800991c:	b590      	push	{r4, r7, lr}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6039      	str	r1, [r7, #0]
 8009924:	0011      	movs	r1, r2
 8009926:	1dfb      	adds	r3, r7, #7
 8009928:	1c02      	adds	r2, r0, #0
 800992a:	701a      	strb	r2, [r3, #0]
 800992c:	1dbb      	adds	r3, r7, #6
 800992e:	1c0a      	adds	r2, r1, #0
 8009930:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8009932:	4b0a      	ldr	r3, [pc, #40]	@ (800995c <WriteRegister+0x40>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00a      	beq.n	8009950 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800993a:	4b08      	ldr	r3, [pc, #32]	@ (800995c <WriteRegister+0x40>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	1dba      	adds	r2, r7, #6
 8009940:	7814      	ldrb	r4, [r2, #0]
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	1dfa      	adds	r2, r7, #7
 8009946:	7810      	ldrb	r0, [r2, #0]
 8009948:	0022      	movs	r2, r4
 800994a:	4798      	blx	r3
 800994c:	0003      	movs	r3, r0
 800994e:	e000      	b.n	8009952 <WriteRegister+0x36>
  }
  return false;
 8009950:	2300      	movs	r3, #0
}
 8009952:	0018      	movs	r0, r3
 8009954:	46bd      	mov	sp, r7
 8009956:	b003      	add	sp, #12
 8009958:	bd90      	pop	{r4, r7, pc}
 800995a:	46c0      	nop			@ (mov r8, r8)
 800995c:	20000c0c 	.word	0x20000c0c

08009960 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	000a      	movs	r2, r1
 800996a:	1cfb      	adds	r3, r7, #3
 800996c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800996e:	230f      	movs	r3, #15
 8009970:	18fb      	adds	r3, r7, r3
 8009972:	22ff      	movs	r2, #255	@ 0xff
 8009974:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8009976:	230e      	movs	r3, #14
 8009978:	18fb      	adds	r3, r7, r3
 800997a:	2200      	movs	r2, #0
 800997c:	701a      	strb	r2, [r3, #0]
 800997e:	e037      	b.n	80099f0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8009980:	230e      	movs	r3, #14
 8009982:	18fb      	adds	r3, r7, r3
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	18d3      	adds	r3, r2, r3
 800998a:	7819      	ldrb	r1, [r3, #0]
 800998c:	220f      	movs	r2, #15
 800998e:	18bb      	adds	r3, r7, r2
 8009990:	18ba      	adds	r2, r7, r2
 8009992:	7812      	ldrb	r2, [r2, #0]
 8009994:	404a      	eors	r2, r1
 8009996:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8009998:	230d      	movs	r3, #13
 800999a:	18fb      	adds	r3, r7, r3
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
 80099a0:	e01b      	b.n	80099da <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 80099a2:	210f      	movs	r1, #15
 80099a4:	187b      	adds	r3, r7, r1
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	b25b      	sxtb	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	da09      	bge.n	80099c2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 80099ae:	187b      	adds	r3, r7, r1
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	005b      	lsls	r3, r3, #1
 80099b4:	b25b      	sxtb	r3, r3
 80099b6:	2231      	movs	r2, #49	@ 0x31
 80099b8:	4053      	eors	r3, r2
 80099ba:	b25a      	sxtb	r2, r3
 80099bc:	187b      	adds	r3, r7, r1
 80099be:	701a      	strb	r2, [r3, #0]
 80099c0:	e005      	b.n	80099ce <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 80099c2:	230f      	movs	r3, #15
 80099c4:	18fa      	adds	r2, r7, r3
 80099c6:	18fb      	adds	r3, r7, r3
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	18db      	adds	r3, r3, r3
 80099cc:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80099ce:	210d      	movs	r1, #13
 80099d0:	187b      	adds	r3, r7, r1
 80099d2:	781a      	ldrb	r2, [r3, #0]
 80099d4:	187b      	adds	r3, r7, r1
 80099d6:	3201      	adds	r2, #1
 80099d8:	701a      	strb	r2, [r3, #0]
 80099da:	230d      	movs	r3, #13
 80099dc:	18fb      	adds	r3, r7, r3
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	2b07      	cmp	r3, #7
 80099e2:	d9de      	bls.n	80099a2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80099e4:	210e      	movs	r1, #14
 80099e6:	187b      	adds	r3, r7, r1
 80099e8:	781a      	ldrb	r2, [r3, #0]
 80099ea:	187b      	adds	r3, r7, r1
 80099ec:	3201      	adds	r2, #1
 80099ee:	701a      	strb	r2, [r3, #0]
 80099f0:	230e      	movs	r3, #14
 80099f2:	18fa      	adds	r2, r7, r3
 80099f4:	1cfb      	adds	r3, r7, #3
 80099f6:	7812      	ldrb	r2, [r2, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d3c0      	bcc.n	8009980 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 80099fe:	230f      	movs	r3, #15
 8009a00:	18fb      	adds	r3, r7, r3
 8009a02:	781b      	ldrb	r3, [r3, #0]
}
 8009a04:	0018      	movs	r0, r3
 8009a06:	46bd      	mov	sp, r7
 8009a08:	b004      	add	sp, #16
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 8009a14:	f009 fb8a 	bl	801312c <HAL_GetTick>
 8009a18:	0002      	movs	r2, r0
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	18d2      	adds	r2, r2, r3
 8009a1e:	4b03      	ldr	r3, [pc, #12]	@ (8009a2c <setAHT20TimeStamp+0x20>)
 8009a20:	601a      	str	r2, [r3, #0]
}
 8009a22:	46c0      	nop			@ (mov r8, r8)
 8009a24:	46bd      	mov	sp, r7
 8009a26:	b002      	add	sp, #8
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	46c0      	nop			@ (mov r8, r8)
 8009a2c:	20000c04 	.word	0x20000c04

08009a30 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 8009a3c:	4b06      	ldr	r3, [pc, #24]	@ (8009a58 <AHT_Init+0x28>)
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 8009a42:	4b06      	ldr	r3, [pc, #24]	@ (8009a5c <AHT_Init+0x2c>)
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8009a48:	4b05      	ldr	r3, [pc, #20]	@ (8009a60 <AHT_Init+0x30>)
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	601a      	str	r2, [r3, #0]
}
 8009a4e:	46c0      	nop			@ (mov r8, r8)
 8009a50:	46bd      	mov	sp, r7
 8009a52:	b004      	add	sp, #16
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	46c0      	nop			@ (mov r8, r8)
 8009a58:	20000c10 	.word	0x20000c10
 8009a5c:	20000c08 	.word	0x20000c08
 8009a60:	20000c0c 	.word	0x20000c0c

08009a64 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af02      	add	r7, sp, #8
 8009a6a:	0002      	movs	r2, r0
 8009a6c:	1dfb      	adds	r3, r7, #7
 8009a6e:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 8009a70:	4b18      	ldr	r3, [pc, #96]	@ (8009ad4 <AHT20_register_reset+0x70>)
 8009a72:	1dfa      	adds	r2, r7, #7
 8009a74:	7812      	ldrb	r2, [r2, #0]
 8009a76:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 8009a78:	4b16      	ldr	r3, [pc, #88]	@ (8009ad4 <AHT20_register_reset+0x70>)
 8009a7a:	2203      	movs	r2, #3
 8009a7c:	0019      	movs	r1, r3
 8009a7e:	2038      	movs	r0, #56	@ 0x38
 8009a80:	f7ff ff4c 	bl	800991c <WriteRegister>
  HAL_Delay(15);
 8009a84:	200f      	movs	r0, #15
 8009a86:	f009 fb5b 	bl	8013140 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 8009a8a:	4b13      	ldr	r3, [pc, #76]	@ (8009ad8 <AHT20_register_reset+0x74>)
 8009a8c:	2203      	movs	r2, #3
 8009a8e:	0019      	movs	r1, r3
 8009a90:	2038      	movs	r0, #56	@ 0x38
 8009a92:	f7ff ff21 	bl	80098d8 <ReadRegister>
  HAL_Delay(15);
 8009a96:	200f      	movs	r0, #15
 8009a98:	f009 fb52 	bl	8013140 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 8009a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8009ad8 <AHT20_register_reset+0x74>)
 8009a9e:	22b0      	movs	r2, #176	@ 0xb0
 8009aa0:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 8009aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ad8 <AHT20_register_reset+0x74>)
 8009aa4:	789b      	ldrb	r3, [r3, #2]
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8009ad8 <AHT20_register_reset+0x74>)
 8009aaa:	78db      	ldrb	r3, [r3, #3]
 8009aac:	4a0b      	ldr	r2, [pc, #44]	@ (8009adc <AHT20_register_reset+0x78>)
 8009aae:	490c      	ldr	r1, [pc, #48]	@ (8009ae0 <AHT20_register_reset+0x7c>)
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	0003      	movs	r3, r0
 8009ab4:	2003      	movs	r0, #3
 8009ab6:	f008 fe03 	bl	80126c0 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 8009aba:	4b07      	ldr	r3, [pc, #28]	@ (8009ad8 <AHT20_register_reset+0x74>)
 8009abc:	2203      	movs	r2, #3
 8009abe:	0019      	movs	r1, r3
 8009ac0:	2038      	movs	r0, #56	@ 0x38
 8009ac2:	f7ff ff2b 	bl	800991c <WriteRegister>
  HAL_Delay(15);
 8009ac6:	200f      	movs	r0, #15
 8009ac8:	f009 fb3a 	bl	8013140 <HAL_Delay>
}
 8009acc:	46c0      	nop			@ (mov r8, r8)
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	b002      	add	sp, #8
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	20000090 	.word	0x20000090
 8009ad8:	20000c14 	.word	0x20000c14
 8009adc:	0802a9c0 	.word	0x0802a9c0
 8009ae0:	0802aa10 	.word	0x0802aa10

08009ae4 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 8009ae8:	201b      	movs	r0, #27
 8009aea:	f7ff ffbb 	bl	8009a64 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 8009aee:	201c      	movs	r0, #28
 8009af0:	f7ff ffb8 	bl	8009a64 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 8009af4:	201e      	movs	r0, #30
 8009af6:	f7ff ffb5 	bl	8009a64 <AHT20_register_reset>
}
 8009afa:	46c0      	nop			@ (mov r8, r8)
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 8009b00:	b580      	push	{r7, lr}
 8009b02:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 8009b04:	4b0c      	ldr	r3, [pc, #48]	@ (8009b38 <AHT20_read_status+0x38>)
 8009b06:	2201      	movs	r2, #1
 8009b08:	0019      	movs	r1, r3
 8009b0a:	2038      	movs	r0, #56	@ 0x38
 8009b0c:	f7ff ff06 	bl	800991c <WriteRegister>
  HAL_Delay(10);
 8009b10:	200a      	movs	r0, #10
 8009b12:	f009 fb15 	bl	8013140 <HAL_Delay>
  airtemphumraw[0] = 0;
 8009b16:	4b09      	ldr	r3, [pc, #36]	@ (8009b3c <AHT20_read_status+0x3c>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 8009b1c:	4b07      	ldr	r3, [pc, #28]	@ (8009b3c <AHT20_read_status+0x3c>)
 8009b1e:	2201      	movs	r2, #1
 8009b20:	0019      	movs	r1, r3
 8009b22:	2038      	movs	r0, #56	@ 0x38
 8009b24:	f7ff fed8 	bl	80098d8 <ReadRegister>
  HAL_Delay(10);
 8009b28:	200a      	movs	r0, #10
 8009b2a:	f009 fb09 	bl	8013140 <HAL_Delay>
  return airtemphumraw[0];
 8009b2e:	4b03      	ldr	r3, [pc, #12]	@ (8009b3c <AHT20_read_status+0x3c>)
 8009b30:	781b      	ldrb	r3, [r3, #0]
}
 8009b32:	0018      	movs	r0, r3
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	2000008c 	.word	0x2000008c
 8009b3c:	20000c14 	.word	0x20000c14

08009b40 <AHT20_init>:

bool AHT20_init(void) {
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 8009b46:	f009 faf1 	bl	801312c <HAL_GetTick>
 8009b4a:	0003      	movs	r3, r0
 8009b4c:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b77      	cmp	r3, #119	@ 0x77
 8009b52:	d805      	bhi.n	8009b60 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2278      	movs	r2, #120	@ 0x78
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	0018      	movs	r0, r3
 8009b5c:	f009 faf0 	bl	8013140 <HAL_Delay>
  }
  AHT20_read_status();
 8009b60:	f7ff ffce 	bl	8009b00 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 8009b64:	4b0e      	ldr	r3, [pc, #56]	@ (8009ba0 <AHT20_init+0x60>)
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	4a0e      	ldr	r2, [pc, #56]	@ (8009ba4 <AHT20_init+0x64>)
 8009b6a:	490f      	ldr	r1, [pc, #60]	@ (8009ba8 <AHT20_init+0x68>)
 8009b6c:	2003      	movs	r0, #3
 8009b6e:	f008 fda7 	bl	80126c0 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 8009b72:	4b0b      	ldr	r3, [pc, #44]	@ (8009ba0 <AHT20_init+0x60>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	001a      	movs	r2, r3
 8009b78:	2318      	movs	r3, #24
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	2b18      	cmp	r3, #24
 8009b7e:	d00a      	beq.n	8009b96 <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 8009b80:	4b0a      	ldr	r3, [pc, #40]	@ (8009bac <AHT20_init+0x6c>)
 8009b82:	2203      	movs	r2, #3
 8009b84:	0019      	movs	r1, r3
 8009b86:	2038      	movs	r0, #56	@ 0x38
 8009b88:	f7ff fec8 	bl	800991c <WriteRegister>
    HAL_Delay(10);
 8009b8c:	200a      	movs	r0, #10
 8009b8e:	f009 fad7 	bl	8013140 <HAL_Delay>
    AHT20_Start_Init();
 8009b92:	f7ff ffa7 	bl	8009ae4 <AHT20_Start_Init>
  }
  return true;
 8009b96:	2301      	movs	r3, #1
}
 8009b98:	0018      	movs	r0, r3
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	b002      	add	sp, #8
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20000c14 	.word	0x20000c14
 8009ba4:	0802aa14 	.word	0x0802aa14
 8009ba8:	0802aa10 	.word	0x0802aa10
 8009bac:	20000084 	.word	0x20000084

08009bb0 <AHT20_calibrate>:


bool AHT20_calibrate() {
 8009bb0:	b590      	push	{r4, r7, lr}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 8009bb6:	1dfc      	adds	r4, r7, #7
 8009bb8:	4b10      	ldr	r3, [pc, #64]	@ (8009bfc <AHT20_calibrate+0x4c>)
 8009bba:	2201      	movs	r2, #1
 8009bbc:	0019      	movs	r1, r3
 8009bbe:	2038      	movs	r0, #56	@ 0x38
 8009bc0:	f7ff feac 	bl	800991c <WriteRegister>
 8009bc4:	0003      	movs	r3, r0
 8009bc6:	7023      	strb	r3, [r4, #0]
  if (!response) {
 8009bc8:	1dfb      	adds	r3, r7, #7
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	4053      	eors	r3, r2
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d005      	beq.n	8009be2 <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 8009bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8009c00 <AHT20_calibrate+0x50>)
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c04 <AHT20_calibrate+0x54>)
 8009bda:	0019      	movs	r1, r3
 8009bdc:	2001      	movs	r0, #1
 8009bde:	f008 fd6f 	bl	80126c0 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 8009be2:	f009 faa3 	bl	801312c <HAL_GetTick>
 8009be6:	0003      	movs	r3, r0
 8009be8:	3332      	adds	r3, #50	@ 0x32
 8009bea:	001a      	movs	r2, r3
 8009bec:	4b06      	ldr	r3, [pc, #24]	@ (8009c08 <AHT20_calibrate+0x58>)
 8009bee:	601a      	str	r2, [r3, #0]
  return response;
 8009bf0:	1dfb      	adds	r3, r7, #7
 8009bf2:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	b003      	add	sp, #12
 8009bfa:	bd90      	pop	{r4, r7, pc}
 8009bfc:	2000008c 	.word	0x2000008c
 8009c00:	0802aa3c 	.word	0x0802aa3c
 8009c04:	0802aa74 	.word	0x0802aa74
 8009c08:	20000c04 	.word	0x20000c04

08009c0c <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 8009c10:	4a0a      	ldr	r2, [pc, #40]	@ (8009c3c <AHT20_DeviceConnected+0x30>)
 8009c12:	4b0b      	ldr	r3, [pc, #44]	@ (8009c40 <AHT20_DeviceConnected+0x34>)
 8009c14:	0019      	movs	r1, r3
 8009c16:	2003      	movs	r0, #3
 8009c18:	f008 fd52 	bl	80126c0 <CreateLine>
   AHT20_init();
 8009c1c:	f7ff ff90 	bl	8009b40 <AHT20_init>
   HAL_Delay(10);
 8009c20:	200a      	movs	r0, #10
 8009c22:	f009 fa8d 	bl	8013140 <HAL_Delay>
   AHT20_calibrate();
 8009c26:	f7ff ffc3 	bl	8009bb0 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 8009c2a:	f7ff ff69 	bl	8009b00 <AHT20_read_status>
 8009c2e:	0003      	movs	r3, r0
 8009c30:	1e5a      	subs	r2, r3, #1
 8009c32:	4193      	sbcs	r3, r2
 8009c34:	b2db      	uxtb	r3, r3
 }
 8009c36:	0018      	movs	r0, r3
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	0802aa78 	.word	0x0802aa78
 8009c40:	0802aa10 	.word	0x0802aa10

08009c44 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 8009c44:	b590      	push	{r4, r7, lr}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 8009c4a:	1dfc      	adds	r4, r7, #7
 8009c4c:	4b10      	ldr	r3, [pc, #64]	@ (8009c90 <AHT20_StartMeasurement+0x4c>)
 8009c4e:	2203      	movs	r2, #3
 8009c50:	0019      	movs	r1, r3
 8009c52:	2038      	movs	r0, #56	@ 0x38
 8009c54:	f7ff fe62 	bl	800991c <WriteRegister>
 8009c58:	0003      	movs	r3, r0
 8009c5a:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 8009c5c:	1dfb      	adds	r3, r7, #7
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2201      	movs	r2, #1
 8009c62:	4053      	eors	r3, r2
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d005      	beq.n	8009c76 <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 8009c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8009c94 <AHT20_StartMeasurement+0x50>)
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c98 <AHT20_StartMeasurement+0x54>)
 8009c6e:	0019      	movs	r1, r3
 8009c70:	2001      	movs	r0, #1
 8009c72:	f008 fd25 	bl	80126c0 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 8009c76:	f009 fa59 	bl	801312c <HAL_GetTick>
 8009c7a:	0003      	movs	r3, r0
 8009c7c:	33fa      	adds	r3, #250	@ 0xfa
 8009c7e:	001a      	movs	r2, r3
 8009c80:	4b06      	ldr	r3, [pc, #24]	@ (8009c9c <AHT20_StartMeasurement+0x58>)
 8009c82:	601a      	str	r2, [r3, #0]
  return response;
 8009c84:	1dfb      	adds	r3, r7, #7
 8009c86:	781b      	ldrb	r3, [r3, #0]
}
 8009c88:	0018      	movs	r0, r3
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	b003      	add	sp, #12
 8009c8e:	bd90      	pop	{r4, r7, pc}
 8009c90:	20000088 	.word	0x20000088
 8009c94:	0802aa90 	.word	0x0802aa90
 8009c98:	0802aa74 	.word	0x0802aa74
 8009c9c:	20000c04 	.word	0x20000c04

08009ca0 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 8009ca0:	b590      	push	{r4, r7, lr}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 8009ca6:	f009 fa41 	bl	801312c <HAL_GetTick>
 8009caa:	0003      	movs	r3, r0
 8009cac:	22fa      	movs	r2, #250	@ 0xfa
 8009cae:	0092      	lsls	r2, r2, #2
 8009cb0:	189a      	adds	r2, r3, r2
 8009cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8009d64 <AHT20_GetMeasurementValues+0xc4>)
 8009cb4:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 8009cb6:	e01f      	b.n	8009cf8 <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 8009cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8009d68 <AHT20_GetMeasurementValues+0xc8>)
 8009cba:	4b2c      	ldr	r3, [pc, #176]	@ (8009d6c <AHT20_GetMeasurementValues+0xcc>)
 8009cbc:	0019      	movs	r1, r3
 8009cbe:	2002      	movs	r0, #2
 8009cc0:	f008 fcfe 	bl	80126c0 <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 8009cc4:	4b27      	ldr	r3, [pc, #156]	@ (8009d64 <AHT20_GetMeasurementValues+0xc4>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	0018      	movs	r0, r3
 8009cca:	f008 fca3 	bl	8012614 <TimestampIsReached>
 8009cce:	1e03      	subs	r3, r0, #0
 8009cd0:	d00f      	beq.n	8009cf2 <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 8009cd2:	4a27      	ldr	r2, [pc, #156]	@ (8009d70 <AHT20_GetMeasurementValues+0xd0>)
 8009cd4:	4b27      	ldr	r3, [pc, #156]	@ (8009d74 <AHT20_GetMeasurementValues+0xd4>)
 8009cd6:	0019      	movs	r1, r3
 8009cd8:	2001      	movs	r0, #1
 8009cda:	f008 fcf1 	bl	80126c0 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 8009cde:	f009 fa25 	bl	801312c <HAL_GetTick>
 8009ce2:	0003      	movs	r3, r0
 8009ce4:	22fa      	movs	r2, #250	@ 0xfa
 8009ce6:	00d2      	lsls	r2, r2, #3
 8009ce8:	189a      	adds	r2, r3, r2
 8009cea:	4b1e      	ldr	r3, [pc, #120]	@ (8009d64 <AHT20_GetMeasurementValues+0xc4>)
 8009cec:	601a      	str	r2, [r3, #0]
      return false;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e034      	b.n	8009d5c <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 8009cf2:	200a      	movs	r0, #10
 8009cf4:	f009 fa24 	bl	8013140 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 8009cf8:	f7ff ff02 	bl	8009b00 <AHT20_read_status>
 8009cfc:	0003      	movs	r3, r0
 8009cfe:	001a      	movs	r2, r3
 8009d00:	2380      	movs	r3, #128	@ 0x80
 8009d02:	4013      	ands	r3, r2
 8009d04:	2b80      	cmp	r3, #128	@ 0x80
 8009d06:	d0d7      	beq.n	8009cb8 <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 8009d08:	200a      	movs	r0, #10
 8009d0a:	f009 fa19 	bl	8013140 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 8009d0e:	1dfb      	adds	r3, r7, #7
 8009d10:	2200      	movs	r2, #0
 8009d12:	701a      	strb	r2, [r3, #0]
 8009d14:	e009      	b.n	8009d2a <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 8009d16:	1dfb      	adds	r3, r7, #7
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	4a17      	ldr	r2, [pc, #92]	@ (8009d78 <AHT20_GetMeasurementValues+0xd8>)
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 8009d20:	1dfb      	adds	r3, r7, #7
 8009d22:	781a      	ldrb	r2, [r3, #0]
 8009d24:	1dfb      	adds	r3, r7, #7
 8009d26:	3201      	adds	r2, #1
 8009d28:	701a      	strb	r2, [r3, #0]
 8009d2a:	1dfb      	adds	r3, r7, #7
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b06      	cmp	r3, #6
 8009d30:	d9f1      	bls.n	8009d16 <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 8009d32:	1dbc      	adds	r4, r7, #6
 8009d34:	4b10      	ldr	r3, [pc, #64]	@ (8009d78 <AHT20_GetMeasurementValues+0xd8>)
 8009d36:	2207      	movs	r2, #7
 8009d38:	0019      	movs	r1, r3
 8009d3a:	2038      	movs	r0, #56	@ 0x38
 8009d3c:	f7ff fdaa 	bl	8009894 <ReadDirRegister>
 8009d40:	0003      	movs	r3, r0
 8009d42:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 8009d44:	200a      	movs	r0, #10
 8009d46:	f009 f9fb 	bl	8013140 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 8009d4a:	f009 f9ef 	bl	801312c <HAL_GetTick>
 8009d4e:	0003      	movs	r3, r0
 8009d50:	3364      	adds	r3, #100	@ 0x64
 8009d52:	001a      	movs	r2, r3
 8009d54:	4b03      	ldr	r3, [pc, #12]	@ (8009d64 <AHT20_GetMeasurementValues+0xc4>)
 8009d56:	601a      	str	r2, [r3, #0]
  return response;
 8009d58:	1dbb      	adds	r3, r7, #6
 8009d5a:	781b      	ldrb	r3, [r3, #0]
}
 8009d5c:	0018      	movs	r0, r3
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	b003      	add	sp, #12
 8009d62:	bd90      	pop	{r4, r7, pc}
 8009d64:	20000c04 	.word	0x20000c04
 8009d68:	0802aabc 	.word	0x0802aabc
 8009d6c:	0802aae4 	.word	0x0802aae4
 8009d70:	0802aae8 	.word	0x0802aae8
 8009d74:	0802aa74 	.word	0x0802aa74
 8009d78:	20000c14 	.word	0x20000c14

08009d7c <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 8009d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d7e:	46c6      	mov	lr, r8
 8009d80:	b500      	push	{lr}
 8009d82:	b08a      	sub	sp, #40	@ 0x28
 8009d84:	af06      	add	r7, sp, #24
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 8009d8a:	4b5a      	ldr	r3, [pc, #360]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009d8c:	799c      	ldrb	r4, [r3, #6]
 8009d8e:	4b59      	ldr	r3, [pc, #356]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009d90:	2106      	movs	r1, #6
 8009d92:	0018      	movs	r0, r3
 8009d94:	f7ff fde4 	bl	8009960 <CalculateCRC>
 8009d98:	0003      	movs	r3, r0
 8009d9a:	429c      	cmp	r4, r3
 8009d9c:	d044      	beq.n	8009e28 <AHT20_Calculate+0xac>
 8009d9e:	4b55      	ldr	r3, [pc, #340]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009da0:	799b      	ldrb	r3, [r3, #6]
 8009da2:	2bff      	cmp	r3, #255	@ 0xff
 8009da4:	d040      	beq.n	8009e28 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 8009da6:	4b53      	ldr	r3, [pc, #332]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	4698      	mov	r8, r3
 8009dac:	4b51      	ldr	r3, [pc, #324]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	0018      	movs	r0, r3
 8009db2:	4b50      	ldr	r3, [pc, #320]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009db4:	789b      	ldrb	r3, [r3, #2]
 8009db6:	001c      	movs	r4, r3
 8009db8:	4b4e      	ldr	r3, [pc, #312]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009dba:	78db      	ldrb	r3, [r3, #3]
 8009dbc:	001d      	movs	r5, r3
 8009dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009dc0:	791b      	ldrb	r3, [r3, #4]
 8009dc2:	001e      	movs	r6, r3
 8009dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009dc6:	795b      	ldrb	r3, [r3, #5]
 8009dc8:	469c      	mov	ip, r3
 8009dca:	4b4a      	ldr	r3, [pc, #296]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009dcc:	799b      	ldrb	r3, [r3, #6]
 8009dce:	4a4a      	ldr	r2, [pc, #296]	@ (8009ef8 <AHT20_Calculate+0x17c>)
 8009dd0:	494a      	ldr	r1, [pc, #296]	@ (8009efc <AHT20_Calculate+0x180>)
 8009dd2:	9305      	str	r3, [sp, #20]
 8009dd4:	4663      	mov	r3, ip
 8009dd6:	9304      	str	r3, [sp, #16]
 8009dd8:	9603      	str	r6, [sp, #12]
 8009dda:	9502      	str	r5, [sp, #8]
 8009ddc:	9401      	str	r4, [sp, #4]
 8009dde:	9000      	str	r0, [sp, #0]
 8009de0:	4643      	mov	r3, r8
 8009de2:	2003      	movs	r0, #3
 8009de4:	f008 fc6c 	bl	80126c0 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 8009de8:	4b42      	ldr	r3, [pc, #264]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009dea:	799b      	ldrb	r3, [r3, #6]
 8009dec:	001c      	movs	r4, r3
 8009dee:	4b41      	ldr	r3, [pc, #260]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009df0:	2106      	movs	r1, #6
 8009df2:	0018      	movs	r0, r3
 8009df4:	f7ff fdb4 	bl	8009960 <CalculateCRC>
 8009df8:	0003      	movs	r3, r0
 8009dfa:	4a41      	ldr	r2, [pc, #260]	@ (8009f00 <AHT20_Calculate+0x184>)
 8009dfc:	4941      	ldr	r1, [pc, #260]	@ (8009f04 <AHT20_Calculate+0x188>)
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	0023      	movs	r3, r4
 8009e02:	2001      	movs	r0, #1
 8009e04:	f008 fc5c 	bl	80126c0 <CreateLine>
    *airtemp = 0.0;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2200      	movs	r2, #0
 8009e12:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 8009e14:	f009 f98a 	bl	801312c <HAL_GetTick>
 8009e18:	0003      	movs	r3, r0
 8009e1a:	22fa      	movs	r2, #250	@ 0xfa
 8009e1c:	00d2      	lsls	r2, r2, #3
 8009e1e:	189a      	adds	r2, r3, r2
 8009e20:	4b39      	ldr	r3, [pc, #228]	@ (8009f08 <AHT20_Calculate+0x18c>)
 8009e22:	601a      	str	r2, [r3, #0]
    return false;
 8009e24:	2300      	movs	r3, #0
 8009e26:	e05f      	b.n	8009ee8 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 8009e28:	4b38      	ldr	r3, [pc, #224]	@ (8009f0c <AHT20_Calculate+0x190>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 8009e2e:	4b31      	ldr	r3, [pc, #196]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009e30:	78db      	ldrb	r3, [r3, #3]
 8009e32:	041a      	lsls	r2, r3, #16
 8009e34:	23f0      	movs	r3, #240	@ 0xf0
 8009e36:	031b      	lsls	r3, r3, #12
 8009e38:	401a      	ands	r2, r3
 8009e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009e3c:	791b      	ldrb	r3, [r3, #4]
 8009e3e:	021b      	lsls	r3, r3, #8
 8009e40:	18d3      	adds	r3, r2, r3
 8009e42:	4a2c      	ldr	r2, [pc, #176]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009e44:	7952      	ldrb	r2, [r2, #5]
 8009e46:	189b      	adds	r3, r3, r2
 8009e48:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f7f7 fc0c 	bl	8001668 <__aeabi_ui2f>
 8009e50:	1c03      	adds	r3, r0, #0
 8009e52:	2193      	movs	r1, #147	@ 0x93
 8009e54:	05c9      	lsls	r1, r1, #23
 8009e56:	1c18      	adds	r0, r3, #0
 8009e58:	f7f6 febc 	bl	8000bd4 <__aeabi_fdiv>
 8009e5c:	1c03      	adds	r3, r0, #0
 8009e5e:	492c      	ldr	r1, [pc, #176]	@ (8009f10 <AHT20_Calculate+0x194>)
 8009e60:	1c18      	adds	r0, r3, #0
 8009e62:	f7f7 f89d 	bl	8000fa0 <__aeabi_fmul>
 8009e66:	1c03      	adds	r3, r0, #0
 8009e68:	492a      	ldr	r1, [pc, #168]	@ (8009f14 <AHT20_Calculate+0x198>)
 8009e6a:	1c18      	adds	r0, r3, #0
 8009e6c:	f7f7 f9d6 	bl	800121c <__aeabi_fsub>
 8009e70:	1c03      	adds	r3, r0, #0
 8009e72:	1c1a      	adds	r2, r3, #0
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 8009e78:	4b1e      	ldr	r3, [pc, #120]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009e7a:	785b      	ldrb	r3, [r3, #1]
 8009e7c:	031a      	lsls	r2, r3, #12
 8009e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009e80:	789b      	ldrb	r3, [r3, #2]
 8009e82:	011b      	lsls	r3, r3, #4
 8009e84:	18d3      	adds	r3, r2, r3
 8009e86:	4a1b      	ldr	r2, [pc, #108]	@ (8009ef4 <AHT20_Calculate+0x178>)
 8009e88:	78d2      	ldrb	r2, [r2, #3]
 8009e8a:	0912      	lsrs	r2, r2, #4
 8009e8c:	b2d2      	uxtb	r2, r2
 8009e8e:	189b      	adds	r3, r3, r2
 8009e90:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 8009e92:	68b8      	ldr	r0, [r7, #8]
 8009e94:	f7f7 fbe8 	bl	8001668 <__aeabi_ui2f>
 8009e98:	1c03      	adds	r3, r0, #0
 8009e9a:	2193      	movs	r1, #147	@ 0x93
 8009e9c:	05c9      	lsls	r1, r1, #23
 8009e9e:	1c18      	adds	r0, r3, #0
 8009ea0:	f7f6 fe98 	bl	8000bd4 <__aeabi_fdiv>
 8009ea4:	1c03      	adds	r3, r0, #0
 8009ea6:	491c      	ldr	r1, [pc, #112]	@ (8009f18 <AHT20_Calculate+0x19c>)
 8009ea8:	1c18      	adds	r0, r3, #0
 8009eaa:	f7f7 f879 	bl	8000fa0 <__aeabi_fmul>
 8009eae:	1c03      	adds	r3, r0, #0
 8009eb0:	1c1a      	adds	r2, r3, #0
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	1c18      	adds	r0, r3, #0
 8009ebc:	f7f9 fad2 	bl	8003464 <__aeabi_f2d>
 8009ec0:	0004      	movs	r4, r0
 8009ec2:	000d      	movs	r5, r1
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	1c18      	adds	r0, r3, #0
 8009eca:	f7f9 facb 	bl	8003464 <__aeabi_f2d>
 8009ece:	0002      	movs	r2, r0
 8009ed0:	000b      	movs	r3, r1
 8009ed2:	4812      	ldr	r0, [pc, #72]	@ (8009f1c <AHT20_Calculate+0x1a0>)
 8009ed4:	4909      	ldr	r1, [pc, #36]	@ (8009efc <AHT20_Calculate+0x180>)
 8009ed6:	9202      	str	r2, [sp, #8]
 8009ed8:	9303      	str	r3, [sp, #12]
 8009eda:	9400      	str	r4, [sp, #0]
 8009edc:	9501      	str	r5, [sp, #4]
 8009ede:	0002      	movs	r2, r0
 8009ee0:	2003      	movs	r0, #3
 8009ee2:	f008 fbed 	bl	80126c0 <CreateLine>
  return true;
 8009ee6:	2301      	movs	r3, #1
}
 8009ee8:	0018      	movs	r0, r3
 8009eea:	46bd      	mov	sp, r7
 8009eec:	b004      	add	sp, #16
 8009eee:	bc80      	pop	{r7}
 8009ef0:	46b8      	mov	r8, r7
 8009ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ef4:	20000c14 	.word	0x20000c14
 8009ef8:	0802ab0c 	.word	0x0802ab0c
 8009efc:	0802aa10 	.word	0x0802aa10
 8009f00:	0802ab8c 	.word	0x0802ab8c
 8009f04:	0802aa74 	.word	0x0802aa74
 8009f08:	20000c04 	.word	0x20000c04
 8009f0c:	20000c1b 	.word	0x20000c1b
 8009f10:	43480000 	.word	0x43480000
 8009f14:	42480000 	.word	0x42480000
 8009f18:	42c80000 	.word	0x42c80000
 8009f1c:	0802abb4 	.word	0x0802abb4

08009f20 <AHT_Upkeep>:
  AHT20TimeStamp = HAL_GetTick() + 50;
  calibrated = false;
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
}

AHT20State AHT_Upkeep(void) {
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 8009f26:	4b50      	ldr	r3, [pc, #320]	@ (800a068 <AHT_Upkeep+0x148>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	0018      	movs	r0, r3
 8009f2c:	f008 fb72 	bl	8012614 <TimestampIsReached>
 8009f30:	0003      	movs	r3, r0
 8009f32:	001a      	movs	r2, r3
 8009f34:	2301      	movs	r3, #1
 8009f36:	4053      	eors	r3, r2
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d002      	beq.n	8009f44 <AHT_Upkeep+0x24>
    return AHTState;
 8009f3e:	4b4b      	ldr	r3, [pc, #300]	@ (800a06c <AHT_Upkeep+0x14c>)
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	e08d      	b.n	800a060 <AHT_Upkeep+0x140>
  }
  switch(AHTState) {
 8009f44:	4b49      	ldr	r3, [pc, #292]	@ (800a06c <AHT_Upkeep+0x14c>)
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	2b05      	cmp	r3, #5
 8009f4a:	d863      	bhi.n	800a014 <AHT_Upkeep+0xf4>
 8009f4c:	009a      	lsls	r2, r3, #2
 8009f4e:	4b48      	ldr	r3, [pc, #288]	@ (800a070 <AHT_Upkeep+0x150>)
 8009f50:	18d3      	adds	r3, r2, r3
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 8009f56:	4a47      	ldr	r2, [pc, #284]	@ (800a074 <AHT_Upkeep+0x154>)
 8009f58:	4b47      	ldr	r3, [pc, #284]	@ (800a078 <AHT_Upkeep+0x158>)
 8009f5a:	0019      	movs	r1, r3
 8009f5c:	2003      	movs	r0, #3
 8009f5e:	f008 fbaf 	bl	80126c0 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 8009f62:	f009 f8e3 	bl	801312c <HAL_GetTick>
 8009f66:	0003      	movs	r3, r0
 8009f68:	4a44      	ldr	r2, [pc, #272]	@ (800a07c <AHT_Upkeep+0x15c>)
 8009f6a:	189a      	adds	r2, r3, r2
 8009f6c:	4b3e      	ldr	r3, [pc, #248]	@ (800a068 <AHT_Upkeep+0x148>)
 8009f6e:	601a      	str	r2, [r3, #0]
    break;
 8009f70:	e074      	b.n	800a05c <AHT_Upkeep+0x13c>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 8009f72:	f002 fc97 	bl	800c8a4 <getSensorLock>
 8009f76:	1e03      	subs	r3, r0, #0
 8009f78:	d16b      	bne.n	800a052 <AHT_Upkeep+0x132>
      break;
    }
    setSensorLock(AHT20);
 8009f7a:	2003      	movs	r0, #3
 8009f7c:	f002 fc7e 	bl	800c87c <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 8009f80:	f7ff fe60 	bl	8009c44 <AHT20_StartMeasurement>
 8009f84:	0003      	movs	r3, r0
 8009f86:	001a      	movs	r2, r3
 8009f88:	2301      	movs	r3, #1
 8009f8a:	4053      	eors	r3, r2
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <AHT_Upkeep+0x7a>
      AHTState = AHT20_ERROR;
 8009f92:	4b36      	ldr	r3, [pc, #216]	@ (800a06c <AHT_Upkeep+0x14c>)
 8009f94:	22ff      	movs	r2, #255	@ 0xff
 8009f96:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
    }
    break;
 8009f98:	e060      	b.n	800a05c <AHT_Upkeep+0x13c>
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 8009f9a:	4b34      	ldr	r3, [pc, #208]	@ (800a06c <AHT_Upkeep+0x14c>)
 8009f9c:	2202      	movs	r2, #2
 8009f9e:	701a      	strb	r2, [r3, #0]
    break;
 8009fa0:	e05c      	b.n	800a05c <AHT_Upkeep+0x13c>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 8009fa2:	f7ff fe7d 	bl	8009ca0 <AHT20_GetMeasurementValues>
 8009fa6:	1e03      	subs	r3, r0, #0
 8009fa8:	d055      	beq.n	800a056 <AHT_Upkeep+0x136>
//      Debug("AHT20_GetMeasurementValues success");
      setSensorLock(FREE);
 8009faa:	2000      	movs	r0, #0
 8009fac:	f002 fc66 	bl	800c87c <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 8009fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800a06c <AHT_Upkeep+0x14c>)
 8009fb2:	2203      	movs	r2, #3
 8009fb4:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 8009fb6:	e04e      	b.n	800a056 <AHT_Upkeep+0x136>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 8009fb8:	003a      	movs	r2, r7
 8009fba:	1d3b      	adds	r3, r7, #4
 8009fbc:	0011      	movs	r1, r2
 8009fbe:	0018      	movs	r0, r3
 8009fc0:	f7ff fedc 	bl	8009d7c <AHT20_Calculate>
 8009fc4:	0003      	movs	r3, r0
 8009fc6:	001a      	movs	r2, r3
 8009fc8:	2301      	movs	r3, #1
 8009fca:	4053      	eors	r3, r2
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d005      	beq.n	8009fde <AHT_Upkeep+0xbe>
      AHTState = AHT20_ERROR;
 8009fd2:	4b26      	ldr	r3, [pc, #152]	@ (800a06c <AHT_Upkeep+0x14c>)
 8009fd4:	22ff      	movs	r2, #255	@ 0xff
 8009fd6:	701a      	strb	r2, [r3, #0]
      return AHTState;
 8009fd8:	4b24      	ldr	r3, [pc, #144]	@ (800a06c <AHT_Upkeep+0x14c>)
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	e040      	b.n	800a060 <AHT_Upkeep+0x140>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	1c11      	adds	r1, r2, #0
 8009fe4:	1c18      	adds	r0, r3, #0
 8009fe6:	f7fa fb23 	bl	8004630 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	1c11      	adds	r1, r2, #0
 8009ff0:	1c18      	adds	r0, r3, #0
 8009ff2:	f7f9 ffe5 	bl	8003fc0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 8009ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800a06c <AHT_Upkeep+0x14c>)
 8009ff8:	2205      	movs	r2, #5
 8009ffa:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 8009ffc:	f009 f896 	bl	801312c <HAL_GetTick>
 800a000:	0003      	movs	r3, r0
 800a002:	4a1f      	ldr	r2, [pc, #124]	@ (800a080 <AHT_Upkeep+0x160>)
 800a004:	189a      	adds	r2, r3, r2
 800a006:	4b18      	ldr	r3, [pc, #96]	@ (800a068 <AHT_Upkeep+0x148>)
 800a008:	601a      	str	r2, [r3, #0]
    break;
 800a00a:	e027      	b.n	800a05c <AHT_Upkeep+0x13c>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800a00c:	4b17      	ldr	r3, [pc, #92]	@ (800a06c <AHT_Upkeep+0x14c>)
 800a00e:	2201      	movs	r2, #1
 800a010:	701a      	strb	r2, [r3, #0]
  break;
 800a012:	e023      	b.n	800a05c <AHT_Upkeep+0x13c>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800a014:	4b15      	ldr	r3, [pc, #84]	@ (800a06c <AHT_Upkeep+0x14c>)
 800a016:	2201      	movs	r2, #1
 800a018:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800a01a:	f002 fc43 	bl	800c8a4 <getSensorLock>
 800a01e:	0003      	movs	r3, r0
 800a020:	2b03      	cmp	r3, #3
 800a022:	d102      	bne.n	800a02a <AHT_Upkeep+0x10a>
      setSensorLock(FREE);
 800a024:	2000      	movs	r0, #0
 800a026:	f002 fc29 	bl	800c87c <setSensorLock>
    }
    AHTerrors++;
 800a02a:	4b16      	ldr	r3, [pc, #88]	@ (800a084 <AHT_Upkeep+0x164>)
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	3301      	adds	r3, #1
 800a030:	b2da      	uxtb	r2, r3
 800a032:	4b14      	ldr	r3, [pc, #80]	@ (800a084 <AHT_Upkeep+0x164>)
 800a034:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800a036:	4b13      	ldr	r3, [pc, #76]	@ (800a084 <AHT_Upkeep+0x164>)
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	2b19      	cmp	r3, #25
 800a03c:	d90d      	bls.n	800a05a <AHT_Upkeep+0x13a>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800a03e:	4a12      	ldr	r2, [pc, #72]	@ (800a088 <AHT_Upkeep+0x168>)
 800a040:	4b12      	ldr	r3, [pc, #72]	@ (800a08c <AHT_Upkeep+0x16c>)
 800a042:	0019      	movs	r1, r3
 800a044:	2001      	movs	r0, #1
 800a046:	f008 fb3b 	bl	80126c0 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800a04a:	4b08      	ldr	r3, [pc, #32]	@ (800a06c <AHT_Upkeep+0x14c>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	701a      	strb	r2, [r3, #0]
    }
    break;
 800a050:	e003      	b.n	800a05a <AHT_Upkeep+0x13a>
      break;
 800a052:	46c0      	nop			@ (mov r8, r8)
 800a054:	e002      	b.n	800a05c <AHT_Upkeep+0x13c>
    break;
 800a056:	46c0      	nop			@ (mov r8, r8)
 800a058:	e000      	b.n	800a05c <AHT_Upkeep+0x13c>
    break;
 800a05a:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800a05c:	4b03      	ldr	r3, [pc, #12]	@ (800a06c <AHT_Upkeep+0x14c>)
 800a05e:	781b      	ldrb	r3, [r3, #0]
}
 800a060:	0018      	movs	r0, r3
 800a062:	46bd      	mov	sp, r7
 800a064:	b002      	add	sp, #8
 800a066:	bd80      	pop	{r7, pc}
 800a068:	20000c04 	.word	0x20000c04
 800a06c:	20000093 	.word	0x20000093
 800a070:	0802ca20 	.word	0x0802ca20
 800a074:	0802abe8 	.word	0x0802abe8
 800a078:	0802aa10 	.word	0x0802aa10
 800a07c:	000dbba0 	.word	0x000dbba0
 800a080:	0000ea60 	.word	0x0000ea60
 800a084:	20000c1b 	.word	0x20000c1b
 800a088:	0802ac10 	.word	0x0802ac10
 800a08c:	0802aa74 	.word	0x0802aa74

0800a090 <WriteMemRegister>:
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800a090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a092:	b087      	sub	sp, #28
 800a094:	af02      	add	r7, sp, #8
 800a096:	0004      	movs	r4, r0
 800a098:	0008      	movs	r0, r1
 800a09a:	60ba      	str	r2, [r7, #8]
 800a09c:	0019      	movs	r1, r3
 800a09e:	260e      	movs	r6, #14
 800a0a0:	19bb      	adds	r3, r7, r6
 800a0a2:	1c22      	adds	r2, r4, #0
 800a0a4:	801a      	strh	r2, [r3, #0]
 800a0a6:	230c      	movs	r3, #12
 800a0a8:	18fb      	adds	r3, r7, r3
 800a0aa:	1c02      	adds	r2, r0, #0
 800a0ac:	801a      	strh	r2, [r3, #0]
 800a0ae:	1dbb      	adds	r3, r7, #6
 800a0b0:	1c0a      	adds	r2, r1, #0
 800a0b2:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800a0b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a0e8 <WriteMemRegister+0x58>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d010      	beq.n	800a0de <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800a0bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a0e8 <WriteMemRegister+0x58>)
 800a0be:	681c      	ldr	r4, [r3, #0]
 800a0c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a0ec <WriteMemRegister+0x5c>)
 800a0c2:	7818      	ldrb	r0, [r3, #0]
 800a0c4:	68bd      	ldr	r5, [r7, #8]
 800a0c6:	230c      	movs	r3, #12
 800a0c8:	18fb      	adds	r3, r7, r3
 800a0ca:	881a      	ldrh	r2, [r3, #0]
 800a0cc:	19bb      	adds	r3, r7, r6
 800a0ce:	8819      	ldrh	r1, [r3, #0]
 800a0d0:	1dbb      	adds	r3, r7, #6
 800a0d2:	881b      	ldrh	r3, [r3, #0]
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	002b      	movs	r3, r5
 800a0d8:	47a0      	blx	r4
 800a0da:	0003      	movs	r3, r0
 800a0dc:	e000      	b.n	800a0e0 <WriteMemRegister+0x50>
  }
  return false;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	b005      	add	sp, #20
 800a0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e8:	20000c1c 	.word	0x20000c1c
 800a0ec:	20000094 	.word	0x20000094

0800a0f0 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800a0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0f2:	b087      	sub	sp, #28
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	0004      	movs	r4, r0
 800a0f8:	0008      	movs	r0, r1
 800a0fa:	60ba      	str	r2, [r7, #8]
 800a0fc:	0019      	movs	r1, r3
 800a0fe:	260e      	movs	r6, #14
 800a100:	19bb      	adds	r3, r7, r6
 800a102:	1c22      	adds	r2, r4, #0
 800a104:	801a      	strh	r2, [r3, #0]
 800a106:	230c      	movs	r3, #12
 800a108:	18fb      	adds	r3, r7, r3
 800a10a:	1c02      	adds	r2, r0, #0
 800a10c:	801a      	strh	r2, [r3, #0]
 800a10e:	1dbb      	adds	r3, r7, #6
 800a110:	1c0a      	adds	r2, r1, #0
 800a112:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800a114:	4b0c      	ldr	r3, [pc, #48]	@ (800a148 <ReadMemRegister+0x58>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d010      	beq.n	800a13e <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800a11c:	4b0a      	ldr	r3, [pc, #40]	@ (800a148 <ReadMemRegister+0x58>)
 800a11e:	681c      	ldr	r4, [r3, #0]
 800a120:	4b0a      	ldr	r3, [pc, #40]	@ (800a14c <ReadMemRegister+0x5c>)
 800a122:	7818      	ldrb	r0, [r3, #0]
 800a124:	68bd      	ldr	r5, [r7, #8]
 800a126:	230c      	movs	r3, #12
 800a128:	18fb      	adds	r3, r7, r3
 800a12a:	881a      	ldrh	r2, [r3, #0]
 800a12c:	19bb      	adds	r3, r7, r6
 800a12e:	8819      	ldrh	r1, [r3, #0]
 800a130:	1dbb      	adds	r3, r7, #6
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	002b      	movs	r3, r5
 800a138:	47a0      	blx	r4
 800a13a:	0003      	movs	r3, r0
 800a13c:	e000      	b.n	800a140 <ReadMemRegister+0x50>
  }
  return false;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	0018      	movs	r0, r3
 800a142:	46bd      	mov	sp, r7
 800a144:	b005      	add	sp, #20
 800a146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a148:	20000c20 	.word	0x20000c20
 800a14c:	20000094 	.word	0x20000094

0800a150 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800a158:	f008 ffe8 	bl	801312c <HAL_GetTick>
 800a15c:	0002      	movs	r2, r0
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	18d2      	adds	r2, r2, r3
 800a162:	4b03      	ldr	r3, [pc, #12]	@ (800a170 <setBMP280TimeStamp+0x20>)
 800a164:	601a      	str	r2, [r3, #0]
}
 800a166:	46c0      	nop			@ (mov r8, r8)
 800a168:	46bd      	mov	sp, r7
 800a16a:	b002      	add	sp, #8
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	46c0      	nop			@ (mov r8, r8)
 800a170:	20000c48 	.word	0x20000c48

0800a174 <BMP280_reset>:

static void BMP280_reset() {
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800a17a:	1dfb      	adds	r3, r7, #7
 800a17c:	22b6      	movs	r2, #182	@ 0xb6
 800a17e:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800a180:	1dfa      	adds	r2, r7, #7
 800a182:	2301      	movs	r3, #1
 800a184:	2101      	movs	r1, #1
 800a186:	20e0      	movs	r0, #224	@ 0xe0
 800a188:	f7ff ff82 	bl	800a090 <WriteMemRegister>
  Info("BMP280 has been reset");
 800a18c:	4a06      	ldr	r2, [pc, #24]	@ (800a1a8 <BMP280_reset+0x34>)
 800a18e:	4b07      	ldr	r3, [pc, #28]	@ (800a1ac <BMP280_reset+0x38>)
 800a190:	0019      	movs	r1, r3
 800a192:	2002      	movs	r0, #2
 800a194:	f008 fa94 	bl	80126c0 <CreateLine>
  HAL_Delay(100);
 800a198:	2064      	movs	r0, #100	@ 0x64
 800a19a:	f008 ffd1 	bl	8013140 <HAL_Delay>
}
 800a19e:	46c0      	nop			@ (mov r8, r8)
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	b002      	add	sp, #8
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	46c0      	nop			@ (mov r8, r8)
 800a1a8:	0802ac54 	.word	0x0802ac54
 800a1ac:	0802ac6c 	.word	0x0802ac6c

0800a1b0 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800a1b0:	b590      	push	{r4, r7, lr}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 800a1b6:	4aae      	ldr	r2, [pc, #696]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a1b8:	231a      	movs	r3, #26
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	2088      	movs	r0, #136	@ 0x88
 800a1be:	f7ff ff97 	bl	800a0f0 <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 800a1c2:	4bab      	ldr	r3, [pc, #684]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a1c4:	785b      	ldrb	r3, [r3, #1]
 800a1c6:	021b      	lsls	r3, r3, #8
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	4aa9      	ldr	r2, [pc, #676]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a1cc:	7812      	ldrb	r2, [r2, #0]
 800a1ce:	189b      	adds	r3, r3, r2
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	4ba8      	ldr	r3, [pc, #672]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a1d4:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 800a1d6:	4ba6      	ldr	r3, [pc, #664]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a1d8:	78db      	ldrb	r3, [r3, #3]
 800a1da:	021b      	lsls	r3, r3, #8
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	4aa4      	ldr	r2, [pc, #656]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a1e0:	7892      	ldrb	r2, [r2, #2]
 800a1e2:	189b      	adds	r3, r3, r2
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	b21a      	sxth	r2, r3
 800a1e8:	4ba2      	ldr	r3, [pc, #648]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a1ea:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 800a1ec:	4ba0      	ldr	r3, [pc, #640]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a1ee:	795b      	ldrb	r3, [r3, #5]
 800a1f0:	021b      	lsls	r3, r3, #8
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	4a9e      	ldr	r2, [pc, #632]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a1f6:	7912      	ldrb	r2, [r2, #4]
 800a1f8:	189b      	adds	r3, r3, r2
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	b21a      	sxth	r2, r3
 800a1fe:	4b9d      	ldr	r3, [pc, #628]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a200:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 800a202:	4b9b      	ldr	r3, [pc, #620]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a204:	79db      	ldrb	r3, [r3, #7]
 800a206:	021b      	lsls	r3, r3, #8
 800a208:	b29b      	uxth	r3, r3
 800a20a:	4a99      	ldr	r2, [pc, #612]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a20c:	7992      	ldrb	r2, [r2, #6]
 800a20e:	189b      	adds	r3, r3, r2
 800a210:	b29a      	uxth	r2, r3
 800a212:	4b98      	ldr	r3, [pc, #608]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a214:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 800a216:	4b96      	ldr	r3, [pc, #600]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a218:	7a5b      	ldrb	r3, [r3, #9]
 800a21a:	021b      	lsls	r3, r3, #8
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	4a94      	ldr	r2, [pc, #592]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a220:	7a12      	ldrb	r2, [r2, #8]
 800a222:	189b      	adds	r3, r3, r2
 800a224:	b29b      	uxth	r3, r3
 800a226:	b21a      	sxth	r2, r3
 800a228:	4b92      	ldr	r3, [pc, #584]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a22a:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 800a22c:	4b90      	ldr	r3, [pc, #576]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a22e:	7adb      	ldrb	r3, [r3, #11]
 800a230:	021b      	lsls	r3, r3, #8
 800a232:	b29b      	uxth	r3, r3
 800a234:	4a8e      	ldr	r2, [pc, #568]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a236:	7a92      	ldrb	r2, [r2, #10]
 800a238:	189b      	adds	r3, r3, r2
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	b21a      	sxth	r2, r3
 800a23e:	4b8d      	ldr	r3, [pc, #564]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a240:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 800a242:	4b8b      	ldr	r3, [pc, #556]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a244:	7b5b      	ldrb	r3, [r3, #13]
 800a246:	021b      	lsls	r3, r3, #8
 800a248:	b29b      	uxth	r3, r3
 800a24a:	4a89      	ldr	r2, [pc, #548]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a24c:	7b12      	ldrb	r2, [r2, #12]
 800a24e:	189b      	adds	r3, r3, r2
 800a250:	b29b      	uxth	r3, r3
 800a252:	b21a      	sxth	r2, r3
 800a254:	4b87      	ldr	r3, [pc, #540]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a256:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 800a258:	4b85      	ldr	r3, [pc, #532]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a25a:	7bdb      	ldrb	r3, [r3, #15]
 800a25c:	021b      	lsls	r3, r3, #8
 800a25e:	b29b      	uxth	r3, r3
 800a260:	4a83      	ldr	r2, [pc, #524]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a262:	7b92      	ldrb	r2, [r2, #14]
 800a264:	189b      	adds	r3, r3, r2
 800a266:	b29b      	uxth	r3, r3
 800a268:	b21a      	sxth	r2, r3
 800a26a:	4b82      	ldr	r3, [pc, #520]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a26c:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 800a26e:	4b80      	ldr	r3, [pc, #512]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a270:	7c5b      	ldrb	r3, [r3, #17]
 800a272:	021b      	lsls	r3, r3, #8
 800a274:	b29b      	uxth	r3, r3
 800a276:	4a7e      	ldr	r2, [pc, #504]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a278:	7c12      	ldrb	r2, [r2, #16]
 800a27a:	189b      	adds	r3, r3, r2
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	b21a      	sxth	r2, r3
 800a280:	4b7c      	ldr	r3, [pc, #496]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a282:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 800a284:	4b7a      	ldr	r3, [pc, #488]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a286:	7cdb      	ldrb	r3, [r3, #19]
 800a288:	021b      	lsls	r3, r3, #8
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	4a78      	ldr	r2, [pc, #480]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a28e:	7c92      	ldrb	r2, [r2, #18]
 800a290:	189b      	adds	r3, r3, r2
 800a292:	b29b      	uxth	r3, r3
 800a294:	b21a      	sxth	r2, r3
 800a296:	4b77      	ldr	r3, [pc, #476]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a298:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800a29a:	4b75      	ldr	r3, [pc, #468]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a29c:	7d5b      	ldrb	r3, [r3, #21]
 800a29e:	021b      	lsls	r3, r3, #8
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	4a73      	ldr	r2, [pc, #460]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a2a4:	7d12      	ldrb	r2, [r2, #20]
 800a2a6:	189b      	adds	r3, r3, r2
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	b21a      	sxth	r2, r3
 800a2ac:	4b71      	ldr	r3, [pc, #452]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a2ae:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 800a2b0:	4b6f      	ldr	r3, [pc, #444]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a2b2:	7ddb      	ldrb	r3, [r3, #23]
 800a2b4:	021b      	lsls	r3, r3, #8
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	4a6d      	ldr	r2, [pc, #436]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a2ba:	7d92      	ldrb	r2, [r2, #22]
 800a2bc:	189b      	adds	r3, r3, r2
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	b21a      	sxth	r2, r3
 800a2c2:	4b6c      	ldr	r3, [pc, #432]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a2c4:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 800a2c6:	4a6c      	ldr	r2, [pc, #432]	@ (800a478 <BMP280_get_calibration+0x2c8>)
 800a2c8:	4b6c      	ldr	r3, [pc, #432]	@ (800a47c <BMP280_get_calibration+0x2cc>)
 800a2ca:	0019      	movs	r1, r3
 800a2cc:	2003      	movs	r0, #3
 800a2ce:	f008 f9f7 	bl	80126c0 <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 800a2d2:	4b67      	ldr	r3, [pc, #412]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a2d4:	785b      	ldrb	r3, [r3, #1]
 800a2d6:	001c      	movs	r4, r3
 800a2d8:	4b65      	ldr	r3, [pc, #404]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	0018      	movs	r0, r3
 800a2de:	4b65      	ldr	r3, [pc, #404]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a2e0:	881b      	ldrh	r3, [r3, #0]
 800a2e2:	4a67      	ldr	r2, [pc, #412]	@ (800a480 <BMP280_get_calibration+0x2d0>)
 800a2e4:	4965      	ldr	r1, [pc, #404]	@ (800a47c <BMP280_get_calibration+0x2cc>)
 800a2e6:	9301      	str	r3, [sp, #4]
 800a2e8:	9000      	str	r0, [sp, #0]
 800a2ea:	0023      	movs	r3, r4
 800a2ec:	2003      	movs	r0, #3
 800a2ee:	f008 f9e7 	bl	80126c0 <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 800a2f2:	4b5f      	ldr	r3, [pc, #380]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a2f4:	78db      	ldrb	r3, [r3, #3]
 800a2f6:	001c      	movs	r4, r3
 800a2f8:	4b5d      	ldr	r3, [pc, #372]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a2fa:	789b      	ldrb	r3, [r3, #2]
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	4b5d      	ldr	r3, [pc, #372]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a300:	2202      	movs	r2, #2
 800a302:	5e9b      	ldrsh	r3, [r3, r2]
 800a304:	4a5f      	ldr	r2, [pc, #380]	@ (800a484 <BMP280_get_calibration+0x2d4>)
 800a306:	495d      	ldr	r1, [pc, #372]	@ (800a47c <BMP280_get_calibration+0x2cc>)
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	9000      	str	r0, [sp, #0]
 800a30c:	0023      	movs	r3, r4
 800a30e:	2003      	movs	r0, #3
 800a310:	f008 f9d6 	bl	80126c0 <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 800a314:	4b56      	ldr	r3, [pc, #344]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a316:	795b      	ldrb	r3, [r3, #5]
 800a318:	001c      	movs	r4, r3
 800a31a:	4b55      	ldr	r3, [pc, #340]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a31c:	791b      	ldrb	r3, [r3, #4]
 800a31e:	0018      	movs	r0, r3
 800a320:	4b54      	ldr	r3, [pc, #336]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a322:	2204      	movs	r2, #4
 800a324:	5e9b      	ldrsh	r3, [r3, r2]
 800a326:	4a58      	ldr	r2, [pc, #352]	@ (800a488 <BMP280_get_calibration+0x2d8>)
 800a328:	4954      	ldr	r1, [pc, #336]	@ (800a47c <BMP280_get_calibration+0x2cc>)
 800a32a:	9301      	str	r3, [sp, #4]
 800a32c:	9000      	str	r0, [sp, #0]
 800a32e:	0023      	movs	r3, r4
 800a330:	2003      	movs	r0, #3
 800a332:	f008 f9c5 	bl	80126c0 <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 800a336:	4b4e      	ldr	r3, [pc, #312]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a338:	79db      	ldrb	r3, [r3, #7]
 800a33a:	001c      	movs	r4, r3
 800a33c:	4b4c      	ldr	r3, [pc, #304]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a33e:	799b      	ldrb	r3, [r3, #6]
 800a340:	0018      	movs	r0, r3
 800a342:	4b4c      	ldr	r3, [pc, #304]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a344:	88db      	ldrh	r3, [r3, #6]
 800a346:	4a51      	ldr	r2, [pc, #324]	@ (800a48c <BMP280_get_calibration+0x2dc>)
 800a348:	494c      	ldr	r1, [pc, #304]	@ (800a47c <BMP280_get_calibration+0x2cc>)
 800a34a:	9301      	str	r3, [sp, #4]
 800a34c:	9000      	str	r0, [sp, #0]
 800a34e:	0023      	movs	r3, r4
 800a350:	2003      	movs	r0, #3
 800a352:	f008 f9b5 	bl	80126c0 <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 800a356:	4b46      	ldr	r3, [pc, #280]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a358:	7a5b      	ldrb	r3, [r3, #9]
 800a35a:	001c      	movs	r4, r3
 800a35c:	4b44      	ldr	r3, [pc, #272]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a35e:	7a1b      	ldrb	r3, [r3, #8]
 800a360:	0018      	movs	r0, r3
 800a362:	4b44      	ldr	r3, [pc, #272]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a364:	2208      	movs	r2, #8
 800a366:	5e9b      	ldrsh	r3, [r3, r2]
 800a368:	4a49      	ldr	r2, [pc, #292]	@ (800a490 <BMP280_get_calibration+0x2e0>)
 800a36a:	4944      	ldr	r1, [pc, #272]	@ (800a47c <BMP280_get_calibration+0x2cc>)
 800a36c:	9301      	str	r3, [sp, #4]
 800a36e:	9000      	str	r0, [sp, #0]
 800a370:	0023      	movs	r3, r4
 800a372:	2003      	movs	r0, #3
 800a374:	f008 f9a4 	bl	80126c0 <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 800a378:	4b3d      	ldr	r3, [pc, #244]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a37a:	7adb      	ldrb	r3, [r3, #11]
 800a37c:	001c      	movs	r4, r3
 800a37e:	4b3c      	ldr	r3, [pc, #240]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a380:	7a9b      	ldrb	r3, [r3, #10]
 800a382:	0018      	movs	r0, r3
 800a384:	4b3b      	ldr	r3, [pc, #236]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a386:	220a      	movs	r2, #10
 800a388:	5e9b      	ldrsh	r3, [r3, r2]
 800a38a:	4a42      	ldr	r2, [pc, #264]	@ (800a494 <BMP280_get_calibration+0x2e4>)
 800a38c:	493b      	ldr	r1, [pc, #236]	@ (800a47c <BMP280_get_calibration+0x2cc>)
 800a38e:	9301      	str	r3, [sp, #4]
 800a390:	9000      	str	r0, [sp, #0]
 800a392:	0023      	movs	r3, r4
 800a394:	2003      	movs	r0, #3
 800a396:	f008 f993 	bl	80126c0 <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 800a39a:	4b35      	ldr	r3, [pc, #212]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a39c:	7b5b      	ldrb	r3, [r3, #13]
 800a39e:	001c      	movs	r4, r3
 800a3a0:	4b33      	ldr	r3, [pc, #204]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a3a2:	7b1b      	ldrb	r3, [r3, #12]
 800a3a4:	0018      	movs	r0, r3
 800a3a6:	4b33      	ldr	r3, [pc, #204]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a3a8:	220c      	movs	r2, #12
 800a3aa:	5e9b      	ldrsh	r3, [r3, r2]
 800a3ac:	4a3a      	ldr	r2, [pc, #232]	@ (800a498 <BMP280_get_calibration+0x2e8>)
 800a3ae:	4933      	ldr	r1, [pc, #204]	@ (800a47c <BMP280_get_calibration+0x2cc>)
 800a3b0:	9301      	str	r3, [sp, #4]
 800a3b2:	9000      	str	r0, [sp, #0]
 800a3b4:	0023      	movs	r3, r4
 800a3b6:	2003      	movs	r0, #3
 800a3b8:	f008 f982 	bl	80126c0 <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 800a3bc:	4b2c      	ldr	r3, [pc, #176]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a3be:	7bdb      	ldrb	r3, [r3, #15]
 800a3c0:	001c      	movs	r4, r3
 800a3c2:	4b2b      	ldr	r3, [pc, #172]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a3c4:	7b9b      	ldrb	r3, [r3, #14]
 800a3c6:	0018      	movs	r0, r3
 800a3c8:	4b2a      	ldr	r3, [pc, #168]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a3ca:	220e      	movs	r2, #14
 800a3cc:	5e9b      	ldrsh	r3, [r3, r2]
 800a3ce:	4a33      	ldr	r2, [pc, #204]	@ (800a49c <BMP280_get_calibration+0x2ec>)
 800a3d0:	492a      	ldr	r1, [pc, #168]	@ (800a47c <BMP280_get_calibration+0x2cc>)
 800a3d2:	9301      	str	r3, [sp, #4]
 800a3d4:	9000      	str	r0, [sp, #0]
 800a3d6:	0023      	movs	r3, r4
 800a3d8:	2003      	movs	r0, #3
 800a3da:	f008 f971 	bl	80126c0 <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 800a3de:	4b24      	ldr	r3, [pc, #144]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a3e0:	7c5b      	ldrb	r3, [r3, #17]
 800a3e2:	001c      	movs	r4, r3
 800a3e4:	4b22      	ldr	r3, [pc, #136]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a3e6:	7c1b      	ldrb	r3, [r3, #16]
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	4b22      	ldr	r3, [pc, #136]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a3ec:	2210      	movs	r2, #16
 800a3ee:	5e9b      	ldrsh	r3, [r3, r2]
 800a3f0:	4a2b      	ldr	r2, [pc, #172]	@ (800a4a0 <BMP280_get_calibration+0x2f0>)
 800a3f2:	4922      	ldr	r1, [pc, #136]	@ (800a47c <BMP280_get_calibration+0x2cc>)
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	9000      	str	r0, [sp, #0]
 800a3f8:	0023      	movs	r3, r4
 800a3fa:	2003      	movs	r0, #3
 800a3fc:	f008 f960 	bl	80126c0 <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 800a400:	4b1b      	ldr	r3, [pc, #108]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a402:	7cdb      	ldrb	r3, [r3, #19]
 800a404:	001c      	movs	r4, r3
 800a406:	4b1a      	ldr	r3, [pc, #104]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a408:	7c9b      	ldrb	r3, [r3, #18]
 800a40a:	0018      	movs	r0, r3
 800a40c:	4b19      	ldr	r3, [pc, #100]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a40e:	2212      	movs	r2, #18
 800a410:	5e9b      	ldrsh	r3, [r3, r2]
 800a412:	4a24      	ldr	r2, [pc, #144]	@ (800a4a4 <BMP280_get_calibration+0x2f4>)
 800a414:	4919      	ldr	r1, [pc, #100]	@ (800a47c <BMP280_get_calibration+0x2cc>)
 800a416:	9301      	str	r3, [sp, #4]
 800a418:	9000      	str	r0, [sp, #0]
 800a41a:	0023      	movs	r3, r4
 800a41c:	2003      	movs	r0, #3
 800a41e:	f008 f94f 	bl	80126c0 <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 800a422:	4b13      	ldr	r3, [pc, #76]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a424:	7d5b      	ldrb	r3, [r3, #21]
 800a426:	001c      	movs	r4, r3
 800a428:	4b11      	ldr	r3, [pc, #68]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a42a:	7d1b      	ldrb	r3, [r3, #20]
 800a42c:	0018      	movs	r0, r3
 800a42e:	4b11      	ldr	r3, [pc, #68]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a430:	2214      	movs	r2, #20
 800a432:	5e9b      	ldrsh	r3, [r3, r2]
 800a434:	4a1c      	ldr	r2, [pc, #112]	@ (800a4a8 <BMP280_get_calibration+0x2f8>)
 800a436:	4911      	ldr	r1, [pc, #68]	@ (800a47c <BMP280_get_calibration+0x2cc>)
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	9000      	str	r0, [sp, #0]
 800a43c:	0023      	movs	r3, r4
 800a43e:	2003      	movs	r0, #3
 800a440:	f008 f93e 	bl	80126c0 <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 800a444:	4b0a      	ldr	r3, [pc, #40]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a446:	7ddb      	ldrb	r3, [r3, #23]
 800a448:	001c      	movs	r4, r3
 800a44a:	4b09      	ldr	r3, [pc, #36]	@ (800a470 <BMP280_get_calibration+0x2c0>)
 800a44c:	7d9b      	ldrb	r3, [r3, #22]
 800a44e:	0018      	movs	r0, r3
 800a450:	4b08      	ldr	r3, [pc, #32]	@ (800a474 <BMP280_get_calibration+0x2c4>)
 800a452:	2216      	movs	r2, #22
 800a454:	5e9b      	ldrsh	r3, [r3, r2]
 800a456:	4a15      	ldr	r2, [pc, #84]	@ (800a4ac <BMP280_get_calibration+0x2fc>)
 800a458:	4908      	ldr	r1, [pc, #32]	@ (800a47c <BMP280_get_calibration+0x2cc>)
 800a45a:	9301      	str	r3, [sp, #4]
 800a45c:	9000      	str	r0, [sp, #0]
 800a45e:	0023      	movs	r3, r4
 800a460:	2003      	movs	r0, #3
 800a462:	f008 f92d 	bl	80126c0 <CreateLine>
}
 800a466:	46c0      	nop			@ (mov r8, r8)
 800a468:	46bd      	mov	sp, r7
 800a46a:	b001      	add	sp, #4
 800a46c:	bd90      	pop	{r4, r7, pc}
 800a46e:	46c0      	nop			@ (mov r8, r8)
 800a470:	20000c4c 	.word	0x20000c4c
 800a474:	20000c24 	.word	0x20000c24
 800a478:	0802ac70 	.word	0x0802ac70
 800a47c:	0802ac8c 	.word	0x0802ac8c
 800a480:	0802ac90 	.word	0x0802ac90
 800a484:	0802acc4 	.word	0x0802acc4
 800a488:	0802acf8 	.word	0x0802acf8
 800a48c:	0802ad2c 	.word	0x0802ad2c
 800a490:	0802ad60 	.word	0x0802ad60
 800a494:	0802ad94 	.word	0x0802ad94
 800a498:	0802adc8 	.word	0x0802adc8
 800a49c:	0802adfc 	.word	0x0802adfc
 800a4a0:	0802ae30 	.word	0x0802ae30
 800a4a4:	0802ae64 	.word	0x0802ae64
 800a4a8:	0802ae98 	.word	0x0802ae98
 800a4ac:	0802aecc 	.word	0x0802aecc

0800a4b0 <BMP280_probe>:

static bool BMP280_probe() {
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 800a4b6:	4b34      	ldr	r3, [pc, #208]	@ (800a588 <BMP280_probe+0xd8>)
 800a4b8:	2276      	movs	r2, #118	@ 0x76
 800a4ba:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800a4bc:	1dba      	adds	r2, r7, #6
 800a4be:	2301      	movs	r3, #1
 800a4c0:	2101      	movs	r1, #1
 800a4c2:	20d0      	movs	r0, #208	@ 0xd0
 800a4c4:	f7ff fe14 	bl	800a0f0 <ReadMemRegister>
 800a4c8:	0003      	movs	r3, r0
 800a4ca:	001a      	movs	r2, r3
 800a4cc:	1dfb      	adds	r3, r7, #7
 800a4ce:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 800a4d0:	1dfb      	adds	r3, r7, #7
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	b25b      	sxtb	r3, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00a      	beq.n	800a4f0 <BMP280_probe+0x40>
 800a4da:	1dbb      	adds	r3, r7, #6
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d006      	beq.n	800a4f0 <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800a4e2:	1dbb      	adds	r3, r7, #6
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	4a29      	ldr	r2, [pc, #164]	@ (800a58c <BMP280_probe+0xdc>)
 800a4e8:	4929      	ldr	r1, [pc, #164]	@ (800a590 <BMP280_probe+0xe0>)
 800a4ea:	2003      	movs	r0, #3
 800a4ec:	f008 f8e8 	bl	80126c0 <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 800a4f0:	1dbb      	adds	r3, r7, #6
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b58      	cmp	r3, #88	@ 0x58
 800a4f6:	d01f      	beq.n	800a538 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 800a4f8:	4b23      	ldr	r3, [pc, #140]	@ (800a588 <BMP280_probe+0xd8>)
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	4b21      	ldr	r3, [pc, #132]	@ (800a588 <BMP280_probe+0xd8>)
 800a502:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800a504:	1dba      	adds	r2, r7, #6
 800a506:	2301      	movs	r3, #1
 800a508:	2101      	movs	r1, #1
 800a50a:	20d0      	movs	r0, #208	@ 0xd0
 800a50c:	f7ff fdf0 	bl	800a0f0 <ReadMemRegister>
 800a510:	0003      	movs	r3, r0
 800a512:	001a      	movs	r2, r3
 800a514:	1dfb      	adds	r3, r7, #7
 800a516:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 800a518:	1dfb      	adds	r3, r7, #7
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	b25b      	sxtb	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00a      	beq.n	800a538 <BMP280_probe+0x88>
 800a522:	1dbb      	adds	r3, r7, #6
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d006      	beq.n	800a538 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800a52a:	1dbb      	adds	r3, r7, #6
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	4a17      	ldr	r2, [pc, #92]	@ (800a58c <BMP280_probe+0xdc>)
 800a530:	4917      	ldr	r1, [pc, #92]	@ (800a590 <BMP280_probe+0xe0>)
 800a532:	2003      	movs	r0, #3
 800a534:	f008 f8c4 	bl	80126c0 <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 800a538:	1dbb      	adds	r3, r7, #6
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	2b58      	cmp	r3, #88	@ 0x58
 800a53e:	d110      	bne.n	800a562 <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800a540:	1dbb      	adds	r3, r7, #6
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	0018      	movs	r0, r3
 800a546:	4b10      	ldr	r3, [pc, #64]	@ (800a588 <BMP280_probe+0xd8>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	4a12      	ldr	r2, [pc, #72]	@ (800a594 <BMP280_probe+0xe4>)
 800a54c:	4912      	ldr	r1, [pc, #72]	@ (800a598 <BMP280_probe+0xe8>)
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	0003      	movs	r3, r0
 800a552:	2002      	movs	r0, #2
 800a554:	f008 f8b4 	bl	80126c0 <CreateLine>
      BMP280_reset(); // get an initial state
 800a558:	f7ff fe0c 	bl	800a174 <BMP280_reset>
      BMP280_get_calibration();
 800a55c:	f7ff fe28 	bl	800a1b0 <BMP280_get_calibration>
 800a560:	e008      	b.n	800a574 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 800a562:	4b09      	ldr	r3, [pc, #36]	@ (800a588 <BMP280_probe+0xd8>)
 800a564:	2200      	movs	r2, #0
 800a566:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800a568:	4a0c      	ldr	r2, [pc, #48]	@ (800a59c <BMP280_probe+0xec>)
 800a56a:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a0 <BMP280_probe+0xf0>)
 800a56c:	0019      	movs	r1, r3
 800a56e:	2001      	movs	r0, #1
 800a570:	f008 f8a6 	bl	80126c0 <CreateLine>
    }
    return bmp280I2Caddr;
 800a574:	4b04      	ldr	r3, [pc, #16]	@ (800a588 <BMP280_probe+0xd8>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	1e5a      	subs	r2, r3, #1
 800a57a:	4193      	sbcs	r3, r2
 800a57c:	b2db      	uxtb	r3, r3
}
 800a57e:	0018      	movs	r0, r3
 800a580:	46bd      	mov	sp, r7
 800a582:	b002      	add	sp, #8
 800a584:	bd80      	pop	{r7, pc}
 800a586:	46c0      	nop			@ (mov r8, r8)
 800a588:	20000094 	.word	0x20000094
 800a58c:	0802af00 	.word	0x0802af00
 800a590:	0802ac8c 	.word	0x0802ac8c
 800a594:	0802af30 	.word	0x0802af30
 800a598:	0802ac6c 	.word	0x0802ac6c
 800a59c:	0802af68 	.word	0x0802af68
 800a5a0:	0802af7c 	.word	0x0802af7c

0800a5a4 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
  return BMP280_probe();
 800a5a8:	f7ff ff82 	bl	800a4b0 <BMP280_probe>
 800a5ac:	0003      	movs	r3, r0
}
 800a5ae:	0018      	movs	r0, r3
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800a5be:	4b05      	ldr	r3, [pc, #20]	@ (800a5d4 <BMP_Init+0x20>)
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800a5c4:	4b04      	ldr	r3, [pc, #16]	@ (800a5d8 <BMP_Init+0x24>)
 800a5c6:	683a      	ldr	r2, [r7, #0]
 800a5c8:	601a      	str	r2, [r3, #0]
}
 800a5ca:	46c0      	nop			@ (mov r8, r8)
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	b002      	add	sp, #8
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	46c0      	nop			@ (mov r8, r8)
 800a5d4:	20000c20 	.word	0x20000c20
 800a5d8:	20000c1c 	.word	0x20000c1c

0800a5dc <BMP280_set_config>:


static bool BMP280_set_config() {
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 800a5e2:	1dbb      	adds	r3, r7, #6
 800a5e4:	228c      	movs	r2, #140	@ 0x8c
 800a5e6:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800a5e8:	1dba      	adds	r2, r7, #6
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	20f5      	movs	r0, #245	@ 0xf5
 800a5f0:	f7ff fd4e 	bl	800a090 <WriteMemRegister>
 800a5f4:	0003      	movs	r3, r0
 800a5f6:	001a      	movs	r2, r3
 800a5f8:	1dfb      	adds	r3, r7, #7
 800a5fa:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800a5fc:	f008 fd96 	bl	801312c <HAL_GetTick>
 800a600:	0003      	movs	r3, r0
 800a602:	330a      	adds	r3, #10
 800a604:	001a      	movs	r2, r3
 800a606:	4b06      	ldr	r3, [pc, #24]	@ (800a620 <BMP280_set_config+0x44>)
 800a608:	601a      	str	r2, [r3, #0]
  return rslt;
 800a60a:	1dfb      	adds	r3, r7, #7
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	b25b      	sxtb	r3, r3
 800a610:	1e5a      	subs	r2, r3, #1
 800a612:	4193      	sbcs	r3, r2
 800a614:	b2db      	uxtb	r3, r3
}
 800a616:	0018      	movs	r0, r3
 800a618:	46bd      	mov	sp, r7
 800a61a:	b002      	add	sp, #8
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	46c0      	nop			@ (mov r8, r8)
 800a620:	20000c48 	.word	0x20000c48

0800a624 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 800a62a:	1dbb      	adds	r3, r7, #6
 800a62c:	2208      	movs	r2, #8
 800a62e:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 800a630:	4b22      	ldr	r3, [pc, #136]	@ (800a6bc <BMP280_set_mode+0x98>)
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	224c      	movs	r2, #76	@ 0x4c
 800a636:	4313      	orrs	r3, r2
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	1d7b      	adds	r3, r7, #5
 800a63c:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800a63e:	1d7a      	adds	r2, r7, #5
 800a640:	2301      	movs	r3, #1
 800a642:	2101      	movs	r1, #1
 800a644:	20f4      	movs	r0, #244	@ 0xf4
 800a646:	f7ff fd23 	bl	800a090 <WriteMemRegister>
 800a64a:	0003      	movs	r3, r0
 800a64c:	001a      	movs	r2, r3
 800a64e:	1dfb      	adds	r3, r7, #7
 800a650:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 800a652:	f008 fd6b 	bl	801312c <HAL_GetTick>
 800a656:	0003      	movs	r3, r0
 800a658:	22fa      	movs	r2, #250	@ 0xfa
 800a65a:	0092      	lsls	r2, r2, #2
 800a65c:	189a      	adds	r2, r3, r2
 800a65e:	4b18      	ldr	r3, [pc, #96]	@ (800a6c0 <BMP280_set_mode+0x9c>)
 800a660:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 800a662:	e016      	b.n	800a692 <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 800a664:	1dba      	adds	r2, r7, #6
 800a666:	2301      	movs	r3, #1
 800a668:	2101      	movs	r1, #1
 800a66a:	20f3      	movs	r0, #243	@ 0xf3
 800a66c:	f7ff fd40 	bl	800a0f0 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 800a670:	4b13      	ldr	r3, [pc, #76]	@ (800a6c0 <BMP280_set_mode+0x9c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	0018      	movs	r0, r3
 800a676:	f007 ffcd 	bl	8012614 <TimestampIsReached>
 800a67a:	1e03      	subs	r3, r0, #0
 800a67c:	d006      	beq.n	800a68c <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 800a67e:	4a11      	ldr	r2, [pc, #68]	@ (800a6c4 <BMP280_set_mode+0xa0>)
 800a680:	4b11      	ldr	r3, [pc, #68]	@ (800a6c8 <BMP280_set_mode+0xa4>)
 800a682:	0019      	movs	r1, r3
 800a684:	2001      	movs	r0, #1
 800a686:	f008 f81b 	bl	80126c0 <CreateLine>
      break;
 800a68a:	e008      	b.n	800a69e <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 800a68c:	2001      	movs	r0, #1
 800a68e:	f008 fd57 	bl	8013140 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 800a692:	1dbb      	adds	r3, r7, #6
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	001a      	movs	r2, r3
 800a698:	2308      	movs	r3, #8
 800a69a:	4013      	ands	r3, r2
 800a69c:	d1e2      	bne.n	800a664 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 800a69e:	f008 fd45 	bl	801312c <HAL_GetTick>
 800a6a2:	0002      	movs	r2, r0
 800a6a4:	4b06      	ldr	r3, [pc, #24]	@ (800a6c0 <BMP280_set_mode+0x9c>)
 800a6a6:	601a      	str	r2, [r3, #0]
  return rslt;
 800a6a8:	1dfb      	adds	r3, r7, #7
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	b25b      	sxtb	r3, r3
 800a6ae:	1e5a      	subs	r2, r3, #1
 800a6b0:	4193      	sbcs	r3, r2
 800a6b2:	b2db      	uxtb	r3, r3
}
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	b002      	add	sp, #8
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	20000095 	.word	0x20000095
 800a6c0:	20000c48 	.word	0x20000c48
 800a6c4:	0802af80 	.word	0x0802af80
 800a6c8:	0802af7c 	.word	0x0802af7c

0800a6cc <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800a6d2:	1dba      	adds	r2, r7, #6
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	20f4      	movs	r0, #244	@ 0xf4
 800a6da:	f7ff fd09 	bl	800a0f0 <ReadMemRegister>
 800a6de:	0003      	movs	r3, r0
 800a6e0:	001a      	movs	r2, r3
 800a6e2:	1dfb      	adds	r3, r7, #7
 800a6e4:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800a6e6:	1dbb      	adds	r3, r7, #6
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	2203      	movs	r2, #3
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	b2da      	uxtb	r2, r3
 800a6f0:	1dbb      	adds	r3, r7, #6
 800a6f2:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800a6f4:	f008 fd1a 	bl	801312c <HAL_GetTick>
 800a6f8:	0003      	movs	r3, r0
 800a6fa:	330a      	adds	r3, #10
 800a6fc:	001a      	movs	r2, r3
 800a6fe:	4b08      	ldr	r3, [pc, #32]	@ (800a720 <BMP280_get_mode+0x54>)
 800a700:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 800a702:	1dfb      	adds	r3, r7, #7
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	b25b      	sxtb	r3, r3
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d102      	bne.n	800a712 <BMP280_get_mode+0x46>
    bmpData = 255;
 800a70c:	1dbb      	adds	r3, r7, #6
 800a70e:	22ff      	movs	r2, #255	@ 0xff
 800a710:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800a712:	1dbb      	adds	r3, r7, #6
 800a714:	781b      	ldrb	r3, [r3, #0]
}
 800a716:	0018      	movs	r0, r3
 800a718:	46bd      	mov	sp, r7
 800a71a:	b002      	add	sp, #8
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	46c0      	nop			@ (mov r8, r8)
 800a720:	20000c48 	.word	0x20000c48

0800a724 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 800a724:	b5b0      	push	{r4, r5, r7, lr}
 800a726:	b088      	sub	sp, #32
 800a728:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 800a72a:	1d3a      	adds	r2, r7, #4
 800a72c:	2306      	movs	r3, #6
 800a72e:	2101      	movs	r1, #1
 800a730:	20f7      	movs	r0, #247	@ 0xf7
 800a732:	f7ff fcdd 	bl	800a0f0 <ReadMemRegister>
 800a736:	0003      	movs	r3, r0
 800a738:	001a      	movs	r2, r3
 800a73a:	230f      	movs	r3, #15
 800a73c:	18fb      	adds	r3, r7, r3
 800a73e:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 800a740:	1d3b      	adds	r3, r7, #4
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	2b80      	cmp	r3, #128	@ 0x80
 800a746:	d00f      	beq.n	800a768 <BMP280_get_measurement_values+0x44>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800a748:	1d3b      	adds	r3, r7, #4
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	031a      	lsls	r2, r3, #12
 800a74e:	1d3b      	adds	r3, r7, #4
 800a750:	785b      	ldrb	r3, [r3, #1]
 800a752:	011b      	lsls	r3, r3, #4
 800a754:	18d3      	adds	r3, r2, r3
 800a756:	1d3a      	adds	r2, r7, #4
 800a758:	7892      	ldrb	r2, [r2, #2]
 800a75a:	0912      	lsrs	r2, r2, #4
 800a75c:	b2d2      	uxtb	r2, r2
 800a75e:	189b      	adds	r3, r3, r2
 800a760:	001a      	movs	r2, r3
 800a762:	4b2d      	ldr	r3, [pc, #180]	@ (800a818 <BMP280_get_measurement_values+0xf4>)
 800a764:	601a      	str	r2, [r3, #0]
 800a766:	e01b      	b.n	800a7a0 <BMP280_get_measurement_values+0x7c>
  }
  else {
    Error("BMP280 Invalid read of barometric pressure, using previous value.");
 800a768:	4a2c      	ldr	r2, [pc, #176]	@ (800a81c <BMP280_get_measurement_values+0xf8>)
 800a76a:	4b2d      	ldr	r3, [pc, #180]	@ (800a820 <BMP280_get_measurement_values+0xfc>)
 800a76c:	0019      	movs	r1, r3
 800a76e:	2001      	movs	r0, #1
 800a770:	f007 ffa6 	bl	80126c0 <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800a774:	1d3b      	adds	r3, r7, #4
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	001d      	movs	r5, r3
 800a77a:	1d3b      	adds	r3, r7, #4
 800a77c:	785b      	ldrb	r3, [r3, #1]
 800a77e:	0018      	movs	r0, r3
 800a780:	1d3b      	adds	r3, r7, #4
 800a782:	789b      	ldrb	r3, [r3, #2]
 800a784:	001c      	movs	r4, r3
 800a786:	4b24      	ldr	r3, [pc, #144]	@ (800a818 <BMP280_get_measurement_values+0xf4>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a26      	ldr	r2, [pc, #152]	@ (800a824 <BMP280_get_measurement_values+0x100>)
 800a78c:	4926      	ldr	r1, [pc, #152]	@ (800a828 <BMP280_get_measurement_values+0x104>)
 800a78e:	9302      	str	r3, [sp, #8]
 800a790:	9401      	str	r4, [sp, #4]
 800a792:	9000      	str	r0, [sp, #0]
 800a794:	002b      	movs	r3, r5
 800a796:	2003      	movs	r0, #3
 800a798:	f007 ff92 	bl	80126c0 <CreateLine>
    SetAllBlueLED();
 800a79c:	f006 fee4 	bl	8011568 <SetAllBlueLED>
  }
  if (bmpData[3] != 0x80) {
 800a7a0:	1d3b      	adds	r3, r7, #4
 800a7a2:	78db      	ldrb	r3, [r3, #3]
 800a7a4:	2b80      	cmp	r3, #128	@ 0x80
 800a7a6:	d00f      	beq.n	800a7c8 <BMP280_get_measurement_values+0xa4>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800a7a8:	1d3b      	adds	r3, r7, #4
 800a7aa:	78db      	ldrb	r3, [r3, #3]
 800a7ac:	031a      	lsls	r2, r3, #12
 800a7ae:	1d3b      	adds	r3, r7, #4
 800a7b0:	791b      	ldrb	r3, [r3, #4]
 800a7b2:	011b      	lsls	r3, r3, #4
 800a7b4:	18d3      	adds	r3, r2, r3
 800a7b6:	1d3a      	adds	r2, r7, #4
 800a7b8:	7952      	ldrb	r2, [r2, #5]
 800a7ba:	0912      	lsrs	r2, r2, #4
 800a7bc:	b2d2      	uxtb	r2, r2
 800a7be:	189b      	adds	r3, r3, r2
 800a7c0:	001a      	movs	r2, r3
 800a7c2:	4b1a      	ldr	r3, [pc, #104]	@ (800a82c <BMP280_get_measurement_values+0x108>)
 800a7c4:	601a      	str	r2, [r3, #0]
 800a7c6:	e01b      	b.n	800a800 <BMP280_get_measurement_values+0xdc>
  }
  else {
    Error("BMP280 Invalid read of temperature, using previous value.");
 800a7c8:	4a19      	ldr	r2, [pc, #100]	@ (800a830 <BMP280_get_measurement_values+0x10c>)
 800a7ca:	4b15      	ldr	r3, [pc, #84]	@ (800a820 <BMP280_get_measurement_values+0xfc>)
 800a7cc:	0019      	movs	r1, r3
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	f007 ff76 	bl	80126c0 <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800a7d4:	1d3b      	adds	r3, r7, #4
 800a7d6:	78db      	ldrb	r3, [r3, #3]
 800a7d8:	001d      	movs	r5, r3
 800a7da:	1d3b      	adds	r3, r7, #4
 800a7dc:	791b      	ldrb	r3, [r3, #4]
 800a7de:	0018      	movs	r0, r3
 800a7e0:	1d3b      	adds	r3, r7, #4
 800a7e2:	795b      	ldrb	r3, [r3, #5]
 800a7e4:	001c      	movs	r4, r3
 800a7e6:	4b11      	ldr	r3, [pc, #68]	@ (800a82c <BMP280_get_measurement_values+0x108>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a12      	ldr	r2, [pc, #72]	@ (800a834 <BMP280_get_measurement_values+0x110>)
 800a7ec:	490e      	ldr	r1, [pc, #56]	@ (800a828 <BMP280_get_measurement_values+0x104>)
 800a7ee:	9302      	str	r3, [sp, #8]
 800a7f0:	9401      	str	r4, [sp, #4]
 800a7f2:	9000      	str	r0, [sp, #0]
 800a7f4:	002b      	movs	r3, r5
 800a7f6:	2003      	movs	r0, #3
 800a7f8:	f007 ff62 	bl	80126c0 <CreateLine>
    SetAllBlueLED();
 800a7fc:	f006 feb4 	bl	8011568 <SetAllBlueLED>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 800a800:	230f      	movs	r3, #15
 800a802:	18fb      	adds	r3, r7, r3
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	b25b      	sxtb	r3, r3
 800a808:	1e5a      	subs	r2, r3, #1
 800a80a:	4193      	sbcs	r3, r2
 800a80c:	b2db      	uxtb	r3, r3
}
 800a80e:	0018      	movs	r0, r3
 800a810:	46bd      	mov	sp, r7
 800a812:	b004      	add	sp, #16
 800a814:	bdb0      	pop	{r4, r5, r7, pc}
 800a816:	46c0      	nop			@ (mov r8, r8)
 800a818:	20000c44 	.word	0x20000c44
 800a81c:	0802afac 	.word	0x0802afac
 800a820:	0802af7c 	.word	0x0802af7c
 800a824:	0802aff0 	.word	0x0802aff0
 800a828:	0802ac8c 	.word	0x0802ac8c
 800a82c:	20000c40 	.word	0x20000c40
 800a830:	0802b038 	.word	0x0802b038
 800a834:	0802b074 	.word	0x0802b074

0800a838 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800a83e:	4b1e      	ldr	r3, [pc, #120]	@ (800a8b8 <BMP280_calc_temperature+0x80>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	10da      	asrs	r2, r3, #3
 800a848:	4b1c      	ldr	r3, [pc, #112]	@ (800a8bc <BMP280_calc_temperature+0x84>)
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	4a1a      	ldr	r2, [pc, #104]	@ (800a8bc <BMP280_calc_temperature+0x84>)
 800a852:	2102      	movs	r1, #2
 800a854:	5e52      	ldrsh	r2, [r2, r1]
 800a856:	4353      	muls	r3, r2
 800a858:	12db      	asrs	r3, r3, #11
 800a85a:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	111b      	asrs	r3, r3, #4
 800a860:	4a16      	ldr	r2, [pc, #88]	@ (800a8bc <BMP280_calc_temperature+0x84>)
 800a862:	8812      	ldrh	r2, [r2, #0]
 800a864:	1a9b      	subs	r3, r3, r2
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	1112      	asrs	r2, r2, #4
 800a86a:	4914      	ldr	r1, [pc, #80]	@ (800a8bc <BMP280_calc_temperature+0x84>)
 800a86c:	8809      	ldrh	r1, [r1, #0]
 800a86e:	1a52      	subs	r2, r2, r1
 800a870:	4353      	muls	r3, r2
 800a872:	131b      	asrs	r3, r3, #12
 800a874:	4a11      	ldr	r2, [pc, #68]	@ (800a8bc <BMP280_calc_temperature+0x84>)
 800a876:	2104      	movs	r1, #4
 800a878:	5e52      	ldrsh	r2, [r2, r1]
 800a87a:	4353      	muls	r3, r2
 800a87c:	139b      	asrs	r3, r3, #14
 800a87e:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800a880:	693a      	ldr	r2, [r7, #16]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	18d2      	adds	r2, r2, r3
 800a886:	4b0e      	ldr	r3, [pc, #56]	@ (800a8c0 <BMP280_calc_temperature+0x88>)
 800a888:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800a88a:	4b0d      	ldr	r3, [pc, #52]	@ (800a8c0 <BMP280_calc_temperature+0x88>)
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	0013      	movs	r3, r2
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	189b      	adds	r3, r3, r2
 800a894:	3380      	adds	r3, #128	@ 0x80
 800a896:	121b      	asrs	r3, r3, #8
 800a898:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800a89a:	68b8      	ldr	r0, [r7, #8]
 800a89c:	f7f6 fe98 	bl	80015d0 <__aeabi_i2f>
 800a8a0:	1c03      	adds	r3, r0, #0
 800a8a2:	4908      	ldr	r1, [pc, #32]	@ (800a8c4 <BMP280_calc_temperature+0x8c>)
 800a8a4:	1c18      	adds	r0, r3, #0
 800a8a6:	f7f6 f995 	bl	8000bd4 <__aeabi_fdiv>
 800a8aa:	1c03      	adds	r3, r0, #0
 800a8ac:	607b      	str	r3, [r7, #4]
  return airTemp;
 800a8ae:	687b      	ldr	r3, [r7, #4]
}
 800a8b0:	1c18      	adds	r0, r3, #0
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	b006      	add	sp, #24
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	20000c40 	.word	0x20000c40
 800a8bc:	20000c24 	.word	0x20000c24
 800a8c0:	20000c3c 	.word	0x20000c3c
 800a8c4:	42c80000 	.word	0x42c80000

0800a8c8 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800a8ce:	4b4e      	ldr	r3, [pc, #312]	@ (800aa08 <BMP280_calc_pressure+0x140>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800a8d4:	4b4d      	ldr	r3, [pc, #308]	@ (800aa0c <BMP280_calc_pressure+0x144>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	105b      	asrs	r3, r3, #1
 800a8da:	4a4d      	ldr	r2, [pc, #308]	@ (800aa10 <BMP280_calc_pressure+0x148>)
 800a8dc:	4694      	mov	ip, r2
 800a8de:	4463      	add	r3, ip
 800a8e0:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	109b      	asrs	r3, r3, #2
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	1092      	asrs	r2, r2, #2
 800a8ea:	4353      	muls	r3, r2
 800a8ec:	12db      	asrs	r3, r3, #11
 800a8ee:	4a49      	ldr	r2, [pc, #292]	@ (800aa14 <BMP280_calc_pressure+0x14c>)
 800a8f0:	2110      	movs	r1, #16
 800a8f2:	5e52      	ldrsh	r2, [r2, r1]
 800a8f4:	4353      	muls	r3, r2
 800a8f6:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800a8f8:	4b46      	ldr	r3, [pc, #280]	@ (800aa14 <BMP280_calc_pressure+0x14c>)
 800a8fa:	220e      	movs	r2, #14
 800a8fc:	5e9b      	ldrsh	r3, [r3, r2]
 800a8fe:	001a      	movs	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	4353      	muls	r3, r2
 800a904:	005b      	lsls	r3, r3, #1
 800a906:	68ba      	ldr	r2, [r7, #8]
 800a908:	18d3      	adds	r3, r2, r3
 800a90a:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	109a      	asrs	r2, r3, #2
 800a910:	4b40      	ldr	r3, [pc, #256]	@ (800aa14 <BMP280_calc_pressure+0x14c>)
 800a912:	210c      	movs	r1, #12
 800a914:	5e5b      	ldrsh	r3, [r3, r1]
 800a916:	041b      	lsls	r3, r3, #16
 800a918:	18d3      	adds	r3, r2, r3
 800a91a:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800a91c:	4b3d      	ldr	r3, [pc, #244]	@ (800aa14 <BMP280_calc_pressure+0x14c>)
 800a91e:	220a      	movs	r2, #10
 800a920:	5e9b      	ldrsh	r3, [r3, r2]
 800a922:	0019      	movs	r1, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	109b      	asrs	r3, r3, #2
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	1092      	asrs	r2, r2, #2
 800a92c:	4353      	muls	r3, r2
 800a92e:	135b      	asrs	r3, r3, #13
 800a930:	434b      	muls	r3, r1
 800a932:	10da      	asrs	r2, r3, #3
 800a934:	4b37      	ldr	r3, [pc, #220]	@ (800aa14 <BMP280_calc_pressure+0x14c>)
 800a936:	2108      	movs	r1, #8
 800a938:	5e5b      	ldrsh	r3, [r3, r1]
 800a93a:	0019      	movs	r1, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	434b      	muls	r3, r1
 800a940:	105b      	asrs	r3, r3, #1
 800a942:	18d3      	adds	r3, r2, r3
 800a944:	149b      	asrs	r3, r3, #18
 800a946:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2280      	movs	r2, #128	@ 0x80
 800a94c:	0212      	lsls	r2, r2, #8
 800a94e:	4694      	mov	ip, r2
 800a950:	4463      	add	r3, ip
 800a952:	4a30      	ldr	r2, [pc, #192]	@ (800aa14 <BMP280_calc_pressure+0x14c>)
 800a954:	88d2      	ldrh	r2, [r2, #6]
 800a956:	4353      	muls	r3, r2
 800a958:	13db      	asrs	r3, r3, #15
 800a95a:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d101      	bne.n	800a966 <BMP280_calc_pressure+0x9e>
    return 0;
 800a962:	2300      	movs	r3, #0
 800a964:	e04b      	b.n	800a9fe <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	2280      	movs	r2, #128	@ 0x80
 800a96a:	0352      	lsls	r2, r2, #13
 800a96c:	1ad2      	subs	r2, r2, r3
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	131b      	asrs	r3, r3, #12
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	001a      	movs	r2, r3
 800a976:	4b28      	ldr	r3, [pc, #160]	@ (800aa18 <BMP280_calc_pressure+0x150>)
 800a978:	4353      	muls	r3, r2
 800a97a:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	db09      	blt.n	800a996 <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	005b      	lsls	r3, r3, #1
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	0011      	movs	r1, r2
 800a98a:	0018      	movs	r0, r3
 800a98c:	f7f5 fc0a 	bl	80001a4 <__udivsi3>
 800a990:	0003      	movs	r3, r0
 800a992:	617b      	str	r3, [r7, #20]
 800a994:	e007      	b.n	800a9a6 <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	0019      	movs	r1, r3
 800a99a:	6978      	ldr	r0, [r7, #20]
 800a99c:	f7f5 fc02 	bl	80001a4 <__udivsi3>
 800a9a0:	0003      	movs	r3, r0
 800a9a2:	005b      	lsls	r3, r3, #1
 800a9a4:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800a9a6:	4b1b      	ldr	r3, [pc, #108]	@ (800aa14 <BMP280_calc_pressure+0x14c>)
 800a9a8:	2216      	movs	r2, #22
 800a9aa:	5e9b      	ldrsh	r3, [r3, r2]
 800a9ac:	0019      	movs	r1, r3
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	08db      	lsrs	r3, r3, #3
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	08d2      	lsrs	r2, r2, #3
 800a9b6:	4353      	muls	r3, r2
 800a9b8:	0b5b      	lsrs	r3, r3, #13
 800a9ba:	434b      	muls	r3, r1
 800a9bc:	131b      	asrs	r3, r3, #12
 800a9be:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	089b      	lsrs	r3, r3, #2
 800a9c4:	001a      	movs	r2, r3
 800a9c6:	4b13      	ldr	r3, [pc, #76]	@ (800aa14 <BMP280_calc_pressure+0x14c>)
 800a9c8:	2114      	movs	r1, #20
 800a9ca:	5e5b      	ldrsh	r3, [r3, r1]
 800a9cc:	4353      	muls	r3, r2
 800a9ce:	135b      	asrs	r3, r3, #13
 800a9d0:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	18d3      	adds	r3, r2, r3
 800a9d8:	4a0e      	ldr	r2, [pc, #56]	@ (800aa14 <BMP280_calc_pressure+0x14c>)
 800a9da:	2112      	movs	r1, #18
 800a9dc:	5e52      	ldrsh	r2, [r2, r1]
 800a9de:	189b      	adds	r3, r3, r2
 800a9e0:	111a      	asrs	r2, r3, #4
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	18d3      	adds	r3, r2, r3
 800a9e6:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800a9e8:	6978      	ldr	r0, [r7, #20]
 800a9ea:	f7f6 fe3d 	bl	8001668 <__aeabi_ui2f>
 800a9ee:	1c03      	adds	r3, r0, #0
 800a9f0:	490a      	ldr	r1, [pc, #40]	@ (800aa1c <BMP280_calc_pressure+0x154>)
 800a9f2:	1c18      	adds	r0, r3, #0
 800a9f4:	f7f6 f8ee 	bl	8000bd4 <__aeabi_fdiv>
 800a9f8:	1c03      	adds	r3, r0, #0
 800a9fa:	607b      	str	r3, [r7, #4]
  return airhPa;
 800a9fc:	687b      	ldr	r3, [r7, #4]
}
 800a9fe:	1c18      	adds	r0, r3, #0
 800aa00:	46bd      	mov	sp, r7
 800aa02:	b006      	add	sp, #24
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	46c0      	nop			@ (mov r8, r8)
 800aa08:	20000c44 	.word	0x20000c44
 800aa0c:	20000c3c 	.word	0x20000c3c
 800aa10:	ffff0600 	.word	0xffff0600
 800aa14:	20000c24 	.word	0x20000c24
 800aa18:	00000c35 	.word	0x00000c35
 800aa1c:	42c80000 	.word	0x42c80000

0800aa20 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800aa20:	b5b0      	push	{r4, r5, r7, lr}
 800aa22:	b088      	sub	sp, #32
 800aa24:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800aa26:	4b9a      	ldr	r3, [pc, #616]	@ (800ac90 <BMP_Upkeep+0x270>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	0018      	movs	r0, r3
 800aa2c:	f007 fdf2 	bl	8012614 <TimestampIsReached>
 800aa30:	0003      	movs	r3, r0
 800aa32:	001a      	movs	r2, r3
 800aa34:	2301      	movs	r3, #1
 800aa36:	4053      	eors	r3, r2
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <BMP_Upkeep+0x24>
    return BMPState;
 800aa3e:	4b95      	ldr	r3, [pc, #596]	@ (800ac94 <BMP_Upkeep+0x274>)
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	e120      	b.n	800ac86 <BMP_Upkeep+0x266>
  }
  switch(BMPState) {
 800aa44:	4b93      	ldr	r3, [pc, #588]	@ (800ac94 <BMP_Upkeep+0x274>)
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b09      	cmp	r3, #9
 800aa4a:	d900      	bls.n	800aa4e <BMP_Upkeep+0x2e>
 800aa4c:	e106      	b.n	800ac5c <BMP_Upkeep+0x23c>
 800aa4e:	009a      	lsls	r2, r3, #2
 800aa50:	4b91      	ldr	r3, [pc, #580]	@ (800ac98 <BMP_Upkeep+0x278>)
 800aa52:	18d3      	adds	r3, r2, r3
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 800aa58:	4a90      	ldr	r2, [pc, #576]	@ (800ac9c <BMP_Upkeep+0x27c>)
 800aa5a:	4b91      	ldr	r3, [pc, #580]	@ (800aca0 <BMP_Upkeep+0x280>)
 800aa5c:	0019      	movs	r1, r3
 800aa5e:	2003      	movs	r0, #3
 800aa60:	f007 fe2e 	bl	80126c0 <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800aa64:	f008 fb62 	bl	801312c <HAL_GetTick>
 800aa68:	0003      	movs	r3, r0
 800aa6a:	4a8e      	ldr	r2, [pc, #568]	@ (800aca4 <BMP_Upkeep+0x284>)
 800aa6c:	189a      	adds	r2, r3, r2
 800aa6e:	4b88      	ldr	r3, [pc, #544]	@ (800ac90 <BMP_Upkeep+0x270>)
 800aa70:	601a      	str	r2, [r3, #0]
    break;
 800aa72:	e106      	b.n	800ac82 <BMP_Upkeep+0x262>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 800aa74:	f001 ff16 	bl	800c8a4 <getSensorLock>
 800aa78:	1e03      	subs	r3, r0, #0
 800aa7a:	d000      	beq.n	800aa7e <BMP_Upkeep+0x5e>
 800aa7c:	e0fa      	b.n	800ac74 <BMP_Upkeep+0x254>
      break;
    }
    BMP280_reset();
 800aa7e:	f7ff fb79 	bl	800a174 <BMP280_reset>
    BMPState = BMP_SET_CONFIG;
 800aa82:	4b84      	ldr	r3, [pc, #528]	@ (800ac94 <BMP_Upkeep+0x274>)
 800aa84:	2201      	movs	r2, #1
 800aa86:	701a      	strb	r2, [r3, #0]
    break;
 800aa88:	e0fb      	b.n	800ac82 <BMP_Upkeep+0x262>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 800aa8a:	f001 ff0b 	bl	800c8a4 <getSensorLock>
 800aa8e:	1e03      	subs	r3, r0, #0
 800aa90:	d000      	beq.n	800aa94 <BMP_Upkeep+0x74>
 800aa92:	e0f1      	b.n	800ac78 <BMP_Upkeep+0x258>
      break;
    }
    setSensorLock(BMP280);
 800aa94:	2004      	movs	r0, #4
 800aa96:	f001 fef1 	bl	800c87c <setSensorLock>
    HAL_Delay(10); // wait for defered DMA transfers
 800aa9a:	200a      	movs	r0, #10
 800aa9c:	f008 fb50 	bl	8013140 <HAL_Delay>
    if (BMP280_set_config()) {
 800aaa0:	f7ff fd9c 	bl	800a5dc <BMP280_set_config>
 800aaa4:	1e03      	subs	r3, r0, #0
 800aaa6:	d003      	beq.n	800aab0 <BMP_Upkeep+0x90>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800aaa8:	4b7a      	ldr	r3, [pc, #488]	@ (800ac94 <BMP_Upkeep+0x274>)
 800aaaa:	2202      	movs	r2, #2
 800aaac:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
     }
  break;
 800aaae:	e0e8      	b.n	800ac82 <BMP_Upkeep+0x262>
      BMPState = BMP_STATE_INIT;
 800aab0:	4b78      	ldr	r3, [pc, #480]	@ (800ac94 <BMP_Upkeep+0x274>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	701a      	strb	r2, [r3, #0]
  break;
 800aab6:	e0e4      	b.n	800ac82 <BMP_Upkeep+0x262>

  case BMP_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != BMP280)) {
 800aab8:	f001 fef4 	bl	800c8a4 <getSensorLock>
 800aabc:	1e03      	subs	r3, r0, #0
 800aabe:	d035      	beq.n	800ab2c <BMP_Upkeep+0x10c>
 800aac0:	f001 fef0 	bl	800c8a4 <getSensorLock>
 800aac4:	0003      	movs	r3, r0
 800aac6:	2b04      	cmp	r3, #4
 800aac8:	d030      	beq.n	800ab2c <BMP_Upkeep+0x10c>
      uint8_t locktype = getSensorLock();
 800aaca:	1dfc      	adds	r4, r7, #7
 800aacc:	f001 feea 	bl	800c8a4 <getSensorLock>
 800aad0:	0003      	movs	r3, r0
 800aad2:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 800aad4:	1dfb      	adds	r3, r7, #7
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d019      	beq.n	800ab10 <BMP_Upkeep+0xf0>
 800aadc:	1dfb      	adds	r3, r7, #7
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d013      	beq.n	800ab0c <BMP_Upkeep+0xec>
 800aae4:	1dfb      	adds	r3, r7, #7
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d00d      	beq.n	800ab08 <BMP_Upkeep+0xe8>
 800aaec:	1dfb      	adds	r3, r7, #7
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	2b03      	cmp	r3, #3
 800aaf2:	d007      	beq.n	800ab04 <BMP_Upkeep+0xe4>
 800aaf4:	1dfb      	adds	r3, r7, #7
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b04      	cmp	r3, #4
 800aafa:	d101      	bne.n	800ab00 <BMP_Upkeep+0xe0>
 800aafc:	4b6a      	ldr	r3, [pc, #424]	@ (800aca8 <BMP_Upkeep+0x288>)
 800aafe:	e008      	b.n	800ab12 <BMP_Upkeep+0xf2>
 800ab00:	4b6a      	ldr	r3, [pc, #424]	@ (800acac <BMP_Upkeep+0x28c>)
 800ab02:	e006      	b.n	800ab12 <BMP_Upkeep+0xf2>
 800ab04:	4b6a      	ldr	r3, [pc, #424]	@ (800acb0 <BMP_Upkeep+0x290>)
 800ab06:	e004      	b.n	800ab12 <BMP_Upkeep+0xf2>
 800ab08:	4b6a      	ldr	r3, [pc, #424]	@ (800acb4 <BMP_Upkeep+0x294>)
 800ab0a:	e002      	b.n	800ab12 <BMP_Upkeep+0xf2>
 800ab0c:	4b6a      	ldr	r3, [pc, #424]	@ (800acb8 <BMP_Upkeep+0x298>)
 800ab0e:	e000      	b.n	800ab12 <BMP_Upkeep+0xf2>
 800ab10:	4b6a      	ldr	r3, [pc, #424]	@ (800acbc <BMP_Upkeep+0x29c>)
 800ab12:	4a6b      	ldr	r2, [pc, #428]	@ (800acc0 <BMP_Upkeep+0x2a0>)
 800ab14:	4962      	ldr	r1, [pc, #392]	@ (800aca0 <BMP_Upkeep+0x280>)
 800ab16:	2003      	movs	r0, #3
 800ab18:	f007 fdd2 	bl	80126c0 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 800ab1c:	f008 fb06 	bl	801312c <HAL_GetTick>
 800ab20:	0003      	movs	r3, r0
 800ab22:	3361      	adds	r3, #97	@ 0x61
 800ab24:	001a      	movs	r2, r3
 800ab26:	4b5a      	ldr	r3, [pc, #360]	@ (800ac90 <BMP_Upkeep+0x270>)
 800ab28:	601a      	str	r2, [r3, #0]
      break;
 800ab2a:	e0aa      	b.n	800ac82 <BMP_Upkeep+0x262>
    }
    if (getSensorLock() == FREE) {
 800ab2c:	f001 feba 	bl	800c8a4 <getSensorLock>
 800ab30:	1e03      	subs	r3, r0, #0
 800ab32:	d105      	bne.n	800ab40 <BMP_Upkeep+0x120>
      HAL_Delay(10);
 800ab34:	200a      	movs	r0, #10
 800ab36:	f008 fb03 	bl	8013140 <HAL_Delay>
      setSensorLock(BMP280);
 800ab3a:	2004      	movs	r0, #4
 800ab3c:	f001 fe9e 	bl	800c87c <setSensorLock>
    }
    if (BMP280_set_mode()) {
 800ab40:	f7ff fd70 	bl	800a624 <BMP280_set_mode>
 800ab44:	1e03      	subs	r3, r0, #0
 800ab46:	d003      	beq.n	800ab50 <BMP_Upkeep+0x130>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800ab48:	4b52      	ldr	r3, [pc, #328]	@ (800ac94 <BMP_Upkeep+0x274>)
 800ab4a:	2205      	movs	r2, #5
 800ab4c:	701a      	strb	r2, [r3, #0]
    }
    else {
      Error("Error while setting BMP280 to forced mode");
      BMPState = BMP_STATE_INIT ;
    }
    break;
 800ab4e:	e098      	b.n	800ac82 <BMP_Upkeep+0x262>
      Error("Error while setting BMP280 to forced mode");
 800ab50:	4a5c      	ldr	r2, [pc, #368]	@ (800acc4 <BMP_Upkeep+0x2a4>)
 800ab52:	4b5d      	ldr	r3, [pc, #372]	@ (800acc8 <BMP_Upkeep+0x2a8>)
 800ab54:	0019      	movs	r1, r3
 800ab56:	2001      	movs	r0, #1
 800ab58:	f007 fdb2 	bl	80126c0 <CreateLine>
      BMPState = BMP_STATE_INIT ;
 800ab5c:	4b4d      	ldr	r3, [pc, #308]	@ (800ac94 <BMP_Upkeep+0x274>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	701a      	strb	r2, [r3, #0]
    break;
 800ab62:	e08e      	b.n	800ac82 <BMP_Upkeep+0x262>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (BMP280_get_measurement_values()) {
 800ab64:	f7ff fdde 	bl	800a724 <BMP280_get_measurement_values>
 800ab68:	1e03      	subs	r3, r0, #0
 800ab6a:	d006      	beq.n	800ab7a <BMP_Upkeep+0x15a>
      setSensorLock(FREE);
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	f001 fe85 	bl	800c87c <setSensorLock>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 800ab72:	4b48      	ldr	r3, [pc, #288]	@ (800ac94 <BMP_Upkeep+0x274>)
 800ab74:	2203      	movs	r2, #3
 800ab76:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
      Error("BMP280 Error during reading measurement results array");
    }
  break;
 800ab78:	e083      	b.n	800ac82 <BMP_Upkeep+0x262>
      BMPState = BMP_STATE_INIT;
 800ab7a:	4b46      	ldr	r3, [pc, #280]	@ (800ac94 <BMP_Upkeep+0x274>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	701a      	strb	r2, [r3, #0]
      Error("BMP280 Error during reading measurement results array");
 800ab80:	4a52      	ldr	r2, [pc, #328]	@ (800accc <BMP_Upkeep+0x2ac>)
 800ab82:	4b51      	ldr	r3, [pc, #324]	@ (800acc8 <BMP_Upkeep+0x2a8>)
 800ab84:	0019      	movs	r1, r3
 800ab86:	2001      	movs	r0, #1
 800ab88:	f007 fd9a 	bl	80126c0 <CreateLine>
  break;
 800ab8c:	e079      	b.n	800ac82 <BMP_Upkeep+0x262>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800ab8e:	f7ff fe53 	bl	800a838 <BMP280_calc_temperature>
 800ab92:	1c03      	adds	r3, r0, #0
 800ab94:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 800ab96:	f7ff fe97 	bl	800a8c8 <BMP280_calc_pressure>
 800ab9a:	1c03      	adds	r3, r0, #0
 800ab9c:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800ab9e:	494c      	ldr	r1, [pc, #304]	@ (800acd0 <BMP_Upkeep+0x2b0>)
 800aba0:	68b8      	ldr	r0, [r7, #8]
 800aba2:	f7f5 fcd9 	bl	8000558 <__aeabi_fcmpgt>
 800aba6:	1e03      	subs	r3, r0, #0
 800aba8:	d02b      	beq.n	800ac02 <BMP_Upkeep+0x1e2>
 800abaa:	494a      	ldr	r1, [pc, #296]	@ (800acd4 <BMP_Upkeep+0x2b4>)
 800abac:	68b8      	ldr	r0, [r7, #8]
 800abae:	f7f5 fcbf 	bl	8000530 <__aeabi_fcmplt>
 800abb2:	1e03      	subs	r3, r0, #0
 800abb4:	d025      	beq.n	800ac02 <BMP_Upkeep+0x1e2>
      sethPa(airhpa);
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	1c18      	adds	r0, r3, #0
 800abba:	f7f9 fdc5 	bl	8004748 <sethPa>
      Info("BMP280 airtemperature: %2.2fC barometric value: %.2fhPa", airtemp, airhpa);
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f7f8 fc50 	bl	8003464 <__aeabi_f2d>
 800abc4:	0004      	movs	r4, r0
 800abc6:	000d      	movs	r5, r1
 800abc8:	68b8      	ldr	r0, [r7, #8]
 800abca:	f7f8 fc4b 	bl	8003464 <__aeabi_f2d>
 800abce:	0002      	movs	r2, r0
 800abd0:	000b      	movs	r3, r1
 800abd2:	4841      	ldr	r0, [pc, #260]	@ (800acd8 <BMP_Upkeep+0x2b8>)
 800abd4:	4941      	ldr	r1, [pc, #260]	@ (800acdc <BMP_Upkeep+0x2bc>)
 800abd6:	9202      	str	r2, [sp, #8]
 800abd8:	9303      	str	r3, [sp, #12]
 800abda:	9400      	str	r4, [sp, #0]
 800abdc:	9501      	str	r5, [sp, #4]
 800abde:	0002      	movs	r2, r0
 800abe0:	2002      	movs	r0, #2
 800abe2:	f007 fd6d 	bl	80126c0 <CreateLine>
      setBMP280(airtemp, airhpa);
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	1c11      	adds	r1, r2, #0
 800abec:	1c18      	adds	r0, r3, #0
 800abee:	f7f9 fd47 	bl	8004680 <setBMP280>
      BMP280TimeStamp = HAL_GetTick() + 60000;
 800abf2:	f008 fa9b 	bl	801312c <HAL_GetTick>
 800abf6:	0003      	movs	r3, r0
 800abf8:	4a39      	ldr	r2, [pc, #228]	@ (800ace0 <BMP_Upkeep+0x2c0>)
 800abfa:	189a      	adds	r2, r3, r2
 800abfc:	4b24      	ldr	r3, [pc, #144]	@ (800ac90 <BMP_Upkeep+0x270>)
 800abfe:	601a      	str	r2, [r3, #0]
 800ac00:	e00c      	b.n	800ac1c <BMP_Upkeep+0x1fc>
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800ac02:	4a38      	ldr	r2, [pc, #224]	@ (800ace4 <BMP_Upkeep+0x2c4>)
 800ac04:	4b30      	ldr	r3, [pc, #192]	@ (800acc8 <BMP_Upkeep+0x2a8>)
 800ac06:	0019      	movs	r1, r3
 800ac08:	2001      	movs	r0, #1
 800ac0a:	f007 fd59 	bl	80126c0 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800ac0e:	f008 fa8d 	bl	801312c <HAL_GetTick>
 800ac12:	0003      	movs	r3, r0
 800ac14:	4a34      	ldr	r2, [pc, #208]	@ (800ace8 <BMP_Upkeep+0x2c8>)
 800ac16:	189a      	adds	r2, r3, r2
 800ac18:	4b1d      	ldr	r3, [pc, #116]	@ (800ac90 <BMP_Upkeep+0x270>)
 800ac1a:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800ac1c:	4b1d      	ldr	r3, [pc, #116]	@ (800ac94 <BMP_Upkeep+0x274>)
 800ac1e:	2208      	movs	r2, #8
 800ac20:	701a      	strb	r2, [r3, #0]
    break;
 800ac22:	e02e      	b.n	800ac82 <BMP_Upkeep+0x262>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 800ac24:	4b1b      	ldr	r3, [pc, #108]	@ (800ac94 <BMP_Upkeep+0x274>)
 800ac26:	2209      	movs	r2, #9
 800ac28:	701a      	strb	r2, [r3, #0]
    break;
 800ac2a:	e02a      	b.n	800ac82 <BMP_Upkeep+0x262>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 800ac2c:	f001 fe3a 	bl	800c8a4 <getSensorLock>
 800ac30:	1e03      	subs	r3, r0, #0
 800ac32:	d123      	bne.n	800ac7c <BMP_Upkeep+0x25c>
      break;
    }
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 800ac34:	f7ff fd4a 	bl	800a6cc <BMP280_get_mode>
 800ac38:	0003      	movs	r3, r0
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d103      	bne.n	800ac46 <BMP_Upkeep+0x226>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800ac3e:	4b15      	ldr	r3, [pc, #84]	@ (800ac94 <BMP_Upkeep+0x274>)
 800ac40:	2205      	movs	r2, #5
 800ac42:	701a      	strb	r2, [r3, #0]
 800ac44:	e002      	b.n	800ac4c <BMP_Upkeep+0x22c>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800ac46:	4b13      	ldr	r3, [pc, #76]	@ (800ac94 <BMP_Upkeep+0x274>)
 800ac48:	2202      	movs	r2, #2
 800ac4a:	701a      	strb	r2, [r3, #0]
    }
    BMP280TimeStamp = HAL_GetTick() + 23;
 800ac4c:	f008 fa6e 	bl	801312c <HAL_GetTick>
 800ac50:	0003      	movs	r3, r0
 800ac52:	3317      	adds	r3, #23
 800ac54:	001a      	movs	r2, r3
 800ac56:	4b0e      	ldr	r3, [pc, #56]	@ (800ac90 <BMP_Upkeep+0x270>)
 800ac58:	601a      	str	r2, [r3, #0]
    break;
 800ac5a:	e012      	b.n	800ac82 <BMP_Upkeep+0x262>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 800ac5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ac94 <BMP_Upkeep+0x274>)
 800ac5e:	2200      	movs	r2, #0
 800ac60:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != BMP280) {
 800ac62:	f001 fe1f 	bl	800c8a4 <getSensorLock>
 800ac66:	0003      	movs	r3, r0
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	d009      	beq.n	800ac80 <BMP_Upkeep+0x260>
      setSensorLock(FREE);
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	f001 fe05 	bl	800c87c <setSensorLock>
    }
    break;
 800ac72:	e005      	b.n	800ac80 <BMP_Upkeep+0x260>
      break;
 800ac74:	46c0      	nop			@ (mov r8, r8)
 800ac76:	e004      	b.n	800ac82 <BMP_Upkeep+0x262>
      break;
 800ac78:	46c0      	nop			@ (mov r8, r8)
 800ac7a:	e002      	b.n	800ac82 <BMP_Upkeep+0x262>
      break;
 800ac7c:	46c0      	nop			@ (mov r8, r8)
 800ac7e:	e000      	b.n	800ac82 <BMP_Upkeep+0x262>
    break;
 800ac80:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800ac82:	4b04      	ldr	r3, [pc, #16]	@ (800ac94 <BMP_Upkeep+0x274>)
 800ac84:	781b      	ldrb	r3, [r3, #0]
}
 800ac86:	0018      	movs	r0, r3
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	b004      	add	sp, #16
 800ac8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ac8e:	46c0      	nop			@ (mov r8, r8)
 800ac90:	20000c48 	.word	0x20000c48
 800ac94:	20000096 	.word	0x20000096
 800ac98:	0802ca38 	.word	0x0802ca38
 800ac9c:	0802b0bc 	.word	0x0802b0bc
 800aca0:	0802ac8c 	.word	0x0802ac8c
 800aca4:	002f9b80 	.word	0x002f9b80
 800aca8:	0802b0f8 	.word	0x0802b0f8
 800acac:	0802b100 	.word	0x0802b100
 800acb0:	0802b108 	.word	0x0802b108
 800acb4:	0802b110 	.word	0x0802b110
 800acb8:	0802b118 	.word	0x0802b118
 800acbc:	0802b120 	.word	0x0802b120
 800acc0:	0802b128 	.word	0x0802b128
 800acc4:	0802b150 	.word	0x0802b150
 800acc8:	0802af7c 	.word	0x0802af7c
 800accc:	0802b17c 	.word	0x0802b17c
 800acd0:	44548000 	.word	0x44548000
 800acd4:	44898000 	.word	0x44898000
 800acd8:	0802b1b4 	.word	0x0802b1b4
 800acdc:	0802ac6c 	.word	0x0802ac6c
 800ace0:	0000ea60 	.word	0x0000ea60
 800ace4:	0802b1ec 	.word	0x0802b1ec
 800ace8:	00002710 	.word	0x00002710

0800acec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800acf2:	4b10      	ldr	r3, [pc, #64]	@ (800ad34 <MX_DMA_Init+0x48>)
 800acf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acf6:	4b0f      	ldr	r3, [pc, #60]	@ (800ad34 <MX_DMA_Init+0x48>)
 800acf8:	2101      	movs	r1, #1
 800acfa:	430a      	orrs	r2, r1
 800acfc:	631a      	str	r2, [r3, #48]	@ 0x30
 800acfe:	4b0d      	ldr	r3, [pc, #52]	@ (800ad34 <MX_DMA_Init+0x48>)
 800ad00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad02:	2201      	movs	r2, #1
 800ad04:	4013      	ands	r3, r2
 800ad06:	607b      	str	r3, [r7, #4]
 800ad08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	200a      	movs	r0, #10
 800ad10:	f008 feb0 	bl	8013a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800ad14:	200a      	movs	r0, #10
 800ad16:	f008 fec2 	bl	8013a9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	2103      	movs	r1, #3
 800ad1e:	200b      	movs	r0, #11
 800ad20:	f008 fea8 	bl	8013a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800ad24:	200b      	movs	r0, #11
 800ad26:	f008 feba 	bl	8013a9e <HAL_NVIC_EnableIRQ>

}
 800ad2a:	46c0      	nop			@ (mov r8, r8)
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	b002      	add	sp, #8
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	46c0      	nop			@ (mov r8, r8)
 800ad34:	40021000 	.word	0x40021000

0800ad38 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800ad38:	b590      	push	{r4, r7, lr}
 800ad3a:	b087      	sub	sp, #28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	1dbb      	adds	r3, r7, #6
 800ad44:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800ad46:	4b17      	ldr	r3, [pc, #92]	@ (800ada4 <WriteUint8ArrayEeprom+0x6c>)
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800ad4c:	f009 fa24 	bl	8014198 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800ad50:	2316      	movs	r3, #22
 800ad52:	18fb      	adds	r3, r7, r3
 800ad54:	2200      	movs	r2, #0
 800ad56:	801a      	strh	r2, [r3, #0]
 800ad58:	e015      	b.n	800ad86 <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800ad5a:	4b12      	ldr	r3, [pc, #72]	@ (800ada4 <WriteUint8ArrayEeprom+0x6c>)
 800ad5c:	6819      	ldr	r1, [r3, #0]
 800ad5e:	2416      	movs	r4, #22
 800ad60:	193b      	adds	r3, r7, r4
 800ad62:	881b      	ldrh	r3, [r3, #0]
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	18d3      	adds	r3, r2, r3
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	001a      	movs	r2, r3
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	f009 fa7b 	bl	8014268 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800ad72:	4b0c      	ldr	r3, [pc, #48]	@ (800ada4 <WriteUint8ArrayEeprom+0x6c>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	1c5a      	adds	r2, r3, #1
 800ad78:	4b0a      	ldr	r3, [pc, #40]	@ (800ada4 <WriteUint8ArrayEeprom+0x6c>)
 800ad7a:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800ad7c:	193b      	adds	r3, r7, r4
 800ad7e:	881a      	ldrh	r2, [r3, #0]
 800ad80:	193b      	adds	r3, r7, r4
 800ad82:	3201      	adds	r2, #1
 800ad84:	801a      	strh	r2, [r3, #0]
 800ad86:	2316      	movs	r3, #22
 800ad88:	18fa      	adds	r2, r7, r3
 800ad8a:	1dbb      	adds	r3, r7, #6
 800ad8c:	8812      	ldrh	r2, [r2, #0]
 800ad8e:	881b      	ldrh	r3, [r3, #0]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d3e2      	bcc.n	800ad5a <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800ad94:	f009 fa2e 	bl	80141f4 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800ad98:	4b02      	ldr	r3, [pc, #8]	@ (800ada4 <WriteUint8ArrayEeprom+0x6c>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
}
 800ad9c:	0018      	movs	r0, r3
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	b007      	add	sp, #28
 800ada2:	bd90      	pop	{r4, r7, pc}
 800ada4:	20000c6c 	.word	0x20000c6c

0800ada8 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	0019      	movs	r1, r3
 800adb4:	1dbb      	adds	r3, r7, #6
 800adb6:	801a      	strh	r2, [r3, #0]
 800adb8:	1d3b      	adds	r3, r7, #4
 800adba:	1c0a      	adds	r2, r1, #0
 800adbc:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800adbe:	1dba      	adds	r2, r7, #6
 800adc0:	1d3b      	adds	r3, r7, #4
 800adc2:	8812      	ldrh	r2, [r2, #0]
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d806      	bhi.n	800add8 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800adca:	1dbb      	adds	r3, r7, #6
 800adcc:	881a      	ldrh	r2, [r3, #0]
 800adce:	68b9      	ldr	r1, [r7, #8]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	0018      	movs	r0, r3
 800add4:	f7ff ffb0 	bl	800ad38 <WriteUint8ArrayEeprom>
    }
}
 800add8:	46c0      	nop			@ (mov r8, r8)
 800adda:	46bd      	mov	sp, r7
 800addc:	b004      	add	sp, #16
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	1dbb      	adds	r3, r7, #6
 800adec:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800adee:	2316      	movs	r3, #22
 800adf0:	18fb      	adds	r3, r7, r3
 800adf2:	2200      	movs	r2, #0
 800adf4:	801a      	strh	r2, [r3, #0]
 800adf6:	e010      	b.n	800ae1a <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800adf8:	2016      	movs	r0, #22
 800adfa:	183b      	adds	r3, r7, r0
 800adfc:	881a      	ldrh	r2, [r3, #0]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	18d3      	adds	r3, r2, r3
 800ae02:	0019      	movs	r1, r3
 800ae04:	183b      	adds	r3, r7, r0
 800ae06:	881b      	ldrh	r3, [r3, #0]
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	18d3      	adds	r3, r2, r3
 800ae0c:	780a      	ldrb	r2, [r1, #0]
 800ae0e:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800ae10:	183b      	adds	r3, r7, r0
 800ae12:	881a      	ldrh	r2, [r3, #0]
 800ae14:	183b      	adds	r3, r7, r0
 800ae16:	3201      	adds	r2, #1
 800ae18:	801a      	strh	r2, [r3, #0]
 800ae1a:	2316      	movs	r3, #22
 800ae1c:	18fa      	adds	r2, r7, r3
 800ae1e:	1dbb      	adds	r3, r7, #6
 800ae20:	8812      	ldrh	r2, [r2, #0]
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d3e7      	bcc.n	800adf8 <ReadUint8ArrayEEprom+0x18>
    }
}
 800ae28:	46c0      	nop			@ (mov r8, r8)
 800ae2a:	46c0      	nop			@ (mov r8, r8)
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	b006      	add	sp, #24
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800ae32:	b590      	push	{r4, r7, lr}
 800ae34:	b085      	sub	sp, #20
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	000a      	movs	r2, r1
 800ae3c:	1cbb      	adds	r3, r7, #2
 800ae3e:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800ae40:	f009 f9aa 	bl	8014198 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800ae44:	230e      	movs	r3, #14
 800ae46:	18fb      	adds	r3, r7, r3
 800ae48:	2200      	movs	r2, #0
 800ae4a:	801a      	strh	r2, [r3, #0]
 800ae4c:	e00c      	b.n	800ae68 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800ae4e:	240e      	movs	r4, #14
 800ae50:	193b      	adds	r3, r7, r4
 800ae52:	881a      	ldrh	r2, [r3, #0]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	18d3      	adds	r3, r2, r3
 800ae58:	0018      	movs	r0, r3
 800ae5a:	f009 f9d9 	bl	8014210 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800ae5e:	193b      	adds	r3, r7, r4
 800ae60:	193a      	adds	r2, r7, r4
 800ae62:	8812      	ldrh	r2, [r2, #0]
 800ae64:	3204      	adds	r2, #4
 800ae66:	801a      	strh	r2, [r3, #0]
 800ae68:	230e      	movs	r3, #14
 800ae6a:	18fa      	adds	r2, r7, r3
 800ae6c:	1cbb      	adds	r3, r7, #2
 800ae6e:	8812      	ldrh	r2, [r2, #0]
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d3eb      	bcc.n	800ae4e <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800ae76:	f009 f9bd 	bl	80141f4 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800ae7a:	46c0      	nop			@ (mov r8, r8)
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	b005      	add	sp, #20
 800ae80:	bd90      	pop	{r4, r7, pc}
	...

0800ae84 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae94:	d901      	bls.n	800ae9a <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800ae96:	237f      	movs	r3, #127	@ 0x7f
 800ae98:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800ae9a:	2017      	movs	r0, #23
 800ae9c:	183b      	adds	r3, r7, r0
 800ae9e:	490d      	ldr	r1, [pc, #52]	@ (800aed4 <accessLUT10log10+0x50>)
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	188a      	adds	r2, r1, r2
 800aea4:	7812      	ldrb	r2, [r2, #0]
 800aea6:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800aea8:	0001      	movs	r1, r0
 800aeaa:	187b      	adds	r3, r7, r1
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	2206      	movs	r2, #6
 800aeb0:	4113      	asrs	r3, r2
 800aeb2:	001a      	movs	r2, r3
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800aeb8:	187b      	adds	r3, r7, r1
 800aeba:	781a      	ldrb	r2, [r3, #0]
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2106      	movs	r1, #6
 800aec2:	408b      	lsls	r3, r1
 800aec4:	1ad2      	subs	r2, r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	601a      	str	r2, [r3, #0]
}
 800aeca:	46c0      	nop			@ (mov r8, r8)
 800aecc:	46bd      	mov	sp, r7
 800aece:	b006      	add	sp, #24
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	46c0      	nop			@ (mov r8, r8)
 800aed4:	0802ca60 	.word	0x0802ca60

0800aed8 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800aed8:	b5b0      	push	{r4, r5, r7, lr}
 800aeda:	b090      	sub	sp, #64	@ 0x40
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6138      	str	r0, [r7, #16]
 800aee0:	6179      	str	r1, [r7, #20]
 800aee2:	60fa      	str	r2, [r7, #12]
 800aee4:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800aee6:	2308      	movs	r3, #8
 800aee8:	001a      	movs	r2, r3
 800aeea:	3a20      	subs	r2, #32
 800aeec:	2a00      	cmp	r2, #0
 800aeee:	db03      	blt.n	800aef8 <efficient10log10+0x20>
 800aef0:	2101      	movs	r1, #1
 800aef2:	4091      	lsls	r1, r2
 800aef4:	000d      	movs	r5, r1
 800aef6:	e008      	b.n	800af0a <efficient10log10+0x32>
 800aef8:	2220      	movs	r2, #32
 800aefa:	1ad2      	subs	r2, r2, r3
 800aefc:	2101      	movs	r1, #1
 800aefe:	40d1      	lsrs	r1, r2
 800af00:	000a      	movs	r2, r1
 800af02:	2100      	movs	r1, #0
 800af04:	4099      	lsls	r1, r3
 800af06:	000d      	movs	r5, r1
 800af08:	4315      	orrs	r5, r2
 800af0a:	2201      	movs	r2, #1
 800af0c:	409a      	lsls	r2, r3
 800af0e:	0014      	movs	r4, r2
 800af10:	2201      	movs	r2, #1
 800af12:	4252      	negs	r2, r2
 800af14:	17d3      	asrs	r3, r2, #31
 800af16:	1912      	adds	r2, r2, r4
 800af18:	416b      	adcs	r3, r5
 800af1a:	633a      	str	r2, [r7, #48]	@ 0x30
 800af1c:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800af1e:	2336      	movs	r3, #54	@ 0x36
 800af20:	2208      	movs	r2, #8
 800af22:	189b      	adds	r3, r3, r2
 800af24:	19db      	adds	r3, r3, r7
 800af26:	2200      	movs	r2, #0
 800af28:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800af2a:	e017      	b.n	800af5c <efficient10log10+0x84>
    {
        P = P >> 1;
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	07db      	lsls	r3, r3, #31
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	0852      	lsrs	r2, r2, #1
 800af34:	603a      	str	r2, [r7, #0]
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	431a      	orrs	r2, r3
 800af3a:	603a      	str	r2, [r7, #0]
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	085b      	lsrs	r3, r3, #1
 800af40:	607b      	str	r3, [r7, #4]
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	687c      	ldr	r4, [r7, #4]
 800af46:	613b      	str	r3, [r7, #16]
 800af48:	617c      	str	r4, [r7, #20]
        bShift++;
 800af4a:	2136      	movs	r1, #54	@ 0x36
 800af4c:	2008      	movs	r0, #8
 800af4e:	180b      	adds	r3, r1, r0
 800af50:	19db      	adds	r3, r3, r7
 800af52:	881a      	ldrh	r2, [r3, #0]
 800af54:	180b      	adds	r3, r1, r0
 800af56:	19db      	adds	r3, r3, r7
 800af58:	3201      	adds	r2, #1
 800af5a:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af60:	429a      	cmp	r2, r3
 800af62:	d8e3      	bhi.n	800af2c <efficient10log10+0x54>
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af68:	429a      	cmp	r2, r3
 800af6a:	d103      	bne.n	800af74 <efficient10log10+0x9c>
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af70:	429a      	cmp	r2, r3
 800af72:	d8db      	bhi.n	800af2c <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	2308      	movs	r3, #8
 800af78:	3b01      	subs	r3, #1
 800af7a:	2101      	movs	r1, #1
 800af7c:	4099      	lsls	r1, r3
 800af7e:	000b      	movs	r3, r1
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800af8c:	231c      	movs	r3, #28
 800af8e:	2408      	movs	r4, #8
 800af90:	191b      	adds	r3, r3, r4
 800af92:	19da      	adds	r2, r3, r7
 800af94:	2320      	movs	r3, #32
 800af96:	191b      	adds	r3, r3, r4
 800af98:	19d9      	adds	r1, r3, r7
 800af9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af9c:	0018      	movs	r0, r3
 800af9e:	f7ff ff71 	bl	800ae84 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800afa2:	2215      	movs	r2, #21
 800afa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa6:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800afa8:	2036      	movs	r0, #54	@ 0x36
 800afaa:	1902      	adds	r2, r0, r4
 800afac:	19d2      	adds	r2, r2, r7
 800afae:	8812      	ldrh	r2, [r2, #0]
 800afb0:	2103      	movs	r1, #3
 800afb2:	434a      	muls	r2, r1
 800afb4:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800afb6:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800afb8:	0021      	movs	r1, r4
 800afba:	1843      	adds	r3, r0, r1
 800afbc:	19db      	adds	r3, r3, r7
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	2201      	movs	r2, #1
 800afc2:	4353      	muls	r3, r2
 800afc4:	2203      	movs	r2, #3
 800afc6:	4113      	asrs	r3, r2
 800afc8:	001a      	movs	r2, r3
 800afca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afcc:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800afce:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800afd0:	2314      	movs	r3, #20
 800afd2:	185b      	adds	r3, r3, r1
 800afd4:	19da      	adds	r2, r3, r7
 800afd6:	2318      	movs	r3, #24
 800afd8:	185b      	adds	r3, r3, r1
 800afda:	19db      	adds	r3, r3, r7
 800afdc:	0011      	movs	r1, r2
 800afde:	0018      	movs	r0, r3
 800afe0:	f000 f80a 	bl	800aff8 <correctIntFracNumber>
    integerPart[0] = intPart;
 800afe4:	6a3a      	ldr	r2, [r7, #32]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800afea:	69fa      	ldr	r2, [r7, #28]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	601a      	str	r2, [r3, #0]
}
 800aff0:	46c0      	nop			@ (mov r8, r8)
 800aff2:	46bd      	mov	sp, r7
 800aff4:	b010      	add	sp, #64	@ 0x40
 800aff6:	bdb0      	pop	{r4, r5, r7, pc}

0800aff8 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800b002:	e00a      	b.n	800b01a <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	1c5a      	adds	r2, r3, #1
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	3b0a      	subs	r3, #10
 800b014:	001a      	movs	r2, r3
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b09      	cmp	r3, #9
 800b020:	dcf0      	bgt.n	800b004 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800b022:	e00a      	b.n	800b03a <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	1e5a      	subs	r2, r3, #1
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	330a      	adds	r3, #10
 800b034:	001a      	movs	r2, r3
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3309      	adds	r3, #9
 800b040:	dbf0      	blt.n	800b024 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	da0f      	bge.n	800b06a <correctIntFracNumber+0x72>
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	dd0b      	ble.n	800b06a <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	3b0a      	subs	r3, #10
 800b062:	001a      	movs	r2, r3
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800b068:	e012      	b.n	800b090 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	dd0e      	ble.n	800b090 <correctIntFracNumber+0x98>
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	da0a      	bge.n	800b090 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	1e5a      	subs	r2, r3, #1
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	330a      	adds	r3, #10
 800b08a:	001a      	movs	r2, r3
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	601a      	str	r2, [r3, #0]
}
 800b090:	46c0      	nop			@ (mov r8, r8)
 800b092:	46bd      	mov	sp, r7
 800b094:	b002      	add	sp, #8
 800b096:	bd80      	pop	{r7, pc}

0800b098 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800b098:	b590      	push	{r4, r7, lr}
 800b09a:	b08b      	sub	sp, #44	@ 0x2c
 800b09c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b09e:	2414      	movs	r4, #20
 800b0a0:	193b      	adds	r3, r7, r4
 800b0a2:	0018      	movs	r0, r3
 800b0a4:	2314      	movs	r3, #20
 800b0a6:	001a      	movs	r2, r3
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	f019 fd51 	bl	8024b50 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0ae:	4b8a      	ldr	r3, [pc, #552]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b0b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0b2:	4b89      	ldr	r3, [pc, #548]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b0b4:	2104      	movs	r1, #4
 800b0b6:	430a      	orrs	r2, r1
 800b0b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b0ba:	4b87      	ldr	r3, [pc, #540]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0be:	2204      	movs	r2, #4
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	613b      	str	r3, [r7, #16]
 800b0c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b0c6:	4b84      	ldr	r3, [pc, #528]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b0c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ca:	4b83      	ldr	r3, [pc, #524]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b0cc:	2180      	movs	r1, #128	@ 0x80
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b0d2:	4b81      	ldr	r3, [pc, #516]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d6:	2280      	movs	r2, #128	@ 0x80
 800b0d8:	4013      	ands	r3, r2
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0de:	4b7e      	ldr	r3, [pc, #504]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b0e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0e2:	4b7d      	ldr	r3, [pc, #500]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b0e4:	2101      	movs	r1, #1
 800b0e6:	430a      	orrs	r2, r1
 800b0e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b0ea:	4b7b      	ldr	r3, [pc, #492]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	60bb      	str	r3, [r7, #8]
 800b0f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b0f6:	4b78      	ldr	r3, [pc, #480]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0fa:	4b77      	ldr	r3, [pc, #476]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b0fc:	2102      	movs	r1, #2
 800b0fe:	430a      	orrs	r2, r1
 800b100:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b102:	4b75      	ldr	r3, [pc, #468]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b106:	2202      	movs	r2, #2
 800b108:	4013      	ands	r3, r2
 800b10a:	607b      	str	r3, [r7, #4]
 800b10c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b10e:	4b72      	ldr	r3, [pc, #456]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b112:	4b71      	ldr	r3, [pc, #452]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b114:	2108      	movs	r1, #8
 800b116:	430a      	orrs	r2, r1
 800b118:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b11a:	4b6f      	ldr	r3, [pc, #444]	@ (800b2d8 <MX_GPIO_Init+0x240>)
 800b11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b11e:	2208      	movs	r2, #8
 800b120:	4013      	ands	r3, r2
 800b122:	603b      	str	r3, [r7, #0]
 800b124:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800b126:	4b6d      	ldr	r3, [pc, #436]	@ (800b2dc <MX_GPIO_Init+0x244>)
 800b128:	2201      	movs	r2, #1
 800b12a:	2101      	movs	r1, #1
 800b12c:	0018      	movs	r0, r3
 800b12e:	f009 fa8e 	bl	801464e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800b132:	4b6a      	ldr	r3, [pc, #424]	@ (800b2dc <MX_GPIO_Init+0x244>)
 800b134:	2200      	movs	r2, #0
 800b136:	2102      	movs	r1, #2
 800b138:	0018      	movs	r0, r3
 800b13a:	f009 fa88 	bl	801464e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800b13e:	4968      	ldr	r1, [pc, #416]	@ (800b2e0 <MX_GPIO_Init+0x248>)
 800b140:	4b68      	ldr	r3, [pc, #416]	@ (800b2e4 <MX_GPIO_Init+0x24c>)
 800b142:	2201      	movs	r2, #1
 800b144:	0018      	movs	r0, r3
 800b146:	f009 fa82 	bl	801464e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800b14a:	2380      	movs	r3, #128	@ 0x80
 800b14c:	011b      	lsls	r3, r3, #4
 800b14e:	4866      	ldr	r0, [pc, #408]	@ (800b2e8 <MX_GPIO_Init+0x250>)
 800b150:	2201      	movs	r2, #1
 800b152:	0019      	movs	r1, r3
 800b154:	f009 fa7b 	bl	801464e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800b158:	2380      	movs	r3, #128	@ 0x80
 800b15a:	015b      	lsls	r3, r3, #5
 800b15c:	4862      	ldr	r0, [pc, #392]	@ (800b2e8 <MX_GPIO_Init+0x250>)
 800b15e:	2200      	movs	r2, #0
 800b160:	0019      	movs	r1, r3
 800b162:	f009 fa74 	bl	801464e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800b166:	193b      	adds	r3, r7, r4
 800b168:	4a60      	ldr	r2, [pc, #384]	@ (800b2ec <MX_GPIO_Init+0x254>)
 800b16a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b16c:	193b      	adds	r3, r7, r4
 800b16e:	2203      	movs	r2, #3
 800b170:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b172:	193b      	adds	r3, r7, r4
 800b174:	2200      	movs	r2, #0
 800b176:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b178:	193b      	adds	r3, r7, r4
 800b17a:	4a5b      	ldr	r2, [pc, #364]	@ (800b2e8 <MX_GPIO_Init+0x250>)
 800b17c:	0019      	movs	r1, r3
 800b17e:	0010      	movs	r0, r2
 800b180:	f009 f8ca 	bl	8014318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800b184:	193b      	adds	r3, r7, r4
 800b186:	2203      	movs	r2, #3
 800b188:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b18a:	193b      	adds	r3, r7, r4
 800b18c:	2201      	movs	r2, #1
 800b18e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b190:	193b      	adds	r3, r7, r4
 800b192:	2200      	movs	r2, #0
 800b194:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b196:	193b      	adds	r3, r7, r4
 800b198:	2200      	movs	r2, #0
 800b19a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b19c:	193b      	adds	r3, r7, r4
 800b19e:	4a4f      	ldr	r2, [pc, #316]	@ (800b2dc <MX_GPIO_Init+0x244>)
 800b1a0:	0019      	movs	r1, r3
 800b1a2:	0010      	movs	r0, r2
 800b1a4:	f009 f8b8 	bl	8014318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800b1a8:	193b      	adds	r3, r7, r4
 800b1aa:	2270      	movs	r2, #112	@ 0x70
 800b1ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b1ae:	193b      	adds	r3, r7, r4
 800b1b0:	2203      	movs	r2, #3
 800b1b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1b4:	193b      	adds	r3, r7, r4
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1ba:	193a      	adds	r2, r7, r4
 800b1bc:	23a0      	movs	r3, #160	@ 0xa0
 800b1be:	05db      	lsls	r3, r3, #23
 800b1c0:	0011      	movs	r1, r2
 800b1c2:	0018      	movs	r0, r3
 800b1c4:	f009 f8a8 	bl	8014318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800b1c8:	193b      	adds	r3, r7, r4
 800b1ca:	22c0      	movs	r2, #192	@ 0xc0
 800b1cc:	0052      	lsls	r2, r2, #1
 800b1ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b1d0:	193b      	adds	r3, r7, r4
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1d6:	193b      	adds	r3, r7, r4
 800b1d8:	2200      	movs	r2, #0
 800b1da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1dc:	193a      	adds	r2, r7, r4
 800b1de:	23a0      	movs	r3, #160	@ 0xa0
 800b1e0:	05db      	lsls	r3, r3, #23
 800b1e2:	0011      	movs	r1, r2
 800b1e4:	0018      	movs	r0, r3
 800b1e6:	f009 f897 	bl	8014318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800b1ea:	193b      	adds	r3, r7, r4
 800b1ec:	4a3c      	ldr	r2, [pc, #240]	@ (800b2e0 <MX_GPIO_Init+0x248>)
 800b1ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b1f0:	193b      	adds	r3, r7, r4
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1f6:	193b      	adds	r3, r7, r4
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1fc:	193b      	adds	r3, r7, r4
 800b1fe:	2200      	movs	r2, #0
 800b200:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b202:	193b      	adds	r3, r7, r4
 800b204:	4a37      	ldr	r2, [pc, #220]	@ (800b2e4 <MX_GPIO_Init+0x24c>)
 800b206:	0019      	movs	r1, r3
 800b208:	0010      	movs	r0, r2
 800b20a:	f009 f885 	bl	8014318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800b20e:	193b      	adds	r3, r7, r4
 800b210:	4a37      	ldr	r2, [pc, #220]	@ (800b2f0 <MX_GPIO_Init+0x258>)
 800b212:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b214:	193b      	adds	r3, r7, r4
 800b216:	2203      	movs	r2, #3
 800b218:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b21a:	193b      	adds	r3, r7, r4
 800b21c:	2200      	movs	r2, #0
 800b21e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b220:	193b      	adds	r3, r7, r4
 800b222:	4a30      	ldr	r2, [pc, #192]	@ (800b2e4 <MX_GPIO_Init+0x24c>)
 800b224:	0019      	movs	r1, r3
 800b226:	0010      	movs	r0, r2
 800b228:	f009 f876 	bl	8014318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800b22c:	0021      	movs	r1, r4
 800b22e:	187b      	adds	r3, r7, r1
 800b230:	2280      	movs	r2, #128	@ 0x80
 800b232:	0092      	lsls	r2, r2, #2
 800b234:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b236:	000c      	movs	r4, r1
 800b238:	193b      	adds	r3, r7, r4
 800b23a:	2200      	movs	r2, #0
 800b23c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b23e:	193b      	adds	r3, r7, r4
 800b240:	2200      	movs	r2, #0
 800b242:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800b244:	193b      	adds	r3, r7, r4
 800b246:	4a28      	ldr	r2, [pc, #160]	@ (800b2e8 <MX_GPIO_Init+0x250>)
 800b248:	0019      	movs	r1, r3
 800b24a:	0010      	movs	r0, r2
 800b24c:	f009 f864 	bl	8014318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800b250:	193b      	adds	r3, r7, r4
 800b252:	2280      	movs	r2, #128	@ 0x80
 800b254:	0212      	lsls	r2, r2, #8
 800b256:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b258:	193b      	adds	r3, r7, r4
 800b25a:	2288      	movs	r2, #136	@ 0x88
 800b25c:	0352      	lsls	r2, r2, #13
 800b25e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b260:	193b      	adds	r3, r7, r4
 800b262:	2200      	movs	r2, #0
 800b264:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800b266:	193a      	adds	r2, r7, r4
 800b268:	23a0      	movs	r3, #160	@ 0xa0
 800b26a:	05db      	lsls	r3, r3, #23
 800b26c:	0011      	movs	r1, r2
 800b26e:	0018      	movs	r0, r3
 800b270:	f009 f852 	bl	8014318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800b274:	0021      	movs	r1, r4
 800b276:	187b      	adds	r3, r7, r1
 800b278:	22c0      	movs	r2, #192	@ 0xc0
 800b27a:	0152      	lsls	r2, r2, #5
 800b27c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b27e:	000c      	movs	r4, r1
 800b280:	193b      	adds	r3, r7, r4
 800b282:	2201      	movs	r2, #1
 800b284:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b286:	193b      	adds	r3, r7, r4
 800b288:	2200      	movs	r2, #0
 800b28a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b28c:	193b      	adds	r3, r7, r4
 800b28e:	2200      	movs	r2, #0
 800b290:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b292:	193b      	adds	r3, r7, r4
 800b294:	4a14      	ldr	r2, [pc, #80]	@ (800b2e8 <MX_GPIO_Init+0x250>)
 800b296:	0019      	movs	r1, r3
 800b298:	0010      	movs	r0, r2
 800b29a:	f009 f83d 	bl	8014318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800b29e:	0021      	movs	r1, r4
 800b2a0:	187b      	adds	r3, r7, r1
 800b2a2:	2204      	movs	r2, #4
 800b2a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b2a6:	187b      	adds	r3, r7, r1
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b2ac:	187b      	adds	r3, r7, r1
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800b2b2:	187b      	adds	r3, r7, r1
 800b2b4:	4a0f      	ldr	r2, [pc, #60]	@ (800b2f4 <MX_GPIO_Init+0x25c>)
 800b2b6:	0019      	movs	r1, r3
 800b2b8:	0010      	movs	r0, r2
 800b2ba:	f009 f82d 	bl	8014318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	2007      	movs	r0, #7
 800b2c4:	f008 fbd6 	bl	8013a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800b2c8:	2007      	movs	r0, #7
 800b2ca:	f008 fbe8 	bl	8013a9e <HAL_NVIC_EnableIRQ>

}
 800b2ce:	46c0      	nop			@ (mov r8, r8)
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	b00b      	add	sp, #44	@ 0x2c
 800b2d4:	bd90      	pop	{r4, r7, pc}
 800b2d6:	46c0      	nop			@ (mov r8, r8)
 800b2d8:	40021000 	.word	0x40021000
 800b2dc:	50001c00 	.word	0x50001c00
 800b2e0:	00000301 	.word	0x00000301
 800b2e4:	50000400 	.word	0x50000400
 800b2e8:	50000800 	.word	0x50000800
 800b2ec:	0000200c 	.word	0x0000200c
 800b2f0:	0000403e 	.word	0x0000403e
 800b2f4:	50000c00 	.word	0x50000c00

0800b2f8 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2100      	movs	r1, #0
 800b306:	0018      	movs	r0, r3
 800b308:	f010 f814 	bl	801b334 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2108      	movs	r1, #8
 800b310:	0018      	movs	r0, r3
 800b312:	f010 f80f 	bl	801b334 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	210c      	movs	r1, #12
 800b31a:	0018      	movs	r0, r3
 800b31c:	f010 f80a 	bl	801b334 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800b320:	2380      	movs	r3, #128	@ 0x80
 800b322:	05db      	lsls	r3, r3, #23
 800b324:	22fa      	movs	r2, #250	@ 0xfa
 800b326:	0112      	lsls	r2, r2, #4
 800b328:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800b32a:	2380      	movs	r3, #128	@ 0x80
 800b32c:	05db      	lsls	r3, r3, #23
 800b32e:	22fa      	movs	r2, #250	@ 0xfa
 800b330:	0112      	lsls	r2, r2, #4
 800b332:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800b334:	2380      	movs	r3, #128	@ 0x80
 800b336:	05db      	lsls	r3, r3, #23
 800b338:	22fa      	movs	r2, #250	@ 0xfa
 800b33a:	0112      	lsls	r2, r2, #4
 800b33c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800b33e:	2380      	movs	r3, #128	@ 0x80
 800b340:	05db      	lsls	r3, r3, #23
 800b342:	22fa      	movs	r2, #250	@ 0xfa
 800b344:	0112      	lsls	r2, r2, #4
 800b346:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	2100      	movs	r1, #0
 800b34c:	0018      	movs	r0, r3
 800b34e:	f00f fff1 	bl	801b334 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2104      	movs	r1, #4
 800b356:	0018      	movs	r0, r3
 800b358:	f00f ffec 	bl	801b334 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	2108      	movs	r1, #8
 800b360:	0018      	movs	r0, r3
 800b362:	f00f ffe7 	bl	801b334 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800b366:	4b0a      	ldr	r3, [pc, #40]	@ (800b390 <GPIO_InitPWMLEDs+0x98>)
 800b368:	22fa      	movs	r2, #250	@ 0xfa
 800b36a:	0112      	lsls	r2, r2, #4
 800b36c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800b36e:	4b08      	ldr	r3, [pc, #32]	@ (800b390 <GPIO_InitPWMLEDs+0x98>)
 800b370:	22fa      	movs	r2, #250	@ 0xfa
 800b372:	0112      	lsls	r2, r2, #4
 800b374:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800b376:	4b06      	ldr	r3, [pc, #24]	@ (800b390 <GPIO_InitPWMLEDs+0x98>)
 800b378:	22fa      	movs	r2, #250	@ 0xfa
 800b37a:	0112      	lsls	r2, r2, #4
 800b37c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800b37e:	4b04      	ldr	r3, [pc, #16]	@ (800b390 <GPIO_InitPWMLEDs+0x98>)
 800b380:	22fa      	movs	r2, #250	@ 0xfa
 800b382:	0112      	lsls	r2, r2, #4
 800b384:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b386:	46c0      	nop			@ (mov r8, r8)
 800b388:	46bd      	mov	sp, r7
 800b38a:	b002      	add	sp, #8
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	46c0      	nop			@ (mov r8, r8)
 800b390:	40000400 	.word	0x40000400

0800b394 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b39a:	1d3b      	adds	r3, r7, #4
 800b39c:	0018      	movs	r0, r3
 800b39e:	2314      	movs	r3, #20
 800b3a0:	001a      	movs	r2, r3
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	f019 fbd4 	bl	8024b50 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800b3a8:	1d3b      	adds	r3, r7, #4
 800b3aa:	2205      	movs	r2, #5
 800b3ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b3ae:	1d3b      	adds	r3, r7, #4
 800b3b0:	2203      	movs	r2, #3
 800b3b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3b4:	1d3b      	adds	r3, r7, #4
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3ba:	1d3a      	adds	r2, r7, #4
 800b3bc:	23a0      	movs	r3, #160	@ 0xa0
 800b3be:	05db      	lsls	r3, r3, #23
 800b3c0:	0011      	movs	r1, r2
 800b3c2:	0018      	movs	r0, r3
 800b3c4:	f008 ffa8 	bl	8014318 <HAL_GPIO_Init>
}
 800b3c8:	46c0      	nop			@ (mov r8, r8)
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	b006      	add	sp, #24
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800b3d4:	4b1b      	ldr	r3, [pc, #108]	@ (800b444 <MX_I2C1_Init+0x74>)
 800b3d6:	4a1c      	ldr	r2, [pc, #112]	@ (800b448 <MX_I2C1_Init+0x78>)
 800b3d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800b3da:	4b1a      	ldr	r3, [pc, #104]	@ (800b444 <MX_I2C1_Init+0x74>)
 800b3dc:	4a1b      	ldr	r2, [pc, #108]	@ (800b44c <MX_I2C1_Init+0x7c>)
 800b3de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800b3e0:	4b18      	ldr	r3, [pc, #96]	@ (800b444 <MX_I2C1_Init+0x74>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b3e6:	4b17      	ldr	r3, [pc, #92]	@ (800b444 <MX_I2C1_Init+0x74>)
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b3ec:	4b15      	ldr	r3, [pc, #84]	@ (800b444 <MX_I2C1_Init+0x74>)
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800b3f2:	4b14      	ldr	r3, [pc, #80]	@ (800b444 <MX_I2C1_Init+0x74>)
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b3f8:	4b12      	ldr	r3, [pc, #72]	@ (800b444 <MX_I2C1_Init+0x74>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b3fe:	4b11      	ldr	r3, [pc, #68]	@ (800b444 <MX_I2C1_Init+0x74>)
 800b400:	2200      	movs	r2, #0
 800b402:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b404:	4b0f      	ldr	r3, [pc, #60]	@ (800b444 <MX_I2C1_Init+0x74>)
 800b406:	2200      	movs	r2, #0
 800b408:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b40a:	4b0e      	ldr	r3, [pc, #56]	@ (800b444 <MX_I2C1_Init+0x74>)
 800b40c:	0018      	movs	r0, r3
 800b40e:	f009 f957 	bl	80146c0 <HAL_I2C_Init>
 800b412:	1e03      	subs	r3, r0, #0
 800b414:	d001      	beq.n	800b41a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800b416:	f000 fd9d 	bl	800bf54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b41a:	4b0a      	ldr	r3, [pc, #40]	@ (800b444 <MX_I2C1_Init+0x74>)
 800b41c:	2100      	movs	r1, #0
 800b41e:	0018      	movs	r0, r3
 800b420:	f00b ffc0 	bl	80173a4 <HAL_I2CEx_ConfigAnalogFilter>
 800b424:	1e03      	subs	r3, r0, #0
 800b426:	d001      	beq.n	800b42c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800b428:	f000 fd94 	bl	800bf54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800b42c:	4b05      	ldr	r3, [pc, #20]	@ (800b444 <MX_I2C1_Init+0x74>)
 800b42e:	2100      	movs	r1, #0
 800b430:	0018      	movs	r0, r3
 800b432:	f00c f803 	bl	801743c <HAL_I2CEx_ConfigDigitalFilter>
 800b436:	1e03      	subs	r3, r0, #0
 800b438:	d001      	beq.n	800b43e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800b43a:	f000 fd8b 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800b43e:	46c0      	nop			@ (mov r8, r8)
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	20000c70 	.word	0x20000c70
 800b448:	40005400 	.word	0x40005400
 800b44c:	00503d58 	.word	0x00503d58

0800b450 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800b454:	4b1b      	ldr	r3, [pc, #108]	@ (800b4c4 <MX_I2C2_Init+0x74>)
 800b456:	4a1c      	ldr	r2, [pc, #112]	@ (800b4c8 <MX_I2C2_Init+0x78>)
 800b458:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800b45a:	4b1a      	ldr	r3, [pc, #104]	@ (800b4c4 <MX_I2C2_Init+0x74>)
 800b45c:	4a1b      	ldr	r2, [pc, #108]	@ (800b4cc <MX_I2C2_Init+0x7c>)
 800b45e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800b460:	4b18      	ldr	r3, [pc, #96]	@ (800b4c4 <MX_I2C2_Init+0x74>)
 800b462:	2200      	movs	r2, #0
 800b464:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b466:	4b17      	ldr	r3, [pc, #92]	@ (800b4c4 <MX_I2C2_Init+0x74>)
 800b468:	2201      	movs	r2, #1
 800b46a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b46c:	4b15      	ldr	r3, [pc, #84]	@ (800b4c4 <MX_I2C2_Init+0x74>)
 800b46e:	2200      	movs	r2, #0
 800b470:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800b472:	4b14      	ldr	r3, [pc, #80]	@ (800b4c4 <MX_I2C2_Init+0x74>)
 800b474:	2200      	movs	r2, #0
 800b476:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b478:	4b12      	ldr	r3, [pc, #72]	@ (800b4c4 <MX_I2C2_Init+0x74>)
 800b47a:	2200      	movs	r2, #0
 800b47c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b47e:	4b11      	ldr	r3, [pc, #68]	@ (800b4c4 <MX_I2C2_Init+0x74>)
 800b480:	2200      	movs	r2, #0
 800b482:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b484:	4b0f      	ldr	r3, [pc, #60]	@ (800b4c4 <MX_I2C2_Init+0x74>)
 800b486:	2200      	movs	r2, #0
 800b488:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b48a:	4b0e      	ldr	r3, [pc, #56]	@ (800b4c4 <MX_I2C2_Init+0x74>)
 800b48c:	0018      	movs	r0, r3
 800b48e:	f009 f917 	bl	80146c0 <HAL_I2C_Init>
 800b492:	1e03      	subs	r3, r0, #0
 800b494:	d001      	beq.n	800b49a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800b496:	f000 fd5d 	bl	800bf54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b49a:	4b0a      	ldr	r3, [pc, #40]	@ (800b4c4 <MX_I2C2_Init+0x74>)
 800b49c:	2100      	movs	r1, #0
 800b49e:	0018      	movs	r0, r3
 800b4a0:	f00b ff80 	bl	80173a4 <HAL_I2CEx_ConfigAnalogFilter>
 800b4a4:	1e03      	subs	r3, r0, #0
 800b4a6:	d001      	beq.n	800b4ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800b4a8:	f000 fd54 	bl	800bf54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800b4ac:	4b05      	ldr	r3, [pc, #20]	@ (800b4c4 <MX_I2C2_Init+0x74>)
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	0018      	movs	r0, r3
 800b4b2:	f00b ffc3 	bl	801743c <HAL_I2CEx_ConfigDigitalFilter>
 800b4b6:	1e03      	subs	r3, r0, #0
 800b4b8:	d001      	beq.n	800b4be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800b4ba:	f000 fd4b 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800b4be:	46c0      	nop			@ (mov r8, r8)
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	20000cc4 	.word	0x20000cc4
 800b4c8:	40005800 	.word	0x40005800
 800b4cc:	00503d58 	.word	0x00503d58

0800b4d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b4d0:	b590      	push	{r4, r7, lr}
 800b4d2:	b08b      	sub	sp, #44	@ 0x2c
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4d8:	2414      	movs	r4, #20
 800b4da:	193b      	adds	r3, r7, r4
 800b4dc:	0018      	movs	r0, r3
 800b4de:	2314      	movs	r3, #20
 800b4e0:	001a      	movs	r2, r3
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	f019 fb34 	bl	8024b50 <memset>
  if(i2cHandle->Instance==I2C1)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a5d      	ldr	r2, [pc, #372]	@ (800b664 <HAL_I2C_MspInit+0x194>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d000      	beq.n	800b4f4 <HAL_I2C_MspInit+0x24>
 800b4f2:	e083      	b.n	800b5fc <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b4f4:	4b5c      	ldr	r3, [pc, #368]	@ (800b668 <HAL_I2C_MspInit+0x198>)
 800b4f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f8:	4b5b      	ldr	r3, [pc, #364]	@ (800b668 <HAL_I2C_MspInit+0x198>)
 800b4fa:	2102      	movs	r1, #2
 800b4fc:	430a      	orrs	r2, r1
 800b4fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b500:	4b59      	ldr	r3, [pc, #356]	@ (800b668 <HAL_I2C_MspInit+0x198>)
 800b502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b504:	2202      	movs	r2, #2
 800b506:	4013      	ands	r3, r2
 800b508:	613b      	str	r3, [r7, #16]
 800b50a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b50c:	0021      	movs	r1, r4
 800b50e:	187b      	adds	r3, r7, r1
 800b510:	22c0      	movs	r2, #192	@ 0xc0
 800b512:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b514:	187b      	adds	r3, r7, r1
 800b516:	2212      	movs	r2, #18
 800b518:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b51a:	187b      	adds	r3, r7, r1
 800b51c:	2200      	movs	r2, #0
 800b51e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b520:	187b      	adds	r3, r7, r1
 800b522:	2203      	movs	r2, #3
 800b524:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800b526:	187b      	adds	r3, r7, r1
 800b528:	2201      	movs	r2, #1
 800b52a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b52c:	187b      	adds	r3, r7, r1
 800b52e:	4a4f      	ldr	r2, [pc, #316]	@ (800b66c <HAL_I2C_MspInit+0x19c>)
 800b530:	0019      	movs	r1, r3
 800b532:	0010      	movs	r0, r2
 800b534:	f008 fef0 	bl	8014318 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b538:	4b4b      	ldr	r3, [pc, #300]	@ (800b668 <HAL_I2C_MspInit+0x198>)
 800b53a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b53c:	4b4a      	ldr	r3, [pc, #296]	@ (800b668 <HAL_I2C_MspInit+0x198>)
 800b53e:	2180      	movs	r1, #128	@ 0x80
 800b540:	0389      	lsls	r1, r1, #14
 800b542:	430a      	orrs	r2, r1
 800b544:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800b546:	4b4a      	ldr	r3, [pc, #296]	@ (800b670 <HAL_I2C_MspInit+0x1a0>)
 800b548:	4a4a      	ldr	r2, [pc, #296]	@ (800b674 <HAL_I2C_MspInit+0x1a4>)
 800b54a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800b54c:	4b48      	ldr	r3, [pc, #288]	@ (800b670 <HAL_I2C_MspInit+0x1a0>)
 800b54e:	2206      	movs	r2, #6
 800b550:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b552:	4b47      	ldr	r3, [pc, #284]	@ (800b670 <HAL_I2C_MspInit+0x1a0>)
 800b554:	2200      	movs	r2, #0
 800b556:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b558:	4b45      	ldr	r3, [pc, #276]	@ (800b670 <HAL_I2C_MspInit+0x1a0>)
 800b55a:	2200      	movs	r2, #0
 800b55c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b55e:	4b44      	ldr	r3, [pc, #272]	@ (800b670 <HAL_I2C_MspInit+0x1a0>)
 800b560:	2280      	movs	r2, #128	@ 0x80
 800b562:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b564:	4b42      	ldr	r3, [pc, #264]	@ (800b670 <HAL_I2C_MspInit+0x1a0>)
 800b566:	2200      	movs	r2, #0
 800b568:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b56a:	4b41      	ldr	r3, [pc, #260]	@ (800b670 <HAL_I2C_MspInit+0x1a0>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800b570:	4b3f      	ldr	r3, [pc, #252]	@ (800b670 <HAL_I2C_MspInit+0x1a0>)
 800b572:	2200      	movs	r2, #0
 800b574:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b576:	4b3e      	ldr	r3, [pc, #248]	@ (800b670 <HAL_I2C_MspInit+0x1a0>)
 800b578:	2200      	movs	r2, #0
 800b57a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800b57c:	4b3c      	ldr	r3, [pc, #240]	@ (800b670 <HAL_I2C_MspInit+0x1a0>)
 800b57e:	0018      	movs	r0, r3
 800b580:	f008 faae 	bl	8013ae0 <HAL_DMA_Init>
 800b584:	1e03      	subs	r3, r0, #0
 800b586:	d001      	beq.n	800b58c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800b588:	f000 fce4 	bl	800bf54 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a38      	ldr	r2, [pc, #224]	@ (800b670 <HAL_I2C_MspInit+0x1a0>)
 800b590:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b592:	4b37      	ldr	r3, [pc, #220]	@ (800b670 <HAL_I2C_MspInit+0x1a0>)
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800b598:	4b37      	ldr	r3, [pc, #220]	@ (800b678 <HAL_I2C_MspInit+0x1a8>)
 800b59a:	4a38      	ldr	r2, [pc, #224]	@ (800b67c <HAL_I2C_MspInit+0x1ac>)
 800b59c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800b59e:	4b36      	ldr	r3, [pc, #216]	@ (800b678 <HAL_I2C_MspInit+0x1a8>)
 800b5a0:	2206      	movs	r2, #6
 800b5a2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b5a4:	4b34      	ldr	r3, [pc, #208]	@ (800b678 <HAL_I2C_MspInit+0x1a8>)
 800b5a6:	2210      	movs	r2, #16
 800b5a8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b5aa:	4b33      	ldr	r3, [pc, #204]	@ (800b678 <HAL_I2C_MspInit+0x1a8>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b5b0:	4b31      	ldr	r3, [pc, #196]	@ (800b678 <HAL_I2C_MspInit+0x1a8>)
 800b5b2:	2280      	movs	r2, #128	@ 0x80
 800b5b4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b5b6:	4b30      	ldr	r3, [pc, #192]	@ (800b678 <HAL_I2C_MspInit+0x1a8>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b5bc:	4b2e      	ldr	r3, [pc, #184]	@ (800b678 <HAL_I2C_MspInit+0x1a8>)
 800b5be:	2200      	movs	r2, #0
 800b5c0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800b5c2:	4b2d      	ldr	r3, [pc, #180]	@ (800b678 <HAL_I2C_MspInit+0x1a8>)
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b5c8:	4b2b      	ldr	r3, [pc, #172]	@ (800b678 <HAL_I2C_MspInit+0x1a8>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800b5ce:	4b2a      	ldr	r3, [pc, #168]	@ (800b678 <HAL_I2C_MspInit+0x1a8>)
 800b5d0:	0018      	movs	r0, r3
 800b5d2:	f008 fa85 	bl	8013ae0 <HAL_DMA_Init>
 800b5d6:	1e03      	subs	r3, r0, #0
 800b5d8:	d001      	beq.n	800b5de <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800b5da:	f000 fcbb 	bl	800bf54 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a25      	ldr	r2, [pc, #148]	@ (800b678 <HAL_I2C_MspInit+0x1a8>)
 800b5e2:	639a      	str	r2, [r3, #56]	@ 0x38
 800b5e4:	4b24      	ldr	r3, [pc, #144]	@ (800b678 <HAL_I2C_MspInit+0x1a8>)
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	2017      	movs	r0, #23
 800b5f0:	f008 fa40 	bl	8013a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800b5f4:	2017      	movs	r0, #23
 800b5f6:	f008 fa52 	bl	8013a9e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800b5fa:	e02e      	b.n	800b65a <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a1f      	ldr	r2, [pc, #124]	@ (800b680 <HAL_I2C_MspInit+0x1b0>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d129      	bne.n	800b65a <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b606:	4b18      	ldr	r3, [pc, #96]	@ (800b668 <HAL_I2C_MspInit+0x198>)
 800b608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b60a:	4b17      	ldr	r3, [pc, #92]	@ (800b668 <HAL_I2C_MspInit+0x198>)
 800b60c:	2102      	movs	r1, #2
 800b60e:	430a      	orrs	r2, r1
 800b610:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b612:	4b15      	ldr	r3, [pc, #84]	@ (800b668 <HAL_I2C_MspInit+0x198>)
 800b614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b616:	2202      	movs	r2, #2
 800b618:	4013      	ands	r3, r2
 800b61a:	60fb      	str	r3, [r7, #12]
 800b61c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b61e:	2114      	movs	r1, #20
 800b620:	187b      	adds	r3, r7, r1
 800b622:	22c0      	movs	r2, #192	@ 0xc0
 800b624:	0112      	lsls	r2, r2, #4
 800b626:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b628:	187b      	adds	r3, r7, r1
 800b62a:	2212      	movs	r2, #18
 800b62c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b62e:	187b      	adds	r3, r7, r1
 800b630:	2200      	movs	r2, #0
 800b632:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b634:	187b      	adds	r3, r7, r1
 800b636:	2203      	movs	r2, #3
 800b638:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800b63a:	187b      	adds	r3, r7, r1
 800b63c:	2206      	movs	r2, #6
 800b63e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b640:	187b      	adds	r3, r7, r1
 800b642:	4a0a      	ldr	r2, [pc, #40]	@ (800b66c <HAL_I2C_MspInit+0x19c>)
 800b644:	0019      	movs	r1, r3
 800b646:	0010      	movs	r0, r2
 800b648:	f008 fe66 	bl	8014318 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b64c:	4b06      	ldr	r3, [pc, #24]	@ (800b668 <HAL_I2C_MspInit+0x198>)
 800b64e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b650:	4b05      	ldr	r3, [pc, #20]	@ (800b668 <HAL_I2C_MspInit+0x198>)
 800b652:	2180      	movs	r1, #128	@ 0x80
 800b654:	03c9      	lsls	r1, r1, #15
 800b656:	430a      	orrs	r2, r1
 800b658:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800b65a:	46c0      	nop			@ (mov r8, r8)
 800b65c:	46bd      	mov	sp, r7
 800b65e:	b00b      	add	sp, #44	@ 0x2c
 800b660:	bd90      	pop	{r4, r7, pc}
 800b662:	46c0      	nop			@ (mov r8, r8)
 800b664:	40005400 	.word	0x40005400
 800b668:	40021000 	.word	0x40021000
 800b66c:	50000400 	.word	0x50000400
 800b670:	20000d18 	.word	0x20000d18
 800b674:	40020030 	.word	0x40020030
 800b678:	20000d60 	.word	0x20000d60
 800b67c:	4002001c 	.word	0x4002001c
 800b680:	40005800 	.word	0x40005800

0800b684 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800b688:	4b10      	ldr	r3, [pc, #64]	@ (800b6cc <MX_I2S2_Init+0x48>)
 800b68a:	4a11      	ldr	r2, [pc, #68]	@ (800b6d0 <MX_I2S2_Init+0x4c>)
 800b68c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800b68e:	4b0f      	ldr	r3, [pc, #60]	@ (800b6cc <MX_I2S2_Init+0x48>)
 800b690:	22c0      	movs	r2, #192	@ 0xc0
 800b692:	0092      	lsls	r2, r2, #2
 800b694:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800b696:	4b0d      	ldr	r3, [pc, #52]	@ (800b6cc <MX_I2S2_Init+0x48>)
 800b698:	2200      	movs	r2, #0
 800b69a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800b69c:	4b0b      	ldr	r3, [pc, #44]	@ (800b6cc <MX_I2S2_Init+0x48>)
 800b69e:	2203      	movs	r2, #3
 800b6a0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800b6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b6cc <MX_I2S2_Init+0x48>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800b6a8:	4b08      	ldr	r3, [pc, #32]	@ (800b6cc <MX_I2S2_Init+0x48>)
 800b6aa:	22fa      	movs	r2, #250	@ 0xfa
 800b6ac:	0192      	lsls	r2, r2, #6
 800b6ae:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800b6b0:	4b06      	ldr	r3, [pc, #24]	@ (800b6cc <MX_I2S2_Init+0x48>)
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800b6b6:	4b05      	ldr	r3, [pc, #20]	@ (800b6cc <MX_I2S2_Init+0x48>)
 800b6b8:	0018      	movs	r0, r3
 800b6ba:	f00b ff0b 	bl	80174d4 <HAL_I2S_Init>
 800b6be:	1e03      	subs	r3, r0, #0
 800b6c0:	d001      	beq.n	800b6c6 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800b6c2:	f000 fc47 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800b6c6:	46c0      	nop			@ (mov r8, r8)
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	20000da8 	.word	0x20000da8
 800b6d0:	40003800 	.word	0x40003800

0800b6d4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800b6d4:	b590      	push	{r4, r7, lr}
 800b6d6:	b089      	sub	sp, #36	@ 0x24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6dc:	240c      	movs	r4, #12
 800b6de:	193b      	adds	r3, r7, r4
 800b6e0:	0018      	movs	r0, r3
 800b6e2:	2314      	movs	r3, #20
 800b6e4:	001a      	movs	r2, r3
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	f019 fa32 	bl	8024b50 <memset>
  if(i2sHandle->Instance==SPI2)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a2d      	ldr	r2, [pc, #180]	@ (800b7a8 <HAL_I2S_MspInit+0xd4>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d154      	bne.n	800b7a0 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b6f6:	4b2d      	ldr	r3, [pc, #180]	@ (800b7ac <HAL_I2S_MspInit+0xd8>)
 800b6f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6fa:	4b2c      	ldr	r3, [pc, #176]	@ (800b7ac <HAL_I2S_MspInit+0xd8>)
 800b6fc:	2180      	movs	r1, #128	@ 0x80
 800b6fe:	01c9      	lsls	r1, r1, #7
 800b700:	430a      	orrs	r2, r1
 800b702:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b704:	4b29      	ldr	r3, [pc, #164]	@ (800b7ac <HAL_I2S_MspInit+0xd8>)
 800b706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b708:	4b28      	ldr	r3, [pc, #160]	@ (800b7ac <HAL_I2S_MspInit+0xd8>)
 800b70a:	2102      	movs	r1, #2
 800b70c:	430a      	orrs	r2, r1
 800b70e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b710:	4b26      	ldr	r3, [pc, #152]	@ (800b7ac <HAL_I2S_MspInit+0xd8>)
 800b712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b714:	2202      	movs	r2, #2
 800b716:	4013      	ands	r3, r2
 800b718:	60bb      	str	r3, [r7, #8]
 800b71a:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800b71c:	193b      	adds	r3, r7, r4
 800b71e:	22b0      	movs	r2, #176	@ 0xb0
 800b720:	0212      	lsls	r2, r2, #8
 800b722:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b724:	0021      	movs	r1, r4
 800b726:	187b      	adds	r3, r7, r1
 800b728:	2202      	movs	r2, #2
 800b72a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b72c:	187b      	adds	r3, r7, r1
 800b72e:	2200      	movs	r2, #0
 800b730:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b732:	187b      	adds	r3, r7, r1
 800b734:	2200      	movs	r2, #0
 800b736:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800b738:	187b      	adds	r3, r7, r1
 800b73a:	2200      	movs	r2, #0
 800b73c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b73e:	187b      	adds	r3, r7, r1
 800b740:	4a1b      	ldr	r2, [pc, #108]	@ (800b7b0 <HAL_I2S_MspInit+0xdc>)
 800b742:	0019      	movs	r1, r3
 800b744:	0010      	movs	r0, r2
 800b746:	f008 fde7 	bl	8014318 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800b74a:	4b1a      	ldr	r3, [pc, #104]	@ (800b7b4 <HAL_I2S_MspInit+0xe0>)
 800b74c:	4a1a      	ldr	r2, [pc, #104]	@ (800b7b8 <HAL_I2S_MspInit+0xe4>)
 800b74e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800b750:	4b18      	ldr	r3, [pc, #96]	@ (800b7b4 <HAL_I2S_MspInit+0xe0>)
 800b752:	2202      	movs	r2, #2
 800b754:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b756:	4b17      	ldr	r3, [pc, #92]	@ (800b7b4 <HAL_I2S_MspInit+0xe0>)
 800b758:	2200      	movs	r2, #0
 800b75a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b75c:	4b15      	ldr	r3, [pc, #84]	@ (800b7b4 <HAL_I2S_MspInit+0xe0>)
 800b75e:	2200      	movs	r2, #0
 800b760:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b762:	4b14      	ldr	r3, [pc, #80]	@ (800b7b4 <HAL_I2S_MspInit+0xe0>)
 800b764:	2280      	movs	r2, #128	@ 0x80
 800b766:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b768:	4b12      	ldr	r3, [pc, #72]	@ (800b7b4 <HAL_I2S_MspInit+0xe0>)
 800b76a:	2280      	movs	r2, #128	@ 0x80
 800b76c:	0052      	lsls	r2, r2, #1
 800b76e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b770:	4b10      	ldr	r3, [pc, #64]	@ (800b7b4 <HAL_I2S_MspInit+0xe0>)
 800b772:	2280      	movs	r2, #128	@ 0x80
 800b774:	00d2      	lsls	r2, r2, #3
 800b776:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800b778:	4b0e      	ldr	r3, [pc, #56]	@ (800b7b4 <HAL_I2S_MspInit+0xe0>)
 800b77a:	2220      	movs	r2, #32
 800b77c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b77e:	4b0d      	ldr	r3, [pc, #52]	@ (800b7b4 <HAL_I2S_MspInit+0xe0>)
 800b780:	2200      	movs	r2, #0
 800b782:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800b784:	4b0b      	ldr	r3, [pc, #44]	@ (800b7b4 <HAL_I2S_MspInit+0xe0>)
 800b786:	0018      	movs	r0, r3
 800b788:	f008 f9aa 	bl	8013ae0 <HAL_DMA_Init>
 800b78c:	1e03      	subs	r3, r0, #0
 800b78e:	d001      	beq.n	800b794 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800b790:	f000 fbe0 	bl	800bf54 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a07      	ldr	r2, [pc, #28]	@ (800b7b4 <HAL_I2S_MspInit+0xe0>)
 800b798:	631a      	str	r2, [r3, #48]	@ 0x30
 800b79a:	4b06      	ldr	r3, [pc, #24]	@ (800b7b4 <HAL_I2S_MspInit+0xe0>)
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800b7a0:	46c0      	nop			@ (mov r8, r8)
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	b009      	add	sp, #36	@ 0x24
 800b7a6:	bd90      	pop	{r4, r7, pc}
 800b7a8:	40003800 	.word	0x40003800
 800b7ac:	40021000 	.word	0x40021000
 800b7b0:	50000400 	.word	0x50000400
 800b7b4:	20000de4 	.word	0x20000de4
 800b7b8:	40020044 	.word	0x40020044

0800b7bc <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	af00      	add	r7, sp, #0
  testDone = true;
 800b7c0:	4b14      	ldr	r3, [pc, #80]	@ (800b814 <SetTestDone+0x58>)
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800b7c6:	23fa      	movs	r3, #250	@ 0xfa
 800b7c8:	005b      	lsls	r3, r3, #1
 800b7ca:	0018      	movs	r0, r3
 800b7cc:	f007 fcb8 	bl	8013140 <HAL_Delay>
  SetDBLED(false, false, true);
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	f005 fce3 	bl	80111a0 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800b7da:	4a0f      	ldr	r2, [pc, #60]	@ (800b818 <SetTestDone+0x5c>)
 800b7dc:	23fa      	movs	r3, #250	@ 0xfa
 800b7de:	0119      	lsls	r1, r3, #4
 800b7e0:	23fa      	movs	r3, #250	@ 0xfa
 800b7e2:	011b      	lsls	r3, r3, #4
 800b7e4:	0018      	movs	r0, r3
 800b7e6:	f005 fca7 	bl	8011138 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800b7ea:	4a0b      	ldr	r2, [pc, #44]	@ (800b818 <SetTestDone+0x5c>)
 800b7ec:	23fa      	movs	r3, #250	@ 0xfa
 800b7ee:	0119      	lsls	r1, r3, #4
 800b7f0:	23fa      	movs	r3, #250	@ 0xfa
 800b7f2:	011b      	lsls	r3, r3, #4
 800b7f4:	0018      	movs	r0, r3
 800b7f6:	f005 fd1d 	bl	8011234 <SetVocLED>
  HAL_Delay(500);
 800b7fa:	23fa      	movs	r3, #250	@ 0xfa
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	0018      	movs	r0, r3
 800b800:	f007 fc9e 	bl	8013140 <HAL_Delay>
  SetLEDsOff();
 800b804:	f005 fe56 	bl	80114b4 <SetLEDsOff>
  InitDone();
 800b808:	f005 fbea 	bl	8010fe0 <InitDone>
}
 800b80c:	46c0      	nop			@ (mov r8, r8)
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	46c0      	nop			@ (mov r8, r8)
 800b814:	20000e2c 	.word	0x20000e2c
 800b818:	00000bb8 	.word	0x00000bb8

0800b81c <FlashLEDs>:

void FlashLEDs(){
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 800b822:	1dfb      	adds	r3, r7, #7
 800b824:	2200      	movs	r2, #0
 800b826:	701a      	strb	r2, [r3, #0]
 800b828:	e021      	b.n	800b86e <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 800b82a:	2201      	movs	r2, #1
 800b82c:	2101      	movs	r1, #1
 800b82e:	2001      	movs	r0, #1
 800b830:	f005 fcb6 	bl	80111a0 <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800b834:	4a12      	ldr	r2, [pc, #72]	@ (800b880 <FlashLEDs+0x64>)
 800b836:	23fa      	movs	r3, #250	@ 0xfa
 800b838:	0119      	lsls	r1, r3, #4
 800b83a:	23fa      	movs	r3, #250	@ 0xfa
 800b83c:	011b      	lsls	r3, r3, #4
 800b83e:	0018      	movs	r0, r3
 800b840:	f005 fc7a 	bl	8011138 <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800b844:	4a0e      	ldr	r2, [pc, #56]	@ (800b880 <FlashLEDs+0x64>)
 800b846:	23fa      	movs	r3, #250	@ 0xfa
 800b848:	0119      	lsls	r1, r3, #4
 800b84a:	23fa      	movs	r3, #250	@ 0xfa
 800b84c:	011b      	lsls	r3, r3, #4
 800b84e:	0018      	movs	r0, r3
 800b850:	f005 fcf0 	bl	8011234 <SetVocLED>
    HAL_Delay(250);
 800b854:	20fa      	movs	r0, #250	@ 0xfa
 800b856:	f007 fc73 	bl	8013140 <HAL_Delay>
    SetLEDsOff();
 800b85a:	f005 fe2b 	bl	80114b4 <SetLEDsOff>
    HAL_Delay(250);
 800b85e:	20fa      	movs	r0, #250	@ 0xfa
 800b860:	f007 fc6e 	bl	8013140 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 800b864:	1dfb      	adds	r3, r7, #7
 800b866:	781a      	ldrb	r2, [r3, #0]
 800b868:	1dfb      	adds	r3, r7, #7
 800b86a:	3201      	adds	r2, #1
 800b86c:	701a      	strb	r2, [r3, #0]
 800b86e:	1dfb      	adds	r3, r7, #7
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	2b04      	cmp	r3, #4
 800b874:	d9d9      	bls.n	800b82a <FlashLEDs+0xe>
  }
}
 800b876:	46c0      	nop			@ (mov r8, r8)
 800b878:	46c0      	nop			@ (mov r8, r8)
 800b87a:	46bd      	mov	sp, r7
 800b87c:	b002      	add	sp, #8
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	00000bb8 	.word	0x00000bb8

0800b884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b88a:	f007 fbe9 	bl	8013060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b88e:	f000 fa11 	bl	800bcb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b892:	f7ff fc01 	bl	800b098 <MX_GPIO_Init>
  MX_DMA_Init();
 800b896:	f7ff fa29 	bl	800acec <MX_DMA_Init>
  MX_I2C1_Init();
 800b89a:	f7ff fd99 	bl	800b3d0 <MX_I2C1_Init>
  MX_I2S2_Init();
 800b89e:	f7ff fef1 	bl	800b684 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800b8a2:	f006 fd1f 	bl	80122e4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800b8a6:	f7ff fdd3 	bl	800b450 <MX_I2C2_Init>
  MX_TIM2_Init();
 800b8aa:	f006 fb13 	bl	8011ed4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800b8ae:	f006 fb85 	bl	8011fbc <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800b8b2:	f006 fd47 	bl	8012344 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800b8b6:	f7fd ff3b 	bl	8009730 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800b8ba:	f015 fe35 	bl	8021528 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800b8be:	f001 fb19 	bl	800cef4 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800b8c2:	f006 fcd9 	bl	8012278 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800b8c6:	f006 fbf7 	bl	80120b8 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800b8ca:	4ad1      	ldr	r2, [pc, #836]	@ (800bc10 <main+0x38c>)
 800b8cc:	4bd1      	ldr	r3, [pc, #836]	@ (800bc14 <main+0x390>)
 800b8ce:	0011      	movs	r1, r2
 800b8d0:	0018      	movs	r0, r3
 800b8d2:	f7ff fd11 	bl	800b2f8 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 800b8d6:	f006 ff77 	bl	80127c8 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 800b8da:	f006 f983 	bl	8011be4 <Battery_Upkeep>
 800b8de:	0003      	movs	r3, r0
 800b8e0:	001a      	movs	r2, r3
 800b8e2:	4bcd      	ldr	r3, [pc, #820]	@ (800bc18 <main+0x394>)
 800b8e4:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800b8e6:	4bcc      	ldr	r3, [pc, #816]	@ (800bc18 <main+0x394>)
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d113      	bne.n	800b916 <main+0x92>
    SetAllREDLED();
 800b8ee:	f005 fdfd 	bl	80114ec <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 800b8f2:	f7fd f823 	bl	800893c <ReadBatteryVoltage>
 800b8f6:	1c03      	adds	r3, r0, #0
 800b8f8:	1c18      	adds	r0, r3, #0
 800b8fa:	f7f7 fdb3 	bl	8003464 <__aeabi_f2d>
 800b8fe:	0002      	movs	r2, r0
 800b900:	000b      	movs	r3, r1
 800b902:	48c6      	ldr	r0, [pc, #792]	@ (800bc1c <main+0x398>)
 800b904:	49c6      	ldr	r1, [pc, #792]	@ (800bc20 <main+0x39c>)
 800b906:	9200      	str	r2, [sp, #0]
 800b908:	9301      	str	r3, [sp, #4]
 800b90a:	0002      	movs	r2, r0
 800b90c:	2002      	movs	r0, #2
 800b90e:	f006 fed7 	bl	80126c0 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800b912:	f7fd fc39 	bl	8009188 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800b916:	f7fd f8e7 	bl	8008ae8 <UserButton_Pressed>
 800b91a:	1e03      	subs	r3, r0, #0
 800b91c:	d004      	beq.n	800b928 <main+0xa4>
    EnableESPProg();
 800b91e:	f015 fed3 	bl	80216c8 <EnableESPProg>
    ESP_Programming = true;
 800b922:	4bc0      	ldr	r3, [pc, #768]	@ (800bc24 <main+0x3a0>)
 800b924:	2201      	movs	r2, #1
 800b926:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 800b928:	2003      	movs	r0, #3
 800b92a:	f006 ff33 	bl	8012794 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800b92e:	49be      	ldr	r1, [pc, #760]	@ (800bc28 <main+0x3a4>)
 800b930:	4bbe      	ldr	r3, [pc, #760]	@ (800bc2c <main+0x3a8>)
 800b932:	2201      	movs	r2, #1
 800b934:	0018      	movs	r0, r3
 800b936:	f010 f95d 	bl	801bbf4 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800b93a:	4bbd      	ldr	r3, [pc, #756]	@ (800bc30 <main+0x3ac>)
 800b93c:	0018      	movs	r0, r3
 800b93e:	f7fd fcfd 	bl	800933c <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800b942:	4abc      	ldr	r2, [pc, #752]	@ (800bc34 <main+0x3b0>)
 800b944:	49bc      	ldr	r1, [pc, #752]	@ (800bc38 <main+0x3b4>)
 800b946:	48bd      	ldr	r0, [pc, #756]	@ (800bc3c <main+0x3b8>)
 800b948:	230b      	movs	r3, #11
 800b94a:	f004 fcbf 	bl	80102cc <soundInit>
 800b94e:	0003      	movs	r3, r0
 800b950:	001a      	movs	r2, r3
 800b952:	2301      	movs	r3, #1
 800b954:	4053      	eors	r3, r2
 800b956:	b2db      	uxtb	r3, r3
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d005      	beq.n	800b968 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 800b95c:	4ab8      	ldr	r2, [pc, #736]	@ (800bc40 <main+0x3bc>)
 800b95e:	4bb9      	ldr	r3, [pc, #740]	@ (800bc44 <main+0x3c0>)
 800b960:	21f9      	movs	r1, #249	@ 0xf9
 800b962:	0018      	movs	r0, r3
 800b964:	f006 ff64 	bl	8012830 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800b968:	4bb7      	ldr	r3, [pc, #732]	@ (800bc48 <main+0x3c4>)
 800b96a:	4ab8      	ldr	r2, [pc, #736]	@ (800bc4c <main+0x3c8>)
 800b96c:	49b2      	ldr	r1, [pc, #712]	@ (800bc38 <main+0x3b4>)
 800b96e:	48b8      	ldr	r0, [pc, #736]	@ (800bc50 <main+0x3cc>)
 800b970:	f000 fbe2 	bl	800c138 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800b974:	f007 fbda 	bl	801312c <HAL_GetTick>
 800b978:	0003      	movs	r3, r0
 800b97a:	4ab6      	ldr	r2, [pc, #728]	@ (800bc54 <main+0x3d0>)
 800b97c:	189a      	adds	r2, r3, r2
 800b97e:	4bb6      	ldr	r3, [pc, #728]	@ (800bc58 <main+0x3d4>)
 800b980:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800b982:	f7fd f891 	bl	8008aa8 <Check_USB_PowerOn>
 800b986:	0003      	movs	r3, r0
 800b988:	1e5a      	subs	r2, r3, #1
 800b98a:	4193      	sbcs	r3, r2
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2201      	movs	r2, #1
 800b990:	4053      	eors	r3, r2
 800b992:	b2db      	uxtb	r3, r3
 800b994:	1c1a      	adds	r2, r3, #0
 800b996:	2301      	movs	r3, #1
 800b998:	4013      	ands	r3, r2
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	4baf      	ldr	r3, [pc, #700]	@ (800bc5c <main+0x3d8>)
 800b99e:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800b9a0:	f7fd f882 	bl	8008aa8 <Check_USB_PowerOn>
 800b9a4:	1e03      	subs	r3, r0, #0
 800b9a6:	d003      	beq.n	800b9b0 <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800b9a8:	4bad      	ldr	r3, [pc, #692]	@ (800bc60 <main+0x3dc>)
 800b9aa:	0018      	movs	r0, r3
 800b9ac:	f7fc fa7e 	bl	8007eac <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800b9b0:	4bac      	ldr	r3, [pc, #688]	@ (800bc64 <main+0x3e0>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	0018      	movs	r0, r3
 800b9b6:	f006 fe2d 	bl	8012614 <TimestampIsReached>
 800b9ba:	1e03      	subs	r3, r0, #0
 800b9bc:	d00e      	beq.n	800b9dc <main+0x158>
      charge = Battery_Upkeep();
 800b9be:	f006 f911 	bl	8011be4 <Battery_Upkeep>
 800b9c2:	0003      	movs	r3, r0
 800b9c4:	001a      	movs	r2, r3
 800b9c6:	4b94      	ldr	r3, [pc, #592]	@ (800bc18 <main+0x394>)
 800b9c8:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800b9ca:	f007 fbaf 	bl	801312c <HAL_GetTick>
 800b9ce:	0003      	movs	r3, r0
 800b9d0:	4aa5      	ldr	r2, [pc, #660]	@ (800bc68 <main+0x3e4>)
 800b9d2:	189a      	adds	r2, r3, r2
 800b9d4:	4ba3      	ldr	r3, [pc, #652]	@ (800bc64 <main+0x3e0>)
 800b9d6:	601a      	str	r2, [r3, #0]
      showTime();
 800b9d8:	f7fd f896 	bl	8008b08 <showTime>

    }
    configCheck();
 800b9dc:	f005 ff5e 	bl	801189c <configCheck>
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800b9e0:	4ba2      	ldr	r3, [pc, #648]	@ (800bc6c <main+0x3e8>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	701a      	strb	r2, [r3, #0]
    if (charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800b9e6:	4b8c      	ldr	r3, [pc, #560]	@ (800bc18 <main+0x394>)
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d003      	beq.n	800b9f6 <main+0x172>
 800b9ee:	4b8a      	ldr	r3, [pc, #552]	@ (800bc18 <main+0x394>)
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d104      	bne.n	800ba00 <main+0x17c>
      FlashLEDs();
 800b9f6:	f7ff ff11 	bl	800b81c <FlashLEDs>
      Sensor.PM_measurementEnabled = false;
 800b9fa:	4b9d      	ldr	r3, [pc, #628]	@ (800bc70 <main+0x3ec>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	709a      	strb	r2, [r3, #2]
    }
    if (charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800ba00:	4b85      	ldr	r3, [pc, #532]	@ (800bc18 <main+0x394>)
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d109      	bne.n	800ba1c <main+0x198>
 800ba08:	4b9a      	ldr	r3, [pc, #616]	@ (800bc74 <main+0x3f0>)
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b09      	cmp	r3, #9
 800ba0e:	d105      	bne.n	800ba1c <main+0x198>
       batteryEmpty = true;
 800ba10:	4b99      	ldr	r3, [pc, #612]	@ (800bc78 <main+0x3f4>)
 800ba12:	2201      	movs	r2, #1
 800ba14:	701a      	strb	r2, [r3, #0]
       Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 800ba16:	f7fd fbb7 	bl	8009188 <Enter_Standby_Mode>
 800ba1a:	e002      	b.n	800ba22 <main+0x19e>
    }
    else{
      batteryEmpty = false;
 800ba1c:	4b96      	ldr	r3, [pc, #600]	@ (800bc78 <main+0x3f4>)
 800ba1e:	2200      	movs	r2, #0
 800ba20:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800ba22:	4b96      	ldr	r3, [pc, #600]	@ (800bc7c <main+0x3f8>)
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d100      	bne.n	800ba2c <main+0x1a8>
 800ba2a:	e09c      	b.n	800bb66 <main+0x2e2>
 800ba2c:	4b7d      	ldr	r3, [pc, #500]	@ (800bc24 <main+0x3a0>)
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	2201      	movs	r2, #1
 800ba32:	4053      	eors	r3, r2
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d100      	bne.n	800ba3c <main+0x1b8>
 800ba3a:	e094      	b.n	800bb66 <main+0x2e2>
 800ba3c:	4b8e      	ldr	r3, [pc, #568]	@ (800bc78 <main+0x3f4>)
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2201      	movs	r2, #1
 800ba42:	4053      	eors	r3, r2
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d100      	bne.n	800ba4c <main+0x1c8>
 800ba4a:	e08c      	b.n	800bb66 <main+0x2e2>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800ba4c:	4b83      	ldr	r3, [pc, #524]	@ (800bc5c <main+0x3d8>)
 800ba4e:	781a      	ldrb	r2, [r3, #0]
 800ba50:	4b8b      	ldr	r3, [pc, #556]	@ (800bc80 <main+0x3fc>)
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d034      	beq.n	800bac2 <main+0x23e>
        if (IsSGPPresent() && !usbPluggedIn) {
 800ba58:	f000 fb00 	bl	800c05c <IsSGPPresent>
 800ba5c:	1e03      	subs	r3, r0, #0
 800ba5e:	d009      	beq.n	800ba74 <main+0x1f0>
 800ba60:	4b87      	ldr	r3, [pc, #540]	@ (800bc80 <main+0x3fc>)
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	2201      	movs	r2, #1
 800ba66:	4053      	eors	r3, r2
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d002      	beq.n	800ba74 <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 800ba6e:	2001      	movs	r0, #1
 800ba70:	f000 fafe 	bl	800c070 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800ba74:	4b83      	ldr	r3, [pc, #524]	@ (800bc84 <main+0x400>)
 800ba76:	791b      	ldrb	r3, [r3, #4]
 800ba78:	2b34      	cmp	r3, #52	@ 0x34
 800ba7a:	d003      	beq.n	800ba84 <main+0x200>
 800ba7c:	4b81      	ldr	r3, [pc, #516]	@ (800bc84 <main+0x400>)
 800ba7e:	791b      	ldrb	r3, [r3, #4]
 800ba80:	2b35      	cmp	r3, #53	@ 0x35
 800ba82:	d106      	bne.n	800ba92 <main+0x20e>
 800ba84:	4b7e      	ldr	r3, [pc, #504]	@ (800bc80 <main+0x3fc>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	f000 faef 	bl	800c070 <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn) {
 800ba92:	4b7b      	ldr	r3, [pc, #492]	@ (800bc80 <main+0x3fc>)
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	2201      	movs	r2, #1
 800ba98:	4053      	eors	r3, r2
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00c      	beq.n	800baba <main+0x236>
          Debug("Device time out set in main due to powerstatus shift");
 800baa0:	4a79      	ldr	r2, [pc, #484]	@ (800bc88 <main+0x404>)
 800baa2:	4b7a      	ldr	r3, [pc, #488]	@ (800bc8c <main+0x408>)
 800baa4:	0019      	movs	r1, r3
 800baa6:	2003      	movs	r0, #3
 800baa8:	f006 fe0a 	bl	80126c0 <CreateLine>
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800baac:	f007 fb3e 	bl	801312c <HAL_GetTick>
 800bab0:	0003      	movs	r3, r0
 800bab2:	4a77      	ldr	r2, [pc, #476]	@ (800bc90 <main+0x40c>)
 800bab4:	189a      	adds	r2, r3, r2
 800bab6:	4b68      	ldr	r3, [pc, #416]	@ (800bc58 <main+0x3d4>)
 800bab8:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800baba:	4b71      	ldr	r3, [pc, #452]	@ (800bc80 <main+0x3fc>)
 800babc:	781a      	ldrb	r2, [r3, #0]
 800babe:	4b67      	ldr	r3, [pc, #412]	@ (800bc5c <main+0x3d8>)
 800bac0:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800bac2:	f000 fef9 	bl	800c8b8 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800bac6:	4b6a      	ldr	r3, [pc, #424]	@ (800bc70 <main+0x3ec>)
 800bac8:	78db      	ldrb	r3, [r3, #3]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d005      	beq.n	800bada <main+0x256>
        MICstate = Mic_Upkeep();
 800bace:	f001 f8fd 	bl	800cccc <Mic_Upkeep>
 800bad2:	0003      	movs	r3, r0
 800bad4:	001a      	movs	r2, r3
 800bad6:	4b6f      	ldr	r3, [pc, #444]	@ (800bc94 <main+0x410>)
 800bad8:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800bada:	4b4f      	ldr	r3, [pc, #316]	@ (800bc18 <main+0x394>)
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d803      	bhi.n	800baea <main+0x266>
 800bae2:	4b62      	ldr	r3, [pc, #392]	@ (800bc6c <main+0x3e8>)
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d016      	beq.n	800bb18 <main+0x294>
 800baea:	4b61      	ldr	r3, [pc, #388]	@ (800bc70 <main+0x3ec>)
 800baec:	789b      	ldrb	r3, [r3, #2]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d012      	beq.n	800bb18 <main+0x294>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800baf2:	f001 fa8d 	bl	800d010 <sen5x_Get_sen5x_enable_state>
 800baf6:	0003      	movs	r3, r0
 800baf8:	001a      	movs	r2, r3
 800bafa:	2301      	movs	r3, #1
 800bafc:	4053      	eors	r3, r2
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d006      	beq.n	800bb12 <main+0x28e>
 800bb04:	4b5e      	ldr	r3, [pc, #376]	@ (800bc80 <main+0x3fc>)
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <main+0x28e>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	f001 fabb 	bl	800d088 <sen5x_enable>
        }
        sen5x_statemachine();
 800bb12:	f002 f819 	bl	800db48 <sen5x_statemachine>
 800bb16:	e020      	b.n	800bb5a <main+0x2d6>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800bb18:	4b3f      	ldr	r3, [pc, #252]	@ (800bc18 <main+0x394>)
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d81c      	bhi.n	800bb5a <main+0x2d6>
 800bb20:	4b52      	ldr	r3, [pc, #328]	@ (800bc6c <main+0x3e8>)
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2201      	movs	r2, #1
 800bb26:	4053      	eors	r3, r2
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d015      	beq.n	800bb5a <main+0x2d6>
 800bb2e:	4b50      	ldr	r3, [pc, #320]	@ (800bc70 <main+0x3ec>)
 800bb30:	789b      	ldrb	r3, [r3, #2]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d011      	beq.n	800bb5a <main+0x2d6>
        Info("Battery level insufficient for sen5x operation");
 800bb36:	4a58      	ldr	r2, [pc, #352]	@ (800bc98 <main+0x414>)
 800bb38:	4b39      	ldr	r3, [pc, #228]	@ (800bc20 <main+0x39c>)
 800bb3a:	0019      	movs	r1, r3
 800bb3c:	2002      	movs	r0, #2
 800bb3e:	f006 fdbf 	bl	80126c0 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800bb42:	4b4b      	ldr	r3, [pc, #300]	@ (800bc70 <main+0x3ec>)
 800bb44:	2200      	movs	r2, #0
 800bb46:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800bb48:	4b54      	ldr	r3, [pc, #336]	@ (800bc9c <main+0x418>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800bb4e:	4b54      	ldr	r3, [pc, #336]	@ (800bca0 <main+0x41c>)
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d001      	beq.n	800bb5a <main+0x2d6>
          sen5x_Power_Off();
 800bb56:	f001 fb23 	bl	800d1a0 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800bb5a:	f7fb f919 	bl	8006d90 <ESP_Upkeep>
 800bb5e:	0003      	movs	r3, r0
 800bb60:	001a      	movs	r2, r3
 800bb62:	4b44      	ldr	r3, [pc, #272]	@ (800bc74 <main+0x3f0>)
 800bb64:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800bb66:	4b45      	ldr	r3, [pc, #276]	@ (800bc7c <main+0x3f8>)
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	4053      	eors	r3, r2
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00f      	beq.n	800bb94 <main+0x310>
 800bb74:	4b2b      	ldr	r3, [pc, #172]	@ (800bc24 <main+0x3a0>)
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	4053      	eors	r3, r2
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d008      	beq.n	800bb94 <main+0x310>
 800bb82:	4b3d      	ldr	r3, [pc, #244]	@ (800bc78 <main+0x3f4>)
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	2201      	movs	r2, #1
 800bb88:	4053      	eors	r3, r2
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <main+0x310>
      Device_Test();  // for device with startup time
 800bb90:	f000 fcaa 	bl	800c4e8 <Device_Test>
    }
    if (!usbPluggedIn) {
 800bb94:	4b3a      	ldr	r3, [pc, #232]	@ (800bc80 <main+0x3fc>)
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	4053      	eors	r3, r2
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d01c      	beq.n	800bbdc <main+0x358>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800bba2:	4b40      	ldr	r3, [pc, #256]	@ (800bca4 <main+0x420>)
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	2201      	movs	r2, #1
 800bba8:	4053      	eors	r3, r2
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d015      	beq.n	800bbdc <main+0x358>
 800bbb0:	f000 fd18 	bl	800c5e4 <AllDevicesReady>
 800bbb4:	1e03      	subs	r3, r0, #0
 800bbb6:	d011      	beq.n	800bbdc <main+0x358>
 800bbb8:	4b3b      	ldr	r3, [pc, #236]	@ (800bca8 <main+0x424>)
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00d      	beq.n	800bbdc <main+0x358>
        EnabledConnectedDevices();
 800bbc0:	f000 fdde 	bl	800c780 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800bbc4:	4b39      	ldr	r3, [pc, #228]	@ (800bcac <main+0x428>)
 800bbc6:	795b      	ldrb	r3, [r3, #5]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d002      	beq.n	800bbd2 <main+0x34e>
 800bbcc:	23d7      	movs	r3, #215	@ 0xd7
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	e001      	b.n	800bbd6 <main+0x352>
 800bbd2:	23dc      	movs	r3, #220	@ 0xdc
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	0018      	movs	r0, r3
 800bbd8:	f7fd faf6 	bl	80091c8 <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 800bbdc:	4b12      	ldr	r3, [pc, #72]	@ (800bc28 <main+0x3a4>)
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <main+0x364>
      check_cli_command();
 800bbe4:	f000 f8f0 	bl	800bdc8 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800bbe8:	f7fc ff5e 	bl	8008aa8 <Check_USB_PowerOn>
 800bbec:	1e03      	subs	r3, r0, #0
 800bbee:	d100      	bne.n	800bbf2 <main+0x36e>
 800bbf0:	e6de      	b.n	800b9b0 <main+0x12c>
 800bbf2:	4b2f      	ldr	r3, [pc, #188]	@ (800bcb0 <main+0x42c>)
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	4053      	eors	r3, r2
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d100      	bne.n	800bc02 <main+0x37e>
 800bc00:	e6d6      	b.n	800b9b0 <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 800bc02:	f015 fd6b 	bl	80216dc <GetUsbRxPointer>
 800bc06:	0003      	movs	r3, r0
 800bc08:	0018      	movs	r0, r3
 800bc0a:	f7fc fd03 	bl	8008614 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800bc0e:	e6cf      	b.n	800b9b0 <main+0x12c>
 800bc10:	20001edc 	.word	0x20001edc
 800bc14:	20001e9c 	.word	0x20001e9c
 800bc18:	20000e48 	.word	0x20000e48
 800bc1c:	0802b220 	.word	0x0802b220
 800bc20:	0802b244 	.word	0x0802b244
 800bc24:	20000e2d 	.word	0x20000e2d
 800bc28:	20000e34 	.word	0x20000e34
 800bc2c:	20002014 	.word	0x20002014
 800bc30:	20000ec8 	.word	0x20000ec8
 800bc34:	20001f1c 	.word	0x20001f1c
 800bc38:	20000da8 	.word	0x20000da8
 800bc3c:	20000de4 	.word	0x20000de4
 800bc40:	0802b248 	.word	0x0802b248
 800bc44:	0802cb30 	.word	0x0802cb30
 800bc48:	200020cc 	.word	0x200020cc
 800bc4c:	20000ba8 	.word	0x20000ba8
 800bc50:	20000c70 	.word	0x20000c70
 800bc54:	000061a8 	.word	0x000061a8
 800bc58:	20000e44 	.word	0x20000e44
 800bc5c:	20000e2f 	.word	0x20000e2f
 800bc60:	0802b25c 	.word	0x0802b25c
 800bc64:	20000098 	.word	0x20000098
 800bc68:	0000c350 	.word	0x0000c350
 800bc6c:	20000097 	.word	0x20000097
 800bc70:	20000e4c 	.word	0x20000e4c
 800bc74:	20000e31 	.word	0x20000e31
 800bc78:	20000e2e 	.word	0x20000e2e
 800bc7c:	20000e2c 	.word	0x20000e2c
 800bc80:	20001e7d 	.word	0x20001e7d
 800bc84:	20000ef0 	.word	0x20000ef0
 800bc88:	0802b290 	.word	0x0802b290
 800bc8c:	0802b2c8 	.word	0x0802b2c8
 800bc90:	00001194 	.word	0x00001194
 800bc94:	20000e30 	.word	0x20000e30
 800bc98:	0802b2cc 	.word	0x0802b2cc
 800bc9c:	20000eee 	.word	0x20000eee
 800bca0:	20000eed 	.word	0x20000eed
 800bca4:	20001e7e 	.word	0x20001e7e
 800bca8:	200005c0 	.word	0x200005c0
 800bcac:	20000e54 	.word	0x20000e54
 800bcb0:	200005bb 	.word	0x200005bb

0800bcb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800bcb4:	b590      	push	{r4, r7, lr}
 800bcb6:	b09d      	sub	sp, #116	@ 0x74
 800bcb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bcba:	2438      	movs	r4, #56	@ 0x38
 800bcbc:	193b      	adds	r3, r7, r4
 800bcbe:	0018      	movs	r0, r3
 800bcc0:	2338      	movs	r3, #56	@ 0x38
 800bcc2:	001a      	movs	r2, r3
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	f018 ff43 	bl	8024b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bcca:	2324      	movs	r3, #36	@ 0x24
 800bccc:	18fb      	adds	r3, r7, r3
 800bcce:	0018      	movs	r0, r3
 800bcd0:	2314      	movs	r3, #20
 800bcd2:	001a      	movs	r2, r3
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	f018 ff3b 	bl	8024b50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bcda:	003b      	movs	r3, r7
 800bcdc:	0018      	movs	r0, r3
 800bcde:	2324      	movs	r3, #36	@ 0x24
 800bce0:	001a      	movs	r2, r3
 800bce2:	2100      	movs	r1, #0
 800bce4:	f018 ff34 	bl	8024b50 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bce8:	4b34      	ldr	r3, [pc, #208]	@ (800bdbc <SystemClock_Config+0x108>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a34      	ldr	r2, [pc, #208]	@ (800bdc0 <SystemClock_Config+0x10c>)
 800bcee:	401a      	ands	r2, r3
 800bcf0:	4b32      	ldr	r3, [pc, #200]	@ (800bdbc <SystemClock_Config+0x108>)
 800bcf2:	2180      	movs	r1, #128	@ 0x80
 800bcf4:	0109      	lsls	r1, r1, #4
 800bcf6:	430a      	orrs	r2, r1
 800bcf8:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800bcfa:	f00d fd4f 	bl	801979c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800bcfe:	4b31      	ldr	r3, [pc, #196]	@ (800bdc4 <SystemClock_Config+0x110>)
 800bd00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd02:	4a2f      	ldr	r2, [pc, #188]	@ (800bdc0 <SystemClock_Config+0x10c>)
 800bd04:	401a      	ands	r2, r3
 800bd06:	4b2f      	ldr	r3, [pc, #188]	@ (800bdc4 <SystemClock_Config+0x110>)
 800bd08:	2180      	movs	r1, #128	@ 0x80
 800bd0a:	0149      	lsls	r1, r1, #5
 800bd0c:	430a      	orrs	r2, r1
 800bd0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800bd10:	193b      	adds	r3, r7, r4
 800bd12:	2226      	movs	r2, #38	@ 0x26
 800bd14:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800bd16:	193b      	adds	r3, r7, r4
 800bd18:	2280      	movs	r2, #128	@ 0x80
 800bd1a:	0052      	lsls	r2, r2, #1
 800bd1c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800bd1e:	0021      	movs	r1, r4
 800bd20:	187b      	adds	r3, r7, r1
 800bd22:	2201      	movs	r2, #1
 800bd24:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800bd26:	187b      	adds	r3, r7, r1
 800bd28:	2210      	movs	r2, #16
 800bd2a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800bd2c:	187b      	adds	r3, r7, r1
 800bd2e:	2201      	movs	r2, #1
 800bd30:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800bd32:	187b      	adds	r3, r7, r1
 800bd34:	2200      	movs	r2, #0
 800bd36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bd38:	187b      	adds	r3, r7, r1
 800bd3a:	0018      	movs	r0, r3
 800bd3c:	f00d fdbe 	bl	80198bc <HAL_RCC_OscConfig>
 800bd40:	1e03      	subs	r3, r0, #0
 800bd42:	d001      	beq.n	800bd48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800bd44:	f000 f906 	bl	800bf54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bd48:	2124      	movs	r1, #36	@ 0x24
 800bd4a:	187b      	adds	r3, r7, r1
 800bd4c:	220f      	movs	r2, #15
 800bd4e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800bd50:	187b      	adds	r3, r7, r1
 800bd52:	2201      	movs	r2, #1
 800bd54:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bd56:	187b      	adds	r3, r7, r1
 800bd58:	2200      	movs	r2, #0
 800bd5a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800bd5c:	187b      	adds	r3, r7, r1
 800bd5e:	2200      	movs	r2, #0
 800bd60:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800bd62:	187b      	adds	r3, r7, r1
 800bd64:	2200      	movs	r2, #0
 800bd66:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800bd68:	187b      	adds	r3, r7, r1
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	0018      	movs	r0, r3
 800bd6e:	f00e f979 	bl	801a064 <HAL_RCC_ClockConfig>
 800bd72:	1e03      	subs	r3, r0, #0
 800bd74:	d001      	beq.n	800bd7a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800bd76:	f000 f8ed 	bl	800bf54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800bd7a:	003b      	movs	r3, r7
 800bd7c:	226d      	movs	r2, #109	@ 0x6d
 800bd7e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800bd80:	003b      	movs	r3, r7
 800bd82:	2200      	movs	r2, #0
 800bd84:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800bd86:	003b      	movs	r3, r7
 800bd88:	2200      	movs	r2, #0
 800bd8a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800bd8c:	003b      	movs	r3, r7
 800bd8e:	2200      	movs	r2, #0
 800bd90:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800bd92:	003b      	movs	r3, r7
 800bd94:	2280      	movs	r2, #128	@ 0x80
 800bd96:	0252      	lsls	r2, r2, #9
 800bd98:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bd9a:	003b      	movs	r3, r7
 800bd9c:	2280      	movs	r2, #128	@ 0x80
 800bd9e:	04d2      	lsls	r2, r2, #19
 800bda0:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bda2:	003b      	movs	r3, r7
 800bda4:	0018      	movs	r0, r3
 800bda6:	f00e fb81 	bl	801a4ac <HAL_RCCEx_PeriphCLKConfig>
 800bdaa:	1e03      	subs	r3, r0, #0
 800bdac:	d001      	beq.n	800bdb2 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800bdae:	f000 f8d1 	bl	800bf54 <Error_Handler>
  }
}
 800bdb2:	46c0      	nop			@ (mov r8, r8)
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	b01d      	add	sp, #116	@ 0x74
 800bdb8:	bd90      	pop	{r4, r7, pc}
 800bdba:	46c0      	nop			@ (mov r8, r8)
 800bdbc:	40007000 	.word	0x40007000
 800bdc0:	ffffe7ff 	.word	0xffffe7ff
 800bdc4:	40021000 	.word	0x40021000

0800bdc8 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800bdcc:	4b34      	ldr	r3, [pc, #208]	@ (800bea0 <check_cli_command+0xd8>)
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	3b61      	subs	r3, #97	@ 0x61
 800bdd2:	2b13      	cmp	r3, #19
 800bdd4:	d833      	bhi.n	800be3e <check_cli_command+0x76>
 800bdd6:	009a      	lsls	r2, r3, #2
 800bdd8:	4b32      	ldr	r3, [pc, #200]	@ (800bea4 <check_cli_command+0xdc>)
 800bdda:	18d3      	adds	r3, r2, r3
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800bde0:	4b31      	ldr	r3, [pc, #196]	@ (800bea8 <check_cli_command+0xe0>)
 800bde2:	0018      	movs	r0, r3
 800bde4:	f018 fd44 	bl	8024870 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800bde8:	2003      	movs	r0, #3
 800bdea:	f006 fcd3 	bl	8012794 <SetVerboseLevel>
      break;
 800bdee:	e051      	b.n	800be94 <check_cli_command+0xcc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800bdf0:	f7fc f89c 	bl	8007f2c <PC_show_Keys>
    break;
 800bdf4:	e04e      	b.n	800be94 <check_cli_command+0xcc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800bdf6:	f7f8 fb4b 	bl	8004490 <forceNTPupdate>
    break;
 800bdfa:	e04b      	b.n	800be94 <check_cli_command+0xcc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800bdfc:	4b2b      	ldr	r3, [pc, #172]	@ (800beac <check_cli_command+0xe4>)
 800bdfe:	0018      	movs	r0, r3
 800be00:	f018 fd36 	bl	8024870 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800be04:	2002      	movs	r0, #2
 800be06:	f006 fcc5 	bl	8012794 <SetVerboseLevel>
      break;
 800be0a:	e043      	b.n	800be94 <check_cli_command+0xcc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800be0c:	4b28      	ldr	r3, [pc, #160]	@ (800beb0 <check_cli_command+0xe8>)
 800be0e:	0018      	movs	r0, r3
 800be10:	f018 fd2e 	bl	8024870 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800be14:	2001      	movs	r0, #1
 800be16:	f006 fcbd 	bl	8012794 <SetVerboseLevel>
      break;
 800be1a:	e03b      	b.n	800be94 <check_cli_command+0xcc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800be1c:	4b25      	ldr	r3, [pc, #148]	@ (800beb4 <check_cli_command+0xec>)
 800be1e:	0018      	movs	r0, r3
 800be20:	f018 fd26 	bl	8024870 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800be24:	2000      	movs	r0, #0
 800be26:	f006 fcb5 	bl	8012794 <SetVerboseLevel>
      break;
 800be2a:	e033      	b.n	800be94 <check_cli_command+0xcc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800be2c:	f007 f97e 	bl	801312c <HAL_GetTick>
 800be30:	0002      	movs	r2, r0
 800be32:	4b21      	ldr	r3, [pc, #132]	@ (800beb8 <check_cli_command+0xf0>)
 800be34:	601a      	str	r2, [r3, #0]
      break;
 800be36:	e02d      	b.n	800be94 <check_cli_command+0xcc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800be38:	f7fc fe66 	bl	8008b08 <showTime>
      break;
 800be3c:	e02a      	b.n	800be94 <check_cli_command+0xcc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800be3e:	4a1f      	ldr	r2, [pc, #124]	@ (800bebc <check_cli_command+0xf4>)
 800be40:	4b1f      	ldr	r3, [pc, #124]	@ (800bec0 <check_cli_command+0xf8>)
 800be42:	0019      	movs	r1, r3
 800be44:	2001      	movs	r0, #1
 800be46:	f006 fc3b 	bl	80126c0 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800be4a:	4b1e      	ldr	r3, [pc, #120]	@ (800bec4 <check_cli_command+0xfc>)
 800be4c:	0018      	movs	r0, r3
 800be4e:	f018 fd0f 	bl	8024870 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800be52:	4b1d      	ldr	r3, [pc, #116]	@ (800bec8 <check_cli_command+0x100>)
 800be54:	0018      	movs	r0, r3
 800be56:	f018 fd0b 	bl	8024870 <puts>
      printf("e - show EEPROM\r\n");
 800be5a:	4b1c      	ldr	r3, [pc, #112]	@ (800becc <check_cli_command+0x104>)
 800be5c:	0018      	movs	r0, r3
 800be5e:	f018 fd07 	bl	8024870 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800be62:	4b1b      	ldr	r3, [pc, #108]	@ (800bed0 <check_cli_command+0x108>)
 800be64:	0018      	movs	r0, r3
 800be66:	f018 fd03 	bl	8024870 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800be6a:	4b1a      	ldr	r3, [pc, #104]	@ (800bed4 <check_cli_command+0x10c>)
 800be6c:	0018      	movs	r0, r3
 800be6e:	f018 fcff 	bl	8024870 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800be72:	4b19      	ldr	r3, [pc, #100]	@ (800bed8 <check_cli_command+0x110>)
 800be74:	0018      	movs	r0, r3
 800be76:	f018 fcfb 	bl	8024870 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800be7a:	4b18      	ldr	r3, [pc, #96]	@ (800bedc <check_cli_command+0x114>)
 800be7c:	0018      	movs	r0, r3
 800be7e:	f018 fcf7 	bl	8024870 <puts>
      printf("s - Start particle measurement\r\n");
 800be82:	4b17      	ldr	r3, [pc, #92]	@ (800bee0 <check_cli_command+0x118>)
 800be84:	0018      	movs	r0, r3
 800be86:	f018 fcf3 	bl	8024870 <puts>
      printf("t - Show actual systemtime\r\n");
 800be8a:	4b16      	ldr	r3, [pc, #88]	@ (800bee4 <check_cli_command+0x11c>)
 800be8c:	0018      	movs	r0, r3
 800be8e:	f018 fcef 	bl	8024870 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 800be92:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800be94:	4b02      	ldr	r3, [pc, #8]	@ (800bea0 <check_cli_command+0xd8>)
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
}
 800be9a:	46c0      	nop			@ (mov r8, r8)
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	20000e34 	.word	0x20000e34
 800bea4:	0802cae0 	.word	0x0802cae0
 800bea8:	0802b2fc 	.word	0x0802b2fc
 800beac:	0802b318 	.word	0x0802b318
 800beb0:	0802b334 	.word	0x0802b334
 800beb4:	0802b354 	.word	0x0802b354
 800beb8:	20000efc 	.word	0x20000efc
 800bebc:	0802b370 	.word	0x0802b370
 800bec0:	0802b3a0 	.word	0x0802b3a0
 800bec4:	0802b3a4 	.word	0x0802b3a4
 800bec8:	0802b3bc 	.word	0x0802b3bc
 800becc:	0802b3dc 	.word	0x0802b3dc
 800bed0:	0802b3f0 	.word	0x0802b3f0
 800bed4:	0802b414 	.word	0x0802b414
 800bed8:	0802b434 	.word	0x0802b434
 800bedc:	0802b458 	.word	0x0802b458
 800bee0:	0802b478 	.word	0x0802b478
 800bee4:	0802b498 	.word	0x0802b498

0800bee8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800bef0:	4907      	ldr	r1, [pc, #28]	@ (800bf10 <HAL_UART_RxCpltCallback+0x28>)
 800bef2:	4b08      	ldr	r3, [pc, #32]	@ (800bf14 <HAL_UART_RxCpltCallback+0x2c>)
 800bef4:	2201      	movs	r2, #1
 800bef6:	0018      	movs	r0, r3
 800bef8:	f00f fe7c 	bl	801bbf4 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800befc:	4904      	ldr	r1, [pc, #16]	@ (800bf10 <HAL_UART_RxCpltCallback+0x28>)
 800befe:	4b05      	ldr	r3, [pc, #20]	@ (800bf14 <HAL_UART_RxCpltCallback+0x2c>)
 800bf00:	2201      	movs	r2, #1
 800bf02:	0018      	movs	r0, r3
 800bf04:	f00f fe76 	bl	801bbf4 <HAL_UART_Receive_IT>
}
 800bf08:	46c0      	nop			@ (mov r8, r8)
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	b002      	add	sp, #8
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	20000e34 	.word	0x20000e34
 800bf14:	20002014 	.word	0x20002014

0800bf18 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	0002      	movs	r2, r0
 800bf20:	1dbb      	adds	r3, r7, #6
 800bf22:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800bf24:	1dbb      	adds	r3, r7, #6
 800bf26:	881a      	ldrh	r2, [r3, #0]
 800bf28:	2380      	movs	r3, #128	@ 0x80
 800bf2a:	021b      	lsls	r3, r3, #8
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d10b      	bne.n	800bf48 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800bf30:	f005 fe6c 	bl	8011c0c <setuserToggle>
    if (GetPMSensorPresence()) {
 800bf34:	f000 f860 	bl	800bff8 <GetPMSensorPresence>
 800bf38:	1e03      	subs	r3, r0, #0
 800bf3a:	d005      	beq.n	800bf48 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800bf3c:	4b04      	ldr	r3, [pc, #16]	@ (800bf50 <HAL_GPIO_EXTI_Callback+0x38>)
 800bf3e:	2201      	movs	r2, #1
 800bf40:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800bf42:	2000      	movs	r0, #0
 800bf44:	f001 f86e 	bl	800d024 <sen5x_Set_sen5x_state>
    }
  }
}
 800bf48:	46c0      	nop			@ (mov r8, r8)
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	b002      	add	sp, #8
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	20000e4c 	.word	0x20000e4c

0800bf54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800bf58:	f005 fac8 	bl	80114ec <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800bf5c:	b672      	cpsid	i
}
 800bf5e:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800bf60:	4a05      	ldr	r2, [pc, #20]	@ (800bf78 <Error_Handler+0x24>)
 800bf62:	4b06      	ldr	r3, [pc, #24]	@ (800bf7c <Error_Handler+0x28>)
 800bf64:	0019      	movs	r1, r3
 800bf66:	2001      	movs	r0, #1
 800bf68:	f006 fbaa 	bl	80126c0 <CreateLine>

    HAL_Delay(2500);
 800bf6c:	4b04      	ldr	r3, [pc, #16]	@ (800bf80 <Error_Handler+0x2c>)
 800bf6e:	0018      	movs	r0, r3
 800bf70:	f007 f8e6 	bl	8013140 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800bf74:	46c0      	nop			@ (mov r8, r8)
 800bf76:	e7f3      	b.n	800bf60 <Error_Handler+0xc>
 800bf78:	0802b4b4 	.word	0x0802b4b4
 800bf7c:	0802b3a0 	.word	0x0802b3a0
 800bf80:	000009c4 	.word	0x000009c4

0800bf84 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800bf84:	b580      	push	{r7, lr}
 800bf86:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800bf88:	4b19      	ldr	r3, [pc, #100]	@ (800bff0 <testInit+0x6c>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800bf8e:	4b18      	ldr	r3, [pc, #96]	@ (800bff0 <testInit+0x6c>)
 800bf90:	2200      	movs	r2, #0
 800bf92:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800bf94:	4b16      	ldr	r3, [pc, #88]	@ (800bff0 <testInit+0x6c>)
 800bf96:	2200      	movs	r2, #0
 800bf98:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800bf9a:	4b15      	ldr	r3, [pc, #84]	@ (800bff0 <testInit+0x6c>)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800bfa0:	4b13      	ldr	r3, [pc, #76]	@ (800bff0 <testInit+0x6c>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800bfa6:	4b12      	ldr	r3, [pc, #72]	@ (800bff0 <testInit+0x6c>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800bfac:	4b10      	ldr	r3, [pc, #64]	@ (800bff0 <testInit+0x6c>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800bfb2:	4b0f      	ldr	r3, [pc, #60]	@ (800bff0 <testInit+0x6c>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800bfb8:	4b0d      	ldr	r3, [pc, #52]	@ (800bff0 <testInit+0x6c>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800bfbe:	4b0d      	ldr	r3, [pc, #52]	@ (800bff4 <testInit+0x70>)
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800bfc4:	4b0b      	ldr	r3, [pc, #44]	@ (800bff4 <testInit+0x70>)
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800bfca:	4b0a      	ldr	r3, [pc, #40]	@ (800bff4 <testInit+0x70>)
 800bfcc:	2201      	movs	r2, #1
 800bfce:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800bfd0:	4b08      	ldr	r3, [pc, #32]	@ (800bff4 <testInit+0x70>)
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800bfd6:	4b07      	ldr	r3, [pc, #28]	@ (800bff4 <testInit+0x70>)
 800bfd8:	2201      	movs	r2, #1
 800bfda:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800bfdc:	4b05      	ldr	r3, [pc, #20]	@ (800bff4 <testInit+0x70>)
 800bfde:	2201      	movs	r2, #1
 800bfe0:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800bfe2:	4b04      	ldr	r3, [pc, #16]	@ (800bff4 <testInit+0x70>)
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	719a      	strb	r2, [r3, #6]
}
 800bfe8:	46c0      	nop			@ (mov r8, r8)
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	46c0      	nop			@ (mov r8, r8)
 800bff0:	20000e54 	.word	0x20000e54
 800bff4:	20000e4c 	.word	0x20000e4c

0800bff8 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800bff8:	b580      	push	{r7, lr}
 800bffa:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800bffc:	4b02      	ldr	r3, [pc, #8]	@ (800c008 <GetPMSensorPresence+0x10>)
 800bffe:	795b      	ldrb	r3, [r3, #5]
}
 800c000:	0018      	movs	r0, r3
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	46c0      	nop			@ (mov r8, r8)
 800c008:	20000e54 	.word	0x20000e54

0800c00c <DisablePMSensor>:

void DisablePMSensor() {
 800c00c:	b580      	push	{r7, lr}
 800c00e:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800c010:	4b02      	ldr	r3, [pc, #8]	@ (800c01c <DisablePMSensor+0x10>)
 800c012:	2200      	movs	r2, #0
 800c014:	715a      	strb	r2, [r3, #5]
}
 800c016:	46c0      	nop			@ (mov r8, r8)
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	20000e54 	.word	0x20000e54

0800c020 <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800c020:	b580      	push	{r7, lr}
 800c022:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800c024:	4b02      	ldr	r3, [pc, #8]	@ (800c030 <IsAHT20SensorPresent+0x10>)
 800c026:	789b      	ldrb	r3, [r3, #2]
}
 800c028:	0018      	movs	r0, r3
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	46c0      	nop			@ (mov r8, r8)
 800c030:	20000e54 	.word	0x20000e54

0800c034 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800c034:	b580      	push	{r7, lr}
 800c036:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800c038:	4b02      	ldr	r3, [pc, #8]	@ (800c044 <IsBMP280SensorPresent+0x10>)
 800c03a:	791b      	ldrb	r3, [r3, #4]
}
 800c03c:	0018      	movs	r0, r3
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	46c0      	nop			@ (mov r8, r8)
 800c044:	20000e54 	.word	0x20000e54

0800c048 <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800c048:	b580      	push	{r7, lr}
 800c04a:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800c04c:	4b02      	ldr	r3, [pc, #8]	@ (800c058 <IsENS160SensorPresent+0x10>)
 800c04e:	78db      	ldrb	r3, [r3, #3]
}
 800c050:	0018      	movs	r0, r3
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	46c0      	nop			@ (mov r8, r8)
 800c058:	20000e54 	.word	0x20000e54

0800c05c <IsSGPPresent>:

bool IsSGPPresent() {
 800c05c:	b580      	push	{r7, lr}
 800c05e:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800c060:	4b02      	ldr	r3, [pc, #8]	@ (800c06c <IsSGPPresent+0x10>)
 800c062:	785b      	ldrb	r3, [r3, #1]
}
 800c064:	0018      	movs	r0, r3
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	46c0      	nop			@ (mov r8, r8)
 800c06c:	20000e54 	.word	0x20000e54

0800c070 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	0002      	movs	r2, r0
 800c078:	1dfb      	adds	r3, r7, #7
 800c07a:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800c07c:	4b0b      	ldr	r3, [pc, #44]	@ (800c0ac <SetVOCSensorDIS_ENA+0x3c>)
 800c07e:	1dfa      	adds	r2, r7, #7
 800c080:	7812      	ldrb	r2, [r2, #0]
 800c082:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800c084:	4b0a      	ldr	r3, [pc, #40]	@ (800c0b0 <SetVOCSensorDIS_ENA+0x40>)
 800c086:	1dfa      	adds	r2, r7, #7
 800c088:	7812      	ldrb	r2, [r2, #0]
 800c08a:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800c08c:	1dfb      	adds	r3, r7, #7
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d001      	beq.n	800c098 <SetVOCSensorDIS_ENA+0x28>
 800c094:	4b07      	ldr	r3, [pc, #28]	@ (800c0b4 <SetVOCSensorDIS_ENA+0x44>)
 800c096:	e000      	b.n	800c09a <SetVOCSensorDIS_ENA+0x2a>
 800c098:	4b07      	ldr	r3, [pc, #28]	@ (800c0b8 <SetVOCSensorDIS_ENA+0x48>)
 800c09a:	4a08      	ldr	r2, [pc, #32]	@ (800c0bc <SetVOCSensorDIS_ENA+0x4c>)
 800c09c:	4908      	ldr	r1, [pc, #32]	@ (800c0c0 <SetVOCSensorDIS_ENA+0x50>)
 800c09e:	2003      	movs	r0, #3
 800c0a0:	f006 fb0e 	bl	80126c0 <CreateLine>
}
 800c0a4:	46c0      	nop			@ (mov r8, r8)
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	b002      	add	sp, #8
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	20000e54 	.word	0x20000e54
 800c0b0:	20000e4c 	.word	0x20000e4c
 800c0b4:	0802b4e0 	.word	0x0802b4e0
 800c0b8:	0802b4e8 	.word	0x0802b4e8
 800c0bc:	0802b4f4 	.word	0x0802b4f4
 800c0c0:	0802b508 	.word	0x0802b508

0800c0c4 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800c0c8:	4b02      	ldr	r3, [pc, #8]	@ (800c0d4 <IsPMSensorEnabled+0x10>)
 800c0ca:	789b      	ldrb	r3, [r3, #2]
}
 800c0cc:	0018      	movs	r0, r3
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	46c0      	nop			@ (mov r8, r8)
 800c0d4:	20000e4c 	.word	0x20000e4c

0800c0d8 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	0002      	movs	r2, r0
 800c0e0:	1dfb      	adds	r3, r7, #7
 800c0e2:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800c0e4:	4b05      	ldr	r3, [pc, #20]	@ (800c0fc <SetVOCSensorStatus+0x24>)
 800c0e6:	7a1b      	ldrb	r3, [r3, #8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d003      	beq.n	800c0f4 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800c0ec:	4b04      	ldr	r3, [pc, #16]	@ (800c100 <SetVOCSensorStatus+0x28>)
 800c0ee:	1dfa      	adds	r2, r7, #7
 800c0f0:	7812      	ldrb	r2, [r2, #0]
 800c0f2:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800c0f4:	46c0      	nop			@ (mov r8, r8)
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	b002      	add	sp, #8
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	20000e54 	.word	0x20000e54
 800c100:	20000e4c 	.word	0x20000e4c

0800c104 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	0002      	movs	r2, r0
 800c10c:	1dfb      	adds	r3, r7, #7
 800c10e:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800c110:	4b03      	ldr	r3, [pc, #12]	@ (800c120 <SetPMSensorStatus+0x1c>)
 800c112:	1dfa      	adds	r2, r7, #7
 800c114:	7812      	ldrb	r2, [r2, #0]
 800c116:	709a      	strb	r2, [r3, #2]
}
 800c118:	46c0      	nop			@ (mov r8, r8)
 800c11a:	46bd      	mov	sp, r7
 800c11c:	b002      	add	sp, #8
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	20000e4c 	.word	0x20000e4c

0800c124 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800c124:	b580      	push	{r7, lr}
 800c126:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800c128:	4b02      	ldr	r3, [pc, #8]	@ (800c134 <SetESPMeasurementDone+0x10>)
 800c12a:	2201      	movs	r2, #1
 800c12c:	71da      	strb	r2, [r3, #7]
}
 800c12e:	46c0      	nop			@ (mov r8, r8)
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	20000e54 	.word	0x20000e54

0800c138 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
 800c144:	603b      	str	r3, [r7, #0]
  testInit();
 800c146:	f7ff ff1d 	bl	800bf84 <testInit>
  I2CSensors_Init(sensorI2C);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	0018      	movs	r0, r3
 800c14e:	f7fb fae7 	bl	8007720 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800c152:	f006 fd7f 	bl	8012c54 <HIDS_DeviceConnected>
 800c156:	0003      	movs	r3, r0
 800c158:	001a      	movs	r2, r3
 800c15a:	2301      	movs	r3, #1
 800c15c:	4053      	eors	r3, r2
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00c      	beq.n	800c17e <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800c164:	4abf      	ldr	r2, [pc, #764]	@ (800c464 <Device_Init+0x32c>)
 800c166:	4bc0      	ldr	r3, [pc, #768]	@ (800c468 <Device_Init+0x330>)
 800c168:	0019      	movs	r1, r3
 800c16a:	2001      	movs	r0, #1
 800c16c:	f006 faa8 	bl	80126c0 <CreateLine>
     SensorProbe.HT_Present = false;
 800c170:	4bbe      	ldr	r3, [pc, #760]	@ (800c46c <Device_Init+0x334>)
 800c172:	2200      	movs	r2, #0
 800c174:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800c176:	4bbe      	ldr	r3, [pc, #760]	@ (800c470 <Device_Init+0x338>)
 800c178:	2200      	movs	r2, #0
 800c17a:	701a      	strb	r2, [r3, #0]
 800c17c:	e008      	b.n	800c190 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800c17e:	4bbb      	ldr	r3, [pc, #748]	@ (800c46c <Device_Init+0x334>)
 800c180:	2201      	movs	r2, #1
 800c182:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800c184:	4abb      	ldr	r2, [pc, #748]	@ (800c474 <Device_Init+0x33c>)
 800c186:	4bbc      	ldr	r3, [pc, #752]	@ (800c478 <Device_Init+0x340>)
 800c188:	0019      	movs	r1, r3
 800c18a:	2003      	movs	r0, #3
 800c18c:	f006 fa98 	bl	80126c0 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800c190:	f7fe fa08 	bl	800a5a4 <BMP280_DeviceConnected>
 800c194:	0003      	movs	r3, r0
 800c196:	001a      	movs	r2, r3
 800c198:	2301      	movs	r3, #1
 800c19a:	4053      	eors	r3, r2
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00c      	beq.n	800c1bc <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800c1a2:	4ab6      	ldr	r2, [pc, #728]	@ (800c47c <Device_Init+0x344>)
 800c1a4:	4bb0      	ldr	r3, [pc, #704]	@ (800c468 <Device_Init+0x330>)
 800c1a6:	0019      	movs	r1, r3
 800c1a8:	2001      	movs	r0, #1
 800c1aa:	f006 fa89 	bl	80126c0 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800c1ae:	4baf      	ldr	r3, [pc, #700]	@ (800c46c <Device_Init+0x334>)
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800c1b4:	4bae      	ldr	r3, [pc, #696]	@ (800c470 <Device_Init+0x338>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	715a      	strb	r2, [r3, #5]
 800c1ba:	e008      	b.n	800c1ce <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800c1bc:	4bab      	ldr	r3, [pc, #684]	@ (800c46c <Device_Init+0x334>)
 800c1be:	2201      	movs	r2, #1
 800c1c0:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800c1c2:	4aaf      	ldr	r2, [pc, #700]	@ (800c480 <Device_Init+0x348>)
 800c1c4:	4bac      	ldr	r3, [pc, #688]	@ (800c478 <Device_Init+0x340>)
 800c1c6:	0019      	movs	r1, r3
 800c1c8:	2003      	movs	r0, #3
 800c1ca:	f006 fa79 	bl	80126c0 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800c1ce:	f003 fcb7 	bl	800fb40 <SGP_DeviceConnected>
 800c1d2:	0003      	movs	r3, r0
 800c1d4:	001a      	movs	r2, r3
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	4053      	eors	r3, r2
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00c      	beq.n	800c1fa <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800c1e0:	4ba2      	ldr	r3, [pc, #648]	@ (800c46c <Device_Init+0x334>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800c1e6:	4aa7      	ldr	r2, [pc, #668]	@ (800c484 <Device_Init+0x34c>)
 800c1e8:	4b9f      	ldr	r3, [pc, #636]	@ (800c468 <Device_Init+0x330>)
 800c1ea:	0019      	movs	r1, r3
 800c1ec:	2001      	movs	r0, #1
 800c1ee:	f006 fa67 	bl	80126c0 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800c1f2:	4b9f      	ldr	r3, [pc, #636]	@ (800c470 <Device_Init+0x338>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	705a      	strb	r2, [r3, #1]
 800c1f8:	e00b      	b.n	800c212 <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800c1fa:	4b9c      	ldr	r3, [pc, #624]	@ (800c46c <Device_Init+0x334>)
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800c200:	4b9a      	ldr	r3, [pc, #616]	@ (800c46c <Device_Init+0x334>)
 800c202:	2201      	movs	r2, #1
 800c204:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800c206:	4aa0      	ldr	r2, [pc, #640]	@ (800c488 <Device_Init+0x350>)
 800c208:	4b9b      	ldr	r3, [pc, #620]	@ (800c478 <Device_Init+0x340>)
 800c20a:	0019      	movs	r1, r3
 800c20c:	2003      	movs	r0, #3
 800c20e:	f006 fa57 	bl	80126c0 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800c212:	f7f7 fc13 	bl	8003a3c <ENS_DeviceConnected>
 800c216:	0003      	movs	r3, r0
 800c218:	001a      	movs	r2, r3
 800c21a:	2301      	movs	r3, #1
 800c21c:	4053      	eors	r3, r2
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00c      	beq.n	800c23e <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800c224:	4b91      	ldr	r3, [pc, #580]	@ (800c46c <Device_Init+0x334>)
 800c226:	2200      	movs	r2, #0
 800c228:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800c22a:	4a98      	ldr	r2, [pc, #608]	@ (800c48c <Device_Init+0x354>)
 800c22c:	4b8e      	ldr	r3, [pc, #568]	@ (800c468 <Device_Init+0x330>)
 800c22e:	0019      	movs	r1, r3
 800c230:	2001      	movs	r0, #1
 800c232:	f006 fa45 	bl	80126c0 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800c236:	4b8e      	ldr	r3, [pc, #568]	@ (800c470 <Device_Init+0x338>)
 800c238:	2200      	movs	r2, #0
 800c23a:	719a      	strb	r2, [r3, #6]
 800c23c:	e008      	b.n	800c250 <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800c23e:	4b8b      	ldr	r3, [pc, #556]	@ (800c46c <Device_Init+0x334>)
 800c240:	2201      	movs	r2, #1
 800c242:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800c244:	4a92      	ldr	r2, [pc, #584]	@ (800c490 <Device_Init+0x358>)
 800c246:	4b8c      	ldr	r3, [pc, #560]	@ (800c478 <Device_Init+0x340>)
 800c248:	0019      	movs	r1, r3
 800c24a:	2003      	movs	r0, #3
 800c24c:	f006 fa38 	bl	80126c0 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800c250:	f7fd fcdc 	bl	8009c0c <AHT20_DeviceConnected>
 800c254:	0003      	movs	r3, r0
 800c256:	001a      	movs	r2, r3
 800c258:	2301      	movs	r3, #1
 800c25a:	4053      	eors	r3, r2
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00c      	beq.n	800c27c <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800c262:	4a8c      	ldr	r2, [pc, #560]	@ (800c494 <Device_Init+0x35c>)
 800c264:	4b80      	ldr	r3, [pc, #512]	@ (800c468 <Device_Init+0x330>)
 800c266:	0019      	movs	r1, r3
 800c268:	2001      	movs	r0, #1
 800c26a:	f006 fa29 	bl	80126c0 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800c26e:	4b7f      	ldr	r3, [pc, #508]	@ (800c46c <Device_Init+0x334>)
 800c270:	2200      	movs	r2, #0
 800c272:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800c274:	4b7e      	ldr	r3, [pc, #504]	@ (800c470 <Device_Init+0x338>)
 800c276:	2200      	movs	r2, #0
 800c278:	711a      	strb	r2, [r3, #4]
 800c27a:	e008      	b.n	800c28e <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800c27c:	4b7b      	ldr	r3, [pc, #492]	@ (800c46c <Device_Init+0x334>)
 800c27e:	2201      	movs	r2, #1
 800c280:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800c282:	4a85      	ldr	r2, [pc, #532]	@ (800c498 <Device_Init+0x360>)
 800c284:	4b7c      	ldr	r3, [pc, #496]	@ (800c478 <Device_Init+0x340>)
 800c286:	0019      	movs	r1, r3
 800c288:	2003      	movs	r0, #3
 800c28a:	f006 fa19 	bl	80126c0 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800c28e:	4b77      	ldr	r3, [pc, #476]	@ (800c46c <Device_Init+0x334>)
 800c290:	785b      	ldrb	r3, [r3, #1]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d009      	beq.n	800c2aa <Device_Init+0x172>
 800c296:	4b75      	ldr	r3, [pc, #468]	@ (800c46c <Device_Init+0x334>)
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d005      	beq.n	800c2aa <Device_Init+0x172>
    SetDBLED(false, true, false);
 800c29e:	2200      	movs	r2, #0
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	2000      	movs	r0, #0
 800c2a4:	f004 ff7c 	bl	80111a0 <SetDBLED>
 800c2a8:	e018      	b.n	800c2dc <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	2001      	movs	r0, #1
 800c2b0:	f004 ff76 	bl	80111a0 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800c2b4:	4b79      	ldr	r3, [pc, #484]	@ (800c49c <Device_Init+0x364>)
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2101      	movs	r1, #1
 800c2ba:	0018      	movs	r0, r3
 800c2bc:	f008 f9c7 	bl	801464e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800c2c0:	2380      	movs	r3, #128	@ 0x80
 800c2c2:	005b      	lsls	r3, r3, #1
 800c2c4:	4875      	ldr	r0, [pc, #468]	@ (800c49c <Device_Init+0x364>)
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	0019      	movs	r1, r3
 800c2ca:	f008 f9c0 	bl	801464e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800c2ce:	2380      	movs	r3, #128	@ 0x80
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4872      	ldr	r0, [pc, #456]	@ (800c49c <Device_Init+0x364>)
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	0019      	movs	r1, r3
 800c2d8:	f008 f9b9 	bl	801464e <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800c2dc:	4b64      	ldr	r3, [pc, #400]	@ (800c470 <Device_Init+0x338>)
 800c2de:	78db      	ldrb	r3, [r3, #3]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d028      	beq.n	800c336 <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800c2e4:	4a6e      	ldr	r2, [pc, #440]	@ (800c4a0 <Device_Init+0x368>)
 800c2e6:	4b6f      	ldr	r3, [pc, #444]	@ (800c4a4 <Device_Init+0x36c>)
 800c2e8:	0019      	movs	r1, r3
 800c2ea:	2002      	movs	r0, #2
 800c2ec:	f006 f9e8 	bl	80126c0 <CreateLine>
    if (!enableMicrophone(true)) {
 800c2f0:	2001      	movs	r0, #1
 800c2f2:	f004 f853 	bl	801039c <enableMicrophone>
 800c2f6:	0003      	movs	r3, r0
 800c2f8:	001a      	movs	r2, r3
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	4053      	eors	r3, r2
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00c      	beq.n	800c31e <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800c304:	4a68      	ldr	r2, [pc, #416]	@ (800c4a8 <Device_Init+0x370>)
 800c306:	4b58      	ldr	r3, [pc, #352]	@ (800c468 <Device_Init+0x330>)
 800c308:	0019      	movs	r1, r3
 800c30a:	2001      	movs	r0, #1
 800c30c:	f006 f9d8 	bl	80126c0 <CreateLine>
      SensorProbe.MIC_Present = false;
 800c310:	4b56      	ldr	r3, [pc, #344]	@ (800c46c <Device_Init+0x334>)
 800c312:	2200      	movs	r2, #0
 800c314:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800c316:	4b56      	ldr	r3, [pc, #344]	@ (800c470 <Device_Init+0x338>)
 800c318:	2200      	movs	r2, #0
 800c31a:	70da      	strb	r2, [r3, #3]
 800c31c:	e00b      	b.n	800c336 <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800c31e:	4b53      	ldr	r3, [pc, #332]	@ (800c46c <Device_Init+0x334>)
 800c320:	2201      	movs	r2, #1
 800c322:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800c324:	4b52      	ldr	r3, [pc, #328]	@ (800c470 <Device_Init+0x338>)
 800c326:	2201      	movs	r2, #1
 800c328:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800c32a:	4a60      	ldr	r2, [pc, #384]	@ (800c4ac <Device_Init+0x374>)
 800c32c:	4b52      	ldr	r3, [pc, #328]	@ (800c478 <Device_Init+0x340>)
 800c32e:	0019      	movs	r1, r3
 800c330:	2003      	movs	r0, #3
 800c332:	f006 f9c5 	bl	80126c0 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800c336:	f000 ff69 	bl	800d20c <probe_sen5x>
 800c33a:	1e03      	subs	r3, r0, #0
 800c33c:	d122      	bne.n	800c384 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800c33e:	4a5c      	ldr	r2, [pc, #368]	@ (800c4b0 <Device_Init+0x378>)
 800c340:	4b4d      	ldr	r3, [pc, #308]	@ (800c478 <Device_Init+0x340>)
 800c342:	0019      	movs	r1, r3
 800c344:	2003      	movs	r0, #3
 800c346:	f006 f9bb 	bl	80126c0 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800c34a:	4b48      	ldr	r3, [pc, #288]	@ (800c46c <Device_Init+0x334>)
 800c34c:	2201      	movs	r2, #1
 800c34e:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800c350:	4b47      	ldr	r3, [pc, #284]	@ (800c470 <Device_Init+0x338>)
 800c352:	2201      	movs	r2, #1
 800c354:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800c356:	4b57      	ldr	r3, [pc, #348]	@ (800c4b4 <Device_Init+0x37c>)
 800c358:	791b      	ldrb	r3, [r3, #4]
 800c35a:	2b34      	cmp	r3, #52	@ 0x34
 800c35c:	d003      	beq.n	800c366 <Device_Init+0x22e>
 800c35e:	4b55      	ldr	r3, [pc, #340]	@ (800c4b4 <Device_Init+0x37c>)
 800c360:	791b      	ldrb	r3, [r3, #4]
 800c362:	2b35      	cmp	r3, #53	@ 0x35
 800c364:	d11c      	bne.n	800c3a0 <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800c366:	4a54      	ldr	r2, [pc, #336]	@ (800c4b8 <Device_Init+0x380>)
 800c368:	4b4e      	ldr	r3, [pc, #312]	@ (800c4a4 <Device_Init+0x36c>)
 800c36a:	0019      	movs	r1, r3
 800c36c:	2002      	movs	r0, #2
 800c36e:	f006 f9a7 	bl	80126c0 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800c372:	4b3f      	ldr	r3, [pc, #252]	@ (800c470 <Device_Init+0x338>)
 800c374:	2200      	movs	r2, #0
 800c376:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800c378:	4b3c      	ldr	r3, [pc, #240]	@ (800c46c <Device_Init+0x334>)
 800c37a:	2200      	movs	r2, #0
 800c37c:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800c37e:	f003 fdc3 	bl	800ff08 <SGP_SoftReset>
 800c382:	e00d      	b.n	800c3a0 <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800c384:	f000 ff0c 	bl	800d1a0 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800c388:	4a4c      	ldr	r2, [pc, #304]	@ (800c4bc <Device_Init+0x384>)
 800c38a:	4b3b      	ldr	r3, [pc, #236]	@ (800c478 <Device_Init+0x340>)
 800c38c:	0019      	movs	r1, r3
 800c38e:	2003      	movs	r0, #3
 800c390:	f006 f996 	bl	80126c0 <CreateLine>
    SensorProbe.PM_Present = false;
 800c394:	4b35      	ldr	r3, [pc, #212]	@ (800c46c <Device_Init+0x334>)
 800c396:	2200      	movs	r2, #0
 800c398:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800c39a:	4b35      	ldr	r3, [pc, #212]	@ (800c470 <Device_Init+0x338>)
 800c39c:	2200      	movs	r2, #0
 800c39e:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800c3a0:	4b32      	ldr	r3, [pc, #200]	@ (800c46c <Device_Init+0x334>)
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d001      	beq.n	800c3ac <Device_Init+0x274>
 800c3a8:	4b45      	ldr	r3, [pc, #276]	@ (800c4c0 <Device_Init+0x388>)
 800c3aa:	e000      	b.n	800c3ae <Device_Init+0x276>
 800c3ac:	4b45      	ldr	r3, [pc, #276]	@ (800c4c4 <Device_Init+0x38c>)
 800c3ae:	4a46      	ldr	r2, [pc, #280]	@ (800c4c8 <Device_Init+0x390>)
 800c3b0:	493c      	ldr	r1, [pc, #240]	@ (800c4a4 <Device_Init+0x36c>)
 800c3b2:	2002      	movs	r0, #2
 800c3b4:	f006 f984 	bl	80126c0 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800c3b8:	4b2c      	ldr	r3, [pc, #176]	@ (800c46c <Device_Init+0x334>)
 800c3ba:	785b      	ldrb	r3, [r3, #1]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d001      	beq.n	800c3c4 <Device_Init+0x28c>
 800c3c0:	4b3f      	ldr	r3, [pc, #252]	@ (800c4c0 <Device_Init+0x388>)
 800c3c2:	e000      	b.n	800c3c6 <Device_Init+0x28e>
 800c3c4:	4b3f      	ldr	r3, [pc, #252]	@ (800c4c4 <Device_Init+0x38c>)
 800c3c6:	4a41      	ldr	r2, [pc, #260]	@ (800c4cc <Device_Init+0x394>)
 800c3c8:	4936      	ldr	r1, [pc, #216]	@ (800c4a4 <Device_Init+0x36c>)
 800c3ca:	2002      	movs	r0, #2
 800c3cc:	f006 f978 	bl	80126c0 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800c3d0:	4b26      	ldr	r3, [pc, #152]	@ (800c46c <Device_Init+0x334>)
 800c3d2:	789b      	ldrb	r3, [r3, #2]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <Device_Init+0x2a4>
 800c3d8:	4b39      	ldr	r3, [pc, #228]	@ (800c4c0 <Device_Init+0x388>)
 800c3da:	e000      	b.n	800c3de <Device_Init+0x2a6>
 800c3dc:	4b39      	ldr	r3, [pc, #228]	@ (800c4c4 <Device_Init+0x38c>)
 800c3de:	4a3c      	ldr	r2, [pc, #240]	@ (800c4d0 <Device_Init+0x398>)
 800c3e0:	4930      	ldr	r1, [pc, #192]	@ (800c4a4 <Device_Init+0x36c>)
 800c3e2:	2002      	movs	r0, #2
 800c3e4:	f006 f96c 	bl	80126c0 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800c3e8:	4b20      	ldr	r3, [pc, #128]	@ (800c46c <Device_Init+0x334>)
 800c3ea:	791b      	ldrb	r3, [r3, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <Device_Init+0x2bc>
 800c3f0:	4b33      	ldr	r3, [pc, #204]	@ (800c4c0 <Device_Init+0x388>)
 800c3f2:	e000      	b.n	800c3f6 <Device_Init+0x2be>
 800c3f4:	4b33      	ldr	r3, [pc, #204]	@ (800c4c4 <Device_Init+0x38c>)
 800c3f6:	4a37      	ldr	r2, [pc, #220]	@ (800c4d4 <Device_Init+0x39c>)
 800c3f8:	492a      	ldr	r1, [pc, #168]	@ (800c4a4 <Device_Init+0x36c>)
 800c3fa:	2002      	movs	r0, #2
 800c3fc:	f006 f960 	bl	80126c0 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800c400:	4b1a      	ldr	r3, [pc, #104]	@ (800c46c <Device_Init+0x334>)
 800c402:	78db      	ldrb	r3, [r3, #3]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d001      	beq.n	800c40c <Device_Init+0x2d4>
 800c408:	4b2d      	ldr	r3, [pc, #180]	@ (800c4c0 <Device_Init+0x388>)
 800c40a:	e000      	b.n	800c40e <Device_Init+0x2d6>
 800c40c:	4b2d      	ldr	r3, [pc, #180]	@ (800c4c4 <Device_Init+0x38c>)
 800c40e:	4a32      	ldr	r2, [pc, #200]	@ (800c4d8 <Device_Init+0x3a0>)
 800c410:	4924      	ldr	r1, [pc, #144]	@ (800c4a4 <Device_Init+0x36c>)
 800c412:	2002      	movs	r0, #2
 800c414:	f006 f954 	bl	80126c0 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800c418:	4b14      	ldr	r3, [pc, #80]	@ (800c46c <Device_Init+0x334>)
 800c41a:	795b      	ldrb	r3, [r3, #5]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d001      	beq.n	800c424 <Device_Init+0x2ec>
 800c420:	4b27      	ldr	r3, [pc, #156]	@ (800c4c0 <Device_Init+0x388>)
 800c422:	e000      	b.n	800c426 <Device_Init+0x2ee>
 800c424:	4b27      	ldr	r3, [pc, #156]	@ (800c4c4 <Device_Init+0x38c>)
 800c426:	4a2d      	ldr	r2, [pc, #180]	@ (800c4dc <Device_Init+0x3a4>)
 800c428:	491e      	ldr	r1, [pc, #120]	@ (800c4a4 <Device_Init+0x36c>)
 800c42a:	2002      	movs	r0, #2
 800c42c:	f006 f948 	bl	80126c0 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800c430:	4b0e      	ldr	r3, [pc, #56]	@ (800c46c <Device_Init+0x334>)
 800c432:	799b      	ldrb	r3, [r3, #6]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d001      	beq.n	800c43c <Device_Init+0x304>
 800c438:	4b21      	ldr	r3, [pc, #132]	@ (800c4c0 <Device_Init+0x388>)
 800c43a:	e000      	b.n	800c43e <Device_Init+0x306>
 800c43c:	4b21      	ldr	r3, [pc, #132]	@ (800c4c4 <Device_Init+0x38c>)
 800c43e:	4a28      	ldr	r2, [pc, #160]	@ (800c4e0 <Device_Init+0x3a8>)
 800c440:	4918      	ldr	r1, [pc, #96]	@ (800c4a4 <Device_Init+0x36c>)
 800c442:	2002      	movs	r0, #2
 800c444:	f006 f93c 	bl	80126c0 <CreateLine>
  ESP_Init(espUart);
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	0018      	movs	r0, r3
 800c44c:	f7f8 faec 	bl	8004a28 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800c450:	4a24      	ldr	r2, [pc, #144]	@ (800c4e4 <Device_Init+0x3ac>)
 800c452:	4b09      	ldr	r3, [pc, #36]	@ (800c478 <Device_Init+0x340>)
 800c454:	0019      	movs	r1, r3
 800c456:	2003      	movs	r0, #3
 800c458:	f006 f932 	bl	80126c0 <CreateLine>
}
 800c45c:	46c0      	nop			@ (mov r8, r8)
 800c45e:	46bd      	mov	sp, r7
 800c460:	b004      	add	sp, #16
 800c462:	bd80      	pop	{r7, pc}
 800c464:	0802b50c 	.word	0x0802b50c
 800c468:	0802b53c 	.word	0x0802b53c
 800c46c:	20000e54 	.word	0x20000e54
 800c470:	20000e4c 	.word	0x20000e4c
 800c474:	0802b540 	.word	0x0802b540
 800c478:	0802b508 	.word	0x0802b508
 800c47c:	0802b56c 	.word	0x0802b56c
 800c480:	0802b5a0 	.word	0x0802b5a0
 800c484:	0802b5d0 	.word	0x0802b5d0
 800c488:	0802b5ec 	.word	0x0802b5ec
 800c48c:	0802b604 	.word	0x0802b604
 800c490:	0802b620 	.word	0x0802b620
 800c494:	0802b638 	.word	0x0802b638
 800c498:	0802b66c 	.word	0x0802b66c
 800c49c:	50000400 	.word	0x50000400
 800c4a0:	0802b6a0 	.word	0x0802b6a0
 800c4a4:	0802b6c4 	.word	0x0802b6c4
 800c4a8:	0802b6c8 	.word	0x0802b6c8
 800c4ac:	0802b6f4 	.word	0x0802b6f4
 800c4b0:	0802b720 	.word	0x0802b720
 800c4b4:	20000ef0 	.word	0x20000ef0
 800c4b8:	0802b738 	.word	0x0802b738
 800c4bc:	0802b788 	.word	0x0802b788
 800c4c0:	0802b7ac 	.word	0x0802b7ac
 800c4c4:	0802b7b0 	.word	0x0802b7b0
 800c4c8:	0802b7b4 	.word	0x0802b7b4
 800c4cc:	0802b7d0 	.word	0x0802b7d0
 800c4d0:	0802b7ec 	.word	0x0802b7ec
 800c4d4:	0802b80c 	.word	0x0802b80c
 800c4d8:	0802b82c 	.word	0x0802b82c
 800c4dc:	0802b84c 	.word	0x0802b84c
 800c4e0:	0802b868 	.word	0x0802b868
 800c4e4:	0802b884 	.word	0x0802b884

0800c4e8 <Device_Test>:

void Device_Test(){
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800c4ec:	4b34      	ldr	r3, [pc, #208]	@ (800c5c0 <Device_Test+0xd8>)
 800c4ee:	799b      	ldrb	r3, [r3, #6]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	4053      	eors	r3, r2
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d027      	beq.n	800c54a <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800c4fa:	f000 fbb7 	bl	800cc6c <MIC_TestMeasurementDone>
 800c4fe:	1e03      	subs	r3, r0, #0
 800c500:	d011      	beq.n	800c526 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800c502:	4b2f      	ldr	r3, [pc, #188]	@ (800c5c0 <Device_Test+0xd8>)
 800c504:	2201      	movs	r2, #1
 800c506:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800c508:	4b2e      	ldr	r3, [pc, #184]	@ (800c5c4 <Device_Test+0xdc>)
 800c50a:	2201      	movs	r2, #1
 800c50c:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800c50e:	f004 fdcb 	bl	80110a8 <Calculate_LED_ON>
 800c512:	0003      	movs	r3, r0
 800c514:	0019      	movs	r1, r3
 800c516:	23fa      	movs	r3, #250	@ 0xfa
 800c518:	011a      	lsls	r2, r3, #4
 800c51a:	23fa      	movs	r3, #250	@ 0xfa
 800c51c:	011b      	lsls	r3, r3, #4
 800c51e:	0018      	movs	r0, r3
 800c520:	f004 fe0a 	bl	8011138 <SetStatusLED>
 800c524:	e011      	b.n	800c54a <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800c526:	f003 ff15 	bl	8010354 <micSettlingComplete>
 800c52a:	1e03      	subs	r3, r0, #0
 800c52c:	d00d      	beq.n	800c54a <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800c52e:	4b25      	ldr	r3, [pc, #148]	@ (800c5c4 <Device_Test+0xdc>)
 800c530:	2201      	movs	r2, #1
 800c532:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800c534:	f004 fdb8 	bl	80110a8 <Calculate_LED_ON>
 800c538:	0003      	movs	r3, r0
 800c53a:	0018      	movs	r0, r3
 800c53c:	23fa      	movs	r3, #250	@ 0xfa
 800c53e:	011a      	lsls	r2, r3, #4
 800c540:	23fa      	movs	r3, #250	@ 0xfa
 800c542:	011b      	lsls	r3, r3, #4
 800c544:	0019      	movs	r1, r3
 800c546:	f004 fdf7 	bl	8011138 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800c54a:	4b1d      	ldr	r3, [pc, #116]	@ (800c5c0 <Device_Test+0xd8>)
 800c54c:	79db      	ldrb	r3, [r3, #7]
 800c54e:	2201      	movs	r2, #1
 800c550:	4053      	eors	r3, r2
 800c552:	b2db      	uxtb	r3, r3
 800c554:	2b00      	cmp	r3, #0
 800c556:	d001      	beq.n	800c55c <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800c558:	f7fa fb00 	bl	8006b5c <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800c55c:	4b18      	ldr	r3, [pc, #96]	@ (800c5c0 <Device_Test+0xd8>)
 800c55e:	79db      	ldrb	r3, [r3, #7]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d003      	beq.n	800c56c <Device_Test+0x84>
 800c564:	4b16      	ldr	r3, [pc, #88]	@ (800c5c0 <Device_Test+0xd8>)
 800c566:	799b      	ldrb	r3, [r3, #6]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d106      	bne.n	800c57a <Device_Test+0x92>
 800c56c:	4b16      	ldr	r3, [pc, #88]	@ (800c5c8 <Device_Test+0xe0>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	0018      	movs	r0, r3
 800c572:	f006 f84f 	bl	8012614 <TimestampIsReached>
 800c576:	1e03      	subs	r3, r0, #0
 800c578:	d01f      	beq.n	800c5ba <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800c57a:	4b11      	ldr	r3, [pc, #68]	@ (800c5c0 <Device_Test+0xd8>)
 800c57c:	79db      	ldrb	r3, [r3, #7]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d001      	beq.n	800c586 <Device_Test+0x9e>
 800c582:	4b12      	ldr	r3, [pc, #72]	@ (800c5cc <Device_Test+0xe4>)
 800c584:	e000      	b.n	800c588 <Device_Test+0xa0>
 800c586:	4b12      	ldr	r3, [pc, #72]	@ (800c5d0 <Device_Test+0xe8>)
 800c588:	4a12      	ldr	r2, [pc, #72]	@ (800c5d4 <Device_Test+0xec>)
 800c58a:	4913      	ldr	r1, [pc, #76]	@ (800c5d8 <Device_Test+0xf0>)
 800c58c:	2002      	movs	r0, #2
 800c58e:	f006 f897 	bl	80126c0 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800c592:	4b0b      	ldr	r3, [pc, #44]	@ (800c5c0 <Device_Test+0xd8>)
 800c594:	799b      	ldrb	r3, [r3, #6]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d001      	beq.n	800c59e <Device_Test+0xb6>
 800c59a:	4b0c      	ldr	r3, [pc, #48]	@ (800c5cc <Device_Test+0xe4>)
 800c59c:	e000      	b.n	800c5a0 <Device_Test+0xb8>
 800c59e:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d0 <Device_Test+0xe8>)
 800c5a0:	4a0e      	ldr	r2, [pc, #56]	@ (800c5dc <Device_Test+0xf4>)
 800c5a2:	490d      	ldr	r1, [pc, #52]	@ (800c5d8 <Device_Test+0xf0>)
 800c5a4:	2002      	movs	r0, #2
 800c5a6:	f006 f88b 	bl	80126c0 <CreateLine>
    Info("Test completed");
 800c5aa:	4a0d      	ldr	r2, [pc, #52]	@ (800c5e0 <Device_Test+0xf8>)
 800c5ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c5d8 <Device_Test+0xf0>)
 800c5ae:	0019      	movs	r1, r3
 800c5b0:	2002      	movs	r0, #2
 800c5b2:	f006 f885 	bl	80126c0 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800c5b6:	f7ff f901 	bl	800b7bc <SetTestDone>
  }
}
 800c5ba:	46c0      	nop			@ (mov r8, r8)
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	20000e54 	.word	0x20000e54
 800c5c4:	20000e4c 	.word	0x20000e4c
 800c5c8:	20000e44 	.word	0x20000e44
 800c5cc:	0802b8a8 	.word	0x0802b8a8
 800c5d0:	0802b8b0 	.word	0x0802b8b0
 800c5d4:	0802b8b8 	.word	0x0802b8b8
 800c5d8:	0802b6c4 	.word	0x0802b6c4
 800c5dc:	0802b8cc 	.word	0x0802b8cc
 800c5e0:	0802b8e0 	.word	0x0802b8e0

0800c5e4 <AllDevicesReady>:

bool AllDevicesReady() {
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 800c5ea:	4b56      	ldr	r3, [pc, #344]	@ (800c744 <AllDevicesReady+0x160>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	0018      	movs	r0, r3
 800c5f0:	f006 f810 	bl	8012614 <TimestampIsReached>
 800c5f4:	1e03      	subs	r3, r0, #0
 800c5f6:	d100      	bne.n	800c5fa <AllDevicesReady+0x16>
 800c5f8:	e09f      	b.n	800c73a <AllDevicesReady+0x156>
    if (!sensorsdisablereq) {
 800c5fa:	4b53      	ldr	r3, [pc, #332]	@ (800c748 <AllDevicesReady+0x164>)
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	2201      	movs	r2, #1
 800c600:	4053      	eors	r3, r2
 800c602:	b2db      	uxtb	r3, r3
 800c604:	2b00      	cmp	r3, #0
 800c606:	d008      	beq.n	800c61a <AllDevicesReady+0x36>
      Debug("Requesting all device ready");
 800c608:	4a50      	ldr	r2, [pc, #320]	@ (800c74c <AllDevicesReady+0x168>)
 800c60a:	4b51      	ldr	r3, [pc, #324]	@ (800c750 <AllDevicesReady+0x16c>)
 800c60c:	0019      	movs	r1, r3
 800c60e:	2003      	movs	r0, #3
 800c610:	f006 f856 	bl	80126c0 <CreateLine>
      sensorsdisablereq = true;
 800c614:	4b4c      	ldr	r3, [pc, #304]	@ (800c748 <AllDevicesReady+0x164>)
 800c616:	2201      	movs	r2, #1
 800c618:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800c61a:	4b4e      	ldr	r3, [pc, #312]	@ (800c754 <AllDevicesReady+0x170>)
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	2b06      	cmp	r3, #6
 800c620:	d102      	bne.n	800c628 <AllDevicesReady+0x44>
      Sensor.HT_measurementEnabled = false;
 800c622:	4b4d      	ldr	r3, [pc, #308]	@ (800c758 <AllDevicesReady+0x174>)
 800c624:	2200      	movs	r2, #0
 800c626:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800c628:	4b4c      	ldr	r3, [pc, #304]	@ (800c75c <AllDevicesReady+0x178>)
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	2b05      	cmp	r3, #5
 800c62e:	d006      	beq.n	800c63e <AllDevicesReady+0x5a>
 800c630:	4b4b      	ldr	r3, [pc, #300]	@ (800c760 <AllDevicesReady+0x17c>)
 800c632:	789b      	ldrb	r3, [r3, #2]
 800c634:	2201      	movs	r2, #1
 800c636:	4053      	eors	r3, r2
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d002      	beq.n	800c644 <AllDevicesReady+0x60>
      Sensor.AHT_measurementEnabled = false;
 800c63e:	4b46      	ldr	r3, [pc, #280]	@ (800c758 <AllDevicesReady+0x174>)
 800c640:	2200      	movs	r2, #0
 800c642:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800c644:	4b47      	ldr	r3, [pc, #284]	@ (800c764 <AllDevicesReady+0x180>)
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	2b08      	cmp	r3, #8
 800c64a:	d006      	beq.n	800c65a <AllDevicesReady+0x76>
 800c64c:	4b44      	ldr	r3, [pc, #272]	@ (800c760 <AllDevicesReady+0x17c>)
 800c64e:	791b      	ldrb	r3, [r3, #4]
 800c650:	2201      	movs	r2, #1
 800c652:	4053      	eors	r3, r2
 800c654:	b2db      	uxtb	r3, r3
 800c656:	2b00      	cmp	r3, #0
 800c658:	d002      	beq.n	800c660 <AllDevicesReady+0x7c>
      Sensor.BMP_measurementEnabled = false;
 800c65a:	4b3f      	ldr	r3, [pc, #252]	@ (800c758 <AllDevicesReady+0x174>)
 800c65c:	2200      	movs	r2, #0
 800c65e:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800c660:	4b41      	ldr	r3, [pc, #260]	@ (800c768 <AllDevicesReady+0x184>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b08      	cmp	r3, #8
 800c666:	d006      	beq.n	800c676 <AllDevicesReady+0x92>
 800c668:	4b3d      	ldr	r3, [pc, #244]	@ (800c760 <AllDevicesReady+0x17c>)
 800c66a:	78db      	ldrb	r3, [r3, #3]
 800c66c:	2201      	movs	r2, #1
 800c66e:	4053      	eors	r3, r2
 800c670:	b2db      	uxtb	r3, r3
 800c672:	2b00      	cmp	r3, #0
 800c674:	d002      	beq.n	800c67c <AllDevicesReady+0x98>
      Sensor.ENS_measurementEnabled = false;
 800c676:	4b38      	ldr	r3, [pc, #224]	@ (800c758 <AllDevicesReady+0x174>)
 800c678:	2200      	movs	r2, #0
 800c67a:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800c67c:	4b3b      	ldr	r3, [pc, #236]	@ (800c76c <AllDevicesReady+0x188>)
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	2b07      	cmp	r3, #7
 800c682:	d006      	beq.n	800c692 <AllDevicesReady+0xae>
 800c684:	4b36      	ldr	r3, [pc, #216]	@ (800c760 <AllDevicesReady+0x17c>)
 800c686:	7a1b      	ldrb	r3, [r3, #8]
 800c688:	2201      	movs	r2, #1
 800c68a:	4053      	eors	r3, r2
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d002      	beq.n	800c698 <AllDevicesReady+0xb4>
      Sensor.VOC_measurementEnabled = false;
 800c692:	4b31      	ldr	r3, [pc, #196]	@ (800c758 <AllDevicesReady+0x174>)
 800c694:	2200      	movs	r2, #0
 800c696:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X)) {
 800c698:	4b35      	ldr	r3, [pc, #212]	@ (800c770 <AllDevicesReady+0x18c>)
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d003      	beq.n	800c6a8 <AllDevicesReady+0xc4>
 800c6a0:	4b33      	ldr	r3, [pc, #204]	@ (800c770 <AllDevicesReady+0x18c>)
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	2b03      	cmp	r3, #3
 800c6a6:	d102      	bne.n	800c6ae <AllDevicesReady+0xca>
      Sensor.PM_measurementEnabled = false;
 800c6a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c758 <AllDevicesReady+0x174>)
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800c6ae:	4b31      	ldr	r3, [pc, #196]	@ (800c774 <AllDevicesReady+0x190>)
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	2b03      	cmp	r3, #3
 800c6b4:	d102      	bne.n	800c6bc <AllDevicesReady+0xd8>
      Sensor.MIC_measurementEnabled = false;
 800c6b6:	4b28      	ldr	r3, [pc, #160]	@ (800c758 <AllDevicesReady+0x174>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800c6bc:	4b2e      	ldr	r3, [pc, #184]	@ (800c778 <AllDevicesReady+0x194>)
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	2b09      	cmp	r3, #9
 800c6c2:	d003      	beq.n	800c6cc <AllDevicesReady+0xe8>
 800c6c4:	4b2c      	ldr	r3, [pc, #176]	@ (800c778 <AllDevicesReady+0x194>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	2b02      	cmp	r3, #2
 800c6ca:	d136      	bne.n	800c73a <AllDevicesReady+0x156>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800c6cc:	4b22      	ldr	r3, [pc, #136]	@ (800c758 <AllDevicesReady+0x174>)
 800c6ce:	781a      	ldrb	r2, [r3, #0]
 800c6d0:	4b21      	ldr	r3, [pc, #132]	@ (800c758 <AllDevicesReady+0x174>)
 800c6d2:	785b      	ldrb	r3, [r3, #1]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	b2da      	uxtb	r2, r3
 800c6d8:	4b1f      	ldr	r3, [pc, #124]	@ (800c758 <AllDevicesReady+0x174>)
 800c6da:	791b      	ldrb	r3, [r3, #4]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	4b1d      	ldr	r3, [pc, #116]	@ (800c758 <AllDevicesReady+0x174>)
 800c6e2:	795b      	ldrb	r3, [r3, #5]
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800c6e8:	4b1b      	ldr	r3, [pc, #108]	@ (800c758 <AllDevicesReady+0x174>)
 800c6ea:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800c6f0:	4b19      	ldr	r3, [pc, #100]	@ (800c758 <AllDevicesReady+0x174>)
 800c6f2:	789b      	ldrb	r3, [r3, #2]
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	b2da      	uxtb	r2, r3
 800c6f8:	4b17      	ldr	r3, [pc, #92]	@ (800c758 <AllDevicesReady+0x174>)
 800c6fa:	78db      	ldrb	r3, [r3, #3]
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	1e5a      	subs	r2, r3, #1
 800c702:	4193      	sbcs	r3, r2
 800c704:	b2db      	uxtb	r3, r3
 800c706:	2201      	movs	r2, #1
 800c708:	4053      	eors	r3, r2
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800c70e:	1dfb      	adds	r3, r7, #7
 800c710:	701a      	strb	r2, [r3, #0]
 800c712:	781a      	ldrb	r2, [r3, #0]
 800c714:	2101      	movs	r1, #1
 800c716:	400a      	ands	r2, r1
 800c718:	701a      	strb	r2, [r3, #0]

      if (!status) {
 800c71a:	1dfb      	adds	r3, r7, #7
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	2201      	movs	r2, #1
 800c720:	4053      	eors	r3, r2
 800c722:	b2db      	uxtb	r3, r3
 800c724:	2b00      	cmp	r3, #0
 800c726:	d105      	bne.n	800c734 <AllDevicesReady+0x150>
//        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
//          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled);
      }
      else {
        Debug("All sensors in wait");
 800c728:	4a14      	ldr	r2, [pc, #80]	@ (800c77c <AllDevicesReady+0x198>)
 800c72a:	4b09      	ldr	r3, [pc, #36]	@ (800c750 <AllDevicesReady+0x16c>)
 800c72c:	0019      	movs	r1, r3
 800c72e:	2003      	movs	r0, #3
 800c730:	f005 ffc6 	bl	80126c0 <CreateLine>
      }

      return status;
 800c734:	1dfb      	adds	r3, r7, #7
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	e000      	b.n	800c73c <AllDevicesReady+0x158>
    }
  }
  return false;
 800c73a:	2300      	movs	r3, #0
}
 800c73c:	0018      	movs	r0, r3
 800c73e:	46bd      	mov	sp, r7
 800c740:	b002      	add	sp, #8
 800c742:	bd80      	pop	{r7, pc}
 800c744:	20000e44 	.word	0x20000e44
 800c748:	20000e63 	.word	0x20000e63
 800c74c:	0802b8f0 	.word	0x0802b8f0
 800c750:	0802b508 	.word	0x0802b508
 800c754:	20000e5f 	.word	0x20000e5f
 800c758:	20000e4c 	.word	0x20000e4c
 800c75c:	20000e60 	.word	0x20000e60
 800c760:	20000e54 	.word	0x20000e54
 800c764:	20000e61 	.word	0x20000e61
 800c768:	20000e62 	.word	0x20000e62
 800c76c:	20000e5e 	.word	0x20000e5e
 800c770:	2000009d 	.word	0x2000009d
 800c774:	20000e30 	.word	0x20000e30
 800c778:	20000e31 	.word	0x20000e31
 800c77c:	0802b90c 	.word	0x0802b90c

0800c780 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800c780:	b580      	push	{r7, lr}
 800c782:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800c784:	4b23      	ldr	r3, [pc, #140]	@ (800c814 <EnabledConnectedDevices+0x94>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d002      	beq.n	800c792 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800c78c:	4b22      	ldr	r3, [pc, #136]	@ (800c818 <EnabledConnectedDevices+0x98>)
 800c78e:	2201      	movs	r2, #1
 800c790:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.AHT20_Present) {
 800c792:	4b20      	ldr	r3, [pc, #128]	@ (800c814 <EnabledConnectedDevices+0x94>)
 800c794:	789b      	ldrb	r3, [r3, #2]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d002      	beq.n	800c7a0 <EnabledConnectedDevices+0x20>
    Sensor.AHT_measurementEnabled = true;
 800c79a:	4b1f      	ldr	r3, [pc, #124]	@ (800c818 <EnabledConnectedDevices+0x98>)
 800c79c:	2201      	movs	r2, #1
 800c79e:	711a      	strb	r2, [r3, #4]
  }
  if (SensorProbe.BMP280_Present) {
 800c7a0:	4b1c      	ldr	r3, [pc, #112]	@ (800c814 <EnabledConnectedDevices+0x94>)
 800c7a2:	791b      	ldrb	r3, [r3, #4]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d002      	beq.n	800c7ae <EnabledConnectedDevices+0x2e>
    Sensor.BMP_measurementEnabled = true;
 800c7a8:	4b1b      	ldr	r3, [pc, #108]	@ (800c818 <EnabledConnectedDevices+0x98>)
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800c7ae:	4b19      	ldr	r3, [pc, #100]	@ (800c814 <EnabledConnectedDevices+0x94>)
 800c7b0:	78db      	ldrb	r3, [r3, #3]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d002      	beq.n	800c7bc <EnabledConnectedDevices+0x3c>
    Sensor.ENS_measurementEnabled = true;
 800c7b6:	4b18      	ldr	r3, [pc, #96]	@ (800c818 <EnabledConnectedDevices+0x98>)
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800c7bc:	4b15      	ldr	r3, [pc, #84]	@ (800c814 <EnabledConnectedDevices+0x94>)
 800c7be:	785b      	ldrb	r3, [r3, #1]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d006      	beq.n	800c7d2 <EnabledConnectedDevices+0x52>
 800c7c4:	4b13      	ldr	r3, [pc, #76]	@ (800c814 <EnabledConnectedDevices+0x94>)
 800c7c6:	7a1b      	ldrb	r3, [r3, #8]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d002      	beq.n	800c7d2 <EnabledConnectedDevices+0x52>
    Sensor.VOC_measurementEnabled = true;
 800c7cc:	4b12      	ldr	r3, [pc, #72]	@ (800c818 <EnabledConnectedDevices+0x98>)
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800c7d2:	4b10      	ldr	r3, [pc, #64]	@ (800c814 <EnabledConnectedDevices+0x94>)
 800c7d4:	795b      	ldrb	r3, [r3, #5]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d002      	beq.n	800c7e0 <EnabledConnectedDevices+0x60>
    Sensor.PM_measurementEnabled = true;
 800c7da:	4b0f      	ldr	r3, [pc, #60]	@ (800c818 <EnabledConnectedDevices+0x98>)
 800c7dc:	2201      	movs	r2, #1
 800c7de:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800c7e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c814 <EnabledConnectedDevices+0x94>)
 800c7e2:	799b      	ldrb	r3, [r3, #6]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d002      	beq.n	800c7ee <EnabledConnectedDevices+0x6e>
    Sensor.MIC_measurementEnabled = true;
 800c7e8:	4b0b      	ldr	r3, [pc, #44]	@ (800c818 <EnabledConnectedDevices+0x98>)
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800c7ee:	f006 fc9d 	bl	801312c <HAL_GetTick>
 800c7f2:	0003      	movs	r3, r0
 800c7f4:	4a09      	ldr	r2, [pc, #36]	@ (800c81c <EnabledConnectedDevices+0x9c>)
 800c7f6:	189a      	adds	r2, r3, r2
 800c7f8:	4b09      	ldr	r3, [pc, #36]	@ (800c820 <EnabledConnectedDevices+0xa0>)
 800c7fa:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800c7fc:	4b09      	ldr	r3, [pc, #36]	@ (800c824 <EnabledConnectedDevices+0xa4>)
 800c7fe:	2200      	movs	r2, #0
 800c800:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800c802:	4a09      	ldr	r2, [pc, #36]	@ (800c828 <EnabledConnectedDevices+0xa8>)
 800c804:	4b09      	ldr	r3, [pc, #36]	@ (800c82c <EnabledConnectedDevices+0xac>)
 800c806:	0019      	movs	r1, r3
 800c808:	2003      	movs	r0, #3
 800c80a:	f005 ff59 	bl	80126c0 <CreateLine>
}
 800c80e:	46c0      	nop			@ (mov r8, r8)
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	20000e54 	.word	0x20000e54
 800c818:	20000e4c 	.word	0x20000e4c
 800c81c:	00124f80 	.word	0x00124f80
 800c820:	20000e44 	.word	0x20000e44
 800c824:	20000e63 	.word	0x20000e63
 800c828:	0802b920 	.word	0x0802b920
 800c82c:	0802b508 	.word	0x0802b508

0800c830 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800c830:	b580      	push	{r7, lr}
 800c832:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800c834:	4b0e      	ldr	r3, [pc, #56]	@ (800c870 <DisableConnectedDevices+0x40>)
 800c836:	2200      	movs	r2, #0
 800c838:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800c83a:	4b0d      	ldr	r3, [pc, #52]	@ (800c870 <DisableConnectedDevices+0x40>)
 800c83c:	2200      	movs	r2, #0
 800c83e:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800c840:	4b0b      	ldr	r3, [pc, #44]	@ (800c870 <DisableConnectedDevices+0x40>)
 800c842:	2200      	movs	r2, #0
 800c844:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800c846:	4b0a      	ldr	r3, [pc, #40]	@ (800c870 <DisableConnectedDevices+0x40>)
 800c848:	2200      	movs	r2, #0
 800c84a:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800c84c:	4b08      	ldr	r3, [pc, #32]	@ (800c870 <DisableConnectedDevices+0x40>)
 800c84e:	2200      	movs	r2, #0
 800c850:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800c852:	4b07      	ldr	r3, [pc, #28]	@ (800c870 <DisableConnectedDevices+0x40>)
 800c854:	2200      	movs	r2, #0
 800c856:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800c858:	4b05      	ldr	r3, [pc, #20]	@ (800c870 <DisableConnectedDevices+0x40>)
 800c85a:	2200      	movs	r2, #0
 800c85c:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800c85e:	4a05      	ldr	r2, [pc, #20]	@ (800c874 <DisableConnectedDevices+0x44>)
 800c860:	4b05      	ldr	r3, [pc, #20]	@ (800c878 <DisableConnectedDevices+0x48>)
 800c862:	0019      	movs	r1, r3
 800c864:	2003      	movs	r0, #3
 800c866:	f005 ff2b 	bl	80126c0 <CreateLine>
}
 800c86a:	46c0      	nop			@ (mov r8, r8)
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	20000e4c 	.word	0x20000e4c
 800c874:	0802b930 	.word	0x0802b930
 800c878:	0802b508 	.word	0x0802b508

0800c87c <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	0002      	movs	r2, r0
 800c884:	1dfb      	adds	r3, r7, #7
 800c886:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800c888:	4b05      	ldr	r3, [pc, #20]	@ (800c8a0 <setSensorLock+0x24>)
 800c88a:	1dfa      	adds	r2, r7, #7
 800c88c:	7812      	ldrb	r2, [r2, #0]
 800c88e:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800c890:	200a      	movs	r0, #10
 800c892:	f006 fc55 	bl	8013140 <HAL_Delay>
}
 800c896:	46c0      	nop			@ (mov r8, r8)
 800c898:	46bd      	mov	sp, r7
 800c89a:	b002      	add	sp, #8
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	46c0      	nop			@ (mov r8, r8)
 800c8a0:	20000e5d 	.word	0x20000e5d

0800c8a4 <getSensorLock>:

uint8_t getSensorLock() {
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800c8a8:	4b02      	ldr	r3, [pc, #8]	@ (800c8b4 <getSensorLock+0x10>)
 800c8aa:	781b      	ldrb	r3, [r3, #0]
}
 800c8ac:	0018      	movs	r0, r3
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	46c0      	nop			@ (mov r8, r8)
 800c8b4:	20000e5d 	.word	0x20000e5d

0800c8b8 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800c8bc:	4b1a      	ldr	r3, [pc, #104]	@ (800c928 <UpkeepI2Csensors+0x70>)
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d005      	beq.n	800c8d0 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800c8c4:	f006 fab8 	bl	8012e38 <HIDS_Upkeep>
 800c8c8:	0003      	movs	r3, r0
 800c8ca:	001a      	movs	r2, r3
 800c8cc:	4b17      	ldr	r3, [pc, #92]	@ (800c92c <UpkeepI2Csensors+0x74>)
 800c8ce:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800c8d0:	4b15      	ldr	r3, [pc, #84]	@ (800c928 <UpkeepI2Csensors+0x70>)
 800c8d2:	785b      	ldrb	r3, [r3, #1]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d005      	beq.n	800c8e4 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800c8d8:	f003 fb3c 	bl	800ff54 <SGP_Upkeep>
 800c8dc:	0003      	movs	r3, r0
 800c8de:	001a      	movs	r2, r3
 800c8e0:	4b13      	ldr	r3, [pc, #76]	@ (800c930 <UpkeepI2Csensors+0x78>)
 800c8e2:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800c8e4:	4b10      	ldr	r3, [pc, #64]	@ (800c928 <UpkeepI2Csensors+0x70>)
 800c8e6:	791b      	ldrb	r3, [r3, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d005      	beq.n	800c8f8 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800c8ec:	f7fd fb18 	bl	8009f20 <AHT_Upkeep>
 800c8f0:	0003      	movs	r3, r0
 800c8f2:	001a      	movs	r2, r3
 800c8f4:	4b0f      	ldr	r3, [pc, #60]	@ (800c934 <UpkeepI2Csensors+0x7c>)
 800c8f6:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800c8f8:	4b0b      	ldr	r3, [pc, #44]	@ (800c928 <UpkeepI2Csensors+0x70>)
 800c8fa:	795b      	ldrb	r3, [r3, #5]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d005      	beq.n	800c90c <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800c900:	f7fe f88e 	bl	800aa20 <BMP_Upkeep>
 800c904:	0003      	movs	r3, r0
 800c906:	001a      	movs	r2, r3
 800c908:	4b0b      	ldr	r3, [pc, #44]	@ (800c938 <UpkeepI2Csensors+0x80>)
 800c90a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800c90c:	4b06      	ldr	r3, [pc, #24]	@ (800c928 <UpkeepI2Csensors+0x70>)
 800c90e:	799b      	ldrb	r3, [r3, #6]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d005      	beq.n	800c920 <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800c914:	f7f7 fb88 	bl	8004028 <ENS_Upkeep>
 800c918:	0003      	movs	r3, r0
 800c91a:	001a      	movs	r2, r3
 800c91c:	4b07      	ldr	r3, [pc, #28]	@ (800c93c <UpkeepI2Csensors+0x84>)
 800c91e:	701a      	strb	r2, [r3, #0]
  }
}
 800c920:	46c0      	nop			@ (mov r8, r8)
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	46c0      	nop			@ (mov r8, r8)
 800c928:	20000e4c 	.word	0x20000e4c
 800c92c:	20000e5f 	.word	0x20000e5f
 800c930:	20000e5e 	.word	0x20000e5e
 800c934:	20000e60 	.word	0x20000e60
 800c938:	20000e61 	.word	0x20000e61
 800c93c:	20000e62 	.word	0x20000e62

0800c940 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800c940:	b580      	push	{r7, lr}
 800c942:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800c944:	4b02      	ldr	r3, [pc, #8]	@ (800c950 <ResetdBAmax+0x10>)
 800c946:	2200      	movs	r2, #0
 800c948:	601a      	str	r2, [r3, #0]
}
 800c94a:	46c0      	nop			@ (mov r8, r8)
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	20000ea8 	.word	0x20000ea8

0800c954 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800c95c:	f006 fbe6 	bl	801312c <HAL_GetTick>
 800c960:	0002      	movs	r2, r0
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	18d2      	adds	r2, r2, r3
 800c966:	4b03      	ldr	r3, [pc, #12]	@ (800c974 <setMICTimeStamp+0x20>)
 800c968:	601a      	str	r2, [r3, #0]
}
 800c96a:	46c0      	nop			@ (mov r8, r8)
 800c96c:	46bd      	mov	sp, r7
 800c96e:	b002      	add	sp, #8
 800c970:	bd80      	pop	{r7, pc}
 800c972:	46c0      	nop			@ (mov r8, r8)
 800c974:	20000eb0 	.word	0x20000eb0

0800c978 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800c978:	b580      	push	{r7, lr}
 800c97a:	af00      	add	r7, sp, #0
  counter = 0;
 800c97c:	4b05      	ldr	r3, [pc, #20]	@ (800c994 <ResetDBACalculator+0x1c>)
 800c97e:	2200      	movs	r2, #0
 800c980:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800c982:	4b05      	ldr	r3, [pc, #20]	@ (800c998 <ResetDBACalculator+0x20>)
 800c984:	2201      	movs	r2, #1
 800c986:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800c988:	4b04      	ldr	r3, [pc, #16]	@ (800c99c <ResetDBACalculator+0x24>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	701a      	strb	r2, [r3, #0]
}
 800c98e:	46c0      	nop			@ (mov r8, r8)
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	20000eac 	.word	0x20000eac
 800c998:	2000009c 	.word	0x2000009c
 800c99c:	20000ead 	.word	0x20000ead

0800c9a0 <MIC_Print>:

void MIC_Print(void) {
 800c9a0:	b5b0      	push	{r4, r5, r7, lr}
 800c9a2:	b08a      	sub	sp, #40	@ 0x28
 800c9a4:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800c9a6:	4b9f      	ldr	r3, [pc, #636]	@ (800cc24 <MIC_Print+0x284>)
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	4b9f      	ldr	r3, [pc, #636]	@ (800cc28 <MIC_Print+0x288>)
 800c9ac:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800c9ae:	4b9f      	ldr	r3, [pc, #636]	@ (800cc2c <MIC_Print+0x28c>)
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	001a      	movs	r2, r3
 800c9b4:	4b9c      	ldr	r3, [pc, #624]	@ (800cc28 <MIC_Print+0x288>)
 800c9b6:	6819      	ldr	r1, [r3, #0]
 800c9b8:	4b9d      	ldr	r3, [pc, #628]	@ (800cc30 <MIC_Print+0x290>)
 800c9ba:	0092      	lsls	r2, r2, #2
 800c9bc:	50d1      	str	r1, [r2, r3]
  counter++;
 800c9be:	4b9b      	ldr	r3, [pc, #620]	@ (800cc2c <MIC_Print+0x28c>)
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	4b99      	ldr	r3, [pc, #612]	@ (800cc2c <MIC_Print+0x28c>)
 800c9c8:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800c9ca:	4b98      	ldr	r3, [pc, #608]	@ (800cc2c <MIC_Print+0x28c>)
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	2b09      	cmp	r3, #9
 800c9d0:	d80b      	bhi.n	800c9ea <MIC_Print+0x4a>
 800c9d2:	4b98      	ldr	r3, [pc, #608]	@ (800cc34 <MIC_Print+0x294>)
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	4053      	eors	r3, r2
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d004      	beq.n	800c9ea <MIC_Print+0x4a>
    denominator = counter;
 800c9e0:	4b92      	ldr	r3, [pc, #584]	@ (800cc2c <MIC_Print+0x28c>)
 800c9e2:	781a      	ldrb	r2, [r3, #0]
 800c9e4:	4b94      	ldr	r3, [pc, #592]	@ (800cc38 <MIC_Print+0x298>)
 800c9e6:	701a      	strb	r2, [r3, #0]
 800c9e8:	e005      	b.n	800c9f6 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800c9ea:	4b93      	ldr	r3, [pc, #588]	@ (800cc38 <MIC_Print+0x298>)
 800c9ec:	220a      	movs	r2, #10
 800c9ee:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800c9f0:	4b90      	ldr	r3, [pc, #576]	@ (800cc34 <MIC_Print+0x294>)
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800c9f6:	4b91      	ldr	r3, [pc, #580]	@ (800cc3c <MIC_Print+0x29c>)
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800c9fc:	230f      	movs	r3, #15
 800c9fe:	18fb      	adds	r3, r7, r3
 800ca00:	2200      	movs	r2, #0
 800ca02:	701a      	strb	r2, [r3, #0]
 800ca04:	e042      	b.n	800ca8c <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800ca06:	240f      	movs	r4, #15
 800ca08:	193b      	adds	r3, r7, r4
 800ca0a:	781a      	ldrb	r2, [r3, #0]
 800ca0c:	4b88      	ldr	r3, [pc, #544]	@ (800cc30 <MIC_Print+0x290>)
 800ca0e:	0092      	lsls	r2, r2, #2
 800ca10:	58d2      	ldr	r2, [r2, r3]
 800ca12:	4b8a      	ldr	r3, [pc, #552]	@ (800cc3c <MIC_Print+0x29c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	1c19      	adds	r1, r3, #0
 800ca18:	1c10      	adds	r0, r2, #0
 800ca1a:	f7f3 ff51 	bl	80008c0 <__aeabi_fadd>
 800ca1e:	1c03      	adds	r3, r0, #0
 800ca20:	1c1a      	adds	r2, r3, #0
 800ca22:	4b86      	ldr	r3, [pc, #536]	@ (800cc3c <MIC_Print+0x29c>)
 800ca24:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800ca26:	193b      	adds	r3, r7, r4
 800ca28:	781a      	ldrb	r2, [r3, #0]
 800ca2a:	4b81      	ldr	r3, [pc, #516]	@ (800cc30 <MIC_Print+0x290>)
 800ca2c:	0092      	lsls	r2, r2, #2
 800ca2e:	58d2      	ldr	r2, [r2, r3]
 800ca30:	4b83      	ldr	r3, [pc, #524]	@ (800cc40 <MIC_Print+0x2a0>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	1c19      	adds	r1, r3, #0
 800ca36:	1c10      	adds	r0, r2, #0
 800ca38:	f7f3 fd8e 	bl	8000558 <__aeabi_fcmpgt>
 800ca3c:	1e03      	subs	r3, r0, #0
 800ca3e:	d006      	beq.n	800ca4e <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800ca40:	193b      	adds	r3, r7, r4
 800ca42:	781a      	ldrb	r2, [r3, #0]
 800ca44:	4b7a      	ldr	r3, [pc, #488]	@ (800cc30 <MIC_Print+0x290>)
 800ca46:	0092      	lsls	r2, r2, #2
 800ca48:	58d2      	ldr	r2, [r2, r3]
 800ca4a:	4b7d      	ldr	r3, [pc, #500]	@ (800cc40 <MIC_Print+0x2a0>)
 800ca4c:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800ca4e:	4b7b      	ldr	r3, [pc, #492]	@ (800cc3c <MIC_Print+0x29c>)
 800ca50:	681c      	ldr	r4, [r3, #0]
 800ca52:	4b79      	ldr	r3, [pc, #484]	@ (800cc38 <MIC_Print+0x298>)
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	0018      	movs	r0, r3
 800ca58:	f7f4 fe06 	bl	8001668 <__aeabi_ui2f>
 800ca5c:	1c03      	adds	r3, r0, #0
 800ca5e:	1c19      	adds	r1, r3, #0
 800ca60:	1c20      	adds	r0, r4, #0
 800ca62:	f7f4 f8b7 	bl	8000bd4 <__aeabi_fdiv>
 800ca66:	1c03      	adds	r3, r0, #0
 800ca68:	1c1a      	adds	r2, r3, #0
 800ca6a:	4b76      	ldr	r3, [pc, #472]	@ (800cc44 <MIC_Print+0x2a4>)
 800ca6c:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800ca6e:	4b6e      	ldr	r3, [pc, #440]	@ (800cc28 <MIC_Print+0x288>)
 800ca70:	6818      	ldr	r0, [r3, #0]
 800ca72:	4b73      	ldr	r3, [pc, #460]	@ (800cc40 <MIC_Print+0x2a0>)
 800ca74:	6819      	ldr	r1, [r3, #0]
 800ca76:	4b73      	ldr	r3, [pc, #460]	@ (800cc44 <MIC_Print+0x2a4>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	1c1a      	adds	r2, r3, #0
 800ca7c:	f7f7 fe7e 	bl	800477c <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800ca80:	210f      	movs	r1, #15
 800ca82:	187b      	adds	r3, r7, r1
 800ca84:	781a      	ldrb	r2, [r3, #0]
 800ca86:	187b      	adds	r3, r7, r1
 800ca88:	3201      	adds	r2, #1
 800ca8a:	701a      	strb	r2, [r3, #0]
 800ca8c:	4b6a      	ldr	r3, [pc, #424]	@ (800cc38 <MIC_Print+0x298>)
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	220f      	movs	r2, #15
 800ca92:	18ba      	adds	r2, r7, r2
 800ca94:	7812      	ldrb	r2, [r2, #0]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d3b5      	bcc.n	800ca06 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800ca9a:	4b63      	ldr	r3, [pc, #396]	@ (800cc28 <MIC_Print+0x288>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	1c18      	adds	r0, r3, #0
 800caa0:	f7f6 fce0 	bl	8003464 <__aeabi_f2d>
 800caa4:	6038      	str	r0, [r7, #0]
 800caa6:	6079      	str	r1, [r7, #4]
 800caa8:	4b65      	ldr	r3, [pc, #404]	@ (800cc40 <MIC_Print+0x2a0>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	1c18      	adds	r0, r3, #0
 800caae:	f7f6 fcd9 	bl	8003464 <__aeabi_f2d>
 800cab2:	0004      	movs	r4, r0
 800cab4:	000d      	movs	r5, r1
 800cab6:	4b63      	ldr	r3, [pc, #396]	@ (800cc44 <MIC_Print+0x2a4>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	1c18      	adds	r0, r3, #0
 800cabc:	f7f6 fcd2 	bl	8003464 <__aeabi_f2d>
 800cac0:	0002      	movs	r2, r0
 800cac2:	000b      	movs	r3, r1
 800cac4:	4960      	ldr	r1, [pc, #384]	@ (800cc48 <MIC_Print+0x2a8>)
 800cac6:	9204      	str	r2, [sp, #16]
 800cac8:	9305      	str	r3, [sp, #20]
 800caca:	9402      	str	r4, [sp, #8]
 800cacc:	9503      	str	r5, [sp, #12]
 800cace:	4b5f      	ldr	r3, [pc, #380]	@ (800cc4c <MIC_Print+0x2ac>)
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	683a      	ldr	r2, [r7, #0]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	0008      	movs	r0, r1
 800cad8:	f017 fe64 	bl	80247a4 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800cadc:	4b53      	ldr	r3, [pc, #332]	@ (800cc2c <MIC_Print+0x28c>)
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	2b0a      	cmp	r3, #10
 800cae2:	d902      	bls.n	800caea <MIC_Print+0x14a>
    counter = 0;
 800cae4:	4b51      	ldr	r3, [pc, #324]	@ (800cc2c <MIC_Print+0x28c>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800caea:	4b4f      	ldr	r3, [pc, #316]	@ (800cc28 <MIC_Print+0x288>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4958      	ldr	r1, [pc, #352]	@ (800cc50 <MIC_Print+0x2b0>)
 800caf0:	1c18      	adds	r0, r3, #0
 800caf2:	f7f3 fd3b 	bl	800056c <__aeabi_fcmpge>
 800caf6:	1e03      	subs	r3, r0, #0
 800caf8:	d004      	beq.n	800cb04 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800cafa:	2201      	movs	r2, #1
 800cafc:	2101      	movs	r1, #1
 800cafe:	2001      	movs	r0, #1
 800cb00:	f004 fb4e 	bl	80111a0 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800cb04:	4b48      	ldr	r3, [pc, #288]	@ (800cc28 <MIC_Print+0x288>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4952      	ldr	r1, [pc, #328]	@ (800cc54 <MIC_Print+0x2b4>)
 800cb0a:	1c18      	adds	r0, r3, #0
 800cb0c:	f7f3 fd2e 	bl	800056c <__aeabi_fcmpge>
 800cb10:	1e03      	subs	r3, r0, #0
 800cb12:	d00c      	beq.n	800cb2e <MIC_Print+0x18e>
 800cb14:	4b44      	ldr	r3, [pc, #272]	@ (800cc28 <MIC_Print+0x288>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	494d      	ldr	r1, [pc, #308]	@ (800cc50 <MIC_Print+0x2b0>)
 800cb1a:	1c18      	adds	r0, r3, #0
 800cb1c:	f7f3 fd08 	bl	8000530 <__aeabi_fcmplt>
 800cb20:	1e03      	subs	r3, r0, #0
 800cb22:	d004      	beq.n	800cb2e <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800cb24:	2200      	movs	r2, #0
 800cb26:	2100      	movs	r1, #0
 800cb28:	2001      	movs	r0, #1
 800cb2a:	f004 fb39 	bl	80111a0 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800cb2e:	4b3e      	ldr	r3, [pc, #248]	@ (800cc28 <MIC_Print+0x288>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4949      	ldr	r1, [pc, #292]	@ (800cc58 <MIC_Print+0x2b8>)
 800cb34:	1c18      	adds	r0, r3, #0
 800cb36:	f7f3 fd19 	bl	800056c <__aeabi_fcmpge>
 800cb3a:	1e03      	subs	r3, r0, #0
 800cb3c:	d00c      	beq.n	800cb58 <MIC_Print+0x1b8>
 800cb3e:	4b3a      	ldr	r3, [pc, #232]	@ (800cc28 <MIC_Print+0x288>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4944      	ldr	r1, [pc, #272]	@ (800cc54 <MIC_Print+0x2b4>)
 800cb44:	1c18      	adds	r0, r3, #0
 800cb46:	f7f3 fcf3 	bl	8000530 <__aeabi_fcmplt>
 800cb4a:	1e03      	subs	r3, r0, #0
 800cb4c:	d004      	beq.n	800cb58 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2101      	movs	r1, #1
 800cb52:	2001      	movs	r0, #1
 800cb54:	f004 fb24 	bl	80111a0 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800cb58:	4b33      	ldr	r3, [pc, #204]	@ (800cc28 <MIC_Print+0x288>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	493f      	ldr	r1, [pc, #252]	@ (800cc5c <MIC_Print+0x2bc>)
 800cb5e:	1c18      	adds	r0, r3, #0
 800cb60:	f7f3 fd04 	bl	800056c <__aeabi_fcmpge>
 800cb64:	1e03      	subs	r3, r0, #0
 800cb66:	d00c      	beq.n	800cb82 <MIC_Print+0x1e2>
 800cb68:	4b2f      	ldr	r3, [pc, #188]	@ (800cc28 <MIC_Print+0x288>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	493a      	ldr	r1, [pc, #232]	@ (800cc58 <MIC_Print+0x2b8>)
 800cb6e:	1c18      	adds	r0, r3, #0
 800cb70:	f7f3 fcde 	bl	8000530 <__aeabi_fcmplt>
 800cb74:	1e03      	subs	r3, r0, #0
 800cb76:	d004      	beq.n	800cb82 <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800cb78:	2200      	movs	r2, #0
 800cb7a:	2101      	movs	r1, #1
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	f004 fb0f 	bl	80111a0 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800cb82:	4b29      	ldr	r3, [pc, #164]	@ (800cc28 <MIC_Print+0x288>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4936      	ldr	r1, [pc, #216]	@ (800cc60 <MIC_Print+0x2c0>)
 800cb88:	1c18      	adds	r0, r3, #0
 800cb8a:	f7f3 fcef 	bl	800056c <__aeabi_fcmpge>
 800cb8e:	1e03      	subs	r3, r0, #0
 800cb90:	d00c      	beq.n	800cbac <MIC_Print+0x20c>
 800cb92:	4b25      	ldr	r3, [pc, #148]	@ (800cc28 <MIC_Print+0x288>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4931      	ldr	r1, [pc, #196]	@ (800cc5c <MIC_Print+0x2bc>)
 800cb98:	1c18      	adds	r0, r3, #0
 800cb9a:	f7f3 fcc9 	bl	8000530 <__aeabi_fcmplt>
 800cb9e:	1e03      	subs	r3, r0, #0
 800cba0:	d004      	beq.n	800cbac <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800cba2:	2201      	movs	r2, #1
 800cba4:	2101      	movs	r1, #1
 800cba6:	2000      	movs	r0, #0
 800cba8:	f004 fafa 	bl	80111a0 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800cbac:	4b1e      	ldr	r3, [pc, #120]	@ (800cc28 <MIC_Print+0x288>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	492c      	ldr	r1, [pc, #176]	@ (800cc64 <MIC_Print+0x2c4>)
 800cbb2:	1c18      	adds	r0, r3, #0
 800cbb4:	f7f3 fcda 	bl	800056c <__aeabi_fcmpge>
 800cbb8:	1e03      	subs	r3, r0, #0
 800cbba:	d00c      	beq.n	800cbd6 <MIC_Print+0x236>
 800cbbc:	4b1a      	ldr	r3, [pc, #104]	@ (800cc28 <MIC_Print+0x288>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4927      	ldr	r1, [pc, #156]	@ (800cc60 <MIC_Print+0x2c0>)
 800cbc2:	1c18      	adds	r0, r3, #0
 800cbc4:	f7f3 fcb4 	bl	8000530 <__aeabi_fcmplt>
 800cbc8:	1e03      	subs	r3, r0, #0
 800cbca:	d004      	beq.n	800cbd6 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800cbcc:	2201      	movs	r2, #1
 800cbce:	2100      	movs	r1, #0
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	f004 fae5 	bl	80111a0 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800cbd6:	4b14      	ldr	r3, [pc, #80]	@ (800cc28 <MIC_Print+0x288>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4923      	ldr	r1, [pc, #140]	@ (800cc68 <MIC_Print+0x2c8>)
 800cbdc:	1c18      	adds	r0, r3, #0
 800cbde:	f7f3 fcc5 	bl	800056c <__aeabi_fcmpge>
 800cbe2:	1e03      	subs	r3, r0, #0
 800cbe4:	d00c      	beq.n	800cc00 <MIC_Print+0x260>
 800cbe6:	4b10      	ldr	r3, [pc, #64]	@ (800cc28 <MIC_Print+0x288>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	491e      	ldr	r1, [pc, #120]	@ (800cc64 <MIC_Print+0x2c4>)
 800cbec:	1c18      	adds	r0, r3, #0
 800cbee:	f7f3 fc9f 	bl	8000530 <__aeabi_fcmplt>
 800cbf2:	1e03      	subs	r3, r0, #0
 800cbf4:	d004      	beq.n	800cc00 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	2001      	movs	r0, #1
 800cbfc:	f004 fad0 	bl	80111a0 <SetDBLED>
  }
  if(dBA < 35){//off
 800cc00:	4b09      	ldr	r3, [pc, #36]	@ (800cc28 <MIC_Print+0x288>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4918      	ldr	r1, [pc, #96]	@ (800cc68 <MIC_Print+0x2c8>)
 800cc06:	1c18      	adds	r0, r3, #0
 800cc08:	f7f3 fc92 	bl	8000530 <__aeabi_fcmplt>
 800cc0c:	1e03      	subs	r3, r0, #0
 800cc0e:	d100      	bne.n	800cc12 <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800cc10:	e004      	b.n	800cc1c <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800cc12:	2200      	movs	r2, #0
 800cc14:	2100      	movs	r1, #0
 800cc16:	2000      	movs	r0, #0
 800cc18:	f004 fac2 	bl	80111a0 <SetDBLED>
}
 800cc1c:	46c0      	nop			@ (mov r8, r8)
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	b004      	add	sp, #16
 800cc22:	bdb0      	pop	{r4, r5, r7, pc}
 800cc24:	20000ea4 	.word	0x20000ea4
 800cc28:	20000e70 	.word	0x20000e70
 800cc2c:	20000eac 	.word	0x20000eac
 800cc30:	20000e74 	.word	0x20000e74
 800cc34:	20000ead 	.word	0x20000ead
 800cc38:	2000009c 	.word	0x2000009c
 800cc3c:	20000ea0 	.word	0x20000ea0
 800cc40:	20000ea8 	.word	0x20000ea8
 800cc44:	20000e9c 	.word	0x20000e9c
 800cc48:	0802b944 	.word	0x0802b944
 800cc4c:	20000e64 	.word	0x20000e64
 800cc50:	42b40000 	.word	0x42b40000
 800cc54:	42a00000 	.word	0x42a00000
 800cc58:	428c0000 	.word	0x428c0000
 800cc5c:	42700000 	.word	0x42700000
 800cc60:	42480000 	.word	0x42480000
 800cc64:	42200000 	.word	0x42200000
 800cc68:	420c0000 	.word	0x420c0000

0800cc6c <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800cc72:	4b11      	ldr	r3, [pc, #68]	@ (800ccb8 <MIC_TestMeasurementDone+0x4c>)
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	4a10      	ldr	r2, [pc, #64]	@ (800ccbc <MIC_TestMeasurementDone+0x50>)
 800cc7a:	4911      	ldr	r1, [pc, #68]	@ (800ccc0 <MIC_TestMeasurementDone+0x54>)
 800cc7c:	2002      	movs	r0, #2
 800cc7e:	f005 fd1f 	bl	80126c0 <CreateLine>
  if(DataReady) {
 800cc82:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb8 <MIC_TestMeasurementDone+0x4c>)
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d010      	beq.n	800ccae <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800cc8c:	1dfb      	adds	r3, r7, #7
 800cc8e:	4a0d      	ldr	r2, [pc, #52]	@ (800ccc4 <MIC_TestMeasurementDone+0x58>)
 800cc90:	7812      	ldrb	r2, [r2, #0]
 800cc92:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800cc94:	4b0b      	ldr	r3, [pc, #44]	@ (800ccc4 <MIC_TestMeasurementDone+0x58>)
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	4a0b      	ldr	r2, [pc, #44]	@ (800ccc8 <MIC_TestMeasurementDone+0x5c>)
 800cc9c:	4908      	ldr	r1, [pc, #32]	@ (800ccc0 <MIC_TestMeasurementDone+0x54>)
 800cc9e:	2002      	movs	r0, #2
 800cca0:	f005 fd0e 	bl	80126c0 <CreateLine>
    ResetMICIndicator();
 800cca4:	f004 fb6a 	bl	801137c <ResetMICIndicator>
    return Check;
 800cca8:	1dfb      	adds	r3, r7, #7
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	e000      	b.n	800ccb0 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800ccae:	2300      	movs	r3, #0
}
 800ccb0:	0018      	movs	r0, r3
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	b002      	add	sp, #8
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	20000fe1 	.word	0x20000fe1
 800ccbc:	0802b98c 	.word	0x0802b98c
 800ccc0:	0802b9b8 	.word	0x0802b9b8
 800ccc4:	20000fe2 	.word	0x20000fe2
 800ccc8:	0802b9bc 	.word	0x0802b9bc

0800cccc <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800ccd2:	4b78      	ldr	r3, [pc, #480]	@ (800ceb4 <Mic_Upkeep+0x1e8>)
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	2b03      	cmp	r3, #3
 800ccd8:	d100      	bne.n	800ccdc <Mic_Upkeep+0x10>
 800ccda:	e0b8      	b.n	800ce4e <Mic_Upkeep+0x182>
 800ccdc:	dd00      	ble.n	800cce0 <Mic_Upkeep+0x14>
 800ccde:	e0d3      	b.n	800ce88 <Mic_Upkeep+0x1bc>
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d037      	beq.n	800cd54 <Mic_Upkeep+0x88>
 800cce4:	dd00      	ble.n	800cce8 <Mic_Upkeep+0x1c>
 800cce6:	e0cf      	b.n	800ce88 <Mic_Upkeep+0x1bc>
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d002      	beq.n	800ccf2 <Mic_Upkeep+0x26>
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d014      	beq.n	800cd1a <Mic_Upkeep+0x4e>
 800ccf0:	e0ca      	b.n	800ce88 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800ccf2:	2001      	movs	r0, #1
 800ccf4:	f003 fb52 	bl	801039c <enableMicrophone>
 800ccf8:	0003      	movs	r3, r0
 800ccfa:	001a      	movs	r2, r3
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	4053      	eors	r3, r2
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d005      	beq.n	800cd12 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800cd06:	4a6c      	ldr	r2, [pc, #432]	@ (800ceb8 <Mic_Upkeep+0x1ec>)
 800cd08:	4b6c      	ldr	r3, [pc, #432]	@ (800cebc <Mic_Upkeep+0x1f0>)
 800cd0a:	217f      	movs	r1, #127	@ 0x7f
 800cd0c:	0018      	movs	r0, r3
 800cd0e:	f005 fd8f 	bl	8012830 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800cd12:	4b68      	ldr	r3, [pc, #416]	@ (800ceb4 <Mic_Upkeep+0x1e8>)
 800cd14:	2201      	movs	r2, #1
 800cd16:	701a      	strb	r2, [r3, #0]
    break;
 800cd18:	e0c5      	b.n	800cea6 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800cd1a:	f003 fb1b 	bl	8010354 <micSettlingComplete>
 800cd1e:	1e03      	subs	r3, r0, #0
 800cd20:	d105      	bne.n	800cd2e <Mic_Upkeep+0x62>
 800cd22:	4b67      	ldr	r3, [pc, #412]	@ (800cec0 <Mic_Upkeep+0x1f4>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d100      	bne.n	800cd2e <Mic_Upkeep+0x62>
 800cd2c:	e0b6      	b.n	800ce9c <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800cd2e:	f003 fb9f 	bl	8010470 <startSPLcalculation>
 800cd32:	0003      	movs	r3, r0
 800cd34:	001a      	movs	r2, r3
 800cd36:	2301      	movs	r3, #1
 800cd38:	4053      	eors	r3, r2
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d005      	beq.n	800cd4c <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800cd40:	4a5d      	ldr	r2, [pc, #372]	@ (800ceb8 <Mic_Upkeep+0x1ec>)
 800cd42:	4b5e      	ldr	r3, [pc, #376]	@ (800cebc <Mic_Upkeep+0x1f0>)
 800cd44:	2188      	movs	r1, #136	@ 0x88
 800cd46:	0018      	movs	r0, r3
 800cd48:	f005 fd72 	bl	8012830 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800cd4c:	4b59      	ldr	r3, [pc, #356]	@ (800ceb4 <Mic_Upkeep+0x1e8>)
 800cd4e:	2202      	movs	r2, #2
 800cd50:	701a      	strb	r2, [r3, #0]
    }
    break;
 800cd52:	e0a3      	b.n	800ce9c <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800cd54:	4b5b      	ldr	r3, [pc, #364]	@ (800cec4 <Mic_Upkeep+0x1f8>)
 800cd56:	2201      	movs	r2, #1
 800cd58:	2101      	movs	r1, #1
 800cd5a:	0018      	movs	r0, r3
 800cd5c:	f003 f9dc 	bl	8010118 <getSoundData>
 800cd60:	1e03      	subs	r3, r0, #0
 800cd62:	d100      	bne.n	800cd66 <Mic_Upkeep+0x9a>
 800cd64:	e09c      	b.n	800cea0 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800cd66:	f003 fad5 	bl	8010314 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800cd6a:	4b56      	ldr	r3, [pc, #344]	@ (800cec4 <Mic_Upkeep+0x1f8>)
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	001a      	movs	r2, r3
 800cd70:	4b54      	ldr	r3, [pc, #336]	@ (800cec4 <Mic_Upkeep+0x1f8>)
 800cd72:	785b      	ldrb	r3, [r3, #1]
 800cd74:	4954      	ldr	r1, [pc, #336]	@ (800cec8 <Mic_Upkeep+0x1fc>)
 800cd76:	0038      	movs	r0, r7
 800cd78:	f017 fd84 	bl	8024884 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800cd7c:	4b51      	ldr	r3, [pc, #324]	@ (800cec4 <Mic_Upkeep+0x1f8>)
 800cd7e:	89db      	ldrh	r3, [r3, #14]
 800cd80:	001a      	movs	r2, r3
 800cd82:	4b50      	ldr	r3, [pc, #320]	@ (800cec4 <Mic_Upkeep+0x1f8>)
 800cd84:	7c1b      	ldrb	r3, [r3, #16]
 800cd86:	4951      	ldr	r1, [pc, #324]	@ (800cecc <Mic_Upkeep+0x200>)
 800cd88:	4851      	ldr	r0, [pc, #324]	@ (800ced0 <Mic_Upkeep+0x204>)
 800cd8a:	f017 fd7b 	bl	8024884 <siprintf>
      dBValue = atof(dBbuffer);
 800cd8e:	003b      	movs	r3, r7
 800cd90:	0018      	movs	r0, r3
 800cd92:	f016 f927 	bl	8022fe4 <atof>
 800cd96:	0002      	movs	r2, r0
 800cd98:	000b      	movs	r3, r1
 800cd9a:	0010      	movs	r0, r2
 800cd9c:	0019      	movs	r1, r3
 800cd9e:	f7f6 fba9 	bl	80034f4 <__aeabi_d2f>
 800cda2:	1c02      	adds	r2, r0, #0
 800cda4:	4b4b      	ldr	r3, [pc, #300]	@ (800ced4 <Mic_Upkeep+0x208>)
 800cda6:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800cda8:	4b4a      	ldr	r3, [pc, #296]	@ (800ced4 <Mic_Upkeep+0x208>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	494a      	ldr	r1, [pc, #296]	@ (800ced8 <Mic_Upkeep+0x20c>)
 800cdae:	1c18      	adds	r0, r3, #0
 800cdb0:	f7f4 f8f6 	bl	8000fa0 <__aeabi_fmul>
 800cdb4:	1c03      	adds	r3, r0, #0
 800cdb6:	1c18      	adds	r0, r3, #0
 800cdb8:	f7f6 fb54 	bl	8003464 <__aeabi_f2d>
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	4b47      	ldr	r3, [pc, #284]	@ (800cedc <Mic_Upkeep+0x210>)
 800cdc0:	f7f4 fc94 	bl	80016ec <__aeabi_dadd>
 800cdc4:	0002      	movs	r2, r0
 800cdc6:	000b      	movs	r3, r1
 800cdc8:	0010      	movs	r0, r2
 800cdca:	0019      	movs	r1, r3
 800cdcc:	f7f6 fabc 	bl	8003348 <__aeabi_d2iz>
 800cdd0:	0003      	movs	r3, r0
 800cdd2:	0018      	movs	r0, r3
 800cdd4:	f7f6 faf4 	bl	80033c0 <__aeabi_i2d>
 800cdd8:	2200      	movs	r2, #0
 800cdda:	4b41      	ldr	r3, [pc, #260]	@ (800cee0 <Mic_Upkeep+0x214>)
 800cddc:	f7f4 ffea 	bl	8001db4 <__aeabi_ddiv>
 800cde0:	0002      	movs	r2, r0
 800cde2:	000b      	movs	r3, r1
 800cde4:	0010      	movs	r0, r2
 800cde6:	0019      	movs	r1, r3
 800cde8:	f7f6 fb84 	bl	80034f4 <__aeabi_d2f>
 800cdec:	1c02      	adds	r2, r0, #0
 800cdee:	4b39      	ldr	r3, [pc, #228]	@ (800ced4 <Mic_Upkeep+0x208>)
 800cdf0:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800cdf2:	f7ff fdd5 	bl	800c9a0 <MIC_Print>
      if (!startSPLcalculation()) {
 800cdf6:	f003 fb3b 	bl	8010470 <startSPLcalculation>
 800cdfa:	0003      	movs	r3, r0
 800cdfc:	001a      	movs	r2, r3
 800cdfe:	2301      	movs	r3, #1
 800ce00:	4053      	eors	r3, r2
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d005      	beq.n	800ce14 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800ce08:	4a2b      	ldr	r2, [pc, #172]	@ (800ceb8 <Mic_Upkeep+0x1ec>)
 800ce0a:	4b2c      	ldr	r3, [pc, #176]	@ (800cebc <Mic_Upkeep+0x1f0>)
 800ce0c:	2198      	movs	r1, #152	@ 0x98
 800ce0e:	0018      	movs	r0, r3
 800ce10:	f005 fd0e 	bl	8012830 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800ce14:	2000      	movs	r0, #0
 800ce16:	f003 fac1 	bl	801039c <enableMicrophone>
 800ce1a:	0003      	movs	r3, r0
 800ce1c:	001a      	movs	r2, r3
 800ce1e:	2301      	movs	r3, #1
 800ce20:	4053      	eors	r3, r2
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d005      	beq.n	800ce34 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800ce28:	4a23      	ldr	r2, [pc, #140]	@ (800ceb8 <Mic_Upkeep+0x1ec>)
 800ce2a:	4b24      	ldr	r3, [pc, #144]	@ (800cebc <Mic_Upkeep+0x1f0>)
 800ce2c:	219b      	movs	r1, #155	@ 0x9b
 800ce2e:	0018      	movs	r0, r3
 800ce30:	f005 fcfe 	bl	8012830 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800ce34:	f006 f97a 	bl	801312c <HAL_GetTick>
 800ce38:	0003      	movs	r3, r0
 800ce3a:	4a2a      	ldr	r2, [pc, #168]	@ (800cee4 <Mic_Upkeep+0x218>)
 800ce3c:	189a      	adds	r2, r3, r2
 800ce3e:	4b2a      	ldr	r3, [pc, #168]	@ (800cee8 <Mic_Upkeep+0x21c>)
 800ce40:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800ce42:	4b1c      	ldr	r3, [pc, #112]	@ (800ceb4 <Mic_Upkeep+0x1e8>)
 800ce44:	2203      	movs	r2, #3
 800ce46:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800ce48:	f004 fa98 	bl	801137c <ResetMICIndicator>
    }
    break;
 800ce4c:	e028      	b.n	800cea0 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800ce4e:	4b26      	ldr	r3, [pc, #152]	@ (800cee8 <Mic_Upkeep+0x21c>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	0018      	movs	r0, r3
 800ce54:	f005 fbde 	bl	8012614 <TimestampIsReached>
 800ce58:	1e03      	subs	r3, r0, #0
 800ce5a:	d023      	beq.n	800cea4 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800ce5c:	2001      	movs	r0, #1
 800ce5e:	f003 fa9d 	bl	801039c <enableMicrophone>
 800ce62:	0003      	movs	r3, r0
 800ce64:	001a      	movs	r2, r3
 800ce66:	2301      	movs	r3, #1
 800ce68:	4053      	eors	r3, r2
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d005      	beq.n	800ce7c <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800ce70:	4a11      	ldr	r2, [pc, #68]	@ (800ceb8 <Mic_Upkeep+0x1ec>)
 800ce72:	4b12      	ldr	r3, [pc, #72]	@ (800cebc <Mic_Upkeep+0x1f0>)
 800ce74:	21a6      	movs	r1, #166	@ 0xa6
 800ce76:	0018      	movs	r0, r3
 800ce78:	f005 fcda 	bl	8012830 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800ce7c:	4b0d      	ldr	r3, [pc, #52]	@ (800ceb4 <Mic_Upkeep+0x1e8>)
 800ce7e:	2201      	movs	r2, #1
 800ce80:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800ce82:	f004 fa39 	bl	80112f8 <SetMICIndicator>
    }
    break;
 800ce86:	e00d      	b.n	800cea4 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800ce88:	4a18      	ldr	r2, [pc, #96]	@ (800ceec <Mic_Upkeep+0x220>)
 800ce8a:	4b19      	ldr	r3, [pc, #100]	@ (800cef0 <Mic_Upkeep+0x224>)
 800ce8c:	0019      	movs	r1, r3
 800ce8e:	2003      	movs	r0, #3
 800ce90:	f005 fc16 	bl	80126c0 <CreateLine>
    MicState = MIC_STATE_INIT;
 800ce94:	4b07      	ldr	r3, [pc, #28]	@ (800ceb4 <Mic_Upkeep+0x1e8>)
 800ce96:	2200      	movs	r2, #0
 800ce98:	701a      	strb	r2, [r3, #0]
    break;
 800ce9a:	e004      	b.n	800cea6 <Mic_Upkeep+0x1da>
    break;
 800ce9c:	46c0      	nop			@ (mov r8, r8)
 800ce9e:	e002      	b.n	800cea6 <Mic_Upkeep+0x1da>
    break;
 800cea0:	46c0      	nop			@ (mov r8, r8)
 800cea2:	e000      	b.n	800cea6 <Mic_Upkeep+0x1da>
    break;
 800cea4:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800cea6:	4b03      	ldr	r3, [pc, #12]	@ (800ceb4 <Mic_Upkeep+0x1e8>)
 800cea8:	781b      	ldrb	r3, [r3, #0]
}
 800ceaa:	0018      	movs	r0, r3
 800ceac:	46bd      	mov	sp, r7
 800ceae:	b002      	add	sp, #8
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	46c0      	nop			@ (mov r8, r8)
 800ceb4:	20000ec6 	.word	0x20000ec6
 800ceb8:	0802b9d4 	.word	0x0802b9d4
 800cebc:	0802cb38 	.word	0x0802cb38
 800cec0:	20000fe1 	.word	0x20000fe1
 800cec4:	20000eb4 	.word	0x20000eb4
 800cec8:	0802b9f0 	.word	0x0802b9f0
 800cecc:	0802b9f8 	.word	0x0802b9f8
 800ced0:	20000e64 	.word	0x20000e64
 800ced4:	20000ea4 	.word	0x20000ea4
 800ced8:	42c80000 	.word	0x42c80000
 800cedc:	3fe00000 	.word	0x3fe00000
 800cee0:	40590000 	.word	0x40590000
 800cee4:	000002f3 	.word	0x000002f3
 800cee8:	20000eb0 	.word	0x20000eb0
 800ceec:	0802ba00 	.word	0x0802ba00
 800cef0:	0802ba20 	.word	0x0802ba20

0800cef4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b086      	sub	sp, #24
 800cef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800cefa:	1d3b      	adds	r3, r7, #4
 800cefc:	0018      	movs	r0, r3
 800cefe:	2314      	movs	r3, #20
 800cf00:	001a      	movs	r2, r3
 800cf02:	2100      	movs	r1, #0
 800cf04:	f017 fe24 	bl	8024b50 <memset>
  RTC_DateTypeDef sDate = {0};
 800cf08:	003b      	movs	r3, r7
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800cf0e:	4b2e      	ldr	r3, [pc, #184]	@ (800cfc8 <MX_RTC_Init+0xd4>)
 800cf10:	4a2e      	ldr	r2, [pc, #184]	@ (800cfcc <MX_RTC_Init+0xd8>)
 800cf12:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800cf14:	4b2c      	ldr	r3, [pc, #176]	@ (800cfc8 <MX_RTC_Init+0xd4>)
 800cf16:	2200      	movs	r2, #0
 800cf18:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800cf1a:	4b2b      	ldr	r3, [pc, #172]	@ (800cfc8 <MX_RTC_Init+0xd4>)
 800cf1c:	227f      	movs	r2, #127	@ 0x7f
 800cf1e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800cf20:	4b29      	ldr	r3, [pc, #164]	@ (800cfc8 <MX_RTC_Init+0xd4>)
 800cf22:	22ff      	movs	r2, #255	@ 0xff
 800cf24:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800cf26:	4b28      	ldr	r3, [pc, #160]	@ (800cfc8 <MX_RTC_Init+0xd4>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800cf2c:	4b26      	ldr	r3, [pc, #152]	@ (800cfc8 <MX_RTC_Init+0xd4>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800cf32:	4b25      	ldr	r3, [pc, #148]	@ (800cfc8 <MX_RTC_Init+0xd4>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800cf38:	4b23      	ldr	r3, [pc, #140]	@ (800cfc8 <MX_RTC_Init+0xd4>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800cf3e:	4b22      	ldr	r3, [pc, #136]	@ (800cfc8 <MX_RTC_Init+0xd4>)
 800cf40:	0018      	movs	r0, r3
 800cf42:	f00d fc0f 	bl	801a764 <HAL_RTC_Init>
 800cf46:	1e03      	subs	r3, r0, #0
 800cf48:	d001      	beq.n	800cf4e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800cf4a:	f7ff f803 	bl	800bf54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800cf4e:	1d3b      	adds	r3, r7, #4
 800cf50:	220d      	movs	r2, #13
 800cf52:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800cf54:	1d3b      	adds	r3, r7, #4
 800cf56:	2200      	movs	r2, #0
 800cf58:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800cf5a:	1d3b      	adds	r3, r7, #4
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cf60:	1d3b      	adds	r3, r7, #4
 800cf62:	2200      	movs	r2, #0
 800cf64:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800cf66:	1d3b      	adds	r3, r7, #4
 800cf68:	2200      	movs	r2, #0
 800cf6a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800cf6c:	1d39      	adds	r1, r7, #4
 800cf6e:	4b16      	ldr	r3, [pc, #88]	@ (800cfc8 <MX_RTC_Init+0xd4>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	0018      	movs	r0, r3
 800cf74:	f00d fc92 	bl	801a89c <HAL_RTC_SetTime>
 800cf78:	1e03      	subs	r3, r0, #0
 800cf7a:	d001      	beq.n	800cf80 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800cf7c:	f7fe ffea 	bl	800bf54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800cf80:	003b      	movs	r3, r7
 800cf82:	2206      	movs	r2, #6
 800cf84:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800cf86:	003b      	movs	r3, r7
 800cf88:	2211      	movs	r2, #17
 800cf8a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800cf8c:	003b      	movs	r3, r7
 800cf8e:	2217      	movs	r2, #23
 800cf90:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800cf92:	003b      	movs	r3, r7
 800cf94:	2218      	movs	r2, #24
 800cf96:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800cf98:	0039      	movs	r1, r7
 800cf9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cfc8 <MX_RTC_Init+0xd4>)
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	0018      	movs	r0, r3
 800cfa0:	f00d fd84 	bl	801aaac <HAL_RTC_SetDate>
 800cfa4:	1e03      	subs	r3, r0, #0
 800cfa6:	d001      	beq.n	800cfac <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800cfa8:	f7fe ffd4 	bl	800bf54 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800cfac:	4b06      	ldr	r3, [pc, #24]	@ (800cfc8 <MX_RTC_Init+0xd4>)
 800cfae:	2200      	movs	r2, #0
 800cfb0:	2100      	movs	r1, #0
 800cfb2:	0018      	movs	r0, r3
 800cfb4:	f00d ff34 	bl	801ae20 <HAL_RTCEx_SetWakeUpTimer_IT>
 800cfb8:	1e03      	subs	r3, r0, #0
 800cfba:	d001      	beq.n	800cfc0 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800cfbc:	f7fe ffca 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800cfc0:	46c0      	nop			@ (mov r8, r8)
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	b006      	add	sp, #24
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	20000ec8 	.word	0x20000ec8
 800cfcc:	40002800 	.word	0x40002800

0800cfd0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a0a      	ldr	r2, [pc, #40]	@ (800d008 <HAL_RTC_MspInit+0x38>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d10e      	bne.n	800d000 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800cfe2:	4b0a      	ldr	r3, [pc, #40]	@ (800d00c <HAL_RTC_MspInit+0x3c>)
 800cfe4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cfe6:	4b09      	ldr	r3, [pc, #36]	@ (800d00c <HAL_RTC_MspInit+0x3c>)
 800cfe8:	2180      	movs	r1, #128	@ 0x80
 800cfea:	02c9      	lsls	r1, r1, #11
 800cfec:	430a      	orrs	r2, r1
 800cfee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800cff0:	2200      	movs	r2, #0
 800cff2:	2100      	movs	r1, #0
 800cff4:	2002      	movs	r0, #2
 800cff6:	f006 fd3d 	bl	8013a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800cffa:	2002      	movs	r0, #2
 800cffc:	f006 fd4f 	bl	8013a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800d000:	46c0      	nop			@ (mov r8, r8)
 800d002:	46bd      	mov	sp, r7
 800d004:	b002      	add	sp, #8
 800d006:	bd80      	pop	{r7, pc}
 800d008:	40002800 	.word	0x40002800
 800d00c:	40021000 	.word	0x40021000

0800d010 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800d010:	b580      	push	{r7, lr}
 800d012:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800d014:	4b02      	ldr	r3, [pc, #8]	@ (800d020 <sen5x_Get_sen5x_enable_state+0x10>)
 800d016:	781b      	ldrb	r3, [r3, #0]
}
 800d018:	0018      	movs	r0, r3
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	46c0      	nop			@ (mov r8, r8)
 800d020:	20000eef 	.word	0x20000eef

0800d024 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	0002      	movs	r2, r0
 800d02c:	1dfb      	adds	r3, r7, #7
 800d02e:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800d030:	4b03      	ldr	r3, [pc, #12]	@ (800d040 <sen5x_Set_sen5x_state+0x1c>)
 800d032:	1dfa      	adds	r2, r7, #7
 800d034:	7812      	ldrb	r2, [r2, #0]
 800d036:	701a      	strb	r2, [r3, #0]
}
 800d038:	46c0      	nop			@ (mov r8, r8)
 800d03a:	46bd      	mov	sp, r7
 800d03c:	b002      	add	sp, #8
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	20000eef 	.word	0x20000eef

0800d044 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800d04c:	f006 f86e 	bl	801312c <HAL_GetTick>
 800d050:	0002      	movs	r2, r0
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	18d2      	adds	r2, r2, r3
 800d056:	4b03      	ldr	r3, [pc, #12]	@ (800d064 <setsen5xReadTimer+0x20>)
 800d058:	601a      	str	r2, [r3, #0]
}
 800d05a:	46c0      	nop			@ (mov r8, r8)
 800d05c:	46bd      	mov	sp, r7
 800d05e:	b002      	add	sp, #8
 800d060:	bd80      	pop	{r7, pc}
 800d062:	46c0      	nop			@ (mov r8, r8)
 800d064:	20000efc 	.word	0x20000efc

0800d068 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	0002      	movs	r2, r0
 800d070:	1dfb      	adds	r3, r7, #7
 800d072:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800d074:	4b03      	ldr	r3, [pc, #12]	@ (800d084 <setsen5xSamplecounter+0x1c>)
 800d076:	2200      	movs	r2, #0
 800d078:	701a      	strb	r2, [r3, #0]
}
 800d07a:	46c0      	nop			@ (mov r8, r8)
 800d07c:	46bd      	mov	sp, r7
 800d07e:	b002      	add	sp, #8
 800d080:	bd80      	pop	{r7, pc}
 800d082:	46c0      	nop			@ (mov r8, r8)
 800d084:	20000ef8 	.word	0x20000ef8

0800d088 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800d090:	f7ff f818 	bl	800c0c4 <IsPMSensorEnabled>
 800d094:	1e03      	subs	r3, r0, #0
 800d096:	d035      	beq.n	800d104 <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800d098:	f003 ffac 	bl	8010ff4 <batteryChargeCheck>
 800d09c:	0003      	movs	r3, r0
 800d09e:	2b03      	cmp	r3, #3
 800d0a0:	d103      	bne.n	800d0aa <sen5x_enable+0x22>
      sen5x_Enable = true;
 800d0a2:	4b20      	ldr	r3, [pc, #128]	@ (800d124 <sen5x_enable+0x9c>)
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	701a      	strb	r2, [r3, #0]
 800d0a8:	e00d      	b.n	800d0c6 <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800d0aa:	4b1e      	ldr	r3, [pc, #120]	@ (800d124 <sen5x_enable+0x9c>)
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	1e5a      	subs	r2, r3, #1
 800d0b0:	4193      	sbcs	r3, r2
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	4053      	eors	r3, r2
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	1c1a      	adds	r2, r3, #0
 800d0bc:	2301      	movs	r3, #1
 800d0be:	4013      	ands	r3, r2
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	4b18      	ldr	r3, [pc, #96]	@ (800d124 <sen5x_enable+0x9c>)
 800d0c4:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800d0c6:	4b17      	ldr	r3, [pc, #92]	@ (800d124 <sen5x_enable+0x9c>)
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d003      	beq.n	800d0d6 <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	f7ff ffb8 	bl	800d044 <setsen5xReadTimer>
 800d0d4:	e009      	b.n	800d0ea <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800d0d6:	f006 f829 	bl	801312c <HAL_GetTick>
 800d0da:	0002      	movs	r2, r0
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2164      	movs	r1, #100	@ 0x64
 800d0e0:	434b      	muls	r3, r1
 800d0e2:	18d3      	adds	r3, r2, r3
 800d0e4:	0018      	movs	r0, r3
 800d0e6:	f7ff ffad 	bl	800d044 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800d0ea:	4b0e      	ldr	r3, [pc, #56]	@ (800d124 <sen5x_enable+0x9c>)
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d001      	beq.n	800d0f6 <sen5x_enable+0x6e>
 800d0f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d128 <sen5x_enable+0xa0>)
 800d0f4:	e000      	b.n	800d0f8 <sen5x_enable+0x70>
 800d0f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d12c <sen5x_enable+0xa4>)
 800d0f8:	4a0d      	ldr	r2, [pc, #52]	@ (800d130 <sen5x_enable+0xa8>)
 800d0fa:	490e      	ldr	r1, [pc, #56]	@ (800d134 <sen5x_enable+0xac>)
 800d0fc:	2002      	movs	r0, #2
 800d0fe:	f005 fadf 	bl	80126c0 <CreateLine>
 800d102:	e005      	b.n	800d110 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800d104:	4a0c      	ldr	r2, [pc, #48]	@ (800d138 <sen5x_enable+0xb0>)
 800d106:	4b0b      	ldr	r3, [pc, #44]	@ (800d134 <sen5x_enable+0xac>)
 800d108:	0019      	movs	r1, r3
 800d10a:	2002      	movs	r0, #2
 800d10c:	f005 fad8 	bl	80126c0 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800d110:	4b0a      	ldr	r3, [pc, #40]	@ (800d13c <sen5x_enable+0xb4>)
 800d112:	2201      	movs	r2, #1
 800d114:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800d116:	4b03      	ldr	r3, [pc, #12]	@ (800d124 <sen5x_enable+0x9c>)
 800d118:	781b      	ldrb	r3, [r3, #0]
}
 800d11a:	0018      	movs	r0, r3
 800d11c:	46bd      	mov	sp, r7
 800d11e:	b002      	add	sp, #8
 800d120:	bd80      	pop	{r7, pc}
 800d122:	46c0      	nop			@ (mov r8, r8)
 800d124:	20000eef 	.word	0x20000eef
 800d128:	0802ba24 	.word	0x0802ba24
 800d12c:	0802ba2c 	.word	0x0802ba2c
 800d130:	0802ba38 	.word	0x0802ba38
 800d134:	0802ba54 	.word	0x0802ba54
 800d138:	0802ba58 	.word	0x0802ba58
 800d13c:	2000009d 	.word	0x2000009d

0800d140 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800d140:	b580      	push	{r7, lr}
 800d142:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800d144:	2380      	movs	r3, #128	@ 0x80
 800d146:	015b      	lsls	r3, r3, #5
 800d148:	480f      	ldr	r0, [pc, #60]	@ (800d188 <sen5x_Power_On+0x48>)
 800d14a:	2201      	movs	r2, #1
 800d14c:	0019      	movs	r1, r3
 800d14e:	f007 fa7e 	bl	801464e <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800d152:	4a0e      	ldr	r2, [pc, #56]	@ (800d18c <sen5x_Power_On+0x4c>)
 800d154:	4b0e      	ldr	r3, [pc, #56]	@ (800d190 <sen5x_Power_On+0x50>)
 800d156:	0019      	movs	r1, r3
 800d158:	2003      	movs	r0, #3
 800d15a:	f005 fab1 	bl	80126c0 <CreateLine>
  HAL_Delay(150);
 800d15e:	2096      	movs	r0, #150	@ 0x96
 800d160:	f005 ffee 	bl	8013140 <HAL_Delay>
  if (sen5x_device_reset()) {
 800d164:	f001 f9a0 	bl	800e4a8 <sen5x_device_reset>
 800d168:	1e03      	subs	r3, r0, #0
 800d16a:	d006      	beq.n	800d17a <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800d16c:	4a09      	ldr	r2, [pc, #36]	@ (800d194 <sen5x_Power_On+0x54>)
 800d16e:	4b0a      	ldr	r3, [pc, #40]	@ (800d198 <sen5x_Power_On+0x58>)
 800d170:	0019      	movs	r1, r3
 800d172:	2001      	movs	r0, #1
 800d174:	f005 faa4 	bl	80126c0 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800d178:	e002      	b.n	800d180 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800d17a:	4b08      	ldr	r3, [pc, #32]	@ (800d19c <sen5x_Power_On+0x5c>)
 800d17c:	2201      	movs	r2, #1
 800d17e:	701a      	strb	r2, [r3, #0]
}
 800d180:	46c0      	nop			@ (mov r8, r8)
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	46c0      	nop			@ (mov r8, r8)
 800d188:	50000800 	.word	0x50000800
 800d18c:	0802ba78 	.word	0x0802ba78
 800d190:	0802ba94 	.word	0x0802ba94
 800d194:	0802ba98 	.word	0x0802ba98
 800d198:	0802bac0 	.word	0x0802bac0
 800d19c:	20000eed 	.word	0x20000eed

0800d1a0 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800d1a4:	4b0e      	ldr	r3, [pc, #56]	@ (800d1e0 <sen5x_Power_Off+0x40>)
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d006      	beq.n	800d1ba <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800d1ac:	4a0d      	ldr	r2, [pc, #52]	@ (800d1e4 <sen5x_Power_Off+0x44>)
 800d1ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d1e8 <sen5x_Power_Off+0x48>)
 800d1b0:	0019      	movs	r1, r3
 800d1b2:	2003      	movs	r0, #3
 800d1b4:	f005 fa84 	bl	80126c0 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800d1b8:	e00f      	b.n	800d1da <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800d1ba:	4a0c      	ldr	r2, [pc, #48]	@ (800d1ec <sen5x_Power_Off+0x4c>)
 800d1bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d1e8 <sen5x_Power_Off+0x48>)
 800d1be:	0019      	movs	r1, r3
 800d1c0:	2003      	movs	r0, #3
 800d1c2:	f005 fa7d 	bl	80126c0 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800d1c6:	2380      	movs	r3, #128	@ 0x80
 800d1c8:	015b      	lsls	r3, r3, #5
 800d1ca:	4809      	ldr	r0, [pc, #36]	@ (800d1f0 <sen5x_Power_Off+0x50>)
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	0019      	movs	r1, r3
 800d1d0:	f007 fa3d 	bl	801464e <HAL_GPIO_WritePin>
      sen5x_On = false;
 800d1d4:	4b07      	ldr	r3, [pc, #28]	@ (800d1f4 <sen5x_Power_Off+0x54>)
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	701a      	strb	r2, [r3, #0]
}
 800d1da:	46c0      	nop			@ (mov r8, r8)
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	20000eee 	.word	0x20000eee
 800d1e4:	0802bac4 	.word	0x0802bac4
 800d1e8:	0802ba94 	.word	0x0802ba94
 800d1ec:	0802baf4 	.word	0x0802baf4
 800d1f0:	50000800 	.word	0x50000800
 800d1f4:	20000eed 	.word	0x20000eed

0800d1f8 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800d1fc:	4b02      	ldr	r3, [pc, #8]	@ (800d208 <reset_fanCleaningDone+0x10>)
 800d1fe:	2200      	movs	r2, #0
 800d200:	701a      	strb	r2, [r3, #0]
}
 800d202:	46c0      	nop			@ (mov r8, r8)
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	20000eec 	.word	0x20000eec

0800d20c <probe_sen5x>:

int16_t probe_sen5x(void) {
 800d20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d20e:	b093      	sub	sp, #76	@ 0x4c
 800d210:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800d212:	2436      	movs	r4, #54	@ 0x36
 800d214:	193b      	adds	r3, r7, r4
 800d216:	2200      	movs	r2, #0
 800d218:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800d21a:	2335      	movs	r3, #53	@ 0x35
 800d21c:	18fb      	adds	r3, r7, r3
 800d21e:	2220      	movs	r2, #32
 800d220:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800d222:	2334      	movs	r3, #52	@ 0x34
 800d224:	18fb      	adds	r3, r7, r3
 800d226:	2220      	movs	r2, #32
 800d228:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800d22a:	f7ff ff89 	bl	800d140 <sen5x_Power_On>
  error = sen5x_device_reset();
 800d22e:	0025      	movs	r5, r4
 800d230:	193c      	adds	r4, r7, r4
 800d232:	f001 f939 	bl	800e4a8 <sen5x_device_reset>
 800d236:	0003      	movs	r3, r0
 800d238:	8023      	strh	r3, [r4, #0]
  if (error) {
 800d23a:	002c      	movs	r4, r5
 800d23c:	193b      	adds	r3, r7, r4
 800d23e:	2200      	movs	r2, #0
 800d240:	5e9b      	ldrsh	r3, [r3, r2]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00b      	beq.n	800d25e <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800d246:	193b      	adds	r3, r7, r4
 800d248:	2200      	movs	r2, #0
 800d24a:	5e9b      	ldrsh	r3, [r3, r2]
 800d24c:	4a75      	ldr	r2, [pc, #468]	@ (800d424 <probe_sen5x+0x218>)
 800d24e:	4976      	ldr	r1, [pc, #472]	@ (800d428 <probe_sen5x+0x21c>)
 800d250:	2001      	movs	r0, #1
 800d252:	f005 fa35 	bl	80126c0 <CreateLine>
      return error;
 800d256:	193b      	adds	r3, r7, r4
 800d258:	2200      	movs	r2, #0
 800d25a:	5e9b      	ldrsh	r3, [r3, r2]
 800d25c:	e0de      	b.n	800d41c <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800d25e:	2536      	movs	r5, #54	@ 0x36
 800d260:	197c      	adds	r4, r7, r5
 800d262:	2335      	movs	r3, #53	@ 0x35
 800d264:	18fb      	adds	r3, r7, r3
 800d266:	781a      	ldrb	r2, [r3, #0]
 800d268:	230c      	movs	r3, #12
 800d26a:	18fb      	adds	r3, r7, r3
 800d26c:	0011      	movs	r1, r2
 800d26e:	0018      	movs	r0, r3
 800d270:	f001 f806 	bl	800e280 <sen5x_get_serial_number>
 800d274:	0003      	movs	r3, r0
 800d276:	8023      	strh	r3, [r4, #0]
  if (error) {
 800d278:	197b      	adds	r3, r7, r5
 800d27a:	2200      	movs	r2, #0
 800d27c:	5e9b      	ldrsh	r3, [r3, r2]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00b      	beq.n	800d29a <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800d282:	197b      	adds	r3, r7, r5
 800d284:	2200      	movs	r2, #0
 800d286:	5e9a      	ldrsh	r2, [r3, r2]
 800d288:	4b68      	ldr	r3, [pc, #416]	@ (800d42c <probe_sen5x+0x220>)
 800d28a:	0011      	movs	r1, r2
 800d28c:	0018      	movs	r0, r3
 800d28e:	f017 fa89 	bl	80247a4 <iprintf>
      return error;
 800d292:	197b      	adds	r3, r7, r5
 800d294:	2200      	movs	r2, #0
 800d296:	5e9b      	ldrsh	r3, [r3, r2]
 800d298:	e0c0      	b.n	800d41c <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800d29a:	230c      	movs	r3, #12
 800d29c:	18fa      	adds	r2, r7, r3
 800d29e:	4b64      	ldr	r3, [pc, #400]	@ (800d430 <probe_sen5x+0x224>)
 800d2a0:	0011      	movs	r1, r2
 800d2a2:	0018      	movs	r0, r3
 800d2a4:	f017 fa7e 	bl	80247a4 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800d2a8:	2536      	movs	r5, #54	@ 0x36
 800d2aa:	197c      	adds	r4, r7, r5
 800d2ac:	2334      	movs	r3, #52	@ 0x34
 800d2ae:	18fb      	adds	r3, r7, r3
 800d2b0:	781a      	ldrb	r2, [r3, #0]
 800d2b2:	4b60      	ldr	r3, [pc, #384]	@ (800d434 <probe_sen5x+0x228>)
 800d2b4:	0011      	movs	r1, r2
 800d2b6:	0018      	movs	r0, r3
 800d2b8:	f000 ff8c 	bl	800e1d4 <sen5x_get_product_name>
 800d2bc:	0003      	movs	r3, r0
 800d2be:	8023      	strh	r3, [r4, #0]
  if (error) {
 800d2c0:	197b      	adds	r3, r7, r5
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	5e9b      	ldrsh	r3, [r3, r2]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00b      	beq.n	800d2e2 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800d2ca:	197b      	adds	r3, r7, r5
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	5e9a      	ldrsh	r2, [r3, r2]
 800d2d0:	4b59      	ldr	r3, [pc, #356]	@ (800d438 <probe_sen5x+0x22c>)
 800d2d2:	0011      	movs	r1, r2
 800d2d4:	0018      	movs	r0, r3
 800d2d6:	f017 fa65 	bl	80247a4 <iprintf>
      return error;
 800d2da:	197b      	adds	r3, r7, r5
 800d2dc:	2200      	movs	r2, #0
 800d2de:	5e9b      	ldrsh	r3, [r3, r2]
 800d2e0:	e09c      	b.n	800d41c <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800d2e2:	4a54      	ldr	r2, [pc, #336]	@ (800d434 <probe_sen5x+0x228>)
 800d2e4:	4b55      	ldr	r3, [pc, #340]	@ (800d43c <probe_sen5x+0x230>)
 800d2e6:	0011      	movs	r1, r2
 800d2e8:	0018      	movs	r0, r3
 800d2ea:	f017 fa5b 	bl	80247a4 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800d2ee:	2636      	movs	r6, #54	@ 0x36
 800d2f0:	19bc      	adds	r4, r7, r6
 800d2f2:	2308      	movs	r3, #8
 800d2f4:	18fd      	adds	r5, r7, r3
 800d2f6:	2309      	movs	r3, #9
 800d2f8:	18fa      	adds	r2, r7, r3
 800d2fa:	230a      	movs	r3, #10
 800d2fc:	18f9      	adds	r1, r7, r3
 800d2fe:	230b      	movs	r3, #11
 800d300:	18f8      	adds	r0, r7, r3
 800d302:	1d7b      	adds	r3, r7, #5
 800d304:	9302      	str	r3, [sp, #8]
 800d306:	1dbb      	adds	r3, r7, #6
 800d308:	9301      	str	r3, [sp, #4]
 800d30a:	1dfb      	adds	r3, r7, #7
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	002b      	movs	r3, r5
 800d310:	f001 f80c 	bl	800e32c <sen5x_get_version>
 800d314:	0003      	movs	r3, r0
 800d316:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800d318:	19bb      	adds	r3, r7, r6
 800d31a:	2200      	movs	r2, #0
 800d31c:	5e9b      	ldrsh	r3, [r3, r2]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00b      	beq.n	800d33a <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800d322:	19bb      	adds	r3, r7, r6
 800d324:	2200      	movs	r2, #0
 800d326:	5e9a      	ldrsh	r2, [r3, r2]
 800d328:	4b45      	ldr	r3, [pc, #276]	@ (800d440 <probe_sen5x+0x234>)
 800d32a:	0011      	movs	r1, r2
 800d32c:	0018      	movs	r0, r3
 800d32e:	f017 fa39 	bl	80247a4 <iprintf>
      return error;
 800d332:	19bb      	adds	r3, r7, r6
 800d334:	2200      	movs	r2, #0
 800d336:	5e9b      	ldrsh	r3, [r3, r2]
 800d338:	e070      	b.n	800d41c <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800d33a:	230b      	movs	r3, #11
 800d33c:	18fb      	adds	r3, r7, r3
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	0019      	movs	r1, r3
 800d342:	230a      	movs	r3, #10
 800d344:	18fb      	adds	r3, r7, r3
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	001a      	movs	r2, r3
 800d34a:	2308      	movs	r3, #8
 800d34c:	18fb      	adds	r3, r7, r3
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	001c      	movs	r4, r3
 800d352:	1dfb      	adds	r3, r7, #7
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	483b      	ldr	r0, [pc, #236]	@ (800d444 <probe_sen5x+0x238>)
 800d358:	9300      	str	r3, [sp, #0]
 800d35a:	0023      	movs	r3, r4
 800d35c:	f017 fa22 	bl	80247a4 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800d360:	2300      	movs	r3, #0
 800d362:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800d364:	262e      	movs	r6, #46	@ 0x2e
 800d366:	19bb      	adds	r3, r7, r6
 800d368:	2200      	movs	r2, #0
 800d36a:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800d36c:	232c      	movs	r3, #44	@ 0x2c
 800d36e:	18fb      	adds	r3, r7, r3
 800d370:	2200      	movs	r2, #0
 800d372:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800d374:	4934      	ldr	r1, [pc, #208]	@ (800d448 <probe_sen5x+0x23c>)
 800d376:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d378:	f7f3 fe12 	bl	8000fa0 <__aeabi_fmul>
 800d37c:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800d37e:	1c18      	adds	r0, r3, #0
 800d380:	f7f4 f906 	bl	8001590 <__aeabi_f2iz>
 800d384:	0003      	movs	r3, r0
 800d386:	b218      	sxth	r0, r3
 800d388:	2536      	movs	r5, #54	@ 0x36
 800d38a:	197c      	adds	r4, r7, r5
 800d38c:	232c      	movs	r3, #44	@ 0x2c
 800d38e:	18fb      	adds	r3, r7, r3
 800d390:	881a      	ldrh	r2, [r3, #0]
 800d392:	19bb      	adds	r3, r7, r6
 800d394:	2100      	movs	r1, #0
 800d396:	5e5b      	ldrsh	r3, [r3, r1]
 800d398:	0019      	movs	r1, r3
 800d39a:	f000 feb7 	bl	800e10c <sen5x_set_temperature_offset_parameters>
 800d39e:	0003      	movs	r3, r0
 800d3a0:	8023      	strh	r3, [r4, #0]
  if (error) {
 800d3a2:	197b      	adds	r3, r7, r5
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	5e9b      	ldrsh	r3, [r3, r2]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00b      	beq.n	800d3c4 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800d3ac:	197b      	adds	r3, r7, r5
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	5e9b      	ldrsh	r3, [r3, r2]
 800d3b2:	4a26      	ldr	r2, [pc, #152]	@ (800d44c <probe_sen5x+0x240>)
 800d3b4:	491c      	ldr	r1, [pc, #112]	@ (800d428 <probe_sen5x+0x21c>)
 800d3b6:	2001      	movs	r0, #1
 800d3b8:	f005 f982 	bl	80126c0 <CreateLine>
      return error;
 800d3bc:	197b      	adds	r3, r7, r5
 800d3be:	2200      	movs	r2, #0
 800d3c0:	5e9b      	ldrsh	r3, [r3, r2]
 800d3c2:	e02b      	b.n	800d41c <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800d3c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3c6:	f7f6 f84d 	bl	8003464 <__aeabi_f2d>
 800d3ca:	0002      	movs	r2, r0
 800d3cc:	000b      	movs	r3, r1
 800d3ce:	4820      	ldr	r0, [pc, #128]	@ (800d450 <probe_sen5x+0x244>)
 800d3d0:	4920      	ldr	r1, [pc, #128]	@ (800d454 <probe_sen5x+0x248>)
 800d3d2:	9200      	str	r2, [sp, #0]
 800d3d4:	9301      	str	r3, [sp, #4]
 800d3d6:	0002      	movs	r2, r0
 800d3d8:	2002      	movs	r0, #2
 800d3da:	f005 f971 	bl	80126c0 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800d3de:	f7fb fb63 	bl	8008aa8 <Check_USB_PowerOn>
 800d3e2:	0003      	movs	r3, r0
 800d3e4:	001a      	movs	r2, r3
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	4053      	eors	r3, r2
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00a      	beq.n	800d406 <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800d3f0:	f7ff fed6 	bl	800d1a0 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800d3f4:	f005 fe9a 	bl	801312c <HAL_GetTick>
 800d3f8:	0003      	movs	r3, r0
 800d3fa:	22fa      	movs	r2, #250	@ 0xfa
 800d3fc:	00d2      	lsls	r2, r2, #3
 800d3fe:	189a      	adds	r2, r3, r2
 800d400:	4b15      	ldr	r3, [pc, #84]	@ (800d458 <probe_sen5x+0x24c>)
 800d402:	601a      	str	r2, [r3, #0]
 800d404:	e006      	b.n	800d414 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800d406:	f005 fe91 	bl	801312c <HAL_GetTick>
 800d40a:	0003      	movs	r3, r0
 800d40c:	4a13      	ldr	r2, [pc, #76]	@ (800d45c <probe_sen5x+0x250>)
 800d40e:	189a      	adds	r2, r3, r2
 800d410:	4b11      	ldr	r3, [pc, #68]	@ (800d458 <probe_sen5x+0x24c>)
 800d412:	601a      	str	r2, [r3, #0]
  }
  return error;
 800d414:	2336      	movs	r3, #54	@ 0x36
 800d416:	18fb      	adds	r3, r7, r3
 800d418:	2200      	movs	r2, #0
 800d41a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800d41c:	0018      	movs	r0, r3
 800d41e:	46bd      	mov	sp, r7
 800d420:	b00f      	add	sp, #60	@ 0x3c
 800d422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d424:	0802bb10 	.word	0x0802bb10
 800d428:	0802bac0 	.word	0x0802bac0
 800d42c:	0802bb3c 	.word	0x0802bb3c
 800d430:	0802bb6c 	.word	0x0802bb6c
 800d434:	20000ef0 	.word	0x20000ef0
 800d438:	0802bb80 	.word	0x0802bb80
 800d43c:	0802bbb0 	.word	0x0802bbb0
 800d440:	0802bbc4 	.word	0x0802bbc4
 800d444:	0802bbf0 	.word	0x0802bbf0
 800d448:	43480000 	.word	0x43480000
 800d44c:	0802bc14 	.word	0x0802bc14
 800d450:	0802bc54 	.word	0x0802bc54
 800d454:	0802ba54 	.word	0x0802ba54
 800d458:	20000efc 	.word	0x20000efc
 800d45c:	00006d60 	.word	0x00006d60

0800d460 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800d460:	b590      	push	{r4, r7, lr}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800d466:	1dbb      	adds	r3, r7, #6
 800d468:	2200      	movs	r2, #0
 800d46a:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800d46c:	4b1b      	ldr	r3, [pc, #108]	@ (800d4dc <sen5x_lightup_measurement+0x7c>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d00b      	beq.n	800d48c <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800d474:	4a1a      	ldr	r2, [pc, #104]	@ (800d4e0 <sen5x_lightup_measurement+0x80>)
 800d476:	4b1b      	ldr	r3, [pc, #108]	@ (800d4e4 <sen5x_lightup_measurement+0x84>)
 800d478:	0019      	movs	r1, r3
 800d47a:	2002      	movs	r0, #2
 800d47c:	f005 f920 	bl	80126c0 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800d480:	1dbc      	adds	r4, r7, #6
 800d482:	f000 fccf 	bl	800de24 <sen5x_start_measurement_without_pm>
 800d486:	0003      	movs	r3, r0
 800d488:	8023      	strh	r3, [r4, #0]
 800d48a:	e00a      	b.n	800d4a2 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800d48c:	4a16      	ldr	r2, [pc, #88]	@ (800d4e8 <sen5x_lightup_measurement+0x88>)
 800d48e:	4b15      	ldr	r3, [pc, #84]	@ (800d4e4 <sen5x_lightup_measurement+0x84>)
 800d490:	0019      	movs	r1, r3
 800d492:	2002      	movs	r0, #2
 800d494:	f005 f914 	bl	80126c0 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800d498:	1dbc      	adds	r4, r7, #6
 800d49a:	f000 fc95 	bl	800ddc8 <sen5x_start_measurement>
 800d49e:	0003      	movs	r3, r0
 800d4a0:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800d4a2:	1dbb      	adds	r3, r7, #6
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	5e9b      	ldrsh	r3, [r3, r2]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d008      	beq.n	800d4be <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800d4ac:	1dbb      	adds	r3, r7, #6
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	5e9b      	ldrsh	r3, [r3, r2]
 800d4b2:	4a0e      	ldr	r2, [pc, #56]	@ (800d4ec <sen5x_lightup_measurement+0x8c>)
 800d4b4:	490e      	ldr	r1, [pc, #56]	@ (800d4f0 <sen5x_lightup_measurement+0x90>)
 800d4b6:	2001      	movs	r0, #1
 800d4b8:	f005 f902 	bl	80126c0 <CreateLine>
 800d4bc:	e007      	b.n	800d4ce <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800d4be:	f7fb fb23 	bl	8008b08 <showTime>
    Info("sen5x_start_measurement executed");
 800d4c2:	4a0c      	ldr	r2, [pc, #48]	@ (800d4f4 <sen5x_lightup_measurement+0x94>)
 800d4c4:	4b07      	ldr	r3, [pc, #28]	@ (800d4e4 <sen5x_lightup_measurement+0x84>)
 800d4c6:	0019      	movs	r1, r3
 800d4c8:	2002      	movs	r0, #2
 800d4ca:	f005 f8f9 	bl	80126c0 <CreateLine>
  }
  return error;
 800d4ce:	1dbb      	adds	r3, r7, #6
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	5e9b      	ldrsh	r3, [r3, r2]
}
 800d4d4:	0018      	movs	r0, r3
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	b003      	add	sp, #12
 800d4da:	bd90      	pop	{r4, r7, pc}
 800d4dc:	20000eee 	.word	0x20000eee
 800d4e0:	0802bc8c 	.word	0x0802bc8c
 800d4e4:	0802ba54 	.word	0x0802ba54
 800d4e8:	0802bcb8 	.word	0x0802bcb8
 800d4ec:	0802bcd8 	.word	0x0802bcd8
 800d4f0:	0802bac0 	.word	0x0802bac0
 800d4f4:	0802bd08 	.word	0x0802bd08

0800d4f8 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800d4f8:	b590      	push	{r4, r7, lr}
 800d4fa:	b083      	sub	sp, #12
 800d4fc:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800d4fe:	1dbb      	adds	r3, r7, #6
 800d500:	2200      	movs	r2, #0
 800d502:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800d504:	4b21      	ldr	r3, [pc, #132]	@ (800d58c <sen5x_extinguish_measurement+0x94>)
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d01e      	beq.n	800d54a <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800d50c:	4a20      	ldr	r2, [pc, #128]	@ (800d590 <sen5x_extinguish_measurement+0x98>)
 800d50e:	4b21      	ldr	r3, [pc, #132]	@ (800d594 <sen5x_extinguish_measurement+0x9c>)
 800d510:	0019      	movs	r1, r3
 800d512:	2002      	movs	r0, #2
 800d514:	f005 f8d4 	bl	80126c0 <CreateLine>
    Info("PM measurement is disabled");
 800d518:	4a1f      	ldr	r2, [pc, #124]	@ (800d598 <sen5x_extinguish_measurement+0xa0>)
 800d51a:	4b1e      	ldr	r3, [pc, #120]	@ (800d594 <sen5x_extinguish_measurement+0x9c>)
 800d51c:	0019      	movs	r1, r3
 800d51e:	2002      	movs	r0, #2
 800d520:	f005 f8ce 	bl	80126c0 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800d524:	1dbc      	adds	r4, r7, #6
 800d526:	f000 fc7d 	bl	800de24 <sen5x_start_measurement_without_pm>
 800d52a:	0003      	movs	r3, r0
 800d52c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d52e:	1dbb      	adds	r3, r7, #6
 800d530:	2200      	movs	r2, #0
 800d532:	5e9b      	ldrsh	r3, [r3, r2]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d022      	beq.n	800d57e <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800d538:	1dbb      	adds	r3, r7, #6
 800d53a:	2200      	movs	r2, #0
 800d53c:	5e9b      	ldrsh	r3, [r3, r2]
 800d53e:	4a17      	ldr	r2, [pc, #92]	@ (800d59c <sen5x_extinguish_measurement+0xa4>)
 800d540:	4917      	ldr	r1, [pc, #92]	@ (800d5a0 <sen5x_extinguish_measurement+0xa8>)
 800d542:	2001      	movs	r0, #1
 800d544:	f005 f8bc 	bl	80126c0 <CreateLine>
 800d548:	e019      	b.n	800d57e <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800d54a:	1dbc      	adds	r4, r7, #6
 800d54c:	f000 fc98 	bl	800de80 <sen5x_stop_measurement>
 800d550:	0003      	movs	r3, r0
 800d552:	8023      	strh	r3, [r4, #0]
    showTime();
 800d554:	f7fb fad8 	bl	8008b08 <showTime>
    Info("sen5x_stop_measurement executed");
 800d558:	4a12      	ldr	r2, [pc, #72]	@ (800d5a4 <sen5x_extinguish_measurement+0xac>)
 800d55a:	4b0e      	ldr	r3, [pc, #56]	@ (800d594 <sen5x_extinguish_measurement+0x9c>)
 800d55c:	0019      	movs	r1, r3
 800d55e:	2002      	movs	r0, #2
 800d560:	f005 f8ae 	bl	80126c0 <CreateLine>
    if (error) {
 800d564:	1dbb      	adds	r3, r7, #6
 800d566:	2200      	movs	r2, #0
 800d568:	5e9b      	ldrsh	r3, [r3, r2]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d007      	beq.n	800d57e <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800d56e:	1dbb      	adds	r3, r7, #6
 800d570:	2200      	movs	r2, #0
 800d572:	5e9b      	ldrsh	r3, [r3, r2]
 800d574:	4a0c      	ldr	r2, [pc, #48]	@ (800d5a8 <sen5x_extinguish_measurement+0xb0>)
 800d576:	490a      	ldr	r1, [pc, #40]	@ (800d5a0 <sen5x_extinguish_measurement+0xa8>)
 800d578:	2001      	movs	r0, #1
 800d57a:	f005 f8a1 	bl	80126c0 <CreateLine>
    }
  }
  return error;
 800d57e:	1dbb      	adds	r3, r7, #6
 800d580:	2200      	movs	r2, #0
 800d582:	5e9b      	ldrsh	r3, [r3, r2]
}
 800d584:	0018      	movs	r0, r3
 800d586:	46bd      	mov	sp, r7
 800d588:	b003      	add	sp, #12
 800d58a:	bd90      	pop	{r4, r7, pc}
 800d58c:	20000eee 	.word	0x20000eee
 800d590:	0802bd2c 	.word	0x0802bd2c
 800d594:	0802ba54 	.word	0x0802ba54
 800d598:	0802bd64 	.word	0x0802bd64
 800d59c:	0802bd80 	.word	0x0802bd80
 800d5a0:	0802bac0 	.word	0x0802bac0
 800d5a4:	0802bdc0 	.word	0x0802bdc0
 800d5a8:	0802bde0 	.word	0x0802bde0

0800d5ac <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ae:	b08d      	sub	sp, #52	@ 0x34
 800d5b0:	af04      	add	r7, sp, #16
 800d5b2:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800d5b4:	261e      	movs	r6, #30
 800d5b6:	19bb      	adds	r3, r7, r6
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800d5bc:	19bc      	adds	r4, r7, r6
 800d5be:	2316      	movs	r3, #22
 800d5c0:	18fd      	adds	r5, r7, r3
 800d5c2:	2318      	movs	r3, #24
 800d5c4:	18fa      	adds	r2, r7, r3
 800d5c6:	231a      	movs	r3, #26
 800d5c8:	18f9      	adds	r1, r7, r3
 800d5ca:	231c      	movs	r3, #28
 800d5cc:	18f8      	adds	r0, r7, r3
 800d5ce:	230e      	movs	r3, #14
 800d5d0:	18fb      	adds	r3, r7, r3
 800d5d2:	9303      	str	r3, [sp, #12]
 800d5d4:	2310      	movs	r3, #16
 800d5d6:	18fb      	adds	r3, r7, r3
 800d5d8:	9302      	str	r3, [sp, #8]
 800d5da:	2312      	movs	r3, #18
 800d5dc:	18fb      	adds	r3, r7, r3
 800d5de:	9301      	str	r3, [sp, #4]
 800d5e0:	2314      	movs	r3, #20
 800d5e2:	18fb      	adds	r3, r7, r3
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	002b      	movs	r3, r5
 800d5e8:	f000 fccc 	bl	800df84 <sen5x_read_measured_values>
 800d5ec:	0003      	movs	r3, r0
 800d5ee:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800d5f0:	19bb      	adds	r3, r7, r6
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	5e9b      	ldrsh	r3, [r3, r2]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d003      	beq.n	800d602 <sen5x_read_measurement+0x56>
    return error;
 800d5fa:	19bb      	adds	r3, r7, r6
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	5e9b      	ldrsh	r3, [r3, r2]
 800d600:	e02c      	b.n	800d65c <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800d602:	231c      	movs	r3, #28
 800d604:	18fb      	adds	r3, r7, r3
 800d606:	881a      	ldrh	r2, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800d60c:	231a      	movs	r3, #26
 800d60e:	18fb      	adds	r3, r7, r3
 800d610:	881a      	ldrh	r2, [r3, #0]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800d616:	2318      	movs	r3, #24
 800d618:	18fb      	adds	r3, r7, r3
 800d61a:	881a      	ldrh	r2, [r3, #0]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800d620:	2316      	movs	r3, #22
 800d622:	18fb      	adds	r3, r7, r3
 800d624:	881a      	ldrh	r2, [r3, #0]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800d62a:	2314      	movs	r3, #20
 800d62c:	18fb      	adds	r3, r7, r3
 800d62e:	2200      	movs	r2, #0
 800d630:	5e9a      	ldrsh	r2, [r3, r2]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800d636:	2312      	movs	r3, #18
 800d638:	18fb      	adds	r3, r7, r3
 800d63a:	2200      	movs	r2, #0
 800d63c:	5e9a      	ldrsh	r2, [r3, r2]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800d642:	2310      	movs	r3, #16
 800d644:	18fb      	adds	r3, r7, r3
 800d646:	2200      	movs	r2, #0
 800d648:	5e9a      	ldrsh	r2, [r3, r2]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800d64e:	230e      	movs	r3, #14
 800d650:	18fb      	adds	r3, r7, r3
 800d652:	2200      	movs	r2, #0
 800d654:	5e9a      	ldrsh	r2, [r3, r2]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	81da      	strh	r2, [r3, #14]
  return 0;
 800d65a:	2300      	movs	r3, #0
}
 800d65c:	0018      	movs	r0, r3
 800d65e:	46bd      	mov	sp, r7
 800d660:	b009      	add	sp, #36	@ 0x24
 800d662:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d664 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800d664:	b580      	push	{r7, lr}
 800d666:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800d668:	4b63      	ldr	r3, [pc, #396]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d66a:	881b      	ldrh	r3, [r3, #0]
 800d66c:	4a63      	ldr	r2, [pc, #396]	@ (800d7fc <sen5x_printvalues+0x198>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d013      	beq.n	800d69a <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800d672:	4b61      	ldr	r3, [pc, #388]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d674:	881b      	ldrh	r3, [r3, #0]
 800d676:	0018      	movs	r0, r3
 800d678:	f7f3 ffaa 	bl	80015d0 <__aeabi_i2f>
 800d67c:	1c03      	adds	r3, r0, #0
 800d67e:	4960      	ldr	r1, [pc, #384]	@ (800d800 <sen5x_printvalues+0x19c>)
 800d680:	1c18      	adds	r0, r3, #0
 800d682:	f7f3 faa7 	bl	8000bd4 <__aeabi_fdiv>
 800d686:	1c03      	adds	r3, r0, #0
 800d688:	1c18      	adds	r0, r3, #0
 800d68a:	f7f5 feeb 	bl	8003464 <__aeabi_f2d>
 800d68e:	0002      	movs	r2, r0
 800d690:	000b      	movs	r3, r1
 800d692:	495c      	ldr	r1, [pc, #368]	@ (800d804 <sen5x_printvalues+0x1a0>)
 800d694:	0008      	movs	r0, r1
 800d696:	f017 f885 	bl	80247a4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800d69a:	4b57      	ldr	r3, [pc, #348]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d69c:	885b      	ldrh	r3, [r3, #2]
 800d69e:	4a57      	ldr	r2, [pc, #348]	@ (800d7fc <sen5x_printvalues+0x198>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d013      	beq.n	800d6cc <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800d6a4:	4b54      	ldr	r3, [pc, #336]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d6a6:	885b      	ldrh	r3, [r3, #2]
 800d6a8:	0018      	movs	r0, r3
 800d6aa:	f7f3 ff91 	bl	80015d0 <__aeabi_i2f>
 800d6ae:	1c03      	adds	r3, r0, #0
 800d6b0:	4953      	ldr	r1, [pc, #332]	@ (800d800 <sen5x_printvalues+0x19c>)
 800d6b2:	1c18      	adds	r0, r3, #0
 800d6b4:	f7f3 fa8e 	bl	8000bd4 <__aeabi_fdiv>
 800d6b8:	1c03      	adds	r3, r0, #0
 800d6ba:	1c18      	adds	r0, r3, #0
 800d6bc:	f7f5 fed2 	bl	8003464 <__aeabi_f2d>
 800d6c0:	0002      	movs	r2, r0
 800d6c2:	000b      	movs	r3, r1
 800d6c4:	4950      	ldr	r1, [pc, #320]	@ (800d808 <sen5x_printvalues+0x1a4>)
 800d6c6:	0008      	movs	r0, r1
 800d6c8:	f017 f86c 	bl	80247a4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800d6cc:	4b4a      	ldr	r3, [pc, #296]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d6ce:	889b      	ldrh	r3, [r3, #4]
 800d6d0:	4a4a      	ldr	r2, [pc, #296]	@ (800d7fc <sen5x_printvalues+0x198>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d013      	beq.n	800d6fe <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800d6d6:	4b48      	ldr	r3, [pc, #288]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d6d8:	889b      	ldrh	r3, [r3, #4]
 800d6da:	0018      	movs	r0, r3
 800d6dc:	f7f3 ff78 	bl	80015d0 <__aeabi_i2f>
 800d6e0:	1c03      	adds	r3, r0, #0
 800d6e2:	4947      	ldr	r1, [pc, #284]	@ (800d800 <sen5x_printvalues+0x19c>)
 800d6e4:	1c18      	adds	r0, r3, #0
 800d6e6:	f7f3 fa75 	bl	8000bd4 <__aeabi_fdiv>
 800d6ea:	1c03      	adds	r3, r0, #0
 800d6ec:	1c18      	adds	r0, r3, #0
 800d6ee:	f7f5 feb9 	bl	8003464 <__aeabi_f2d>
 800d6f2:	0002      	movs	r2, r0
 800d6f4:	000b      	movs	r3, r1
 800d6f6:	4945      	ldr	r1, [pc, #276]	@ (800d80c <sen5x_printvalues+0x1a8>)
 800d6f8:	0008      	movs	r0, r1
 800d6fa:	f017 f853 	bl	80247a4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800d6fe:	4b3e      	ldr	r3, [pc, #248]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d700:	88db      	ldrh	r3, [r3, #6]
 800d702:	4a3e      	ldr	r2, [pc, #248]	@ (800d7fc <sen5x_printvalues+0x198>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d013      	beq.n	800d730 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800d708:	4b3b      	ldr	r3, [pc, #236]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d70a:	88db      	ldrh	r3, [r3, #6]
 800d70c:	0018      	movs	r0, r3
 800d70e:	f7f3 ff5f 	bl	80015d0 <__aeabi_i2f>
 800d712:	1c03      	adds	r3, r0, #0
 800d714:	493a      	ldr	r1, [pc, #232]	@ (800d800 <sen5x_printvalues+0x19c>)
 800d716:	1c18      	adds	r0, r3, #0
 800d718:	f7f3 fa5c 	bl	8000bd4 <__aeabi_fdiv>
 800d71c:	1c03      	adds	r3, r0, #0
 800d71e:	1c18      	adds	r0, r3, #0
 800d720:	f7f5 fea0 	bl	8003464 <__aeabi_f2d>
 800d724:	0002      	movs	r2, r0
 800d726:	000b      	movs	r3, r1
 800d728:	4939      	ldr	r1, [pc, #228]	@ (800d810 <sen5x_printvalues+0x1ac>)
 800d72a:	0008      	movs	r0, r1
 800d72c:	f017 f83a 	bl	80247a4 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800d730:	4b31      	ldr	r3, [pc, #196]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d732:	2208      	movs	r2, #8
 800d734:	5e9b      	ldrsh	r3, [r3, r2]
 800d736:	4a37      	ldr	r2, [pc, #220]	@ (800d814 <sen5x_printvalues+0x1b0>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d014      	beq.n	800d766 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800d73c:	4b2e      	ldr	r3, [pc, #184]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d73e:	2208      	movs	r2, #8
 800d740:	5e9b      	ldrsh	r3, [r3, r2]
 800d742:	0018      	movs	r0, r3
 800d744:	f7f3 ff44 	bl	80015d0 <__aeabi_i2f>
 800d748:	1c03      	adds	r3, r0, #0
 800d74a:	4933      	ldr	r1, [pc, #204]	@ (800d818 <sen5x_printvalues+0x1b4>)
 800d74c:	1c18      	adds	r0, r3, #0
 800d74e:	f7f3 fa41 	bl	8000bd4 <__aeabi_fdiv>
 800d752:	1c03      	adds	r3, r0, #0
 800d754:	1c18      	adds	r0, r3, #0
 800d756:	f7f5 fe85 	bl	8003464 <__aeabi_f2d>
 800d75a:	0002      	movs	r2, r0
 800d75c:	000b      	movs	r3, r1
 800d75e:	492f      	ldr	r1, [pc, #188]	@ (800d81c <sen5x_printvalues+0x1b8>)
 800d760:	0008      	movs	r0, r1
 800d762:	f017 f81f 	bl	80247a4 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800d766:	4b24      	ldr	r3, [pc, #144]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d768:	220a      	movs	r2, #10
 800d76a:	5e9b      	ldrsh	r3, [r3, r2]
 800d76c:	4a29      	ldr	r2, [pc, #164]	@ (800d814 <sen5x_printvalues+0x1b0>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d014      	beq.n	800d79c <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800d772:	4b21      	ldr	r3, [pc, #132]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d774:	220a      	movs	r2, #10
 800d776:	5e9b      	ldrsh	r3, [r3, r2]
 800d778:	0018      	movs	r0, r3
 800d77a:	f7f3 ff29 	bl	80015d0 <__aeabi_i2f>
 800d77e:	1c03      	adds	r3, r0, #0
 800d780:	4927      	ldr	r1, [pc, #156]	@ (800d820 <sen5x_printvalues+0x1bc>)
 800d782:	1c18      	adds	r0, r3, #0
 800d784:	f7f3 fa26 	bl	8000bd4 <__aeabi_fdiv>
 800d788:	1c03      	adds	r3, r0, #0
 800d78a:	1c18      	adds	r0, r3, #0
 800d78c:	f7f5 fe6a 	bl	8003464 <__aeabi_f2d>
 800d790:	0002      	movs	r2, r0
 800d792:	000b      	movs	r3, r1
 800d794:	4923      	ldr	r1, [pc, #140]	@ (800d824 <sen5x_printvalues+0x1c0>)
 800d796:	0008      	movs	r0, r1
 800d798:	f017 f804 	bl	80247a4 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800d79c:	4b16      	ldr	r3, [pc, #88]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d79e:	220c      	movs	r2, #12
 800d7a0:	5e9b      	ldrsh	r3, [r3, r2]
 800d7a2:	4a1c      	ldr	r2, [pc, #112]	@ (800d814 <sen5x_printvalues+0x1b0>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d00e      	beq.n	800d7c6 <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800d7a8:	4b13      	ldr	r3, [pc, #76]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d7aa:	220c      	movs	r2, #12
 800d7ac:	5e9b      	ldrsh	r3, [r3, r2]
 800d7ae:	210a      	movs	r1, #10
 800d7b0:	0018      	movs	r0, r3
 800d7b2:	f7f2 fd81 	bl	80002b8 <__divsi3>
 800d7b6:	0003      	movs	r3, r0
 800d7b8:	b21b      	sxth	r3, r3
 800d7ba:	001a      	movs	r2, r3
 800d7bc:	4b1a      	ldr	r3, [pc, #104]	@ (800d828 <sen5x_printvalues+0x1c4>)
 800d7be:	0011      	movs	r1, r2
 800d7c0:	0018      	movs	r0, r3
 800d7c2:	f016 ffef 	bl	80247a4 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800d7c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d7c8:	220e      	movs	r2, #14
 800d7ca:	5e9b      	ldrsh	r3, [r3, r2]
 800d7cc:	4a11      	ldr	r2, [pc, #68]	@ (800d814 <sen5x_printvalues+0x1b0>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d00e      	beq.n	800d7f0 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800d7d2:	4b09      	ldr	r3, [pc, #36]	@ (800d7f8 <sen5x_printvalues+0x194>)
 800d7d4:	220e      	movs	r2, #14
 800d7d6:	5e9b      	ldrsh	r3, [r3, r2]
 800d7d8:	210a      	movs	r1, #10
 800d7da:	0018      	movs	r0, r3
 800d7dc:	f7f2 fd6c 	bl	80002b8 <__divsi3>
 800d7e0:	0003      	movs	r3, r0
 800d7e2:	b21b      	sxth	r3, r3
 800d7e4:	001a      	movs	r2, r3
 800d7e6:	4b11      	ldr	r3, [pc, #68]	@ (800d82c <sen5x_printvalues+0x1c8>)
 800d7e8:	0011      	movs	r1, r2
 800d7ea:	0018      	movs	r0, r3
 800d7ec:	f016 ffda 	bl	80247a4 <iprintf>
  }
}
 800d7f0:	46c0      	nop			@ (mov r8, r8)
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	46c0      	nop			@ (mov r8, r8)
 800d7f8:	20000f00 	.word	0x20000f00
 800d7fc:	0000ffff 	.word	0x0000ffff
 800d800:	41200000 	.word	0x41200000
 800d804:	0802be10 	.word	0x0802be10
 800d808:	0802be3c 	.word	0x0802be3c
 800d80c:	0802be68 	.word	0x0802be68
 800d810:	0802be94 	.word	0x0802be94
 800d814:	00007fff 	.word	0x00007fff
 800d818:	42c80000 	.word	0x42c80000
 800d81c:	0802bec0 	.word	0x0802bec0
 800d820:	43480000 	.word	0x43480000
 800d824:	0802bee4 	.word	0x0802bee4
 800d828:	0802bf0c 	.word	0x0802bf0c
 800d82c:	0802bf24 	.word	0x0802bf24

0800d830 <sen5xStore>:

void sen5xStore() {
 800d830:	b580      	push	{r7, lr}
 800d832:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800d834:	4b38      	ldr	r3, [pc, #224]	@ (800d918 <sen5xStore+0xe8>)
 800d836:	881b      	ldrh	r3, [r3, #0]
 800d838:	4a38      	ldr	r2, [pc, #224]	@ (800d91c <sen5xStore+0xec>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d004      	beq.n	800d848 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800d83e:	4b36      	ldr	r3, [pc, #216]	@ (800d918 <sen5xStore+0xe8>)
 800d840:	881b      	ldrh	r3, [r3, #0]
 800d842:	0018      	movs	r0, r3
 800d844:	f7f6 ffb0 	bl	80047a8 <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800d848:	4b33      	ldr	r3, [pc, #204]	@ (800d918 <sen5xStore+0xe8>)
 800d84a:	885b      	ldrh	r3, [r3, #2]
 800d84c:	4a33      	ldr	r2, [pc, #204]	@ (800d91c <sen5xStore+0xec>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d004      	beq.n	800d85c <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800d852:	4b31      	ldr	r3, [pc, #196]	@ (800d918 <sen5xStore+0xe8>)
 800d854:	885b      	ldrh	r3, [r3, #2]
 800d856:	0018      	movs	r0, r3
 800d858:	f7f6 ffd2 	bl	8004800 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800d85c:	4b2e      	ldr	r3, [pc, #184]	@ (800d918 <sen5xStore+0xe8>)
 800d85e:	889b      	ldrh	r3, [r3, #4]
 800d860:	4a2e      	ldr	r2, [pc, #184]	@ (800d91c <sen5xStore+0xec>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d004      	beq.n	800d870 <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800d866:	4b2c      	ldr	r3, [pc, #176]	@ (800d918 <sen5xStore+0xe8>)
 800d868:	889b      	ldrh	r3, [r3, #4]
 800d86a:	0018      	movs	r0, r3
 800d86c:	f7f6 fff4 	bl	8004858 <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800d870:	4b29      	ldr	r3, [pc, #164]	@ (800d918 <sen5xStore+0xe8>)
 800d872:	88db      	ldrh	r3, [r3, #6]
 800d874:	4a29      	ldr	r2, [pc, #164]	@ (800d91c <sen5xStore+0xec>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d004      	beq.n	800d884 <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800d87a:	4b27      	ldr	r3, [pc, #156]	@ (800d918 <sen5xStore+0xe8>)
 800d87c:	88db      	ldrh	r3, [r3, #6]
 800d87e:	0018      	movs	r0, r3
 800d880:	f7f7 f816 	bl	80048b0 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d884:	4b26      	ldr	r3, [pc, #152]	@ (800d920 <sen5xStore+0xf0>)
 800d886:	791b      	ldrb	r3, [r3, #4]
 800d888:	2b34      	cmp	r3, #52	@ 0x34
 800d88a:	d003      	beq.n	800d894 <sen5xStore+0x64>
 800d88c:	4b24      	ldr	r3, [pc, #144]	@ (800d920 <sen5xStore+0xf0>)
 800d88e:	791b      	ldrb	r3, [r3, #4]
 800d890:	2b35      	cmp	r3, #53	@ 0x35
 800d892:	d13d      	bne.n	800d910 <sen5xStore+0xe0>
    if (!VOCNOx || usbPluggedIn) {
 800d894:	4b23      	ldr	r3, [pc, #140]	@ (800d924 <sen5xStore+0xf4>)
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	2201      	movs	r2, #1
 800d89a:	4053      	eors	r3, r2
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d103      	bne.n	800d8aa <sen5xStore+0x7a>
 800d8a2:	4b21      	ldr	r3, [pc, #132]	@ (800d928 <sen5xStore+0xf8>)
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d032      	beq.n	800d910 <sen5xStore+0xe0>
      if (sen5x_data.voc_index != 0x7fff) {
 800d8aa:	4b1b      	ldr	r3, [pc, #108]	@ (800d918 <sen5xStore+0xe8>)
 800d8ac:	220c      	movs	r2, #12
 800d8ae:	5e9b      	ldrsh	r3, [r3, r2]
 800d8b0:	4a1e      	ldr	r2, [pc, #120]	@ (800d92c <sen5xStore+0xfc>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d019      	beq.n	800d8ea <sen5xStore+0xba>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800d8b6:	4b18      	ldr	r3, [pc, #96]	@ (800d918 <sen5xStore+0xe8>)
 800d8b8:	220c      	movs	r2, #12
 800d8ba:	5e9b      	ldrsh	r3, [r3, r2]
 800d8bc:	210a      	movs	r1, #10
 800d8be:	0018      	movs	r0, r3
 800d8c0:	f7f2 fcfa 	bl	80002b8 <__divsi3>
 800d8c4:	0003      	movs	r3, r0
 800d8c6:	b21b      	sxth	r3, r3
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	0018      	movs	r0, r3
 800d8cc:	f003 fea0 	bl	8011610 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800d8d0:	4b11      	ldr	r3, [pc, #68]	@ (800d918 <sen5xStore+0xe8>)
 800d8d2:	220c      	movs	r2, #12
 800d8d4:	5e9b      	ldrsh	r3, [r3, r2]
 800d8d6:	210a      	movs	r1, #10
 800d8d8:	0018      	movs	r0, r3
 800d8da:	f7f2 fced 	bl	80002b8 <__divsi3>
 800d8de:	0003      	movs	r3, r0
 800d8e0:	b21b      	sxth	r3, r3
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	0018      	movs	r0, r3
 800d8e6:	f7f6 fe91 	bl	800460c <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800d8ea:	4b0b      	ldr	r3, [pc, #44]	@ (800d918 <sen5xStore+0xe8>)
 800d8ec:	220e      	movs	r2, #14
 800d8ee:	5e9b      	ldrsh	r3, [r3, r2]
 800d8f0:	4a0e      	ldr	r2, [pc, #56]	@ (800d92c <sen5xStore+0xfc>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d00c      	beq.n	800d910 <sen5xStore+0xe0>
        setNOx(sen5x_data.nox_index / 10);
 800d8f6:	4b08      	ldr	r3, [pc, #32]	@ (800d918 <sen5xStore+0xe8>)
 800d8f8:	220e      	movs	r2, #14
 800d8fa:	5e9b      	ldrsh	r3, [r3, r2]
 800d8fc:	210a      	movs	r1, #10
 800d8fe:	0018      	movs	r0, r3
 800d900:	f7f2 fcda 	bl	80002b8 <__divsi3>
 800d904:	0003      	movs	r3, r0
 800d906:	b21b      	sxth	r3, r3
 800d908:	b29b      	uxth	r3, r3
 800d90a:	0018      	movs	r0, r3
 800d90c:	f7f6 fffc 	bl	8004908 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800d910:	46c0      	nop			@ (mov r8, r8)
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	46c0      	nop			@ (mov r8, r8)
 800d918:	20000f00 	.word	0x20000f00
 800d91c:	0000ffff 	.word	0x0000ffff
 800d920:	20000ef0 	.word	0x20000ef0
 800d924:	20000eee 	.word	0x20000eee
 800d928:	20001e7d 	.word	0x20001e7d
 800d92c:	00007fff 	.word	0x00007fff

0800d930 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800d930:	b590      	push	{r4, r7, lr}
 800d932:	b085      	sub	sp, #20
 800d934:	af02      	add	r7, sp, #8
 800d936:	6039      	str	r1, [r7, #0]
 800d938:	0011      	movs	r1, r2
 800d93a:	1dfb      	adds	r3, r7, #7
 800d93c:	1c02      	adds	r2, r0, #0
 800d93e:	701a      	strb	r2, [r3, #0]
 800d940:	1d3b      	adds	r3, r7, #4
 800d942:	1c0a      	adds	r2, r1, #0
 800d944:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800d946:	1dfb      	adds	r3, r7, #7
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	18db      	adds	r3, r3, r3
 800d94e:	b299      	uxth	r1, r3
 800d950:	1d3b      	adds	r3, r7, #4
 800d952:	881b      	ldrh	r3, [r3, #0]
 800d954:	683a      	ldr	r2, [r7, #0]
 800d956:	4805      	ldr	r0, [pc, #20]	@ (800d96c <sensirion_i2c_hal_read+0x3c>)
 800d958:	2464      	movs	r4, #100	@ 0x64
 800d95a:	9400      	str	r4, [sp, #0]
 800d95c:	f007 f84e 	bl	80149fc <HAL_I2C_Master_Receive>
 800d960:	0003      	movs	r3, r0
 800d962:	b25b      	sxtb	r3, r3
}
 800d964:	0018      	movs	r0, r3
 800d966:	46bd      	mov	sp, r7
 800d968:	b003      	add	sp, #12
 800d96a:	bd90      	pop	{r4, r7, pc}
 800d96c:	20000cc4 	.word	0x20000cc4

0800d970 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800d970:	b590      	push	{r4, r7, lr}
 800d972:	b085      	sub	sp, #20
 800d974:	af02      	add	r7, sp, #8
 800d976:	6039      	str	r1, [r7, #0]
 800d978:	0011      	movs	r1, r2
 800d97a:	1dfb      	adds	r3, r7, #7
 800d97c:	1c02      	adds	r2, r0, #0
 800d97e:	701a      	strb	r2, [r3, #0]
 800d980:	1d3b      	adds	r3, r7, #4
 800d982:	1c0a      	adds	r2, r1, #0
 800d984:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800d986:	1dfb      	adds	r3, r7, #7
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	18db      	adds	r3, r3, r3
 800d98e:	b299      	uxth	r1, r3
 800d990:	1d3b      	adds	r3, r7, #4
 800d992:	881b      	ldrh	r3, [r3, #0]
 800d994:	683a      	ldr	r2, [r7, #0]
 800d996:	4805      	ldr	r0, [pc, #20]	@ (800d9ac <sensirion_i2c_hal_write+0x3c>)
 800d998:	2464      	movs	r4, #100	@ 0x64
 800d99a:	9400      	str	r4, [sp, #0]
 800d99c:	f006 ff26 	bl	80147ec <HAL_I2C_Master_Transmit>
 800d9a0:	0003      	movs	r3, r0
 800d9a2:	b25b      	sxtb	r3, r3
}
 800d9a4:	0018      	movs	r0, r3
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	b003      	add	sp, #12
 800d9aa:	bd90      	pop	{r4, r7, pc}
 800d9ac:	20000cc4 	.word	0x20000cc4

0800d9b0 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	22fa      	movs	r2, #250	@ 0xfa
 800d9bc:	0091      	lsls	r1, r2, #2
 800d9be:	0018      	movs	r0, r3
 800d9c0:	f7f2 fbf0 	bl	80001a4 <__udivsi3>
 800d9c4:	0003      	movs	r3, r0
 800d9c6:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	22fa      	movs	r2, #250	@ 0xfa
 800d9cc:	0091      	lsls	r1, r2, #2
 800d9ce:	0018      	movs	r0, r3
 800d9d0:	f7f2 fc6e 	bl	80002b0 <__aeabi_uidivmod>
 800d9d4:	1e0b      	subs	r3, r1, #0
 800d9d6:	d002      	beq.n	800d9de <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	0018      	movs	r0, r3
 800d9e2:	f005 fbad 	bl	8013140 <HAL_Delay>
}
 800d9e6:	46c0      	nop			@ (mov r8, r8)
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	b004      	add	sp, #16
 800d9ec:	bd80      	pop	{r7, pc}
	...

0800d9f0 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800d9fa:	1d3b      	adds	r3, r7, #4
 800d9fc:	0018      	movs	r0, r3
 800d9fe:	f000 fd01 	bl	800e404 <sen5x_read_device_status>
 800da02:	1e03      	subs	r3, r0, #0
 800da04:	d007      	beq.n	800da16 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800da06:	4a28      	ldr	r2, [pc, #160]	@ (800daa8 <sen5x_check_for_errors+0xb8>)
 800da08:	4b28      	ldr	r3, [pc, #160]	@ (800daac <sen5x_check_for_errors+0xbc>)
 800da0a:	0019      	movs	r1, r3
 800da0c:	2001      	movs	r0, #1
 800da0e:	f004 fe57 	bl	80126c0 <CreateLine>
    return true;
 800da12:	2301      	movs	r3, #1
 800da14:	e043      	b.n	800da9e <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d101      	bne.n	800da20 <sen5x_check_for_errors+0x30>
    return false;
 800da1c:	2300      	movs	r3, #0
 800da1e:	e03e      	b.n	800da9e <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	2380      	movs	r3, #128	@ 0x80
 800da24:	039b      	lsls	r3, r3, #14
 800da26:	4013      	ands	r3, r2
 800da28:	d005      	beq.n	800da36 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800da2a:	4a21      	ldr	r2, [pc, #132]	@ (800dab0 <sen5x_check_for_errors+0xc0>)
 800da2c:	4b21      	ldr	r3, [pc, #132]	@ (800dab4 <sen5x_check_for_errors+0xc4>)
 800da2e:	0019      	movs	r1, r3
 800da30:	2003      	movs	r0, #3
 800da32:	f004 fe45 	bl	80126c0 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800da36:	687a      	ldr	r2, [r7, #4]
 800da38:	2380      	movs	r3, #128	@ 0x80
 800da3a:	031b      	lsls	r3, r3, #12
 800da3c:	4013      	ands	r3, r2
 800da3e:	d005      	beq.n	800da4c <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 800da40:	4a1d      	ldr	r2, [pc, #116]	@ (800dab8 <sen5x_check_for_errors+0xc8>)
 800da42:	4b1c      	ldr	r3, [pc, #112]	@ (800dab4 <sen5x_check_for_errors+0xc4>)
 800da44:	0019      	movs	r1, r3
 800da46:	2003      	movs	r0, #3
 800da48:	f004 fe3a 	bl	80126c0 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2280      	movs	r2, #128	@ 0x80
 800da50:	4013      	ands	r3, r2
 800da52:	d005      	beq.n	800da60 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800da54:	4a19      	ldr	r2, [pc, #100]	@ (800dabc <sen5x_check_for_errors+0xcc>)
 800da56:	4b17      	ldr	r3, [pc, #92]	@ (800dab4 <sen5x_check_for_errors+0xc4>)
 800da58:	0019      	movs	r1, r3
 800da5a:	2003      	movs	r0, #3
 800da5c:	f004 fe30 	bl	80126c0 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2240      	movs	r2, #64	@ 0x40
 800da64:	4013      	ands	r3, r2
 800da66:	d005      	beq.n	800da74 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 800da68:	4a15      	ldr	r2, [pc, #84]	@ (800dac0 <sen5x_check_for_errors+0xd0>)
 800da6a:	4b12      	ldr	r3, [pc, #72]	@ (800dab4 <sen5x_check_for_errors+0xc4>)
 800da6c:	0019      	movs	r1, r3
 800da6e:	2003      	movs	r0, #3
 800da70:	f004 fe26 	bl	80126c0 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2220      	movs	r2, #32
 800da78:	4013      	ands	r3, r2
 800da7a:	d005      	beq.n	800da88 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800da7c:	4a11      	ldr	r2, [pc, #68]	@ (800dac4 <sen5x_check_for_errors+0xd4>)
 800da7e:	4b0d      	ldr	r3, [pc, #52]	@ (800dab4 <sen5x_check_for_errors+0xc4>)
 800da80:	0019      	movs	r1, r3
 800da82:	2003      	movs	r0, #3
 800da84:	f004 fe1c 	bl	80126c0 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2210      	movs	r2, #16
 800da8c:	4013      	ands	r3, r2
 800da8e:	d005      	beq.n	800da9c <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800da90:	4a0d      	ldr	r2, [pc, #52]	@ (800dac8 <sen5x_check_for_errors+0xd8>)
 800da92:	4b08      	ldr	r3, [pc, #32]	@ (800dab4 <sen5x_check_for_errors+0xc4>)
 800da94:	0019      	movs	r1, r3
 800da96:	2003      	movs	r0, #3
 800da98:	f004 fe12 	bl	80126c0 <CreateLine>
  }
  return 1;
 800da9c:	2301      	movs	r3, #1
}
 800da9e:	0018      	movs	r0, r3
 800daa0:	46bd      	mov	sp, r7
 800daa2:	b002      	add	sp, #8
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	46c0      	nop			@ (mov r8, r8)
 800daa8:	0802bf3c 	.word	0x0802bf3c
 800daac:	0802bac0 	.word	0x0802bac0
 800dab0:	0802bf68 	.word	0x0802bf68
 800dab4:	0802ba94 	.word	0x0802ba94
 800dab8:	0802bf88 	.word	0x0802bf88
 800dabc:	0802bfa4 	.word	0x0802bfa4
 800dac0:	0802bfc8 	.word	0x0802bfc8
 800dac4:	0802bfe8 	.word	0x0802bfe8
 800dac8:	0802bffc 	.word	0x0802bffc

0800dacc <set_light_on_state>:

void set_light_on_state(void) {
 800dacc:	b580      	push	{r7, lr}
 800dace:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800dad0:	4b15      	ldr	r3, [pc, #84]	@ (800db28 <set_light_on_state+0x5c>)
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	2201      	movs	r2, #1
 800dad6:	4053      	eors	r3, r2
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d008      	beq.n	800daf0 <set_light_on_state+0x24>
    sen5x_Power_On();
 800dade:	f7ff fb2f 	bl	800d140 <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800dae2:	4a12      	ldr	r2, [pc, #72]	@ (800db2c <set_light_on_state+0x60>)
 800dae4:	4b12      	ldr	r3, [pc, #72]	@ (800db30 <set_light_on_state+0x64>)
 800dae6:	0019      	movs	r1, r3
 800dae8:	2003      	movs	r0, #3
 800daea:	f004 fde9 	bl	80126c0 <CreateLine>
 800daee:	e00a      	b.n	800db06 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800daf0:	f005 fb1c 	bl	801312c <HAL_GetTick>
 800daf4:	0002      	movs	r2, r0
 800daf6:	4b0f      	ldr	r3, [pc, #60]	@ (800db34 <set_light_on_state+0x68>)
 800daf8:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800dafa:	4a0f      	ldr	r2, [pc, #60]	@ (800db38 <set_light_on_state+0x6c>)
 800dafc:	4b0c      	ldr	r3, [pc, #48]	@ (800db30 <set_light_on_state+0x64>)
 800dafe:	0019      	movs	r1, r3
 800db00:	2003      	movs	r0, #3
 800db02:	f004 fddd 	bl	80126c0 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800db06:	f7ff fcab 	bl	800d460 <sen5x_lightup_measurement>
 800db0a:	1e03      	subs	r3, r0, #0
 800db0c:	d005      	beq.n	800db1a <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800db0e:	4a0b      	ldr	r2, [pc, #44]	@ (800db3c <set_light_on_state+0x70>)
 800db10:	4b0b      	ldr	r3, [pc, #44]	@ (800db40 <set_light_on_state+0x74>)
 800db12:	0019      	movs	r1, r3
 800db14:	2001      	movs	r0, #1
 800db16:	f004 fdd3 	bl	80126c0 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800db1a:	4b0a      	ldr	r3, [pc, #40]	@ (800db44 <set_light_on_state+0x78>)
 800db1c:	2203      	movs	r2, #3
 800db1e:	701a      	strb	r2, [r3, #0]
}
 800db20:	46c0      	nop			@ (mov r8, r8)
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	46c0      	nop			@ (mov r8, r8)
 800db28:	20000eed 	.word	0x20000eed
 800db2c:	0802c038 	.word	0x0802c038
 800db30:	0802ba94 	.word	0x0802ba94
 800db34:	20000efc 	.word	0x20000efc
 800db38:	0802c058 	.word	0x0802c058
 800db3c:	0802c070 	.word	0x0802c070
 800db40:	0802bac0 	.word	0x0802bac0
 800db44:	2000009d 	.word	0x2000009d

0800db48 <sen5x_statemachine>:

void sen5x_statemachine() {
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800db4e:	1dfb      	adds	r3, r7, #7
 800db50:	2200      	movs	r2, #0
 800db52:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800db54:	4b86      	ldr	r3, [pc, #536]	@ (800dd70 <sen5x_statemachine+0x228>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	0018      	movs	r0, r3
 800db5a:	f004 fd5b 	bl	8012614 <TimestampIsReached>
 800db5e:	1e03      	subs	r3, r0, #0
 800db60:	d100      	bne.n	800db64 <sen5x_statemachine+0x1c>
 800db62:	e100      	b.n	800dd66 <sen5x_statemachine+0x21e>
    switch (PMsamplesState) {
 800db64:	4b83      	ldr	r3, [pc, #524]	@ (800dd74 <sen5x_statemachine+0x22c>)
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	2b05      	cmp	r3, #5
 800db6a:	d900      	bls.n	800db6e <sen5x_statemachine+0x26>
 800db6c:	e0fb      	b.n	800dd66 <sen5x_statemachine+0x21e>
 800db6e:	009a      	lsls	r2, r3, #2
 800db70:	4b81      	ldr	r3, [pc, #516]	@ (800dd78 <sen5x_statemachine+0x230>)
 800db72:	18d3      	adds	r3, r2, r3
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800db78:	4a80      	ldr	r2, [pc, #512]	@ (800dd7c <sen5x_statemachine+0x234>)
 800db7a:	4b81      	ldr	r3, [pc, #516]	@ (800dd80 <sen5x_statemachine+0x238>)
 800db7c:	0019      	movs	r1, r3
 800db7e:	2001      	movs	r0, #1
 800db80:	f004 fd9e 	bl	80126c0 <CreateLine>
      SetPMSensorStatus(false);
 800db84:	2000      	movs	r0, #0
 800db86:	f7fe fabd 	bl	800c104 <SetPMSensorStatus>
      DisablePMSensor();
 800db8a:	f7fe fa3f 	bl	800c00c <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800db8e:	f005 facd 	bl	801312c <HAL_GetTick>
 800db92:	0003      	movs	r3, r0
 800db94:	4a7b      	ldr	r2, [pc, #492]	@ (800dd84 <sen5x_statemachine+0x23c>)
 800db96:	189a      	adds	r2, r3, r2
 800db98:	4b75      	ldr	r3, [pc, #468]	@ (800dd70 <sen5x_statemachine+0x228>)
 800db9a:	601a      	str	r2, [r3, #0]
      break;
 800db9c:	e0e3      	b.n	800dd66 <sen5x_statemachine+0x21e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800db9e:	f005 fac5 	bl	801312c <HAL_GetTick>
 800dba2:	0003      	movs	r3, r0
 800dba4:	4a78      	ldr	r2, [pc, #480]	@ (800dd88 <sen5x_statemachine+0x240>)
 800dba6:	189a      	adds	r2, r3, r2
 800dba8:	4b71      	ldr	r3, [pc, #452]	@ (800dd70 <sen5x_statemachine+0x228>)
 800dbaa:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800dbac:	f7ff ff8e 	bl	800dacc <set_light_on_state>
      break;
 800dbb0:	e0d9      	b.n	800dd66 <sen5x_statemachine+0x21e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800dbb2:	4b70      	ldr	r3, [pc, #448]	@ (800dd74 <sen5x_statemachine+0x22c>)
 800dbb4:	2202      	movs	r2, #2
 800dbb6:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800dbb8:	4b74      	ldr	r3, [pc, #464]	@ (800dd8c <sen5x_statemachine+0x244>)
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	2b05      	cmp	r3, #5
 800dbbe:	d905      	bls.n	800dbcc <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800dbc0:	4b6c      	ldr	r3, [pc, #432]	@ (800dd74 <sen5x_statemachine+0x22c>)
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800dbc6:	f7ff faeb 	bl	800d1a0 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800dbca:	e0c9      	b.n	800dd60 <sen5x_statemachine+0x218>
        if (sen5x_check_for_errors()) {
 800dbcc:	f7ff ff10 	bl	800d9f0 <sen5x_check_for_errors>
 800dbd0:	1e03      	subs	r3, r0, #0
 800dbd2:	d01f      	beq.n	800dc14 <sen5x_statemachine+0xcc>
          if (sen5x_device_reset()) {
 800dbd4:	f000 fc68 	bl	800e4a8 <sen5x_device_reset>
 800dbd8:	1e03      	subs	r3, r0, #0
 800dbda:	d00f      	beq.n	800dbfc <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 800dbdc:	4a6c      	ldr	r2, [pc, #432]	@ (800dd90 <sen5x_statemachine+0x248>)
 800dbde:	4b68      	ldr	r3, [pc, #416]	@ (800dd80 <sen5x_statemachine+0x238>)
 800dbe0:	0019      	movs	r1, r3
 800dbe2:	2001      	movs	r0, #1
 800dbe4:	f004 fd6c 	bl	80126c0 <CreateLine>
            sen5xErrors++;
 800dbe8:	4b68      	ldr	r3, [pc, #416]	@ (800dd8c <sen5x_statemachine+0x244>)
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	3301      	adds	r3, #1
 800dbee:	b2da      	uxtb	r2, r3
 800dbf0:	4b66      	ldr	r3, [pc, #408]	@ (800dd8c <sen5x_statemachine+0x244>)
 800dbf2:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 800dbf4:	4b5f      	ldr	r3, [pc, #380]	@ (800dd74 <sen5x_statemachine+0x22c>)
 800dbf6:	2203      	movs	r2, #3
 800dbf8:	701a      	strb	r2, [r3, #0]
 800dbfa:	e005      	b.n	800dc08 <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 800dbfc:	4a65      	ldr	r2, [pc, #404]	@ (800dd94 <sen5x_statemachine+0x24c>)
 800dbfe:	4b66      	ldr	r3, [pc, #408]	@ (800dd98 <sen5x_statemachine+0x250>)
 800dc00:	0019      	movs	r1, r3
 800dc02:	2002      	movs	r0, #2
 800dc04:	f004 fd5c 	bl	80126c0 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800dc08:	f005 fa90 	bl	801312c <HAL_GetTick>
 800dc0c:	0002      	movs	r2, r0
 800dc0e:	4b58      	ldr	r3, [pc, #352]	@ (800dd70 <sen5x_statemachine+0x228>)
 800dc10:	601a      	str	r2, [r3, #0]
      break;
 800dc12:	e0a5      	b.n	800dd60 <sen5x_statemachine+0x218>
          if (sen5xErrors != 0) {
 800dc14:	4b5d      	ldr	r3, [pc, #372]	@ (800dd8c <sen5x_statemachine+0x244>)
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d100      	bne.n	800dc1e <sen5x_statemachine+0xd6>
 800dc1c:	e0a0      	b.n	800dd60 <sen5x_statemachine+0x218>
            sen5xErrors = 0;
 800dc1e:	4b5b      	ldr	r3, [pc, #364]	@ (800dd8c <sen5x_statemachine+0x244>)
 800dc20:	2200      	movs	r2, #0
 800dc22:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800dc24:	4a5d      	ldr	r2, [pc, #372]	@ (800dd9c <sen5x_statemachine+0x254>)
 800dc26:	4b5e      	ldr	r3, [pc, #376]	@ (800dda0 <sen5x_statemachine+0x258>)
 800dc28:	0019      	movs	r1, r3
 800dc2a:	2003      	movs	r0, #3
 800dc2c:	f004 fd48 	bl	80126c0 <CreateLine>
      break;
 800dc30:	e096      	b.n	800dd60 <sen5x_statemachine+0x218>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800dc32:	1dfb      	adds	r3, r7, #7
 800dc34:	0018      	movs	r0, r3
 800dc36:	f000 f953 	bl	800dee0 <sen5x_read_data_ready>
      if (data_ready) {
 800dc3a:	1dfb      	adds	r3, r7, #7
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d02c      	beq.n	800dc9c <sen5x_statemachine+0x154>
        SetPMIndicator();
 800dc42:	f003 fbf1 	bl	8011428 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800dc46:	4b57      	ldr	r3, [pc, #348]	@ (800dda4 <sen5x_statemachine+0x25c>)
 800dc48:	0018      	movs	r0, r3
 800dc4a:	f7ff fcaf 	bl	800d5ac <sen5x_read_measurement>
 800dc4e:	1e03      	subs	r3, r0, #0
 800dc50:	d00b      	beq.n	800dc6a <sen5x_statemachine+0x122>
          Error("Error executing sen5x_read_measured_values()");
 800dc52:	4a55      	ldr	r2, [pc, #340]	@ (800dda8 <sen5x_statemachine+0x260>)
 800dc54:	4b4a      	ldr	r3, [pc, #296]	@ (800dd80 <sen5x_statemachine+0x238>)
 800dc56:	0019      	movs	r1, r3
 800dc58:	2001      	movs	r0, #1
 800dc5a:	f004 fd31 	bl	80126c0 <CreateLine>
          sen5xErrors++;
 800dc5e:	4b4b      	ldr	r3, [pc, #300]	@ (800dd8c <sen5x_statemachine+0x244>)
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	3301      	adds	r3, #1
 800dc64:	b2da      	uxtb	r2, r3
 800dc66:	4b49      	ldr	r3, [pc, #292]	@ (800dd8c <sen5x_statemachine+0x244>)
 800dc68:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800dc6a:	4b50      	ldr	r3, [pc, #320]	@ (800ddac <sen5x_statemachine+0x264>)
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	b2da      	uxtb	r2, r3
 800dc72:	4b4e      	ldr	r3, [pc, #312]	@ (800ddac <sen5x_statemachine+0x264>)
 800dc74:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800dc76:	4b4d      	ldr	r3, [pc, #308]	@ (800ddac <sen5x_statemachine+0x264>)
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	2b1f      	cmp	r3, #31
 800dc7c:	d102      	bne.n	800dc84 <sen5x_statemachine+0x13c>
          sen5xSamples = 0;  // enable display on serial
 800dc7e:	4b4b      	ldr	r3, [pc, #300]	@ (800ddac <sen5x_statemachine+0x264>)
 800dc80:	2200      	movs	r2, #0
 800dc82:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800dc84:	4b49      	ldr	r3, [pc, #292]	@ (800ddac <sen5x_statemachine+0x264>)
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d901      	bls.n	800dc90 <sen5x_statemachine+0x148>
          sen5xStore();
 800dc8c:	f7ff fdd0 	bl	800d830 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800dc90:	4b46      	ldr	r3, [pc, #280]	@ (800ddac <sen5x_statemachine+0x264>)
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	d101      	bne.n	800dc9c <sen5x_statemachine+0x154>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800dc98:	f7ff fce4 	bl	800d664 <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800dc9c:	4b44      	ldr	r3, [pc, #272]	@ (800ddb0 <sen5x_statemachine+0x268>)
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d103      	bne.n	800dcac <sen5x_statemachine+0x164>
 800dca4:	4b41      	ldr	r3, [pc, #260]	@ (800ddac <sen5x_statemachine+0x264>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d95b      	bls.n	800dd64 <sen5x_statemachine+0x21c>
        PMsamplesState = CLEAN_FAN;
 800dcac:	4b31      	ldr	r3, [pc, #196]	@ (800dd74 <sen5x_statemachine+0x22c>)
 800dcae:	2204      	movs	r2, #4
 800dcb0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800dcb2:	e057      	b.n	800dd64 <sen5x_statemachine+0x21c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == MONDAY ) && !fanCleaningDone) {
 800dcb4:	f7fb f9e8 	bl	8009088 <RTC_GetWeekday>
 800dcb8:	0003      	movs	r3, r0
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d11a      	bne.n	800dcf4 <sen5x_statemachine+0x1ac>
 800dcbe:	4b3d      	ldr	r3, [pc, #244]	@ (800ddb4 <sen5x_statemachine+0x26c>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	4053      	eors	r3, r2
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d013      	beq.n	800dcf4 <sen5x_statemachine+0x1ac>
        sen5x_start_fan_cleaning();
 800dccc:	f000 f9ee 	bl	800e0ac <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800dcd0:	4a39      	ldr	r2, [pc, #228]	@ (800ddb8 <sen5x_statemachine+0x270>)
 800dcd2:	4b31      	ldr	r3, [pc, #196]	@ (800dd98 <sen5x_statemachine+0x250>)
 800dcd4:	0019      	movs	r1, r3
 800dcd6:	2002      	movs	r0, #2
 800dcd8:	f004 fcf2 	bl	80126c0 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800dcdc:	f005 fa26 	bl	801312c <HAL_GetTick>
 800dce0:	0003      	movs	r3, r0
 800dce2:	4a36      	ldr	r2, [pc, #216]	@ (800ddbc <sen5x_statemachine+0x274>)
 800dce4:	189a      	adds	r2, r3, r2
 800dce6:	4b22      	ldr	r3, [pc, #136]	@ (800dd70 <sen5x_statemachine+0x228>)
 800dce8:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800dcea:	4b32      	ldr	r3, [pc, #200]	@ (800ddb4 <sen5x_statemachine+0x26c>)
 800dcec:	2201      	movs	r2, #1
 800dcee:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800dcf0:	f7ff fbb6 	bl	800d460 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800dcf4:	4b1f      	ldr	r3, [pc, #124]	@ (800dd74 <sen5x_statemachine+0x22c>)
 800dcf6:	2205      	movs	r2, #5
 800dcf8:	701a      	strb	r2, [r3, #0]
      break;
 800dcfa:	e034      	b.n	800dd66 <sen5x_statemachine+0x21e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800dcfc:	4b2c      	ldr	r3, [pc, #176]	@ (800ddb0 <sen5x_statemachine+0x268>)
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	2201      	movs	r2, #1
 800dd02:	4053      	eors	r3, r2
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d01c      	beq.n	800dd44 <sen5x_statemachine+0x1fc>
 800dd0a:	4b2d      	ldr	r3, [pc, #180]	@ (800ddc0 <sen5x_statemachine+0x278>)
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	4053      	eors	r3, r2
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d015      	beq.n	800dd44 <sen5x_statemachine+0x1fc>
        if (sen5x_extinguish_measurement()) {
 800dd18:	f7ff fbee 	bl	800d4f8 <sen5x_extinguish_measurement>
 800dd1c:	1e03      	subs	r3, r0, #0
 800dd1e:	d005      	beq.n	800dd2c <sen5x_statemachine+0x1e4>
          Error("Error executing sen5x_extinguish_measurement()");
 800dd20:	4a28      	ldr	r2, [pc, #160]	@ (800ddc4 <sen5x_statemachine+0x27c>)
 800dd22:	4b17      	ldr	r3, [pc, #92]	@ (800dd80 <sen5x_statemachine+0x238>)
 800dd24:	0019      	movs	r1, r3
 800dd26:	2001      	movs	r0, #1
 800dd28:	f004 fcca 	bl	80126c0 <CreateLine>
        }
        sen5xSamples = 0;
 800dd2c:	4b1f      	ldr	r3, [pc, #124]	@ (800ddac <sen5x_statemachine+0x264>)
 800dd2e:	2200      	movs	r2, #0
 800dd30:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800dd32:	f7ff fa35 	bl	800d1a0 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800dd36:	2000      	movs	r0, #0
 800dd38:	f7fe f9e4 	bl	800c104 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800dd3c:	4b0d      	ldr	r3, [pc, #52]	@ (800dd74 <sen5x_statemachine+0x22c>)
 800dd3e:	2201      	movs	r2, #1
 800dd40:	701a      	strb	r2, [r3, #0]
 800dd42:	e002      	b.n	800dd4a <sen5x_statemachine+0x202>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800dd44:	4b0b      	ldr	r3, [pc, #44]	@ (800dd74 <sen5x_statemachine+0x22c>)
 800dd46:	2203      	movs	r2, #3
 800dd48:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800dd4a:	f003 fb93 	bl	8011474 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800dd4e:	f005 f9ed 	bl	801312c <HAL_GetTick>
 800dd52:	0003      	movs	r3, r0
 800dd54:	22fa      	movs	r2, #250	@ 0xfa
 800dd56:	0092      	lsls	r2, r2, #2
 800dd58:	189a      	adds	r2, r3, r2
 800dd5a:	4b05      	ldr	r3, [pc, #20]	@ (800dd70 <sen5x_statemachine+0x228>)
 800dd5c:	601a      	str	r2, [r3, #0]
    }
  }
}
 800dd5e:	e002      	b.n	800dd66 <sen5x_statemachine+0x21e>
      break;
 800dd60:	46c0      	nop			@ (mov r8, r8)
 800dd62:	e000      	b.n	800dd66 <sen5x_statemachine+0x21e>
      break;
 800dd64:	46c0      	nop			@ (mov r8, r8)
}
 800dd66:	46c0      	nop			@ (mov r8, r8)
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	b002      	add	sp, #8
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	46c0      	nop			@ (mov r8, r8)
 800dd70:	20000efc 	.word	0x20000efc
 800dd74:	2000009d 	.word	0x2000009d
 800dd78:	0802cb44 	.word	0x0802cb44
 800dd7c:	0802c09c 	.word	0x0802c09c
 800dd80:	0802bac0 	.word	0x0802bac0
 800dd84:	002fefd8 	.word	0x002fefd8
 800dd88:	00005910 	.word	0x00005910
 800dd8c:	20000ef9 	.word	0x20000ef9
 800dd90:	0802c0cc 	.word	0x0802c0cc
 800dd94:	0802c0e4 	.word	0x0802c0e4
 800dd98:	0802ba54 	.word	0x0802ba54
 800dd9c:	0802c0fc 	.word	0x0802c0fc
 800dda0:	0802ba94 	.word	0x0802ba94
 800dda4:	20000f00 	.word	0x20000f00
 800dda8:	0802c110 	.word	0x0802c110
 800ddac:	20000ef8 	.word	0x20000ef8
 800ddb0:	20001e7d 	.word	0x20001e7d
 800ddb4:	20000eec 	.word	0x20000eec
 800ddb8:	0802c140 	.word	0x0802c140
 800ddbc:	00002710 	.word	0x00002710
 800ddc0:	20001e7e 	.word	0x20001e7e
 800ddc4:	0802c158 	.word	0x0802c158

0800ddc8 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800ddc8:	b590      	push	{r4, r7, lr}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800ddce:	1dbb      	adds	r3, r7, #6
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800ddd4:	1dbc      	adds	r4, r7, #6
 800ddd6:	1dbb      	adds	r3, r7, #6
 800ddd8:	8819      	ldrh	r1, [r3, #0]
 800ddda:	003b      	movs	r3, r7
 800dddc:	2221      	movs	r2, #33	@ 0x21
 800ddde:	0018      	movs	r0, r3
 800dde0:	f001 fb54 	bl	800f48c <sensirion_i2c_add_command_to_buffer>
 800dde4:	0003      	movs	r3, r0
 800dde6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800dde8:	1d3c      	adds	r4, r7, #4
 800ddea:	1dbb      	adds	r3, r7, #6
 800ddec:	881a      	ldrh	r2, [r3, #0]
 800ddee:	003b      	movs	r3, r7
 800ddf0:	0019      	movs	r1, r3
 800ddf2:	2069      	movs	r0, #105	@ 0x69
 800ddf4:	f001 fbce 	bl	800f594 <sensirion_i2c_write_data>
 800ddf8:	0003      	movs	r3, r0
 800ddfa:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ddfc:	1d3b      	adds	r3, r7, #4
 800ddfe:	2200      	movs	r2, #0
 800de00:	5e9b      	ldrsh	r3, [r3, r2]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d003      	beq.n	800de0e <sen5x_start_measurement+0x46>
        return error;
 800de06:	1d3b      	adds	r3, r7, #4
 800de08:	2200      	movs	r2, #0
 800de0a:	5e9b      	ldrsh	r3, [r3, r2]
 800de0c:	e004      	b.n	800de18 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800de0e:	4b04      	ldr	r3, [pc, #16]	@ (800de20 <sen5x_start_measurement+0x58>)
 800de10:	0018      	movs	r0, r3
 800de12:	f7ff fdcd 	bl	800d9b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800de16:	2300      	movs	r3, #0
}
 800de18:	0018      	movs	r0, r3
 800de1a:	46bd      	mov	sp, r7
 800de1c:	b003      	add	sp, #12
 800de1e:	bd90      	pop	{r4, r7, pc}
 800de20:	0000c350 	.word	0x0000c350

0800de24 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800de24:	b590      	push	{r4, r7, lr}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800de2a:	1dbb      	adds	r3, r7, #6
 800de2c:	2200      	movs	r2, #0
 800de2e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800de30:	1dbc      	adds	r4, r7, #6
 800de32:	1dbb      	adds	r3, r7, #6
 800de34:	8819      	ldrh	r1, [r3, #0]
 800de36:	003b      	movs	r3, r7
 800de38:	2237      	movs	r2, #55	@ 0x37
 800de3a:	0018      	movs	r0, r3
 800de3c:	f001 fb26 	bl	800f48c <sensirion_i2c_add_command_to_buffer>
 800de40:	0003      	movs	r3, r0
 800de42:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800de44:	1d3c      	adds	r4, r7, #4
 800de46:	1dbb      	adds	r3, r7, #6
 800de48:	881a      	ldrh	r2, [r3, #0]
 800de4a:	003b      	movs	r3, r7
 800de4c:	0019      	movs	r1, r3
 800de4e:	2069      	movs	r0, #105	@ 0x69
 800de50:	f001 fba0 	bl	800f594 <sensirion_i2c_write_data>
 800de54:	0003      	movs	r3, r0
 800de56:	8023      	strh	r3, [r4, #0]
    if (error) {
 800de58:	1d3b      	adds	r3, r7, #4
 800de5a:	2200      	movs	r2, #0
 800de5c:	5e9b      	ldrsh	r3, [r3, r2]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d003      	beq.n	800de6a <sen5x_start_measurement_without_pm+0x46>
        return error;
 800de62:	1d3b      	adds	r3, r7, #4
 800de64:	2200      	movs	r2, #0
 800de66:	5e9b      	ldrsh	r3, [r3, r2]
 800de68:	e004      	b.n	800de74 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800de6a:	4b04      	ldr	r3, [pc, #16]	@ (800de7c <sen5x_start_measurement_without_pm+0x58>)
 800de6c:	0018      	movs	r0, r3
 800de6e:	f7ff fd9f 	bl	800d9b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800de72:	2300      	movs	r3, #0
}
 800de74:	0018      	movs	r0, r3
 800de76:	46bd      	mov	sp, r7
 800de78:	b003      	add	sp, #12
 800de7a:	bd90      	pop	{r4, r7, pc}
 800de7c:	0000c350 	.word	0x0000c350

0800de80 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800de80:	b590      	push	{r4, r7, lr}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800de86:	1dbb      	adds	r3, r7, #6
 800de88:	2200      	movs	r2, #0
 800de8a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800de8c:	1dbc      	adds	r4, r7, #6
 800de8e:	2382      	movs	r3, #130	@ 0x82
 800de90:	005a      	lsls	r2, r3, #1
 800de92:	1dbb      	adds	r3, r7, #6
 800de94:	8819      	ldrh	r1, [r3, #0]
 800de96:	003b      	movs	r3, r7
 800de98:	0018      	movs	r0, r3
 800de9a:	f001 faf7 	bl	800f48c <sensirion_i2c_add_command_to_buffer>
 800de9e:	0003      	movs	r3, r0
 800dea0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800dea2:	1d3c      	adds	r4, r7, #4
 800dea4:	1dbb      	adds	r3, r7, #6
 800dea6:	881a      	ldrh	r2, [r3, #0]
 800dea8:	003b      	movs	r3, r7
 800deaa:	0019      	movs	r1, r3
 800deac:	2069      	movs	r0, #105	@ 0x69
 800deae:	f001 fb71 	bl	800f594 <sensirion_i2c_write_data>
 800deb2:	0003      	movs	r3, r0
 800deb4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800deb6:	1d3b      	adds	r3, r7, #4
 800deb8:	2200      	movs	r2, #0
 800deba:	5e9b      	ldrsh	r3, [r3, r2]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d003      	beq.n	800dec8 <sen5x_stop_measurement+0x48>
        return error;
 800dec0:	1d3b      	adds	r3, r7, #4
 800dec2:	2200      	movs	r2, #0
 800dec4:	5e9b      	ldrsh	r3, [r3, r2]
 800dec6:	e004      	b.n	800ded2 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800dec8:	4b04      	ldr	r3, [pc, #16]	@ (800dedc <sen5x_stop_measurement+0x5c>)
 800deca:	0018      	movs	r0, r3
 800decc:	f7ff fd70 	bl	800d9b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ded0:	2300      	movs	r3, #0
}
 800ded2:	0018      	movs	r0, r3
 800ded4:	46bd      	mov	sp, r7
 800ded6:	b003      	add	sp, #12
 800ded8:	bd90      	pop	{r4, r7, pc}
 800deda:	46c0      	nop			@ (mov r8, r8)
 800dedc:	00030d40 	.word	0x00030d40

0800dee0 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800dee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800dee8:	250e      	movs	r5, #14
 800deea:	197b      	adds	r3, r7, r5
 800deec:	2200      	movs	r2, #0
 800deee:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800def0:	197c      	adds	r4, r7, r5
 800def2:	4a22      	ldr	r2, [pc, #136]	@ (800df7c <sen5x_read_data_ready+0x9c>)
 800def4:	197b      	adds	r3, r7, r5
 800def6:	8819      	ldrh	r1, [r3, #0]
 800def8:	2308      	movs	r3, #8
 800defa:	18fb      	adds	r3, r7, r3
 800defc:	0018      	movs	r0, r3
 800defe:	f001 fac5 	bl	800f48c <sensirion_i2c_add_command_to_buffer>
 800df02:	0003      	movs	r3, r0
 800df04:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800df06:	260c      	movs	r6, #12
 800df08:	19bc      	adds	r4, r7, r6
 800df0a:	197b      	adds	r3, r7, r5
 800df0c:	881a      	ldrh	r2, [r3, #0]
 800df0e:	2308      	movs	r3, #8
 800df10:	18fb      	adds	r3, r7, r3
 800df12:	0019      	movs	r1, r3
 800df14:	2069      	movs	r0, #105	@ 0x69
 800df16:	f001 fb3d 	bl	800f594 <sensirion_i2c_write_data>
 800df1a:	0003      	movs	r3, r0
 800df1c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800df1e:	19bb      	adds	r3, r7, r6
 800df20:	2200      	movs	r2, #0
 800df22:	5e9b      	ldrsh	r3, [r3, r2]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d003      	beq.n	800df30 <sen5x_read_data_ready+0x50>
        return error;
 800df28:	19bb      	adds	r3, r7, r6
 800df2a:	2200      	movs	r2, #0
 800df2c:	5e9b      	ldrsh	r3, [r3, r2]
 800df2e:	e020      	b.n	800df72 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800df30:	4b13      	ldr	r3, [pc, #76]	@ (800df80 <sen5x_read_data_ready+0xa0>)
 800df32:	0018      	movs	r0, r3
 800df34:	f7ff fd3c 	bl	800d9b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800df38:	250c      	movs	r5, #12
 800df3a:	197c      	adds	r4, r7, r5
 800df3c:	2308      	movs	r3, #8
 800df3e:	18fb      	adds	r3, r7, r3
 800df40:	2202      	movs	r2, #2
 800df42:	0019      	movs	r1, r3
 800df44:	2069      	movs	r0, #105	@ 0x69
 800df46:	f001 fb3d 	bl	800f5c4 <sensirion_i2c_read_data_inplace>
 800df4a:	0003      	movs	r3, r0
 800df4c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800df4e:	197b      	adds	r3, r7, r5
 800df50:	2200      	movs	r2, #0
 800df52:	5e9b      	ldrsh	r3, [r3, r2]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d003      	beq.n	800df60 <sen5x_read_data_ready+0x80>
        return error;
 800df58:	197b      	adds	r3, r7, r5
 800df5a:	2200      	movs	r2, #0
 800df5c:	5e9b      	ldrsh	r3, [r3, r2]
 800df5e:	e008      	b.n	800df72 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800df60:	2308      	movs	r3, #8
 800df62:	18fb      	adds	r3, r7, r3
 800df64:	785b      	ldrb	r3, [r3, #1]
 800df66:	1e5a      	subs	r2, r3, #1
 800df68:	4193      	sbcs	r3, r2
 800df6a:	b2da      	uxtb	r2, r3
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800df70:	2300      	movs	r3, #0
}
 800df72:	0018      	movs	r0, r3
 800df74:	46bd      	mov	sp, r7
 800df76:	b005      	add	sp, #20
 800df78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df7a:	46c0      	nop			@ (mov r8, r8)
 800df7c:	00000202 	.word	0x00000202
 800df80:	00004e20 	.word	0x00004e20

0800df84 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800df84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df86:	b08d      	sub	sp, #52	@ 0x34
 800df88:	af00      	add	r7, sp, #0
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	607a      	str	r2, [r7, #4]
 800df90:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800df92:	252e      	movs	r5, #46	@ 0x2e
 800df94:	197b      	adds	r3, r7, r5
 800df96:	2200      	movs	r2, #0
 800df98:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800df9a:	197c      	adds	r4, r7, r5
 800df9c:	23f1      	movs	r3, #241	@ 0xf1
 800df9e:	009a      	lsls	r2, r3, #2
 800dfa0:	197b      	adds	r3, r7, r5
 800dfa2:	8819      	ldrh	r1, [r3, #0]
 800dfa4:	2314      	movs	r3, #20
 800dfa6:	18fb      	adds	r3, r7, r3
 800dfa8:	0018      	movs	r0, r3
 800dfaa:	f001 fa6f 	bl	800f48c <sensirion_i2c_add_command_to_buffer>
 800dfae:	0003      	movs	r3, r0
 800dfb0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800dfb2:	262c      	movs	r6, #44	@ 0x2c
 800dfb4:	19bc      	adds	r4, r7, r6
 800dfb6:	197b      	adds	r3, r7, r5
 800dfb8:	881a      	ldrh	r2, [r3, #0]
 800dfba:	2314      	movs	r3, #20
 800dfbc:	18fb      	adds	r3, r7, r3
 800dfbe:	0019      	movs	r1, r3
 800dfc0:	2069      	movs	r0, #105	@ 0x69
 800dfc2:	f001 fae7 	bl	800f594 <sensirion_i2c_write_data>
 800dfc6:	0003      	movs	r3, r0
 800dfc8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800dfca:	19bb      	adds	r3, r7, r6
 800dfcc:	2200      	movs	r2, #0
 800dfce:	5e9b      	ldrsh	r3, [r3, r2]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d003      	beq.n	800dfdc <sen5x_read_measured_values+0x58>
        return error;
 800dfd4:	19bb      	adds	r3, r7, r6
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	5e9b      	ldrsh	r3, [r3, r2]
 800dfda:	e060      	b.n	800e09e <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800dfdc:	4b32      	ldr	r3, [pc, #200]	@ (800e0a8 <sen5x_read_measured_values+0x124>)
 800dfde:	0018      	movs	r0, r3
 800dfe0:	f7ff fce6 	bl	800d9b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800dfe4:	252c      	movs	r5, #44	@ 0x2c
 800dfe6:	197c      	adds	r4, r7, r5
 800dfe8:	2314      	movs	r3, #20
 800dfea:	18fb      	adds	r3, r7, r3
 800dfec:	2210      	movs	r2, #16
 800dfee:	0019      	movs	r1, r3
 800dff0:	2069      	movs	r0, #105	@ 0x69
 800dff2:	f001 fae7 	bl	800f5c4 <sensirion_i2c_read_data_inplace>
 800dff6:	0003      	movs	r3, r0
 800dff8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800dffa:	197b      	adds	r3, r7, r5
 800dffc:	2200      	movs	r2, #0
 800dffe:	5e9b      	ldrsh	r3, [r3, r2]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d003      	beq.n	800e00c <sen5x_read_measured_values+0x88>
        return error;
 800e004:	197b      	adds	r3, r7, r5
 800e006:	2200      	movs	r2, #0
 800e008:	5e9b      	ldrsh	r3, [r3, r2]
 800e00a:	e048      	b.n	800e09e <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800e00c:	2414      	movs	r4, #20
 800e00e:	193b      	adds	r3, r7, r4
 800e010:	0018      	movs	r0, r3
 800e012:	f000 fa79 	bl	800e508 <sensirion_common_bytes_to_uint16_t>
 800e016:	0003      	movs	r3, r0
 800e018:	001a      	movs	r2, r3
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800e01e:	193b      	adds	r3, r7, r4
 800e020:	3302      	adds	r3, #2
 800e022:	0018      	movs	r0, r3
 800e024:	f000 fa70 	bl	800e508 <sensirion_common_bytes_to_uint16_t>
 800e028:	0003      	movs	r3, r0
 800e02a:	001a      	movs	r2, r3
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800e030:	193b      	adds	r3, r7, r4
 800e032:	3304      	adds	r3, #4
 800e034:	0018      	movs	r0, r3
 800e036:	f000 fa67 	bl	800e508 <sensirion_common_bytes_to_uint16_t>
 800e03a:	0003      	movs	r3, r0
 800e03c:	001a      	movs	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800e042:	193b      	adds	r3, r7, r4
 800e044:	3306      	adds	r3, #6
 800e046:	0018      	movs	r0, r3
 800e048:	f000 fa5e 	bl	800e508 <sensirion_common_bytes_to_uint16_t>
 800e04c:	0003      	movs	r3, r0
 800e04e:	001a      	movs	r2, r3
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800e054:	193b      	adds	r3, r7, r4
 800e056:	3308      	adds	r3, #8
 800e058:	0018      	movs	r0, r3
 800e05a:	f000 fa81 	bl	800e560 <sensirion_common_bytes_to_int16_t>
 800e05e:	0003      	movs	r3, r0
 800e060:	001a      	movs	r2, r3
 800e062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e064:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800e066:	193b      	adds	r3, r7, r4
 800e068:	330a      	adds	r3, #10
 800e06a:	0018      	movs	r0, r3
 800e06c:	f000 fa78 	bl	800e560 <sensirion_common_bytes_to_int16_t>
 800e070:	0003      	movs	r3, r0
 800e072:	001a      	movs	r2, r3
 800e074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e076:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800e078:	193b      	adds	r3, r7, r4
 800e07a:	330c      	adds	r3, #12
 800e07c:	0018      	movs	r0, r3
 800e07e:	f000 fa6f 	bl	800e560 <sensirion_common_bytes_to_int16_t>
 800e082:	0003      	movs	r3, r0
 800e084:	001a      	movs	r2, r3
 800e086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e088:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800e08a:	193b      	adds	r3, r7, r4
 800e08c:	330e      	adds	r3, #14
 800e08e:	0018      	movs	r0, r3
 800e090:	f000 fa66 	bl	800e560 <sensirion_common_bytes_to_int16_t>
 800e094:	0003      	movs	r3, r0
 800e096:	001a      	movs	r2, r3
 800e098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e09a:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800e09c:	2300      	movs	r3, #0
}
 800e09e:	0018      	movs	r0, r3
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	b00d      	add	sp, #52	@ 0x34
 800e0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0a6:	46c0      	nop			@ (mov r8, r8)
 800e0a8:	00004e20 	.word	0x00004e20

0800e0ac <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800e0ac:	b590      	push	{r4, r7, lr}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e0b2:	1dbb      	adds	r3, r7, #6
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800e0b8:	1dbc      	adds	r4, r7, #6
 800e0ba:	4a12      	ldr	r2, [pc, #72]	@ (800e104 <sen5x_start_fan_cleaning+0x58>)
 800e0bc:	1dbb      	adds	r3, r7, #6
 800e0be:	8819      	ldrh	r1, [r3, #0]
 800e0c0:	003b      	movs	r3, r7
 800e0c2:	0018      	movs	r0, r3
 800e0c4:	f001 f9e2 	bl	800f48c <sensirion_i2c_add_command_to_buffer>
 800e0c8:	0003      	movs	r3, r0
 800e0ca:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e0cc:	1d3c      	adds	r4, r7, #4
 800e0ce:	1dbb      	adds	r3, r7, #6
 800e0d0:	881a      	ldrh	r2, [r3, #0]
 800e0d2:	003b      	movs	r3, r7
 800e0d4:	0019      	movs	r1, r3
 800e0d6:	2069      	movs	r0, #105	@ 0x69
 800e0d8:	f001 fa5c 	bl	800f594 <sensirion_i2c_write_data>
 800e0dc:	0003      	movs	r3, r0
 800e0de:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e0e0:	1d3b      	adds	r3, r7, #4
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	5e9b      	ldrsh	r3, [r3, r2]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d003      	beq.n	800e0f2 <sen5x_start_fan_cleaning+0x46>
        return error;
 800e0ea:	1d3b      	adds	r3, r7, #4
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	5e9b      	ldrsh	r3, [r3, r2]
 800e0f0:	e004      	b.n	800e0fc <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800e0f2:	4b05      	ldr	r3, [pc, #20]	@ (800e108 <sen5x_start_fan_cleaning+0x5c>)
 800e0f4:	0018      	movs	r0, r3
 800e0f6:	f7ff fc5b 	bl	800d9b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e0fa:	2300      	movs	r3, #0
}
 800e0fc:	0018      	movs	r0, r3
 800e0fe:	46bd      	mov	sp, r7
 800e100:	b003      	add	sp, #12
 800e102:	bd90      	pop	{r4, r7, pc}
 800e104:	00005607 	.word	0x00005607
 800e108:	00004e20 	.word	0x00004e20

0800e10c <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800e10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e10e:	b087      	sub	sp, #28
 800e110:	af00      	add	r7, sp, #0
 800e112:	0004      	movs	r4, r0
 800e114:	0008      	movs	r0, r1
 800e116:	0011      	movs	r1, r2
 800e118:	1dbb      	adds	r3, r7, #6
 800e11a:	1c22      	adds	r2, r4, #0
 800e11c:	801a      	strh	r2, [r3, #0]
 800e11e:	1d3b      	adds	r3, r7, #4
 800e120:	1c02      	adds	r2, r0, #0
 800e122:	801a      	strh	r2, [r3, #0]
 800e124:	1cbb      	adds	r3, r7, #2
 800e126:	1c0a      	adds	r2, r1, #0
 800e128:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800e12a:	2516      	movs	r5, #22
 800e12c:	197b      	adds	r3, r7, r5
 800e12e:	2200      	movs	r2, #0
 800e130:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800e132:	197c      	adds	r4, r7, r5
 800e134:	4a25      	ldr	r2, [pc, #148]	@ (800e1cc <sen5x_set_temperature_offset_parameters+0xc0>)
 800e136:	197b      	adds	r3, r7, r5
 800e138:	8819      	ldrh	r1, [r3, #0]
 800e13a:	2608      	movs	r6, #8
 800e13c:	19bb      	adds	r3, r7, r6
 800e13e:	0018      	movs	r0, r3
 800e140:	f001 f9a4 	bl	800f48c <sensirion_i2c_add_command_to_buffer>
 800e144:	0003      	movs	r3, r0
 800e146:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800e148:	197c      	adds	r4, r7, r5
 800e14a:	1dbb      	adds	r3, r7, #6
 800e14c:	2200      	movs	r2, #0
 800e14e:	5e9a      	ldrsh	r2, [r3, r2]
 800e150:	197b      	adds	r3, r7, r5
 800e152:	8819      	ldrh	r1, [r3, #0]
 800e154:	19bb      	adds	r3, r7, r6
 800e156:	0018      	movs	r0, r3
 800e158:	f001 fa03 	bl	800f562 <sensirion_i2c_add_int16_t_to_buffer>
 800e15c:	0003      	movs	r3, r0
 800e15e:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800e160:	197c      	adds	r4, r7, r5
 800e162:	1d3b      	adds	r3, r7, #4
 800e164:	2200      	movs	r2, #0
 800e166:	5e9a      	ldrsh	r2, [r3, r2]
 800e168:	197b      	adds	r3, r7, r5
 800e16a:	8819      	ldrh	r1, [r3, #0]
 800e16c:	19bb      	adds	r3, r7, r6
 800e16e:	0018      	movs	r0, r3
 800e170:	f001 f9f7 	bl	800f562 <sensirion_i2c_add_int16_t_to_buffer>
 800e174:	0003      	movs	r3, r0
 800e176:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800e178:	197c      	adds	r4, r7, r5
 800e17a:	1cbb      	adds	r3, r7, #2
 800e17c:	881a      	ldrh	r2, [r3, #0]
 800e17e:	197b      	adds	r3, r7, r5
 800e180:	8819      	ldrh	r1, [r3, #0]
 800e182:	19bb      	adds	r3, r7, r6
 800e184:	0018      	movs	r0, r3
 800e186:	f001 f9ad 	bl	800f4e4 <sensirion_i2c_add_uint16_t_to_buffer>
 800e18a:	0003      	movs	r3, r0
 800e18c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e18e:	2214      	movs	r2, #20
 800e190:	18bc      	adds	r4, r7, r2
 800e192:	197b      	adds	r3, r7, r5
 800e194:	881a      	ldrh	r2, [r3, #0]
 800e196:	19bb      	adds	r3, r7, r6
 800e198:	0019      	movs	r1, r3
 800e19a:	2069      	movs	r0, #105	@ 0x69
 800e19c:	f001 f9fa 	bl	800f594 <sensirion_i2c_write_data>
 800e1a0:	0003      	movs	r3, r0
 800e1a2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e1a4:	2214      	movs	r2, #20
 800e1a6:	18bb      	adds	r3, r7, r2
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	5e5b      	ldrsh	r3, [r3, r1]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d003      	beq.n	800e1b8 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800e1b0:	18bb      	adds	r3, r7, r2
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	5e9b      	ldrsh	r3, [r3, r2]
 800e1b6:	e004      	b.n	800e1c2 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800e1b8:	4b05      	ldr	r3, [pc, #20]	@ (800e1d0 <sen5x_set_temperature_offset_parameters+0xc4>)
 800e1ba:	0018      	movs	r0, r3
 800e1bc:	f7ff fbf8 	bl	800d9b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	0018      	movs	r0, r3
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	b007      	add	sp, #28
 800e1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1ca:	46c0      	nop			@ (mov r8, r8)
 800e1cc:	000060b2 	.word	0x000060b2
 800e1d0:	00004e20 	.word	0x00004e20

0800e1d4 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800e1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1d6:	b091      	sub	sp, #68	@ 0x44
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	000a      	movs	r2, r1
 800e1de:	1cfb      	adds	r3, r7, #3
 800e1e0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800e1e2:	253e      	movs	r5, #62	@ 0x3e
 800e1e4:	197b      	adds	r3, r7, r5
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800e1ea:	197c      	adds	r4, r7, r5
 800e1ec:	4a22      	ldr	r2, [pc, #136]	@ (800e278 <sen5x_get_product_name+0xa4>)
 800e1ee:	197b      	adds	r3, r7, r5
 800e1f0:	8819      	ldrh	r1, [r3, #0]
 800e1f2:	230c      	movs	r3, #12
 800e1f4:	18fb      	adds	r3, r7, r3
 800e1f6:	0018      	movs	r0, r3
 800e1f8:	f001 f948 	bl	800f48c <sensirion_i2c_add_command_to_buffer>
 800e1fc:	0003      	movs	r3, r0
 800e1fe:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e200:	263c      	movs	r6, #60	@ 0x3c
 800e202:	19bc      	adds	r4, r7, r6
 800e204:	197b      	adds	r3, r7, r5
 800e206:	881a      	ldrh	r2, [r3, #0]
 800e208:	230c      	movs	r3, #12
 800e20a:	18fb      	adds	r3, r7, r3
 800e20c:	0019      	movs	r1, r3
 800e20e:	2069      	movs	r0, #105	@ 0x69
 800e210:	f001 f9c0 	bl	800f594 <sensirion_i2c_write_data>
 800e214:	0003      	movs	r3, r0
 800e216:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e218:	19bb      	adds	r3, r7, r6
 800e21a:	2200      	movs	r2, #0
 800e21c:	5e9b      	ldrsh	r3, [r3, r2]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d003      	beq.n	800e22a <sen5x_get_product_name+0x56>
        return error;
 800e222:	19bb      	adds	r3, r7, r6
 800e224:	2200      	movs	r2, #0
 800e226:	5e9b      	ldrsh	r3, [r3, r2]
 800e228:	e021      	b.n	800e26e <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800e22a:	4b14      	ldr	r3, [pc, #80]	@ (800e27c <sen5x_get_product_name+0xa8>)
 800e22c:	0018      	movs	r0, r3
 800e22e:	f7ff fbbf 	bl	800d9b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800e232:	253c      	movs	r5, #60	@ 0x3c
 800e234:	197c      	adds	r4, r7, r5
 800e236:	230c      	movs	r3, #12
 800e238:	18fb      	adds	r3, r7, r3
 800e23a:	2220      	movs	r2, #32
 800e23c:	0019      	movs	r1, r3
 800e23e:	2069      	movs	r0, #105	@ 0x69
 800e240:	f001 f9c0 	bl	800f5c4 <sensirion_i2c_read_data_inplace>
 800e244:	0003      	movs	r3, r0
 800e246:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e248:	197b      	adds	r3, r7, r5
 800e24a:	2200      	movs	r2, #0
 800e24c:	5e9b      	ldrsh	r3, [r3, r2]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d003      	beq.n	800e25a <sen5x_get_product_name+0x86>
        return error;
 800e252:	197b      	adds	r3, r7, r5
 800e254:	2200      	movs	r2, #0
 800e256:	5e9b      	ldrsh	r3, [r3, r2]
 800e258:	e009      	b.n	800e26e <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800e25a:	1cfb      	adds	r3, r7, #3
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	b29a      	uxth	r2, r3
 800e260:	6879      	ldr	r1, [r7, #4]
 800e262:	230c      	movs	r3, #12
 800e264:	18fb      	adds	r3, r7, r3
 800e266:	0018      	movs	r0, r3
 800e268:	f000 f988 	bl	800e57c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	0018      	movs	r0, r3
 800e270:	46bd      	mov	sp, r7
 800e272:	b011      	add	sp, #68	@ 0x44
 800e274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e276:	46c0      	nop			@ (mov r8, r8)
 800e278:	0000d014 	.word	0x0000d014
 800e27c:	0000c350 	.word	0x0000c350

0800e280 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800e280:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e282:	b091      	sub	sp, #68	@ 0x44
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	000a      	movs	r2, r1
 800e28a:	1cfb      	adds	r3, r7, #3
 800e28c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800e28e:	253e      	movs	r5, #62	@ 0x3e
 800e290:	197b      	adds	r3, r7, r5
 800e292:	2200      	movs	r2, #0
 800e294:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800e296:	197c      	adds	r4, r7, r5
 800e298:	4a22      	ldr	r2, [pc, #136]	@ (800e324 <sen5x_get_serial_number+0xa4>)
 800e29a:	197b      	adds	r3, r7, r5
 800e29c:	8819      	ldrh	r1, [r3, #0]
 800e29e:	230c      	movs	r3, #12
 800e2a0:	18fb      	adds	r3, r7, r3
 800e2a2:	0018      	movs	r0, r3
 800e2a4:	f001 f8f2 	bl	800f48c <sensirion_i2c_add_command_to_buffer>
 800e2a8:	0003      	movs	r3, r0
 800e2aa:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e2ac:	263c      	movs	r6, #60	@ 0x3c
 800e2ae:	19bc      	adds	r4, r7, r6
 800e2b0:	197b      	adds	r3, r7, r5
 800e2b2:	881a      	ldrh	r2, [r3, #0]
 800e2b4:	230c      	movs	r3, #12
 800e2b6:	18fb      	adds	r3, r7, r3
 800e2b8:	0019      	movs	r1, r3
 800e2ba:	2069      	movs	r0, #105	@ 0x69
 800e2bc:	f001 f96a 	bl	800f594 <sensirion_i2c_write_data>
 800e2c0:	0003      	movs	r3, r0
 800e2c2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e2c4:	19bb      	adds	r3, r7, r6
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	5e9b      	ldrsh	r3, [r3, r2]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d003      	beq.n	800e2d6 <sen5x_get_serial_number+0x56>
        return error;
 800e2ce:	19bb      	adds	r3, r7, r6
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	5e9b      	ldrsh	r3, [r3, r2]
 800e2d4:	e021      	b.n	800e31a <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800e2d6:	4b14      	ldr	r3, [pc, #80]	@ (800e328 <sen5x_get_serial_number+0xa8>)
 800e2d8:	0018      	movs	r0, r3
 800e2da:	f7ff fb69 	bl	800d9b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800e2de:	253c      	movs	r5, #60	@ 0x3c
 800e2e0:	197c      	adds	r4, r7, r5
 800e2e2:	230c      	movs	r3, #12
 800e2e4:	18fb      	adds	r3, r7, r3
 800e2e6:	2220      	movs	r2, #32
 800e2e8:	0019      	movs	r1, r3
 800e2ea:	2069      	movs	r0, #105	@ 0x69
 800e2ec:	f001 f96a 	bl	800f5c4 <sensirion_i2c_read_data_inplace>
 800e2f0:	0003      	movs	r3, r0
 800e2f2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e2f4:	197b      	adds	r3, r7, r5
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	5e9b      	ldrsh	r3, [r3, r2]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d003      	beq.n	800e306 <sen5x_get_serial_number+0x86>
        return error;
 800e2fe:	197b      	adds	r3, r7, r5
 800e300:	2200      	movs	r2, #0
 800e302:	5e9b      	ldrsh	r3, [r3, r2]
 800e304:	e009      	b.n	800e31a <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800e306:	1cfb      	adds	r3, r7, #3
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	6879      	ldr	r1, [r7, #4]
 800e30e:	230c      	movs	r3, #12
 800e310:	18fb      	adds	r3, r7, r3
 800e312:	0018      	movs	r0, r3
 800e314:	f000 f932 	bl	800e57c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800e318:	2300      	movs	r3, #0
}
 800e31a:	0018      	movs	r0, r3
 800e31c:	46bd      	mov	sp, r7
 800e31e:	b011      	add	sp, #68	@ 0x44
 800e320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e322:	46c0      	nop			@ (mov r8, r8)
 800e324:	0000d033 	.word	0x0000d033
 800e328:	0000c350 	.word	0x0000c350

0800e32c <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800e32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e32e:	b089      	sub	sp, #36	@ 0x24
 800e330:	af00      	add	r7, sp, #0
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	607a      	str	r2, [r7, #4]
 800e338:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800e33a:	251e      	movs	r5, #30
 800e33c:	197b      	adds	r3, r7, r5
 800e33e:	2200      	movs	r2, #0
 800e340:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800e342:	197c      	adds	r4, r7, r5
 800e344:	23d1      	movs	r3, #209	@ 0xd1
 800e346:	021a      	lsls	r2, r3, #8
 800e348:	197b      	adds	r3, r7, r5
 800e34a:	8819      	ldrh	r1, [r3, #0]
 800e34c:	2310      	movs	r3, #16
 800e34e:	18fb      	adds	r3, r7, r3
 800e350:	0018      	movs	r0, r3
 800e352:	f001 f89b 	bl	800f48c <sensirion_i2c_add_command_to_buffer>
 800e356:	0003      	movs	r3, r0
 800e358:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e35a:	261c      	movs	r6, #28
 800e35c:	19bc      	adds	r4, r7, r6
 800e35e:	197b      	adds	r3, r7, r5
 800e360:	881a      	ldrh	r2, [r3, #0]
 800e362:	2310      	movs	r3, #16
 800e364:	18fb      	adds	r3, r7, r3
 800e366:	0019      	movs	r1, r3
 800e368:	2069      	movs	r0, #105	@ 0x69
 800e36a:	f001 f913 	bl	800f594 <sensirion_i2c_write_data>
 800e36e:	0003      	movs	r3, r0
 800e370:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e372:	19bb      	adds	r3, r7, r6
 800e374:	2200      	movs	r2, #0
 800e376:	5e9b      	ldrsh	r3, [r3, r2]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d003      	beq.n	800e384 <sen5x_get_version+0x58>
        return error;
 800e37c:	19bb      	adds	r3, r7, r6
 800e37e:	2200      	movs	r2, #0
 800e380:	5e9b      	ldrsh	r3, [r3, r2]
 800e382:	e038      	b.n	800e3f6 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e384:	4b1e      	ldr	r3, [pc, #120]	@ (800e400 <sen5x_get_version+0xd4>)
 800e386:	0018      	movs	r0, r3
 800e388:	f7ff fb12 	bl	800d9b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800e38c:	251c      	movs	r5, #28
 800e38e:	197c      	adds	r4, r7, r5
 800e390:	2310      	movs	r3, #16
 800e392:	18fb      	adds	r3, r7, r3
 800e394:	2208      	movs	r2, #8
 800e396:	0019      	movs	r1, r3
 800e398:	2069      	movs	r0, #105	@ 0x69
 800e39a:	f001 f913 	bl	800f5c4 <sensirion_i2c_read_data_inplace>
 800e39e:	0003      	movs	r3, r0
 800e3a0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e3a2:	197b      	adds	r3, r7, r5
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	5e9b      	ldrsh	r3, [r3, r2]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d003      	beq.n	800e3b4 <sen5x_get_version+0x88>
        return error;
 800e3ac:	197b      	adds	r3, r7, r5
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	5e9b      	ldrsh	r3, [r3, r2]
 800e3b2:	e020      	b.n	800e3f6 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800e3b4:	2110      	movs	r1, #16
 800e3b6:	187b      	adds	r3, r7, r1
 800e3b8:	781a      	ldrb	r2, [r3, #0]
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800e3be:	187b      	adds	r3, r7, r1
 800e3c0:	785a      	ldrb	r2, [r3, #1]
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800e3c6:	187b      	adds	r3, r7, r1
 800e3c8:	789b      	ldrb	r3, [r3, #2]
 800e3ca:	1e5a      	subs	r2, r3, #1
 800e3cc:	4193      	sbcs	r3, r2
 800e3ce:	b2da      	uxtb	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800e3d4:	187b      	adds	r3, r7, r1
 800e3d6:	78da      	ldrb	r2, [r3, #3]
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800e3dc:	187b      	adds	r3, r7, r1
 800e3de:	791a      	ldrb	r2, [r3, #4]
 800e3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e2:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800e3e4:	187b      	adds	r3, r7, r1
 800e3e6:	795a      	ldrb	r2, [r3, #5]
 800e3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3ea:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800e3ec:	187b      	adds	r3, r7, r1
 800e3ee:	799a      	ldrb	r2, [r3, #6]
 800e3f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3f2:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800e3f4:	2300      	movs	r3, #0
}
 800e3f6:	0018      	movs	r0, r3
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	b009      	add	sp, #36	@ 0x24
 800e3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3fe:	46c0      	nop			@ (mov r8, r8)
 800e400:	00004e20 	.word	0x00004e20

0800e404 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800e404:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e406:	b087      	sub	sp, #28
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800e40c:	2516      	movs	r5, #22
 800e40e:	197b      	adds	r3, r7, r5
 800e410:	2200      	movs	r2, #0
 800e412:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800e414:	197c      	adds	r4, r7, r5
 800e416:	4a22      	ldr	r2, [pc, #136]	@ (800e4a0 <sen5x_read_device_status+0x9c>)
 800e418:	197b      	adds	r3, r7, r5
 800e41a:	8819      	ldrh	r1, [r3, #0]
 800e41c:	230c      	movs	r3, #12
 800e41e:	18fb      	adds	r3, r7, r3
 800e420:	0018      	movs	r0, r3
 800e422:	f001 f833 	bl	800f48c <sensirion_i2c_add_command_to_buffer>
 800e426:	0003      	movs	r3, r0
 800e428:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e42a:	2614      	movs	r6, #20
 800e42c:	19bc      	adds	r4, r7, r6
 800e42e:	197b      	adds	r3, r7, r5
 800e430:	881a      	ldrh	r2, [r3, #0]
 800e432:	230c      	movs	r3, #12
 800e434:	18fb      	adds	r3, r7, r3
 800e436:	0019      	movs	r1, r3
 800e438:	2069      	movs	r0, #105	@ 0x69
 800e43a:	f001 f8ab 	bl	800f594 <sensirion_i2c_write_data>
 800e43e:	0003      	movs	r3, r0
 800e440:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e442:	19bb      	adds	r3, r7, r6
 800e444:	2200      	movs	r2, #0
 800e446:	5e9b      	ldrsh	r3, [r3, r2]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d003      	beq.n	800e454 <sen5x_read_device_status+0x50>
        return error;
 800e44c:	19bb      	adds	r3, r7, r6
 800e44e:	2200      	movs	r2, #0
 800e450:	5e9b      	ldrsh	r3, [r3, r2]
 800e452:	e020      	b.n	800e496 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e454:	4b13      	ldr	r3, [pc, #76]	@ (800e4a4 <sen5x_read_device_status+0xa0>)
 800e456:	0018      	movs	r0, r3
 800e458:	f7ff faaa 	bl	800d9b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800e45c:	2514      	movs	r5, #20
 800e45e:	197c      	adds	r4, r7, r5
 800e460:	230c      	movs	r3, #12
 800e462:	18fb      	adds	r3, r7, r3
 800e464:	2204      	movs	r2, #4
 800e466:	0019      	movs	r1, r3
 800e468:	2069      	movs	r0, #105	@ 0x69
 800e46a:	f001 f8ab 	bl	800f5c4 <sensirion_i2c_read_data_inplace>
 800e46e:	0003      	movs	r3, r0
 800e470:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e472:	197b      	adds	r3, r7, r5
 800e474:	2200      	movs	r2, #0
 800e476:	5e9b      	ldrsh	r3, [r3, r2]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d003      	beq.n	800e484 <sen5x_read_device_status+0x80>
        return error;
 800e47c:	197b      	adds	r3, r7, r5
 800e47e:	2200      	movs	r2, #0
 800e480:	5e9b      	ldrsh	r3, [r3, r2]
 800e482:	e008      	b.n	800e496 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800e484:	230c      	movs	r3, #12
 800e486:	18fb      	adds	r3, r7, r3
 800e488:	0018      	movs	r0, r3
 800e48a:	f000 f850 	bl	800e52e <sensirion_common_bytes_to_uint32_t>
 800e48e:	0002      	movs	r2, r0
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800e494:	2300      	movs	r3, #0
}
 800e496:	0018      	movs	r0, r3
 800e498:	46bd      	mov	sp, r7
 800e49a:	b007      	add	sp, #28
 800e49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e49e:	46c0      	nop			@ (mov r8, r8)
 800e4a0:	0000d206 	.word	0x0000d206
 800e4a4:	00004e20 	.word	0x00004e20

0800e4a8 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800e4a8:	b590      	push	{r4, r7, lr}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e4ae:	1dbb      	adds	r3, r7, #6
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800e4b4:	1dbc      	adds	r4, r7, #6
 800e4b6:	4a12      	ldr	r2, [pc, #72]	@ (800e500 <sen5x_device_reset+0x58>)
 800e4b8:	1dbb      	adds	r3, r7, #6
 800e4ba:	8819      	ldrh	r1, [r3, #0]
 800e4bc:	003b      	movs	r3, r7
 800e4be:	0018      	movs	r0, r3
 800e4c0:	f000 ffe4 	bl	800f48c <sensirion_i2c_add_command_to_buffer>
 800e4c4:	0003      	movs	r3, r0
 800e4c6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e4c8:	1d3c      	adds	r4, r7, #4
 800e4ca:	1dbb      	adds	r3, r7, #6
 800e4cc:	881a      	ldrh	r2, [r3, #0]
 800e4ce:	003b      	movs	r3, r7
 800e4d0:	0019      	movs	r1, r3
 800e4d2:	2069      	movs	r0, #105	@ 0x69
 800e4d4:	f001 f85e 	bl	800f594 <sensirion_i2c_write_data>
 800e4d8:	0003      	movs	r3, r0
 800e4da:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e4dc:	1d3b      	adds	r3, r7, #4
 800e4de:	2200      	movs	r2, #0
 800e4e0:	5e9b      	ldrsh	r3, [r3, r2]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d003      	beq.n	800e4ee <sen5x_device_reset+0x46>
        return error;
 800e4e6:	1d3b      	adds	r3, r7, #4
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	5e9b      	ldrsh	r3, [r3, r2]
 800e4ec:	e004      	b.n	800e4f8 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800e4ee:	4b05      	ldr	r3, [pc, #20]	@ (800e504 <sen5x_device_reset+0x5c>)
 800e4f0:	0018      	movs	r0, r3
 800e4f2:	f7ff fa5d 	bl	800d9b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e4f6:	2300      	movs	r3, #0
}
 800e4f8:	0018      	movs	r0, r3
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	b003      	add	sp, #12
 800e4fe:	bd90      	pop	{r4, r7, pc}
 800e500:	0000d304 	.word	0x0000d304
 800e504:	00030d40 	.word	0x00030d40

0800e508 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	021b      	lsls	r3, r3, #8
 800e516:	b21a      	sxth	r2, r3
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	3301      	adds	r3, #1
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	b21b      	sxth	r3, r3
 800e520:	4313      	orrs	r3, r2
 800e522:	b21b      	sxth	r3, r3
 800e524:	b29b      	uxth	r3, r3
}
 800e526:	0018      	movs	r0, r3
 800e528:	46bd      	mov	sp, r7
 800e52a:	b002      	add	sp, #8
 800e52c:	bd80      	pop	{r7, pc}

0800e52e <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800e52e:	b580      	push	{r7, lr}
 800e530:	b082      	sub	sp, #8
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	061a      	lsls	r2, r3, #24
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	3301      	adds	r3, #1
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	041b      	lsls	r3, r3, #16
 800e544:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	3302      	adds	r3, #2
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800e54e:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	3203      	adds	r2, #3
 800e554:	7812      	ldrb	r2, [r2, #0]
 800e556:	4313      	orrs	r3, r2
}
 800e558:	0018      	movs	r0, r3
 800e55a:	46bd      	mov	sp, r7
 800e55c:	b002      	add	sp, #8
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	0018      	movs	r0, r3
 800e56c:	f7ff ffcc 	bl	800e508 <sensirion_common_bytes_to_uint16_t>
 800e570:	0003      	movs	r3, r0
 800e572:	b21b      	sxth	r3, r3
}
 800e574:	0018      	movs	r0, r3
 800e576:	46bd      	mov	sp, r7
 800e578:	b002      	add	sp, #8
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b086      	sub	sp, #24
 800e580:	af00      	add	r7, sp, #0
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	1dbb      	adds	r3, r7, #6
 800e588:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800e58a:	2316      	movs	r3, #22
 800e58c:	18fb      	adds	r3, r7, r3
 800e58e:	2200      	movs	r2, #0
 800e590:	801a      	strh	r2, [r3, #0]
 800e592:	e00f      	b.n	800e5b4 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800e594:	2016      	movs	r0, #22
 800e596:	183b      	adds	r3, r7, r0
 800e598:	881b      	ldrh	r3, [r3, #0]
 800e59a:	68fa      	ldr	r2, [r7, #12]
 800e59c:	18d2      	adds	r2, r2, r3
 800e59e:	183b      	adds	r3, r7, r0
 800e5a0:	881b      	ldrh	r3, [r3, #0]
 800e5a2:	68b9      	ldr	r1, [r7, #8]
 800e5a4:	18cb      	adds	r3, r1, r3
 800e5a6:	7812      	ldrb	r2, [r2, #0]
 800e5a8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800e5aa:	183b      	adds	r3, r7, r0
 800e5ac:	881a      	ldrh	r2, [r3, #0]
 800e5ae:	183b      	adds	r3, r7, r0
 800e5b0:	3201      	adds	r2, #1
 800e5b2:	801a      	strh	r2, [r3, #0]
 800e5b4:	2316      	movs	r3, #22
 800e5b6:	18fa      	adds	r2, r7, r3
 800e5b8:	1dbb      	adds	r3, r7, #6
 800e5ba:	8812      	ldrh	r2, [r2, #0]
 800e5bc:	881b      	ldrh	r3, [r3, #0]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d3e8      	bcc.n	800e594 <sensirion_common_copy_bytes+0x18>
    }
}
 800e5c2:	46c0      	nop			@ (mov r8, r8)
 800e5c4:	46c0      	nop			@ (mov r8, r8)
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	b006      	add	sp, #24
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	68ba      	ldr	r2, [r7, #8]
 800e5dc:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d113      	bne.n	800e612 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	22fe      	movs	r2, #254	@ 0xfe
 800e5ee:	0592      	lsls	r2, r2, #22
 800e5f0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	4a1a      	ldr	r2, [pc, #104]	@ (800e660 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800e5f6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	4a1a      	ldr	r2, [pc, #104]	@ (800e664 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800e5fc:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	4a19      	ldr	r2, [pc, #100]	@ (800e668 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800e602:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	4a19      	ldr	r2, [pc, #100]	@ (800e66c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800e608:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	4a18      	ldr	r2, [pc, #96]	@ (800e670 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800e60e:	61da      	str	r2, [r3, #28]
 800e610:	e011      	b.n	800e636 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	4a17      	ldr	r2, [pc, #92]	@ (800e674 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800e616:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	4a17      	ldr	r2, [pc, #92]	@ (800e678 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800e61c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	4a16      	ldr	r2, [pc, #88]	@ (800e67c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800e622:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	4a16      	ldr	r2, [pc, #88]	@ (800e680 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800e628:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	4a15      	ldr	r2, [pc, #84]	@ (800e684 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800e62e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	4a15      	ldr	r2, [pc, #84]	@ (800e688 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800e634:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	4a14      	ldr	r2, [pc, #80]	@ (800e68c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800e63a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	4a14      	ldr	r2, [pc, #80]	@ (800e690 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800e640:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	4a12      	ldr	r2, [pc, #72]	@ (800e690 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800e646:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	4a12      	ldr	r2, [pc, #72]	@ (800e694 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800e64c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	0018      	movs	r0, r3
 800e652:	f000 f831 	bl	800e6b8 <GasIndexAlgorithm_reset>
}
 800e656:	46c0      	nop			@ (mov r8, r8)
 800e658:	46bd      	mov	sp, r7
 800e65a:	b004      	add	sp, #16
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	46c0      	nop			@ (mov r8, r8)
 800e660:	00002710 	.word	0x00002710
 800e664:	44340000 	.word	0x44340000
 800e668:	46859800 	.word	0x46859800
 800e66c:	46a05000 	.word	0x46a05000
 800e670:	41f00000 	.word	0x41f00000
 800e674:	42c80000 	.word	0x42c80000
 800e678:	00004e20 	.word	0x00004e20
 800e67c:	43340000 	.word	0x43340000
 800e680:	4528c000 	.word	0x4528c000
 800e684:	45a32000 	.word	0x45a32000
 800e688:	43aa0000 	.word	0x43aa0000
 800e68c:	43660000 	.word	0x43660000
 800e690:	41400000 	.word	0x41400000
 800e694:	42480000 	.word	0x42480000

0800e698 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800e6a2:	22fe      	movs	r2, #254	@ 0xfe
 800e6a4:	0592      	lsls	r2, r2, #22
 800e6a6:	6839      	ldr	r1, [r7, #0]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	0018      	movs	r0, r3
 800e6ac:	f7ff ff8e 	bl	800e5cc <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800e6b0:	46c0      	nop			@ (mov r8, r8)
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	b002      	add	sp, #8
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	0018      	movs	r0, r3
 800e6d6:	f000 f805 	bl	800e6e4 <GasIndexAlgorithm__init_instances>
}
 800e6da:	46c0      	nop			@ (mov r8, r8)
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	b002      	add	sp, #8
 800e6e0:	bd80      	pop	{r7, pc}
	...

0800e6e4 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800e6e4:	b590      	push	{r4, r7, lr}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	0018      	movs	r0, r3
 800e6f0:	f000 f8e8 	bl	800e8c4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	0018      	movs	r0, r3
 800e6f8:	f000 f9a6 	bl	800ea48 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800e6fc:	1c04      	adds	r4, r0, #0
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	0018      	movs	r0, r3
 800e702:	f000 f9ab 	bl	800ea5c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800e706:	1c02      	adds	r2, r0, #0
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	1c21      	adds	r1, r4, #0
 800e70c:	0018      	movs	r0, r3
 800e70e:	f000 fc3b 	bl	800ef88 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	2b01      	cmp	r3, #1
 800e718:	d107      	bne.n	800e72a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800e71a:	23fe      	movs	r3, #254	@ 0xfe
 800e71c:	059b      	lsls	r3, r3, #22
 800e71e:	4a0a      	ldr	r2, [pc, #40]	@ (800e748 <GasIndexAlgorithm__init_instances+0x64>)
 800e720:	490a      	ldr	r1, [pc, #40]	@ (800e74c <GasIndexAlgorithm__init_instances+0x68>)
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f000 fc86 	bl	800f034 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800e728:	e005      	b.n	800e736 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800e72a:	4b09      	ldr	r3, [pc, #36]	@ (800e750 <GasIndexAlgorithm__init_instances+0x6c>)
 800e72c:	4a09      	ldr	r2, [pc, #36]	@ (800e754 <GasIndexAlgorithm__init_instances+0x70>)
 800e72e:	490a      	ldr	r1, [pc, #40]	@ (800e758 <GasIndexAlgorithm__init_instances+0x74>)
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f000 fc7f 	bl	800f034 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	0018      	movs	r0, r3
 800e73a:	f000 fd35 	bl	800f1a8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800e73e:	46c0      	nop			@ (mov r8, r8)
 800e740:	46bd      	mov	sp, r7
 800e742:	b003      	add	sp, #12
 800e744:	bd90      	pop	{r4, r7, pc}
 800e746:	46c0      	nop			@ (mov r8, r8)
 800e748:	bc257a78 	.word	0xbc257a78
 800e74c:	44198000 	.word	0x44198000
 800e750:	42c80000 	.word	0x42c80000
 800e754:	bbd4fdf4 	.word	0xbbd4fdf4
 800e758:	43550000 	.word	0x43550000

0800e75c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800e75c:	b590      	push	{r4, r7, lr}
 800e75e:	b085      	sub	sp, #20
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e76c:	4952      	ldr	r1, [pc, #328]	@ (800e8b8 <GasIndexAlgorithm_process+0x15c>)
 800e76e:	1c18      	adds	r0, r3, #0
 800e770:	f7f1 fee8 	bl	8000544 <__aeabi_fcmple>
 800e774:	1e03      	subs	r3, r0, #0
 800e776:	d00c      	beq.n	800e792 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	1c19      	adds	r1, r3, #0
 800e782:	1c10      	adds	r0, r2, #0
 800e784:	f7f2 f89c 	bl	80008c0 <__aeabi_fadd>
 800e788:	1c03      	adds	r3, r0, #0
 800e78a:	1c1a      	adds	r2, r3, #0
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	631a      	str	r2, [r3, #48]	@ 0x30
 800e790:	e080      	b.n	800e894 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	2b00      	cmp	r3, #0
 800e796:	dd25      	ble.n	800e7e4 <GasIndexAlgorithm_process+0x88>
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	4a48      	ldr	r2, [pc, #288]	@ (800e8bc <GasIndexAlgorithm_process+0x160>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	dc21      	bgt.n	800e7e4 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	68ba      	ldr	r2, [r7, #8]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	dc04      	bgt.n	800e7b4 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	60bb      	str	r3, [r7, #8]
 800e7b2:	e00d      	b.n	800e7d0 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	4a41      	ldr	r2, [pc, #260]	@ (800e8c0 <GasIndexAlgorithm_process+0x164>)
 800e7ba:	4694      	mov	ip, r2
 800e7bc:	4463      	add	r3, ip
 800e7be:	68ba      	ldr	r2, [r7, #8]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	dd05      	ble.n	800e7d0 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	4a3d      	ldr	r2, [pc, #244]	@ (800e8c0 <GasIndexAlgorithm_process+0x164>)
 800e7ca:	4694      	mov	ip, r2
 800e7cc:	4463      	add	r3, ip
 800e7ce:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	68db      	ldr	r3, [r3, #12]
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	1ad3      	subs	r3, r2, r3
 800e7d8:	0018      	movs	r0, r3
 800e7da:	f7f2 fef9 	bl	80015d0 <__aeabi_i2f>
 800e7de:	1c02      	adds	r2, r0, #0
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d005      	beq.n	800e7f8 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	0018      	movs	r0, r3
 800e7f0:	f000 f945 	bl	800ea7e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800e7f4:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800e7f6:	d014      	beq.n	800e822 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	1c11      	adds	r1, r2, #0
 800e800:	0018      	movs	r0, r3
 800e802:	f000 fbd1 	bl	800efa8 <GasIndexAlgorithm__mox_model__process>
 800e806:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	1c11      	adds	r1, r2, #0
 800e814:	0018      	movs	r0, r3
 800e816:	f000 fc25 	bl	800f064 <GasIndexAlgorithm__sigmoid_scaled__process>
 800e81a:	1c02      	adds	r2, r0, #0
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	639a      	str	r2, [r3, #56]	@ 0x38
 800e820:	e003      	b.n	800e82a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	689a      	ldr	r2, [r3, #8]
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	1c11      	adds	r1, r2, #0
 800e832:	0018      	movs	r0, r3
 800e834:	f000 fcec 	bl	800f210 <GasIndexAlgorithm__adaptive_lowpass__process>
 800e838:	1c02      	adds	r2, r0, #0
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e842:	21fc      	movs	r1, #252	@ 0xfc
 800e844:	0589      	lsls	r1, r1, #22
 800e846:	1c18      	adds	r0, r3, #0
 800e848:	f7f1 fe72 	bl	8000530 <__aeabi_fcmplt>
 800e84c:	1e03      	subs	r3, r0, #0
 800e84e:	d003      	beq.n	800e858 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	22fc      	movs	r2, #252	@ 0xfc
 800e854:	0592      	lsls	r2, r2, #22
 800e856:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e85c:	2100      	movs	r1, #0
 800e85e:	1c18      	adds	r0, r3, #0
 800e860:	f7f1 fe7a 	bl	8000558 <__aeabi_fcmpgt>
 800e864:	1e03      	subs	r3, r0, #0
 800e866:	d015      	beq.n	800e894 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	1c11      	adds	r1, r2, #0
 800e870:	0018      	movs	r0, r3
 800e872:	f000 fa4f 	bl	800ed14 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	0018      	movs	r0, r3
 800e87a:	f000 f8e5 	bl	800ea48 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800e87e:	1c04      	adds	r4, r0, #0
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	0018      	movs	r0, r3
 800e884:	f000 f8ea 	bl	800ea5c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800e888:	1c02      	adds	r2, r0, #0
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	1c21      	adds	r1, r4, #0
 800e88e:	0018      	movs	r0, r3
 800e890:	f000 fb7a 	bl	800ef88 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e898:	21fc      	movs	r1, #252	@ 0xfc
 800e89a:	0589      	lsls	r1, r1, #22
 800e89c:	1c18      	adds	r0, r3, #0
 800e89e:	f7f2 f80f 	bl	80008c0 <__aeabi_fadd>
 800e8a2:	1c03      	adds	r3, r0, #0
 800e8a4:	1c18      	adds	r0, r3, #0
 800e8a6:	f7f2 fe73 	bl	8001590 <__aeabi_f2iz>
 800e8aa:	0002      	movs	r2, r0
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	601a      	str	r2, [r3, #0]
    return;
 800e8b0:	46c0      	nop			@ (mov r8, r8)
}
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	b005      	add	sp, #20
 800e8b6:	bd90      	pop	{r4, r7, pc}
 800e8b8:	42340000 	.word	0x42340000
 800e8bc:	0000fde7 	.word	0x0000fde7
 800e8c0:	00007fff 	.word	0x00007fff

0800e8c4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800e8c4:	b5b0      	push	{r4, r5, r7, lr}
 800e8c6:	b082      	sub	sp, #8
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	223c      	movs	r2, #60	@ 0x3c
 800e8d0:	2100      	movs	r1, #0
 800e8d2:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	4952      	ldr	r1, [pc, #328]	@ (800ea38 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800e8ee:	1c18      	adds	r0, r3, #0
 800e8f0:	f7f2 f970 	bl	8000bd4 <__aeabi_fdiv>
 800e8f4:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800e8f6:	2188      	movs	r1, #136	@ 0x88
 800e8f8:	05c9      	lsls	r1, r1, #23
 800e8fa:	1c18      	adds	r0, r3, #0
 800e8fc:	f7f2 fb50 	bl	8000fa0 <__aeabi_fmul>
 800e900:	1c03      	adds	r3, r0, #0
 800e902:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	494a      	ldr	r1, [pc, #296]	@ (800ea38 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800e90e:	1c18      	adds	r0, r3, #0
 800e910:	f7f2 f960 	bl	8000bd4 <__aeabi_fdiv>
 800e914:	1c03      	adds	r3, r0, #0
 800e916:	1c19      	adds	r1, r3, #0
 800e918:	1c20      	adds	r0, r4, #0
 800e91a:	f7f1 ffd1 	bl	80008c0 <__aeabi_fadd>
 800e91e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800e920:	1c19      	adds	r1, r3, #0
 800e922:	1c28      	adds	r0, r5, #0
 800e924:	f7f2 f956 	bl	8000bd4 <__aeabi_fdiv>
 800e928:	1c03      	adds	r3, r0, #0
 800e92a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	4940      	ldr	r1, [pc, #256]	@ (800ea38 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800e936:	1c18      	adds	r0, r3, #0
 800e938:	f7f2 f94c 	bl	8000bd4 <__aeabi_fdiv>
 800e93c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800e93e:	2185      	movs	r1, #133	@ 0x85
 800e940:	05c9      	lsls	r1, r1, #23
 800e942:	1c18      	adds	r0, r3, #0
 800e944:	f7f2 fb2c 	bl	8000fa0 <__aeabi_fmul>
 800e948:	1c03      	adds	r3, r0, #0
 800e94a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	4938      	ldr	r1, [pc, #224]	@ (800ea38 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800e956:	1c18      	adds	r0, r3, #0
 800e958:	f7f2 f93c 	bl	8000bd4 <__aeabi_fdiv>
 800e95c:	1c03      	adds	r3, r0, #0
 800e95e:	1c19      	adds	r1, r3, #0
 800e960:	1c20      	adds	r0, r4, #0
 800e962:	f7f1 ffad 	bl	80008c0 <__aeabi_fadd>
 800e966:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800e968:	1c19      	adds	r1, r3, #0
 800e96a:	1c28      	adds	r0, r5, #0
 800e96c:	f7f2 f932 	bl	8000bd4 <__aeabi_fdiv>
 800e970:	1c03      	adds	r3, r0, #0
 800e972:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d118      	bne.n	800e9b2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800e984:	2188      	movs	r1, #136	@ 0x88
 800e986:	05c9      	lsls	r1, r1, #23
 800e988:	1c18      	adds	r0, r3, #0
 800e98a:	f7f2 fb09 	bl	8000fa0 <__aeabi_fmul>
 800e98e:	1c03      	adds	r3, r0, #0
 800e990:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800e996:	4929      	ldr	r1, [pc, #164]	@ (800ea3c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800e998:	1c18      	adds	r0, r3, #0
 800e99a:	f7f1 ff91 	bl	80008c0 <__aeabi_fadd>
 800e99e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800e9a0:	1c19      	adds	r1, r3, #0
 800e9a2:	1c20      	adds	r0, r4, #0
 800e9a4:	f7f2 f916 	bl	8000bd4 <__aeabi_fdiv>
 800e9a8:	1c03      	adds	r3, r0, #0
 800e9aa:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	655a      	str	r2, [r3, #84]	@ 0x54
 800e9b0:	e017      	b.n	800e9e2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800e9b6:	2188      	movs	r1, #136	@ 0x88
 800e9b8:	05c9      	lsls	r1, r1, #23
 800e9ba:	1c18      	adds	r0, r3, #0
 800e9bc:	f7f2 faf0 	bl	8000fa0 <__aeabi_fmul>
 800e9c0:	1c03      	adds	r3, r0, #0
 800e9c2:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800e9c8:	491d      	ldr	r1, [pc, #116]	@ (800ea40 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800e9ca:	1c18      	adds	r0, r3, #0
 800e9cc:	f7f1 ff78 	bl	80008c0 <__aeabi_fadd>
 800e9d0:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800e9d2:	1c19      	adds	r1, r3, #0
 800e9d4:	1c20      	adds	r0, r4, #0
 800e9d6:	f7f2 f8fd 	bl	8000bd4 <__aeabi_fdiv>
 800e9da:	1c03      	adds	r3, r0, #0
 800e9dc:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800e9e6:	2185      	movs	r1, #133	@ 0x85
 800e9e8:	05c9      	lsls	r1, r1, #23
 800e9ea:	1c18      	adds	r0, r3, #0
 800e9ec:	f7f2 fad8 	bl	8000fa0 <__aeabi_fmul>
 800e9f0:	1c03      	adds	r3, r0, #0
 800e9f2:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	4912      	ldr	r1, [pc, #72]	@ (800ea44 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800e9fa:	1c18      	adds	r0, r3, #0
 800e9fc:	f7f1 ff60 	bl	80008c0 <__aeabi_fadd>
 800ea00:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800ea02:	1c19      	adds	r1, r3, #0
 800ea04:	1c20      	adds	r0, r4, #0
 800ea06:	f7f2 f8e5 	bl	8000bd4 <__aeabi_fdiv>
 800ea0a:	1c03      	adds	r3, r0, #0
 800ea0c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2200      	movs	r2, #0
 800ea16:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2200      	movs	r2, #0
 800ea22:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2200      	movs	r2, #0
 800ea28:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800ea30:	46c0      	nop			@ (mov r8, r8)
 800ea32:	46bd      	mov	sp, r7
 800ea34:	b002      	add	sp, #8
 800ea36:	bdb0      	pop	{r4, r5, r7, pc}
 800ea38:	45610000 	.word	0x45610000
 800ea3c:	44960000 	.word	0x44960000
 800ea40:	41a00000 	.word	0x41a00000
 800ea44:	451c4000 	.word	0x451c4000

0800ea48 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800ea54:	1c18      	adds	r0, r3, #0
 800ea56:	46bd      	mov	sp, r7
 800ea58:	b002      	add	sp, #8
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b082      	sub	sp, #8
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800ea6c:	1c19      	adds	r1, r3, #0
 800ea6e:	1c10      	adds	r0, r2, #0
 800ea70:	f7f1 ff26 	bl	80008c0 <__aeabi_fadd>
 800ea74:	1c03      	adds	r3, r0, #0
}
 800ea76:	1c18      	adds	r0, r3, #0
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	b002      	add	sp, #8
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b082      	sub	sp, #8
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	223c      	movs	r2, #60	@ 0x3c
 800ea8a:	5c9b      	ldrb	r3, [r3, r2]
}
 800ea8c:	0018      	movs	r0, r3
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	b002      	add	sp, #8
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800ea94:	b5b0      	push	{r4, r5, r7, lr}
 800ea96:	b08c      	sub	sp, #48	@ 0x30
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800eaa0:	1c19      	adds	r1, r3, #0
 800eaa2:	4895      	ldr	r0, [pc, #596]	@ (800ecf8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800eaa4:	f7f2 fbba 	bl	800121c <__aeabi_fsub>
 800eaa8:	1c03      	adds	r3, r0, #0
 800eaaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eab0:	1c19      	adds	r1, r3, #0
 800eab2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eab4:	f7f1 fd50 	bl	8000558 <__aeabi_fcmpgt>
 800eab8:	1e03      	subs	r3, r0, #0
 800eaba:	d00b      	beq.n	800ead4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800eac4:	1c19      	adds	r1, r3, #0
 800eac6:	1c10      	adds	r0, r2, #0
 800eac8:	f7f1 fefa 	bl	80008c0 <__aeabi_fadd>
 800eacc:	1c03      	adds	r3, r0, #0
 800eace:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ead8:	1c19      	adds	r1, r3, #0
 800eada:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eadc:	f7f1 fd3c 	bl	8000558 <__aeabi_fcmpgt>
 800eae0:	1e03      	subs	r3, r0, #0
 800eae2:	d00b      	beq.n	800eafc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800eaec:	1c19      	adds	r1, r3, #0
 800eaee:	1c10      	adds	r0, r2, #0
 800eaf0:	f7f1 fee6 	bl	80008c0 <__aeabi_fadd>
 800eaf4:	1c03      	adds	r3, r0, #0
 800eaf6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6959      	ldr	r1, [r3, #20]
 800eb00:	4a7e      	ldr	r2, [pc, #504]	@ (800ecfc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	0018      	movs	r0, r3
 800eb06:	f000 f9f1 	bl	800eeec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	1c11      	adds	r1, r2, #0
 800eb12:	0018      	movs	r0, r3
 800eb14:	f000 f9fa 	bl	800ef0c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800eb18:	1c03      	adds	r3, r0, #0
 800eb1a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800eb28:	1c19      	adds	r1, r3, #0
 800eb2a:	1c10      	adds	r0, r2, #0
 800eb2c:	f7f2 fb76 	bl	800121c <__aeabi_fsub>
 800eb30:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800eb32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb34:	1c18      	adds	r0, r3, #0
 800eb36:	f7f2 fa33 	bl	8000fa0 <__aeabi_fmul>
 800eb3a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800eb3c:	1c19      	adds	r1, r3, #0
 800eb3e:	1c20      	adds	r0, r4, #0
 800eb40:	f7f1 febe 	bl	80008c0 <__aeabi_fadd>
 800eb44:	1c03      	adds	r3, r0, #0
 800eb46:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800eb50:	1c19      	adds	r1, r3, #0
 800eb52:	486b      	ldr	r0, [pc, #428]	@ (800ed00 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800eb54:	f7f2 fb62 	bl	800121c <__aeabi_fsub>
 800eb58:	1c03      	adds	r3, r0, #0
 800eb5a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	1c11      	adds	r1, r2, #0
 800eb64:	0018      	movs	r0, r3
 800eb66:	f000 f9d1 	bl	800ef0c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800eb6a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800eb6c:	1c19      	adds	r1, r3, #0
 800eb6e:	1c28      	adds	r0, r5, #0
 800eb70:	f7f2 fa16 	bl	8000fa0 <__aeabi_fmul>
 800eb74:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800eb76:	1c19      	adds	r1, r3, #0
 800eb78:	1c20      	adds	r0, r4, #0
 800eb7a:	f7f1 fea1 	bl	80008c0 <__aeabi_fadd>
 800eb7e:	1c03      	adds	r3, r0, #0
 800eb80:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800eb82:	4a60      	ldr	r2, [pc, #384]	@ (800ed04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800eb84:	6a39      	ldr	r1, [r7, #32]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	0018      	movs	r0, r3
 800eb8a:	f000 f9af 	bl	800eeec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	1c11      	adds	r1, r2, #0
 800eb96:	0018      	movs	r0, r3
 800eb98:	f000 f9b8 	bl	800ef0c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800eb9c:	1c03      	adds	r3, r0, #0
 800eb9e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800eba0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eba2:	69f8      	ldr	r0, [r7, #28]
 800eba4:	f7f2 f9fc 	bl	8000fa0 <__aeabi_fmul>
 800eba8:	1c03      	adds	r3, r0, #0
 800ebaa:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6999      	ldr	r1, [r3, #24]
 800ebb4:	4a51      	ldr	r2, [pc, #324]	@ (800ecfc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	0018      	movs	r0, r3
 800ebba:	f000 f997 	bl	800eeec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	1c11      	adds	r1, r2, #0
 800ebc6:	0018      	movs	r0, r3
 800ebc8:	f000 f9a0 	bl	800ef0c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ebcc:	1c03      	adds	r3, r0, #0
 800ebce:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ebdc:	1c19      	adds	r1, r3, #0
 800ebde:	1c10      	adds	r0, r2, #0
 800ebe0:	f7f2 fb1c 	bl	800121c <__aeabi_fsub>
 800ebe4:	1c03      	adds	r3, r0, #0
 800ebe6:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800ebe8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ebea:	69b8      	ldr	r0, [r7, #24]
 800ebec:	f7f2 fb16 	bl	800121c <__aeabi_fsub>
 800ebf0:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ebf2:	1c19      	adds	r1, r3, #0
 800ebf4:	1c28      	adds	r0, r5, #0
 800ebf6:	f7f2 f9d3 	bl	8000fa0 <__aeabi_fmul>
 800ebfa:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800ebfc:	1c19      	adds	r1, r3, #0
 800ebfe:	1c20      	adds	r0, r4, #0
 800ec00:	f7f1 fe5e 	bl	80008c0 <__aeabi_fadd>
 800ec04:	1c03      	adds	r3, r0, #0
 800ec06:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ec10:	1c19      	adds	r1, r3, #0
 800ec12:	483b      	ldr	r0, [pc, #236]	@ (800ed00 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ec14:	f7f2 fb02 	bl	800121c <__aeabi_fsub>
 800ec18:	1c03      	adds	r3, r0, #0
 800ec1a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	1c11      	adds	r1, r2, #0
 800ec24:	0018      	movs	r0, r3
 800ec26:	f000 f971 	bl	800ef0c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ec2a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800ec2c:	1c19      	adds	r1, r3, #0
 800ec2e:	1c28      	adds	r0, r5, #0
 800ec30:	f7f2 f9b6 	bl	8000fa0 <__aeabi_fmul>
 800ec34:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800ec36:	1c19      	adds	r1, r3, #0
 800ec38:	1c20      	adds	r0, r4, #0
 800ec3a:	f7f1 fe41 	bl	80008c0 <__aeabi_fadd>
 800ec3e:	1c03      	adds	r3, r0, #0
 800ec40:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ec42:	4a30      	ldr	r2, [pc, #192]	@ (800ed04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ec44:	6939      	ldr	r1, [r7, #16]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	0018      	movs	r0, r3
 800ec4a:	f000 f94f 	bl	800eeec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	1c11      	adds	r1, r2, #0
 800ec56:	0018      	movs	r0, r3
 800ec58:	f000 f958 	bl	800ef0c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ec5c:	1c03      	adds	r3, r0, #0
 800ec5e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800ec60:	6979      	ldr	r1, [r7, #20]
 800ec62:	68f8      	ldr	r0, [r7, #12]
 800ec64:	f7f2 f99c 	bl	8000fa0 <__aeabi_fmul>
 800ec68:	1c03      	adds	r3, r0, #0
 800ec6a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	4923      	ldr	r1, [pc, #140]	@ (800ed08 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800ec7a:	1c18      	adds	r0, r3, #0
 800ec7c:	f7f1 ffaa 	bl	8000bd4 <__aeabi_fdiv>
 800ec80:	1c03      	adds	r3, r0, #0
 800ec82:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800ec84:	69f9      	ldr	r1, [r7, #28]
 800ec86:	20fe      	movs	r0, #254	@ 0xfe
 800ec88:	0580      	lsls	r0, r0, #22
 800ec8a:	f7f2 fac7 	bl	800121c <__aeabi_fsub>
 800ec8e:	1c03      	adds	r3, r0, #0
 800ec90:	491e      	ldr	r1, [pc, #120]	@ (800ed0c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800ec92:	1c18      	adds	r0, r3, #0
 800ec94:	f7f2 f984 	bl	8000fa0 <__aeabi_fmul>
 800ec98:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800ec9a:	491d      	ldr	r1, [pc, #116]	@ (800ed10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800ec9c:	1c18      	adds	r0, r3, #0
 800ec9e:	f7f2 fabd 	bl	800121c <__aeabi_fsub>
 800eca2:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800eca4:	1c19      	adds	r1, r3, #0
 800eca6:	1c28      	adds	r0, r5, #0
 800eca8:	f7f2 f97a 	bl	8000fa0 <__aeabi_fmul>
 800ecac:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ecae:	1c19      	adds	r1, r3, #0
 800ecb0:	1c20      	adds	r0, r4, #0
 800ecb2:	f7f1 fe05 	bl	80008c0 <__aeabi_fadd>
 800ecb6:	1c03      	adds	r3, r0, #0
 800ecb8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	1c18      	adds	r0, r3, #0
 800ecc6:	f7f1 fc33 	bl	8000530 <__aeabi_fcmplt>
 800ecca:	1e03      	subs	r3, r0, #0
 800eccc:	d002      	beq.n	800ecd4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ecdc:	1c19      	adds	r1, r3, #0
 800ecde:	1c10      	adds	r0, r2, #0
 800ece0:	f7f1 fc3a 	bl	8000558 <__aeabi_fcmpgt>
 800ece4:	1e03      	subs	r3, r0, #0
 800ece6:	d100      	bne.n	800ecea <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800ece8:	e002      	b.n	800ecf0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2200      	movs	r2, #0
 800ecee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ecf0:	46c0      	nop			@ (mov r8, r8)
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	b00c      	add	sp, #48	@ 0x30
 800ecf6:	bdb0      	pop	{r4, r5, r7, pc}
 800ecf8:	46fffe00 	.word	0x46fffe00
 800ecfc:	3c23d70a 	.word	0x3c23d70a
 800ed00:	43ff0000 	.word	0x43ff0000
 800ed04:	3db851ec 	.word	0x3db851ec
 800ed08:	42700000 	.word	0x42700000
 800ed0c:	3fa66666 	.word	0x3fa66666
 800ed10:	3e99999a 	.word	0x3e99999a

0800ed14 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800ed14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed16:	b087      	sub	sp, #28
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	223c      	movs	r2, #60	@ 0x3c
 800ed22:	5c9b      	ldrb	r3, [r3, r2]
 800ed24:	2201      	movs	r2, #1
 800ed26:	4053      	eors	r3, r2
 800ed28:	b2db      	uxtb	r3, r3
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00a      	beq.n	800ed44 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	223c      	movs	r2, #60	@ 0x3c
 800ed32:	2101      	movs	r1, #1
 800ed34:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	683a      	ldr	r2, [r7, #0]
 800ed3a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800ed42:	e0c8      	b.n	800eed6 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed48:	4965      	ldr	r1, [pc, #404]	@ (800eee0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800ed4a:	1c18      	adds	r0, r3, #0
 800ed4c:	f7f1 fc0e 	bl	800056c <__aeabi_fcmpge>
 800ed50:	1e03      	subs	r3, r0, #0
 800ed52:	d107      	bne.n	800ed64 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ed58:	4962      	ldr	r1, [pc, #392]	@ (800eee4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800ed5a:	1c18      	adds	r0, r3, #0
 800ed5c:	f7f1 fbf2 	bl	8000544 <__aeabi_fcmple>
 800ed60:	1e03      	subs	r3, r0, #0
 800ed62:	d00e      	beq.n	800ed82 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ed6c:	1c19      	adds	r1, r3, #0
 800ed6e:	1c10      	adds	r0, r2, #0
 800ed70:	f7f1 fda6 	bl	80008c0 <__aeabi_fadd>
 800ed74:	1c03      	adds	r3, r0, #0
 800ed76:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed86:	1c19      	adds	r1, r3, #0
 800ed88:	6838      	ldr	r0, [r7, #0]
 800ed8a:	f7f2 fa47 	bl	800121c <__aeabi_fsub>
 800ed8e:	1c03      	adds	r3, r0, #0
 800ed90:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	0018      	movs	r0, r3
 800ed96:	f7ff fe7d 	bl	800ea94 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed9e:	1c19      	adds	r1, r3, #0
 800eda0:	6838      	ldr	r0, [r7, #0]
 800eda2:	f7f2 fa3b 	bl	800121c <__aeabi_fsub>
 800eda6:	1c03      	adds	r3, r0, #0
 800eda8:	2185      	movs	r1, #133	@ 0x85
 800edaa:	05c9      	lsls	r1, r1, #23
 800edac:	1c18      	adds	r0, r3, #0
 800edae:	f7f1 ff11 	bl	8000bd4 <__aeabi_fdiv>
 800edb2:	1c03      	adds	r3, r0, #0
 800edb4:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800edb6:	2100      	movs	r1, #0
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f7f1 fbb9 	bl	8000530 <__aeabi_fcmplt>
 800edbe:	1e03      	subs	r3, r0, #0
 800edc0:	d008      	beq.n	800edd4 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800edc6:	68f9      	ldr	r1, [r7, #12]
 800edc8:	1c18      	adds	r0, r3, #0
 800edca:	f7f2 fa27 	bl	800121c <__aeabi_fsub>
 800edce:	1c03      	adds	r3, r0, #0
 800edd0:	617b      	str	r3, [r7, #20]
 800edd2:	e007      	b.n	800ede4 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800edd8:	1c19      	adds	r1, r3, #0
 800edda:	68f8      	ldr	r0, [r7, #12]
 800eddc:	f7f1 fd70 	bl	80008c0 <__aeabi_fadd>
 800ede0:	1c03      	adds	r3, r0, #0
 800ede2:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800ede4:	23fe      	movs	r3, #254	@ 0xfe
 800ede6:	059b      	lsls	r3, r3, #22
 800ede8:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800edea:	493f      	ldr	r1, [pc, #252]	@ (800eee8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800edec:	6978      	ldr	r0, [r7, #20]
 800edee:	f7f1 fbb3 	bl	8000558 <__aeabi_fcmpgt>
 800edf2:	1e03      	subs	r3, r0, #0
 800edf4:	d010      	beq.n	800ee18 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800edf6:	493c      	ldr	r1, [pc, #240]	@ (800eee8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800edf8:	6978      	ldr	r0, [r7, #20]
 800edfa:	f7f1 feeb 	bl	8000bd4 <__aeabi_fdiv>
 800edfe:	1c03      	adds	r3, r0, #0
 800ee00:	1c1c      	adds	r4, r3, #0
 800ee02:	4939      	ldr	r1, [pc, #228]	@ (800eee8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ee04:	6978      	ldr	r0, [r7, #20]
 800ee06:	f7f1 fee5 	bl	8000bd4 <__aeabi_fdiv>
 800ee0a:	1c03      	adds	r3, r0, #0
 800ee0c:	1c19      	adds	r1, r3, #0
 800ee0e:	1c20      	adds	r0, r4, #0
 800ee10:	f7f2 f8c6 	bl	8000fa0 <__aeabi_fmul>
 800ee14:	1c03      	adds	r3, r0, #0
 800ee16:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800ee1c:	1c19      	adds	r1, r3, #0
 800ee1e:	2085      	movs	r0, #133	@ 0x85
 800ee20:	05c0      	lsls	r0, r0, #23
 800ee22:	f7f2 f9fb 	bl	800121c <__aeabi_fsub>
 800ee26:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800ee28:	6939      	ldr	r1, [r7, #16]
 800ee2a:	1c18      	adds	r0, r3, #0
 800ee2c:	f7f2 f8b8 	bl	8000fa0 <__aeabi_fmul>
 800ee30:	1c03      	adds	r3, r0, #0
 800ee32:	1c18      	adds	r0, r3, #0
 800ee34:	f018 fcfa 	bl	802782c <sqrtf>
 800ee38:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ee42:	2185      	movs	r1, #133	@ 0x85
 800ee44:	05c9      	lsls	r1, r1, #23
 800ee46:	6938      	ldr	r0, [r7, #16]
 800ee48:	f7f2 f8aa 	bl	8000fa0 <__aeabi_fmul>
 800ee4c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800ee4e:	1c19      	adds	r1, r3, #0
 800ee50:	1c28      	adds	r0, r5, #0
 800ee52:	f7f1 febf 	bl	8000bd4 <__aeabi_fdiv>
 800ee56:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800ee58:	1c19      	adds	r1, r3, #0
 800ee5a:	1c20      	adds	r0, r4, #0
 800ee5c:	f7f2 f8a0 	bl	8000fa0 <__aeabi_fmul>
 800ee60:	1c03      	adds	r3, r0, #0
 800ee62:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee68:	68f9      	ldr	r1, [r7, #12]
 800ee6a:	1c18      	adds	r0, r3, #0
 800ee6c:	f7f2 f898 	bl	8000fa0 <__aeabi_fmul>
 800ee70:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800ee72:	6939      	ldr	r1, [r7, #16]
 800ee74:	1c18      	adds	r0, r3, #0
 800ee76:	f7f1 fead 	bl	8000bd4 <__aeabi_fdiv>
 800ee7a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800ee7c:	68f9      	ldr	r1, [r7, #12]
 800ee7e:	1c18      	adds	r0, r3, #0
 800ee80:	f7f2 f88e 	bl	8000fa0 <__aeabi_fmul>
 800ee84:	1c03      	adds	r3, r0, #0
             sqrtf(
 800ee86:	1c19      	adds	r1, r3, #0
 800ee88:	1c20      	adds	r0, r4, #0
 800ee8a:	f7f1 fd19 	bl	80008c0 <__aeabi_fadd>
 800ee8e:	1c03      	adds	r3, r0, #0
 800ee90:	1c18      	adds	r0, r3, #0
 800ee92:	f018 fccb 	bl	802782c <sqrtf>
 800ee96:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800ee98:	1c19      	adds	r1, r3, #0
 800ee9a:	1c30      	adds	r0, r6, #0
 800ee9c:	f7f2 f880 	bl	8000fa0 <__aeabi_fmul>
 800eea0:	1c03      	adds	r3, r0, #0
 800eea2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eeb0:	68f9      	ldr	r1, [r7, #12]
 800eeb2:	1c18      	adds	r0, r3, #0
 800eeb4:	f7f2 f874 	bl	8000fa0 <__aeabi_fmul>
 800eeb8:	1c03      	adds	r3, r0, #0
 800eeba:	2182      	movs	r1, #130	@ 0x82
 800eebc:	05c9      	lsls	r1, r1, #23
 800eebe:	1c18      	adds	r0, r3, #0
 800eec0:	f7f1 fe88 	bl	8000bd4 <__aeabi_fdiv>
 800eec4:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800eec6:	1c19      	adds	r1, r3, #0
 800eec8:	1c20      	adds	r0, r4, #0
 800eeca:	f7f1 fcf9 	bl	80008c0 <__aeabi_fadd>
 800eece:	1c03      	adds	r3, r0, #0
 800eed0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800eed6:	46c0      	nop			@ (mov r8, r8)
 800eed8:	46bd      	mov	sp, r7
 800eeda:	b007      	add	sp, #28
 800eedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eede:	46c0      	nop			@ (mov r8, r8)
 800eee0:	42c80000 	.word	0x42c80000
 800eee4:	c2c80000 	.word	0xc2c80000
 800eee8:	44b40000 	.word	0x44b40000

0800eeec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	60b9      	str	r1, [r7, #8]
 800eef6:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	687a      	ldr	r2, [r7, #4]
 800eefc:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	68ba      	ldr	r2, [r7, #8]
 800ef02:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ef04:	46c0      	nop			@ (mov r8, r8)
 800ef06:	46bd      	mov	sp, r7
 800ef08:	b004      	add	sp, #16
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800ef0c:	b590      	push	{r4, r7, lr}
 800ef0e:	b085      	sub	sp, #20
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef1e:	1c19      	adds	r1, r3, #0
 800ef20:	6838      	ldr	r0, [r7, #0]
 800ef22:	f7f2 f97b 	bl	800121c <__aeabi_fsub>
 800ef26:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ef28:	1c19      	adds	r1, r3, #0
 800ef2a:	1c20      	adds	r0, r4, #0
 800ef2c:	f7f2 f838 	bl	8000fa0 <__aeabi_fmul>
 800ef30:	1c03      	adds	r3, r0, #0
 800ef32:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800ef34:	4912      	ldr	r1, [pc, #72]	@ (800ef80 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800ef36:	68f8      	ldr	r0, [r7, #12]
 800ef38:	f7f1 fafa 	bl	8000530 <__aeabi_fcmplt>
 800ef3c:	1e03      	subs	r3, r0, #0
 800ef3e:	d002      	beq.n	800ef46 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800ef40:	23fe      	movs	r3, #254	@ 0xfe
 800ef42:	059b      	lsls	r3, r3, #22
 800ef44:	e018      	b.n	800ef78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800ef46:	490f      	ldr	r1, [pc, #60]	@ (800ef84 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f7f1 fb05 	bl	8000558 <__aeabi_fcmpgt>
 800ef4e:	1e03      	subs	r3, r0, #0
 800ef50:	d001      	beq.n	800ef56 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800ef52:	2300      	movs	r3, #0
 800ef54:	e010      	b.n	800ef78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	1c18      	adds	r0, r3, #0
 800ef5a:	f018 fc3f 	bl	80277dc <expf>
 800ef5e:	1c03      	adds	r3, r0, #0
 800ef60:	21fe      	movs	r1, #254	@ 0xfe
 800ef62:	0589      	lsls	r1, r1, #22
 800ef64:	1c18      	adds	r0, r3, #0
 800ef66:	f7f1 fcab 	bl	80008c0 <__aeabi_fadd>
 800ef6a:	1c03      	adds	r3, r0, #0
 800ef6c:	1c19      	adds	r1, r3, #0
 800ef6e:	20fe      	movs	r0, #254	@ 0xfe
 800ef70:	0580      	lsls	r0, r0, #22
 800ef72:	f7f1 fe2f 	bl	8000bd4 <__aeabi_fdiv>
 800ef76:	1c03      	adds	r3, r0, #0
    }
}
 800ef78:	1c18      	adds	r0, r3, #0
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	b005      	add	sp, #20
 800ef7e:	bd90      	pop	{r4, r7, pc}
 800ef80:	c2480000 	.word	0xc2480000
 800ef84:	42480000 	.word	0x42480000

0800ef88 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	60f8      	str	r0, [r7, #12]
 800ef90:	60b9      	str	r1, [r7, #8]
 800ef92:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	68ba      	ldr	r2, [r7, #8]
 800ef98:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800efa0:	46c0      	nop			@ (mov r8, r8)
 800efa2:	46bd      	mov	sp, r7
 800efa4:	b004      	add	sp, #16
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800efa8:	b590      	push	{r4, r7, lr}
 800efaa:	b083      	sub	sp, #12
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d114      	bne.n	800efe4 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800efbe:	1c19      	adds	r1, r3, #0
 800efc0:	6838      	ldr	r0, [r7, #0]
 800efc2:	f7f2 f92b 	bl	800121c <__aeabi_fsub>
 800efc6:	1c03      	adds	r3, r0, #0
 800efc8:	4918      	ldr	r1, [pc, #96]	@ (800f02c <GasIndexAlgorithm__mox_model__process+0x84>)
 800efca:	1c18      	adds	r0, r3, #0
 800efcc:	f7f1 fe02 	bl	8000bd4 <__aeabi_fdiv>
 800efd0:	1c03      	adds	r3, r0, #0
 800efd2:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800efd8:	1c19      	adds	r1, r3, #0
 800efda:	1c10      	adds	r0, r2, #0
 800efdc:	f7f1 ffe0 	bl	8000fa0 <__aeabi_fmul>
 800efe0:	1c03      	adds	r3, r0, #0
 800efe2:	e01f      	b.n	800f024 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800efe8:	1c19      	adds	r1, r3, #0
 800efea:	6838      	ldr	r0, [r7, #0]
 800efec:	f7f2 f916 	bl	800121c <__aeabi_fsub>
 800eff0:	1c03      	adds	r3, r0, #0
 800eff2:	1c1a      	adds	r2, r3, #0
 800eff4:	2380      	movs	r3, #128	@ 0x80
 800eff6:	061b      	lsls	r3, r3, #24
 800eff8:	4053      	eors	r3, r2
 800effa:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f000:	490b      	ldr	r1, [pc, #44]	@ (800f030 <GasIndexAlgorithm__mox_model__process+0x88>)
 800f002:	1c18      	adds	r0, r3, #0
 800f004:	f7f1 fc5c 	bl	80008c0 <__aeabi_fadd>
 800f008:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800f00a:	1c19      	adds	r1, r3, #0
 800f00c:	1c20      	adds	r0, r4, #0
 800f00e:	f7f1 fde1 	bl	8000bd4 <__aeabi_fdiv>
 800f012:	1c03      	adds	r3, r0, #0
 800f014:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800f01a:	1c19      	adds	r1, r3, #0
 800f01c:	1c10      	adds	r0, r2, #0
 800f01e:	f7f1 ffbf 	bl	8000fa0 <__aeabi_fmul>
 800f022:	1c03      	adds	r3, r0, #0
    }
}
 800f024:	1c18      	adds	r0, r3, #0
 800f026:	46bd      	mov	sp, r7
 800f028:	b003      	add	sp, #12
 800f02a:	bd90      	pop	{r4, r7, pc}
 800f02c:	44fa0000 	.word	0x44fa0000
 800f030:	435c0000 	.word	0x435c0000

0800f034 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800f034:	b580      	push	{r7, lr}
 800f036:	b084      	sub	sp, #16
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	607a      	str	r2, [r7, #4]
 800f040:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2180      	movs	r1, #128	@ 0x80
 800f046:	687a      	ldr	r2, [r7, #4]
 800f048:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2184      	movs	r1, #132	@ 0x84
 800f04e:	68ba      	ldr	r2, [r7, #8]
 800f050:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2188      	movs	r1, #136	@ 0x88
 800f056:	683a      	ldr	r2, [r7, #0]
 800f058:	505a      	str	r2, [r3, r1]
}
 800f05a:	46c0      	nop			@ (mov r8, r8)
 800f05c:	46bd      	mov	sp, r7
 800f05e:	b004      	add	sp, #16
 800f060:	bd80      	pop	{r7, pc}
	...

0800f064 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800f064:	b590      	push	{r4, r7, lr}
 800f066:	b085      	sub	sp, #20
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2280      	movs	r2, #128	@ 0x80
 800f072:	589c      	ldr	r4, [r3, r2]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2284      	movs	r2, #132	@ 0x84
 800f078:	589b      	ldr	r3, [r3, r2]
 800f07a:	1c19      	adds	r1, r3, #0
 800f07c:	6838      	ldr	r0, [r7, #0]
 800f07e:	f7f2 f8cd 	bl	800121c <__aeabi_fsub>
 800f082:	1c03      	adds	r3, r0, #0
 800f084:	1c19      	adds	r1, r3, #0
 800f086:	1c20      	adds	r0, r4, #0
 800f088:	f7f1 ff8a 	bl	8000fa0 <__aeabi_fmul>
 800f08c:	1c03      	adds	r3, r0, #0
 800f08e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800f090:	4940      	ldr	r1, [pc, #256]	@ (800f194 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800f092:	68b8      	ldr	r0, [r7, #8]
 800f094:	f7f1 fa4c 	bl	8000530 <__aeabi_fcmplt>
 800f098:	1e03      	subs	r3, r0, #0
 800f09a:	d001      	beq.n	800f0a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800f09c:	4b3e      	ldr	r3, [pc, #248]	@ (800f198 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800f09e:	e075      	b.n	800f18c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800f0a0:	493e      	ldr	r1, [pc, #248]	@ (800f19c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800f0a2:	68b8      	ldr	r0, [r7, #8]
 800f0a4:	f7f1 fa58 	bl	8000558 <__aeabi_fcmpgt>
 800f0a8:	1e03      	subs	r3, r0, #0
 800f0aa:	d001      	beq.n	800f0b0 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	e06d      	b.n	800f18c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800f0b0:	2100      	movs	r1, #0
 800f0b2:	6838      	ldr	r0, [r7, #0]
 800f0b4:	f7f1 fa5a 	bl	800056c <__aeabi_fcmpge>
 800f0b8:	1e03      	subs	r3, r0, #0
 800f0ba:	d047      	beq.n	800f14c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2288      	movs	r2, #136	@ 0x88
 800f0c0:	589b      	ldr	r3, [r3, r2]
 800f0c2:	21fe      	movs	r1, #254	@ 0xfe
 800f0c4:	0589      	lsls	r1, r1, #22
 800f0c6:	1c18      	adds	r0, r3, #0
 800f0c8:	f7f1 fa2c 	bl	8000524 <__aeabi_fcmpeq>
 800f0cc:	1e03      	subs	r3, r0, #0
 800f0ce:	d00e      	beq.n	800f0ee <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	689b      	ldr	r3, [r3, #8]
 800f0d4:	1c19      	adds	r1, r3, #0
 800f0d6:	20fe      	movs	r0, #254	@ 0xfe
 800f0d8:	0580      	lsls	r0, r0, #22
 800f0da:	f7f2 f89f 	bl	800121c <__aeabi_fsub>
 800f0de:	1c03      	adds	r3, r0, #0
 800f0e0:	492f      	ldr	r1, [pc, #188]	@ (800f1a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800f0e2:	1c18      	adds	r0, r3, #0
 800f0e4:	f7f1 ff5c 	bl	8000fa0 <__aeabi_fmul>
 800f0e8:	1c03      	adds	r3, r0, #0
 800f0ea:	60fb      	str	r3, [r7, #12]
 800f0ec:	e012      	b.n	800f114 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	689b      	ldr	r3, [r3, #8]
 800f0f2:	492c      	ldr	r1, [pc, #176]	@ (800f1a4 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800f0f4:	1c18      	adds	r0, r3, #0
 800f0f6:	f7f1 ff53 	bl	8000fa0 <__aeabi_fmul>
 800f0fa:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800f0fc:	1c19      	adds	r1, r3, #0
 800f0fe:	4826      	ldr	r0, [pc, #152]	@ (800f198 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800f100:	f7f2 f88c 	bl	800121c <__aeabi_fsub>
 800f104:	1c03      	adds	r3, r0, #0
 800f106:	2181      	movs	r1, #129	@ 0x81
 800f108:	05c9      	lsls	r1, r1, #23
 800f10a:	1c18      	adds	r0, r3, #0
 800f10c:	f7f1 fd62 	bl	8000bd4 <__aeabi_fdiv>
 800f110:	1c03      	adds	r3, r0, #0
 800f112:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800f114:	4920      	ldr	r1, [pc, #128]	@ (800f198 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800f116:	68f8      	ldr	r0, [r7, #12]
 800f118:	f7f1 fbd2 	bl	80008c0 <__aeabi_fadd>
 800f11c:	1c03      	adds	r3, r0, #0
 800f11e:	1c1c      	adds	r4, r3, #0
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	1c18      	adds	r0, r3, #0
 800f124:	f018 fb5a 	bl	80277dc <expf>
 800f128:	1c03      	adds	r3, r0, #0
 800f12a:	21fe      	movs	r1, #254	@ 0xfe
 800f12c:	0589      	lsls	r1, r1, #22
 800f12e:	1c18      	adds	r0, r3, #0
 800f130:	f7f1 fbc6 	bl	80008c0 <__aeabi_fadd>
 800f134:	1c03      	adds	r3, r0, #0
 800f136:	1c19      	adds	r1, r3, #0
 800f138:	1c20      	adds	r0, r4, #0
 800f13a:	f7f1 fd4b 	bl	8000bd4 <__aeabi_fdiv>
 800f13e:	1c03      	adds	r3, r0, #0
 800f140:	68f9      	ldr	r1, [r7, #12]
 800f142:	1c18      	adds	r0, r3, #0
 800f144:	f7f2 f86a 	bl	800121c <__aeabi_fsub>
 800f148:	1c03      	adds	r3, r0, #0
 800f14a:	e01f      	b.n	800f18c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2188      	movs	r1, #136	@ 0x88
 800f154:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800f156:	1c19      	adds	r1, r3, #0
 800f158:	1c10      	adds	r0, r2, #0
 800f15a:	f7f1 fd3b 	bl	8000bd4 <__aeabi_fdiv>
 800f15e:	1c03      	adds	r3, r0, #0
 800f160:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	1c18      	adds	r0, r3, #0
 800f166:	f018 fb39 	bl	80277dc <expf>
 800f16a:	1c03      	adds	r3, r0, #0
 800f16c:	21fe      	movs	r1, #254	@ 0xfe
 800f16e:	0589      	lsls	r1, r1, #22
 800f170:	1c18      	adds	r0, r3, #0
 800f172:	f7f1 fba5 	bl	80008c0 <__aeabi_fadd>
 800f176:	1c03      	adds	r3, r0, #0
 800f178:	1c19      	adds	r1, r3, #0
 800f17a:	4807      	ldr	r0, [pc, #28]	@ (800f198 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800f17c:	f7f1 fd2a 	bl	8000bd4 <__aeabi_fdiv>
 800f180:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800f182:	1c19      	adds	r1, r3, #0
 800f184:	1c20      	adds	r0, r4, #0
 800f186:	f7f1 ff0b 	bl	8000fa0 <__aeabi_fmul>
 800f18a:	1c03      	adds	r3, r0, #0
        }
    }
}
 800f18c:	1c18      	adds	r0, r3, #0
 800f18e:	46bd      	mov	sp, r7
 800f190:	b005      	add	sp, #20
 800f192:	bd90      	pop	{r4, r7, pc}
 800f194:	c2480000 	.word	0xc2480000
 800f198:	43fa0000 	.word	0x43fa0000
 800f19c:	42480000 	.word	0x42480000
 800f1a0:	3f8041ab 	.word	0x3f8041ab
 800f1a4:	40a00000 	.word	0x40a00000

0800f1a8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800f1a8:	b590      	push	{r4, r7, lr}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	4913      	ldr	r1, [pc, #76]	@ (800f208 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800f1ba:	1c18      	adds	r0, r3, #0
 800f1bc:	f7f1 fb80 	bl	80008c0 <__aeabi_fadd>
 800f1c0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800f1c2:	1c19      	adds	r1, r3, #0
 800f1c4:	1c20      	adds	r0, r4, #0
 800f1c6:	f7f1 fd05 	bl	8000bd4 <__aeabi_fdiv>
 800f1ca:	1c03      	adds	r3, r0, #0
 800f1cc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	228c      	movs	r2, #140	@ 0x8c
 800f1d2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	490b      	ldr	r1, [pc, #44]	@ (800f20c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800f1de:	1c18      	adds	r0, r3, #0
 800f1e0:	f7f1 fb6e 	bl	80008c0 <__aeabi_fadd>
 800f1e4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800f1e6:	1c19      	adds	r1, r3, #0
 800f1e8:	1c20      	adds	r0, r4, #0
 800f1ea:	f7f1 fcf3 	bl	8000bd4 <__aeabi_fdiv>
 800f1ee:	1c03      	adds	r3, r0, #0
 800f1f0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2290      	movs	r2, #144	@ 0x90
 800f1f6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2294      	movs	r2, #148	@ 0x94
 800f1fc:	2100      	movs	r1, #0
 800f1fe:	5499      	strb	r1, [r3, r2]
}
 800f200:	46c0      	nop			@ (mov r8, r8)
 800f202:	46bd      	mov	sp, r7
 800f204:	b003      	add	sp, #12
 800f206:	bd90      	pop	{r4, r7, pc}
 800f208:	41a00000 	.word	0x41a00000
 800f20c:	43fa0000 	.word	0x43fa0000

0800f210 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800f210:	b590      	push	{r4, r7, lr}
 800f212:	b087      	sub	sp, #28
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2294      	movs	r2, #148	@ 0x94
 800f21e:	5c9b      	ldrb	r3, [r3, r2]
 800f220:	2201      	movs	r2, #1
 800f222:	4053      	eors	r3, r2
 800f224:	b2db      	uxtb	r3, r3
 800f226:	2b00      	cmp	r3, #0
 800f228:	d00f      	beq.n	800f24a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2198      	movs	r1, #152	@ 0x98
 800f22e:	683a      	ldr	r2, [r7, #0]
 800f230:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	219c      	movs	r1, #156	@ 0x9c
 800f236:	683a      	ldr	r2, [r7, #0]
 800f238:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	21a0      	movs	r1, #160	@ 0xa0
 800f23e:	683a      	ldr	r2, [r7, #0]
 800f240:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2294      	movs	r2, #148	@ 0x94
 800f246:	2101      	movs	r1, #1
 800f248:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	228c      	movs	r2, #140	@ 0x8c
 800f24e:	589b      	ldr	r3, [r3, r2]
 800f250:	1c19      	adds	r1, r3, #0
 800f252:	20fe      	movs	r0, #254	@ 0xfe
 800f254:	0580      	lsls	r0, r0, #22
 800f256:	f7f1 ffe1 	bl	800121c <__aeabi_fsub>
 800f25a:	1c03      	adds	r3, r0, #0
 800f25c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2298      	movs	r2, #152	@ 0x98
 800f262:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800f264:	1c19      	adds	r1, r3, #0
 800f266:	f7f1 fe9b 	bl	8000fa0 <__aeabi_fmul>
 800f26a:	1c03      	adds	r3, r0, #0
 800f26c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	228c      	movs	r2, #140	@ 0x8c
 800f272:	589b      	ldr	r3, [r3, r2]
 800f274:	6839      	ldr	r1, [r7, #0]
 800f276:	1c18      	adds	r0, r3, #0
 800f278:	f7f1 fe92 	bl	8000fa0 <__aeabi_fmul>
 800f27c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800f27e:	1c19      	adds	r1, r3, #0
 800f280:	1c20      	adds	r0, r4, #0
 800f282:	f7f1 fb1d 	bl	80008c0 <__aeabi_fadd>
 800f286:	1c03      	adds	r3, r0, #0
 800f288:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2298      	movs	r2, #152	@ 0x98
 800f28e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2290      	movs	r2, #144	@ 0x90
 800f294:	589b      	ldr	r3, [r3, r2]
 800f296:	1c19      	adds	r1, r3, #0
 800f298:	20fe      	movs	r0, #254	@ 0xfe
 800f29a:	0580      	lsls	r0, r0, #22
 800f29c:	f7f1 ffbe 	bl	800121c <__aeabi_fsub>
 800f2a0:	1c03      	adds	r3, r0, #0
 800f2a2:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	229c      	movs	r2, #156	@ 0x9c
 800f2a8:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800f2aa:	1c19      	adds	r1, r3, #0
 800f2ac:	f7f1 fe78 	bl	8000fa0 <__aeabi_fmul>
 800f2b0:	1c03      	adds	r3, r0, #0
 800f2b2:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2290      	movs	r2, #144	@ 0x90
 800f2b8:	589b      	ldr	r3, [r3, r2]
 800f2ba:	6839      	ldr	r1, [r7, #0]
 800f2bc:	1c18      	adds	r0, r3, #0
 800f2be:	f7f1 fe6f 	bl	8000fa0 <__aeabi_fmul>
 800f2c2:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800f2c4:	1c19      	adds	r1, r3, #0
 800f2c6:	1c20      	adds	r0, r4, #0
 800f2c8:	f7f1 fafa 	bl	80008c0 <__aeabi_fadd>
 800f2cc:	1c03      	adds	r3, r0, #0
 800f2ce:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	229c      	movs	r2, #156	@ 0x9c
 800f2d4:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2298      	movs	r2, #152	@ 0x98
 800f2da:	589a      	ldr	r2, [r3, r2]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	219c      	movs	r1, #156	@ 0x9c
 800f2e0:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800f2e2:	1c19      	adds	r1, r3, #0
 800f2e4:	1c10      	adds	r0, r2, #0
 800f2e6:	f7f1 ff99 	bl	800121c <__aeabi_fsub>
 800f2ea:	1c03      	adds	r3, r0, #0
 800f2ec:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800f2ee:	2100      	movs	r1, #0
 800f2f0:	6978      	ldr	r0, [r7, #20]
 800f2f2:	f7f1 f91d 	bl	8000530 <__aeabi_fcmplt>
 800f2f6:	1e03      	subs	r3, r0, #0
 800f2f8:	d004      	beq.n	800f304 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	2280      	movs	r2, #128	@ 0x80
 800f2fe:	0612      	lsls	r2, r2, #24
 800f300:	4053      	eors	r3, r2
 800f302:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800f304:	4923      	ldr	r1, [pc, #140]	@ (800f394 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800f306:	6978      	ldr	r0, [r7, #20]
 800f308:	f7f1 fe4a 	bl	8000fa0 <__aeabi_fmul>
 800f30c:	1c03      	adds	r3, r0, #0
 800f30e:	1c18      	adds	r0, r3, #0
 800f310:	f018 fa64 	bl	80277dc <expf>
 800f314:	1c03      	adds	r3, r0, #0
 800f316:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800f318:	491f      	ldr	r1, [pc, #124]	@ (800f398 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800f31a:	6938      	ldr	r0, [r7, #16]
 800f31c:	f7f1 fe40 	bl	8000fa0 <__aeabi_fmul>
 800f320:	1c03      	adds	r3, r0, #0
 800f322:	491e      	ldr	r1, [pc, #120]	@ (800f39c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800f324:	1c18      	adds	r0, r3, #0
 800f326:	f7f1 facb 	bl	80008c0 <__aeabi_fadd>
 800f32a:	1c03      	adds	r3, r0, #0
 800f32c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	685c      	ldr	r4, [r3, #4]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	68f9      	ldr	r1, [r7, #12]
 800f338:	1c18      	adds	r0, r3, #0
 800f33a:	f7f1 fac1 	bl	80008c0 <__aeabi_fadd>
 800f33e:	1c03      	adds	r3, r0, #0
 800f340:	1c19      	adds	r1, r3, #0
 800f342:	1c20      	adds	r0, r4, #0
 800f344:	f7f1 fc46 	bl	8000bd4 <__aeabi_fdiv>
 800f348:	1c03      	adds	r3, r0, #0
 800f34a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800f34c:	68b9      	ldr	r1, [r7, #8]
 800f34e:	20fe      	movs	r0, #254	@ 0xfe
 800f350:	0580      	lsls	r0, r0, #22
 800f352:	f7f1 ff63 	bl	800121c <__aeabi_fsub>
 800f356:	1c03      	adds	r3, r0, #0
 800f358:	1c18      	adds	r0, r3, #0
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	22a0      	movs	r2, #160	@ 0xa0
 800f35e:	589b      	ldr	r3, [r3, r2]
 800f360:	1c19      	adds	r1, r3, #0
 800f362:	f7f1 fe1d 	bl	8000fa0 <__aeabi_fmul>
 800f366:	1c03      	adds	r3, r0, #0
 800f368:	1c1c      	adds	r4, r3, #0
 800f36a:	6839      	ldr	r1, [r7, #0]
 800f36c:	68b8      	ldr	r0, [r7, #8]
 800f36e:	f7f1 fe17 	bl	8000fa0 <__aeabi_fmul>
 800f372:	1c03      	adds	r3, r0, #0
 800f374:	1c19      	adds	r1, r3, #0
 800f376:	1c20      	adds	r0, r4, #0
 800f378:	f7f1 faa2 	bl	80008c0 <__aeabi_fadd>
 800f37c:	1c03      	adds	r3, r0, #0
 800f37e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	22a0      	movs	r2, #160	@ 0xa0
 800f384:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	22a0      	movs	r2, #160	@ 0xa0
 800f38a:	589b      	ldr	r3, [r3, r2]
}
 800f38c:	1c18      	adds	r0, r3, #0
 800f38e:	46bd      	mov	sp, r7
 800f390:	b007      	add	sp, #28
 800f392:	bd90      	pop	{r4, r7, pc}
 800f394:	be4ccccd 	.word	0xbe4ccccd
 800f398:	43f00000 	.word	0x43f00000
 800f39c:	41a00000 	.word	0x41a00000

0800f3a0 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	000a      	movs	r2, r1
 800f3aa:	1cbb      	adds	r3, r7, #2
 800f3ac:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800f3ae:	230d      	movs	r3, #13
 800f3b0:	18fb      	adds	r3, r7, r3
 800f3b2:	22ff      	movs	r2, #255	@ 0xff
 800f3b4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800f3b6:	230e      	movs	r3, #14
 800f3b8:	18fb      	adds	r3, r7, r3
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	801a      	strh	r2, [r3, #0]
 800f3be:	e037      	b.n	800f430 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800f3c0:	230e      	movs	r3, #14
 800f3c2:	18fb      	adds	r3, r7, r3
 800f3c4:	881b      	ldrh	r3, [r3, #0]
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	18d3      	adds	r3, r2, r3
 800f3ca:	7819      	ldrb	r1, [r3, #0]
 800f3cc:	220d      	movs	r2, #13
 800f3ce:	18bb      	adds	r3, r7, r2
 800f3d0:	18ba      	adds	r2, r7, r2
 800f3d2:	7812      	ldrb	r2, [r2, #0]
 800f3d4:	404a      	eors	r2, r1
 800f3d6:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800f3d8:	230c      	movs	r3, #12
 800f3da:	18fb      	adds	r3, r7, r3
 800f3dc:	2208      	movs	r2, #8
 800f3de:	701a      	strb	r2, [r3, #0]
 800f3e0:	e01b      	b.n	800f41a <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800f3e2:	210d      	movs	r1, #13
 800f3e4:	187b      	adds	r3, r7, r1
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	b25b      	sxtb	r3, r3
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	da09      	bge.n	800f402 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800f3ee:	187b      	adds	r3, r7, r1
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	005b      	lsls	r3, r3, #1
 800f3f4:	b25b      	sxtb	r3, r3
 800f3f6:	2231      	movs	r2, #49	@ 0x31
 800f3f8:	4053      	eors	r3, r2
 800f3fa:	b25a      	sxtb	r2, r3
 800f3fc:	187b      	adds	r3, r7, r1
 800f3fe:	701a      	strb	r2, [r3, #0]
 800f400:	e005      	b.n	800f40e <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800f402:	230d      	movs	r3, #13
 800f404:	18fa      	adds	r2, r7, r3
 800f406:	18fb      	adds	r3, r7, r3
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	18db      	adds	r3, r3, r3
 800f40c:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800f40e:	220c      	movs	r2, #12
 800f410:	18bb      	adds	r3, r7, r2
 800f412:	18ba      	adds	r2, r7, r2
 800f414:	7812      	ldrb	r2, [r2, #0]
 800f416:	3a01      	subs	r2, #1
 800f418:	701a      	strb	r2, [r3, #0]
 800f41a:	230c      	movs	r3, #12
 800f41c:	18fb      	adds	r3, r7, r3
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d1de      	bne.n	800f3e2 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800f424:	220e      	movs	r2, #14
 800f426:	18bb      	adds	r3, r7, r2
 800f428:	18ba      	adds	r2, r7, r2
 800f42a:	8812      	ldrh	r2, [r2, #0]
 800f42c:	3201      	adds	r2, #1
 800f42e:	801a      	strh	r2, [r3, #0]
 800f430:	230e      	movs	r3, #14
 800f432:	18fa      	adds	r2, r7, r3
 800f434:	1cbb      	adds	r3, r7, #2
 800f436:	8812      	ldrh	r2, [r2, #0]
 800f438:	881b      	ldrh	r3, [r3, #0]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d3c0      	bcc.n	800f3c0 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800f43e:	230d      	movs	r3, #13
 800f440:	18fb      	adds	r3, r7, r3
 800f442:	781b      	ldrb	r3, [r3, #0]
}
 800f444:	0018      	movs	r0, r3
 800f446:	46bd      	mov	sp, r7
 800f448:	b004      	add	sp, #16
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	0008      	movs	r0, r1
 800f456:	0011      	movs	r1, r2
 800f458:	1cbb      	adds	r3, r7, #2
 800f45a:	1c02      	adds	r2, r0, #0
 800f45c:	801a      	strh	r2, [r3, #0]
 800f45e:	1c7b      	adds	r3, r7, #1
 800f460:	1c0a      	adds	r2, r1, #0
 800f462:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800f464:	1cbb      	adds	r3, r7, #2
 800f466:	881a      	ldrh	r2, [r3, #0]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	0011      	movs	r1, r2
 800f46c:	0018      	movs	r0, r3
 800f46e:	f7ff ff97 	bl	800f3a0 <sensirion_i2c_generate_crc>
 800f472:	0003      	movs	r3, r0
 800f474:	001a      	movs	r2, r3
 800f476:	1c7b      	adds	r3, r7, #1
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d001      	beq.n	800f482 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800f47e:	2301      	movs	r3, #1
 800f480:	e000      	b.n	800f484 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800f482:	2300      	movs	r3, #0
}
 800f484:	0018      	movs	r0, r3
 800f486:	46bd      	mov	sp, r7
 800f488:	b002      	add	sp, #8
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b082      	sub	sp, #8
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	0008      	movs	r0, r1
 800f496:	0011      	movs	r1, r2
 800f498:	1cbb      	adds	r3, r7, #2
 800f49a:	1c02      	adds	r2, r0, #0
 800f49c:	801a      	strh	r2, [r3, #0]
 800f49e:	003b      	movs	r3, r7
 800f4a0:	1c0a      	adds	r2, r1, #0
 800f4a2:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800f4a4:	003b      	movs	r3, r7
 800f4a6:	881b      	ldrh	r3, [r3, #0]
 800f4a8:	0a1b      	lsrs	r3, r3, #8
 800f4aa:	b299      	uxth	r1, r3
 800f4ac:	1cbb      	adds	r3, r7, #2
 800f4ae:	881b      	ldrh	r3, [r3, #0]
 800f4b0:	1cba      	adds	r2, r7, #2
 800f4b2:	1c58      	adds	r0, r3, #1
 800f4b4:	8010      	strh	r0, [r2, #0]
 800f4b6:	001a      	movs	r2, r3
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	189b      	adds	r3, r3, r2
 800f4bc:	b2ca      	uxtb	r2, r1
 800f4be:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800f4c0:	1cbb      	adds	r3, r7, #2
 800f4c2:	881b      	ldrh	r3, [r3, #0]
 800f4c4:	1cba      	adds	r2, r7, #2
 800f4c6:	1c59      	adds	r1, r3, #1
 800f4c8:	8011      	strh	r1, [r2, #0]
 800f4ca:	001a      	movs	r2, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	189b      	adds	r3, r3, r2
 800f4d0:	003a      	movs	r2, r7
 800f4d2:	8812      	ldrh	r2, [r2, #0]
 800f4d4:	b2d2      	uxtb	r2, r2
 800f4d6:	701a      	strb	r2, [r3, #0]
    return offset;
 800f4d8:	1cbb      	adds	r3, r7, #2
 800f4da:	881b      	ldrh	r3, [r3, #0]
}
 800f4dc:	0018      	movs	r0, r3
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	b002      	add	sp, #8
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800f4e4:	b590      	push	{r4, r7, lr}
 800f4e6:	b083      	sub	sp, #12
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	0008      	movs	r0, r1
 800f4ee:	0011      	movs	r1, r2
 800f4f0:	1cbb      	adds	r3, r7, #2
 800f4f2:	1c02      	adds	r2, r0, #0
 800f4f4:	801a      	strh	r2, [r3, #0]
 800f4f6:	003b      	movs	r3, r7
 800f4f8:	1c0a      	adds	r2, r1, #0
 800f4fa:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800f4fc:	003b      	movs	r3, r7
 800f4fe:	881b      	ldrh	r3, [r3, #0]
 800f500:	0a1b      	lsrs	r3, r3, #8
 800f502:	b299      	uxth	r1, r3
 800f504:	1cbb      	adds	r3, r7, #2
 800f506:	881b      	ldrh	r3, [r3, #0]
 800f508:	1cba      	adds	r2, r7, #2
 800f50a:	1c58      	adds	r0, r3, #1
 800f50c:	8010      	strh	r0, [r2, #0]
 800f50e:	001a      	movs	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	189b      	adds	r3, r3, r2
 800f514:	b2ca      	uxtb	r2, r1
 800f516:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800f518:	1cbb      	adds	r3, r7, #2
 800f51a:	881b      	ldrh	r3, [r3, #0]
 800f51c:	1cba      	adds	r2, r7, #2
 800f51e:	1c59      	adds	r1, r3, #1
 800f520:	8011      	strh	r1, [r2, #0]
 800f522:	001a      	movs	r2, r3
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	189b      	adds	r3, r3, r2
 800f528:	003a      	movs	r2, r7
 800f52a:	8812      	ldrh	r2, [r2, #0]
 800f52c:	b2d2      	uxtb	r2, r2
 800f52e:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800f530:	1cbb      	adds	r3, r7, #2
 800f532:	881b      	ldrh	r3, [r3, #0]
 800f534:	3b02      	subs	r3, #2
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800f53a:	1cbb      	adds	r3, r7, #2
 800f53c:	881b      	ldrh	r3, [r3, #0]
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	18d4      	adds	r4, r2, r3
 800f542:	2102      	movs	r1, #2
 800f544:	f7ff ff2c 	bl	800f3a0 <sensirion_i2c_generate_crc>
 800f548:	0003      	movs	r3, r0
 800f54a:	7023      	strb	r3, [r4, #0]
    offset++;
 800f54c:	1cbb      	adds	r3, r7, #2
 800f54e:	881a      	ldrh	r2, [r3, #0]
 800f550:	1cbb      	adds	r3, r7, #2
 800f552:	3201      	adds	r2, #1
 800f554:	801a      	strh	r2, [r3, #0]

    return offset;
 800f556:	1cbb      	adds	r3, r7, #2
 800f558:	881b      	ldrh	r3, [r3, #0]
}
 800f55a:	0018      	movs	r0, r3
 800f55c:	46bd      	mov	sp, r7
 800f55e:	b003      	add	sp, #12
 800f560:	bd90      	pop	{r4, r7, pc}

0800f562 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800f562:	b580      	push	{r7, lr}
 800f564:	b082      	sub	sp, #8
 800f566:	af00      	add	r7, sp, #0
 800f568:	6078      	str	r0, [r7, #4]
 800f56a:	0008      	movs	r0, r1
 800f56c:	0011      	movs	r1, r2
 800f56e:	1cbb      	adds	r3, r7, #2
 800f570:	1c02      	adds	r2, r0, #0
 800f572:	801a      	strh	r2, [r3, #0]
 800f574:	003b      	movs	r3, r7
 800f576:	1c0a      	adds	r2, r1, #0
 800f578:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800f57a:	003b      	movs	r3, r7
 800f57c:	881a      	ldrh	r2, [r3, #0]
 800f57e:	1cbb      	adds	r3, r7, #2
 800f580:	8819      	ldrh	r1, [r3, #0]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	0018      	movs	r0, r3
 800f586:	f7ff ffad 	bl	800f4e4 <sensirion_i2c_add_uint16_t_to_buffer>
 800f58a:	0003      	movs	r3, r0
}
 800f58c:	0018      	movs	r0, r3
 800f58e:	46bd      	mov	sp, r7
 800f590:	b002      	add	sp, #8
 800f592:	bd80      	pop	{r7, pc}

0800f594 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6039      	str	r1, [r7, #0]
 800f59c:	0011      	movs	r1, r2
 800f59e:	1dfb      	adds	r3, r7, #7
 800f5a0:	1c02      	adds	r2, r0, #0
 800f5a2:	701a      	strb	r2, [r3, #0]
 800f5a4:	1d3b      	adds	r3, r7, #4
 800f5a6:	1c0a      	adds	r2, r1, #0
 800f5a8:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800f5aa:	1d3b      	adds	r3, r7, #4
 800f5ac:	881a      	ldrh	r2, [r3, #0]
 800f5ae:	6839      	ldr	r1, [r7, #0]
 800f5b0:	1dfb      	adds	r3, r7, #7
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	0018      	movs	r0, r3
 800f5b6:	f7fe f9db 	bl	800d970 <sensirion_i2c_hal_write>
 800f5ba:	0003      	movs	r3, r0
}
 800f5bc:	0018      	movs	r0, r3
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	b002      	add	sp, #8
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800f5c4:	b5b0      	push	{r4, r5, r7, lr}
 800f5c6:	b084      	sub	sp, #16
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6039      	str	r1, [r7, #0]
 800f5cc:	0011      	movs	r1, r2
 800f5ce:	1dfb      	adds	r3, r7, #7
 800f5d0:	1c02      	adds	r2, r0, #0
 800f5d2:	701a      	strb	r2, [r3, #0]
 800f5d4:	1d3b      	adds	r3, r7, #4
 800f5d6:	1c0a      	adds	r2, r1, #0
 800f5d8:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800f5da:	1d3b      	adds	r3, r7, #4
 800f5dc:	881b      	ldrh	r3, [r3, #0]
 800f5de:	085b      	lsrs	r3, r3, #1
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	220a      	movs	r2, #10
 800f5e4:	18ba      	adds	r2, r7, r2
 800f5e6:	1c19      	adds	r1, r3, #0
 800f5e8:	1c0b      	adds	r3, r1, #0
 800f5ea:	18db      	adds	r3, r3, r3
 800f5ec:	185b      	adds	r3, r3, r1
 800f5ee:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800f5f0:	1d3b      	adds	r3, r7, #4
 800f5f2:	881b      	ldrh	r3, [r3, #0]
 800f5f4:	2201      	movs	r2, #1
 800f5f6:	4013      	ands	r3, r2
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d001      	beq.n	800f602 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800f5fe:	2304      	movs	r3, #4
 800f600:	e06b      	b.n	800f6da <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800f602:	230a      	movs	r3, #10
 800f604:	18fb      	adds	r3, r7, r3
 800f606:	881a      	ldrh	r2, [r3, #0]
 800f608:	6839      	ldr	r1, [r7, #0]
 800f60a:	1dfb      	adds	r3, r7, #7
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	0018      	movs	r0, r3
 800f610:	f7fe f98e 	bl	800d930 <sensirion_i2c_hal_read>
 800f614:	0003      	movs	r3, r0
 800f616:	001a      	movs	r2, r3
 800f618:	2108      	movs	r1, #8
 800f61a:	187b      	adds	r3, r7, r1
 800f61c:	801a      	strh	r2, [r3, #0]
    if (error) {
 800f61e:	000a      	movs	r2, r1
 800f620:	18bb      	adds	r3, r7, r2
 800f622:	2100      	movs	r1, #0
 800f624:	5e5b      	ldrsh	r3, [r3, r1]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d003      	beq.n	800f632 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800f62a:	18bb      	adds	r3, r7, r2
 800f62c:	2200      	movs	r2, #0
 800f62e:	5e9b      	ldrsh	r3, [r3, r2]
 800f630:	e053      	b.n	800f6da <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800f632:	230e      	movs	r3, #14
 800f634:	18fb      	adds	r3, r7, r3
 800f636:	2200      	movs	r2, #0
 800f638:	801a      	strh	r2, [r3, #0]
 800f63a:	230c      	movs	r3, #12
 800f63c:	18fb      	adds	r3, r7, r3
 800f63e:	2200      	movs	r2, #0
 800f640:	801a      	strh	r2, [r3, #0]
 800f642:	e041      	b.n	800f6c8 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800f644:	210e      	movs	r1, #14
 800f646:	187b      	adds	r3, r7, r1
 800f648:	881b      	ldrh	r3, [r3, #0]
 800f64a:	683a      	ldr	r2, [r7, #0]
 800f64c:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800f64e:	187b      	adds	r3, r7, r1
 800f650:	881b      	ldrh	r3, [r3, #0]
 800f652:	3302      	adds	r3, #2
 800f654:	683a      	ldr	r2, [r7, #0]
 800f656:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	001a      	movs	r2, r3
 800f65c:	2102      	movs	r1, #2
 800f65e:	f7ff fef5 	bl	800f44c <sensirion_i2c_check_crc>
 800f662:	0003      	movs	r3, r0
 800f664:	001a      	movs	r2, r3
 800f666:	2108      	movs	r1, #8
 800f668:	187b      	adds	r3, r7, r1
 800f66a:	801a      	strh	r2, [r3, #0]
        if (error) {
 800f66c:	000a      	movs	r2, r1
 800f66e:	18bb      	adds	r3, r7, r2
 800f670:	2100      	movs	r1, #0
 800f672:	5e5b      	ldrsh	r3, [r3, r1]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d003      	beq.n	800f680 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800f678:	18bb      	adds	r3, r7, r2
 800f67a:	2200      	movs	r2, #0
 800f67c:	5e9b      	ldrsh	r3, [r3, r2]
 800f67e:	e02c      	b.n	800f6da <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800f680:	240e      	movs	r4, #14
 800f682:	193b      	adds	r3, r7, r4
 800f684:	881b      	ldrh	r3, [r3, #0]
 800f686:	683a      	ldr	r2, [r7, #0]
 800f688:	18d2      	adds	r2, r2, r3
 800f68a:	250c      	movs	r5, #12
 800f68c:	197b      	adds	r3, r7, r5
 800f68e:	881b      	ldrh	r3, [r3, #0]
 800f690:	1979      	adds	r1, r7, r5
 800f692:	1c58      	adds	r0, r3, #1
 800f694:	8008      	strh	r0, [r1, #0]
 800f696:	0019      	movs	r1, r3
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	185b      	adds	r3, r3, r1
 800f69c:	7812      	ldrb	r2, [r2, #0]
 800f69e:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800f6a0:	193b      	adds	r3, r7, r4
 800f6a2:	881b      	ldrh	r3, [r3, #0]
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	683a      	ldr	r2, [r7, #0]
 800f6a8:	18d2      	adds	r2, r2, r3
 800f6aa:	197b      	adds	r3, r7, r5
 800f6ac:	881b      	ldrh	r3, [r3, #0]
 800f6ae:	1979      	adds	r1, r7, r5
 800f6b0:	1c58      	adds	r0, r3, #1
 800f6b2:	8008      	strh	r0, [r1, #0]
 800f6b4:	0019      	movs	r1, r3
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	185b      	adds	r3, r3, r1
 800f6ba:	7812      	ldrb	r2, [r2, #0]
 800f6bc:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800f6be:	193b      	adds	r3, r7, r4
 800f6c0:	193a      	adds	r2, r7, r4
 800f6c2:	8812      	ldrh	r2, [r2, #0]
 800f6c4:	3203      	adds	r2, #3
 800f6c6:	801a      	strh	r2, [r3, #0]
 800f6c8:	230e      	movs	r3, #14
 800f6ca:	18fa      	adds	r2, r7, r3
 800f6cc:	230a      	movs	r3, #10
 800f6ce:	18fb      	adds	r3, r7, r3
 800f6d0:	8812      	ldrh	r2, [r2, #0]
 800f6d2:	881b      	ldrh	r3, [r3, #0]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d3b5      	bcc.n	800f644 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800f6d8:	2300      	movs	r3, #0
}
 800f6da:	0018      	movs	r0, r3
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	b004      	add	sp, #16
 800f6e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f6e4 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800f6e4:	b590      	push	{r4, r7, lr}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6039      	str	r1, [r7, #0]
 800f6ec:	0011      	movs	r1, r2
 800f6ee:	1dfb      	adds	r3, r7, #7
 800f6f0:	1c02      	adds	r2, r0, #0
 800f6f2:	701a      	strb	r2, [r3, #0]
 800f6f4:	1dbb      	adds	r3, r7, #6
 800f6f6:	1c0a      	adds	r2, r1, #0
 800f6f8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800f6fa:	4b08      	ldr	r3, [pc, #32]	@ (800f71c <ReadRegister+0x38>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d008      	beq.n	800f714 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800f702:	4b06      	ldr	r3, [pc, #24]	@ (800f71c <ReadRegister+0x38>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	1dba      	adds	r2, r7, #6
 800f708:	7814      	ldrb	r4, [r2, #0]
 800f70a:	6839      	ldr	r1, [r7, #0]
 800f70c:	1dfa      	adds	r2, r7, #7
 800f70e:	7810      	ldrb	r0, [r2, #0]
 800f710:	0022      	movs	r2, r4
 800f712:	4798      	blx	r3
  }
}
 800f714:	46c0      	nop			@ (mov r8, r8)
 800f716:	46bd      	mov	sp, r7
 800f718:	b003      	add	sp, #12
 800f71a:	bd90      	pop	{r4, r7, pc}
 800f71c:	20000f14 	.word	0x20000f14

0800f720 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800f720:	b590      	push	{r4, r7, lr}
 800f722:	b083      	sub	sp, #12
 800f724:	af00      	add	r7, sp, #0
 800f726:	6039      	str	r1, [r7, #0]
 800f728:	0011      	movs	r1, r2
 800f72a:	1dfb      	adds	r3, r7, #7
 800f72c:	1c02      	adds	r2, r0, #0
 800f72e:	701a      	strb	r2, [r3, #0]
 800f730:	1dbb      	adds	r3, r7, #6
 800f732:	1c0a      	adds	r2, r1, #0
 800f734:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800f736:	4b08      	ldr	r3, [pc, #32]	@ (800f758 <WriteRegister+0x38>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d008      	beq.n	800f750 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800f73e:	4b06      	ldr	r3, [pc, #24]	@ (800f758 <WriteRegister+0x38>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	1dba      	adds	r2, r7, #6
 800f744:	7814      	ldrb	r4, [r2, #0]
 800f746:	6839      	ldr	r1, [r7, #0]
 800f748:	1dfa      	adds	r2, r7, #7
 800f74a:	7810      	ldrb	r0, [r2, #0]
 800f74c:	0022      	movs	r2, r4
 800f74e:	4798      	blx	r3
  }
}
 800f750:	46c0      	nop			@ (mov r8, r8)
 800f752:	46bd      	mov	sp, r7
 800f754:	b003      	add	sp, #12
 800f756:	bd90      	pop	{r4, r7, pc}
 800f758:	20000f18 	.word	0x20000f18

0800f75c <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800f764:	f003 fce2 	bl	801312c <HAL_GetTick>
 800f768:	0002      	movs	r2, r0
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	18d2      	adds	r2, r2, r3
 800f76e:	4b03      	ldr	r3, [pc, #12]	@ (800f77c <setSGP40TimeStamp+0x20>)
 800f770:	601a      	str	r2, [r3, #0]
}
 800f772:	46c0      	nop			@ (mov r8, r8)
 800f774:	46bd      	mov	sp, r7
 800f776:	b002      	add	sp, #8
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	46c0      	nop			@ (mov r8, r8)
 800f77c:	20000f28 	.word	0x20000f28

0800f780 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800f780:	b580      	push	{r7, lr}
 800f782:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800f784:	4b02      	ldr	r3, [pc, #8]	@ (800f790 <ResetSGP40samplecounter+0x10>)
 800f786:	2200      	movs	r2, #0
 800f788:	701a      	strb	r2, [r3, #0]
}
 800f78a:	46c0      	nop			@ (mov r8, r8)
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	20000f26 	.word	0x20000f26

0800f794 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800f79e:	4b07      	ldr	r3, [pc, #28]	@ (800f7bc <SGP_Init+0x28>)
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800f7a4:	4b06      	ldr	r3, [pc, #24]	@ (800f7c0 <SGP_Init+0x2c>)
 800f7a6:	683a      	ldr	r2, [r7, #0]
 800f7a8:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800f7aa:	4b06      	ldr	r3, [pc, #24]	@ (800f7c4 <SGP_Init+0x30>)
 800f7ac:	2100      	movs	r1, #0
 800f7ae:	0018      	movs	r0, r3
 800f7b0:	f7fe ff72 	bl	800e698 <GasIndexAlgorithm_init>
}
 800f7b4:	46c0      	nop			@ (mov r8, r8)
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	b002      	add	sp, #8
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	20000f14 	.word	0x20000f14
 800f7c0:	20000f18 	.word	0x20000f18
 800f7c4:	20000f30 	.word	0x20000f30

0800f7c8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800f7cc:	4b07      	ldr	r3, [pc, #28]	@ (800f7ec <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d004      	beq.n	800f7de <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800f7d4:	4b06      	ldr	r3, [pc, #24]	@ (800f7f0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800f7d6:	22fe      	movs	r2, #254	@ 0xfe
 800f7d8:	0592      	lsls	r2, r2, #22
 800f7da:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 800f7dc:	e002      	b.n	800f7e4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800f7de:	4b04      	ldr	r3, [pc, #16]	@ (800f7f0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800f7e0:	4a04      	ldr	r2, [pc, #16]	@ (800f7f4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800f7e2:	605a      	str	r2, [r3, #4]
}
 800f7e4:	46c0      	nop			@ (mov r8, r8)
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	46c0      	nop			@ (mov r8, r8)
 800f7ec:	20001e7d 	.word	0x20001e7d
 800f7f0:	20000f30 	.word	0x20000f30
 800f7f4:	44610000 	.word	0x44610000

0800f7f8 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800f7fc:	4b13      	ldr	r3, [pc, #76]	@ (800f84c <SGP_StartMeasurement+0x54>)
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00d      	beq.n	800f820 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800f804:	4b12      	ldr	r3, [pc, #72]	@ (800f850 <SGP_StartMeasurement+0x58>)
 800f806:	2208      	movs	r2, #8
 800f808:	0019      	movs	r1, r3
 800f80a:	2059      	movs	r0, #89	@ 0x59
 800f80c:	f7ff ff88 	bl	800f720 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800f810:	f003 fc8c 	bl	801312c <HAL_GetTick>
 800f814:	0003      	movs	r3, r0
 800f816:	331e      	adds	r3, #30
 800f818:	001a      	movs	r2, r3
 800f81a:	4b0e      	ldr	r3, [pc, #56]	@ (800f854 <SGP_StartMeasurement+0x5c>)
 800f81c:	601a      	str	r2, [r3, #0]
 800f81e:	e00c      	b.n	800f83a <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800f820:	4b0d      	ldr	r3, [pc, #52]	@ (800f858 <SGP_StartMeasurement+0x60>)
 800f822:	2208      	movs	r2, #8
 800f824:	0019      	movs	r1, r3
 800f826:	2059      	movs	r0, #89	@ 0x59
 800f828:	f7ff ff7a 	bl	800f720 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800f82c:	f003 fc7e 	bl	801312c <HAL_GetTick>
 800f830:	0003      	movs	r3, r0
 800f832:	33aa      	adds	r3, #170	@ 0xaa
 800f834:	001a      	movs	r2, r3
 800f836:	4b09      	ldr	r3, [pc, #36]	@ (800f85c <SGP_StartMeasurement+0x64>)
 800f838:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800f83a:	4b09      	ldr	r3, [pc, #36]	@ (800f860 <SGP_StartMeasurement+0x68>)
 800f83c:	2200      	movs	r2, #0
 800f83e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800f840:	4b08      	ldr	r3, [pc, #32]	@ (800f864 <SGP_StartMeasurement+0x6c>)
 800f842:	2200      	movs	r2, #0
 800f844:	701a      	strb	r2, [r3, #0]
}
 800f846:	46c0      	nop			@ (mov r8, r8)
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	20000fd8 	.word	0x20000fd8
 800f850:	200000b0 	.word	0x200000b0
 800f854:	200000c4 	.word	0x200000c4
 800f858:	200000a8 	.word	0x200000a8
 800f85c:	200000bc 	.word	0x200000bc
 800f860:	20000f2c 	.word	0x20000f2c
 800f864:	20000f2d 	.word	0x20000f2d

0800f868 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800f868:	b580      	push	{r7, lr}
 800f86a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800f86c:	4b04      	ldr	r3, [pc, #16]	@ (800f880 <SGP_HeatedUp+0x18>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	0018      	movs	r0, r3
 800f872:	f002 fecf 	bl	8012614 <TimestampIsReached>
 800f876:	0003      	movs	r3, r0
}
 800f878:	0018      	movs	r0, r3
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	46c0      	nop			@ (mov r8, r8)
 800f880:	200000bc 	.word	0x200000bc

0800f884 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800f884:	b580      	push	{r7, lr}
 800f886:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800f888:	4b04      	ldr	r3, [pc, #16]	@ (800f89c <SGP_MeasurementReady+0x18>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	0018      	movs	r0, r3
 800f88e:	f002 fec1 	bl	8012614 <TimestampIsReached>
 800f892:	0003      	movs	r3, r0
}
 800f894:	0018      	movs	r0, r3
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	46c0      	nop			@ (mov r8, r8)
 800f89c:	200000c4 	.word	0x200000c4

0800f8a0 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800f8a4:	4b04      	ldr	r3, [pc, #16]	@ (800f8b8 <SGP_MeasurementDone+0x18>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	0018      	movs	r0, r3
 800f8aa:	f002 feb3 	bl	8012614 <TimestampIsReached>
 800f8ae:	0003      	movs	r3, r0
}
 800f8b0:	0018      	movs	r0, r3
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	46c0      	nop			@ (mov r8, r8)
 800f8b8:	200000c0 	.word	0x200000c0

0800f8bc <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800f8c0:	4b04      	ldr	r3, [pc, #16]	@ (800f8d4 <SGP_TurnHeaterOff+0x18>)
 800f8c2:	2202      	movs	r2, #2
 800f8c4:	0019      	movs	r1, r3
 800f8c6:	2059      	movs	r0, #89	@ 0x59
 800f8c8:	f7ff ff2a 	bl	800f720 <WriteRegister>
}
 800f8cc:	46c0      	nop			@ (mov r8, r8)
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	46c0      	nop			@ (mov r8, r8)
 800f8d4:	200000a0 	.word	0x200000a0

0800f8d8 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800f8d8:	b590      	push	{r4, r7, lr}
 800f8da:	b087      	sub	sp, #28
 800f8dc:	af02      	add	r7, sp, #8
 800f8de:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800f8e0:	f7ff ffc2 	bl	800f868 <SGP_HeatedUp>
 800f8e4:	1e03      	subs	r3, r0, #0
 800f8e6:	d032      	beq.n	800f94e <SGP_GetMeasurementValues+0x76>
 800f8e8:	4b7f      	ldr	r3, [pc, #508]	@ (800fae8 <SGP_GetMeasurementValues+0x210>)
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	4053      	eors	r3, r2
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d02b      	beq.n	800f94e <SGP_GetMeasurementValues+0x76>
 800f8f6:	4b7d      	ldr	r3, [pc, #500]	@ (800faec <SGP_GetMeasurementValues+0x214>)
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	4053      	eors	r3, r2
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	2b00      	cmp	r3, #0
 800f902:	d024      	beq.n	800f94e <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800f904:	4b78      	ldr	r3, [pc, #480]	@ (800fae8 <SGP_GetMeasurementValues+0x210>)
 800f906:	2201      	movs	r2, #1
 800f908:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800f90a:	4b79      	ldr	r3, [pc, #484]	@ (800faf0 <SGP_GetMeasurementValues+0x218>)
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d00d      	beq.n	800f92e <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800f912:	4b78      	ldr	r3, [pc, #480]	@ (800faf4 <SGP_GetMeasurementValues+0x21c>)
 800f914:	2208      	movs	r2, #8
 800f916:	0019      	movs	r1, r3
 800f918:	2059      	movs	r0, #89	@ 0x59
 800f91a:	f7ff ff01 	bl	800f720 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800f91e:	f003 fc05 	bl	801312c <HAL_GetTick>
 800f922:	0003      	movs	r3, r0
 800f924:	331e      	adds	r3, #30
 800f926:	001a      	movs	r2, r3
 800f928:	4b73      	ldr	r3, [pc, #460]	@ (800faf8 <SGP_GetMeasurementValues+0x220>)
 800f92a:	601a      	str	r2, [r3, #0]
 800f92c:	e00c      	b.n	800f948 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800f92e:	4b73      	ldr	r3, [pc, #460]	@ (800fafc <SGP_GetMeasurementValues+0x224>)
 800f930:	2208      	movs	r2, #8
 800f932:	0019      	movs	r1, r3
 800f934:	2059      	movs	r0, #89	@ 0x59
 800f936:	f7ff fef3 	bl	800f720 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800f93a:	f003 fbf7 	bl	801312c <HAL_GetTick>
 800f93e:	0003      	movs	r3, r0
 800f940:	331e      	adds	r3, #30
 800f942:	001a      	movs	r2, r3
 800f944:	4b6c      	ldr	r3, [pc, #432]	@ (800faf8 <SGP_GetMeasurementValues+0x220>)
 800f946:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800f948:	4b68      	ldr	r3, [pc, #416]	@ (800faec <SGP_GetMeasurementValues+0x214>)
 800f94a:	2201      	movs	r2, #1
 800f94c:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800f94e:	4b66      	ldr	r3, [pc, #408]	@ (800fae8 <SGP_GetMeasurementValues+0x210>)
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d100      	bne.n	800f958 <SGP_GetMeasurementValues+0x80>
 800f956:	e0ab      	b.n	800fab0 <SGP_GetMeasurementValues+0x1d8>
 800f958:	f7ff ff94 	bl	800f884 <SGP_MeasurementReady>
 800f95c:	1e03      	subs	r3, r0, #0
 800f95e:	d100      	bne.n	800f962 <SGP_GetMeasurementValues+0x8a>
 800f960:	e0a6      	b.n	800fab0 <SGP_GetMeasurementValues+0x1d8>
 800f962:	4b67      	ldr	r3, [pc, #412]	@ (800fb00 <SGP_GetMeasurementValues+0x228>)
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	2201      	movs	r2, #1
 800f968:	4053      	eors	r3, r2
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d100      	bne.n	800f972 <SGP_GetMeasurementValues+0x9a>
 800f970:	e09e      	b.n	800fab0 <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800f972:	4b63      	ldr	r3, [pc, #396]	@ (800fb00 <SGP_GetMeasurementValues+0x228>)
 800f974:	2201      	movs	r2, #1
 800f976:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800f978:	4b62      	ldr	r3, [pc, #392]	@ (800fb04 <SGP_GetMeasurementValues+0x22c>)
 800f97a:	2203      	movs	r2, #3
 800f97c:	0019      	movs	r1, r3
 800f97e:	2059      	movs	r0, #89	@ 0x59
 800f980:	f7ff feb0 	bl	800f6e4 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800f984:	4b5f      	ldr	r3, [pc, #380]	@ (800fb04 <SGP_GetMeasurementValues+0x22c>)
 800f986:	2203      	movs	r2, #3
 800f988:	2103      	movs	r1, #3
 800f98a:	0018      	movs	r0, r3
 800f98c:	f000 f918 	bl	800fbc0 <CheckCRC>
 800f990:	0003      	movs	r3, r0
 800f992:	001a      	movs	r2, r3
 800f994:	2301      	movs	r3, #1
 800f996:	4053      	eors	r3, r2
 800f998:	b2db      	uxtb	r3, r3
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d02a      	beq.n	800f9f4 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800f99e:	4a5a      	ldr	r2, [pc, #360]	@ (800fb08 <SGP_GetMeasurementValues+0x230>)
 800f9a0:	4b5a      	ldr	r3, [pc, #360]	@ (800fb0c <SGP_GetMeasurementValues+0x234>)
 800f9a2:	0019      	movs	r1, r3
 800f9a4:	2001      	movs	r0, #1
 800f9a6:	f002 fe8b 	bl	80126c0 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800f9aa:	4a59      	ldr	r2, [pc, #356]	@ (800fb10 <SGP_GetMeasurementValues+0x238>)
 800f9ac:	4b59      	ldr	r3, [pc, #356]	@ (800fb14 <SGP_GetMeasurementValues+0x23c>)
 800f9ae:	0019      	movs	r1, r3
 800f9b0:	2002      	movs	r0, #2
 800f9b2:	f002 fe85 	bl	80126c0 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800f9b6:	230f      	movs	r3, #15
 800f9b8:	18fb      	adds	r3, r7, r3
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	701a      	strb	r2, [r3, #0]
 800f9be:	e012      	b.n	800f9e6 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800f9c0:	240f      	movs	r4, #15
 800f9c2:	193b      	adds	r3, r7, r4
 800f9c4:	7818      	ldrb	r0, [r3, #0]
 800f9c6:	193b      	adds	r3, r7, r4
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	4a4e      	ldr	r2, [pc, #312]	@ (800fb04 <SGP_GetMeasurementValues+0x22c>)
 800f9cc:	5cd3      	ldrb	r3, [r2, r3]
 800f9ce:	4a52      	ldr	r2, [pc, #328]	@ (800fb18 <SGP_GetMeasurementValues+0x240>)
 800f9d0:	4952      	ldr	r1, [pc, #328]	@ (800fb1c <SGP_GetMeasurementValues+0x244>)
 800f9d2:	9300      	str	r3, [sp, #0]
 800f9d4:	0003      	movs	r3, r0
 800f9d6:	2003      	movs	r0, #3
 800f9d8:	f002 fe72 	bl	80126c0 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800f9dc:	193b      	adds	r3, r7, r4
 800f9de:	781a      	ldrb	r2, [r3, #0]
 800f9e0:	193b      	adds	r3, r7, r4
 800f9e2:	3201      	adds	r2, #1
 800f9e4:	701a      	strb	r2, [r3, #0]
 800f9e6:	230f      	movs	r3, #15
 800f9e8:	18fb      	adds	r3, r7, r3
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	2b02      	cmp	r3, #2
 800f9ee:	d9e7      	bls.n	800f9c0 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	e075      	b.n	800fae0 <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800f9f4:	f003 fb9a 	bl	801312c <HAL_GetTick>
 800f9f8:	0003      	movs	r3, r0
 800f9fa:	22fa      	movs	r2, #250	@ 0xfa
 800f9fc:	0092      	lsls	r2, r2, #2
 800f9fe:	189a      	adds	r2, r3, r2
 800fa00:	4b47      	ldr	r3, [pc, #284]	@ (800fb20 <SGP_GetMeasurementValues+0x248>)
 800fa02:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800fa04:	f7ff ff5a 	bl	800f8bc <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800fa08:	4b46      	ldr	r3, [pc, #280]	@ (800fb24 <SGP_GetMeasurementValues+0x24c>)
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	b2da      	uxtb	r2, r3
 800fa10:	4b44      	ldr	r3, [pc, #272]	@ (800fb24 <SGP_GetMeasurementValues+0x24c>)
 800fa12:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800fa14:	4b43      	ldr	r3, [pc, #268]	@ (800fb24 <SGP_GetMeasurementValues+0x24c>)
 800fa16:	781a      	ldrb	r2, [r3, #0]
 800fa18:	4b43      	ldr	r3, [pc, #268]	@ (800fb28 <SGP_GetMeasurementValues+0x250>)
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d347      	bcc.n	800fab0 <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800fa20:	4b38      	ldr	r3, [pc, #224]	@ (800fb04 <SGP_GetMeasurementValues+0x22c>)
 800fa22:	785b      	ldrb	r3, [r3, #1]
 800fa24:	021b      	lsls	r3, r3, #8
 800fa26:	b21a      	sxth	r2, r3
 800fa28:	4b36      	ldr	r3, [pc, #216]	@ (800fb04 <SGP_GetMeasurementValues+0x22c>)
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	b21b      	sxth	r3, r3
 800fa2e:	4313      	orrs	r3, r2
 800fa30:	b21a      	sxth	r2, r3
 800fa32:	240c      	movs	r4, #12
 800fa34:	193b      	adds	r3, r7, r4
 800fa36:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800fa3c:	193b      	adds	r3, r7, r4
 800fa3e:	8819      	ldrh	r1, [r3, #0]
 800fa40:	2308      	movs	r3, #8
 800fa42:	18fa      	adds	r2, r7, r3
 800fa44:	4b39      	ldr	r3, [pc, #228]	@ (800fb2c <SGP_GetMeasurementValues+0x254>)
 800fa46:	0018      	movs	r0, r3
 800fa48:	f7fe fe88 	bl	800e75c <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800fa4c:	68ba      	ldr	r2, [r7, #8]
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800fa52:	4b37      	ldr	r3, [pc, #220]	@ (800fb30 <SGP_GetMeasurementValues+0x258>)
 800fa54:	781b      	ldrb	r3, [r3, #0]
 800fa56:	3301      	adds	r3, #1
 800fa58:	b2da      	uxtb	r2, r3
 800fa5a:	4b35      	ldr	r3, [pc, #212]	@ (800fb30 <SGP_GetMeasurementValues+0x258>)
 800fa5c:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800fa5e:	4b34      	ldr	r3, [pc, #208]	@ (800fb30 <SGP_GetMeasurementValues+0x258>)
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	2b01      	cmp	r3, #1
 800fa64:	d10d      	bne.n	800fa82 <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800fa66:	193b      	adds	r3, r7, r4
 800fa68:	881b      	ldrh	r3, [r3, #0]
 800fa6a:	4a32      	ldr	r2, [pc, #200]	@ (800fb34 <SGP_GetMeasurementValues+0x25c>)
 800fa6c:	492b      	ldr	r1, [pc, #172]	@ (800fb1c <SGP_GetMeasurementValues+0x244>)
 800fa6e:	2003      	movs	r0, #3
 800fa70:	f002 fe26 	bl	80126c0 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	4a30      	ldr	r2, [pc, #192]	@ (800fb38 <SGP_GetMeasurementValues+0x260>)
 800fa78:	4928      	ldr	r1, [pc, #160]	@ (800fb1c <SGP_GetMeasurementValues+0x244>)
 800fa7a:	2003      	movs	r0, #3
 800fa7c:	f002 fe20 	bl	80126c0 <CreateLine>
 800fa80:	e006      	b.n	800fa90 <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800fa82:	4b2b      	ldr	r3, [pc, #172]	@ (800fb30 <SGP_GetMeasurementValues+0x258>)
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	2b0b      	cmp	r3, #11
 800fa88:	d102      	bne.n	800fa90 <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800fa8a:	4b29      	ldr	r3, [pc, #164]	@ (800fb30 <SGP_GetMeasurementValues+0x258>)
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	b29b      	uxth	r3, r3
 800fa94:	0018      	movs	r0, r3
 800fa96:	f001 fdbb 	bl	8011610 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800fa9a:	4b22      	ldr	r3, [pc, #136]	@ (800fb24 <SGP_GetMeasurementValues+0x24c>)
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800faa0:	4b13      	ldr	r3, [pc, #76]	@ (800faf0 <SGP_GetMeasurementValues+0x218>)
 800faa2:	2200      	movs	r2, #0
 800faa4:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800faa6:	4b11      	ldr	r3, [pc, #68]	@ (800faec <SGP_GetMeasurementValues+0x214>)
 800faa8:	2200      	movs	r2, #0
 800faaa:	701a      	strb	r2, [r3, #0]
      return true;
 800faac:	2301      	movs	r3, #1
 800faae:	e017      	b.n	800fae0 <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800fab0:	f7ff fef6 	bl	800f8a0 <SGP_MeasurementDone>
 800fab4:	1e03      	subs	r3, r0, #0
 800fab6:	d012      	beq.n	800fade <SGP_GetMeasurementValues+0x206>
 800fab8:	4b0b      	ldr	r3, [pc, #44]	@ (800fae8 <SGP_GetMeasurementValues+0x210>)
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d00e      	beq.n	800fade <SGP_GetMeasurementValues+0x206>
 800fac0:	4b0f      	ldr	r3, [pc, #60]	@ (800fb00 <SGP_GetMeasurementValues+0x228>)
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d00a      	beq.n	800fade <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800fac8:	4a1c      	ldr	r2, [pc, #112]	@ (800fb3c <SGP_GetMeasurementValues+0x264>)
 800faca:	4b14      	ldr	r3, [pc, #80]	@ (800fb1c <SGP_GetMeasurementValues+0x244>)
 800facc:	0019      	movs	r1, r3
 800face:	2003      	movs	r0, #3
 800fad0:	f002 fdf6 	bl	80126c0 <CreateLine>
    SGP_StartMeasurement();
 800fad4:	f7ff fe90 	bl	800f7f8 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800fad8:	4b04      	ldr	r3, [pc, #16]	@ (800faec <SGP_GetMeasurementValues+0x214>)
 800fada:	2200      	movs	r2, #0
 800fadc:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	0018      	movs	r0, r3
 800fae2:	46bd      	mov	sp, r7
 800fae4:	b005      	add	sp, #20
 800fae6:	bd90      	pop	{r4, r7, pc}
 800fae8:	20000f2c 	.word	0x20000f2c
 800faec:	20000fd9 	.word	0x20000fd9
 800faf0:	20000fd8 	.word	0x20000fd8
 800faf4:	200000b0 	.word	0x200000b0
 800faf8:	200000c4 	.word	0x200000c4
 800fafc:	200000a8 	.word	0x200000a8
 800fb00:	20000f2d 	.word	0x20000f2d
 800fb04:	20000f1c 	.word	0x20000f1c
 800fb08:	0802c188 	.word	0x0802c188
 800fb0c:	0802c1b0 	.word	0x0802c1b0
 800fb10:	0802c1b4 	.word	0x0802c1b4
 800fb14:	0802c1d4 	.word	0x0802c1d4
 800fb18:	0802c1d8 	.word	0x0802c1d8
 800fb1c:	0802c1f8 	.word	0x0802c1f8
 800fb20:	200000c0 	.word	0x200000c0
 800fb24:	20000f25 	.word	0x20000f25
 800fb28:	200000ba 	.word	0x200000ba
 800fb2c:	20000f30 	.word	0x20000f30
 800fb30:	20000f26 	.word	0x20000f26
 800fb34:	0802c1fc 	.word	0x0802c1fc
 800fb38:	0802c218 	.word	0x0802c218
 800fb3c:	0802c234 	.word	0x0802c234

0800fb40 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800fb46:	4b1a      	ldr	r3, [pc, #104]	@ (800fbb0 <SGP_DeviceConnected+0x70>)
 800fb48:	2202      	movs	r2, #2
 800fb4a:	0019      	movs	r1, r3
 800fb4c:	2059      	movs	r0, #89	@ 0x59
 800fb4e:	f7ff fde7 	bl	800f720 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800fb52:	2001      	movs	r0, #1
 800fb54:	f003 faf4 	bl	8013140 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800fb58:	4b16      	ldr	r3, [pc, #88]	@ (800fbb4 <SGP_DeviceConnected+0x74>)
 800fb5a:	2209      	movs	r2, #9
 800fb5c:	0019      	movs	r1, r3
 800fb5e:	2059      	movs	r0, #89	@ 0x59
 800fb60:	f7ff fdc0 	bl	800f6e4 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800fb64:	1dfb      	adds	r3, r7, #7
 800fb66:	2200      	movs	r2, #0
 800fb68:	701a      	strb	r2, [r3, #0]
 800fb6a:	e011      	b.n	800fb90 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800fb6c:	1dfb      	adds	r3, r7, #7
 800fb6e:	7818      	ldrb	r0, [r3, #0]
 800fb70:	1dfb      	adds	r3, r7, #7
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	4a0f      	ldr	r2, [pc, #60]	@ (800fbb4 <SGP_DeviceConnected+0x74>)
 800fb76:	5cd3      	ldrb	r3, [r2, r3]
 800fb78:	4a0f      	ldr	r2, [pc, #60]	@ (800fbb8 <SGP_DeviceConnected+0x78>)
 800fb7a:	4910      	ldr	r1, [pc, #64]	@ (800fbbc <SGP_DeviceConnected+0x7c>)
 800fb7c:	9300      	str	r3, [sp, #0]
 800fb7e:	0003      	movs	r3, r0
 800fb80:	2002      	movs	r0, #2
 800fb82:	f002 fd9d 	bl	80126c0 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800fb86:	1dfb      	adds	r3, r7, #7
 800fb88:	781a      	ldrb	r2, [r3, #0]
 800fb8a:	1dfb      	adds	r3, r7, #7
 800fb8c:	3201      	adds	r2, #1
 800fb8e:	701a      	strb	r2, [r3, #0]
 800fb90:	1dfb      	adds	r3, r7, #7
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	2b08      	cmp	r3, #8
 800fb96:	d9e9      	bls.n	800fb6c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800fb98:	4b06      	ldr	r3, [pc, #24]	@ (800fbb4 <SGP_DeviceConnected+0x74>)
 800fb9a:	2203      	movs	r2, #3
 800fb9c:	2109      	movs	r1, #9
 800fb9e:	0018      	movs	r0, r3
 800fba0:	f000 f80e 	bl	800fbc0 <CheckCRC>
 800fba4:	0003      	movs	r3, r0
}
 800fba6:	0018      	movs	r0, r3
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	b002      	add	sp, #8
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	46c0      	nop			@ (mov r8, r8)
 800fbb0:	200000a4 	.word	0x200000a4
 800fbb4:	20000f1c 	.word	0x20000f1c
 800fbb8:	0802c254 	.word	0x0802c254
 800fbbc:	0802c1d4 	.word	0x0802c1d4

0800fbc0 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800fbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbc2:	b08f      	sub	sp, #60	@ 0x3c
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6278      	str	r0, [r7, #36]	@ 0x24
 800fbc8:	0008      	movs	r0, r1
 800fbca:	0011      	movs	r1, r2
 800fbcc:	2323      	movs	r3, #35	@ 0x23
 800fbce:	18fb      	adds	r3, r7, r3
 800fbd0:	1c02      	adds	r2, r0, #0
 800fbd2:	701a      	strb	r2, [r3, #0]
 800fbd4:	2322      	movs	r3, #34	@ 0x22
 800fbd6:	18fb      	adds	r3, r7, r3
 800fbd8:	1c0a      	adds	r2, r1, #0
 800fbda:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800fbdc:	2317      	movs	r3, #23
 800fbde:	2220      	movs	r2, #32
 800fbe0:	189b      	adds	r3, r3, r2
 800fbe2:	19db      	adds	r3, r3, r7
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	701a      	strb	r2, [r3, #0]
 800fbe8:	e09f      	b.n	800fd2a <CheckCRC+0x16a>
 800fbea:	466b      	mov	r3, sp
 800fbec:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800fbee:	2322      	movs	r3, #34	@ 0x22
 800fbf0:	18fb      	adds	r3, r7, r3
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	001a      	movs	r2, r3
 800fbf6:	3a01      	subs	r2, #1
 800fbf8:	633a      	str	r2, [r7, #48]	@ 0x30
 800fbfa:	60bb      	str	r3, [r7, #8]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	60fa      	str	r2, [r7, #12]
 800fc00:	68b8      	ldr	r0, [r7, #8]
 800fc02:	68f9      	ldr	r1, [r7, #12]
 800fc04:	0002      	movs	r2, r0
 800fc06:	0f52      	lsrs	r2, r2, #29
 800fc08:	000c      	movs	r4, r1
 800fc0a:	00e4      	lsls	r4, r4, #3
 800fc0c:	61fc      	str	r4, [r7, #28]
 800fc0e:	69fc      	ldr	r4, [r7, #28]
 800fc10:	4314      	orrs	r4, r2
 800fc12:	61fc      	str	r4, [r7, #28]
 800fc14:	0002      	movs	r2, r0
 800fc16:	00d2      	lsls	r2, r2, #3
 800fc18:	61ba      	str	r2, [r7, #24]
 800fc1a:	603b      	str	r3, [r7, #0]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	607a      	str	r2, [r7, #4]
 800fc20:	6838      	ldr	r0, [r7, #0]
 800fc22:	6879      	ldr	r1, [r7, #4]
 800fc24:	0002      	movs	r2, r0
 800fc26:	0f52      	lsrs	r2, r2, #29
 800fc28:	000c      	movs	r4, r1
 800fc2a:	00e4      	lsls	r4, r4, #3
 800fc2c:	617c      	str	r4, [r7, #20]
 800fc2e:	697c      	ldr	r4, [r7, #20]
 800fc30:	4314      	orrs	r4, r2
 800fc32:	617c      	str	r4, [r7, #20]
 800fc34:	0002      	movs	r2, r0
 800fc36:	00d2      	lsls	r2, r2, #3
 800fc38:	613a      	str	r2, [r7, #16]
 800fc3a:	3307      	adds	r3, #7
 800fc3c:	08db      	lsrs	r3, r3, #3
 800fc3e:	00db      	lsls	r3, r3, #3
 800fc40:	466a      	mov	r2, sp
 800fc42:	1ad3      	subs	r3, r2, r3
 800fc44:	469d      	mov	sp, r3
 800fc46:	466b      	mov	r3, sp
 800fc48:	3300      	adds	r3, #0
 800fc4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800fc4c:	2316      	movs	r3, #22
 800fc4e:	2220      	movs	r2, #32
 800fc50:	189b      	adds	r3, r3, r2
 800fc52:	19db      	adds	r3, r3, r7
 800fc54:	2200      	movs	r2, #0
 800fc56:	701a      	strb	r2, [r3, #0]
 800fc58:	e01e      	b.n	800fc98 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800fc5a:	2317      	movs	r3, #23
 800fc5c:	2220      	movs	r2, #32
 800fc5e:	189b      	adds	r3, r3, r2
 800fc60:	19db      	adds	r3, r3, r7
 800fc62:	781a      	ldrb	r2, [r3, #0]
 800fc64:	2116      	movs	r1, #22
 800fc66:	2320      	movs	r3, #32
 800fc68:	18cb      	adds	r3, r1, r3
 800fc6a:	19db      	adds	r3, r3, r7
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	18d3      	adds	r3, r2, r3
 800fc70:	001a      	movs	r2, r3
 800fc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc74:	189a      	adds	r2, r3, r2
 800fc76:	0008      	movs	r0, r1
 800fc78:	2320      	movs	r3, #32
 800fc7a:	18cb      	adds	r3, r1, r3
 800fc7c:	19db      	adds	r3, r3, r7
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	7811      	ldrb	r1, [r2, #0]
 800fc82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc84:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800fc86:	2320      	movs	r3, #32
 800fc88:	18c3      	adds	r3, r0, r3
 800fc8a:	19db      	adds	r3, r3, r7
 800fc8c:	781a      	ldrb	r2, [r3, #0]
 800fc8e:	2320      	movs	r3, #32
 800fc90:	18c3      	adds	r3, r0, r3
 800fc92:	19db      	adds	r3, r3, r7
 800fc94:	3201      	adds	r2, #1
 800fc96:	701a      	strb	r2, [r3, #0]
 800fc98:	2316      	movs	r3, #22
 800fc9a:	2220      	movs	r2, #32
 800fc9c:	189b      	adds	r3, r3, r2
 800fc9e:	19da      	adds	r2, r3, r7
 800fca0:	2322      	movs	r3, #34	@ 0x22
 800fca2:	18fb      	adds	r3, r7, r3
 800fca4:	7812      	ldrb	r2, [r2, #0]
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d3d6      	bcc.n	800fc5a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800fcac:	2417      	movs	r4, #23
 800fcae:	2320      	movs	r3, #32
 800fcb0:	18e3      	adds	r3, r4, r3
 800fcb2:	19db      	adds	r3, r3, r7
 800fcb4:	781a      	ldrb	r2, [r3, #0]
 800fcb6:	2322      	movs	r3, #34	@ 0x22
 800fcb8:	18fb      	adds	r3, r7, r3
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	18d3      	adds	r3, r2, r3
 800fcbe:	3b01      	subs	r3, #1
 800fcc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcc2:	18d2      	adds	r2, r2, r3
 800fcc4:	250b      	movs	r5, #11
 800fcc6:	2320      	movs	r3, #32
 800fcc8:	18eb      	adds	r3, r5, r3
 800fcca:	19db      	adds	r3, r3, r7
 800fccc:	7812      	ldrb	r2, [r2, #0]
 800fcce:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800fcd0:	2322      	movs	r3, #34	@ 0x22
 800fcd2:	18fb      	adds	r3, r7, r3
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	3b01      	subs	r3, #1
 800fcd8:	b2da      	uxtb	r2, r3
 800fcda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcdc:	0011      	movs	r1, r2
 800fcde:	0018      	movs	r0, r3
 800fce0:	f000 f838 	bl	800fd54 <CalculateCRC>
 800fce4:	0003      	movs	r3, r0
 800fce6:	001a      	movs	r2, r3
 800fce8:	2320      	movs	r3, #32
 800fcea:	18eb      	adds	r3, r5, r3
 800fcec:	19db      	adds	r3, r3, r7
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	d00c      	beq.n	800fd0e <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800fcf4:	2320      	movs	r3, #32
 800fcf6:	18e3      	adds	r3, r4, r3
 800fcf8:	19db      	adds	r3, r3, r7
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	4a13      	ldr	r2, [pc, #76]	@ (800fd4c <CheckCRC+0x18c>)
 800fd00:	4913      	ldr	r1, [pc, #76]	@ (800fd50 <CheckCRC+0x190>)
 800fd02:	2001      	movs	r0, #1
 800fd04:	f002 fcdc 	bl	80126c0 <CreateLine>
      return false;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	46b5      	mov	sp, r6
 800fd0c:	e019      	b.n	800fd42 <CheckCRC+0x182>
 800fd0e:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800fd10:	2217      	movs	r2, #23
 800fd12:	2320      	movs	r3, #32
 800fd14:	18d3      	adds	r3, r2, r3
 800fd16:	19db      	adds	r3, r3, r7
 800fd18:	2120      	movs	r1, #32
 800fd1a:	1852      	adds	r2, r2, r1
 800fd1c:	19d1      	adds	r1, r2, r7
 800fd1e:	2222      	movs	r2, #34	@ 0x22
 800fd20:	18ba      	adds	r2, r7, r2
 800fd22:	7809      	ldrb	r1, [r1, #0]
 800fd24:	7812      	ldrb	r2, [r2, #0]
 800fd26:	188a      	adds	r2, r1, r2
 800fd28:	701a      	strb	r2, [r3, #0]
 800fd2a:	2317      	movs	r3, #23
 800fd2c:	2220      	movs	r2, #32
 800fd2e:	189b      	adds	r3, r3, r2
 800fd30:	19da      	adds	r2, r3, r7
 800fd32:	2323      	movs	r3, #35	@ 0x23
 800fd34:	18fb      	adds	r3, r7, r3
 800fd36:	7812      	ldrb	r2, [r2, #0]
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d200      	bcs.n	800fd40 <CheckCRC+0x180>
 800fd3e:	e754      	b.n	800fbea <CheckCRC+0x2a>
    }
  }
  return true;
 800fd40:	2301      	movs	r3, #1
}
 800fd42:	0018      	movs	r0, r3
 800fd44:	46bd      	mov	sp, r7
 800fd46:	b00f      	add	sp, #60	@ 0x3c
 800fd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd4a:	46c0      	nop			@ (mov r8, r8)
 800fd4c:	0802c274 	.word	0x0802c274
 800fd50:	0802c1b0 	.word	0x0802c1b0

0800fd54 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b084      	sub	sp, #16
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	000a      	movs	r2, r1
 800fd5e:	1cfb      	adds	r3, r7, #3
 800fd60:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800fd62:	230f      	movs	r3, #15
 800fd64:	18fb      	adds	r3, r7, r3
 800fd66:	22ff      	movs	r2, #255	@ 0xff
 800fd68:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800fd6a:	230e      	movs	r3, #14
 800fd6c:	18fb      	adds	r3, r7, r3
 800fd6e:	2200      	movs	r2, #0
 800fd70:	701a      	strb	r2, [r3, #0]
 800fd72:	e037      	b.n	800fde4 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800fd74:	230e      	movs	r3, #14
 800fd76:	18fb      	adds	r3, r7, r3
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	18d3      	adds	r3, r2, r3
 800fd7e:	7819      	ldrb	r1, [r3, #0]
 800fd80:	220f      	movs	r2, #15
 800fd82:	18bb      	adds	r3, r7, r2
 800fd84:	18ba      	adds	r2, r7, r2
 800fd86:	7812      	ldrb	r2, [r2, #0]
 800fd88:	404a      	eors	r2, r1
 800fd8a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800fd8c:	230d      	movs	r3, #13
 800fd8e:	18fb      	adds	r3, r7, r3
 800fd90:	2200      	movs	r2, #0
 800fd92:	701a      	strb	r2, [r3, #0]
 800fd94:	e01b      	b.n	800fdce <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800fd96:	210f      	movs	r1, #15
 800fd98:	187b      	adds	r3, r7, r1
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	b25b      	sxtb	r3, r3
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	da09      	bge.n	800fdb6 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800fda2:	187b      	adds	r3, r7, r1
 800fda4:	781b      	ldrb	r3, [r3, #0]
 800fda6:	005b      	lsls	r3, r3, #1
 800fda8:	b25b      	sxtb	r3, r3
 800fdaa:	2231      	movs	r2, #49	@ 0x31
 800fdac:	4053      	eors	r3, r2
 800fdae:	b25a      	sxtb	r2, r3
 800fdb0:	187b      	adds	r3, r7, r1
 800fdb2:	701a      	strb	r2, [r3, #0]
 800fdb4:	e005      	b.n	800fdc2 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800fdb6:	230f      	movs	r3, #15
 800fdb8:	18fa      	adds	r2, r7, r3
 800fdba:	18fb      	adds	r3, r7, r3
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	18db      	adds	r3, r3, r3
 800fdc0:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800fdc2:	210d      	movs	r1, #13
 800fdc4:	187b      	adds	r3, r7, r1
 800fdc6:	781a      	ldrb	r2, [r3, #0]
 800fdc8:	187b      	adds	r3, r7, r1
 800fdca:	3201      	adds	r2, #1
 800fdcc:	701a      	strb	r2, [r3, #0]
 800fdce:	230d      	movs	r3, #13
 800fdd0:	18fb      	adds	r3, r7, r3
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	2b07      	cmp	r3, #7
 800fdd6:	d9de      	bls.n	800fd96 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800fdd8:	210e      	movs	r1, #14
 800fdda:	187b      	adds	r3, r7, r1
 800fddc:	781a      	ldrb	r2, [r3, #0]
 800fdde:	187b      	adds	r3, r7, r1
 800fde0:	3201      	adds	r2, #1
 800fde2:	701a      	strb	r2, [r3, #0]
 800fde4:	230e      	movs	r3, #14
 800fde6:	18fa      	adds	r2, r7, r3
 800fde8:	1cfb      	adds	r3, r7, #3
 800fdea:	7812      	ldrb	r2, [r2, #0]
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d3c0      	bcc.n	800fd74 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800fdf2:	230f      	movs	r3, #15
 800fdf4:	18fb      	adds	r3, r7, r3
 800fdf6:	781b      	ldrb	r3, [r3, #0]
}
 800fdf8:	0018      	movs	r0, r3
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	b004      	add	sp, #16
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4936      	ldr	r1, [pc, #216]	@ (800fee8 <SGP_SetHT+0xe8>)
 800fe10:	1c18      	adds	r0, r3, #0
 800fe12:	f7f0 fd55 	bl	80008c0 <__aeabi_fadd>
 800fe16:	1c03      	adds	r3, r0, #0
 800fe18:	4934      	ldr	r1, [pc, #208]	@ (800feec <SGP_SetHT+0xec>)
 800fe1a:	1c18      	adds	r0, r3, #0
 800fe1c:	f7f0 feda 	bl	8000bd4 <__aeabi_fdiv>
 800fe20:	1c03      	adds	r3, r0, #0
 800fe22:	4933      	ldr	r1, [pc, #204]	@ (800fef0 <SGP_SetHT+0xf0>)
 800fe24:	1c18      	adds	r0, r3, #0
 800fe26:	f7f1 f8bb 	bl	8000fa0 <__aeabi_fmul>
 800fe2a:	1c03      	adds	r3, r0, #0
 800fe2c:	1c18      	adds	r0, r3, #0
 800fe2e:	f7f0 fbf5 	bl	800061c <__aeabi_f2uiz>
 800fe32:	0003      	movs	r3, r0
 800fe34:	b29a      	uxth	r2, r3
 800fe36:	4b2f      	ldr	r3, [pc, #188]	@ (800fef4 <SGP_SetHT+0xf4>)
 800fe38:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	492e      	ldr	r1, [pc, #184]	@ (800fef8 <SGP_SetHT+0xf8>)
 800fe40:	1c18      	adds	r0, r3, #0
 800fe42:	f7f0 fec7 	bl	8000bd4 <__aeabi_fdiv>
 800fe46:	1c03      	adds	r3, r0, #0
 800fe48:	4929      	ldr	r1, [pc, #164]	@ (800fef0 <SGP_SetHT+0xf0>)
 800fe4a:	1c18      	adds	r0, r3, #0
 800fe4c:	f7f1 f8a8 	bl	8000fa0 <__aeabi_fmul>
 800fe50:	1c03      	adds	r3, r0, #0
 800fe52:	1c18      	adds	r0, r3, #0
 800fe54:	f7f0 fbe2 	bl	800061c <__aeabi_f2uiz>
 800fe58:	0003      	movs	r3, r0
 800fe5a:	b29a      	uxth	r2, r3
 800fe5c:	4b27      	ldr	r3, [pc, #156]	@ (800fefc <SGP_SetHT+0xfc>)
 800fe5e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800fe60:	4b26      	ldr	r3, [pc, #152]	@ (800fefc <SGP_SetHT+0xfc>)
 800fe62:	881b      	ldrh	r3, [r3, #0]
 800fe64:	0a1b      	lsrs	r3, r3, #8
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	b2da      	uxtb	r2, r3
 800fe6a:	4b25      	ldr	r3, [pc, #148]	@ (800ff00 <SGP_SetHT+0x100>)
 800fe6c:	709a      	strb	r2, [r3, #2]
 800fe6e:	4b24      	ldr	r3, [pc, #144]	@ (800ff00 <SGP_SetHT+0x100>)
 800fe70:	789a      	ldrb	r2, [r3, #2]
 800fe72:	210c      	movs	r1, #12
 800fe74:	187b      	adds	r3, r7, r1
 800fe76:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800fe78:	4b20      	ldr	r3, [pc, #128]	@ (800fefc <SGP_SetHT+0xfc>)
 800fe7a:	881b      	ldrh	r3, [r3, #0]
 800fe7c:	b2da      	uxtb	r2, r3
 800fe7e:	4b20      	ldr	r3, [pc, #128]	@ (800ff00 <SGP_SetHT+0x100>)
 800fe80:	70da      	strb	r2, [r3, #3]
 800fe82:	4b1f      	ldr	r3, [pc, #124]	@ (800ff00 <SGP_SetHT+0x100>)
 800fe84:	78da      	ldrb	r2, [r3, #3]
 800fe86:	187b      	adds	r3, r7, r1
 800fe88:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800fe8a:	187b      	adds	r3, r7, r1
 800fe8c:	2102      	movs	r1, #2
 800fe8e:	0018      	movs	r0, r3
 800fe90:	f7ff ff60 	bl	800fd54 <CalculateCRC>
 800fe94:	0003      	movs	r3, r0
 800fe96:	001a      	movs	r2, r3
 800fe98:	4b19      	ldr	r3, [pc, #100]	@ (800ff00 <SGP_SetHT+0x100>)
 800fe9a:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800fe9c:	4b15      	ldr	r3, [pc, #84]	@ (800fef4 <SGP_SetHT+0xf4>)
 800fe9e:	881b      	ldrh	r3, [r3, #0]
 800fea0:	0a1b      	lsrs	r3, r3, #8
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	b2da      	uxtb	r2, r3
 800fea6:	4b16      	ldr	r3, [pc, #88]	@ (800ff00 <SGP_SetHT+0x100>)
 800fea8:	715a      	strb	r2, [r3, #5]
 800feaa:	4b15      	ldr	r3, [pc, #84]	@ (800ff00 <SGP_SetHT+0x100>)
 800feac:	795a      	ldrb	r2, [r3, #5]
 800feae:	2108      	movs	r1, #8
 800feb0:	187b      	adds	r3, r7, r1
 800feb2:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800feb4:	4b0f      	ldr	r3, [pc, #60]	@ (800fef4 <SGP_SetHT+0xf4>)
 800feb6:	881b      	ldrh	r3, [r3, #0]
 800feb8:	b2da      	uxtb	r2, r3
 800feba:	4b11      	ldr	r3, [pc, #68]	@ (800ff00 <SGP_SetHT+0x100>)
 800febc:	719a      	strb	r2, [r3, #6]
 800febe:	4b10      	ldr	r3, [pc, #64]	@ (800ff00 <SGP_SetHT+0x100>)
 800fec0:	799a      	ldrb	r2, [r3, #6]
 800fec2:	187b      	adds	r3, r7, r1
 800fec4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800fec6:	187b      	adds	r3, r7, r1
 800fec8:	2102      	movs	r1, #2
 800feca:	0018      	movs	r0, r3
 800fecc:	f7ff ff42 	bl	800fd54 <CalculateCRC>
 800fed0:	0003      	movs	r3, r0
 800fed2:	001a      	movs	r2, r3
 800fed4:	4b0a      	ldr	r3, [pc, #40]	@ (800ff00 <SGP_SetHT+0x100>)
 800fed6:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800fed8:	4b0a      	ldr	r3, [pc, #40]	@ (800ff04 <SGP_SetHT+0x104>)
 800feda:	2201      	movs	r2, #1
 800fedc:	701a      	strb	r2, [r3, #0]
}
 800fede:	46c0      	nop			@ (mov r8, r8)
 800fee0:	46bd      	mov	sp, r7
 800fee2:	b004      	add	sp, #16
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	46c0      	nop			@ (mov r8, r8)
 800fee8:	42340000 	.word	0x42340000
 800feec:	432f0000 	.word	0x432f0000
 800fef0:	477fff00 	.word	0x477fff00
 800fef4:	20000fd6 	.word	0x20000fd6
 800fef8:	42c80000 	.word	0x42c80000
 800fefc:	20000fd4 	.word	0x20000fd4
 800ff00:	200000b0 	.word	0x200000b0
 800ff04:	20000fd8 	.word	0x20000fd8

0800ff08 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800ff0c:	4a09      	ldr	r2, [pc, #36]	@ (800ff34 <SGP_SoftReset+0x2c>)
 800ff0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ff38 <SGP_SoftReset+0x30>)
 800ff10:	0019      	movs	r1, r3
 800ff12:	2003      	movs	r0, #3
 800ff14:	f002 fbd4 	bl	80126c0 <CreateLine>
  SGP_TurnHeaterOff();
 800ff18:	f7ff fcd0 	bl	800f8bc <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800ff1c:	200a      	movs	r0, #10
 800ff1e:	f003 f90f 	bl	8013140 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800ff22:	4b06      	ldr	r3, [pc, #24]	@ (800ff3c <SGP_SoftReset+0x34>)
 800ff24:	2202      	movs	r2, #2
 800ff26:	0019      	movs	r1, r3
 800ff28:	2059      	movs	r0, #89	@ 0x59
 800ff2a:	f7ff fbf9 	bl	800f720 <WriteRegister>
}
 800ff2e:	46c0      	nop			@ (mov r8, r8)
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}
 800ff34:	0802c31c 	.word	0x0802c31c
 800ff38:	0802c1f8 	.word	0x0802c1f8
 800ff3c:	200000b8 	.word	0x200000b8

0800ff40 <ResetVOCresult>:

void ResetVOCresult(void) {
 800ff40:	b580      	push	{r7, lr}
 800ff42:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800ff44:	4b02      	ldr	r3, [pc, #8]	@ (800ff50 <ResetVOCresult+0x10>)
 800ff46:	2200      	movs	r2, #0
 800ff48:	601a      	str	r2, [r3, #0]
}
 800ff4a:	46c0      	nop			@ (mov r8, r8)
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	20000fdc 	.word	0x20000fdc

0800ff54 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800ff54:	b580      	push	{r7, lr}
 800ff56:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800ff58:	4b48      	ldr	r3, [pc, #288]	@ (801007c <SGP_Upkeep+0x128>)
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	2b07      	cmp	r3, #7
 800ff5e:	d900      	bls.n	800ff62 <SGP_Upkeep+0xe>
 800ff60:	e074      	b.n	801004c <SGP_Upkeep+0xf8>
 800ff62:	009a      	lsls	r2, r3, #2
 800ff64:	4b46      	ldr	r3, [pc, #280]	@ (8010080 <SGP_Upkeep+0x12c>)
 800ff66:	18d3      	adds	r3, r2, r3
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800ff6c:	4a45      	ldr	r2, [pc, #276]	@ (8010084 <SGP_Upkeep+0x130>)
 800ff6e:	4b46      	ldr	r3, [pc, #280]	@ (8010088 <SGP_Upkeep+0x134>)
 800ff70:	0019      	movs	r1, r3
 800ff72:	2003      	movs	r0, #3
 800ff74:	f002 fba4 	bl	80126c0 <CreateLine>
    break;
 800ff78:	e07b      	b.n	8010072 <SGP_Upkeep+0x11e>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800ff7a:	f7ff ffe1 	bl	800ff40 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800ff7e:	4b3f      	ldr	r3, [pc, #252]	@ (801007c <SGP_Upkeep+0x128>)
 800ff80:	2201      	movs	r2, #1
 800ff82:	701a      	strb	r2, [r3, #0]
    break;
 800ff84:	e075      	b.n	8010072 <SGP_Upkeep+0x11e>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800ff86:	f7fc fc8d 	bl	800c8a4 <getSensorLock>
 800ff8a:	1e03      	subs	r3, r0, #0
 800ff8c:	d000      	beq.n	800ff90 <SGP_Upkeep+0x3c>
 800ff8e:	e069      	b.n	8010064 <SGP_Upkeep+0x110>
      break;
    }
    setSensorLock(SGP40);
 800ff90:	2002      	movs	r0, #2
 800ff92:	f7fc fc73 	bl	800c87c <setSensorLock>
    SetMeasurementIndicator();
 800ff96:	f001 f981 	bl	801129c <SetMeasurementIndicator>
    SGP_StartMeasurement();
 800ff9a:	f7ff fc2d 	bl	800f7f8 <SGP_StartMeasurement>
    setSensorLock(FREE);
 800ff9e:	2000      	movs	r0, #0
 800ffa0:	f7fc fc6c 	bl	800c87c <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800ffa4:	4b35      	ldr	r3, [pc, #212]	@ (801007c <SGP_Upkeep+0x128>)
 800ffa6:	2202      	movs	r2, #2
 800ffa8:	701a      	strb	r2, [r3, #0]
    break;
 800ffaa:	e062      	b.n	8010072 <SGP_Upkeep+0x11e>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 800ffac:	f7fc fc7a 	bl	800c8a4 <getSensorLock>
 800ffb0:	1e03      	subs	r3, r0, #0
 800ffb2:	d159      	bne.n	8010068 <SGP_Upkeep+0x114>
      break;
    }
    setSensorLock(SGP40);
 800ffb4:	2002      	movs	r0, #2
 800ffb6:	f7fc fc61 	bl	800c87c <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800ffba:	4b34      	ldr	r3, [pc, #208]	@ (801008c <SGP_Upkeep+0x138>)
 800ffbc:	0018      	movs	r0, r3
 800ffbe:	f7ff fc8b 	bl	800f8d8 <SGP_GetMeasurementValues>
 800ffc2:	1e03      	subs	r3, r0, #0
 800ffc4:	d002      	beq.n	800ffcc <SGP_Upkeep+0x78>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800ffc6:	4b2d      	ldr	r3, [pc, #180]	@ (801007c <SGP_Upkeep+0x128>)
 800ffc8:	2203      	movs	r2, #3
 800ffca:	701a      	strb	r2, [r3, #0]
    }
    setSensorLock(FREE);
 800ffcc:	2000      	movs	r0, #0
 800ffce:	f7fc fc55 	bl	800c87c <setSensorLock>
    break;
 800ffd2:	e04e      	b.n	8010072 <SGP_Upkeep+0x11e>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800ffd4:	4b2d      	ldr	r3, [pc, #180]	@ (801008c <SGP_Upkeep+0x138>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	0018      	movs	r0, r3
 800ffdc:	f7f4 fb16 	bl	800460c <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800ffe0:	4b26      	ldr	r3, [pc, #152]	@ (801007c <SGP_Upkeep+0x128>)
 800ffe2:	2206      	movs	r2, #6
 800ffe4:	701a      	strb	r2, [r3, #0]
    break;
 800ffe6:	e044      	b.n	8010072 <SGP_Upkeep+0x11e>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800ffe8:	4b24      	ldr	r3, [pc, #144]	@ (801007c <SGP_Upkeep+0x128>)
 800ffea:	2207      	movs	r2, #7
 800ffec:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 800ffee:	4b28      	ldr	r3, [pc, #160]	@ (8010090 <SGP_Upkeep+0x13c>)
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	2b03      	cmp	r3, #3
 800fff4:	d912      	bls.n	801001c <SGP_Upkeep+0xc8>
 800fff6:	4b27      	ldr	r3, [pc, #156]	@ (8010094 <SGP_Upkeep+0x140>)
 800fff8:	781b      	ldrb	r3, [r3, #0]
 800fffa:	2201      	movs	r2, #1
 800fffc:	4053      	eors	r3, r2
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	2b00      	cmp	r3, #0
 8010002:	d00b      	beq.n	801001c <SGP_Upkeep+0xc8>
      // During startup take 12 samples
      if (sgpinitdone) {
 8010004:	4b24      	ldr	r3, [pc, #144]	@ (8010098 <SGP_Upkeep+0x144>)
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d004      	beq.n	8010016 <SGP_Upkeep+0xc2>
        SGP_SoftReset();
 801000c:	f7ff ff7c 	bl	800ff08 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 8010010:	2000      	movs	r0, #0
 8010012:	f7fc f861 	bl	800c0d8 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 8010016:	4b20      	ldr	r3, [pc, #128]	@ (8010098 <SGP_Upkeep+0x144>)
 8010018:	2201      	movs	r2, #1
 801001a:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 801001c:	f003 f886 	bl	801312c <HAL_GetTick>
 8010020:	0003      	movs	r3, r0
 8010022:	22c8      	movs	r2, #200	@ 0xc8
 8010024:	0092      	lsls	r2, r2, #2
 8010026:	189a      	adds	r2, r3, r2
 8010028:	4b1c      	ldr	r3, [pc, #112]	@ (801009c <SGP_Upkeep+0x148>)
 801002a:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 801002c:	f001 f94e 	bl	80112cc <ResetMeasurementIndicator>
  break;
 8010030:	e01f      	b.n	8010072 <SGP_Upkeep+0x11e>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 8010032:	4b1a      	ldr	r3, [pc, #104]	@ (801009c <SGP_Upkeep+0x148>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	0018      	movs	r0, r3
 8010038:	f002 faec 	bl	8012614 <TimestampIsReached>
 801003c:	1e03      	subs	r3, r0, #0
 801003e:	d015      	beq.n	801006c <SGP_Upkeep+0x118>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 8010040:	f7ff fbc2 	bl	800f7c8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 8010044:	4b0d      	ldr	r3, [pc, #52]	@ (801007c <SGP_Upkeep+0x128>)
 8010046:	2200      	movs	r2, #0
 8010048:	701a      	strb	r2, [r3, #0]
    }
    break;
 801004a:	e00f      	b.n	801006c <SGP_Upkeep+0x118>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 801004c:	4b0b      	ldr	r3, [pc, #44]	@ (801007c <SGP_Upkeep+0x128>)
 801004e:	2200      	movs	r2, #0
 8010050:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 8010052:	f7fc fc27 	bl	800c8a4 <getSensorLock>
 8010056:	0003      	movs	r3, r0
 8010058:	2b02      	cmp	r3, #2
 801005a:	d109      	bne.n	8010070 <SGP_Upkeep+0x11c>
      setSensorLock(FREE);
 801005c:	2000      	movs	r0, #0
 801005e:	f7fc fc0d 	bl	800c87c <setSensorLock>
    }
    break;
 8010062:	e005      	b.n	8010070 <SGP_Upkeep+0x11c>
      break;
 8010064:	46c0      	nop			@ (mov r8, r8)
 8010066:	e004      	b.n	8010072 <SGP_Upkeep+0x11e>
      break;
 8010068:	46c0      	nop			@ (mov r8, r8)
 801006a:	e002      	b.n	8010072 <SGP_Upkeep+0x11e>
    break;
 801006c:	46c0      	nop			@ (mov r8, r8)
 801006e:	e000      	b.n	8010072 <SGP_Upkeep+0x11e>
    break;
 8010070:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 8010072:	4b02      	ldr	r3, [pc, #8]	@ (801007c <SGP_Upkeep+0x128>)
 8010074:	781b      	ldrb	r3, [r3, #0]
}
 8010076:	0018      	movs	r0, r3
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	20000fe0 	.word	0x20000fe0
 8010080:	0802cb5c 	.word	0x0802cb5c
 8010084:	0802c334 	.word	0x0802c334
 8010088:	0802c1f8 	.word	0x0802c1f8
 801008c:	20000fdc 	.word	0x20000fdc
 8010090:	20000f26 	.word	0x20000f26
 8010094:	20001e7d 	.word	0x20001e7d
 8010098:	20000f10 	.word	0x20000f10
 801009c:	20000f28 	.word	0x20000f28

080100a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	0002      	movs	r2, r0
 80100a8:	1dfb      	adds	r3, r7, #7
 80100aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80100ac:	1dfb      	adds	r3, r7, #7
 80100ae:	781b      	ldrb	r3, [r3, #0]
 80100b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80100b2:	d809      	bhi.n	80100c8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80100b4:	1dfb      	adds	r3, r7, #7
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	001a      	movs	r2, r3
 80100ba:	231f      	movs	r3, #31
 80100bc:	401a      	ands	r2, r3
 80100be:	4b04      	ldr	r3, [pc, #16]	@ (80100d0 <__NVIC_EnableIRQ+0x30>)
 80100c0:	2101      	movs	r1, #1
 80100c2:	4091      	lsls	r1, r2
 80100c4:	000a      	movs	r2, r1
 80100c6:	601a      	str	r2, [r3, #0]
  }
}
 80100c8:	46c0      	nop			@ (mov r8, r8)
 80100ca:	46bd      	mov	sp, r7
 80100cc:	b002      	add	sp, #8
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	e000e100 	.word	0xe000e100

080100d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	af00      	add	r7, sp, #0
 80100da:	0002      	movs	r2, r0
 80100dc:	1dfb      	adds	r3, r7, #7
 80100de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80100e0:	1dfb      	adds	r3, r7, #7
 80100e2:	781b      	ldrb	r3, [r3, #0]
 80100e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80100e6:	d810      	bhi.n	801010a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80100e8:	1dfb      	adds	r3, r7, #7
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	001a      	movs	r2, r3
 80100ee:	231f      	movs	r3, #31
 80100f0:	4013      	ands	r3, r2
 80100f2:	4908      	ldr	r1, [pc, #32]	@ (8010114 <__NVIC_DisableIRQ+0x40>)
 80100f4:	2201      	movs	r2, #1
 80100f6:	409a      	lsls	r2, r3
 80100f8:	0013      	movs	r3, r2
 80100fa:	2280      	movs	r2, #128	@ 0x80
 80100fc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80100fe:	f3bf 8f4f 	dsb	sy
}
 8010102:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8010104:	f3bf 8f6f 	isb	sy
}
 8010108:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 801010a:	46c0      	nop			@ (mov r8, r8)
 801010c:	46bd      	mov	sp, r7
 801010e:	b002      	add	sp, #8
 8010110:	bd80      	pop	{r7, pc}
 8010112:	46c0      	nop			@ (mov r8, r8)
 8010114:	e000e100 	.word	0xe000e100

08010118 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8010118:	b5b0      	push	{r4, r5, r7, lr}
 801011a:	b088      	sub	sp, #32
 801011c:	af02      	add	r7, sp, #8
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	0008      	movs	r0, r1
 8010122:	0011      	movs	r1, r2
 8010124:	1cfb      	adds	r3, r7, #3
 8010126:	1c02      	adds	r2, r0, #0
 8010128:	701a      	strb	r2, [r3, #0]
 801012a:	1cbb      	adds	r3, r7, #2
 801012c:	1c0a      	adds	r2, r1, #0
 801012e:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8010130:	4b5b      	ldr	r3, [pc, #364]	@ (80102a0 <getSoundData+0x188>)
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	b2db      	uxtb	r3, r3
 8010136:	2201      	movs	r2, #1
 8010138:	4053      	eors	r3, r2
 801013a:	b2db      	uxtb	r3, r3
 801013c:	2b00      	cmp	r3, #0
 801013e:	d107      	bne.n	8010150 <getSoundData+0x38>
 8010140:	4b58      	ldr	r3, [pc, #352]	@ (80102a4 <getSoundData+0x18c>)
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	b2db      	uxtb	r3, r3
 8010146:	2201      	movs	r2, #1
 8010148:	4053      	eors	r3, r2
 801014a:	b2db      	uxtb	r3, r3
 801014c:	2b00      	cmp	r3, #0
 801014e:	d001      	beq.n	8010154 <getSoundData+0x3c>
    {
        return false;
 8010150:	2300      	movs	r3, #0
 8010152:	e0a0      	b.n	8010296 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8010154:	4b54      	ldr	r3, [pc, #336]	@ (80102a8 <getSoundData+0x190>)
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	b2db      	uxtb	r3, r3
 801015a:	2b00      	cmp	r3, #0
 801015c:	d005      	beq.n	801016a <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 801015e:	4b53      	ldr	r3, [pc, #332]	@ (80102ac <getSoundData+0x194>)
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	b25b      	sxtb	r3, r3
 8010164:	0018      	movs	r0, r3
 8010166:	f7ff ffb5 	bl	80100d4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 801016a:	f3bf 8f4f 	dsb	sy
}
 801016e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8010170:	f3bf 8f6f 	isb	sy
}
 8010174:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 8010176:	1cfb      	adds	r3, r7, #3
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d04c      	beq.n	8010218 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 801017e:	4b4c      	ldr	r3, [pc, #304]	@ (80102b0 <getSoundData+0x198>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d11b      	bne.n	80101be <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2200      	movs	r2, #0
 801018a:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2200      	movs	r2, #0
 8010190:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010192:	2300      	movs	r3, #0
 8010194:	617b      	str	r3, [r7, #20]
 8010196:	e00e      	b.n	80101b6 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8010198:	687a      	ldr	r2, [r7, #4]
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	18d3      	adds	r3, r2, r3
 801019e:	3302      	adds	r3, #2
 80101a0:	2200      	movs	r2, #0
 80101a2:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	18d3      	adds	r3, r2, r3
 80101aa:	3308      	adds	r3, #8
 80101ac:	2200      	movs	r2, #0
 80101ae:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	3301      	adds	r3, #1
 80101b4:	617b      	str	r3, [r7, #20]
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	2b05      	cmp	r3, #5
 80101ba:	d9ed      	bls.n	8010198 <getSoundData+0x80>
 80101bc:	e02c      	b.n	8010218 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	1c59      	adds	r1, r3, #1
 80101c4:	4b3b      	ldr	r3, [pc, #236]	@ (80102b4 <getSoundData+0x19c>)
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	4b3b      	ldr	r3, [pc, #236]	@ (80102b8 <getSoundData+0x1a0>)
 80101ca:	681c      	ldr	r4, [r3, #0]
 80101cc:	4b38      	ldr	r3, [pc, #224]	@ (80102b0 <getSoundData+0x198>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	9300      	str	r3, [sp, #0]
 80101d2:	0023      	movs	r3, r4
 80101d4:	f000 fde8 	bl	8010da8 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80101d8:	2300      	movs	r3, #0
 80101da:	613b      	str	r3, [r7, #16]
 80101dc:	e019      	b.n	8010212 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	18d3      	adds	r3, r2, r3
 80101e4:	1c98      	adds	r0, r3, #2
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	3308      	adds	r3, #8
 80101ea:	687a      	ldr	r2, [r7, #4]
 80101ec:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 80101ee:	4b33      	ldr	r3, [pc, #204]	@ (80102bc <getSoundData+0x1a4>)
 80101f0:	693a      	ldr	r2, [r7, #16]
 80101f2:	0092      	lsls	r2, r2, #2
 80101f4:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 80101f6:	4b32      	ldr	r3, [pc, #200]	@ (80102c0 <getSoundData+0x1a8>)
 80101f8:	693a      	ldr	r2, [r7, #16]
 80101fa:	0092      	lsls	r2, r2, #2
 80101fc:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 80101fe:	4b2c      	ldr	r3, [pc, #176]	@ (80102b0 <getSoundData+0x198>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	9300      	str	r3, [sp, #0]
 8010204:	0013      	movs	r3, r2
 8010206:	0022      	movs	r2, r4
 8010208:	f000 fdce 	bl	8010da8 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	3301      	adds	r3, #1
 8010210:	613b      	str	r3, [r7, #16]
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	2b05      	cmp	r3, #5
 8010216:	d9e2      	bls.n	80101de <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8010218:	1cbb      	adds	r3, r7, #2
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d028      	beq.n	8010272 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8010220:	240e      	movs	r4, #14
 8010222:	193b      	adds	r3, r7, r4
 8010224:	2200      	movs	r2, #0
 8010226:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8010228:	250d      	movs	r5, #13
 801022a:	197b      	adds	r3, r7, r5
 801022c:	2200      	movs	r2, #0
 801022e:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8010230:	4b24      	ldr	r3, [pc, #144]	@ (80102c4 <getSoundData+0x1ac>)
 8010232:	6818      	ldr	r0, [r3, #0]
 8010234:	4924      	ldr	r1, [pc, #144]	@ (80102c8 <getSoundData+0x1b0>)
 8010236:	197b      	adds	r3, r7, r5
 8010238:	193a      	adds	r2, r7, r4
 801023a:	f000 fe59 	bl	8010ef0 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 801023e:	193b      	adds	r3, r7, r4
 8010240:	881a      	ldrh	r2, [r3, #0]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	21ff      	movs	r1, #255	@ 0xff
 8010246:	4011      	ands	r1, r2
 8010248:	000c      	movs	r4, r1
 801024a:	7b99      	ldrb	r1, [r3, #14]
 801024c:	2000      	movs	r0, #0
 801024e:	4001      	ands	r1, r0
 8010250:	1c08      	adds	r0, r1, #0
 8010252:	1c21      	adds	r1, r4, #0
 8010254:	4301      	orrs	r1, r0
 8010256:	7399      	strb	r1, [r3, #14]
 8010258:	0a12      	lsrs	r2, r2, #8
 801025a:	b290      	uxth	r0, r2
 801025c:	7bda      	ldrb	r2, [r3, #15]
 801025e:	2100      	movs	r1, #0
 8010260:	400a      	ands	r2, r1
 8010262:	1c11      	adds	r1, r2, #0
 8010264:	1c02      	adds	r2, r0, #0
 8010266:	430a      	orrs	r2, r1
 8010268:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 801026a:	197b      	adds	r3, r7, r5
 801026c:	781a      	ldrb	r2, [r3, #0]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8010272:	f000 f86f 	bl	8010354 <micSettlingComplete>
 8010276:	0003      	movs	r3, r0
 8010278:	001a      	movs	r2, r3
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 801027e:	4b0a      	ldr	r3, [pc, #40]	@ (80102a8 <getSoundData+0x190>)
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	b2db      	uxtb	r3, r3
 8010284:	2b00      	cmp	r3, #0
 8010286:	d005      	beq.n	8010294 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8010288:	4b08      	ldr	r3, [pc, #32]	@ (80102ac <getSoundData+0x194>)
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	b25b      	sxtb	r3, r3
 801028e:	0018      	movs	r0, r3
 8010290:	f7ff ff06 	bl	80100a0 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8010294:	2301      	movs	r3, #1
}
 8010296:	0018      	movs	r0, r3
 8010298:	46bd      	mov	sp, r7
 801029a:	b006      	add	sp, #24
 801029c:	bdb0      	pop	{r4, r5, r7, pc}
 801029e:	46c0      	nop			@ (mov r8, r8)
 80102a0:	20000fe2 	.word	0x20000fe2
 80102a4:	20000fe5 	.word	0x20000fe5
 80102a8:	20000fe4 	.word	0x20000fe4
 80102ac:	20001a34 	.word	0x20001a34
 80102b0:	20001a70 	.word	0x20001a70
 80102b4:	20001a38 	.word	0x20001a38
 80102b8:	20001a3c 	.word	0x20001a3c
 80102bc:	20001a40 	.word	0x20001a40
 80102c0:	20001a58 	.word	0x20001a58
 80102c4:	20000fec 	.word	0x20000fec
 80102c8:	3b5c7333 	.word	0x3b5c7333

080102cc <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b084      	sub	sp, #16
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	60f8      	str	r0, [r7, #12]
 80102d4:	60b9      	str	r1, [r7, #8]
 80102d6:	607a      	str	r2, [r7, #4]
 80102d8:	001a      	movs	r2, r3
 80102da:	1cfb      	adds	r3, r7, #3
 80102dc:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 80102de:	4b09      	ldr	r3, [pc, #36]	@ (8010304 <soundInit+0x38>)
 80102e0:	68ba      	ldr	r2, [r7, #8]
 80102e2:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 80102e4:	4b08      	ldr	r3, [pc, #32]	@ (8010308 <soundInit+0x3c>)
 80102e6:	687a      	ldr	r2, [r7, #4]
 80102e8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 80102ea:	4b08      	ldr	r3, [pc, #32]	@ (801030c <soundInit+0x40>)
 80102ec:	68fa      	ldr	r2, [r7, #12]
 80102ee:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 80102f0:	4b07      	ldr	r3, [pc, #28]	@ (8010310 <soundInit+0x44>)
 80102f2:	2200      	movs	r2, #0
 80102f4:	569a      	ldrsb	r2, [r3, r2]
 80102f6:	4b06      	ldr	r3, [pc, #24]	@ (8010310 <soundInit+0x44>)
 80102f8:	701a      	strb	r2, [r3, #0]

    return true;
 80102fa:	2301      	movs	r3, #1
}
 80102fc:	0018      	movs	r0, r3
 80102fe:	46bd      	mov	sp, r7
 8010300:	b004      	add	sp, #16
 8010302:	bd80      	pop	{r7, pc}
 8010304:	20001a2c 	.word	0x20001a2c
 8010308:	20001a28 	.word	0x20001a28
 801030c:	20001a30 	.word	0x20001a30
 8010310:	20001a34 	.word	0x20001a34

08010314 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8010318:	4b02      	ldr	r3, [pc, #8]	@ (8010324 <clearMaximumAmplitude+0x10>)
 801031a:	2200      	movs	r2, #0
 801031c:	601a      	str	r2, [r3, #0]
}
 801031e:	46c0      	nop			@ (mov r8, r8)
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	20000fec 	.word	0x20000fec

08010328 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 801032c:	4b08      	ldr	r3, [pc, #32]	@ (8010350 <startMicSettlingPeriod+0x28>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	2200      	movs	r2, #0
 8010334:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8010336:	4b06      	ldr	r3, [pc, #24]	@ (8010350 <startMicSettlingPeriod+0x28>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	0018      	movs	r0, r3
 801033c:	f00a ff52 	bl	801b1e4 <HAL_TIM_Base_Start>
 8010340:	1e03      	subs	r3, r0, #0
 8010342:	d001      	beq.n	8010348 <startMicSettlingPeriod+0x20>
    {
        return false;
 8010344:	2300      	movs	r3, #0
 8010346:	e000      	b.n	801034a <startMicSettlingPeriod+0x22>
    }
    return true;
 8010348:	2301      	movs	r3, #1
}
 801034a:	0018      	movs	r0, r3
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}
 8010350:	20001a28 	.word	0x20001a28

08010354 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b082      	sub	sp, #8
 8010358:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 801035a:	4b0e      	ldr	r3, [pc, #56]	@ (8010394 <micSettlingComplete+0x40>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	691b      	ldr	r3, [r3, #16]
 8010362:	2201      	movs	r2, #1
 8010364:	401a      	ands	r2, r3
 8010366:	1dfb      	adds	r3, r7, #7
 8010368:	3a01      	subs	r2, #1
 801036a:	4251      	negs	r1, r2
 801036c:	414a      	adcs	r2, r1
 801036e:	701a      	strb	r2, [r3, #0]
    if (complete)
 8010370:	1dfb      	adds	r3, r7, #7
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d007      	beq.n	8010388 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8010378:	4b06      	ldr	r3, [pc, #24]	@ (8010394 <micSettlingComplete+0x40>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	0018      	movs	r0, r3
 801037e:	f00a ff7b 	bl	801b278 <HAL_TIM_Base_Stop>
      DataReady = true;
 8010382:	4b05      	ldr	r3, [pc, #20]	@ (8010398 <micSettlingComplete+0x44>)
 8010384:	2201      	movs	r2, #1
 8010386:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8010388:	1dfb      	adds	r3, r7, #7
 801038a:	781b      	ldrb	r3, [r3, #0]
}
 801038c:	0018      	movs	r0, r3
 801038e:	46bd      	mov	sp, r7
 8010390:	b002      	add	sp, #8
 8010392:	bd80      	pop	{r7, pc}
 8010394:	20001a28 	.word	0x20001a28
 8010398:	20000fe1 	.word	0x20000fe1

0801039c <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	0002      	movs	r2, r0
 80103a4:	1dfb      	adds	r3, r7, #7
 80103a6:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 80103a8:	4b29      	ldr	r3, [pc, #164]	@ (8010450 <enableMicrophone+0xb4>)
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	1dfa      	adds	r2, r7, #7
 80103b0:	7812      	ldrb	r2, [r2, #0]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d101      	bne.n	80103ba <enableMicrophone+0x1e>
    {
        return true;
 80103b6:	2301      	movs	r3, #1
 80103b8:	e045      	b.n	8010446 <enableMicrophone+0xaa>
    }
    if (bEnable)
 80103ba:	1dfb      	adds	r3, r7, #7
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d025      	beq.n	801040e <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 80103c2:	f7ff ffb1 	bl	8010328 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 80103c6:	4b23      	ldr	r3, [pc, #140]	@ (8010454 <enableMicrophone+0xb8>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2280      	movs	r2, #128	@ 0x80
 80103cc:	0092      	lsls	r2, r2, #2
 80103ce:	4922      	ldr	r1, [pc, #136]	@ (8010458 <enableMicrophone+0xbc>)
 80103d0:	0018      	movs	r0, r3
 80103d2:	f007 f971 	bl	80176b8 <HAL_I2S_Receive_DMA>
 80103d6:	1e03      	subs	r3, r0, #0
 80103d8:	d001      	beq.n	80103de <enableMicrophone+0x42>
        {
            return false;
 80103da:	2300      	movs	r3, #0
 80103dc:	e033      	b.n	8010446 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 80103de:	f7ff ff99 	bl	8010314 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 80103e2:	4b1e      	ldr	r3, [pc, #120]	@ (801045c <enableMicrophone+0xc0>)
 80103e4:	2200      	movs	r2, #0
 80103e6:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 80103e8:	4b1d      	ldr	r3, [pc, #116]	@ (8010460 <enableMicrophone+0xc4>)
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	b25b      	sxtb	r3, r3
 80103ee:	0018      	movs	r0, r3
 80103f0:	f7ff fe56 	bl	80100a0 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 80103f4:	4b1b      	ldr	r3, [pc, #108]	@ (8010464 <enableMicrophone+0xc8>)
 80103f6:	2201      	movs	r2, #1
 80103f8:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 80103fa:	4b15      	ldr	r3, [pc, #84]	@ (8010450 <enableMicrophone+0xb4>)
 80103fc:	2201      	movs	r2, #1
 80103fe:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8010400:	4b19      	ldr	r3, [pc, #100]	@ (8010468 <enableMicrophone+0xcc>)
 8010402:	2200      	movs	r2, #0
 8010404:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8010406:	4b19      	ldr	r3, [pc, #100]	@ (801046c <enableMicrophone+0xd0>)
 8010408:	2200      	movs	r2, #0
 801040a:	701a      	strb	r2, [r3, #0]
 801040c:	e01a      	b.n	8010444 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 801040e:	4b14      	ldr	r3, [pc, #80]	@ (8010460 <enableMicrophone+0xc4>)
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	b25b      	sxtb	r3, r3
 8010414:	0018      	movs	r0, r3
 8010416:	f7ff fe5d 	bl	80100d4 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 801041a:	4b12      	ldr	r3, [pc, #72]	@ (8010464 <enableMicrophone+0xc8>)
 801041c:	2200      	movs	r2, #0
 801041e:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8010420:	4b11      	ldr	r3, [pc, #68]	@ (8010468 <enableMicrophone+0xcc>)
 8010422:	2200      	movs	r2, #0
 8010424:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8010426:	4b11      	ldr	r3, [pc, #68]	@ (801046c <enableMicrophone+0xd0>)
 8010428:	2200      	movs	r2, #0
 801042a:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 801042c:	4b09      	ldr	r3, [pc, #36]	@ (8010454 <enableMicrophone+0xb8>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	0018      	movs	r0, r3
 8010432:	f007 fa03 	bl	801783c <HAL_I2S_DMAStop>
 8010436:	1e03      	subs	r3, r0, #0
 8010438:	d001      	beq.n	801043e <enableMicrophone+0xa2>
        {
            return false;
 801043a:	2300      	movs	r3, #0
 801043c:	e003      	b.n	8010446 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 801043e:	4b04      	ldr	r3, [pc, #16]	@ (8010450 <enableMicrophone+0xb4>)
 8010440:	2200      	movs	r2, #0
 8010442:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8010444:	2301      	movs	r3, #1
}
 8010446:	0018      	movs	r0, r3
 8010448:	46bd      	mov	sp, r7
 801044a:	b002      	add	sp, #8
 801044c:	bd80      	pop	{r7, pc}
 801044e:	46c0      	nop			@ (mov r8, r8)
 8010450:	20000fe2 	.word	0x20000fe2
 8010454:	20001a2c 	.word	0x20001a2c
 8010458:	20001028 	.word	0x20001028
 801045c:	20000fe8 	.word	0x20000fe8
 8010460:	20001a34 	.word	0x20001a34
 8010464:	20000fe4 	.word	0x20000fe4
 8010468:	20000fe3 	.word	0x20000fe3
 801046c:	20000fe5 	.word	0x20000fe5

08010470 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8010474:	4b0c      	ldr	r3, [pc, #48]	@ (80104a8 <startSPLcalculation+0x38>)
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	b2db      	uxtb	r3, r3
 801047a:	2201      	movs	r2, #1
 801047c:	4053      	eors	r3, r2
 801047e:	b2db      	uxtb	r3, r3
 8010480:	2b00      	cmp	r3, #0
 8010482:	d001      	beq.n	8010488 <startSPLcalculation+0x18>
    {
        return false;
 8010484:	2300      	movs	r3, #0
 8010486:	e00c      	b.n	80104a2 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8010488:	4b08      	ldr	r3, [pc, #32]	@ (80104ac <startSPLcalculation+0x3c>)
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	b2db      	uxtb	r3, r3
 801048e:	2b00      	cmp	r3, #0
 8010490:	d001      	beq.n	8010496 <startSPLcalculation+0x26>
    {
        return true;
 8010492:	2301      	movs	r3, #1
 8010494:	e005      	b.n	80104a2 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8010496:	f000 fb63 	bl	8010b60 <resetSPLstate>
    SPLcalcEnabled = true;
 801049a:	4b04      	ldr	r3, [pc, #16]	@ (80104ac <startSPLcalculation+0x3c>)
 801049c:	2201      	movs	r2, #1
 801049e:	701a      	strb	r2, [r3, #0]
    return true;
 80104a0:	2301      	movs	r3, #1
}
 80104a2:	0018      	movs	r0, r3
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	20000fe2 	.word	0x20000fe2
 80104ac:	20000fe3 	.word	0x20000fe3

080104b0 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b082      	sub	sp, #8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 80104b8:	4b05      	ldr	r3, [pc, #20]	@ (80104d0 <HAL_I2S_RxHalfCpltCallback+0x20>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	687a      	ldr	r2, [r7, #4]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d102      	bne.n	80104c8 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 80104c2:	2000      	movs	r0, #0
 80104c4:	f000 f81a 	bl	80104fc <processHalfDMAbuffer>
  }
}
 80104c8:	46c0      	nop			@ (mov r8, r8)
 80104ca:	46bd      	mov	sp, r7
 80104cc:	b002      	add	sp, #8
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	20001a2c 	.word	0x20001a2c

080104d4 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b082      	sub	sp, #8
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 80104dc:	4b06      	ldr	r3, [pc, #24]	@ (80104f8 <HAL_I2S_RxCpltCallback+0x24>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	687a      	ldr	r2, [r7, #4]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d104      	bne.n	80104f0 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 80104e6:	2380      	movs	r3, #128	@ 0x80
 80104e8:	009b      	lsls	r3, r3, #2
 80104ea:	0018      	movs	r0, r3
 80104ec:	f000 f806 	bl	80104fc <processHalfDMAbuffer>
  }
}
 80104f0:	46c0      	nop			@ (mov r8, r8)
 80104f2:	46bd      	mov	sp, r7
 80104f4:	b002      	add	sp, #8
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	20001a2c 	.word	0x20001a2c

080104fc <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	005a      	lsls	r2, r3, #1
 8010508:	4b15      	ldr	r3, [pc, #84]	@ (8010560 <processHalfDMAbuffer+0x64>)
 801050a:	18d3      	adds	r3, r2, r3
 801050c:	4a15      	ldr	r2, [pc, #84]	@ (8010564 <processHalfDMAbuffer+0x68>)
 801050e:	2180      	movs	r1, #128	@ 0x80
 8010510:	0089      	lsls	r1, r1, #2
 8010512:	0018      	movs	r0, r3
 8010514:	f000 fd35 	bl	8010f82 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8010518:	4b13      	ldr	r3, [pc, #76]	@ (8010568 <processHalfDMAbuffer+0x6c>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	425a      	negs	r2, r3
 801051e:	4153      	adcs	r3, r2
 8010520:	b2da      	uxtb	r2, r3
 8010522:	4b11      	ldr	r3, [pc, #68]	@ (8010568 <processHalfDMAbuffer+0x6c>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	2109      	movs	r1, #9
 8010528:	4299      	cmp	r1, r3
 801052a:	419b      	sbcs	r3, r3
 801052c:	425b      	negs	r3, r3
 801052e:	b2db      	uxtb	r3, r3
 8010530:	480c      	ldr	r0, [pc, #48]	@ (8010564 <processHalfDMAbuffer+0x68>)
 8010532:	2180      	movs	r1, #128	@ 0x80
 8010534:	f000 fb46 	bl	8010bc4 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8010538:	4b0b      	ldr	r3, [pc, #44]	@ (8010568 <processHalfDMAbuffer+0x6c>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2b09      	cmp	r3, #9
 801053e:	d804      	bhi.n	801054a <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8010540:	4b09      	ldr	r3, [pc, #36]	@ (8010568 <processHalfDMAbuffer+0x6c>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	1c5a      	adds	r2, r3, #1
 8010546:	4b08      	ldr	r3, [pc, #32]	@ (8010568 <processHalfDMAbuffer+0x6c>)
 8010548:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 801054a:	4b08      	ldr	r3, [pc, #32]	@ (801056c <processHalfDMAbuffer+0x70>)
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	b2db      	uxtb	r3, r3
 8010550:	2b00      	cmp	r3, #0
 8010552:	d001      	beq.n	8010558 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8010554:	f000 f826 	bl	80105a4 <calculateSPLQ31>
    }
}
 8010558:	46c0      	nop			@ (mov r8, r8)
 801055a:	46bd      	mov	sp, r7
 801055c:	b002      	add	sp, #8
 801055e:	bd80      	pop	{r7, pc}
 8010560:	20001028 	.word	0x20001028
 8010564:	20001828 	.word	0x20001828
 8010568:	20000fe8 	.word	0x20000fe8
 801056c:	20000fe3 	.word	0x20000fe3

08010570 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b082      	sub	sp, #8
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8010578:	4b07      	ldr	r3, [pc, #28]	@ (8010598 <HAL_I2S_ErrorCallback+0x28>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	429a      	cmp	r2, r3
 8010580:	d106      	bne.n	8010590 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8010582:	4a06      	ldr	r2, [pc, #24]	@ (801059c <HAL_I2S_ErrorCallback+0x2c>)
 8010584:	239e      	movs	r3, #158	@ 0x9e
 8010586:	0059      	lsls	r1, r3, #1
 8010588:	4b05      	ldr	r3, [pc, #20]	@ (80105a0 <HAL_I2S_ErrorCallback+0x30>)
 801058a:	0018      	movs	r0, r3
 801058c:	f002 f950 	bl	8012830 <errorHandler>
  }
}
 8010590:	46c0      	nop			@ (mov r8, r8)
 8010592:	46bd      	mov	sp, r7
 8010594:	b002      	add	sp, #8
 8010596:	bd80      	pop	{r7, pc}
 8010598:	20001a2c 	.word	0x20001a2c
 801059c:	0802c35c 	.word	0x0802c35c
 80105a0:	0802cc4c 	.word	0x0802cc4c

080105a4 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 80105a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105a6:	b0b3      	sub	sp, #204	@ 0xcc
 80105a8:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 80105aa:	4ae2      	ldr	r2, [pc, #904]	@ (8010934 <calculateSPLQ31+0x390>)
 80105ac:	2338      	movs	r3, #56	@ 0x38
 80105ae:	2030      	movs	r0, #48	@ 0x30
 80105b0:	181b      	adds	r3, r3, r0
 80105b2:	19d9      	adds	r1, r3, r7
 80105b4:	2334      	movs	r3, #52	@ 0x34
 80105b6:	181b      	adds	r3, r3, r0
 80105b8:	19d8      	adds	r0, r3, r7
 80105ba:	2380      	movs	r3, #128	@ 0x80
 80105bc:	f000 fc36 	bl	8010e2c <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 80105c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	da00      	bge.n	80105c8 <calculateSPLQ31+0x24>
 80105c6:	3301      	adds	r3, #1
 80105c8:	105b      	asrs	r3, r3, #1
 80105ca:	001a      	movs	r2, r3
 80105cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	da00      	bge.n	80105d4 <calculateSPLQ31+0x30>
 80105d2:	3301      	adds	r3, #1
 80105d4:	105b      	asrs	r3, r3, #1
 80105d6:	18d3      	adds	r3, r2, r3
 80105d8:	2188      	movs	r1, #136	@ 0x88
 80105da:	187a      	adds	r2, r7, r1
 80105dc:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 80105de:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80105e0:	187b      	adds	r3, r7, r1
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	1ad3      	subs	r3, r2, r3
 80105e6:	3304      	adds	r3, #4
 80105e8:	2284      	movs	r2, #132	@ 0x84
 80105ea:	18b9      	adds	r1, r7, r2
 80105ec:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 80105ee:	18bb      	adds	r3, r7, r2
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	4ad1      	ldr	r2, [pc, #836]	@ (8010938 <calculateSPLQ31+0x394>)
 80105f4:	0019      	movs	r1, r3
 80105f6:	0010      	movs	r0, r2
 80105f8:	f000 fc58 	bl	8010eac <getPo2factor>
 80105fc:	0003      	movs	r3, r0
 80105fe:	2280      	movs	r2, #128	@ 0x80
 8010600:	18ba      	adds	r2, r7, r2
 8010602:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8010604:	2300      	movs	r3, #0
 8010606:	2284      	movs	r2, #132	@ 0x84
 8010608:	2130      	movs	r1, #48	@ 0x30
 801060a:	1852      	adds	r2, r2, r1
 801060c:	19d2      	adds	r2, r2, r7
 801060e:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8010610:	2300      	movs	r3, #0
 8010612:	2280      	movs	r2, #128	@ 0x80
 8010614:	1852      	adds	r2, r2, r1
 8010616:	19d2      	adds	r2, r2, r7
 8010618:	6013      	str	r3, [r2, #0]
 801061a:	e032      	b.n	8010682 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 801061c:	4ac5      	ldr	r2, [pc, #788]	@ (8010934 <calculateSPLQ31+0x390>)
 801061e:	2680      	movs	r6, #128	@ 0x80
 8010620:	2330      	movs	r3, #48	@ 0x30
 8010622:	18f1      	adds	r1, r6, r3
 8010624:	19cb      	adds	r3, r1, r7
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	589a      	ldr	r2, [r3, r2]
 801062c:	2188      	movs	r1, #136	@ 0x88
 801062e:	1879      	adds	r1, r7, r1
 8010630:	680b      	ldr	r3, [r1, #0]
 8010632:	1ad2      	subs	r2, r2, r3
 8010634:	2180      	movs	r1, #128	@ 0x80
 8010636:	1879      	adds	r1, r7, r1
 8010638:	680b      	ldr	r3, [r1, #0]
 801063a:	409a      	lsls	r2, r3
 801063c:	0011      	movs	r1, r2
 801063e:	4abf      	ldr	r2, [pc, #764]	@ (801093c <calculateSPLQ31+0x398>)
 8010640:	2084      	movs	r0, #132	@ 0x84
 8010642:	2330      	movs	r3, #48	@ 0x30
 8010644:	18c3      	adds	r3, r0, r3
 8010646:	19db      	adds	r3, r3, r7
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	009b      	lsls	r3, r3, #2
 801064c:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 801064e:	2230      	movs	r2, #48	@ 0x30
 8010650:	1883      	adds	r3, r0, r2
 8010652:	19db      	adds	r3, r3, r7
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	3301      	adds	r3, #1
 8010658:	49b8      	ldr	r1, [pc, #736]	@ (801093c <calculateSPLQ31+0x398>)
 801065a:	009a      	lsls	r2, r3, #2
 801065c:	2300      	movs	r3, #0
 801065e:	5053      	str	r3, [r2, r1]
        count += 2;
 8010660:	2230      	movs	r2, #48	@ 0x30
 8010662:	1883      	adds	r3, r0, r2
 8010664:	19db      	adds	r3, r3, r7
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	3302      	adds	r3, #2
 801066a:	0011      	movs	r1, r2
 801066c:	1882      	adds	r2, r0, r2
 801066e:	19d2      	adds	r2, r2, r7
 8010670:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8010672:	000a      	movs	r2, r1
 8010674:	18b3      	adds	r3, r6, r2
 8010676:	19db      	adds	r3, r3, r7
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	3301      	adds	r3, #1
 801067c:	18b2      	adds	r2, r6, r2
 801067e:	19d2      	adds	r2, r2, r7
 8010680:	6013      	str	r3, [r2, #0]
 8010682:	2380      	movs	r3, #128	@ 0x80
 8010684:	2630      	movs	r6, #48	@ 0x30
 8010686:	199b      	adds	r3, r3, r6
 8010688:	19db      	adds	r3, r3, r7
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2b7f      	cmp	r3, #127	@ 0x7f
 801068e:	d9c5      	bls.n	801061c <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8010690:	4bab      	ldr	r3, [pc, #684]	@ (8010940 <calculateSPLQ31+0x39c>)
 8010692:	6818      	ldr	r0, [r3, #0]
 8010694:	49a9      	ldr	r1, [pc, #676]	@ (801093c <calculateSPLQ31+0x398>)
 8010696:	2301      	movs	r3, #1
 8010698:	2200      	movs	r2, #0
 801069a:	f011 fe69 	bl	8022370 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 801069e:	4aa9      	ldr	r2, [pc, #676]	@ (8010944 <calculateSPLQ31+0x3a0>)
 80106a0:	2338      	movs	r3, #56	@ 0x38
 80106a2:	199b      	adds	r3, r3, r6
 80106a4:	19d9      	adds	r1, r3, r7
 80106a6:	2334      	movs	r3, #52	@ 0x34
 80106a8:	199b      	adds	r3, r3, r6
 80106aa:	19d8      	adds	r0, r3, r7
 80106ac:	237e      	movs	r3, #126	@ 0x7e
 80106ae:	f000 fbbd 	bl	8010e2c <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 80106b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80106b4:	2380      	movs	r3, #128	@ 0x80
 80106b6:	061b      	lsls	r3, r3, #24
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d101      	bne.n	80106c0 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 80106bc:	4b9e      	ldr	r3, [pc, #632]	@ (8010938 <calculateSPLQ31+0x394>)
 80106be:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 80106c0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80106c2:	2380      	movs	r3, #128	@ 0x80
 80106c4:	061b      	lsls	r3, r3, #24
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d101      	bne.n	80106ce <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 80106ca:	4b9b      	ldr	r3, [pc, #620]	@ (8010938 <calculateSPLQ31+0x394>)
 80106cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 80106ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80106d0:	17da      	asrs	r2, r3, #31
 80106d2:	189b      	adds	r3, r3, r2
 80106d4:	4053      	eors	r3, r2
 80106d6:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 80106d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80106da:	17da      	asrs	r2, r3, #31
 80106dc:	189b      	adds	r3, r3, r2
 80106de:	4053      	eors	r3, r2
 80106e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 80106e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80106e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80106e6:	429a      	cmp	r2, r3
 80106e8:	dd01      	ble.n	80106ee <calculateSPLQ31+0x14a>
    {
        max = min;
 80106ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80106ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 80106ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80106f0:	3304      	adds	r3, #4
 80106f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 80106f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106f6:	4a90      	ldr	r2, [pc, #576]	@ (8010938 <calculateSPLQ31+0x394>)
 80106f8:	0019      	movs	r1, r3
 80106fa:	0010      	movs	r0, r2
 80106fc:	f000 fbd6 	bl	8010eac <getPo2factor>
 8010700:	0003      	movs	r3, r0
 8010702:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8010704:	2302      	movs	r3, #2
 8010706:	22ac      	movs	r2, #172	@ 0xac
 8010708:	18ba      	adds	r2, r7, r2
 801070a:	6013      	str	r3, [r2, #0]
 801070c:	e012      	b.n	8010734 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 801070e:	4a8b      	ldr	r2, [pc, #556]	@ (801093c <calculateSPLQ31+0x398>)
 8010710:	20ac      	movs	r0, #172	@ 0xac
 8010712:	183b      	adds	r3, r7, r0
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	009b      	lsls	r3, r3, #2
 8010718:	589a      	ldr	r2, [r3, r2]
 801071a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801071c:	409a      	lsls	r2, r3
 801071e:	0011      	movs	r1, r2
 8010720:	4a86      	ldr	r2, [pc, #536]	@ (801093c <calculateSPLQ31+0x398>)
 8010722:	183b      	adds	r3, r7, r0
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	009b      	lsls	r3, r3, #2
 8010728:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 801072a:	183b      	adds	r3, r7, r0
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	3301      	adds	r3, #1
 8010730:	183a      	adds	r2, r7, r0
 8010732:	6013      	str	r3, [r2, #0]
 8010734:	23ac      	movs	r3, #172	@ 0xac
 8010736:	18fb      	adds	r3, r7, r3
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	2b7f      	cmp	r3, #127	@ 0x7f
 801073c:	d9e7      	bls.n	801070e <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 801073e:	4b7d      	ldr	r3, [pc, #500]	@ (8010934 <calculateSPLQ31+0x390>)
 8010740:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8010742:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8010744:	4b7d      	ldr	r3, [pc, #500]	@ (801093c <calculateSPLQ31+0x398>)
 8010746:	2240      	movs	r2, #64	@ 0x40
 8010748:	0018      	movs	r0, r3
 801074a:	f012 fbbb 	bl	8022ec4 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 801074e:	2330      	movs	r3, #48	@ 0x30
 8010750:	18fb      	adds	r3, r7, r3
 8010752:	0018      	movs	r0, r3
 8010754:	2330      	movs	r3, #48	@ 0x30
 8010756:	001a      	movs	r2, r3
 8010758:	2100      	movs	r1, #0
 801075a:	f014 f9f9 	bl	8024b50 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 801075e:	2200      	movs	r2, #0
 8010760:	2300      	movs	r3, #0
 8010762:	21a0      	movs	r1, #160	@ 0xa0
 8010764:	1879      	adds	r1, r7, r1
 8010766:	600a      	str	r2, [r1, #0]
 8010768:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 801076a:	2301      	movs	r3, #1
 801076c:	229c      	movs	r2, #156	@ 0x9c
 801076e:	18ba      	adds	r2, r7, r2
 8010770:	6013      	str	r3, [r2, #0]
 8010772:	e05b      	b.n	801082c <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8010774:	269c      	movs	r6, #156	@ 0x9c
 8010776:	19bb      	adds	r3, r7, r6
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	009a      	lsls	r2, r3, #2
 801077c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801077e:	189b      	adds	r3, r3, r2
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	613b      	str	r3, [r7, #16]
 8010784:	17db      	asrs	r3, r3, #31
 8010786:	617b      	str	r3, [r7, #20]
 8010788:	4b6f      	ldr	r3, [pc, #444]	@ (8010948 <calculateSPLQ31+0x3a4>)
 801078a:	681a      	ldr	r2, [r3, #0]
 801078c:	19bb      	adds	r3, r7, r6
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	005b      	lsls	r3, r3, #1
 8010792:	18d3      	adds	r3, r2, r3
 8010794:	881b      	ldrh	r3, [r3, #0]
 8010796:	60bb      	str	r3, [r7, #8]
 8010798:	2300      	movs	r3, #0
 801079a:	60fb      	str	r3, [r7, #12]
 801079c:	68ba      	ldr	r2, [r7, #8]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6938      	ldr	r0, [r7, #16]
 80107a2:	6979      	ldr	r1, [r7, #20]
 80107a4:	f7ef ff0c 	bl	80005c0 <__aeabi_lmul>
 80107a8:	0002      	movs	r2, r0
 80107aa:	000b      	movs	r3, r1
 80107ac:	0010      	movs	r0, r2
 80107ae:	0019      	movs	r1, r3
 80107b0:	23a0      	movs	r3, #160	@ 0xa0
 80107b2:	18fa      	adds	r2, r7, r3
 80107b4:	6853      	ldr	r3, [r2, #4]
 80107b6:	6812      	ldr	r2, [r2, #0]
 80107b8:	1812      	adds	r2, r2, r0
 80107ba:	414b      	adcs	r3, r1
 80107bc:	21a0      	movs	r1, #160	@ 0xa0
 80107be:	1879      	adds	r1, r7, r1
 80107c0:	600a      	str	r2, [r1, #0]
 80107c2:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 80107c4:	4b61      	ldr	r3, [pc, #388]	@ (801094c <calculateSPLQ31+0x3a8>)
 80107c6:	681a      	ldr	r2, [r3, #0]
 80107c8:	19bb      	adds	r3, r7, r6
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	18d3      	adds	r3, r2, r3
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	2b06      	cmp	r3, #6
 80107d2:	d025      	beq.n	8010820 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 80107d4:	4b5d      	ldr	r3, [pc, #372]	@ (801094c <calculateSPLQ31+0x3a8>)
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	19bb      	adds	r3, r7, r6
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	18d3      	adds	r3, r2, r3
 80107de:	781b      	ldrb	r3, [r3, #0]
 80107e0:	2230      	movs	r2, #48	@ 0x30
 80107e2:	18ba      	adds	r2, r7, r2
 80107e4:	00db      	lsls	r3, r3, #3
 80107e6:	18d3      	adds	r3, r2, r3
 80107e8:	6818      	ldr	r0, [r3, #0]
 80107ea:	6859      	ldr	r1, [r3, #4]
 80107ec:	19bb      	adds	r3, r7, r6
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	009a      	lsls	r2, r3, #2
 80107f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80107f4:	189b      	adds	r3, r3, r2
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	603b      	str	r3, [r7, #0]
 80107fa:	17db      	asrs	r3, r3, #31
 80107fc:	607b      	str	r3, [r7, #4]
 80107fe:	4b53      	ldr	r3, [pc, #332]	@ (801094c <calculateSPLQ31+0x3a8>)
 8010800:	681a      	ldr	r2, [r3, #0]
 8010802:	19be      	adds	r6, r7, r6
 8010804:	6833      	ldr	r3, [r6, #0]
 8010806:	18d3      	adds	r3, r2, r3
 8010808:	781b      	ldrb	r3, [r3, #0]
 801080a:	001e      	movs	r6, r3
 801080c:	683a      	ldr	r2, [r7, #0]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	1880      	adds	r0, r0, r2
 8010812:	4159      	adcs	r1, r3
 8010814:	2330      	movs	r3, #48	@ 0x30
 8010816:	18fa      	adds	r2, r7, r3
 8010818:	00f3      	lsls	r3, r6, #3
 801081a:	18d3      	adds	r3, r2, r3
 801081c:	6018      	str	r0, [r3, #0]
 801081e:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8010820:	229c      	movs	r2, #156	@ 0x9c
 8010822:	18bb      	adds	r3, r7, r2
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	3301      	adds	r3, #1
 8010828:	18ba      	adds	r2, r7, r2
 801082a:	6013      	str	r3, [r2, #0]
 801082c:	239c      	movs	r3, #156	@ 0x9c
 801082e:	18fb      	adds	r3, r7, r3
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	2b3f      	cmp	r3, #63	@ 0x3f
 8010834:	d99e      	bls.n	8010774 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8010836:	2380      	movs	r3, #128	@ 0x80
 8010838:	18fb      	adds	r3, r7, r3
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	005b      	lsls	r3, r3, #1
 801083e:	001a      	movs	r2, r3
 8010840:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010842:	005b      	lsls	r3, r3, #1
 8010844:	18d3      	adds	r3, r2, r3
 8010846:	3b22      	subs	r3, #34	@ 0x22
 8010848:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 801084a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801084c:	17da      	asrs	r2, r3, #31
 801084e:	189b      	adds	r3, r3, r2
 8010850:	4053      	eors	r3, r2
 8010852:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8010854:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010856:	2b00      	cmp	r3, #0
 8010858:	da62      	bge.n	8010920 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 801085a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801085c:	3b20      	subs	r3, #32
 801085e:	2b00      	cmp	r3, #0
 8010860:	db05      	blt.n	801086e <calculateSPLQ31+0x2ca>
 8010862:	22a0      	movs	r2, #160	@ 0xa0
 8010864:	18ba      	adds	r2, r7, r2
 8010866:	6812      	ldr	r2, [r2, #0]
 8010868:	409a      	lsls	r2, r3
 801086a:	627a      	str	r2, [r7, #36]	@ 0x24
 801086c:	e010      	b.n	8010890 <calculateSPLQ31+0x2ec>
 801086e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010870:	2220      	movs	r2, #32
 8010872:	1ad3      	subs	r3, r2, r3
 8010874:	22a0      	movs	r2, #160	@ 0xa0
 8010876:	18ba      	adds	r2, r7, r2
 8010878:	6812      	ldr	r2, [r2, #0]
 801087a:	40da      	lsrs	r2, r3
 801087c:	0013      	movs	r3, r2
 801087e:	22a4      	movs	r2, #164	@ 0xa4
 8010880:	18ba      	adds	r2, r7, r2
 8010882:	6811      	ldr	r1, [r2, #0]
 8010884:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010886:	4091      	lsls	r1, r2
 8010888:	6279      	str	r1, [r7, #36]	@ 0x24
 801088a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801088c:	431a      	orrs	r2, r3
 801088e:	627a      	str	r2, [r7, #36]	@ 0x24
 8010890:	21a0      	movs	r1, #160	@ 0xa0
 8010892:	187b      	adds	r3, r7, r1
 8010894:	681a      	ldr	r2, [r3, #0]
 8010896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010898:	409a      	lsls	r2, r3
 801089a:	623a      	str	r2, [r7, #32]
 801089c:	6a3b      	ldr	r3, [r7, #32]
 801089e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80108a0:	187a      	adds	r2, r7, r1
 80108a2:	6013      	str	r3, [r2, #0]
 80108a4:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80108a6:	2300      	movs	r3, #0
 80108a8:	2298      	movs	r2, #152	@ 0x98
 80108aa:	18ba      	adds	r2, r7, r2
 80108ac:	6013      	str	r3, [r2, #0]
 80108ae:	e031      	b.n	8010914 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 80108b0:	2330      	movs	r3, #48	@ 0x30
 80108b2:	18fa      	adds	r2, r7, r3
 80108b4:	2398      	movs	r3, #152	@ 0x98
 80108b6:	18fb      	adds	r3, r7, r3
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	00db      	lsls	r3, r3, #3
 80108bc:	18d3      	adds	r3, r2, r3
 80108be:	681a      	ldr	r2, [r3, #0]
 80108c0:	685b      	ldr	r3, [r3, #4]
 80108c2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80108c4:	3920      	subs	r1, #32
 80108c6:	2900      	cmp	r1, #0
 80108c8:	db03      	blt.n	80108d2 <calculateSPLQ31+0x32e>
 80108ca:	0010      	movs	r0, r2
 80108cc:	4088      	lsls	r0, r1
 80108ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80108d0:	e00c      	b.n	80108ec <calculateSPLQ31+0x348>
 80108d2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80108d4:	2020      	movs	r0, #32
 80108d6:	1a41      	subs	r1, r0, r1
 80108d8:	0010      	movs	r0, r2
 80108da:	40c8      	lsrs	r0, r1
 80108dc:	0001      	movs	r1, r0
 80108de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80108e0:	001c      	movs	r4, r3
 80108e2:	4084      	lsls	r4, r0
 80108e4:	62fc      	str	r4, [r7, #44]	@ 0x2c
 80108e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80108e8:	4308      	orrs	r0, r1
 80108ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80108ec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80108ee:	0013      	movs	r3, r2
 80108f0:	408b      	lsls	r3, r1
 80108f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108f4:	2330      	movs	r3, #48	@ 0x30
 80108f6:	18fa      	adds	r2, r7, r3
 80108f8:	2098      	movs	r0, #152	@ 0x98
 80108fa:	183b      	adds	r3, r7, r0
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	00db      	lsls	r3, r3, #3
 8010900:	18d3      	adds	r3, r2, r3
 8010902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010906:	6019      	str	r1, [r3, #0]
 8010908:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801090a:	183b      	adds	r3, r7, r0
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	3301      	adds	r3, #1
 8010910:	183a      	adds	r2, r7, r0
 8010912:	6013      	str	r3, [r2, #0]
 8010914:	2398      	movs	r3, #152	@ 0x98
 8010916:	18fb      	adds	r3, r7, r3
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	2b05      	cmp	r3, #5
 801091c:	d9c8      	bls.n	80108b0 <calculateSPLQ31+0x30c>
 801091e:	e06b      	b.n	80109f8 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8010920:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010922:	3b20      	subs	r3, #32
 8010924:	2b00      	cmp	r3, #0
 8010926:	db13      	blt.n	8010950 <calculateSPLQ31+0x3ac>
 8010928:	22a4      	movs	r2, #164	@ 0xa4
 801092a:	18ba      	adds	r2, r7, r2
 801092c:	6812      	ldr	r2, [r2, #0]
 801092e:	40da      	lsrs	r2, r3
 8010930:	61ba      	str	r2, [r7, #24]
 8010932:	e01e      	b.n	8010972 <calculateSPLQ31+0x3ce>
 8010934:	20001828 	.word	0x20001828
 8010938:	7fffffff 	.word	0x7fffffff
 801093c:	20001a74 	.word	0x20001a74
 8010940:	200000c8 	.word	0x200000c8
 8010944:	20001a7c 	.word	0x20001a7c
 8010948:	200000cc 	.word	0x200000cc
 801094c:	200000d8 	.word	0x200000d8
 8010950:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010952:	2220      	movs	r2, #32
 8010954:	1ad3      	subs	r3, r2, r3
 8010956:	22a4      	movs	r2, #164	@ 0xa4
 8010958:	18ba      	adds	r2, r7, r2
 801095a:	6812      	ldr	r2, [r2, #0]
 801095c:	409a      	lsls	r2, r3
 801095e:	0013      	movs	r3, r2
 8010960:	22a0      	movs	r2, #160	@ 0xa0
 8010962:	18ba      	adds	r2, r7, r2
 8010964:	6811      	ldr	r1, [r2, #0]
 8010966:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010968:	40d1      	lsrs	r1, r2
 801096a:	61b9      	str	r1, [r7, #24]
 801096c:	69ba      	ldr	r2, [r7, #24]
 801096e:	431a      	orrs	r2, r3
 8010970:	61ba      	str	r2, [r7, #24]
 8010972:	23a4      	movs	r3, #164	@ 0xa4
 8010974:	18fb      	adds	r3, r7, r3
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801097a:	40da      	lsrs	r2, r3
 801097c:	61fa      	str	r2, [r7, #28]
 801097e:	69ba      	ldr	r2, [r7, #24]
 8010980:	69fb      	ldr	r3, [r7, #28]
 8010982:	21a0      	movs	r1, #160	@ 0xa0
 8010984:	1879      	adds	r1, r7, r1
 8010986:	600a      	str	r2, [r1, #0]
 8010988:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801098a:	2300      	movs	r3, #0
 801098c:	2294      	movs	r2, #148	@ 0x94
 801098e:	18ba      	adds	r2, r7, r2
 8010990:	6013      	str	r3, [r2, #0]
 8010992:	e02c      	b.n	80109ee <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8010994:	2330      	movs	r3, #48	@ 0x30
 8010996:	18fa      	adds	r2, r7, r3
 8010998:	2394      	movs	r3, #148	@ 0x94
 801099a:	18fb      	adds	r3, r7, r3
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	00db      	lsls	r3, r3, #3
 80109a0:	18d3      	adds	r3, r2, r3
 80109a2:	681a      	ldr	r2, [r3, #0]
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80109a8:	3920      	subs	r1, #32
 80109aa:	2900      	cmp	r1, #0
 80109ac:	db03      	blt.n	80109b6 <calculateSPLQ31+0x412>
 80109ae:	0018      	movs	r0, r3
 80109b0:	40c8      	lsrs	r0, r1
 80109b2:	0004      	movs	r4, r0
 80109b4:	e00a      	b.n	80109cc <calculateSPLQ31+0x428>
 80109b6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80109b8:	2020      	movs	r0, #32
 80109ba:	1a41      	subs	r1, r0, r1
 80109bc:	0018      	movs	r0, r3
 80109be:	4088      	lsls	r0, r1
 80109c0:	0001      	movs	r1, r0
 80109c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80109c4:	0016      	movs	r6, r2
 80109c6:	40c6      	lsrs	r6, r0
 80109c8:	0034      	movs	r4, r6
 80109ca:	430c      	orrs	r4, r1
 80109cc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80109ce:	40cb      	lsrs	r3, r1
 80109d0:	001d      	movs	r5, r3
 80109d2:	2330      	movs	r3, #48	@ 0x30
 80109d4:	18fa      	adds	r2, r7, r3
 80109d6:	2194      	movs	r1, #148	@ 0x94
 80109d8:	187b      	adds	r3, r7, r1
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	00db      	lsls	r3, r3, #3
 80109de:	18d3      	adds	r3, r2, r3
 80109e0:	601c      	str	r4, [r3, #0]
 80109e2:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80109e4:	187b      	adds	r3, r7, r1
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	3301      	adds	r3, #1
 80109ea:	187a      	adds	r2, r7, r1
 80109ec:	6013      	str	r3, [r2, #0]
 80109ee:	2394      	movs	r3, #148	@ 0x94
 80109f0:	18fb      	adds	r3, r7, r3
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	2b05      	cmp	r3, #5
 80109f6:	d9cd      	bls.n	8010994 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 80109f8:	230f      	movs	r3, #15
 80109fa:	425d      	negs	r5, r3
 80109fc:	2305      	movs	r3, #5
 80109fe:	425e      	negs	r6, r3
 8010a00:	4b4a      	ldr	r3, [pc, #296]	@ (8010b2c <calculateSPLQ31+0x588>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	681a      	ldr	r2, [r3, #0]
 8010a06:	4b4a      	ldr	r3, [pc, #296]	@ (8010b30 <calculateSPLQ31+0x58c>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	21a0      	movs	r1, #160	@ 0xa0
 8010a0e:	1879      	adds	r1, r7, r1
 8010a10:	6808      	ldr	r0, [r1, #0]
 8010a12:	6849      	ldr	r1, [r1, #4]
 8010a14:	4c47      	ldr	r4, [pc, #284]	@ (8010b34 <calculateSPLQ31+0x590>)
 8010a16:	9403      	str	r4, [sp, #12]
 8010a18:	4c47      	ldr	r4, [pc, #284]	@ (8010b38 <calculateSPLQ31+0x594>)
 8010a1a:	9402      	str	r4, [sp, #8]
 8010a1c:	9301      	str	r3, [sp, #4]
 8010a1e:	9200      	str	r2, [sp, #0]
 8010a20:	0033      	movs	r3, r6
 8010a22:	002a      	movs	r2, r5
 8010a24:	f000 fa86 	bl	8010f34 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8010a28:	2300      	movs	r3, #0
 8010a2a:	2290      	movs	r2, #144	@ 0x90
 8010a2c:	18ba      	adds	r2, r7, r2
 8010a2e:	6013      	str	r3, [r2, #0]
 8010a30:	e026      	b.n	8010a80 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8010a32:	2330      	movs	r3, #48	@ 0x30
 8010a34:	18fa      	adds	r2, r7, r3
 8010a36:	2490      	movs	r4, #144	@ 0x90
 8010a38:	193b      	adds	r3, r7, r4
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	00db      	lsls	r3, r3, #3
 8010a3e:	18d3      	adds	r3, r2, r3
 8010a40:	6818      	ldr	r0, [r3, #0]
 8010a42:	6859      	ldr	r1, [r3, #4]
 8010a44:	230f      	movs	r3, #15
 8010a46:	425d      	negs	r5, r3
 8010a48:	2305      	movs	r3, #5
 8010a4a:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8010a4c:	193b      	adds	r3, r7, r4
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	009a      	lsls	r2, r3, #2
 8010a52:	4b3a      	ldr	r3, [pc, #232]	@ (8010b3c <calculateSPLQ31+0x598>)
 8010a54:	18d3      	adds	r3, r2, r3
 8010a56:	193a      	adds	r2, r7, r4
 8010a58:	6812      	ldr	r2, [r2, #0]
 8010a5a:	0094      	lsls	r4, r2, #2
 8010a5c:	4a38      	ldr	r2, [pc, #224]	@ (8010b40 <calculateSPLQ31+0x59c>)
 8010a5e:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8010a60:	9203      	str	r2, [sp, #12]
 8010a62:	9302      	str	r3, [sp, #8]
 8010a64:	2300      	movs	r3, #0
 8010a66:	9301      	str	r3, [sp, #4]
 8010a68:	2300      	movs	r3, #0
 8010a6a:	9300      	str	r3, [sp, #0]
 8010a6c:	0033      	movs	r3, r6
 8010a6e:	002a      	movs	r2, r5
 8010a70:	f000 fa60 	bl	8010f34 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8010a74:	2490      	movs	r4, #144	@ 0x90
 8010a76:	193b      	adds	r3, r7, r4
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	193a      	adds	r2, r7, r4
 8010a7e:	6013      	str	r3, [r2, #0]
 8010a80:	2390      	movs	r3, #144	@ 0x90
 8010a82:	18fb      	adds	r3, r7, r3
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	2b05      	cmp	r3, #5
 8010a88:	d9d3      	bls.n	8010a32 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 8010a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8010b38 <calculateSPLQ31+0x594>)
 8010a8c:	681a      	ldr	r2, [r3, #0]
 8010a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8010b44 <calculateSPLQ31+0x5a0>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	18d2      	adds	r2, r2, r3
 8010a94:	4b2b      	ldr	r3, [pc, #172]	@ (8010b44 <calculateSPLQ31+0x5a0>)
 8010a96:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 8010a98:	4b26      	ldr	r3, [pc, #152]	@ (8010b34 <calculateSPLQ31+0x590>)
 8010a9a:	681a      	ldr	r2, [r3, #0]
 8010a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8010b48 <calculateSPLQ31+0x5a4>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	18d2      	adds	r2, r2, r3
 8010aa2:	4b29      	ldr	r3, [pc, #164]	@ (8010b48 <calculateSPLQ31+0x5a4>)
 8010aa4:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	228c      	movs	r2, #140	@ 0x8c
 8010aaa:	18ba      	adds	r2, r7, r2
 8010aac:	6013      	str	r3, [r2, #0]
 8010aae:	e025      	b.n	8010afc <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 8010ab0:	4b22      	ldr	r3, [pc, #136]	@ (8010b3c <calculateSPLQ31+0x598>)
 8010ab2:	208c      	movs	r0, #140	@ 0x8c
 8010ab4:	183a      	adds	r2, r7, r0
 8010ab6:	6812      	ldr	r2, [r2, #0]
 8010ab8:	0092      	lsls	r2, r2, #2
 8010aba:	58d2      	ldr	r2, [r2, r3]
 8010abc:	4b23      	ldr	r3, [pc, #140]	@ (8010b4c <calculateSPLQ31+0x5a8>)
 8010abe:	1839      	adds	r1, r7, r0
 8010ac0:	6809      	ldr	r1, [r1, #0]
 8010ac2:	0089      	lsls	r1, r1, #2
 8010ac4:	58cb      	ldr	r3, [r1, r3]
 8010ac6:	18d1      	adds	r1, r2, r3
 8010ac8:	4b20      	ldr	r3, [pc, #128]	@ (8010b4c <calculateSPLQ31+0x5a8>)
 8010aca:	183a      	adds	r2, r7, r0
 8010acc:	6812      	ldr	r2, [r2, #0]
 8010ace:	0092      	lsls	r2, r2, #2
 8010ad0:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 8010ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8010b40 <calculateSPLQ31+0x59c>)
 8010ad4:	183a      	adds	r2, r7, r0
 8010ad6:	6812      	ldr	r2, [r2, #0]
 8010ad8:	0092      	lsls	r2, r2, #2
 8010ada:	58d2      	ldr	r2, [r2, r3]
 8010adc:	4b1c      	ldr	r3, [pc, #112]	@ (8010b50 <calculateSPLQ31+0x5ac>)
 8010ade:	1839      	adds	r1, r7, r0
 8010ae0:	6809      	ldr	r1, [r1, #0]
 8010ae2:	0089      	lsls	r1, r1, #2
 8010ae4:	58cb      	ldr	r3, [r1, r3]
 8010ae6:	18d1      	adds	r1, r2, r3
 8010ae8:	4b19      	ldr	r3, [pc, #100]	@ (8010b50 <calculateSPLQ31+0x5ac>)
 8010aea:	183a      	adds	r2, r7, r0
 8010aec:	6812      	ldr	r2, [r2, #0]
 8010aee:	0092      	lsls	r2, r2, #2
 8010af0:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010af2:	183b      	adds	r3, r7, r0
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	3301      	adds	r3, #1
 8010af8:	183a      	adds	r2, r7, r0
 8010afa:	6013      	str	r3, [r2, #0]
 8010afc:	238c      	movs	r3, #140	@ 0x8c
 8010afe:	18fb      	adds	r3, r7, r3
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	2b05      	cmp	r3, #5
 8010b04:	d9d4      	bls.n	8010ab0 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 8010b06:	4b13      	ldr	r3, [pc, #76]	@ (8010b54 <calculateSPLQ31+0x5b0>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	1c5a      	adds	r2, r3, #1
 8010b0c:	4b11      	ldr	r3, [pc, #68]	@ (8010b54 <calculateSPLQ31+0x5b0>)
 8010b0e:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 8010b10:	4b10      	ldr	r3, [pc, #64]	@ (8010b54 <calculateSPLQ31+0x5b0>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	2b0f      	cmp	r3, #15
 8010b16:	d905      	bls.n	8010b24 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 8010b18:	4b0f      	ldr	r3, [pc, #60]	@ (8010b58 <calculateSPLQ31+0x5b4>)
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8010b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8010b5c <calculateSPLQ31+0x5b8>)
 8010b20:	2200      	movs	r2, #0
 8010b22:	701a      	strb	r2, [r3, #0]
    }
}
 8010b24:	46c0      	nop			@ (mov r8, r8)
 8010b26:	46bd      	mov	sp, r7
 8010b28:	b02f      	add	sp, #188	@ 0xbc
 8010b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b2c:	200000d0 	.word	0x200000d0
 8010b30:	200000d4 	.word	0x200000d4
 8010b34:	20000ff4 	.word	0x20000ff4
 8010b38:	20000ff0 	.word	0x20000ff0
 8010b3c:	20000ff8 	.word	0x20000ff8
 8010b40:	20001010 	.word	0x20001010
 8010b44:	20001a38 	.word	0x20001a38
 8010b48:	20001a3c 	.word	0x20001a3c
 8010b4c:	20001a40 	.word	0x20001a40
 8010b50:	20001a58 	.word	0x20001a58
 8010b54:	20001a70 	.word	0x20001a70
 8010b58:	20000fe5 	.word	0x20000fe5
 8010b5c:	20000fe3 	.word	0x20000fe3

08010b60 <resetSPLstate>:

static void resetSPLstate(void)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b082      	sub	sp, #8
 8010b64:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 8010b66:	4b11      	ldr	r3, [pc, #68]	@ (8010bac <resetSPLstate+0x4c>)
 8010b68:	2200      	movs	r2, #0
 8010b6a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8010b6c:	4b10      	ldr	r3, [pc, #64]	@ (8010bb0 <resetSPLstate+0x50>)
 8010b6e:	2200      	movs	r2, #0
 8010b70:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 8010b72:	4b10      	ldr	r3, [pc, #64]	@ (8010bb4 <resetSPLstate+0x54>)
 8010b74:	2200      	movs	r2, #0
 8010b76:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8010b78:	2300      	movs	r3, #0
 8010b7a:	607b      	str	r3, [r7, #4]
 8010b7c:	e00c      	b.n	8010b98 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 8010b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8010bb8 <resetSPLstate+0x58>)
 8010b80:	687a      	ldr	r2, [r7, #4]
 8010b82:	0092      	lsls	r2, r2, #2
 8010b84:	2100      	movs	r1, #0
 8010b86:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 8010b88:	4b0c      	ldr	r3, [pc, #48]	@ (8010bbc <resetSPLstate+0x5c>)
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	0092      	lsls	r2, r2, #2
 8010b8e:	2100      	movs	r1, #0
 8010b90:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	3301      	adds	r3, #1
 8010b96:	607b      	str	r3, [r7, #4]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2b05      	cmp	r3, #5
 8010b9c:	d9ef      	bls.n	8010b7e <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 8010b9e:	4b08      	ldr	r3, [pc, #32]	@ (8010bc0 <resetSPLstate+0x60>)
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	701a      	strb	r2, [r3, #0]
}
 8010ba4:	46c0      	nop			@ (mov r8, r8)
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	b002      	add	sp, #8
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	20001a38 	.word	0x20001a38
 8010bb0:	20001a3c 	.word	0x20001a3c
 8010bb4:	20001a70 	.word	0x20001a70
 8010bb8:	20001a40 	.word	0x20001a40
 8010bbc:	20001a58 	.word	0x20001a58
 8010bc0:	20000fe5 	.word	0x20000fe5

08010bc4 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 8010bc4:	b5b0      	push	{r4, r5, r7, lr}
 8010bc6:	b090      	sub	sp, #64	@ 0x40
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	0019      	movs	r1, r3
 8010bd0:	1dfb      	adds	r3, r7, #7
 8010bd2:	701a      	strb	r2, [r3, #0]
 8010bd4:	1dbb      	adds	r3, r7, #6
 8010bd6:	1c0a      	adds	r2, r1, #0
 8010bd8:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 8010bda:	1dfb      	adds	r3, r7, #7
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d005      	beq.n	8010bee <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 8010be2:	4b3b      	ldr	r3, [pc, #236]	@ (8010cd0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8010be4:	2200      	movs	r2, #0
 8010be6:	601a      	str	r2, [r3, #0]
        lastData = 0;
 8010be8:	4b3a      	ldr	r3, [pc, #232]	@ (8010cd4 <getFilteredMaxAmplitudeQ31+0x110>)
 8010bea:	2200      	movs	r2, #0
 8010bec:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 8010bf6:	2305      	movs	r3, #5
 8010bf8:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8010bfe:	e040      	b.n	8010c82 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 8010c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c02:	009b      	lsls	r3, r3, #2
 8010c04:	68fa      	ldr	r2, [r7, #12]
 8010c06:	18d3      	adds	r3, r2, r3
 8010c08:	681a      	ldr	r2, [r3, #0]
 8010c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c0c:	409a      	lsls	r2, r3
 8010c0e:	0013      	movs	r3, r2
 8010c10:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 8010c12:	4b30      	ldr	r3, [pc, #192]	@ (8010cd4 <getFilteredMaxAmplitudeQ31+0x110>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	425a      	negs	r2, r3
 8010c18:	4b2e      	ldr	r3, [pc, #184]	@ (8010cd4 <getFilteredMaxAmplitudeQ31+0x110>)
 8010c1a:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 8010c1c:	2418      	movs	r4, #24
 8010c1e:	193a      	adds	r2, r7, r4
 8010c20:	492c      	ldr	r1, [pc, #176]	@ (8010cd4 <getFilteredMaxAmplitudeQ31+0x110>)
 8010c22:	231c      	movs	r3, #28
 8010c24:	18f8      	adds	r0, r7, r3
 8010c26:	2301      	movs	r3, #1
 8010c28:	f012 f9a4 	bl	8022f74 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 8010c2c:	2514      	movs	r5, #20
 8010c2e:	197a      	adds	r2, r7, r5
 8010c30:	1939      	adds	r1, r7, r4
 8010c32:	4829      	ldr	r0, [pc, #164]	@ (8010cd8 <getFilteredMaxAmplitudeQ31+0x114>)
 8010c34:	2301      	movs	r3, #1
 8010c36:	f012 f96b 	bl	8022f10 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 8010c3a:	2410      	movs	r4, #16
 8010c3c:	193a      	adds	r2, r7, r4
 8010c3e:	4924      	ldr	r1, [pc, #144]	@ (8010cd0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8010c40:	4826      	ldr	r0, [pc, #152]	@ (8010cdc <getFilteredMaxAmplitudeQ31+0x118>)
 8010c42:	2301      	movs	r3, #1
 8010c44:	f012 f964 	bl	8022f10 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8010c48:	4a21      	ldr	r2, [pc, #132]	@ (8010cd0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8010c4a:	1939      	adds	r1, r7, r4
 8010c4c:	1978      	adds	r0, r7, r5
 8010c4e:	2301      	movs	r3, #1
 8010c50:	f012 f990 	bl	8022f74 <arm_add_q31>

        lastData = fx;
 8010c54:	69fa      	ldr	r2, [r7, #28]
 8010c56:	4b1f      	ldr	r3, [pc, #124]	@ (8010cd4 <getFilteredMaxAmplitudeQ31+0x110>)
 8010c58:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 8010c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8010cd0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010c60:	429a      	cmp	r2, r3
 8010c62:	da03      	bge.n	8010c6c <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 8010c64:	4b1a      	ldr	r3, [pc, #104]	@ (8010cd0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010c6a:	e007      	b.n	8010c7c <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 8010c6c:	4b18      	ldr	r3, [pc, #96]	@ (8010cd0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c72:	429a      	cmp	r2, r3
 8010c74:	dd02      	ble.n	8010c7c <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 8010c76:	4b16      	ldr	r3, [pc, #88]	@ (8010cd0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 8010c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c7e:	3301      	adds	r3, #1
 8010c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8010c82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d3ba      	bcc.n	8010c00 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 8010c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c8c:	17da      	asrs	r2, r3, #31
 8010c8e:	189b      	adds	r3, r3, r2
 8010c90:	4053      	eors	r3, r2
 8010c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 8010c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 8010c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d200      	bcs.n	8010ca2 <getFilteredMaxAmplitudeQ31+0xde>
 8010ca0:	0013      	movs	r3, r2
 8010ca2:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 8010ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ca8:	40da      	lsrs	r2, r3
 8010caa:	0013      	movs	r3, r2
 8010cac:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 8010cae:	1dbb      	adds	r3, r7, #6
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d007      	beq.n	8010cc6 <getFilteredMaxAmplitudeQ31+0x102>
 8010cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8010ce0 <getFilteredMaxAmplitudeQ31+0x11c>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	6a3a      	ldr	r2, [r7, #32]
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	d902      	bls.n	8010cc6 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 8010cc0:	4b07      	ldr	r3, [pc, #28]	@ (8010ce0 <getFilteredMaxAmplitudeQ31+0x11c>)
 8010cc2:	6a3a      	ldr	r2, [r7, #32]
 8010cc4:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 8010cc6:	6a3b      	ldr	r3, [r7, #32]
}
 8010cc8:	0018      	movs	r0, r3
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	b010      	add	sp, #64	@ 0x40
 8010cce:	bdb0      	pop	{r4, r5, r7, pc}
 8010cd0:	20001e74 	.word	0x20001e74
 8010cd4:	20001e78 	.word	0x20001e78
 8010cd8:	0802cc44 	.word	0x0802cc44
 8010cdc:	0802cc48 	.word	0x0802cc48
 8010ce0:	20000fec 	.word	0x20000fec

08010ce4 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b086      	sub	sp, #24
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	60f8      	str	r0, [r7, #12]
 8010cec:	60b9      	str	r1, [r7, #8]
 8010cee:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 8010cf0:	4913      	ldr	r1, [pc, #76]	@ (8010d40 <floatToIntAndFrac2dp+0x5c>)
 8010cf2:	68f8      	ldr	r0, [r7, #12]
 8010cf4:	f7f0 f954 	bl	8000fa0 <__aeabi_fmul>
 8010cf8:	1c03      	adds	r3, r0, #0
 8010cfa:	1c18      	adds	r0, r3, #0
 8010cfc:	f016 fe3c 	bl	8027978 <roundf>
 8010d00:	1c03      	adds	r3, r0, #0
 8010d02:	1c18      	adds	r0, r3, #0
 8010d04:	f7ef fc8a 	bl	800061c <__aeabi_f2uiz>
 8010d08:	0003      	movs	r3, r0
 8010d0a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	2164      	movs	r1, #100	@ 0x64
 8010d10:	0018      	movs	r0, r3
 8010d12:	f7ef fa47 	bl	80001a4 <__udivsi3>
 8010d16:	0003      	movs	r3, r0
 8010d18:	001a      	movs	r2, r3
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	b2da      	uxtb	r2, r3
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	2164      	movs	r1, #100	@ 0x64
 8010d2a:	434b      	muls	r3, r1
 8010d2c:	b2db      	uxtb	r3, r3
 8010d2e:	1ad3      	subs	r3, r2, r3
 8010d30:	b2da      	uxtb	r2, r3
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	701a      	strb	r2, [r3, #0]
}
 8010d36:	46c0      	nop			@ (mov r8, r8)
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	b006      	add	sp, #24
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	46c0      	nop			@ (mov r8, r8)
 8010d40:	42c80000 	.word	0x42c80000

08010d44 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b086      	sub	sp, #24
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 8010d50:	4914      	ldr	r1, [pc, #80]	@ (8010da4 <floatToIntAndFrac1dp+0x60>)
 8010d52:	68f8      	ldr	r0, [r7, #12]
 8010d54:	f7f0 f924 	bl	8000fa0 <__aeabi_fmul>
 8010d58:	1c03      	adds	r3, r0, #0
 8010d5a:	1c18      	adds	r0, r3, #0
 8010d5c:	f016 fe0c 	bl	8027978 <roundf>
 8010d60:	1c03      	adds	r3, r0, #0
 8010d62:	1c18      	adds	r0, r3, #0
 8010d64:	f7ef fc5a 	bl	800061c <__aeabi_f2uiz>
 8010d68:	0003      	movs	r3, r0
 8010d6a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	210a      	movs	r1, #10
 8010d70:	0018      	movs	r0, r3
 8010d72:	f7ef fa17 	bl	80001a4 <__udivsi3>
 8010d76:	0003      	movs	r3, r0
 8010d78:	001a      	movs	r2, r3
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	b2da      	uxtb	r2, r3
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	b2db      	uxtb	r3, r3
 8010d88:	1c19      	adds	r1, r3, #0
 8010d8a:	0089      	lsls	r1, r1, #2
 8010d8c:	18cb      	adds	r3, r1, r3
 8010d8e:	18db      	adds	r3, r3, r3
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	1ad3      	subs	r3, r2, r3
 8010d94:	b2da      	uxtb	r2, r3
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	701a      	strb	r2, [r3, #0]
}
 8010d9a:	46c0      	nop			@ (mov r8, r8)
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	b006      	add	sp, #24
 8010da0:	bd80      	pop	{r7, pc}
 8010da2:	46c0      	nop			@ (mov r8, r8)
 8010da4:	41200000 	.word	0x41200000

08010da8 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 8010da8:	b590      	push	{r4, r7, lr}
 8010daa:	b087      	sub	sp, #28
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	60b9      	str	r1, [r7, #8]
 8010db2:	607a      	str	r2, [r7, #4]
 8010db4:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f7f0 fc0a 	bl	80015d0 <__aeabi_i2f>
 8010dbc:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8010dbe:	6838      	ldr	r0, [r7, #0]
 8010dc0:	f7f0 fc06 	bl	80015d0 <__aeabi_i2f>
 8010dc4:	1c03      	adds	r3, r0, #0
 8010dc6:	4918      	ldr	r1, [pc, #96]	@ (8010e28 <sumToIntAverage+0x80>)
 8010dc8:	1c18      	adds	r0, r3, #0
 8010dca:	f7ef ff03 	bl	8000bd4 <__aeabi_fdiv>
 8010dce:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8010dd0:	1c19      	adds	r1, r3, #0
 8010dd2:	1c20      	adds	r0, r4, #0
 8010dd4:	f7ef fd74 	bl	80008c0 <__aeabi_fadd>
 8010dd8:	1c03      	adds	r3, r0, #0
 8010dda:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8010ddc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010dde:	f7f0 fc43 	bl	8001668 <__aeabi_ui2f>
 8010de2:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8010de4:	1c19      	adds	r1, r3, #0
 8010de6:	1c20      	adds	r0, r4, #0
 8010de8:	f7ef fef4 	bl	8000bd4 <__aeabi_fdiv>
 8010dec:	1c03      	adds	r3, r0, #0
 8010dee:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 8010df0:	2300      	movs	r3, #0
 8010df2:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 8010df4:	68ba      	ldr	r2, [r7, #8]
 8010df6:	2310      	movs	r3, #16
 8010df8:	18f9      	adds	r1, r7, r3
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	1c18      	adds	r0, r3, #0
 8010dfe:	f7ff ffa1 	bl	8010d44 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	2bff      	cmp	r3, #255	@ 0xff
 8010e06:	d906      	bls.n	8010e16 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	22ff      	movs	r2, #255	@ 0xff
 8010e0c:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	2209      	movs	r2, #9
 8010e12:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 8010e14:	e003      	b.n	8010e1e <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	b2da      	uxtb	r2, r3
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	701a      	strb	r2, [r3, #0]
}
 8010e1e:	46c0      	nop			@ (mov r8, r8)
 8010e20:	46bd      	mov	sp, r7
 8010e22:	b007      	add	sp, #28
 8010e24:	bd90      	pop	{r4, r7, pc}
 8010e26:	46c0      	nop			@ (mov r8, r8)
 8010e28:	41200000 	.word	0x41200000

08010e2c <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b086      	sub	sp, #24
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	60f8      	str	r0, [r7, #12]
 8010e34:	60b9      	str	r1, [r7, #8]
 8010e36:	607a      	str	r2, [r7, #4]
 8010e38:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	2280      	movs	r2, #128	@ 0x80
 8010e3e:	0612      	lsls	r2, r2, #24
 8010e40:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	4a18      	ldr	r2, [pc, #96]	@ (8010ea8 <findMinMax+0x7c>)
 8010e46:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8010e48:	2300      	movs	r3, #0
 8010e4a:	617b      	str	r3, [r7, #20]
 8010e4c:	e022      	b.n	8010e94 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	009b      	lsls	r3, r3, #2
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	18d3      	adds	r3, r2, r3
 8010e56:	681a      	ldr	r2, [r3, #0]
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	da06      	bge.n	8010e6e <findMinMax+0x42>
        {
            min[0] = array[i];
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	009b      	lsls	r3, r3, #2
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	18d3      	adds	r3, r2, r3
 8010e68:	681a      	ldr	r2, [r3, #0]
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	009b      	lsls	r3, r3, #2
 8010e72:	687a      	ldr	r2, [r7, #4]
 8010e74:	18d3      	adds	r3, r2, r3
 8010e76:	681a      	ldr	r2, [r3, #0]
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	dd06      	ble.n	8010e8e <findMinMax+0x62>
        {
            max[0] = array[i];
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	009b      	lsls	r3, r3, #2
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	18d3      	adds	r3, r2, r3
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	3301      	adds	r3, #1
 8010e92:	617b      	str	r3, [r7, #20]
 8010e94:	697a      	ldr	r2, [r7, #20]
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d3d8      	bcc.n	8010e4e <findMinMax+0x22>
        }
    }
}
 8010e9c:	46c0      	nop			@ (mov r8, r8)
 8010e9e:	46c0      	nop			@ (mov r8, r8)
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	b006      	add	sp, #24
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	46c0      	nop			@ (mov r8, r8)
 8010ea8:	7fffffff 	.word	0x7fffffff

08010eac <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b084      	sub	sp, #16
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
 8010eb4:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 8010eba:	687a      	ldr	r2, [r7, #4]
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d302      	bcc.n	8010ec8 <getPo2factor+0x1c>
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d107      	bne.n	8010ed8 <getPo2factor+0x2c>
    {
        return 0;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	e00d      	b.n	8010ee8 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	085b      	lsrs	r3, r3, #1
 8010ed0:	607b      	str	r3, [r7, #4]
        bitShift++;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 8010ed8:	687a      	ldr	r2, [r7, #4]
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d2f5      	bcs.n	8010ecc <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	3b01      	subs	r3, #1
 8010ee4:	60fb      	str	r3, [r7, #12]
    return bitShift;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
}
 8010ee8:	0018      	movs	r0, r3
 8010eea:	46bd      	mov	sp, r7
 8010eec:	b004      	add	sp, #16
 8010eee:	bd80      	pop	{r7, pc}

08010ef0 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b086      	sub	sp, #24
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	60f8      	str	r0, [r7, #12]
 8010ef8:	60b9      	str	r1, [r7, #8]
 8010efa:	607a      	str	r2, [r7, #4]
 8010efc:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 8010efe:	68f8      	ldr	r0, [r7, #12]
 8010f00:	f7f0 fbb2 	bl	8001668 <__aeabi_ui2f>
 8010f04:	1c03      	adds	r3, r0, #0
 8010f06:	1c19      	adds	r1, r3, #0
 8010f08:	68b8      	ldr	r0, [r7, #8]
 8010f0a:	f7f0 f849 	bl	8000fa0 <__aeabi_fmul>
 8010f0e:	1c03      	adds	r3, r0, #0
 8010f10:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 8010f12:	2300      	movs	r3, #0
 8010f14:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 8010f16:	683a      	ldr	r2, [r7, #0]
 8010f18:	2310      	movs	r3, #16
 8010f1a:	18f9      	adds	r1, r7, r3
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	1c18      	adds	r0, r3, #0
 8010f20:	f7ff fee0 	bl	8010ce4 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	b29a      	uxth	r2, r3
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	801a      	strh	r2, [r3, #0]
}
 8010f2c:	46c0      	nop			@ (mov r8, r8)
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	b006      	add	sp, #24
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b084      	sub	sp, #16
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	60b8      	str	r0, [r7, #8]
 8010f3c:	60f9      	str	r1, [r7, #12]
 8010f3e:	607a      	str	r2, [r7, #4]
 8010f40:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 8010f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f44:	6a3a      	ldr	r2, [r7, #32]
 8010f46:	68b8      	ldr	r0, [r7, #8]
 8010f48:	68f9      	ldr	r1, [r7, #12]
 8010f4a:	f7f9 ffc5 	bl	800aed8 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 8010f4e:	6a3b      	ldr	r3, [r7, #32]
 8010f50:	681a      	ldr	r2, [r3, #0]
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	18d2      	adds	r2, r2, r3
 8010f56:	69bb      	ldr	r3, [r7, #24]
 8010f58:	18d2      	adds	r2, r2, r3
 8010f5a:	6a3b      	ldr	r3, [r7, #32]
 8010f5c:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 8010f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f60:	681a      	ldr	r2, [r3, #0]
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	18d2      	adds	r2, r2, r3
 8010f66:	69fb      	ldr	r3, [r7, #28]
 8010f68:	18d2      	adds	r2, r2, r3
 8010f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f6c:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 8010f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f70:	6a3b      	ldr	r3, [r7, #32]
 8010f72:	0011      	movs	r1, r2
 8010f74:	0018      	movs	r0, r3
 8010f76:	f7fa f83f 	bl	800aff8 <correctIntFracNumber>
}
 8010f7a:	46c0      	nop			@ (mov r8, r8)
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	b004      	add	sp, #16
 8010f80:	bd80      	pop	{r7, pc}

08010f82 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b086      	sub	sp, #24
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	60f8      	str	r0, [r7, #12]
 8010f8a:	60b9      	str	r1, [r7, #8]
 8010f8c:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8010f92:	2300      	movs	r3, #0
 8010f94:	613b      	str	r3, [r7, #16]
 8010f96:	e019      	b.n	8010fcc <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	005b      	lsls	r3, r3, #1
 8010f9c:	68fa      	ldr	r2, [r7, #12]
 8010f9e:	18d3      	adds	r3, r2, r3
 8010fa0:	881b      	ldrh	r3, [r3, #0]
 8010fa2:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8010fa4:	693a      	ldr	r2, [r7, #16]
 8010fa6:	3201      	adds	r2, #1
 8010fa8:	0052      	lsls	r2, r2, #1
 8010faa:	68f9      	ldr	r1, [r7, #12]
 8010fac:	188a      	adds	r2, r1, r2
 8010fae:	8812      	ldrh	r2, [r2, #0]
 8010fb0:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8010fb2:	0019      	movs	r1, r3
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	009b      	lsls	r3, r3, #2
 8010fb8:	687a      	ldr	r2, [r7, #4]
 8010fba:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8010fbc:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8010fbe:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	3301      	adds	r3, #1
 8010fc4:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	3304      	adds	r3, #4
 8010fca:	613b      	str	r3, [r7, #16]
 8010fcc:	693a      	ldr	r2, [r7, #16]
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	d3e1      	bcc.n	8010f98 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 8010fd4:	46c0      	nop			@ (mov r8, r8)
 8010fd6:	46c0      	nop			@ (mov r8, r8)
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	b006      	add	sp, #24
 8010fdc:	bd80      	pop	{r7, pc}
	...

08010fe0 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	af00      	add	r7, sp, #0
  init = false;
 8010fe4:	4b02      	ldr	r3, [pc, #8]	@ (8010ff0 <InitDone+0x10>)
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	701a      	strb	r2, [r3, #0]
}
 8010fea:	46c0      	nop			@ (mov r8, r8)
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	200000dc 	.word	0x200000dc

08010ff4 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 8010ffa:	f7f7 fc9f 	bl	800893c <ReadBatteryVoltage>
 8010ffe:	1c02      	adds	r2, r0, #0
 8011000:	4b25      	ldr	r3, [pc, #148]	@ (8011098 <batteryChargeCheck+0xa4>)
 8011002:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 8011004:	4b24      	ldr	r3, [pc, #144]	@ (8011098 <batteryChargeCheck+0xa4>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	4924      	ldr	r1, [pc, #144]	@ (801109c <batteryChargeCheck+0xa8>)
 801100a:	1c18      	adds	r0, r3, #0
 801100c:	f7ef fa90 	bl	8000530 <__aeabi_fcmplt>
 8011010:	1e03      	subs	r3, r0, #0
 8011012:	d002      	beq.n	801101a <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 8011014:	1dfb      	adds	r3, r7, #7
 8011016:	2200      	movs	r2, #0
 8011018:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 801101a:	4b1f      	ldr	r3, [pc, #124]	@ (8011098 <batteryChargeCheck+0xa4>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	491f      	ldr	r1, [pc, #124]	@ (801109c <batteryChargeCheck+0xa8>)
 8011020:	1c18      	adds	r0, r3, #0
 8011022:	f7ef faa3 	bl	800056c <__aeabi_fcmpge>
 8011026:	1e03      	subs	r3, r0, #0
 8011028:	d00d      	beq.n	8011046 <batteryChargeCheck+0x52>
 801102a:	4b1b      	ldr	r3, [pc, #108]	@ (8011098 <batteryChargeCheck+0xa4>)
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	1c18      	adds	r0, r3, #0
 8011030:	f7f2 fa18 	bl	8003464 <__aeabi_f2d>
 8011034:	4a1a      	ldr	r2, [pc, #104]	@ (80110a0 <batteryChargeCheck+0xac>)
 8011036:	4b1b      	ldr	r3, [pc, #108]	@ (80110a4 <batteryChargeCheck+0xb0>)
 8011038:	f7ef fa40 	bl	80004bc <__aeabi_dcmplt>
 801103c:	1e03      	subs	r3, r0, #0
 801103e:	d002      	beq.n	8011046 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 8011040:	1dfb      	adds	r3, r7, #7
 8011042:	2201      	movs	r2, #1
 8011044:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 8011046:	4b14      	ldr	r3, [pc, #80]	@ (8011098 <batteryChargeCheck+0xa4>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	1c18      	adds	r0, r3, #0
 801104c:	f7f2 fa0a 	bl	8003464 <__aeabi_f2d>
 8011050:	4a13      	ldr	r2, [pc, #76]	@ (80110a0 <batteryChargeCheck+0xac>)
 8011052:	4b14      	ldr	r3, [pc, #80]	@ (80110a4 <batteryChargeCheck+0xb0>)
 8011054:	f7ef fa50 	bl	80004f8 <__aeabi_dcmpge>
 8011058:	1e03      	subs	r3, r0, #0
 801105a:	d00b      	beq.n	8011074 <batteryChargeCheck+0x80>
 801105c:	4b0e      	ldr	r3, [pc, #56]	@ (8011098 <batteryChargeCheck+0xa4>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	2181      	movs	r1, #129	@ 0x81
 8011062:	05c9      	lsls	r1, r1, #23
 8011064:	1c18      	adds	r0, r3, #0
 8011066:	f7ef fa63 	bl	8000530 <__aeabi_fcmplt>
 801106a:	1e03      	subs	r3, r0, #0
 801106c:	d002      	beq.n	8011074 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 801106e:	1dfb      	adds	r3, r7, #7
 8011070:	2202      	movs	r2, #2
 8011072:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 8011074:	4b08      	ldr	r3, [pc, #32]	@ (8011098 <batteryChargeCheck+0xa4>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	2181      	movs	r1, #129	@ 0x81
 801107a:	05c9      	lsls	r1, r1, #23
 801107c:	1c18      	adds	r0, r3, #0
 801107e:	f7ef fa75 	bl	800056c <__aeabi_fcmpge>
 8011082:	1e03      	subs	r3, r0, #0
 8011084:	d002      	beq.n	801108c <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 8011086:	1dfb      	adds	r3, r7, #7
 8011088:	2203      	movs	r2, #3
 801108a:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 801108c:	1dfb      	adds	r3, r7, #7
 801108e:	781b      	ldrb	r3, [r3, #0]
}
 8011090:	0018      	movs	r0, r3
 8011092:	46bd      	mov	sp, r7
 8011094:	b002      	add	sp, #8
 8011096:	bd80      	pop	{r7, pc}
 8011098:	20001e8c 	.word	0x20001e8c
 801109c:	40600000 	.word	0x40600000
 80110a0:	9999999a 	.word	0x9999999a
 80110a4:	400d9999 	.word	0x400d9999

080110a8 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 80110a8:	b5b0      	push	{r4, r5, r7, lr}
 80110aa:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 80110ac:	f7f7 fca8 	bl	8008a00 <ReadSolarVoltage>
 80110b0:	0003      	movs	r3, r0
 80110b2:	001a      	movs	r2, r3
 80110b4:	4b1a      	ldr	r3, [pc, #104]	@ (8011120 <Calculate_LED_ON+0x78>)
 80110b6:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 80110b8:	4b19      	ldr	r3, [pc, #100]	@ (8011120 <Calculate_LED_ON+0x78>)
 80110ba:	881b      	ldrh	r3, [r3, #0]
 80110bc:	4a19      	ldr	r2, [pc, #100]	@ (8011124 <Calculate_LED_ON+0x7c>)
 80110be:	4293      	cmp	r3, r2
 80110c0:	d802      	bhi.n	80110c8 <Calculate_LED_ON+0x20>
    solmV = 2900;
 80110c2:	4b17      	ldr	r3, [pc, #92]	@ (8011120 <Calculate_LED_ON+0x78>)
 80110c4:	4a18      	ldr	r2, [pc, #96]	@ (8011128 <Calculate_LED_ON+0x80>)
 80110c6:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 80110c8:	4b15      	ldr	r3, [pc, #84]	@ (8011120 <Calculate_LED_ON+0x78>)
 80110ca:	881b      	ldrh	r3, [r3, #0]
 80110cc:	4a17      	ldr	r2, [pc, #92]	@ (801112c <Calculate_LED_ON+0x84>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d902      	bls.n	80110d8 <Calculate_LED_ON+0x30>
    solmV = 4700;
 80110d2:	4b13      	ldr	r3, [pc, #76]	@ (8011120 <Calculate_LED_ON+0x78>)
 80110d4:	4a15      	ldr	r2, [pc, #84]	@ (801112c <Calculate_LED_ON+0x84>)
 80110d6:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 80110d8:	4b11      	ldr	r3, [pc, #68]	@ (8011120 <Calculate_LED_ON+0x78>)
 80110da:	881b      	ldrh	r3, [r3, #0]
 80110dc:	0018      	movs	r0, r3
 80110de:	f7f2 f96f 	bl	80033c0 <__aeabi_i2d>
 80110e2:	0004      	movs	r4, r0
 80110e4:	000d      	movs	r5, r1
 80110e6:	4b0e      	ldr	r3, [pc, #56]	@ (8011120 <Calculate_LED_ON+0x78>)
 80110e8:	881b      	ldrh	r3, [r3, #0]
 80110ea:	001a      	movs	r2, r3
 80110ec:	4b10      	ldr	r3, [pc, #64]	@ (8011130 <Calculate_LED_ON+0x88>)
 80110ee:	1a9b      	subs	r3, r3, r2
 80110f0:	0018      	movs	r0, r3
 80110f2:	f7f2 f965 	bl	80033c0 <__aeabi_i2d>
 80110f6:	2200      	movs	r2, #0
 80110f8:	4b0e      	ldr	r3, [pc, #56]	@ (8011134 <Calculate_LED_ON+0x8c>)
 80110fa:	f7f1 fa9f 	bl	800263c <__aeabi_dmul>
 80110fe:	0002      	movs	r2, r0
 8011100:	000b      	movs	r3, r1
 8011102:	0020      	movs	r0, r4
 8011104:	0029      	movs	r1, r5
 8011106:	f7f0 faf1 	bl	80016ec <__aeabi_dadd>
 801110a:	0002      	movs	r2, r0
 801110c:	000b      	movs	r3, r1
 801110e:	0010      	movs	r0, r2
 8011110:	0019      	movs	r1, r3
 8011112:	f7ef fa9b 	bl	800064c <__aeabi_d2uiz>
 8011116:	0003      	movs	r3, r0
 8011118:	b29b      	uxth	r3, r3
}
 801111a:	0018      	movs	r0, r3
 801111c:	46bd      	mov	sp, r7
 801111e:	bdb0      	pop	{r4, r5, r7, pc}
 8011120:	20001e90 	.word	0x20001e90
 8011124:	00000b53 	.word	0x00000b53
 8011128:	00000b54 	.word	0x00000b54
 801112c:	0000125c 	.word	0x0000125c
 8011130:	00000dee 	.word	0x00000dee
 8011134:	3ff80000 	.word	0x3ff80000

08011138 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8011138:	b590      	push	{r4, r7, lr}
 801113a:	b083      	sub	sp, #12
 801113c:	af00      	add	r7, sp, #0
 801113e:	0004      	movs	r4, r0
 8011140:	0008      	movs	r0, r1
 8011142:	0011      	movs	r1, r2
 8011144:	1dbb      	adds	r3, r7, #6
 8011146:	1c22      	adds	r2, r4, #0
 8011148:	801a      	strh	r2, [r3, #0]
 801114a:	1d3b      	adds	r3, r7, #4
 801114c:	1c02      	adds	r2, r0, #0
 801114e:	801a      	strh	r2, [r3, #0]
 8011150:	1cbb      	adds	r3, r7, #2
 8011152:	1c0a      	adds	r2, r1, #0
 8011154:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8011156:	4b0f      	ldr	r3, [pc, #60]	@ (8011194 <SetStatusLED+0x5c>)
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d107      	bne.n	801116e <SetStatusLED+0x36>
 801115e:	4b0e      	ldr	r3, [pc, #56]	@ (8011198 <SetStatusLED+0x60>)
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d103      	bne.n	801116e <SetStatusLED+0x36>
 8011166:	4b0d      	ldr	r3, [pc, #52]	@ (801119c <SetStatusLED+0x64>)
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d00e      	beq.n	801118c <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 801116e:	2380      	movs	r3, #128	@ 0x80
 8011170:	05db      	lsls	r3, r3, #23
 8011172:	1dba      	adds	r2, r7, #6
 8011174:	8812      	ldrh	r2, [r2, #0]
 8011176:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8011178:	2380      	movs	r3, #128	@ 0x80
 801117a:	05db      	lsls	r3, r3, #23
 801117c:	1d3a      	adds	r2, r7, #4
 801117e:	8812      	ldrh	r2, [r2, #0]
 8011180:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8011182:	2380      	movs	r3, #128	@ 0x80
 8011184:	05db      	lsls	r3, r3, #23
 8011186:	1cba      	adds	r2, r7, #2
 8011188:	8812      	ldrh	r2, [r2, #0]
 801118a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 801118c:	46c0      	nop			@ (mov r8, r8)
 801118e:	46bd      	mov	sp, r7
 8011190:	b003      	add	sp, #12
 8011192:	bd90      	pop	{r4, r7, pc}
 8011194:	20001e7d 	.word	0x20001e7d
 8011198:	200000dc 	.word	0x200000dc
 801119c:	20001e7e 	.word	0x20001e7e

080111a0 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 80111a0:	b590      	push	{r4, r7, lr}
 80111a2:	b083      	sub	sp, #12
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	0004      	movs	r4, r0
 80111a8:	0008      	movs	r0, r1
 80111aa:	0011      	movs	r1, r2
 80111ac:	1dfb      	adds	r3, r7, #7
 80111ae:	1c22      	adds	r2, r4, #0
 80111b0:	701a      	strb	r2, [r3, #0]
 80111b2:	1dbb      	adds	r3, r7, #6
 80111b4:	1c02      	adds	r2, r0, #0
 80111b6:	701a      	strb	r2, [r3, #0]
 80111b8:	1d7b      	adds	r3, r7, #5
 80111ba:	1c0a      	adds	r2, r1, #0
 80111bc:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 80111be:	4b19      	ldr	r3, [pc, #100]	@ (8011224 <SetDBLED+0x84>)
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d107      	bne.n	80111d6 <SetDBLED+0x36>
 80111c6:	4b18      	ldr	r3, [pc, #96]	@ (8011228 <SetDBLED+0x88>)
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d103      	bne.n	80111d6 <SetDBLED+0x36>
 80111ce:	4b17      	ldr	r3, [pc, #92]	@ (801122c <SetDBLED+0x8c>)
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d022      	beq.n	801121c <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 80111d6:	1dfb      	adds	r3, r7, #7
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	2201      	movs	r2, #1
 80111dc:	4053      	eors	r3, r2
 80111de:	b2db      	uxtb	r3, r3
 80111e0:	001a      	movs	r2, r3
 80111e2:	4b13      	ldr	r3, [pc, #76]	@ (8011230 <SetDBLED+0x90>)
 80111e4:	2101      	movs	r1, #1
 80111e6:	0018      	movs	r0, r3
 80111e8:	f003 fa31 	bl	801464e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 80111ec:	1dbb      	adds	r3, r7, #6
 80111ee:	781b      	ldrb	r3, [r3, #0]
 80111f0:	2201      	movs	r2, #1
 80111f2:	4053      	eors	r3, r2
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	001a      	movs	r2, r3
 80111f8:	2380      	movs	r3, #128	@ 0x80
 80111fa:	005b      	lsls	r3, r3, #1
 80111fc:	480c      	ldr	r0, [pc, #48]	@ (8011230 <SetDBLED+0x90>)
 80111fe:	0019      	movs	r1, r3
 8011200:	f003 fa25 	bl	801464e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8011204:	1d7b      	adds	r3, r7, #5
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	2201      	movs	r2, #1
 801120a:	4053      	eors	r3, r2
 801120c:	b2db      	uxtb	r3, r3
 801120e:	001a      	movs	r2, r3
 8011210:	2380      	movs	r3, #128	@ 0x80
 8011212:	009b      	lsls	r3, r3, #2
 8011214:	4806      	ldr	r0, [pc, #24]	@ (8011230 <SetDBLED+0x90>)
 8011216:	0019      	movs	r1, r3
 8011218:	f003 fa19 	bl	801464e <HAL_GPIO_WritePin>
  }
}
 801121c:	46c0      	nop			@ (mov r8, r8)
 801121e:	46bd      	mov	sp, r7
 8011220:	b003      	add	sp, #12
 8011222:	bd90      	pop	{r4, r7, pc}
 8011224:	20001e7d 	.word	0x20001e7d
 8011228:	200000dc 	.word	0x200000dc
 801122c:	20001e7e 	.word	0x20001e7e
 8011230:	50000400 	.word	0x50000400

08011234 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8011234:	b590      	push	{r4, r7, lr}
 8011236:	b083      	sub	sp, #12
 8011238:	af00      	add	r7, sp, #0
 801123a:	0004      	movs	r4, r0
 801123c:	0008      	movs	r0, r1
 801123e:	0011      	movs	r1, r2
 8011240:	1dbb      	adds	r3, r7, #6
 8011242:	1c22      	adds	r2, r4, #0
 8011244:	801a      	strh	r2, [r3, #0]
 8011246:	1d3b      	adds	r3, r7, #4
 8011248:	1c02      	adds	r2, r0, #0
 801124a:	801a      	strh	r2, [r3, #0]
 801124c:	1cbb      	adds	r3, r7, #2
 801124e:	1c0a      	adds	r2, r1, #0
 8011250:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8011252:	4b0e      	ldr	r3, [pc, #56]	@ (801128c <SetVocLED+0x58>)
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d107      	bne.n	801126a <SetVocLED+0x36>
 801125a:	4b0d      	ldr	r3, [pc, #52]	@ (8011290 <SetVocLED+0x5c>)
 801125c:	781b      	ldrb	r3, [r3, #0]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d103      	bne.n	801126a <SetVocLED+0x36>
 8011262:	4b0c      	ldr	r3, [pc, #48]	@ (8011294 <SetVocLED+0x60>)
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d00b      	beq.n	8011282 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 801126a:	4b0b      	ldr	r3, [pc, #44]	@ (8011298 <SetVocLED+0x64>)
 801126c:	1dba      	adds	r2, r7, #6
 801126e:	8812      	ldrh	r2, [r2, #0]
 8011270:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8011272:	4b09      	ldr	r3, [pc, #36]	@ (8011298 <SetVocLED+0x64>)
 8011274:	1d3a      	adds	r2, r7, #4
 8011276:	8812      	ldrh	r2, [r2, #0]
 8011278:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 801127a:	4b07      	ldr	r3, [pc, #28]	@ (8011298 <SetVocLED+0x64>)
 801127c:	1cba      	adds	r2, r7, #2
 801127e:	8812      	ldrh	r2, [r2, #0]
 8011280:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011282:	46c0      	nop			@ (mov r8, r8)
 8011284:	46bd      	mov	sp, r7
 8011286:	b003      	add	sp, #12
 8011288:	bd90      	pop	{r4, r7, pc}
 801128a:	46c0      	nop			@ (mov r8, r8)
 801128c:	20001e7d 	.word	0x20001e7d
 8011290:	200000dc 	.word	0x200000dc
 8011294:	20001e7e 	.word	0x20001e7e
 8011298:	40000400 	.word	0x40000400

0801129c <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 801129c:	b580      	push	{r7, lr}
 801129e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80112a0:	4b08      	ldr	r3, [pc, #32]	@ (80112c4 <SetMeasurementIndicator+0x28>)
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d103      	bne.n	80112b0 <SetMeasurementIndicator+0x14>
 80112a8:	4b07      	ldr	r3, [pc, #28]	@ (80112c8 <SetMeasurementIndicator+0x2c>)
 80112aa:	781b      	ldrb	r3, [r3, #0]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d006      	beq.n	80112be <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 80112b0:	f7ff fefa 	bl	80110a8 <Calculate_LED_ON>
 80112b4:	0003      	movs	r3, r0
 80112b6:	001a      	movs	r2, r3
 80112b8:	2380      	movs	r3, #128	@ 0x80
 80112ba:	05db      	lsls	r3, r3, #23
 80112bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80112be:	46c0      	nop			@ (mov r8, r8)
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	20001e7d 	.word	0x20001e7d
 80112c8:	20001e7e 	.word	0x20001e7e

080112cc <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 80112cc:	b580      	push	{r7, lr}
 80112ce:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80112d0:	4b07      	ldr	r3, [pc, #28]	@ (80112f0 <ResetMeasurementIndicator+0x24>)
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d103      	bne.n	80112e0 <ResetMeasurementIndicator+0x14>
 80112d8:	4b06      	ldr	r3, [pc, #24]	@ (80112f4 <ResetMeasurementIndicator+0x28>)
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d004      	beq.n	80112ea <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 80112e0:	2380      	movs	r3, #128	@ 0x80
 80112e2:	05db      	lsls	r3, r3, #23
 80112e4:	22fa      	movs	r2, #250	@ 0xfa
 80112e6:	0112      	lsls	r2, r2, #4
 80112e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80112ea:	46c0      	nop			@ (mov r8, r8)
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}
 80112f0:	20001e7d 	.word	0x20001e7d
 80112f4:	20001e7e 	.word	0x20001e7e

080112f8 <SetMICIndicator>:
void SetMICIndicator(){
 80112f8:	b580      	push	{r7, lr}
 80112fa:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80112fc:	4b19      	ldr	r3, [pc, #100]	@ (8011364 <SetMICIndicator+0x6c>)
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d103      	bne.n	801130c <SetMICIndicator+0x14>
 8011304:	4b18      	ldr	r3, [pc, #96]	@ (8011368 <SetMICIndicator+0x70>)
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d007      	beq.n	801131c <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 801130c:	f7ff fecc 	bl	80110a8 <Calculate_LED_ON>
 8011310:	0003      	movs	r3, r0
 8011312:	001a      	movs	r2, r3
 8011314:	2380      	movs	r3, #128	@ 0x80
 8011316:	05db      	lsls	r3, r3, #23
 8011318:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 801131a:	e01f      	b.n	801135c <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 801131c:	4b13      	ldr	r3, [pc, #76]	@ (801136c <SetMICIndicator+0x74>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	1c18      	adds	r0, r3, #0
 8011322:	f7f2 f89f 	bl	8003464 <__aeabi_f2d>
 8011326:	4a12      	ldr	r2, [pc, #72]	@ (8011370 <SetMICIndicator+0x78>)
 8011328:	4b12      	ldr	r3, [pc, #72]	@ (8011374 <SetMICIndicator+0x7c>)
 801132a:	f7ef f8db 	bl	80004e4 <__aeabi_dcmpgt>
 801132e:	1e03      	subs	r3, r0, #0
 8011330:	d00a      	beq.n	8011348 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 8011332:	f7ff feb9 	bl	80110a8 <Calculate_LED_ON>
 8011336:	0003      	movs	r3, r0
 8011338:	001a      	movs	r2, r3
 801133a:	2380      	movs	r3, #128	@ 0x80
 801133c:	05db      	lsls	r3, r3, #23
 801133e:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 8011340:	4b0d      	ldr	r3, [pc, #52]	@ (8011378 <SetMICIndicator+0x80>)
 8011342:	2202      	movs	r2, #2
 8011344:	701a      	strb	r2, [r3, #0]
}
 8011346:	e009      	b.n	801135c <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 8011348:	f7ff feae 	bl	80110a8 <Calculate_LED_ON>
 801134c:	0003      	movs	r3, r0
 801134e:	001a      	movs	r2, r3
 8011350:	2380      	movs	r3, #128	@ 0x80
 8011352:	05db      	lsls	r3, r3, #23
 8011354:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 8011356:	4b08      	ldr	r3, [pc, #32]	@ (8011378 <SetMICIndicator+0x80>)
 8011358:	2201      	movs	r2, #1
 801135a:	701a      	strb	r2, [r3, #0]
}
 801135c:	46c0      	nop			@ (mov r8, r8)
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	46c0      	nop			@ (mov r8, r8)
 8011364:	20001e7d 	.word	0x20001e7d
 8011368:	20001e7e 	.word	0x20001e7e
 801136c:	20001e8c 	.word	0x20001e8c
 8011370:	9999999a 	.word	0x9999999a
 8011374:	400d9999 	.word	0x400d9999
 8011378:	20001e80 	.word	0x20001e80

0801137c <ResetMICIndicator>:
void ResetMICIndicator(){
 801137c:	b580      	push	{r7, lr}
 801137e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011380:	4b0f      	ldr	r3, [pc, #60]	@ (80113c0 <ResetMICIndicator+0x44>)
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d103      	bne.n	8011390 <ResetMICIndicator+0x14>
 8011388:	4b0e      	ldr	r3, [pc, #56]	@ (80113c4 <ResetMICIndicator+0x48>)
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d005      	beq.n	801139c <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 8011390:	2380      	movs	r3, #128	@ 0x80
 8011392:	05db      	lsls	r3, r3, #23
 8011394:	22fa      	movs	r2, #250	@ 0xfa
 8011396:	0112      	lsls	r2, r2, #4
 8011398:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 801139a:	e00e      	b.n	80113ba <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 801139c:	4b0a      	ldr	r3, [pc, #40]	@ (80113c8 <ResetMICIndicator+0x4c>)
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	2b02      	cmp	r3, #2
 80113a2:	d105      	bne.n	80113b0 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 80113a4:	2380      	movs	r3, #128	@ 0x80
 80113a6:	05db      	lsls	r3, r3, #23
 80113a8:	22fa      	movs	r2, #250	@ 0xfa
 80113aa:	0112      	lsls	r2, r2, #4
 80113ac:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80113ae:	e004      	b.n	80113ba <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 80113b0:	2380      	movs	r3, #128	@ 0x80
 80113b2:	05db      	lsls	r3, r3, #23
 80113b4:	22fa      	movs	r2, #250	@ 0xfa
 80113b6:	0112      	lsls	r2, r2, #4
 80113b8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80113ba:	46c0      	nop			@ (mov r8, r8)
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}
 80113c0:	20001e7d 	.word	0x20001e7d
 80113c4:	20001e7e 	.word	0x20001e7e
 80113c8:	20001e80 	.word	0x20001e80

080113cc <SetESPIndicator>:
void SetESPIndicator(){
 80113cc:	b580      	push	{r7, lr}
 80113ce:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80113d0:	4b08      	ldr	r3, [pc, #32]	@ (80113f4 <SetESPIndicator+0x28>)
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d103      	bne.n	80113e0 <SetESPIndicator+0x14>
 80113d8:	4b07      	ldr	r3, [pc, #28]	@ (80113f8 <SetESPIndicator+0x2c>)
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d006      	beq.n	80113ee <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 80113e0:	f7ff fe62 	bl	80110a8 <Calculate_LED_ON>
 80113e4:	0003      	movs	r3, r0
 80113e6:	001a      	movs	r2, r3
 80113e8:	2380      	movs	r3, #128	@ 0x80
 80113ea:	05db      	lsls	r3, r3, #23
 80113ec:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80113ee:	46c0      	nop			@ (mov r8, r8)
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	20001e7d 	.word	0x20001e7d
 80113f8:	20001e7e 	.word	0x20001e7e

080113fc <ResetESPIndicator>:
void ResetESPIndicator(){
 80113fc:	b580      	push	{r7, lr}
 80113fe:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011400:	4b07      	ldr	r3, [pc, #28]	@ (8011420 <ResetESPIndicator+0x24>)
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d103      	bne.n	8011410 <ResetESPIndicator+0x14>
 8011408:	4b06      	ldr	r3, [pc, #24]	@ (8011424 <ResetESPIndicator+0x28>)
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d004      	beq.n	801141a <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 8011410:	2380      	movs	r3, #128	@ 0x80
 8011412:	05db      	lsls	r3, r3, #23
 8011414:	22fa      	movs	r2, #250	@ 0xfa
 8011416:	0112      	lsls	r2, r2, #4
 8011418:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 801141a:	46c0      	nop			@ (mov r8, r8)
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}
 8011420:	20001e7d 	.word	0x20001e7d
 8011424:	20001e7e 	.word	0x20001e7e

08011428 <SetPMIndicator>:

void SetPMIndicator() {
 8011428:	b580      	push	{r7, lr}
 801142a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 801142c:	4b0f      	ldr	r3, [pc, #60]	@ (801146c <SetPMIndicator+0x44>)
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d103      	bne.n	801143c <SetPMIndicator+0x14>
 8011434:	4b0e      	ldr	r3, [pc, #56]	@ (8011470 <SetPMIndicator+0x48>)
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d014      	beq.n	8011466 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 801143c:	f7ff fe34 	bl	80110a8 <Calculate_LED_ON>
 8011440:	0003      	movs	r3, r0
 8011442:	001a      	movs	r2, r3
 8011444:	2380      	movs	r3, #128	@ 0x80
 8011446:	05db      	lsls	r3, r3, #23
 8011448:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 801144a:	f7ff fe2d 	bl	80110a8 <Calculate_LED_ON>
 801144e:	0003      	movs	r3, r0
 8011450:	001a      	movs	r2, r3
 8011452:	2380      	movs	r3, #128	@ 0x80
 8011454:	05db      	lsls	r3, r3, #23
 8011456:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8011458:	f7ff fe26 	bl	80110a8 <Calculate_LED_ON>
 801145c:	0003      	movs	r3, r0
 801145e:	001a      	movs	r2, r3
 8011460:	2380      	movs	r3, #128	@ 0x80
 8011462:	05db      	lsls	r3, r3, #23
 8011464:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011466:	46c0      	nop			@ (mov r8, r8)
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}
 801146c:	20001e7d 	.word	0x20001e7d
 8011470:	20001e7e 	.word	0x20001e7e

08011474 <ResetPMIndicator>:

void ResetPMIndicator() {
 8011474:	b580      	push	{r7, lr}
 8011476:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011478:	4b0c      	ldr	r3, [pc, #48]	@ (80114ac <ResetPMIndicator+0x38>)
 801147a:	781b      	ldrb	r3, [r3, #0]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d103      	bne.n	8011488 <ResetPMIndicator+0x14>
 8011480:	4b0b      	ldr	r3, [pc, #44]	@ (80114b0 <ResetPMIndicator+0x3c>)
 8011482:	781b      	ldrb	r3, [r3, #0]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d00e      	beq.n	80114a6 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 8011488:	2380      	movs	r3, #128	@ 0x80
 801148a:	05db      	lsls	r3, r3, #23
 801148c:	22fa      	movs	r2, #250	@ 0xfa
 801148e:	0112      	lsls	r2, r2, #4
 8011490:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8011492:	2380      	movs	r3, #128	@ 0x80
 8011494:	05db      	lsls	r3, r3, #23
 8011496:	22fa      	movs	r2, #250	@ 0xfa
 8011498:	0112      	lsls	r2, r2, #4
 801149a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 801149c:	2380      	movs	r3, #128	@ 0x80
 801149e:	05db      	lsls	r3, r3, #23
 80114a0:	22fa      	movs	r2, #250	@ 0xfa
 80114a2:	0112      	lsls	r2, r2, #4
 80114a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80114a6:	46c0      	nop			@ (mov r8, r8)
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}
 80114ac:	20001e7d 	.word	0x20001e7d
 80114b0:	20001e7e 	.word	0x20001e7e

080114b4 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 80114b4:	b580      	push	{r7, lr}
 80114b6:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 80114b8:	23fa      	movs	r3, #250	@ 0xfa
 80114ba:	011a      	lsls	r2, r3, #4
 80114bc:	23fa      	movs	r3, #250	@ 0xfa
 80114be:	0119      	lsls	r1, r3, #4
 80114c0:	23fa      	movs	r3, #250	@ 0xfa
 80114c2:	011b      	lsls	r3, r3, #4
 80114c4:	0018      	movs	r0, r3
 80114c6:	f7ff fe37 	bl	8011138 <SetStatusLED>
  SetDBLED(false,false,false);
 80114ca:	2200      	movs	r2, #0
 80114cc:	2100      	movs	r1, #0
 80114ce:	2000      	movs	r0, #0
 80114d0:	f7ff fe66 	bl	80111a0 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 80114d4:	23fa      	movs	r3, #250	@ 0xfa
 80114d6:	011a      	lsls	r2, r3, #4
 80114d8:	23fa      	movs	r3, #250	@ 0xfa
 80114da:	0119      	lsls	r1, r3, #4
 80114dc:	23fa      	movs	r3, #250	@ 0xfa
 80114de:	011b      	lsls	r3, r3, #4
 80114e0:	0018      	movs	r0, r3
 80114e2:	f7ff fea7 	bl	8011234 <SetVocLED>
return;
 80114e6:	46c0      	nop			@ (mov r8, r8)
}
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}

080114ec <SetAllREDLED>:

void SetAllREDLED() {
 80114ec:	b580      	push	{r7, lr}
 80114ee:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 80114f0:	2380      	movs	r3, #128	@ 0x80
 80114f2:	05db      	lsls	r3, r3, #23
 80114f4:	4a19      	ldr	r2, [pc, #100]	@ (801155c <SetAllREDLED+0x70>)
 80114f6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 80114f8:	2380      	movs	r3, #128	@ 0x80
 80114fa:	05db      	lsls	r3, r3, #23
 80114fc:	22fa      	movs	r2, #250	@ 0xfa
 80114fe:	0112      	lsls	r2, r2, #4
 8011500:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8011502:	2380      	movs	r3, #128	@ 0x80
 8011504:	05db      	lsls	r3, r3, #23
 8011506:	22fa      	movs	r2, #250	@ 0xfa
 8011508:	0112      	lsls	r2, r2, #4
 801150a:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 801150c:	4b14      	ldr	r3, [pc, #80]	@ (8011560 <SetAllREDLED+0x74>)
 801150e:	4a13      	ldr	r2, [pc, #76]	@ (801155c <SetAllREDLED+0x70>)
 8011510:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8011512:	4b13      	ldr	r3, [pc, #76]	@ (8011560 <SetAllREDLED+0x74>)
 8011514:	22fa      	movs	r2, #250	@ 0xfa
 8011516:	0112      	lsls	r2, r2, #4
 8011518:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 801151a:	4b11      	ldr	r3, [pc, #68]	@ (8011560 <SetAllREDLED+0x74>)
 801151c:	22fa      	movs	r2, #250	@ 0xfa
 801151e:	0112      	lsls	r2, r2, #4
 8011520:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8011522:	4b10      	ldr	r3, [pc, #64]	@ (8011564 <SetAllREDLED+0x78>)
 8011524:	2200      	movs	r2, #0
 8011526:	2101      	movs	r1, #1
 8011528:	0018      	movs	r0, r3
 801152a:	f003 f890 	bl	801464e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 801152e:	2380      	movs	r3, #128	@ 0x80
 8011530:	005b      	lsls	r3, r3, #1
 8011532:	480c      	ldr	r0, [pc, #48]	@ (8011564 <SetAllREDLED+0x78>)
 8011534:	2201      	movs	r2, #1
 8011536:	0019      	movs	r1, r3
 8011538:	f003 f889 	bl	801464e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 801153c:	2380      	movs	r3, #128	@ 0x80
 801153e:	009b      	lsls	r3, r3, #2
 8011540:	4808      	ldr	r0, [pc, #32]	@ (8011564 <SetAllREDLED+0x78>)
 8011542:	2201      	movs	r2, #1
 8011544:	0019      	movs	r1, r3
 8011546:	f003 f882 	bl	801464e <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 801154a:	23fa      	movs	r3, #250	@ 0xfa
 801154c:	009b      	lsls	r3, r3, #2
 801154e:	0018      	movs	r0, r3
 8011550:	f001 fdf6 	bl	8013140 <HAL_Delay>
}
 8011554:	46c0      	nop			@ (mov r8, r8)
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	46c0      	nop			@ (mov r8, r8)
 801155c:	00000bb8 	.word	0x00000bb8
 8011560:	40000400 	.word	0x40000400
 8011564:	50000400 	.word	0x50000400

08011568 <SetAllBlueLED>:

void SetAllBlueLED() {
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 801156e:	1dfb      	adds	r3, r7, #7
 8011570:	2200      	movs	r2, #0
 8011572:	701a      	strb	r2, [r3, #0]
 8011574:	e03d      	b.n	80115f2 <SetAllBlueLED+0x8a>
    TIM2 -> CCR1 = LED_OFF;
 8011576:	2380      	movs	r3, #128	@ 0x80
 8011578:	05db      	lsls	r3, r3, #23
 801157a:	22fa      	movs	r2, #250	@ 0xfa
 801157c:	0112      	lsls	r2, r2, #4
 801157e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8011580:	2380      	movs	r3, #128	@ 0x80
 8011582:	05db      	lsls	r3, r3, #23
 8011584:	22fa      	movs	r2, #250	@ 0xfa
 8011586:	0112      	lsls	r2, r2, #4
 8011588:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 801158a:	2380      	movs	r3, #128	@ 0x80
 801158c:	05db      	lsls	r3, r3, #23
 801158e:	4a1d      	ldr	r2, [pc, #116]	@ (8011604 <SetAllBlueLED+0x9c>)
 8011590:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8011592:	4b1d      	ldr	r3, [pc, #116]	@ (8011608 <SetAllBlueLED+0xa0>)
 8011594:	22fa      	movs	r2, #250	@ 0xfa
 8011596:	0112      	lsls	r2, r2, #4
 8011598:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 801159a:	4b1b      	ldr	r3, [pc, #108]	@ (8011608 <SetAllBlueLED+0xa0>)
 801159c:	22fa      	movs	r2, #250	@ 0xfa
 801159e:	0112      	lsls	r2, r2, #4
 80115a0:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 80115a2:	4b19      	ldr	r3, [pc, #100]	@ (8011608 <SetAllBlueLED+0xa0>)
 80115a4:	4a17      	ldr	r2, [pc, #92]	@ (8011604 <SetAllBlueLED+0x9c>)
 80115a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 80115a8:	4b18      	ldr	r3, [pc, #96]	@ (801160c <SetAllBlueLED+0xa4>)
 80115aa:	2201      	movs	r2, #1
 80115ac:	2101      	movs	r1, #1
 80115ae:	0018      	movs	r0, r3
 80115b0:	f003 f84d 	bl	801464e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 80115b4:	2380      	movs	r3, #128	@ 0x80
 80115b6:	005b      	lsls	r3, r3, #1
 80115b8:	4814      	ldr	r0, [pc, #80]	@ (801160c <SetAllBlueLED+0xa4>)
 80115ba:	2201      	movs	r2, #1
 80115bc:	0019      	movs	r1, r3
 80115be:	f003 f846 	bl	801464e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 80115c2:	2380      	movs	r3, #128	@ 0x80
 80115c4:	009b      	lsls	r3, r3, #2
 80115c6:	4811      	ldr	r0, [pc, #68]	@ (801160c <SetAllBlueLED+0xa4>)
 80115c8:	2200      	movs	r2, #0
 80115ca:	0019      	movs	r1, r3
 80115cc:	f003 f83f 	bl	801464e <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80115d0:	23fa      	movs	r3, #250	@ 0xfa
 80115d2:	009b      	lsls	r3, r3, #2
 80115d4:	0018      	movs	r0, r3
 80115d6:	f001 fdb3 	bl	8013140 <HAL_Delay>
    SetLEDsOff();
 80115da:	f7ff ff6b 	bl	80114b4 <SetLEDsOff>
    HAL_Delay(500);
 80115de:	23fa      	movs	r3, #250	@ 0xfa
 80115e0:	005b      	lsls	r3, r3, #1
 80115e2:	0018      	movs	r0, r3
 80115e4:	f001 fdac 	bl	8013140 <HAL_Delay>
  for (uint8_t bl = 0; bl < 3; bl++) {
 80115e8:	1dfb      	adds	r3, r7, #7
 80115ea:	781a      	ldrb	r2, [r3, #0]
 80115ec:	1dfb      	adds	r3, r7, #7
 80115ee:	3201      	adds	r2, #1
 80115f0:	701a      	strb	r2, [r3, #0]
 80115f2:	1dfb      	adds	r3, r7, #7
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	2b02      	cmp	r3, #2
 80115f8:	d9bd      	bls.n	8011576 <SetAllBlueLED+0xe>
  }
}
 80115fa:	46c0      	nop			@ (mov r8, r8)
 80115fc:	46c0      	nop			@ (mov r8, r8)
 80115fe:	46bd      	mov	sp, r7
 8011600:	b002      	add	sp, #8
 8011602:	bd80      	pop	{r7, pc}
 8011604:	00000bb8 	.word	0x00000bb8
 8011608:	40000400 	.word	0x40000400
 801160c:	50000400 	.word	0x50000400

08011610 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8011610:	b5b0      	push	{r4, r5, r7, lr}
 8011612:	b082      	sub	sp, #8
 8011614:	af00      	add	r7, sp, #0
 8011616:	0002      	movs	r2, r0
 8011618:	1dbb      	adds	r3, r7, #6
 801161a:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 801161c:	1dbb      	adds	r3, r7, #6
 801161e:	881b      	ldrh	r3, [r3, #0]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d05a      	beq.n	80116da <SetVOCindicator+0xca>
 8011624:	1dbb      	adds	r3, r7, #6
 8011626:	881b      	ldrh	r3, [r3, #0]
 8011628:	2b64      	cmp	r3, #100	@ 0x64
 801162a:	d856      	bhi.n	80116da <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 801162c:	1dbb      	adds	r3, r7, #6
 801162e:	881b      	ldrh	r3, [r3, #0]
 8011630:	0018      	movs	r0, r3
 8011632:	f7f1 fec5 	bl	80033c0 <__aeabi_i2d>
 8011636:	2200      	movs	r2, #0
 8011638:	4b5f      	ldr	r3, [pc, #380]	@ (80117b8 <SetVOCindicator+0x1a8>)
 801163a:	f7f0 fbbb 	bl	8001db4 <__aeabi_ddiv>
 801163e:	0002      	movs	r2, r0
 8011640:	000b      	movs	r3, r1
 8011642:	2000      	movs	r0, #0
 8011644:	495d      	ldr	r1, [pc, #372]	@ (80117bc <SetVOCindicator+0x1ac>)
 8011646:	f7f1 fac1 	bl	8002bcc <__aeabi_dsub>
 801164a:	0002      	movs	r2, r0
 801164c:	000b      	movs	r3, r1
 801164e:	0014      	movs	r4, r2
 8011650:	001d      	movs	r5, r3
 8011652:	4b5b      	ldr	r3, [pc, #364]	@ (80117c0 <SetVOCindicator+0x1b0>)
 8011654:	881b      	ldrh	r3, [r3, #0]
 8011656:	0018      	movs	r0, r3
 8011658:	f7f1 feb2 	bl	80033c0 <__aeabi_i2d>
 801165c:	0002      	movs	r2, r0
 801165e:	000b      	movs	r3, r1
 8011660:	0020      	movs	r0, r4
 8011662:	0029      	movs	r1, r5
 8011664:	f7f0 ffea 	bl	800263c <__aeabi_dmul>
 8011668:	0002      	movs	r2, r0
 801166a:	000b      	movs	r3, r1
 801166c:	0010      	movs	r0, r2
 801166e:	0019      	movs	r1, r3
 8011670:	f7ee ffec 	bl	800064c <__aeabi_d2uiz>
 8011674:	0003      	movs	r3, r0
 8011676:	b29a      	uxth	r2, r3
 8011678:	4b52      	ldr	r3, [pc, #328]	@ (80117c4 <SetVOCindicator+0x1b4>)
 801167a:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 801167c:	1dbb      	adds	r3, r7, #6
 801167e:	881b      	ldrh	r3, [r3, #0]
 8011680:	0018      	movs	r0, r3
 8011682:	f7f1 fe9d 	bl	80033c0 <__aeabi_i2d>
 8011686:	2200      	movs	r2, #0
 8011688:	4b4b      	ldr	r3, [pc, #300]	@ (80117b8 <SetVOCindicator+0x1a8>)
 801168a:	f7f0 fb93 	bl	8001db4 <__aeabi_ddiv>
 801168e:	0002      	movs	r2, r0
 8011690:	000b      	movs	r3, r1
 8011692:	0014      	movs	r4, r2
 8011694:	001d      	movs	r5, r3
 8011696:	4b4a      	ldr	r3, [pc, #296]	@ (80117c0 <SetVOCindicator+0x1b0>)
 8011698:	881b      	ldrh	r3, [r3, #0]
 801169a:	0018      	movs	r0, r3
 801169c:	f7f1 fe90 	bl	80033c0 <__aeabi_i2d>
 80116a0:	0002      	movs	r2, r0
 80116a2:	000b      	movs	r3, r1
 80116a4:	0020      	movs	r0, r4
 80116a6:	0029      	movs	r1, r5
 80116a8:	f7f0 ffc8 	bl	800263c <__aeabi_dmul>
 80116ac:	0002      	movs	r2, r0
 80116ae:	000b      	movs	r3, r1
 80116b0:	0010      	movs	r0, r2
 80116b2:	0019      	movs	r1, r3
 80116b4:	f7ee ffca 	bl	800064c <__aeabi_d2uiz>
 80116b8:	0003      	movs	r3, r0
 80116ba:	b29a      	uxth	r2, r3
 80116bc:	4b42      	ldr	r3, [pc, #264]	@ (80117c8 <SetVOCindicator+0x1b8>)
 80116be:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 80116c0:	4b3f      	ldr	r3, [pc, #252]	@ (80117c0 <SetVOCindicator+0x1b0>)
 80116c2:	881a      	ldrh	r2, [r3, #0]
 80116c4:	4b41      	ldr	r3, [pc, #260]	@ (80117cc <SetVOCindicator+0x1bc>)
 80116c6:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 80116c8:	4b40      	ldr	r3, [pc, #256]	@ (80117cc <SetVOCindicator+0x1bc>)
 80116ca:	8818      	ldrh	r0, [r3, #0]
 80116cc:	4b3d      	ldr	r3, [pc, #244]	@ (80117c4 <SetVOCindicator+0x1b4>)
 80116ce:	8819      	ldrh	r1, [r3, #0]
 80116d0:	4b3d      	ldr	r3, [pc, #244]	@ (80117c8 <SetVOCindicator+0x1b8>)
 80116d2:	881b      	ldrh	r3, [r3, #0]
 80116d4:	001a      	movs	r2, r3
 80116d6:	f7ff fdad 	bl	8011234 <SetVocLED>
  }
  if(VOCi > 100){
 80116da:	1dbb      	adds	r3, r7, #6
 80116dc:	881b      	ldrh	r3, [r3, #0]
 80116de:	2b64      	cmp	r3, #100	@ 0x64
 80116e0:	d966      	bls.n	80117b0 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 80116e2:	1dbb      	adds	r3, r7, #6
 80116e4:	881b      	ldrh	r3, [r3, #0]
 80116e6:	0018      	movs	r0, r3
 80116e8:	f7f1 fe6a 	bl	80033c0 <__aeabi_i2d>
 80116ec:	2200      	movs	r2, #0
 80116ee:	4b32      	ldr	r3, [pc, #200]	@ (80117b8 <SetVOCindicator+0x1a8>)
 80116f0:	f7f1 fa6c 	bl	8002bcc <__aeabi_dsub>
 80116f4:	0002      	movs	r2, r0
 80116f6:	000b      	movs	r3, r1
 80116f8:	0010      	movs	r0, r2
 80116fa:	0019      	movs	r1, r3
 80116fc:	2200      	movs	r2, #0
 80116fe:	4b34      	ldr	r3, [pc, #208]	@ (80117d0 <SetVOCindicator+0x1c0>)
 8011700:	f7f0 fb58 	bl	8001db4 <__aeabi_ddiv>
 8011704:	0002      	movs	r2, r0
 8011706:	000b      	movs	r3, r1
 8011708:	0014      	movs	r4, r2
 801170a:	001d      	movs	r5, r3
 801170c:	4b2c      	ldr	r3, [pc, #176]	@ (80117c0 <SetVOCindicator+0x1b0>)
 801170e:	881b      	ldrh	r3, [r3, #0]
 8011710:	0018      	movs	r0, r3
 8011712:	f7f1 fe55 	bl	80033c0 <__aeabi_i2d>
 8011716:	0002      	movs	r2, r0
 8011718:	000b      	movs	r3, r1
 801171a:	0020      	movs	r0, r4
 801171c:	0029      	movs	r1, r5
 801171e:	f7f0 ff8d 	bl	800263c <__aeabi_dmul>
 8011722:	0002      	movs	r2, r0
 8011724:	000b      	movs	r3, r1
 8011726:	0010      	movs	r0, r2
 8011728:	0019      	movs	r1, r3
 801172a:	f7ee ff8f 	bl	800064c <__aeabi_d2uiz>
 801172e:	0003      	movs	r3, r0
 8011730:	b29a      	uxth	r2, r3
 8011732:	4b24      	ldr	r3, [pc, #144]	@ (80117c4 <SetVOCindicator+0x1b4>)
 8011734:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 8011736:	1dbb      	adds	r3, r7, #6
 8011738:	881b      	ldrh	r3, [r3, #0]
 801173a:	0018      	movs	r0, r3
 801173c:	f7f1 fe40 	bl	80033c0 <__aeabi_i2d>
 8011740:	2200      	movs	r2, #0
 8011742:	4b1d      	ldr	r3, [pc, #116]	@ (80117b8 <SetVOCindicator+0x1a8>)
 8011744:	f7f1 fa42 	bl	8002bcc <__aeabi_dsub>
 8011748:	0002      	movs	r2, r0
 801174a:	000b      	movs	r3, r1
 801174c:	0010      	movs	r0, r2
 801174e:	0019      	movs	r1, r3
 8011750:	2200      	movs	r2, #0
 8011752:	4b1f      	ldr	r3, [pc, #124]	@ (80117d0 <SetVOCindicator+0x1c0>)
 8011754:	f7f0 fb2e 	bl	8001db4 <__aeabi_ddiv>
 8011758:	0002      	movs	r2, r0
 801175a:	000b      	movs	r3, r1
 801175c:	2000      	movs	r0, #0
 801175e:	4917      	ldr	r1, [pc, #92]	@ (80117bc <SetVOCindicator+0x1ac>)
 8011760:	f7f1 fa34 	bl	8002bcc <__aeabi_dsub>
 8011764:	0002      	movs	r2, r0
 8011766:	000b      	movs	r3, r1
 8011768:	0014      	movs	r4, r2
 801176a:	001d      	movs	r5, r3
 801176c:	4b14      	ldr	r3, [pc, #80]	@ (80117c0 <SetVOCindicator+0x1b0>)
 801176e:	881b      	ldrh	r3, [r3, #0]
 8011770:	0018      	movs	r0, r3
 8011772:	f7f1 fe25 	bl	80033c0 <__aeabi_i2d>
 8011776:	0002      	movs	r2, r0
 8011778:	000b      	movs	r3, r1
 801177a:	0020      	movs	r0, r4
 801177c:	0029      	movs	r1, r5
 801177e:	f7f0 ff5d 	bl	800263c <__aeabi_dmul>
 8011782:	0002      	movs	r2, r0
 8011784:	000b      	movs	r3, r1
 8011786:	0010      	movs	r0, r2
 8011788:	0019      	movs	r1, r3
 801178a:	f7ee ff5f 	bl	800064c <__aeabi_d2uiz>
 801178e:	0003      	movs	r3, r0
 8011790:	b29a      	uxth	r2, r3
 8011792:	4b0e      	ldr	r3, [pc, #56]	@ (80117cc <SetVOCindicator+0x1bc>)
 8011794:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 8011796:	4b0a      	ldr	r3, [pc, #40]	@ (80117c0 <SetVOCindicator+0x1b0>)
 8011798:	881a      	ldrh	r2, [r3, #0]
 801179a:	4b0b      	ldr	r3, [pc, #44]	@ (80117c8 <SetVOCindicator+0x1b8>)
 801179c:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 801179e:	4b0b      	ldr	r3, [pc, #44]	@ (80117cc <SetVOCindicator+0x1bc>)
 80117a0:	8818      	ldrh	r0, [r3, #0]
 80117a2:	4b08      	ldr	r3, [pc, #32]	@ (80117c4 <SetVOCindicator+0x1b4>)
 80117a4:	8819      	ldrh	r1, [r3, #0]
 80117a6:	4b08      	ldr	r3, [pc, #32]	@ (80117c8 <SetVOCindicator+0x1b8>)
 80117a8:	881b      	ldrh	r3, [r3, #0]
 80117aa:	001a      	movs	r2, r3
 80117ac:	f7ff fd42 	bl	8011234 <SetVocLED>
  }

}
 80117b0:	46c0      	nop			@ (mov r8, r8)
 80117b2:	46bd      	mov	sp, r7
 80117b4:	b002      	add	sp, #8
 80117b6:	bdb0      	pop	{r4, r5, r7, pc}
 80117b8:	40590000 	.word	0x40590000
 80117bc:	3ff00000 	.word	0x3ff00000
 80117c0:	200000de 	.word	0x200000de
 80117c4:	20001e92 	.word	0x20001e92
 80117c8:	20001e94 	.word	0x20001e94
 80117cc:	20001e96 	.word	0x20001e96
 80117d0:	40790000 	.word	0x40790000

080117d4 <powerCheck>:

Battery_Status powerCheck(){
 80117d4:	b590      	push	{r4, r7, lr}
 80117d6:	b083      	sub	sp, #12
 80117d8:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 80117da:	f7f7 f965 	bl	8008aa8 <Check_USB_PowerOn>
 80117de:	0003      	movs	r3, r0
 80117e0:	001a      	movs	r2, r3
 80117e2:	2301      	movs	r3, #1
 80117e4:	4053      	eors	r3, r2
 80117e6:	b2db      	uxtb	r3, r3
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d005      	beq.n	80117f8 <powerCheck+0x24>
    status = batteryChargeCheck();
 80117ec:	1dfc      	adds	r4, r7, #7
 80117ee:	f7ff fc01 	bl	8010ff4 <batteryChargeCheck>
 80117f2:	0003      	movs	r3, r0
 80117f4:	7023      	strb	r3, [r4, #0]
 80117f6:	e002      	b.n	80117fe <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 80117f8:	1dfb      	adds	r3, r7, #7
 80117fa:	2204      	movs	r2, #4
 80117fc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80117fe:	1dfb      	adds	r3, r7, #7
 8011800:	781b      	ldrb	r3, [r3, #0]
}
 8011802:	0018      	movs	r0, r3
 8011804:	46bd      	mov	sp, r7
 8011806:	b003      	add	sp, #12
 8011808:	bd90      	pop	{r4, r7, pc}
	...

0801180c <powerDisplay>:

void powerDisplay(Battery_Status status){
 801180c:	b580      	push	{r7, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	af00      	add	r7, sp, #0
 8011812:	0002      	movs	r2, r0
 8011814:	1dfb      	adds	r3, r7, #7
 8011816:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8011818:	1dfb      	adds	r3, r7, #7
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	2b04      	cmp	r3, #4
 801181e:	d105      	bne.n	801182c <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 8011820:	4a18      	ldr	r2, [pc, #96]	@ (8011884 <powerDisplay+0x78>)
 8011822:	4b19      	ldr	r3, [pc, #100]	@ (8011888 <powerDisplay+0x7c>)
 8011824:	0019      	movs	r1, r3
 8011826:	2003      	movs	r0, #3
 8011828:	f000 ff4a 	bl	80126c0 <CreateLine>

  }
  if(status == BATTERY_FULL){
 801182c:	1dfb      	adds	r3, r7, #7
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	2b03      	cmp	r3, #3
 8011832:	d105      	bne.n	8011840 <powerDisplay+0x34>
    Debug("Battery fully charged");
 8011834:	4a15      	ldr	r2, [pc, #84]	@ (801188c <powerDisplay+0x80>)
 8011836:	4b14      	ldr	r3, [pc, #80]	@ (8011888 <powerDisplay+0x7c>)
 8011838:	0019      	movs	r1, r3
 801183a:	2003      	movs	r0, #3
 801183c:	f000 ff40 	bl	80126c0 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8011840:	1dfb      	adds	r3, r7, #7
 8011842:	781b      	ldrb	r3, [r3, #0]
 8011844:	2b02      	cmp	r3, #2
 8011846:	d105      	bne.n	8011854 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 8011848:	4a11      	ldr	r2, [pc, #68]	@ (8011890 <powerDisplay+0x84>)
 801184a:	4b0f      	ldr	r3, [pc, #60]	@ (8011888 <powerDisplay+0x7c>)
 801184c:	0019      	movs	r1, r3
 801184e:	2003      	movs	r0, #3
 8011850:	f000 ff36 	bl	80126c0 <CreateLine>
  }
  if(status == BATTERY_LOW){
 8011854:	1dfb      	adds	r3, r7, #7
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	2b01      	cmp	r3, #1
 801185a:	d105      	bne.n	8011868 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 801185c:	4a0d      	ldr	r2, [pc, #52]	@ (8011894 <powerDisplay+0x88>)
 801185e:	4b0a      	ldr	r3, [pc, #40]	@ (8011888 <powerDisplay+0x7c>)
 8011860:	0019      	movs	r1, r3
 8011862:	2003      	movs	r0, #3
 8011864:	f000 ff2c 	bl	80126c0 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8011868:	1dfb      	adds	r3, r7, #7
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d105      	bne.n	801187c <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 8011870:	4a09      	ldr	r2, [pc, #36]	@ (8011898 <powerDisplay+0x8c>)
 8011872:	4b05      	ldr	r3, [pc, #20]	@ (8011888 <powerDisplay+0x7c>)
 8011874:	0019      	movs	r1, r3
 8011876:	2003      	movs	r0, #3
 8011878:	f000 ff22 	bl	80126c0 <CreateLine>
  }
}
 801187c:	46c0      	nop			@ (mov r8, r8)
 801187e:	46bd      	mov	sp, r7
 8011880:	b002      	add	sp, #8
 8011882:	bd80      	pop	{r7, pc}
 8011884:	0802c37c 	.word	0x0802c37c
 8011888:	0802c3a0 	.word	0x0802c3a0
 801188c:	0802c3a4 	.word	0x0802c3a4
 8011890:	0802c3bc 	.word	0x0802c3bc
 8011894:	0802c3dc 	.word	0x0802c3dc
 8011898:	0802c3f4 	.word	0x0802c3f4

0801189c <configCheck>:

void configCheck(){
 801189c:	b590      	push	{r4, r7, lr}
 801189e:	b083      	sub	sp, #12
 80118a0:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 80118a2:	f7f7 f910 	bl	8008ac6 <BootButton_Pressed>
 80118a6:	1e03      	subs	r3, r0, #0
 80118a8:	d007      	beq.n	80118ba <configCheck+0x1e>
 80118aa:	f7f7 f91d 	bl	8008ae8 <UserButton_Pressed>
 80118ae:	1e03      	subs	r3, r0, #0
 80118b0:	d003      	beq.n	80118ba <configCheck+0x1e>
    configSet = true;
 80118b2:	4bb5      	ldr	r3, [pc, #724]	@ (8011b88 <configCheck+0x2ec>)
 80118b4:	2201      	movs	r2, #1
 80118b6:	701a      	strb	r2, [r3, #0]
 80118b8:	e00a      	b.n	80118d0 <configCheck+0x34>
  }
  else{
    configSet = false;
 80118ba:	4bb3      	ldr	r3, [pc, #716]	@ (8011b88 <configCheck+0x2ec>)
 80118bc:	2200      	movs	r2, #0
 80118be:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 80118c0:	f001 fc34 	bl	801312c <HAL_GetTick>
 80118c4:	0003      	movs	r3, r0
 80118c6:	22fa      	movs	r2, #250	@ 0xfa
 80118c8:	00d2      	lsls	r2, r2, #3
 80118ca:	189a      	adds	r2, r3, r2
 80118cc:	4baf      	ldr	r3, [pc, #700]	@ (8011b8c <configCheck+0x2f0>)
 80118ce:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 80118d0:	4bad      	ldr	r3, [pc, #692]	@ (8011b88 <configCheck+0x2ec>)
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d00d      	beq.n	80118f4 <configCheck+0x58>
 80118d8:	4bac      	ldr	r3, [pc, #688]	@ (8011b8c <configCheck+0x2f0>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	0018      	movs	r0, r3
 80118de:	f000 fe99 	bl	8012614 <TimestampIsReached>
 80118e2:	1e03      	subs	r3, r0, #0
 80118e4:	d006      	beq.n	80118f4 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 80118e6:	f7f3 f85f 	bl	80049a8 <SetConfigMode>
    SetDBLED(true, true, true);
 80118ea:	2201      	movs	r2, #1
 80118ec:	2101      	movs	r1, #1
 80118ee:	2001      	movs	r0, #1
 80118f0:	f7ff fc56 	bl	80111a0 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 80118f4:	f7f7 f8e7 	bl	8008ac6 <BootButton_Pressed>
 80118f8:	0003      	movs	r3, r0
 80118fa:	001a      	movs	r2, r3
 80118fc:	2301      	movs	r3, #1
 80118fe:	4053      	eors	r3, r2
 8011900:	b2db      	uxtb	r3, r3
 8011902:	2b00      	cmp	r3, #0
 8011904:	d05a      	beq.n	80119bc <configCheck+0x120>
 8011906:	f7f7 f8ef 	bl	8008ae8 <UserButton_Pressed>
 801190a:	1e03      	subs	r3, r0, #0
 801190c:	d056      	beq.n	80119bc <configCheck+0x120>
 801190e:	4ba0      	ldr	r3, [pc, #640]	@ (8011b90 <configCheck+0x2f4>)
 8011910:	781b      	ldrb	r3, [r3, #0]
 8011912:	2201      	movs	r2, #1
 8011914:	4053      	eors	r3, r2
 8011916:	b2db      	uxtb	r3, r3
 8011918:	2b00      	cmp	r3, #0
 801191a:	d04f      	beq.n	80119bc <configCheck+0x120>
 801191c:	f7f3 f864 	bl	80049e8 <GetReconfigMode>
 8011920:	0003      	movs	r3, r0
 8011922:	001a      	movs	r2, r3
 8011924:	2301      	movs	r3, #1
 8011926:	4053      	eors	r3, r2
 8011928:	b2db      	uxtb	r3, r3
 801192a:	2b00      	cmp	r3, #0
 801192c:	d046      	beq.n	80119bc <configCheck+0x120>
    SetLEDsOff();
 801192e:	f7ff fdc1 	bl	80114b4 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 8011932:	4a98      	ldr	r2, [pc, #608]	@ (8011b94 <configCheck+0x2f8>)
 8011934:	4997      	ldr	r1, [pc, #604]	@ (8011b94 <configCheck+0x2f8>)
 8011936:	4b97      	ldr	r3, [pc, #604]	@ (8011b94 <configCheck+0x2f8>)
 8011938:	0018      	movs	r0, r3
 801193a:	f7ff fc7b 	bl	8011234 <SetVocLED>
    HAL_Delay(1500);
 801193e:	4b96      	ldr	r3, [pc, #600]	@ (8011b98 <configCheck+0x2fc>)
 8011940:	0018      	movs	r0, r3
 8011942:	f001 fbfd 	bl	8013140 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 8011946:	23fa      	movs	r3, #250	@ 0xfa
 8011948:	011a      	lsls	r2, r3, #4
 801194a:	23fa      	movs	r3, #250	@ 0xfa
 801194c:	0119      	lsls	r1, r3, #4
 801194e:	23fa      	movs	r3, #250	@ 0xfa
 8011950:	011b      	lsls	r3, r3, #4
 8011952:	0018      	movs	r0, r3
 8011954:	f7ff fc6e 	bl	8011234 <SetVocLED>
    userToggle = !userToggle;
 8011958:	4b90      	ldr	r3, [pc, #576]	@ (8011b9c <configCheck+0x300>)
 801195a:	781b      	ldrb	r3, [r3, #0]
 801195c:	1e5a      	subs	r2, r3, #1
 801195e:	4193      	sbcs	r3, r2
 8011960:	b2db      	uxtb	r3, r3
 8011962:	2201      	movs	r2, #1
 8011964:	4053      	eors	r3, r2
 8011966:	b2db      	uxtb	r3, r3
 8011968:	1c1a      	adds	r2, r3, #0
 801196a:	2301      	movs	r3, #1
 801196c:	4013      	ands	r3, r2
 801196e:	b2da      	uxtb	r2, r3
 8011970:	4b8a      	ldr	r3, [pc, #552]	@ (8011b9c <configCheck+0x300>)
 8011972:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8011974:	4b89      	ldr	r3, [pc, #548]	@ (8011b9c <configCheck+0x300>)
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d002      	beq.n	8011982 <configCheck+0xe6>
      EnabledConnectedDevices();
 801197c:	f7fa ff00 	bl	800c780 <EnabledConnectedDevices>
 8011980:	e004      	b.n	801198c <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 8011982:	f001 fbd3 	bl	801312c <HAL_GetTick>
 8011986:	0002      	movs	r2, r0
 8011988:	4b85      	ldr	r3, [pc, #532]	@ (8011ba0 <configCheck+0x304>)
 801198a:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 801198c:	4b83      	ldr	r3, [pc, #524]	@ (8011b9c <configCheck+0x300>)
 801198e:	781b      	ldrb	r3, [r3, #0]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d001      	beq.n	8011998 <configCheck+0xfc>
 8011994:	4b83      	ldr	r3, [pc, #524]	@ (8011ba4 <configCheck+0x308>)
 8011996:	e000      	b.n	801199a <configCheck+0xfe>
 8011998:	4b83      	ldr	r3, [pc, #524]	@ (8011ba8 <configCheck+0x30c>)
 801199a:	4a84      	ldr	r2, [pc, #528]	@ (8011bac <configCheck+0x310>)
 801199c:	4984      	ldr	r1, [pc, #528]	@ (8011bb0 <configCheck+0x314>)
 801199e:	2003      	movs	r0, #3
 80119a0:	f000 fe8e 	bl	80126c0 <CreateLine>
    userbuttonHeld = true;
 80119a4:	4b7a      	ldr	r3, [pc, #488]	@ (8011b90 <configCheck+0x2f4>)
 80119a6:	2201      	movs	r2, #1
 80119a8:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 80119aa:	f001 fbbf 	bl	801312c <HAL_GetTick>
 80119ae:	0003      	movs	r3, r0
 80119b0:	22fa      	movs	r2, #250	@ 0xfa
 80119b2:	00d2      	lsls	r2, r2, #3
 80119b4:	189a      	adds	r2, r3, r2
 80119b6:	4b7f      	ldr	r3, [pc, #508]	@ (8011bb4 <configCheck+0x318>)
 80119b8:	601a      	str	r2, [r3, #0]
 80119ba:	e002      	b.n	80119c2 <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 80119bc:	4b74      	ldr	r3, [pc, #464]	@ (8011b90 <configCheck+0x2f4>)
 80119be:	2200      	movs	r2, #0
 80119c0:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 80119c2:	f7f7 f880 	bl	8008ac6 <BootButton_Pressed>
 80119c6:	0003      	movs	r3, r0
 80119c8:	001a      	movs	r2, r3
 80119ca:	2301      	movs	r3, #1
 80119cc:	4053      	eors	r3, r2
 80119ce:	b2db      	uxtb	r3, r3
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d100      	bne.n	80119d6 <configCheck+0x13a>
 80119d4:	e0a4      	b.n	8011b20 <configCheck+0x284>
 80119d6:	4b6e      	ldr	r3, [pc, #440]	@ (8011b90 <configCheck+0x2f4>)
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d100      	bne.n	80119e0 <configCheck+0x144>
 80119de:	e09f      	b.n	8011b20 <configCheck+0x284>
 80119e0:	4b74      	ldr	r3, [pc, #464]	@ (8011bb4 <configCheck+0x318>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	0018      	movs	r0, r3
 80119e6:	f000 fe15 	bl	8012614 <TimestampIsReached>
 80119ea:	1e03      	subs	r3, r0, #0
 80119ec:	d100      	bne.n	80119f0 <configCheck+0x154>
 80119ee:	e097      	b.n	8011b20 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80119f0:	f7fa fb02 	bl	800bff8 <GetPMSensorPresence>
 80119f4:	1e03      	subs	r3, r0, #0
 80119f6:	d100      	bne.n	80119fa <configCheck+0x15e>
 80119f8:	e082      	b.n	8011b00 <configCheck+0x264>
 80119fa:	4b6f      	ldr	r3, [pc, #444]	@ (8011bb8 <configCheck+0x31c>)
 80119fc:	791b      	ldrb	r3, [r3, #4]
 80119fe:	2b34      	cmp	r3, #52	@ 0x34
 8011a00:	d004      	beq.n	8011a0c <configCheck+0x170>
 8011a02:	4b6d      	ldr	r3, [pc, #436]	@ (8011bb8 <configCheck+0x31c>)
 8011a04:	791b      	ldrb	r3, [r3, #4]
 8011a06:	2b35      	cmp	r3, #53	@ 0x35
 8011a08:	d000      	beq.n	8011a0c <configCheck+0x170>
 8011a0a:	e079      	b.n	8011b00 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 8011a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8011bbc <configCheck+0x320>)
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	1e5a      	subs	r2, r3, #1
 8011a12:	4193      	sbcs	r3, r2
 8011a14:	b2db      	uxtb	r3, r3
 8011a16:	2201      	movs	r2, #1
 8011a18:	4053      	eors	r3, r2
 8011a1a:	b2db      	uxtb	r3, r3
 8011a1c:	1c1a      	adds	r2, r3, #0
 8011a1e:	2301      	movs	r3, #1
 8011a20:	4013      	ands	r3, r2
 8011a22:	b2da      	uxtb	r2, r3
 8011a24:	4b65      	ldr	r3, [pc, #404]	@ (8011bbc <configCheck+0x320>)
 8011a26:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 8011a28:	4b64      	ldr	r3, [pc, #400]	@ (8011bbc <configCheck+0x320>)
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d005      	beq.n	8011a3c <configCheck+0x1a0>
 8011a30:	1dbc      	adds	r4, r7, #6
 8011a32:	f7ff fb39 	bl	80110a8 <Calculate_LED_ON>
 8011a36:	0003      	movs	r3, r0
 8011a38:	8023      	strh	r3, [r4, #0]
 8011a3a:	e003      	b.n	8011a44 <configCheck+0x1a8>
        else color = 4000;
 8011a3c:	1dbb      	adds	r3, r7, #6
 8011a3e:	22fa      	movs	r2, #250	@ 0xfa
 8011a40:	0112      	lsls	r2, r2, #4
 8011a42:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 8011a44:	4b5d      	ldr	r3, [pc, #372]	@ (8011bbc <configCheck+0x320>)
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d001      	beq.n	8011a50 <configCheck+0x1b4>
 8011a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8011bc0 <configCheck+0x324>)
 8011a4e:	e000      	b.n	8011a52 <configCheck+0x1b6>
 8011a50:	4b5c      	ldr	r3, [pc, #368]	@ (8011bc4 <configCheck+0x328>)
 8011a52:	4a5d      	ldr	r2, [pc, #372]	@ (8011bc8 <configCheck+0x32c>)
 8011a54:	495d      	ldr	r1, [pc, #372]	@ (8011bcc <configCheck+0x330>)
 8011a56:	2002      	movs	r0, #2
 8011a58:	f000 fe32 	bl	80126c0 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 8011a5c:	1d7b      	adds	r3, r7, #5
 8011a5e:	2200      	movs	r2, #0
 8011a60:	701a      	strb	r2, [r3, #0]
 8011a62:	e028      	b.n	8011ab6 <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 8011a64:	f7ff fb20 	bl	80110a8 <Calculate_LED_ON>
 8011a68:	0003      	movs	r3, r0
 8011a6a:	001a      	movs	r2, r3
 8011a6c:	4b58      	ldr	r3, [pc, #352]	@ (8011bd0 <configCheck+0x334>)
 8011a6e:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8011a70:	4b57      	ldr	r3, [pc, #348]	@ (8011bd0 <configCheck+0x334>)
 8011a72:	1dba      	adds	r2, r7, #6
 8011a74:	8812      	ldrh	r2, [r2, #0]
 8011a76:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 8011a78:	4b55      	ldr	r3, [pc, #340]	@ (8011bd0 <configCheck+0x334>)
 8011a7a:	1dba      	adds	r2, r7, #6
 8011a7c:	8812      	ldrh	r2, [r2, #0]
 8011a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8011a80:	23c8      	movs	r3, #200	@ 0xc8
 8011a82:	005b      	lsls	r3, r3, #1
 8011a84:	0018      	movs	r0, r3
 8011a86:	f001 fb5b 	bl	8013140 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 8011a8a:	4b51      	ldr	r3, [pc, #324]	@ (8011bd0 <configCheck+0x334>)
 8011a8c:	22fa      	movs	r2, #250	@ 0xfa
 8011a8e:	0112      	lsls	r2, r2, #4
 8011a90:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 8011a92:	4b4f      	ldr	r3, [pc, #316]	@ (8011bd0 <configCheck+0x334>)
 8011a94:	22fa      	movs	r2, #250	@ 0xfa
 8011a96:	0112      	lsls	r2, r2, #4
 8011a98:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 8011a9a:	4b4d      	ldr	r3, [pc, #308]	@ (8011bd0 <configCheck+0x334>)
 8011a9c:	22fa      	movs	r2, #250	@ 0xfa
 8011a9e:	0112      	lsls	r2, r2, #4
 8011aa0:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8011aa2:	23c8      	movs	r3, #200	@ 0xc8
 8011aa4:	005b      	lsls	r3, r3, #1
 8011aa6:	0018      	movs	r0, r3
 8011aa8:	f001 fb4a 	bl	8013140 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8011aac:	1d7b      	adds	r3, r7, #5
 8011aae:	781a      	ldrb	r2, [r3, #0]
 8011ab0:	1d7b      	adds	r3, r7, #5
 8011ab2:	3201      	adds	r2, #1
 8011ab4:	701a      	strb	r2, [r3, #0]
 8011ab6:	1d7b      	adds	r3, r7, #5
 8011ab8:	781b      	ldrb	r3, [r3, #0]
 8011aba:	2b01      	cmp	r3, #1
 8011abc:	d9d2      	bls.n	8011a64 <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 8011abe:	4b37      	ldr	r3, [pc, #220]	@ (8011b9c <configCheck+0x300>)
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	1e5a      	subs	r2, r3, #1
 8011ac4:	4193      	sbcs	r3, r2
 8011ac6:	b2db      	uxtb	r3, r3
 8011ac8:	2201      	movs	r2, #1
 8011aca:	4053      	eors	r3, r2
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	1c1a      	adds	r2, r3, #0
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	4013      	ands	r3, r2
 8011ad4:	b2da      	uxtb	r2, r3
 8011ad6:	4b31      	ldr	r3, [pc, #196]	@ (8011b9c <configCheck+0x300>)
 8011ad8:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 8011ada:	4b30      	ldr	r3, [pc, #192]	@ (8011b9c <configCheck+0x300>)
 8011adc:	781b      	ldrb	r3, [r3, #0]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d001      	beq.n	8011ae6 <configCheck+0x24a>
 8011ae2:	4b37      	ldr	r3, [pc, #220]	@ (8011bc0 <configCheck+0x324>)
 8011ae4:	e000      	b.n	8011ae8 <configCheck+0x24c>
 8011ae6:	4b37      	ldr	r3, [pc, #220]	@ (8011bc4 <configCheck+0x328>)
 8011ae8:	4a3a      	ldr	r2, [pc, #232]	@ (8011bd4 <configCheck+0x338>)
 8011aea:	4938      	ldr	r1, [pc, #224]	@ (8011bcc <configCheck+0x330>)
 8011aec:	2002      	movs	r0, #2
 8011aee:	f000 fde7 	bl	80126c0 <CreateLine>
      if (usbPluggedIn) {
 8011af2:	4b39      	ldr	r3, [pc, #228]	@ (8011bd8 <configCheck+0x33c>)
 8011af4:	781b      	ldrb	r3, [r3, #0]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d009      	beq.n	8011b0e <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 8011afa:	f7fb ffe7 	bl	800dacc <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8011afe:	e006      	b.n	8011b0e <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 8011b00:	4a36      	ldr	r2, [pc, #216]	@ (8011bdc <configCheck+0x340>)
 8011b02:	4b32      	ldr	r3, [pc, #200]	@ (8011bcc <configCheck+0x330>)
 8011b04:	0019      	movs	r1, r3
 8011b06:	2002      	movs	r0, #2
 8011b08:	f000 fdda 	bl	80126c0 <CreateLine>
 8011b0c:	e000      	b.n	8011b10 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8011b0e:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 8011b10:	46c0      	nop			@ (mov r8, r8)
 8011b12:	f7f6 ffe9 	bl	8008ae8 <UserButton_Pressed>
 8011b16:	1e03      	subs	r3, r0, #0
 8011b18:	d1fb      	bne.n	8011b12 <configCheck+0x276>
    }
    userbuttonHeld = false;
 8011b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8011b90 <configCheck+0x2f4>)
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 8011b20:	f7f6 ffd1 	bl	8008ac6 <BootButton_Pressed>
 8011b24:	0003      	movs	r3, r0
 8011b26:	001a      	movs	r2, r3
 8011b28:	2301      	movs	r3, #1
 8011b2a:	4053      	eors	r3, r2
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d00b      	beq.n	8011b4a <configCheck+0x2ae>
 8011b32:	f7f6 ffd9 	bl	8008ae8 <UserButton_Pressed>
 8011b36:	0003      	movs	r3, r0
 8011b38:	001a      	movs	r2, r3
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	4053      	eors	r3, r2
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d002      	beq.n	8011b4a <configCheck+0x2ae>
    userbuttonHeld = false;
 8011b44:	4b12      	ldr	r3, [pc, #72]	@ (8011b90 <configCheck+0x2f4>)
 8011b46:	2200      	movs	r2, #0
 8011b48:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 8011b4a:	f7f6 ffad 	bl	8008aa8 <Check_USB_PowerOn>
 8011b4e:	1e03      	subs	r3, r0, #0
 8011b50:	d003      	beq.n	8011b5a <configCheck+0x2be>
    usbPluggedIn = true;
 8011b52:	4b21      	ldr	r3, [pc, #132]	@ (8011bd8 <configCheck+0x33c>)
 8011b54:	2201      	movs	r2, #1
 8011b56:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 8011b58:	e012      	b.n	8011b80 <configCheck+0x2e4>
    if(!userToggle && !init){
 8011b5a:	4b10      	ldr	r3, [pc, #64]	@ (8011b9c <configCheck+0x300>)
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	2201      	movs	r2, #1
 8011b60:	4053      	eors	r3, r2
 8011b62:	b2db      	uxtb	r3, r3
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d008      	beq.n	8011b7a <configCheck+0x2de>
 8011b68:	4b1d      	ldr	r3, [pc, #116]	@ (8011be0 <configCheck+0x344>)
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	2201      	movs	r2, #1
 8011b6e:	4053      	eors	r3, r2
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d001      	beq.n	8011b7a <configCheck+0x2de>
      SetLEDsOff();
 8011b76:	f7ff fc9d 	bl	80114b4 <SetLEDsOff>
    usbPluggedIn = false;
 8011b7a:	4b17      	ldr	r3, [pc, #92]	@ (8011bd8 <configCheck+0x33c>)
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	701a      	strb	r2, [r3, #0]
}
 8011b80:	46c0      	nop			@ (mov r8, r8)
 8011b82:	46bd      	mov	sp, r7
 8011b84:	b003      	add	sp, #12
 8011b86:	bd90      	pop	{r4, r7, pc}
 8011b88:	20001e7c 	.word	0x20001e7c
 8011b8c:	20001e84 	.word	0x20001e84
 8011b90:	20001e7f 	.word	0x20001e7f
 8011b94:	00000bb8 	.word	0x00000bb8
 8011b98:	000005dc 	.word	0x000005dc
 8011b9c:	20001e7e 	.word	0x20001e7e
 8011ba0:	20000e44 	.word	0x20000e44
 8011ba4:	0802c418 	.word	0x0802c418
 8011ba8:	0802c41c 	.word	0x0802c41c
 8011bac:	0802c420 	.word	0x0802c420
 8011bb0:	0802c3a0 	.word	0x0802c3a0
 8011bb4:	20001e88 	.word	0x20001e88
 8011bb8:	20000ef0 	.word	0x20000ef0
 8011bbc:	20000eee 	.word	0x20000eee
 8011bc0:	0802c440 	.word	0x0802c440
 8011bc4:	0802c448 	.word	0x0802c448
 8011bc8:	0802c454 	.word	0x0802c454
 8011bcc:	0802c474 	.word	0x0802c474
 8011bd0:	40000400 	.word	0x40000400
 8011bd4:	0802c478 	.word	0x0802c478
 8011bd8:	20001e7d 	.word	0x20001e7d
 8011bdc:	0802c490 	.word	0x0802c490
 8011be0:	200000dc 	.word	0x200000dc

08011be4 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 8011be4:	b590      	push	{r4, r7, lr}
 8011be6:	b083      	sub	sp, #12
 8011be8:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 8011bea:	1dfc      	adds	r4, r7, #7
 8011bec:	f7ff fdf2 	bl	80117d4 <powerCheck>
 8011bf0:	0003      	movs	r3, r0
 8011bf2:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 8011bf4:	1dfb      	adds	r3, r7, #7
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	0018      	movs	r0, r3
 8011bfa:	f7ff fe07 	bl	801180c <powerDisplay>
  return status;
 8011bfe:	1dfb      	adds	r3, r7, #7
 8011c00:	781b      	ldrb	r3, [r3, #0]
}
 8011c02:	0018      	movs	r0, r3
 8011c04:	46bd      	mov	sp, r7
 8011c06:	b003      	add	sp, #12
 8011c08:	bd90      	pop	{r4, r7, pc}
	...

08011c0c <setuserToggle>:

void setuserToggle(void) {
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 8011c10:	f7ff fde0 	bl	80117d4 <powerCheck>
 8011c14:	0003      	movs	r3, r0
 8011c16:	2b04      	cmp	r3, #4
 8011c18:	d004      	beq.n	8011c24 <setuserToggle+0x18>
    userToggle = true;
 8011c1a:	4b04      	ldr	r3, [pc, #16]	@ (8011c2c <setuserToggle+0x20>)
 8011c1c:	2201      	movs	r2, #1
 8011c1e:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 8011c20:	f7fa fdae 	bl	800c780 <EnabledConnectedDevices>
  }
}
 8011c24:	46c0      	nop			@ (mov r8, r8)
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}
 8011c2a:	46c0      	nop			@ (mov r8, r8)
 8011c2c:	20001e7e 	.word	0x20001e7e

08011c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011c34:	4b07      	ldr	r3, [pc, #28]	@ (8011c54 <HAL_MspInit+0x24>)
 8011c36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011c38:	4b06      	ldr	r3, [pc, #24]	@ (8011c54 <HAL_MspInit+0x24>)
 8011c3a:	2101      	movs	r1, #1
 8011c3c:	430a      	orrs	r2, r1
 8011c3e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8011c40:	4b04      	ldr	r3, [pc, #16]	@ (8011c54 <HAL_MspInit+0x24>)
 8011c42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011c44:	4b03      	ldr	r3, [pc, #12]	@ (8011c54 <HAL_MspInit+0x24>)
 8011c46:	2180      	movs	r1, #128	@ 0x80
 8011c48:	0549      	lsls	r1, r1, #21
 8011c4a:	430a      	orrs	r2, r1
 8011c4c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011c4e:	46c0      	nop			@ (mov r8, r8)
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}
 8011c54:	40021000 	.word	0x40021000

08011c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8011c5c:	46c0      	nop			@ (mov r8, r8)
 8011c5e:	e7fd      	b.n	8011c5c <NMI_Handler+0x4>

08011c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011c64:	46c0      	nop			@ (mov r8, r8)
 8011c66:	e7fd      	b.n	8011c64 <HardFault_Handler+0x4>

08011c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8011c6c:	46c0      	nop			@ (mov r8, r8)
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}

08011c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011c72:	b580      	push	{r7, lr}
 8011c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011c76:	46c0      	nop			@ (mov r8, r8)
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011c80:	f001 fa42 	bl	8013108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8011c84:	46c0      	nop			@ (mov r8, r8)
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}
	...

08011c8c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8011c90:	4b03      	ldr	r3, [pc, #12]	@ (8011ca0 <RTC_IRQHandler+0x14>)
 8011c92:	0018      	movs	r0, r3
 8011c94:	f009 fa00 	bl	801b098 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8011c98:	46c0      	nop			@ (mov r8, r8)
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}
 8011c9e:	46c0      	nop			@ (mov r8, r8)
 8011ca0:	20000ec8 	.word	0x20000ec8

08011ca4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 8011ca8:	2380      	movs	r3, #128	@ 0x80
 8011caa:	021b      	lsls	r3, r3, #8
 8011cac:	0018      	movs	r0, r3
 8011cae:	f002 fceb 	bl	8014688 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8011cb2:	46c0      	nop			@ (mov r8, r8)
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}

08011cb8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8011cbc:	4b05      	ldr	r3, [pc, #20]	@ (8011cd4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8011cbe:	0018      	movs	r0, r3
 8011cc0:	f002 f873 	bl	8013daa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8011cc4:	4b04      	ldr	r3, [pc, #16]	@ (8011cd8 <DMA1_Channel2_3_IRQHandler+0x20>)
 8011cc6:	0018      	movs	r0, r3
 8011cc8:	f002 f86f 	bl	8013daa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8011ccc:	46c0      	nop			@ (mov r8, r8)
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}
 8011cd2:	46c0      	nop			@ (mov r8, r8)
 8011cd4:	20000d60 	.word	0x20000d60
 8011cd8:	20000d18 	.word	0x20000d18

08011cdc <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8011ce0:	4b07      	ldr	r3, [pc, #28]	@ (8011d00 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8011ce2:	0018      	movs	r0, r3
 8011ce4:	f002 f861 	bl	8013daa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8011ce8:	4b06      	ldr	r3, [pc, #24]	@ (8011d04 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8011cea:	0018      	movs	r0, r3
 8011cec:	f002 f85d 	bl	8013daa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8011cf0:	4b05      	ldr	r3, [pc, #20]	@ (8011d08 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8011cf2:	0018      	movs	r0, r3
 8011cf4:	f002 f859 	bl	8013daa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8011cf8:	46c0      	nop			@ (mov r8, r8)
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
 8011cfe:	46c0      	nop			@ (mov r8, r8)
 8011d00:	20000de4 	.word	0x20000de4
 8011d04:	20002184 	.word	0x20002184
 8011d08:	200021cc 	.word	0x200021cc

08011d0c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8011d10:	4b03      	ldr	r3, [pc, #12]	@ (8011d20 <USART4_5_IRQHandler+0x14>)
 8011d12:	0018      	movs	r0, r3
 8011d14:	f00a f8ba 	bl	801be8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8011d18:	46c0      	nop			@ (mov r8, r8)
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}
 8011d1e:	46c0      	nop			@ (mov r8, r8)
 8011d20:	200020cc 	.word	0x200020cc

08011d24 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8011d28:	4b09      	ldr	r3, [pc, #36]	@ (8011d50 <I2C1_IRQHandler+0x2c>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	699a      	ldr	r2, [r3, #24]
 8011d2e:	23e0      	movs	r3, #224	@ 0xe0
 8011d30:	00db      	lsls	r3, r3, #3
 8011d32:	4013      	ands	r3, r2
 8011d34:	d004      	beq.n	8011d40 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8011d36:	4b06      	ldr	r3, [pc, #24]	@ (8011d50 <I2C1_IRQHandler+0x2c>)
 8011d38:	0018      	movs	r0, r3
 8011d3a:	f003 fbc3 	bl	80154c4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8011d3e:	e003      	b.n	8011d48 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8011d40:	4b03      	ldr	r3, [pc, #12]	@ (8011d50 <I2C1_IRQHandler+0x2c>)
 8011d42:	0018      	movs	r0, r3
 8011d44:	f003 fba4 	bl	8015490 <HAL_I2C_EV_IRQHandler>
}
 8011d48:	46c0      	nop			@ (mov r8, r8)
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	46c0      	nop			@ (mov r8, r8)
 8011d50:	20000c70 	.word	0x20000c70

08011d54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8011d58:	4b03      	ldr	r3, [pc, #12]	@ (8011d68 <USART1_IRQHandler+0x14>)
 8011d5a:	0018      	movs	r0, r3
 8011d5c:	f00a f896 	bl	801be8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8011d60:	46c0      	nop			@ (mov r8, r8)
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}
 8011d66:	46c0      	nop			@ (mov r8, r8)
 8011d68:	20002014 	.word	0x20002014

08011d6c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8011d70:	4b03      	ldr	r3, [pc, #12]	@ (8011d80 <USB_IRQHandler+0x14>)
 8011d72:	0018      	movs	r0, r3
 8011d74:	f005 ffe6 	bl	8017d44 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8011d78:	46c0      	nop			@ (mov r8, r8)
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}
 8011d7e:	46c0      	nop			@ (mov r8, r8)
 8011d80:	20002fe8 	.word	0x20002fe8

08011d84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	af00      	add	r7, sp, #0
  return 1;
 8011d88:	2301      	movs	r3, #1
}
 8011d8a:	0018      	movs	r0, r3
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}

08011d90 <_kill>:

int _kill(int pid, int sig)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b082      	sub	sp, #8
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8011d9a:	f012 ff7d 	bl	8024c98 <__errno>
 8011d9e:	0003      	movs	r3, r0
 8011da0:	2216      	movs	r2, #22
 8011da2:	601a      	str	r2, [r3, #0]
  return -1;
 8011da4:	2301      	movs	r3, #1
 8011da6:	425b      	negs	r3, r3
}
 8011da8:	0018      	movs	r0, r3
 8011daa:	46bd      	mov	sp, r7
 8011dac:	b002      	add	sp, #8
 8011dae:	bd80      	pop	{r7, pc}

08011db0 <_exit>:

void _exit (int status)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b082      	sub	sp, #8
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8011db8:	2301      	movs	r3, #1
 8011dba:	425a      	negs	r2, r3
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	0011      	movs	r1, r2
 8011dc0:	0018      	movs	r0, r3
 8011dc2:	f7ff ffe5 	bl	8011d90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8011dc6:	46c0      	nop			@ (mov r8, r8)
 8011dc8:	e7fd      	b.n	8011dc6 <_exit+0x16>

08011dca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011dca:	b580      	push	{r7, lr}
 8011dcc:	b086      	sub	sp, #24
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	60f8      	str	r0, [r7, #12]
 8011dd2:	60b9      	str	r1, [r7, #8]
 8011dd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	617b      	str	r3, [r7, #20]
 8011dda:	e00a      	b.n	8011df2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8011ddc:	e000      	b.n	8011de0 <_read+0x16>
 8011dde:	bf00      	nop
 8011de0:	0001      	movs	r1, r0
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	1c5a      	adds	r2, r3, #1
 8011de6:	60ba      	str	r2, [r7, #8]
 8011de8:	b2ca      	uxtb	r2, r1
 8011dea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	3301      	adds	r3, #1
 8011df0:	617b      	str	r3, [r7, #20]
 8011df2:	697a      	ldr	r2, [r7, #20]
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	429a      	cmp	r2, r3
 8011df8:	dbf0      	blt.n	8011ddc <_read+0x12>
  }

  return len;
 8011dfa:	687b      	ldr	r3, [r7, #4]
}
 8011dfc:	0018      	movs	r0, r3
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	b006      	add	sp, #24
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <_close>:
  }
  return len;
}

int _close(int file)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b082      	sub	sp, #8
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	425b      	negs	r3, r3
}
 8011e10:	0018      	movs	r0, r3
 8011e12:	46bd      	mov	sp, r7
 8011e14:	b002      	add	sp, #8
 8011e16:	bd80      	pop	{r7, pc}

08011e18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b082      	sub	sp, #8
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	2280      	movs	r2, #128	@ 0x80
 8011e26:	0192      	lsls	r2, r2, #6
 8011e28:	605a      	str	r2, [r3, #4]
  return 0;
 8011e2a:	2300      	movs	r3, #0
}
 8011e2c:	0018      	movs	r0, r3
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	b002      	add	sp, #8
 8011e32:	bd80      	pop	{r7, pc}

08011e34 <_isatty>:

int _isatty(int file)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b082      	sub	sp, #8
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8011e3c:	2301      	movs	r3, #1
}
 8011e3e:	0018      	movs	r0, r3
 8011e40:	46bd      	mov	sp, r7
 8011e42:	b002      	add	sp, #8
 8011e44:	bd80      	pop	{r7, pc}

08011e46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011e46:	b580      	push	{r7, lr}
 8011e48:	b084      	sub	sp, #16
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	60f8      	str	r0, [r7, #12]
 8011e4e:	60b9      	str	r1, [r7, #8]
 8011e50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8011e52:	2300      	movs	r3, #0
}
 8011e54:	0018      	movs	r0, r3
 8011e56:	46bd      	mov	sp, r7
 8011e58:	b004      	add	sp, #16
 8011e5a:	bd80      	pop	{r7, pc}

08011e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b086      	sub	sp, #24
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8011e64:	4a14      	ldr	r2, [pc, #80]	@ (8011eb8 <_sbrk+0x5c>)
 8011e66:	4b15      	ldr	r3, [pc, #84]	@ (8011ebc <_sbrk+0x60>)
 8011e68:	1ad3      	subs	r3, r2, r3
 8011e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8011e70:	4b13      	ldr	r3, [pc, #76]	@ (8011ec0 <_sbrk+0x64>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d102      	bne.n	8011e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8011e78:	4b11      	ldr	r3, [pc, #68]	@ (8011ec0 <_sbrk+0x64>)
 8011e7a:	4a12      	ldr	r2, [pc, #72]	@ (8011ec4 <_sbrk+0x68>)
 8011e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8011e7e:	4b10      	ldr	r3, [pc, #64]	@ (8011ec0 <_sbrk+0x64>)
 8011e80:	681a      	ldr	r2, [r3, #0]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	18d3      	adds	r3, r2, r3
 8011e86:	693a      	ldr	r2, [r7, #16]
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d207      	bcs.n	8011e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8011e8c:	f012 ff04 	bl	8024c98 <__errno>
 8011e90:	0003      	movs	r3, r0
 8011e92:	220c      	movs	r2, #12
 8011e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8011e96:	2301      	movs	r3, #1
 8011e98:	425b      	negs	r3, r3
 8011e9a:	e009      	b.n	8011eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8011e9c:	4b08      	ldr	r3, [pc, #32]	@ (8011ec0 <_sbrk+0x64>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8011ea2:	4b07      	ldr	r3, [pc, #28]	@ (8011ec0 <_sbrk+0x64>)
 8011ea4:	681a      	ldr	r2, [r3, #0]
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	18d2      	adds	r2, r2, r3
 8011eaa:	4b05      	ldr	r3, [pc, #20]	@ (8011ec0 <_sbrk+0x64>)
 8011eac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8011eae:	68fb      	ldr	r3, [r7, #12]
}
 8011eb0:	0018      	movs	r0, r3
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	b006      	add	sp, #24
 8011eb6:	bd80      	pop	{r7, pc}
 8011eb8:	20005000 	.word	0x20005000
 8011ebc:	00000400 	.word	0x00000400
 8011ec0:	20001e98 	.word	0x20001e98
 8011ec4:	20003648 	.word	0x20003648

08011ec8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8011ecc:	46c0      	nop			@ (mov r8, r8)
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
	...

08011ed4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b086      	sub	sp, #24
 8011ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011eda:	2310      	movs	r3, #16
 8011edc:	18fb      	adds	r3, r7, r3
 8011ede:	0018      	movs	r0, r3
 8011ee0:	2308      	movs	r3, #8
 8011ee2:	001a      	movs	r2, r3
 8011ee4:	2100      	movs	r1, #0
 8011ee6:	f012 fe33 	bl	8024b50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011eea:	003b      	movs	r3, r7
 8011eec:	0018      	movs	r0, r3
 8011eee:	2310      	movs	r3, #16
 8011ef0:	001a      	movs	r2, r3
 8011ef2:	2100      	movs	r1, #0
 8011ef4:	f012 fe2c 	bl	8024b50 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8011ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8011fb4 <MX_TIM2_Init+0xe0>)
 8011efa:	2280      	movs	r2, #128	@ 0x80
 8011efc:	05d2      	lsls	r2, r2, #23
 8011efe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8011f00:	4b2c      	ldr	r3, [pc, #176]	@ (8011fb4 <MX_TIM2_Init+0xe0>)
 8011f02:	2200      	movs	r2, #0
 8011f04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011f06:	4b2b      	ldr	r3, [pc, #172]	@ (8011fb4 <MX_TIM2_Init+0xe0>)
 8011f08:	2200      	movs	r2, #0
 8011f0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8011f0c:	4b29      	ldr	r3, [pc, #164]	@ (8011fb4 <MX_TIM2_Init+0xe0>)
 8011f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8011fb8 <MX_TIM2_Init+0xe4>)
 8011f10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011f12:	4b28      	ldr	r3, [pc, #160]	@ (8011fb4 <MX_TIM2_Init+0xe0>)
 8011f14:	2200      	movs	r2, #0
 8011f16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011f18:	4b26      	ldr	r3, [pc, #152]	@ (8011fb4 <MX_TIM2_Init+0xe0>)
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8011f1e:	4b25      	ldr	r3, [pc, #148]	@ (8011fb4 <MX_TIM2_Init+0xe0>)
 8011f20:	0018      	movs	r0, r3
 8011f22:	f009 f9c7 	bl	801b2b4 <HAL_TIM_PWM_Init>
 8011f26:	1e03      	subs	r3, r0, #0
 8011f28:	d001      	beq.n	8011f2e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8011f2a:	f7fa f813 	bl	800bf54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011f2e:	2110      	movs	r1, #16
 8011f30:	187b      	adds	r3, r7, r1
 8011f32:	2200      	movs	r2, #0
 8011f34:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011f36:	187b      	adds	r3, r7, r1
 8011f38:	2200      	movs	r2, #0
 8011f3a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8011f3c:	187a      	adds	r2, r7, r1
 8011f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8011fb4 <MX_TIM2_Init+0xe0>)
 8011f40:	0011      	movs	r1, r2
 8011f42:	0018      	movs	r0, r3
 8011f44:	f009 fcd4 	bl	801b8f0 <HAL_TIMEx_MasterConfigSynchronization>
 8011f48:	1e03      	subs	r3, r0, #0
 8011f4a:	d001      	beq.n	8011f50 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8011f4c:	f7fa f802 	bl	800bf54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011f50:	003b      	movs	r3, r7
 8011f52:	2260      	movs	r2, #96	@ 0x60
 8011f54:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8011f56:	003b      	movs	r3, r7
 8011f58:	2200      	movs	r2, #0
 8011f5a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011f5c:	003b      	movs	r3, r7
 8011f5e:	2200      	movs	r2, #0
 8011f60:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011f62:	003b      	movs	r3, r7
 8011f64:	2200      	movs	r2, #0
 8011f66:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011f68:	0039      	movs	r1, r7
 8011f6a:	4b12      	ldr	r3, [pc, #72]	@ (8011fb4 <MX_TIM2_Init+0xe0>)
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	0018      	movs	r0, r3
 8011f70:	f009 fa72 	bl	801b458 <HAL_TIM_PWM_ConfigChannel>
 8011f74:	1e03      	subs	r3, r0, #0
 8011f76:	d001      	beq.n	8011f7c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8011f78:	f7f9 ffec 	bl	800bf54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8011f7c:	0039      	movs	r1, r7
 8011f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8011fb4 <MX_TIM2_Init+0xe0>)
 8011f80:	2208      	movs	r2, #8
 8011f82:	0018      	movs	r0, r3
 8011f84:	f009 fa68 	bl	801b458 <HAL_TIM_PWM_ConfigChannel>
 8011f88:	1e03      	subs	r3, r0, #0
 8011f8a:	d001      	beq.n	8011f90 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8011f8c:	f7f9 ffe2 	bl	800bf54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8011f90:	0039      	movs	r1, r7
 8011f92:	4b08      	ldr	r3, [pc, #32]	@ (8011fb4 <MX_TIM2_Init+0xe0>)
 8011f94:	220c      	movs	r2, #12
 8011f96:	0018      	movs	r0, r3
 8011f98:	f009 fa5e 	bl	801b458 <HAL_TIM_PWM_ConfigChannel>
 8011f9c:	1e03      	subs	r3, r0, #0
 8011f9e:	d001      	beq.n	8011fa4 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8011fa0:	f7f9 ffd8 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8011fa4:	4b03      	ldr	r3, [pc, #12]	@ (8011fb4 <MX_TIM2_Init+0xe0>)
 8011fa6:	0018      	movs	r0, r3
 8011fa8:	f000 f8fe 	bl	80121a8 <HAL_TIM_MspPostInit>

}
 8011fac:	46c0      	nop			@ (mov r8, r8)
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	b006      	add	sp, #24
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	20001e9c 	.word	0x20001e9c
 8011fb8:	0000ffff 	.word	0x0000ffff

08011fbc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b086      	sub	sp, #24
 8011fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011fc2:	2310      	movs	r3, #16
 8011fc4:	18fb      	adds	r3, r7, r3
 8011fc6:	0018      	movs	r0, r3
 8011fc8:	2308      	movs	r3, #8
 8011fca:	001a      	movs	r2, r3
 8011fcc:	2100      	movs	r1, #0
 8011fce:	f012 fdbf 	bl	8024b50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011fd2:	003b      	movs	r3, r7
 8011fd4:	0018      	movs	r0, r3
 8011fd6:	2310      	movs	r3, #16
 8011fd8:	001a      	movs	r2, r3
 8011fda:	2100      	movs	r1, #0
 8011fdc:	f012 fdb8 	bl	8024b50 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8011fe0:	4b32      	ldr	r3, [pc, #200]	@ (80120ac <MX_TIM3_Init+0xf0>)
 8011fe2:	4a33      	ldr	r2, [pc, #204]	@ (80120b0 <MX_TIM3_Init+0xf4>)
 8011fe4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8011fe6:	4b31      	ldr	r3, [pc, #196]	@ (80120ac <MX_TIM3_Init+0xf0>)
 8011fe8:	2200      	movs	r2, #0
 8011fea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011fec:	4b2f      	ldr	r3, [pc, #188]	@ (80120ac <MX_TIM3_Init+0xf0>)
 8011fee:	2200      	movs	r2, #0
 8011ff0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8011ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80120ac <MX_TIM3_Init+0xf0>)
 8011ff4:	4a2f      	ldr	r2, [pc, #188]	@ (80120b4 <MX_TIM3_Init+0xf8>)
 8011ff6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80120ac <MX_TIM3_Init+0xf0>)
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80120ac <MX_TIM3_Init+0xf0>)
 8012000:	2200      	movs	r2, #0
 8012002:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8012004:	4b29      	ldr	r3, [pc, #164]	@ (80120ac <MX_TIM3_Init+0xf0>)
 8012006:	0018      	movs	r0, r3
 8012008:	f009 f954 	bl	801b2b4 <HAL_TIM_PWM_Init>
 801200c:	1e03      	subs	r3, r0, #0
 801200e:	d001      	beq.n	8012014 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8012010:	f7f9 ffa0 	bl	800bf54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012014:	2110      	movs	r1, #16
 8012016:	187b      	adds	r3, r7, r1
 8012018:	2200      	movs	r2, #0
 801201a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801201c:	187b      	adds	r3, r7, r1
 801201e:	2200      	movs	r2, #0
 8012020:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8012022:	187a      	adds	r2, r7, r1
 8012024:	4b21      	ldr	r3, [pc, #132]	@ (80120ac <MX_TIM3_Init+0xf0>)
 8012026:	0011      	movs	r1, r2
 8012028:	0018      	movs	r0, r3
 801202a:	f009 fc61 	bl	801b8f0 <HAL_TIMEx_MasterConfigSynchronization>
 801202e:	1e03      	subs	r3, r0, #0
 8012030:	d001      	beq.n	8012036 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8012032:	f7f9 ff8f 	bl	800bf54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012036:	003b      	movs	r3, r7
 8012038:	2260      	movs	r2, #96	@ 0x60
 801203a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 801203c:	003b      	movs	r3, r7
 801203e:	2200      	movs	r2, #0
 8012040:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012042:	003b      	movs	r3, r7
 8012044:	2200      	movs	r2, #0
 8012046:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012048:	003b      	movs	r3, r7
 801204a:	2200      	movs	r2, #0
 801204c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801204e:	0039      	movs	r1, r7
 8012050:	4b16      	ldr	r3, [pc, #88]	@ (80120ac <MX_TIM3_Init+0xf0>)
 8012052:	2200      	movs	r2, #0
 8012054:	0018      	movs	r0, r3
 8012056:	f009 f9ff 	bl	801b458 <HAL_TIM_PWM_ConfigChannel>
 801205a:	1e03      	subs	r3, r0, #0
 801205c:	d001      	beq.n	8012062 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 801205e:	f7f9 ff79 	bl	800bf54 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8012062:	4b12      	ldr	r3, [pc, #72]	@ (80120ac <MX_TIM3_Init+0xf0>)
 8012064:	2104      	movs	r1, #4
 8012066:	0018      	movs	r0, r3
 8012068:	f009 fca0 	bl	801b9ac <HAL_TIMEx_RemapConfig>
 801206c:	1e03      	subs	r3, r0, #0
 801206e:	d001      	beq.n	8012074 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8012070:	f7f9 ff70 	bl	800bf54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8012074:	0039      	movs	r1, r7
 8012076:	4b0d      	ldr	r3, [pc, #52]	@ (80120ac <MX_TIM3_Init+0xf0>)
 8012078:	2204      	movs	r2, #4
 801207a:	0018      	movs	r0, r3
 801207c:	f009 f9ec 	bl	801b458 <HAL_TIM_PWM_ConfigChannel>
 8012080:	1e03      	subs	r3, r0, #0
 8012082:	d001      	beq.n	8012088 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8012084:	f7f9 ff66 	bl	800bf54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012088:	0039      	movs	r1, r7
 801208a:	4b08      	ldr	r3, [pc, #32]	@ (80120ac <MX_TIM3_Init+0xf0>)
 801208c:	2208      	movs	r2, #8
 801208e:	0018      	movs	r0, r3
 8012090:	f009 f9e2 	bl	801b458 <HAL_TIM_PWM_ConfigChannel>
 8012094:	1e03      	subs	r3, r0, #0
 8012096:	d001      	beq.n	801209c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8012098:	f7f9 ff5c 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 801209c:	4b03      	ldr	r3, [pc, #12]	@ (80120ac <MX_TIM3_Init+0xf0>)
 801209e:	0018      	movs	r0, r3
 80120a0:	f000 f882 	bl	80121a8 <HAL_TIM_MspPostInit>

}
 80120a4:	46c0      	nop			@ (mov r8, r8)
 80120a6:	46bd      	mov	sp, r7
 80120a8:	b006      	add	sp, #24
 80120aa:	bd80      	pop	{r7, pc}
 80120ac:	20001edc 	.word	0x20001edc
 80120b0:	40000400 	.word	0x40000400
 80120b4:	0000ffff 	.word	0x0000ffff

080120b8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80120be:	003b      	movs	r3, r7
 80120c0:	0018      	movs	r0, r3
 80120c2:	2308      	movs	r3, #8
 80120c4:	001a      	movs	r2, r3
 80120c6:	2100      	movs	r1, #0
 80120c8:	f012 fd42 	bl	8024b50 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80120cc:	4b15      	ldr	r3, [pc, #84]	@ (8012124 <MX_TIM6_Init+0x6c>)
 80120ce:	4a16      	ldr	r2, [pc, #88]	@ (8012128 <MX_TIM6_Init+0x70>)
 80120d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 80120d2:	4b14      	ldr	r3, [pc, #80]	@ (8012124 <MX_TIM6_Init+0x6c>)
 80120d4:	220a      	movs	r2, #10
 80120d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80120d8:	4b12      	ldr	r3, [pc, #72]	@ (8012124 <MX_TIM6_Init+0x6c>)
 80120da:	2200      	movs	r2, #0
 80120dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80120de:	4b11      	ldr	r3, [pc, #68]	@ (8012124 <MX_TIM6_Init+0x6c>)
 80120e0:	4a12      	ldr	r2, [pc, #72]	@ (801212c <MX_TIM6_Init+0x74>)
 80120e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80120e4:	4b0f      	ldr	r3, [pc, #60]	@ (8012124 <MX_TIM6_Init+0x6c>)
 80120e6:	2200      	movs	r2, #0
 80120e8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80120ea:	4b0e      	ldr	r3, [pc, #56]	@ (8012124 <MX_TIM6_Init+0x6c>)
 80120ec:	0018      	movs	r0, r3
 80120ee:	f009 f839 	bl	801b164 <HAL_TIM_Base_Init>
 80120f2:	1e03      	subs	r3, r0, #0
 80120f4:	d001      	beq.n	80120fa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80120f6:	f7f9 ff2d 	bl	800bf54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80120fa:	003b      	movs	r3, r7
 80120fc:	2200      	movs	r2, #0
 80120fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012100:	003b      	movs	r3, r7
 8012102:	2200      	movs	r2, #0
 8012104:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8012106:	003a      	movs	r2, r7
 8012108:	4b06      	ldr	r3, [pc, #24]	@ (8012124 <MX_TIM6_Init+0x6c>)
 801210a:	0011      	movs	r1, r2
 801210c:	0018      	movs	r0, r3
 801210e:	f009 fbef 	bl	801b8f0 <HAL_TIMEx_MasterConfigSynchronization>
 8012112:	1e03      	subs	r3, r0, #0
 8012114:	d001      	beq.n	801211a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8012116:	f7f9 ff1d 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 801211a:	46c0      	nop			@ (mov r8, r8)
 801211c:	46bd      	mov	sp, r7
 801211e:	b002      	add	sp, #8
 8012120:	bd80      	pop	{r7, pc}
 8012122:	46c0      	nop			@ (mov r8, r8)
 8012124:	20001f1c 	.word	0x20001f1c
 8012128:	40001000 	.word	0x40001000
 801212c:	0000ffff 	.word	0x0000ffff

08012130 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b082      	sub	sp, #8
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	2380      	movs	r3, #128	@ 0x80
 801213e:	05db      	lsls	r3, r3, #23
 8012140:	429a      	cmp	r2, r3
 8012142:	d106      	bne.n	8012152 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8012144:	4b0a      	ldr	r3, [pc, #40]	@ (8012170 <HAL_TIM_PWM_MspInit+0x40>)
 8012146:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012148:	4b09      	ldr	r3, [pc, #36]	@ (8012170 <HAL_TIM_PWM_MspInit+0x40>)
 801214a:	2101      	movs	r1, #1
 801214c:	430a      	orrs	r2, r1
 801214e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8012150:	e00a      	b.n	8012168 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	4a07      	ldr	r2, [pc, #28]	@ (8012174 <HAL_TIM_PWM_MspInit+0x44>)
 8012158:	4293      	cmp	r3, r2
 801215a:	d105      	bne.n	8012168 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801215c:	4b04      	ldr	r3, [pc, #16]	@ (8012170 <HAL_TIM_PWM_MspInit+0x40>)
 801215e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012160:	4b03      	ldr	r3, [pc, #12]	@ (8012170 <HAL_TIM_PWM_MspInit+0x40>)
 8012162:	2102      	movs	r1, #2
 8012164:	430a      	orrs	r2, r1
 8012166:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8012168:	46c0      	nop			@ (mov r8, r8)
 801216a:	46bd      	mov	sp, r7
 801216c:	b002      	add	sp, #8
 801216e:	bd80      	pop	{r7, pc}
 8012170:	40021000 	.word	0x40021000
 8012174:	40000400 	.word	0x40000400

08012178 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	4a06      	ldr	r2, [pc, #24]	@ (80121a0 <HAL_TIM_Base_MspInit+0x28>)
 8012186:	4293      	cmp	r3, r2
 8012188:	d105      	bne.n	8012196 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 801218a:	4b06      	ldr	r3, [pc, #24]	@ (80121a4 <HAL_TIM_Base_MspInit+0x2c>)
 801218c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801218e:	4b05      	ldr	r3, [pc, #20]	@ (80121a4 <HAL_TIM_Base_MspInit+0x2c>)
 8012190:	2110      	movs	r1, #16
 8012192:	430a      	orrs	r2, r1
 8012194:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8012196:	46c0      	nop			@ (mov r8, r8)
 8012198:	46bd      	mov	sp, r7
 801219a:	b002      	add	sp, #8
 801219c:	bd80      	pop	{r7, pc}
 801219e:	46c0      	nop			@ (mov r8, r8)
 80121a0:	40001000 	.word	0x40001000
 80121a4:	40021000 	.word	0x40021000

080121a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80121a8:	b590      	push	{r4, r7, lr}
 80121aa:	b08b      	sub	sp, #44	@ 0x2c
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80121b0:	2414      	movs	r4, #20
 80121b2:	193b      	adds	r3, r7, r4
 80121b4:	0018      	movs	r0, r3
 80121b6:	2314      	movs	r3, #20
 80121b8:	001a      	movs	r2, r3
 80121ba:	2100      	movs	r1, #0
 80121bc:	f012 fcc8 	bl	8024b50 <memset>
  if(timHandle->Instance==TIM2)
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681a      	ldr	r2, [r3, #0]
 80121c4:	2380      	movs	r3, #128	@ 0x80
 80121c6:	05db      	lsls	r3, r3, #23
 80121c8:	429a      	cmp	r2, r3
 80121ca:	d123      	bne.n	8012214 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80121cc:	4b27      	ldr	r3, [pc, #156]	@ (801226c <HAL_TIM_MspPostInit+0xc4>)
 80121ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121d0:	4b26      	ldr	r3, [pc, #152]	@ (801226c <HAL_TIM_MspPostInit+0xc4>)
 80121d2:	2101      	movs	r1, #1
 80121d4:	430a      	orrs	r2, r1
 80121d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80121d8:	4b24      	ldr	r3, [pc, #144]	@ (801226c <HAL_TIM_MspPostInit+0xc4>)
 80121da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121dc:	2201      	movs	r2, #1
 80121de:	4013      	ands	r3, r2
 80121e0:	613b      	str	r3, [r7, #16]
 80121e2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 80121e4:	0021      	movs	r1, r4
 80121e6:	187b      	adds	r3, r7, r1
 80121e8:	220d      	movs	r2, #13
 80121ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80121ec:	187b      	adds	r3, r7, r1
 80121ee:	2202      	movs	r2, #2
 80121f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121f2:	187b      	adds	r3, r7, r1
 80121f4:	2200      	movs	r2, #0
 80121f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80121f8:	187b      	adds	r3, r7, r1
 80121fa:	2200      	movs	r2, #0
 80121fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80121fe:	187b      	adds	r3, r7, r1
 8012200:	2202      	movs	r2, #2
 8012202:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012204:	187a      	adds	r2, r7, r1
 8012206:	23a0      	movs	r3, #160	@ 0xa0
 8012208:	05db      	lsls	r3, r3, #23
 801220a:	0011      	movs	r1, r2
 801220c:	0018      	movs	r0, r3
 801220e:	f002 f883 	bl	8014318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8012212:	e027      	b.n	8012264 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	4a15      	ldr	r2, [pc, #84]	@ (8012270 <HAL_TIM_MspPostInit+0xc8>)
 801221a:	4293      	cmp	r3, r2
 801221c:	d122      	bne.n	8012264 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801221e:	4b13      	ldr	r3, [pc, #76]	@ (801226c <HAL_TIM_MspPostInit+0xc4>)
 8012220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012222:	4b12      	ldr	r3, [pc, #72]	@ (801226c <HAL_TIM_MspPostInit+0xc4>)
 8012224:	2104      	movs	r1, #4
 8012226:	430a      	orrs	r2, r1
 8012228:	62da      	str	r2, [r3, #44]	@ 0x2c
 801222a:	4b10      	ldr	r3, [pc, #64]	@ (801226c <HAL_TIM_MspPostInit+0xc4>)
 801222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801222e:	2204      	movs	r2, #4
 8012230:	4013      	ands	r3, r2
 8012232:	60fb      	str	r3, [r7, #12]
 8012234:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8012236:	2114      	movs	r1, #20
 8012238:	187b      	adds	r3, r7, r1
 801223a:	22e0      	movs	r2, #224	@ 0xe0
 801223c:	0052      	lsls	r2, r2, #1
 801223e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012240:	187b      	adds	r3, r7, r1
 8012242:	2202      	movs	r2, #2
 8012244:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012246:	187b      	adds	r3, r7, r1
 8012248:	2200      	movs	r2, #0
 801224a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801224c:	187b      	adds	r3, r7, r1
 801224e:	2200      	movs	r2, #0
 8012250:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012252:	187b      	adds	r3, r7, r1
 8012254:	2202      	movs	r2, #2
 8012256:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012258:	187b      	adds	r3, r7, r1
 801225a:	4a06      	ldr	r2, [pc, #24]	@ (8012274 <HAL_TIM_MspPostInit+0xcc>)
 801225c:	0019      	movs	r1, r3
 801225e:	0010      	movs	r0, r2
 8012260:	f002 f85a 	bl	8014318 <HAL_GPIO_Init>
}
 8012264:	46c0      	nop			@ (mov r8, r8)
 8012266:	46bd      	mov	sp, r7
 8012268:	b00b      	add	sp, #44	@ 0x2c
 801226a:	bd90      	pop	{r4, r7, pc}
 801226c:	40021000 	.word	0x40021000
 8012270:	40000400 	.word	0x40000400
 8012274:	50000800 	.word	0x50000800

08012278 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 801227c:	4b17      	ldr	r3, [pc, #92]	@ (80122dc <MX_LPUART1_UART_Init+0x64>)
 801227e:	4a18      	ldr	r2, [pc, #96]	@ (80122e0 <MX_LPUART1_UART_Init+0x68>)
 8012280:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8012282:	4b16      	ldr	r3, [pc, #88]	@ (80122dc <MX_LPUART1_UART_Init+0x64>)
 8012284:	22e1      	movs	r2, #225	@ 0xe1
 8012286:	0252      	lsls	r2, r2, #9
 8012288:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 801228a:	4b14      	ldr	r3, [pc, #80]	@ (80122dc <MX_LPUART1_UART_Init+0x64>)
 801228c:	2200      	movs	r2, #0
 801228e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8012290:	4b12      	ldr	r3, [pc, #72]	@ (80122dc <MX_LPUART1_UART_Init+0x64>)
 8012292:	2200      	movs	r2, #0
 8012294:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8012296:	4b11      	ldr	r3, [pc, #68]	@ (80122dc <MX_LPUART1_UART_Init+0x64>)
 8012298:	2200      	movs	r2, #0
 801229a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 801229c:	4b0f      	ldr	r3, [pc, #60]	@ (80122dc <MX_LPUART1_UART_Init+0x64>)
 801229e:	220c      	movs	r2, #12
 80122a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80122a2:	4b0e      	ldr	r3, [pc, #56]	@ (80122dc <MX_LPUART1_UART_Init+0x64>)
 80122a4:	2200      	movs	r2, #0
 80122a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80122a8:	4b0c      	ldr	r3, [pc, #48]	@ (80122dc <MX_LPUART1_UART_Init+0x64>)
 80122aa:	2200      	movs	r2, #0
 80122ac:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80122ae:	4b0b      	ldr	r3, [pc, #44]	@ (80122dc <MX_LPUART1_UART_Init+0x64>)
 80122b0:	2218      	movs	r2, #24
 80122b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80122b4:	4b09      	ldr	r3, [pc, #36]	@ (80122dc <MX_LPUART1_UART_Init+0x64>)
 80122b6:	2280      	movs	r2, #128	@ 0x80
 80122b8:	0212      	lsls	r2, r2, #8
 80122ba:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80122bc:	4b07      	ldr	r3, [pc, #28]	@ (80122dc <MX_LPUART1_UART_Init+0x64>)
 80122be:	2280      	movs	r2, #128	@ 0x80
 80122c0:	0152      	lsls	r2, r2, #5
 80122c2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80122c4:	4b05      	ldr	r3, [pc, #20]	@ (80122dc <MX_LPUART1_UART_Init+0x64>)
 80122c6:	0018      	movs	r0, r3
 80122c8:	f009 fb8e 	bl	801b9e8 <HAL_UART_Init>
 80122cc:	1e03      	subs	r3, r0, #0
 80122ce:	d001      	beq.n	80122d4 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 80122d0:	f7f9 fe40 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80122d4:	46c0      	nop			@ (mov r8, r8)
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	46c0      	nop			@ (mov r8, r8)
 80122dc:	20001f5c 	.word	0x20001f5c
 80122e0:	40004800 	.word	0x40004800

080122e4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80122e8:	4b14      	ldr	r3, [pc, #80]	@ (801233c <MX_USART1_UART_Init+0x58>)
 80122ea:	4a15      	ldr	r2, [pc, #84]	@ (8012340 <MX_USART1_UART_Init+0x5c>)
 80122ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80122ee:	4b13      	ldr	r3, [pc, #76]	@ (801233c <MX_USART1_UART_Init+0x58>)
 80122f0:	22e1      	movs	r2, #225	@ 0xe1
 80122f2:	0252      	lsls	r2, r2, #9
 80122f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80122f6:	4b11      	ldr	r3, [pc, #68]	@ (801233c <MX_USART1_UART_Init+0x58>)
 80122f8:	2200      	movs	r2, #0
 80122fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80122fc:	4b0f      	ldr	r3, [pc, #60]	@ (801233c <MX_USART1_UART_Init+0x58>)
 80122fe:	2200      	movs	r2, #0
 8012300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8012302:	4b0e      	ldr	r3, [pc, #56]	@ (801233c <MX_USART1_UART_Init+0x58>)
 8012304:	2200      	movs	r2, #0
 8012306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012308:	4b0c      	ldr	r3, [pc, #48]	@ (801233c <MX_USART1_UART_Init+0x58>)
 801230a:	220c      	movs	r2, #12
 801230c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801230e:	4b0b      	ldr	r3, [pc, #44]	@ (801233c <MX_USART1_UART_Init+0x58>)
 8012310:	2200      	movs	r2, #0
 8012312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8012314:	4b09      	ldr	r3, [pc, #36]	@ (801233c <MX_USART1_UART_Init+0x58>)
 8012316:	2200      	movs	r2, #0
 8012318:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801231a:	4b08      	ldr	r3, [pc, #32]	@ (801233c <MX_USART1_UART_Init+0x58>)
 801231c:	2200      	movs	r2, #0
 801231e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012320:	4b06      	ldr	r3, [pc, #24]	@ (801233c <MX_USART1_UART_Init+0x58>)
 8012322:	2200      	movs	r2, #0
 8012324:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8012326:	4b05      	ldr	r3, [pc, #20]	@ (801233c <MX_USART1_UART_Init+0x58>)
 8012328:	0018      	movs	r0, r3
 801232a:	f009 fb5d 	bl	801b9e8 <HAL_UART_Init>
 801232e:	1e03      	subs	r3, r0, #0
 8012330:	d001      	beq.n	8012336 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8012332:	f7f9 fe0f 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8012336:	46c0      	nop			@ (mov r8, r8)
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}
 801233c:	20002014 	.word	0x20002014
 8012340:	40013800 	.word	0x40013800

08012344 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8012348:	4b14      	ldr	r3, [pc, #80]	@ (801239c <MX_USART4_UART_Init+0x58>)
 801234a:	4a15      	ldr	r2, [pc, #84]	@ (80123a0 <MX_USART4_UART_Init+0x5c>)
 801234c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 801234e:	4b13      	ldr	r3, [pc, #76]	@ (801239c <MX_USART4_UART_Init+0x58>)
 8012350:	22e1      	movs	r2, #225	@ 0xe1
 8012352:	0252      	lsls	r2, r2, #9
 8012354:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8012356:	4b11      	ldr	r3, [pc, #68]	@ (801239c <MX_USART4_UART_Init+0x58>)
 8012358:	2200      	movs	r2, #0
 801235a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 801235c:	4b0f      	ldr	r3, [pc, #60]	@ (801239c <MX_USART4_UART_Init+0x58>)
 801235e:	2200      	movs	r2, #0
 8012360:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8012362:	4b0e      	ldr	r3, [pc, #56]	@ (801239c <MX_USART4_UART_Init+0x58>)
 8012364:	2200      	movs	r2, #0
 8012366:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8012368:	4b0c      	ldr	r3, [pc, #48]	@ (801239c <MX_USART4_UART_Init+0x58>)
 801236a:	220c      	movs	r2, #12
 801236c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801236e:	4b0b      	ldr	r3, [pc, #44]	@ (801239c <MX_USART4_UART_Init+0x58>)
 8012370:	2200      	movs	r2, #0
 8012372:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8012374:	4b09      	ldr	r3, [pc, #36]	@ (801239c <MX_USART4_UART_Init+0x58>)
 8012376:	2200      	movs	r2, #0
 8012378:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801237a:	4b08      	ldr	r3, [pc, #32]	@ (801239c <MX_USART4_UART_Init+0x58>)
 801237c:	2200      	movs	r2, #0
 801237e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012380:	4b06      	ldr	r3, [pc, #24]	@ (801239c <MX_USART4_UART_Init+0x58>)
 8012382:	2200      	movs	r2, #0
 8012384:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8012386:	4b05      	ldr	r3, [pc, #20]	@ (801239c <MX_USART4_UART_Init+0x58>)
 8012388:	0018      	movs	r0, r3
 801238a:	f009 fb2d 	bl	801b9e8 <HAL_UART_Init>
 801238e:	1e03      	subs	r3, r0, #0
 8012390:	d001      	beq.n	8012396 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8012392:	f7f9 fddf 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8012396:	46c0      	nop			@ (mov r8, r8)
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}
 801239c:	200020cc 	.word	0x200020cc
 80123a0:	40004c00 	.word	0x40004c00

080123a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80123a4:	b590      	push	{r4, r7, lr}
 80123a6:	b08d      	sub	sp, #52	@ 0x34
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80123ac:	241c      	movs	r4, #28
 80123ae:	193b      	adds	r3, r7, r4
 80123b0:	0018      	movs	r0, r3
 80123b2:	2314      	movs	r3, #20
 80123b4:	001a      	movs	r2, r3
 80123b6:	2100      	movs	r1, #0
 80123b8:	f012 fbca 	bl	8024b50 <memset>
  if(uartHandle->Instance==LPUART1)
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	4a8b      	ldr	r2, [pc, #556]	@ (80125f0 <HAL_UART_MspInit+0x24c>)
 80123c2:	4293      	cmp	r3, r2
 80123c4:	d129      	bne.n	801241a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80123c6:	4b8b      	ldr	r3, [pc, #556]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 80123c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80123ca:	4b8a      	ldr	r3, [pc, #552]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 80123cc:	2180      	movs	r1, #128	@ 0x80
 80123ce:	02c9      	lsls	r1, r1, #11
 80123d0:	430a      	orrs	r2, r1
 80123d2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80123d4:	4b87      	ldr	r3, [pc, #540]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 80123d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123d8:	4b86      	ldr	r3, [pc, #536]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 80123da:	2104      	movs	r1, #4
 80123dc:	430a      	orrs	r2, r1
 80123de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80123e0:	4b84      	ldr	r3, [pc, #528]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 80123e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123e4:	2204      	movs	r2, #4
 80123e6:	4013      	ands	r3, r2
 80123e8:	61bb      	str	r3, [r7, #24]
 80123ea:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80123ec:	0021      	movs	r1, r4
 80123ee:	187b      	adds	r3, r7, r1
 80123f0:	2203      	movs	r2, #3
 80123f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80123f4:	187b      	adds	r3, r7, r1
 80123f6:	2202      	movs	r2, #2
 80123f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80123fa:	187b      	adds	r3, r7, r1
 80123fc:	2200      	movs	r2, #0
 80123fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012400:	187b      	adds	r3, r7, r1
 8012402:	2203      	movs	r2, #3
 8012404:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8012406:	187b      	adds	r3, r7, r1
 8012408:	2206      	movs	r2, #6
 801240a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801240c:	187b      	adds	r3, r7, r1
 801240e:	4a7a      	ldr	r2, [pc, #488]	@ (80125f8 <HAL_UART_MspInit+0x254>)
 8012410:	0019      	movs	r1, r3
 8012412:	0010      	movs	r0, r2
 8012414:	f001 ff80 	bl	8014318 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8012418:	e0e5      	b.n	80125e6 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	4a77      	ldr	r2, [pc, #476]	@ (80125fc <HAL_UART_MspInit+0x258>)
 8012420:	4293      	cmp	r3, r2
 8012422:	d133      	bne.n	801248c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8012424:	4b73      	ldr	r3, [pc, #460]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 8012426:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012428:	4b72      	ldr	r3, [pc, #456]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 801242a:	2180      	movs	r1, #128	@ 0x80
 801242c:	01c9      	lsls	r1, r1, #7
 801242e:	430a      	orrs	r2, r1
 8012430:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012432:	4b70      	ldr	r3, [pc, #448]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 8012434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012436:	4b6f      	ldr	r3, [pc, #444]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 8012438:	2101      	movs	r1, #1
 801243a:	430a      	orrs	r2, r1
 801243c:	62da      	str	r2, [r3, #44]	@ 0x2c
 801243e:	4b6d      	ldr	r3, [pc, #436]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 8012440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012442:	2201      	movs	r2, #1
 8012444:	4013      	ands	r3, r2
 8012446:	617b      	str	r3, [r7, #20]
 8012448:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801244a:	211c      	movs	r1, #28
 801244c:	187b      	adds	r3, r7, r1
 801244e:	22c0      	movs	r2, #192	@ 0xc0
 8012450:	00d2      	lsls	r2, r2, #3
 8012452:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012454:	187b      	adds	r3, r7, r1
 8012456:	2202      	movs	r2, #2
 8012458:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801245a:	187b      	adds	r3, r7, r1
 801245c:	2200      	movs	r2, #0
 801245e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012460:	187b      	adds	r3, r7, r1
 8012462:	2203      	movs	r2, #3
 8012464:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8012466:	187b      	adds	r3, r7, r1
 8012468:	2204      	movs	r2, #4
 801246a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801246c:	187a      	adds	r2, r7, r1
 801246e:	23a0      	movs	r3, #160	@ 0xa0
 8012470:	05db      	lsls	r3, r3, #23
 8012472:	0011      	movs	r1, r2
 8012474:	0018      	movs	r0, r3
 8012476:	f001 ff4f 	bl	8014318 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 801247a:	2200      	movs	r2, #0
 801247c:	2100      	movs	r1, #0
 801247e:	201b      	movs	r0, #27
 8012480:	f001 faf8 	bl	8013a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8012484:	201b      	movs	r0, #27
 8012486:	f001 fb0a 	bl	8013a9e <HAL_NVIC_EnableIRQ>
}
 801248a:	e0ac      	b.n	80125e6 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	4a5b      	ldr	r2, [pc, #364]	@ (8012600 <HAL_UART_MspInit+0x25c>)
 8012492:	4293      	cmp	r3, r2
 8012494:	d000      	beq.n	8012498 <HAL_UART_MspInit+0xf4>
 8012496:	e0a6      	b.n	80125e6 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8012498:	4b56      	ldr	r3, [pc, #344]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 801249a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801249c:	4b55      	ldr	r3, [pc, #340]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 801249e:	2180      	movs	r1, #128	@ 0x80
 80124a0:	0309      	lsls	r1, r1, #12
 80124a2:	430a      	orrs	r2, r1
 80124a4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80124a6:	4b53      	ldr	r3, [pc, #332]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 80124a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124aa:	4b52      	ldr	r3, [pc, #328]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 80124ac:	2101      	movs	r1, #1
 80124ae:	430a      	orrs	r2, r1
 80124b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80124b2:	4b50      	ldr	r3, [pc, #320]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 80124b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124b6:	2201      	movs	r2, #1
 80124b8:	4013      	ands	r3, r2
 80124ba:	613b      	str	r3, [r7, #16]
 80124bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80124be:	4b4d      	ldr	r3, [pc, #308]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 80124c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124c2:	4b4c      	ldr	r3, [pc, #304]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 80124c4:	2104      	movs	r1, #4
 80124c6:	430a      	orrs	r2, r1
 80124c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80124ca:	4b4a      	ldr	r3, [pc, #296]	@ (80125f4 <HAL_UART_MspInit+0x250>)
 80124cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124ce:	2204      	movs	r2, #4
 80124d0:	4013      	ands	r3, r2
 80124d2:	60fb      	str	r3, [r7, #12]
 80124d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80124d6:	241c      	movs	r4, #28
 80124d8:	193b      	adds	r3, r7, r4
 80124da:	2202      	movs	r2, #2
 80124dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80124de:	193b      	adds	r3, r7, r4
 80124e0:	2202      	movs	r2, #2
 80124e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124e4:	193b      	adds	r3, r7, r4
 80124e6:	2200      	movs	r2, #0
 80124e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80124ea:	193b      	adds	r3, r7, r4
 80124ec:	2203      	movs	r2, #3
 80124ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80124f0:	193b      	adds	r3, r7, r4
 80124f2:	2206      	movs	r2, #6
 80124f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80124f6:	193a      	adds	r2, r7, r4
 80124f8:	23a0      	movs	r3, #160	@ 0xa0
 80124fa:	05db      	lsls	r3, r3, #23
 80124fc:	0011      	movs	r1, r2
 80124fe:	0018      	movs	r0, r3
 8012500:	f001 ff0a 	bl	8014318 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8012504:	0021      	movs	r1, r4
 8012506:	187b      	adds	r3, r7, r1
 8012508:	2280      	movs	r2, #128	@ 0x80
 801250a:	00d2      	lsls	r2, r2, #3
 801250c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801250e:	187b      	adds	r3, r7, r1
 8012510:	2202      	movs	r2, #2
 8012512:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012514:	187b      	adds	r3, r7, r1
 8012516:	2200      	movs	r2, #0
 8012518:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801251a:	187b      	adds	r3, r7, r1
 801251c:	2203      	movs	r2, #3
 801251e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8012520:	187b      	adds	r3, r7, r1
 8012522:	2206      	movs	r2, #6
 8012524:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012526:	187b      	adds	r3, r7, r1
 8012528:	4a33      	ldr	r2, [pc, #204]	@ (80125f8 <HAL_UART_MspInit+0x254>)
 801252a:	0019      	movs	r1, r3
 801252c:	0010      	movs	r0, r2
 801252e:	f001 fef3 	bl	8014318 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8012532:	4b34      	ldr	r3, [pc, #208]	@ (8012604 <HAL_UART_MspInit+0x260>)
 8012534:	4a34      	ldr	r2, [pc, #208]	@ (8012608 <HAL_UART_MspInit+0x264>)
 8012536:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8012538:	4b32      	ldr	r3, [pc, #200]	@ (8012604 <HAL_UART_MspInit+0x260>)
 801253a:	220c      	movs	r2, #12
 801253c:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801253e:	4b31      	ldr	r3, [pc, #196]	@ (8012604 <HAL_UART_MspInit+0x260>)
 8012540:	2200      	movs	r2, #0
 8012542:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012544:	4b2f      	ldr	r3, [pc, #188]	@ (8012604 <HAL_UART_MspInit+0x260>)
 8012546:	2200      	movs	r2, #0
 8012548:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 801254a:	4b2e      	ldr	r3, [pc, #184]	@ (8012604 <HAL_UART_MspInit+0x260>)
 801254c:	2280      	movs	r2, #128	@ 0x80
 801254e:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012550:	4b2c      	ldr	r3, [pc, #176]	@ (8012604 <HAL_UART_MspInit+0x260>)
 8012552:	2200      	movs	r2, #0
 8012554:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012556:	4b2b      	ldr	r3, [pc, #172]	@ (8012604 <HAL_UART_MspInit+0x260>)
 8012558:	2200      	movs	r2, #0
 801255a:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 801255c:	4b29      	ldr	r3, [pc, #164]	@ (8012604 <HAL_UART_MspInit+0x260>)
 801255e:	2220      	movs	r2, #32
 8012560:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8012562:	4b28      	ldr	r3, [pc, #160]	@ (8012604 <HAL_UART_MspInit+0x260>)
 8012564:	2200      	movs	r2, #0
 8012566:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8012568:	4b26      	ldr	r3, [pc, #152]	@ (8012604 <HAL_UART_MspInit+0x260>)
 801256a:	0018      	movs	r0, r3
 801256c:	f001 fab8 	bl	8013ae0 <HAL_DMA_Init>
 8012570:	1e03      	subs	r3, r0, #0
 8012572:	d001      	beq.n	8012578 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8012574:	f7f9 fcee 	bl	800bf54 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	4a22      	ldr	r2, [pc, #136]	@ (8012604 <HAL_UART_MspInit+0x260>)
 801257c:	675a      	str	r2, [r3, #116]	@ 0x74
 801257e:	4b21      	ldr	r3, [pc, #132]	@ (8012604 <HAL_UART_MspInit+0x260>)
 8012580:	687a      	ldr	r2, [r7, #4]
 8012582:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8012584:	4b21      	ldr	r3, [pc, #132]	@ (801260c <HAL_UART_MspInit+0x268>)
 8012586:	4a22      	ldr	r2, [pc, #136]	@ (8012610 <HAL_UART_MspInit+0x26c>)
 8012588:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 801258a:	4b20      	ldr	r3, [pc, #128]	@ (801260c <HAL_UART_MspInit+0x268>)
 801258c:	220c      	movs	r2, #12
 801258e:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8012590:	4b1e      	ldr	r3, [pc, #120]	@ (801260c <HAL_UART_MspInit+0x268>)
 8012592:	2210      	movs	r2, #16
 8012594:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012596:	4b1d      	ldr	r3, [pc, #116]	@ (801260c <HAL_UART_MspInit+0x268>)
 8012598:	2200      	movs	r2, #0
 801259a:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 801259c:	4b1b      	ldr	r3, [pc, #108]	@ (801260c <HAL_UART_MspInit+0x268>)
 801259e:	2280      	movs	r2, #128	@ 0x80
 80125a0:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80125a2:	4b1a      	ldr	r3, [pc, #104]	@ (801260c <HAL_UART_MspInit+0x268>)
 80125a4:	2200      	movs	r2, #0
 80125a6:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80125a8:	4b18      	ldr	r3, [pc, #96]	@ (801260c <HAL_UART_MspInit+0x268>)
 80125aa:	2200      	movs	r2, #0
 80125ac:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80125ae:	4b17      	ldr	r3, [pc, #92]	@ (801260c <HAL_UART_MspInit+0x268>)
 80125b0:	2200      	movs	r2, #0
 80125b2:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80125b4:	4b15      	ldr	r3, [pc, #84]	@ (801260c <HAL_UART_MspInit+0x268>)
 80125b6:	2200      	movs	r2, #0
 80125b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80125ba:	4b14      	ldr	r3, [pc, #80]	@ (801260c <HAL_UART_MspInit+0x268>)
 80125bc:	0018      	movs	r0, r3
 80125be:	f001 fa8f 	bl	8013ae0 <HAL_DMA_Init>
 80125c2:	1e03      	subs	r3, r0, #0
 80125c4:	d001      	beq.n	80125ca <HAL_UART_MspInit+0x226>
      Error_Handler();
 80125c6:	f7f9 fcc5 	bl	800bf54 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	4a0f      	ldr	r2, [pc, #60]	@ (801260c <HAL_UART_MspInit+0x268>)
 80125ce:	671a      	str	r2, [r3, #112]	@ 0x70
 80125d0:	4b0e      	ldr	r3, [pc, #56]	@ (801260c <HAL_UART_MspInit+0x268>)
 80125d2:	687a      	ldr	r2, [r7, #4]
 80125d4:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80125d6:	2200      	movs	r2, #0
 80125d8:	2100      	movs	r1, #0
 80125da:	200e      	movs	r0, #14
 80125dc:	f001 fa4a 	bl	8013a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80125e0:	200e      	movs	r0, #14
 80125e2:	f001 fa5c 	bl	8013a9e <HAL_NVIC_EnableIRQ>
}
 80125e6:	46c0      	nop			@ (mov r8, r8)
 80125e8:	46bd      	mov	sp, r7
 80125ea:	b00d      	add	sp, #52	@ 0x34
 80125ec:	bd90      	pop	{r4, r7, pc}
 80125ee:	46c0      	nop			@ (mov r8, r8)
 80125f0:	40004800 	.word	0x40004800
 80125f4:	40021000 	.word	0x40021000
 80125f8:	50000800 	.word	0x50000800
 80125fc:	40013800 	.word	0x40013800
 8012600:	40004c00 	.word	0x40004c00
 8012604:	20002184 	.word	0x20002184
 8012608:	4002006c 	.word	0x4002006c
 801260c:	200021cc 	.word	0x200021cc
 8012610:	40020080 	.word	0x40020080

08012614 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8012614:	b580      	push	{r7, lr}
 8012616:	b086      	sub	sp, #24
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 801261c:	f000 fd86 	bl	801312c <HAL_GetTick>
 8012620:	0003      	movs	r3, r0
 8012622:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8012624:	4b1c      	ldr	r3, [pc, #112]	@ (8012698 <TimestampIsReached+0x84>)
 8012626:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8012628:	697a      	ldr	r2, [r7, #20]
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	429a      	cmp	r2, r3
 801262e:	d307      	bcc.n	8012640 <TimestampIsReached+0x2c>
 8012630:	697a      	ldr	r2, [r7, #20]
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	1ad3      	subs	r3, r2, r3
 8012636:	693a      	ldr	r2, [r7, #16]
 8012638:	429a      	cmp	r2, r3
 801263a:	d901      	bls.n	8012640 <TimestampIsReached+0x2c>
 801263c:	2201      	movs	r2, #1
 801263e:	e000      	b.n	8012642 <TimestampIsReached+0x2e>
 8012640:	2200      	movs	r2, #0
 8012642:	230f      	movs	r3, #15
 8012644:	18fb      	adds	r3, r7, r3
 8012646:	701a      	strb	r2, [r3, #0]
 8012648:	781a      	ldrb	r2, [r3, #0]
 801264a:	2101      	movs	r1, #1
 801264c:	400a      	ands	r2, r1
 801264e:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8012650:	697a      	ldr	r2, [r7, #20]
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	429a      	cmp	r2, r3
 8012656:	d207      	bcs.n	8012668 <TimestampIsReached+0x54>
 8012658:	687a      	ldr	r2, [r7, #4]
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	1ad3      	subs	r3, r2, r3
 801265e:	693a      	ldr	r2, [r7, #16]
 8012660:	429a      	cmp	r2, r3
 8012662:	d201      	bcs.n	8012668 <TimestampIsReached+0x54>
 8012664:	2201      	movs	r2, #1
 8012666:	e000      	b.n	801266a <TimestampIsReached+0x56>
 8012668:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 801266a:	200e      	movs	r0, #14
 801266c:	183b      	adds	r3, r7, r0
 801266e:	701a      	strb	r2, [r3, #0]
 8012670:	781a      	ldrb	r2, [r3, #0]
 8012672:	2101      	movs	r1, #1
 8012674:	400a      	ands	r2, r1
 8012676:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8012678:	230f      	movs	r3, #15
 801267a:	18fb      	adds	r3, r7, r3
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d103      	bne.n	801268a <TimestampIsReached+0x76>
 8012682:	183b      	adds	r3, r7, r0
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d001      	beq.n	801268e <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 801268a:	2301      	movs	r3, #1
 801268c:	e000      	b.n	8012690 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 801268e:	2300      	movs	r3, #0
}
 8012690:	0018      	movs	r0, r3
 8012692:	46bd      	mov	sp, r7
 8012694:	b006      	add	sp, #24
 8012696:	bd80      	pop	{r7, pc}
 8012698:	7fffffff 	.word	0x7fffffff

0801269c <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 80126a4:	f000 fd42 	bl	801312c <HAL_GetTick>
 80126a8:	0002      	movs	r2, r0
 80126aa:	4904      	ldr	r1, [pc, #16]	@ (80126bc <AddTimestamp+0x20>)
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	0018      	movs	r0, r3
 80126b0:	f012 f8e8 	bl	8024884 <siprintf>
}
 80126b4:	46c0      	nop			@ (mov r8, r8)
 80126b6:	46bd      	mov	sp, r7
 80126b8:	b002      	add	sp, #8
 80126ba:	bd80      	pop	{r7, pc}
 80126bc:	0802c4c4 	.word	0x0802c4c4

080126c0 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 80126c0:	b40c      	push	{r2, r3}
 80126c2:	b5b0      	push	{r4, r5, r7, lr}
 80126c4:	b0a4      	sub	sp, #144	@ 0x90
 80126c6:	af00      	add	r7, sp, #0
 80126c8:	0002      	movs	r2, r0
 80126ca:	6039      	str	r1, [r7, #0]
 80126cc:	1dfb      	adds	r3, r7, #7
 80126ce:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 80126d0:	4b23      	ldr	r3, [pc, #140]	@ (8012760 <CreateLine+0xa0>)
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	1dfa      	adds	r2, r7, #7
 80126d6:	7812      	ldrb	r2, [r2, #0]
 80126d8:	429a      	cmp	r2, r3
 80126da:	d839      	bhi.n	8012750 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 80126dc:	683a      	ldr	r2, [r7, #0]
 80126de:	4921      	ldr	r1, [pc, #132]	@ (8012764 <CreateLine+0xa4>)
 80126e0:	240c      	movs	r4, #12
 80126e2:	193b      	adds	r3, r7, r4
 80126e4:	0018      	movs	r0, r3
 80126e6:	f012 f8cd 	bl	8024884 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 80126ea:	4b1d      	ldr	r3, [pc, #116]	@ (8012760 <CreateLine+0xa0>)
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	2b01      	cmp	r3, #1
 80126f0:	d909      	bls.n	8012706 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 80126f2:	193b      	adds	r3, r7, r4
 80126f4:	0018      	movs	r0, r3
 80126f6:	f7ed fd39 	bl	800016c <strlen>
 80126fa:	0002      	movs	r2, r0
 80126fc:	193b      	adds	r3, r7, r4
 80126fe:	189b      	adds	r3, r3, r2
 8012700:	0018      	movs	r0, r3
 8012702:	f7ff ffcb 	bl	801269c <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8012706:	240c      	movs	r4, #12
 8012708:	193b      	adds	r3, r7, r4
 801270a:	0018      	movs	r0, r3
 801270c:	f7ed fd2e 	bl	800016c <strlen>
 8012710:	0003      	movs	r3, r0
 8012712:	218c      	movs	r1, #140	@ 0x8c
 8012714:	187a      	adds	r2, r7, r1
 8012716:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8012718:	239c      	movs	r3, #156	@ 0x9c
 801271a:	2508      	movs	r5, #8
 801271c:	195b      	adds	r3, r3, r5
 801271e:	19db      	adds	r3, r3, r7
 8012720:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8012722:	193a      	adds	r2, r7, r4
 8012724:	187b      	adds	r3, r7, r1
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	18d0      	adds	r0, r2, r3
 801272a:	187b      	adds	r3, r7, r1
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	2280      	movs	r2, #128	@ 0x80
 8012730:	1ad3      	subs	r3, r2, r3
 8012732:	0019      	movs	r1, r3
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	2298      	movs	r2, #152	@ 0x98
 8012738:	1952      	adds	r2, r2, r5
 801273a:	19d2      	adds	r2, r2, r7
 801273c:	6812      	ldr	r2, [r2, #0]
 801273e:	f012 f939 	bl	80249b4 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8012742:	193a      	adds	r2, r7, r4
 8012744:	4b08      	ldr	r3, [pc, #32]	@ (8012768 <CreateLine+0xa8>)
 8012746:	0011      	movs	r1, r2
 8012748:	0018      	movs	r0, r3
 801274a:	f012 f82b 	bl	80247a4 <iprintf>
 801274e:	e000      	b.n	8012752 <CreateLine+0x92>
    return;
 8012750:	46c0      	nop			@ (mov r8, r8)
}
 8012752:	46bd      	mov	sp, r7
 8012754:	b024      	add	sp, #144	@ 0x90
 8012756:	bcb0      	pop	{r4, r5, r7}
 8012758:	bc08      	pop	{r3}
 801275a:	b002      	add	sp, #8
 801275c:	4718      	bx	r3
 801275e:	46c0      	nop			@ (mov r8, r8)
 8012760:	200000e4 	.word	0x200000e4
 8012764:	0802c4d0 	.word	0x0802c4d0
 8012768:	0802c4d4 	.word	0x0802c4d4

0801276c <_write>:

int _write(int fd, void *buf, size_t count) {
 801276c:	b580      	push	{r7, lr}
 801276e:	b084      	sub	sp, #16
 8012770:	af00      	add	r7, sp, #0
 8012772:	60f8      	str	r0, [r7, #12]
 8012774:	60b9      	str	r1, [r7, #8]
 8012776:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	b29a      	uxth	r2, r3
 801277c:	68b9      	ldr	r1, [r7, #8]
 801277e:	4804      	ldr	r0, [pc, #16]	@ (8012790 <_write+0x24>)
 8012780:	2364      	movs	r3, #100	@ 0x64
 8012782:	f009 f997 	bl	801bab4 <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 8012786:	687b      	ldr	r3, [r7, #4]
}
 8012788:	0018      	movs	r0, r3
 801278a:	46bd      	mov	sp, r7
 801278c:	b004      	add	sp, #16
 801278e:	bd80      	pop	{r7, pc}
 8012790:	20002014 	.word	0x20002014

08012794 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	0002      	movs	r2, r0
 801279c:	1dfb      	adds	r3, r7, #7
 801279e:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 80127a0:	4b03      	ldr	r3, [pc, #12]	@ (80127b0 <SetVerboseLevel+0x1c>)
 80127a2:	1dfa      	adds	r2, r7, #7
 80127a4:	7812      	ldrb	r2, [r2, #0]
 80127a6:	701a      	strb	r2, [r3, #0]
}
 80127a8:	46c0      	nop			@ (mov r8, r8)
 80127aa:	46bd      	mov	sp, r7
 80127ac:	b002      	add	sp, #8
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	200000e4 	.word	0x200000e4

080127b4 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 80127b4:	b580      	push	{r7, lr}
 80127b6:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 80127b8:	4b02      	ldr	r3, [pc, #8]	@ (80127c4 <GetVerboseLevel+0x10>)
 80127ba:	781b      	ldrb	r3, [r3, #0]
 80127bc:	0018      	movs	r0, r3
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	46c0      	nop			@ (mov r8, r8)
 80127c4:	200000e4 	.word	0x200000e4

080127c8 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b082      	sub	sp, #8
 80127cc:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 80127ce:	4a0f      	ldr	r2, [pc, #60]	@ (801280c <BinaryReleaseInfo+0x44>)
 80127d0:	4b0f      	ldr	r3, [pc, #60]	@ (8012810 <BinaryReleaseInfo+0x48>)
 80127d2:	0019      	movs	r1, r3
 80127d4:	2002      	movs	r0, #2
 80127d6:	f7ff ff73 	bl	80126c0 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 80127da:	480e      	ldr	r0, [pc, #56]	@ (8012814 <BinaryReleaseInfo+0x4c>)
 80127dc:	4a0e      	ldr	r2, [pc, #56]	@ (8012818 <BinaryReleaseInfo+0x50>)
 80127de:	490c      	ldr	r1, [pc, #48]	@ (8012810 <BinaryReleaseInfo+0x48>)
 80127e0:	4b0e      	ldr	r3, [pc, #56]	@ (801281c <BinaryReleaseInfo+0x54>)
 80127e2:	9300      	str	r3, [sp, #0]
 80127e4:	0003      	movs	r3, r0
 80127e6:	2002      	movs	r0, #2
 80127e8:	f7ff ff6a 	bl	80126c0 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 80127ec:	4b0c      	ldr	r3, [pc, #48]	@ (8012820 <BinaryReleaseInfo+0x58>)
 80127ee:	4a0d      	ldr	r2, [pc, #52]	@ (8012824 <BinaryReleaseInfo+0x5c>)
 80127f0:	4907      	ldr	r1, [pc, #28]	@ (8012810 <BinaryReleaseInfo+0x48>)
 80127f2:	2002      	movs	r0, #2
 80127f4:	f7ff ff64 	bl	80126c0 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 80127f8:	4b0b      	ldr	r3, [pc, #44]	@ (8012828 <BinaryReleaseInfo+0x60>)
 80127fa:	4a0c      	ldr	r2, [pc, #48]	@ (801282c <BinaryReleaseInfo+0x64>)
 80127fc:	4904      	ldr	r1, [pc, #16]	@ (8012810 <BinaryReleaseInfo+0x48>)
 80127fe:	2002      	movs	r0, #2
 8012800:	f7ff ff5e 	bl	80126c0 <CreateLine>
}
 8012804:	46c0      	nop			@ (mov r8, r8)
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}
 801280a:	46c0      	nop			@ (mov r8, r8)
 801280c:	0802c4dc 	.word	0x0802c4dc
 8012810:	0802c508 	.word	0x0802c508
 8012814:	0802c50c 	.word	0x0802c50c
 8012818:	0802c518 	.word	0x0802c518
 801281c:	0802c52c 	.word	0x0802c52c
 8012820:	0802c538 	.word	0x0802c538
 8012824:	0802c544 	.word	0x0802c544
 8012828:	0802c54c 	.word	0x0802c54c
 801282c:	0802c554 	.word	0x0802c554

08012830 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b084      	sub	sp, #16
 8012834:	af00      	add	r7, sp, #0
 8012836:	60f8      	str	r0, [r7, #12]
 8012838:	60b9      	str	r1, [r7, #8]
 801283a:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	68ba      	ldr	r2, [r7, #8]
 8012840:	68f9      	ldr	r1, [r7, #12]
 8012842:	4803      	ldr	r0, [pc, #12]	@ (8012850 <errorHandler+0x20>)
 8012844:	f011 ffae 	bl	80247a4 <iprintf>
//    while (true)
//    {
//    }
}
 8012848:	46c0      	nop			@ (mov r8, r8)
 801284a:	46bd      	mov	sp, r7
 801284c:	b004      	add	sp, #16
 801284e:	bd80      	pop	{r7, pc}
 8012850:	0802c56c 	.word	0x0802c56c

08012854 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8012854:	b590      	push	{r4, r7, lr}
 8012856:	b083      	sub	sp, #12
 8012858:	af00      	add	r7, sp, #0
 801285a:	6039      	str	r1, [r7, #0]
 801285c:	0011      	movs	r1, r2
 801285e:	1dfb      	adds	r3, r7, #7
 8012860:	1c02      	adds	r2, r0, #0
 8012862:	701a      	strb	r2, [r3, #0]
 8012864:	1dbb      	adds	r3, r7, #6
 8012866:	1c0a      	adds	r2, r1, #0
 8012868:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 801286a:	4b0a      	ldr	r3, [pc, #40]	@ (8012894 <ReadRegister+0x40>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d00a      	beq.n	8012888 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8012872:	4b08      	ldr	r3, [pc, #32]	@ (8012894 <ReadRegister+0x40>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	1dba      	adds	r2, r7, #6
 8012878:	7814      	ldrb	r4, [r2, #0]
 801287a:	6839      	ldr	r1, [r7, #0]
 801287c:	1dfa      	adds	r2, r7, #7
 801287e:	7810      	ldrb	r0, [r2, #0]
 8012880:	0022      	movs	r2, r4
 8012882:	4798      	blx	r3
 8012884:	0003      	movs	r3, r0
 8012886:	e000      	b.n	801288a <ReadRegister+0x36>
	}
	return false;
 8012888:	2300      	movs	r3, #0
}
 801288a:	0018      	movs	r0, r3
 801288c:	46bd      	mov	sp, r7
 801288e:	b003      	add	sp, #12
 8012890:	bd90      	pop	{r4, r7, pc}
 8012892:	46c0      	nop			@ (mov r8, r8)
 8012894:	2000221c 	.word	0x2000221c

08012898 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8012898:	b590      	push	{r4, r7, lr}
 801289a:	b083      	sub	sp, #12
 801289c:	af00      	add	r7, sp, #0
 801289e:	6039      	str	r1, [r7, #0]
 80128a0:	0011      	movs	r1, r2
 80128a2:	1dfb      	adds	r3, r7, #7
 80128a4:	1c02      	adds	r2, r0, #0
 80128a6:	701a      	strb	r2, [r3, #0]
 80128a8:	1dbb      	adds	r3, r7, #6
 80128aa:	1c0a      	adds	r2, r1, #0
 80128ac:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80128ae:	4b0a      	ldr	r3, [pc, #40]	@ (80128d8 <WriteRegister+0x40>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d00a      	beq.n	80128cc <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 80128b6:	4b08      	ldr	r3, [pc, #32]	@ (80128d8 <WriteRegister+0x40>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	1dba      	adds	r2, r7, #6
 80128bc:	7814      	ldrb	r4, [r2, #0]
 80128be:	6839      	ldr	r1, [r7, #0]
 80128c0:	1dfa      	adds	r2, r7, #7
 80128c2:	7810      	ldrb	r0, [r2, #0]
 80128c4:	0022      	movs	r2, r4
 80128c6:	4798      	blx	r3
 80128c8:	0003      	movs	r3, r0
 80128ca:	e000      	b.n	80128ce <WriteRegister+0x36>
  }
  return false;
 80128cc:	2300      	movs	r3, #0
}
 80128ce:	0018      	movs	r0, r3
 80128d0:	46bd      	mov	sp, r7
 80128d2:	b003      	add	sp, #12
 80128d4:	bd90      	pop	{r4, r7, pc}
 80128d6:	46c0      	nop			@ (mov r8, r8)
 80128d8:	20002220 	.word	0x20002220

080128dc <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 80128dc:	b580      	push	{r7, lr}
 80128de:	b084      	sub	sp, #16
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	000a      	movs	r2, r1
 80128e6:	1cfb      	adds	r3, r7, #3
 80128e8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 80128ea:	230f      	movs	r3, #15
 80128ec:	18fb      	adds	r3, r7, r3
 80128ee:	22ff      	movs	r2, #255	@ 0xff
 80128f0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80128f2:	230e      	movs	r3, #14
 80128f4:	18fb      	adds	r3, r7, r3
 80128f6:	2200      	movs	r2, #0
 80128f8:	701a      	strb	r2, [r3, #0]
 80128fa:	e037      	b.n	801296c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80128fc:	230e      	movs	r3, #14
 80128fe:	18fb      	adds	r3, r7, r3
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	687a      	ldr	r2, [r7, #4]
 8012904:	18d3      	adds	r3, r2, r3
 8012906:	7819      	ldrb	r1, [r3, #0]
 8012908:	220f      	movs	r2, #15
 801290a:	18bb      	adds	r3, r7, r2
 801290c:	18ba      	adds	r2, r7, r2
 801290e:	7812      	ldrb	r2, [r2, #0]
 8012910:	404a      	eors	r2, r1
 8012912:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8012914:	230d      	movs	r3, #13
 8012916:	18fb      	adds	r3, r7, r3
 8012918:	2200      	movs	r2, #0
 801291a:	701a      	strb	r2, [r3, #0]
 801291c:	e01b      	b.n	8012956 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 801291e:	210f      	movs	r1, #15
 8012920:	187b      	adds	r3, r7, r1
 8012922:	781b      	ldrb	r3, [r3, #0]
 8012924:	b25b      	sxtb	r3, r3
 8012926:	2b00      	cmp	r3, #0
 8012928:	da09      	bge.n	801293e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 801292a:	187b      	adds	r3, r7, r1
 801292c:	781b      	ldrb	r3, [r3, #0]
 801292e:	005b      	lsls	r3, r3, #1
 8012930:	b25b      	sxtb	r3, r3
 8012932:	2231      	movs	r2, #49	@ 0x31
 8012934:	4053      	eors	r3, r2
 8012936:	b25a      	sxtb	r2, r3
 8012938:	187b      	adds	r3, r7, r1
 801293a:	701a      	strb	r2, [r3, #0]
 801293c:	e005      	b.n	801294a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 801293e:	230f      	movs	r3, #15
 8012940:	18fa      	adds	r2, r7, r3
 8012942:	18fb      	adds	r3, r7, r3
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	18db      	adds	r3, r3, r3
 8012948:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 801294a:	210d      	movs	r1, #13
 801294c:	187b      	adds	r3, r7, r1
 801294e:	781a      	ldrb	r2, [r3, #0]
 8012950:	187b      	adds	r3, r7, r1
 8012952:	3201      	adds	r2, #1
 8012954:	701a      	strb	r2, [r3, #0]
 8012956:	230d      	movs	r3, #13
 8012958:	18fb      	adds	r3, r7, r3
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	2b07      	cmp	r3, #7
 801295e:	d9de      	bls.n	801291e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8012960:	210e      	movs	r1, #14
 8012962:	187b      	adds	r3, r7, r1
 8012964:	781a      	ldrb	r2, [r3, #0]
 8012966:	187b      	adds	r3, r7, r1
 8012968:	3201      	adds	r2, #1
 801296a:	701a      	strb	r2, [r3, #0]
 801296c:	230e      	movs	r3, #14
 801296e:	18fa      	adds	r2, r7, r3
 8012970:	1cfb      	adds	r3, r7, #3
 8012972:	7812      	ldrb	r2, [r2, #0]
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	429a      	cmp	r2, r3
 8012978:	d3c0      	bcc.n	80128fc <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 801297a:	230f      	movs	r3, #15
 801297c:	18fb      	adds	r3, r7, r3
 801297e:	781b      	ldrb	r3, [r3, #0]
}
 8012980:	0018      	movs	r0, r3
 8012982:	46bd      	mov	sp, r7
 8012984:	b004      	add	sp, #16
 8012986:	bd80      	pop	{r7, pc}

08012988 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 8012988:	b5b0      	push	{r4, r5, r7, lr}
 801298a:	b084      	sub	sp, #16
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
 8012990:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	1c18      	adds	r0, r3, #0
 8012998:	f7f0 fd64 	bl	8003464 <__aeabi_f2d>
 801299c:	4a2e      	ldr	r2, [pc, #184]	@ (8012a58 <HIDS_DewPointCalculation+0xd0>)
 801299e:	4b2f      	ldr	r3, [pc, #188]	@ (8012a5c <HIDS_DewPointCalculation+0xd4>)
 80129a0:	f7ef fe4c 	bl	800263c <__aeabi_dmul>
 80129a4:	0002      	movs	r2, r0
 80129a6:	000b      	movs	r3, r1
 80129a8:	0014      	movs	r4, r2
 80129aa:	001d      	movs	r5, r3
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	1c18      	adds	r0, r3, #0
 80129b2:	f7f0 fd57 	bl	8003464 <__aeabi_f2d>
 80129b6:	4a2a      	ldr	r2, [pc, #168]	@ (8012a60 <HIDS_DewPointCalculation+0xd8>)
 80129b8:	4b2a      	ldr	r3, [pc, #168]	@ (8012a64 <HIDS_DewPointCalculation+0xdc>)
 80129ba:	f7ee fe97 	bl	80016ec <__aeabi_dadd>
 80129be:	0002      	movs	r2, r0
 80129c0:	000b      	movs	r3, r1
 80129c2:	0020      	movs	r0, r4
 80129c4:	0029      	movs	r1, r5
 80129c6:	f7ef f9f5 	bl	8001db4 <__aeabi_ddiv>
 80129ca:	0002      	movs	r2, r0
 80129cc:	000b      	movs	r3, r1
 80129ce:	0014      	movs	r4, r2
 80129d0:	001d      	movs	r5, r3
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	1c18      	adds	r0, r3, #0
 80129d8:	f7f0 fd44 	bl	8003464 <__aeabi_f2d>
 80129dc:	2200      	movs	r2, #0
 80129de:	4b22      	ldr	r3, [pc, #136]	@ (8012a68 <HIDS_DewPointCalculation+0xe0>)
 80129e0:	f7ef f9e8 	bl	8001db4 <__aeabi_ddiv>
 80129e4:	0002      	movs	r2, r0
 80129e6:	000b      	movs	r3, r1
 80129e8:	0010      	movs	r0, r2
 80129ea:	0019      	movs	r1, r3
 80129ec:	f014 fe52 	bl	8027694 <log>
 80129f0:	0002      	movs	r2, r0
 80129f2:	000b      	movs	r3, r1
 80129f4:	0020      	movs	r0, r4
 80129f6:	0029      	movs	r1, r5
 80129f8:	f7ee fe78 	bl	80016ec <__aeabi_dadd>
 80129fc:	0002      	movs	r2, r0
 80129fe:	000b      	movs	r3, r1
 8012a00:	0010      	movs	r0, r2
 8012a02:	0019      	movs	r1, r3
 8012a04:	f7f0 fd76 	bl	80034f4 <__aeabi_d2f>
 8012a08:	1c03      	adds	r3, r0, #0
 8012a0a:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 8012a0c:	68f8      	ldr	r0, [r7, #12]
 8012a0e:	f7f0 fd29 	bl	8003464 <__aeabi_f2d>
 8012a12:	4a13      	ldr	r2, [pc, #76]	@ (8012a60 <HIDS_DewPointCalculation+0xd8>)
 8012a14:	4b13      	ldr	r3, [pc, #76]	@ (8012a64 <HIDS_DewPointCalculation+0xdc>)
 8012a16:	f7ef fe11 	bl	800263c <__aeabi_dmul>
 8012a1a:	0002      	movs	r2, r0
 8012a1c:	000b      	movs	r3, r1
 8012a1e:	0014      	movs	r4, r2
 8012a20:	001d      	movs	r5, r3
 8012a22:	68f8      	ldr	r0, [r7, #12]
 8012a24:	f7f0 fd1e 	bl	8003464 <__aeabi_f2d>
 8012a28:	0002      	movs	r2, r0
 8012a2a:	000b      	movs	r3, r1
 8012a2c:	480a      	ldr	r0, [pc, #40]	@ (8012a58 <HIDS_DewPointCalculation+0xd0>)
 8012a2e:	490b      	ldr	r1, [pc, #44]	@ (8012a5c <HIDS_DewPointCalculation+0xd4>)
 8012a30:	f7f0 f8cc 	bl	8002bcc <__aeabi_dsub>
 8012a34:	0002      	movs	r2, r0
 8012a36:	000b      	movs	r3, r1
 8012a38:	0020      	movs	r0, r4
 8012a3a:	0029      	movs	r1, r5
 8012a3c:	f7ef f9ba 	bl	8001db4 <__aeabi_ddiv>
 8012a40:	0002      	movs	r2, r0
 8012a42:	000b      	movs	r3, r1
 8012a44:	0010      	movs	r0, r2
 8012a46:	0019      	movs	r1, r3
 8012a48:	f7f0 fd54 	bl	80034f4 <__aeabi_d2f>
 8012a4c:	1c03      	adds	r3, r0, #0
}
 8012a4e:	1c18      	adds	r0, r3, #0
 8012a50:	46bd      	mov	sp, r7
 8012a52:	b004      	add	sp, #16
 8012a54:	bdb0      	pop	{r4, r5, r7, pc}
 8012a56:	46c0      	nop			@ (mov r8, r8)
 8012a58:	b851eb85 	.word	0xb851eb85
 8012a5c:	4031451e 	.word	0x4031451e
 8012a60:	66666666 	.word	0x66666666
 8012a64:	406db666 	.word	0x406db666
 8012a68:	40590000 	.word	0x40590000

08012a6c <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b082      	sub	sp, #8
 8012a70:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 8012a72:	4b0d      	ldr	r3, [pc, #52]	@ (8012aa8 <HIDS_EnableHeater+0x3c>)
 8012a74:	781a      	ldrb	r2, [r3, #0]
 8012a76:	1dfb      	adds	r3, r7, #7
 8012a78:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 8012a7a:	1dfb      	adds	r3, r7, #7
 8012a7c:	2201      	movs	r2, #1
 8012a7e:	0019      	movs	r1, r3
 8012a80:	2044      	movs	r0, #68	@ 0x44
 8012a82:	f7ff ff09 	bl	8012898 <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 8012a86:	1dfb      	adds	r3, r7, #7
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	4a08      	ldr	r2, [pc, #32]	@ (8012aac <HIDS_EnableHeater+0x40>)
 8012a8c:	4908      	ldr	r1, [pc, #32]	@ (8012ab0 <HIDS_EnableHeater+0x44>)
 8012a8e:	2002      	movs	r0, #2
 8012a90:	f7ff fe16 	bl	80126c0 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 8012a94:	f7f6 fb07 	bl	80090a6 <getPosixTime>
 8012a98:	0002      	movs	r2, r0
 8012a9a:	4b06      	ldr	r3, [pc, #24]	@ (8012ab4 <HIDS_EnableHeater+0x48>)
 8012a9c:	601a      	str	r2, [r3, #0]
}
 8012a9e:	46c0      	nop			@ (mov r8, r8)
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	b002      	add	sp, #8
 8012aa4:	bd80      	pop	{r7, pc}
 8012aa6:	46c0      	nop			@ (mov r8, r8)
 8012aa8:	200000e5 	.word	0x200000e5
 8012aac:	0802c594 	.word	0x0802c594
 8012ab0:	0802c5b4 	.word	0x0802c5b4
 8012ab4:	20002234 	.word	0x20002234

08012ab8 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b082      	sub	sp, #8
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8012ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8012aec <HIDS_Init+0x34>)
 8012ac4:	687a      	ldr	r2, [r7, #4]
 8012ac6:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8012ac8:	4b09      	ldr	r3, [pc, #36]	@ (8012af0 <HIDS_Init+0x38>)
 8012aca:	683a      	ldr	r2, [r7, #0]
 8012acc:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8012ace:	4b09      	ldr	r3, [pc, #36]	@ (8012af4 <HIDS_Init+0x3c>)
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	0018      	movs	r0, r3
 8012ad4:	f000 f840 	bl	8012b58 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8012ad8:	4b07      	ldr	r3, [pc, #28]	@ (8012af8 <HIDS_Init+0x40>)
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	0018      	movs	r0, r3
 8012ade:	f000 f82b 	bl	8012b38 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8012ae2:	46c0      	nop			@ (mov r8, r8)
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	b002      	add	sp, #8
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	46c0      	nop			@ (mov r8, r8)
 8012aec:	2000221c 	.word	0x2000221c
 8012af0:	20002220 	.word	0x20002220
 8012af4:	200000e6 	.word	0x200000e6
 8012af8:	200000e5 	.word	0x200000e5

08012afc <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8012afc:	b580      	push	{r7, lr}
 8012afe:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8012b00:	f000 fb14 	bl	801312c <HAL_GetTick>
 8012b04:	0002      	movs	r2, r0
 8012b06:	4b08      	ldr	r3, [pc, #32]	@ (8012b28 <HIDS_StartMeasurement+0x2c>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	18d2      	adds	r2, r2, r3
 8012b0c:	4b07      	ldr	r3, [pc, #28]	@ (8012b2c <HIDS_StartMeasurement+0x30>)
 8012b0e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8012b10:	4b07      	ldr	r3, [pc, #28]	@ (8012b30 <HIDS_StartMeasurement+0x34>)
 8012b12:	2201      	movs	r2, #1
 8012b14:	0019      	movs	r1, r3
 8012b16:	2044      	movs	r0, #68	@ 0x44
 8012b18:	f7ff febe 	bl	8012898 <WriteRegister>
  MeasurementDone = false;
 8012b1c:	4b05      	ldr	r3, [pc, #20]	@ (8012b34 <HIDS_StartMeasurement+0x38>)
 8012b1e:	2200      	movs	r2, #0
 8012b20:	701a      	strb	r2, [r3, #0]
}
 8012b22:	46c0      	nop			@ (mov r8, r8)
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}
 8012b28:	200000ec 	.word	0x200000ec
 8012b2c:	200000e8 	.word	0x200000e8
 8012b30:	200000e6 	.word	0x200000e6
 8012b34:	20002238 	.word	0x20002238

08012b38 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b082      	sub	sp, #8
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	0002      	movs	r2, r0
 8012b40:	1dfb      	adds	r3, r7, #7
 8012b42:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8012b44:	4b03      	ldr	r3, [pc, #12]	@ (8012b54 <HIDS_SetHeaterMode+0x1c>)
 8012b46:	1dfa      	adds	r2, r7, #7
 8012b48:	7812      	ldrb	r2, [r2, #0]
 8012b4a:	701a      	strb	r2, [r3, #0]
}
 8012b4c:	46c0      	nop			@ (mov r8, r8)
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	b002      	add	sp, #8
 8012b52:	bd80      	pop	{r7, pc}
 8012b54:	200000e5 	.word	0x200000e5

08012b58 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	0002      	movs	r2, r0
 8012b60:	1dfb      	adds	r3, r7, #7
 8012b62:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 8012b64:	4b03      	ldr	r3, [pc, #12]	@ (8012b74 <HIDS_SetMeasurementMode+0x1c>)
 8012b66:	1dfa      	adds	r2, r7, #7
 8012b68:	7812      	ldrb	r2, [r2, #0]
 8012b6a:	701a      	strb	r2, [r3, #0]
}
 8012b6c:	46c0      	nop			@ (mov r8, r8)
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	b002      	add	sp, #8
 8012b72:	bd80      	pop	{r7, pc}
 8012b74:	200000e6 	.word	0x200000e6

08012b78 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b082      	sub	sp, #8
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8012b80:	f000 fad4 	bl	801312c <HAL_GetTick>
 8012b84:	0002      	movs	r2, r0
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	18d2      	adds	r2, r2, r3
 8012b8a:	4b03      	ldr	r3, [pc, #12]	@ (8012b98 <setHIDSTimeStamp+0x20>)
 8012b8c:	601a      	str	r2, [r3, #0]
}
 8012b8e:	46c0      	nop			@ (mov r8, r8)
 8012b90:	46bd      	mov	sp, r7
 8012b92:	b002      	add	sp, #8
 8012b94:	bd80      	pop	{r7, pc}
 8012b96:	46c0      	nop			@ (mov r8, r8)
 8012b98:	2000223c 	.word	0x2000223c

08012b9c <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8012b9c:	b590      	push	{r4, r7, lr}
 8012b9e:	b085      	sub	sp, #20
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	781a      	ldrb	r2, [r3, #0]
 8012ba8:	210c      	movs	r1, #12
 8012baa:	187b      	adds	r3, r7, r1
 8012bac:	701a      	strb	r2, [r3, #0]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	785a      	ldrb	r2, [r3, #1]
 8012bb2:	187b      	adds	r3, r7, r1
 8012bb4:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8012bb6:	240f      	movs	r4, #15
 8012bb8:	193b      	adds	r3, r7, r4
 8012bba:	687a      	ldr	r2, [r7, #4]
 8012bbc:	7892      	ldrb	r2, [r2, #2]
 8012bbe:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8012bc0:	187b      	adds	r3, r7, r1
 8012bc2:	2102      	movs	r1, #2
 8012bc4:	0018      	movs	r0, r3
 8012bc6:	f7ff fe89 	bl	80128dc <CalculateCRC>
 8012bca:	0003      	movs	r3, r0
 8012bcc:	001a      	movs	r2, r3
 8012bce:	193b      	adds	r3, r7, r4
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	4293      	cmp	r3, r2
 8012bd4:	d007      	beq.n	8012be6 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8012bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8012c40 <CheckCRC+0xa4>)
 8012bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8012c44 <CheckCRC+0xa8>)
 8012bda:	0019      	movs	r1, r3
 8012bdc:	2001      	movs	r0, #1
 8012bde:	f7ff fd6f 	bl	80126c0 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 8012be2:	2300      	movs	r3, #0
 8012be4:	e027      	b.n	8012c36 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	78da      	ldrb	r2, [r3, #3]
 8012bea:	2108      	movs	r1, #8
 8012bec:	187b      	adds	r3, r7, r1
 8012bee:	701a      	strb	r2, [r3, #0]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	791a      	ldrb	r2, [r3, #4]
 8012bf4:	187b      	adds	r3, r7, r1
 8012bf6:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8012bf8:	240e      	movs	r4, #14
 8012bfa:	193b      	adds	r3, r7, r4
 8012bfc:	687a      	ldr	r2, [r7, #4]
 8012bfe:	7952      	ldrb	r2, [r2, #5]
 8012c00:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8012c02:	187b      	adds	r3, r7, r1
 8012c04:	2102      	movs	r1, #2
 8012c06:	0018      	movs	r0, r3
 8012c08:	f7ff fe68 	bl	80128dc <CalculateCRC>
 8012c0c:	0003      	movs	r3, r0
 8012c0e:	001a      	movs	r2, r3
 8012c10:	193b      	adds	r3, r7, r4
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	4293      	cmp	r3, r2
 8012c16:	d00d      	beq.n	8012c34 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8012c18:	4a0b      	ldr	r2, [pc, #44]	@ (8012c48 <CheckCRC+0xac>)
 8012c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8012c44 <CheckCRC+0xa8>)
 8012c1c:	0019      	movs	r1, r3
 8012c1e:	2001      	movs	r0, #1
 8012c20:	f7ff fd4e 	bl	80126c0 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 8012c24:	4a09      	ldr	r2, [pc, #36]	@ (8012c4c <CheckCRC+0xb0>)
 8012c26:	4b0a      	ldr	r3, [pc, #40]	@ (8012c50 <CheckCRC+0xb4>)
 8012c28:	2185      	movs	r1, #133	@ 0x85
 8012c2a:	0018      	movs	r0, r3
 8012c2c:	f7ff fe00 	bl	8012830 <errorHandler>
		return false;
 8012c30:	2300      	movs	r3, #0
 8012c32:	e000      	b.n	8012c36 <CheckCRC+0x9a>
	}
	return true;
 8012c34:	2301      	movs	r3, #1
}
 8012c36:	0018      	movs	r0, r3
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	b005      	add	sp, #20
 8012c3c:	bd90      	pop	{r4, r7, pc}
 8012c3e:	46c0      	nop			@ (mov r8, r8)
 8012c40:	0802c5b8 	.word	0x0802c5b8
 8012c44:	0802c5e0 	.word	0x0802c5e0
 8012c48:	0802c5e4 	.word	0x0802c5e4
 8012c4c:	0802c610 	.word	0x0802c610
 8012c50:	0802cca4 	.word	0x0802cca4

08012c54 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b084      	sub	sp, #16
 8012c58:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8012c5a:	1dbb      	adds	r3, r7, #6
 8012c5c:	2289      	movs	r2, #137	@ 0x89
 8012c5e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8012c60:	1dbb      	adds	r3, r7, #6
 8012c62:	2201      	movs	r2, #1
 8012c64:	0019      	movs	r1, r3
 8012c66:	2044      	movs	r0, #68	@ 0x44
 8012c68:	f7ff fe16 	bl	8012898 <WriteRegister>
	HAL_Delay(30);
 8012c6c:	201e      	movs	r0, #30
 8012c6e:	f000 fa67 	bl	8013140 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8012c72:	4b14      	ldr	r3, [pc, #80]	@ (8012cc4 <HIDS_DeviceConnected+0x70>)
 8012c74:	2206      	movs	r2, #6
 8012c76:	0019      	movs	r1, r3
 8012c78:	2044      	movs	r0, #68	@ 0x44
 8012c7a:	f7ff fdeb 	bl	8012854 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8012c7e:	1dfb      	adds	r3, r7, #7
 8012c80:	2200      	movs	r2, #0
 8012c82:	701a      	strb	r2, [r3, #0]
 8012c84:	e011      	b.n	8012caa <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8012c86:	1dfb      	adds	r3, r7, #7
 8012c88:	7818      	ldrb	r0, [r3, #0]
 8012c8a:	1dfb      	adds	r3, r7, #7
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8012cc4 <HIDS_DeviceConnected+0x70>)
 8012c90:	5cd3      	ldrb	r3, [r2, r3]
 8012c92:	4a0d      	ldr	r2, [pc, #52]	@ (8012cc8 <HIDS_DeviceConnected+0x74>)
 8012c94:	490d      	ldr	r1, [pc, #52]	@ (8012ccc <HIDS_DeviceConnected+0x78>)
 8012c96:	9300      	str	r3, [sp, #0]
 8012c98:	0003      	movs	r3, r0
 8012c9a:	2002      	movs	r0, #2
 8012c9c:	f7ff fd10 	bl	80126c0 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8012ca0:	1dfb      	adds	r3, r7, #7
 8012ca2:	781a      	ldrb	r2, [r3, #0]
 8012ca4:	1dfb      	adds	r3, r7, #7
 8012ca6:	3201      	adds	r2, #1
 8012ca8:	701a      	strb	r2, [r3, #0]
 8012caa:	1dfb      	adds	r3, r7, #7
 8012cac:	781b      	ldrb	r3, [r3, #0]
 8012cae:	2b05      	cmp	r3, #5
 8012cb0:	d9e9      	bls.n	8012c86 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8012cb2:	4b04      	ldr	r3, [pc, #16]	@ (8012cc4 <HIDS_DeviceConnected+0x70>)
 8012cb4:	0018      	movs	r0, r3
 8012cb6:	f7ff ff71 	bl	8012b9c <CheckCRC>
 8012cba:	0003      	movs	r3, r0
}
 8012cbc:	0018      	movs	r0, r3
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	b002      	add	sp, #8
 8012cc2:	bd80      	pop	{r7, pc}
 8012cc4:	20002224 	.word	0x20002224
 8012cc8:	0802c628 	.word	0x0802c628
 8012ccc:	0802c5b4 	.word	0x0802c5b4

08012cd0 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8012cd4:	4b04      	ldr	r3, [pc, #16]	@ (8012ce8 <HIDS_MeasurementReady+0x18>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	0018      	movs	r0, r3
 8012cda:	f7ff fc9b 	bl	8012614 <TimestampIsReached>
 8012cde:	0003      	movs	r3, r0
}
 8012ce0:	0018      	movs	r0, r3
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	46c0      	nop			@ (mov r8, r8)
 8012ce8:	200000e8 	.word	0x200000e8

08012cec <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b084      	sub	sp, #16
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 8012cf6:	4b41      	ldr	r3, [pc, #260]	@ (8012dfc <HIDS_GetMeasurementValues+0x110>)
 8012cf8:	781b      	ldrb	r3, [r3, #0]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d001      	beq.n	8012d02 <HIDS_GetMeasurementValues+0x16>
 8012cfe:	2301      	movs	r3, #1
 8012d00:	e077      	b.n	8012df2 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 8012d02:	f7ff ffe5 	bl	8012cd0 <HIDS_MeasurementReady>
 8012d06:	0003      	movs	r3, r0
 8012d08:	001a      	movs	r2, r3
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	4053      	eors	r3, r2
 8012d0e:	b2db      	uxtb	r3, r3
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d001      	beq.n	8012d18 <HIDS_GetMeasurementValues+0x2c>
 8012d14:	2300      	movs	r3, #0
 8012d16:	e06c      	b.n	8012df2 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8012d18:	4b39      	ldr	r3, [pc, #228]	@ (8012e00 <HIDS_GetMeasurementValues+0x114>)
 8012d1a:	2206      	movs	r2, #6
 8012d1c:	0019      	movs	r1, r3
 8012d1e:	2044      	movs	r0, #68	@ 0x44
 8012d20:	f7ff fd98 	bl	8012854 <ReadRegister>
 8012d24:	0003      	movs	r3, r0
 8012d26:	001a      	movs	r2, r3
 8012d28:	2301      	movs	r3, #1
 8012d2a:	4053      	eors	r3, r2
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d005      	beq.n	8012d3e <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 8012d32:	4a34      	ldr	r2, [pc, #208]	@ (8012e04 <HIDS_GetMeasurementValues+0x118>)
 8012d34:	4b34      	ldr	r3, [pc, #208]	@ (8012e08 <HIDS_GetMeasurementValues+0x11c>)
 8012d36:	0019      	movs	r1, r3
 8012d38:	2001      	movs	r0, #1
 8012d3a:	f7ff fcc1 	bl	80126c0 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 8012d3e:	4b30      	ldr	r3, [pc, #192]	@ (8012e00 <HIDS_GetMeasurementValues+0x114>)
 8012d40:	0018      	movs	r0, r3
 8012d42:	f7ff ff2b 	bl	8012b9c <CheckCRC>
 8012d46:	0003      	movs	r3, r0
 8012d48:	001a      	movs	r2, r3
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	4053      	eors	r3, r2
 8012d4e:	b2db      	uxtb	r3, r3
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d001      	beq.n	8012d58 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 8012d54:	2300      	movs	r3, #0
 8012d56:	e04c      	b.n	8012df2 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8012d58:	4b29      	ldr	r3, [pc, #164]	@ (8012e00 <HIDS_GetMeasurementValues+0x114>)
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	021b      	lsls	r3, r3, #8
 8012d5e:	4a28      	ldr	r2, [pc, #160]	@ (8012e00 <HIDS_GetMeasurementValues+0x114>)
 8012d60:	7852      	ldrb	r2, [r2, #1]
 8012d62:	4313      	orrs	r3, r2
 8012d64:	22af      	movs	r2, #175	@ 0xaf
 8012d66:	4353      	muls	r3, r2
 8012d68:	0018      	movs	r0, r3
 8012d6a:	f7f0 fb29 	bl	80033c0 <__aeabi_i2d>
 8012d6e:	2200      	movs	r2, #0
 8012d70:	4b26      	ldr	r3, [pc, #152]	@ (8012e0c <HIDS_GetMeasurementValues+0x120>)
 8012d72:	f7ef f81f 	bl	8001db4 <__aeabi_ddiv>
 8012d76:	0002      	movs	r2, r0
 8012d78:	000b      	movs	r3, r1
 8012d7a:	0010      	movs	r0, r2
 8012d7c:	0019      	movs	r1, r3
 8012d7e:	f7f0 fbb9 	bl	80034f4 <__aeabi_d2f>
 8012d82:	1c03      	adds	r3, r0, #0
 8012d84:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8012d86:	4922      	ldr	r1, [pc, #136]	@ (8012e10 <HIDS_GetMeasurementValues+0x124>)
 8012d88:	68f8      	ldr	r0, [r7, #12]
 8012d8a:	f7ee fa47 	bl	800121c <__aeabi_fsub>
 8012d8e:	1c03      	adds	r3, r0, #0
 8012d90:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8012d92:	4b1b      	ldr	r3, [pc, #108]	@ (8012e00 <HIDS_GetMeasurementValues+0x114>)
 8012d94:	78db      	ldrb	r3, [r3, #3]
 8012d96:	021b      	lsls	r3, r3, #8
 8012d98:	4a19      	ldr	r2, [pc, #100]	@ (8012e00 <HIDS_GetMeasurementValues+0x114>)
 8012d9a:	7912      	ldrb	r2, [r2, #4]
 8012d9c:	431a      	orrs	r2, r3
 8012d9e:	0013      	movs	r3, r2
 8012da0:	015b      	lsls	r3, r3, #5
 8012da2:	1a9b      	subs	r3, r3, r2
 8012da4:	009b      	lsls	r3, r3, #2
 8012da6:	189b      	adds	r3, r3, r2
 8012da8:	0018      	movs	r0, r3
 8012daa:	f7f0 fb09 	bl	80033c0 <__aeabi_i2d>
 8012dae:	2200      	movs	r2, #0
 8012db0:	4b16      	ldr	r3, [pc, #88]	@ (8012e0c <HIDS_GetMeasurementValues+0x120>)
 8012db2:	f7ee ffff 	bl	8001db4 <__aeabi_ddiv>
 8012db6:	0002      	movs	r2, r0
 8012db8:	000b      	movs	r3, r1
 8012dba:	0010      	movs	r0, r2
 8012dbc:	0019      	movs	r1, r3
 8012dbe:	f7f0 fb99 	bl	80034f4 <__aeabi_d2f>
 8012dc2:	1c03      	adds	r3, r0, #0
 8012dc4:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 8012dc6:	4913      	ldr	r1, [pc, #76]	@ (8012e14 <HIDS_GetMeasurementValues+0x128>)
 8012dc8:	68b8      	ldr	r0, [r7, #8]
 8012dca:	f7ee fa27 	bl	800121c <__aeabi_fsub>
 8012dce:	1c03      	adds	r3, r0, #0
 8012dd0:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	68fa      	ldr	r2, [r7, #12]
 8012dd6:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	68ba      	ldr	r2, [r7, #8]
 8012ddc:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8012dde:	687a      	ldr	r2, [r7, #4]
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	0011      	movs	r1, r2
 8012de4:	0018      	movs	r0, r3
 8012de6:	f7fd f80b 	bl	800fe00 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8012dea:	4b04      	ldr	r3, [pc, #16]	@ (8012dfc <HIDS_GetMeasurementValues+0x110>)
 8012dec:	2201      	movs	r2, #1
 8012dee:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8012df0:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 8012df2:	0018      	movs	r0, r3
 8012df4:	46bd      	mov	sp, r7
 8012df6:	b004      	add	sp, #16
 8012df8:	bd80      	pop	{r7, pc}
 8012dfa:	46c0      	nop			@ (mov r8, r8)
 8012dfc:	20002238 	.word	0x20002238
 8012e00:	2000222c 	.word	0x2000222c
 8012e04:	0802c648 	.word	0x0802c648
 8012e08:	0802c5e0 	.word	0x0802c5e0
 8012e0c:	40efffe0 	.word	0x40efffe0
 8012e10:	42340000 	.word	0x42340000
 8012e14:	40c00000 	.word	0x40c00000

08012e18 <ResetHIDSresults>:

void ResetHIDSresults() {
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	af00      	add	r7, sp, #0
  humid = 0.0;
 8012e1c:	4b04      	ldr	r3, [pc, #16]	@ (8012e30 <ResetHIDSresults+0x18>)
 8012e1e:	2200      	movs	r2, #0
 8012e20:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 8012e22:	4b04      	ldr	r3, [pc, #16]	@ (8012e34 <ResetHIDSresults+0x1c>)
 8012e24:	2200      	movs	r2, #0
 8012e26:	601a      	str	r2, [r3, #0]
}
 8012e28:	46c0      	nop			@ (mov r8, r8)
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	46c0      	nop			@ (mov r8, r8)
 8012e30:	20002214 	.word	0x20002214
 8012e34:	20002218 	.word	0x20002218

08012e38 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8012e38:	b5b0      	push	{r4, r5, r7, lr}
 8012e3a:	b084      	sub	sp, #16
 8012e3c:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8012e3e:	4b65      	ldr	r3, [pc, #404]	@ (8012fd4 <HIDS_Upkeep+0x19c>)
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	2b06      	cmp	r3, #6
 8012e44:	d900      	bls.n	8012e48 <HIDS_Upkeep+0x10>
 8012e46:	e0b4      	b.n	8012fb2 <HIDS_Upkeep+0x17a>
 8012e48:	009a      	lsls	r2, r3, #2
 8012e4a:	4b63      	ldr	r3, [pc, #396]	@ (8012fd8 <HIDS_Upkeep+0x1a0>)
 8012e4c:	18d3      	adds	r3, r2, r3
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 8012e52:	4a62      	ldr	r2, [pc, #392]	@ (8012fdc <HIDS_Upkeep+0x1a4>)
 8012e54:	4b62      	ldr	r3, [pc, #392]	@ (8012fe0 <HIDS_Upkeep+0x1a8>)
 8012e56:	0019      	movs	r1, r3
 8012e58:	2003      	movs	r0, #3
 8012e5a:	f7ff fc31 	bl	80126c0 <CreateLine>
      break;
 8012e5e:	e0b3      	b.n	8012fc8 <HIDS_Upkeep+0x190>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8012e60:	f7ff ffda 	bl	8012e18 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8012e64:	4b5b      	ldr	r3, [pc, #364]	@ (8012fd4 <HIDS_Upkeep+0x19c>)
 8012e66:	2201      	movs	r2, #1
 8012e68:	701a      	strb	r2, [r3, #0]
      break;
 8012e6a:	e0ad      	b.n	8012fc8 <HIDS_Upkeep+0x190>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 8012e6c:	f7f9 fd1a 	bl	800c8a4 <getSensorLock>
 8012e70:	1e03      	subs	r3, r0, #0
 8012e72:	d000      	beq.n	8012e76 <HIDS_Upkeep+0x3e>
 8012e74:	e0a1      	b.n	8012fba <HIDS_Upkeep+0x182>
        break;
      }
      setSensorLock(HIDS);
 8012e76:	2001      	movs	r0, #1
 8012e78:	f7f9 fd00 	bl	800c87c <setSensorLock>
      SetMeasurementIndicator();
 8012e7c:	f7fe fa0e 	bl	801129c <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 8012e80:	f7ff fe3c 	bl	8012afc <HIDS_StartMeasurement>
      setSensorLock(FREE);
 8012e84:	2000      	movs	r0, #0
 8012e86:	f7f9 fcf9 	bl	800c87c <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8012e8a:	4b52      	ldr	r3, [pc, #328]	@ (8012fd4 <HIDS_Upkeep+0x19c>)
 8012e8c:	2202      	movs	r2, #2
 8012e8e:	701a      	strb	r2, [r3, #0]
      break;
 8012e90:	e09a      	b.n	8012fc8 <HIDS_Upkeep+0x190>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 8012e92:	f7f9 fd07 	bl	800c8a4 <getSensorLock>
 8012e96:	1e03      	subs	r3, r0, #0
 8012e98:	d000      	beq.n	8012e9c <HIDS_Upkeep+0x64>
 8012e9a:	e090      	b.n	8012fbe <HIDS_Upkeep+0x186>
        break;
      }
      setSensorLock(HIDS);
 8012e9c:	2001      	movs	r0, #1
 8012e9e:	f7f9 fced 	bl	800c87c <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8012ea2:	4a50      	ldr	r2, [pc, #320]	@ (8012fe4 <HIDS_Upkeep+0x1ac>)
 8012ea4:	4b50      	ldr	r3, [pc, #320]	@ (8012fe8 <HIDS_Upkeep+0x1b0>)
 8012ea6:	0011      	movs	r1, r2
 8012ea8:	0018      	movs	r0, r3
 8012eaa:	f7ff ff1f 	bl	8012cec <HIDS_GetMeasurementValues>
 8012eae:	1e03      	subs	r3, r0, #0
 8012eb0:	d002      	beq.n	8012eb8 <HIDS_Upkeep+0x80>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8012eb2:	4b48      	ldr	r3, [pc, #288]	@ (8012fd4 <HIDS_Upkeep+0x19c>)
 8012eb4:	2203      	movs	r2, #3
 8012eb6:	701a      	strb	r2, [r3, #0]
      }
      setSensorLock(FREE);
 8012eb8:	2000      	movs	r0, #0
 8012eba:	f7f9 fcdf 	bl	800c87c <setSensorLock>
      break;
 8012ebe:	e083      	b.n	8012fc8 <HIDS_Upkeep+0x190>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8012ec0:	4b49      	ldr	r3, [pc, #292]	@ (8012fe8 <HIDS_Upkeep+0x1b0>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	1c18      	adds	r0, r3, #0
 8012ec6:	f7f0 facd 	bl	8003464 <__aeabi_f2d>
 8012eca:	0004      	movs	r4, r0
 8012ecc:	000d      	movs	r5, r1
 8012ece:	4b45      	ldr	r3, [pc, #276]	@ (8012fe4 <HIDS_Upkeep+0x1ac>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	1c18      	adds	r0, r3, #0
 8012ed4:	f7f0 fac6 	bl	8003464 <__aeabi_f2d>
 8012ed8:	0002      	movs	r2, r0
 8012eda:	000b      	movs	r3, r1
 8012edc:	4843      	ldr	r0, [pc, #268]	@ (8012fec <HIDS_Upkeep+0x1b4>)
 8012ede:	4940      	ldr	r1, [pc, #256]	@ (8012fe0 <HIDS_Upkeep+0x1a8>)
 8012ee0:	9202      	str	r2, [sp, #8]
 8012ee2:	9303      	str	r3, [sp, #12]
 8012ee4:	9400      	str	r4, [sp, #0]
 8012ee6:	9501      	str	r5, [sp, #4]
 8012ee8:	0002      	movs	r2, r0
 8012eea:	2003      	movs	r0, #3
 8012eec:	f7ff fbe8 	bl	80126c0 <CreateLine>
      setHIDS(temp, humid);
 8012ef0:	4b3c      	ldr	r3, [pc, #240]	@ (8012fe4 <HIDS_Upkeep+0x1ac>)
 8012ef2:	681a      	ldr	r2, [r3, #0]
 8012ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8012fe8 <HIDS_Upkeep+0x1b0>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	1c19      	adds	r1, r3, #0
 8012efa:	1c10      	adds	r0, r2, #0
 8012efc:	f7f1 fb74 	bl	80045e8 <setHIDS>
      ResetMeasurementIndicator();
 8012f00:	f7fe f9e4 	bl	80112cc <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 8012f04:	4b37      	ldr	r3, [pc, #220]	@ (8012fe4 <HIDS_Upkeep+0x1ac>)
 8012f06:	681c      	ldr	r4, [r3, #0]
 8012f08:	4a36      	ldr	r2, [pc, #216]	@ (8012fe4 <HIDS_Upkeep+0x1ac>)
 8012f0a:	4b37      	ldr	r3, [pc, #220]	@ (8012fe8 <HIDS_Upkeep+0x1b0>)
 8012f0c:	0011      	movs	r1, r2
 8012f0e:	0018      	movs	r0, r3
 8012f10:	f7ff fd3a 	bl	8012988 <HIDS_DewPointCalculation>
 8012f14:	1c03      	adds	r3, r0, #0
 8012f16:	1c19      	adds	r1, r3, #0
 8012f18:	1c20      	adds	r0, r4, #0
 8012f1a:	f7ee f97f 	bl	800121c <__aeabi_fsub>
 8012f1e:	1c03      	adds	r3, r0, #0
 8012f20:	21fe      	movs	r1, #254	@ 0xfe
 8012f22:	0589      	lsls	r1, r1, #22
 8012f24:	1c18      	adds	r0, r3, #0
 8012f26:	f7ed fb03 	bl	8000530 <__aeabi_fcmplt>
 8012f2a:	1e03      	subs	r3, r0, #0
 8012f2c:	d020      	beq.n	8012f70 <HIDS_Upkeep+0x138>
 8012f2e:	f7f6 f8ba 	bl	80090a6 <getPosixTime>
 8012f32:	0002      	movs	r2, r0
 8012f34:	4b2e      	ldr	r3, [pc, #184]	@ (8012ff0 <HIDS_Upkeep+0x1b8>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	1ad2      	subs	r2, r2, r3
 8012f3a:	23e1      	movs	r3, #225	@ 0xe1
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	d916      	bls.n	8012f70 <HIDS_Upkeep+0x138>
        Info("wsenHIDS The dew point is approaching, heater is started");
 8012f42:	4a2c      	ldr	r2, [pc, #176]	@ (8012ff4 <HIDS_Upkeep+0x1bc>)
 8012f44:	4b2c      	ldr	r3, [pc, #176]	@ (8012ff8 <HIDS_Upkeep+0x1c0>)
 8012f46:	0019      	movs	r1, r3
 8012f48:	2002      	movs	r0, #2
 8012f4a:	f7ff fbb9 	bl	80126c0 <CreateLine>
        if (getSensorLock() != FREE) {
 8012f4e:	f7f9 fca9 	bl	800c8a4 <getSensorLock>
 8012f52:	1e03      	subs	r3, r0, #0
 8012f54:	d135      	bne.n	8012fc2 <HIDS_Upkeep+0x18a>
          break;
        }
        HIDS_EnableHeater();
 8012f56:	f7ff fd89 	bl	8012a6c <HIDS_EnableHeater>
        setSensorLock(FREE);
 8012f5a:	2000      	movs	r0, #0
 8012f5c:	f7f9 fc8e 	bl	800c87c <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 8012f60:	f000 f8e4 	bl	801312c <HAL_GetTick>
 8012f64:	0003      	movs	r3, r0
 8012f66:	4a25      	ldr	r2, [pc, #148]	@ (8012ffc <HIDS_Upkeep+0x1c4>)
 8012f68:	189a      	adds	r2, r3, r2
 8012f6a:	4b25      	ldr	r3, [pc, #148]	@ (8013000 <HIDS_Upkeep+0x1c8>)
 8012f6c:	601a      	str	r2, [r3, #0]
 8012f6e:	e011      	b.n	8012f94 <HIDS_Upkeep+0x15c>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8012f70:	f000 f8dc 	bl	801312c <HAL_GetTick>
 8012f74:	0004      	movs	r4, r0
 8012f76:	f7f5 fd97 	bl	8008aa8 <Check_USB_PowerOn>
 8012f7a:	1e03      	subs	r3, r0, #0
 8012f7c:	d103      	bne.n	8012f86 <HIDS_Upkeep+0x14e>
 8012f7e:	4b21      	ldr	r3, [pc, #132]	@ (8013004 <HIDS_Upkeep+0x1cc>)
 8012f80:	781b      	ldrb	r3, [r3, #0]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d001      	beq.n	8012f8a <HIDS_Upkeep+0x152>
 8012f86:	4b20      	ldr	r3, [pc, #128]	@ (8013008 <HIDS_Upkeep+0x1d0>)
 8012f88:	e001      	b.n	8012f8e <HIDS_Upkeep+0x156>
 8012f8a:	23fa      	movs	r3, #250	@ 0xfa
 8012f8c:	009b      	lsls	r3, r3, #2
 8012f8e:	191a      	adds	r2, r3, r4
 8012f90:	4b1b      	ldr	r3, [pc, #108]	@ (8013000 <HIDS_Upkeep+0x1c8>)
 8012f92:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 8012f94:	4b0f      	ldr	r3, [pc, #60]	@ (8012fd4 <HIDS_Upkeep+0x19c>)
 8012f96:	2206      	movs	r2, #6
 8012f98:	701a      	strb	r2, [r3, #0]
      break;
 8012f9a:	e015      	b.n	8012fc8 <HIDS_Upkeep+0x190>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8012f9c:	4b18      	ldr	r3, [pc, #96]	@ (8013000 <HIDS_Upkeep+0x1c8>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	0018      	movs	r0, r3
 8012fa2:	f7ff fb37 	bl	8012614 <TimestampIsReached>
 8012fa6:	1e03      	subs	r3, r0, #0
 8012fa8:	d00d      	beq.n	8012fc6 <HIDS_Upkeep+0x18e>
        HIDSState = HIDS_STATE_INIT;
 8012faa:	4b0a      	ldr	r3, [pc, #40]	@ (8012fd4 <HIDS_Upkeep+0x19c>)
 8012fac:	2200      	movs	r2, #0
 8012fae:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012fb0:	e009      	b.n	8012fc6 <HIDS_Upkeep+0x18e>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8012fb2:	4b08      	ldr	r3, [pc, #32]	@ (8012fd4 <HIDS_Upkeep+0x19c>)
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	701a      	strb	r2, [r3, #0]
      break;
 8012fb8:	e006      	b.n	8012fc8 <HIDS_Upkeep+0x190>
        break;
 8012fba:	46c0      	nop			@ (mov r8, r8)
 8012fbc:	e004      	b.n	8012fc8 <HIDS_Upkeep+0x190>
        break;
 8012fbe:	46c0      	nop			@ (mov r8, r8)
 8012fc0:	e002      	b.n	8012fc8 <HIDS_Upkeep+0x190>
          break;
 8012fc2:	46c0      	nop			@ (mov r8, r8)
 8012fc4:	e000      	b.n	8012fc8 <HIDS_Upkeep+0x190>
      break;
 8012fc6:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8012fc8:	4b02      	ldr	r3, [pc, #8]	@ (8012fd4 <HIDS_Upkeep+0x19c>)
 8012fca:	781b      	ldrb	r3, [r3, #0]
}
 8012fcc:	0018      	movs	r0, r3
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8012fd2:	46c0      	nop			@ (mov r8, r8)
 8012fd4:	20002240 	.word	0x20002240
 8012fd8:	0802cc88 	.word	0x0802cc88
 8012fdc:	0802c67c 	.word	0x0802c67c
 8012fe0:	0802c6b0 	.word	0x0802c6b0
 8012fe4:	20002218 	.word	0x20002218
 8012fe8:	20002214 	.word	0x20002214
 8012fec:	0802c6b4 	.word	0x0802c6b4
 8012ff0:	20002234 	.word	0x20002234
 8012ff4:	0802c6e8 	.word	0x0802c6e8
 8012ff8:	0802c5b4 	.word	0x0802c5b4
 8012ffc:	00002ee0 	.word	0x00002ee0
 8013000:	2000223c 	.word	0x2000223c
 8013004:	20001e7e 	.word	0x20001e7e
 8013008:	00002710 	.word	0x00002710

0801300c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 801300c:	480d      	ldr	r0, [pc, #52]	@ (8013044 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 801300e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8013010:	f7fe ff5a 	bl	8011ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8013014:	480c      	ldr	r0, [pc, #48]	@ (8013048 <LoopForever+0x6>)
  ldr r1, =_edata
 8013016:	490d      	ldr	r1, [pc, #52]	@ (801304c <LoopForever+0xa>)
  ldr r2, =_sidata
 8013018:	4a0d      	ldr	r2, [pc, #52]	@ (8013050 <LoopForever+0xe>)
  movs r3, #0
 801301a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801301c:	e002      	b.n	8013024 <LoopCopyDataInit>

0801301e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801301e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013022:	3304      	adds	r3, #4

08013024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013028:	d3f9      	bcc.n	801301e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801302a:	4a0a      	ldr	r2, [pc, #40]	@ (8013054 <LoopForever+0x12>)
  ldr r4, =_ebss
 801302c:	4c0a      	ldr	r4, [pc, #40]	@ (8013058 <LoopForever+0x16>)
  movs r3, #0
 801302e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013030:	e001      	b.n	8013036 <LoopFillZerobss>

08013032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013034:	3204      	adds	r2, #4

08013036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013038:	d3fb      	bcc.n	8013032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801303a:	f011 fe33 	bl	8024ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801303e:	f7f8 fc21 	bl	800b884 <main>

08013042 <LoopForever>:

LoopForever:
    b LoopForever
 8013042:	e7fe      	b.n	8013042 <LoopForever>
   ldr   r0, =_estack
 8013044:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8013048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801304c:	20000448 	.word	0x20000448
  ldr r2, =_sidata
 8013050:	0802d658 	.word	0x0802d658
  ldr r2, =_sbss
 8013054:	20000448 	.word	0x20000448
  ldr r4, =_ebss
 8013058:	20003648 	.word	0x20003648

0801305c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801305c:	e7fe      	b.n	801305c <ADC1_COMP_IRQHandler>
	...

08013060 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b082      	sub	sp, #8
 8013064:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8013066:	1dfb      	adds	r3, r7, #7
 8013068:	2200      	movs	r2, #0
 801306a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 801306c:	4b0b      	ldr	r3, [pc, #44]	@ (801309c <HAL_Init+0x3c>)
 801306e:	681a      	ldr	r2, [r3, #0]
 8013070:	4b0a      	ldr	r3, [pc, #40]	@ (801309c <HAL_Init+0x3c>)
 8013072:	2140      	movs	r1, #64	@ 0x40
 8013074:	430a      	orrs	r2, r1
 8013076:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8013078:	2003      	movs	r0, #3
 801307a:	f000 f811 	bl	80130a0 <HAL_InitTick>
 801307e:	1e03      	subs	r3, r0, #0
 8013080:	d003      	beq.n	801308a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8013082:	1dfb      	adds	r3, r7, #7
 8013084:	2201      	movs	r2, #1
 8013086:	701a      	strb	r2, [r3, #0]
 8013088:	e001      	b.n	801308e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801308a:	f7fe fdd1 	bl	8011c30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801308e:	1dfb      	adds	r3, r7, #7
 8013090:	781b      	ldrb	r3, [r3, #0]
}
 8013092:	0018      	movs	r0, r3
 8013094:	46bd      	mov	sp, r7
 8013096:	b002      	add	sp, #8
 8013098:	bd80      	pop	{r7, pc}
 801309a:	46c0      	nop			@ (mov r8, r8)
 801309c:	40022000 	.word	0x40022000

080130a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80130a0:	b590      	push	{r4, r7, lr}
 80130a2:	b083      	sub	sp, #12
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80130a8:	4b14      	ldr	r3, [pc, #80]	@ (80130fc <HAL_InitTick+0x5c>)
 80130aa:	681c      	ldr	r4, [r3, #0]
 80130ac:	4b14      	ldr	r3, [pc, #80]	@ (8013100 <HAL_InitTick+0x60>)
 80130ae:	781b      	ldrb	r3, [r3, #0]
 80130b0:	0019      	movs	r1, r3
 80130b2:	23fa      	movs	r3, #250	@ 0xfa
 80130b4:	0098      	lsls	r0, r3, #2
 80130b6:	f7ed f875 	bl	80001a4 <__udivsi3>
 80130ba:	0003      	movs	r3, r0
 80130bc:	0019      	movs	r1, r3
 80130be:	0020      	movs	r0, r4
 80130c0:	f7ed f870 	bl	80001a4 <__udivsi3>
 80130c4:	0003      	movs	r3, r0
 80130c6:	0018      	movs	r0, r3
 80130c8:	f000 fcfd 	bl	8013ac6 <HAL_SYSTICK_Config>
 80130cc:	1e03      	subs	r3, r0, #0
 80130ce:	d001      	beq.n	80130d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80130d0:	2301      	movs	r3, #1
 80130d2:	e00f      	b.n	80130f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2b03      	cmp	r3, #3
 80130d8:	d80b      	bhi.n	80130f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80130da:	6879      	ldr	r1, [r7, #4]
 80130dc:	2301      	movs	r3, #1
 80130de:	425b      	negs	r3, r3
 80130e0:	2200      	movs	r2, #0
 80130e2:	0018      	movs	r0, r3
 80130e4:	f000 fcc6 	bl	8013a74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80130e8:	4b06      	ldr	r3, [pc, #24]	@ (8013104 <HAL_InitTick+0x64>)
 80130ea:	687a      	ldr	r2, [r7, #4]
 80130ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80130ee:	2300      	movs	r3, #0
 80130f0:	e000      	b.n	80130f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80130f2:	2301      	movs	r3, #1
}
 80130f4:	0018      	movs	r0, r3
 80130f6:	46bd      	mov	sp, r7
 80130f8:	b003      	add	sp, #12
 80130fa:	bd90      	pop	{r4, r7, pc}
 80130fc:	200000e0 	.word	0x200000e0
 8013100:	200000f4 	.word	0x200000f4
 8013104:	200000f0 	.word	0x200000f0

08013108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8013108:	b580      	push	{r7, lr}
 801310a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801310c:	4b05      	ldr	r3, [pc, #20]	@ (8013124 <HAL_IncTick+0x1c>)
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	001a      	movs	r2, r3
 8013112:	4b05      	ldr	r3, [pc, #20]	@ (8013128 <HAL_IncTick+0x20>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	18d2      	adds	r2, r2, r3
 8013118:	4b03      	ldr	r3, [pc, #12]	@ (8013128 <HAL_IncTick+0x20>)
 801311a:	601a      	str	r2, [r3, #0]
}
 801311c:	46c0      	nop			@ (mov r8, r8)
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
 8013122:	46c0      	nop			@ (mov r8, r8)
 8013124:	200000f4 	.word	0x200000f4
 8013128:	20002244 	.word	0x20002244

0801312c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	af00      	add	r7, sp, #0
  return uwTick;
 8013130:	4b02      	ldr	r3, [pc, #8]	@ (801313c <HAL_GetTick+0x10>)
 8013132:	681b      	ldr	r3, [r3, #0]
}
 8013134:	0018      	movs	r0, r3
 8013136:	46bd      	mov	sp, r7
 8013138:	bd80      	pop	{r7, pc}
 801313a:	46c0      	nop			@ (mov r8, r8)
 801313c:	20002244 	.word	0x20002244

08013140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b084      	sub	sp, #16
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013148:	f7ff fff0 	bl	801312c <HAL_GetTick>
 801314c:	0003      	movs	r3, r0
 801314e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	3301      	adds	r3, #1
 8013158:	d005      	beq.n	8013166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801315a:	4b0a      	ldr	r3, [pc, #40]	@ (8013184 <HAL_Delay+0x44>)
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	001a      	movs	r2, r3
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	189b      	adds	r3, r3, r2
 8013164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8013166:	46c0      	nop			@ (mov r8, r8)
 8013168:	f7ff ffe0 	bl	801312c <HAL_GetTick>
 801316c:	0002      	movs	r2, r0
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	1ad3      	subs	r3, r2, r3
 8013172:	68fa      	ldr	r2, [r7, #12]
 8013174:	429a      	cmp	r2, r3
 8013176:	d8f7      	bhi.n	8013168 <HAL_Delay+0x28>
  {
  }
}
 8013178:	46c0      	nop			@ (mov r8, r8)
 801317a:	46c0      	nop			@ (mov r8, r8)
 801317c:	46bd      	mov	sp, r7
 801317e:	b004      	add	sp, #16
 8013180:	bd80      	pop	{r7, pc}
 8013182:	46c0      	nop			@ (mov r8, r8)
 8013184:	200000f4 	.word	0x200000f4

08013188 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 801318c:	4b04      	ldr	r3, [pc, #16]	@ (80131a0 <HAL_SuspendTick+0x18>)
 801318e:	681a      	ldr	r2, [r3, #0]
 8013190:	4b03      	ldr	r3, [pc, #12]	@ (80131a0 <HAL_SuspendTick+0x18>)
 8013192:	2102      	movs	r1, #2
 8013194:	438a      	bics	r2, r1
 8013196:	601a      	str	r2, [r3, #0]
}
 8013198:	46c0      	nop			@ (mov r8, r8)
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
 801319e:	46c0      	nop			@ (mov r8, r8)
 80131a0:	e000e010 	.word	0xe000e010

080131a4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80131a8:	4b04      	ldr	r3, [pc, #16]	@ (80131bc <HAL_ResumeTick+0x18>)
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	4b03      	ldr	r3, [pc, #12]	@ (80131bc <HAL_ResumeTick+0x18>)
 80131ae:	2102      	movs	r1, #2
 80131b0:	430a      	orrs	r2, r1
 80131b2:	601a      	str	r2, [r3, #0]
}
 80131b4:	46c0      	nop			@ (mov r8, r8)
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	46c0      	nop			@ (mov r8, r8)
 80131bc:	e000e010 	.word	0xe000e010

080131c0 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80131c4:	4b02      	ldr	r3, [pc, #8]	@ (80131d0 <HAL_GetUIDw0+0x10>)
 80131c6:	681b      	ldr	r3, [r3, #0]
}
 80131c8:	0018      	movs	r0, r3
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}
 80131ce:	46c0      	nop			@ (mov r8, r8)
 80131d0:	1ff80050 	.word	0x1ff80050

080131d4 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 80131d8:	4b02      	ldr	r3, [pc, #8]	@ (80131e4 <HAL_GetUIDw1+0x10>)
 80131da:	681b      	ldr	r3, [r3, #0]
}
 80131dc:	0018      	movs	r0, r3
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}
 80131e2:	46c0      	nop			@ (mov r8, r8)
 80131e4:	1ff80054 	.word	0x1ff80054

080131e8 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 80131ec:	4b02      	ldr	r3, [pc, #8]	@ (80131f8 <HAL_GetUIDw2+0x10>)
 80131ee:	681b      	ldr	r3, [r3, #0]
}
 80131f0:	0018      	movs	r0, r3
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
 80131f6:	46c0      	nop			@ (mov r8, r8)
 80131f8:	1ff80064 	.word	0x1ff80064

080131fc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b082      	sub	sp, #8
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d101      	bne.n	801320e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 801320a:	2301      	movs	r3, #1
 801320c:	e159      	b.n	80134c2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013212:	2b00      	cmp	r3, #0
 8013214:	d10a      	bne.n	801322c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2200      	movs	r2, #0
 801321a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2250      	movs	r2, #80	@ 0x50
 8013220:	2100      	movs	r1, #0
 8013222:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	0018      	movs	r0, r3
 8013228:	f7f6 faf6 	bl	8009818 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013230:	2210      	movs	r2, #16
 8013232:	4013      	ands	r3, r2
 8013234:	2b10      	cmp	r3, #16
 8013236:	d005      	beq.n	8013244 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	689b      	ldr	r3, [r3, #8]
 801323e:	2204      	movs	r2, #4
 8013240:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8013242:	d00b      	beq.n	801325c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013248:	2210      	movs	r2, #16
 801324a:	431a      	orrs	r2, r3
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2250      	movs	r2, #80	@ 0x50
 8013254:	2100      	movs	r1, #0
 8013256:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8013258:	2301      	movs	r3, #1
 801325a:	e132      	b.n	80134c2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013260:	4a9a      	ldr	r2, [pc, #616]	@ (80134cc <HAL_ADC_Init+0x2d0>)
 8013262:	4013      	ands	r3, r2
 8013264:	2202      	movs	r2, #2
 8013266:	431a      	orrs	r2, r3
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	689b      	ldr	r3, [r3, #8]
 8013272:	2203      	movs	r2, #3
 8013274:	4013      	ands	r3, r2
 8013276:	2b01      	cmp	r3, #1
 8013278:	d108      	bne.n	801328c <HAL_ADC_Init+0x90>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	2201      	movs	r2, #1
 8013282:	4013      	ands	r3, r2
 8013284:	2b01      	cmp	r3, #1
 8013286:	d101      	bne.n	801328c <HAL_ADC_Init+0x90>
 8013288:	2301      	movs	r3, #1
 801328a:	e000      	b.n	801328e <HAL_ADC_Init+0x92>
 801328c:	2300      	movs	r3, #0
 801328e:	2b00      	cmp	r3, #0
 8013290:	d149      	bne.n	8013326 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	685a      	ldr	r2, [r3, #4]
 8013296:	23c0      	movs	r3, #192	@ 0xc0
 8013298:	061b      	lsls	r3, r3, #24
 801329a:	429a      	cmp	r2, r3
 801329c:	d00b      	beq.n	80132b6 <HAL_ADC_Init+0xba>
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	685a      	ldr	r2, [r3, #4]
 80132a2:	2380      	movs	r3, #128	@ 0x80
 80132a4:	05db      	lsls	r3, r3, #23
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d005      	beq.n	80132b6 <HAL_ADC_Init+0xba>
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	685a      	ldr	r2, [r3, #4]
 80132ae:	2380      	movs	r3, #128	@ 0x80
 80132b0:	061b      	lsls	r3, r3, #24
 80132b2:	429a      	cmp	r2, r3
 80132b4:	d111      	bne.n	80132da <HAL_ADC_Init+0xde>
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	691a      	ldr	r2, [r3, #16]
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	0092      	lsls	r2, r2, #2
 80132c2:	0892      	lsrs	r2, r2, #2
 80132c4:	611a      	str	r2, [r3, #16]
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	6919      	ldr	r1, [r3, #16]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	685a      	ldr	r2, [r3, #4]
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	430a      	orrs	r2, r1
 80132d6:	611a      	str	r2, [r3, #16]
 80132d8:	e014      	b.n	8013304 <HAL_ADC_Init+0x108>
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	691a      	ldr	r2, [r3, #16]
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	0092      	lsls	r2, r2, #2
 80132e6:	0892      	lsrs	r2, r2, #2
 80132e8:	611a      	str	r2, [r3, #16]
 80132ea:	4b79      	ldr	r3, [pc, #484]	@ (80134d0 <HAL_ADC_Init+0x2d4>)
 80132ec:	681a      	ldr	r2, [r3, #0]
 80132ee:	4b78      	ldr	r3, [pc, #480]	@ (80134d0 <HAL_ADC_Init+0x2d4>)
 80132f0:	4978      	ldr	r1, [pc, #480]	@ (80134d4 <HAL_ADC_Init+0x2d8>)
 80132f2:	400a      	ands	r2, r1
 80132f4:	601a      	str	r2, [r3, #0]
 80132f6:	4b76      	ldr	r3, [pc, #472]	@ (80134d0 <HAL_ADC_Init+0x2d4>)
 80132f8:	6819      	ldr	r1, [r3, #0]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	685a      	ldr	r2, [r3, #4]
 80132fe:	4b74      	ldr	r3, [pc, #464]	@ (80134d0 <HAL_ADC_Init+0x2d4>)
 8013300:	430a      	orrs	r2, r1
 8013302:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	68da      	ldr	r2, [r3, #12]
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	2118      	movs	r1, #24
 8013310:	438a      	bics	r2, r1
 8013312:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	68d9      	ldr	r1, [r3, #12]
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	689a      	ldr	r2, [r3, #8]
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	430a      	orrs	r2, r1
 8013324:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8013326:	4b6a      	ldr	r3, [pc, #424]	@ (80134d0 <HAL_ADC_Init+0x2d4>)
 8013328:	681a      	ldr	r2, [r3, #0]
 801332a:	4b69      	ldr	r3, [pc, #420]	@ (80134d0 <HAL_ADC_Init+0x2d4>)
 801332c:	496a      	ldr	r1, [pc, #424]	@ (80134d8 <HAL_ADC_Init+0x2dc>)
 801332e:	400a      	ands	r2, r1
 8013330:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8013332:	4b67      	ldr	r3, [pc, #412]	@ (80134d0 <HAL_ADC_Init+0x2d4>)
 8013334:	6819      	ldr	r1, [r3, #0]
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801333a:	065a      	lsls	r2, r3, #25
 801333c:	4b64      	ldr	r3, [pc, #400]	@ (80134d0 <HAL_ADC_Init+0x2d4>)
 801333e:	430a      	orrs	r2, r1
 8013340:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	689a      	ldr	r2, [r3, #8]
 8013348:	2380      	movs	r3, #128	@ 0x80
 801334a:	055b      	lsls	r3, r3, #21
 801334c:	4013      	ands	r3, r2
 801334e:	d108      	bne.n	8013362 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	689a      	ldr	r2, [r3, #8]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	2180      	movs	r1, #128	@ 0x80
 801335c:	0549      	lsls	r1, r1, #21
 801335e:	430a      	orrs	r2, r1
 8013360:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	68da      	ldr	r2, [r3, #12]
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	495b      	ldr	r1, [pc, #364]	@ (80134dc <HAL_ADC_Init+0x2e0>)
 801336e:	400a      	ands	r2, r1
 8013370:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	68d9      	ldr	r1, [r3, #12]
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	691b      	ldr	r3, [r3, #16]
 8013380:	2b02      	cmp	r3, #2
 8013382:	d101      	bne.n	8013388 <HAL_ADC_Init+0x18c>
 8013384:	2304      	movs	r3, #4
 8013386:	e000      	b.n	801338a <HAL_ADC_Init+0x18e>
 8013388:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801338a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2020      	movs	r0, #32
 8013390:	5c1b      	ldrb	r3, [r3, r0]
 8013392:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8013394:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	202c      	movs	r0, #44	@ 0x2c
 801339a:	5c1b      	ldrb	r3, [r3, r0]
 801339c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 801339e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80133a4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	699b      	ldr	r3, [r3, #24]
 80133aa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80133ac:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	69db      	ldr	r3, [r3, #28]
 80133b2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80133b4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	430a      	orrs	r2, r1
 80133bc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80133c2:	23c2      	movs	r3, #194	@ 0xc2
 80133c4:	33ff      	adds	r3, #255	@ 0xff
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d00b      	beq.n	80133e2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	68d9      	ldr	r1, [r3, #12]
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80133d8:	431a      	orrs	r2, r3
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	430a      	orrs	r2, r1
 80133e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	2221      	movs	r2, #33	@ 0x21
 80133e6:	5c9b      	ldrb	r3, [r3, r2]
 80133e8:	2b01      	cmp	r3, #1
 80133ea:	d11a      	bne.n	8013422 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2220      	movs	r2, #32
 80133f0:	5c9b      	ldrb	r3, [r3, r2]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d109      	bne.n	801340a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	68da      	ldr	r2, [r3, #12]
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	2180      	movs	r1, #128	@ 0x80
 8013402:	0249      	lsls	r1, r1, #9
 8013404:	430a      	orrs	r2, r1
 8013406:	60da      	str	r2, [r3, #12]
 8013408:	e00b      	b.n	8013422 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801340e:	2220      	movs	r2, #32
 8013410:	431a      	orrs	r2, r3
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801341a:	2201      	movs	r2, #1
 801341c:	431a      	orrs	r2, r3
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013426:	2b01      	cmp	r3, #1
 8013428:	d11f      	bne.n	801346a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	691a      	ldr	r2, [r3, #16]
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	492a      	ldr	r1, [pc, #168]	@ (80134e0 <HAL_ADC_Init+0x2e4>)
 8013436:	400a      	ands	r2, r1
 8013438:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	6919      	ldr	r1, [r3, #16]
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8013448:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 801344e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	430a      	orrs	r2, r1
 8013456:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	691a      	ldr	r2, [r3, #16]
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	2101      	movs	r1, #1
 8013464:	430a      	orrs	r2, r1
 8013466:	611a      	str	r2, [r3, #16]
 8013468:	e00e      	b.n	8013488 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	691b      	ldr	r3, [r3, #16]
 8013470:	2201      	movs	r2, #1
 8013472:	4013      	ands	r3, r2
 8013474:	2b01      	cmp	r3, #1
 8013476:	d107      	bne.n	8013488 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	691a      	ldr	r2, [r3, #16]
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	2101      	movs	r1, #1
 8013484:	438a      	bics	r2, r1
 8013486:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	695a      	ldr	r2, [r3, #20]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	2107      	movs	r1, #7
 8013494:	438a      	bics	r2, r1
 8013496:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	6959      	ldr	r1, [r3, #20]
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	430a      	orrs	r2, r1
 80134a8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	2200      	movs	r2, #0
 80134ae:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80134b4:	2203      	movs	r2, #3
 80134b6:	4393      	bics	r3, r2
 80134b8:	2201      	movs	r2, #1
 80134ba:	431a      	orrs	r2, r3
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80134c0:	2300      	movs	r3, #0
}
 80134c2:	0018      	movs	r0, r3
 80134c4:	46bd      	mov	sp, r7
 80134c6:	b002      	add	sp, #8
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	46c0      	nop			@ (mov r8, r8)
 80134cc:	fffffefd 	.word	0xfffffefd
 80134d0:	40012708 	.word	0x40012708
 80134d4:	ffc3ffff 	.word	0xffc3ffff
 80134d8:	fdffffff 	.word	0xfdffffff
 80134dc:	fffe0219 	.word	0xfffe0219
 80134e0:	fffffc03 	.word	0xfffffc03

080134e4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80134e4:	b590      	push	{r4, r7, lr}
 80134e6:	b085      	sub	sp, #20
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80134ec:	230f      	movs	r3, #15
 80134ee:	18fb      	adds	r3, r7, r3
 80134f0:	2200      	movs	r2, #0
 80134f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	689b      	ldr	r3, [r3, #8]
 80134fa:	2204      	movs	r2, #4
 80134fc:	4013      	ands	r3, r2
 80134fe:	d138      	bne.n	8013572 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2250      	movs	r2, #80	@ 0x50
 8013504:	5c9b      	ldrb	r3, [r3, r2]
 8013506:	2b01      	cmp	r3, #1
 8013508:	d101      	bne.n	801350e <HAL_ADC_Start+0x2a>
 801350a:	2302      	movs	r3, #2
 801350c:	e038      	b.n	8013580 <HAL_ADC_Start+0x9c>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	2250      	movs	r2, #80	@ 0x50
 8013512:	2101      	movs	r1, #1
 8013514:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	69db      	ldr	r3, [r3, #28]
 801351a:	2b01      	cmp	r3, #1
 801351c:	d007      	beq.n	801352e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 801351e:	230f      	movs	r3, #15
 8013520:	18fc      	adds	r4, r7, r3
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	0018      	movs	r0, r3
 8013526:	f000 f95f 	bl	80137e8 <ADC_Enable>
 801352a:	0003      	movs	r3, r0
 801352c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 801352e:	230f      	movs	r3, #15
 8013530:	18fb      	adds	r3, r7, r3
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d120      	bne.n	801357a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801353c:	4a12      	ldr	r2, [pc, #72]	@ (8013588 <HAL_ADC_Start+0xa4>)
 801353e:	4013      	ands	r3, r2
 8013540:	2280      	movs	r2, #128	@ 0x80
 8013542:	0052      	lsls	r2, r2, #1
 8013544:	431a      	orrs	r2, r3
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	2200      	movs	r2, #0
 801354e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2250      	movs	r2, #80	@ 0x50
 8013554:	2100      	movs	r1, #0
 8013556:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	221c      	movs	r2, #28
 801355e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	689a      	ldr	r2, [r3, #8]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	2104      	movs	r1, #4
 801356c:	430a      	orrs	r2, r1
 801356e:	609a      	str	r2, [r3, #8]
 8013570:	e003      	b.n	801357a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8013572:	230f      	movs	r3, #15
 8013574:	18fb      	adds	r3, r7, r3
 8013576:	2202      	movs	r2, #2
 8013578:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 801357a:	230f      	movs	r3, #15
 801357c:	18fb      	adds	r3, r7, r3
 801357e:	781b      	ldrb	r3, [r3, #0]
}
 8013580:	0018      	movs	r0, r3
 8013582:	46bd      	mov	sp, r7
 8013584:	b005      	add	sp, #20
 8013586:	bd90      	pop	{r4, r7, pc}
 8013588:	fffff0fe 	.word	0xfffff0fe

0801358c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b084      	sub	sp, #16
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8013596:	2300      	movs	r3, #0
 8013598:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 801359a:	2300      	movs	r3, #0
 801359c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	695b      	ldr	r3, [r3, #20]
 80135a2:	2b08      	cmp	r3, #8
 80135a4:	d102      	bne.n	80135ac <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80135a6:	2308      	movs	r3, #8
 80135a8:	60fb      	str	r3, [r7, #12]
 80135aa:	e014      	b.n	80135d6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	68db      	ldr	r3, [r3, #12]
 80135b2:	2201      	movs	r2, #1
 80135b4:	4013      	ands	r3, r2
 80135b6:	2b01      	cmp	r3, #1
 80135b8:	d10b      	bne.n	80135d2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80135be:	2220      	movs	r2, #32
 80135c0:	431a      	orrs	r2, r3
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	2250      	movs	r2, #80	@ 0x50
 80135ca:	2100      	movs	r1, #0
 80135cc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80135ce:	2301      	movs	r3, #1
 80135d0:	e072      	b.n	80136b8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80135d2:	230c      	movs	r3, #12
 80135d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80135d6:	f7ff fda9 	bl	801312c <HAL_GetTick>
 80135da:	0003      	movs	r3, r0
 80135dc:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80135de:	e01f      	b.n	8013620 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	3301      	adds	r3, #1
 80135e4:	d01c      	beq.n	8013620 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d007      	beq.n	80135fc <HAL_ADC_PollForConversion+0x70>
 80135ec:	f7ff fd9e 	bl	801312c <HAL_GetTick>
 80135f0:	0002      	movs	r2, r0
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	1ad3      	subs	r3, r2, r3
 80135f6:	683a      	ldr	r2, [r7, #0]
 80135f8:	429a      	cmp	r2, r3
 80135fa:	d211      	bcs.n	8013620 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	68fa      	ldr	r2, [r7, #12]
 8013604:	4013      	ands	r3, r2
 8013606:	d10b      	bne.n	8013620 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801360c:	2204      	movs	r2, #4
 801360e:	431a      	orrs	r2, r3
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2250      	movs	r2, #80	@ 0x50
 8013618:	2100      	movs	r1, #0
 801361a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801361c:	2303      	movs	r3, #3
 801361e:	e04b      	b.n	80136b8 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	68fa      	ldr	r2, [r7, #12]
 8013628:	4013      	ands	r3, r2
 801362a:	d0d9      	beq.n	80135e0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013630:	2280      	movs	r2, #128	@ 0x80
 8013632:	0092      	lsls	r2, r2, #2
 8013634:	431a      	orrs	r2, r3
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	68da      	ldr	r2, [r3, #12]
 8013640:	23c0      	movs	r3, #192	@ 0xc0
 8013642:	011b      	lsls	r3, r3, #4
 8013644:	4013      	ands	r3, r2
 8013646:	d12e      	bne.n	80136a6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2220      	movs	r2, #32
 801364c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 801364e:	2b00      	cmp	r3, #0
 8013650:	d129      	bne.n	80136a6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	2208      	movs	r2, #8
 801365a:	4013      	ands	r3, r2
 801365c:	2b08      	cmp	r3, #8
 801365e:	d122      	bne.n	80136a6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	689b      	ldr	r3, [r3, #8]
 8013666:	2204      	movs	r2, #4
 8013668:	4013      	ands	r3, r2
 801366a:	d110      	bne.n	801368e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	685a      	ldr	r2, [r3, #4]
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	210c      	movs	r1, #12
 8013678:	438a      	bics	r2, r1
 801367a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013680:	4a0f      	ldr	r2, [pc, #60]	@ (80136c0 <HAL_ADC_PollForConversion+0x134>)
 8013682:	4013      	ands	r3, r2
 8013684:	2201      	movs	r2, #1
 8013686:	431a      	orrs	r2, r3
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	655a      	str	r2, [r3, #84]	@ 0x54
 801368c:	e00b      	b.n	80136a6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013692:	2220      	movs	r2, #32
 8013694:	431a      	orrs	r2, r3
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801369e:	2201      	movs	r2, #1
 80136a0:	431a      	orrs	r2, r3
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	699b      	ldr	r3, [r3, #24]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d103      	bne.n	80136b6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	220c      	movs	r2, #12
 80136b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80136b6:	2300      	movs	r3, #0
}
 80136b8:	0018      	movs	r0, r3
 80136ba:	46bd      	mov	sp, r7
 80136bc:	b004      	add	sp, #16
 80136be:	bd80      	pop	{r7, pc}
 80136c0:	fffffefe 	.word	0xfffffefe

080136c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b082      	sub	sp, #8
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80136d2:	0018      	movs	r0, r3
 80136d4:	46bd      	mov	sp, r7
 80136d6:	b002      	add	sp, #8
 80136d8:	bd80      	pop	{r7, pc}
	...

080136dc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b082      	sub	sp, #8
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
 80136e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	2250      	movs	r2, #80	@ 0x50
 80136ea:	5c9b      	ldrb	r3, [r3, r2]
 80136ec:	2b01      	cmp	r3, #1
 80136ee:	d101      	bne.n	80136f4 <HAL_ADC_ConfigChannel+0x18>
 80136f0:	2302      	movs	r3, #2
 80136f2:	e06c      	b.n	80137ce <HAL_ADC_ConfigChannel+0xf2>
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2250      	movs	r2, #80	@ 0x50
 80136f8:	2101      	movs	r1, #1
 80136fa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	689b      	ldr	r3, [r3, #8]
 8013702:	2204      	movs	r2, #4
 8013704:	4013      	ands	r3, r2
 8013706:	d00b      	beq.n	8013720 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801370c:	2220      	movs	r2, #32
 801370e:	431a      	orrs	r2, r3
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	2250      	movs	r2, #80	@ 0x50
 8013718:	2100      	movs	r1, #0
 801371a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 801371c:	2301      	movs	r3, #1
 801371e:	e056      	b.n	80137ce <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8013720:	683b      	ldr	r3, [r7, #0]
 8013722:	685b      	ldr	r3, [r3, #4]
 8013724:	4a2c      	ldr	r2, [pc, #176]	@ (80137d8 <HAL_ADC_ConfigChannel+0xfc>)
 8013726:	4293      	cmp	r3, r2
 8013728:	d028      	beq.n	801377c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	035b      	lsls	r3, r3, #13
 8013736:	0b5a      	lsrs	r2, r3, #13
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	430a      	orrs	r2, r1
 801373e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	681a      	ldr	r2, [r3, #0]
 8013744:	2380      	movs	r3, #128	@ 0x80
 8013746:	02db      	lsls	r3, r3, #11
 8013748:	4013      	ands	r3, r2
 801374a:	d009      	beq.n	8013760 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 801374c:	4b23      	ldr	r3, [pc, #140]	@ (80137dc <HAL_ADC_ConfigChannel+0x100>)
 801374e:	681a      	ldr	r2, [r3, #0]
 8013750:	4b22      	ldr	r3, [pc, #136]	@ (80137dc <HAL_ADC_ConfigChannel+0x100>)
 8013752:	2180      	movs	r1, #128	@ 0x80
 8013754:	0409      	lsls	r1, r1, #16
 8013756:	430a      	orrs	r2, r1
 8013758:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 801375a:	200a      	movs	r0, #10
 801375c:	f000 f8ac 	bl	80138b8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	681a      	ldr	r2, [r3, #0]
 8013764:	2380      	movs	r3, #128	@ 0x80
 8013766:	029b      	lsls	r3, r3, #10
 8013768:	4013      	ands	r3, r2
 801376a:	d02b      	beq.n	80137c4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 801376c:	4b1b      	ldr	r3, [pc, #108]	@ (80137dc <HAL_ADC_ConfigChannel+0x100>)
 801376e:	681a      	ldr	r2, [r3, #0]
 8013770:	4b1a      	ldr	r3, [pc, #104]	@ (80137dc <HAL_ADC_ConfigChannel+0x100>)
 8013772:	2180      	movs	r1, #128	@ 0x80
 8013774:	03c9      	lsls	r1, r1, #15
 8013776:	430a      	orrs	r2, r1
 8013778:	601a      	str	r2, [r3, #0]
 801377a:	e023      	b.n	80137c4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	035b      	lsls	r3, r3, #13
 8013788:	0b5b      	lsrs	r3, r3, #13
 801378a:	43d9      	mvns	r1, r3
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	400a      	ands	r2, r1
 8013792:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	681a      	ldr	r2, [r3, #0]
 8013798:	2380      	movs	r3, #128	@ 0x80
 801379a:	02db      	lsls	r3, r3, #11
 801379c:	4013      	ands	r3, r2
 801379e:	d005      	beq.n	80137ac <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80137a0:	4b0e      	ldr	r3, [pc, #56]	@ (80137dc <HAL_ADC_ConfigChannel+0x100>)
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	4b0d      	ldr	r3, [pc, #52]	@ (80137dc <HAL_ADC_ConfigChannel+0x100>)
 80137a6:	490e      	ldr	r1, [pc, #56]	@ (80137e0 <HAL_ADC_ConfigChannel+0x104>)
 80137a8:	400a      	ands	r2, r1
 80137aa:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80137ac:	683b      	ldr	r3, [r7, #0]
 80137ae:	681a      	ldr	r2, [r3, #0]
 80137b0:	2380      	movs	r3, #128	@ 0x80
 80137b2:	029b      	lsls	r3, r3, #10
 80137b4:	4013      	ands	r3, r2
 80137b6:	d005      	beq.n	80137c4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80137b8:	4b08      	ldr	r3, [pc, #32]	@ (80137dc <HAL_ADC_ConfigChannel+0x100>)
 80137ba:	681a      	ldr	r2, [r3, #0]
 80137bc:	4b07      	ldr	r3, [pc, #28]	@ (80137dc <HAL_ADC_ConfigChannel+0x100>)
 80137be:	4909      	ldr	r1, [pc, #36]	@ (80137e4 <HAL_ADC_ConfigChannel+0x108>)
 80137c0:	400a      	ands	r2, r1
 80137c2:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2250      	movs	r2, #80	@ 0x50
 80137c8:	2100      	movs	r1, #0
 80137ca:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80137cc:	2300      	movs	r3, #0
}
 80137ce:	0018      	movs	r0, r3
 80137d0:	46bd      	mov	sp, r7
 80137d2:	b002      	add	sp, #8
 80137d4:	bd80      	pop	{r7, pc}
 80137d6:	46c0      	nop			@ (mov r8, r8)
 80137d8:	00001001 	.word	0x00001001
 80137dc:	40012708 	.word	0x40012708
 80137e0:	ff7fffff 	.word	0xff7fffff
 80137e4:	ffbfffff 	.word	0xffbfffff

080137e8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b084      	sub	sp, #16
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80137f0:	2300      	movs	r3, #0
 80137f2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	689b      	ldr	r3, [r3, #8]
 80137fa:	2203      	movs	r2, #3
 80137fc:	4013      	ands	r3, r2
 80137fe:	2b01      	cmp	r3, #1
 8013800:	d108      	bne.n	8013814 <ADC_Enable+0x2c>
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	2201      	movs	r2, #1
 801380a:	4013      	ands	r3, r2
 801380c:	2b01      	cmp	r3, #1
 801380e:	d101      	bne.n	8013814 <ADC_Enable+0x2c>
 8013810:	2301      	movs	r3, #1
 8013812:	e000      	b.n	8013816 <ADC_Enable+0x2e>
 8013814:	2300      	movs	r3, #0
 8013816:	2b00      	cmp	r3, #0
 8013818:	d146      	bne.n	80138a8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	689b      	ldr	r3, [r3, #8]
 8013820:	4a24      	ldr	r2, [pc, #144]	@ (80138b4 <ADC_Enable+0xcc>)
 8013822:	4013      	ands	r3, r2
 8013824:	d00d      	beq.n	8013842 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801382a:	2210      	movs	r2, #16
 801382c:	431a      	orrs	r2, r3
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013836:	2201      	movs	r2, #1
 8013838:	431a      	orrs	r2, r3
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 801383e:	2301      	movs	r3, #1
 8013840:	e033      	b.n	80138aa <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	689a      	ldr	r2, [r3, #8]
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	2101      	movs	r1, #1
 801384e:	430a      	orrs	r2, r1
 8013850:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8013852:	2001      	movs	r0, #1
 8013854:	f000 f830 	bl	80138b8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8013858:	f7ff fc68 	bl	801312c <HAL_GetTick>
 801385c:	0003      	movs	r3, r0
 801385e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8013860:	e01b      	b.n	801389a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8013862:	f7ff fc63 	bl	801312c <HAL_GetTick>
 8013866:	0002      	movs	r2, r0
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	1ad3      	subs	r3, r2, r3
 801386c:	2b0a      	cmp	r3, #10
 801386e:	d914      	bls.n	801389a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	2201      	movs	r2, #1
 8013878:	4013      	ands	r3, r2
 801387a:	2b01      	cmp	r3, #1
 801387c:	d00d      	beq.n	801389a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013882:	2210      	movs	r2, #16
 8013884:	431a      	orrs	r2, r3
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801388e:	2201      	movs	r2, #1
 8013890:	431a      	orrs	r2, r3
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8013896:	2301      	movs	r3, #1
 8013898:	e007      	b.n	80138aa <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	2201      	movs	r2, #1
 80138a2:	4013      	ands	r3, r2
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d1dc      	bne.n	8013862 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80138a8:	2300      	movs	r3, #0
}
 80138aa:	0018      	movs	r0, r3
 80138ac:	46bd      	mov	sp, r7
 80138ae:	b004      	add	sp, #16
 80138b0:	bd80      	pop	{r7, pc}
 80138b2:	46c0      	nop			@ (mov r8, r8)
 80138b4:	80000017 	.word	0x80000017

080138b8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b084      	sub	sp, #16
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80138c0:	4b0b      	ldr	r3, [pc, #44]	@ (80138f0 <ADC_DelayMicroSecond+0x38>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	490b      	ldr	r1, [pc, #44]	@ (80138f4 <ADC_DelayMicroSecond+0x3c>)
 80138c6:	0018      	movs	r0, r3
 80138c8:	f7ec fc6c 	bl	80001a4 <__udivsi3>
 80138cc:	0003      	movs	r3, r0
 80138ce:	001a      	movs	r2, r3
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	4353      	muls	r3, r2
 80138d4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80138d6:	e002      	b.n	80138de <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	3b01      	subs	r3, #1
 80138dc:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d1f9      	bne.n	80138d8 <ADC_DelayMicroSecond+0x20>
  }
}
 80138e4:	46c0      	nop			@ (mov r8, r8)
 80138e6:	46c0      	nop			@ (mov r8, r8)
 80138e8:	46bd      	mov	sp, r7
 80138ea:	b004      	add	sp, #16
 80138ec:	bd80      	pop	{r7, pc}
 80138ee:	46c0      	nop			@ (mov r8, r8)
 80138f0:	200000e0 	.word	0x200000e0
 80138f4:	000f4240 	.word	0x000f4240

080138f8 <__NVIC_EnableIRQ>:
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	0002      	movs	r2, r0
 8013900:	1dfb      	adds	r3, r7, #7
 8013902:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8013904:	1dfb      	adds	r3, r7, #7
 8013906:	781b      	ldrb	r3, [r3, #0]
 8013908:	2b7f      	cmp	r3, #127	@ 0x7f
 801390a:	d809      	bhi.n	8013920 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801390c:	1dfb      	adds	r3, r7, #7
 801390e:	781b      	ldrb	r3, [r3, #0]
 8013910:	001a      	movs	r2, r3
 8013912:	231f      	movs	r3, #31
 8013914:	401a      	ands	r2, r3
 8013916:	4b04      	ldr	r3, [pc, #16]	@ (8013928 <__NVIC_EnableIRQ+0x30>)
 8013918:	2101      	movs	r1, #1
 801391a:	4091      	lsls	r1, r2
 801391c:	000a      	movs	r2, r1
 801391e:	601a      	str	r2, [r3, #0]
}
 8013920:	46c0      	nop			@ (mov r8, r8)
 8013922:	46bd      	mov	sp, r7
 8013924:	b002      	add	sp, #8
 8013926:	bd80      	pop	{r7, pc}
 8013928:	e000e100 	.word	0xe000e100

0801392c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801392c:	b590      	push	{r4, r7, lr}
 801392e:	b083      	sub	sp, #12
 8013930:	af00      	add	r7, sp, #0
 8013932:	0002      	movs	r2, r0
 8013934:	6039      	str	r1, [r7, #0]
 8013936:	1dfb      	adds	r3, r7, #7
 8013938:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801393a:	1dfb      	adds	r3, r7, #7
 801393c:	781b      	ldrb	r3, [r3, #0]
 801393e:	2b7f      	cmp	r3, #127	@ 0x7f
 8013940:	d828      	bhi.n	8013994 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013942:	4a2f      	ldr	r2, [pc, #188]	@ (8013a00 <__NVIC_SetPriority+0xd4>)
 8013944:	1dfb      	adds	r3, r7, #7
 8013946:	781b      	ldrb	r3, [r3, #0]
 8013948:	b25b      	sxtb	r3, r3
 801394a:	089b      	lsrs	r3, r3, #2
 801394c:	33c0      	adds	r3, #192	@ 0xc0
 801394e:	009b      	lsls	r3, r3, #2
 8013950:	589b      	ldr	r3, [r3, r2]
 8013952:	1dfa      	adds	r2, r7, #7
 8013954:	7812      	ldrb	r2, [r2, #0]
 8013956:	0011      	movs	r1, r2
 8013958:	2203      	movs	r2, #3
 801395a:	400a      	ands	r2, r1
 801395c:	00d2      	lsls	r2, r2, #3
 801395e:	21ff      	movs	r1, #255	@ 0xff
 8013960:	4091      	lsls	r1, r2
 8013962:	000a      	movs	r2, r1
 8013964:	43d2      	mvns	r2, r2
 8013966:	401a      	ands	r2, r3
 8013968:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801396a:	683b      	ldr	r3, [r7, #0]
 801396c:	019b      	lsls	r3, r3, #6
 801396e:	22ff      	movs	r2, #255	@ 0xff
 8013970:	401a      	ands	r2, r3
 8013972:	1dfb      	adds	r3, r7, #7
 8013974:	781b      	ldrb	r3, [r3, #0]
 8013976:	0018      	movs	r0, r3
 8013978:	2303      	movs	r3, #3
 801397a:	4003      	ands	r3, r0
 801397c:	00db      	lsls	r3, r3, #3
 801397e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013980:	481f      	ldr	r0, [pc, #124]	@ (8013a00 <__NVIC_SetPriority+0xd4>)
 8013982:	1dfb      	adds	r3, r7, #7
 8013984:	781b      	ldrb	r3, [r3, #0]
 8013986:	b25b      	sxtb	r3, r3
 8013988:	089b      	lsrs	r3, r3, #2
 801398a:	430a      	orrs	r2, r1
 801398c:	33c0      	adds	r3, #192	@ 0xc0
 801398e:	009b      	lsls	r3, r3, #2
 8013990:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8013992:	e031      	b.n	80139f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013994:	4a1b      	ldr	r2, [pc, #108]	@ (8013a04 <__NVIC_SetPriority+0xd8>)
 8013996:	1dfb      	adds	r3, r7, #7
 8013998:	781b      	ldrb	r3, [r3, #0]
 801399a:	0019      	movs	r1, r3
 801399c:	230f      	movs	r3, #15
 801399e:	400b      	ands	r3, r1
 80139a0:	3b08      	subs	r3, #8
 80139a2:	089b      	lsrs	r3, r3, #2
 80139a4:	3306      	adds	r3, #6
 80139a6:	009b      	lsls	r3, r3, #2
 80139a8:	18d3      	adds	r3, r2, r3
 80139aa:	3304      	adds	r3, #4
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	1dfa      	adds	r2, r7, #7
 80139b0:	7812      	ldrb	r2, [r2, #0]
 80139b2:	0011      	movs	r1, r2
 80139b4:	2203      	movs	r2, #3
 80139b6:	400a      	ands	r2, r1
 80139b8:	00d2      	lsls	r2, r2, #3
 80139ba:	21ff      	movs	r1, #255	@ 0xff
 80139bc:	4091      	lsls	r1, r2
 80139be:	000a      	movs	r2, r1
 80139c0:	43d2      	mvns	r2, r2
 80139c2:	401a      	ands	r2, r3
 80139c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	019b      	lsls	r3, r3, #6
 80139ca:	22ff      	movs	r2, #255	@ 0xff
 80139cc:	401a      	ands	r2, r3
 80139ce:	1dfb      	adds	r3, r7, #7
 80139d0:	781b      	ldrb	r3, [r3, #0]
 80139d2:	0018      	movs	r0, r3
 80139d4:	2303      	movs	r3, #3
 80139d6:	4003      	ands	r3, r0
 80139d8:	00db      	lsls	r3, r3, #3
 80139da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80139dc:	4809      	ldr	r0, [pc, #36]	@ (8013a04 <__NVIC_SetPriority+0xd8>)
 80139de:	1dfb      	adds	r3, r7, #7
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	001c      	movs	r4, r3
 80139e4:	230f      	movs	r3, #15
 80139e6:	4023      	ands	r3, r4
 80139e8:	3b08      	subs	r3, #8
 80139ea:	089b      	lsrs	r3, r3, #2
 80139ec:	430a      	orrs	r2, r1
 80139ee:	3306      	adds	r3, #6
 80139f0:	009b      	lsls	r3, r3, #2
 80139f2:	18c3      	adds	r3, r0, r3
 80139f4:	3304      	adds	r3, #4
 80139f6:	601a      	str	r2, [r3, #0]
}
 80139f8:	46c0      	nop			@ (mov r8, r8)
 80139fa:	46bd      	mov	sp, r7
 80139fc:	b003      	add	sp, #12
 80139fe:	bd90      	pop	{r4, r7, pc}
 8013a00:	e000e100 	.word	0xe000e100
 8013a04:	e000ed00 	.word	0xe000ed00

08013a08 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8013a0c:	f3bf 8f4f 	dsb	sy
}
 8013a10:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013a12:	4b04      	ldr	r3, [pc, #16]	@ (8013a24 <__NVIC_SystemReset+0x1c>)
 8013a14:	4a04      	ldr	r2, [pc, #16]	@ (8013a28 <__NVIC_SystemReset+0x20>)
 8013a16:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8013a18:	f3bf 8f4f 	dsb	sy
}
 8013a1c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8013a1e:	46c0      	nop			@ (mov r8, r8)
 8013a20:	e7fd      	b.n	8013a1e <__NVIC_SystemReset+0x16>
 8013a22:	46c0      	nop			@ (mov r8, r8)
 8013a24:	e000ed00 	.word	0xe000ed00
 8013a28:	05fa0004 	.word	0x05fa0004

08013a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b082      	sub	sp, #8
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	1e5a      	subs	r2, r3, #1
 8013a38:	2380      	movs	r3, #128	@ 0x80
 8013a3a:	045b      	lsls	r3, r3, #17
 8013a3c:	429a      	cmp	r2, r3
 8013a3e:	d301      	bcc.n	8013a44 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8013a40:	2301      	movs	r3, #1
 8013a42:	e010      	b.n	8013a66 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8013a44:	4b0a      	ldr	r3, [pc, #40]	@ (8013a70 <SysTick_Config+0x44>)
 8013a46:	687a      	ldr	r2, [r7, #4]
 8013a48:	3a01      	subs	r2, #1
 8013a4a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8013a4c:	2301      	movs	r3, #1
 8013a4e:	425b      	negs	r3, r3
 8013a50:	2103      	movs	r1, #3
 8013a52:	0018      	movs	r0, r3
 8013a54:	f7ff ff6a 	bl	801392c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8013a58:	4b05      	ldr	r3, [pc, #20]	@ (8013a70 <SysTick_Config+0x44>)
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8013a5e:	4b04      	ldr	r3, [pc, #16]	@ (8013a70 <SysTick_Config+0x44>)
 8013a60:	2207      	movs	r2, #7
 8013a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8013a64:	2300      	movs	r3, #0
}
 8013a66:	0018      	movs	r0, r3
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	b002      	add	sp, #8
 8013a6c:	bd80      	pop	{r7, pc}
 8013a6e:	46c0      	nop			@ (mov r8, r8)
 8013a70:	e000e010 	.word	0xe000e010

08013a74 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	60b9      	str	r1, [r7, #8]
 8013a7c:	607a      	str	r2, [r7, #4]
 8013a7e:	210f      	movs	r1, #15
 8013a80:	187b      	adds	r3, r7, r1
 8013a82:	1c02      	adds	r2, r0, #0
 8013a84:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8013a86:	68ba      	ldr	r2, [r7, #8]
 8013a88:	187b      	adds	r3, r7, r1
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	b25b      	sxtb	r3, r3
 8013a8e:	0011      	movs	r1, r2
 8013a90:	0018      	movs	r0, r3
 8013a92:	f7ff ff4b 	bl	801392c <__NVIC_SetPriority>
}
 8013a96:	46c0      	nop			@ (mov r8, r8)
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	b004      	add	sp, #16
 8013a9c:	bd80      	pop	{r7, pc}

08013a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b082      	sub	sp, #8
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	0002      	movs	r2, r0
 8013aa6:	1dfb      	adds	r3, r7, #7
 8013aa8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8013aaa:	1dfb      	adds	r3, r7, #7
 8013aac:	781b      	ldrb	r3, [r3, #0]
 8013aae:	b25b      	sxtb	r3, r3
 8013ab0:	0018      	movs	r0, r3
 8013ab2:	f7ff ff21 	bl	80138f8 <__NVIC_EnableIRQ>
}
 8013ab6:	46c0      	nop			@ (mov r8, r8)
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	b002      	add	sp, #8
 8013abc:	bd80      	pop	{r7, pc}

08013abe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8013abe:	b580      	push	{r7, lr}
 8013ac0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8013ac2:	f7ff ffa1 	bl	8013a08 <__NVIC_SystemReset>

08013ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8013ac6:	b580      	push	{r7, lr}
 8013ac8:	b082      	sub	sp, #8
 8013aca:	af00      	add	r7, sp, #0
 8013acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	0018      	movs	r0, r3
 8013ad2:	f7ff ffab 	bl	8013a2c <SysTick_Config>
 8013ad6:	0003      	movs	r3, r0
}
 8013ad8:	0018      	movs	r0, r3
 8013ada:	46bd      	mov	sp, r7
 8013adc:	b002      	add	sp, #8
 8013ade:	bd80      	pop	{r7, pc}

08013ae0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b084      	sub	sp, #16
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d101      	bne.n	8013af2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8013aee:	2301      	movs	r3, #1
 8013af0:	e061      	b.n	8013bb6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	4a32      	ldr	r2, [pc, #200]	@ (8013bc0 <HAL_DMA_Init+0xe0>)
 8013af8:	4694      	mov	ip, r2
 8013afa:	4463      	add	r3, ip
 8013afc:	2114      	movs	r1, #20
 8013afe:	0018      	movs	r0, r3
 8013b00:	f7ec fb50 	bl	80001a4 <__udivsi3>
 8013b04:	0003      	movs	r3, r0
 8013b06:	009a      	lsls	r2, r3, #2
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8013bc4 <HAL_DMA_Init+0xe4>)
 8013b10:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	2225      	movs	r2, #37	@ 0x25
 8013b16:	2102      	movs	r1, #2
 8013b18:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	4a28      	ldr	r2, [pc, #160]	@ (8013bc8 <HAL_DMA_Init+0xe8>)
 8013b26:	4013      	ands	r3, r2
 8013b28:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8013b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	691b      	ldr	r3, [r3, #16]
 8013b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	699b      	ldr	r3, [r3, #24]
 8013b44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013b4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	6a1b      	ldr	r3, [r3, #32]
 8013b50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8013b52:	68fa      	ldr	r2, [r7, #12]
 8013b54:	4313      	orrs	r3, r2
 8013b56:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	68fa      	ldr	r2, [r7, #12]
 8013b5e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	689a      	ldr	r2, [r3, #8]
 8013b64:	2380      	movs	r3, #128	@ 0x80
 8013b66:	01db      	lsls	r3, r3, #7
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	d018      	beq.n	8013b9e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8013b6c:	4b17      	ldr	r3, [pc, #92]	@ (8013bcc <HAL_DMA_Init+0xec>)
 8013b6e:	681a      	ldr	r2, [r3, #0]
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b74:	211c      	movs	r1, #28
 8013b76:	400b      	ands	r3, r1
 8013b78:	210f      	movs	r1, #15
 8013b7a:	4099      	lsls	r1, r3
 8013b7c:	000b      	movs	r3, r1
 8013b7e:	43d9      	mvns	r1, r3
 8013b80:	4b12      	ldr	r3, [pc, #72]	@ (8013bcc <HAL_DMA_Init+0xec>)
 8013b82:	400a      	ands	r2, r1
 8013b84:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8013b86:	4b11      	ldr	r3, [pc, #68]	@ (8013bcc <HAL_DMA_Init+0xec>)
 8013b88:	6819      	ldr	r1, [r3, #0]
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	685a      	ldr	r2, [r3, #4]
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b92:	201c      	movs	r0, #28
 8013b94:	4003      	ands	r3, r0
 8013b96:	409a      	lsls	r2, r3
 8013b98:	4b0c      	ldr	r3, [pc, #48]	@ (8013bcc <HAL_DMA_Init+0xec>)
 8013b9a:	430a      	orrs	r2, r1
 8013b9c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2225      	movs	r2, #37	@ 0x25
 8013ba8:	2101      	movs	r1, #1
 8013baa:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2224      	movs	r2, #36	@ 0x24
 8013bb0:	2100      	movs	r1, #0
 8013bb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013bb4:	2300      	movs	r3, #0
}
 8013bb6:	0018      	movs	r0, r3
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	b004      	add	sp, #16
 8013bbc:	bd80      	pop	{r7, pc}
 8013bbe:	46c0      	nop			@ (mov r8, r8)
 8013bc0:	bffdfff8 	.word	0xbffdfff8
 8013bc4:	40020000 	.word	0x40020000
 8013bc8:	ffff800f 	.word	0xffff800f
 8013bcc:	400200a8 	.word	0x400200a8

08013bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b086      	sub	sp, #24
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	60f8      	str	r0, [r7, #12]
 8013bd8:	60b9      	str	r1, [r7, #8]
 8013bda:	607a      	str	r2, [r7, #4]
 8013bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013bde:	2317      	movs	r3, #23
 8013be0:	18fb      	adds	r3, r7, r3
 8013be2:	2200      	movs	r2, #0
 8013be4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	2224      	movs	r2, #36	@ 0x24
 8013bea:	5c9b      	ldrb	r3, [r3, r2]
 8013bec:	2b01      	cmp	r3, #1
 8013bee:	d101      	bne.n	8013bf4 <HAL_DMA_Start_IT+0x24>
 8013bf0:	2302      	movs	r3, #2
 8013bf2:	e04f      	b.n	8013c94 <HAL_DMA_Start_IT+0xc4>
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	2224      	movs	r2, #36	@ 0x24
 8013bf8:	2101      	movs	r1, #1
 8013bfa:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	2225      	movs	r2, #37	@ 0x25
 8013c00:	5c9b      	ldrb	r3, [r3, r2]
 8013c02:	b2db      	uxtb	r3, r3
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	d13a      	bne.n	8013c7e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	2225      	movs	r2, #37	@ 0x25
 8013c0c:	2102      	movs	r1, #2
 8013c0e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	2200      	movs	r2, #0
 8013c14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	681a      	ldr	r2, [r3, #0]
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	2101      	movs	r1, #1
 8013c22:	438a      	bics	r2, r1
 8013c24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	687a      	ldr	r2, [r7, #4]
 8013c2a:	68b9      	ldr	r1, [r7, #8]
 8013c2c:	68f8      	ldr	r0, [r7, #12]
 8013c2e:	f000 f976 	bl	8013f1e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d008      	beq.n	8013c4c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	681a      	ldr	r2, [r3, #0]
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	210e      	movs	r1, #14
 8013c46:	430a      	orrs	r2, r1
 8013c48:	601a      	str	r2, [r3, #0]
 8013c4a:	e00f      	b.n	8013c6c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	681a      	ldr	r2, [r3, #0]
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	2104      	movs	r1, #4
 8013c58:	438a      	bics	r2, r1
 8013c5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	681a      	ldr	r2, [r3, #0]
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	210a      	movs	r1, #10
 8013c68:	430a      	orrs	r2, r1
 8013c6a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	681a      	ldr	r2, [r3, #0]
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	2101      	movs	r1, #1
 8013c78:	430a      	orrs	r2, r1
 8013c7a:	601a      	str	r2, [r3, #0]
 8013c7c:	e007      	b.n	8013c8e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	2224      	movs	r2, #36	@ 0x24
 8013c82:	2100      	movs	r1, #0
 8013c84:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8013c86:	2317      	movs	r3, #23
 8013c88:	18fb      	adds	r3, r7, r3
 8013c8a:	2202      	movs	r2, #2
 8013c8c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8013c8e:	2317      	movs	r3, #23
 8013c90:	18fb      	adds	r3, r7, r3
 8013c92:	781b      	ldrb	r3, [r3, #0]
}
 8013c94:	0018      	movs	r0, r3
 8013c96:	46bd      	mov	sp, r7
 8013c98:	b006      	add	sp, #24
 8013c9a:	bd80      	pop	{r7, pc}

08013c9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b084      	sub	sp, #16
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013ca4:	230f      	movs	r3, #15
 8013ca6:	18fb      	adds	r3, r7, r3
 8013ca8:	2200      	movs	r2, #0
 8013caa:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2225      	movs	r2, #37	@ 0x25
 8013cb0:	5c9b      	ldrb	r3, [r3, r2]
 8013cb2:	b2db      	uxtb	r3, r3
 8013cb4:	2b02      	cmp	r3, #2
 8013cb6:	d008      	beq.n	8013cca <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2204      	movs	r2, #4
 8013cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2224      	movs	r2, #36	@ 0x24
 8013cc2:	2100      	movs	r1, #0
 8013cc4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	e024      	b.n	8013d14 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	681a      	ldr	r2, [r3, #0]
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	210e      	movs	r1, #14
 8013cd6:	438a      	bics	r2, r1
 8013cd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	681a      	ldr	r2, [r3, #0]
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	2101      	movs	r1, #1
 8013ce6:	438a      	bics	r2, r1
 8013ce8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cee:	221c      	movs	r2, #28
 8013cf0:	401a      	ands	r2, r3
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013cf6:	2101      	movs	r1, #1
 8013cf8:	4091      	lsls	r1, r2
 8013cfa:	000a      	movs	r2, r1
 8013cfc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2225      	movs	r2, #37	@ 0x25
 8013d02:	2101      	movs	r1, #1
 8013d04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2224      	movs	r2, #36	@ 0x24
 8013d0a:	2100      	movs	r1, #0
 8013d0c:	5499      	strb	r1, [r3, r2]

    return status;
 8013d0e:	230f      	movs	r3, #15
 8013d10:	18fb      	adds	r3, r7, r3
 8013d12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013d14:	0018      	movs	r0, r3
 8013d16:	46bd      	mov	sp, r7
 8013d18:	b004      	add	sp, #16
 8013d1a:	bd80      	pop	{r7, pc}

08013d1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b084      	sub	sp, #16
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013d24:	210f      	movs	r1, #15
 8013d26:	187b      	adds	r3, r7, r1
 8013d28:	2200      	movs	r2, #0
 8013d2a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2225      	movs	r2, #37	@ 0x25
 8013d30:	5c9b      	ldrb	r3, [r3, r2]
 8013d32:	b2db      	uxtb	r3, r3
 8013d34:	2b02      	cmp	r3, #2
 8013d36:	d006      	beq.n	8013d46 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2204      	movs	r2, #4
 8013d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8013d3e:	187b      	adds	r3, r7, r1
 8013d40:	2201      	movs	r2, #1
 8013d42:	701a      	strb	r2, [r3, #0]
 8013d44:	e02a      	b.n	8013d9c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	681a      	ldr	r2, [r3, #0]
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	210e      	movs	r1, #14
 8013d52:	438a      	bics	r2, r1
 8013d54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	681a      	ldr	r2, [r3, #0]
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	2101      	movs	r1, #1
 8013d62:	438a      	bics	r2, r1
 8013d64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d6a:	221c      	movs	r2, #28
 8013d6c:	401a      	ands	r2, r3
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d72:	2101      	movs	r1, #1
 8013d74:	4091      	lsls	r1, r2
 8013d76:	000a      	movs	r2, r1
 8013d78:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	2225      	movs	r2, #37	@ 0x25
 8013d7e:	2101      	movs	r1, #1
 8013d80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	2224      	movs	r2, #36	@ 0x24
 8013d86:	2100      	movs	r1, #0
 8013d88:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d004      	beq.n	8013d9c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d96:	687a      	ldr	r2, [r7, #4]
 8013d98:	0010      	movs	r0, r2
 8013d9a:	4798      	blx	r3
    }
  }
  return status;
 8013d9c:	230f      	movs	r3, #15
 8013d9e:	18fb      	adds	r3, r7, r3
 8013da0:	781b      	ldrb	r3, [r3, #0]
}
 8013da2:	0018      	movs	r0, r3
 8013da4:	46bd      	mov	sp, r7
 8013da6:	b004      	add	sp, #16
 8013da8:	bd80      	pop	{r7, pc}

08013daa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8013daa:	b580      	push	{r7, lr}
 8013dac:	b084      	sub	sp, #16
 8013dae:	af00      	add	r7, sp, #0
 8013db0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013dc6:	221c      	movs	r2, #28
 8013dc8:	4013      	ands	r3, r2
 8013dca:	2204      	movs	r2, #4
 8013dcc:	409a      	lsls	r2, r3
 8013dce:	0013      	movs	r3, r2
 8013dd0:	68fa      	ldr	r2, [r7, #12]
 8013dd2:	4013      	ands	r3, r2
 8013dd4:	d026      	beq.n	8013e24 <HAL_DMA_IRQHandler+0x7a>
 8013dd6:	68bb      	ldr	r3, [r7, #8]
 8013dd8:	2204      	movs	r2, #4
 8013dda:	4013      	ands	r3, r2
 8013ddc:	d022      	beq.n	8013e24 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	2220      	movs	r2, #32
 8013de6:	4013      	ands	r3, r2
 8013de8:	d107      	bne.n	8013dfa <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	681a      	ldr	r2, [r3, #0]
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	2104      	movs	r1, #4
 8013df6:	438a      	bics	r2, r1
 8013df8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013dfe:	221c      	movs	r2, #28
 8013e00:	401a      	ands	r2, r3
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e06:	2104      	movs	r1, #4
 8013e08:	4091      	lsls	r1, r2
 8013e0a:	000a      	movs	r2, r1
 8013e0c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d100      	bne.n	8013e18 <HAL_DMA_IRQHandler+0x6e>
 8013e16:	e071      	b.n	8013efc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e1c:	687a      	ldr	r2, [r7, #4]
 8013e1e:	0010      	movs	r0, r2
 8013e20:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8013e22:	e06b      	b.n	8013efc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e28:	221c      	movs	r2, #28
 8013e2a:	4013      	ands	r3, r2
 8013e2c:	2202      	movs	r2, #2
 8013e2e:	409a      	lsls	r2, r3
 8013e30:	0013      	movs	r3, r2
 8013e32:	68fa      	ldr	r2, [r7, #12]
 8013e34:	4013      	ands	r3, r2
 8013e36:	d02d      	beq.n	8013e94 <HAL_DMA_IRQHandler+0xea>
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	2202      	movs	r2, #2
 8013e3c:	4013      	ands	r3, r2
 8013e3e:	d029      	beq.n	8013e94 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	2220      	movs	r2, #32
 8013e48:	4013      	ands	r3, r2
 8013e4a:	d10b      	bne.n	8013e64 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	681a      	ldr	r2, [r3, #0]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	210a      	movs	r1, #10
 8013e58:	438a      	bics	r2, r1
 8013e5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2225      	movs	r2, #37	@ 0x25
 8013e60:	2101      	movs	r1, #1
 8013e62:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e68:	221c      	movs	r2, #28
 8013e6a:	401a      	ands	r2, r3
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e70:	2102      	movs	r1, #2
 8013e72:	4091      	lsls	r1, r2
 8013e74:	000a      	movs	r2, r1
 8013e76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2224      	movs	r2, #36	@ 0x24
 8013e7c:	2100      	movs	r1, #0
 8013e7e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d039      	beq.n	8013efc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e8c:	687a      	ldr	r2, [r7, #4]
 8013e8e:	0010      	movs	r0, r2
 8013e90:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8013e92:	e033      	b.n	8013efc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e98:	221c      	movs	r2, #28
 8013e9a:	4013      	ands	r3, r2
 8013e9c:	2208      	movs	r2, #8
 8013e9e:	409a      	lsls	r2, r3
 8013ea0:	0013      	movs	r3, r2
 8013ea2:	68fa      	ldr	r2, [r7, #12]
 8013ea4:	4013      	ands	r3, r2
 8013ea6:	d02a      	beq.n	8013efe <HAL_DMA_IRQHandler+0x154>
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	2208      	movs	r2, #8
 8013eac:	4013      	ands	r3, r2
 8013eae:	d026      	beq.n	8013efe <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	681a      	ldr	r2, [r3, #0]
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	210e      	movs	r1, #14
 8013ebc:	438a      	bics	r2, r1
 8013ebe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ec4:	221c      	movs	r2, #28
 8013ec6:	401a      	ands	r2, r3
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ecc:	2101      	movs	r1, #1
 8013ece:	4091      	lsls	r1, r2
 8013ed0:	000a      	movs	r2, r1
 8013ed2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	2225      	movs	r2, #37	@ 0x25
 8013ede:	2101      	movs	r1, #1
 8013ee0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	2224      	movs	r2, #36	@ 0x24
 8013ee6:	2100      	movs	r1, #0
 8013ee8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d005      	beq.n	8013efe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ef6:	687a      	ldr	r2, [r7, #4]
 8013ef8:	0010      	movs	r0, r2
 8013efa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8013efc:	46c0      	nop			@ (mov r8, r8)
 8013efe:	46c0      	nop			@ (mov r8, r8)
}
 8013f00:	46bd      	mov	sp, r7
 8013f02:	b004      	add	sp, #16
 8013f04:	bd80      	pop	{r7, pc}

08013f06 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8013f06:	b580      	push	{r7, lr}
 8013f08:	b082      	sub	sp, #8
 8013f0a:	af00      	add	r7, sp, #0
 8013f0c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	2225      	movs	r2, #37	@ 0x25
 8013f12:	5c9b      	ldrb	r3, [r3, r2]
 8013f14:	b2db      	uxtb	r3, r3
}
 8013f16:	0018      	movs	r0, r3
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	b002      	add	sp, #8
 8013f1c:	bd80      	pop	{r7, pc}

08013f1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8013f1e:	b580      	push	{r7, lr}
 8013f20:	b084      	sub	sp, #16
 8013f22:	af00      	add	r7, sp, #0
 8013f24:	60f8      	str	r0, [r7, #12]
 8013f26:	60b9      	str	r1, [r7, #8]
 8013f28:	607a      	str	r2, [r7, #4]
 8013f2a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f30:	221c      	movs	r2, #28
 8013f32:	401a      	ands	r2, r3
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f38:	2101      	movs	r1, #1
 8013f3a:	4091      	lsls	r1, r2
 8013f3c:	000a      	movs	r2, r1
 8013f3e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	683a      	ldr	r2, [r7, #0]
 8013f46:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	689b      	ldr	r3, [r3, #8]
 8013f4c:	2b10      	cmp	r3, #16
 8013f4e:	d108      	bne.n	8013f62 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	687a      	ldr	r2, [r7, #4]
 8013f56:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	68ba      	ldr	r2, [r7, #8]
 8013f5e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8013f60:	e007      	b.n	8013f72 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	68ba      	ldr	r2, [r7, #8]
 8013f68:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	687a      	ldr	r2, [r7, #4]
 8013f70:	60da      	str	r2, [r3, #12]
}
 8013f72:	46c0      	nop			@ (mov r8, r8)
 8013f74:	46bd      	mov	sp, r7
 8013f76:	b004      	add	sp, #16
 8013f78:	bd80      	pop	{r7, pc}
	...

08013f7c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8013f84:	f7ff f8d2 	bl	801312c <HAL_GetTick>
 8013f88:	0003      	movs	r3, r0
 8013f8a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8013f8c:	e00f      	b.n	8013fae <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	3301      	adds	r3, #1
 8013f92:	d00c      	beq.n	8013fae <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d007      	beq.n	8013faa <FLASH_WaitForLastOperation+0x2e>
 8013f9a:	f7ff f8c7 	bl	801312c <HAL_GetTick>
 8013f9e:	0002      	movs	r2, r0
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	1ad3      	subs	r3, r2, r3
 8013fa4:	687a      	ldr	r2, [r7, #4]
 8013fa6:	429a      	cmp	r2, r3
 8013fa8:	d201      	bcs.n	8013fae <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8013faa:	2303      	movs	r3, #3
 8013fac:	e052      	b.n	8014054 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8013fae:	4b2b      	ldr	r3, [pc, #172]	@ (801405c <FLASH_WaitForLastOperation+0xe0>)
 8013fb0:	699b      	ldr	r3, [r3, #24]
 8013fb2:	2201      	movs	r2, #1
 8013fb4:	4013      	ands	r3, r2
 8013fb6:	2b01      	cmp	r3, #1
 8013fb8:	d0e9      	beq.n	8013f8e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8013fba:	4b28      	ldr	r3, [pc, #160]	@ (801405c <FLASH_WaitForLastOperation+0xe0>)
 8013fbc:	699b      	ldr	r3, [r3, #24]
 8013fbe:	2202      	movs	r2, #2
 8013fc0:	4013      	ands	r3, r2
 8013fc2:	2b02      	cmp	r3, #2
 8013fc4:	d102      	bne.n	8013fcc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8013fc6:	4b25      	ldr	r3, [pc, #148]	@ (801405c <FLASH_WaitForLastOperation+0xe0>)
 8013fc8:	2202      	movs	r2, #2
 8013fca:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8013fcc:	4b23      	ldr	r3, [pc, #140]	@ (801405c <FLASH_WaitForLastOperation+0xe0>)
 8013fce:	699a      	ldr	r2, [r3, #24]
 8013fd0:	2380      	movs	r3, #128	@ 0x80
 8013fd2:	005b      	lsls	r3, r3, #1
 8013fd4:	401a      	ands	r2, r3
 8013fd6:	2380      	movs	r3, #128	@ 0x80
 8013fd8:	005b      	lsls	r3, r3, #1
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d035      	beq.n	801404a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8013fde:	4b1f      	ldr	r3, [pc, #124]	@ (801405c <FLASH_WaitForLastOperation+0xe0>)
 8013fe0:	699a      	ldr	r2, [r3, #24]
 8013fe2:	2380      	movs	r3, #128	@ 0x80
 8013fe4:	009b      	lsls	r3, r3, #2
 8013fe6:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8013fe8:	2380      	movs	r3, #128	@ 0x80
 8013fea:	009b      	lsls	r3, r3, #2
 8013fec:	429a      	cmp	r2, r3
 8013fee:	d02c      	beq.n	801404a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8013ff0:	4b1a      	ldr	r3, [pc, #104]	@ (801405c <FLASH_WaitForLastOperation+0xe0>)
 8013ff2:	699a      	ldr	r2, [r3, #24]
 8013ff4:	2380      	movs	r3, #128	@ 0x80
 8013ff6:	00db      	lsls	r3, r3, #3
 8013ff8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8013ffa:	2380      	movs	r3, #128	@ 0x80
 8013ffc:	00db      	lsls	r3, r3, #3
 8013ffe:	429a      	cmp	r2, r3
 8014000:	d023      	beq.n	801404a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8014002:	4b16      	ldr	r3, [pc, #88]	@ (801405c <FLASH_WaitForLastOperation+0xe0>)
 8014004:	699a      	ldr	r2, [r3, #24]
 8014006:	2380      	movs	r3, #128	@ 0x80
 8014008:	011b      	lsls	r3, r3, #4
 801400a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 801400c:	2380      	movs	r3, #128	@ 0x80
 801400e:	011b      	lsls	r3, r3, #4
 8014010:	429a      	cmp	r2, r3
 8014012:	d01a      	beq.n	801404a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8014014:	4b11      	ldr	r3, [pc, #68]	@ (801405c <FLASH_WaitForLastOperation+0xe0>)
 8014016:	699a      	ldr	r2, [r3, #24]
 8014018:	2380      	movs	r3, #128	@ 0x80
 801401a:	019b      	lsls	r3, r3, #6
 801401c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801401e:	2380      	movs	r3, #128	@ 0x80
 8014020:	019b      	lsls	r3, r3, #6
 8014022:	429a      	cmp	r2, r3
 8014024:	d011      	beq.n	801404a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8014026:	4b0d      	ldr	r3, [pc, #52]	@ (801405c <FLASH_WaitForLastOperation+0xe0>)
 8014028:	699a      	ldr	r2, [r3, #24]
 801402a:	2380      	movs	r3, #128	@ 0x80
 801402c:	029b      	lsls	r3, r3, #10
 801402e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8014030:	2380      	movs	r3, #128	@ 0x80
 8014032:	029b      	lsls	r3, r3, #10
 8014034:	429a      	cmp	r2, r3
 8014036:	d008      	beq.n	801404a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8014038:	4b08      	ldr	r3, [pc, #32]	@ (801405c <FLASH_WaitForLastOperation+0xe0>)
 801403a:	699a      	ldr	r2, [r3, #24]
 801403c:	2380      	movs	r3, #128	@ 0x80
 801403e:	025b      	lsls	r3, r3, #9
 8014040:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8014042:	2380      	movs	r3, #128	@ 0x80
 8014044:	025b      	lsls	r3, r3, #9
 8014046:	429a      	cmp	r2, r3
 8014048:	d103      	bne.n	8014052 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 801404a:	f000 f809 	bl	8014060 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801404e:	2301      	movs	r3, #1
 8014050:	e000      	b.n	8014054 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8014052:	2300      	movs	r3, #0
}
 8014054:	0018      	movs	r0, r3
 8014056:	46bd      	mov	sp, r7
 8014058:	b004      	add	sp, #16
 801405a:	bd80      	pop	{r7, pc}
 801405c:	40022000 	.word	0x40022000

08014060 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b082      	sub	sp, #8
 8014064:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8014066:	2300      	movs	r3, #0
 8014068:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 801406a:	4b49      	ldr	r3, [pc, #292]	@ (8014190 <FLASH_SetErrorCode+0x130>)
 801406c:	699a      	ldr	r2, [r3, #24]
 801406e:	2380      	movs	r3, #128	@ 0x80
 8014070:	005b      	lsls	r3, r3, #1
 8014072:	401a      	ands	r2, r3
 8014074:	2380      	movs	r3, #128	@ 0x80
 8014076:	005b      	lsls	r3, r3, #1
 8014078:	429a      	cmp	r2, r3
 801407a:	d10a      	bne.n	8014092 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801407c:	4b45      	ldr	r3, [pc, #276]	@ (8014194 <FLASH_SetErrorCode+0x134>)
 801407e:	695b      	ldr	r3, [r3, #20]
 8014080:	2202      	movs	r2, #2
 8014082:	431a      	orrs	r2, r3
 8014084:	4b43      	ldr	r3, [pc, #268]	@ (8014194 <FLASH_SetErrorCode+0x134>)
 8014086:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	2280      	movs	r2, #128	@ 0x80
 801408c:	0052      	lsls	r2, r2, #1
 801408e:	4313      	orrs	r3, r2
 8014090:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8014092:	4b3f      	ldr	r3, [pc, #252]	@ (8014190 <FLASH_SetErrorCode+0x130>)
 8014094:	699a      	ldr	r2, [r3, #24]
 8014096:	2380      	movs	r3, #128	@ 0x80
 8014098:	009b      	lsls	r3, r3, #2
 801409a:	401a      	ands	r2, r3
 801409c:	2380      	movs	r3, #128	@ 0x80
 801409e:	009b      	lsls	r3, r3, #2
 80140a0:	429a      	cmp	r2, r3
 80140a2:	d10a      	bne.n	80140ba <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80140a4:	4b3b      	ldr	r3, [pc, #236]	@ (8014194 <FLASH_SetErrorCode+0x134>)
 80140a6:	695b      	ldr	r3, [r3, #20]
 80140a8:	2201      	movs	r2, #1
 80140aa:	431a      	orrs	r2, r3
 80140ac:	4b39      	ldr	r3, [pc, #228]	@ (8014194 <FLASH_SetErrorCode+0x134>)
 80140ae:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2280      	movs	r2, #128	@ 0x80
 80140b4:	0092      	lsls	r2, r2, #2
 80140b6:	4313      	orrs	r3, r2
 80140b8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80140ba:	4b35      	ldr	r3, [pc, #212]	@ (8014190 <FLASH_SetErrorCode+0x130>)
 80140bc:	699a      	ldr	r2, [r3, #24]
 80140be:	2380      	movs	r3, #128	@ 0x80
 80140c0:	00db      	lsls	r3, r3, #3
 80140c2:	401a      	ands	r2, r3
 80140c4:	2380      	movs	r3, #128	@ 0x80
 80140c6:	00db      	lsls	r3, r3, #3
 80140c8:	429a      	cmp	r2, r3
 80140ca:	d10a      	bne.n	80140e2 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80140cc:	4b31      	ldr	r3, [pc, #196]	@ (8014194 <FLASH_SetErrorCode+0x134>)
 80140ce:	695b      	ldr	r3, [r3, #20]
 80140d0:	2208      	movs	r2, #8
 80140d2:	431a      	orrs	r2, r3
 80140d4:	4b2f      	ldr	r3, [pc, #188]	@ (8014194 <FLASH_SetErrorCode+0x134>)
 80140d6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2280      	movs	r2, #128	@ 0x80
 80140dc:	00d2      	lsls	r2, r2, #3
 80140de:	4313      	orrs	r3, r2
 80140e0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80140e2:	4b2b      	ldr	r3, [pc, #172]	@ (8014190 <FLASH_SetErrorCode+0x130>)
 80140e4:	699a      	ldr	r2, [r3, #24]
 80140e6:	2380      	movs	r3, #128	@ 0x80
 80140e8:	011b      	lsls	r3, r3, #4
 80140ea:	401a      	ands	r2, r3
 80140ec:	2380      	movs	r3, #128	@ 0x80
 80140ee:	011b      	lsls	r3, r3, #4
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d10a      	bne.n	801410a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80140f4:	4b27      	ldr	r3, [pc, #156]	@ (8014194 <FLASH_SetErrorCode+0x134>)
 80140f6:	695b      	ldr	r3, [r3, #20]
 80140f8:	2204      	movs	r2, #4
 80140fa:	431a      	orrs	r2, r3
 80140fc:	4b25      	ldr	r3, [pc, #148]	@ (8014194 <FLASH_SetErrorCode+0x134>)
 80140fe:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2280      	movs	r2, #128	@ 0x80
 8014104:	0112      	lsls	r2, r2, #4
 8014106:	4313      	orrs	r3, r2
 8014108:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 801410a:	4b21      	ldr	r3, [pc, #132]	@ (8014190 <FLASH_SetErrorCode+0x130>)
 801410c:	699a      	ldr	r2, [r3, #24]
 801410e:	2380      	movs	r3, #128	@ 0x80
 8014110:	019b      	lsls	r3, r3, #6
 8014112:	401a      	ands	r2, r3
 8014114:	2380      	movs	r3, #128	@ 0x80
 8014116:	019b      	lsls	r3, r3, #6
 8014118:	429a      	cmp	r2, r3
 801411a:	d10a      	bne.n	8014132 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 801411c:	4b1d      	ldr	r3, [pc, #116]	@ (8014194 <FLASH_SetErrorCode+0x134>)
 801411e:	695b      	ldr	r3, [r3, #20]
 8014120:	2210      	movs	r2, #16
 8014122:	431a      	orrs	r2, r3
 8014124:	4b1b      	ldr	r3, [pc, #108]	@ (8014194 <FLASH_SetErrorCode+0x134>)
 8014126:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	2280      	movs	r2, #128	@ 0x80
 801412c:	0192      	lsls	r2, r2, #6
 801412e:	4313      	orrs	r3, r2
 8014130:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8014132:	4b17      	ldr	r3, [pc, #92]	@ (8014190 <FLASH_SetErrorCode+0x130>)
 8014134:	699a      	ldr	r2, [r3, #24]
 8014136:	2380      	movs	r3, #128	@ 0x80
 8014138:	029b      	lsls	r3, r3, #10
 801413a:	401a      	ands	r2, r3
 801413c:	2380      	movs	r3, #128	@ 0x80
 801413e:	029b      	lsls	r3, r3, #10
 8014140:	429a      	cmp	r2, r3
 8014142:	d109      	bne.n	8014158 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8014144:	4b13      	ldr	r3, [pc, #76]	@ (8014194 <FLASH_SetErrorCode+0x134>)
 8014146:	695b      	ldr	r3, [r3, #20]
 8014148:	2220      	movs	r2, #32
 801414a:	431a      	orrs	r2, r3
 801414c:	4b11      	ldr	r3, [pc, #68]	@ (8014194 <FLASH_SetErrorCode+0x134>)
 801414e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2220      	movs	r2, #32
 8014154:	4313      	orrs	r3, r2
 8014156:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8014158:	4b0d      	ldr	r3, [pc, #52]	@ (8014190 <FLASH_SetErrorCode+0x130>)
 801415a:	699a      	ldr	r2, [r3, #24]
 801415c:	2380      	movs	r3, #128	@ 0x80
 801415e:	025b      	lsls	r3, r3, #9
 8014160:	401a      	ands	r2, r3
 8014162:	2380      	movs	r3, #128	@ 0x80
 8014164:	025b      	lsls	r3, r3, #9
 8014166:	429a      	cmp	r2, r3
 8014168:	d10a      	bne.n	8014180 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 801416a:	4b0a      	ldr	r3, [pc, #40]	@ (8014194 <FLASH_SetErrorCode+0x134>)
 801416c:	695b      	ldr	r3, [r3, #20]
 801416e:	2240      	movs	r2, #64	@ 0x40
 8014170:	431a      	orrs	r2, r3
 8014172:	4b08      	ldr	r3, [pc, #32]	@ (8014194 <FLASH_SetErrorCode+0x134>)
 8014174:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	2280      	movs	r2, #128	@ 0x80
 801417a:	0252      	lsls	r2, r2, #9
 801417c:	4313      	orrs	r3, r2
 801417e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8014180:	4b03      	ldr	r3, [pc, #12]	@ (8014190 <FLASH_SetErrorCode+0x130>)
 8014182:	687a      	ldr	r2, [r7, #4]
 8014184:	619a      	str	r2, [r3, #24]
}  
 8014186:	46c0      	nop			@ (mov r8, r8)
 8014188:	46bd      	mov	sp, r7
 801418a:	b002      	add	sp, #8
 801418c:	bd80      	pop	{r7, pc}
 801418e:	46c0      	nop			@ (mov r8, r8)
 8014190:	40022000 	.word	0x40022000
 8014194:	20002248 	.word	0x20002248

08014198 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b084      	sub	sp, #16
 801419c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 801419e:	4b12      	ldr	r3, [pc, #72]	@ (80141e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80141a0:	685b      	ldr	r3, [r3, #4]
 80141a2:	2201      	movs	r2, #1
 80141a4:	4013      	ands	r3, r2
 80141a6:	d019      	beq.n	80141dc <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80141a8:	f3ef 8310 	mrs	r3, PRIMASK
 80141ac:	607b      	str	r3, [r7, #4]
  return(result);
 80141ae:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80141b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80141b2:	b672      	cpsid	i
}
 80141b4:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80141b6:	4b0c      	ldr	r3, [pc, #48]	@ (80141e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80141b8:	4a0c      	ldr	r2, [pc, #48]	@ (80141ec <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80141ba:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80141bc:	4b0a      	ldr	r3, [pc, #40]	@ (80141e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80141be:	4a0c      	ldr	r2, [pc, #48]	@ (80141f0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 80141c0:	60da      	str	r2, [r3, #12]
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	f383 8810 	msr	PRIMASK, r3
}
 80141cc:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80141ce:	4b06      	ldr	r3, [pc, #24]	@ (80141e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80141d0:	685b      	ldr	r3, [r3, #4]
 80141d2:	2201      	movs	r2, #1
 80141d4:	4013      	ands	r3, r2
 80141d6:	d001      	beq.n	80141dc <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 80141d8:	2301      	movs	r3, #1
 80141da:	e000      	b.n	80141de <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 80141dc:	2300      	movs	r3, #0
}
 80141de:	0018      	movs	r0, r3
 80141e0:	46bd      	mov	sp, r7
 80141e2:	b004      	add	sp, #16
 80141e4:	bd80      	pop	{r7, pc}
 80141e6:	46c0      	nop			@ (mov r8, r8)
 80141e8:	40022000 	.word	0x40022000
 80141ec:	89abcdef 	.word	0x89abcdef
 80141f0:	02030405 	.word	0x02030405

080141f4 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80141f8:	4b04      	ldr	r3, [pc, #16]	@ (801420c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80141fa:	685a      	ldr	r2, [r3, #4]
 80141fc:	4b03      	ldr	r3, [pc, #12]	@ (801420c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80141fe:	2101      	movs	r1, #1
 8014200:	430a      	orrs	r2, r1
 8014202:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8014204:	2300      	movs	r3, #0
}
 8014206:	0018      	movs	r0, r3
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}
 801420c:	40022000 	.word	0x40022000

08014210 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8014210:	b5b0      	push	{r4, r5, r7, lr}
 8014212:	b084      	sub	sp, #16
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014218:	250f      	movs	r5, #15
 801421a:	197b      	adds	r3, r7, r5
 801421c:	2200      	movs	r2, #0
 801421e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014220:	197c      	adds	r4, r7, r5
 8014222:	4b0f      	ldr	r3, [pc, #60]	@ (8014260 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8014224:	0018      	movs	r0, r3
 8014226:	f7ff fea9 	bl	8013f7c <FLASH_WaitForLastOperation>
 801422a:	0003      	movs	r3, r0
 801422c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801422e:	0029      	movs	r1, r5
 8014230:	187b      	adds	r3, r7, r1
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d10c      	bne.n	8014252 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8014238:	4b0a      	ldr	r3, [pc, #40]	@ (8014264 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 801423a:	2200      	movs	r2, #0
 801423c:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	2200      	movs	r2, #0
 8014242:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014244:	187c      	adds	r4, r7, r1
 8014246:	4b06      	ldr	r3, [pc, #24]	@ (8014260 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8014248:	0018      	movs	r0, r3
 801424a:	f7ff fe97 	bl	8013f7c <FLASH_WaitForLastOperation>
 801424e:	0003      	movs	r3, r0
 8014250:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8014252:	230f      	movs	r3, #15
 8014254:	18fb      	adds	r3, r7, r3
 8014256:	781b      	ldrb	r3, [r3, #0]
}  
 8014258:	0018      	movs	r0, r3
 801425a:	46bd      	mov	sp, r7
 801425c:	b004      	add	sp, #16
 801425e:	bdb0      	pop	{r4, r5, r7, pc}
 8014260:	0000c350 	.word	0x0000c350
 8014264:	20002248 	.word	0x20002248

08014268 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8014268:	b5b0      	push	{r4, r5, r7, lr}
 801426a:	b086      	sub	sp, #24
 801426c:	af00      	add	r7, sp, #0
 801426e:	60f8      	str	r0, [r7, #12]
 8014270:	60b9      	str	r1, [r7, #8]
 8014272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8014274:	2317      	movs	r3, #23
 8014276:	18fb      	adds	r3, r7, r3
 8014278:	2201      	movs	r2, #1
 801427a:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801427c:	4b24      	ldr	r3, [pc, #144]	@ (8014310 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801427e:	7c1b      	ldrb	r3, [r3, #16]
 8014280:	2b01      	cmp	r3, #1
 8014282:	d101      	bne.n	8014288 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8014284:	2302      	movs	r3, #2
 8014286:	e03e      	b.n	8014306 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8014288:	4b21      	ldr	r3, [pc, #132]	@ (8014310 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801428a:	2201      	movs	r2, #1
 801428c:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801428e:	2517      	movs	r5, #23
 8014290:	197c      	adds	r4, r7, r5
 8014292:	4b20      	ldr	r3, [pc, #128]	@ (8014314 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8014294:	0018      	movs	r0, r3
 8014296:	f7ff fe71 	bl	8013f7c <FLASH_WaitForLastOperation>
 801429a:	0003      	movs	r3, r0
 801429c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801429e:	197b      	adds	r3, r7, r5
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d129      	bne.n	80142fa <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80142a6:	4b1a      	ldr	r3, [pc, #104]	@ (8014310 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80142a8:	2200      	movs	r2, #0
 80142aa:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	2b02      	cmp	r3, #2
 80142b0:	d103      	bne.n	80142ba <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	687a      	ldr	r2, [r7, #4]
 80142b6:	601a      	str	r2, [r3, #0]
 80142b8:	e013      	b.n	80142e2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	2b01      	cmp	r3, #1
 80142be:	d104      	bne.n	80142ca <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	687a      	ldr	r2, [r7, #4]
 80142c4:	b292      	uxth	r2, r2
 80142c6:	801a      	strh	r2, [r3, #0]
 80142c8:	e00b      	b.n	80142e2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d104      	bne.n	80142da <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	687a      	ldr	r2, [r7, #4]
 80142d4:	b2d2      	uxtb	r2, r2
 80142d6:	701a      	strb	r2, [r3, #0]
 80142d8:	e003      	b.n	80142e2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 80142da:	2317      	movs	r3, #23
 80142dc:	18fb      	adds	r3, r7, r3
 80142de:	2201      	movs	r2, #1
 80142e0:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80142e2:	2217      	movs	r2, #23
 80142e4:	18bb      	adds	r3, r7, r2
 80142e6:	781b      	ldrb	r3, [r3, #0]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d106      	bne.n	80142fa <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80142ec:	18bc      	adds	r4, r7, r2
 80142ee:	4b09      	ldr	r3, [pc, #36]	@ (8014314 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80142f0:	0018      	movs	r0, r3
 80142f2:	f7ff fe43 	bl	8013f7c <FLASH_WaitForLastOperation>
 80142f6:	0003      	movs	r3, r0
 80142f8:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80142fa:	4b05      	ldr	r3, [pc, #20]	@ (8014310 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80142fc:	2200      	movs	r2, #0
 80142fe:	741a      	strb	r2, [r3, #16]

  return status;
 8014300:	2317      	movs	r3, #23
 8014302:	18fb      	adds	r3, r7, r3
 8014304:	781b      	ldrb	r3, [r3, #0]
}
 8014306:	0018      	movs	r0, r3
 8014308:	46bd      	mov	sp, r7
 801430a:	b006      	add	sp, #24
 801430c:	bdb0      	pop	{r4, r5, r7, pc}
 801430e:	46c0      	nop			@ (mov r8, r8)
 8014310:	20002248 	.word	0x20002248
 8014314:	0000c350 	.word	0x0000c350

08014318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b086      	sub	sp, #24
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
 8014320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8014322:	2300      	movs	r3, #0
 8014324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8014326:	2300      	movs	r3, #0
 8014328:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 801432a:	2300      	movs	r3, #0
 801432c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 801432e:	e155      	b.n	80145dc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	2101      	movs	r1, #1
 8014336:	697a      	ldr	r2, [r7, #20]
 8014338:	4091      	lsls	r1, r2
 801433a:	000a      	movs	r2, r1
 801433c:	4013      	ands	r3, r2
 801433e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d100      	bne.n	8014348 <HAL_GPIO_Init+0x30>
 8014346:	e146      	b.n	80145d6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	685b      	ldr	r3, [r3, #4]
 801434c:	2203      	movs	r2, #3
 801434e:	4013      	ands	r3, r2
 8014350:	2b01      	cmp	r3, #1
 8014352:	d005      	beq.n	8014360 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	2203      	movs	r2, #3
 801435a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801435c:	2b02      	cmp	r3, #2
 801435e:	d130      	bne.n	80143c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	689b      	ldr	r3, [r3, #8]
 8014364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8014366:	697b      	ldr	r3, [r7, #20]
 8014368:	005b      	lsls	r3, r3, #1
 801436a:	2203      	movs	r2, #3
 801436c:	409a      	lsls	r2, r3
 801436e:	0013      	movs	r3, r2
 8014370:	43da      	mvns	r2, r3
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	4013      	ands	r3, r2
 8014376:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	68da      	ldr	r2, [r3, #12]
 801437c:	697b      	ldr	r3, [r7, #20]
 801437e:	005b      	lsls	r3, r3, #1
 8014380:	409a      	lsls	r2, r3
 8014382:	0013      	movs	r3, r2
 8014384:	693a      	ldr	r2, [r7, #16]
 8014386:	4313      	orrs	r3, r2
 8014388:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	693a      	ldr	r2, [r7, #16]
 801438e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	685b      	ldr	r3, [r3, #4]
 8014394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8014396:	2201      	movs	r2, #1
 8014398:	697b      	ldr	r3, [r7, #20]
 801439a:	409a      	lsls	r2, r3
 801439c:	0013      	movs	r3, r2
 801439e:	43da      	mvns	r2, r3
 80143a0:	693b      	ldr	r3, [r7, #16]
 80143a2:	4013      	ands	r3, r2
 80143a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	685b      	ldr	r3, [r3, #4]
 80143aa:	091b      	lsrs	r3, r3, #4
 80143ac:	2201      	movs	r2, #1
 80143ae:	401a      	ands	r2, r3
 80143b0:	697b      	ldr	r3, [r7, #20]
 80143b2:	409a      	lsls	r2, r3
 80143b4:	0013      	movs	r3, r2
 80143b6:	693a      	ldr	r2, [r7, #16]
 80143b8:	4313      	orrs	r3, r2
 80143ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	693a      	ldr	r2, [r7, #16]
 80143c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	2203      	movs	r2, #3
 80143c8:	4013      	ands	r3, r2
 80143ca:	2b03      	cmp	r3, #3
 80143cc:	d017      	beq.n	80143fe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	68db      	ldr	r3, [r3, #12]
 80143d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80143d4:	697b      	ldr	r3, [r7, #20]
 80143d6:	005b      	lsls	r3, r3, #1
 80143d8:	2203      	movs	r2, #3
 80143da:	409a      	lsls	r2, r3
 80143dc:	0013      	movs	r3, r2
 80143de:	43da      	mvns	r2, r3
 80143e0:	693b      	ldr	r3, [r7, #16]
 80143e2:	4013      	ands	r3, r2
 80143e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80143e6:	683b      	ldr	r3, [r7, #0]
 80143e8:	689a      	ldr	r2, [r3, #8]
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	005b      	lsls	r3, r3, #1
 80143ee:	409a      	lsls	r2, r3
 80143f0:	0013      	movs	r3, r2
 80143f2:	693a      	ldr	r2, [r7, #16]
 80143f4:	4313      	orrs	r3, r2
 80143f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	693a      	ldr	r2, [r7, #16]
 80143fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	685b      	ldr	r3, [r3, #4]
 8014402:	2203      	movs	r2, #3
 8014404:	4013      	ands	r3, r2
 8014406:	2b02      	cmp	r3, #2
 8014408:	d123      	bne.n	8014452 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	08da      	lsrs	r2, r3, #3
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	3208      	adds	r2, #8
 8014412:	0092      	lsls	r2, r2, #2
 8014414:	58d3      	ldr	r3, [r2, r3]
 8014416:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8014418:	697b      	ldr	r3, [r7, #20]
 801441a:	2207      	movs	r2, #7
 801441c:	4013      	ands	r3, r2
 801441e:	009b      	lsls	r3, r3, #2
 8014420:	220f      	movs	r2, #15
 8014422:	409a      	lsls	r2, r3
 8014424:	0013      	movs	r3, r2
 8014426:	43da      	mvns	r2, r3
 8014428:	693b      	ldr	r3, [r7, #16]
 801442a:	4013      	ands	r3, r2
 801442c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	691a      	ldr	r2, [r3, #16]
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	2107      	movs	r1, #7
 8014436:	400b      	ands	r3, r1
 8014438:	009b      	lsls	r3, r3, #2
 801443a:	409a      	lsls	r2, r3
 801443c:	0013      	movs	r3, r2
 801443e:	693a      	ldr	r2, [r7, #16]
 8014440:	4313      	orrs	r3, r2
 8014442:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8014444:	697b      	ldr	r3, [r7, #20]
 8014446:	08da      	lsrs	r2, r3, #3
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	3208      	adds	r2, #8
 801444c:	0092      	lsls	r2, r2, #2
 801444e:	6939      	ldr	r1, [r7, #16]
 8014450:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	005b      	lsls	r3, r3, #1
 801445c:	2203      	movs	r2, #3
 801445e:	409a      	lsls	r2, r3
 8014460:	0013      	movs	r3, r2
 8014462:	43da      	mvns	r2, r3
 8014464:	693b      	ldr	r3, [r7, #16]
 8014466:	4013      	ands	r3, r2
 8014468:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801446a:	683b      	ldr	r3, [r7, #0]
 801446c:	685b      	ldr	r3, [r3, #4]
 801446e:	2203      	movs	r2, #3
 8014470:	401a      	ands	r2, r3
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	005b      	lsls	r3, r3, #1
 8014476:	409a      	lsls	r2, r3
 8014478:	0013      	movs	r3, r2
 801447a:	693a      	ldr	r2, [r7, #16]
 801447c:	4313      	orrs	r3, r2
 801447e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	693a      	ldr	r2, [r7, #16]
 8014484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	685a      	ldr	r2, [r3, #4]
 801448a:	23c0      	movs	r3, #192	@ 0xc0
 801448c:	029b      	lsls	r3, r3, #10
 801448e:	4013      	ands	r3, r2
 8014490:	d100      	bne.n	8014494 <HAL_GPIO_Init+0x17c>
 8014492:	e0a0      	b.n	80145d6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014494:	4b57      	ldr	r3, [pc, #348]	@ (80145f4 <HAL_GPIO_Init+0x2dc>)
 8014496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014498:	4b56      	ldr	r3, [pc, #344]	@ (80145f4 <HAL_GPIO_Init+0x2dc>)
 801449a:	2101      	movs	r1, #1
 801449c:	430a      	orrs	r2, r1
 801449e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80144a0:	4a55      	ldr	r2, [pc, #340]	@ (80145f8 <HAL_GPIO_Init+0x2e0>)
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	089b      	lsrs	r3, r3, #2
 80144a6:	3302      	adds	r3, #2
 80144a8:	009b      	lsls	r3, r3, #2
 80144aa:	589b      	ldr	r3, [r3, r2]
 80144ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80144ae:	697b      	ldr	r3, [r7, #20]
 80144b0:	2203      	movs	r2, #3
 80144b2:	4013      	ands	r3, r2
 80144b4:	009b      	lsls	r3, r3, #2
 80144b6:	220f      	movs	r2, #15
 80144b8:	409a      	lsls	r2, r3
 80144ba:	0013      	movs	r3, r2
 80144bc:	43da      	mvns	r2, r3
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	4013      	ands	r3, r2
 80144c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80144c4:	687a      	ldr	r2, [r7, #4]
 80144c6:	23a0      	movs	r3, #160	@ 0xa0
 80144c8:	05db      	lsls	r3, r3, #23
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d01f      	beq.n	801450e <HAL_GPIO_Init+0x1f6>
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	4a4a      	ldr	r2, [pc, #296]	@ (80145fc <HAL_GPIO_Init+0x2e4>)
 80144d2:	4293      	cmp	r3, r2
 80144d4:	d019      	beq.n	801450a <HAL_GPIO_Init+0x1f2>
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	4a49      	ldr	r2, [pc, #292]	@ (8014600 <HAL_GPIO_Init+0x2e8>)
 80144da:	4293      	cmp	r3, r2
 80144dc:	d013      	beq.n	8014506 <HAL_GPIO_Init+0x1ee>
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	4a48      	ldr	r2, [pc, #288]	@ (8014604 <HAL_GPIO_Init+0x2ec>)
 80144e2:	4293      	cmp	r3, r2
 80144e4:	d00d      	beq.n	8014502 <HAL_GPIO_Init+0x1ea>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	4a47      	ldr	r2, [pc, #284]	@ (8014608 <HAL_GPIO_Init+0x2f0>)
 80144ea:	4293      	cmp	r3, r2
 80144ec:	d007      	beq.n	80144fe <HAL_GPIO_Init+0x1e6>
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	4a46      	ldr	r2, [pc, #280]	@ (801460c <HAL_GPIO_Init+0x2f4>)
 80144f2:	4293      	cmp	r3, r2
 80144f4:	d101      	bne.n	80144fa <HAL_GPIO_Init+0x1e2>
 80144f6:	2305      	movs	r3, #5
 80144f8:	e00a      	b.n	8014510 <HAL_GPIO_Init+0x1f8>
 80144fa:	2306      	movs	r3, #6
 80144fc:	e008      	b.n	8014510 <HAL_GPIO_Init+0x1f8>
 80144fe:	2304      	movs	r3, #4
 8014500:	e006      	b.n	8014510 <HAL_GPIO_Init+0x1f8>
 8014502:	2303      	movs	r3, #3
 8014504:	e004      	b.n	8014510 <HAL_GPIO_Init+0x1f8>
 8014506:	2302      	movs	r3, #2
 8014508:	e002      	b.n	8014510 <HAL_GPIO_Init+0x1f8>
 801450a:	2301      	movs	r3, #1
 801450c:	e000      	b.n	8014510 <HAL_GPIO_Init+0x1f8>
 801450e:	2300      	movs	r3, #0
 8014510:	697a      	ldr	r2, [r7, #20]
 8014512:	2103      	movs	r1, #3
 8014514:	400a      	ands	r2, r1
 8014516:	0092      	lsls	r2, r2, #2
 8014518:	4093      	lsls	r3, r2
 801451a:	693a      	ldr	r2, [r7, #16]
 801451c:	4313      	orrs	r3, r2
 801451e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8014520:	4935      	ldr	r1, [pc, #212]	@ (80145f8 <HAL_GPIO_Init+0x2e0>)
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	089b      	lsrs	r3, r3, #2
 8014526:	3302      	adds	r3, #2
 8014528:	009b      	lsls	r3, r3, #2
 801452a:	693a      	ldr	r2, [r7, #16]
 801452c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801452e:	4b38      	ldr	r3, [pc, #224]	@ (8014610 <HAL_GPIO_Init+0x2f8>)
 8014530:	689b      	ldr	r3, [r3, #8]
 8014532:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	43da      	mvns	r2, r3
 8014538:	693b      	ldr	r3, [r7, #16]
 801453a:	4013      	ands	r3, r2
 801453c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801453e:	683b      	ldr	r3, [r7, #0]
 8014540:	685a      	ldr	r2, [r3, #4]
 8014542:	2380      	movs	r3, #128	@ 0x80
 8014544:	035b      	lsls	r3, r3, #13
 8014546:	4013      	ands	r3, r2
 8014548:	d003      	beq.n	8014552 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 801454a:	693a      	ldr	r2, [r7, #16]
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	4313      	orrs	r3, r2
 8014550:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8014552:	4b2f      	ldr	r3, [pc, #188]	@ (8014610 <HAL_GPIO_Init+0x2f8>)
 8014554:	693a      	ldr	r2, [r7, #16]
 8014556:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8014558:	4b2d      	ldr	r3, [pc, #180]	@ (8014610 <HAL_GPIO_Init+0x2f8>)
 801455a:	68db      	ldr	r3, [r3, #12]
 801455c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	43da      	mvns	r2, r3
 8014562:	693b      	ldr	r3, [r7, #16]
 8014564:	4013      	ands	r3, r2
 8014566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	685a      	ldr	r2, [r3, #4]
 801456c:	2380      	movs	r3, #128	@ 0x80
 801456e:	039b      	lsls	r3, r3, #14
 8014570:	4013      	ands	r3, r2
 8014572:	d003      	beq.n	801457c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8014574:	693a      	ldr	r2, [r7, #16]
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	4313      	orrs	r3, r2
 801457a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 801457c:	4b24      	ldr	r3, [pc, #144]	@ (8014610 <HAL_GPIO_Init+0x2f8>)
 801457e:	693a      	ldr	r2, [r7, #16]
 8014580:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8014582:	4b23      	ldr	r3, [pc, #140]	@ (8014610 <HAL_GPIO_Init+0x2f8>)
 8014584:	685b      	ldr	r3, [r3, #4]
 8014586:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	43da      	mvns	r2, r3
 801458c:	693b      	ldr	r3, [r7, #16]
 801458e:	4013      	ands	r3, r2
 8014590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	685a      	ldr	r2, [r3, #4]
 8014596:	2380      	movs	r3, #128	@ 0x80
 8014598:	029b      	lsls	r3, r3, #10
 801459a:	4013      	ands	r3, r2
 801459c:	d003      	beq.n	80145a6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 801459e:	693a      	ldr	r2, [r7, #16]
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	4313      	orrs	r3, r2
 80145a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80145a6:	4b1a      	ldr	r3, [pc, #104]	@ (8014610 <HAL_GPIO_Init+0x2f8>)
 80145a8:	693a      	ldr	r2, [r7, #16]
 80145aa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80145ac:	4b18      	ldr	r3, [pc, #96]	@ (8014610 <HAL_GPIO_Init+0x2f8>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	43da      	mvns	r2, r3
 80145b6:	693b      	ldr	r3, [r7, #16]
 80145b8:	4013      	ands	r3, r2
 80145ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	685a      	ldr	r2, [r3, #4]
 80145c0:	2380      	movs	r3, #128	@ 0x80
 80145c2:	025b      	lsls	r3, r3, #9
 80145c4:	4013      	ands	r3, r2
 80145c6:	d003      	beq.n	80145d0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80145c8:	693a      	ldr	r2, [r7, #16]
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	4313      	orrs	r3, r2
 80145ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80145d0:	4b0f      	ldr	r3, [pc, #60]	@ (8014610 <HAL_GPIO_Init+0x2f8>)
 80145d2:	693a      	ldr	r2, [r7, #16]
 80145d4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80145d6:	697b      	ldr	r3, [r7, #20]
 80145d8:	3301      	adds	r3, #1
 80145da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	681a      	ldr	r2, [r3, #0]
 80145e0:	697b      	ldr	r3, [r7, #20]
 80145e2:	40da      	lsrs	r2, r3
 80145e4:	1e13      	subs	r3, r2, #0
 80145e6:	d000      	beq.n	80145ea <HAL_GPIO_Init+0x2d2>
 80145e8:	e6a2      	b.n	8014330 <HAL_GPIO_Init+0x18>
  }
}
 80145ea:	46c0      	nop			@ (mov r8, r8)
 80145ec:	46c0      	nop			@ (mov r8, r8)
 80145ee:	46bd      	mov	sp, r7
 80145f0:	b006      	add	sp, #24
 80145f2:	bd80      	pop	{r7, pc}
 80145f4:	40021000 	.word	0x40021000
 80145f8:	40010000 	.word	0x40010000
 80145fc:	50000400 	.word	0x50000400
 8014600:	50000800 	.word	0x50000800
 8014604:	50000c00 	.word	0x50000c00
 8014608:	50001000 	.word	0x50001000
 801460c:	50001c00 	.word	0x50001c00
 8014610:	40010400 	.word	0x40010400

08014614 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b084      	sub	sp, #16
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
 801461c:	000a      	movs	r2, r1
 801461e:	1cbb      	adds	r3, r7, #2
 8014620:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	691b      	ldr	r3, [r3, #16]
 8014626:	1cba      	adds	r2, r7, #2
 8014628:	8812      	ldrh	r2, [r2, #0]
 801462a:	4013      	ands	r3, r2
 801462c:	d004      	beq.n	8014638 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 801462e:	230f      	movs	r3, #15
 8014630:	18fb      	adds	r3, r7, r3
 8014632:	2201      	movs	r2, #1
 8014634:	701a      	strb	r2, [r3, #0]
 8014636:	e003      	b.n	8014640 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8014638:	230f      	movs	r3, #15
 801463a:	18fb      	adds	r3, r7, r3
 801463c:	2200      	movs	r2, #0
 801463e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8014640:	230f      	movs	r3, #15
 8014642:	18fb      	adds	r3, r7, r3
 8014644:	781b      	ldrb	r3, [r3, #0]
}
 8014646:	0018      	movs	r0, r3
 8014648:	46bd      	mov	sp, r7
 801464a:	b004      	add	sp, #16
 801464c:	bd80      	pop	{r7, pc}

0801464e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801464e:	b580      	push	{r7, lr}
 8014650:	b082      	sub	sp, #8
 8014652:	af00      	add	r7, sp, #0
 8014654:	6078      	str	r0, [r7, #4]
 8014656:	0008      	movs	r0, r1
 8014658:	0011      	movs	r1, r2
 801465a:	1cbb      	adds	r3, r7, #2
 801465c:	1c02      	adds	r2, r0, #0
 801465e:	801a      	strh	r2, [r3, #0]
 8014660:	1c7b      	adds	r3, r7, #1
 8014662:	1c0a      	adds	r2, r1, #0
 8014664:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8014666:	1c7b      	adds	r3, r7, #1
 8014668:	781b      	ldrb	r3, [r3, #0]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d004      	beq.n	8014678 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 801466e:	1cbb      	adds	r3, r7, #2
 8014670:	881a      	ldrh	r2, [r3, #0]
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8014676:	e003      	b.n	8014680 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8014678:	1cbb      	adds	r3, r7, #2
 801467a:	881a      	ldrh	r2, [r3, #0]
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8014680:	46c0      	nop			@ (mov r8, r8)
 8014682:	46bd      	mov	sp, r7
 8014684:	b002      	add	sp, #8
 8014686:	bd80      	pop	{r7, pc}

08014688 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b082      	sub	sp, #8
 801468c:	af00      	add	r7, sp, #0
 801468e:	0002      	movs	r2, r0
 8014690:	1dbb      	adds	r3, r7, #6
 8014692:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8014694:	4b09      	ldr	r3, [pc, #36]	@ (80146bc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8014696:	695b      	ldr	r3, [r3, #20]
 8014698:	1dba      	adds	r2, r7, #6
 801469a:	8812      	ldrh	r2, [r2, #0]
 801469c:	4013      	ands	r3, r2
 801469e:	d008      	beq.n	80146b2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80146a0:	4b06      	ldr	r3, [pc, #24]	@ (80146bc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80146a2:	1dba      	adds	r2, r7, #6
 80146a4:	8812      	ldrh	r2, [r2, #0]
 80146a6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80146a8:	1dbb      	adds	r3, r7, #6
 80146aa:	881b      	ldrh	r3, [r3, #0]
 80146ac:	0018      	movs	r0, r3
 80146ae:	f7f7 fc33 	bl	800bf18 <HAL_GPIO_EXTI_Callback>
  }
}
 80146b2:	46c0      	nop			@ (mov r8, r8)
 80146b4:	46bd      	mov	sp, r7
 80146b6:	b002      	add	sp, #8
 80146b8:	bd80      	pop	{r7, pc}
 80146ba:	46c0      	nop			@ (mov r8, r8)
 80146bc:	40010400 	.word	0x40010400

080146c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b082      	sub	sp, #8
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d101      	bne.n	80146d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80146ce:	2301      	movs	r3, #1
 80146d0:	e082      	b.n	80147d8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2241      	movs	r2, #65	@ 0x41
 80146d6:	5c9b      	ldrb	r3, [r3, r2]
 80146d8:	b2db      	uxtb	r3, r3
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d107      	bne.n	80146ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	2240      	movs	r2, #64	@ 0x40
 80146e2:	2100      	movs	r1, #0
 80146e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	0018      	movs	r0, r3
 80146ea:	f7f6 fef1 	bl	800b4d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	2241      	movs	r2, #65	@ 0x41
 80146f2:	2124      	movs	r1, #36	@ 0x24
 80146f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	681a      	ldr	r2, [r3, #0]
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	2101      	movs	r1, #1
 8014702:	438a      	bics	r2, r1
 8014704:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	685a      	ldr	r2, [r3, #4]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	4934      	ldr	r1, [pc, #208]	@ (80147e0 <HAL_I2C_Init+0x120>)
 8014710:	400a      	ands	r2, r1
 8014712:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	689a      	ldr	r2, [r3, #8]
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	4931      	ldr	r1, [pc, #196]	@ (80147e4 <HAL_I2C_Init+0x124>)
 8014720:	400a      	ands	r2, r1
 8014722:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	68db      	ldr	r3, [r3, #12]
 8014728:	2b01      	cmp	r3, #1
 801472a:	d108      	bne.n	801473e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	689a      	ldr	r2, [r3, #8]
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	2180      	movs	r1, #128	@ 0x80
 8014736:	0209      	lsls	r1, r1, #8
 8014738:	430a      	orrs	r2, r1
 801473a:	609a      	str	r2, [r3, #8]
 801473c:	e007      	b.n	801474e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	689a      	ldr	r2, [r3, #8]
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	2184      	movs	r1, #132	@ 0x84
 8014748:	0209      	lsls	r1, r1, #8
 801474a:	430a      	orrs	r2, r1
 801474c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	68db      	ldr	r3, [r3, #12]
 8014752:	2b02      	cmp	r3, #2
 8014754:	d104      	bne.n	8014760 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	2280      	movs	r2, #128	@ 0x80
 801475c:	0112      	lsls	r2, r2, #4
 801475e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	685a      	ldr	r2, [r3, #4]
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	491f      	ldr	r1, [pc, #124]	@ (80147e8 <HAL_I2C_Init+0x128>)
 801476c:	430a      	orrs	r2, r1
 801476e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	68da      	ldr	r2, [r3, #12]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	491a      	ldr	r1, [pc, #104]	@ (80147e4 <HAL_I2C_Init+0x124>)
 801477c:	400a      	ands	r2, r1
 801477e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	691a      	ldr	r2, [r3, #16]
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	695b      	ldr	r3, [r3, #20]
 8014788:	431a      	orrs	r2, r3
 801478a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	699b      	ldr	r3, [r3, #24]
 8014790:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	430a      	orrs	r2, r1
 8014798:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	69d9      	ldr	r1, [r3, #28]
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	6a1a      	ldr	r2, [r3, #32]
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	430a      	orrs	r2, r1
 80147a8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	681a      	ldr	r2, [r3, #0]
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	2101      	movs	r1, #1
 80147b6:	430a      	orrs	r2, r1
 80147b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2200      	movs	r2, #0
 80147be:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2241      	movs	r2, #65	@ 0x41
 80147c4:	2120      	movs	r1, #32
 80147c6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	2200      	movs	r2, #0
 80147cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	2242      	movs	r2, #66	@ 0x42
 80147d2:	2100      	movs	r1, #0
 80147d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80147d6:	2300      	movs	r3, #0
}
 80147d8:	0018      	movs	r0, r3
 80147da:	46bd      	mov	sp, r7
 80147dc:	b002      	add	sp, #8
 80147de:	bd80      	pop	{r7, pc}
 80147e0:	f0ffffff 	.word	0xf0ffffff
 80147e4:	ffff7fff 	.word	0xffff7fff
 80147e8:	02008000 	.word	0x02008000

080147ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80147ec:	b590      	push	{r4, r7, lr}
 80147ee:	b089      	sub	sp, #36	@ 0x24
 80147f0:	af02      	add	r7, sp, #8
 80147f2:	60f8      	str	r0, [r7, #12]
 80147f4:	0008      	movs	r0, r1
 80147f6:	607a      	str	r2, [r7, #4]
 80147f8:	0019      	movs	r1, r3
 80147fa:	230a      	movs	r3, #10
 80147fc:	18fb      	adds	r3, r7, r3
 80147fe:	1c02      	adds	r2, r0, #0
 8014800:	801a      	strh	r2, [r3, #0]
 8014802:	2308      	movs	r3, #8
 8014804:	18fb      	adds	r3, r7, r3
 8014806:	1c0a      	adds	r2, r1, #0
 8014808:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	2241      	movs	r2, #65	@ 0x41
 801480e:	5c9b      	ldrb	r3, [r3, r2]
 8014810:	b2db      	uxtb	r3, r3
 8014812:	2b20      	cmp	r3, #32
 8014814:	d000      	beq.n	8014818 <HAL_I2C_Master_Transmit+0x2c>
 8014816:	e0e7      	b.n	80149e8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	2240      	movs	r2, #64	@ 0x40
 801481c:	5c9b      	ldrb	r3, [r3, r2]
 801481e:	2b01      	cmp	r3, #1
 8014820:	d101      	bne.n	8014826 <HAL_I2C_Master_Transmit+0x3a>
 8014822:	2302      	movs	r3, #2
 8014824:	e0e1      	b.n	80149ea <HAL_I2C_Master_Transmit+0x1fe>
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	2240      	movs	r2, #64	@ 0x40
 801482a:	2101      	movs	r1, #1
 801482c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801482e:	f7fe fc7d 	bl	801312c <HAL_GetTick>
 8014832:	0003      	movs	r3, r0
 8014834:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014836:	2380      	movs	r3, #128	@ 0x80
 8014838:	0219      	lsls	r1, r3, #8
 801483a:	68f8      	ldr	r0, [r7, #12]
 801483c:	697b      	ldr	r3, [r7, #20]
 801483e:	9300      	str	r3, [sp, #0]
 8014840:	2319      	movs	r3, #25
 8014842:	2201      	movs	r2, #1
 8014844:	f002 fa30 	bl	8016ca8 <I2C_WaitOnFlagUntilTimeout>
 8014848:	1e03      	subs	r3, r0, #0
 801484a:	d001      	beq.n	8014850 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 801484c:	2301      	movs	r3, #1
 801484e:	e0cc      	b.n	80149ea <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	2241      	movs	r2, #65	@ 0x41
 8014854:	2121      	movs	r1, #33	@ 0x21
 8014856:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	2242      	movs	r2, #66	@ 0x42
 801485c:	2110      	movs	r1, #16
 801485e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	2200      	movs	r2, #0
 8014864:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	687a      	ldr	r2, [r7, #4]
 801486a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	2208      	movs	r2, #8
 8014870:	18ba      	adds	r2, r7, r2
 8014872:	8812      	ldrh	r2, [r2, #0]
 8014874:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	2200      	movs	r2, #0
 801487a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014880:	b29b      	uxth	r3, r3
 8014882:	2bff      	cmp	r3, #255	@ 0xff
 8014884:	d911      	bls.n	80148aa <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	22ff      	movs	r2, #255	@ 0xff
 801488a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014890:	b2da      	uxtb	r2, r3
 8014892:	2380      	movs	r3, #128	@ 0x80
 8014894:	045c      	lsls	r4, r3, #17
 8014896:	230a      	movs	r3, #10
 8014898:	18fb      	adds	r3, r7, r3
 801489a:	8819      	ldrh	r1, [r3, #0]
 801489c:	68f8      	ldr	r0, [r7, #12]
 801489e:	4b55      	ldr	r3, [pc, #340]	@ (80149f4 <HAL_I2C_Master_Transmit+0x208>)
 80148a0:	9300      	str	r3, [sp, #0]
 80148a2:	0023      	movs	r3, r4
 80148a4:	f002 fc52 	bl	801714c <I2C_TransferConfig>
 80148a8:	e075      	b.n	8014996 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80148ae:	b29a      	uxth	r2, r3
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148b8:	b2da      	uxtb	r2, r3
 80148ba:	2380      	movs	r3, #128	@ 0x80
 80148bc:	049c      	lsls	r4, r3, #18
 80148be:	230a      	movs	r3, #10
 80148c0:	18fb      	adds	r3, r7, r3
 80148c2:	8819      	ldrh	r1, [r3, #0]
 80148c4:	68f8      	ldr	r0, [r7, #12]
 80148c6:	4b4b      	ldr	r3, [pc, #300]	@ (80149f4 <HAL_I2C_Master_Transmit+0x208>)
 80148c8:	9300      	str	r3, [sp, #0]
 80148ca:	0023      	movs	r3, r4
 80148cc:	f002 fc3e 	bl	801714c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80148d0:	e061      	b.n	8014996 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80148d2:	697a      	ldr	r2, [r7, #20]
 80148d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	0018      	movs	r0, r3
 80148da:	f002 fa33 	bl	8016d44 <I2C_WaitOnTXISFlagUntilTimeout>
 80148de:	1e03      	subs	r3, r0, #0
 80148e0:	d001      	beq.n	80148e6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80148e2:	2301      	movs	r3, #1
 80148e4:	e081      	b.n	80149ea <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148ea:	781a      	ldrb	r2, [r3, #0]
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148f6:	1c5a      	adds	r2, r3, #1
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014900:	b29b      	uxth	r3, r3
 8014902:	3b01      	subs	r3, #1
 8014904:	b29a      	uxth	r2, r3
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801490e:	3b01      	subs	r3, #1
 8014910:	b29a      	uxth	r2, r3
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801491a:	b29b      	uxth	r3, r3
 801491c:	2b00      	cmp	r3, #0
 801491e:	d03a      	beq.n	8014996 <HAL_I2C_Master_Transmit+0x1aa>
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014924:	2b00      	cmp	r3, #0
 8014926:	d136      	bne.n	8014996 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8014928:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801492a:	68f8      	ldr	r0, [r7, #12]
 801492c:	697b      	ldr	r3, [r7, #20]
 801492e:	9300      	str	r3, [sp, #0]
 8014930:	0013      	movs	r3, r2
 8014932:	2200      	movs	r2, #0
 8014934:	2180      	movs	r1, #128	@ 0x80
 8014936:	f002 f9b7 	bl	8016ca8 <I2C_WaitOnFlagUntilTimeout>
 801493a:	1e03      	subs	r3, r0, #0
 801493c:	d001      	beq.n	8014942 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 801493e:	2301      	movs	r3, #1
 8014940:	e053      	b.n	80149ea <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014946:	b29b      	uxth	r3, r3
 8014948:	2bff      	cmp	r3, #255	@ 0xff
 801494a:	d911      	bls.n	8014970 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	22ff      	movs	r2, #255	@ 0xff
 8014950:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014956:	b2da      	uxtb	r2, r3
 8014958:	2380      	movs	r3, #128	@ 0x80
 801495a:	045c      	lsls	r4, r3, #17
 801495c:	230a      	movs	r3, #10
 801495e:	18fb      	adds	r3, r7, r3
 8014960:	8819      	ldrh	r1, [r3, #0]
 8014962:	68f8      	ldr	r0, [r7, #12]
 8014964:	2300      	movs	r3, #0
 8014966:	9300      	str	r3, [sp, #0]
 8014968:	0023      	movs	r3, r4
 801496a:	f002 fbef 	bl	801714c <I2C_TransferConfig>
 801496e:	e012      	b.n	8014996 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014974:	b29a      	uxth	r2, r3
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801497e:	b2da      	uxtb	r2, r3
 8014980:	2380      	movs	r3, #128	@ 0x80
 8014982:	049c      	lsls	r4, r3, #18
 8014984:	230a      	movs	r3, #10
 8014986:	18fb      	adds	r3, r7, r3
 8014988:	8819      	ldrh	r1, [r3, #0]
 801498a:	68f8      	ldr	r0, [r7, #12]
 801498c:	2300      	movs	r3, #0
 801498e:	9300      	str	r3, [sp, #0]
 8014990:	0023      	movs	r3, r4
 8014992:	f002 fbdb 	bl	801714c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801499a:	b29b      	uxth	r3, r3
 801499c:	2b00      	cmp	r3, #0
 801499e:	d198      	bne.n	80148d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80149a0:	697a      	ldr	r2, [r7, #20]
 80149a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	0018      	movs	r0, r3
 80149a8:	f002 fa12 	bl	8016dd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80149ac:	1e03      	subs	r3, r0, #0
 80149ae:	d001      	beq.n	80149b4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80149b0:	2301      	movs	r3, #1
 80149b2:	e01a      	b.n	80149ea <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	2220      	movs	r2, #32
 80149ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	685a      	ldr	r2, [r3, #4]
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	490c      	ldr	r1, [pc, #48]	@ (80149f8 <HAL_I2C_Master_Transmit+0x20c>)
 80149c8:	400a      	ands	r2, r1
 80149ca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	2241      	movs	r2, #65	@ 0x41
 80149d0:	2120      	movs	r1, #32
 80149d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	2242      	movs	r2, #66	@ 0x42
 80149d8:	2100      	movs	r1, #0
 80149da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	2240      	movs	r2, #64	@ 0x40
 80149e0:	2100      	movs	r1, #0
 80149e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80149e4:	2300      	movs	r3, #0
 80149e6:	e000      	b.n	80149ea <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80149e8:	2302      	movs	r3, #2
  }
}
 80149ea:	0018      	movs	r0, r3
 80149ec:	46bd      	mov	sp, r7
 80149ee:	b007      	add	sp, #28
 80149f0:	bd90      	pop	{r4, r7, pc}
 80149f2:	46c0      	nop			@ (mov r8, r8)
 80149f4:	80002000 	.word	0x80002000
 80149f8:	fe00e800 	.word	0xfe00e800

080149fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80149fc:	b590      	push	{r4, r7, lr}
 80149fe:	b089      	sub	sp, #36	@ 0x24
 8014a00:	af02      	add	r7, sp, #8
 8014a02:	60f8      	str	r0, [r7, #12]
 8014a04:	0008      	movs	r0, r1
 8014a06:	607a      	str	r2, [r7, #4]
 8014a08:	0019      	movs	r1, r3
 8014a0a:	230a      	movs	r3, #10
 8014a0c:	18fb      	adds	r3, r7, r3
 8014a0e:	1c02      	adds	r2, r0, #0
 8014a10:	801a      	strh	r2, [r3, #0]
 8014a12:	2308      	movs	r3, #8
 8014a14:	18fb      	adds	r3, r7, r3
 8014a16:	1c0a      	adds	r2, r1, #0
 8014a18:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	2241      	movs	r2, #65	@ 0x41
 8014a1e:	5c9b      	ldrb	r3, [r3, r2]
 8014a20:	b2db      	uxtb	r3, r3
 8014a22:	2b20      	cmp	r3, #32
 8014a24:	d000      	beq.n	8014a28 <HAL_I2C_Master_Receive+0x2c>
 8014a26:	e0e8      	b.n	8014bfa <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	2240      	movs	r2, #64	@ 0x40
 8014a2c:	5c9b      	ldrb	r3, [r3, r2]
 8014a2e:	2b01      	cmp	r3, #1
 8014a30:	d101      	bne.n	8014a36 <HAL_I2C_Master_Receive+0x3a>
 8014a32:	2302      	movs	r3, #2
 8014a34:	e0e2      	b.n	8014bfc <HAL_I2C_Master_Receive+0x200>
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	2240      	movs	r2, #64	@ 0x40
 8014a3a:	2101      	movs	r1, #1
 8014a3c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8014a3e:	f7fe fb75 	bl	801312c <HAL_GetTick>
 8014a42:	0003      	movs	r3, r0
 8014a44:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014a46:	2380      	movs	r3, #128	@ 0x80
 8014a48:	0219      	lsls	r1, r3, #8
 8014a4a:	68f8      	ldr	r0, [r7, #12]
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	9300      	str	r3, [sp, #0]
 8014a50:	2319      	movs	r3, #25
 8014a52:	2201      	movs	r2, #1
 8014a54:	f002 f928 	bl	8016ca8 <I2C_WaitOnFlagUntilTimeout>
 8014a58:	1e03      	subs	r3, r0, #0
 8014a5a:	d001      	beq.n	8014a60 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	e0cd      	b.n	8014bfc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	2241      	movs	r2, #65	@ 0x41
 8014a64:	2122      	movs	r1, #34	@ 0x22
 8014a66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	2242      	movs	r2, #66	@ 0x42
 8014a6c:	2110      	movs	r1, #16
 8014a6e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	2200      	movs	r2, #0
 8014a74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	2208      	movs	r2, #8
 8014a80:	18ba      	adds	r2, r7, r2
 8014a82:	8812      	ldrh	r2, [r2, #0]
 8014a84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	2200      	movs	r2, #0
 8014a8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014a90:	b29b      	uxth	r3, r3
 8014a92:	2bff      	cmp	r3, #255	@ 0xff
 8014a94:	d911      	bls.n	8014aba <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	22ff      	movs	r2, #255	@ 0xff
 8014a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014aa0:	b2da      	uxtb	r2, r3
 8014aa2:	2380      	movs	r3, #128	@ 0x80
 8014aa4:	045c      	lsls	r4, r3, #17
 8014aa6:	230a      	movs	r3, #10
 8014aa8:	18fb      	adds	r3, r7, r3
 8014aaa:	8819      	ldrh	r1, [r3, #0]
 8014aac:	68f8      	ldr	r0, [r7, #12]
 8014aae:	4b55      	ldr	r3, [pc, #340]	@ (8014c04 <HAL_I2C_Master_Receive+0x208>)
 8014ab0:	9300      	str	r3, [sp, #0]
 8014ab2:	0023      	movs	r3, r4
 8014ab4:	f002 fb4a 	bl	801714c <I2C_TransferConfig>
 8014ab8:	e076      	b.n	8014ba8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014abe:	b29a      	uxth	r2, r3
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ac8:	b2da      	uxtb	r2, r3
 8014aca:	2380      	movs	r3, #128	@ 0x80
 8014acc:	049c      	lsls	r4, r3, #18
 8014ace:	230a      	movs	r3, #10
 8014ad0:	18fb      	adds	r3, r7, r3
 8014ad2:	8819      	ldrh	r1, [r3, #0]
 8014ad4:	68f8      	ldr	r0, [r7, #12]
 8014ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8014c04 <HAL_I2C_Master_Receive+0x208>)
 8014ad8:	9300      	str	r3, [sp, #0]
 8014ada:	0023      	movs	r3, r4
 8014adc:	f002 fb36 	bl	801714c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8014ae0:	e062      	b.n	8014ba8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014ae2:	697a      	ldr	r2, [r7, #20]
 8014ae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	0018      	movs	r0, r3
 8014aea:	f002 f9b5 	bl	8016e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8014aee:	1e03      	subs	r3, r0, #0
 8014af0:	d001      	beq.n	8014af6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8014af2:	2301      	movs	r3, #1
 8014af4:	e082      	b.n	8014bfc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b00:	b2d2      	uxtb	r2, r2
 8014b02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b08:	1c5a      	adds	r2, r3, #1
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b12:	3b01      	subs	r3, #1
 8014b14:	b29a      	uxth	r2, r3
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b1e:	b29b      	uxth	r3, r3
 8014b20:	3b01      	subs	r3, #1
 8014b22:	b29a      	uxth	r2, r3
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b2c:	b29b      	uxth	r3, r3
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d03a      	beq.n	8014ba8 <HAL_I2C_Master_Receive+0x1ac>
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d136      	bne.n	8014ba8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8014b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014b3c:	68f8      	ldr	r0, [r7, #12]
 8014b3e:	697b      	ldr	r3, [r7, #20]
 8014b40:	9300      	str	r3, [sp, #0]
 8014b42:	0013      	movs	r3, r2
 8014b44:	2200      	movs	r2, #0
 8014b46:	2180      	movs	r1, #128	@ 0x80
 8014b48:	f002 f8ae 	bl	8016ca8 <I2C_WaitOnFlagUntilTimeout>
 8014b4c:	1e03      	subs	r3, r0, #0
 8014b4e:	d001      	beq.n	8014b54 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8014b50:	2301      	movs	r3, #1
 8014b52:	e053      	b.n	8014bfc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b58:	b29b      	uxth	r3, r3
 8014b5a:	2bff      	cmp	r3, #255	@ 0xff
 8014b5c:	d911      	bls.n	8014b82 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	22ff      	movs	r2, #255	@ 0xff
 8014b62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b68:	b2da      	uxtb	r2, r3
 8014b6a:	2380      	movs	r3, #128	@ 0x80
 8014b6c:	045c      	lsls	r4, r3, #17
 8014b6e:	230a      	movs	r3, #10
 8014b70:	18fb      	adds	r3, r7, r3
 8014b72:	8819      	ldrh	r1, [r3, #0]
 8014b74:	68f8      	ldr	r0, [r7, #12]
 8014b76:	2300      	movs	r3, #0
 8014b78:	9300      	str	r3, [sp, #0]
 8014b7a:	0023      	movs	r3, r4
 8014b7c:	f002 fae6 	bl	801714c <I2C_TransferConfig>
 8014b80:	e012      	b.n	8014ba8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b86:	b29a      	uxth	r2, r3
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b90:	b2da      	uxtb	r2, r3
 8014b92:	2380      	movs	r3, #128	@ 0x80
 8014b94:	049c      	lsls	r4, r3, #18
 8014b96:	230a      	movs	r3, #10
 8014b98:	18fb      	adds	r3, r7, r3
 8014b9a:	8819      	ldrh	r1, [r3, #0]
 8014b9c:	68f8      	ldr	r0, [r7, #12]
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	9300      	str	r3, [sp, #0]
 8014ba2:	0023      	movs	r3, r4
 8014ba4:	f002 fad2 	bl	801714c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014bac:	b29b      	uxth	r3, r3
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d197      	bne.n	8014ae2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014bb2:	697a      	ldr	r2, [r7, #20]
 8014bb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	0018      	movs	r0, r3
 8014bba:	f002 f909 	bl	8016dd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8014bbe:	1e03      	subs	r3, r0, #0
 8014bc0:	d001      	beq.n	8014bc6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8014bc2:	2301      	movs	r3, #1
 8014bc4:	e01a      	b.n	8014bfc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	2220      	movs	r2, #32
 8014bcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	685a      	ldr	r2, [r3, #4]
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	490b      	ldr	r1, [pc, #44]	@ (8014c08 <HAL_I2C_Master_Receive+0x20c>)
 8014bda:	400a      	ands	r2, r1
 8014bdc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2241      	movs	r2, #65	@ 0x41
 8014be2:	2120      	movs	r1, #32
 8014be4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	2242      	movs	r2, #66	@ 0x42
 8014bea:	2100      	movs	r1, #0
 8014bec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	2240      	movs	r2, #64	@ 0x40
 8014bf2:	2100      	movs	r1, #0
 8014bf4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	e000      	b.n	8014bfc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8014bfa:	2302      	movs	r3, #2
  }
}
 8014bfc:	0018      	movs	r0, r3
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	b007      	add	sp, #28
 8014c02:	bd90      	pop	{r4, r7, pc}
 8014c04:	80002400 	.word	0x80002400
 8014c08:	fe00e800 	.word	0xfe00e800

08014c0c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8014c0c:	b5b0      	push	{r4, r5, r7, lr}
 8014c0e:	b088      	sub	sp, #32
 8014c10:	af02      	add	r7, sp, #8
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	0008      	movs	r0, r1
 8014c16:	607a      	str	r2, [r7, #4]
 8014c18:	0019      	movs	r1, r3
 8014c1a:	230a      	movs	r3, #10
 8014c1c:	18fb      	adds	r3, r7, r3
 8014c1e:	1c02      	adds	r2, r0, #0
 8014c20:	801a      	strh	r2, [r3, #0]
 8014c22:	2308      	movs	r3, #8
 8014c24:	18fb      	adds	r3, r7, r3
 8014c26:	1c0a      	adds	r2, r1, #0
 8014c28:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	2241      	movs	r2, #65	@ 0x41
 8014c2e:	5c9b      	ldrb	r3, [r3, r2]
 8014c30:	b2db      	uxtb	r3, r3
 8014c32:	2b20      	cmp	r3, #32
 8014c34:	d000      	beq.n	8014c38 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8014c36:	e0dd      	b.n	8014df4 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	699a      	ldr	r2, [r3, #24]
 8014c3e:	2380      	movs	r3, #128	@ 0x80
 8014c40:	021b      	lsls	r3, r3, #8
 8014c42:	401a      	ands	r2, r3
 8014c44:	2380      	movs	r3, #128	@ 0x80
 8014c46:	021b      	lsls	r3, r3, #8
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d101      	bne.n	8014c50 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8014c4c:	2302      	movs	r3, #2
 8014c4e:	e0d2      	b.n	8014df6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	2240      	movs	r2, #64	@ 0x40
 8014c54:	5c9b      	ldrb	r3, [r3, r2]
 8014c56:	2b01      	cmp	r3, #1
 8014c58:	d101      	bne.n	8014c5e <HAL_I2C_Master_Transmit_DMA+0x52>
 8014c5a:	2302      	movs	r3, #2
 8014c5c:	e0cb      	b.n	8014df6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	2240      	movs	r2, #64	@ 0x40
 8014c62:	2101      	movs	r1, #1
 8014c64:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2241      	movs	r2, #65	@ 0x41
 8014c6a:	2121      	movs	r1, #33	@ 0x21
 8014c6c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	2242      	movs	r2, #66	@ 0x42
 8014c72:	2110      	movs	r1, #16
 8014c74:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	2200      	movs	r2, #0
 8014c7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	687a      	ldr	r2, [r7, #4]
 8014c80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	2208      	movs	r2, #8
 8014c86:	18ba      	adds	r2, r7, r2
 8014c88:	8812      	ldrh	r2, [r2, #0]
 8014c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	4a5c      	ldr	r2, [pc, #368]	@ (8014e00 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8014c90:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	4a5b      	ldr	r2, [pc, #364]	@ (8014e04 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8014c96:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014c9c:	b29b      	uxth	r3, r3
 8014c9e:	2bff      	cmp	r3, #255	@ 0xff
 8014ca0:	d906      	bls.n	8014cb0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	22ff      	movs	r2, #255	@ 0xff
 8014ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8014ca8:	2380      	movs	r3, #128	@ 0x80
 8014caa:	045b      	lsls	r3, r3, #17
 8014cac:	617b      	str	r3, [r7, #20]
 8014cae:	e007      	b.n	8014cc0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014cb4:	b29a      	uxth	r2, r3
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8014cba:	2380      	movs	r3, #128	@ 0x80
 8014cbc:	049b      	lsls	r3, r3, #18
 8014cbe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d100      	bne.n	8014cca <HAL_I2C_Master_Transmit_DMA+0xbe>
 8014cc8:	e078      	b.n	8014dbc <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d023      	beq.n	8014d1a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014cd6:	4a4c      	ldr	r2, [pc, #304]	@ (8014e08 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8014cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014cde:	4a4b      	ldr	r2, [pc, #300]	@ (8014e0c <HAL_I2C_Master_Transmit_DMA+0x200>)
 8014ce0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014cee:	2200      	movs	r2, #0
 8014cf0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014cf6:	6879      	ldr	r1, [r7, #4]
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	3328      	adds	r3, #40	@ 0x28
 8014cfe:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8014d04:	2513      	movs	r5, #19
 8014d06:	197c      	adds	r4, r7, r5
 8014d08:	f7fe ff62 	bl	8013bd0 <HAL_DMA_Start_IT>
 8014d0c:	0003      	movs	r3, r0
 8014d0e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8014d10:	197b      	adds	r3, r7, r5
 8014d12:	781b      	ldrb	r3, [r3, #0]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d13d      	bne.n	8014d94 <HAL_I2C_Master_Transmit_DMA+0x188>
 8014d18:	e013      	b.n	8014d42 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	2241      	movs	r2, #65	@ 0x41
 8014d1e:	2120      	movs	r1, #32
 8014d20:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	2242      	movs	r2, #66	@ 0x42
 8014d26:	2100      	movs	r1, #0
 8014d28:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d2e:	2280      	movs	r2, #128	@ 0x80
 8014d30:	431a      	orrs	r2, r3
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	2240      	movs	r2, #64	@ 0x40
 8014d3a:	2100      	movs	r1, #0
 8014d3c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8014d3e:	2301      	movs	r3, #1
 8014d40:	e059      	b.n	8014df6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d46:	b2da      	uxtb	r2, r3
 8014d48:	697c      	ldr	r4, [r7, #20]
 8014d4a:	230a      	movs	r3, #10
 8014d4c:	18fb      	adds	r3, r7, r3
 8014d4e:	8819      	ldrh	r1, [r3, #0]
 8014d50:	68f8      	ldr	r0, [r7, #12]
 8014d52:	4b2f      	ldr	r3, [pc, #188]	@ (8014e10 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8014d54:	9300      	str	r3, [sp, #0]
 8014d56:	0023      	movs	r3, r4
 8014d58:	f002 f9f8 	bl	801714c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d60:	b29a      	uxth	r2, r3
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d66:	1ad3      	subs	r3, r2, r3
 8014d68:	b29a      	uxth	r2, r3
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	2240      	movs	r2, #64	@ 0x40
 8014d72:	2100      	movs	r1, #0
 8014d74:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	2110      	movs	r1, #16
 8014d7a:	0018      	movs	r0, r3
 8014d7c:	f002 fa20 	bl	80171c0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	681a      	ldr	r2, [r3, #0]
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	2180      	movs	r1, #128	@ 0x80
 8014d8c:	01c9      	lsls	r1, r1, #7
 8014d8e:	430a      	orrs	r2, r1
 8014d90:	601a      	str	r2, [r3, #0]
 8014d92:	e02d      	b.n	8014df0 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	2241      	movs	r2, #65	@ 0x41
 8014d98:	2120      	movs	r1, #32
 8014d9a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	2242      	movs	r2, #66	@ 0x42
 8014da0:	2100      	movs	r1, #0
 8014da2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014da8:	2210      	movs	r2, #16
 8014daa:	431a      	orrs	r2, r3
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	2240      	movs	r2, #64	@ 0x40
 8014db4:	2100      	movs	r1, #0
 8014db6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014db8:	2301      	movs	r3, #1
 8014dba:	e01c      	b.n	8014df6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	4a15      	ldr	r2, [pc, #84]	@ (8014e14 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8014dc0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014dc6:	b2da      	uxtb	r2, r3
 8014dc8:	2380      	movs	r3, #128	@ 0x80
 8014dca:	049c      	lsls	r4, r3, #18
 8014dcc:	230a      	movs	r3, #10
 8014dce:	18fb      	adds	r3, r7, r3
 8014dd0:	8819      	ldrh	r1, [r3, #0]
 8014dd2:	68f8      	ldr	r0, [r7, #12]
 8014dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8014e10 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8014dd6:	9300      	str	r3, [sp, #0]
 8014dd8:	0023      	movs	r3, r4
 8014dda:	f002 f9b7 	bl	801714c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	2240      	movs	r2, #64	@ 0x40
 8014de2:	2100      	movs	r1, #0
 8014de4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	2101      	movs	r1, #1
 8014dea:	0018      	movs	r0, r3
 8014dec:	f002 f9e8 	bl	80171c0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8014df0:	2300      	movs	r3, #0
 8014df2:	e000      	b.n	8014df6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8014df4:	2302      	movs	r3, #2
  }
}
 8014df6:	0018      	movs	r0, r3
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	b006      	add	sp, #24
 8014dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8014dfe:	46c0      	nop			@ (mov r8, r8)
 8014e00:	ffff0000 	.word	0xffff0000
 8014e04:	08015a7d 	.word	0x08015a7d
 8014e08:	08016af9 	.word	0x08016af9
 8014e0c:	08016c39 	.word	0x08016c39
 8014e10:	80002000 	.word	0x80002000
 8014e14:	08015629 	.word	0x08015629

08014e18 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8014e18:	b5b0      	push	{r4, r5, r7, lr}
 8014e1a:	b088      	sub	sp, #32
 8014e1c:	af02      	add	r7, sp, #8
 8014e1e:	60f8      	str	r0, [r7, #12]
 8014e20:	0008      	movs	r0, r1
 8014e22:	607a      	str	r2, [r7, #4]
 8014e24:	0019      	movs	r1, r3
 8014e26:	230a      	movs	r3, #10
 8014e28:	18fb      	adds	r3, r7, r3
 8014e2a:	1c02      	adds	r2, r0, #0
 8014e2c:	801a      	strh	r2, [r3, #0]
 8014e2e:	2308      	movs	r3, #8
 8014e30:	18fb      	adds	r3, r7, r3
 8014e32:	1c0a      	adds	r2, r1, #0
 8014e34:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	2241      	movs	r2, #65	@ 0x41
 8014e3a:	5c9b      	ldrb	r3, [r3, r2]
 8014e3c:	b2db      	uxtb	r3, r3
 8014e3e:	2b20      	cmp	r3, #32
 8014e40:	d000      	beq.n	8014e44 <HAL_I2C_Master_Receive_DMA+0x2c>
 8014e42:	e0dd      	b.n	8015000 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	699a      	ldr	r2, [r3, #24]
 8014e4a:	2380      	movs	r3, #128	@ 0x80
 8014e4c:	021b      	lsls	r3, r3, #8
 8014e4e:	401a      	ands	r2, r3
 8014e50:	2380      	movs	r3, #128	@ 0x80
 8014e52:	021b      	lsls	r3, r3, #8
 8014e54:	429a      	cmp	r2, r3
 8014e56:	d101      	bne.n	8014e5c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8014e58:	2302      	movs	r3, #2
 8014e5a:	e0d2      	b.n	8015002 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	2240      	movs	r2, #64	@ 0x40
 8014e60:	5c9b      	ldrb	r3, [r3, r2]
 8014e62:	2b01      	cmp	r3, #1
 8014e64:	d101      	bne.n	8014e6a <HAL_I2C_Master_Receive_DMA+0x52>
 8014e66:	2302      	movs	r3, #2
 8014e68:	e0cb      	b.n	8015002 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	2240      	movs	r2, #64	@ 0x40
 8014e6e:	2101      	movs	r1, #1
 8014e70:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	2241      	movs	r2, #65	@ 0x41
 8014e76:	2122      	movs	r1, #34	@ 0x22
 8014e78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	2242      	movs	r2, #66	@ 0x42
 8014e7e:	2110      	movs	r1, #16
 8014e80:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	2200      	movs	r2, #0
 8014e86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	687a      	ldr	r2, [r7, #4]
 8014e8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	2208      	movs	r2, #8
 8014e92:	18ba      	adds	r2, r7, r2
 8014e94:	8812      	ldrh	r2, [r2, #0]
 8014e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	4a5c      	ldr	r2, [pc, #368]	@ (801500c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8014e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	4a5b      	ldr	r2, [pc, #364]	@ (8015010 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8014ea2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ea8:	b29b      	uxth	r3, r3
 8014eaa:	2bff      	cmp	r3, #255	@ 0xff
 8014eac:	d906      	bls.n	8014ebc <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	22ff      	movs	r2, #255	@ 0xff
 8014eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8014eb4:	2380      	movs	r3, #128	@ 0x80
 8014eb6:	045b      	lsls	r3, r3, #17
 8014eb8:	617b      	str	r3, [r7, #20]
 8014eba:	e007      	b.n	8014ecc <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ec0:	b29a      	uxth	r2, r3
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8014ec6:	2380      	movs	r3, #128	@ 0x80
 8014ec8:	049b      	lsls	r3, r3, #18
 8014eca:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d100      	bne.n	8014ed6 <HAL_I2C_Master_Receive_DMA+0xbe>
 8014ed4:	e078      	b.n	8014fc8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d023      	beq.n	8014f26 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ee2:	4a4c      	ldr	r2, [pc, #304]	@ (8015014 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8014ee4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014eea:	4a4b      	ldr	r2, [pc, #300]	@ (8015018 <HAL_I2C_Master_Receive_DMA+0x200>)
 8014eec:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014efa:	2200      	movs	r2, #0
 8014efc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	3324      	adds	r3, #36	@ 0x24
 8014f08:	0019      	movs	r1, r3
 8014f0a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8014f10:	2513      	movs	r5, #19
 8014f12:	197c      	adds	r4, r7, r5
 8014f14:	f7fe fe5c 	bl	8013bd0 <HAL_DMA_Start_IT>
 8014f18:	0003      	movs	r3, r0
 8014f1a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8014f1c:	197b      	adds	r3, r7, r5
 8014f1e:	781b      	ldrb	r3, [r3, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d13d      	bne.n	8014fa0 <HAL_I2C_Master_Receive_DMA+0x188>
 8014f24:	e013      	b.n	8014f4e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	2241      	movs	r2, #65	@ 0x41
 8014f2a:	2120      	movs	r1, #32
 8014f2c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	2242      	movs	r2, #66	@ 0x42
 8014f32:	2100      	movs	r1, #0
 8014f34:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f3a:	2280      	movs	r2, #128	@ 0x80
 8014f3c:	431a      	orrs	r2, r3
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	2240      	movs	r2, #64	@ 0x40
 8014f46:	2100      	movs	r1, #0
 8014f48:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8014f4a:	2301      	movs	r3, #1
 8014f4c:	e059      	b.n	8015002 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f52:	b2da      	uxtb	r2, r3
 8014f54:	697c      	ldr	r4, [r7, #20]
 8014f56:	230a      	movs	r3, #10
 8014f58:	18fb      	adds	r3, r7, r3
 8014f5a:	8819      	ldrh	r1, [r3, #0]
 8014f5c:	68f8      	ldr	r0, [r7, #12]
 8014f5e:	4b2f      	ldr	r3, [pc, #188]	@ (801501c <HAL_I2C_Master_Receive_DMA+0x204>)
 8014f60:	9300      	str	r3, [sp, #0]
 8014f62:	0023      	movs	r3, r4
 8014f64:	f002 f8f2 	bl	801714c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f6c:	b29a      	uxth	r2, r3
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f72:	1ad3      	subs	r3, r2, r3
 8014f74:	b29a      	uxth	r2, r3
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	2240      	movs	r2, #64	@ 0x40
 8014f7e:	2100      	movs	r1, #0
 8014f80:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	2110      	movs	r1, #16
 8014f86:	0018      	movs	r0, r3
 8014f88:	f002 f91a 	bl	80171c0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	681a      	ldr	r2, [r3, #0]
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	2180      	movs	r1, #128	@ 0x80
 8014f98:	0209      	lsls	r1, r1, #8
 8014f9a:	430a      	orrs	r2, r1
 8014f9c:	601a      	str	r2, [r3, #0]
 8014f9e:	e02d      	b.n	8014ffc <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	2241      	movs	r2, #65	@ 0x41
 8014fa4:	2120      	movs	r1, #32
 8014fa6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	2242      	movs	r2, #66	@ 0x42
 8014fac:	2100      	movs	r1, #0
 8014fae:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014fb4:	2210      	movs	r2, #16
 8014fb6:	431a      	orrs	r2, r3
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	2240      	movs	r2, #64	@ 0x40
 8014fc0:	2100      	movs	r1, #0
 8014fc2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014fc4:	2301      	movs	r3, #1
 8014fc6:	e01c      	b.n	8015002 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	4a15      	ldr	r2, [pc, #84]	@ (8015020 <HAL_I2C_Master_Receive_DMA+0x208>)
 8014fcc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014fd2:	b2da      	uxtb	r2, r3
 8014fd4:	2380      	movs	r3, #128	@ 0x80
 8014fd6:	049c      	lsls	r4, r3, #18
 8014fd8:	230a      	movs	r3, #10
 8014fda:	18fb      	adds	r3, r7, r3
 8014fdc:	8819      	ldrh	r1, [r3, #0]
 8014fde:	68f8      	ldr	r0, [r7, #12]
 8014fe0:	4b0e      	ldr	r3, [pc, #56]	@ (801501c <HAL_I2C_Master_Receive_DMA+0x204>)
 8014fe2:	9300      	str	r3, [sp, #0]
 8014fe4:	0023      	movs	r3, r4
 8014fe6:	f002 f8b1 	bl	801714c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	2240      	movs	r2, #64	@ 0x40
 8014fee:	2100      	movs	r1, #0
 8014ff0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	2101      	movs	r1, #1
 8014ff6:	0018      	movs	r0, r3
 8014ff8:	f002 f8e2 	bl	80171c0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	e000      	b.n	8015002 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8015000:	2302      	movs	r3, #2
  }
}
 8015002:	0018      	movs	r0, r3
 8015004:	46bd      	mov	sp, r7
 8015006:	b006      	add	sp, #24
 8015008:	bdb0      	pop	{r4, r5, r7, pc}
 801500a:	46c0      	nop			@ (mov r8, r8)
 801500c:	ffff0000 	.word	0xffff0000
 8015010:	08015a7d 	.word	0x08015a7d
 8015014:	08016b99 	.word	0x08016b99
 8015018:	08016c39 	.word	0x08016c39
 801501c:	80002400 	.word	0x80002400
 8015020:	08015629 	.word	0x08015629

08015024 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015024:	b590      	push	{r4, r7, lr}
 8015026:	b089      	sub	sp, #36	@ 0x24
 8015028:	af02      	add	r7, sp, #8
 801502a:	60f8      	str	r0, [r7, #12]
 801502c:	000c      	movs	r4, r1
 801502e:	0010      	movs	r0, r2
 8015030:	0019      	movs	r1, r3
 8015032:	230a      	movs	r3, #10
 8015034:	18fb      	adds	r3, r7, r3
 8015036:	1c22      	adds	r2, r4, #0
 8015038:	801a      	strh	r2, [r3, #0]
 801503a:	2308      	movs	r3, #8
 801503c:	18fb      	adds	r3, r7, r3
 801503e:	1c02      	adds	r2, r0, #0
 8015040:	801a      	strh	r2, [r3, #0]
 8015042:	1dbb      	adds	r3, r7, #6
 8015044:	1c0a      	adds	r2, r1, #0
 8015046:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	2241      	movs	r2, #65	@ 0x41
 801504c:	5c9b      	ldrb	r3, [r3, r2]
 801504e:	b2db      	uxtb	r3, r3
 8015050:	2b20      	cmp	r3, #32
 8015052:	d000      	beq.n	8015056 <HAL_I2C_Mem_Read+0x32>
 8015054:	e110      	b.n	8015278 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8015056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015058:	2b00      	cmp	r3, #0
 801505a:	d004      	beq.n	8015066 <HAL_I2C_Mem_Read+0x42>
 801505c:	232c      	movs	r3, #44	@ 0x2c
 801505e:	18fb      	adds	r3, r7, r3
 8015060:	881b      	ldrh	r3, [r3, #0]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d105      	bne.n	8015072 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	2280      	movs	r2, #128	@ 0x80
 801506a:	0092      	lsls	r2, r2, #2
 801506c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 801506e:	2301      	movs	r3, #1
 8015070:	e103      	b.n	801527a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	2240      	movs	r2, #64	@ 0x40
 8015076:	5c9b      	ldrb	r3, [r3, r2]
 8015078:	2b01      	cmp	r3, #1
 801507a:	d101      	bne.n	8015080 <HAL_I2C_Mem_Read+0x5c>
 801507c:	2302      	movs	r3, #2
 801507e:	e0fc      	b.n	801527a <HAL_I2C_Mem_Read+0x256>
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	2240      	movs	r2, #64	@ 0x40
 8015084:	2101      	movs	r1, #1
 8015086:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015088:	f7fe f850 	bl	801312c <HAL_GetTick>
 801508c:	0003      	movs	r3, r0
 801508e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015090:	2380      	movs	r3, #128	@ 0x80
 8015092:	0219      	lsls	r1, r3, #8
 8015094:	68f8      	ldr	r0, [r7, #12]
 8015096:	697b      	ldr	r3, [r7, #20]
 8015098:	9300      	str	r3, [sp, #0]
 801509a:	2319      	movs	r3, #25
 801509c:	2201      	movs	r2, #1
 801509e:	f001 fe03 	bl	8016ca8 <I2C_WaitOnFlagUntilTimeout>
 80150a2:	1e03      	subs	r3, r0, #0
 80150a4:	d001      	beq.n	80150aa <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80150a6:	2301      	movs	r3, #1
 80150a8:	e0e7      	b.n	801527a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	2241      	movs	r2, #65	@ 0x41
 80150ae:	2122      	movs	r1, #34	@ 0x22
 80150b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	2242      	movs	r2, #66	@ 0x42
 80150b6:	2140      	movs	r1, #64	@ 0x40
 80150b8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	2200      	movs	r2, #0
 80150be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80150c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	222c      	movs	r2, #44	@ 0x2c
 80150ca:	18ba      	adds	r2, r7, r2
 80150cc:	8812      	ldrh	r2, [r2, #0]
 80150ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	2200      	movs	r2, #0
 80150d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80150d6:	1dbb      	adds	r3, r7, #6
 80150d8:	881c      	ldrh	r4, [r3, #0]
 80150da:	2308      	movs	r3, #8
 80150dc:	18fb      	adds	r3, r7, r3
 80150de:	881a      	ldrh	r2, [r3, #0]
 80150e0:	230a      	movs	r3, #10
 80150e2:	18fb      	adds	r3, r7, r3
 80150e4:	8819      	ldrh	r1, [r3, #0]
 80150e6:	68f8      	ldr	r0, [r7, #12]
 80150e8:	697b      	ldr	r3, [r7, #20]
 80150ea:	9301      	str	r3, [sp, #4]
 80150ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150ee:	9300      	str	r3, [sp, #0]
 80150f0:	0023      	movs	r3, r4
 80150f2:	f000 ffc1 	bl	8016078 <I2C_RequestMemoryRead>
 80150f6:	1e03      	subs	r3, r0, #0
 80150f8:	d005      	beq.n	8015106 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	2240      	movs	r2, #64	@ 0x40
 80150fe:	2100      	movs	r1, #0
 8015100:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015102:	2301      	movs	r3, #1
 8015104:	e0b9      	b.n	801527a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801510a:	b29b      	uxth	r3, r3
 801510c:	2bff      	cmp	r3, #255	@ 0xff
 801510e:	d911      	bls.n	8015134 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	22ff      	movs	r2, #255	@ 0xff
 8015114:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801511a:	b2da      	uxtb	r2, r3
 801511c:	2380      	movs	r3, #128	@ 0x80
 801511e:	045c      	lsls	r4, r3, #17
 8015120:	230a      	movs	r3, #10
 8015122:	18fb      	adds	r3, r7, r3
 8015124:	8819      	ldrh	r1, [r3, #0]
 8015126:	68f8      	ldr	r0, [r7, #12]
 8015128:	4b56      	ldr	r3, [pc, #344]	@ (8015284 <HAL_I2C_Mem_Read+0x260>)
 801512a:	9300      	str	r3, [sp, #0]
 801512c:	0023      	movs	r3, r4
 801512e:	f002 f80d 	bl	801714c <I2C_TransferConfig>
 8015132:	e012      	b.n	801515a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015138:	b29a      	uxth	r2, r3
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015142:	b2da      	uxtb	r2, r3
 8015144:	2380      	movs	r3, #128	@ 0x80
 8015146:	049c      	lsls	r4, r3, #18
 8015148:	230a      	movs	r3, #10
 801514a:	18fb      	adds	r3, r7, r3
 801514c:	8819      	ldrh	r1, [r3, #0]
 801514e:	68f8      	ldr	r0, [r7, #12]
 8015150:	4b4c      	ldr	r3, [pc, #304]	@ (8015284 <HAL_I2C_Mem_Read+0x260>)
 8015152:	9300      	str	r3, [sp, #0]
 8015154:	0023      	movs	r3, r4
 8015156:	f001 fff9 	bl	801714c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801515a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801515c:	68f8      	ldr	r0, [r7, #12]
 801515e:	697b      	ldr	r3, [r7, #20]
 8015160:	9300      	str	r3, [sp, #0]
 8015162:	0013      	movs	r3, r2
 8015164:	2200      	movs	r2, #0
 8015166:	2104      	movs	r1, #4
 8015168:	f001 fd9e 	bl	8016ca8 <I2C_WaitOnFlagUntilTimeout>
 801516c:	1e03      	subs	r3, r0, #0
 801516e:	d001      	beq.n	8015174 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8015170:	2301      	movs	r3, #1
 8015172:	e082      	b.n	801527a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801517e:	b2d2      	uxtb	r2, r2
 8015180:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015186:	1c5a      	adds	r2, r3, #1
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015190:	3b01      	subs	r3, #1
 8015192:	b29a      	uxth	r2, r3
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801519c:	b29b      	uxth	r3, r3
 801519e:	3b01      	subs	r3, #1
 80151a0:	b29a      	uxth	r2, r3
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80151aa:	b29b      	uxth	r3, r3
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d03a      	beq.n	8015226 <HAL_I2C_Mem_Read+0x202>
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d136      	bne.n	8015226 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80151b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80151ba:	68f8      	ldr	r0, [r7, #12]
 80151bc:	697b      	ldr	r3, [r7, #20]
 80151be:	9300      	str	r3, [sp, #0]
 80151c0:	0013      	movs	r3, r2
 80151c2:	2200      	movs	r2, #0
 80151c4:	2180      	movs	r1, #128	@ 0x80
 80151c6:	f001 fd6f 	bl	8016ca8 <I2C_WaitOnFlagUntilTimeout>
 80151ca:	1e03      	subs	r3, r0, #0
 80151cc:	d001      	beq.n	80151d2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80151ce:	2301      	movs	r3, #1
 80151d0:	e053      	b.n	801527a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80151d6:	b29b      	uxth	r3, r3
 80151d8:	2bff      	cmp	r3, #255	@ 0xff
 80151da:	d911      	bls.n	8015200 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	22ff      	movs	r2, #255	@ 0xff
 80151e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80151e6:	b2da      	uxtb	r2, r3
 80151e8:	2380      	movs	r3, #128	@ 0x80
 80151ea:	045c      	lsls	r4, r3, #17
 80151ec:	230a      	movs	r3, #10
 80151ee:	18fb      	adds	r3, r7, r3
 80151f0:	8819      	ldrh	r1, [r3, #0]
 80151f2:	68f8      	ldr	r0, [r7, #12]
 80151f4:	2300      	movs	r3, #0
 80151f6:	9300      	str	r3, [sp, #0]
 80151f8:	0023      	movs	r3, r4
 80151fa:	f001 ffa7 	bl	801714c <I2C_TransferConfig>
 80151fe:	e012      	b.n	8015226 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015204:	b29a      	uxth	r2, r3
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801520e:	b2da      	uxtb	r2, r3
 8015210:	2380      	movs	r3, #128	@ 0x80
 8015212:	049c      	lsls	r4, r3, #18
 8015214:	230a      	movs	r3, #10
 8015216:	18fb      	adds	r3, r7, r3
 8015218:	8819      	ldrh	r1, [r3, #0]
 801521a:	68f8      	ldr	r0, [r7, #12]
 801521c:	2300      	movs	r3, #0
 801521e:	9300      	str	r3, [sp, #0]
 8015220:	0023      	movs	r3, r4
 8015222:	f001 ff93 	bl	801714c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801522a:	b29b      	uxth	r3, r3
 801522c:	2b00      	cmp	r3, #0
 801522e:	d194      	bne.n	801515a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015230:	697a      	ldr	r2, [r7, #20]
 8015232:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	0018      	movs	r0, r3
 8015238:	f001 fdca 	bl	8016dd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 801523c:	1e03      	subs	r3, r0, #0
 801523e:	d001      	beq.n	8015244 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8015240:	2301      	movs	r3, #1
 8015242:	e01a      	b.n	801527a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	2220      	movs	r2, #32
 801524a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	685a      	ldr	r2, [r3, #4]
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	490c      	ldr	r1, [pc, #48]	@ (8015288 <HAL_I2C_Mem_Read+0x264>)
 8015258:	400a      	ands	r2, r1
 801525a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	2241      	movs	r2, #65	@ 0x41
 8015260:	2120      	movs	r1, #32
 8015262:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	2242      	movs	r2, #66	@ 0x42
 8015268:	2100      	movs	r1, #0
 801526a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	2240      	movs	r2, #64	@ 0x40
 8015270:	2100      	movs	r1, #0
 8015272:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8015274:	2300      	movs	r3, #0
 8015276:	e000      	b.n	801527a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8015278:	2302      	movs	r3, #2
  }
}
 801527a:	0018      	movs	r0, r3
 801527c:	46bd      	mov	sp, r7
 801527e:	b007      	add	sp, #28
 8015280:	bd90      	pop	{r4, r7, pc}
 8015282:	46c0      	nop			@ (mov r8, r8)
 8015284:	80002400 	.word	0x80002400
 8015288:	fe00e800 	.word	0xfe00e800

0801528c <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801528c:	b5b0      	push	{r4, r5, r7, lr}
 801528e:	b088      	sub	sp, #32
 8015290:	af02      	add	r7, sp, #8
 8015292:	60f8      	str	r0, [r7, #12]
 8015294:	000c      	movs	r4, r1
 8015296:	0010      	movs	r0, r2
 8015298:	0019      	movs	r1, r3
 801529a:	230a      	movs	r3, #10
 801529c:	18fb      	adds	r3, r7, r3
 801529e:	1c22      	adds	r2, r4, #0
 80152a0:	801a      	strh	r2, [r3, #0]
 80152a2:	2308      	movs	r3, #8
 80152a4:	18fb      	adds	r3, r7, r3
 80152a6:	1c02      	adds	r2, r0, #0
 80152a8:	801a      	strh	r2, [r3, #0]
 80152aa:	1dbb      	adds	r3, r7, #6
 80152ac:	1c0a      	adds	r2, r1, #0
 80152ae:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	2241      	movs	r2, #65	@ 0x41
 80152b4:	5c9b      	ldrb	r3, [r3, r2]
 80152b6:	b2db      	uxtb	r3, r3
 80152b8:	2b20      	cmp	r3, #32
 80152ba:	d000      	beq.n	80152be <HAL_I2C_Mem_Write_DMA+0x32>
 80152bc:	e0d8      	b.n	8015470 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 80152be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d004      	beq.n	80152ce <HAL_I2C_Mem_Write_DMA+0x42>
 80152c4:	232c      	movs	r3, #44	@ 0x2c
 80152c6:	18fb      	adds	r3, r7, r3
 80152c8:	881b      	ldrh	r3, [r3, #0]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d105      	bne.n	80152da <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	2280      	movs	r2, #128	@ 0x80
 80152d2:	0092      	lsls	r2, r2, #2
 80152d4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80152d6:	2301      	movs	r3, #1
 80152d8:	e0cb      	b.n	8015472 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	699a      	ldr	r2, [r3, #24]
 80152e0:	2380      	movs	r3, #128	@ 0x80
 80152e2:	021b      	lsls	r3, r3, #8
 80152e4:	401a      	ands	r2, r3
 80152e6:	2380      	movs	r3, #128	@ 0x80
 80152e8:	021b      	lsls	r3, r3, #8
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d101      	bne.n	80152f2 <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 80152ee:	2302      	movs	r3, #2
 80152f0:	e0bf      	b.n	8015472 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	2240      	movs	r2, #64	@ 0x40
 80152f6:	5c9b      	ldrb	r3, [r3, r2]
 80152f8:	2b01      	cmp	r3, #1
 80152fa:	d101      	bne.n	8015300 <HAL_I2C_Mem_Write_DMA+0x74>
 80152fc:	2302      	movs	r3, #2
 80152fe:	e0b8      	b.n	8015472 <HAL_I2C_Mem_Write_DMA+0x1e6>
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	2240      	movs	r2, #64	@ 0x40
 8015304:	2101      	movs	r1, #1
 8015306:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	2241      	movs	r2, #65	@ 0x41
 801530c:	2121      	movs	r1, #33	@ 0x21
 801530e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	2242      	movs	r2, #66	@ 0x42
 8015314:	2140      	movs	r1, #64	@ 0x40
 8015316:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	2200      	movs	r2, #0
 801531c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015322:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	222c      	movs	r2, #44	@ 0x2c
 8015328:	18ba      	adds	r2, r7, r2
 801532a:	8812      	ldrh	r2, [r2, #0]
 801532c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	4a52      	ldr	r2, [pc, #328]	@ (801547c <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8015332:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	4a52      	ldr	r2, [pc, #328]	@ (8015480 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8015338:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 801533a:	230a      	movs	r3, #10
 801533c:	18fb      	adds	r3, r7, r3
 801533e:	881a      	ldrh	r2, [r3, #0]
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015348:	b29b      	uxth	r3, r3
 801534a:	2bff      	cmp	r3, #255	@ 0xff
 801534c:	d903      	bls.n	8015356 <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	22ff      	movs	r2, #255	@ 0xff
 8015352:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015354:	e004      	b.n	8015360 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801535a:	b29a      	uxth	r2, r3
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8015360:	1dbb      	adds	r3, r7, #6
 8015362:	881b      	ldrh	r3, [r3, #0]
 8015364:	2b01      	cmp	r3, #1
 8015366:	d10b      	bne.n	8015380 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8015368:	2308      	movs	r3, #8
 801536a:	18fb      	adds	r3, r7, r3
 801536c:	881b      	ldrh	r3, [r3, #0]
 801536e:	b2da      	uxtb	r2, r3
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	2201      	movs	r2, #1
 801537a:	4252      	negs	r2, r2
 801537c:	651a      	str	r2, [r3, #80]	@ 0x50
 801537e:	e00e      	b.n	801539e <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8015380:	2108      	movs	r1, #8
 8015382:	187b      	adds	r3, r7, r1
 8015384:	881b      	ldrh	r3, [r3, #0]
 8015386:	0a1b      	lsrs	r3, r3, #8
 8015388:	b29b      	uxth	r3, r3
 801538a:	b2da      	uxtb	r2, r3
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8015392:	187b      	adds	r3, r7, r1
 8015394:	881b      	ldrh	r3, [r3, #0]
 8015396:	b2db      	uxtb	r3, r3
 8015398:	001a      	movs	r2, r3
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d023      	beq.n	80153ee <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153aa:	4a36      	ldr	r2, [pc, #216]	@ (8015484 <HAL_I2C_Mem_Write_DMA+0x1f8>)
 80153ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153b2:	4a35      	ldr	r2, [pc, #212]	@ (8015488 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 80153b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153ba:	2200      	movs	r2, #0
 80153bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153c2:	2200      	movs	r2, #0
 80153c4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80153ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	3328      	adds	r3, #40	@ 0x28
 80153d2:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80153d8:	2517      	movs	r5, #23
 80153da:	197c      	adds	r4, r7, r5
 80153dc:	f7fe fbf8 	bl	8013bd0 <HAL_DMA_Start_IT>
 80153e0:	0003      	movs	r3, r0
 80153e2:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80153e4:	197b      	adds	r3, r7, r5
 80153e6:	781b      	ldrb	r3, [r3, #0]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d12d      	bne.n	8015448 <HAL_I2C_Mem_Write_DMA+0x1bc>
 80153ec:	e013      	b.n	8015416 <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	2241      	movs	r2, #65	@ 0x41
 80153f2:	2120      	movs	r1, #32
 80153f4:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	2242      	movs	r2, #66	@ 0x42
 80153fa:	2100      	movs	r1, #0
 80153fc:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015402:	2280      	movs	r2, #128	@ 0x80
 8015404:	431a      	orrs	r2, r3
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	2240      	movs	r2, #64	@ 0x40
 801540e:	2100      	movs	r1, #0
 8015410:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015412:	2301      	movs	r3, #1
 8015414:	e02d      	b.n	8015472 <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8015416:	1dbb      	adds	r3, r7, #6
 8015418:	881b      	ldrh	r3, [r3, #0]
 801541a:	b2da      	uxtb	r2, r3
 801541c:	2380      	movs	r3, #128	@ 0x80
 801541e:	045c      	lsls	r4, r3, #17
 8015420:	230a      	movs	r3, #10
 8015422:	18fb      	adds	r3, r7, r3
 8015424:	8819      	ldrh	r1, [r3, #0]
 8015426:	68f8      	ldr	r0, [r7, #12]
 8015428:	4b18      	ldr	r3, [pc, #96]	@ (801548c <HAL_I2C_Mem_Write_DMA+0x200>)
 801542a:	9300      	str	r3, [sp, #0]
 801542c:	0023      	movs	r3, r4
 801542e:	f001 fe8d 	bl	801714c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	2240      	movs	r2, #64	@ 0x40
 8015436:	2100      	movs	r1, #0
 8015438:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	2101      	movs	r1, #1
 801543e:	0018      	movs	r0, r3
 8015440:	f001 febe 	bl	80171c0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8015444:	2300      	movs	r3, #0
 8015446:	e014      	b.n	8015472 <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	2241      	movs	r2, #65	@ 0x41
 801544c:	2120      	movs	r1, #32
 801544e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	2242      	movs	r2, #66	@ 0x42
 8015454:	2100      	movs	r1, #0
 8015456:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801545c:	2210      	movs	r2, #16
 801545e:	431a      	orrs	r2, r3
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	2240      	movs	r2, #64	@ 0x40
 8015468:	2100      	movs	r1, #0
 801546a:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 801546c:	2301      	movs	r3, #1
 801546e:	e000      	b.n	8015472 <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8015470:	2302      	movs	r3, #2
  }
}
 8015472:	0018      	movs	r0, r3
 8015474:	46bd      	mov	sp, r7
 8015476:	b006      	add	sp, #24
 8015478:	bdb0      	pop	{r4, r5, r7, pc}
 801547a:	46c0      	nop			@ (mov r8, r8)
 801547c:	ffff0000 	.word	0xffff0000
 8015480:	08015c75 	.word	0x08015c75
 8015484:	08016af9 	.word	0x08016af9
 8015488:	08016c39 	.word	0x08016c39
 801548c:	80002000 	.word	0x80002000

08015490 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b084      	sub	sp, #16
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	699b      	ldr	r3, [r3, #24]
 801549e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d005      	beq.n	80154bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80154b4:	68ba      	ldr	r2, [r7, #8]
 80154b6:	68f9      	ldr	r1, [r7, #12]
 80154b8:	6878      	ldr	r0, [r7, #4]
 80154ba:	4798      	blx	r3
  }
}
 80154bc:	46c0      	nop			@ (mov r8, r8)
 80154be:	46bd      	mov	sp, r7
 80154c0:	b004      	add	sp, #16
 80154c2:	bd80      	pop	{r7, pc}

080154c4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b086      	sub	sp, #24
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	699b      	ldr	r3, [r3, #24]
 80154d2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80154dc:	697a      	ldr	r2, [r7, #20]
 80154de:	2380      	movs	r3, #128	@ 0x80
 80154e0:	005b      	lsls	r3, r3, #1
 80154e2:	4013      	ands	r3, r2
 80154e4:	d00e      	beq.n	8015504 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80154e6:	693b      	ldr	r3, [r7, #16]
 80154e8:	2280      	movs	r2, #128	@ 0x80
 80154ea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80154ec:	d00a      	beq.n	8015504 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154f2:	2201      	movs	r2, #1
 80154f4:	431a      	orrs	r2, r3
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	2280      	movs	r2, #128	@ 0x80
 8015500:	0052      	lsls	r2, r2, #1
 8015502:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8015504:	697a      	ldr	r2, [r7, #20]
 8015506:	2380      	movs	r3, #128	@ 0x80
 8015508:	00db      	lsls	r3, r3, #3
 801550a:	4013      	ands	r3, r2
 801550c:	d00e      	beq.n	801552c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801550e:	693b      	ldr	r3, [r7, #16]
 8015510:	2280      	movs	r2, #128	@ 0x80
 8015512:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8015514:	d00a      	beq.n	801552c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801551a:	2208      	movs	r2, #8
 801551c:	431a      	orrs	r2, r3
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	2280      	movs	r2, #128	@ 0x80
 8015528:	00d2      	lsls	r2, r2, #3
 801552a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 801552c:	697a      	ldr	r2, [r7, #20]
 801552e:	2380      	movs	r3, #128	@ 0x80
 8015530:	009b      	lsls	r3, r3, #2
 8015532:	4013      	ands	r3, r2
 8015534:	d00e      	beq.n	8015554 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8015536:	693b      	ldr	r3, [r7, #16]
 8015538:	2280      	movs	r2, #128	@ 0x80
 801553a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 801553c:	d00a      	beq.n	8015554 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015542:	2202      	movs	r2, #2
 8015544:	431a      	orrs	r2, r3
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	2280      	movs	r2, #128	@ 0x80
 8015550:	0092      	lsls	r2, r2, #2
 8015552:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015558:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	220b      	movs	r2, #11
 801555e:	4013      	ands	r3, r2
 8015560:	d005      	beq.n	801556e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8015562:	68fa      	ldr	r2, [r7, #12]
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	0011      	movs	r1, r2
 8015568:	0018      	movs	r0, r3
 801556a:	f001 f977 	bl	801685c <I2C_ITError>
  }
}
 801556e:	46c0      	nop			@ (mov r8, r8)
 8015570:	46bd      	mov	sp, r7
 8015572:	b006      	add	sp, #24
 8015574:	bd80      	pop	{r7, pc}

08015576 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015576:	b580      	push	{r7, lr}
 8015578:	b082      	sub	sp, #8
 801557a:	af00      	add	r7, sp, #0
 801557c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801557e:	46c0      	nop			@ (mov r8, r8)
 8015580:	46bd      	mov	sp, r7
 8015582:	b002      	add	sp, #8
 8015584:	bd80      	pop	{r7, pc}

08015586 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015586:	b580      	push	{r7, lr}
 8015588:	b082      	sub	sp, #8
 801558a:	af00      	add	r7, sp, #0
 801558c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801558e:	46c0      	nop			@ (mov r8, r8)
 8015590:	46bd      	mov	sp, r7
 8015592:	b002      	add	sp, #8
 8015594:	bd80      	pop	{r7, pc}

08015596 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015596:	b580      	push	{r7, lr}
 8015598:	b082      	sub	sp, #8
 801559a:	af00      	add	r7, sp, #0
 801559c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801559e:	46c0      	nop			@ (mov r8, r8)
 80155a0:	46bd      	mov	sp, r7
 80155a2:	b002      	add	sp, #8
 80155a4:	bd80      	pop	{r7, pc}

080155a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80155a6:	b580      	push	{r7, lr}
 80155a8:	b082      	sub	sp, #8
 80155aa:	af00      	add	r7, sp, #0
 80155ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80155ae:	46c0      	nop			@ (mov r8, r8)
 80155b0:	46bd      	mov	sp, r7
 80155b2:	b002      	add	sp, #8
 80155b4:	bd80      	pop	{r7, pc}

080155b6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80155b6:	b580      	push	{r7, lr}
 80155b8:	b082      	sub	sp, #8
 80155ba:	af00      	add	r7, sp, #0
 80155bc:	6078      	str	r0, [r7, #4]
 80155be:	0008      	movs	r0, r1
 80155c0:	0011      	movs	r1, r2
 80155c2:	1cfb      	adds	r3, r7, #3
 80155c4:	1c02      	adds	r2, r0, #0
 80155c6:	701a      	strb	r2, [r3, #0]
 80155c8:	003b      	movs	r3, r7
 80155ca:	1c0a      	adds	r2, r1, #0
 80155cc:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80155ce:	46c0      	nop			@ (mov r8, r8)
 80155d0:	46bd      	mov	sp, r7
 80155d2:	b002      	add	sp, #8
 80155d4:	bd80      	pop	{r7, pc}

080155d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80155d6:	b580      	push	{r7, lr}
 80155d8:	b082      	sub	sp, #8
 80155da:	af00      	add	r7, sp, #0
 80155dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80155de:	46c0      	nop			@ (mov r8, r8)
 80155e0:	46bd      	mov	sp, r7
 80155e2:	b002      	add	sp, #8
 80155e4:	bd80      	pop	{r7, pc}

080155e6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80155e6:	b580      	push	{r7, lr}
 80155e8:	b082      	sub	sp, #8
 80155ea:	af00      	add	r7, sp, #0
 80155ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80155ee:	46c0      	nop			@ (mov r8, r8)
 80155f0:	46bd      	mov	sp, r7
 80155f2:	b002      	add	sp, #8
 80155f4:	bd80      	pop	{r7, pc}

080155f6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80155f6:	b580      	push	{r7, lr}
 80155f8:	b082      	sub	sp, #8
 80155fa:	af00      	add	r7, sp, #0
 80155fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80155fe:	46c0      	nop			@ (mov r8, r8)
 8015600:	46bd      	mov	sp, r7
 8015602:	b002      	add	sp, #8
 8015604:	bd80      	pop	{r7, pc}

08015606 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8015606:	b580      	push	{r7, lr}
 8015608:	b082      	sub	sp, #8
 801560a:	af00      	add	r7, sp, #0
 801560c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801560e:	46c0      	nop			@ (mov r8, r8)
 8015610:	46bd      	mov	sp, r7
 8015612:	b002      	add	sp, #8
 8015614:	bd80      	pop	{r7, pc}

08015616 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015616:	b580      	push	{r7, lr}
 8015618:	b082      	sub	sp, #8
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801561e:	46c0      	nop			@ (mov r8, r8)
 8015620:	46bd      	mov	sp, r7
 8015622:	b002      	add	sp, #8
 8015624:	bd80      	pop	{r7, pc}
	...

08015628 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8015628:	b590      	push	{r4, r7, lr}
 801562a:	b089      	sub	sp, #36	@ 0x24
 801562c:	af02      	add	r7, sp, #8
 801562e:	60f8      	str	r0, [r7, #12]
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8015634:	68bb      	ldr	r3, [r7, #8]
 8015636:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	2240      	movs	r2, #64	@ 0x40
 801563c:	5c9b      	ldrb	r3, [r3, r2]
 801563e:	2b01      	cmp	r3, #1
 8015640:	d101      	bne.n	8015646 <I2C_Master_ISR_IT+0x1e>
 8015642:	2302      	movs	r3, #2
 8015644:	e113      	b.n	801586e <I2C_Master_ISR_IT+0x246>
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	2240      	movs	r2, #64	@ 0x40
 801564a:	2101      	movs	r1, #1
 801564c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	2210      	movs	r2, #16
 8015652:	4013      	ands	r3, r2
 8015654:	d012      	beq.n	801567c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	2210      	movs	r2, #16
 801565a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801565c:	d00e      	beq.n	801567c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	2210      	movs	r2, #16
 8015664:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801566a:	2204      	movs	r2, #4
 801566c:	431a      	orrs	r2, r3
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	0018      	movs	r0, r3
 8015676:	f001 fa1c 	bl	8016ab2 <I2C_Flush_TXDR>
 801567a:	e0e5      	b.n	8015848 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801567c:	697b      	ldr	r3, [r7, #20]
 801567e:	2204      	movs	r2, #4
 8015680:	4013      	ands	r3, r2
 8015682:	d021      	beq.n	80156c8 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2204      	movs	r2, #4
 8015688:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801568a:	d01d      	beq.n	80156c8 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	2204      	movs	r2, #4
 8015690:	4393      	bics	r3, r2
 8015692:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801569e:	b2d2      	uxtb	r2, r2
 80156a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156a6:	1c5a      	adds	r2, r3, #1
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80156b0:	3b01      	subs	r3, #1
 80156b2:	b29a      	uxth	r2, r3
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80156bc:	b29b      	uxth	r3, r3
 80156be:	3b01      	subs	r3, #1
 80156c0:	b29a      	uxth	r2, r3
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80156c6:	e0bf      	b.n	8015848 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80156c8:	697b      	ldr	r3, [r7, #20]
 80156ca:	2202      	movs	r2, #2
 80156cc:	4013      	ands	r3, r2
 80156ce:	d01c      	beq.n	801570a <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	2202      	movs	r2, #2
 80156d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80156d6:	d018      	beq.n	801570a <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156dc:	781a      	ldrb	r2, [r3, #0]
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156e8:	1c5a      	adds	r2, r3, #1
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80156f2:	3b01      	subs	r3, #1
 80156f4:	b29a      	uxth	r2, r3
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80156fe:	b29b      	uxth	r3, r3
 8015700:	3b01      	subs	r3, #1
 8015702:	b29a      	uxth	r2, r3
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015708:	e09e      	b.n	8015848 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801570a:	697b      	ldr	r3, [r7, #20]
 801570c:	2280      	movs	r2, #128	@ 0x80
 801570e:	4013      	ands	r3, r2
 8015710:	d100      	bne.n	8015714 <I2C_Master_ISR_IT+0xec>
 8015712:	e069      	b.n	80157e8 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2240      	movs	r2, #64	@ 0x40
 8015718:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801571a:	d065      	beq.n	80157e8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015720:	b29b      	uxth	r3, r3
 8015722:	2b00      	cmp	r3, #0
 8015724:	d04a      	beq.n	80157bc <I2C_Master_ISR_IT+0x194>
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801572a:	2b00      	cmp	r3, #0
 801572c:	d146      	bne.n	80157bc <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	685b      	ldr	r3, [r3, #4]
 8015734:	b29a      	uxth	r2, r3
 8015736:	2112      	movs	r1, #18
 8015738:	187b      	adds	r3, r7, r1
 801573a:	0592      	lsls	r2, r2, #22
 801573c:	0d92      	lsrs	r2, r2, #22
 801573e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015744:	b29b      	uxth	r3, r3
 8015746:	2bff      	cmp	r3, #255	@ 0xff
 8015748:	d910      	bls.n	801576c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	22ff      	movs	r2, #255	@ 0xff
 801574e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015754:	b2da      	uxtb	r2, r3
 8015756:	2380      	movs	r3, #128	@ 0x80
 8015758:	045c      	lsls	r4, r3, #17
 801575a:	187b      	adds	r3, r7, r1
 801575c:	8819      	ldrh	r1, [r3, #0]
 801575e:	68f8      	ldr	r0, [r7, #12]
 8015760:	2300      	movs	r3, #0
 8015762:	9300      	str	r3, [sp, #0]
 8015764:	0023      	movs	r3, r4
 8015766:	f001 fcf1 	bl	801714c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801576a:	e03c      	b.n	80157e6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015770:	b29a      	uxth	r2, r3
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801577a:	4a3f      	ldr	r2, [pc, #252]	@ (8015878 <I2C_Master_ISR_IT+0x250>)
 801577c:	4293      	cmp	r3, r2
 801577e:	d00e      	beq.n	801579e <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015784:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801578a:	2312      	movs	r3, #18
 801578c:	18fb      	adds	r3, r7, r3
 801578e:	8819      	ldrh	r1, [r3, #0]
 8015790:	68f8      	ldr	r0, [r7, #12]
 8015792:	2300      	movs	r3, #0
 8015794:	9300      	str	r3, [sp, #0]
 8015796:	0023      	movs	r3, r4
 8015798:	f001 fcd8 	bl	801714c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801579c:	e023      	b.n	80157e6 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157a2:	b2da      	uxtb	r2, r3
 80157a4:	2380      	movs	r3, #128	@ 0x80
 80157a6:	049c      	lsls	r4, r3, #18
 80157a8:	2312      	movs	r3, #18
 80157aa:	18fb      	adds	r3, r7, r3
 80157ac:	8819      	ldrh	r1, [r3, #0]
 80157ae:	68f8      	ldr	r0, [r7, #12]
 80157b0:	2300      	movs	r3, #0
 80157b2:	9300      	str	r3, [sp, #0]
 80157b4:	0023      	movs	r3, r4
 80157b6:	f001 fcc9 	bl	801714c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80157ba:	e014      	b.n	80157e6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	685a      	ldr	r2, [r3, #4]
 80157c2:	2380      	movs	r3, #128	@ 0x80
 80157c4:	049b      	lsls	r3, r3, #18
 80157c6:	401a      	ands	r2, r3
 80157c8:	2380      	movs	r3, #128	@ 0x80
 80157ca:	049b      	lsls	r3, r3, #18
 80157cc:	429a      	cmp	r2, r3
 80157ce:	d004      	beq.n	80157da <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	0018      	movs	r0, r3
 80157d4:	f000 fd56 	bl	8016284 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80157d8:	e036      	b.n	8015848 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	2140      	movs	r1, #64	@ 0x40
 80157de:	0018      	movs	r0, r3
 80157e0:	f001 f83c 	bl	801685c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80157e4:	e030      	b.n	8015848 <I2C_Master_ISR_IT+0x220>
 80157e6:	e02f      	b.n	8015848 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	2240      	movs	r2, #64	@ 0x40
 80157ec:	4013      	ands	r3, r2
 80157ee:	d02b      	beq.n	8015848 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2240      	movs	r2, #64	@ 0x40
 80157f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80157f6:	d027      	beq.n	8015848 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157fc:	b29b      	uxth	r3, r3
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d11d      	bne.n	801583e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	685a      	ldr	r2, [r3, #4]
 8015808:	2380      	movs	r3, #128	@ 0x80
 801580a:	049b      	lsls	r3, r3, #18
 801580c:	401a      	ands	r2, r3
 801580e:	2380      	movs	r3, #128	@ 0x80
 8015810:	049b      	lsls	r3, r3, #18
 8015812:	429a      	cmp	r2, r3
 8015814:	d018      	beq.n	8015848 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801581a:	4a17      	ldr	r2, [pc, #92]	@ (8015878 <I2C_Master_ISR_IT+0x250>)
 801581c:	4293      	cmp	r3, r2
 801581e:	d109      	bne.n	8015834 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	685a      	ldr	r2, [r3, #4]
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	2180      	movs	r1, #128	@ 0x80
 801582c:	01c9      	lsls	r1, r1, #7
 801582e:	430a      	orrs	r2, r1
 8015830:	605a      	str	r2, [r3, #4]
 8015832:	e009      	b.n	8015848 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	0018      	movs	r0, r3
 8015838:	f000 fd24 	bl	8016284 <I2C_ITMasterSeqCplt>
 801583c:	e004      	b.n	8015848 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	2140      	movs	r1, #64	@ 0x40
 8015842:	0018      	movs	r0, r3
 8015844:	f001 f80a 	bl	801685c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	2220      	movs	r2, #32
 801584c:	4013      	ands	r3, r2
 801584e:	d009      	beq.n	8015864 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	2220      	movs	r2, #32
 8015854:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015856:	d005      	beq.n	8015864 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8015858:	697a      	ldr	r2, [r7, #20]
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	0011      	movs	r1, r2
 801585e:	0018      	movs	r0, r3
 8015860:	f000 fdb6 	bl	80163d0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	2240      	movs	r2, #64	@ 0x40
 8015868:	2100      	movs	r1, #0
 801586a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801586c:	2300      	movs	r3, #0
}
 801586e:	0018      	movs	r0, r3
 8015870:	46bd      	mov	sp, r7
 8015872:	b007      	add	sp, #28
 8015874:	bd90      	pop	{r4, r7, pc}
 8015876:	46c0      	nop			@ (mov r8, r8)
 8015878:	ffff0000 	.word	0xffff0000

0801587c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 801587c:	b580      	push	{r7, lr}
 801587e:	b086      	sub	sp, #24
 8015880:	af00      	add	r7, sp, #0
 8015882:	60f8      	str	r0, [r7, #12]
 8015884:	60b9      	str	r1, [r7, #8]
 8015886:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801588c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801588e:	68bb      	ldr	r3, [r7, #8]
 8015890:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	2240      	movs	r2, #64	@ 0x40
 8015896:	5c9b      	ldrb	r3, [r3, r2]
 8015898:	2b01      	cmp	r3, #1
 801589a:	d101      	bne.n	80158a0 <I2C_Slave_ISR_IT+0x24>
 801589c:	2302      	movs	r3, #2
 801589e:	e0e6      	b.n	8015a6e <I2C_Slave_ISR_IT+0x1f2>
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	2240      	movs	r2, #64	@ 0x40
 80158a4:	2101      	movs	r1, #1
 80158a6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80158a8:	693b      	ldr	r3, [r7, #16]
 80158aa:	2220      	movs	r2, #32
 80158ac:	4013      	ands	r3, r2
 80158ae:	d009      	beq.n	80158c4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	2220      	movs	r2, #32
 80158b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80158b6:	d005      	beq.n	80158c4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80158b8:	693a      	ldr	r2, [r7, #16]
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	0011      	movs	r1, r2
 80158be:	0018      	movs	r0, r3
 80158c0:	f000 fe54 	bl	801656c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80158c4:	693b      	ldr	r3, [r7, #16]
 80158c6:	2210      	movs	r2, #16
 80158c8:	4013      	ands	r3, r2
 80158ca:	d052      	beq.n	8015972 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	2210      	movs	r2, #16
 80158d0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80158d2:	d04e      	beq.n	8015972 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80158d8:	b29b      	uxth	r3, r3
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d12d      	bne.n	801593a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	2241      	movs	r2, #65	@ 0x41
 80158e2:	5c9b      	ldrb	r3, [r3, r2]
 80158e4:	b2db      	uxtb	r3, r3
 80158e6:	2b28      	cmp	r3, #40	@ 0x28
 80158e8:	d10b      	bne.n	8015902 <I2C_Slave_ISR_IT+0x86>
 80158ea:	697a      	ldr	r2, [r7, #20]
 80158ec:	2380      	movs	r3, #128	@ 0x80
 80158ee:	049b      	lsls	r3, r3, #18
 80158f0:	429a      	cmp	r2, r3
 80158f2:	d106      	bne.n	8015902 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80158f4:	693a      	ldr	r2, [r7, #16]
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	0011      	movs	r1, r2
 80158fa:	0018      	movs	r0, r3
 80158fc:	f000 ff56 	bl	80167ac <I2C_ITListenCplt>
 8015900:	e036      	b.n	8015970 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	2241      	movs	r2, #65	@ 0x41
 8015906:	5c9b      	ldrb	r3, [r3, r2]
 8015908:	b2db      	uxtb	r3, r3
 801590a:	2b29      	cmp	r3, #41	@ 0x29
 801590c:	d110      	bne.n	8015930 <I2C_Slave_ISR_IT+0xb4>
 801590e:	697b      	ldr	r3, [r7, #20]
 8015910:	4a59      	ldr	r2, [pc, #356]	@ (8015a78 <I2C_Slave_ISR_IT+0x1fc>)
 8015912:	4293      	cmp	r3, r2
 8015914:	d00c      	beq.n	8015930 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	2210      	movs	r2, #16
 801591c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	0018      	movs	r0, r3
 8015922:	f001 f8c6 	bl	8016ab2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	0018      	movs	r0, r3
 801592a:	f000 fced 	bl	8016308 <I2C_ITSlaveSeqCplt>
 801592e:	e01f      	b.n	8015970 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	2210      	movs	r2, #16
 8015936:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8015938:	e091      	b.n	8015a5e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	2210      	movs	r2, #16
 8015940:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015946:	2204      	movs	r2, #4
 8015948:	431a      	orrs	r2, r3
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801594e:	697b      	ldr	r3, [r7, #20]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d005      	beq.n	8015960 <I2C_Slave_ISR_IT+0xe4>
 8015954:	697a      	ldr	r2, [r7, #20]
 8015956:	2380      	movs	r3, #128	@ 0x80
 8015958:	045b      	lsls	r3, r3, #17
 801595a:	429a      	cmp	r2, r3
 801595c:	d000      	beq.n	8015960 <I2C_Slave_ISR_IT+0xe4>
 801595e:	e07e      	b.n	8015a5e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	0011      	movs	r1, r2
 8015968:	0018      	movs	r0, r3
 801596a:	f000 ff77 	bl	801685c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801596e:	e076      	b.n	8015a5e <I2C_Slave_ISR_IT+0x1e2>
 8015970:	e075      	b.n	8015a5e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015972:	693b      	ldr	r3, [r7, #16]
 8015974:	2204      	movs	r2, #4
 8015976:	4013      	ands	r3, r2
 8015978:	d02f      	beq.n	80159da <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	2204      	movs	r2, #4
 801597e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015980:	d02b      	beq.n	80159da <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015986:	b29b      	uxth	r3, r3
 8015988:	2b00      	cmp	r3, #0
 801598a:	d018      	beq.n	80159be <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015996:	b2d2      	uxtb	r2, r2
 8015998:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801599e:	1c5a      	adds	r2, r3, #1
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80159a8:	3b01      	subs	r3, #1
 80159aa:	b29a      	uxth	r2, r3
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80159b4:	b29b      	uxth	r3, r3
 80159b6:	3b01      	subs	r3, #1
 80159b8:	b29a      	uxth	r2, r3
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80159c2:	b29b      	uxth	r3, r3
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d14c      	bne.n	8015a62 <I2C_Slave_ISR_IT+0x1e6>
 80159c8:	697b      	ldr	r3, [r7, #20]
 80159ca:	4a2b      	ldr	r2, [pc, #172]	@ (8015a78 <I2C_Slave_ISR_IT+0x1fc>)
 80159cc:	4293      	cmp	r3, r2
 80159ce:	d048      	beq.n	8015a62 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	0018      	movs	r0, r3
 80159d4:	f000 fc98 	bl	8016308 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80159d8:	e043      	b.n	8015a62 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80159da:	693b      	ldr	r3, [r7, #16]
 80159dc:	2208      	movs	r2, #8
 80159de:	4013      	ands	r3, r2
 80159e0:	d00a      	beq.n	80159f8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	2208      	movs	r2, #8
 80159e6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80159e8:	d006      	beq.n	80159f8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80159ea:	693a      	ldr	r2, [r7, #16]
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	0011      	movs	r1, r2
 80159f0:	0018      	movs	r0, r3
 80159f2:	f000 fba3 	bl	801613c <I2C_ITAddrCplt>
 80159f6:	e035      	b.n	8015a64 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	2202      	movs	r2, #2
 80159fc:	4013      	ands	r3, r2
 80159fe:	d031      	beq.n	8015a64 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	2202      	movs	r2, #2
 8015a04:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015a06:	d02d      	beq.n	8015a64 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015a0c:	b29b      	uxth	r3, r3
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d018      	beq.n	8015a44 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a16:	781a      	ldrb	r2, [r3, #0]
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a22:	1c5a      	adds	r2, r3, #1
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015a2c:	b29b      	uxth	r3, r3
 8015a2e:	3b01      	subs	r3, #1
 8015a30:	b29a      	uxth	r2, r3
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015a3a:	3b01      	subs	r3, #1
 8015a3c:	b29a      	uxth	r2, r3
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015a42:	e00f      	b.n	8015a64 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8015a44:	697a      	ldr	r2, [r7, #20]
 8015a46:	2380      	movs	r3, #128	@ 0x80
 8015a48:	045b      	lsls	r3, r3, #17
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d002      	beq.n	8015a54 <I2C_Slave_ISR_IT+0x1d8>
 8015a4e:	697b      	ldr	r3, [r7, #20]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d107      	bne.n	8015a64 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	0018      	movs	r0, r3
 8015a58:	f000 fc56 	bl	8016308 <I2C_ITSlaveSeqCplt>
 8015a5c:	e002      	b.n	8015a64 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8015a5e:	46c0      	nop			@ (mov r8, r8)
 8015a60:	e000      	b.n	8015a64 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8015a62:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	2240      	movs	r2, #64	@ 0x40
 8015a68:	2100      	movs	r1, #0
 8015a6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015a6c:	2300      	movs	r3, #0
}
 8015a6e:	0018      	movs	r0, r3
 8015a70:	46bd      	mov	sp, r7
 8015a72:	b006      	add	sp, #24
 8015a74:	bd80      	pop	{r7, pc}
 8015a76:	46c0      	nop			@ (mov r8, r8)
 8015a78:	ffff0000 	.word	0xffff0000

08015a7c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8015a7c:	b590      	push	{r4, r7, lr}
 8015a7e:	b089      	sub	sp, #36	@ 0x24
 8015a80:	af02      	add	r7, sp, #8
 8015a82:	60f8      	str	r0, [r7, #12]
 8015a84:	60b9      	str	r1, [r7, #8]
 8015a86:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2240      	movs	r2, #64	@ 0x40
 8015a8c:	5c9b      	ldrb	r3, [r3, r2]
 8015a8e:	2b01      	cmp	r3, #1
 8015a90:	d101      	bne.n	8015a96 <I2C_Master_ISR_DMA+0x1a>
 8015a92:	2302      	movs	r3, #2
 8015a94:	e0e7      	b.n	8015c66 <I2C_Master_ISR_DMA+0x1ea>
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	2240      	movs	r2, #64	@ 0x40
 8015a9a:	2101      	movs	r1, #1
 8015a9c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8015a9e:	68bb      	ldr	r3, [r7, #8]
 8015aa0:	2210      	movs	r2, #16
 8015aa2:	4013      	ands	r3, r2
 8015aa4:	d017      	beq.n	8015ad6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	2210      	movs	r2, #16
 8015aaa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8015aac:	d013      	beq.n	8015ad6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	2210      	movs	r2, #16
 8015ab4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015aba:	2204      	movs	r2, #4
 8015abc:	431a      	orrs	r2, r3
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	2120      	movs	r1, #32
 8015ac6:	0018      	movs	r0, r3
 8015ac8:	f001 fb7a 	bl	80171c0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	0018      	movs	r0, r3
 8015ad0:	f000 ffef 	bl	8016ab2 <I2C_Flush_TXDR>
 8015ad4:	e0c2      	b.n	8015c5c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8015ad6:	68bb      	ldr	r3, [r7, #8]
 8015ad8:	2280      	movs	r2, #128	@ 0x80
 8015ada:	4013      	ands	r3, r2
 8015adc:	d100      	bne.n	8015ae0 <I2C_Master_ISR_DMA+0x64>
 8015ade:	e07c      	b.n	8015bda <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	2240      	movs	r2, #64	@ 0x40
 8015ae4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8015ae6:	d100      	bne.n	8015aea <I2C_Master_ISR_DMA+0x6e>
 8015ae8:	e077      	b.n	8015bda <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	681a      	ldr	r2, [r3, #0]
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	2140      	movs	r1, #64	@ 0x40
 8015af6:	438a      	bics	r2, r1
 8015af8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015afe:	b29b      	uxth	r3, r3
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d055      	beq.n	8015bb0 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	685b      	ldr	r3, [r3, #4]
 8015b0a:	b29a      	uxth	r2, r3
 8015b0c:	2312      	movs	r3, #18
 8015b0e:	18fb      	adds	r3, r7, r3
 8015b10:	0592      	lsls	r2, r2, #22
 8015b12:	0d92      	lsrs	r2, r2, #22
 8015b14:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b1a:	b29b      	uxth	r3, r3
 8015b1c:	2bff      	cmp	r3, #255	@ 0xff
 8015b1e:	d906      	bls.n	8015b2e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	22ff      	movs	r2, #255	@ 0xff
 8015b24:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8015b26:	2380      	movs	r3, #128	@ 0x80
 8015b28:	045b      	lsls	r3, r3, #17
 8015b2a:	617b      	str	r3, [r7, #20]
 8015b2c:	e010      	b.n	8015b50 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b32:	b29a      	uxth	r2, r3
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b3c:	4a4c      	ldr	r2, [pc, #304]	@ (8015c70 <I2C_Master_ISR_DMA+0x1f4>)
 8015b3e:	4293      	cmp	r3, r2
 8015b40:	d003      	beq.n	8015b4a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b46:	617b      	str	r3, [r7, #20]
 8015b48:	e002      	b.n	8015b50 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8015b4a:	2380      	movs	r3, #128	@ 0x80
 8015b4c:	049b      	lsls	r3, r3, #18
 8015b4e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b54:	b2da      	uxtb	r2, r3
 8015b56:	697c      	ldr	r4, [r7, #20]
 8015b58:	2312      	movs	r3, #18
 8015b5a:	18fb      	adds	r3, r7, r3
 8015b5c:	8819      	ldrh	r1, [r3, #0]
 8015b5e:	68f8      	ldr	r0, [r7, #12]
 8015b60:	2300      	movs	r3, #0
 8015b62:	9300      	str	r3, [sp, #0]
 8015b64:	0023      	movs	r3, r4
 8015b66:	f001 faf1 	bl	801714c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b6e:	b29a      	uxth	r2, r3
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b74:	1ad3      	subs	r3, r2, r3
 8015b76:	b29a      	uxth	r2, r3
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	2241      	movs	r2, #65	@ 0x41
 8015b80:	5c9b      	ldrb	r3, [r3, r2]
 8015b82:	b2db      	uxtb	r3, r3
 8015b84:	2b22      	cmp	r3, #34	@ 0x22
 8015b86:	d109      	bne.n	8015b9c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	681a      	ldr	r2, [r3, #0]
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	2180      	movs	r1, #128	@ 0x80
 8015b94:	0209      	lsls	r1, r1, #8
 8015b96:	430a      	orrs	r2, r1
 8015b98:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8015b9a:	e05f      	b.n	8015c5c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	681a      	ldr	r2, [r3, #0]
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	2180      	movs	r1, #128	@ 0x80
 8015ba8:	01c9      	lsls	r1, r1, #7
 8015baa:	430a      	orrs	r2, r1
 8015bac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8015bae:	e055      	b.n	8015c5c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	685a      	ldr	r2, [r3, #4]
 8015bb6:	2380      	movs	r3, #128	@ 0x80
 8015bb8:	049b      	lsls	r3, r3, #18
 8015bba:	401a      	ands	r2, r3
 8015bbc:	2380      	movs	r3, #128	@ 0x80
 8015bbe:	049b      	lsls	r3, r3, #18
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	d004      	beq.n	8015bce <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	0018      	movs	r0, r3
 8015bc8:	f000 fb5c 	bl	8016284 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8015bcc:	e046      	b.n	8015c5c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	2140      	movs	r1, #64	@ 0x40
 8015bd2:	0018      	movs	r0, r3
 8015bd4:	f000 fe42 	bl	801685c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8015bd8:	e040      	b.n	8015c5c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015bda:	68bb      	ldr	r3, [r7, #8]
 8015bdc:	2240      	movs	r2, #64	@ 0x40
 8015bde:	4013      	ands	r3, r2
 8015be0:	d02c      	beq.n	8015c3c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2240      	movs	r2, #64	@ 0x40
 8015be6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015be8:	d028      	beq.n	8015c3c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015bee:	b29b      	uxth	r3, r3
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d11d      	bne.n	8015c30 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	685a      	ldr	r2, [r3, #4]
 8015bfa:	2380      	movs	r3, #128	@ 0x80
 8015bfc:	049b      	lsls	r3, r3, #18
 8015bfe:	401a      	ands	r2, r3
 8015c00:	2380      	movs	r3, #128	@ 0x80
 8015c02:	049b      	lsls	r3, r3, #18
 8015c04:	429a      	cmp	r2, r3
 8015c06:	d028      	beq.n	8015c5a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c0c:	4a18      	ldr	r2, [pc, #96]	@ (8015c70 <I2C_Master_ISR_DMA+0x1f4>)
 8015c0e:	4293      	cmp	r3, r2
 8015c10:	d109      	bne.n	8015c26 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	685a      	ldr	r2, [r3, #4]
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	2180      	movs	r1, #128	@ 0x80
 8015c1e:	01c9      	lsls	r1, r1, #7
 8015c20:	430a      	orrs	r2, r1
 8015c22:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8015c24:	e019      	b.n	8015c5a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	0018      	movs	r0, r3
 8015c2a:	f000 fb2b 	bl	8016284 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8015c2e:	e014      	b.n	8015c5a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	2140      	movs	r1, #64	@ 0x40
 8015c34:	0018      	movs	r0, r3
 8015c36:	f000 fe11 	bl	801685c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8015c3a:	e00e      	b.n	8015c5a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015c3c:	68bb      	ldr	r3, [r7, #8]
 8015c3e:	2220      	movs	r2, #32
 8015c40:	4013      	ands	r3, r2
 8015c42:	d00b      	beq.n	8015c5c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	2220      	movs	r2, #32
 8015c48:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015c4a:	d007      	beq.n	8015c5c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8015c4c:	68ba      	ldr	r2, [r7, #8]
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	0011      	movs	r1, r2
 8015c52:	0018      	movs	r0, r3
 8015c54:	f000 fbbc 	bl	80163d0 <I2C_ITMasterCplt>
 8015c58:	e000      	b.n	8015c5c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8015c5a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	2240      	movs	r2, #64	@ 0x40
 8015c60:	2100      	movs	r1, #0
 8015c62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015c64:	2300      	movs	r3, #0
}
 8015c66:	0018      	movs	r0, r3
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	b007      	add	sp, #28
 8015c6c:	bd90      	pop	{r4, r7, pc}
 8015c6e:	46c0      	nop			@ (mov r8, r8)
 8015c70:	ffff0000 	.word	0xffff0000

08015c74 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8015c74:	b590      	push	{r4, r7, lr}
 8015c76:	b089      	sub	sp, #36	@ 0x24
 8015c78:	af02      	add	r7, sp, #8
 8015c7a:	60f8      	str	r0, [r7, #12]
 8015c7c:	60b9      	str	r1, [r7, #8]
 8015c7e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8015c80:	4b88      	ldr	r3, [pc, #544]	@ (8015ea4 <I2C_Mem_ISR_DMA+0x230>)
 8015c82:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	2240      	movs	r2, #64	@ 0x40
 8015c88:	5c9b      	ldrb	r3, [r3, r2]
 8015c8a:	2b01      	cmp	r3, #1
 8015c8c:	d101      	bne.n	8015c92 <I2C_Mem_ISR_DMA+0x1e>
 8015c8e:	2302      	movs	r3, #2
 8015c90:	e104      	b.n	8015e9c <I2C_Mem_ISR_DMA+0x228>
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	2240      	movs	r2, #64	@ 0x40
 8015c96:	2101      	movs	r1, #1
 8015c98:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8015c9a:	68bb      	ldr	r3, [r7, #8]
 8015c9c:	2210      	movs	r2, #16
 8015c9e:	4013      	ands	r3, r2
 8015ca0:	d017      	beq.n	8015cd2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	2210      	movs	r2, #16
 8015ca6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8015ca8:	d013      	beq.n	8015cd2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	2210      	movs	r2, #16
 8015cb0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015cb6:	2204      	movs	r2, #4
 8015cb8:	431a      	orrs	r2, r3
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	2120      	movs	r1, #32
 8015cc2:	0018      	movs	r0, r3
 8015cc4:	f001 fa7c 	bl	80171c0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	0018      	movs	r0, r3
 8015ccc:	f000 fef1 	bl	8016ab2 <I2C_Flush_TXDR>
 8015cd0:	e0df      	b.n	8015e92 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015cd2:	68bb      	ldr	r3, [r7, #8]
 8015cd4:	2202      	movs	r2, #2
 8015cd6:	4013      	ands	r3, r2
 8015cd8:	d00d      	beq.n	8015cf6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	2202      	movs	r2, #2
 8015cde:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015ce0:	d009      	beq.n	8015cf6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	68fa      	ldr	r2, [r7, #12]
 8015ce8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8015cea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	2201      	movs	r2, #1
 8015cf0:	4252      	negs	r2, r2
 8015cf2:	651a      	str	r2, [r3, #80]	@ 0x50
 8015cf4:	e0cd      	b.n	8015e92 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8015cf6:	68bb      	ldr	r3, [r7, #8]
 8015cf8:	2280      	movs	r2, #128	@ 0x80
 8015cfa:	4013      	ands	r3, r2
 8015cfc:	d05e      	beq.n	8015dbc <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	2240      	movs	r2, #64	@ 0x40
 8015d02:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8015d04:	d05a      	beq.n	8015dbc <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	2110      	movs	r1, #16
 8015d0a:	0018      	movs	r0, r3
 8015d0c:	f001 fa58 	bl	80171c0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d14:	b29b      	uxth	r3, r3
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d04a      	beq.n	8015db0 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d1e:	b29b      	uxth	r3, r3
 8015d20:	2bff      	cmp	r3, #255	@ 0xff
 8015d22:	d910      	bls.n	8015d46 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	22ff      	movs	r2, #255	@ 0xff
 8015d28:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d2e:	b299      	uxth	r1, r3
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015d34:	b2da      	uxtb	r2, r3
 8015d36:	2380      	movs	r3, #128	@ 0x80
 8015d38:	045b      	lsls	r3, r3, #17
 8015d3a:	68f8      	ldr	r0, [r7, #12]
 8015d3c:	2400      	movs	r4, #0
 8015d3e:	9400      	str	r4, [sp, #0]
 8015d40:	f001 fa04 	bl	801714c <I2C_TransferConfig>
 8015d44:	e011      	b.n	8015d6a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d4a:	b29a      	uxth	r2, r3
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d54:	b299      	uxth	r1, r3
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015d5a:	b2da      	uxtb	r2, r3
 8015d5c:	2380      	movs	r3, #128	@ 0x80
 8015d5e:	049b      	lsls	r3, r3, #18
 8015d60:	68f8      	ldr	r0, [r7, #12]
 8015d62:	2400      	movs	r4, #0
 8015d64:	9400      	str	r4, [sp, #0]
 8015d66:	f001 f9f1 	bl	801714c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d6e:	b29a      	uxth	r2, r3
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015d74:	1ad3      	subs	r3, r2, r3
 8015d76:	b29a      	uxth	r2, r3
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	2241      	movs	r2, #65	@ 0x41
 8015d80:	5c9b      	ldrb	r3, [r3, r2]
 8015d82:	b2db      	uxtb	r3, r3
 8015d84:	2b22      	cmp	r3, #34	@ 0x22
 8015d86:	d109      	bne.n	8015d9c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	681a      	ldr	r2, [r3, #0]
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	2180      	movs	r1, #128	@ 0x80
 8015d94:	0209      	lsls	r1, r1, #8
 8015d96:	430a      	orrs	r2, r1
 8015d98:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8015d9a:	e07a      	b.n	8015e92 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	681a      	ldr	r2, [r3, #0]
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	2180      	movs	r1, #128	@ 0x80
 8015da8:	01c9      	lsls	r1, r1, #7
 8015daa:	430a      	orrs	r2, r1
 8015dac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8015dae:	e070      	b.n	8015e92 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	2140      	movs	r1, #64	@ 0x40
 8015db4:	0018      	movs	r0, r3
 8015db6:	f000 fd51 	bl	801685c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8015dba:	e06a      	b.n	8015e92 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015dbc:	68bb      	ldr	r3, [r7, #8]
 8015dbe:	2240      	movs	r2, #64	@ 0x40
 8015dc0:	4013      	ands	r3, r2
 8015dc2:	d058      	beq.n	8015e76 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	2240      	movs	r2, #64	@ 0x40
 8015dc8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8015dca:	d054      	beq.n	8015e76 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	2241      	movs	r2, #65	@ 0x41
 8015dd0:	5c9b      	ldrb	r3, [r3, r2]
 8015dd2:	b2db      	uxtb	r3, r3
 8015dd4:	2b22      	cmp	r3, #34	@ 0x22
 8015dd6:	d101      	bne.n	8015ddc <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8015dd8:	4b33      	ldr	r3, [pc, #204]	@ (8015ea8 <I2C_Mem_ISR_DMA+0x234>)
 8015dda:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015de0:	b29b      	uxth	r3, r3
 8015de2:	2bff      	cmp	r3, #255	@ 0xff
 8015de4:	d911      	bls.n	8015e0a <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	22ff      	movs	r2, #255	@ 0xff
 8015dea:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015df0:	b299      	uxth	r1, r3
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015df6:	b2da      	uxtb	r2, r3
 8015df8:	2380      	movs	r3, #128	@ 0x80
 8015dfa:	045c      	lsls	r4, r3, #17
 8015dfc:	68f8      	ldr	r0, [r7, #12]
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	9300      	str	r3, [sp, #0]
 8015e02:	0023      	movs	r3, r4
 8015e04:	f001 f9a2 	bl	801714c <I2C_TransferConfig>
 8015e08:	e012      	b.n	8015e30 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e0e:	b29a      	uxth	r2, r3
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015e18:	b299      	uxth	r1, r3
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e1e:	b2da      	uxtb	r2, r3
 8015e20:	2380      	movs	r3, #128	@ 0x80
 8015e22:	049c      	lsls	r4, r3, #18
 8015e24:	68f8      	ldr	r0, [r7, #12]
 8015e26:	697b      	ldr	r3, [r7, #20]
 8015e28:	9300      	str	r3, [sp, #0]
 8015e2a:	0023      	movs	r3, r4
 8015e2c:	f001 f98e 	bl	801714c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e34:	b29a      	uxth	r2, r3
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e3a:	1ad3      	subs	r3, r2, r3
 8015e3c:	b29a      	uxth	r2, r3
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	2241      	movs	r2, #65	@ 0x41
 8015e46:	5c9b      	ldrb	r3, [r3, r2]
 8015e48:	b2db      	uxtb	r3, r3
 8015e4a:	2b22      	cmp	r3, #34	@ 0x22
 8015e4c:	d109      	bne.n	8015e62 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	681a      	ldr	r2, [r3, #0]
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	2180      	movs	r1, #128	@ 0x80
 8015e5a:	0209      	lsls	r1, r1, #8
 8015e5c:	430a      	orrs	r2, r1
 8015e5e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015e60:	e017      	b.n	8015e92 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	681a      	ldr	r2, [r3, #0]
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	2180      	movs	r1, #128	@ 0x80
 8015e6e:	01c9      	lsls	r1, r1, #7
 8015e70:	430a      	orrs	r2, r1
 8015e72:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015e74:	e00d      	b.n	8015e92 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015e76:	68bb      	ldr	r3, [r7, #8]
 8015e78:	2220      	movs	r2, #32
 8015e7a:	4013      	ands	r3, r2
 8015e7c:	d009      	beq.n	8015e92 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	2220      	movs	r2, #32
 8015e82:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015e84:	d005      	beq.n	8015e92 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8015e86:	68ba      	ldr	r2, [r7, #8]
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	0011      	movs	r1, r2
 8015e8c:	0018      	movs	r0, r3
 8015e8e:	f000 fa9f 	bl	80163d0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	2240      	movs	r2, #64	@ 0x40
 8015e96:	2100      	movs	r1, #0
 8015e98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015e9a:	2300      	movs	r3, #0
}
 8015e9c:	0018      	movs	r0, r3
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	b007      	add	sp, #28
 8015ea2:	bd90      	pop	{r4, r7, pc}
 8015ea4:	80002000 	.word	0x80002000
 8015ea8:	80002400 	.word	0x80002400

08015eac <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b088      	sub	sp, #32
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	60f8      	str	r0, [r7, #12]
 8015eb4:	60b9      	str	r1, [r7, #8]
 8015eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ebc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	2240      	movs	r2, #64	@ 0x40
 8015ec6:	5c9b      	ldrb	r3, [r3, r2]
 8015ec8:	2b01      	cmp	r3, #1
 8015eca:	d101      	bne.n	8015ed0 <I2C_Slave_ISR_DMA+0x24>
 8015ecc:	2302      	movs	r3, #2
 8015ece:	e0cd      	b.n	801606c <I2C_Slave_ISR_DMA+0x1c0>
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	2240      	movs	r2, #64	@ 0x40
 8015ed4:	2101      	movs	r1, #1
 8015ed6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015ed8:	68bb      	ldr	r3, [r7, #8]
 8015eda:	2220      	movs	r2, #32
 8015edc:	4013      	ands	r3, r2
 8015ede:	d009      	beq.n	8015ef4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2220      	movs	r2, #32
 8015ee4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015ee6:	d005      	beq.n	8015ef4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8015ee8:	68ba      	ldr	r2, [r7, #8]
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	0011      	movs	r1, r2
 8015eee:	0018      	movs	r0, r3
 8015ef0:	f000 fb3c 	bl	801656c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8015ef4:	68bb      	ldr	r3, [r7, #8]
 8015ef6:	2210      	movs	r2, #16
 8015ef8:	4013      	ands	r3, r2
 8015efa:	d100      	bne.n	8015efe <I2C_Slave_ISR_DMA+0x52>
 8015efc:	e0a3      	b.n	8016046 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	2210      	movs	r2, #16
 8015f02:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8015f04:	d100      	bne.n	8015f08 <I2C_Slave_ISR_DMA+0x5c>
 8015f06:	e09e      	b.n	8016046 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8015f08:	687a      	ldr	r2, [r7, #4]
 8015f0a:	2380      	movs	r3, #128	@ 0x80
 8015f0c:	01db      	lsls	r3, r3, #7
 8015f0e:	4013      	ands	r3, r2
 8015f10:	d105      	bne.n	8015f1e <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8015f12:	687a      	ldr	r2, [r7, #4]
 8015f14:	2380      	movs	r3, #128	@ 0x80
 8015f16:	021b      	lsls	r3, r3, #8
 8015f18:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8015f1a:	d100      	bne.n	8015f1e <I2C_Slave_ISR_DMA+0x72>
 8015f1c:	e08c      	b.n	8016038 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d00c      	beq.n	8015f40 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8015f26:	687a      	ldr	r2, [r7, #4]
 8015f28:	2380      	movs	r3, #128	@ 0x80
 8015f2a:	021b      	lsls	r3, r3, #8
 8015f2c:	4013      	ands	r3, r2
 8015f2e:	d007      	beq.n	8015f40 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	685b      	ldr	r3, [r3, #4]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d101      	bne.n	8015f40 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8015f3c:	2301      	movs	r3, #1
 8015f3e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d00c      	beq.n	8015f62 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8015f48:	687a      	ldr	r2, [r7, #4]
 8015f4a:	2380      	movs	r3, #128	@ 0x80
 8015f4c:	01db      	lsls	r3, r3, #7
 8015f4e:	4013      	ands	r3, r2
 8015f50:	d007      	beq.n	8015f62 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	685b      	ldr	r3, [r3, #4]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d101      	bne.n	8015f62 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8015f5e:	2301      	movs	r3, #1
 8015f60:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8015f62:	69fb      	ldr	r3, [r7, #28]
 8015f64:	2b01      	cmp	r3, #1
 8015f66:	d12d      	bne.n	8015fc4 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	2241      	movs	r2, #65	@ 0x41
 8015f6c:	5c9b      	ldrb	r3, [r3, r2]
 8015f6e:	b2db      	uxtb	r3, r3
 8015f70:	2b28      	cmp	r3, #40	@ 0x28
 8015f72:	d10b      	bne.n	8015f8c <I2C_Slave_ISR_DMA+0xe0>
 8015f74:	69ba      	ldr	r2, [r7, #24]
 8015f76:	2380      	movs	r3, #128	@ 0x80
 8015f78:	049b      	lsls	r3, r3, #18
 8015f7a:	429a      	cmp	r2, r3
 8015f7c:	d106      	bne.n	8015f8c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8015f7e:	68ba      	ldr	r2, [r7, #8]
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	0011      	movs	r1, r2
 8015f84:	0018      	movs	r0, r3
 8015f86:	f000 fc11 	bl	80167ac <I2C_ITListenCplt>
 8015f8a:	e054      	b.n	8016036 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	2241      	movs	r2, #65	@ 0x41
 8015f90:	5c9b      	ldrb	r3, [r3, r2]
 8015f92:	b2db      	uxtb	r3, r3
 8015f94:	2b29      	cmp	r3, #41	@ 0x29
 8015f96:	d110      	bne.n	8015fba <I2C_Slave_ISR_DMA+0x10e>
 8015f98:	69bb      	ldr	r3, [r7, #24]
 8015f9a:	4a36      	ldr	r2, [pc, #216]	@ (8016074 <I2C_Slave_ISR_DMA+0x1c8>)
 8015f9c:	4293      	cmp	r3, r2
 8015f9e:	d00c      	beq.n	8015fba <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	2210      	movs	r2, #16
 8015fa6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	0018      	movs	r0, r3
 8015fac:	f000 fd81 	bl	8016ab2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	0018      	movs	r0, r3
 8015fb4:	f000 f9a8 	bl	8016308 <I2C_ITSlaveSeqCplt>
 8015fb8:	e03d      	b.n	8016036 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	2210      	movs	r2, #16
 8015fc0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8015fc2:	e03e      	b.n	8016042 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	2210      	movs	r2, #16
 8015fca:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015fd0:	2204      	movs	r2, #4
 8015fd2:	431a      	orrs	r2, r3
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8015fd8:	2317      	movs	r3, #23
 8015fda:	18fb      	adds	r3, r7, r3
 8015fdc:	68fa      	ldr	r2, [r7, #12]
 8015fde:	2141      	movs	r1, #65	@ 0x41
 8015fe0:	5c52      	ldrb	r2, [r2, r1]
 8015fe2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8015fe4:	69bb      	ldr	r3, [r7, #24]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d004      	beq.n	8015ff4 <I2C_Slave_ISR_DMA+0x148>
 8015fea:	69ba      	ldr	r2, [r7, #24]
 8015fec:	2380      	movs	r3, #128	@ 0x80
 8015fee:	045b      	lsls	r3, r3, #17
 8015ff0:	429a      	cmp	r2, r3
 8015ff2:	d126      	bne.n	8016042 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8015ff4:	2217      	movs	r2, #23
 8015ff6:	18bb      	adds	r3, r7, r2
 8015ff8:	781b      	ldrb	r3, [r3, #0]
 8015ffa:	2b21      	cmp	r3, #33	@ 0x21
 8015ffc:	d003      	beq.n	8016006 <I2C_Slave_ISR_DMA+0x15a>
 8015ffe:	18bb      	adds	r3, r7, r2
 8016000:	781b      	ldrb	r3, [r3, #0]
 8016002:	2b29      	cmp	r3, #41	@ 0x29
 8016004:	d103      	bne.n	801600e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	2221      	movs	r2, #33	@ 0x21
 801600a:	631a      	str	r2, [r3, #48]	@ 0x30
 801600c:	e00b      	b.n	8016026 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801600e:	2217      	movs	r2, #23
 8016010:	18bb      	adds	r3, r7, r2
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	2b22      	cmp	r3, #34	@ 0x22
 8016016:	d003      	beq.n	8016020 <I2C_Slave_ISR_DMA+0x174>
 8016018:	18bb      	adds	r3, r7, r2
 801601a:	781b      	ldrb	r3, [r3, #0]
 801601c:	2b2a      	cmp	r3, #42	@ 0x2a
 801601e:	d102      	bne.n	8016026 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	2222      	movs	r2, #34	@ 0x22
 8016024:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	0011      	movs	r1, r2
 801602e:	0018      	movs	r0, r3
 8016030:	f000 fc14 	bl	801685c <I2C_ITError>
      if (treatdmanack == 1U)
 8016034:	e005      	b.n	8016042 <I2C_Slave_ISR_DMA+0x196>
 8016036:	e004      	b.n	8016042 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	2210      	movs	r2, #16
 801603e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016040:	e00f      	b.n	8016062 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8016042:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016044:	e00d      	b.n	8016062 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016046:	68bb      	ldr	r3, [r7, #8]
 8016048:	2208      	movs	r2, #8
 801604a:	4013      	ands	r3, r2
 801604c:	d009      	beq.n	8016062 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	2208      	movs	r2, #8
 8016052:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016054:	d005      	beq.n	8016062 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8016056:	68ba      	ldr	r2, [r7, #8]
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	0011      	movs	r1, r2
 801605c:	0018      	movs	r0, r3
 801605e:	f000 f86d 	bl	801613c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	2240      	movs	r2, #64	@ 0x40
 8016066:	2100      	movs	r1, #0
 8016068:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801606a:	2300      	movs	r3, #0
}
 801606c:	0018      	movs	r0, r3
 801606e:	46bd      	mov	sp, r7
 8016070:	b008      	add	sp, #32
 8016072:	bd80      	pop	{r7, pc}
 8016074:	ffff0000 	.word	0xffff0000

08016078 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8016078:	b5b0      	push	{r4, r5, r7, lr}
 801607a:	b086      	sub	sp, #24
 801607c:	af02      	add	r7, sp, #8
 801607e:	60f8      	str	r0, [r7, #12]
 8016080:	000c      	movs	r4, r1
 8016082:	0010      	movs	r0, r2
 8016084:	0019      	movs	r1, r3
 8016086:	250a      	movs	r5, #10
 8016088:	197b      	adds	r3, r7, r5
 801608a:	1c22      	adds	r2, r4, #0
 801608c:	801a      	strh	r2, [r3, #0]
 801608e:	2308      	movs	r3, #8
 8016090:	18fb      	adds	r3, r7, r3
 8016092:	1c02      	adds	r2, r0, #0
 8016094:	801a      	strh	r2, [r3, #0]
 8016096:	1dbb      	adds	r3, r7, #6
 8016098:	1c0a      	adds	r2, r1, #0
 801609a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801609c:	1dbb      	adds	r3, r7, #6
 801609e:	881b      	ldrh	r3, [r3, #0]
 80160a0:	b2da      	uxtb	r2, r3
 80160a2:	197b      	adds	r3, r7, r5
 80160a4:	8819      	ldrh	r1, [r3, #0]
 80160a6:	68f8      	ldr	r0, [r7, #12]
 80160a8:	4b23      	ldr	r3, [pc, #140]	@ (8016138 <I2C_RequestMemoryRead+0xc0>)
 80160aa:	9300      	str	r3, [sp, #0]
 80160ac:	2300      	movs	r3, #0
 80160ae:	f001 f84d 	bl	801714c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80160b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80160b4:	6a39      	ldr	r1, [r7, #32]
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	0018      	movs	r0, r3
 80160ba:	f000 fe43 	bl	8016d44 <I2C_WaitOnTXISFlagUntilTimeout>
 80160be:	1e03      	subs	r3, r0, #0
 80160c0:	d001      	beq.n	80160c6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80160c2:	2301      	movs	r3, #1
 80160c4:	e033      	b.n	801612e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80160c6:	1dbb      	adds	r3, r7, #6
 80160c8:	881b      	ldrh	r3, [r3, #0]
 80160ca:	2b01      	cmp	r3, #1
 80160cc:	d107      	bne.n	80160de <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80160ce:	2308      	movs	r3, #8
 80160d0:	18fb      	adds	r3, r7, r3
 80160d2:	881b      	ldrh	r3, [r3, #0]
 80160d4:	b2da      	uxtb	r2, r3
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	629a      	str	r2, [r3, #40]	@ 0x28
 80160dc:	e019      	b.n	8016112 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80160de:	2308      	movs	r3, #8
 80160e0:	18fb      	adds	r3, r7, r3
 80160e2:	881b      	ldrh	r3, [r3, #0]
 80160e4:	0a1b      	lsrs	r3, r3, #8
 80160e6:	b29b      	uxth	r3, r3
 80160e8:	b2da      	uxtb	r2, r3
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80160f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80160f2:	6a39      	ldr	r1, [r7, #32]
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	0018      	movs	r0, r3
 80160f8:	f000 fe24 	bl	8016d44 <I2C_WaitOnTXISFlagUntilTimeout>
 80160fc:	1e03      	subs	r3, r0, #0
 80160fe:	d001      	beq.n	8016104 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8016100:	2301      	movs	r3, #1
 8016102:	e014      	b.n	801612e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016104:	2308      	movs	r3, #8
 8016106:	18fb      	adds	r3, r7, r3
 8016108:	881b      	ldrh	r3, [r3, #0]
 801610a:	b2da      	uxtb	r2, r3
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8016112:	6a3a      	ldr	r2, [r7, #32]
 8016114:	68f8      	ldr	r0, [r7, #12]
 8016116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016118:	9300      	str	r3, [sp, #0]
 801611a:	0013      	movs	r3, r2
 801611c:	2200      	movs	r2, #0
 801611e:	2140      	movs	r1, #64	@ 0x40
 8016120:	f000 fdc2 	bl	8016ca8 <I2C_WaitOnFlagUntilTimeout>
 8016124:	1e03      	subs	r3, r0, #0
 8016126:	d001      	beq.n	801612c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8016128:	2301      	movs	r3, #1
 801612a:	e000      	b.n	801612e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 801612c:	2300      	movs	r3, #0
}
 801612e:	0018      	movs	r0, r3
 8016130:	46bd      	mov	sp, r7
 8016132:	b004      	add	sp, #16
 8016134:	bdb0      	pop	{r4, r5, r7, pc}
 8016136:	46c0      	nop			@ (mov r8, r8)
 8016138:	80002000 	.word	0x80002000

0801613c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801613c:	b5b0      	push	{r4, r5, r7, lr}
 801613e:	b084      	sub	sp, #16
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
 8016144:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	2241      	movs	r2, #65	@ 0x41
 801614a:	5c9b      	ldrb	r3, [r3, r2]
 801614c:	b2db      	uxtb	r3, r3
 801614e:	001a      	movs	r2, r3
 8016150:	2328      	movs	r3, #40	@ 0x28
 8016152:	4013      	ands	r3, r2
 8016154:	2b28      	cmp	r3, #40	@ 0x28
 8016156:	d000      	beq.n	801615a <I2C_ITAddrCplt+0x1e>
 8016158:	e088      	b.n	801626c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	699b      	ldr	r3, [r3, #24]
 8016160:	0c1b      	lsrs	r3, r3, #16
 8016162:	b2da      	uxtb	r2, r3
 8016164:	250f      	movs	r5, #15
 8016166:	197b      	adds	r3, r7, r5
 8016168:	2101      	movs	r1, #1
 801616a:	400a      	ands	r2, r1
 801616c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	699b      	ldr	r3, [r3, #24]
 8016174:	0c1b      	lsrs	r3, r3, #16
 8016176:	b29a      	uxth	r2, r3
 8016178:	200c      	movs	r0, #12
 801617a:	183b      	adds	r3, r7, r0
 801617c:	21fe      	movs	r1, #254	@ 0xfe
 801617e:	400a      	ands	r2, r1
 8016180:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	689b      	ldr	r3, [r3, #8]
 8016188:	b29a      	uxth	r2, r3
 801618a:	240a      	movs	r4, #10
 801618c:	193b      	adds	r3, r7, r4
 801618e:	0592      	lsls	r2, r2, #22
 8016190:	0d92      	lsrs	r2, r2, #22
 8016192:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	68db      	ldr	r3, [r3, #12]
 801619a:	b29a      	uxth	r2, r3
 801619c:	2308      	movs	r3, #8
 801619e:	18fb      	adds	r3, r7, r3
 80161a0:	21fe      	movs	r1, #254	@ 0xfe
 80161a2:	400a      	ands	r2, r1
 80161a4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	68db      	ldr	r3, [r3, #12]
 80161aa:	2b02      	cmp	r3, #2
 80161ac:	d148      	bne.n	8016240 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80161ae:	0021      	movs	r1, r4
 80161b0:	187b      	adds	r3, r7, r1
 80161b2:	881b      	ldrh	r3, [r3, #0]
 80161b4:	09db      	lsrs	r3, r3, #7
 80161b6:	b29a      	uxth	r2, r3
 80161b8:	183b      	adds	r3, r7, r0
 80161ba:	881b      	ldrh	r3, [r3, #0]
 80161bc:	4053      	eors	r3, r2
 80161be:	b29b      	uxth	r3, r3
 80161c0:	001a      	movs	r2, r3
 80161c2:	2306      	movs	r3, #6
 80161c4:	4013      	ands	r3, r2
 80161c6:	d120      	bne.n	801620a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80161c8:	183b      	adds	r3, r7, r0
 80161ca:	187a      	adds	r2, r7, r1
 80161cc:	8812      	ldrh	r2, [r2, #0]
 80161ce:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80161d4:	1c5a      	adds	r2, r3, #1
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80161de:	2b02      	cmp	r3, #2
 80161e0:	d14c      	bne.n	801627c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	2200      	movs	r2, #0
 80161e6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	2208      	movs	r2, #8
 80161ee:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	2240      	movs	r2, #64	@ 0x40
 80161f4:	2100      	movs	r1, #0
 80161f6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80161f8:	183b      	adds	r3, r7, r0
 80161fa:	881a      	ldrh	r2, [r3, #0]
 80161fc:	197b      	adds	r3, r7, r5
 80161fe:	7819      	ldrb	r1, [r3, #0]
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	0018      	movs	r0, r3
 8016204:	f7ff f9d7 	bl	80155b6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8016208:	e038      	b.n	801627c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 801620a:	240c      	movs	r4, #12
 801620c:	193b      	adds	r3, r7, r4
 801620e:	2208      	movs	r2, #8
 8016210:	18ba      	adds	r2, r7, r2
 8016212:	8812      	ldrh	r2, [r2, #0]
 8016214:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8016216:	2380      	movs	r3, #128	@ 0x80
 8016218:	021a      	lsls	r2, r3, #8
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	0011      	movs	r1, r2
 801621e:	0018      	movs	r0, r3
 8016220:	f001 f85c 	bl	80172dc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	2240      	movs	r2, #64	@ 0x40
 8016228:	2100      	movs	r1, #0
 801622a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801622c:	193b      	adds	r3, r7, r4
 801622e:	881a      	ldrh	r2, [r3, #0]
 8016230:	230f      	movs	r3, #15
 8016232:	18fb      	adds	r3, r7, r3
 8016234:	7819      	ldrb	r1, [r3, #0]
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	0018      	movs	r0, r3
 801623a:	f7ff f9bc 	bl	80155b6 <HAL_I2C_AddrCallback>
}
 801623e:	e01d      	b.n	801627c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8016240:	2380      	movs	r3, #128	@ 0x80
 8016242:	021a      	lsls	r2, r3, #8
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	0011      	movs	r1, r2
 8016248:	0018      	movs	r0, r3
 801624a:	f001 f847 	bl	80172dc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	2240      	movs	r2, #64	@ 0x40
 8016252:	2100      	movs	r1, #0
 8016254:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016256:	230c      	movs	r3, #12
 8016258:	18fb      	adds	r3, r7, r3
 801625a:	881a      	ldrh	r2, [r3, #0]
 801625c:	230f      	movs	r3, #15
 801625e:	18fb      	adds	r3, r7, r3
 8016260:	7819      	ldrb	r1, [r3, #0]
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	0018      	movs	r0, r3
 8016266:	f7ff f9a6 	bl	80155b6 <HAL_I2C_AddrCallback>
}
 801626a:	e007      	b.n	801627c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	2208      	movs	r2, #8
 8016272:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	2240      	movs	r2, #64	@ 0x40
 8016278:	2100      	movs	r1, #0
 801627a:	5499      	strb	r1, [r3, r2]
}
 801627c:	46c0      	nop			@ (mov r8, r8)
 801627e:	46bd      	mov	sp, r7
 8016280:	b004      	add	sp, #16
 8016282:	bdb0      	pop	{r4, r5, r7, pc}

08016284 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b082      	sub	sp, #8
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2242      	movs	r2, #66	@ 0x42
 8016290:	2100      	movs	r1, #0
 8016292:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	2241      	movs	r2, #65	@ 0x41
 8016298:	5c9b      	ldrb	r3, [r3, r2]
 801629a:	b2db      	uxtb	r3, r3
 801629c:	2b21      	cmp	r3, #33	@ 0x21
 801629e:	d117      	bne.n	80162d0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	2241      	movs	r2, #65	@ 0x41
 80162a4:	2120      	movs	r1, #32
 80162a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	2211      	movs	r2, #17
 80162ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	2200      	movs	r2, #0
 80162b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2101      	movs	r1, #1
 80162b8:	0018      	movs	r0, r3
 80162ba:	f001 f80f 	bl	80172dc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	2240      	movs	r2, #64	@ 0x40
 80162c2:	2100      	movs	r1, #0
 80162c4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	0018      	movs	r0, r3
 80162ca:	f7ff f954 	bl	8015576 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80162ce:	e016      	b.n	80162fe <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	2241      	movs	r2, #65	@ 0x41
 80162d4:	2120      	movs	r1, #32
 80162d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	2212      	movs	r2, #18
 80162dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	2200      	movs	r2, #0
 80162e2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2102      	movs	r1, #2
 80162e8:	0018      	movs	r0, r3
 80162ea:	f000 fff7 	bl	80172dc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	2240      	movs	r2, #64	@ 0x40
 80162f2:	2100      	movs	r1, #0
 80162f4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	0018      	movs	r0, r3
 80162fa:	f7ff f944 	bl	8015586 <HAL_I2C_MasterRxCpltCallback>
}
 80162fe:	46c0      	nop			@ (mov r8, r8)
 8016300:	46bd      	mov	sp, r7
 8016302:	b002      	add	sp, #8
 8016304:	bd80      	pop	{r7, pc}
	...

08016308 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b084      	sub	sp, #16
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2242      	movs	r2, #66	@ 0x42
 801631c:	2100      	movs	r1, #0
 801631e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8016320:	68fa      	ldr	r2, [r7, #12]
 8016322:	2380      	movs	r3, #128	@ 0x80
 8016324:	01db      	lsls	r3, r3, #7
 8016326:	4013      	ands	r3, r2
 8016328:	d008      	beq.n	801633c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	681a      	ldr	r2, [r3, #0]
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	4924      	ldr	r1, [pc, #144]	@ (80163c8 <I2C_ITSlaveSeqCplt+0xc0>)
 8016336:	400a      	ands	r2, r1
 8016338:	601a      	str	r2, [r3, #0]
 801633a:	e00c      	b.n	8016356 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801633c:	68fa      	ldr	r2, [r7, #12]
 801633e:	2380      	movs	r3, #128	@ 0x80
 8016340:	021b      	lsls	r3, r3, #8
 8016342:	4013      	ands	r3, r2
 8016344:	d007      	beq.n	8016356 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	681a      	ldr	r2, [r3, #0]
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	491e      	ldr	r1, [pc, #120]	@ (80163cc <I2C_ITSlaveSeqCplt+0xc4>)
 8016352:	400a      	ands	r2, r1
 8016354:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	2241      	movs	r2, #65	@ 0x41
 801635a:	5c9b      	ldrb	r3, [r3, r2]
 801635c:	b2db      	uxtb	r3, r3
 801635e:	2b29      	cmp	r3, #41	@ 0x29
 8016360:	d114      	bne.n	801638c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	2241      	movs	r2, #65	@ 0x41
 8016366:	2128      	movs	r1, #40	@ 0x28
 8016368:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	2221      	movs	r2, #33	@ 0x21
 801636e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	2101      	movs	r1, #1
 8016374:	0018      	movs	r0, r3
 8016376:	f000 ffb1 	bl	80172dc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	2240      	movs	r2, #64	@ 0x40
 801637e:	2100      	movs	r1, #0
 8016380:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	0018      	movs	r0, r3
 8016386:	f7ff f906 	bl	8015596 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801638a:	e019      	b.n	80163c0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	2241      	movs	r2, #65	@ 0x41
 8016390:	5c9b      	ldrb	r3, [r3, r2]
 8016392:	b2db      	uxtb	r3, r3
 8016394:	2b2a      	cmp	r3, #42	@ 0x2a
 8016396:	d113      	bne.n	80163c0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2241      	movs	r2, #65	@ 0x41
 801639c:	2128      	movs	r1, #40	@ 0x28
 801639e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	2222      	movs	r2, #34	@ 0x22
 80163a4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	2102      	movs	r1, #2
 80163aa:	0018      	movs	r0, r3
 80163ac:	f000 ff96 	bl	80172dc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	2240      	movs	r2, #64	@ 0x40
 80163b4:	2100      	movs	r1, #0
 80163b6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	0018      	movs	r0, r3
 80163bc:	f7ff f8f3 	bl	80155a6 <HAL_I2C_SlaveRxCpltCallback>
}
 80163c0:	46c0      	nop			@ (mov r8, r8)
 80163c2:	46bd      	mov	sp, r7
 80163c4:	b004      	add	sp, #16
 80163c6:	bd80      	pop	{r7, pc}
 80163c8:	ffffbfff 	.word	0xffffbfff
 80163cc:	ffff7fff 	.word	0xffff7fff

080163d0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b086      	sub	sp, #24
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
 80163d8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	2220      	movs	r2, #32
 80163e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	2241      	movs	r2, #65	@ 0x41
 80163ea:	5c9b      	ldrb	r3, [r3, r2]
 80163ec:	b2db      	uxtb	r3, r3
 80163ee:	2b21      	cmp	r3, #33	@ 0x21
 80163f0:	d108      	bne.n	8016404 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	2101      	movs	r1, #1
 80163f6:	0018      	movs	r0, r3
 80163f8:	f000 ff70 	bl	80172dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2211      	movs	r2, #17
 8016400:	631a      	str	r2, [r3, #48]	@ 0x30
 8016402:	e00d      	b.n	8016420 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	2241      	movs	r2, #65	@ 0x41
 8016408:	5c9b      	ldrb	r3, [r3, r2]
 801640a:	b2db      	uxtb	r3, r3
 801640c:	2b22      	cmp	r3, #34	@ 0x22
 801640e:	d107      	bne.n	8016420 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	2102      	movs	r1, #2
 8016414:	0018      	movs	r0, r3
 8016416:	f000 ff61 	bl	80172dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	2212      	movs	r2, #18
 801641e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	685a      	ldr	r2, [r3, #4]
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	494e      	ldr	r1, [pc, #312]	@ (8016564 <I2C_ITMasterCplt+0x194>)
 801642c:	400a      	ands	r2, r1
 801642e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	2200      	movs	r2, #0
 8016434:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	4a4b      	ldr	r2, [pc, #300]	@ (8016568 <I2C_ITMasterCplt+0x198>)
 801643a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 801643c:	697b      	ldr	r3, [r7, #20]
 801643e:	2210      	movs	r2, #16
 8016440:	4013      	ands	r3, r2
 8016442:	d009      	beq.n	8016458 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	2210      	movs	r2, #16
 801644a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016450:	2204      	movs	r2, #4
 8016452:	431a      	orrs	r2, r3
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	2241      	movs	r2, #65	@ 0x41
 801645c:	5c9b      	ldrb	r3, [r3, r2]
 801645e:	b2db      	uxtb	r3, r3
 8016460:	2b60      	cmp	r3, #96	@ 0x60
 8016462:	d109      	bne.n	8016478 <I2C_ITMasterCplt+0xa8>
 8016464:	697b      	ldr	r3, [r7, #20]
 8016466:	2204      	movs	r2, #4
 8016468:	4013      	ands	r3, r2
 801646a:	d005      	beq.n	8016478 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016472:	b2db      	uxtb	r3, r3
 8016474:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8016476:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	0018      	movs	r0, r3
 801647c:	f000 fb19 	bl	8016ab2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016484:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	2241      	movs	r2, #65	@ 0x41
 801648a:	5c9b      	ldrb	r3, [r3, r2]
 801648c:	b2db      	uxtb	r3, r3
 801648e:	2b60      	cmp	r3, #96	@ 0x60
 8016490:	d002      	beq.n	8016498 <I2C_ITMasterCplt+0xc8>
 8016492:	693b      	ldr	r3, [r7, #16]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d007      	beq.n	80164a8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	0011      	movs	r1, r2
 80164a0:	0018      	movs	r0, r3
 80164a2:	f000 f9db 	bl	801685c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80164a6:	e058      	b.n	801655a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	2241      	movs	r2, #65	@ 0x41
 80164ac:	5c9b      	ldrb	r3, [r3, r2]
 80164ae:	b2db      	uxtb	r3, r3
 80164b0:	2b21      	cmp	r3, #33	@ 0x21
 80164b2:	d126      	bne.n	8016502 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	2241      	movs	r2, #65	@ 0x41
 80164b8:	2120      	movs	r1, #32
 80164ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	2200      	movs	r2, #0
 80164c0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	2242      	movs	r2, #66	@ 0x42
 80164c6:	5c9b      	ldrb	r3, [r3, r2]
 80164c8:	b2db      	uxtb	r3, r3
 80164ca:	2b40      	cmp	r3, #64	@ 0x40
 80164cc:	d10c      	bne.n	80164e8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	2242      	movs	r2, #66	@ 0x42
 80164d2:	2100      	movs	r1, #0
 80164d4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	2240      	movs	r2, #64	@ 0x40
 80164da:	2100      	movs	r1, #0
 80164dc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	0018      	movs	r0, r3
 80164e2:	f7ff f880 	bl	80155e6 <HAL_I2C_MemTxCpltCallback>
}
 80164e6:	e038      	b.n	801655a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	2242      	movs	r2, #66	@ 0x42
 80164ec:	2100      	movs	r1, #0
 80164ee:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	2240      	movs	r2, #64	@ 0x40
 80164f4:	2100      	movs	r1, #0
 80164f6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	0018      	movs	r0, r3
 80164fc:	f7ff f83b 	bl	8015576 <HAL_I2C_MasterTxCpltCallback>
}
 8016500:	e02b      	b.n	801655a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	2241      	movs	r2, #65	@ 0x41
 8016506:	5c9b      	ldrb	r3, [r3, r2]
 8016508:	b2db      	uxtb	r3, r3
 801650a:	2b22      	cmp	r3, #34	@ 0x22
 801650c:	d125      	bne.n	801655a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	2241      	movs	r2, #65	@ 0x41
 8016512:	2120      	movs	r1, #32
 8016514:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	2200      	movs	r2, #0
 801651a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	2242      	movs	r2, #66	@ 0x42
 8016520:	5c9b      	ldrb	r3, [r3, r2]
 8016522:	b2db      	uxtb	r3, r3
 8016524:	2b40      	cmp	r3, #64	@ 0x40
 8016526:	d10c      	bne.n	8016542 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	2242      	movs	r2, #66	@ 0x42
 801652c:	2100      	movs	r1, #0
 801652e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	2240      	movs	r2, #64	@ 0x40
 8016534:	2100      	movs	r1, #0
 8016536:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	0018      	movs	r0, r3
 801653c:	f7ff f85b 	bl	80155f6 <HAL_I2C_MemRxCpltCallback>
}
 8016540:	e00b      	b.n	801655a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	2242      	movs	r2, #66	@ 0x42
 8016546:	2100      	movs	r1, #0
 8016548:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	2240      	movs	r2, #64	@ 0x40
 801654e:	2100      	movs	r1, #0
 8016550:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	0018      	movs	r0, r3
 8016556:	f7ff f816 	bl	8015586 <HAL_I2C_MasterRxCpltCallback>
}
 801655a:	46c0      	nop			@ (mov r8, r8)
 801655c:	46bd      	mov	sp, r7
 801655e:	b006      	add	sp, #24
 8016560:	bd80      	pop	{r7, pc}
 8016562:	46c0      	nop			@ (mov r8, r8)
 8016564:	fe00e800 	.word	0xfe00e800
 8016568:	ffff0000 	.word	0xffff0000

0801656c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b086      	sub	sp, #24
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
 8016574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801657e:	683b      	ldr	r3, [r7, #0]
 8016580:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8016582:	200f      	movs	r0, #15
 8016584:	183b      	adds	r3, r7, r0
 8016586:	687a      	ldr	r2, [r7, #4]
 8016588:	2141      	movs	r1, #65	@ 0x41
 801658a:	5c52      	ldrb	r2, [r2, r1]
 801658c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	2220      	movs	r2, #32
 8016594:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8016596:	183b      	adds	r3, r7, r0
 8016598:	781b      	ldrb	r3, [r3, #0]
 801659a:	2b21      	cmp	r3, #33	@ 0x21
 801659c:	d003      	beq.n	80165a6 <I2C_ITSlaveCplt+0x3a>
 801659e:	183b      	adds	r3, r7, r0
 80165a0:	781b      	ldrb	r3, [r3, #0]
 80165a2:	2b29      	cmp	r3, #41	@ 0x29
 80165a4:	d109      	bne.n	80165ba <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80165a6:	4a7b      	ldr	r2, [pc, #492]	@ (8016794 <I2C_ITSlaveCplt+0x228>)
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	0011      	movs	r1, r2
 80165ac:	0018      	movs	r0, r3
 80165ae:	f000 fe95 	bl	80172dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	2221      	movs	r2, #33	@ 0x21
 80165b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80165b8:	e011      	b.n	80165de <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80165ba:	220f      	movs	r2, #15
 80165bc:	18bb      	adds	r3, r7, r2
 80165be:	781b      	ldrb	r3, [r3, #0]
 80165c0:	2b22      	cmp	r3, #34	@ 0x22
 80165c2:	d003      	beq.n	80165cc <I2C_ITSlaveCplt+0x60>
 80165c4:	18bb      	adds	r3, r7, r2
 80165c6:	781b      	ldrb	r3, [r3, #0]
 80165c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80165ca:	d108      	bne.n	80165de <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80165cc:	4a72      	ldr	r2, [pc, #456]	@ (8016798 <I2C_ITSlaveCplt+0x22c>)
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	0011      	movs	r1, r2
 80165d2:	0018      	movs	r0, r3
 80165d4:	f000 fe82 	bl	80172dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2222      	movs	r2, #34	@ 0x22
 80165dc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	685a      	ldr	r2, [r3, #4]
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	2180      	movs	r1, #128	@ 0x80
 80165ea:	0209      	lsls	r1, r1, #8
 80165ec:	430a      	orrs	r2, r1
 80165ee:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	685a      	ldr	r2, [r3, #4]
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	4968      	ldr	r1, [pc, #416]	@ (801679c <I2C_ITSlaveCplt+0x230>)
 80165fc:	400a      	ands	r2, r1
 80165fe:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	0018      	movs	r0, r3
 8016604:	f000 fa55 	bl	8016ab2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8016608:	693a      	ldr	r2, [r7, #16]
 801660a:	2380      	movs	r3, #128	@ 0x80
 801660c:	01db      	lsls	r3, r3, #7
 801660e:	4013      	ands	r3, r2
 8016610:	d013      	beq.n	801663a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	681a      	ldr	r2, [r3, #0]
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	4960      	ldr	r1, [pc, #384]	@ (80167a0 <I2C_ITSlaveCplt+0x234>)
 801661e:	400a      	ands	r2, r1
 8016620:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016626:	2b00      	cmp	r3, #0
 8016628:	d01f      	beq.n	801666a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	685b      	ldr	r3, [r3, #4]
 8016632:	b29a      	uxth	r2, r3
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016638:	e017      	b.n	801666a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801663a:	693a      	ldr	r2, [r7, #16]
 801663c:	2380      	movs	r3, #128	@ 0x80
 801663e:	021b      	lsls	r3, r3, #8
 8016640:	4013      	ands	r3, r2
 8016642:	d012      	beq.n	801666a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	681a      	ldr	r2, [r3, #0]
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	4955      	ldr	r1, [pc, #340]	@ (80167a4 <I2C_ITSlaveCplt+0x238>)
 8016650:	400a      	ands	r2, r1
 8016652:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016658:	2b00      	cmp	r3, #0
 801665a:	d006      	beq.n	801666a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	685b      	ldr	r3, [r3, #4]
 8016664:	b29a      	uxth	r2, r3
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	2204      	movs	r2, #4
 801666e:	4013      	ands	r3, r2
 8016670:	d020      	beq.n	80166b4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8016672:	697b      	ldr	r3, [r7, #20]
 8016674:	2204      	movs	r2, #4
 8016676:	4393      	bics	r3, r2
 8016678:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016684:	b2d2      	uxtb	r2, r2
 8016686:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801668c:	1c5a      	adds	r2, r3, #1
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016696:	2b00      	cmp	r3, #0
 8016698:	d00c      	beq.n	80166b4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801669e:	3b01      	subs	r3, #1
 80166a0:	b29a      	uxth	r2, r3
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166aa:	b29b      	uxth	r3, r3
 80166ac:	3b01      	subs	r3, #1
 80166ae:	b29a      	uxth	r2, r3
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166b8:	b29b      	uxth	r3, r3
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d005      	beq.n	80166ca <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166c2:	2204      	movs	r2, #4
 80166c4:	431a      	orrs	r2, r3
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	2242      	movs	r2, #66	@ 0x42
 80166ce:	2100      	movs	r1, #0
 80166d0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	2200      	movs	r2, #0
 80166d6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d013      	beq.n	8016708 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	0011      	movs	r1, r2
 80166e8:	0018      	movs	r0, r3
 80166ea:	f000 f8b7 	bl	801685c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	2241      	movs	r2, #65	@ 0x41
 80166f2:	5c9b      	ldrb	r3, [r3, r2]
 80166f4:	b2db      	uxtb	r3, r3
 80166f6:	2b28      	cmp	r3, #40	@ 0x28
 80166f8:	d147      	bne.n	801678a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80166fa:	697a      	ldr	r2, [r7, #20]
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	0011      	movs	r1, r2
 8016700:	0018      	movs	r0, r3
 8016702:	f000 f853 	bl	80167ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8016706:	e040      	b.n	801678a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801670c:	4a26      	ldr	r2, [pc, #152]	@ (80167a8 <I2C_ITSlaveCplt+0x23c>)
 801670e:	4293      	cmp	r3, r2
 8016710:	d016      	beq.n	8016740 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	0018      	movs	r0, r3
 8016716:	f7ff fdf7 	bl	8016308 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	4a22      	ldr	r2, [pc, #136]	@ (80167a8 <I2C_ITSlaveCplt+0x23c>)
 801671e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	2241      	movs	r2, #65	@ 0x41
 8016724:	2120      	movs	r1, #32
 8016726:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2200      	movs	r2, #0
 801672c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	2240      	movs	r2, #64	@ 0x40
 8016732:	2100      	movs	r1, #0
 8016734:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	0018      	movs	r0, r3
 801673a:	f7fe ff4c 	bl	80155d6 <HAL_I2C_ListenCpltCallback>
}
 801673e:	e024      	b.n	801678a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	2241      	movs	r2, #65	@ 0x41
 8016744:	5c9b      	ldrb	r3, [r3, r2]
 8016746:	b2db      	uxtb	r3, r3
 8016748:	2b22      	cmp	r3, #34	@ 0x22
 801674a:	d10f      	bne.n	801676c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	2241      	movs	r2, #65	@ 0x41
 8016750:	2120      	movs	r1, #32
 8016752:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	2200      	movs	r2, #0
 8016758:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	2240      	movs	r2, #64	@ 0x40
 801675e:	2100      	movs	r1, #0
 8016760:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	0018      	movs	r0, r3
 8016766:	f7fe ff1e 	bl	80155a6 <HAL_I2C_SlaveRxCpltCallback>
}
 801676a:	e00e      	b.n	801678a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2241      	movs	r2, #65	@ 0x41
 8016770:	2120      	movs	r1, #32
 8016772:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	2200      	movs	r2, #0
 8016778:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	2240      	movs	r2, #64	@ 0x40
 801677e:	2100      	movs	r1, #0
 8016780:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	0018      	movs	r0, r3
 8016786:	f7fe ff06 	bl	8015596 <HAL_I2C_SlaveTxCpltCallback>
}
 801678a:	46c0      	nop			@ (mov r8, r8)
 801678c:	46bd      	mov	sp, r7
 801678e:	b006      	add	sp, #24
 8016790:	bd80      	pop	{r7, pc}
 8016792:	46c0      	nop			@ (mov r8, r8)
 8016794:	00008001 	.word	0x00008001
 8016798:	00008002 	.word	0x00008002
 801679c:	fe00e800 	.word	0xfe00e800
 80167a0:	ffffbfff 	.word	0xffffbfff
 80167a4:	ffff7fff 	.word	0xffff7fff
 80167a8:	ffff0000 	.word	0xffff0000

080167ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b082      	sub	sp, #8
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
 80167b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	4a26      	ldr	r2, [pc, #152]	@ (8016854 <I2C_ITListenCplt+0xa8>)
 80167ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	2200      	movs	r2, #0
 80167c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	2241      	movs	r2, #65	@ 0x41
 80167c6:	2120      	movs	r1, #32
 80167c8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	2242      	movs	r2, #66	@ 0x42
 80167ce:	2100      	movs	r1, #0
 80167d0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	2200      	movs	r2, #0
 80167d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80167d8:	683b      	ldr	r3, [r7, #0]
 80167da:	2204      	movs	r2, #4
 80167dc:	4013      	ands	r3, r2
 80167de:	d022      	beq.n	8016826 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167ea:	b2d2      	uxtb	r2, r2
 80167ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167f2:	1c5a      	adds	r2, r3, #1
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d012      	beq.n	8016826 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016804:	3b01      	subs	r3, #1
 8016806:	b29a      	uxth	r2, r3
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016810:	b29b      	uxth	r3, r3
 8016812:	3b01      	subs	r3, #1
 8016814:	b29a      	uxth	r2, r3
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801681e:	2204      	movs	r2, #4
 8016820:	431a      	orrs	r2, r3
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8016826:	4a0c      	ldr	r2, [pc, #48]	@ (8016858 <I2C_ITListenCplt+0xac>)
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	0011      	movs	r1, r2
 801682c:	0018      	movs	r0, r3
 801682e:	f000 fd55 	bl	80172dc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	2210      	movs	r2, #16
 8016838:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2240      	movs	r2, #64	@ 0x40
 801683e:	2100      	movs	r1, #0
 8016840:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	0018      	movs	r0, r3
 8016846:	f7fe fec6 	bl	80155d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801684a:	46c0      	nop			@ (mov r8, r8)
 801684c:	46bd      	mov	sp, r7
 801684e:	b002      	add	sp, #8
 8016850:	bd80      	pop	{r7, pc}
 8016852:	46c0      	nop			@ (mov r8, r8)
 8016854:	ffff0000 	.word	0xffff0000
 8016858:	00008003 	.word	0x00008003

0801685c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801685c:	b580      	push	{r7, lr}
 801685e:	b084      	sub	sp, #16
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
 8016864:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8016866:	200f      	movs	r0, #15
 8016868:	183b      	adds	r3, r7, r0
 801686a:	687a      	ldr	r2, [r7, #4]
 801686c:	2141      	movs	r1, #65	@ 0x41
 801686e:	5c52      	ldrb	r2, [r2, r1]
 8016870:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	2242      	movs	r2, #66	@ 0x42
 8016876:	2100      	movs	r1, #0
 8016878:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	4a72      	ldr	r2, [pc, #456]	@ (8016a48 <I2C_ITError+0x1ec>)
 801687e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	2200      	movs	r2, #0
 8016884:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	431a      	orrs	r2, r3
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8016892:	183b      	adds	r3, r7, r0
 8016894:	781b      	ldrb	r3, [r3, #0]
 8016896:	2b28      	cmp	r3, #40	@ 0x28
 8016898:	d007      	beq.n	80168aa <I2C_ITError+0x4e>
 801689a:	183b      	adds	r3, r7, r0
 801689c:	781b      	ldrb	r3, [r3, #0]
 801689e:	2b29      	cmp	r3, #41	@ 0x29
 80168a0:	d003      	beq.n	80168aa <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80168a2:	183b      	adds	r3, r7, r0
 80168a4:	781b      	ldrb	r3, [r3, #0]
 80168a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80168a8:	d10c      	bne.n	80168c4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	2103      	movs	r1, #3
 80168ae:	0018      	movs	r0, r3
 80168b0:	f000 fd14 	bl	80172dc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	2241      	movs	r2, #65	@ 0x41
 80168b8:	2128      	movs	r1, #40	@ 0x28
 80168ba:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	4a63      	ldr	r2, [pc, #396]	@ (8016a4c <I2C_ITError+0x1f0>)
 80168c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80168c2:	e032      	b.n	801692a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80168c4:	4a62      	ldr	r2, [pc, #392]	@ (8016a50 <I2C_ITError+0x1f4>)
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	0011      	movs	r1, r2
 80168ca:	0018      	movs	r0, r3
 80168cc:	f000 fd06 	bl	80172dc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	0018      	movs	r0, r3
 80168d4:	f000 f8ed 	bl	8016ab2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	2241      	movs	r2, #65	@ 0x41
 80168dc:	5c9b      	ldrb	r3, [r3, r2]
 80168de:	b2db      	uxtb	r3, r3
 80168e0:	2b60      	cmp	r3, #96	@ 0x60
 80168e2:	d01f      	beq.n	8016924 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2241      	movs	r2, #65	@ 0x41
 80168e8:	2120      	movs	r1, #32
 80168ea:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	699b      	ldr	r3, [r3, #24]
 80168f2:	2220      	movs	r2, #32
 80168f4:	4013      	ands	r3, r2
 80168f6:	2b20      	cmp	r3, #32
 80168f8:	d114      	bne.n	8016924 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	699b      	ldr	r3, [r3, #24]
 8016900:	2210      	movs	r2, #16
 8016902:	4013      	ands	r3, r2
 8016904:	2b10      	cmp	r3, #16
 8016906:	d109      	bne.n	801691c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	2210      	movs	r2, #16
 801690e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016914:	2204      	movs	r2, #4
 8016916:	431a      	orrs	r2, r3
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	2220      	movs	r2, #32
 8016922:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2200      	movs	r2, #0
 8016928:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801692e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016934:	2b00      	cmp	r3, #0
 8016936:	d03b      	beq.n	80169b0 <I2C_ITError+0x154>
 8016938:	68bb      	ldr	r3, [r7, #8]
 801693a:	2b11      	cmp	r3, #17
 801693c:	d002      	beq.n	8016944 <I2C_ITError+0xe8>
 801693e:	68bb      	ldr	r3, [r7, #8]
 8016940:	2b21      	cmp	r3, #33	@ 0x21
 8016942:	d135      	bne.n	80169b0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	681a      	ldr	r2, [r3, #0]
 801694a:	2380      	movs	r3, #128	@ 0x80
 801694c:	01db      	lsls	r3, r3, #7
 801694e:	401a      	ands	r2, r3
 8016950:	2380      	movs	r3, #128	@ 0x80
 8016952:	01db      	lsls	r3, r3, #7
 8016954:	429a      	cmp	r2, r3
 8016956:	d107      	bne.n	8016968 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	681a      	ldr	r2, [r3, #0]
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	493c      	ldr	r1, [pc, #240]	@ (8016a54 <I2C_ITError+0x1f8>)
 8016964:	400a      	ands	r2, r1
 8016966:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801696c:	0018      	movs	r0, r3
 801696e:	f7fd faca 	bl	8013f06 <HAL_DMA_GetState>
 8016972:	0003      	movs	r3, r0
 8016974:	2b01      	cmp	r3, #1
 8016976:	d016      	beq.n	80169a6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801697c:	4a36      	ldr	r2, [pc, #216]	@ (8016a58 <I2C_ITError+0x1fc>)
 801697e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	2240      	movs	r2, #64	@ 0x40
 8016984:	2100      	movs	r1, #0
 8016986:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801698c:	0018      	movs	r0, r3
 801698e:	f7fd f9c5 	bl	8013d1c <HAL_DMA_Abort_IT>
 8016992:	1e03      	subs	r3, r0, #0
 8016994:	d051      	beq.n	8016a3a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801699a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169a0:	0018      	movs	r0, r3
 80169a2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80169a4:	e049      	b.n	8016a3a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	0018      	movs	r0, r3
 80169aa:	f000 f859 	bl	8016a60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80169ae:	e044      	b.n	8016a3a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d03b      	beq.n	8016a30 <I2C_ITError+0x1d4>
 80169b8:	68bb      	ldr	r3, [r7, #8]
 80169ba:	2b12      	cmp	r3, #18
 80169bc:	d002      	beq.n	80169c4 <I2C_ITError+0x168>
 80169be:	68bb      	ldr	r3, [r7, #8]
 80169c0:	2b22      	cmp	r3, #34	@ 0x22
 80169c2:	d135      	bne.n	8016a30 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	681a      	ldr	r2, [r3, #0]
 80169ca:	2380      	movs	r3, #128	@ 0x80
 80169cc:	021b      	lsls	r3, r3, #8
 80169ce:	401a      	ands	r2, r3
 80169d0:	2380      	movs	r3, #128	@ 0x80
 80169d2:	021b      	lsls	r3, r3, #8
 80169d4:	429a      	cmp	r2, r3
 80169d6:	d107      	bne.n	80169e8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	681a      	ldr	r2, [r3, #0]
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	491e      	ldr	r1, [pc, #120]	@ (8016a5c <I2C_ITError+0x200>)
 80169e4:	400a      	ands	r2, r1
 80169e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80169ec:	0018      	movs	r0, r3
 80169ee:	f7fd fa8a 	bl	8013f06 <HAL_DMA_GetState>
 80169f2:	0003      	movs	r3, r0
 80169f4:	2b01      	cmp	r3, #1
 80169f6:	d016      	beq.n	8016a26 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80169fc:	4a16      	ldr	r2, [pc, #88]	@ (8016a58 <I2C_ITError+0x1fc>)
 80169fe:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2240      	movs	r2, #64	@ 0x40
 8016a04:	2100      	movs	r1, #0
 8016a06:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a0c:	0018      	movs	r0, r3
 8016a0e:	f7fd f985 	bl	8013d1c <HAL_DMA_Abort_IT>
 8016a12:	1e03      	subs	r3, r0, #0
 8016a14:	d013      	beq.n	8016a3e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a20:	0018      	movs	r0, r3
 8016a22:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8016a24:	e00b      	b.n	8016a3e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	0018      	movs	r0, r3
 8016a2a:	f000 f819 	bl	8016a60 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8016a2e:	e006      	b.n	8016a3e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	0018      	movs	r0, r3
 8016a34:	f000 f814 	bl	8016a60 <I2C_TreatErrorCallback>
  }
}
 8016a38:	e002      	b.n	8016a40 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016a3a:	46c0      	nop			@ (mov r8, r8)
 8016a3c:	e000      	b.n	8016a40 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8016a3e:	46c0      	nop			@ (mov r8, r8)
}
 8016a40:	46c0      	nop			@ (mov r8, r8)
 8016a42:	46bd      	mov	sp, r7
 8016a44:	b004      	add	sp, #16
 8016a46:	bd80      	pop	{r7, pc}
 8016a48:	ffff0000 	.word	0xffff0000
 8016a4c:	0801587d 	.word	0x0801587d
 8016a50:	00008003 	.word	0x00008003
 8016a54:	ffffbfff 	.word	0xffffbfff
 8016a58:	08016c6b 	.word	0x08016c6b
 8016a5c:	ffff7fff 	.word	0xffff7fff

08016a60 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b082      	sub	sp, #8
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	2241      	movs	r2, #65	@ 0x41
 8016a6c:	5c9b      	ldrb	r3, [r3, r2]
 8016a6e:	b2db      	uxtb	r3, r3
 8016a70:	2b60      	cmp	r3, #96	@ 0x60
 8016a72:	d10f      	bne.n	8016a94 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	2241      	movs	r2, #65	@ 0x41
 8016a78:	2120      	movs	r1, #32
 8016a7a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	2200      	movs	r2, #0
 8016a80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	2240      	movs	r2, #64	@ 0x40
 8016a86:	2100      	movs	r1, #0
 8016a88:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	0018      	movs	r0, r3
 8016a8e:	f7fe fdc2 	bl	8015616 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8016a92:	e00a      	b.n	8016aaa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	2200      	movs	r2, #0
 8016a98:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	2240      	movs	r2, #64	@ 0x40
 8016a9e:	2100      	movs	r1, #0
 8016aa0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	0018      	movs	r0, r3
 8016aa6:	f7fe fdae 	bl	8015606 <HAL_I2C_ErrorCallback>
}
 8016aaa:	46c0      	nop			@ (mov r8, r8)
 8016aac:	46bd      	mov	sp, r7
 8016aae:	b002      	add	sp, #8
 8016ab0:	bd80      	pop	{r7, pc}

08016ab2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8016ab2:	b580      	push	{r7, lr}
 8016ab4:	b082      	sub	sp, #8
 8016ab6:	af00      	add	r7, sp, #0
 8016ab8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	699b      	ldr	r3, [r3, #24]
 8016ac0:	2202      	movs	r2, #2
 8016ac2:	4013      	ands	r3, r2
 8016ac4:	2b02      	cmp	r3, #2
 8016ac6:	d103      	bne.n	8016ad0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	2200      	movs	r2, #0
 8016ace:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	699b      	ldr	r3, [r3, #24]
 8016ad6:	2201      	movs	r2, #1
 8016ad8:	4013      	ands	r3, r2
 8016ada:	2b01      	cmp	r3, #1
 8016adc:	d007      	beq.n	8016aee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	699a      	ldr	r2, [r3, #24]
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	2101      	movs	r1, #1
 8016aea:	430a      	orrs	r2, r1
 8016aec:	619a      	str	r2, [r3, #24]
  }
}
 8016aee:	46c0      	nop			@ (mov r8, r8)
 8016af0:	46bd      	mov	sp, r7
 8016af2:	b002      	add	sp, #8
 8016af4:	bd80      	pop	{r7, pc}
	...

08016af8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b084      	sub	sp, #16
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016b04:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	681a      	ldr	r2, [r3, #0]
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	4920      	ldr	r1, [pc, #128]	@ (8016b94 <I2C_DMAMasterTransmitCplt+0x9c>)
 8016b12:	400a      	ands	r2, r1
 8016b14:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b1a:	b29b      	uxth	r3, r3
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d105      	bne.n	8016b2c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	2120      	movs	r1, #32
 8016b24:	0018      	movs	r0, r3
 8016b26:	f000 fb4b 	bl	80171c0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8016b2a:	e02e      	b.n	8016b8a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b30:	68fa      	ldr	r2, [r7, #12]
 8016b32:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8016b34:	189a      	adds	r2, r3, r2
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	2bff      	cmp	r3, #255	@ 0xff
 8016b42:	d903      	bls.n	8016b4c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	22ff      	movs	r2, #255	@ 0xff
 8016b48:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016b4a:	e004      	b.n	8016b56 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b50:	b29a      	uxth	r2, r3
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b5e:	0019      	movs	r1, r3
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	3328      	adds	r3, #40	@ 0x28
 8016b66:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8016b6c:	f7fd f830 	bl	8013bd0 <HAL_DMA_Start_IT>
 8016b70:	1e03      	subs	r3, r0, #0
 8016b72:	d005      	beq.n	8016b80 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	2110      	movs	r1, #16
 8016b78:	0018      	movs	r0, r3
 8016b7a:	f7ff fe6f 	bl	801685c <I2C_ITError>
}
 8016b7e:	e004      	b.n	8016b8a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	2140      	movs	r1, #64	@ 0x40
 8016b84:	0018      	movs	r0, r3
 8016b86:	f000 fb1b 	bl	80171c0 <I2C_Enable_IRQ>
}
 8016b8a:	46c0      	nop			@ (mov r8, r8)
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	b004      	add	sp, #16
 8016b90:	bd80      	pop	{r7, pc}
 8016b92:	46c0      	nop			@ (mov r8, r8)
 8016b94:	ffffbfff 	.word	0xffffbfff

08016b98 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b084      	sub	sp, #16
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ba4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	681a      	ldr	r2, [r3, #0]
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	4920      	ldr	r1, [pc, #128]	@ (8016c34 <I2C_DMAMasterReceiveCplt+0x9c>)
 8016bb2:	400a      	ands	r2, r1
 8016bb4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bba:	b29b      	uxth	r3, r3
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d105      	bne.n	8016bcc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	2120      	movs	r1, #32
 8016bc4:	0018      	movs	r0, r3
 8016bc6:	f000 fafb 	bl	80171c0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8016bca:	e02e      	b.n	8016c2a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bd0:	68fa      	ldr	r2, [r7, #12]
 8016bd2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8016bd4:	189a      	adds	r2, r3, r2
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bde:	b29b      	uxth	r3, r3
 8016be0:	2bff      	cmp	r3, #255	@ 0xff
 8016be2:	d903      	bls.n	8016bec <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	22ff      	movs	r2, #255	@ 0xff
 8016be8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016bea:	e004      	b.n	8016bf6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bf0:	b29a      	uxth	r2, r3
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	3324      	adds	r3, #36	@ 0x24
 8016c00:	0019      	movs	r1, r3
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c06:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8016c0c:	f7fc ffe0 	bl	8013bd0 <HAL_DMA_Start_IT>
 8016c10:	1e03      	subs	r3, r0, #0
 8016c12:	d005      	beq.n	8016c20 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	2110      	movs	r1, #16
 8016c18:	0018      	movs	r0, r3
 8016c1a:	f7ff fe1f 	bl	801685c <I2C_ITError>
}
 8016c1e:	e004      	b.n	8016c2a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	2140      	movs	r1, #64	@ 0x40
 8016c24:	0018      	movs	r0, r3
 8016c26:	f000 facb 	bl	80171c0 <I2C_Enable_IRQ>
}
 8016c2a:	46c0      	nop			@ (mov r8, r8)
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	b004      	add	sp, #16
 8016c30:	bd80      	pop	{r7, pc}
 8016c32:	46c0      	nop			@ (mov r8, r8)
 8016c34:	ffff7fff 	.word	0xffff7fff

08016c38 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b084      	sub	sp, #16
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c44:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	685a      	ldr	r2, [r3, #4]
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	2180      	movs	r1, #128	@ 0x80
 8016c52:	0209      	lsls	r1, r1, #8
 8016c54:	430a      	orrs	r2, r1
 8016c56:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	2110      	movs	r1, #16
 8016c5c:	0018      	movs	r0, r3
 8016c5e:	f7ff fdfd 	bl	801685c <I2C_ITError>
}
 8016c62:	46c0      	nop			@ (mov r8, r8)
 8016c64:	46bd      	mov	sp, r7
 8016c66:	b004      	add	sp, #16
 8016c68:	bd80      	pop	{r7, pc}

08016c6a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8016c6a:	b580      	push	{r7, lr}
 8016c6c:	b084      	sub	sp, #16
 8016c6e:	af00      	add	r7, sp, #0
 8016c70:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c76:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d003      	beq.n	8016c88 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016c84:	2200      	movs	r2, #0
 8016c86:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d003      	beq.n	8016c98 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016c94:	2200      	movs	r2, #0
 8016c96:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	0018      	movs	r0, r3
 8016c9c:	f7ff fee0 	bl	8016a60 <I2C_TreatErrorCallback>
}
 8016ca0:	46c0      	nop			@ (mov r8, r8)
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	b004      	add	sp, #16
 8016ca6:	bd80      	pop	{r7, pc}

08016ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b084      	sub	sp, #16
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	60f8      	str	r0, [r7, #12]
 8016cb0:	60b9      	str	r1, [r7, #8]
 8016cb2:	603b      	str	r3, [r7, #0]
 8016cb4:	1dfb      	adds	r3, r7, #7
 8016cb6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016cb8:	e030      	b.n	8016d1c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016cba:	683b      	ldr	r3, [r7, #0]
 8016cbc:	3301      	adds	r3, #1
 8016cbe:	d02d      	beq.n	8016d1c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016cc0:	f7fc fa34 	bl	801312c <HAL_GetTick>
 8016cc4:	0002      	movs	r2, r0
 8016cc6:	69bb      	ldr	r3, [r7, #24]
 8016cc8:	1ad3      	subs	r3, r2, r3
 8016cca:	683a      	ldr	r2, [r7, #0]
 8016ccc:	429a      	cmp	r2, r3
 8016cce:	d302      	bcc.n	8016cd6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8016cd0:	683b      	ldr	r3, [r7, #0]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d122      	bne.n	8016d1c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	699b      	ldr	r3, [r3, #24]
 8016cdc:	68ba      	ldr	r2, [r7, #8]
 8016cde:	4013      	ands	r3, r2
 8016ce0:	68ba      	ldr	r2, [r7, #8]
 8016ce2:	1ad3      	subs	r3, r2, r3
 8016ce4:	425a      	negs	r2, r3
 8016ce6:	4153      	adcs	r3, r2
 8016ce8:	b2db      	uxtb	r3, r3
 8016cea:	001a      	movs	r2, r3
 8016cec:	1dfb      	adds	r3, r7, #7
 8016cee:	781b      	ldrb	r3, [r3, #0]
 8016cf0:	429a      	cmp	r2, r3
 8016cf2:	d113      	bne.n	8016d1c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016cf8:	2220      	movs	r2, #32
 8016cfa:	431a      	orrs	r2, r3
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	2241      	movs	r2, #65	@ 0x41
 8016d04:	2120      	movs	r1, #32
 8016d06:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	2242      	movs	r2, #66	@ 0x42
 8016d0c:	2100      	movs	r1, #0
 8016d0e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	2240      	movs	r2, #64	@ 0x40
 8016d14:	2100      	movs	r1, #0
 8016d16:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8016d18:	2301      	movs	r3, #1
 8016d1a:	e00f      	b.n	8016d3c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	699b      	ldr	r3, [r3, #24]
 8016d22:	68ba      	ldr	r2, [r7, #8]
 8016d24:	4013      	ands	r3, r2
 8016d26:	68ba      	ldr	r2, [r7, #8]
 8016d28:	1ad3      	subs	r3, r2, r3
 8016d2a:	425a      	negs	r2, r3
 8016d2c:	4153      	adcs	r3, r2
 8016d2e:	b2db      	uxtb	r3, r3
 8016d30:	001a      	movs	r2, r3
 8016d32:	1dfb      	adds	r3, r7, #7
 8016d34:	781b      	ldrb	r3, [r3, #0]
 8016d36:	429a      	cmp	r2, r3
 8016d38:	d0bf      	beq.n	8016cba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016d3a:	2300      	movs	r3, #0
}
 8016d3c:	0018      	movs	r0, r3
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	b004      	add	sp, #16
 8016d42:	bd80      	pop	{r7, pc}

08016d44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b084      	sub	sp, #16
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	60f8      	str	r0, [r7, #12]
 8016d4c:	60b9      	str	r1, [r7, #8]
 8016d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016d50:	e032      	b.n	8016db8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016d52:	687a      	ldr	r2, [r7, #4]
 8016d54:	68b9      	ldr	r1, [r7, #8]
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	0018      	movs	r0, r3
 8016d5a:	f000 f8ff 	bl	8016f5c <I2C_IsErrorOccurred>
 8016d5e:	1e03      	subs	r3, r0, #0
 8016d60:	d001      	beq.n	8016d66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8016d62:	2301      	movs	r3, #1
 8016d64:	e030      	b.n	8016dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016d66:	68bb      	ldr	r3, [r7, #8]
 8016d68:	3301      	adds	r3, #1
 8016d6a:	d025      	beq.n	8016db8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016d6c:	f7fc f9de 	bl	801312c <HAL_GetTick>
 8016d70:	0002      	movs	r2, r0
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	1ad3      	subs	r3, r2, r3
 8016d76:	68ba      	ldr	r2, [r7, #8]
 8016d78:	429a      	cmp	r2, r3
 8016d7a:	d302      	bcc.n	8016d82 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8016d7c:	68bb      	ldr	r3, [r7, #8]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d11a      	bne.n	8016db8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	699b      	ldr	r3, [r3, #24]
 8016d88:	2202      	movs	r2, #2
 8016d8a:	4013      	ands	r3, r2
 8016d8c:	2b02      	cmp	r3, #2
 8016d8e:	d013      	beq.n	8016db8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d94:	2220      	movs	r2, #32
 8016d96:	431a      	orrs	r2, r3
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	2241      	movs	r2, #65	@ 0x41
 8016da0:	2120      	movs	r1, #32
 8016da2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	2242      	movs	r2, #66	@ 0x42
 8016da8:	2100      	movs	r1, #0
 8016daa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	2240      	movs	r2, #64	@ 0x40
 8016db0:	2100      	movs	r1, #0
 8016db2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8016db4:	2301      	movs	r3, #1
 8016db6:	e007      	b.n	8016dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	699b      	ldr	r3, [r3, #24]
 8016dbe:	2202      	movs	r2, #2
 8016dc0:	4013      	ands	r3, r2
 8016dc2:	2b02      	cmp	r3, #2
 8016dc4:	d1c5      	bne.n	8016d52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8016dc6:	2300      	movs	r3, #0
}
 8016dc8:	0018      	movs	r0, r3
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	b004      	add	sp, #16
 8016dce:	bd80      	pop	{r7, pc}

08016dd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b084      	sub	sp, #16
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	60f8      	str	r0, [r7, #12]
 8016dd8:	60b9      	str	r1, [r7, #8]
 8016dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016ddc:	e02f      	b.n	8016e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016dde:	687a      	ldr	r2, [r7, #4]
 8016de0:	68b9      	ldr	r1, [r7, #8]
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	0018      	movs	r0, r3
 8016de6:	f000 f8b9 	bl	8016f5c <I2C_IsErrorOccurred>
 8016dea:	1e03      	subs	r3, r0, #0
 8016dec:	d001      	beq.n	8016df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8016dee:	2301      	movs	r3, #1
 8016df0:	e02d      	b.n	8016e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016df2:	f7fc f99b 	bl	801312c <HAL_GetTick>
 8016df6:	0002      	movs	r2, r0
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	1ad3      	subs	r3, r2, r3
 8016dfc:	68ba      	ldr	r2, [r7, #8]
 8016dfe:	429a      	cmp	r2, r3
 8016e00:	d302      	bcc.n	8016e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8016e02:	68bb      	ldr	r3, [r7, #8]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d11a      	bne.n	8016e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	699b      	ldr	r3, [r3, #24]
 8016e0e:	2220      	movs	r2, #32
 8016e10:	4013      	ands	r3, r2
 8016e12:	2b20      	cmp	r3, #32
 8016e14:	d013      	beq.n	8016e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e1a:	2220      	movs	r2, #32
 8016e1c:	431a      	orrs	r2, r3
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	2241      	movs	r2, #65	@ 0x41
 8016e26:	2120      	movs	r1, #32
 8016e28:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	2242      	movs	r2, #66	@ 0x42
 8016e2e:	2100      	movs	r1, #0
 8016e30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	2240      	movs	r2, #64	@ 0x40
 8016e36:	2100      	movs	r1, #0
 8016e38:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8016e3a:	2301      	movs	r3, #1
 8016e3c:	e007      	b.n	8016e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	699b      	ldr	r3, [r3, #24]
 8016e44:	2220      	movs	r2, #32
 8016e46:	4013      	ands	r3, r2
 8016e48:	2b20      	cmp	r3, #32
 8016e4a:	d1c8      	bne.n	8016dde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016e4c:	2300      	movs	r3, #0
}
 8016e4e:	0018      	movs	r0, r3
 8016e50:	46bd      	mov	sp, r7
 8016e52:	b004      	add	sp, #16
 8016e54:	bd80      	pop	{r7, pc}
	...

08016e58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b084      	sub	sp, #16
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	60f8      	str	r0, [r7, #12]
 8016e60:	60b9      	str	r1, [r7, #8]
 8016e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8016e64:	e06b      	b.n	8016f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016e66:	687a      	ldr	r2, [r7, #4]
 8016e68:	68b9      	ldr	r1, [r7, #8]
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	0018      	movs	r0, r3
 8016e6e:	f000 f875 	bl	8016f5c <I2C_IsErrorOccurred>
 8016e72:	1e03      	subs	r3, r0, #0
 8016e74:	d001      	beq.n	8016e7a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8016e76:	2301      	movs	r3, #1
 8016e78:	e069      	b.n	8016f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	699b      	ldr	r3, [r3, #24]
 8016e80:	2220      	movs	r2, #32
 8016e82:	4013      	ands	r3, r2
 8016e84:	2b20      	cmp	r3, #32
 8016e86:	d138      	bne.n	8016efa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	699b      	ldr	r3, [r3, #24]
 8016e8e:	2204      	movs	r2, #4
 8016e90:	4013      	ands	r3, r2
 8016e92:	2b04      	cmp	r3, #4
 8016e94:	d105      	bne.n	8016ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d001      	beq.n	8016ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	e055      	b.n	8016f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	699b      	ldr	r3, [r3, #24]
 8016ea8:	2210      	movs	r2, #16
 8016eaa:	4013      	ands	r3, r2
 8016eac:	2b10      	cmp	r3, #16
 8016eae:	d107      	bne.n	8016ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	2210      	movs	r2, #16
 8016eb6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	2204      	movs	r2, #4
 8016ebc:	645a      	str	r2, [r3, #68]	@ 0x44
 8016ebe:	e002      	b.n	8016ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	2220      	movs	r2, #32
 8016ecc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	685a      	ldr	r2, [r3, #4]
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	491f      	ldr	r1, [pc, #124]	@ (8016f58 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8016eda:	400a      	ands	r2, r1
 8016edc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	2241      	movs	r2, #65	@ 0x41
 8016ee2:	2120      	movs	r1, #32
 8016ee4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	2242      	movs	r2, #66	@ 0x42
 8016eea:	2100      	movs	r1, #0
 8016eec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	2240      	movs	r2, #64	@ 0x40
 8016ef2:	2100      	movs	r1, #0
 8016ef4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	e029      	b.n	8016f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016efa:	f7fc f917 	bl	801312c <HAL_GetTick>
 8016efe:	0002      	movs	r2, r0
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	1ad3      	subs	r3, r2, r3
 8016f04:	68ba      	ldr	r2, [r7, #8]
 8016f06:	429a      	cmp	r2, r3
 8016f08:	d302      	bcc.n	8016f10 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8016f0a:	68bb      	ldr	r3, [r7, #8]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d116      	bne.n	8016f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	699b      	ldr	r3, [r3, #24]
 8016f16:	2204      	movs	r2, #4
 8016f18:	4013      	ands	r3, r2
 8016f1a:	2b04      	cmp	r3, #4
 8016f1c:	d00f      	beq.n	8016f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f22:	2220      	movs	r2, #32
 8016f24:	431a      	orrs	r2, r3
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	2241      	movs	r2, #65	@ 0x41
 8016f2e:	2120      	movs	r1, #32
 8016f30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	2240      	movs	r2, #64	@ 0x40
 8016f36:	2100      	movs	r1, #0
 8016f38:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8016f3a:	2301      	movs	r3, #1
 8016f3c:	e007      	b.n	8016f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	699b      	ldr	r3, [r3, #24]
 8016f44:	2204      	movs	r2, #4
 8016f46:	4013      	ands	r3, r2
 8016f48:	2b04      	cmp	r3, #4
 8016f4a:	d18c      	bne.n	8016e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016f4c:	2300      	movs	r3, #0
}
 8016f4e:	0018      	movs	r0, r3
 8016f50:	46bd      	mov	sp, r7
 8016f52:	b004      	add	sp, #16
 8016f54:	bd80      	pop	{r7, pc}
 8016f56:	46c0      	nop			@ (mov r8, r8)
 8016f58:	fe00e800 	.word	0xfe00e800

08016f5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b08a      	sub	sp, #40	@ 0x28
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	60f8      	str	r0, [r7, #12]
 8016f64:	60b9      	str	r1, [r7, #8]
 8016f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016f68:	2327      	movs	r3, #39	@ 0x27
 8016f6a:	18fb      	adds	r3, r7, r3
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	699b      	ldr	r3, [r3, #24]
 8016f76:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8016f78:	2300      	movs	r3, #0
 8016f7a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8016f80:	69bb      	ldr	r3, [r7, #24]
 8016f82:	2210      	movs	r2, #16
 8016f84:	4013      	ands	r3, r2
 8016f86:	d100      	bne.n	8016f8a <I2C_IsErrorOccurred+0x2e>
 8016f88:	e079      	b.n	801707e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	2210      	movs	r2, #16
 8016f90:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8016f92:	e057      	b.n	8017044 <I2C_IsErrorOccurred+0xe8>
 8016f94:	2227      	movs	r2, #39	@ 0x27
 8016f96:	18bb      	adds	r3, r7, r2
 8016f98:	18ba      	adds	r2, r7, r2
 8016f9a:	7812      	ldrb	r2, [r2, #0]
 8016f9c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8016f9e:	68bb      	ldr	r3, [r7, #8]
 8016fa0:	3301      	adds	r3, #1
 8016fa2:	d04f      	beq.n	8017044 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016fa4:	f7fc f8c2 	bl	801312c <HAL_GetTick>
 8016fa8:	0002      	movs	r2, r0
 8016faa:	69fb      	ldr	r3, [r7, #28]
 8016fac:	1ad3      	subs	r3, r2, r3
 8016fae:	68ba      	ldr	r2, [r7, #8]
 8016fb0:	429a      	cmp	r2, r3
 8016fb2:	d302      	bcc.n	8016fba <I2C_IsErrorOccurred+0x5e>
 8016fb4:	68bb      	ldr	r3, [r7, #8]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d144      	bne.n	8017044 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	685a      	ldr	r2, [r3, #4]
 8016fc0:	2380      	movs	r3, #128	@ 0x80
 8016fc2:	01db      	lsls	r3, r3, #7
 8016fc4:	4013      	ands	r3, r2
 8016fc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8016fc8:	2013      	movs	r0, #19
 8016fca:	183b      	adds	r3, r7, r0
 8016fcc:	68fa      	ldr	r2, [r7, #12]
 8016fce:	2142      	movs	r1, #66	@ 0x42
 8016fd0:	5c52      	ldrb	r2, [r2, r1]
 8016fd2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	699a      	ldr	r2, [r3, #24]
 8016fda:	2380      	movs	r3, #128	@ 0x80
 8016fdc:	021b      	lsls	r3, r3, #8
 8016fde:	401a      	ands	r2, r3
 8016fe0:	2380      	movs	r3, #128	@ 0x80
 8016fe2:	021b      	lsls	r3, r3, #8
 8016fe4:	429a      	cmp	r2, r3
 8016fe6:	d126      	bne.n	8017036 <I2C_IsErrorOccurred+0xda>
 8016fe8:	697a      	ldr	r2, [r7, #20]
 8016fea:	2380      	movs	r3, #128	@ 0x80
 8016fec:	01db      	lsls	r3, r3, #7
 8016fee:	429a      	cmp	r2, r3
 8016ff0:	d021      	beq.n	8017036 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8016ff2:	183b      	adds	r3, r7, r0
 8016ff4:	781b      	ldrb	r3, [r3, #0]
 8016ff6:	2b20      	cmp	r3, #32
 8016ff8:	d01d      	beq.n	8017036 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	685a      	ldr	r2, [r3, #4]
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	2180      	movs	r1, #128	@ 0x80
 8017006:	01c9      	lsls	r1, r1, #7
 8017008:	430a      	orrs	r2, r1
 801700a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801700c:	f7fc f88e 	bl	801312c <HAL_GetTick>
 8017010:	0003      	movs	r3, r0
 8017012:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017014:	e00f      	b.n	8017036 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8017016:	f7fc f889 	bl	801312c <HAL_GetTick>
 801701a:	0002      	movs	r2, r0
 801701c:	69fb      	ldr	r3, [r7, #28]
 801701e:	1ad3      	subs	r3, r2, r3
 8017020:	2b19      	cmp	r3, #25
 8017022:	d908      	bls.n	8017036 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8017024:	6a3b      	ldr	r3, [r7, #32]
 8017026:	2220      	movs	r2, #32
 8017028:	4313      	orrs	r3, r2
 801702a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801702c:	2327      	movs	r3, #39	@ 0x27
 801702e:	18fb      	adds	r3, r7, r3
 8017030:	2201      	movs	r2, #1
 8017032:	701a      	strb	r2, [r3, #0]

              break;
 8017034:	e006      	b.n	8017044 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	699b      	ldr	r3, [r3, #24]
 801703c:	2220      	movs	r2, #32
 801703e:	4013      	ands	r3, r2
 8017040:	2b20      	cmp	r3, #32
 8017042:	d1e8      	bne.n	8017016 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	699b      	ldr	r3, [r3, #24]
 801704a:	2220      	movs	r2, #32
 801704c:	4013      	ands	r3, r2
 801704e:	2b20      	cmp	r3, #32
 8017050:	d004      	beq.n	801705c <I2C_IsErrorOccurred+0x100>
 8017052:	2327      	movs	r3, #39	@ 0x27
 8017054:	18fb      	adds	r3, r7, r3
 8017056:	781b      	ldrb	r3, [r3, #0]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d09b      	beq.n	8016f94 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801705c:	2327      	movs	r3, #39	@ 0x27
 801705e:	18fb      	adds	r3, r7, r3
 8017060:	781b      	ldrb	r3, [r3, #0]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d103      	bne.n	801706e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	2220      	movs	r2, #32
 801706c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801706e:	6a3b      	ldr	r3, [r7, #32]
 8017070:	2204      	movs	r2, #4
 8017072:	4313      	orrs	r3, r2
 8017074:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8017076:	2327      	movs	r3, #39	@ 0x27
 8017078:	18fb      	adds	r3, r7, r3
 801707a:	2201      	movs	r2, #1
 801707c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	699b      	ldr	r3, [r3, #24]
 8017084:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8017086:	69ba      	ldr	r2, [r7, #24]
 8017088:	2380      	movs	r3, #128	@ 0x80
 801708a:	005b      	lsls	r3, r3, #1
 801708c:	4013      	ands	r3, r2
 801708e:	d00c      	beq.n	80170aa <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8017090:	6a3b      	ldr	r3, [r7, #32]
 8017092:	2201      	movs	r2, #1
 8017094:	4313      	orrs	r3, r2
 8017096:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	2280      	movs	r2, #128	@ 0x80
 801709e:	0052      	lsls	r2, r2, #1
 80170a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80170a2:	2327      	movs	r3, #39	@ 0x27
 80170a4:	18fb      	adds	r3, r7, r3
 80170a6:	2201      	movs	r2, #1
 80170a8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80170aa:	69ba      	ldr	r2, [r7, #24]
 80170ac:	2380      	movs	r3, #128	@ 0x80
 80170ae:	00db      	lsls	r3, r3, #3
 80170b0:	4013      	ands	r3, r2
 80170b2:	d00c      	beq.n	80170ce <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80170b4:	6a3b      	ldr	r3, [r7, #32]
 80170b6:	2208      	movs	r2, #8
 80170b8:	4313      	orrs	r3, r2
 80170ba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	2280      	movs	r2, #128	@ 0x80
 80170c2:	00d2      	lsls	r2, r2, #3
 80170c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80170c6:	2327      	movs	r3, #39	@ 0x27
 80170c8:	18fb      	adds	r3, r7, r3
 80170ca:	2201      	movs	r2, #1
 80170cc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80170ce:	69ba      	ldr	r2, [r7, #24]
 80170d0:	2380      	movs	r3, #128	@ 0x80
 80170d2:	009b      	lsls	r3, r3, #2
 80170d4:	4013      	ands	r3, r2
 80170d6:	d00c      	beq.n	80170f2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80170d8:	6a3b      	ldr	r3, [r7, #32]
 80170da:	2202      	movs	r2, #2
 80170dc:	4313      	orrs	r3, r2
 80170de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	2280      	movs	r2, #128	@ 0x80
 80170e6:	0092      	lsls	r2, r2, #2
 80170e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80170ea:	2327      	movs	r3, #39	@ 0x27
 80170ec:	18fb      	adds	r3, r7, r3
 80170ee:	2201      	movs	r2, #1
 80170f0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80170f2:	2327      	movs	r3, #39	@ 0x27
 80170f4:	18fb      	adds	r3, r7, r3
 80170f6:	781b      	ldrb	r3, [r3, #0]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d01d      	beq.n	8017138 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	0018      	movs	r0, r3
 8017100:	f7ff fcd7 	bl	8016ab2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	685a      	ldr	r2, [r3, #4]
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	490e      	ldr	r1, [pc, #56]	@ (8017148 <I2C_IsErrorOccurred+0x1ec>)
 8017110:	400a      	ands	r2, r1
 8017112:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017118:	6a3b      	ldr	r3, [r7, #32]
 801711a:	431a      	orrs	r2, r3
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	2241      	movs	r2, #65	@ 0x41
 8017124:	2120      	movs	r1, #32
 8017126:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	2242      	movs	r2, #66	@ 0x42
 801712c:	2100      	movs	r1, #0
 801712e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	2240      	movs	r2, #64	@ 0x40
 8017134:	2100      	movs	r1, #0
 8017136:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8017138:	2327      	movs	r3, #39	@ 0x27
 801713a:	18fb      	adds	r3, r7, r3
 801713c:	781b      	ldrb	r3, [r3, #0]
}
 801713e:	0018      	movs	r0, r3
 8017140:	46bd      	mov	sp, r7
 8017142:	b00a      	add	sp, #40	@ 0x28
 8017144:	bd80      	pop	{r7, pc}
 8017146:	46c0      	nop			@ (mov r8, r8)
 8017148:	fe00e800 	.word	0xfe00e800

0801714c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801714c:	b590      	push	{r4, r7, lr}
 801714e:	b087      	sub	sp, #28
 8017150:	af00      	add	r7, sp, #0
 8017152:	60f8      	str	r0, [r7, #12]
 8017154:	0008      	movs	r0, r1
 8017156:	0011      	movs	r1, r2
 8017158:	607b      	str	r3, [r7, #4]
 801715a:	240a      	movs	r4, #10
 801715c:	193b      	adds	r3, r7, r4
 801715e:	1c02      	adds	r2, r0, #0
 8017160:	801a      	strh	r2, [r3, #0]
 8017162:	2009      	movs	r0, #9
 8017164:	183b      	adds	r3, r7, r0
 8017166:	1c0a      	adds	r2, r1, #0
 8017168:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801716a:	193b      	adds	r3, r7, r4
 801716c:	881b      	ldrh	r3, [r3, #0]
 801716e:	059b      	lsls	r3, r3, #22
 8017170:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017172:	183b      	adds	r3, r7, r0
 8017174:	781b      	ldrb	r3, [r3, #0]
 8017176:	0419      	lsls	r1, r3, #16
 8017178:	23ff      	movs	r3, #255	@ 0xff
 801717a:	041b      	lsls	r3, r3, #16
 801717c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801717e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017186:	4313      	orrs	r3, r2
 8017188:	005b      	lsls	r3, r3, #1
 801718a:	085b      	lsrs	r3, r3, #1
 801718c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	685b      	ldr	r3, [r3, #4]
 8017194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017196:	0d51      	lsrs	r1, r2, #21
 8017198:	2280      	movs	r2, #128	@ 0x80
 801719a:	00d2      	lsls	r2, r2, #3
 801719c:	400a      	ands	r2, r1
 801719e:	4907      	ldr	r1, [pc, #28]	@ (80171bc <I2C_TransferConfig+0x70>)
 80171a0:	430a      	orrs	r2, r1
 80171a2:	43d2      	mvns	r2, r2
 80171a4:	401a      	ands	r2, r3
 80171a6:	0011      	movs	r1, r2
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	697a      	ldr	r2, [r7, #20]
 80171ae:	430a      	orrs	r2, r1
 80171b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80171b2:	46c0      	nop			@ (mov r8, r8)
 80171b4:	46bd      	mov	sp, r7
 80171b6:	b007      	add	sp, #28
 80171b8:	bd90      	pop	{r4, r7, pc}
 80171ba:	46c0      	nop			@ (mov r8, r8)
 80171bc:	03ff63ff 	.word	0x03ff63ff

080171c0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b084      	sub	sp, #16
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	000a      	movs	r2, r1
 80171ca:	1cbb      	adds	r3, r7, #2
 80171cc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80171ce:	2300      	movs	r3, #0
 80171d0:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80171d6:	4b3e      	ldr	r3, [pc, #248]	@ (80172d0 <I2C_Enable_IRQ+0x110>)
 80171d8:	429a      	cmp	r2, r3
 80171da:	d035      	beq.n	8017248 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80171e0:	4b3c      	ldr	r3, [pc, #240]	@ (80172d4 <I2C_Enable_IRQ+0x114>)
 80171e2:	429a      	cmp	r2, r3
 80171e4:	d030      	beq.n	8017248 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80171ea:	4b3b      	ldr	r3, [pc, #236]	@ (80172d8 <I2C_Enable_IRQ+0x118>)
 80171ec:	429a      	cmp	r2, r3
 80171ee:	d02b      	beq.n	8017248 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80171f0:	1cbb      	adds	r3, r7, #2
 80171f2:	2200      	movs	r2, #0
 80171f4:	5e9b      	ldrsh	r3, [r3, r2]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	da03      	bge.n	8017202 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	22b8      	movs	r2, #184	@ 0xb8
 80171fe:	4313      	orrs	r3, r2
 8017200:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017202:	1cbb      	adds	r3, r7, #2
 8017204:	881b      	ldrh	r3, [r3, #0]
 8017206:	2201      	movs	r2, #1
 8017208:	4013      	ands	r3, r2
 801720a:	d003      	beq.n	8017214 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	22f2      	movs	r2, #242	@ 0xf2
 8017210:	4313      	orrs	r3, r2
 8017212:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017214:	1cbb      	adds	r3, r7, #2
 8017216:	881b      	ldrh	r3, [r3, #0]
 8017218:	2202      	movs	r2, #2
 801721a:	4013      	ands	r3, r2
 801721c:	d003      	beq.n	8017226 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	22f4      	movs	r2, #244	@ 0xf4
 8017222:	4313      	orrs	r3, r2
 8017224:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017226:	1cbb      	adds	r3, r7, #2
 8017228:	881b      	ldrh	r3, [r3, #0]
 801722a:	2b10      	cmp	r3, #16
 801722c:	d103      	bne.n	8017236 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	2290      	movs	r2, #144	@ 0x90
 8017232:	4313      	orrs	r3, r2
 8017234:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017236:	1cbb      	adds	r3, r7, #2
 8017238:	881b      	ldrh	r3, [r3, #0]
 801723a:	2b20      	cmp	r3, #32
 801723c:	d13c      	bne.n	80172b8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	2220      	movs	r2, #32
 8017242:	4313      	orrs	r3, r2
 8017244:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017246:	e037      	b.n	80172b8 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017248:	1cbb      	adds	r3, r7, #2
 801724a:	2200      	movs	r2, #0
 801724c:	5e9b      	ldrsh	r3, [r3, r2]
 801724e:	2b00      	cmp	r3, #0
 8017250:	da03      	bge.n	801725a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	22b8      	movs	r2, #184	@ 0xb8
 8017256:	4313      	orrs	r3, r2
 8017258:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801725a:	1cbb      	adds	r3, r7, #2
 801725c:	881b      	ldrh	r3, [r3, #0]
 801725e:	2201      	movs	r2, #1
 8017260:	4013      	ands	r3, r2
 8017262:	d003      	beq.n	801726c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	22f2      	movs	r2, #242	@ 0xf2
 8017268:	4313      	orrs	r3, r2
 801726a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801726c:	1cbb      	adds	r3, r7, #2
 801726e:	881b      	ldrh	r3, [r3, #0]
 8017270:	2202      	movs	r2, #2
 8017272:	4013      	ands	r3, r2
 8017274:	d003      	beq.n	801727e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	22f4      	movs	r2, #244	@ 0xf4
 801727a:	4313      	orrs	r3, r2
 801727c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801727e:	1cbb      	adds	r3, r7, #2
 8017280:	881b      	ldrh	r3, [r3, #0]
 8017282:	2b10      	cmp	r3, #16
 8017284:	d103      	bne.n	801728e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	2290      	movs	r2, #144	@ 0x90
 801728a:	4313      	orrs	r3, r2
 801728c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801728e:	1cbb      	adds	r3, r7, #2
 8017290:	881b      	ldrh	r3, [r3, #0]
 8017292:	2b20      	cmp	r3, #32
 8017294:	d103      	bne.n	801729e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	2260      	movs	r2, #96	@ 0x60
 801729a:	4313      	orrs	r3, r2
 801729c:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80172a2:	4b0d      	ldr	r3, [pc, #52]	@ (80172d8 <I2C_Enable_IRQ+0x118>)
 80172a4:	429a      	cmp	r2, r3
 80172a6:	d007      	beq.n	80172b8 <I2C_Enable_IRQ+0xf8>
 80172a8:	1cbb      	adds	r3, r7, #2
 80172aa:	881b      	ldrh	r3, [r3, #0]
 80172ac:	2b40      	cmp	r3, #64	@ 0x40
 80172ae:	d103      	bne.n	80172b8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	2240      	movs	r2, #64	@ 0x40
 80172b4:	4313      	orrs	r3, r2
 80172b6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	6819      	ldr	r1, [r3, #0]
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	68fa      	ldr	r2, [r7, #12]
 80172c4:	430a      	orrs	r2, r1
 80172c6:	601a      	str	r2, [r3, #0]
}
 80172c8:	46c0      	nop			@ (mov r8, r8)
 80172ca:	46bd      	mov	sp, r7
 80172cc:	b004      	add	sp, #16
 80172ce:	bd80      	pop	{r7, pc}
 80172d0:	08015a7d 	.word	0x08015a7d
 80172d4:	08015ead 	.word	0x08015ead
 80172d8:	08015c75 	.word	0x08015c75

080172dc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b084      	sub	sp, #16
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
 80172e4:	000a      	movs	r2, r1
 80172e6:	1cbb      	adds	r3, r7, #2
 80172e8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80172ea:	2300      	movs	r3, #0
 80172ec:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80172ee:	1cbb      	adds	r3, r7, #2
 80172f0:	881b      	ldrh	r3, [r3, #0]
 80172f2:	2201      	movs	r2, #1
 80172f4:	4013      	ands	r3, r2
 80172f6:	d010      	beq.n	801731a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	2242      	movs	r2, #66	@ 0x42
 80172fc:	4313      	orrs	r3, r2
 80172fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	2241      	movs	r2, #65	@ 0x41
 8017304:	5c9b      	ldrb	r3, [r3, r2]
 8017306:	b2db      	uxtb	r3, r3
 8017308:	001a      	movs	r2, r3
 801730a:	2328      	movs	r3, #40	@ 0x28
 801730c:	4013      	ands	r3, r2
 801730e:	2b28      	cmp	r3, #40	@ 0x28
 8017310:	d003      	beq.n	801731a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	22b0      	movs	r2, #176	@ 0xb0
 8017316:	4313      	orrs	r3, r2
 8017318:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801731a:	1cbb      	adds	r3, r7, #2
 801731c:	881b      	ldrh	r3, [r3, #0]
 801731e:	2202      	movs	r2, #2
 8017320:	4013      	ands	r3, r2
 8017322:	d010      	beq.n	8017346 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	2244      	movs	r2, #68	@ 0x44
 8017328:	4313      	orrs	r3, r2
 801732a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	2241      	movs	r2, #65	@ 0x41
 8017330:	5c9b      	ldrb	r3, [r3, r2]
 8017332:	b2db      	uxtb	r3, r3
 8017334:	001a      	movs	r2, r3
 8017336:	2328      	movs	r3, #40	@ 0x28
 8017338:	4013      	ands	r3, r2
 801733a:	2b28      	cmp	r3, #40	@ 0x28
 801733c:	d003      	beq.n	8017346 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	22b0      	movs	r2, #176	@ 0xb0
 8017342:	4313      	orrs	r3, r2
 8017344:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017346:	1cbb      	adds	r3, r7, #2
 8017348:	2200      	movs	r2, #0
 801734a:	5e9b      	ldrsh	r3, [r3, r2]
 801734c:	2b00      	cmp	r3, #0
 801734e:	da03      	bge.n	8017358 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	22b8      	movs	r2, #184	@ 0xb8
 8017354:	4313      	orrs	r3, r2
 8017356:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017358:	1cbb      	adds	r3, r7, #2
 801735a:	881b      	ldrh	r3, [r3, #0]
 801735c:	2b10      	cmp	r3, #16
 801735e:	d103      	bne.n	8017368 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	2290      	movs	r2, #144	@ 0x90
 8017364:	4313      	orrs	r3, r2
 8017366:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017368:	1cbb      	adds	r3, r7, #2
 801736a:	881b      	ldrh	r3, [r3, #0]
 801736c:	2b20      	cmp	r3, #32
 801736e:	d103      	bne.n	8017378 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	2220      	movs	r2, #32
 8017374:	4313      	orrs	r3, r2
 8017376:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8017378:	1cbb      	adds	r3, r7, #2
 801737a:	881b      	ldrh	r3, [r3, #0]
 801737c:	2b40      	cmp	r3, #64	@ 0x40
 801737e:	d103      	bne.n	8017388 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	2240      	movs	r2, #64	@ 0x40
 8017384:	4313      	orrs	r3, r2
 8017386:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	681a      	ldr	r2, [r3, #0]
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	43d9      	mvns	r1, r3
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	400a      	ands	r2, r1
 8017398:	601a      	str	r2, [r3, #0]
}
 801739a:	46c0      	nop			@ (mov r8, r8)
 801739c:	46bd      	mov	sp, r7
 801739e:	b004      	add	sp, #16
 80173a0:	bd80      	pop	{r7, pc}
	...

080173a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80173a4:	b580      	push	{r7, lr}
 80173a6:	b082      	sub	sp, #8
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	6078      	str	r0, [r7, #4]
 80173ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	2241      	movs	r2, #65	@ 0x41
 80173b2:	5c9b      	ldrb	r3, [r3, r2]
 80173b4:	b2db      	uxtb	r3, r3
 80173b6:	2b20      	cmp	r3, #32
 80173b8:	d138      	bne.n	801742c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	2240      	movs	r2, #64	@ 0x40
 80173be:	5c9b      	ldrb	r3, [r3, r2]
 80173c0:	2b01      	cmp	r3, #1
 80173c2:	d101      	bne.n	80173c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80173c4:	2302      	movs	r3, #2
 80173c6:	e032      	b.n	801742e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	2240      	movs	r2, #64	@ 0x40
 80173cc:	2101      	movs	r1, #1
 80173ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	2241      	movs	r2, #65	@ 0x41
 80173d4:	2124      	movs	r1, #36	@ 0x24
 80173d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	681a      	ldr	r2, [r3, #0]
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	2101      	movs	r1, #1
 80173e4:	438a      	bics	r2, r1
 80173e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	681a      	ldr	r2, [r3, #0]
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	4911      	ldr	r1, [pc, #68]	@ (8017438 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80173f4:	400a      	ands	r2, r1
 80173f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	6819      	ldr	r1, [r3, #0]
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	683a      	ldr	r2, [r7, #0]
 8017404:	430a      	orrs	r2, r1
 8017406:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	681a      	ldr	r2, [r3, #0]
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	2101      	movs	r1, #1
 8017414:	430a      	orrs	r2, r1
 8017416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	2241      	movs	r2, #65	@ 0x41
 801741c:	2120      	movs	r1, #32
 801741e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	2240      	movs	r2, #64	@ 0x40
 8017424:	2100      	movs	r1, #0
 8017426:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017428:	2300      	movs	r3, #0
 801742a:	e000      	b.n	801742e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801742c:	2302      	movs	r3, #2
  }
}
 801742e:	0018      	movs	r0, r3
 8017430:	46bd      	mov	sp, r7
 8017432:	b002      	add	sp, #8
 8017434:	bd80      	pop	{r7, pc}
 8017436:	46c0      	nop			@ (mov r8, r8)
 8017438:	ffffefff 	.word	0xffffefff

0801743c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801743c:	b580      	push	{r7, lr}
 801743e:	b084      	sub	sp, #16
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
 8017444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	2241      	movs	r2, #65	@ 0x41
 801744a:	5c9b      	ldrb	r3, [r3, r2]
 801744c:	b2db      	uxtb	r3, r3
 801744e:	2b20      	cmp	r3, #32
 8017450:	d139      	bne.n	80174c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	2240      	movs	r2, #64	@ 0x40
 8017456:	5c9b      	ldrb	r3, [r3, r2]
 8017458:	2b01      	cmp	r3, #1
 801745a:	d101      	bne.n	8017460 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801745c:	2302      	movs	r3, #2
 801745e:	e033      	b.n	80174c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	2240      	movs	r2, #64	@ 0x40
 8017464:	2101      	movs	r1, #1
 8017466:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	2241      	movs	r2, #65	@ 0x41
 801746c:	2124      	movs	r1, #36	@ 0x24
 801746e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	681a      	ldr	r2, [r3, #0]
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	2101      	movs	r1, #1
 801747c:	438a      	bics	r2, r1
 801747e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	4a11      	ldr	r2, [pc, #68]	@ (80174d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 801748c:	4013      	ands	r3, r2
 801748e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8017490:	683b      	ldr	r3, [r7, #0]
 8017492:	021b      	lsls	r3, r3, #8
 8017494:	68fa      	ldr	r2, [r7, #12]
 8017496:	4313      	orrs	r3, r2
 8017498:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	68fa      	ldr	r2, [r7, #12]
 80174a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	681a      	ldr	r2, [r3, #0]
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	2101      	movs	r1, #1
 80174ae:	430a      	orrs	r2, r1
 80174b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	2241      	movs	r2, #65	@ 0x41
 80174b6:	2120      	movs	r1, #32
 80174b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	2240      	movs	r2, #64	@ 0x40
 80174be:	2100      	movs	r1, #0
 80174c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80174c2:	2300      	movs	r3, #0
 80174c4:	e000      	b.n	80174c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80174c6:	2302      	movs	r3, #2
  }
}
 80174c8:	0018      	movs	r0, r3
 80174ca:	46bd      	mov	sp, r7
 80174cc:	b004      	add	sp, #16
 80174ce:	bd80      	pop	{r7, pc}
 80174d0:	fffff0ff 	.word	0xfffff0ff

080174d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b088      	sub	sp, #32
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d101      	bne.n	80174e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80174e2:	2301      	movs	r3, #1
 80174e4:	e0e1      	b.n	80176aa <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	2235      	movs	r2, #53	@ 0x35
 80174ea:	5c9b      	ldrb	r3, [r3, r2]
 80174ec:	b2db      	uxtb	r3, r3
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d107      	bne.n	8017502 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	2234      	movs	r2, #52	@ 0x34
 80174f6:	2100      	movs	r1, #0
 80174f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	0018      	movs	r0, r3
 80174fe:	f7f4 f8e9 	bl	800b6d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	2235      	movs	r2, #53	@ 0x35
 8017506:	2102      	movs	r1, #2
 8017508:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	69da      	ldr	r2, [r3, #28]
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	4967      	ldr	r1, [pc, #412]	@ (80176b4 <HAL_I2S_Init+0x1e0>)
 8017516:	400a      	ands	r2, r1
 8017518:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	2202      	movs	r2, #2
 8017520:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	695b      	ldr	r3, [r3, #20]
 8017526:	2b02      	cmp	r3, #2
 8017528:	d073      	beq.n	8017612 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	68db      	ldr	r3, [r3, #12]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d102      	bne.n	8017538 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8017532:	2310      	movs	r3, #16
 8017534:	617b      	str	r3, [r7, #20]
 8017536:	e001      	b.n	801753c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8017538:	2320      	movs	r3, #32
 801753a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	689b      	ldr	r3, [r3, #8]
 8017540:	2b20      	cmp	r3, #32
 8017542:	d802      	bhi.n	801754a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8017544:	697b      	ldr	r3, [r7, #20]
 8017546:	005b      	lsls	r3, r3, #1
 8017548:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 801754a:	f002 fed3 	bl	801a2f4 <HAL_RCC_GetSysClockFreq>
 801754e:	0003      	movs	r3, r0
 8017550:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	691a      	ldr	r2, [r3, #16]
 8017556:	2380      	movs	r3, #128	@ 0x80
 8017558:	009b      	lsls	r3, r3, #2
 801755a:	429a      	cmp	r2, r3
 801755c:	d131      	bne.n	80175c2 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	68db      	ldr	r3, [r3, #12]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d016      	beq.n	8017594 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8017566:	697b      	ldr	r3, [r7, #20]
 8017568:	009b      	lsls	r3, r3, #2
 801756a:	0019      	movs	r1, r3
 801756c:	68f8      	ldr	r0, [r7, #12]
 801756e:	f7e8 fe19 	bl	80001a4 <__udivsi3>
 8017572:	0003      	movs	r3, r0
 8017574:	001a      	movs	r2, r3
 8017576:	0013      	movs	r3, r2
 8017578:	009b      	lsls	r3, r3, #2
 801757a:	189b      	adds	r3, r3, r2
 801757c:	005b      	lsls	r3, r3, #1
 801757e:	001a      	movs	r2, r3
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	695b      	ldr	r3, [r3, #20]
 8017584:	0019      	movs	r1, r3
 8017586:	0010      	movs	r0, r2
 8017588:	f7e8 fe0c 	bl	80001a4 <__udivsi3>
 801758c:	0003      	movs	r3, r0
 801758e:	3305      	adds	r3, #5
 8017590:	613b      	str	r3, [r7, #16]
 8017592:	e02a      	b.n	80175ea <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8017594:	697b      	ldr	r3, [r7, #20]
 8017596:	00db      	lsls	r3, r3, #3
 8017598:	0019      	movs	r1, r3
 801759a:	68f8      	ldr	r0, [r7, #12]
 801759c:	f7e8 fe02 	bl	80001a4 <__udivsi3>
 80175a0:	0003      	movs	r3, r0
 80175a2:	001a      	movs	r2, r3
 80175a4:	0013      	movs	r3, r2
 80175a6:	009b      	lsls	r3, r3, #2
 80175a8:	189b      	adds	r3, r3, r2
 80175aa:	005b      	lsls	r3, r3, #1
 80175ac:	001a      	movs	r2, r3
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	695b      	ldr	r3, [r3, #20]
 80175b2:	0019      	movs	r1, r3
 80175b4:	0010      	movs	r0, r2
 80175b6:	f7e8 fdf5 	bl	80001a4 <__udivsi3>
 80175ba:	0003      	movs	r3, r0
 80175bc:	3305      	adds	r3, #5
 80175be:	613b      	str	r3, [r7, #16]
 80175c0:	e013      	b.n	80175ea <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80175c2:	6979      	ldr	r1, [r7, #20]
 80175c4:	68f8      	ldr	r0, [r7, #12]
 80175c6:	f7e8 fded 	bl	80001a4 <__udivsi3>
 80175ca:	0003      	movs	r3, r0
 80175cc:	001a      	movs	r2, r3
 80175ce:	0013      	movs	r3, r2
 80175d0:	009b      	lsls	r3, r3, #2
 80175d2:	189b      	adds	r3, r3, r2
 80175d4:	005b      	lsls	r3, r3, #1
 80175d6:	001a      	movs	r2, r3
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	695b      	ldr	r3, [r3, #20]
 80175dc:	0019      	movs	r1, r3
 80175de:	0010      	movs	r0, r2
 80175e0:	f7e8 fde0 	bl	80001a4 <__udivsi3>
 80175e4:	0003      	movs	r3, r0
 80175e6:	3305      	adds	r3, #5
 80175e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80175ea:	693b      	ldr	r3, [r7, #16]
 80175ec:	210a      	movs	r1, #10
 80175ee:	0018      	movs	r0, r3
 80175f0:	f7e8 fdd8 	bl	80001a4 <__udivsi3>
 80175f4:	0003      	movs	r3, r0
 80175f6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80175f8:	693b      	ldr	r3, [r7, #16]
 80175fa:	2201      	movs	r2, #1
 80175fc:	4013      	ands	r3, r2
 80175fe:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8017600:	693a      	ldr	r2, [r7, #16]
 8017602:	69bb      	ldr	r3, [r7, #24]
 8017604:	1ad3      	subs	r3, r2, r3
 8017606:	085b      	lsrs	r3, r3, #1
 8017608:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 801760a:	69bb      	ldr	r3, [r7, #24]
 801760c:	021b      	lsls	r3, r3, #8
 801760e:	61bb      	str	r3, [r7, #24]
 8017610:	e003      	b.n	801761a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8017612:	2302      	movs	r3, #2
 8017614:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8017616:	2300      	movs	r3, #0
 8017618:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 801761a:	69fb      	ldr	r3, [r7, #28]
 801761c:	2b01      	cmp	r3, #1
 801761e:	d902      	bls.n	8017626 <HAL_I2S_Init+0x152>
 8017620:	69fb      	ldr	r3, [r7, #28]
 8017622:	2bff      	cmp	r3, #255	@ 0xff
 8017624:	d907      	bls.n	8017636 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801762a:	2210      	movs	r2, #16
 801762c:	431a      	orrs	r2, r3
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8017632:	2301      	movs	r3, #1
 8017634:	e039      	b.n	80176aa <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	691a      	ldr	r2, [r3, #16]
 801763a:	69bb      	ldr	r3, [r7, #24]
 801763c:	431a      	orrs	r2, r3
 801763e:	0011      	movs	r1, r2
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	69fa      	ldr	r2, [r7, #28]
 8017646:	430a      	orrs	r2, r1
 8017648:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	69db      	ldr	r3, [r3, #28]
 8017650:	4a18      	ldr	r2, [pc, #96]	@ (80176b4 <HAL_I2S_Init+0x1e0>)
 8017652:	401a      	ands	r2, r3
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	6859      	ldr	r1, [r3, #4]
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	689b      	ldr	r3, [r3, #8]
 801765c:	4319      	orrs	r1, r3
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	68db      	ldr	r3, [r3, #12]
 8017662:	4319      	orrs	r1, r3
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	699b      	ldr	r3, [r3, #24]
 8017668:	430b      	orrs	r3, r1
 801766a:	431a      	orrs	r2, r3
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	2180      	movs	r1, #128	@ 0x80
 8017672:	0109      	lsls	r1, r1, #4
 8017674:	430a      	orrs	r2, r1
 8017676:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	689b      	ldr	r3, [r3, #8]
 801767c:	2b30      	cmp	r3, #48	@ 0x30
 801767e:	d003      	beq.n	8017688 <HAL_I2S_Init+0x1b4>
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	689b      	ldr	r3, [r3, #8]
 8017684:	2bb0      	cmp	r3, #176	@ 0xb0
 8017686:	d108      	bne.n	801769a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	69da      	ldr	r2, [r3, #28]
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	2180      	movs	r1, #128	@ 0x80
 8017694:	0149      	lsls	r1, r1, #5
 8017696:	430a      	orrs	r2, r1
 8017698:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	2200      	movs	r2, #0
 801769e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	2235      	movs	r2, #53	@ 0x35
 80176a4:	2101      	movs	r1, #1
 80176a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80176a8:	2300      	movs	r3, #0
}
 80176aa:	0018      	movs	r0, r3
 80176ac:	46bd      	mov	sp, r7
 80176ae:	b008      	add	sp, #32
 80176b0:	bd80      	pop	{r7, pc}
 80176b2:	46c0      	nop			@ (mov r8, r8)
 80176b4:	fffff040 	.word	0xfffff040

080176b8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b086      	sub	sp, #24
 80176bc:	af00      	add	r7, sp, #0
 80176be:	60f8      	str	r0, [r7, #12]
 80176c0:	60b9      	str	r1, [r7, #8]
 80176c2:	1dbb      	adds	r3, r7, #6
 80176c4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80176c6:	68bb      	ldr	r3, [r7, #8]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d003      	beq.n	80176d4 <HAL_I2S_Receive_DMA+0x1c>
 80176cc:	1dbb      	adds	r3, r7, #6
 80176ce:	881b      	ldrh	r3, [r3, #0]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d101      	bne.n	80176d8 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80176d4:	2301      	movs	r3, #1
 80176d6:	e0a6      	b.n	8017826 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	2234      	movs	r2, #52	@ 0x34
 80176dc:	5c9b      	ldrb	r3, [r3, r2]
 80176de:	b2db      	uxtb	r3, r3
 80176e0:	2b01      	cmp	r3, #1
 80176e2:	d101      	bne.n	80176e8 <HAL_I2S_Receive_DMA+0x30>
 80176e4:	2302      	movs	r3, #2
 80176e6:	e09e      	b.n	8017826 <HAL_I2S_Receive_DMA+0x16e>
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	2234      	movs	r2, #52	@ 0x34
 80176ec:	2101      	movs	r1, #1
 80176ee:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	2235      	movs	r2, #53	@ 0x35
 80176f4:	5c9b      	ldrb	r3, [r3, r2]
 80176f6:	b2db      	uxtb	r3, r3
 80176f8:	2b01      	cmp	r3, #1
 80176fa:	d005      	beq.n	8017708 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	2234      	movs	r2, #52	@ 0x34
 8017700:	2100      	movs	r1, #0
 8017702:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8017704:	2302      	movs	r3, #2
 8017706:	e08e      	b.n	8017826 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	2235      	movs	r2, #53	@ 0x35
 801770c:	2104      	movs	r1, #4
 801770e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	2200      	movs	r2, #0
 8017714:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	68ba      	ldr	r2, [r7, #8]
 801771a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	69db      	ldr	r3, [r3, #28]
 8017722:	2207      	movs	r2, #7
 8017724:	4013      	ands	r3, r2
 8017726:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8017728:	697b      	ldr	r3, [r7, #20]
 801772a:	2b03      	cmp	r3, #3
 801772c:	d002      	beq.n	8017734 <HAL_I2S_Receive_DMA+0x7c>
 801772e:	697b      	ldr	r3, [r7, #20]
 8017730:	2b05      	cmp	r3, #5
 8017732:	d10c      	bne.n	801774e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8017734:	1dbb      	adds	r3, r7, #6
 8017736:	881b      	ldrh	r3, [r3, #0]
 8017738:	18db      	adds	r3, r3, r3
 801773a:	b29a      	uxth	r2, r3
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8017740:	1dbb      	adds	r3, r7, #6
 8017742:	881b      	ldrh	r3, [r3, #0]
 8017744:	18db      	adds	r3, r3, r3
 8017746:	b29a      	uxth	r2, r3
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801774c:	e007      	b.n	801775e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	1dba      	adds	r2, r7, #6
 8017752:	8812      	ldrh	r2, [r2, #0]
 8017754:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	1dba      	adds	r2, r7, #6
 801775a:	8812      	ldrh	r2, [r2, #0]
 801775c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017762:	4a33      	ldr	r2, [pc, #204]	@ (8017830 <HAL_I2S_Receive_DMA+0x178>)
 8017764:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801776a:	4a32      	ldr	r2, [pc, #200]	@ (8017834 <HAL_I2S_Receive_DMA+0x17c>)
 801776c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017772:	4a31      	ldr	r2, [pc, #196]	@ (8017838 <HAL_I2S_Receive_DMA+0x180>)
 8017774:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	69da      	ldr	r2, [r3, #28]
 801777c:	23c0      	movs	r3, #192	@ 0xc0
 801777e:	009b      	lsls	r3, r3, #2
 8017780:	401a      	ands	r2, r3
 8017782:	23c0      	movs	r3, #192	@ 0xc0
 8017784:	009b      	lsls	r3, r3, #2
 8017786:	429a      	cmp	r2, r3
 8017788:	d10a      	bne.n	80177a0 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801778a:	2300      	movs	r3, #0
 801778c:	613b      	str	r3, [r7, #16]
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	68db      	ldr	r3, [r3, #12]
 8017794:	613b      	str	r3, [r7, #16]
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	689b      	ldr	r3, [r3, #8]
 801779c:	613b      	str	r3, [r7, #16]
 801779e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	330c      	adds	r3, #12
 80177aa:	0019      	movs	r1, r3
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177b0:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80177b6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80177b8:	f7fc fa0a 	bl	8013bd0 <HAL_DMA_Start_IT>
 80177bc:	1e03      	subs	r3, r0, #0
 80177be:	d00f      	beq.n	80177e0 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177c4:	2208      	movs	r2, #8
 80177c6:	431a      	orrs	r2, r3
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	2235      	movs	r2, #53	@ 0x35
 80177d0:	2101      	movs	r1, #1
 80177d2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	2234      	movs	r2, #52	@ 0x34
 80177d8:	2100      	movs	r1, #0
 80177da:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80177dc:	2301      	movs	r3, #1
 80177de:	e022      	b.n	8017826 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	69da      	ldr	r2, [r3, #28]
 80177e6:	2380      	movs	r3, #128	@ 0x80
 80177e8:	00db      	lsls	r3, r3, #3
 80177ea:	4013      	ands	r3, r2
 80177ec:	d108      	bne.n	8017800 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	69da      	ldr	r2, [r3, #28]
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	2180      	movs	r1, #128	@ 0x80
 80177fa:	00c9      	lsls	r1, r1, #3
 80177fc:	430a      	orrs	r2, r1
 80177fe:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	685b      	ldr	r3, [r3, #4]
 8017806:	2201      	movs	r2, #1
 8017808:	4013      	ands	r3, r2
 801780a:	d107      	bne.n	801781c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	685a      	ldr	r2, [r3, #4]
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	2101      	movs	r1, #1
 8017818:	430a      	orrs	r2, r1
 801781a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	2234      	movs	r2, #52	@ 0x34
 8017820:	2100      	movs	r1, #0
 8017822:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8017824:	2300      	movs	r3, #0
}
 8017826:	0018      	movs	r0, r3
 8017828:	46bd      	mov	sp, r7
 801782a:	b006      	add	sp, #24
 801782c:	bd80      	pop	{r7, pc}
 801782e:	46c0      	nop			@ (mov r8, r8)
 8017830:	08017a19 	.word	0x08017a19
 8017834:	080179d5 	.word	0x080179d5
 8017838:	08017a37 	.word	0x08017a37

0801783c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b086      	sub	sp, #24
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8017844:	2317      	movs	r3, #23
 8017846:	18fb      	adds	r3, r7, r3
 8017848:	2200      	movs	r2, #0
 801784a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	685a      	ldr	r2, [r3, #4]
 8017850:	2380      	movs	r3, #128	@ 0x80
 8017852:	009b      	lsls	r3, r3, #2
 8017854:	429a      	cmp	r2, r3
 8017856:	d003      	beq.n	8017860 <HAL_I2S_DMAStop+0x24>
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	685b      	ldr	r3, [r3, #4]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d158      	bne.n	8017912 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017864:	2b00      	cmp	r3, #0
 8017866:	d010      	beq.n	801788a <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801786c:	0018      	movs	r0, r3
 801786e:	f7fc fa15 	bl	8013c9c <HAL_DMA_Abort>
 8017872:	1e03      	subs	r3, r0, #0
 8017874:	d009      	beq.n	801788a <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801787a:	2208      	movs	r2, #8
 801787c:	431a      	orrs	r2, r3
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8017882:	2317      	movs	r3, #23
 8017884:	18fb      	adds	r3, r7, r3
 8017886:	2201      	movs	r2, #1
 8017888:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801788a:	6878      	ldr	r0, [r7, #4]
 801788c:	2364      	movs	r3, #100	@ 0x64
 801788e:	2201      	movs	r2, #1
 8017890:	2102      	movs	r1, #2
 8017892:	f000 f8f7 	bl	8017a84 <I2S_WaitFlagStateUntilTimeout>
 8017896:	1e03      	subs	r3, r0, #0
 8017898:	d00d      	beq.n	80178b6 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801789e:	2201      	movs	r2, #1
 80178a0:	431a      	orrs	r2, r3
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	2235      	movs	r2, #53	@ 0x35
 80178aa:	2101      	movs	r1, #1
 80178ac:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80178ae:	2317      	movs	r3, #23
 80178b0:	18fb      	adds	r3, r7, r3
 80178b2:	2201      	movs	r2, #1
 80178b4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80178b6:	6878      	ldr	r0, [r7, #4]
 80178b8:	2364      	movs	r3, #100	@ 0x64
 80178ba:	2200      	movs	r2, #0
 80178bc:	2180      	movs	r1, #128	@ 0x80
 80178be:	f000 f8e1 	bl	8017a84 <I2S_WaitFlagStateUntilTimeout>
 80178c2:	1e03      	subs	r3, r0, #0
 80178c4:	d00d      	beq.n	80178e2 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80178ca:	2201      	movs	r2, #1
 80178cc:	431a      	orrs	r2, r3
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	2235      	movs	r2, #53	@ 0x35
 80178d6:	2101      	movs	r1, #1
 80178d8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80178da:	2317      	movs	r3, #23
 80178dc:	18fb      	adds	r3, r7, r3
 80178de:	2201      	movs	r2, #1
 80178e0:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	69da      	ldr	r2, [r3, #28]
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	4938      	ldr	r1, [pc, #224]	@ (80179d0 <HAL_I2S_DMAStop+0x194>)
 80178ee:	400a      	ands	r2, r1
 80178f0:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80178f2:	2300      	movs	r3, #0
 80178f4:	613b      	str	r3, [r7, #16]
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	689b      	ldr	r3, [r3, #8]
 80178fc:	613b      	str	r3, [r7, #16]
 80178fe:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	685a      	ldr	r2, [r3, #4]
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	2102      	movs	r1, #2
 801790c:	438a      	bics	r2, r1
 801790e:	605a      	str	r2, [r3, #4]
 8017910:	e053      	b.n	80179ba <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	685a      	ldr	r2, [r3, #4]
 8017916:	23c0      	movs	r3, #192	@ 0xc0
 8017918:	009b      	lsls	r3, r3, #2
 801791a:	429a      	cmp	r2, r3
 801791c:	d005      	beq.n	801792a <HAL_I2S_DMAStop+0xee>
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	685a      	ldr	r2, [r3, #4]
 8017922:	2380      	movs	r3, #128	@ 0x80
 8017924:	005b      	lsls	r3, r3, #1
 8017926:	429a      	cmp	r2, r3
 8017928:	d147      	bne.n	80179ba <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801792e:	2b00      	cmp	r3, #0
 8017930:	d010      	beq.n	8017954 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017936:	0018      	movs	r0, r3
 8017938:	f7fc f9b0 	bl	8013c9c <HAL_DMA_Abort>
 801793c:	1e03      	subs	r3, r0, #0
 801793e:	d009      	beq.n	8017954 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017944:	2208      	movs	r2, #8
 8017946:	431a      	orrs	r2, r3
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801794c:	2317      	movs	r3, #23
 801794e:	18fb      	adds	r3, r7, r3
 8017950:	2201      	movs	r2, #1
 8017952:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	69da      	ldr	r2, [r3, #28]
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	491c      	ldr	r1, [pc, #112]	@ (80179d0 <HAL_I2S_DMAStop+0x194>)
 8017960:	400a      	ands	r2, r1
 8017962:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8017964:	2300      	movs	r3, #0
 8017966:	60fb      	str	r3, [r7, #12]
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	68db      	ldr	r3, [r3, #12]
 801796e:	60fb      	str	r3, [r7, #12]
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	689b      	ldr	r3, [r3, #8]
 8017976:	60fb      	str	r3, [r7, #12]
 8017978:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	685a      	ldr	r2, [r3, #4]
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	2101      	movs	r1, #1
 8017986:	438a      	bics	r2, r1
 8017988:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	685a      	ldr	r2, [r3, #4]
 801798e:	2380      	movs	r3, #128	@ 0x80
 8017990:	005b      	lsls	r3, r3, #1
 8017992:	429a      	cmp	r2, r3
 8017994:	d10e      	bne.n	80179b4 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801799a:	2240      	movs	r2, #64	@ 0x40
 801799c:	431a      	orrs	r2, r3
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	2235      	movs	r2, #53	@ 0x35
 80179a6:	2101      	movs	r1, #1
 80179a8:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80179aa:	2317      	movs	r3, #23
 80179ac:	18fb      	adds	r3, r7, r3
 80179ae:	2201      	movs	r2, #1
 80179b0:	701a      	strb	r2, [r3, #0]
 80179b2:	e002      	b.n	80179ba <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	2235      	movs	r2, #53	@ 0x35
 80179be:	2101      	movs	r1, #1
 80179c0:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80179c2:	2317      	movs	r3, #23
 80179c4:	18fb      	adds	r3, r7, r3
 80179c6:	781b      	ldrb	r3, [r3, #0]
}
 80179c8:	0018      	movs	r0, r3
 80179ca:	46bd      	mov	sp, r7
 80179cc:	b006      	add	sp, #24
 80179ce:	bd80      	pop	{r7, pc}
 80179d0:	fffffbff 	.word	0xfffffbff

080179d4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b084      	sub	sp, #16
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80179e0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	69db      	ldr	r3, [r3, #28]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d10e      	bne.n	8017a08 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	685a      	ldr	r2, [r3, #4]
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	2101      	movs	r1, #1
 80179f6:	438a      	bics	r2, r1
 80179f8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	2200      	movs	r2, #0
 80179fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	2235      	movs	r2, #53	@ 0x35
 8017a04:	2101      	movs	r1, #1
 8017a06:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	0018      	movs	r0, r3
 8017a0c:	f7f8 fd62 	bl	80104d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8017a10:	46c0      	nop			@ (mov r8, r8)
 8017a12:	46bd      	mov	sp, r7
 8017a14:	b004      	add	sp, #16
 8017a16:	bd80      	pop	{r7, pc}

08017a18 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b084      	sub	sp, #16
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a24:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	0018      	movs	r0, r3
 8017a2a:	f7f8 fd41 	bl	80104b0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8017a2e:	46c0      	nop			@ (mov r8, r8)
 8017a30:	46bd      	mov	sp, r7
 8017a32:	b004      	add	sp, #16
 8017a34:	bd80      	pop	{r7, pc}

08017a36 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8017a36:	b580      	push	{r7, lr}
 8017a38:	b084      	sub	sp, #16
 8017a3a:	af00      	add	r7, sp, #0
 8017a3c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a42:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	685a      	ldr	r2, [r3, #4]
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	2103      	movs	r1, #3
 8017a50:	438a      	bics	r2, r1
 8017a52:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	2200      	movs	r2, #0
 8017a58:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	2235      	movs	r2, #53	@ 0x35
 8017a64:	2101      	movs	r1, #1
 8017a66:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017a6c:	2208      	movs	r2, #8
 8017a6e:	431a      	orrs	r2, r3
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	0018      	movs	r0, r3
 8017a78:	f7f8 fd7a 	bl	8010570 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8017a7c:	46c0      	nop			@ (mov r8, r8)
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	b004      	add	sp, #16
 8017a82:	bd80      	pop	{r7, pc}

08017a84 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b086      	sub	sp, #24
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	60f8      	str	r0, [r7, #12]
 8017a8c:	60b9      	str	r1, [r7, #8]
 8017a8e:	603b      	str	r3, [r7, #0]
 8017a90:	1dfb      	adds	r3, r7, #7
 8017a92:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8017a94:	f7fb fb4a 	bl	801312c <HAL_GetTick>
 8017a98:	0003      	movs	r3, r0
 8017a9a:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8017a9c:	e017      	b.n	8017ace <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8017a9e:	683b      	ldr	r3, [r7, #0]
 8017aa0:	3301      	adds	r3, #1
 8017aa2:	d014      	beq.n	8017ace <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8017aa4:	f7fb fb42 	bl	801312c <HAL_GetTick>
 8017aa8:	0002      	movs	r2, r0
 8017aaa:	697b      	ldr	r3, [r7, #20]
 8017aac:	1ad3      	subs	r3, r2, r3
 8017aae:	683a      	ldr	r2, [r7, #0]
 8017ab0:	429a      	cmp	r2, r3
 8017ab2:	d902      	bls.n	8017aba <I2S_WaitFlagStateUntilTimeout+0x36>
 8017ab4:	683b      	ldr	r3, [r7, #0]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d109      	bne.n	8017ace <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	2235      	movs	r2, #53	@ 0x35
 8017abe:	2101      	movs	r1, #1
 8017ac0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	2234      	movs	r2, #52	@ 0x34
 8017ac6:	2100      	movs	r1, #0
 8017ac8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8017aca:	2303      	movs	r3, #3
 8017acc:	e00f      	b.n	8017aee <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	689b      	ldr	r3, [r3, #8]
 8017ad4:	68ba      	ldr	r2, [r7, #8]
 8017ad6:	4013      	ands	r3, r2
 8017ad8:	68ba      	ldr	r2, [r7, #8]
 8017ada:	1ad3      	subs	r3, r2, r3
 8017adc:	425a      	negs	r2, r3
 8017ade:	4153      	adcs	r3, r2
 8017ae0:	b2db      	uxtb	r3, r3
 8017ae2:	001a      	movs	r2, r3
 8017ae4:	1dfb      	adds	r3, r7, #7
 8017ae6:	781b      	ldrb	r3, [r3, #0]
 8017ae8:	429a      	cmp	r2, r3
 8017aea:	d1d8      	bne.n	8017a9e <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8017aec:	2300      	movs	r3, #0
}
 8017aee:	0018      	movs	r0, r3
 8017af0:	46bd      	mov	sp, r7
 8017af2:	b006      	add	sp, #24
 8017af4:	bd80      	pop	{r7, pc}
	...

08017af8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8017af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017afa:	b08b      	sub	sp, #44	@ 0x2c
 8017afc:	af06      	add	r7, sp, #24
 8017afe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d101      	bne.n	8017b0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8017b06:	2301      	movs	r3, #1
 8017b08:	e0f0      	b.n	8017cec <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	4a79      	ldr	r2, [pc, #484]	@ (8017cf4 <HAL_PCD_Init+0x1fc>)
 8017b0e:	5c9b      	ldrb	r3, [r3, r2]
 8017b10:	b2db      	uxtb	r3, r3
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d108      	bne.n	8017b28 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8017b16:	687a      	ldr	r2, [r7, #4]
 8017b18:	23aa      	movs	r3, #170	@ 0xaa
 8017b1a:	009b      	lsls	r3, r3, #2
 8017b1c:	2100      	movs	r1, #0
 8017b1e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	0018      	movs	r0, r3
 8017b24:	f009 ff4a 	bl	80219bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	4a72      	ldr	r2, [pc, #456]	@ (8017cf4 <HAL_PCD_Init+0x1fc>)
 8017b2c:	2103      	movs	r1, #3
 8017b2e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	0018      	movs	r0, r3
 8017b36:	f005 fefd 	bl	801d934 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017b3a:	230f      	movs	r3, #15
 8017b3c:	18fb      	adds	r3, r7, r3
 8017b3e:	2200      	movs	r2, #0
 8017b40:	701a      	strb	r2, [r3, #0]
 8017b42:	e049      	b.n	8017bd8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8017b44:	200f      	movs	r0, #15
 8017b46:	183b      	adds	r3, r7, r0
 8017b48:	781b      	ldrb	r3, [r3, #0]
 8017b4a:	6879      	ldr	r1, [r7, #4]
 8017b4c:	1c5a      	adds	r2, r3, #1
 8017b4e:	0013      	movs	r3, r2
 8017b50:	009b      	lsls	r3, r3, #2
 8017b52:	189b      	adds	r3, r3, r2
 8017b54:	00db      	lsls	r3, r3, #3
 8017b56:	18cb      	adds	r3, r1, r3
 8017b58:	3301      	adds	r3, #1
 8017b5a:	2201      	movs	r2, #1
 8017b5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8017b5e:	183b      	adds	r3, r7, r0
 8017b60:	781b      	ldrb	r3, [r3, #0]
 8017b62:	6879      	ldr	r1, [r7, #4]
 8017b64:	1c5a      	adds	r2, r3, #1
 8017b66:	0013      	movs	r3, r2
 8017b68:	009b      	lsls	r3, r3, #2
 8017b6a:	189b      	adds	r3, r3, r2
 8017b6c:	00db      	lsls	r3, r3, #3
 8017b6e:	183a      	adds	r2, r7, r0
 8017b70:	7812      	ldrb	r2, [r2, #0]
 8017b72:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8017b74:	183b      	adds	r3, r7, r0
 8017b76:	781b      	ldrb	r3, [r3, #0]
 8017b78:	6879      	ldr	r1, [r7, #4]
 8017b7a:	1c5a      	adds	r2, r3, #1
 8017b7c:	0013      	movs	r3, r2
 8017b7e:	009b      	lsls	r3, r3, #2
 8017b80:	189b      	adds	r3, r3, r2
 8017b82:	00db      	lsls	r3, r3, #3
 8017b84:	18cb      	adds	r3, r1, r3
 8017b86:	3303      	adds	r3, #3
 8017b88:	2200      	movs	r2, #0
 8017b8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8017b8c:	183b      	adds	r3, r7, r0
 8017b8e:	781a      	ldrb	r2, [r3, #0]
 8017b90:	6879      	ldr	r1, [r7, #4]
 8017b92:	0013      	movs	r3, r2
 8017b94:	009b      	lsls	r3, r3, #2
 8017b96:	189b      	adds	r3, r3, r2
 8017b98:	00db      	lsls	r3, r3, #3
 8017b9a:	18cb      	adds	r3, r1, r3
 8017b9c:	3338      	adds	r3, #56	@ 0x38
 8017b9e:	2200      	movs	r2, #0
 8017ba0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8017ba2:	183b      	adds	r3, r7, r0
 8017ba4:	781a      	ldrb	r2, [r3, #0]
 8017ba6:	6879      	ldr	r1, [r7, #4]
 8017ba8:	0013      	movs	r3, r2
 8017baa:	009b      	lsls	r3, r3, #2
 8017bac:	189b      	adds	r3, r3, r2
 8017bae:	00db      	lsls	r3, r3, #3
 8017bb0:	18cb      	adds	r3, r1, r3
 8017bb2:	333c      	adds	r3, #60	@ 0x3c
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8017bb8:	183b      	adds	r3, r7, r0
 8017bba:	781a      	ldrb	r2, [r3, #0]
 8017bbc:	6879      	ldr	r1, [r7, #4]
 8017bbe:	0013      	movs	r3, r2
 8017bc0:	009b      	lsls	r3, r3, #2
 8017bc2:	189b      	adds	r3, r3, r2
 8017bc4:	00db      	lsls	r3, r3, #3
 8017bc6:	18cb      	adds	r3, r1, r3
 8017bc8:	3340      	adds	r3, #64	@ 0x40
 8017bca:	2200      	movs	r2, #0
 8017bcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017bce:	183b      	adds	r3, r7, r0
 8017bd0:	781a      	ldrb	r2, [r3, #0]
 8017bd2:	183b      	adds	r3, r7, r0
 8017bd4:	3201      	adds	r2, #1
 8017bd6:	701a      	strb	r2, [r3, #0]
 8017bd8:	210f      	movs	r1, #15
 8017bda:	187b      	adds	r3, r7, r1
 8017bdc:	781a      	ldrb	r2, [r3, #0]
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	685b      	ldr	r3, [r3, #4]
 8017be2:	429a      	cmp	r2, r3
 8017be4:	d3ae      	bcc.n	8017b44 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017be6:	187b      	adds	r3, r7, r1
 8017be8:	2200      	movs	r2, #0
 8017bea:	701a      	strb	r2, [r3, #0]
 8017bec:	e056      	b.n	8017c9c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8017bee:	240f      	movs	r4, #15
 8017bf0:	193b      	adds	r3, r7, r4
 8017bf2:	781a      	ldrb	r2, [r3, #0]
 8017bf4:	6878      	ldr	r0, [r7, #4]
 8017bf6:	236a      	movs	r3, #106	@ 0x6a
 8017bf8:	33ff      	adds	r3, #255	@ 0xff
 8017bfa:	0019      	movs	r1, r3
 8017bfc:	0013      	movs	r3, r2
 8017bfe:	009b      	lsls	r3, r3, #2
 8017c00:	189b      	adds	r3, r3, r2
 8017c02:	00db      	lsls	r3, r3, #3
 8017c04:	18c3      	adds	r3, r0, r3
 8017c06:	185b      	adds	r3, r3, r1
 8017c08:	2200      	movs	r2, #0
 8017c0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8017c0c:	193b      	adds	r3, r7, r4
 8017c0e:	781a      	ldrb	r2, [r3, #0]
 8017c10:	6878      	ldr	r0, [r7, #4]
 8017c12:	23b4      	movs	r3, #180	@ 0xb4
 8017c14:	0059      	lsls	r1, r3, #1
 8017c16:	0013      	movs	r3, r2
 8017c18:	009b      	lsls	r3, r3, #2
 8017c1a:	189b      	adds	r3, r3, r2
 8017c1c:	00db      	lsls	r3, r3, #3
 8017c1e:	18c3      	adds	r3, r0, r3
 8017c20:	185b      	adds	r3, r3, r1
 8017c22:	193a      	adds	r2, r7, r4
 8017c24:	7812      	ldrb	r2, [r2, #0]
 8017c26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8017c28:	193b      	adds	r3, r7, r4
 8017c2a:	781a      	ldrb	r2, [r3, #0]
 8017c2c:	6878      	ldr	r0, [r7, #4]
 8017c2e:	236c      	movs	r3, #108	@ 0x6c
 8017c30:	33ff      	adds	r3, #255	@ 0xff
 8017c32:	0019      	movs	r1, r3
 8017c34:	0013      	movs	r3, r2
 8017c36:	009b      	lsls	r3, r3, #2
 8017c38:	189b      	adds	r3, r3, r2
 8017c3a:	00db      	lsls	r3, r3, #3
 8017c3c:	18c3      	adds	r3, r0, r3
 8017c3e:	185b      	adds	r3, r3, r1
 8017c40:	2200      	movs	r2, #0
 8017c42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8017c44:	193b      	adds	r3, r7, r4
 8017c46:	781a      	ldrb	r2, [r3, #0]
 8017c48:	6878      	ldr	r0, [r7, #4]
 8017c4a:	23bc      	movs	r3, #188	@ 0xbc
 8017c4c:	0059      	lsls	r1, r3, #1
 8017c4e:	0013      	movs	r3, r2
 8017c50:	009b      	lsls	r3, r3, #2
 8017c52:	189b      	adds	r3, r3, r2
 8017c54:	00db      	lsls	r3, r3, #3
 8017c56:	18c3      	adds	r3, r0, r3
 8017c58:	185b      	adds	r3, r3, r1
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8017c5e:	193b      	adds	r3, r7, r4
 8017c60:	781a      	ldrb	r2, [r3, #0]
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	23be      	movs	r3, #190	@ 0xbe
 8017c66:	0059      	lsls	r1, r3, #1
 8017c68:	0013      	movs	r3, r2
 8017c6a:	009b      	lsls	r3, r3, #2
 8017c6c:	189b      	adds	r3, r3, r2
 8017c6e:	00db      	lsls	r3, r3, #3
 8017c70:	18c3      	adds	r3, r0, r3
 8017c72:	185b      	adds	r3, r3, r1
 8017c74:	2200      	movs	r2, #0
 8017c76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8017c78:	193b      	adds	r3, r7, r4
 8017c7a:	781a      	ldrb	r2, [r3, #0]
 8017c7c:	6878      	ldr	r0, [r7, #4]
 8017c7e:	23c0      	movs	r3, #192	@ 0xc0
 8017c80:	0059      	lsls	r1, r3, #1
 8017c82:	0013      	movs	r3, r2
 8017c84:	009b      	lsls	r3, r3, #2
 8017c86:	189b      	adds	r3, r3, r2
 8017c88:	00db      	lsls	r3, r3, #3
 8017c8a:	18c3      	adds	r3, r0, r3
 8017c8c:	185b      	adds	r3, r3, r1
 8017c8e:	2200      	movs	r2, #0
 8017c90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017c92:	193b      	adds	r3, r7, r4
 8017c94:	781a      	ldrb	r2, [r3, #0]
 8017c96:	193b      	adds	r3, r7, r4
 8017c98:	3201      	adds	r2, #1
 8017c9a:	701a      	strb	r2, [r3, #0]
 8017c9c:	230f      	movs	r3, #15
 8017c9e:	18fb      	adds	r3, r7, r3
 8017ca0:	781a      	ldrb	r2, [r3, #0]
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	685b      	ldr	r3, [r3, #4]
 8017ca6:	429a      	cmp	r2, r3
 8017ca8:	d3a1      	bcc.n	8017bee <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	6818      	ldr	r0, [r3, #0]
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	466a      	mov	r2, sp
 8017cb2:	0011      	movs	r1, r2
 8017cb4:	001a      	movs	r2, r3
 8017cb6:	3210      	adds	r2, #16
 8017cb8:	ca70      	ldmia	r2!, {r4, r5, r6}
 8017cba:	c170      	stmia	r1!, {r4, r5, r6}
 8017cbc:	ca30      	ldmia	r2!, {r4, r5}
 8017cbe:	c130      	stmia	r1!, {r4, r5}
 8017cc0:	6859      	ldr	r1, [r3, #4]
 8017cc2:	689a      	ldr	r2, [r3, #8]
 8017cc4:	68db      	ldr	r3, [r3, #12]
 8017cc6:	f005 fe4f 	bl	801d968 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	2224      	movs	r2, #36	@ 0x24
 8017cce:	2100      	movs	r1, #0
 8017cd0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	4a07      	ldr	r2, [pc, #28]	@ (8017cf4 <HAL_PCD_Init+0x1fc>)
 8017cd6:	2101      	movs	r1, #1
 8017cd8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	69db      	ldr	r3, [r3, #28]
 8017cde:	2b01      	cmp	r3, #1
 8017ce0:	d103      	bne.n	8017cea <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	0018      	movs	r0, r3
 8017ce6:	f001 fd23 	bl	8019730 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8017cea:	2300      	movs	r3, #0
}
 8017cec:	0018      	movs	r0, r3
 8017cee:	46bd      	mov	sp, r7
 8017cf0:	b005      	add	sp, #20
 8017cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cf4:	000002a9 	.word	0x000002a9

08017cf8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b082      	sub	sp, #8
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8017d00:	687a      	ldr	r2, [r7, #4]
 8017d02:	23aa      	movs	r3, #170	@ 0xaa
 8017d04:	009b      	lsls	r3, r3, #2
 8017d06:	5cd3      	ldrb	r3, [r2, r3]
 8017d08:	2b01      	cmp	r3, #1
 8017d0a:	d101      	bne.n	8017d10 <HAL_PCD_Start+0x18>
 8017d0c:	2302      	movs	r3, #2
 8017d0e:	e014      	b.n	8017d3a <HAL_PCD_Start+0x42>
 8017d10:	687a      	ldr	r2, [r7, #4]
 8017d12:	23aa      	movs	r3, #170	@ 0xaa
 8017d14:	009b      	lsls	r3, r3, #2
 8017d16:	2101      	movs	r1, #1
 8017d18:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	0018      	movs	r0, r3
 8017d20:	f005 fdf2 	bl	801d908 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	0018      	movs	r0, r3
 8017d2a:	f007 fdf5 	bl	801f918 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8017d2e:	687a      	ldr	r2, [r7, #4]
 8017d30:	23aa      	movs	r3, #170	@ 0xaa
 8017d32:	009b      	lsls	r3, r3, #2
 8017d34:	2100      	movs	r1, #0
 8017d36:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8017d38:	2300      	movs	r3, #0
}
 8017d3a:	0018      	movs	r0, r3
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	b002      	add	sp, #8
 8017d40:	bd80      	pop	{r7, pc}
	...

08017d44 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b084      	sub	sp, #16
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	0018      	movs	r0, r3
 8017d52:	f007 fdf7 	bl	801f944 <USB_ReadInterrupts>
 8017d56:	0003      	movs	r3, r0
 8017d58:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8017d5a:	68fa      	ldr	r2, [r7, #12]
 8017d5c:	2380      	movs	r3, #128	@ 0x80
 8017d5e:	021b      	lsls	r3, r3, #8
 8017d60:	4013      	ands	r3, r2
 8017d62:	d004      	beq.n	8017d6e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	0018      	movs	r0, r3
 8017d68:	f000 fb62 	bl	8018430 <PCD_EP_ISR_Handler>

    return;
 8017d6c:	e11d      	b.n	8017faa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8017d6e:	68fa      	ldr	r2, [r7, #12]
 8017d70:	2380      	movs	r3, #128	@ 0x80
 8017d72:	00db      	lsls	r3, r3, #3
 8017d74:	4013      	ands	r3, r2
 8017d76:	d015      	beq.n	8017da4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	2244      	movs	r2, #68	@ 0x44
 8017d7e:	5a9b      	ldrh	r3, [r3, r2]
 8017d80:	b29a      	uxth	r2, r3
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	498a      	ldr	r1, [pc, #552]	@ (8017fb0 <HAL_PCD_IRQHandler+0x26c>)
 8017d88:	400a      	ands	r2, r1
 8017d8a:	b291      	uxth	r1, r2
 8017d8c:	2244      	movs	r2, #68	@ 0x44
 8017d8e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	0018      	movs	r0, r3
 8017d94:	f009 fe95 	bl	8021ac2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	2100      	movs	r1, #0
 8017d9c:	0018      	movs	r0, r3
 8017d9e:	f000 f915 	bl	8017fcc <HAL_PCD_SetAddress>

    return;
 8017da2:	e102      	b.n	8017faa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8017da4:	68fa      	ldr	r2, [r7, #12]
 8017da6:	2380      	movs	r3, #128	@ 0x80
 8017da8:	01db      	lsls	r3, r3, #7
 8017daa:	4013      	ands	r3, r2
 8017dac:	d00c      	beq.n	8017dc8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	2244      	movs	r2, #68	@ 0x44
 8017db4:	5a9b      	ldrh	r3, [r3, r2]
 8017db6:	b29a      	uxth	r2, r3
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	497d      	ldr	r1, [pc, #500]	@ (8017fb4 <HAL_PCD_IRQHandler+0x270>)
 8017dbe:	400a      	ands	r2, r1
 8017dc0:	b291      	uxth	r1, r2
 8017dc2:	2244      	movs	r2, #68	@ 0x44
 8017dc4:	5299      	strh	r1, [r3, r2]

    return;
 8017dc6:	e0f0      	b.n	8017faa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8017dc8:	68fa      	ldr	r2, [r7, #12]
 8017dca:	2380      	movs	r3, #128	@ 0x80
 8017dcc:	019b      	lsls	r3, r3, #6
 8017dce:	4013      	ands	r3, r2
 8017dd0:	d00c      	beq.n	8017dec <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	2244      	movs	r2, #68	@ 0x44
 8017dd8:	5a9b      	ldrh	r3, [r3, r2]
 8017dda:	b29a      	uxth	r2, r3
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	4975      	ldr	r1, [pc, #468]	@ (8017fb8 <HAL_PCD_IRQHandler+0x274>)
 8017de2:	400a      	ands	r2, r1
 8017de4:	b291      	uxth	r1, r2
 8017de6:	2244      	movs	r2, #68	@ 0x44
 8017de8:	5299      	strh	r1, [r3, r2]

    return;
 8017dea:	e0de      	b.n	8017faa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8017dec:	68fa      	ldr	r2, [r7, #12]
 8017dee:	2380      	movs	r3, #128	@ 0x80
 8017df0:	015b      	lsls	r3, r3, #5
 8017df2:	4013      	ands	r3, r2
 8017df4:	d038      	beq.n	8017e68 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	2240      	movs	r2, #64	@ 0x40
 8017dfc:	5a9b      	ldrh	r3, [r3, r2]
 8017dfe:	b29a      	uxth	r2, r3
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	2104      	movs	r1, #4
 8017e06:	438a      	bics	r2, r1
 8017e08:	b291      	uxth	r1, r2
 8017e0a:	2240      	movs	r2, #64	@ 0x40
 8017e0c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	2240      	movs	r2, #64	@ 0x40
 8017e14:	5a9b      	ldrh	r3, [r3, r2]
 8017e16:	b29a      	uxth	r2, r3
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	2108      	movs	r1, #8
 8017e1e:	438a      	bics	r2, r1
 8017e20:	b291      	uxth	r1, r2
 8017e22:	2240      	movs	r2, #64	@ 0x40
 8017e24:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8017e26:	687a      	ldr	r2, [r7, #4]
 8017e28:	23b8      	movs	r3, #184	@ 0xb8
 8017e2a:	009b      	lsls	r3, r3, #2
 8017e2c:	5cd3      	ldrb	r3, [r2, r3]
 8017e2e:	2b01      	cmp	r3, #1
 8017e30:	d109      	bne.n	8017e46 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8017e32:	687a      	ldr	r2, [r7, #4]
 8017e34:	23b8      	movs	r3, #184	@ 0xb8
 8017e36:	009b      	lsls	r3, r3, #2
 8017e38:	2100      	movs	r1, #0
 8017e3a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	2100      	movs	r1, #0
 8017e40:	0018      	movs	r0, r3
 8017e42:	f001 fc9f 	bl	8019784 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	0018      	movs	r0, r3
 8017e4a:	f009 fe7b 	bl	8021b44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	2244      	movs	r2, #68	@ 0x44
 8017e54:	5a9b      	ldrh	r3, [r3, r2]
 8017e56:	b29a      	uxth	r2, r3
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	4957      	ldr	r1, [pc, #348]	@ (8017fbc <HAL_PCD_IRQHandler+0x278>)
 8017e5e:	400a      	ands	r2, r1
 8017e60:	b291      	uxth	r1, r2
 8017e62:	2244      	movs	r2, #68	@ 0x44
 8017e64:	5299      	strh	r1, [r3, r2]

    return;
 8017e66:	e0a0      	b.n	8017faa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8017e68:	68fa      	ldr	r2, [r7, #12]
 8017e6a:	2380      	movs	r3, #128	@ 0x80
 8017e6c:	011b      	lsls	r3, r3, #4
 8017e6e:	4013      	ands	r3, r2
 8017e70:	d028      	beq.n	8017ec4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	2240      	movs	r2, #64	@ 0x40
 8017e78:	5a9b      	ldrh	r3, [r3, r2]
 8017e7a:	b29a      	uxth	r2, r3
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	2108      	movs	r1, #8
 8017e82:	430a      	orrs	r2, r1
 8017e84:	b291      	uxth	r1, r2
 8017e86:	2240      	movs	r2, #64	@ 0x40
 8017e88:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	2244      	movs	r2, #68	@ 0x44
 8017e90:	5a9b      	ldrh	r3, [r3, r2]
 8017e92:	b29a      	uxth	r2, r3
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	4949      	ldr	r1, [pc, #292]	@ (8017fc0 <HAL_PCD_IRQHandler+0x27c>)
 8017e9a:	400a      	ands	r2, r1
 8017e9c:	b291      	uxth	r1, r2
 8017e9e:	2244      	movs	r2, #68	@ 0x44
 8017ea0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	2240      	movs	r2, #64	@ 0x40
 8017ea8:	5a9b      	ldrh	r3, [r3, r2]
 8017eaa:	b29a      	uxth	r2, r3
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	2104      	movs	r1, #4
 8017eb2:	430a      	orrs	r2, r1
 8017eb4:	b291      	uxth	r1, r2
 8017eb6:	2240      	movs	r2, #64	@ 0x40
 8017eb8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	0018      	movs	r0, r3
 8017ebe:	f009 fe25 	bl	8021b0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8017ec2:	e072      	b.n	8017faa <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	2280      	movs	r2, #128	@ 0x80
 8017ec8:	4013      	ands	r3, r2
 8017eca:	d046      	beq.n	8017f5a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	2244      	movs	r2, #68	@ 0x44
 8017ed2:	5a9b      	ldrh	r3, [r3, r2]
 8017ed4:	b29a      	uxth	r2, r3
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	2180      	movs	r1, #128	@ 0x80
 8017edc:	438a      	bics	r2, r1
 8017ede:	b291      	uxth	r1, r2
 8017ee0:	2244      	movs	r2, #68	@ 0x44
 8017ee2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8017ee4:	687a      	ldr	r2, [r7, #4]
 8017ee6:	23b8      	movs	r3, #184	@ 0xb8
 8017ee8:	009b      	lsls	r3, r3, #2
 8017eea:	5cd3      	ldrb	r3, [r2, r3]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d12f      	bne.n	8017f50 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	2240      	movs	r2, #64	@ 0x40
 8017ef6:	5a9b      	ldrh	r3, [r3, r2]
 8017ef8:	b29a      	uxth	r2, r3
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	2104      	movs	r1, #4
 8017f00:	430a      	orrs	r2, r1
 8017f02:	b291      	uxth	r1, r2
 8017f04:	2240      	movs	r2, #64	@ 0x40
 8017f06:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	2240      	movs	r2, #64	@ 0x40
 8017f0e:	5a9b      	ldrh	r3, [r3, r2]
 8017f10:	b29a      	uxth	r2, r3
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	2108      	movs	r1, #8
 8017f18:	430a      	orrs	r2, r1
 8017f1a:	b291      	uxth	r1, r2
 8017f1c:	2240      	movs	r2, #64	@ 0x40
 8017f1e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8017f20:	687a      	ldr	r2, [r7, #4]
 8017f22:	23b8      	movs	r3, #184	@ 0xb8
 8017f24:	009b      	lsls	r3, r3, #2
 8017f26:	2101      	movs	r1, #1
 8017f28:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	2254      	movs	r2, #84	@ 0x54
 8017f30:	5a9b      	ldrh	r3, [r3, r2]
 8017f32:	b29b      	uxth	r3, r3
 8017f34:	089b      	lsrs	r3, r3, #2
 8017f36:	223c      	movs	r2, #60	@ 0x3c
 8017f38:	4013      	ands	r3, r2
 8017f3a:	0019      	movs	r1, r3
 8017f3c:	687a      	ldr	r2, [r7, #4]
 8017f3e:	23b9      	movs	r3, #185	@ 0xb9
 8017f40:	009b      	lsls	r3, r3, #2
 8017f42:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	2101      	movs	r1, #1
 8017f48:	0018      	movs	r0, r3
 8017f4a:	f001 fc1b 	bl	8019784 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8017f4e:	e02c      	b.n	8017faa <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	0018      	movs	r0, r3
 8017f54:	f009 fdda 	bl	8021b0c <HAL_PCD_SuspendCallback>
    return;
 8017f58:	e027      	b.n	8017faa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8017f5a:	68fa      	ldr	r2, [r7, #12]
 8017f5c:	2380      	movs	r3, #128	@ 0x80
 8017f5e:	009b      	lsls	r3, r3, #2
 8017f60:	4013      	ands	r3, r2
 8017f62:	d010      	beq.n	8017f86 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	2244      	movs	r2, #68	@ 0x44
 8017f6a:	5a9b      	ldrh	r3, [r3, r2]
 8017f6c:	b29a      	uxth	r2, r3
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	4914      	ldr	r1, [pc, #80]	@ (8017fc4 <HAL_PCD_IRQHandler+0x280>)
 8017f74:	400a      	ands	r2, r1
 8017f76:	b291      	uxth	r1, r2
 8017f78:	2244      	movs	r2, #68	@ 0x44
 8017f7a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	0018      	movs	r0, r3
 8017f80:	f009 fd90 	bl	8021aa4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8017f84:	e011      	b.n	8017faa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8017f86:	68fa      	ldr	r2, [r7, #12]
 8017f88:	2380      	movs	r3, #128	@ 0x80
 8017f8a:	005b      	lsls	r3, r3, #1
 8017f8c:	4013      	ands	r3, r2
 8017f8e:	d00c      	beq.n	8017faa <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	2244      	movs	r2, #68	@ 0x44
 8017f96:	5a9b      	ldrh	r3, [r3, r2]
 8017f98:	b29a      	uxth	r2, r3
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	490a      	ldr	r1, [pc, #40]	@ (8017fc8 <HAL_PCD_IRQHandler+0x284>)
 8017fa0:	400a      	ands	r2, r1
 8017fa2:	b291      	uxth	r1, r2
 8017fa4:	2244      	movs	r2, #68	@ 0x44
 8017fa6:	5299      	strh	r1, [r3, r2]

    return;
 8017fa8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8017faa:	46bd      	mov	sp, r7
 8017fac:	b004      	add	sp, #16
 8017fae:	bd80      	pop	{r7, pc}
 8017fb0:	fffffbff 	.word	0xfffffbff
 8017fb4:	ffffbfff 	.word	0xffffbfff
 8017fb8:	ffffdfff 	.word	0xffffdfff
 8017fbc:	ffffefff 	.word	0xffffefff
 8017fc0:	fffff7ff 	.word	0xfffff7ff
 8017fc4:	fffffdff 	.word	0xfffffdff
 8017fc8:	fffffeff 	.word	0xfffffeff

08017fcc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	b082      	sub	sp, #8
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	6078      	str	r0, [r7, #4]
 8017fd4:	000a      	movs	r2, r1
 8017fd6:	1cfb      	adds	r3, r7, #3
 8017fd8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8017fda:	687a      	ldr	r2, [r7, #4]
 8017fdc:	23aa      	movs	r3, #170	@ 0xaa
 8017fde:	009b      	lsls	r3, r3, #2
 8017fe0:	5cd3      	ldrb	r3, [r2, r3]
 8017fe2:	2b01      	cmp	r3, #1
 8017fe4:	d101      	bne.n	8017fea <HAL_PCD_SetAddress+0x1e>
 8017fe6:	2302      	movs	r3, #2
 8017fe8:	e017      	b.n	801801a <HAL_PCD_SetAddress+0x4e>
 8017fea:	687a      	ldr	r2, [r7, #4]
 8017fec:	23aa      	movs	r3, #170	@ 0xaa
 8017fee:	009b      	lsls	r3, r3, #2
 8017ff0:	2101      	movs	r1, #1
 8017ff2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	1cfa      	adds	r2, r7, #3
 8017ff8:	2124      	movs	r1, #36	@ 0x24
 8017ffa:	7812      	ldrb	r2, [r2, #0]
 8017ffc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	681a      	ldr	r2, [r3, #0]
 8018002:	1cfb      	adds	r3, r7, #3
 8018004:	781b      	ldrb	r3, [r3, #0]
 8018006:	0019      	movs	r1, r3
 8018008:	0010      	movs	r0, r2
 801800a:	f007 fc71 	bl	801f8f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801800e:	687a      	ldr	r2, [r7, #4]
 8018010:	23aa      	movs	r3, #170	@ 0xaa
 8018012:	009b      	lsls	r3, r3, #2
 8018014:	2100      	movs	r1, #0
 8018016:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018018:	2300      	movs	r3, #0
}
 801801a:	0018      	movs	r0, r3
 801801c:	46bd      	mov	sp, r7
 801801e:	b002      	add	sp, #8
 8018020:	bd80      	pop	{r7, pc}

08018022 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8018022:	b590      	push	{r4, r7, lr}
 8018024:	b085      	sub	sp, #20
 8018026:	af00      	add	r7, sp, #0
 8018028:	6078      	str	r0, [r7, #4]
 801802a:	000c      	movs	r4, r1
 801802c:	0010      	movs	r0, r2
 801802e:	0019      	movs	r1, r3
 8018030:	1cfb      	adds	r3, r7, #3
 8018032:	1c22      	adds	r2, r4, #0
 8018034:	701a      	strb	r2, [r3, #0]
 8018036:	003b      	movs	r3, r7
 8018038:	1c02      	adds	r2, r0, #0
 801803a:	801a      	strh	r2, [r3, #0]
 801803c:	1cbb      	adds	r3, r7, #2
 801803e:	1c0a      	adds	r2, r1, #0
 8018040:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8018042:	230b      	movs	r3, #11
 8018044:	18fb      	adds	r3, r7, r3
 8018046:	2200      	movs	r2, #0
 8018048:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801804a:	1cfb      	adds	r3, r7, #3
 801804c:	781b      	ldrb	r3, [r3, #0]
 801804e:	b25b      	sxtb	r3, r3
 8018050:	2b00      	cmp	r3, #0
 8018052:	da0f      	bge.n	8018074 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018054:	1cfb      	adds	r3, r7, #3
 8018056:	781b      	ldrb	r3, [r3, #0]
 8018058:	2207      	movs	r2, #7
 801805a:	4013      	ands	r3, r2
 801805c:	1c5a      	adds	r2, r3, #1
 801805e:	0013      	movs	r3, r2
 8018060:	009b      	lsls	r3, r3, #2
 8018062:	189b      	adds	r3, r3, r2
 8018064:	00db      	lsls	r3, r3, #3
 8018066:	687a      	ldr	r2, [r7, #4]
 8018068:	18d3      	adds	r3, r2, r3
 801806a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	2201      	movs	r2, #1
 8018070:	705a      	strb	r2, [r3, #1]
 8018072:	e00f      	b.n	8018094 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018074:	1cfb      	adds	r3, r7, #3
 8018076:	781b      	ldrb	r3, [r3, #0]
 8018078:	2207      	movs	r2, #7
 801807a:	401a      	ands	r2, r3
 801807c:	0013      	movs	r3, r2
 801807e:	009b      	lsls	r3, r3, #2
 8018080:	189b      	adds	r3, r3, r2
 8018082:	00db      	lsls	r3, r3, #3
 8018084:	3369      	adds	r3, #105	@ 0x69
 8018086:	33ff      	adds	r3, #255	@ 0xff
 8018088:	687a      	ldr	r2, [r7, #4]
 801808a:	18d3      	adds	r3, r2, r3
 801808c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	2200      	movs	r2, #0
 8018092:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8018094:	1cfb      	adds	r3, r7, #3
 8018096:	781b      	ldrb	r3, [r3, #0]
 8018098:	2207      	movs	r2, #7
 801809a:	4013      	ands	r3, r2
 801809c:	b2da      	uxtb	r2, r3
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80180a2:	003b      	movs	r3, r7
 80180a4:	881a      	ldrh	r2, [r3, #0]
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	1cba      	adds	r2, r7, #2
 80180ae:	7812      	ldrb	r2, [r2, #0]
 80180b0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80180b2:	1cbb      	adds	r3, r7, #2
 80180b4:	781b      	ldrb	r3, [r3, #0]
 80180b6:	2b02      	cmp	r3, #2
 80180b8:	d102      	bne.n	80180c0 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	2200      	movs	r2, #0
 80180be:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80180c0:	687a      	ldr	r2, [r7, #4]
 80180c2:	23aa      	movs	r3, #170	@ 0xaa
 80180c4:	009b      	lsls	r3, r3, #2
 80180c6:	5cd3      	ldrb	r3, [r2, r3]
 80180c8:	2b01      	cmp	r3, #1
 80180ca:	d101      	bne.n	80180d0 <HAL_PCD_EP_Open+0xae>
 80180cc:	2302      	movs	r3, #2
 80180ce:	e013      	b.n	80180f8 <HAL_PCD_EP_Open+0xd6>
 80180d0:	687a      	ldr	r2, [r7, #4]
 80180d2:	23aa      	movs	r3, #170	@ 0xaa
 80180d4:	009b      	lsls	r3, r3, #2
 80180d6:	2101      	movs	r1, #1
 80180d8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	68fa      	ldr	r2, [r7, #12]
 80180e0:	0011      	movs	r1, r2
 80180e2:	0018      	movs	r0, r3
 80180e4:	f005 fc68 	bl	801d9b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80180e8:	687a      	ldr	r2, [r7, #4]
 80180ea:	23aa      	movs	r3, #170	@ 0xaa
 80180ec:	009b      	lsls	r3, r3, #2
 80180ee:	2100      	movs	r1, #0
 80180f0:	54d1      	strb	r1, [r2, r3]

  return ret;
 80180f2:	230b      	movs	r3, #11
 80180f4:	18fb      	adds	r3, r7, r3
 80180f6:	781b      	ldrb	r3, [r3, #0]
}
 80180f8:	0018      	movs	r0, r3
 80180fa:	46bd      	mov	sp, r7
 80180fc:	b005      	add	sp, #20
 80180fe:	bd90      	pop	{r4, r7, pc}

08018100 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018100:	b580      	push	{r7, lr}
 8018102:	b084      	sub	sp, #16
 8018104:	af00      	add	r7, sp, #0
 8018106:	6078      	str	r0, [r7, #4]
 8018108:	000a      	movs	r2, r1
 801810a:	1cfb      	adds	r3, r7, #3
 801810c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801810e:	1cfb      	adds	r3, r7, #3
 8018110:	781b      	ldrb	r3, [r3, #0]
 8018112:	b25b      	sxtb	r3, r3
 8018114:	2b00      	cmp	r3, #0
 8018116:	da0f      	bge.n	8018138 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018118:	1cfb      	adds	r3, r7, #3
 801811a:	781b      	ldrb	r3, [r3, #0]
 801811c:	2207      	movs	r2, #7
 801811e:	4013      	ands	r3, r2
 8018120:	1c5a      	adds	r2, r3, #1
 8018122:	0013      	movs	r3, r2
 8018124:	009b      	lsls	r3, r3, #2
 8018126:	189b      	adds	r3, r3, r2
 8018128:	00db      	lsls	r3, r3, #3
 801812a:	687a      	ldr	r2, [r7, #4]
 801812c:	18d3      	adds	r3, r2, r3
 801812e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	2201      	movs	r2, #1
 8018134:	705a      	strb	r2, [r3, #1]
 8018136:	e00f      	b.n	8018158 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018138:	1cfb      	adds	r3, r7, #3
 801813a:	781b      	ldrb	r3, [r3, #0]
 801813c:	2207      	movs	r2, #7
 801813e:	401a      	ands	r2, r3
 8018140:	0013      	movs	r3, r2
 8018142:	009b      	lsls	r3, r3, #2
 8018144:	189b      	adds	r3, r3, r2
 8018146:	00db      	lsls	r3, r3, #3
 8018148:	3369      	adds	r3, #105	@ 0x69
 801814a:	33ff      	adds	r3, #255	@ 0xff
 801814c:	687a      	ldr	r2, [r7, #4]
 801814e:	18d3      	adds	r3, r2, r3
 8018150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	2200      	movs	r2, #0
 8018156:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8018158:	1cfb      	adds	r3, r7, #3
 801815a:	781b      	ldrb	r3, [r3, #0]
 801815c:	2207      	movs	r2, #7
 801815e:	4013      	ands	r3, r2
 8018160:	b2da      	uxtb	r2, r3
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018166:	687a      	ldr	r2, [r7, #4]
 8018168:	23aa      	movs	r3, #170	@ 0xaa
 801816a:	009b      	lsls	r3, r3, #2
 801816c:	5cd3      	ldrb	r3, [r2, r3]
 801816e:	2b01      	cmp	r3, #1
 8018170:	d101      	bne.n	8018176 <HAL_PCD_EP_Close+0x76>
 8018172:	2302      	movs	r3, #2
 8018174:	e011      	b.n	801819a <HAL_PCD_EP_Close+0x9a>
 8018176:	687a      	ldr	r2, [r7, #4]
 8018178:	23aa      	movs	r3, #170	@ 0xaa
 801817a:	009b      	lsls	r3, r3, #2
 801817c:	2101      	movs	r1, #1
 801817e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	68fa      	ldr	r2, [r7, #12]
 8018186:	0011      	movs	r1, r2
 8018188:	0018      	movs	r0, r3
 801818a:	f005 ffb7 	bl	801e0fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801818e:	687a      	ldr	r2, [r7, #4]
 8018190:	23aa      	movs	r3, #170	@ 0xaa
 8018192:	009b      	lsls	r3, r3, #2
 8018194:	2100      	movs	r1, #0
 8018196:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8018198:	2300      	movs	r3, #0
}
 801819a:	0018      	movs	r0, r3
 801819c:	46bd      	mov	sp, r7
 801819e:	b004      	add	sp, #16
 80181a0:	bd80      	pop	{r7, pc}

080181a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80181a2:	b580      	push	{r7, lr}
 80181a4:	b086      	sub	sp, #24
 80181a6:	af00      	add	r7, sp, #0
 80181a8:	60f8      	str	r0, [r7, #12]
 80181aa:	607a      	str	r2, [r7, #4]
 80181ac:	603b      	str	r3, [r7, #0]
 80181ae:	200b      	movs	r0, #11
 80181b0:	183b      	adds	r3, r7, r0
 80181b2:	1c0a      	adds	r2, r1, #0
 80181b4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80181b6:	0001      	movs	r1, r0
 80181b8:	187b      	adds	r3, r7, r1
 80181ba:	781b      	ldrb	r3, [r3, #0]
 80181bc:	2207      	movs	r2, #7
 80181be:	401a      	ands	r2, r3
 80181c0:	0013      	movs	r3, r2
 80181c2:	009b      	lsls	r3, r3, #2
 80181c4:	189b      	adds	r3, r3, r2
 80181c6:	00db      	lsls	r3, r3, #3
 80181c8:	3369      	adds	r3, #105	@ 0x69
 80181ca:	33ff      	adds	r3, #255	@ 0xff
 80181cc:	68fa      	ldr	r2, [r7, #12]
 80181ce:	18d3      	adds	r3, r2, r3
 80181d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80181d2:	697b      	ldr	r3, [r7, #20]
 80181d4:	687a      	ldr	r2, [r7, #4]
 80181d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80181d8:	697b      	ldr	r3, [r7, #20]
 80181da:	683a      	ldr	r2, [r7, #0]
 80181dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80181de:	697b      	ldr	r3, [r7, #20]
 80181e0:	2200      	movs	r2, #0
 80181e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80181e4:	697b      	ldr	r3, [r7, #20]
 80181e6:	2200      	movs	r2, #0
 80181e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80181ea:	187b      	adds	r3, r7, r1
 80181ec:	781b      	ldrb	r3, [r3, #0]
 80181ee:	2207      	movs	r2, #7
 80181f0:	4013      	ands	r3, r2
 80181f2:	b2da      	uxtb	r2, r3
 80181f4:	697b      	ldr	r3, [r7, #20]
 80181f6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	697a      	ldr	r2, [r7, #20]
 80181fe:	0011      	movs	r1, r2
 8018200:	0018      	movs	r0, r3
 8018202:	f006 f93b 	bl	801e47c <USB_EPStartXfer>

  return HAL_OK;
 8018206:	2300      	movs	r3, #0
}
 8018208:	0018      	movs	r0, r3
 801820a:	46bd      	mov	sp, r7
 801820c:	b006      	add	sp, #24
 801820e:	bd80      	pop	{r7, pc}

08018210 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018210:	b580      	push	{r7, lr}
 8018212:	b082      	sub	sp, #8
 8018214:	af00      	add	r7, sp, #0
 8018216:	6078      	str	r0, [r7, #4]
 8018218:	000a      	movs	r2, r1
 801821a:	1cfb      	adds	r3, r7, #3
 801821c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801821e:	1cfb      	adds	r3, r7, #3
 8018220:	781b      	ldrb	r3, [r3, #0]
 8018222:	2207      	movs	r2, #7
 8018224:	401a      	ands	r2, r3
 8018226:	6878      	ldr	r0, [r7, #4]
 8018228:	23c2      	movs	r3, #194	@ 0xc2
 801822a:	0059      	lsls	r1, r3, #1
 801822c:	0013      	movs	r3, r2
 801822e:	009b      	lsls	r3, r3, #2
 8018230:	189b      	adds	r3, r3, r2
 8018232:	00db      	lsls	r3, r3, #3
 8018234:	18c3      	adds	r3, r0, r3
 8018236:	185b      	adds	r3, r3, r1
 8018238:	681b      	ldr	r3, [r3, #0]
}
 801823a:	0018      	movs	r0, r3
 801823c:	46bd      	mov	sp, r7
 801823e:	b002      	add	sp, #8
 8018240:	bd80      	pop	{r7, pc}

08018242 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018242:	b580      	push	{r7, lr}
 8018244:	b086      	sub	sp, #24
 8018246:	af00      	add	r7, sp, #0
 8018248:	60f8      	str	r0, [r7, #12]
 801824a:	607a      	str	r2, [r7, #4]
 801824c:	603b      	str	r3, [r7, #0]
 801824e:	200b      	movs	r0, #11
 8018250:	183b      	adds	r3, r7, r0
 8018252:	1c0a      	adds	r2, r1, #0
 8018254:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018256:	183b      	adds	r3, r7, r0
 8018258:	781b      	ldrb	r3, [r3, #0]
 801825a:	2207      	movs	r2, #7
 801825c:	4013      	ands	r3, r2
 801825e:	1c5a      	adds	r2, r3, #1
 8018260:	0013      	movs	r3, r2
 8018262:	009b      	lsls	r3, r3, #2
 8018264:	189b      	adds	r3, r3, r2
 8018266:	00db      	lsls	r3, r3, #3
 8018268:	68fa      	ldr	r2, [r7, #12]
 801826a:	18d3      	adds	r3, r2, r3
 801826c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801826e:	697b      	ldr	r3, [r7, #20]
 8018270:	687a      	ldr	r2, [r7, #4]
 8018272:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8018274:	697b      	ldr	r3, [r7, #20]
 8018276:	683a      	ldr	r2, [r7, #0]
 8018278:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 801827a:	697b      	ldr	r3, [r7, #20]
 801827c:	2224      	movs	r2, #36	@ 0x24
 801827e:	2101      	movs	r1, #1
 8018280:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8018282:	697b      	ldr	r3, [r7, #20]
 8018284:	683a      	ldr	r2, [r7, #0]
 8018286:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8018288:	697b      	ldr	r3, [r7, #20]
 801828a:	2200      	movs	r2, #0
 801828c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 801828e:	697b      	ldr	r3, [r7, #20]
 8018290:	2201      	movs	r2, #1
 8018292:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018294:	183b      	adds	r3, r7, r0
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	2207      	movs	r2, #7
 801829a:	4013      	ands	r3, r2
 801829c:	b2da      	uxtb	r2, r3
 801829e:	697b      	ldr	r3, [r7, #20]
 80182a0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	697a      	ldr	r2, [r7, #20]
 80182a8:	0011      	movs	r1, r2
 80182aa:	0018      	movs	r0, r3
 80182ac:	f006 f8e6 	bl	801e47c <USB_EPStartXfer>

  return HAL_OK;
 80182b0:	2300      	movs	r3, #0
}
 80182b2:	0018      	movs	r0, r3
 80182b4:	46bd      	mov	sp, r7
 80182b6:	b006      	add	sp, #24
 80182b8:	bd80      	pop	{r7, pc}

080182ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80182ba:	b580      	push	{r7, lr}
 80182bc:	b084      	sub	sp, #16
 80182be:	af00      	add	r7, sp, #0
 80182c0:	6078      	str	r0, [r7, #4]
 80182c2:	000a      	movs	r2, r1
 80182c4:	1cfb      	adds	r3, r7, #3
 80182c6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80182c8:	1cfb      	adds	r3, r7, #3
 80182ca:	781b      	ldrb	r3, [r3, #0]
 80182cc:	2207      	movs	r2, #7
 80182ce:	401a      	ands	r2, r3
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	685b      	ldr	r3, [r3, #4]
 80182d4:	429a      	cmp	r2, r3
 80182d6:	d901      	bls.n	80182dc <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80182d8:	2301      	movs	r3, #1
 80182da:	e046      	b.n	801836a <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80182dc:	1cfb      	adds	r3, r7, #3
 80182de:	781b      	ldrb	r3, [r3, #0]
 80182e0:	b25b      	sxtb	r3, r3
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	da0f      	bge.n	8018306 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80182e6:	1cfb      	adds	r3, r7, #3
 80182e8:	781b      	ldrb	r3, [r3, #0]
 80182ea:	2207      	movs	r2, #7
 80182ec:	4013      	ands	r3, r2
 80182ee:	1c5a      	adds	r2, r3, #1
 80182f0:	0013      	movs	r3, r2
 80182f2:	009b      	lsls	r3, r3, #2
 80182f4:	189b      	adds	r3, r3, r2
 80182f6:	00db      	lsls	r3, r3, #3
 80182f8:	687a      	ldr	r2, [r7, #4]
 80182fa:	18d3      	adds	r3, r2, r3
 80182fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	2201      	movs	r2, #1
 8018302:	705a      	strb	r2, [r3, #1]
 8018304:	e00d      	b.n	8018322 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8018306:	1cfb      	adds	r3, r7, #3
 8018308:	781a      	ldrb	r2, [r3, #0]
 801830a:	0013      	movs	r3, r2
 801830c:	009b      	lsls	r3, r3, #2
 801830e:	189b      	adds	r3, r3, r2
 8018310:	00db      	lsls	r3, r3, #3
 8018312:	3369      	adds	r3, #105	@ 0x69
 8018314:	33ff      	adds	r3, #255	@ 0xff
 8018316:	687a      	ldr	r2, [r7, #4]
 8018318:	18d3      	adds	r3, r2, r3
 801831a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	2200      	movs	r2, #0
 8018320:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	2201      	movs	r2, #1
 8018326:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018328:	1cfb      	adds	r3, r7, #3
 801832a:	781b      	ldrb	r3, [r3, #0]
 801832c:	2207      	movs	r2, #7
 801832e:	4013      	ands	r3, r2
 8018330:	b2da      	uxtb	r2, r3
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018336:	687a      	ldr	r2, [r7, #4]
 8018338:	23aa      	movs	r3, #170	@ 0xaa
 801833a:	009b      	lsls	r3, r3, #2
 801833c:	5cd3      	ldrb	r3, [r2, r3]
 801833e:	2b01      	cmp	r3, #1
 8018340:	d101      	bne.n	8018346 <HAL_PCD_EP_SetStall+0x8c>
 8018342:	2302      	movs	r3, #2
 8018344:	e011      	b.n	801836a <HAL_PCD_EP_SetStall+0xb0>
 8018346:	687a      	ldr	r2, [r7, #4]
 8018348:	23aa      	movs	r3, #170	@ 0xaa
 801834a:	009b      	lsls	r3, r3, #2
 801834c:	2101      	movs	r1, #1
 801834e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	68fa      	ldr	r2, [r7, #12]
 8018356:	0011      	movs	r1, r2
 8018358:	0018      	movs	r0, r3
 801835a:	f007 f9c7 	bl	801f6ec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 801835e:	687a      	ldr	r2, [r7, #4]
 8018360:	23aa      	movs	r3, #170	@ 0xaa
 8018362:	009b      	lsls	r3, r3, #2
 8018364:	2100      	movs	r1, #0
 8018366:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018368:	2300      	movs	r3, #0
}
 801836a:	0018      	movs	r0, r3
 801836c:	46bd      	mov	sp, r7
 801836e:	b004      	add	sp, #16
 8018370:	bd80      	pop	{r7, pc}

08018372 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018372:	b580      	push	{r7, lr}
 8018374:	b084      	sub	sp, #16
 8018376:	af00      	add	r7, sp, #0
 8018378:	6078      	str	r0, [r7, #4]
 801837a:	000a      	movs	r2, r1
 801837c:	1cfb      	adds	r3, r7, #3
 801837e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8018380:	1cfb      	adds	r3, r7, #3
 8018382:	781b      	ldrb	r3, [r3, #0]
 8018384:	220f      	movs	r2, #15
 8018386:	401a      	ands	r2, r3
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	685b      	ldr	r3, [r3, #4]
 801838c:	429a      	cmp	r2, r3
 801838e:	d901      	bls.n	8018394 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8018390:	2301      	movs	r3, #1
 8018392:	e048      	b.n	8018426 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8018394:	1cfb      	adds	r3, r7, #3
 8018396:	781b      	ldrb	r3, [r3, #0]
 8018398:	b25b      	sxtb	r3, r3
 801839a:	2b00      	cmp	r3, #0
 801839c:	da0f      	bge.n	80183be <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801839e:	1cfb      	adds	r3, r7, #3
 80183a0:	781b      	ldrb	r3, [r3, #0]
 80183a2:	2207      	movs	r2, #7
 80183a4:	4013      	ands	r3, r2
 80183a6:	1c5a      	adds	r2, r3, #1
 80183a8:	0013      	movs	r3, r2
 80183aa:	009b      	lsls	r3, r3, #2
 80183ac:	189b      	adds	r3, r3, r2
 80183ae:	00db      	lsls	r3, r3, #3
 80183b0:	687a      	ldr	r2, [r7, #4]
 80183b2:	18d3      	adds	r3, r2, r3
 80183b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	2201      	movs	r2, #1
 80183ba:	705a      	strb	r2, [r3, #1]
 80183bc:	e00f      	b.n	80183de <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80183be:	1cfb      	adds	r3, r7, #3
 80183c0:	781b      	ldrb	r3, [r3, #0]
 80183c2:	2207      	movs	r2, #7
 80183c4:	401a      	ands	r2, r3
 80183c6:	0013      	movs	r3, r2
 80183c8:	009b      	lsls	r3, r3, #2
 80183ca:	189b      	adds	r3, r3, r2
 80183cc:	00db      	lsls	r3, r3, #3
 80183ce:	3369      	adds	r3, #105	@ 0x69
 80183d0:	33ff      	adds	r3, #255	@ 0xff
 80183d2:	687a      	ldr	r2, [r7, #4]
 80183d4:	18d3      	adds	r3, r2, r3
 80183d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	2200      	movs	r2, #0
 80183dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	2200      	movs	r2, #0
 80183e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80183e4:	1cfb      	adds	r3, r7, #3
 80183e6:	781b      	ldrb	r3, [r3, #0]
 80183e8:	2207      	movs	r2, #7
 80183ea:	4013      	ands	r3, r2
 80183ec:	b2da      	uxtb	r2, r3
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80183f2:	687a      	ldr	r2, [r7, #4]
 80183f4:	23aa      	movs	r3, #170	@ 0xaa
 80183f6:	009b      	lsls	r3, r3, #2
 80183f8:	5cd3      	ldrb	r3, [r2, r3]
 80183fa:	2b01      	cmp	r3, #1
 80183fc:	d101      	bne.n	8018402 <HAL_PCD_EP_ClrStall+0x90>
 80183fe:	2302      	movs	r3, #2
 8018400:	e011      	b.n	8018426 <HAL_PCD_EP_ClrStall+0xb4>
 8018402:	687a      	ldr	r2, [r7, #4]
 8018404:	23aa      	movs	r3, #170	@ 0xaa
 8018406:	009b      	lsls	r3, r3, #2
 8018408:	2101      	movs	r1, #1
 801840a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	68fa      	ldr	r2, [r7, #12]
 8018412:	0011      	movs	r1, r2
 8018414:	0018      	movs	r0, r3
 8018416:	f007 f9b9 	bl	801f78c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801841a:	687a      	ldr	r2, [r7, #4]
 801841c:	23aa      	movs	r3, #170	@ 0xaa
 801841e:	009b      	lsls	r3, r3, #2
 8018420:	2100      	movs	r1, #0
 8018422:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018424:	2300      	movs	r3, #0
}
 8018426:	0018      	movs	r0, r3
 8018428:	46bd      	mov	sp, r7
 801842a:	b004      	add	sp, #16
 801842c:	bd80      	pop	{r7, pc}
	...

08018430 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8018430:	b5b0      	push	{r4, r5, r7, lr}
 8018432:	b096      	sub	sp, #88	@ 0x58
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8018438:	f000 fbec 	bl	8018c14 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	681a      	ldr	r2, [r3, #0]
 8018440:	204e      	movs	r0, #78	@ 0x4e
 8018442:	183b      	adds	r3, r7, r0
 8018444:	2144      	movs	r1, #68	@ 0x44
 8018446:	5a52      	ldrh	r2, [r2, r1]
 8018448:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 801844a:	183b      	adds	r3, r7, r0
 801844c:	881b      	ldrh	r3, [r3, #0]
 801844e:	b2da      	uxtb	r2, r3
 8018450:	244d      	movs	r4, #77	@ 0x4d
 8018452:	193b      	adds	r3, r7, r4
 8018454:	210f      	movs	r1, #15
 8018456:	400a      	ands	r2, r1
 8018458:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 801845a:	193b      	adds	r3, r7, r4
 801845c:	781b      	ldrb	r3, [r3, #0]
 801845e:	2b00      	cmp	r3, #0
 8018460:	d000      	beq.n	8018464 <PCD_EP_ISR_Handler+0x34>
 8018462:	e18f      	b.n	8018784 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8018464:	183b      	adds	r3, r7, r0
 8018466:	881b      	ldrh	r3, [r3, #0]
 8018468:	2210      	movs	r2, #16
 801846a:	4013      	ands	r3, r2
 801846c:	d155      	bne.n	801851a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	881b      	ldrh	r3, [r3, #0]
 8018474:	b29a      	uxth	r2, r3
 8018476:	200e      	movs	r0, #14
 8018478:	183b      	adds	r3, r7, r0
 801847a:	49bb      	ldr	r1, [pc, #748]	@ (8018768 <PCD_EP_ISR_Handler+0x338>)
 801847c:	400a      	ands	r2, r1
 801847e:	801a      	strh	r2, [r3, #0]
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	183a      	adds	r2, r7, r0
 8018486:	8812      	ldrh	r2, [r2, #0]
 8018488:	49b8      	ldr	r1, [pc, #736]	@ (801876c <PCD_EP_ISR_Handler+0x33c>)
 801848a:	430a      	orrs	r2, r1
 801848c:	b292      	uxth	r2, r2
 801848e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	3328      	adds	r3, #40	@ 0x28
 8018494:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	2250      	movs	r2, #80	@ 0x50
 801849c:	5a9b      	ldrh	r3, [r3, r2]
 801849e:	b29b      	uxth	r3, r3
 80184a0:	001a      	movs	r2, r3
 80184a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80184a4:	781b      	ldrb	r3, [r3, #0]
 80184a6:	00db      	lsls	r3, r3, #3
 80184a8:	18d2      	adds	r2, r2, r3
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	18d3      	adds	r3, r2, r3
 80184b0:	4aaf      	ldr	r2, [pc, #700]	@ (8018770 <PCD_EP_ISR_Handler+0x340>)
 80184b2:	4694      	mov	ip, r2
 80184b4:	4463      	add	r3, ip
 80184b6:	881b      	ldrh	r3, [r3, #0]
 80184b8:	059b      	lsls	r3, r3, #22
 80184ba:	0d9a      	lsrs	r2, r3, #22
 80184bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80184be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80184c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80184c2:	695a      	ldr	r2, [r3, #20]
 80184c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80184c6:	69db      	ldr	r3, [r3, #28]
 80184c8:	18d2      	adds	r2, r2, r3
 80184ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80184cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	2100      	movs	r1, #0
 80184d2:	0018      	movs	r0, r3
 80184d4:	f009 fac8 	bl	8021a68 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	2224      	movs	r2, #36	@ 0x24
 80184dc:	5c9b      	ldrb	r3, [r3, r2]
 80184de:	b2db      	uxtb	r3, r3
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d101      	bne.n	80184e8 <PCD_EP_ISR_Handler+0xb8>
 80184e4:	f000 fb96 	bl	8018c14 <PCD_EP_ISR_Handler+0x7e4>
 80184e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80184ea:	699b      	ldr	r3, [r3, #24]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d001      	beq.n	80184f4 <PCD_EP_ISR_Handler+0xc4>
 80184f0:	f000 fb90 	bl	8018c14 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	2224      	movs	r2, #36	@ 0x24
 80184f8:	5c9b      	ldrb	r3, [r3, r2]
 80184fa:	b2db      	uxtb	r3, r3
 80184fc:	2280      	movs	r2, #128	@ 0x80
 80184fe:	4252      	negs	r2, r2
 8018500:	4313      	orrs	r3, r2
 8018502:	b2da      	uxtb	r2, r3
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	0011      	movs	r1, r2
 801850a:	224c      	movs	r2, #76	@ 0x4c
 801850c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	2224      	movs	r2, #36	@ 0x24
 8018512:	2100      	movs	r1, #0
 8018514:	5499      	strb	r1, [r3, r2]
 8018516:	f000 fb7d 	bl	8018c14 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	3369      	adds	r3, #105	@ 0x69
 801851e:	33ff      	adds	r3, #255	@ 0xff
 8018520:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	681a      	ldr	r2, [r3, #0]
 8018526:	214a      	movs	r1, #74	@ 0x4a
 8018528:	187b      	adds	r3, r7, r1
 801852a:	8812      	ldrh	r2, [r2, #0]
 801852c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801852e:	187b      	adds	r3, r7, r1
 8018530:	881a      	ldrh	r2, [r3, #0]
 8018532:	2380      	movs	r3, #128	@ 0x80
 8018534:	011b      	lsls	r3, r3, #4
 8018536:	4013      	ands	r3, r2
 8018538:	d037      	beq.n	80185aa <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	2250      	movs	r2, #80	@ 0x50
 8018540:	5a9b      	ldrh	r3, [r3, r2]
 8018542:	b29b      	uxth	r3, r3
 8018544:	001a      	movs	r2, r3
 8018546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018548:	781b      	ldrb	r3, [r3, #0]
 801854a:	00db      	lsls	r3, r3, #3
 801854c:	18d2      	adds	r2, r2, r3
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	18d3      	adds	r3, r2, r3
 8018554:	4a87      	ldr	r2, [pc, #540]	@ (8018774 <PCD_EP_ISR_Handler+0x344>)
 8018556:	4694      	mov	ip, r2
 8018558:	4463      	add	r3, ip
 801855a:	881b      	ldrh	r3, [r3, #0]
 801855c:	059b      	lsls	r3, r3, #22
 801855e:	0d9a      	lsrs	r2, r3, #22
 8018560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018562:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	6818      	ldr	r0, [r3, #0]
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	22ac      	movs	r2, #172	@ 0xac
 801856c:	0092      	lsls	r2, r2, #2
 801856e:	1899      	adds	r1, r3, r2
 8018570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018572:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8018574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018576:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8018578:	b29b      	uxth	r3, r3
 801857a:	f007 fa3a 	bl	801f9f2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	881b      	ldrh	r3, [r3, #0]
 8018584:	b29a      	uxth	r2, r3
 8018586:	2010      	movs	r0, #16
 8018588:	183b      	adds	r3, r7, r0
 801858a:	497b      	ldr	r1, [pc, #492]	@ (8018778 <PCD_EP_ISR_Handler+0x348>)
 801858c:	400a      	ands	r2, r1
 801858e:	801a      	strh	r2, [r3, #0]
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	183a      	adds	r2, r7, r0
 8018596:	8812      	ldrh	r2, [r2, #0]
 8018598:	2180      	movs	r1, #128	@ 0x80
 801859a:	430a      	orrs	r2, r1
 801859c:	b292      	uxth	r2, r2
 801859e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	0018      	movs	r0, r3
 80185a4:	f009 fa2a 	bl	80219fc <HAL_PCD_SetupStageCallback>
 80185a8:	e334      	b.n	8018c14 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80185aa:	234a      	movs	r3, #74	@ 0x4a
 80185ac:	18fb      	adds	r3, r7, r3
 80185ae:	2200      	movs	r2, #0
 80185b0:	5e9b      	ldrsh	r3, [r3, r2]
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	db00      	blt.n	80185b8 <PCD_EP_ISR_Handler+0x188>
 80185b6:	e32d      	b.n	8018c14 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	881b      	ldrh	r3, [r3, #0]
 80185be:	b29a      	uxth	r2, r3
 80185c0:	201e      	movs	r0, #30
 80185c2:	183b      	adds	r3, r7, r0
 80185c4:	496c      	ldr	r1, [pc, #432]	@ (8018778 <PCD_EP_ISR_Handler+0x348>)
 80185c6:	400a      	ands	r2, r1
 80185c8:	801a      	strh	r2, [r3, #0]
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	183a      	adds	r2, r7, r0
 80185d0:	8812      	ldrh	r2, [r2, #0]
 80185d2:	2180      	movs	r1, #128	@ 0x80
 80185d4:	430a      	orrs	r2, r1
 80185d6:	b292      	uxth	r2, r2
 80185d8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	2250      	movs	r2, #80	@ 0x50
 80185e0:	5a9b      	ldrh	r3, [r3, r2]
 80185e2:	b29b      	uxth	r3, r3
 80185e4:	001a      	movs	r2, r3
 80185e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80185e8:	781b      	ldrb	r3, [r3, #0]
 80185ea:	00db      	lsls	r3, r3, #3
 80185ec:	18d2      	adds	r2, r2, r3
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	18d3      	adds	r3, r2, r3
 80185f4:	4a5f      	ldr	r2, [pc, #380]	@ (8018774 <PCD_EP_ISR_Handler+0x344>)
 80185f6:	4694      	mov	ip, r2
 80185f8:	4463      	add	r3, ip
 80185fa:	881b      	ldrh	r3, [r3, #0]
 80185fc:	059b      	lsls	r3, r3, #22
 80185fe:	0d9a      	lsrs	r2, r3, #22
 8018600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018602:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8018604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018606:	69db      	ldr	r3, [r3, #28]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d01a      	beq.n	8018642 <PCD_EP_ISR_Handler+0x212>
 801860c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801860e:	695b      	ldr	r3, [r3, #20]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d016      	beq.n	8018642 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	6818      	ldr	r0, [r3, #0]
 8018618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801861a:	6959      	ldr	r1, [r3, #20]
 801861c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801861e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8018620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018622:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8018624:	b29b      	uxth	r3, r3
 8018626:	f007 f9e4 	bl	801f9f2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 801862a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801862c:	695a      	ldr	r2, [r3, #20]
 801862e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018630:	69db      	ldr	r3, [r3, #28]
 8018632:	18d2      	adds	r2, r2, r3
 8018634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018636:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	2100      	movs	r1, #0
 801863c:	0018      	movs	r0, r3
 801863e:	f009 f9f2 	bl	8021a26 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	681a      	ldr	r2, [r3, #0]
 8018646:	214a      	movs	r1, #74	@ 0x4a
 8018648:	187b      	adds	r3, r7, r1
 801864a:	8812      	ldrh	r2, [r2, #0]
 801864c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801864e:	187b      	adds	r3, r7, r1
 8018650:	881a      	ldrh	r2, [r3, #0]
 8018652:	2380      	movs	r3, #128	@ 0x80
 8018654:	011b      	lsls	r3, r3, #4
 8018656:	4013      	ands	r3, r2
 8018658:	d000      	beq.n	801865c <PCD_EP_ISR_Handler+0x22c>
 801865a:	e2db      	b.n	8018c14 <PCD_EP_ISR_Handler+0x7e4>
 801865c:	187b      	adds	r3, r7, r1
 801865e:	881a      	ldrh	r2, [r3, #0]
 8018660:	23c0      	movs	r3, #192	@ 0xc0
 8018662:	019b      	lsls	r3, r3, #6
 8018664:	401a      	ands	r2, r3
 8018666:	23c0      	movs	r3, #192	@ 0xc0
 8018668:	019b      	lsls	r3, r3, #6
 801866a:	429a      	cmp	r2, r3
 801866c:	d100      	bne.n	8018670 <PCD_EP_ISR_Handler+0x240>
 801866e:	e2d1      	b.n	8018c14 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	61bb      	str	r3, [r7, #24]
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	2250      	movs	r2, #80	@ 0x50
 801867c:	5a9b      	ldrh	r3, [r3, r2]
 801867e:	b29b      	uxth	r3, r3
 8018680:	001a      	movs	r2, r3
 8018682:	69bb      	ldr	r3, [r7, #24]
 8018684:	189b      	adds	r3, r3, r2
 8018686:	61bb      	str	r3, [r7, #24]
 8018688:	69bb      	ldr	r3, [r7, #24]
 801868a:	4a3a      	ldr	r2, [pc, #232]	@ (8018774 <PCD_EP_ISR_Handler+0x344>)
 801868c:	4694      	mov	ip, r2
 801868e:	4463      	add	r3, ip
 8018690:	617b      	str	r3, [r7, #20]
 8018692:	697b      	ldr	r3, [r7, #20]
 8018694:	881b      	ldrh	r3, [r3, #0]
 8018696:	b29b      	uxth	r3, r3
 8018698:	059b      	lsls	r3, r3, #22
 801869a:	0d9b      	lsrs	r3, r3, #22
 801869c:	b29a      	uxth	r2, r3
 801869e:	697b      	ldr	r3, [r7, #20]
 80186a0:	801a      	strh	r2, [r3, #0]
 80186a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80186a4:	691b      	ldr	r3, [r3, #16]
 80186a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80186a8:	d91a      	bls.n	80186e0 <PCD_EP_ISR_Handler+0x2b0>
 80186aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80186ac:	691b      	ldr	r3, [r3, #16]
 80186ae:	095b      	lsrs	r3, r3, #5
 80186b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80186b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80186b4:	691b      	ldr	r3, [r3, #16]
 80186b6:	221f      	movs	r2, #31
 80186b8:	4013      	ands	r3, r2
 80186ba:	d102      	bne.n	80186c2 <PCD_EP_ISR_Handler+0x292>
 80186bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80186be:	3b01      	subs	r3, #1
 80186c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80186c2:	697b      	ldr	r3, [r7, #20]
 80186c4:	881b      	ldrh	r3, [r3, #0]
 80186c6:	b29a      	uxth	r2, r3
 80186c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80186ca:	b29b      	uxth	r3, r3
 80186cc:	029b      	lsls	r3, r3, #10
 80186ce:	b29b      	uxth	r3, r3
 80186d0:	4313      	orrs	r3, r2
 80186d2:	b29b      	uxth	r3, r3
 80186d4:	4a25      	ldr	r2, [pc, #148]	@ (801876c <PCD_EP_ISR_Handler+0x33c>)
 80186d6:	4313      	orrs	r3, r2
 80186d8:	b29a      	uxth	r2, r3
 80186da:	697b      	ldr	r3, [r7, #20]
 80186dc:	801a      	strh	r2, [r3, #0]
 80186de:	e023      	b.n	8018728 <PCD_EP_ISR_Handler+0x2f8>
 80186e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80186e2:	691b      	ldr	r3, [r3, #16]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d108      	bne.n	80186fa <PCD_EP_ISR_Handler+0x2ca>
 80186e8:	697b      	ldr	r3, [r7, #20]
 80186ea:	881b      	ldrh	r3, [r3, #0]
 80186ec:	b29b      	uxth	r3, r3
 80186ee:	4a1f      	ldr	r2, [pc, #124]	@ (801876c <PCD_EP_ISR_Handler+0x33c>)
 80186f0:	4313      	orrs	r3, r2
 80186f2:	b29a      	uxth	r2, r3
 80186f4:	697b      	ldr	r3, [r7, #20]
 80186f6:	801a      	strh	r2, [r3, #0]
 80186f8:	e016      	b.n	8018728 <PCD_EP_ISR_Handler+0x2f8>
 80186fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80186fc:	691b      	ldr	r3, [r3, #16]
 80186fe:	085b      	lsrs	r3, r3, #1
 8018700:	647b      	str	r3, [r7, #68]	@ 0x44
 8018702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018704:	691b      	ldr	r3, [r3, #16]
 8018706:	2201      	movs	r2, #1
 8018708:	4013      	ands	r3, r2
 801870a:	d002      	beq.n	8018712 <PCD_EP_ISR_Handler+0x2e2>
 801870c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801870e:	3301      	adds	r3, #1
 8018710:	647b      	str	r3, [r7, #68]	@ 0x44
 8018712:	697b      	ldr	r3, [r7, #20]
 8018714:	881b      	ldrh	r3, [r3, #0]
 8018716:	b29a      	uxth	r2, r3
 8018718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801871a:	b29b      	uxth	r3, r3
 801871c:	029b      	lsls	r3, r3, #10
 801871e:	b29b      	uxth	r3, r3
 8018720:	4313      	orrs	r3, r2
 8018722:	b29a      	uxth	r2, r3
 8018724:	697b      	ldr	r3, [r7, #20]
 8018726:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	881b      	ldrh	r3, [r3, #0]
 801872e:	b29a      	uxth	r2, r3
 8018730:	2012      	movs	r0, #18
 8018732:	183b      	adds	r3, r7, r0
 8018734:	4911      	ldr	r1, [pc, #68]	@ (801877c <PCD_EP_ISR_Handler+0x34c>)
 8018736:	400a      	ands	r2, r1
 8018738:	801a      	strh	r2, [r3, #0]
 801873a:	183b      	adds	r3, r7, r0
 801873c:	183a      	adds	r2, r7, r0
 801873e:	8812      	ldrh	r2, [r2, #0]
 8018740:	2180      	movs	r1, #128	@ 0x80
 8018742:	0149      	lsls	r1, r1, #5
 8018744:	404a      	eors	r2, r1
 8018746:	801a      	strh	r2, [r3, #0]
 8018748:	183b      	adds	r3, r7, r0
 801874a:	183a      	adds	r2, r7, r0
 801874c:	8812      	ldrh	r2, [r2, #0]
 801874e:	2180      	movs	r1, #128	@ 0x80
 8018750:	0189      	lsls	r1, r1, #6
 8018752:	404a      	eors	r2, r1
 8018754:	801a      	strh	r2, [r3, #0]
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	183a      	adds	r2, r7, r0
 801875c:	8812      	ldrh	r2, [r2, #0]
 801875e:	4908      	ldr	r1, [pc, #32]	@ (8018780 <PCD_EP_ISR_Handler+0x350>)
 8018760:	430a      	orrs	r2, r1
 8018762:	b292      	uxth	r2, r2
 8018764:	801a      	strh	r2, [r3, #0]
 8018766:	e255      	b.n	8018c14 <PCD_EP_ISR_Handler+0x7e4>
 8018768:	ffff8f0f 	.word	0xffff8f0f
 801876c:	ffff8000 	.word	0xffff8000
 8018770:	00000402 	.word	0x00000402
 8018774:	00000406 	.word	0x00000406
 8018778:	00000f8f 	.word	0x00000f8f
 801877c:	ffffbf8f 	.word	0xffffbf8f
 8018780:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	001a      	movs	r2, r3
 801878a:	204d      	movs	r0, #77	@ 0x4d
 801878c:	183b      	adds	r3, r7, r0
 801878e:	781b      	ldrb	r3, [r3, #0]
 8018790:	009b      	lsls	r3, r3, #2
 8018792:	18d2      	adds	r2, r2, r3
 8018794:	214a      	movs	r1, #74	@ 0x4a
 8018796:	187b      	adds	r3, r7, r1
 8018798:	8812      	ldrh	r2, [r2, #0]
 801879a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801879c:	187b      	adds	r3, r7, r1
 801879e:	2200      	movs	r2, #0
 80187a0:	5e9b      	ldrsh	r3, [r3, r2]
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	db00      	blt.n	80187a8 <PCD_EP_ISR_Handler+0x378>
 80187a6:	e0fa      	b.n	801899e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	001a      	movs	r2, r3
 80187ae:	183b      	adds	r3, r7, r0
 80187b0:	781b      	ldrb	r3, [r3, #0]
 80187b2:	009b      	lsls	r3, r3, #2
 80187b4:	18d3      	adds	r3, r2, r3
 80187b6:	881b      	ldrh	r3, [r3, #0]
 80187b8:	b29a      	uxth	r2, r3
 80187ba:	2448      	movs	r4, #72	@ 0x48
 80187bc:	193b      	adds	r3, r7, r4
 80187be:	49d1      	ldr	r1, [pc, #836]	@ (8018b04 <PCD_EP_ISR_Handler+0x6d4>)
 80187c0:	400a      	ands	r2, r1
 80187c2:	801a      	strh	r2, [r3, #0]
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	001a      	movs	r2, r3
 80187ca:	183b      	adds	r3, r7, r0
 80187cc:	781b      	ldrb	r3, [r3, #0]
 80187ce:	009b      	lsls	r3, r3, #2
 80187d0:	18d3      	adds	r3, r2, r3
 80187d2:	193a      	adds	r2, r7, r4
 80187d4:	8812      	ldrh	r2, [r2, #0]
 80187d6:	2180      	movs	r1, #128	@ 0x80
 80187d8:	430a      	orrs	r2, r1
 80187da:	b292      	uxth	r2, r2
 80187dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80187de:	183b      	adds	r3, r7, r0
 80187e0:	781a      	ldrb	r2, [r3, #0]
 80187e2:	0013      	movs	r3, r2
 80187e4:	009b      	lsls	r3, r3, #2
 80187e6:	189b      	adds	r3, r3, r2
 80187e8:	00db      	lsls	r3, r3, #3
 80187ea:	3369      	adds	r3, #105	@ 0x69
 80187ec:	33ff      	adds	r3, #255	@ 0xff
 80187ee:	687a      	ldr	r2, [r7, #4]
 80187f0:	18d3      	adds	r3, r2, r3
 80187f2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80187f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80187f6:	7b1b      	ldrb	r3, [r3, #12]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d125      	bne.n	8018848 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	2250      	movs	r2, #80	@ 0x50
 8018802:	5a9b      	ldrh	r3, [r3, r2]
 8018804:	b29b      	uxth	r3, r3
 8018806:	001a      	movs	r2, r3
 8018808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801880a:	781b      	ldrb	r3, [r3, #0]
 801880c:	00db      	lsls	r3, r3, #3
 801880e:	18d2      	adds	r2, r2, r3
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	18d3      	adds	r3, r2, r3
 8018816:	4abc      	ldr	r2, [pc, #752]	@ (8018b08 <PCD_EP_ISR_Handler+0x6d8>)
 8018818:	4694      	mov	ip, r2
 801881a:	4463      	add	r3, ip
 801881c:	881a      	ldrh	r2, [r3, #0]
 801881e:	2450      	movs	r4, #80	@ 0x50
 8018820:	193b      	adds	r3, r7, r4
 8018822:	0592      	lsls	r2, r2, #22
 8018824:	0d92      	lsrs	r2, r2, #22
 8018826:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8018828:	193b      	adds	r3, r7, r4
 801882a:	881b      	ldrh	r3, [r3, #0]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d100      	bne.n	8018832 <PCD_EP_ISR_Handler+0x402>
 8018830:	e08d      	b.n	801894e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	6818      	ldr	r0, [r3, #0]
 8018836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018838:	6959      	ldr	r1, [r3, #20]
 801883a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801883c:	88da      	ldrh	r2, [r3, #6]
 801883e:	193b      	adds	r3, r7, r4
 8018840:	881b      	ldrh	r3, [r3, #0]
 8018842:	f007 f8d6 	bl	801f9f2 <USB_ReadPMA>
 8018846:	e082      	b.n	801894e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8018848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801884a:	78db      	ldrb	r3, [r3, #3]
 801884c:	2b02      	cmp	r3, #2
 801884e:	d10c      	bne.n	801886a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8018850:	2350      	movs	r3, #80	@ 0x50
 8018852:	18fc      	adds	r4, r7, r3
 8018854:	234a      	movs	r3, #74	@ 0x4a
 8018856:	18fb      	adds	r3, r7, r3
 8018858:	881a      	ldrh	r2, [r3, #0]
 801885a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	0018      	movs	r0, r3
 8018860:	f000 f9ec 	bl	8018c3c <HAL_PCD_EP_DB_Receive>
 8018864:	0003      	movs	r3, r0
 8018866:	8023      	strh	r3, [r4, #0]
 8018868:	e071      	b.n	801894e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	001a      	movs	r2, r3
 8018870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018872:	781b      	ldrb	r3, [r3, #0]
 8018874:	009b      	lsls	r3, r3, #2
 8018876:	18d3      	adds	r3, r2, r3
 8018878:	881b      	ldrh	r3, [r3, #0]
 801887a:	b29a      	uxth	r2, r3
 801887c:	2052      	movs	r0, #82	@ 0x52
 801887e:	183b      	adds	r3, r7, r0
 8018880:	49a2      	ldr	r1, [pc, #648]	@ (8018b0c <PCD_EP_ISR_Handler+0x6dc>)
 8018882:	400a      	ands	r2, r1
 8018884:	801a      	strh	r2, [r3, #0]
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	001a      	movs	r2, r3
 801888c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801888e:	781b      	ldrb	r3, [r3, #0]
 8018890:	009b      	lsls	r3, r3, #2
 8018892:	18d3      	adds	r3, r2, r3
 8018894:	183a      	adds	r2, r7, r0
 8018896:	8812      	ldrh	r2, [r2, #0]
 8018898:	499d      	ldr	r1, [pc, #628]	@ (8018b10 <PCD_EP_ISR_Handler+0x6e0>)
 801889a:	430a      	orrs	r2, r1
 801889c:	b292      	uxth	r2, r2
 801889e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	001a      	movs	r2, r3
 80188a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80188a8:	781b      	ldrb	r3, [r3, #0]
 80188aa:	009b      	lsls	r3, r3, #2
 80188ac:	18d3      	adds	r3, r2, r3
 80188ae:	881b      	ldrh	r3, [r3, #0]
 80188b0:	b29b      	uxth	r3, r3
 80188b2:	001a      	movs	r2, r3
 80188b4:	2380      	movs	r3, #128	@ 0x80
 80188b6:	01db      	lsls	r3, r3, #7
 80188b8:	4013      	ands	r3, r2
 80188ba:	d024      	beq.n	8018906 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	2250      	movs	r2, #80	@ 0x50
 80188c2:	5a9b      	ldrh	r3, [r3, r2]
 80188c4:	b29b      	uxth	r3, r3
 80188c6:	001a      	movs	r2, r3
 80188c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80188ca:	781b      	ldrb	r3, [r3, #0]
 80188cc:	00db      	lsls	r3, r3, #3
 80188ce:	18d2      	adds	r2, r2, r3
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	18d3      	adds	r3, r2, r3
 80188d6:	4a8f      	ldr	r2, [pc, #572]	@ (8018b14 <PCD_EP_ISR_Handler+0x6e4>)
 80188d8:	4694      	mov	ip, r2
 80188da:	4463      	add	r3, ip
 80188dc:	881a      	ldrh	r2, [r3, #0]
 80188de:	2450      	movs	r4, #80	@ 0x50
 80188e0:	193b      	adds	r3, r7, r4
 80188e2:	0592      	lsls	r2, r2, #22
 80188e4:	0d92      	lsrs	r2, r2, #22
 80188e6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80188e8:	193b      	adds	r3, r7, r4
 80188ea:	881b      	ldrh	r3, [r3, #0]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d02e      	beq.n	801894e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	6818      	ldr	r0, [r3, #0]
 80188f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80188f6:	6959      	ldr	r1, [r3, #20]
 80188f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80188fa:	891a      	ldrh	r2, [r3, #8]
 80188fc:	193b      	adds	r3, r7, r4
 80188fe:	881b      	ldrh	r3, [r3, #0]
 8018900:	f007 f877 	bl	801f9f2 <USB_ReadPMA>
 8018904:	e023      	b.n	801894e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	2250      	movs	r2, #80	@ 0x50
 801890c:	5a9b      	ldrh	r3, [r3, r2]
 801890e:	b29b      	uxth	r3, r3
 8018910:	001a      	movs	r2, r3
 8018912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018914:	781b      	ldrb	r3, [r3, #0]
 8018916:	00db      	lsls	r3, r3, #3
 8018918:	18d2      	adds	r2, r2, r3
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	18d3      	adds	r3, r2, r3
 8018920:	4a79      	ldr	r2, [pc, #484]	@ (8018b08 <PCD_EP_ISR_Handler+0x6d8>)
 8018922:	4694      	mov	ip, r2
 8018924:	4463      	add	r3, ip
 8018926:	881a      	ldrh	r2, [r3, #0]
 8018928:	2450      	movs	r4, #80	@ 0x50
 801892a:	193b      	adds	r3, r7, r4
 801892c:	0592      	lsls	r2, r2, #22
 801892e:	0d92      	lsrs	r2, r2, #22
 8018930:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8018932:	193b      	adds	r3, r7, r4
 8018934:	881b      	ldrh	r3, [r3, #0]
 8018936:	2b00      	cmp	r3, #0
 8018938:	d009      	beq.n	801894e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	6818      	ldr	r0, [r3, #0]
 801893e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018940:	6959      	ldr	r1, [r3, #20]
 8018942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018944:	895a      	ldrh	r2, [r3, #10]
 8018946:	193b      	adds	r3, r7, r4
 8018948:	881b      	ldrh	r3, [r3, #0]
 801894a:	f007 f852 	bl	801f9f2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801894e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018950:	69da      	ldr	r2, [r3, #28]
 8018952:	2150      	movs	r1, #80	@ 0x50
 8018954:	187b      	adds	r3, r7, r1
 8018956:	881b      	ldrh	r3, [r3, #0]
 8018958:	18d2      	adds	r2, r2, r3
 801895a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801895c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801895e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018960:	695a      	ldr	r2, [r3, #20]
 8018962:	187b      	adds	r3, r7, r1
 8018964:	881b      	ldrh	r3, [r3, #0]
 8018966:	18d2      	adds	r2, r2, r3
 8018968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801896a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801896c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801896e:	699b      	ldr	r3, [r3, #24]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d005      	beq.n	8018980 <PCD_EP_ISR_Handler+0x550>
 8018974:	187b      	adds	r3, r7, r1
 8018976:	881a      	ldrh	r2, [r3, #0]
 8018978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801897a:	691b      	ldr	r3, [r3, #16]
 801897c:	429a      	cmp	r2, r3
 801897e:	d207      	bcs.n	8018990 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8018980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018982:	781a      	ldrb	r2, [r3, #0]
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	0011      	movs	r1, r2
 8018988:	0018      	movs	r0, r3
 801898a:	f009 f84c 	bl	8021a26 <HAL_PCD_DataOutStageCallback>
 801898e:	e006      	b.n	801899e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018996:	0011      	movs	r1, r2
 8018998:	0018      	movs	r0, r3
 801899a:	f005 fd6f 	bl	801e47c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801899e:	244a      	movs	r4, #74	@ 0x4a
 80189a0:	193b      	adds	r3, r7, r4
 80189a2:	881b      	ldrh	r3, [r3, #0]
 80189a4:	2280      	movs	r2, #128	@ 0x80
 80189a6:	4013      	ands	r3, r2
 80189a8:	d100      	bne.n	80189ac <PCD_EP_ISR_Handler+0x57c>
 80189aa:	e133      	b.n	8018c14 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80189ac:	204d      	movs	r0, #77	@ 0x4d
 80189ae:	183b      	adds	r3, r7, r0
 80189b0:	781b      	ldrb	r3, [r3, #0]
 80189b2:	1c5a      	adds	r2, r3, #1
 80189b4:	0013      	movs	r3, r2
 80189b6:	009b      	lsls	r3, r3, #2
 80189b8:	189b      	adds	r3, r3, r2
 80189ba:	00db      	lsls	r3, r3, #3
 80189bc:	687a      	ldr	r2, [r7, #4]
 80189be:	18d3      	adds	r3, r2, r3
 80189c0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	001a      	movs	r2, r3
 80189c8:	183b      	adds	r3, r7, r0
 80189ca:	781b      	ldrb	r3, [r3, #0]
 80189cc:	009b      	lsls	r3, r3, #2
 80189ce:	18d3      	adds	r3, r2, r3
 80189d0:	881b      	ldrh	r3, [r3, #0]
 80189d2:	b29a      	uxth	r2, r3
 80189d4:	2542      	movs	r5, #66	@ 0x42
 80189d6:	197b      	adds	r3, r7, r5
 80189d8:	494f      	ldr	r1, [pc, #316]	@ (8018b18 <PCD_EP_ISR_Handler+0x6e8>)
 80189da:	400a      	ands	r2, r1
 80189dc:	801a      	strh	r2, [r3, #0]
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	001a      	movs	r2, r3
 80189e4:	183b      	adds	r3, r7, r0
 80189e6:	781b      	ldrb	r3, [r3, #0]
 80189e8:	009b      	lsls	r3, r3, #2
 80189ea:	18d3      	adds	r3, r2, r3
 80189ec:	197a      	adds	r2, r7, r5
 80189ee:	8812      	ldrh	r2, [r2, #0]
 80189f0:	494a      	ldr	r1, [pc, #296]	@ (8018b1c <PCD_EP_ISR_Handler+0x6ec>)
 80189f2:	430a      	orrs	r2, r1
 80189f4:	b292      	uxth	r2, r2
 80189f6:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80189f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80189fa:	78db      	ldrb	r3, [r3, #3]
 80189fc:	2b01      	cmp	r3, #1
 80189fe:	d000      	beq.n	8018a02 <PCD_EP_ISR_Handler+0x5d2>
 8018a00:	e0af      	b.n	8018b62 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8018a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a04:	2200      	movs	r2, #0
 8018a06:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8018a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a0a:	7b1b      	ldrb	r3, [r3, #12]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d100      	bne.n	8018a12 <PCD_EP_ISR_Handler+0x5e2>
 8018a10:	e09f      	b.n	8018b52 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8018a12:	193b      	adds	r3, r7, r4
 8018a14:	881b      	ldrh	r3, [r3, #0]
 8018a16:	2240      	movs	r2, #64	@ 0x40
 8018a18:	4013      	ands	r3, r2
 8018a1a:	d046      	beq.n	8018aaa <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8018a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a1e:	785b      	ldrb	r3, [r3, #1]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d125      	bne.n	8018a70 <PCD_EP_ISR_Handler+0x640>
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	2250      	movs	r2, #80	@ 0x50
 8018a30:	5a9b      	ldrh	r3, [r3, r2]
 8018a32:	b29b      	uxth	r3, r3
 8018a34:	001a      	movs	r2, r3
 8018a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a38:	189b      	adds	r3, r3, r2
 8018a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8018a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a3e:	781b      	ldrb	r3, [r3, #0]
 8018a40:	00da      	lsls	r2, r3, #3
 8018a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a44:	18d3      	adds	r3, r2, r3
 8018a46:	4a33      	ldr	r2, [pc, #204]	@ (8018b14 <PCD_EP_ISR_Handler+0x6e4>)
 8018a48:	4694      	mov	ip, r2
 8018a4a:	4463      	add	r3, ip
 8018a4c:	623b      	str	r3, [r7, #32]
 8018a4e:	6a3b      	ldr	r3, [r7, #32]
 8018a50:	881b      	ldrh	r3, [r3, #0]
 8018a52:	b29b      	uxth	r3, r3
 8018a54:	059b      	lsls	r3, r3, #22
 8018a56:	0d9b      	lsrs	r3, r3, #22
 8018a58:	b29a      	uxth	r2, r3
 8018a5a:	6a3b      	ldr	r3, [r7, #32]
 8018a5c:	801a      	strh	r2, [r3, #0]
 8018a5e:	6a3b      	ldr	r3, [r7, #32]
 8018a60:	881b      	ldrh	r3, [r3, #0]
 8018a62:	b29b      	uxth	r3, r3
 8018a64:	4a2d      	ldr	r2, [pc, #180]	@ (8018b1c <PCD_EP_ISR_Handler+0x6ec>)
 8018a66:	4313      	orrs	r3, r2
 8018a68:	b29a      	uxth	r2, r3
 8018a6a:	6a3b      	ldr	r3, [r7, #32]
 8018a6c:	801a      	strh	r2, [r3, #0]
 8018a6e:	e070      	b.n	8018b52 <PCD_EP_ISR_Handler+0x722>
 8018a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a72:	785b      	ldrb	r3, [r3, #1]
 8018a74:	2b01      	cmp	r3, #1
 8018a76:	d16c      	bne.n	8018b52 <PCD_EP_ISR_Handler+0x722>
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	2250      	movs	r2, #80	@ 0x50
 8018a84:	5a9b      	ldrh	r3, [r3, r2]
 8018a86:	b29b      	uxth	r3, r3
 8018a88:	001a      	movs	r2, r3
 8018a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a8c:	189b      	adds	r3, r3, r2
 8018a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a92:	781b      	ldrb	r3, [r3, #0]
 8018a94:	00da      	lsls	r2, r3, #3
 8018a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a98:	18d3      	adds	r3, r2, r3
 8018a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8018b14 <PCD_EP_ISR_Handler+0x6e4>)
 8018a9c:	4694      	mov	ip, r2
 8018a9e:	4463      	add	r3, ip
 8018aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018aa4:	2200      	movs	r2, #0
 8018aa6:	801a      	strh	r2, [r3, #0]
 8018aa8:	e053      	b.n	8018b52 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ab2:	785b      	ldrb	r3, [r3, #1]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d133      	bne.n	8018b20 <PCD_EP_ISR_Handler+0x6f0>
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	2250      	movs	r2, #80	@ 0x50
 8018ac4:	5a9b      	ldrh	r3, [r3, r2]
 8018ac6:	b29b      	uxth	r3, r3
 8018ac8:	001a      	movs	r2, r3
 8018aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018acc:	189b      	adds	r3, r3, r2
 8018ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8018ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ad2:	781b      	ldrb	r3, [r3, #0]
 8018ad4:	00da      	lsls	r2, r3, #3
 8018ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ad8:	18d3      	adds	r3, r2, r3
 8018ada:	4a0b      	ldr	r2, [pc, #44]	@ (8018b08 <PCD_EP_ISR_Handler+0x6d8>)
 8018adc:	4694      	mov	ip, r2
 8018ade:	4463      	add	r3, ip
 8018ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8018ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ae4:	881b      	ldrh	r3, [r3, #0]
 8018ae6:	b29b      	uxth	r3, r3
 8018ae8:	059b      	lsls	r3, r3, #22
 8018aea:	0d9b      	lsrs	r3, r3, #22
 8018aec:	b29a      	uxth	r2, r3
 8018aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018af0:	801a      	strh	r2, [r3, #0]
 8018af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018af4:	881b      	ldrh	r3, [r3, #0]
 8018af6:	b29b      	uxth	r3, r3
 8018af8:	4a08      	ldr	r2, [pc, #32]	@ (8018b1c <PCD_EP_ISR_Handler+0x6ec>)
 8018afa:	4313      	orrs	r3, r2
 8018afc:	b29a      	uxth	r2, r3
 8018afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b00:	801a      	strh	r2, [r3, #0]
 8018b02:	e026      	b.n	8018b52 <PCD_EP_ISR_Handler+0x722>
 8018b04:	00000f8f 	.word	0x00000f8f
 8018b08:	00000406 	.word	0x00000406
 8018b0c:	ffff8f8f 	.word	0xffff8f8f
 8018b10:	ffff80c0 	.word	0xffff80c0
 8018b14:	00000402 	.word	0x00000402
 8018b18:	ffff8f0f 	.word	0xffff8f0f
 8018b1c:	ffff8000 	.word	0xffff8000
 8018b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b22:	785b      	ldrb	r3, [r3, #1]
 8018b24:	2b01      	cmp	r3, #1
 8018b26:	d114      	bne.n	8018b52 <PCD_EP_ISR_Handler+0x722>
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	2250      	movs	r2, #80	@ 0x50
 8018b2e:	5a9b      	ldrh	r3, [r3, r2]
 8018b30:	b29b      	uxth	r3, r3
 8018b32:	001a      	movs	r2, r3
 8018b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b36:	189b      	adds	r3, r3, r2
 8018b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b3c:	781b      	ldrb	r3, [r3, #0]
 8018b3e:	00da      	lsls	r2, r3, #3
 8018b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b42:	18d3      	adds	r3, r2, r3
 8018b44:	4a3b      	ldr	r2, [pc, #236]	@ (8018c34 <PCD_EP_ISR_Handler+0x804>)
 8018b46:	4694      	mov	ip, r2
 8018b48:	4463      	add	r3, ip
 8018b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018b4e:	2200      	movs	r2, #0
 8018b50:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8018b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b54:	781a      	ldrb	r2, [r3, #0]
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	0011      	movs	r1, r2
 8018b5a:	0018      	movs	r0, r3
 8018b5c:	f008 ff84 	bl	8021a68 <HAL_PCD_DataInStageCallback>
 8018b60:	e058      	b.n	8018c14 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8018b62:	234a      	movs	r3, #74	@ 0x4a
 8018b64:	18fb      	adds	r3, r7, r3
 8018b66:	881a      	ldrh	r2, [r3, #0]
 8018b68:	2380      	movs	r3, #128	@ 0x80
 8018b6a:	005b      	lsls	r3, r3, #1
 8018b6c:	4013      	ands	r3, r2
 8018b6e:	d149      	bne.n	8018c04 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	2250      	movs	r2, #80	@ 0x50
 8018b76:	5a9b      	ldrh	r3, [r3, r2]
 8018b78:	b29b      	uxth	r3, r3
 8018b7a:	001a      	movs	r2, r3
 8018b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b7e:	781b      	ldrb	r3, [r3, #0]
 8018b80:	00db      	lsls	r3, r3, #3
 8018b82:	18d2      	adds	r2, r2, r3
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	18d3      	adds	r3, r2, r3
 8018b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8018c38 <PCD_EP_ISR_Handler+0x808>)
 8018b8c:	4694      	mov	ip, r2
 8018b8e:	4463      	add	r3, ip
 8018b90:	881a      	ldrh	r2, [r3, #0]
 8018b92:	2140      	movs	r1, #64	@ 0x40
 8018b94:	187b      	adds	r3, r7, r1
 8018b96:	0592      	lsls	r2, r2, #22
 8018b98:	0d92      	lsrs	r2, r2, #22
 8018b9a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8018b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b9e:	699a      	ldr	r2, [r3, #24]
 8018ba0:	187b      	adds	r3, r7, r1
 8018ba2:	881b      	ldrh	r3, [r3, #0]
 8018ba4:	429a      	cmp	r2, r3
 8018ba6:	d907      	bls.n	8018bb8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8018ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018baa:	699a      	ldr	r2, [r3, #24]
 8018bac:	187b      	adds	r3, r7, r1
 8018bae:	881b      	ldrh	r3, [r3, #0]
 8018bb0:	1ad2      	subs	r2, r2, r3
 8018bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018bb4:	619a      	str	r2, [r3, #24]
 8018bb6:	e002      	b.n	8018bbe <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8018bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018bba:	2200      	movs	r2, #0
 8018bbc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8018bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018bc0:	699b      	ldr	r3, [r3, #24]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d107      	bne.n	8018bd6 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8018bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018bc8:	781a      	ldrb	r2, [r3, #0]
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	0011      	movs	r1, r2
 8018bce:	0018      	movs	r0, r3
 8018bd0:	f008 ff4a 	bl	8021a68 <HAL_PCD_DataInStageCallback>
 8018bd4:	e01e      	b.n	8018c14 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8018bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018bd8:	695a      	ldr	r2, [r3, #20]
 8018bda:	2140      	movs	r1, #64	@ 0x40
 8018bdc:	187b      	adds	r3, r7, r1
 8018bde:	881b      	ldrh	r3, [r3, #0]
 8018be0:	18d2      	adds	r2, r2, r3
 8018be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018be4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8018be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018be8:	69da      	ldr	r2, [r3, #28]
 8018bea:	187b      	adds	r3, r7, r1
 8018bec:	881b      	ldrh	r3, [r3, #0]
 8018bee:	18d2      	adds	r2, r2, r3
 8018bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018bf2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018bfa:	0011      	movs	r1, r2
 8018bfc:	0018      	movs	r0, r3
 8018bfe:	f005 fc3d 	bl	801e47c <USB_EPStartXfer>
 8018c02:	e007      	b.n	8018c14 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8018c04:	234a      	movs	r3, #74	@ 0x4a
 8018c06:	18fb      	adds	r3, r7, r3
 8018c08:	881a      	ldrh	r2, [r3, #0]
 8018c0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	0018      	movs	r0, r3
 8018c10:	f000 f930 	bl	8018e74 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	2244      	movs	r2, #68	@ 0x44
 8018c1a:	5a9b      	ldrh	r3, [r3, r2]
 8018c1c:	b29b      	uxth	r3, r3
 8018c1e:	b21b      	sxth	r3, r3
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	da01      	bge.n	8018c28 <PCD_EP_ISR_Handler+0x7f8>
 8018c24:	f7ff fc0a 	bl	801843c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8018c28:	2300      	movs	r3, #0
}
 8018c2a:	0018      	movs	r0, r3
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	b016      	add	sp, #88	@ 0x58
 8018c30:	bdb0      	pop	{r4, r5, r7, pc}
 8018c32:	46c0      	nop			@ (mov r8, r8)
 8018c34:	00000406 	.word	0x00000406
 8018c38:	00000402 	.word	0x00000402

08018c3c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8018c3c:	b590      	push	{r4, r7, lr}
 8018c3e:	b089      	sub	sp, #36	@ 0x24
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	60f8      	str	r0, [r7, #12]
 8018c44:	60b9      	str	r1, [r7, #8]
 8018c46:	1dbb      	adds	r3, r7, #6
 8018c48:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8018c4a:	1dbb      	adds	r3, r7, #6
 8018c4c:	881a      	ldrh	r2, [r3, #0]
 8018c4e:	2380      	movs	r3, #128	@ 0x80
 8018c50:	01db      	lsls	r3, r3, #7
 8018c52:	4013      	ands	r3, r2
 8018c54:	d100      	bne.n	8018c58 <HAL_PCD_EP_DB_Receive+0x1c>
 8018c56:	e07d      	b.n	8018d54 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	2250      	movs	r2, #80	@ 0x50
 8018c5e:	5a9b      	ldrh	r3, [r3, r2]
 8018c60:	b29b      	uxth	r3, r3
 8018c62:	001a      	movs	r2, r3
 8018c64:	68bb      	ldr	r3, [r7, #8]
 8018c66:	781b      	ldrb	r3, [r3, #0]
 8018c68:	00db      	lsls	r3, r3, #3
 8018c6a:	18d2      	adds	r2, r2, r3
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	18d3      	adds	r3, r2, r3
 8018c72:	4a7a      	ldr	r2, [pc, #488]	@ (8018e5c <HAL_PCD_EP_DB_Receive+0x220>)
 8018c74:	4694      	mov	ip, r2
 8018c76:	4463      	add	r3, ip
 8018c78:	881a      	ldrh	r2, [r3, #0]
 8018c7a:	211a      	movs	r1, #26
 8018c7c:	187b      	adds	r3, r7, r1
 8018c7e:	0592      	lsls	r2, r2, #22
 8018c80:	0d92      	lsrs	r2, r2, #22
 8018c82:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8018c84:	68bb      	ldr	r3, [r7, #8]
 8018c86:	699a      	ldr	r2, [r3, #24]
 8018c88:	187b      	adds	r3, r7, r1
 8018c8a:	881b      	ldrh	r3, [r3, #0]
 8018c8c:	429a      	cmp	r2, r3
 8018c8e:	d307      	bcc.n	8018ca0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8018c90:	68bb      	ldr	r3, [r7, #8]
 8018c92:	699a      	ldr	r2, [r3, #24]
 8018c94:	187b      	adds	r3, r7, r1
 8018c96:	881b      	ldrh	r3, [r3, #0]
 8018c98:	1ad2      	subs	r2, r2, r3
 8018c9a:	68bb      	ldr	r3, [r7, #8]
 8018c9c:	619a      	str	r2, [r3, #24]
 8018c9e:	e002      	b.n	8018ca6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8018ca0:	68bb      	ldr	r3, [r7, #8]
 8018ca2:	2200      	movs	r2, #0
 8018ca4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8018ca6:	68bb      	ldr	r3, [r7, #8]
 8018ca8:	699b      	ldr	r3, [r3, #24]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d121      	bne.n	8018cf2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8018cae:	68fb      	ldr	r3, [r7, #12]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	001a      	movs	r2, r3
 8018cb4:	68bb      	ldr	r3, [r7, #8]
 8018cb6:	781b      	ldrb	r3, [r3, #0]
 8018cb8:	009b      	lsls	r3, r3, #2
 8018cba:	18d3      	adds	r3, r2, r3
 8018cbc:	881b      	ldrh	r3, [r3, #0]
 8018cbe:	b29a      	uxth	r2, r3
 8018cc0:	2018      	movs	r0, #24
 8018cc2:	183b      	adds	r3, r7, r0
 8018cc4:	4966      	ldr	r1, [pc, #408]	@ (8018e60 <HAL_PCD_EP_DB_Receive+0x224>)
 8018cc6:	400a      	ands	r2, r1
 8018cc8:	801a      	strh	r2, [r3, #0]
 8018cca:	183b      	adds	r3, r7, r0
 8018ccc:	183a      	adds	r2, r7, r0
 8018cce:	8812      	ldrh	r2, [r2, #0]
 8018cd0:	2180      	movs	r1, #128	@ 0x80
 8018cd2:	0189      	lsls	r1, r1, #6
 8018cd4:	404a      	eors	r2, r1
 8018cd6:	801a      	strh	r2, [r3, #0]
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	001a      	movs	r2, r3
 8018cde:	68bb      	ldr	r3, [r7, #8]
 8018ce0:	781b      	ldrb	r3, [r3, #0]
 8018ce2:	009b      	lsls	r3, r3, #2
 8018ce4:	18d3      	adds	r3, r2, r3
 8018ce6:	183a      	adds	r2, r7, r0
 8018ce8:	8812      	ldrh	r2, [r2, #0]
 8018cea:	495e      	ldr	r1, [pc, #376]	@ (8018e64 <HAL_PCD_EP_DB_Receive+0x228>)
 8018cec:	430a      	orrs	r2, r1
 8018cee:	b292      	uxth	r2, r2
 8018cf0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8018cf2:	1dbb      	adds	r3, r7, #6
 8018cf4:	881b      	ldrh	r3, [r3, #0]
 8018cf6:	2240      	movs	r2, #64	@ 0x40
 8018cf8:	4013      	ands	r3, r2
 8018cfa:	d01a      	beq.n	8018d32 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	001a      	movs	r2, r3
 8018d02:	68bb      	ldr	r3, [r7, #8]
 8018d04:	781b      	ldrb	r3, [r3, #0]
 8018d06:	009b      	lsls	r3, r3, #2
 8018d08:	18d3      	adds	r3, r2, r3
 8018d0a:	881b      	ldrh	r3, [r3, #0]
 8018d0c:	b29a      	uxth	r2, r3
 8018d0e:	2016      	movs	r0, #22
 8018d10:	183b      	adds	r3, r7, r0
 8018d12:	4955      	ldr	r1, [pc, #340]	@ (8018e68 <HAL_PCD_EP_DB_Receive+0x22c>)
 8018d14:	400a      	ands	r2, r1
 8018d16:	801a      	strh	r2, [r3, #0]
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	001a      	movs	r2, r3
 8018d1e:	68bb      	ldr	r3, [r7, #8]
 8018d20:	781b      	ldrb	r3, [r3, #0]
 8018d22:	009b      	lsls	r3, r3, #2
 8018d24:	18d3      	adds	r3, r2, r3
 8018d26:	183a      	adds	r2, r7, r0
 8018d28:	8812      	ldrh	r2, [r2, #0]
 8018d2a:	4950      	ldr	r1, [pc, #320]	@ (8018e6c <HAL_PCD_EP_DB_Receive+0x230>)
 8018d2c:	430a      	orrs	r2, r1
 8018d2e:	b292      	uxth	r2, r2
 8018d30:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8018d32:	241a      	movs	r4, #26
 8018d34:	193b      	adds	r3, r7, r4
 8018d36:	881b      	ldrh	r3, [r3, #0]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d100      	bne.n	8018d3e <HAL_PCD_EP_DB_Receive+0x102>
 8018d3c:	e086      	b.n	8018e4c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	6818      	ldr	r0, [r3, #0]
 8018d42:	68bb      	ldr	r3, [r7, #8]
 8018d44:	6959      	ldr	r1, [r3, #20]
 8018d46:	68bb      	ldr	r3, [r7, #8]
 8018d48:	891a      	ldrh	r2, [r3, #8]
 8018d4a:	193b      	adds	r3, r7, r4
 8018d4c:	881b      	ldrh	r3, [r3, #0]
 8018d4e:	f006 fe50 	bl	801f9f2 <USB_ReadPMA>
 8018d52:	e07b      	b.n	8018e4c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	2250      	movs	r2, #80	@ 0x50
 8018d5a:	5a9b      	ldrh	r3, [r3, r2]
 8018d5c:	b29b      	uxth	r3, r3
 8018d5e:	001a      	movs	r2, r3
 8018d60:	68bb      	ldr	r3, [r7, #8]
 8018d62:	781b      	ldrb	r3, [r3, #0]
 8018d64:	00db      	lsls	r3, r3, #3
 8018d66:	18d2      	adds	r2, r2, r3
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	18d3      	adds	r3, r2, r3
 8018d6e:	4a40      	ldr	r2, [pc, #256]	@ (8018e70 <HAL_PCD_EP_DB_Receive+0x234>)
 8018d70:	4694      	mov	ip, r2
 8018d72:	4463      	add	r3, ip
 8018d74:	881a      	ldrh	r2, [r3, #0]
 8018d76:	211a      	movs	r1, #26
 8018d78:	187b      	adds	r3, r7, r1
 8018d7a:	0592      	lsls	r2, r2, #22
 8018d7c:	0d92      	lsrs	r2, r2, #22
 8018d7e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8018d80:	68bb      	ldr	r3, [r7, #8]
 8018d82:	699a      	ldr	r2, [r3, #24]
 8018d84:	187b      	adds	r3, r7, r1
 8018d86:	881b      	ldrh	r3, [r3, #0]
 8018d88:	429a      	cmp	r2, r3
 8018d8a:	d307      	bcc.n	8018d9c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8018d8c:	68bb      	ldr	r3, [r7, #8]
 8018d8e:	699a      	ldr	r2, [r3, #24]
 8018d90:	187b      	adds	r3, r7, r1
 8018d92:	881b      	ldrh	r3, [r3, #0]
 8018d94:	1ad2      	subs	r2, r2, r3
 8018d96:	68bb      	ldr	r3, [r7, #8]
 8018d98:	619a      	str	r2, [r3, #24]
 8018d9a:	e002      	b.n	8018da2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8018d9c:	68bb      	ldr	r3, [r7, #8]
 8018d9e:	2200      	movs	r2, #0
 8018da0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8018da2:	68bb      	ldr	r3, [r7, #8]
 8018da4:	699b      	ldr	r3, [r3, #24]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d121      	bne.n	8018dee <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	001a      	movs	r2, r3
 8018db0:	68bb      	ldr	r3, [r7, #8]
 8018db2:	781b      	ldrb	r3, [r3, #0]
 8018db4:	009b      	lsls	r3, r3, #2
 8018db6:	18d3      	adds	r3, r2, r3
 8018db8:	881b      	ldrh	r3, [r3, #0]
 8018dba:	b29a      	uxth	r2, r3
 8018dbc:	201e      	movs	r0, #30
 8018dbe:	183b      	adds	r3, r7, r0
 8018dc0:	4927      	ldr	r1, [pc, #156]	@ (8018e60 <HAL_PCD_EP_DB_Receive+0x224>)
 8018dc2:	400a      	ands	r2, r1
 8018dc4:	801a      	strh	r2, [r3, #0]
 8018dc6:	183b      	adds	r3, r7, r0
 8018dc8:	183a      	adds	r2, r7, r0
 8018dca:	8812      	ldrh	r2, [r2, #0]
 8018dcc:	2180      	movs	r1, #128	@ 0x80
 8018dce:	0189      	lsls	r1, r1, #6
 8018dd0:	404a      	eors	r2, r1
 8018dd2:	801a      	strh	r2, [r3, #0]
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	001a      	movs	r2, r3
 8018dda:	68bb      	ldr	r3, [r7, #8]
 8018ddc:	781b      	ldrb	r3, [r3, #0]
 8018dde:	009b      	lsls	r3, r3, #2
 8018de0:	18d3      	adds	r3, r2, r3
 8018de2:	183a      	adds	r2, r7, r0
 8018de4:	8812      	ldrh	r2, [r2, #0]
 8018de6:	491f      	ldr	r1, [pc, #124]	@ (8018e64 <HAL_PCD_EP_DB_Receive+0x228>)
 8018de8:	430a      	orrs	r2, r1
 8018dea:	b292      	uxth	r2, r2
 8018dec:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8018dee:	1dbb      	adds	r3, r7, #6
 8018df0:	881b      	ldrh	r3, [r3, #0]
 8018df2:	2240      	movs	r2, #64	@ 0x40
 8018df4:	4013      	ands	r3, r2
 8018df6:	d11a      	bne.n	8018e2e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	001a      	movs	r2, r3
 8018dfe:	68bb      	ldr	r3, [r7, #8]
 8018e00:	781b      	ldrb	r3, [r3, #0]
 8018e02:	009b      	lsls	r3, r3, #2
 8018e04:	18d3      	adds	r3, r2, r3
 8018e06:	881b      	ldrh	r3, [r3, #0]
 8018e08:	b29a      	uxth	r2, r3
 8018e0a:	201c      	movs	r0, #28
 8018e0c:	183b      	adds	r3, r7, r0
 8018e0e:	4916      	ldr	r1, [pc, #88]	@ (8018e68 <HAL_PCD_EP_DB_Receive+0x22c>)
 8018e10:	400a      	ands	r2, r1
 8018e12:	801a      	strh	r2, [r3, #0]
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	001a      	movs	r2, r3
 8018e1a:	68bb      	ldr	r3, [r7, #8]
 8018e1c:	781b      	ldrb	r3, [r3, #0]
 8018e1e:	009b      	lsls	r3, r3, #2
 8018e20:	18d3      	adds	r3, r2, r3
 8018e22:	183a      	adds	r2, r7, r0
 8018e24:	8812      	ldrh	r2, [r2, #0]
 8018e26:	4911      	ldr	r1, [pc, #68]	@ (8018e6c <HAL_PCD_EP_DB_Receive+0x230>)
 8018e28:	430a      	orrs	r2, r1
 8018e2a:	b292      	uxth	r2, r2
 8018e2c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8018e2e:	241a      	movs	r4, #26
 8018e30:	193b      	adds	r3, r7, r4
 8018e32:	881b      	ldrh	r3, [r3, #0]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d009      	beq.n	8018e4c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	6818      	ldr	r0, [r3, #0]
 8018e3c:	68bb      	ldr	r3, [r7, #8]
 8018e3e:	6959      	ldr	r1, [r3, #20]
 8018e40:	68bb      	ldr	r3, [r7, #8]
 8018e42:	895a      	ldrh	r2, [r3, #10]
 8018e44:	193b      	adds	r3, r7, r4
 8018e46:	881b      	ldrh	r3, [r3, #0]
 8018e48:	f006 fdd3 	bl	801f9f2 <USB_ReadPMA>
    }
  }

  return count;
 8018e4c:	231a      	movs	r3, #26
 8018e4e:	18fb      	adds	r3, r7, r3
 8018e50:	881b      	ldrh	r3, [r3, #0]
}
 8018e52:	0018      	movs	r0, r3
 8018e54:	46bd      	mov	sp, r7
 8018e56:	b009      	add	sp, #36	@ 0x24
 8018e58:	bd90      	pop	{r4, r7, pc}
 8018e5a:	46c0      	nop			@ (mov r8, r8)
 8018e5c:	00000402 	.word	0x00000402
 8018e60:	ffffbf8f 	.word	0xffffbf8f
 8018e64:	ffff8080 	.word	0xffff8080
 8018e68:	ffff8f8f 	.word	0xffff8f8f
 8018e6c:	ffff80c0 	.word	0xffff80c0
 8018e70:	00000406 	.word	0x00000406

08018e74 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	b0a4      	sub	sp, #144	@ 0x90
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	60f8      	str	r0, [r7, #12]
 8018e7c:	60b9      	str	r1, [r7, #8]
 8018e7e:	1dbb      	adds	r3, r7, #6
 8018e80:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8018e82:	1dbb      	adds	r3, r7, #6
 8018e84:	881b      	ldrh	r3, [r3, #0]
 8018e86:	2240      	movs	r2, #64	@ 0x40
 8018e88:	4013      	ands	r3, r2
 8018e8a:	d100      	bne.n	8018e8e <HAL_PCD_EP_DB_Transmit+0x1a>
 8018e8c:	e1e4      	b.n	8019258 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	2250      	movs	r2, #80	@ 0x50
 8018e94:	5a9b      	ldrh	r3, [r3, r2]
 8018e96:	b29b      	uxth	r3, r3
 8018e98:	001a      	movs	r2, r3
 8018e9a:	68bb      	ldr	r3, [r7, #8]
 8018e9c:	781b      	ldrb	r3, [r3, #0]
 8018e9e:	00db      	lsls	r3, r3, #3
 8018ea0:	18d2      	adds	r2, r2, r3
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	18d3      	adds	r3, r2, r3
 8018ea8:	4ad0      	ldr	r2, [pc, #832]	@ (80191ec <HAL_PCD_EP_DB_Transmit+0x378>)
 8018eaa:	4694      	mov	ip, r2
 8018eac:	4463      	add	r3, ip
 8018eae:	881a      	ldrh	r2, [r3, #0]
 8018eb0:	2186      	movs	r1, #134	@ 0x86
 8018eb2:	187b      	adds	r3, r7, r1
 8018eb4:	0592      	lsls	r2, r2, #22
 8018eb6:	0d92      	lsrs	r2, r2, #22
 8018eb8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8018eba:	68bb      	ldr	r3, [r7, #8]
 8018ebc:	699a      	ldr	r2, [r3, #24]
 8018ebe:	187b      	adds	r3, r7, r1
 8018ec0:	881b      	ldrh	r3, [r3, #0]
 8018ec2:	429a      	cmp	r2, r3
 8018ec4:	d907      	bls.n	8018ed6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8018ec6:	68bb      	ldr	r3, [r7, #8]
 8018ec8:	699a      	ldr	r2, [r3, #24]
 8018eca:	187b      	adds	r3, r7, r1
 8018ecc:	881b      	ldrh	r3, [r3, #0]
 8018ece:	1ad2      	subs	r2, r2, r3
 8018ed0:	68bb      	ldr	r3, [r7, #8]
 8018ed2:	619a      	str	r2, [r3, #24]
 8018ed4:	e002      	b.n	8018edc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8018ed6:	68bb      	ldr	r3, [r7, #8]
 8018ed8:	2200      	movs	r2, #0
 8018eda:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8018edc:	68bb      	ldr	r3, [r7, #8]
 8018ede:	699b      	ldr	r3, [r3, #24]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d000      	beq.n	8018ee6 <HAL_PCD_EP_DB_Transmit+0x72>
 8018ee4:	e0b5      	b.n	8019052 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8018ee6:	68bb      	ldr	r3, [r7, #8]
 8018ee8:	785b      	ldrb	r3, [r3, #1]
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d125      	bne.n	8018f3a <HAL_PCD_EP_DB_Transmit+0xc6>
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018ef4:	68fb      	ldr	r3, [r7, #12]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	2250      	movs	r2, #80	@ 0x50
 8018efa:	5a9b      	ldrh	r3, [r3, r2]
 8018efc:	b29b      	uxth	r3, r3
 8018efe:	001a      	movs	r2, r3
 8018f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f02:	189b      	adds	r3, r3, r2
 8018f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018f06:	68bb      	ldr	r3, [r7, #8]
 8018f08:	781b      	ldrb	r3, [r3, #0]
 8018f0a:	00da      	lsls	r2, r3, #3
 8018f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f0e:	18d3      	adds	r3, r2, r3
 8018f10:	4ab6      	ldr	r2, [pc, #728]	@ (80191ec <HAL_PCD_EP_DB_Transmit+0x378>)
 8018f12:	4694      	mov	ip, r2
 8018f14:	4463      	add	r3, ip
 8018f16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f1a:	881b      	ldrh	r3, [r3, #0]
 8018f1c:	b29b      	uxth	r3, r3
 8018f1e:	059b      	lsls	r3, r3, #22
 8018f20:	0d9b      	lsrs	r3, r3, #22
 8018f22:	b29a      	uxth	r2, r3
 8018f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f26:	801a      	strh	r2, [r3, #0]
 8018f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f2a:	881b      	ldrh	r3, [r3, #0]
 8018f2c:	b29b      	uxth	r3, r3
 8018f2e:	4ab0      	ldr	r2, [pc, #704]	@ (80191f0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8018f30:	4313      	orrs	r3, r2
 8018f32:	b29a      	uxth	r2, r3
 8018f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f36:	801a      	strh	r2, [r3, #0]
 8018f38:	e01b      	b.n	8018f72 <HAL_PCD_EP_DB_Transmit+0xfe>
 8018f3a:	68bb      	ldr	r3, [r7, #8]
 8018f3c:	785b      	ldrb	r3, [r3, #1]
 8018f3e:	2b01      	cmp	r3, #1
 8018f40:	d117      	bne.n	8018f72 <HAL_PCD_EP_DB_Transmit+0xfe>
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	2250      	movs	r2, #80	@ 0x50
 8018f4e:	5a9b      	ldrh	r3, [r3, r2]
 8018f50:	b29b      	uxth	r3, r3
 8018f52:	001a      	movs	r2, r3
 8018f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f56:	189b      	adds	r3, r3, r2
 8018f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8018f5a:	68bb      	ldr	r3, [r7, #8]
 8018f5c:	781b      	ldrb	r3, [r3, #0]
 8018f5e:	00da      	lsls	r2, r3, #3
 8018f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f62:	18d3      	adds	r3, r2, r3
 8018f64:	4aa1      	ldr	r2, [pc, #644]	@ (80191ec <HAL_PCD_EP_DB_Transmit+0x378>)
 8018f66:	4694      	mov	ip, r2
 8018f68:	4463      	add	r3, ip
 8018f6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8018f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f6e:	2200      	movs	r2, #0
 8018f70:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8018f72:	68fb      	ldr	r3, [r7, #12]
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8018f78:	68bb      	ldr	r3, [r7, #8]
 8018f7a:	785b      	ldrb	r3, [r3, #1]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d125      	bne.n	8018fcc <HAL_PCD_EP_DB_Transmit+0x158>
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	61fb      	str	r3, [r7, #28]
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	2250      	movs	r2, #80	@ 0x50
 8018f8c:	5a9b      	ldrh	r3, [r3, r2]
 8018f8e:	b29b      	uxth	r3, r3
 8018f90:	001a      	movs	r2, r3
 8018f92:	69fb      	ldr	r3, [r7, #28]
 8018f94:	189b      	adds	r3, r3, r2
 8018f96:	61fb      	str	r3, [r7, #28]
 8018f98:	68bb      	ldr	r3, [r7, #8]
 8018f9a:	781b      	ldrb	r3, [r3, #0]
 8018f9c:	00da      	lsls	r2, r3, #3
 8018f9e:	69fb      	ldr	r3, [r7, #28]
 8018fa0:	18d3      	adds	r3, r2, r3
 8018fa2:	4a94      	ldr	r2, [pc, #592]	@ (80191f4 <HAL_PCD_EP_DB_Transmit+0x380>)
 8018fa4:	4694      	mov	ip, r2
 8018fa6:	4463      	add	r3, ip
 8018fa8:	61bb      	str	r3, [r7, #24]
 8018faa:	69bb      	ldr	r3, [r7, #24]
 8018fac:	881b      	ldrh	r3, [r3, #0]
 8018fae:	b29b      	uxth	r3, r3
 8018fb0:	059b      	lsls	r3, r3, #22
 8018fb2:	0d9b      	lsrs	r3, r3, #22
 8018fb4:	b29a      	uxth	r2, r3
 8018fb6:	69bb      	ldr	r3, [r7, #24]
 8018fb8:	801a      	strh	r2, [r3, #0]
 8018fba:	69bb      	ldr	r3, [r7, #24]
 8018fbc:	881b      	ldrh	r3, [r3, #0]
 8018fbe:	b29b      	uxth	r3, r3
 8018fc0:	4a8b      	ldr	r2, [pc, #556]	@ (80191f0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8018fc2:	4313      	orrs	r3, r2
 8018fc4:	b29a      	uxth	r2, r3
 8018fc6:	69bb      	ldr	r3, [r7, #24]
 8018fc8:	801a      	strh	r2, [r3, #0]
 8018fca:	e018      	b.n	8018ffe <HAL_PCD_EP_DB_Transmit+0x18a>
 8018fcc:	68bb      	ldr	r3, [r7, #8]
 8018fce:	785b      	ldrb	r3, [r3, #1]
 8018fd0:	2b01      	cmp	r3, #1
 8018fd2:	d114      	bne.n	8018ffe <HAL_PCD_EP_DB_Transmit+0x18a>
 8018fd4:	68fb      	ldr	r3, [r7, #12]
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	2250      	movs	r2, #80	@ 0x50
 8018fda:	5a9b      	ldrh	r3, [r3, r2]
 8018fdc:	b29b      	uxth	r3, r3
 8018fde:	001a      	movs	r2, r3
 8018fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fe2:	189b      	adds	r3, r3, r2
 8018fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8018fe6:	68bb      	ldr	r3, [r7, #8]
 8018fe8:	781b      	ldrb	r3, [r3, #0]
 8018fea:	00da      	lsls	r2, r3, #3
 8018fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fee:	18d3      	adds	r3, r2, r3
 8018ff0:	4a80      	ldr	r2, [pc, #512]	@ (80191f4 <HAL_PCD_EP_DB_Transmit+0x380>)
 8018ff2:	4694      	mov	ip, r2
 8018ff4:	4463      	add	r3, ip
 8018ff6:	623b      	str	r3, [r7, #32]
 8018ff8:	6a3b      	ldr	r3, [r7, #32]
 8018ffa:	2200      	movs	r2, #0
 8018ffc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8018ffe:	68bb      	ldr	r3, [r7, #8]
 8019000:	781a      	ldrb	r2, [r3, #0]
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	0011      	movs	r1, r2
 8019006:	0018      	movs	r0, r3
 8019008:	f008 fd2e 	bl	8021a68 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801900c:	1dbb      	adds	r3, r7, #6
 801900e:	881a      	ldrh	r2, [r3, #0]
 8019010:	2380      	movs	r3, #128	@ 0x80
 8019012:	01db      	lsls	r3, r3, #7
 8019014:	4013      	ands	r3, r2
 8019016:	d100      	bne.n	801901a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8019018:	e309      	b.n	801962e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	001a      	movs	r2, r3
 8019020:	68bb      	ldr	r3, [r7, #8]
 8019022:	781b      	ldrb	r3, [r3, #0]
 8019024:	009b      	lsls	r3, r3, #2
 8019026:	18d3      	adds	r3, r2, r3
 8019028:	881b      	ldrh	r3, [r3, #0]
 801902a:	b29a      	uxth	r2, r3
 801902c:	2016      	movs	r0, #22
 801902e:	183b      	adds	r3, r7, r0
 8019030:	4971      	ldr	r1, [pc, #452]	@ (80191f8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8019032:	400a      	ands	r2, r1
 8019034:	801a      	strh	r2, [r3, #0]
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	001a      	movs	r2, r3
 801903c:	68bb      	ldr	r3, [r7, #8]
 801903e:	781b      	ldrb	r3, [r3, #0]
 8019040:	009b      	lsls	r3, r3, #2
 8019042:	18d3      	adds	r3, r2, r3
 8019044:	183a      	adds	r2, r7, r0
 8019046:	8812      	ldrh	r2, [r2, #0]
 8019048:	496c      	ldr	r1, [pc, #432]	@ (80191fc <HAL_PCD_EP_DB_Transmit+0x388>)
 801904a:	430a      	orrs	r2, r1
 801904c:	b292      	uxth	r2, r2
 801904e:	801a      	strh	r2, [r3, #0]
 8019050:	e2ed      	b.n	801962e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8019052:	1dbb      	adds	r3, r7, #6
 8019054:	881a      	ldrh	r2, [r3, #0]
 8019056:	2380      	movs	r3, #128	@ 0x80
 8019058:	01db      	lsls	r3, r3, #7
 801905a:	4013      	ands	r3, r2
 801905c:	d01a      	beq.n	8019094 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	001a      	movs	r2, r3
 8019064:	68bb      	ldr	r3, [r7, #8]
 8019066:	781b      	ldrb	r3, [r3, #0]
 8019068:	009b      	lsls	r3, r3, #2
 801906a:	18d3      	adds	r3, r2, r3
 801906c:	881b      	ldrh	r3, [r3, #0]
 801906e:	b29a      	uxth	r2, r3
 8019070:	208a      	movs	r0, #138	@ 0x8a
 8019072:	183b      	adds	r3, r7, r0
 8019074:	4960      	ldr	r1, [pc, #384]	@ (80191f8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8019076:	400a      	ands	r2, r1
 8019078:	801a      	strh	r2, [r3, #0]
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	001a      	movs	r2, r3
 8019080:	68bb      	ldr	r3, [r7, #8]
 8019082:	781b      	ldrb	r3, [r3, #0]
 8019084:	009b      	lsls	r3, r3, #2
 8019086:	18d3      	adds	r3, r2, r3
 8019088:	183a      	adds	r2, r7, r0
 801908a:	8812      	ldrh	r2, [r2, #0]
 801908c:	495b      	ldr	r1, [pc, #364]	@ (80191fc <HAL_PCD_EP_DB_Transmit+0x388>)
 801908e:	430a      	orrs	r2, r1
 8019090:	b292      	uxth	r2, r2
 8019092:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8019094:	68bb      	ldr	r3, [r7, #8]
 8019096:	2224      	movs	r2, #36	@ 0x24
 8019098:	5c9b      	ldrb	r3, [r3, r2]
 801909a:	2b01      	cmp	r3, #1
 801909c:	d000      	beq.n	80190a0 <HAL_PCD_EP_DB_Transmit+0x22c>
 801909e:	e2c6      	b.n	801962e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80190a0:	68bb      	ldr	r3, [r7, #8]
 80190a2:	695a      	ldr	r2, [r3, #20]
 80190a4:	2186      	movs	r1, #134	@ 0x86
 80190a6:	187b      	adds	r3, r7, r1
 80190a8:	881b      	ldrh	r3, [r3, #0]
 80190aa:	18d2      	adds	r2, r2, r3
 80190ac:	68bb      	ldr	r3, [r7, #8]
 80190ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80190b0:	68bb      	ldr	r3, [r7, #8]
 80190b2:	69da      	ldr	r2, [r3, #28]
 80190b4:	187b      	adds	r3, r7, r1
 80190b6:	881b      	ldrh	r3, [r3, #0]
 80190b8:	18d2      	adds	r2, r2, r3
 80190ba:	68bb      	ldr	r3, [r7, #8]
 80190bc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80190be:	68bb      	ldr	r3, [r7, #8]
 80190c0:	6a1a      	ldr	r2, [r3, #32]
 80190c2:	68bb      	ldr	r3, [r7, #8]
 80190c4:	691b      	ldr	r3, [r3, #16]
 80190c6:	429a      	cmp	r2, r3
 80190c8:	d30c      	bcc.n	80190e4 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80190ca:	68bb      	ldr	r3, [r7, #8]
 80190cc:	691b      	ldr	r3, [r3, #16]
 80190ce:	218c      	movs	r1, #140	@ 0x8c
 80190d0:	187a      	adds	r2, r7, r1
 80190d2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80190d4:	68bb      	ldr	r3, [r7, #8]
 80190d6:	6a1a      	ldr	r2, [r3, #32]
 80190d8:	187b      	adds	r3, r7, r1
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	1ad2      	subs	r2, r2, r3
 80190de:	68bb      	ldr	r3, [r7, #8]
 80190e0:	621a      	str	r2, [r3, #32]
 80190e2:	e01a      	b.n	801911a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80190e4:	68bb      	ldr	r3, [r7, #8]
 80190e6:	6a1b      	ldr	r3, [r3, #32]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d10a      	bne.n	8019102 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80190ec:	2386      	movs	r3, #134	@ 0x86
 80190ee:	18fb      	adds	r3, r7, r3
 80190f0:	881b      	ldrh	r3, [r3, #0]
 80190f2:	228c      	movs	r2, #140	@ 0x8c
 80190f4:	18ba      	adds	r2, r7, r2
 80190f6:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80190f8:	68bb      	ldr	r3, [r7, #8]
 80190fa:	2224      	movs	r2, #36	@ 0x24
 80190fc:	2100      	movs	r1, #0
 80190fe:	5499      	strb	r1, [r3, r2]
 8019100:	e00b      	b.n	801911a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8019102:	68bb      	ldr	r3, [r7, #8]
 8019104:	2224      	movs	r2, #36	@ 0x24
 8019106:	2100      	movs	r1, #0
 8019108:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801910a:	68bb      	ldr	r3, [r7, #8]
 801910c:	6a1b      	ldr	r3, [r3, #32]
 801910e:	228c      	movs	r2, #140	@ 0x8c
 8019110:	18ba      	adds	r2, r7, r2
 8019112:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8019114:	68bb      	ldr	r3, [r7, #8]
 8019116:	2200      	movs	r2, #0
 8019118:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801911a:	68bb      	ldr	r3, [r7, #8]
 801911c:	785b      	ldrb	r3, [r3, #1]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d000      	beq.n	8019124 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8019122:	e06d      	b.n	8019200 <HAL_PCD_EP_DB_Transmit+0x38c>
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	2250      	movs	r2, #80	@ 0x50
 8019130:	5a9b      	ldrh	r3, [r3, r2]
 8019132:	b29b      	uxth	r3, r3
 8019134:	001a      	movs	r2, r3
 8019136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019138:	189b      	adds	r3, r3, r2
 801913a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801913c:	68bb      	ldr	r3, [r7, #8]
 801913e:	781b      	ldrb	r3, [r3, #0]
 8019140:	00da      	lsls	r2, r3, #3
 8019142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019144:	18d3      	adds	r3, r2, r3
 8019146:	4a29      	ldr	r2, [pc, #164]	@ (80191ec <HAL_PCD_EP_DB_Transmit+0x378>)
 8019148:	4694      	mov	ip, r2
 801914a:	4463      	add	r3, ip
 801914c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801914e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019150:	881b      	ldrh	r3, [r3, #0]
 8019152:	b29b      	uxth	r3, r3
 8019154:	059b      	lsls	r3, r3, #22
 8019156:	0d9b      	lsrs	r3, r3, #22
 8019158:	b29a      	uxth	r2, r3
 801915a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801915c:	801a      	strh	r2, [r3, #0]
 801915e:	228c      	movs	r2, #140	@ 0x8c
 8019160:	18bb      	adds	r3, r7, r2
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	2b3e      	cmp	r3, #62	@ 0x3e
 8019166:	d91a      	bls.n	801919e <HAL_PCD_EP_DB_Transmit+0x32a>
 8019168:	18bb      	adds	r3, r7, r2
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	095b      	lsrs	r3, r3, #5
 801916e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019170:	18bb      	adds	r3, r7, r2
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	221f      	movs	r2, #31
 8019176:	4013      	ands	r3, r2
 8019178:	d102      	bne.n	8019180 <HAL_PCD_EP_DB_Transmit+0x30c>
 801917a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801917c:	3b01      	subs	r3, #1
 801917e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019182:	881b      	ldrh	r3, [r3, #0]
 8019184:	b29a      	uxth	r2, r3
 8019186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019188:	b29b      	uxth	r3, r3
 801918a:	029b      	lsls	r3, r3, #10
 801918c:	b29b      	uxth	r3, r3
 801918e:	4313      	orrs	r3, r2
 8019190:	b29b      	uxth	r3, r3
 8019192:	4a17      	ldr	r2, [pc, #92]	@ (80191f0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019194:	4313      	orrs	r3, r2
 8019196:	b29a      	uxth	r2, r3
 8019198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801919a:	801a      	strh	r2, [r3, #0]
 801919c:	e04f      	b.n	801923e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801919e:	238c      	movs	r3, #140	@ 0x8c
 80191a0:	18fb      	adds	r3, r7, r3
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d108      	bne.n	80191ba <HAL_PCD_EP_DB_Transmit+0x346>
 80191a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191aa:	881b      	ldrh	r3, [r3, #0]
 80191ac:	b29b      	uxth	r3, r3
 80191ae:	4a10      	ldr	r2, [pc, #64]	@ (80191f0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80191b0:	4313      	orrs	r3, r2
 80191b2:	b29a      	uxth	r2, r3
 80191b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191b6:	801a      	strh	r2, [r3, #0]
 80191b8:	e041      	b.n	801923e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80191ba:	228c      	movs	r2, #140	@ 0x8c
 80191bc:	18bb      	adds	r3, r7, r2
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	085b      	lsrs	r3, r3, #1
 80191c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80191c4:	18bb      	adds	r3, r7, r2
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	2201      	movs	r2, #1
 80191ca:	4013      	ands	r3, r2
 80191cc:	d002      	beq.n	80191d4 <HAL_PCD_EP_DB_Transmit+0x360>
 80191ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80191d0:	3301      	adds	r3, #1
 80191d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80191d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191d6:	881b      	ldrh	r3, [r3, #0]
 80191d8:	b29a      	uxth	r2, r3
 80191da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80191dc:	b29b      	uxth	r3, r3
 80191de:	029b      	lsls	r3, r3, #10
 80191e0:	b29b      	uxth	r3, r3
 80191e2:	4313      	orrs	r3, r2
 80191e4:	b29a      	uxth	r2, r3
 80191e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191e8:	801a      	strh	r2, [r3, #0]
 80191ea:	e028      	b.n	801923e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80191ec:	00000402 	.word	0x00000402
 80191f0:	ffff8000 	.word	0xffff8000
 80191f4:	00000406 	.word	0x00000406
 80191f8:	ffff8f8f 	.word	0xffff8f8f
 80191fc:	ffffc080 	.word	0xffffc080
 8019200:	68bb      	ldr	r3, [r7, #8]
 8019202:	785b      	ldrb	r3, [r3, #1]
 8019204:	2b01      	cmp	r3, #1
 8019206:	d11a      	bne.n	801923e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	647b      	str	r3, [r7, #68]	@ 0x44
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	2250      	movs	r2, #80	@ 0x50
 8019214:	5a9b      	ldrh	r3, [r3, r2]
 8019216:	b29b      	uxth	r3, r3
 8019218:	001a      	movs	r2, r3
 801921a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801921c:	189b      	adds	r3, r3, r2
 801921e:	647b      	str	r3, [r7, #68]	@ 0x44
 8019220:	68bb      	ldr	r3, [r7, #8]
 8019222:	781b      	ldrb	r3, [r3, #0]
 8019224:	00da      	lsls	r2, r3, #3
 8019226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019228:	18d3      	adds	r3, r2, r3
 801922a:	4adb      	ldr	r2, [pc, #876]	@ (8019598 <HAL_PCD_EP_DB_Transmit+0x724>)
 801922c:	4694      	mov	ip, r2
 801922e:	4463      	add	r3, ip
 8019230:	643b      	str	r3, [r7, #64]	@ 0x40
 8019232:	238c      	movs	r3, #140	@ 0x8c
 8019234:	18fb      	adds	r3, r7, r3
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	b29a      	uxth	r2, r3
 801923a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801923c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	6818      	ldr	r0, [r3, #0]
 8019242:	68bb      	ldr	r3, [r7, #8]
 8019244:	6959      	ldr	r1, [r3, #20]
 8019246:	68bb      	ldr	r3, [r7, #8]
 8019248:	891a      	ldrh	r2, [r3, #8]
 801924a:	238c      	movs	r3, #140	@ 0x8c
 801924c:	18fb      	adds	r3, r7, r3
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	b29b      	uxth	r3, r3
 8019252:	f006 fb85 	bl	801f960 <USB_WritePMA>
 8019256:	e1ea      	b.n	801962e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	2250      	movs	r2, #80	@ 0x50
 801925e:	5a9b      	ldrh	r3, [r3, r2]
 8019260:	b29b      	uxth	r3, r3
 8019262:	001a      	movs	r2, r3
 8019264:	68bb      	ldr	r3, [r7, #8]
 8019266:	781b      	ldrb	r3, [r3, #0]
 8019268:	00db      	lsls	r3, r3, #3
 801926a:	18d2      	adds	r2, r2, r3
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	18d3      	adds	r3, r2, r3
 8019272:	4aca      	ldr	r2, [pc, #808]	@ (801959c <HAL_PCD_EP_DB_Transmit+0x728>)
 8019274:	4694      	mov	ip, r2
 8019276:	4463      	add	r3, ip
 8019278:	881a      	ldrh	r2, [r3, #0]
 801927a:	2186      	movs	r1, #134	@ 0x86
 801927c:	187b      	adds	r3, r7, r1
 801927e:	0592      	lsls	r2, r2, #22
 8019280:	0d92      	lsrs	r2, r2, #22
 8019282:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8019284:	68bb      	ldr	r3, [r7, #8]
 8019286:	699a      	ldr	r2, [r3, #24]
 8019288:	187b      	adds	r3, r7, r1
 801928a:	881b      	ldrh	r3, [r3, #0]
 801928c:	429a      	cmp	r2, r3
 801928e:	d307      	bcc.n	80192a0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8019290:	68bb      	ldr	r3, [r7, #8]
 8019292:	699a      	ldr	r2, [r3, #24]
 8019294:	187b      	adds	r3, r7, r1
 8019296:	881b      	ldrh	r3, [r3, #0]
 8019298:	1ad2      	subs	r2, r2, r3
 801929a:	68bb      	ldr	r3, [r7, #8]
 801929c:	619a      	str	r2, [r3, #24]
 801929e:	e002      	b.n	80192a6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80192a0:	68bb      	ldr	r3, [r7, #8]
 80192a2:	2200      	movs	r2, #0
 80192a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80192a6:	68bb      	ldr	r3, [r7, #8]
 80192a8:	699b      	ldr	r3, [r3, #24]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d000      	beq.n	80192b0 <HAL_PCD_EP_DB_Transmit+0x43c>
 80192ae:	e0bb      	b.n	8019428 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80192b0:	68bb      	ldr	r3, [r7, #8]
 80192b2:	785b      	ldrb	r3, [r3, #1]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d125      	bne.n	8019304 <HAL_PCD_EP_DB_Transmit+0x490>
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	2250      	movs	r2, #80	@ 0x50
 80192c4:	5a9b      	ldrh	r3, [r3, r2]
 80192c6:	b29b      	uxth	r3, r3
 80192c8:	001a      	movs	r2, r3
 80192ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80192cc:	189b      	adds	r3, r3, r2
 80192ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80192d0:	68bb      	ldr	r3, [r7, #8]
 80192d2:	781b      	ldrb	r3, [r3, #0]
 80192d4:	00da      	lsls	r2, r3, #3
 80192d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80192d8:	18d3      	adds	r3, r2, r3
 80192da:	4aaf      	ldr	r2, [pc, #700]	@ (8019598 <HAL_PCD_EP_DB_Transmit+0x724>)
 80192dc:	4694      	mov	ip, r2
 80192de:	4463      	add	r3, ip
 80192e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80192e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80192e4:	881b      	ldrh	r3, [r3, #0]
 80192e6:	b29b      	uxth	r3, r3
 80192e8:	059b      	lsls	r3, r3, #22
 80192ea:	0d9b      	lsrs	r3, r3, #22
 80192ec:	b29a      	uxth	r2, r3
 80192ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80192f0:	801a      	strh	r2, [r3, #0]
 80192f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80192f4:	881b      	ldrh	r3, [r3, #0]
 80192f6:	b29b      	uxth	r3, r3
 80192f8:	4aa9      	ldr	r2, [pc, #676]	@ (80195a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80192fa:	4313      	orrs	r3, r2
 80192fc:	b29a      	uxth	r2, r3
 80192fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019300:	801a      	strh	r2, [r3, #0]
 8019302:	e01b      	b.n	801933c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8019304:	68bb      	ldr	r3, [r7, #8]
 8019306:	785b      	ldrb	r3, [r3, #1]
 8019308:	2b01      	cmp	r3, #1
 801930a:	d117      	bne.n	801933c <HAL_PCD_EP_DB_Transmit+0x4c8>
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	667b      	str	r3, [r7, #100]	@ 0x64
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	2250      	movs	r2, #80	@ 0x50
 8019318:	5a9b      	ldrh	r3, [r3, r2]
 801931a:	b29b      	uxth	r3, r3
 801931c:	001a      	movs	r2, r3
 801931e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019320:	189b      	adds	r3, r3, r2
 8019322:	667b      	str	r3, [r7, #100]	@ 0x64
 8019324:	68bb      	ldr	r3, [r7, #8]
 8019326:	781b      	ldrb	r3, [r3, #0]
 8019328:	00da      	lsls	r2, r3, #3
 801932a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801932c:	18d3      	adds	r3, r2, r3
 801932e:	4a9a      	ldr	r2, [pc, #616]	@ (8019598 <HAL_PCD_EP_DB_Transmit+0x724>)
 8019330:	4694      	mov	ip, r2
 8019332:	4463      	add	r3, ip
 8019334:	663b      	str	r3, [r7, #96]	@ 0x60
 8019336:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019338:	2200      	movs	r2, #0
 801933a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	677b      	str	r3, [r7, #116]	@ 0x74
 8019342:	68bb      	ldr	r3, [r7, #8]
 8019344:	785b      	ldrb	r3, [r3, #1]
 8019346:	2b00      	cmp	r3, #0
 8019348:	d12b      	bne.n	80193a2 <HAL_PCD_EP_DB_Transmit+0x52e>
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	2250      	movs	r2, #80	@ 0x50
 8019356:	5a9b      	ldrh	r3, [r3, r2]
 8019358:	b29b      	uxth	r3, r3
 801935a:	001a      	movs	r2, r3
 801935c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801935e:	189b      	adds	r3, r3, r2
 8019360:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019362:	68bb      	ldr	r3, [r7, #8]
 8019364:	781b      	ldrb	r3, [r3, #0]
 8019366:	00da      	lsls	r2, r3, #3
 8019368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801936a:	18d3      	adds	r3, r2, r3
 801936c:	4a8b      	ldr	r2, [pc, #556]	@ (801959c <HAL_PCD_EP_DB_Transmit+0x728>)
 801936e:	4694      	mov	ip, r2
 8019370:	4463      	add	r3, ip
 8019372:	2180      	movs	r1, #128	@ 0x80
 8019374:	187a      	adds	r2, r7, r1
 8019376:	6013      	str	r3, [r2, #0]
 8019378:	187b      	adds	r3, r7, r1
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	881b      	ldrh	r3, [r3, #0]
 801937e:	b29b      	uxth	r3, r3
 8019380:	059b      	lsls	r3, r3, #22
 8019382:	0d9b      	lsrs	r3, r3, #22
 8019384:	b29a      	uxth	r2, r3
 8019386:	187b      	adds	r3, r7, r1
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	801a      	strh	r2, [r3, #0]
 801938c:	187b      	adds	r3, r7, r1
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	881b      	ldrh	r3, [r3, #0]
 8019392:	b29b      	uxth	r3, r3
 8019394:	4a82      	ldr	r2, [pc, #520]	@ (80195a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8019396:	4313      	orrs	r3, r2
 8019398:	b29a      	uxth	r2, r3
 801939a:	187b      	adds	r3, r7, r1
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	801a      	strh	r2, [r3, #0]
 80193a0:	e018      	b.n	80193d4 <HAL_PCD_EP_DB_Transmit+0x560>
 80193a2:	68bb      	ldr	r3, [r7, #8]
 80193a4:	785b      	ldrb	r3, [r3, #1]
 80193a6:	2b01      	cmp	r3, #1
 80193a8:	d114      	bne.n	80193d4 <HAL_PCD_EP_DB_Transmit+0x560>
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	2250      	movs	r2, #80	@ 0x50
 80193b0:	5a9b      	ldrh	r3, [r3, r2]
 80193b2:	b29b      	uxth	r3, r3
 80193b4:	001a      	movs	r2, r3
 80193b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80193b8:	189b      	adds	r3, r3, r2
 80193ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80193bc:	68bb      	ldr	r3, [r7, #8]
 80193be:	781b      	ldrb	r3, [r3, #0]
 80193c0:	00da      	lsls	r2, r3, #3
 80193c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80193c4:	18d3      	adds	r3, r2, r3
 80193c6:	4a75      	ldr	r2, [pc, #468]	@ (801959c <HAL_PCD_EP_DB_Transmit+0x728>)
 80193c8:	4694      	mov	ip, r2
 80193ca:	4463      	add	r3, ip
 80193cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80193ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80193d0:	2200      	movs	r2, #0
 80193d2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80193d4:	68bb      	ldr	r3, [r7, #8]
 80193d6:	781a      	ldrb	r2, [r3, #0]
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	0011      	movs	r1, r2
 80193dc:	0018      	movs	r0, r3
 80193de:	f008 fb43 	bl	8021a68 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80193e2:	1dbb      	adds	r3, r7, #6
 80193e4:	881a      	ldrh	r2, [r3, #0]
 80193e6:	2380      	movs	r3, #128	@ 0x80
 80193e8:	01db      	lsls	r3, r3, #7
 80193ea:	4013      	ands	r3, r2
 80193ec:	d000      	beq.n	80193f0 <HAL_PCD_EP_DB_Transmit+0x57c>
 80193ee:	e11e      	b.n	801962e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80193f0:	68fb      	ldr	r3, [r7, #12]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	001a      	movs	r2, r3
 80193f6:	68bb      	ldr	r3, [r7, #8]
 80193f8:	781b      	ldrb	r3, [r3, #0]
 80193fa:	009b      	lsls	r3, r3, #2
 80193fc:	18d3      	adds	r3, r2, r3
 80193fe:	881b      	ldrh	r3, [r3, #0]
 8019400:	b29a      	uxth	r2, r3
 8019402:	2088      	movs	r0, #136	@ 0x88
 8019404:	183b      	adds	r3, r7, r0
 8019406:	4967      	ldr	r1, [pc, #412]	@ (80195a4 <HAL_PCD_EP_DB_Transmit+0x730>)
 8019408:	400a      	ands	r2, r1
 801940a:	801a      	strh	r2, [r3, #0]
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	001a      	movs	r2, r3
 8019412:	68bb      	ldr	r3, [r7, #8]
 8019414:	781b      	ldrb	r3, [r3, #0]
 8019416:	009b      	lsls	r3, r3, #2
 8019418:	18d3      	adds	r3, r2, r3
 801941a:	183a      	adds	r2, r7, r0
 801941c:	8812      	ldrh	r2, [r2, #0]
 801941e:	4962      	ldr	r1, [pc, #392]	@ (80195a8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8019420:	430a      	orrs	r2, r1
 8019422:	b292      	uxth	r2, r2
 8019424:	801a      	strh	r2, [r3, #0]
 8019426:	e102      	b.n	801962e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8019428:	1dbb      	adds	r3, r7, #6
 801942a:	881a      	ldrh	r2, [r3, #0]
 801942c:	2380      	movs	r3, #128	@ 0x80
 801942e:	01db      	lsls	r3, r3, #7
 8019430:	4013      	ands	r3, r2
 8019432:	d11a      	bne.n	801946a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	001a      	movs	r2, r3
 801943a:	68bb      	ldr	r3, [r7, #8]
 801943c:	781b      	ldrb	r3, [r3, #0]
 801943e:	009b      	lsls	r3, r3, #2
 8019440:	18d3      	adds	r3, r2, r3
 8019442:	881b      	ldrh	r3, [r3, #0]
 8019444:	b29a      	uxth	r2, r3
 8019446:	204e      	movs	r0, #78	@ 0x4e
 8019448:	183b      	adds	r3, r7, r0
 801944a:	4956      	ldr	r1, [pc, #344]	@ (80195a4 <HAL_PCD_EP_DB_Transmit+0x730>)
 801944c:	400a      	ands	r2, r1
 801944e:	801a      	strh	r2, [r3, #0]
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	001a      	movs	r2, r3
 8019456:	68bb      	ldr	r3, [r7, #8]
 8019458:	781b      	ldrb	r3, [r3, #0]
 801945a:	009b      	lsls	r3, r3, #2
 801945c:	18d3      	adds	r3, r2, r3
 801945e:	183a      	adds	r2, r7, r0
 8019460:	8812      	ldrh	r2, [r2, #0]
 8019462:	4951      	ldr	r1, [pc, #324]	@ (80195a8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8019464:	430a      	orrs	r2, r1
 8019466:	b292      	uxth	r2, r2
 8019468:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801946a:	68bb      	ldr	r3, [r7, #8]
 801946c:	2224      	movs	r2, #36	@ 0x24
 801946e:	5c9b      	ldrb	r3, [r3, r2]
 8019470:	2b01      	cmp	r3, #1
 8019472:	d000      	beq.n	8019476 <HAL_PCD_EP_DB_Transmit+0x602>
 8019474:	e0db      	b.n	801962e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8019476:	68bb      	ldr	r3, [r7, #8]
 8019478:	695a      	ldr	r2, [r3, #20]
 801947a:	2186      	movs	r1, #134	@ 0x86
 801947c:	187b      	adds	r3, r7, r1
 801947e:	881b      	ldrh	r3, [r3, #0]
 8019480:	18d2      	adds	r2, r2, r3
 8019482:	68bb      	ldr	r3, [r7, #8]
 8019484:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8019486:	68bb      	ldr	r3, [r7, #8]
 8019488:	69da      	ldr	r2, [r3, #28]
 801948a:	187b      	adds	r3, r7, r1
 801948c:	881b      	ldrh	r3, [r3, #0]
 801948e:	18d2      	adds	r2, r2, r3
 8019490:	68bb      	ldr	r3, [r7, #8]
 8019492:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8019494:	68bb      	ldr	r3, [r7, #8]
 8019496:	6a1a      	ldr	r2, [r3, #32]
 8019498:	68bb      	ldr	r3, [r7, #8]
 801949a:	691b      	ldr	r3, [r3, #16]
 801949c:	429a      	cmp	r2, r3
 801949e:	d30c      	bcc.n	80194ba <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80194a0:	68bb      	ldr	r3, [r7, #8]
 80194a2:	691b      	ldr	r3, [r3, #16]
 80194a4:	218c      	movs	r1, #140	@ 0x8c
 80194a6:	187a      	adds	r2, r7, r1
 80194a8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80194aa:	68bb      	ldr	r3, [r7, #8]
 80194ac:	6a1a      	ldr	r2, [r3, #32]
 80194ae:	187b      	adds	r3, r7, r1
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	1ad2      	subs	r2, r2, r3
 80194b4:	68bb      	ldr	r3, [r7, #8]
 80194b6:	621a      	str	r2, [r3, #32]
 80194b8:	e01a      	b.n	80194f0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80194ba:	68bb      	ldr	r3, [r7, #8]
 80194bc:	6a1b      	ldr	r3, [r3, #32]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d10a      	bne.n	80194d8 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80194c2:	2386      	movs	r3, #134	@ 0x86
 80194c4:	18fb      	adds	r3, r7, r3
 80194c6:	881b      	ldrh	r3, [r3, #0]
 80194c8:	228c      	movs	r2, #140	@ 0x8c
 80194ca:	18ba      	adds	r2, r7, r2
 80194cc:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80194ce:	68bb      	ldr	r3, [r7, #8]
 80194d0:	2224      	movs	r2, #36	@ 0x24
 80194d2:	2100      	movs	r1, #0
 80194d4:	5499      	strb	r1, [r3, r2]
 80194d6:	e00b      	b.n	80194f0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80194d8:	68bb      	ldr	r3, [r7, #8]
 80194da:	6a1b      	ldr	r3, [r3, #32]
 80194dc:	228c      	movs	r2, #140	@ 0x8c
 80194de:	18ba      	adds	r2, r7, r2
 80194e0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80194e2:	68bb      	ldr	r3, [r7, #8]
 80194e4:	2200      	movs	r2, #0
 80194e6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80194e8:	68bb      	ldr	r3, [r7, #8]
 80194ea:	2224      	movs	r2, #36	@ 0x24
 80194ec:	2100      	movs	r1, #0
 80194ee:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80194f6:	68bb      	ldr	r3, [r7, #8]
 80194f8:	785b      	ldrb	r3, [r3, #1]
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d000      	beq.n	8019500 <HAL_PCD_EP_DB_Transmit+0x68c>
 80194fe:	e06e      	b.n	80195de <HAL_PCD_EP_DB_Transmit+0x76a>
 8019500:	68fb      	ldr	r3, [r7, #12]
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	2250      	movs	r2, #80	@ 0x50
 801950c:	5a9b      	ldrh	r3, [r3, r2]
 801950e:	b29b      	uxth	r3, r3
 8019510:	001a      	movs	r2, r3
 8019512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019514:	189b      	adds	r3, r3, r2
 8019516:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019518:	68bb      	ldr	r3, [r7, #8]
 801951a:	781b      	ldrb	r3, [r3, #0]
 801951c:	00da      	lsls	r2, r3, #3
 801951e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019520:	18d3      	adds	r3, r2, r3
 8019522:	4a1e      	ldr	r2, [pc, #120]	@ (801959c <HAL_PCD_EP_DB_Transmit+0x728>)
 8019524:	4694      	mov	ip, r2
 8019526:	4463      	add	r3, ip
 8019528:	65bb      	str	r3, [r7, #88]	@ 0x58
 801952a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801952c:	881b      	ldrh	r3, [r3, #0]
 801952e:	b29b      	uxth	r3, r3
 8019530:	059b      	lsls	r3, r3, #22
 8019532:	0d9b      	lsrs	r3, r3, #22
 8019534:	b29a      	uxth	r2, r3
 8019536:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019538:	801a      	strh	r2, [r3, #0]
 801953a:	228c      	movs	r2, #140	@ 0x8c
 801953c:	18bb      	adds	r3, r7, r2
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	2b3e      	cmp	r3, #62	@ 0x3e
 8019542:	d91a      	bls.n	801957a <HAL_PCD_EP_DB_Transmit+0x706>
 8019544:	18bb      	adds	r3, r7, r2
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	095b      	lsrs	r3, r3, #5
 801954a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801954c:	18bb      	adds	r3, r7, r2
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	221f      	movs	r2, #31
 8019552:	4013      	ands	r3, r2
 8019554:	d102      	bne.n	801955c <HAL_PCD_EP_DB_Transmit+0x6e8>
 8019556:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019558:	3b01      	subs	r3, #1
 801955a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801955c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801955e:	881b      	ldrh	r3, [r3, #0]
 8019560:	b29a      	uxth	r2, r3
 8019562:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019564:	b29b      	uxth	r3, r3
 8019566:	029b      	lsls	r3, r3, #10
 8019568:	b29b      	uxth	r3, r3
 801956a:	4313      	orrs	r3, r2
 801956c:	b29b      	uxth	r3, r3
 801956e:	4a0c      	ldr	r2, [pc, #48]	@ (80195a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8019570:	4313      	orrs	r3, r2
 8019572:	b29a      	uxth	r2, r3
 8019574:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019576:	801a      	strh	r2, [r3, #0]
 8019578:	e04d      	b.n	8019616 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801957a:	238c      	movs	r3, #140	@ 0x8c
 801957c:	18fb      	adds	r3, r7, r3
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d113      	bne.n	80195ac <HAL_PCD_EP_DB_Transmit+0x738>
 8019584:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019586:	881b      	ldrh	r3, [r3, #0]
 8019588:	b29b      	uxth	r3, r3
 801958a:	4a05      	ldr	r2, [pc, #20]	@ (80195a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801958c:	4313      	orrs	r3, r2
 801958e:	b29a      	uxth	r2, r3
 8019590:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019592:	801a      	strh	r2, [r3, #0]
 8019594:	e03f      	b.n	8019616 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8019596:	46c0      	nop			@ (mov r8, r8)
 8019598:	00000402 	.word	0x00000402
 801959c:	00000406 	.word	0x00000406
 80195a0:	ffff8000 	.word	0xffff8000
 80195a4:	ffff8f8f 	.word	0xffff8f8f
 80195a8:	ffffc080 	.word	0xffffc080
 80195ac:	228c      	movs	r2, #140	@ 0x8c
 80195ae:	18bb      	adds	r3, r7, r2
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	085b      	lsrs	r3, r3, #1
 80195b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80195b6:	18bb      	adds	r3, r7, r2
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	2201      	movs	r2, #1
 80195bc:	4013      	ands	r3, r2
 80195be:	d002      	beq.n	80195c6 <HAL_PCD_EP_DB_Transmit+0x752>
 80195c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80195c2:	3301      	adds	r3, #1
 80195c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80195c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80195c8:	881b      	ldrh	r3, [r3, #0]
 80195ca:	b29a      	uxth	r2, r3
 80195cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80195ce:	b29b      	uxth	r3, r3
 80195d0:	029b      	lsls	r3, r3, #10
 80195d2:	b29b      	uxth	r3, r3
 80195d4:	4313      	orrs	r3, r2
 80195d6:	b29a      	uxth	r2, r3
 80195d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80195da:	801a      	strh	r2, [r3, #0]
 80195dc:	e01b      	b.n	8019616 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80195de:	68bb      	ldr	r3, [r7, #8]
 80195e0:	785b      	ldrb	r3, [r3, #1]
 80195e2:	2b01      	cmp	r3, #1
 80195e4:	d117      	bne.n	8019616 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	2250      	movs	r2, #80	@ 0x50
 80195ec:	5a9b      	ldrh	r3, [r3, r2]
 80195ee:	b29b      	uxth	r3, r3
 80195f0:	001a      	movs	r2, r3
 80195f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195f4:	189b      	adds	r3, r3, r2
 80195f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80195f8:	68bb      	ldr	r3, [r7, #8]
 80195fa:	781b      	ldrb	r3, [r3, #0]
 80195fc:	00da      	lsls	r2, r3, #3
 80195fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019600:	18d3      	adds	r3, r2, r3
 8019602:	4a21      	ldr	r2, [pc, #132]	@ (8019688 <HAL_PCD_EP_DB_Transmit+0x814>)
 8019604:	4694      	mov	ip, r2
 8019606:	4463      	add	r3, ip
 8019608:	653b      	str	r3, [r7, #80]	@ 0x50
 801960a:	238c      	movs	r3, #140	@ 0x8c
 801960c:	18fb      	adds	r3, r7, r3
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	b29a      	uxth	r2, r3
 8019612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019614:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	6818      	ldr	r0, [r3, #0]
 801961a:	68bb      	ldr	r3, [r7, #8]
 801961c:	6959      	ldr	r1, [r3, #20]
 801961e:	68bb      	ldr	r3, [r7, #8]
 8019620:	895a      	ldrh	r2, [r3, #10]
 8019622:	238c      	movs	r3, #140	@ 0x8c
 8019624:	18fb      	adds	r3, r7, r3
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	b29b      	uxth	r3, r3
 801962a:	f006 f999 	bl	801f960 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	001a      	movs	r2, r3
 8019634:	68bb      	ldr	r3, [r7, #8]
 8019636:	781b      	ldrb	r3, [r3, #0]
 8019638:	009b      	lsls	r3, r3, #2
 801963a:	18d3      	adds	r3, r2, r3
 801963c:	881b      	ldrh	r3, [r3, #0]
 801963e:	b29a      	uxth	r2, r3
 8019640:	2014      	movs	r0, #20
 8019642:	183b      	adds	r3, r7, r0
 8019644:	4911      	ldr	r1, [pc, #68]	@ (801968c <HAL_PCD_EP_DB_Transmit+0x818>)
 8019646:	400a      	ands	r2, r1
 8019648:	801a      	strh	r2, [r3, #0]
 801964a:	183b      	adds	r3, r7, r0
 801964c:	183a      	adds	r2, r7, r0
 801964e:	8812      	ldrh	r2, [r2, #0]
 8019650:	2110      	movs	r1, #16
 8019652:	404a      	eors	r2, r1
 8019654:	801a      	strh	r2, [r3, #0]
 8019656:	183b      	adds	r3, r7, r0
 8019658:	183a      	adds	r2, r7, r0
 801965a:	8812      	ldrh	r2, [r2, #0]
 801965c:	2120      	movs	r1, #32
 801965e:	404a      	eors	r2, r1
 8019660:	801a      	strh	r2, [r3, #0]
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	001a      	movs	r2, r3
 8019668:	68bb      	ldr	r3, [r7, #8]
 801966a:	781b      	ldrb	r3, [r3, #0]
 801966c:	009b      	lsls	r3, r3, #2
 801966e:	18d3      	adds	r3, r2, r3
 8019670:	183a      	adds	r2, r7, r0
 8019672:	8812      	ldrh	r2, [r2, #0]
 8019674:	4906      	ldr	r1, [pc, #24]	@ (8019690 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8019676:	430a      	orrs	r2, r1
 8019678:	b292      	uxth	r2, r2
 801967a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801967c:	2300      	movs	r3, #0
}
 801967e:	0018      	movs	r0, r3
 8019680:	46bd      	mov	sp, r7
 8019682:	b024      	add	sp, #144	@ 0x90
 8019684:	bd80      	pop	{r7, pc}
 8019686:	46c0      	nop			@ (mov r8, r8)
 8019688:	00000406 	.word	0x00000406
 801968c:	ffff8fbf 	.word	0xffff8fbf
 8019690:	ffff8080 	.word	0xffff8080

08019694 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8019694:	b590      	push	{r4, r7, lr}
 8019696:	b087      	sub	sp, #28
 8019698:	af00      	add	r7, sp, #0
 801969a:	60f8      	str	r0, [r7, #12]
 801969c:	0008      	movs	r0, r1
 801969e:	0011      	movs	r1, r2
 80196a0:	607b      	str	r3, [r7, #4]
 80196a2:	240a      	movs	r4, #10
 80196a4:	193b      	adds	r3, r7, r4
 80196a6:	1c02      	adds	r2, r0, #0
 80196a8:	801a      	strh	r2, [r3, #0]
 80196aa:	2308      	movs	r3, #8
 80196ac:	18fb      	adds	r3, r7, r3
 80196ae:	1c0a      	adds	r2, r1, #0
 80196b0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80196b2:	0021      	movs	r1, r4
 80196b4:	187b      	adds	r3, r7, r1
 80196b6:	881b      	ldrh	r3, [r3, #0]
 80196b8:	2280      	movs	r2, #128	@ 0x80
 80196ba:	4013      	ands	r3, r2
 80196bc:	b29b      	uxth	r3, r3
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d00c      	beq.n	80196dc <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80196c2:	187b      	adds	r3, r7, r1
 80196c4:	881b      	ldrh	r3, [r3, #0]
 80196c6:	2207      	movs	r2, #7
 80196c8:	4013      	ands	r3, r2
 80196ca:	1c5a      	adds	r2, r3, #1
 80196cc:	0013      	movs	r3, r2
 80196ce:	009b      	lsls	r3, r3, #2
 80196d0:	189b      	adds	r3, r3, r2
 80196d2:	00db      	lsls	r3, r3, #3
 80196d4:	68fa      	ldr	r2, [r7, #12]
 80196d6:	18d3      	adds	r3, r2, r3
 80196d8:	617b      	str	r3, [r7, #20]
 80196da:	e00b      	b.n	80196f4 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80196dc:	230a      	movs	r3, #10
 80196de:	18fb      	adds	r3, r7, r3
 80196e0:	881a      	ldrh	r2, [r3, #0]
 80196e2:	0013      	movs	r3, r2
 80196e4:	009b      	lsls	r3, r3, #2
 80196e6:	189b      	adds	r3, r3, r2
 80196e8:	00db      	lsls	r3, r3, #3
 80196ea:	3369      	adds	r3, #105	@ 0x69
 80196ec:	33ff      	adds	r3, #255	@ 0xff
 80196ee:	68fa      	ldr	r2, [r7, #12]
 80196f0:	18d3      	adds	r3, r2, r3
 80196f2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80196f4:	2308      	movs	r3, #8
 80196f6:	18fb      	adds	r3, r7, r3
 80196f8:	881b      	ldrh	r3, [r3, #0]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d107      	bne.n	801970e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80196fe:	697b      	ldr	r3, [r7, #20]
 8019700:	2200      	movs	r2, #0
 8019702:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	b29a      	uxth	r2, r3
 8019708:	697b      	ldr	r3, [r7, #20]
 801970a:	80da      	strh	r2, [r3, #6]
 801970c:	e00b      	b.n	8019726 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801970e:	697b      	ldr	r3, [r7, #20]
 8019710:	2201      	movs	r2, #1
 8019712:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	b29a      	uxth	r2, r3
 8019718:	697b      	ldr	r3, [r7, #20]
 801971a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	0c1b      	lsrs	r3, r3, #16
 8019720:	b29a      	uxth	r2, r3
 8019722:	697b      	ldr	r3, [r7, #20]
 8019724:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8019726:	2300      	movs	r3, #0
}
 8019728:	0018      	movs	r0, r3
 801972a:	46bd      	mov	sp, r7
 801972c:	b007      	add	sp, #28
 801972e:	bd90      	pop	{r4, r7, pc}

08019730 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8019730:	b580      	push	{r7, lr}
 8019732:	b084      	sub	sp, #16
 8019734:	af00      	add	r7, sp, #0
 8019736:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801973e:	687a      	ldr	r2, [r7, #4]
 8019740:	23ba      	movs	r3, #186	@ 0xba
 8019742:	009b      	lsls	r3, r3, #2
 8019744:	2101      	movs	r1, #1
 8019746:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8019748:	687a      	ldr	r2, [r7, #4]
 801974a:	23b8      	movs	r3, #184	@ 0xb8
 801974c:	009b      	lsls	r3, r3, #2
 801974e:	2100      	movs	r1, #0
 8019750:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	2254      	movs	r2, #84	@ 0x54
 8019756:	5a9b      	ldrh	r3, [r3, r2]
 8019758:	b29b      	uxth	r3, r3
 801975a:	2201      	movs	r2, #1
 801975c:	4313      	orrs	r3, r2
 801975e:	b299      	uxth	r1, r3
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	2254      	movs	r2, #84	@ 0x54
 8019764:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8019766:	68fb      	ldr	r3, [r7, #12]
 8019768:	2254      	movs	r2, #84	@ 0x54
 801976a:	5a9b      	ldrh	r3, [r3, r2]
 801976c:	b29b      	uxth	r3, r3
 801976e:	2202      	movs	r2, #2
 8019770:	4313      	orrs	r3, r2
 8019772:	b299      	uxth	r1, r3
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	2254      	movs	r2, #84	@ 0x54
 8019778:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801977a:	2300      	movs	r3, #0
}
 801977c:	0018      	movs	r0, r3
 801977e:	46bd      	mov	sp, r7
 8019780:	b004      	add	sp, #16
 8019782:	bd80      	pop	{r7, pc}

08019784 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8019784:	b580      	push	{r7, lr}
 8019786:	b082      	sub	sp, #8
 8019788:	af00      	add	r7, sp, #0
 801978a:	6078      	str	r0, [r7, #4]
 801978c:	000a      	movs	r2, r1
 801978e:	1cfb      	adds	r3, r7, #3
 8019790:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8019792:	46c0      	nop			@ (mov r8, r8)
 8019794:	46bd      	mov	sp, r7
 8019796:	b002      	add	sp, #8
 8019798:	bd80      	pop	{r7, pc}
	...

0801979c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801979c:	b580      	push	{r7, lr}
 801979e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80197a0:	4b04      	ldr	r3, [pc, #16]	@ (80197b4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80197a2:	681a      	ldr	r2, [r3, #0]
 80197a4:	4b03      	ldr	r3, [pc, #12]	@ (80197b4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80197a6:	2180      	movs	r1, #128	@ 0x80
 80197a8:	0049      	lsls	r1, r1, #1
 80197aa:	430a      	orrs	r2, r1
 80197ac:	601a      	str	r2, [r3, #0]
}
 80197ae:	46c0      	nop			@ (mov r8, r8)
 80197b0:	46bd      	mov	sp, r7
 80197b2:	bd80      	pop	{r7, pc}
 80197b4:	40007000 	.word	0x40007000

080197b8 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80197b8:	b580      	push	{r7, lr}
 80197ba:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 80197bc:	4b04      	ldr	r3, [pc, #16]	@ (80197d0 <HAL_PWR_DisableBkUpAccess+0x18>)
 80197be:	681a      	ldr	r2, [r3, #0]
 80197c0:	4b03      	ldr	r3, [pc, #12]	@ (80197d0 <HAL_PWR_DisableBkUpAccess+0x18>)
 80197c2:	4904      	ldr	r1, [pc, #16]	@ (80197d4 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80197c4:	400a      	ands	r2, r1
 80197c6:	601a      	str	r2, [r3, #0]
}
 80197c8:	46c0      	nop			@ (mov r8, r8)
 80197ca:	46bd      	mov	sp, r7
 80197cc:	bd80      	pop	{r7, pc}
 80197ce:	46c0      	nop			@ (mov r8, r8)
 80197d0:	40007000 	.word	0x40007000
 80197d4:	fffffeff 	.word	0xfffffeff

080197d8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b086      	sub	sp, #24
 80197dc:	af00      	add	r7, sp, #0
 80197de:	6078      	str	r0, [r7, #4]
 80197e0:	000a      	movs	r2, r1
 80197e2:	1cfb      	adds	r3, r7, #3
 80197e4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80197e6:	2300      	movs	r3, #0
 80197e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80197ea:	4b25      	ldr	r3, [pc, #148]	@ (8019880 <HAL_PWR_EnterSTOPMode+0xa8>)
 80197ec:	681a      	ldr	r2, [r3, #0]
 80197ee:	2380      	movs	r3, #128	@ 0x80
 80197f0:	009b      	lsls	r3, r3, #2
 80197f2:	4013      	ands	r3, r2
 80197f4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80197f6:	4b23      	ldr	r3, [pc, #140]	@ (8019884 <HAL_PWR_EnterSTOPMode+0xac>)
 80197f8:	6a1b      	ldr	r3, [r3, #32]
 80197fa:	2201      	movs	r2, #1
 80197fc:	4013      	ands	r3, r2
 80197fe:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8019800:	693b      	ldr	r3, [r7, #16]
 8019802:	2b00      	cmp	r3, #0
 8019804:	d008      	beq.n	8019818 <HAL_PWR_EnterSTOPMode+0x40>
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	2b00      	cmp	r3, #0
 801980a:	d005      	beq.n	8019818 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801980c:	4b1c      	ldr	r3, [pc, #112]	@ (8019880 <HAL_PWR_EnterSTOPMode+0xa8>)
 801980e:	681a      	ldr	r2, [r3, #0]
 8019810:	4b1b      	ldr	r3, [pc, #108]	@ (8019880 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019812:	491d      	ldr	r1, [pc, #116]	@ (8019888 <HAL_PWR_EnterSTOPMode+0xb0>)
 8019814:	400a      	ands	r2, r1
 8019816:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8019818:	4b19      	ldr	r3, [pc, #100]	@ (8019880 <HAL_PWR_EnterSTOPMode+0xa8>)
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801981e:	697b      	ldr	r3, [r7, #20]
 8019820:	2203      	movs	r2, #3
 8019822:	4393      	bics	r3, r2
 8019824:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8019826:	697a      	ldr	r2, [r7, #20]
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	4313      	orrs	r3, r2
 801982c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801982e:	4b14      	ldr	r3, [pc, #80]	@ (8019880 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019830:	697a      	ldr	r2, [r7, #20]
 8019832:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8019834:	4b15      	ldr	r3, [pc, #84]	@ (801988c <HAL_PWR_EnterSTOPMode+0xb4>)
 8019836:	691a      	ldr	r2, [r3, #16]
 8019838:	4b14      	ldr	r3, [pc, #80]	@ (801988c <HAL_PWR_EnterSTOPMode+0xb4>)
 801983a:	2104      	movs	r1, #4
 801983c:	430a      	orrs	r2, r1
 801983e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8019840:	1cfb      	adds	r3, r7, #3
 8019842:	781b      	ldrb	r3, [r3, #0]
 8019844:	2b01      	cmp	r3, #1
 8019846:	d101      	bne.n	801984c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8019848:	bf30      	wfi
 801984a:	e002      	b.n	8019852 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801984c:	bf40      	sev
    __WFE();
 801984e:	bf20      	wfe
    __WFE();
 8019850:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8019852:	4b0e      	ldr	r3, [pc, #56]	@ (801988c <HAL_PWR_EnterSTOPMode+0xb4>)
 8019854:	691a      	ldr	r2, [r3, #16]
 8019856:	4b0d      	ldr	r3, [pc, #52]	@ (801988c <HAL_PWR_EnterSTOPMode+0xb4>)
 8019858:	2104      	movs	r1, #4
 801985a:	438a      	bics	r2, r1
 801985c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801985e:	693b      	ldr	r3, [r7, #16]
 8019860:	2b00      	cmp	r3, #0
 8019862:	d009      	beq.n	8019878 <HAL_PWR_EnterSTOPMode+0xa0>
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	2b00      	cmp	r3, #0
 8019868:	d006      	beq.n	8019878 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801986a:	4b05      	ldr	r3, [pc, #20]	@ (8019880 <HAL_PWR_EnterSTOPMode+0xa8>)
 801986c:	681a      	ldr	r2, [r3, #0]
 801986e:	4b04      	ldr	r3, [pc, #16]	@ (8019880 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019870:	2180      	movs	r1, #128	@ 0x80
 8019872:	0089      	lsls	r1, r1, #2
 8019874:	430a      	orrs	r2, r1
 8019876:	601a      	str	r2, [r3, #0]
  }
}
 8019878:	46c0      	nop			@ (mov r8, r8)
 801987a:	46bd      	mov	sp, r7
 801987c:	b006      	add	sp, #24
 801987e:	bd80      	pop	{r7, pc}
 8019880:	40007000 	.word	0x40007000
 8019884:	40010000 	.word	0x40010000
 8019888:	fffffdff 	.word	0xfffffdff
 801988c:	e000ed00 	.word	0xe000ed00

08019890 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8019890:	b580      	push	{r7, lr}
 8019892:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8019894:	4b07      	ldr	r3, [pc, #28]	@ (80198b4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8019896:	681a      	ldr	r2, [r3, #0]
 8019898:	4b06      	ldr	r3, [pc, #24]	@ (80198b4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801989a:	2102      	movs	r1, #2
 801989c:	430a      	orrs	r2, r1
 801989e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80198a0:	4b05      	ldr	r3, [pc, #20]	@ (80198b8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80198a2:	691a      	ldr	r2, [r3, #16]
 80198a4:	4b04      	ldr	r3, [pc, #16]	@ (80198b8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80198a6:	2104      	movs	r1, #4
 80198a8:	430a      	orrs	r2, r1
 80198aa:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80198ac:	bf30      	wfi
}
 80198ae:	46c0      	nop			@ (mov r8, r8)
 80198b0:	46bd      	mov	sp, r7
 80198b2:	bd80      	pop	{r7, pc}
 80198b4:	40007000 	.word	0x40007000
 80198b8:	e000ed00 	.word	0xe000ed00

080198bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80198bc:	b5b0      	push	{r4, r5, r7, lr}
 80198be:	b08a      	sub	sp, #40	@ 0x28
 80198c0:	af00      	add	r7, sp, #0
 80198c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d102      	bne.n	80198d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80198ca:	2301      	movs	r3, #1
 80198cc:	f000 fbbf 	bl	801a04e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80198d0:	4bc9      	ldr	r3, [pc, #804]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 80198d2:	68db      	ldr	r3, [r3, #12]
 80198d4:	220c      	movs	r2, #12
 80198d6:	4013      	ands	r3, r2
 80198d8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80198da:	4bc7      	ldr	r3, [pc, #796]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 80198dc:	68da      	ldr	r2, [r3, #12]
 80198de:	2380      	movs	r3, #128	@ 0x80
 80198e0:	025b      	lsls	r3, r3, #9
 80198e2:	4013      	ands	r3, r2
 80198e4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	2201      	movs	r2, #1
 80198ec:	4013      	ands	r3, r2
 80198ee:	d100      	bne.n	80198f2 <HAL_RCC_OscConfig+0x36>
 80198f0:	e07e      	b.n	80199f0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80198f2:	69fb      	ldr	r3, [r7, #28]
 80198f4:	2b08      	cmp	r3, #8
 80198f6:	d007      	beq.n	8019908 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80198f8:	69fb      	ldr	r3, [r7, #28]
 80198fa:	2b0c      	cmp	r3, #12
 80198fc:	d112      	bne.n	8019924 <HAL_RCC_OscConfig+0x68>
 80198fe:	69ba      	ldr	r2, [r7, #24]
 8019900:	2380      	movs	r3, #128	@ 0x80
 8019902:	025b      	lsls	r3, r3, #9
 8019904:	429a      	cmp	r2, r3
 8019906:	d10d      	bne.n	8019924 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019908:	4bbb      	ldr	r3, [pc, #748]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 801990a:	681a      	ldr	r2, [r3, #0]
 801990c:	2380      	movs	r3, #128	@ 0x80
 801990e:	029b      	lsls	r3, r3, #10
 8019910:	4013      	ands	r3, r2
 8019912:	d100      	bne.n	8019916 <HAL_RCC_OscConfig+0x5a>
 8019914:	e06b      	b.n	80199ee <HAL_RCC_OscConfig+0x132>
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	685b      	ldr	r3, [r3, #4]
 801991a:	2b00      	cmp	r3, #0
 801991c:	d167      	bne.n	80199ee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801991e:	2301      	movs	r3, #1
 8019920:	f000 fb95 	bl	801a04e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	685a      	ldr	r2, [r3, #4]
 8019928:	2380      	movs	r3, #128	@ 0x80
 801992a:	025b      	lsls	r3, r3, #9
 801992c:	429a      	cmp	r2, r3
 801992e:	d107      	bne.n	8019940 <HAL_RCC_OscConfig+0x84>
 8019930:	4bb1      	ldr	r3, [pc, #708]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019932:	681a      	ldr	r2, [r3, #0]
 8019934:	4bb0      	ldr	r3, [pc, #704]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019936:	2180      	movs	r1, #128	@ 0x80
 8019938:	0249      	lsls	r1, r1, #9
 801993a:	430a      	orrs	r2, r1
 801993c:	601a      	str	r2, [r3, #0]
 801993e:	e027      	b.n	8019990 <HAL_RCC_OscConfig+0xd4>
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	685a      	ldr	r2, [r3, #4]
 8019944:	23a0      	movs	r3, #160	@ 0xa0
 8019946:	02db      	lsls	r3, r3, #11
 8019948:	429a      	cmp	r2, r3
 801994a:	d10e      	bne.n	801996a <HAL_RCC_OscConfig+0xae>
 801994c:	4baa      	ldr	r3, [pc, #680]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 801994e:	681a      	ldr	r2, [r3, #0]
 8019950:	4ba9      	ldr	r3, [pc, #676]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019952:	2180      	movs	r1, #128	@ 0x80
 8019954:	02c9      	lsls	r1, r1, #11
 8019956:	430a      	orrs	r2, r1
 8019958:	601a      	str	r2, [r3, #0]
 801995a:	4ba7      	ldr	r3, [pc, #668]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 801995c:	681a      	ldr	r2, [r3, #0]
 801995e:	4ba6      	ldr	r3, [pc, #664]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019960:	2180      	movs	r1, #128	@ 0x80
 8019962:	0249      	lsls	r1, r1, #9
 8019964:	430a      	orrs	r2, r1
 8019966:	601a      	str	r2, [r3, #0]
 8019968:	e012      	b.n	8019990 <HAL_RCC_OscConfig+0xd4>
 801996a:	4ba3      	ldr	r3, [pc, #652]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 801996c:	681a      	ldr	r2, [r3, #0]
 801996e:	4ba2      	ldr	r3, [pc, #648]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019970:	49a2      	ldr	r1, [pc, #648]	@ (8019bfc <HAL_RCC_OscConfig+0x340>)
 8019972:	400a      	ands	r2, r1
 8019974:	601a      	str	r2, [r3, #0]
 8019976:	4ba0      	ldr	r3, [pc, #640]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019978:	681a      	ldr	r2, [r3, #0]
 801997a:	2380      	movs	r3, #128	@ 0x80
 801997c:	025b      	lsls	r3, r3, #9
 801997e:	4013      	ands	r3, r2
 8019980:	60fb      	str	r3, [r7, #12]
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	4b9c      	ldr	r3, [pc, #624]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019986:	681a      	ldr	r2, [r3, #0]
 8019988:	4b9b      	ldr	r3, [pc, #620]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 801998a:	499d      	ldr	r1, [pc, #628]	@ (8019c00 <HAL_RCC_OscConfig+0x344>)
 801998c:	400a      	ands	r2, r1
 801998e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	685b      	ldr	r3, [r3, #4]
 8019994:	2b00      	cmp	r3, #0
 8019996:	d015      	beq.n	80199c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019998:	f7f9 fbc8 	bl	801312c <HAL_GetTick>
 801999c:	0003      	movs	r3, r0
 801999e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80199a0:	e009      	b.n	80199b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80199a2:	f7f9 fbc3 	bl	801312c <HAL_GetTick>
 80199a6:	0002      	movs	r2, r0
 80199a8:	697b      	ldr	r3, [r7, #20]
 80199aa:	1ad3      	subs	r3, r2, r3
 80199ac:	2b64      	cmp	r3, #100	@ 0x64
 80199ae:	d902      	bls.n	80199b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80199b0:	2303      	movs	r3, #3
 80199b2:	f000 fb4c 	bl	801a04e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80199b6:	4b90      	ldr	r3, [pc, #576]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 80199b8:	681a      	ldr	r2, [r3, #0]
 80199ba:	2380      	movs	r3, #128	@ 0x80
 80199bc:	029b      	lsls	r3, r3, #10
 80199be:	4013      	ands	r3, r2
 80199c0:	d0ef      	beq.n	80199a2 <HAL_RCC_OscConfig+0xe6>
 80199c2:	e015      	b.n	80199f0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80199c4:	f7f9 fbb2 	bl	801312c <HAL_GetTick>
 80199c8:	0003      	movs	r3, r0
 80199ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80199cc:	e008      	b.n	80199e0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80199ce:	f7f9 fbad 	bl	801312c <HAL_GetTick>
 80199d2:	0002      	movs	r2, r0
 80199d4:	697b      	ldr	r3, [r7, #20]
 80199d6:	1ad3      	subs	r3, r2, r3
 80199d8:	2b64      	cmp	r3, #100	@ 0x64
 80199da:	d901      	bls.n	80199e0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80199dc:	2303      	movs	r3, #3
 80199de:	e336      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80199e0:	4b85      	ldr	r3, [pc, #532]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 80199e2:	681a      	ldr	r2, [r3, #0]
 80199e4:	2380      	movs	r3, #128	@ 0x80
 80199e6:	029b      	lsls	r3, r3, #10
 80199e8:	4013      	ands	r3, r2
 80199ea:	d1f0      	bne.n	80199ce <HAL_RCC_OscConfig+0x112>
 80199ec:	e000      	b.n	80199f0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80199ee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	2202      	movs	r2, #2
 80199f6:	4013      	ands	r3, r2
 80199f8:	d100      	bne.n	80199fc <HAL_RCC_OscConfig+0x140>
 80199fa:	e099      	b.n	8019b30 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	68db      	ldr	r3, [r3, #12]
 8019a00:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8019a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a04:	2220      	movs	r2, #32
 8019a06:	4013      	ands	r3, r2
 8019a08:	d009      	beq.n	8019a1e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8019a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019a0c:	681a      	ldr	r2, [r3, #0]
 8019a0e:	4b7a      	ldr	r3, [pc, #488]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019a10:	2120      	movs	r1, #32
 8019a12:	430a      	orrs	r2, r1
 8019a14:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8019a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a18:	2220      	movs	r2, #32
 8019a1a:	4393      	bics	r3, r2
 8019a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8019a1e:	69fb      	ldr	r3, [r7, #28]
 8019a20:	2b04      	cmp	r3, #4
 8019a22:	d005      	beq.n	8019a30 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8019a24:	69fb      	ldr	r3, [r7, #28]
 8019a26:	2b0c      	cmp	r3, #12
 8019a28:	d13e      	bne.n	8019aa8 <HAL_RCC_OscConfig+0x1ec>
 8019a2a:	69bb      	ldr	r3, [r7, #24]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d13b      	bne.n	8019aa8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8019a30:	4b71      	ldr	r3, [pc, #452]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	2204      	movs	r2, #4
 8019a36:	4013      	ands	r3, r2
 8019a38:	d004      	beq.n	8019a44 <HAL_RCC_OscConfig+0x188>
 8019a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d101      	bne.n	8019a44 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8019a40:	2301      	movs	r3, #1
 8019a42:	e304      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019a44:	4b6c      	ldr	r3, [pc, #432]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019a46:	685b      	ldr	r3, [r3, #4]
 8019a48:	4a6e      	ldr	r2, [pc, #440]	@ (8019c04 <HAL_RCC_OscConfig+0x348>)
 8019a4a:	4013      	ands	r3, r2
 8019a4c:	0019      	movs	r1, r3
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	691b      	ldr	r3, [r3, #16]
 8019a52:	021a      	lsls	r2, r3, #8
 8019a54:	4b68      	ldr	r3, [pc, #416]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019a56:	430a      	orrs	r2, r1
 8019a58:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8019a5a:	4b67      	ldr	r3, [pc, #412]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	2209      	movs	r2, #9
 8019a60:	4393      	bics	r3, r2
 8019a62:	0019      	movs	r1, r3
 8019a64:	4b64      	ldr	r3, [pc, #400]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019a68:	430a      	orrs	r2, r1
 8019a6a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8019a6c:	f000 fc42 	bl	801a2f4 <HAL_RCC_GetSysClockFreq>
 8019a70:	0001      	movs	r1, r0
 8019a72:	4b61      	ldr	r3, [pc, #388]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019a74:	68db      	ldr	r3, [r3, #12]
 8019a76:	091b      	lsrs	r3, r3, #4
 8019a78:	220f      	movs	r2, #15
 8019a7a:	4013      	ands	r3, r2
 8019a7c:	4a62      	ldr	r2, [pc, #392]	@ (8019c08 <HAL_RCC_OscConfig+0x34c>)
 8019a7e:	5cd3      	ldrb	r3, [r2, r3]
 8019a80:	000a      	movs	r2, r1
 8019a82:	40da      	lsrs	r2, r3
 8019a84:	4b61      	ldr	r3, [pc, #388]	@ (8019c0c <HAL_RCC_OscConfig+0x350>)
 8019a86:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8019a88:	4b61      	ldr	r3, [pc, #388]	@ (8019c10 <HAL_RCC_OscConfig+0x354>)
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	2513      	movs	r5, #19
 8019a8e:	197c      	adds	r4, r7, r5
 8019a90:	0018      	movs	r0, r3
 8019a92:	f7f9 fb05 	bl	80130a0 <HAL_InitTick>
 8019a96:	0003      	movs	r3, r0
 8019a98:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8019a9a:	197b      	adds	r3, r7, r5
 8019a9c:	781b      	ldrb	r3, [r3, #0]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d046      	beq.n	8019b30 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8019aa2:	197b      	adds	r3, r7, r5
 8019aa4:	781b      	ldrb	r3, [r3, #0]
 8019aa6:	e2d2      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8019aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d027      	beq.n	8019afe <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8019aae:	4b52      	ldr	r3, [pc, #328]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	2209      	movs	r2, #9
 8019ab4:	4393      	bics	r3, r2
 8019ab6:	0019      	movs	r1, r3
 8019ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019abc:	430a      	orrs	r2, r1
 8019abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019ac0:	f7f9 fb34 	bl	801312c <HAL_GetTick>
 8019ac4:	0003      	movs	r3, r0
 8019ac6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8019ac8:	e008      	b.n	8019adc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019aca:	f7f9 fb2f 	bl	801312c <HAL_GetTick>
 8019ace:	0002      	movs	r2, r0
 8019ad0:	697b      	ldr	r3, [r7, #20]
 8019ad2:	1ad3      	subs	r3, r2, r3
 8019ad4:	2b02      	cmp	r3, #2
 8019ad6:	d901      	bls.n	8019adc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8019ad8:	2303      	movs	r3, #3
 8019ada:	e2b8      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8019adc:	4b46      	ldr	r3, [pc, #280]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	2204      	movs	r2, #4
 8019ae2:	4013      	ands	r3, r2
 8019ae4:	d0f1      	beq.n	8019aca <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019ae6:	4b44      	ldr	r3, [pc, #272]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019ae8:	685b      	ldr	r3, [r3, #4]
 8019aea:	4a46      	ldr	r2, [pc, #280]	@ (8019c04 <HAL_RCC_OscConfig+0x348>)
 8019aec:	4013      	ands	r3, r2
 8019aee:	0019      	movs	r1, r3
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	691b      	ldr	r3, [r3, #16]
 8019af4:	021a      	lsls	r2, r3, #8
 8019af6:	4b40      	ldr	r3, [pc, #256]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019af8:	430a      	orrs	r2, r1
 8019afa:	605a      	str	r2, [r3, #4]
 8019afc:	e018      	b.n	8019b30 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8019afe:	4b3e      	ldr	r3, [pc, #248]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019b00:	681a      	ldr	r2, [r3, #0]
 8019b02:	4b3d      	ldr	r3, [pc, #244]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019b04:	2101      	movs	r1, #1
 8019b06:	438a      	bics	r2, r1
 8019b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019b0a:	f7f9 fb0f 	bl	801312c <HAL_GetTick>
 8019b0e:	0003      	movs	r3, r0
 8019b10:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8019b12:	e008      	b.n	8019b26 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019b14:	f7f9 fb0a 	bl	801312c <HAL_GetTick>
 8019b18:	0002      	movs	r2, r0
 8019b1a:	697b      	ldr	r3, [r7, #20]
 8019b1c:	1ad3      	subs	r3, r2, r3
 8019b1e:	2b02      	cmp	r3, #2
 8019b20:	d901      	bls.n	8019b26 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8019b22:	2303      	movs	r3, #3
 8019b24:	e293      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8019b26:	4b34      	ldr	r3, [pc, #208]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	2204      	movs	r2, #4
 8019b2c:	4013      	ands	r3, r2
 8019b2e:	d1f1      	bne.n	8019b14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	2210      	movs	r2, #16
 8019b36:	4013      	ands	r3, r2
 8019b38:	d100      	bne.n	8019b3c <HAL_RCC_OscConfig+0x280>
 8019b3a:	e0a2      	b.n	8019c82 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8019b3c:	69fb      	ldr	r3, [r7, #28]
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d140      	bne.n	8019bc4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8019b42:	4b2d      	ldr	r3, [pc, #180]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019b44:	681a      	ldr	r2, [r3, #0]
 8019b46:	2380      	movs	r3, #128	@ 0x80
 8019b48:	009b      	lsls	r3, r3, #2
 8019b4a:	4013      	ands	r3, r2
 8019b4c:	d005      	beq.n	8019b5a <HAL_RCC_OscConfig+0x29e>
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	69db      	ldr	r3, [r3, #28]
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d101      	bne.n	8019b5a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8019b56:	2301      	movs	r3, #1
 8019b58:	e279      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8019b5a:	4b27      	ldr	r3, [pc, #156]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019b5c:	685b      	ldr	r3, [r3, #4]
 8019b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8019c14 <HAL_RCC_OscConfig+0x358>)
 8019b60:	4013      	ands	r3, r2
 8019b62:	0019      	movs	r1, r3
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b68:	4b23      	ldr	r3, [pc, #140]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019b6a:	430a      	orrs	r2, r1
 8019b6c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8019b6e:	4b22      	ldr	r3, [pc, #136]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019b70:	685b      	ldr	r3, [r3, #4]
 8019b72:	021b      	lsls	r3, r3, #8
 8019b74:	0a19      	lsrs	r1, r3, #8
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	6a1b      	ldr	r3, [r3, #32]
 8019b7a:	061a      	lsls	r2, r3, #24
 8019b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019b7e:	430a      	orrs	r2, r1
 8019b80:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b86:	0b5b      	lsrs	r3, r3, #13
 8019b88:	3301      	adds	r3, #1
 8019b8a:	2280      	movs	r2, #128	@ 0x80
 8019b8c:	0212      	lsls	r2, r2, #8
 8019b8e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8019b90:	4b19      	ldr	r3, [pc, #100]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019b92:	68db      	ldr	r3, [r3, #12]
 8019b94:	091b      	lsrs	r3, r3, #4
 8019b96:	210f      	movs	r1, #15
 8019b98:	400b      	ands	r3, r1
 8019b9a:	491b      	ldr	r1, [pc, #108]	@ (8019c08 <HAL_RCC_OscConfig+0x34c>)
 8019b9c:	5ccb      	ldrb	r3, [r1, r3]
 8019b9e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8019ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8019c0c <HAL_RCC_OscConfig+0x350>)
 8019ba2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8019ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8019c10 <HAL_RCC_OscConfig+0x354>)
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	2513      	movs	r5, #19
 8019baa:	197c      	adds	r4, r7, r5
 8019bac:	0018      	movs	r0, r3
 8019bae:	f7f9 fa77 	bl	80130a0 <HAL_InitTick>
 8019bb2:	0003      	movs	r3, r0
 8019bb4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8019bb6:	197b      	adds	r3, r7, r5
 8019bb8:	781b      	ldrb	r3, [r3, #0]
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d061      	beq.n	8019c82 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8019bbe:	197b      	adds	r3, r7, r5
 8019bc0:	781b      	ldrb	r3, [r3, #0]
 8019bc2:	e244      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	69db      	ldr	r3, [r3, #28]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d040      	beq.n	8019c4e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8019bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019bce:	681a      	ldr	r2, [r3, #0]
 8019bd0:	4b09      	ldr	r3, [pc, #36]	@ (8019bf8 <HAL_RCC_OscConfig+0x33c>)
 8019bd2:	2180      	movs	r1, #128	@ 0x80
 8019bd4:	0049      	lsls	r1, r1, #1
 8019bd6:	430a      	orrs	r2, r1
 8019bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019bda:	f7f9 faa7 	bl	801312c <HAL_GetTick>
 8019bde:	0003      	movs	r3, r0
 8019be0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8019be2:	e019      	b.n	8019c18 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8019be4:	f7f9 faa2 	bl	801312c <HAL_GetTick>
 8019be8:	0002      	movs	r2, r0
 8019bea:	697b      	ldr	r3, [r7, #20]
 8019bec:	1ad3      	subs	r3, r2, r3
 8019bee:	2b02      	cmp	r3, #2
 8019bf0:	d912      	bls.n	8019c18 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8019bf2:	2303      	movs	r3, #3
 8019bf4:	e22b      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
 8019bf6:	46c0      	nop			@ (mov r8, r8)
 8019bf8:	40021000 	.word	0x40021000
 8019bfc:	fffeffff 	.word	0xfffeffff
 8019c00:	fffbffff 	.word	0xfffbffff
 8019c04:	ffffe0ff 	.word	0xffffe0ff
 8019c08:	0802cc64 	.word	0x0802cc64
 8019c0c:	200000e0 	.word	0x200000e0
 8019c10:	200000f0 	.word	0x200000f0
 8019c14:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8019c18:	4bca      	ldr	r3, [pc, #808]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019c1a:	681a      	ldr	r2, [r3, #0]
 8019c1c:	2380      	movs	r3, #128	@ 0x80
 8019c1e:	009b      	lsls	r3, r3, #2
 8019c20:	4013      	ands	r3, r2
 8019c22:	d0df      	beq.n	8019be4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8019c24:	4bc7      	ldr	r3, [pc, #796]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019c26:	685b      	ldr	r3, [r3, #4]
 8019c28:	4ac7      	ldr	r2, [pc, #796]	@ (8019f48 <HAL_RCC_OscConfig+0x68c>)
 8019c2a:	4013      	ands	r3, r2
 8019c2c:	0019      	movs	r1, r3
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019c32:	4bc4      	ldr	r3, [pc, #784]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019c34:	430a      	orrs	r2, r1
 8019c36:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8019c38:	4bc2      	ldr	r3, [pc, #776]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019c3a:	685b      	ldr	r3, [r3, #4]
 8019c3c:	021b      	lsls	r3, r3, #8
 8019c3e:	0a19      	lsrs	r1, r3, #8
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	6a1b      	ldr	r3, [r3, #32]
 8019c44:	061a      	lsls	r2, r3, #24
 8019c46:	4bbf      	ldr	r3, [pc, #764]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019c48:	430a      	orrs	r2, r1
 8019c4a:	605a      	str	r2, [r3, #4]
 8019c4c:	e019      	b.n	8019c82 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8019c4e:	4bbd      	ldr	r3, [pc, #756]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019c50:	681a      	ldr	r2, [r3, #0]
 8019c52:	4bbc      	ldr	r3, [pc, #752]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019c54:	49bd      	ldr	r1, [pc, #756]	@ (8019f4c <HAL_RCC_OscConfig+0x690>)
 8019c56:	400a      	ands	r2, r1
 8019c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019c5a:	f7f9 fa67 	bl	801312c <HAL_GetTick>
 8019c5e:	0003      	movs	r3, r0
 8019c60:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8019c62:	e008      	b.n	8019c76 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8019c64:	f7f9 fa62 	bl	801312c <HAL_GetTick>
 8019c68:	0002      	movs	r2, r0
 8019c6a:	697b      	ldr	r3, [r7, #20]
 8019c6c:	1ad3      	subs	r3, r2, r3
 8019c6e:	2b02      	cmp	r3, #2
 8019c70:	d901      	bls.n	8019c76 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8019c72:	2303      	movs	r3, #3
 8019c74:	e1eb      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8019c76:	4bb3      	ldr	r3, [pc, #716]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019c78:	681a      	ldr	r2, [r3, #0]
 8019c7a:	2380      	movs	r3, #128	@ 0x80
 8019c7c:	009b      	lsls	r3, r3, #2
 8019c7e:	4013      	ands	r3, r2
 8019c80:	d1f0      	bne.n	8019c64 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	2208      	movs	r2, #8
 8019c88:	4013      	ands	r3, r2
 8019c8a:	d036      	beq.n	8019cfa <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	695b      	ldr	r3, [r3, #20]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d019      	beq.n	8019cc8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8019c94:	4bab      	ldr	r3, [pc, #684]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019c96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019c98:	4baa      	ldr	r3, [pc, #680]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019c9a:	2101      	movs	r1, #1
 8019c9c:	430a      	orrs	r2, r1
 8019c9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019ca0:	f7f9 fa44 	bl	801312c <HAL_GetTick>
 8019ca4:	0003      	movs	r3, r0
 8019ca6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8019ca8:	e008      	b.n	8019cbc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8019caa:	f7f9 fa3f 	bl	801312c <HAL_GetTick>
 8019cae:	0002      	movs	r2, r0
 8019cb0:	697b      	ldr	r3, [r7, #20]
 8019cb2:	1ad3      	subs	r3, r2, r3
 8019cb4:	2b02      	cmp	r3, #2
 8019cb6:	d901      	bls.n	8019cbc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8019cb8:	2303      	movs	r3, #3
 8019cba:	e1c8      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8019cbc:	4ba1      	ldr	r3, [pc, #644]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019cc0:	2202      	movs	r2, #2
 8019cc2:	4013      	ands	r3, r2
 8019cc4:	d0f1      	beq.n	8019caa <HAL_RCC_OscConfig+0x3ee>
 8019cc6:	e018      	b.n	8019cfa <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8019cc8:	4b9e      	ldr	r3, [pc, #632]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019cca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019ccc:	4b9d      	ldr	r3, [pc, #628]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019cce:	2101      	movs	r1, #1
 8019cd0:	438a      	bics	r2, r1
 8019cd2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019cd4:	f7f9 fa2a 	bl	801312c <HAL_GetTick>
 8019cd8:	0003      	movs	r3, r0
 8019cda:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8019cdc:	e008      	b.n	8019cf0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8019cde:	f7f9 fa25 	bl	801312c <HAL_GetTick>
 8019ce2:	0002      	movs	r2, r0
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	1ad3      	subs	r3, r2, r3
 8019ce8:	2b02      	cmp	r3, #2
 8019cea:	d901      	bls.n	8019cf0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8019cec:	2303      	movs	r3, #3
 8019cee:	e1ae      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8019cf0:	4b94      	ldr	r3, [pc, #592]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019cf4:	2202      	movs	r2, #2
 8019cf6:	4013      	ands	r3, r2
 8019cf8:	d1f1      	bne.n	8019cde <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	2204      	movs	r2, #4
 8019d00:	4013      	ands	r3, r2
 8019d02:	d100      	bne.n	8019d06 <HAL_RCC_OscConfig+0x44a>
 8019d04:	e0ae      	b.n	8019e64 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8019d06:	2023      	movs	r0, #35	@ 0x23
 8019d08:	183b      	adds	r3, r7, r0
 8019d0a:	2200      	movs	r2, #0
 8019d0c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019d0e:	4b8d      	ldr	r3, [pc, #564]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019d10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019d12:	2380      	movs	r3, #128	@ 0x80
 8019d14:	055b      	lsls	r3, r3, #21
 8019d16:	4013      	ands	r3, r2
 8019d18:	d109      	bne.n	8019d2e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8019d1a:	4b8a      	ldr	r3, [pc, #552]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019d1e:	4b89      	ldr	r3, [pc, #548]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019d20:	2180      	movs	r1, #128	@ 0x80
 8019d22:	0549      	lsls	r1, r1, #21
 8019d24:	430a      	orrs	r2, r1
 8019d26:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8019d28:	183b      	adds	r3, r7, r0
 8019d2a:	2201      	movs	r2, #1
 8019d2c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019d2e:	4b88      	ldr	r3, [pc, #544]	@ (8019f50 <HAL_RCC_OscConfig+0x694>)
 8019d30:	681a      	ldr	r2, [r3, #0]
 8019d32:	2380      	movs	r3, #128	@ 0x80
 8019d34:	005b      	lsls	r3, r3, #1
 8019d36:	4013      	ands	r3, r2
 8019d38:	d11a      	bne.n	8019d70 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8019d3a:	4b85      	ldr	r3, [pc, #532]	@ (8019f50 <HAL_RCC_OscConfig+0x694>)
 8019d3c:	681a      	ldr	r2, [r3, #0]
 8019d3e:	4b84      	ldr	r3, [pc, #528]	@ (8019f50 <HAL_RCC_OscConfig+0x694>)
 8019d40:	2180      	movs	r1, #128	@ 0x80
 8019d42:	0049      	lsls	r1, r1, #1
 8019d44:	430a      	orrs	r2, r1
 8019d46:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8019d48:	f7f9 f9f0 	bl	801312c <HAL_GetTick>
 8019d4c:	0003      	movs	r3, r0
 8019d4e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019d50:	e008      	b.n	8019d64 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019d52:	f7f9 f9eb 	bl	801312c <HAL_GetTick>
 8019d56:	0002      	movs	r2, r0
 8019d58:	697b      	ldr	r3, [r7, #20]
 8019d5a:	1ad3      	subs	r3, r2, r3
 8019d5c:	2b64      	cmp	r3, #100	@ 0x64
 8019d5e:	d901      	bls.n	8019d64 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8019d60:	2303      	movs	r3, #3
 8019d62:	e174      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019d64:	4b7a      	ldr	r3, [pc, #488]	@ (8019f50 <HAL_RCC_OscConfig+0x694>)
 8019d66:	681a      	ldr	r2, [r3, #0]
 8019d68:	2380      	movs	r3, #128	@ 0x80
 8019d6a:	005b      	lsls	r3, r3, #1
 8019d6c:	4013      	ands	r3, r2
 8019d6e:	d0f0      	beq.n	8019d52 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	689a      	ldr	r2, [r3, #8]
 8019d74:	2380      	movs	r3, #128	@ 0x80
 8019d76:	005b      	lsls	r3, r3, #1
 8019d78:	429a      	cmp	r2, r3
 8019d7a:	d107      	bne.n	8019d8c <HAL_RCC_OscConfig+0x4d0>
 8019d7c:	4b71      	ldr	r3, [pc, #452]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019d7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019d80:	4b70      	ldr	r3, [pc, #448]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019d82:	2180      	movs	r1, #128	@ 0x80
 8019d84:	0049      	lsls	r1, r1, #1
 8019d86:	430a      	orrs	r2, r1
 8019d88:	651a      	str	r2, [r3, #80]	@ 0x50
 8019d8a:	e031      	b.n	8019df0 <HAL_RCC_OscConfig+0x534>
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	689b      	ldr	r3, [r3, #8]
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d10c      	bne.n	8019dae <HAL_RCC_OscConfig+0x4f2>
 8019d94:	4b6b      	ldr	r3, [pc, #428]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019d96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019d98:	4b6a      	ldr	r3, [pc, #424]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019d9a:	496c      	ldr	r1, [pc, #432]	@ (8019f4c <HAL_RCC_OscConfig+0x690>)
 8019d9c:	400a      	ands	r2, r1
 8019d9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8019da0:	4b68      	ldr	r3, [pc, #416]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019da2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019da4:	4b67      	ldr	r3, [pc, #412]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019da6:	496b      	ldr	r1, [pc, #428]	@ (8019f54 <HAL_RCC_OscConfig+0x698>)
 8019da8:	400a      	ands	r2, r1
 8019daa:	651a      	str	r2, [r3, #80]	@ 0x50
 8019dac:	e020      	b.n	8019df0 <HAL_RCC_OscConfig+0x534>
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	689a      	ldr	r2, [r3, #8]
 8019db2:	23a0      	movs	r3, #160	@ 0xa0
 8019db4:	00db      	lsls	r3, r3, #3
 8019db6:	429a      	cmp	r2, r3
 8019db8:	d10e      	bne.n	8019dd8 <HAL_RCC_OscConfig+0x51c>
 8019dba:	4b62      	ldr	r3, [pc, #392]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019dbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019dbe:	4b61      	ldr	r3, [pc, #388]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019dc0:	2180      	movs	r1, #128	@ 0x80
 8019dc2:	00c9      	lsls	r1, r1, #3
 8019dc4:	430a      	orrs	r2, r1
 8019dc6:	651a      	str	r2, [r3, #80]	@ 0x50
 8019dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019dca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019dcc:	4b5d      	ldr	r3, [pc, #372]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019dce:	2180      	movs	r1, #128	@ 0x80
 8019dd0:	0049      	lsls	r1, r1, #1
 8019dd2:	430a      	orrs	r2, r1
 8019dd4:	651a      	str	r2, [r3, #80]	@ 0x50
 8019dd6:	e00b      	b.n	8019df0 <HAL_RCC_OscConfig+0x534>
 8019dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019dda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019ddc:	4b59      	ldr	r3, [pc, #356]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019dde:	495b      	ldr	r1, [pc, #364]	@ (8019f4c <HAL_RCC_OscConfig+0x690>)
 8019de0:	400a      	ands	r2, r1
 8019de2:	651a      	str	r2, [r3, #80]	@ 0x50
 8019de4:	4b57      	ldr	r3, [pc, #348]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019de6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019de8:	4b56      	ldr	r3, [pc, #344]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019dea:	495a      	ldr	r1, [pc, #360]	@ (8019f54 <HAL_RCC_OscConfig+0x698>)
 8019dec:	400a      	ands	r2, r1
 8019dee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	689b      	ldr	r3, [r3, #8]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d015      	beq.n	8019e24 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019df8:	f7f9 f998 	bl	801312c <HAL_GetTick>
 8019dfc:	0003      	movs	r3, r0
 8019dfe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8019e00:	e009      	b.n	8019e16 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019e02:	f7f9 f993 	bl	801312c <HAL_GetTick>
 8019e06:	0002      	movs	r2, r0
 8019e08:	697b      	ldr	r3, [r7, #20]
 8019e0a:	1ad3      	subs	r3, r2, r3
 8019e0c:	4a52      	ldr	r2, [pc, #328]	@ (8019f58 <HAL_RCC_OscConfig+0x69c>)
 8019e0e:	4293      	cmp	r3, r2
 8019e10:	d901      	bls.n	8019e16 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8019e12:	2303      	movs	r3, #3
 8019e14:	e11b      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8019e16:	4b4b      	ldr	r3, [pc, #300]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019e18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019e1a:	2380      	movs	r3, #128	@ 0x80
 8019e1c:	009b      	lsls	r3, r3, #2
 8019e1e:	4013      	ands	r3, r2
 8019e20:	d0ef      	beq.n	8019e02 <HAL_RCC_OscConfig+0x546>
 8019e22:	e014      	b.n	8019e4e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019e24:	f7f9 f982 	bl	801312c <HAL_GetTick>
 8019e28:	0003      	movs	r3, r0
 8019e2a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8019e2c:	e009      	b.n	8019e42 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019e2e:	f7f9 f97d 	bl	801312c <HAL_GetTick>
 8019e32:	0002      	movs	r2, r0
 8019e34:	697b      	ldr	r3, [r7, #20]
 8019e36:	1ad3      	subs	r3, r2, r3
 8019e38:	4a47      	ldr	r2, [pc, #284]	@ (8019f58 <HAL_RCC_OscConfig+0x69c>)
 8019e3a:	4293      	cmp	r3, r2
 8019e3c:	d901      	bls.n	8019e42 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8019e3e:	2303      	movs	r3, #3
 8019e40:	e105      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8019e42:	4b40      	ldr	r3, [pc, #256]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019e44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019e46:	2380      	movs	r3, #128	@ 0x80
 8019e48:	009b      	lsls	r3, r3, #2
 8019e4a:	4013      	ands	r3, r2
 8019e4c:	d1ef      	bne.n	8019e2e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8019e4e:	2323      	movs	r3, #35	@ 0x23
 8019e50:	18fb      	adds	r3, r7, r3
 8019e52:	781b      	ldrb	r3, [r3, #0]
 8019e54:	2b01      	cmp	r3, #1
 8019e56:	d105      	bne.n	8019e64 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8019e58:	4b3a      	ldr	r3, [pc, #232]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019e5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019e5c:	4b39      	ldr	r3, [pc, #228]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019e5e:	493f      	ldr	r1, [pc, #252]	@ (8019f5c <HAL_RCC_OscConfig+0x6a0>)
 8019e60:	400a      	ands	r2, r1
 8019e62:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	2220      	movs	r2, #32
 8019e6a:	4013      	ands	r3, r2
 8019e6c:	d049      	beq.n	8019f02 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	699b      	ldr	r3, [r3, #24]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d026      	beq.n	8019ec4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8019e76:	4b33      	ldr	r3, [pc, #204]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019e78:	689a      	ldr	r2, [r3, #8]
 8019e7a:	4b32      	ldr	r3, [pc, #200]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019e7c:	2101      	movs	r1, #1
 8019e7e:	430a      	orrs	r2, r1
 8019e80:	609a      	str	r2, [r3, #8]
 8019e82:	4b30      	ldr	r3, [pc, #192]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019e86:	4b2f      	ldr	r3, [pc, #188]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019e88:	2101      	movs	r1, #1
 8019e8a:	430a      	orrs	r2, r1
 8019e8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8019e8e:	4b34      	ldr	r3, [pc, #208]	@ (8019f60 <HAL_RCC_OscConfig+0x6a4>)
 8019e90:	6a1a      	ldr	r2, [r3, #32]
 8019e92:	4b33      	ldr	r3, [pc, #204]	@ (8019f60 <HAL_RCC_OscConfig+0x6a4>)
 8019e94:	2180      	movs	r1, #128	@ 0x80
 8019e96:	0189      	lsls	r1, r1, #6
 8019e98:	430a      	orrs	r2, r1
 8019e9a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019e9c:	f7f9 f946 	bl	801312c <HAL_GetTick>
 8019ea0:	0003      	movs	r3, r0
 8019ea2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8019ea4:	e008      	b.n	8019eb8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8019ea6:	f7f9 f941 	bl	801312c <HAL_GetTick>
 8019eaa:	0002      	movs	r2, r0
 8019eac:	697b      	ldr	r3, [r7, #20]
 8019eae:	1ad3      	subs	r3, r2, r3
 8019eb0:	2b02      	cmp	r3, #2
 8019eb2:	d901      	bls.n	8019eb8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8019eb4:	2303      	movs	r3, #3
 8019eb6:	e0ca      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8019eb8:	4b22      	ldr	r3, [pc, #136]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019eba:	689b      	ldr	r3, [r3, #8]
 8019ebc:	2202      	movs	r2, #2
 8019ebe:	4013      	ands	r3, r2
 8019ec0:	d0f1      	beq.n	8019ea6 <HAL_RCC_OscConfig+0x5ea>
 8019ec2:	e01e      	b.n	8019f02 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8019ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019ec6:	689a      	ldr	r2, [r3, #8]
 8019ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019eca:	2101      	movs	r1, #1
 8019ecc:	438a      	bics	r2, r1
 8019ece:	609a      	str	r2, [r3, #8]
 8019ed0:	4b23      	ldr	r3, [pc, #140]	@ (8019f60 <HAL_RCC_OscConfig+0x6a4>)
 8019ed2:	6a1a      	ldr	r2, [r3, #32]
 8019ed4:	4b22      	ldr	r3, [pc, #136]	@ (8019f60 <HAL_RCC_OscConfig+0x6a4>)
 8019ed6:	4923      	ldr	r1, [pc, #140]	@ (8019f64 <HAL_RCC_OscConfig+0x6a8>)
 8019ed8:	400a      	ands	r2, r1
 8019eda:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019edc:	f7f9 f926 	bl	801312c <HAL_GetTick>
 8019ee0:	0003      	movs	r3, r0
 8019ee2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8019ee4:	e008      	b.n	8019ef8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8019ee6:	f7f9 f921 	bl	801312c <HAL_GetTick>
 8019eea:	0002      	movs	r2, r0
 8019eec:	697b      	ldr	r3, [r7, #20]
 8019eee:	1ad3      	subs	r3, r2, r3
 8019ef0:	2b02      	cmp	r3, #2
 8019ef2:	d901      	bls.n	8019ef8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8019ef4:	2303      	movs	r3, #3
 8019ef6:	e0aa      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8019ef8:	4b12      	ldr	r3, [pc, #72]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019efa:	689b      	ldr	r3, [r3, #8]
 8019efc:	2202      	movs	r2, #2
 8019efe:	4013      	ands	r3, r2
 8019f00:	d1f1      	bne.n	8019ee6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d100      	bne.n	8019f0c <HAL_RCC_OscConfig+0x650>
 8019f0a:	e09f      	b.n	801a04c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8019f0c:	69fb      	ldr	r3, [r7, #28]
 8019f0e:	2b0c      	cmp	r3, #12
 8019f10:	d100      	bne.n	8019f14 <HAL_RCC_OscConfig+0x658>
 8019f12:	e078      	b.n	801a006 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019f18:	2b02      	cmp	r3, #2
 8019f1a:	d159      	bne.n	8019fd0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019f1c:	4b09      	ldr	r3, [pc, #36]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019f1e:	681a      	ldr	r2, [r3, #0]
 8019f20:	4b08      	ldr	r3, [pc, #32]	@ (8019f44 <HAL_RCC_OscConfig+0x688>)
 8019f22:	4911      	ldr	r1, [pc, #68]	@ (8019f68 <HAL_RCC_OscConfig+0x6ac>)
 8019f24:	400a      	ands	r2, r1
 8019f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019f28:	f7f9 f900 	bl	801312c <HAL_GetTick>
 8019f2c:	0003      	movs	r3, r0
 8019f2e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8019f30:	e01c      	b.n	8019f6c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019f32:	f7f9 f8fb 	bl	801312c <HAL_GetTick>
 8019f36:	0002      	movs	r2, r0
 8019f38:	697b      	ldr	r3, [r7, #20]
 8019f3a:	1ad3      	subs	r3, r2, r3
 8019f3c:	2b02      	cmp	r3, #2
 8019f3e:	d915      	bls.n	8019f6c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8019f40:	2303      	movs	r3, #3
 8019f42:	e084      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
 8019f44:	40021000 	.word	0x40021000
 8019f48:	ffff1fff 	.word	0xffff1fff
 8019f4c:	fffffeff 	.word	0xfffffeff
 8019f50:	40007000 	.word	0x40007000
 8019f54:	fffffbff 	.word	0xfffffbff
 8019f58:	00001388 	.word	0x00001388
 8019f5c:	efffffff 	.word	0xefffffff
 8019f60:	40010000 	.word	0x40010000
 8019f64:	ffffdfff 	.word	0xffffdfff
 8019f68:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8019f6c:	4b3a      	ldr	r3, [pc, #232]	@ (801a058 <HAL_RCC_OscConfig+0x79c>)
 8019f6e:	681a      	ldr	r2, [r3, #0]
 8019f70:	2380      	movs	r3, #128	@ 0x80
 8019f72:	049b      	lsls	r3, r3, #18
 8019f74:	4013      	ands	r3, r2
 8019f76:	d1dc      	bne.n	8019f32 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8019f78:	4b37      	ldr	r3, [pc, #220]	@ (801a058 <HAL_RCC_OscConfig+0x79c>)
 8019f7a:	68db      	ldr	r3, [r3, #12]
 8019f7c:	4a37      	ldr	r2, [pc, #220]	@ (801a05c <HAL_RCC_OscConfig+0x7a0>)
 8019f7e:	4013      	ands	r3, r2
 8019f80:	0019      	movs	r1, r3
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019f8a:	431a      	orrs	r2, r3
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f90:	431a      	orrs	r2, r3
 8019f92:	4b31      	ldr	r3, [pc, #196]	@ (801a058 <HAL_RCC_OscConfig+0x79c>)
 8019f94:	430a      	orrs	r2, r1
 8019f96:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8019f98:	4b2f      	ldr	r3, [pc, #188]	@ (801a058 <HAL_RCC_OscConfig+0x79c>)
 8019f9a:	681a      	ldr	r2, [r3, #0]
 8019f9c:	4b2e      	ldr	r3, [pc, #184]	@ (801a058 <HAL_RCC_OscConfig+0x79c>)
 8019f9e:	2180      	movs	r1, #128	@ 0x80
 8019fa0:	0449      	lsls	r1, r1, #17
 8019fa2:	430a      	orrs	r2, r1
 8019fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019fa6:	f7f9 f8c1 	bl	801312c <HAL_GetTick>
 8019faa:	0003      	movs	r3, r0
 8019fac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8019fae:	e008      	b.n	8019fc2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019fb0:	f7f9 f8bc 	bl	801312c <HAL_GetTick>
 8019fb4:	0002      	movs	r2, r0
 8019fb6:	697b      	ldr	r3, [r7, #20]
 8019fb8:	1ad3      	subs	r3, r2, r3
 8019fba:	2b02      	cmp	r3, #2
 8019fbc:	d901      	bls.n	8019fc2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8019fbe:	2303      	movs	r3, #3
 8019fc0:	e045      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8019fc2:	4b25      	ldr	r3, [pc, #148]	@ (801a058 <HAL_RCC_OscConfig+0x79c>)
 8019fc4:	681a      	ldr	r2, [r3, #0]
 8019fc6:	2380      	movs	r3, #128	@ 0x80
 8019fc8:	049b      	lsls	r3, r3, #18
 8019fca:	4013      	ands	r3, r2
 8019fcc:	d0f0      	beq.n	8019fb0 <HAL_RCC_OscConfig+0x6f4>
 8019fce:	e03d      	b.n	801a04c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019fd0:	4b21      	ldr	r3, [pc, #132]	@ (801a058 <HAL_RCC_OscConfig+0x79c>)
 8019fd2:	681a      	ldr	r2, [r3, #0]
 8019fd4:	4b20      	ldr	r3, [pc, #128]	@ (801a058 <HAL_RCC_OscConfig+0x79c>)
 8019fd6:	4922      	ldr	r1, [pc, #136]	@ (801a060 <HAL_RCC_OscConfig+0x7a4>)
 8019fd8:	400a      	ands	r2, r1
 8019fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019fdc:	f7f9 f8a6 	bl	801312c <HAL_GetTick>
 8019fe0:	0003      	movs	r3, r0
 8019fe2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8019fe4:	e008      	b.n	8019ff8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019fe6:	f7f9 f8a1 	bl	801312c <HAL_GetTick>
 8019fea:	0002      	movs	r2, r0
 8019fec:	697b      	ldr	r3, [r7, #20]
 8019fee:	1ad3      	subs	r3, r2, r3
 8019ff0:	2b02      	cmp	r3, #2
 8019ff2:	d901      	bls.n	8019ff8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8019ff4:	2303      	movs	r3, #3
 8019ff6:	e02a      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8019ff8:	4b17      	ldr	r3, [pc, #92]	@ (801a058 <HAL_RCC_OscConfig+0x79c>)
 8019ffa:	681a      	ldr	r2, [r3, #0]
 8019ffc:	2380      	movs	r3, #128	@ 0x80
 8019ffe:	049b      	lsls	r3, r3, #18
 801a000:	4013      	ands	r3, r2
 801a002:	d1f0      	bne.n	8019fe6 <HAL_RCC_OscConfig+0x72a>
 801a004:	e022      	b.n	801a04c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a00a:	2b01      	cmp	r3, #1
 801a00c:	d101      	bne.n	801a012 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801a00e:	2301      	movs	r3, #1
 801a010:	e01d      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801a012:	4b11      	ldr	r3, [pc, #68]	@ (801a058 <HAL_RCC_OscConfig+0x79c>)
 801a014:	68db      	ldr	r3, [r3, #12]
 801a016:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a018:	69ba      	ldr	r2, [r7, #24]
 801a01a:	2380      	movs	r3, #128	@ 0x80
 801a01c:	025b      	lsls	r3, r3, #9
 801a01e:	401a      	ands	r2, r3
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a024:	429a      	cmp	r2, r3
 801a026:	d10f      	bne.n	801a048 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801a028:	69ba      	ldr	r2, [r7, #24]
 801a02a:	23f0      	movs	r3, #240	@ 0xf0
 801a02c:	039b      	lsls	r3, r3, #14
 801a02e:	401a      	ands	r2, r3
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a034:	429a      	cmp	r2, r3
 801a036:	d107      	bne.n	801a048 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801a038:	69ba      	ldr	r2, [r7, #24]
 801a03a:	23c0      	movs	r3, #192	@ 0xc0
 801a03c:	041b      	lsls	r3, r3, #16
 801a03e:	401a      	ands	r2, r3
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801a044:	429a      	cmp	r2, r3
 801a046:	d001      	beq.n	801a04c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801a048:	2301      	movs	r3, #1
 801a04a:	e000      	b.n	801a04e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801a04c:	2300      	movs	r3, #0
}
 801a04e:	0018      	movs	r0, r3
 801a050:	46bd      	mov	sp, r7
 801a052:	b00a      	add	sp, #40	@ 0x28
 801a054:	bdb0      	pop	{r4, r5, r7, pc}
 801a056:	46c0      	nop			@ (mov r8, r8)
 801a058:	40021000 	.word	0x40021000
 801a05c:	ff02ffff 	.word	0xff02ffff
 801a060:	feffffff 	.word	0xfeffffff

0801a064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a064:	b5b0      	push	{r4, r5, r7, lr}
 801a066:	b084      	sub	sp, #16
 801a068:	af00      	add	r7, sp, #0
 801a06a:	6078      	str	r0, [r7, #4]
 801a06c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	2b00      	cmp	r3, #0
 801a072:	d101      	bne.n	801a078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a074:	2301      	movs	r3, #1
 801a076:	e128      	b.n	801a2ca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801a078:	4b96      	ldr	r3, [pc, #600]	@ (801a2d4 <HAL_RCC_ClockConfig+0x270>)
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	2201      	movs	r2, #1
 801a07e:	4013      	ands	r3, r2
 801a080:	683a      	ldr	r2, [r7, #0]
 801a082:	429a      	cmp	r2, r3
 801a084:	d91e      	bls.n	801a0c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a086:	4b93      	ldr	r3, [pc, #588]	@ (801a2d4 <HAL_RCC_ClockConfig+0x270>)
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	2201      	movs	r2, #1
 801a08c:	4393      	bics	r3, r2
 801a08e:	0019      	movs	r1, r3
 801a090:	4b90      	ldr	r3, [pc, #576]	@ (801a2d4 <HAL_RCC_ClockConfig+0x270>)
 801a092:	683a      	ldr	r2, [r7, #0]
 801a094:	430a      	orrs	r2, r1
 801a096:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801a098:	f7f9 f848 	bl	801312c <HAL_GetTick>
 801a09c:	0003      	movs	r3, r0
 801a09e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a0a0:	e009      	b.n	801a0b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a0a2:	f7f9 f843 	bl	801312c <HAL_GetTick>
 801a0a6:	0002      	movs	r2, r0
 801a0a8:	68fb      	ldr	r3, [r7, #12]
 801a0aa:	1ad3      	subs	r3, r2, r3
 801a0ac:	4a8a      	ldr	r2, [pc, #552]	@ (801a2d8 <HAL_RCC_ClockConfig+0x274>)
 801a0ae:	4293      	cmp	r3, r2
 801a0b0:	d901      	bls.n	801a0b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801a0b2:	2303      	movs	r3, #3
 801a0b4:	e109      	b.n	801a2ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a0b6:	4b87      	ldr	r3, [pc, #540]	@ (801a2d4 <HAL_RCC_ClockConfig+0x270>)
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	2201      	movs	r2, #1
 801a0bc:	4013      	ands	r3, r2
 801a0be:	683a      	ldr	r2, [r7, #0]
 801a0c0:	429a      	cmp	r2, r3
 801a0c2:	d1ee      	bne.n	801a0a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	2202      	movs	r2, #2
 801a0ca:	4013      	ands	r3, r2
 801a0cc:	d009      	beq.n	801a0e2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a0ce:	4b83      	ldr	r3, [pc, #524]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a0d0:	68db      	ldr	r3, [r3, #12]
 801a0d2:	22f0      	movs	r2, #240	@ 0xf0
 801a0d4:	4393      	bics	r3, r2
 801a0d6:	0019      	movs	r1, r3
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	689a      	ldr	r2, [r3, #8]
 801a0dc:	4b7f      	ldr	r3, [pc, #508]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a0de:	430a      	orrs	r2, r1
 801a0e0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	2201      	movs	r2, #1
 801a0e8:	4013      	ands	r3, r2
 801a0ea:	d100      	bne.n	801a0ee <HAL_RCC_ClockConfig+0x8a>
 801a0ec:	e089      	b.n	801a202 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	685b      	ldr	r3, [r3, #4]
 801a0f2:	2b02      	cmp	r3, #2
 801a0f4:	d107      	bne.n	801a106 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a0f6:	4b79      	ldr	r3, [pc, #484]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a0f8:	681a      	ldr	r2, [r3, #0]
 801a0fa:	2380      	movs	r3, #128	@ 0x80
 801a0fc:	029b      	lsls	r3, r3, #10
 801a0fe:	4013      	ands	r3, r2
 801a100:	d120      	bne.n	801a144 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801a102:	2301      	movs	r3, #1
 801a104:	e0e1      	b.n	801a2ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	685b      	ldr	r3, [r3, #4]
 801a10a:	2b03      	cmp	r3, #3
 801a10c:	d107      	bne.n	801a11e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801a10e:	4b73      	ldr	r3, [pc, #460]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a110:	681a      	ldr	r2, [r3, #0]
 801a112:	2380      	movs	r3, #128	@ 0x80
 801a114:	049b      	lsls	r3, r3, #18
 801a116:	4013      	ands	r3, r2
 801a118:	d114      	bne.n	801a144 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801a11a:	2301      	movs	r3, #1
 801a11c:	e0d5      	b.n	801a2ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	685b      	ldr	r3, [r3, #4]
 801a122:	2b01      	cmp	r3, #1
 801a124:	d106      	bne.n	801a134 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a126:	4b6d      	ldr	r3, [pc, #436]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	2204      	movs	r2, #4
 801a12c:	4013      	ands	r3, r2
 801a12e:	d109      	bne.n	801a144 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801a130:	2301      	movs	r3, #1
 801a132:	e0ca      	b.n	801a2ca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801a134:	4b69      	ldr	r3, [pc, #420]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a136:	681a      	ldr	r2, [r3, #0]
 801a138:	2380      	movs	r3, #128	@ 0x80
 801a13a:	009b      	lsls	r3, r3, #2
 801a13c:	4013      	ands	r3, r2
 801a13e:	d101      	bne.n	801a144 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801a140:	2301      	movs	r3, #1
 801a142:	e0c2      	b.n	801a2ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801a144:	4b65      	ldr	r3, [pc, #404]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a146:	68db      	ldr	r3, [r3, #12]
 801a148:	2203      	movs	r2, #3
 801a14a:	4393      	bics	r3, r2
 801a14c:	0019      	movs	r1, r3
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	685a      	ldr	r2, [r3, #4]
 801a152:	4b62      	ldr	r3, [pc, #392]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a154:	430a      	orrs	r2, r1
 801a156:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801a158:	f7f8 ffe8 	bl	801312c <HAL_GetTick>
 801a15c:	0003      	movs	r3, r0
 801a15e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	685b      	ldr	r3, [r3, #4]
 801a164:	2b02      	cmp	r3, #2
 801a166:	d111      	bne.n	801a18c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801a168:	e009      	b.n	801a17e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a16a:	f7f8 ffdf 	bl	801312c <HAL_GetTick>
 801a16e:	0002      	movs	r2, r0
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	1ad3      	subs	r3, r2, r3
 801a174:	4a58      	ldr	r2, [pc, #352]	@ (801a2d8 <HAL_RCC_ClockConfig+0x274>)
 801a176:	4293      	cmp	r3, r2
 801a178:	d901      	bls.n	801a17e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801a17a:	2303      	movs	r3, #3
 801a17c:	e0a5      	b.n	801a2ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801a17e:	4b57      	ldr	r3, [pc, #348]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a180:	68db      	ldr	r3, [r3, #12]
 801a182:	220c      	movs	r2, #12
 801a184:	4013      	ands	r3, r2
 801a186:	2b08      	cmp	r3, #8
 801a188:	d1ef      	bne.n	801a16a <HAL_RCC_ClockConfig+0x106>
 801a18a:	e03a      	b.n	801a202 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	685b      	ldr	r3, [r3, #4]
 801a190:	2b03      	cmp	r3, #3
 801a192:	d111      	bne.n	801a1b8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801a194:	e009      	b.n	801a1aa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a196:	f7f8 ffc9 	bl	801312c <HAL_GetTick>
 801a19a:	0002      	movs	r2, r0
 801a19c:	68fb      	ldr	r3, [r7, #12]
 801a19e:	1ad3      	subs	r3, r2, r3
 801a1a0:	4a4d      	ldr	r2, [pc, #308]	@ (801a2d8 <HAL_RCC_ClockConfig+0x274>)
 801a1a2:	4293      	cmp	r3, r2
 801a1a4:	d901      	bls.n	801a1aa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801a1a6:	2303      	movs	r3, #3
 801a1a8:	e08f      	b.n	801a2ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801a1aa:	4b4c      	ldr	r3, [pc, #304]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a1ac:	68db      	ldr	r3, [r3, #12]
 801a1ae:	220c      	movs	r2, #12
 801a1b0:	4013      	ands	r3, r2
 801a1b2:	2b0c      	cmp	r3, #12
 801a1b4:	d1ef      	bne.n	801a196 <HAL_RCC_ClockConfig+0x132>
 801a1b6:	e024      	b.n	801a202 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	685b      	ldr	r3, [r3, #4]
 801a1bc:	2b01      	cmp	r3, #1
 801a1be:	d11b      	bne.n	801a1f8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801a1c0:	e009      	b.n	801a1d6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a1c2:	f7f8 ffb3 	bl	801312c <HAL_GetTick>
 801a1c6:	0002      	movs	r2, r0
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	1ad3      	subs	r3, r2, r3
 801a1cc:	4a42      	ldr	r2, [pc, #264]	@ (801a2d8 <HAL_RCC_ClockConfig+0x274>)
 801a1ce:	4293      	cmp	r3, r2
 801a1d0:	d901      	bls.n	801a1d6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801a1d2:	2303      	movs	r3, #3
 801a1d4:	e079      	b.n	801a2ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801a1d6:	4b41      	ldr	r3, [pc, #260]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a1d8:	68db      	ldr	r3, [r3, #12]
 801a1da:	220c      	movs	r2, #12
 801a1dc:	4013      	ands	r3, r2
 801a1de:	2b04      	cmp	r3, #4
 801a1e0:	d1ef      	bne.n	801a1c2 <HAL_RCC_ClockConfig+0x15e>
 801a1e2:	e00e      	b.n	801a202 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a1e4:	f7f8 ffa2 	bl	801312c <HAL_GetTick>
 801a1e8:	0002      	movs	r2, r0
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	1ad3      	subs	r3, r2, r3
 801a1ee:	4a3a      	ldr	r2, [pc, #232]	@ (801a2d8 <HAL_RCC_ClockConfig+0x274>)
 801a1f0:	4293      	cmp	r3, r2
 801a1f2:	d901      	bls.n	801a1f8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801a1f4:	2303      	movs	r3, #3
 801a1f6:	e068      	b.n	801a2ca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801a1f8:	4b38      	ldr	r3, [pc, #224]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a1fa:	68db      	ldr	r3, [r3, #12]
 801a1fc:	220c      	movs	r2, #12
 801a1fe:	4013      	ands	r3, r2
 801a200:	d1f0      	bne.n	801a1e4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801a202:	4b34      	ldr	r3, [pc, #208]	@ (801a2d4 <HAL_RCC_ClockConfig+0x270>)
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	2201      	movs	r2, #1
 801a208:	4013      	ands	r3, r2
 801a20a:	683a      	ldr	r2, [r7, #0]
 801a20c:	429a      	cmp	r2, r3
 801a20e:	d21e      	bcs.n	801a24e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a210:	4b30      	ldr	r3, [pc, #192]	@ (801a2d4 <HAL_RCC_ClockConfig+0x270>)
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	2201      	movs	r2, #1
 801a216:	4393      	bics	r3, r2
 801a218:	0019      	movs	r1, r3
 801a21a:	4b2e      	ldr	r3, [pc, #184]	@ (801a2d4 <HAL_RCC_ClockConfig+0x270>)
 801a21c:	683a      	ldr	r2, [r7, #0]
 801a21e:	430a      	orrs	r2, r1
 801a220:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801a222:	f7f8 ff83 	bl	801312c <HAL_GetTick>
 801a226:	0003      	movs	r3, r0
 801a228:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a22a:	e009      	b.n	801a240 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a22c:	f7f8 ff7e 	bl	801312c <HAL_GetTick>
 801a230:	0002      	movs	r2, r0
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	1ad3      	subs	r3, r2, r3
 801a236:	4a28      	ldr	r2, [pc, #160]	@ (801a2d8 <HAL_RCC_ClockConfig+0x274>)
 801a238:	4293      	cmp	r3, r2
 801a23a:	d901      	bls.n	801a240 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801a23c:	2303      	movs	r3, #3
 801a23e:	e044      	b.n	801a2ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a240:	4b24      	ldr	r3, [pc, #144]	@ (801a2d4 <HAL_RCC_ClockConfig+0x270>)
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	2201      	movs	r2, #1
 801a246:	4013      	ands	r3, r2
 801a248:	683a      	ldr	r2, [r7, #0]
 801a24a:	429a      	cmp	r2, r3
 801a24c:	d1ee      	bne.n	801a22c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	2204      	movs	r2, #4
 801a254:	4013      	ands	r3, r2
 801a256:	d009      	beq.n	801a26c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801a258:	4b20      	ldr	r3, [pc, #128]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a25a:	68db      	ldr	r3, [r3, #12]
 801a25c:	4a20      	ldr	r2, [pc, #128]	@ (801a2e0 <HAL_RCC_ClockConfig+0x27c>)
 801a25e:	4013      	ands	r3, r2
 801a260:	0019      	movs	r1, r3
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	68da      	ldr	r2, [r3, #12]
 801a266:	4b1d      	ldr	r3, [pc, #116]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a268:	430a      	orrs	r2, r1
 801a26a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	2208      	movs	r2, #8
 801a272:	4013      	ands	r3, r2
 801a274:	d00a      	beq.n	801a28c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801a276:	4b19      	ldr	r3, [pc, #100]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a278:	68db      	ldr	r3, [r3, #12]
 801a27a:	4a1a      	ldr	r2, [pc, #104]	@ (801a2e4 <HAL_RCC_ClockConfig+0x280>)
 801a27c:	4013      	ands	r3, r2
 801a27e:	0019      	movs	r1, r3
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	691b      	ldr	r3, [r3, #16]
 801a284:	00da      	lsls	r2, r3, #3
 801a286:	4b15      	ldr	r3, [pc, #84]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a288:	430a      	orrs	r2, r1
 801a28a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a28c:	f000 f832 	bl	801a2f4 <HAL_RCC_GetSysClockFreq>
 801a290:	0001      	movs	r1, r0
 801a292:	4b12      	ldr	r3, [pc, #72]	@ (801a2dc <HAL_RCC_ClockConfig+0x278>)
 801a294:	68db      	ldr	r3, [r3, #12]
 801a296:	091b      	lsrs	r3, r3, #4
 801a298:	220f      	movs	r2, #15
 801a29a:	4013      	ands	r3, r2
 801a29c:	4a12      	ldr	r2, [pc, #72]	@ (801a2e8 <HAL_RCC_ClockConfig+0x284>)
 801a29e:	5cd3      	ldrb	r3, [r2, r3]
 801a2a0:	000a      	movs	r2, r1
 801a2a2:	40da      	lsrs	r2, r3
 801a2a4:	4b11      	ldr	r3, [pc, #68]	@ (801a2ec <HAL_RCC_ClockConfig+0x288>)
 801a2a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801a2a8:	4b11      	ldr	r3, [pc, #68]	@ (801a2f0 <HAL_RCC_ClockConfig+0x28c>)
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	250b      	movs	r5, #11
 801a2ae:	197c      	adds	r4, r7, r5
 801a2b0:	0018      	movs	r0, r3
 801a2b2:	f7f8 fef5 	bl	80130a0 <HAL_InitTick>
 801a2b6:	0003      	movs	r3, r0
 801a2b8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801a2ba:	197b      	adds	r3, r7, r5
 801a2bc:	781b      	ldrb	r3, [r3, #0]
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d002      	beq.n	801a2c8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801a2c2:	197b      	adds	r3, r7, r5
 801a2c4:	781b      	ldrb	r3, [r3, #0]
 801a2c6:	e000      	b.n	801a2ca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801a2c8:	2300      	movs	r3, #0
}
 801a2ca:	0018      	movs	r0, r3
 801a2cc:	46bd      	mov	sp, r7
 801a2ce:	b004      	add	sp, #16
 801a2d0:	bdb0      	pop	{r4, r5, r7, pc}
 801a2d2:	46c0      	nop			@ (mov r8, r8)
 801a2d4:	40022000 	.word	0x40022000
 801a2d8:	00001388 	.word	0x00001388
 801a2dc:	40021000 	.word	0x40021000
 801a2e0:	fffff8ff 	.word	0xfffff8ff
 801a2e4:	ffffc7ff 	.word	0xffffc7ff
 801a2e8:	0802cc64 	.word	0x0802cc64
 801a2ec:	200000e0 	.word	0x200000e0
 801a2f0:	200000f0 	.word	0x200000f0

0801a2f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a2f4:	b5b0      	push	{r4, r5, r7, lr}
 801a2f6:	b08e      	sub	sp, #56	@ 0x38
 801a2f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801a2fa:	4b4c      	ldr	r3, [pc, #304]	@ (801a42c <HAL_RCC_GetSysClockFreq+0x138>)
 801a2fc:	68db      	ldr	r3, [r3, #12]
 801a2fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801a300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a302:	230c      	movs	r3, #12
 801a304:	4013      	ands	r3, r2
 801a306:	2b0c      	cmp	r3, #12
 801a308:	d014      	beq.n	801a334 <HAL_RCC_GetSysClockFreq+0x40>
 801a30a:	d900      	bls.n	801a30e <HAL_RCC_GetSysClockFreq+0x1a>
 801a30c:	e07b      	b.n	801a406 <HAL_RCC_GetSysClockFreq+0x112>
 801a30e:	2b04      	cmp	r3, #4
 801a310:	d002      	beq.n	801a318 <HAL_RCC_GetSysClockFreq+0x24>
 801a312:	2b08      	cmp	r3, #8
 801a314:	d00b      	beq.n	801a32e <HAL_RCC_GetSysClockFreq+0x3a>
 801a316:	e076      	b.n	801a406 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801a318:	4b44      	ldr	r3, [pc, #272]	@ (801a42c <HAL_RCC_GetSysClockFreq+0x138>)
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	2210      	movs	r2, #16
 801a31e:	4013      	ands	r3, r2
 801a320:	d002      	beq.n	801a328 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801a322:	4b43      	ldr	r3, [pc, #268]	@ (801a430 <HAL_RCC_GetSysClockFreq+0x13c>)
 801a324:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801a326:	e07c      	b.n	801a422 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801a328:	4b42      	ldr	r3, [pc, #264]	@ (801a434 <HAL_RCC_GetSysClockFreq+0x140>)
 801a32a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801a32c:	e079      	b.n	801a422 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801a32e:	4b42      	ldr	r3, [pc, #264]	@ (801a438 <HAL_RCC_GetSysClockFreq+0x144>)
 801a330:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801a332:	e076      	b.n	801a422 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801a334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a336:	0c9a      	lsrs	r2, r3, #18
 801a338:	230f      	movs	r3, #15
 801a33a:	401a      	ands	r2, r3
 801a33c:	4b3f      	ldr	r3, [pc, #252]	@ (801a43c <HAL_RCC_GetSysClockFreq+0x148>)
 801a33e:	5c9b      	ldrb	r3, [r3, r2]
 801a340:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801a342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a344:	0d9a      	lsrs	r2, r3, #22
 801a346:	2303      	movs	r3, #3
 801a348:	4013      	ands	r3, r2
 801a34a:	3301      	adds	r3, #1
 801a34c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801a34e:	4b37      	ldr	r3, [pc, #220]	@ (801a42c <HAL_RCC_GetSysClockFreq+0x138>)
 801a350:	68da      	ldr	r2, [r3, #12]
 801a352:	2380      	movs	r3, #128	@ 0x80
 801a354:	025b      	lsls	r3, r3, #9
 801a356:	4013      	ands	r3, r2
 801a358:	d01a      	beq.n	801a390 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801a35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a35c:	61bb      	str	r3, [r7, #24]
 801a35e:	2300      	movs	r3, #0
 801a360:	61fb      	str	r3, [r7, #28]
 801a362:	4a35      	ldr	r2, [pc, #212]	@ (801a438 <HAL_RCC_GetSysClockFreq+0x144>)
 801a364:	2300      	movs	r3, #0
 801a366:	69b8      	ldr	r0, [r7, #24]
 801a368:	69f9      	ldr	r1, [r7, #28]
 801a36a:	f7e6 f929 	bl	80005c0 <__aeabi_lmul>
 801a36e:	0002      	movs	r2, r0
 801a370:	000b      	movs	r3, r1
 801a372:	0010      	movs	r0, r2
 801a374:	0019      	movs	r1, r3
 801a376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a378:	613b      	str	r3, [r7, #16]
 801a37a:	2300      	movs	r3, #0
 801a37c:	617b      	str	r3, [r7, #20]
 801a37e:	693a      	ldr	r2, [r7, #16]
 801a380:	697b      	ldr	r3, [r7, #20]
 801a382:	f7e6 f8fd 	bl	8000580 <__aeabi_uldivmod>
 801a386:	0002      	movs	r2, r0
 801a388:	000b      	movs	r3, r1
 801a38a:	0013      	movs	r3, r2
 801a38c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a38e:	e037      	b.n	801a400 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801a390:	4b26      	ldr	r3, [pc, #152]	@ (801a42c <HAL_RCC_GetSysClockFreq+0x138>)
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	2210      	movs	r2, #16
 801a396:	4013      	ands	r3, r2
 801a398:	d01a      	beq.n	801a3d0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801a39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a39c:	60bb      	str	r3, [r7, #8]
 801a39e:	2300      	movs	r3, #0
 801a3a0:	60fb      	str	r3, [r7, #12]
 801a3a2:	4a23      	ldr	r2, [pc, #140]	@ (801a430 <HAL_RCC_GetSysClockFreq+0x13c>)
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	68b8      	ldr	r0, [r7, #8]
 801a3a8:	68f9      	ldr	r1, [r7, #12]
 801a3aa:	f7e6 f909 	bl	80005c0 <__aeabi_lmul>
 801a3ae:	0002      	movs	r2, r0
 801a3b0:	000b      	movs	r3, r1
 801a3b2:	0010      	movs	r0, r2
 801a3b4:	0019      	movs	r1, r3
 801a3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3b8:	603b      	str	r3, [r7, #0]
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	607b      	str	r3, [r7, #4]
 801a3be:	683a      	ldr	r2, [r7, #0]
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	f7e6 f8dd 	bl	8000580 <__aeabi_uldivmod>
 801a3c6:	0002      	movs	r2, r0
 801a3c8:	000b      	movs	r3, r1
 801a3ca:	0013      	movs	r3, r2
 801a3cc:	637b      	str	r3, [r7, #52]	@ 0x34
 801a3ce:	e017      	b.n	801a400 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801a3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3d2:	0018      	movs	r0, r3
 801a3d4:	2300      	movs	r3, #0
 801a3d6:	0019      	movs	r1, r3
 801a3d8:	4a16      	ldr	r2, [pc, #88]	@ (801a434 <HAL_RCC_GetSysClockFreq+0x140>)
 801a3da:	2300      	movs	r3, #0
 801a3dc:	f7e6 f8f0 	bl	80005c0 <__aeabi_lmul>
 801a3e0:	0002      	movs	r2, r0
 801a3e2:	000b      	movs	r3, r1
 801a3e4:	0010      	movs	r0, r2
 801a3e6:	0019      	movs	r1, r3
 801a3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3ea:	001c      	movs	r4, r3
 801a3ec:	2300      	movs	r3, #0
 801a3ee:	001d      	movs	r5, r3
 801a3f0:	0022      	movs	r2, r4
 801a3f2:	002b      	movs	r3, r5
 801a3f4:	f7e6 f8c4 	bl	8000580 <__aeabi_uldivmod>
 801a3f8:	0002      	movs	r2, r0
 801a3fa:	000b      	movs	r3, r1
 801a3fc:	0013      	movs	r3, r2
 801a3fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801a400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a402:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801a404:	e00d      	b.n	801a422 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801a406:	4b09      	ldr	r3, [pc, #36]	@ (801a42c <HAL_RCC_GetSysClockFreq+0x138>)
 801a408:	685b      	ldr	r3, [r3, #4]
 801a40a:	0b5b      	lsrs	r3, r3, #13
 801a40c:	2207      	movs	r2, #7
 801a40e:	4013      	ands	r3, r2
 801a410:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801a412:	6a3b      	ldr	r3, [r7, #32]
 801a414:	3301      	adds	r3, #1
 801a416:	2280      	movs	r2, #128	@ 0x80
 801a418:	0212      	lsls	r2, r2, #8
 801a41a:	409a      	lsls	r2, r3
 801a41c:	0013      	movs	r3, r2
 801a41e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801a420:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801a424:	0018      	movs	r0, r3
 801a426:	46bd      	mov	sp, r7
 801a428:	b00e      	add	sp, #56	@ 0x38
 801a42a:	bdb0      	pop	{r4, r5, r7, pc}
 801a42c:	40021000 	.word	0x40021000
 801a430:	003d0900 	.word	0x003d0900
 801a434:	00f42400 	.word	0x00f42400
 801a438:	007a1200 	.word	0x007a1200
 801a43c:	0802cc7c 	.word	0x0802cc7c

0801a440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801a440:	b580      	push	{r7, lr}
 801a442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801a444:	4b02      	ldr	r3, [pc, #8]	@ (801a450 <HAL_RCC_GetHCLKFreq+0x10>)
 801a446:	681b      	ldr	r3, [r3, #0]
}
 801a448:	0018      	movs	r0, r3
 801a44a:	46bd      	mov	sp, r7
 801a44c:	bd80      	pop	{r7, pc}
 801a44e:	46c0      	nop			@ (mov r8, r8)
 801a450:	200000e0 	.word	0x200000e0

0801a454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801a454:	b580      	push	{r7, lr}
 801a456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801a458:	f7ff fff2 	bl	801a440 <HAL_RCC_GetHCLKFreq>
 801a45c:	0001      	movs	r1, r0
 801a45e:	4b06      	ldr	r3, [pc, #24]	@ (801a478 <HAL_RCC_GetPCLK1Freq+0x24>)
 801a460:	68db      	ldr	r3, [r3, #12]
 801a462:	0a1b      	lsrs	r3, r3, #8
 801a464:	2207      	movs	r2, #7
 801a466:	4013      	ands	r3, r2
 801a468:	4a04      	ldr	r2, [pc, #16]	@ (801a47c <HAL_RCC_GetPCLK1Freq+0x28>)
 801a46a:	5cd3      	ldrb	r3, [r2, r3]
 801a46c:	40d9      	lsrs	r1, r3
 801a46e:	000b      	movs	r3, r1
}
 801a470:	0018      	movs	r0, r3
 801a472:	46bd      	mov	sp, r7
 801a474:	bd80      	pop	{r7, pc}
 801a476:	46c0      	nop			@ (mov r8, r8)
 801a478:	40021000 	.word	0x40021000
 801a47c:	0802cc74 	.word	0x0802cc74

0801a480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801a480:	b580      	push	{r7, lr}
 801a482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801a484:	f7ff ffdc 	bl	801a440 <HAL_RCC_GetHCLKFreq>
 801a488:	0001      	movs	r1, r0
 801a48a:	4b06      	ldr	r3, [pc, #24]	@ (801a4a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 801a48c:	68db      	ldr	r3, [r3, #12]
 801a48e:	0adb      	lsrs	r3, r3, #11
 801a490:	2207      	movs	r2, #7
 801a492:	4013      	ands	r3, r2
 801a494:	4a04      	ldr	r2, [pc, #16]	@ (801a4a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 801a496:	5cd3      	ldrb	r3, [r2, r3]
 801a498:	40d9      	lsrs	r1, r3
 801a49a:	000b      	movs	r3, r1
}
 801a49c:	0018      	movs	r0, r3
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	bd80      	pop	{r7, pc}
 801a4a2:	46c0      	nop			@ (mov r8, r8)
 801a4a4:	40021000 	.word	0x40021000
 801a4a8:	0802cc74 	.word	0x0802cc74

0801a4ac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	b086      	sub	sp, #24
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801a4b4:	2017      	movs	r0, #23
 801a4b6:	183b      	adds	r3, r7, r0
 801a4b8:	2200      	movs	r2, #0
 801a4ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	2220      	movs	r2, #32
 801a4c2:	4013      	ands	r3, r2
 801a4c4:	d100      	bne.n	801a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801a4c6:	e0c7      	b.n	801a658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a4c8:	4b9b      	ldr	r3, [pc, #620]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a4ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a4cc:	2380      	movs	r3, #128	@ 0x80
 801a4ce:	055b      	lsls	r3, r3, #21
 801a4d0:	4013      	ands	r3, r2
 801a4d2:	d109      	bne.n	801a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a4d4:	4b98      	ldr	r3, [pc, #608]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a4d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a4d8:	4b97      	ldr	r3, [pc, #604]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a4da:	2180      	movs	r1, #128	@ 0x80
 801a4dc:	0549      	lsls	r1, r1, #21
 801a4de:	430a      	orrs	r2, r1
 801a4e0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801a4e2:	183b      	adds	r3, r7, r0
 801a4e4:	2201      	movs	r2, #1
 801a4e6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a4e8:	4b94      	ldr	r3, [pc, #592]	@ (801a73c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801a4ea:	681a      	ldr	r2, [r3, #0]
 801a4ec:	2380      	movs	r3, #128	@ 0x80
 801a4ee:	005b      	lsls	r3, r3, #1
 801a4f0:	4013      	ands	r3, r2
 801a4f2:	d11a      	bne.n	801a52a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a4f4:	4b91      	ldr	r3, [pc, #580]	@ (801a73c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801a4f6:	681a      	ldr	r2, [r3, #0]
 801a4f8:	4b90      	ldr	r3, [pc, #576]	@ (801a73c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801a4fa:	2180      	movs	r1, #128	@ 0x80
 801a4fc:	0049      	lsls	r1, r1, #1
 801a4fe:	430a      	orrs	r2, r1
 801a500:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a502:	f7f8 fe13 	bl	801312c <HAL_GetTick>
 801a506:	0003      	movs	r3, r0
 801a508:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a50a:	e008      	b.n	801a51e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a50c:	f7f8 fe0e 	bl	801312c <HAL_GetTick>
 801a510:	0002      	movs	r2, r0
 801a512:	693b      	ldr	r3, [r7, #16]
 801a514:	1ad3      	subs	r3, r2, r3
 801a516:	2b64      	cmp	r3, #100	@ 0x64
 801a518:	d901      	bls.n	801a51e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801a51a:	2303      	movs	r3, #3
 801a51c:	e107      	b.n	801a72e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a51e:	4b87      	ldr	r3, [pc, #540]	@ (801a73c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801a520:	681a      	ldr	r2, [r3, #0]
 801a522:	2380      	movs	r3, #128	@ 0x80
 801a524:	005b      	lsls	r3, r3, #1
 801a526:	4013      	ands	r3, r2
 801a528:	d0f0      	beq.n	801a50c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801a52a:	4b83      	ldr	r3, [pc, #524]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a52c:	681a      	ldr	r2, [r3, #0]
 801a52e:	23c0      	movs	r3, #192	@ 0xc0
 801a530:	039b      	lsls	r3, r3, #14
 801a532:	4013      	ands	r3, r2
 801a534:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	685a      	ldr	r2, [r3, #4]
 801a53a:	23c0      	movs	r3, #192	@ 0xc0
 801a53c:	039b      	lsls	r3, r3, #14
 801a53e:	4013      	ands	r3, r2
 801a540:	68fa      	ldr	r2, [r7, #12]
 801a542:	429a      	cmp	r2, r3
 801a544:	d013      	beq.n	801a56e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	685a      	ldr	r2, [r3, #4]
 801a54a:	23c0      	movs	r3, #192	@ 0xc0
 801a54c:	029b      	lsls	r3, r3, #10
 801a54e:	401a      	ands	r2, r3
 801a550:	23c0      	movs	r3, #192	@ 0xc0
 801a552:	029b      	lsls	r3, r3, #10
 801a554:	429a      	cmp	r2, r3
 801a556:	d10a      	bne.n	801a56e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801a558:	4b77      	ldr	r3, [pc, #476]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a55a:	681a      	ldr	r2, [r3, #0]
 801a55c:	2380      	movs	r3, #128	@ 0x80
 801a55e:	029b      	lsls	r3, r3, #10
 801a560:	401a      	ands	r2, r3
 801a562:	2380      	movs	r3, #128	@ 0x80
 801a564:	029b      	lsls	r3, r3, #10
 801a566:	429a      	cmp	r2, r3
 801a568:	d101      	bne.n	801a56e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801a56a:	2301      	movs	r3, #1
 801a56c:	e0df      	b.n	801a72e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801a56e:	4b72      	ldr	r3, [pc, #456]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a570:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a572:	23c0      	movs	r3, #192	@ 0xc0
 801a574:	029b      	lsls	r3, r3, #10
 801a576:	4013      	ands	r3, r2
 801a578:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801a57a:	68fb      	ldr	r3, [r7, #12]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d03b      	beq.n	801a5f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	685a      	ldr	r2, [r3, #4]
 801a584:	23c0      	movs	r3, #192	@ 0xc0
 801a586:	029b      	lsls	r3, r3, #10
 801a588:	4013      	ands	r3, r2
 801a58a:	68fa      	ldr	r2, [r7, #12]
 801a58c:	429a      	cmp	r2, r3
 801a58e:	d033      	beq.n	801a5f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	2220      	movs	r2, #32
 801a596:	4013      	ands	r3, r2
 801a598:	d02e      	beq.n	801a5f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801a59a:	4b67      	ldr	r3, [pc, #412]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a59c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a59e:	4a68      	ldr	r2, [pc, #416]	@ (801a740 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801a5a0:	4013      	ands	r3, r2
 801a5a2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801a5a4:	4b64      	ldr	r3, [pc, #400]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a5a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a5a8:	4b63      	ldr	r3, [pc, #396]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a5aa:	2180      	movs	r1, #128	@ 0x80
 801a5ac:	0309      	lsls	r1, r1, #12
 801a5ae:	430a      	orrs	r2, r1
 801a5b0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801a5b2:	4b61      	ldr	r3, [pc, #388]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a5b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a5b6:	4b60      	ldr	r3, [pc, #384]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a5b8:	4962      	ldr	r1, [pc, #392]	@ (801a744 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801a5ba:	400a      	ands	r2, r1
 801a5bc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801a5be:	4b5e      	ldr	r3, [pc, #376]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a5c0:	68fa      	ldr	r2, [r7, #12]
 801a5c2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801a5c4:	68fa      	ldr	r2, [r7, #12]
 801a5c6:	2380      	movs	r3, #128	@ 0x80
 801a5c8:	005b      	lsls	r3, r3, #1
 801a5ca:	4013      	ands	r3, r2
 801a5cc:	d014      	beq.n	801a5f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a5ce:	f7f8 fdad 	bl	801312c <HAL_GetTick>
 801a5d2:	0003      	movs	r3, r0
 801a5d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a5d6:	e009      	b.n	801a5ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a5d8:	f7f8 fda8 	bl	801312c <HAL_GetTick>
 801a5dc:	0002      	movs	r2, r0
 801a5de:	693b      	ldr	r3, [r7, #16]
 801a5e0:	1ad3      	subs	r3, r2, r3
 801a5e2:	4a59      	ldr	r2, [pc, #356]	@ (801a748 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801a5e4:	4293      	cmp	r3, r2
 801a5e6:	d901      	bls.n	801a5ec <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801a5e8:	2303      	movs	r3, #3
 801a5ea:	e0a0      	b.n	801a72e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a5ec:	4b52      	ldr	r3, [pc, #328]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a5ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a5f0:	2380      	movs	r3, #128	@ 0x80
 801a5f2:	009b      	lsls	r3, r3, #2
 801a5f4:	4013      	ands	r3, r2
 801a5f6:	d0ef      	beq.n	801a5d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	2220      	movs	r2, #32
 801a5fe:	4013      	ands	r3, r2
 801a600:	d01f      	beq.n	801a642 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	685a      	ldr	r2, [r3, #4]
 801a606:	23c0      	movs	r3, #192	@ 0xc0
 801a608:	029b      	lsls	r3, r3, #10
 801a60a:	401a      	ands	r2, r3
 801a60c:	23c0      	movs	r3, #192	@ 0xc0
 801a60e:	029b      	lsls	r3, r3, #10
 801a610:	429a      	cmp	r2, r3
 801a612:	d10c      	bne.n	801a62e <HAL_RCCEx_PeriphCLKConfig+0x182>
 801a614:	4b48      	ldr	r3, [pc, #288]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	4a4c      	ldr	r2, [pc, #304]	@ (801a74c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801a61a:	4013      	ands	r3, r2
 801a61c:	0019      	movs	r1, r3
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	685a      	ldr	r2, [r3, #4]
 801a622:	23c0      	movs	r3, #192	@ 0xc0
 801a624:	039b      	lsls	r3, r3, #14
 801a626:	401a      	ands	r2, r3
 801a628:	4b43      	ldr	r3, [pc, #268]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a62a:	430a      	orrs	r2, r1
 801a62c:	601a      	str	r2, [r3, #0]
 801a62e:	4b42      	ldr	r3, [pc, #264]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a630:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	685a      	ldr	r2, [r3, #4]
 801a636:	23c0      	movs	r3, #192	@ 0xc0
 801a638:	029b      	lsls	r3, r3, #10
 801a63a:	401a      	ands	r2, r3
 801a63c:	4b3e      	ldr	r3, [pc, #248]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a63e:	430a      	orrs	r2, r1
 801a640:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801a642:	2317      	movs	r3, #23
 801a644:	18fb      	adds	r3, r7, r3
 801a646:	781b      	ldrb	r3, [r3, #0]
 801a648:	2b01      	cmp	r3, #1
 801a64a:	d105      	bne.n	801a658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a64c:	4b3a      	ldr	r3, [pc, #232]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a64e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a650:	4b39      	ldr	r3, [pc, #228]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a652:	493f      	ldr	r1, [pc, #252]	@ (801a750 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801a654:	400a      	ands	r2, r1
 801a656:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	2201      	movs	r2, #1
 801a65e:	4013      	ands	r3, r2
 801a660:	d009      	beq.n	801a676 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801a662:	4b35      	ldr	r3, [pc, #212]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a666:	2203      	movs	r2, #3
 801a668:	4393      	bics	r3, r2
 801a66a:	0019      	movs	r1, r3
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	689a      	ldr	r2, [r3, #8]
 801a670:	4b31      	ldr	r3, [pc, #196]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a672:	430a      	orrs	r2, r1
 801a674:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	2202      	movs	r2, #2
 801a67c:	4013      	ands	r3, r2
 801a67e:	d009      	beq.n	801a694 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801a680:	4b2d      	ldr	r3, [pc, #180]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a684:	220c      	movs	r2, #12
 801a686:	4393      	bics	r3, r2
 801a688:	0019      	movs	r1, r3
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	68da      	ldr	r2, [r3, #12]
 801a68e:	4b2a      	ldr	r3, [pc, #168]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a690:	430a      	orrs	r2, r1
 801a692:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	2204      	movs	r2, #4
 801a69a:	4013      	ands	r3, r2
 801a69c:	d009      	beq.n	801a6b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801a69e:	4b26      	ldr	r3, [pc, #152]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a6a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a6a2:	4a2c      	ldr	r2, [pc, #176]	@ (801a754 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801a6a4:	4013      	ands	r3, r2
 801a6a6:	0019      	movs	r1, r3
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	691a      	ldr	r2, [r3, #16]
 801a6ac:	4b22      	ldr	r3, [pc, #136]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a6ae:	430a      	orrs	r2, r1
 801a6b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	2208      	movs	r2, #8
 801a6b8:	4013      	ands	r3, r2
 801a6ba:	d009      	beq.n	801a6d0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801a6bc:	4b1e      	ldr	r3, [pc, #120]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a6be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a6c0:	4a25      	ldr	r2, [pc, #148]	@ (801a758 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801a6c2:	4013      	ands	r3, r2
 801a6c4:	0019      	movs	r1, r3
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	695a      	ldr	r2, [r3, #20]
 801a6ca:	4b1b      	ldr	r3, [pc, #108]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a6cc:	430a      	orrs	r2, r1
 801a6ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	681a      	ldr	r2, [r3, #0]
 801a6d4:	2380      	movs	r3, #128	@ 0x80
 801a6d6:	005b      	lsls	r3, r3, #1
 801a6d8:	4013      	ands	r3, r2
 801a6da:	d009      	beq.n	801a6f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801a6dc:	4b16      	ldr	r3, [pc, #88]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a6de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a6e0:	4a17      	ldr	r2, [pc, #92]	@ (801a740 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801a6e2:	4013      	ands	r3, r2
 801a6e4:	0019      	movs	r1, r3
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	699a      	ldr	r2, [r3, #24]
 801a6ea:	4b13      	ldr	r3, [pc, #76]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a6ec:	430a      	orrs	r2, r1
 801a6ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	2240      	movs	r2, #64	@ 0x40
 801a6f6:	4013      	ands	r3, r2
 801a6f8:	d009      	beq.n	801a70e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801a6fa:	4b0f      	ldr	r3, [pc, #60]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a6fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a6fe:	4a17      	ldr	r2, [pc, #92]	@ (801a75c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801a700:	4013      	ands	r3, r2
 801a702:	0019      	movs	r1, r3
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	6a1a      	ldr	r2, [r3, #32]
 801a708:	4b0b      	ldr	r3, [pc, #44]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a70a:	430a      	orrs	r2, r1
 801a70c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	2280      	movs	r2, #128	@ 0x80
 801a714:	4013      	ands	r3, r2
 801a716:	d009      	beq.n	801a72c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801a718:	4b07      	ldr	r3, [pc, #28]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a71a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a71c:	4a10      	ldr	r2, [pc, #64]	@ (801a760 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801a71e:	4013      	ands	r3, r2
 801a720:	0019      	movs	r1, r3
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	69da      	ldr	r2, [r3, #28]
 801a726:	4b04      	ldr	r3, [pc, #16]	@ (801a738 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801a728:	430a      	orrs	r2, r1
 801a72a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801a72c:	2300      	movs	r3, #0
}
 801a72e:	0018      	movs	r0, r3
 801a730:	46bd      	mov	sp, r7
 801a732:	b006      	add	sp, #24
 801a734:	bd80      	pop	{r7, pc}
 801a736:	46c0      	nop			@ (mov r8, r8)
 801a738:	40021000 	.word	0x40021000
 801a73c:	40007000 	.word	0x40007000
 801a740:	fffcffff 	.word	0xfffcffff
 801a744:	fff7ffff 	.word	0xfff7ffff
 801a748:	00001388 	.word	0x00001388
 801a74c:	ffcfffff 	.word	0xffcfffff
 801a750:	efffffff 	.word	0xefffffff
 801a754:	fffff3ff 	.word	0xfffff3ff
 801a758:	ffffcfff 	.word	0xffffcfff
 801a75c:	fbffffff 	.word	0xfbffffff
 801a760:	fff3ffff 	.word	0xfff3ffff

0801a764 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801a764:	b5b0      	push	{r4, r5, r7, lr}
 801a766:	b084      	sub	sp, #16
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801a76c:	230f      	movs	r3, #15
 801a76e:	18fb      	adds	r3, r7, r3
 801a770:	2201      	movs	r2, #1
 801a772:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d101      	bne.n	801a77e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801a77a:	2301      	movs	r3, #1
 801a77c:	e088      	b.n	801a890 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	2221      	movs	r2, #33	@ 0x21
 801a782:	5c9b      	ldrb	r3, [r3, r2]
 801a784:	b2db      	uxtb	r3, r3
 801a786:	2b00      	cmp	r3, #0
 801a788:	d107      	bne.n	801a79a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	2220      	movs	r2, #32
 801a78e:	2100      	movs	r1, #0
 801a790:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	0018      	movs	r0, r3
 801a796:	f7f2 fc1b 	bl	800cfd0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	2221      	movs	r2, #33	@ 0x21
 801a79e:	2102      	movs	r1, #2
 801a7a0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	68db      	ldr	r3, [r3, #12]
 801a7a8:	2210      	movs	r2, #16
 801a7aa:	4013      	ands	r3, r2
 801a7ac:	2b10      	cmp	r3, #16
 801a7ae:	d05f      	beq.n	801a870 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	22ca      	movs	r2, #202	@ 0xca
 801a7b6:	625a      	str	r2, [r3, #36]	@ 0x24
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	2253      	movs	r2, #83	@ 0x53
 801a7be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801a7c0:	250f      	movs	r5, #15
 801a7c2:	197c      	adds	r4, r7, r5
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	0018      	movs	r0, r3
 801a7c8:	f000 fa7c 	bl	801acc4 <RTC_EnterInitMode>
 801a7cc:	0003      	movs	r3, r0
 801a7ce:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801a7d0:	0028      	movs	r0, r5
 801a7d2:	183b      	adds	r3, r7, r0
 801a7d4:	781b      	ldrb	r3, [r3, #0]
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d12c      	bne.n	801a834 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	689a      	ldr	r2, [r3, #8]
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	492c      	ldr	r1, [pc, #176]	@ (801a898 <HAL_RTC_Init+0x134>)
 801a7e6:	400a      	ands	r2, r1
 801a7e8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	6899      	ldr	r1, [r3, #8]
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	685a      	ldr	r2, [r3, #4]
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	691b      	ldr	r3, [r3, #16]
 801a7f8:	431a      	orrs	r2, r3
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	699b      	ldr	r3, [r3, #24]
 801a7fe:	431a      	orrs	r2, r3
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	430a      	orrs	r2, r1
 801a806:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	687a      	ldr	r2, [r7, #4]
 801a80e:	68d2      	ldr	r2, [r2, #12]
 801a810:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	6919      	ldr	r1, [r3, #16]
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	689b      	ldr	r3, [r3, #8]
 801a81c:	041a      	lsls	r2, r3, #16
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	430a      	orrs	r2, r1
 801a824:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801a826:	183c      	adds	r4, r7, r0
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	0018      	movs	r0, r3
 801a82c:	f000 fa8e 	bl	801ad4c <RTC_ExitInitMode>
 801a830:	0003      	movs	r3, r0
 801a832:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801a834:	230f      	movs	r3, #15
 801a836:	18fb      	adds	r3, r7, r3
 801a838:	781b      	ldrb	r3, [r3, #0]
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d113      	bne.n	801a866 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	2103      	movs	r1, #3
 801a84a:	438a      	bics	r2, r1
 801a84c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	69da      	ldr	r2, [r3, #28]
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	695b      	ldr	r3, [r3, #20]
 801a85c:	431a      	orrs	r2, r3
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	430a      	orrs	r2, r1
 801a864:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	22ff      	movs	r2, #255	@ 0xff
 801a86c:	625a      	str	r2, [r3, #36]	@ 0x24
 801a86e:	e003      	b.n	801a878 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801a870:	230f      	movs	r3, #15
 801a872:	18fb      	adds	r3, r7, r3
 801a874:	2200      	movs	r2, #0
 801a876:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801a878:	230f      	movs	r3, #15
 801a87a:	18fb      	adds	r3, r7, r3
 801a87c:	781b      	ldrb	r3, [r3, #0]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d103      	bne.n	801a88a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	2221      	movs	r2, #33	@ 0x21
 801a886:	2101      	movs	r1, #1
 801a888:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801a88a:	230f      	movs	r3, #15
 801a88c:	18fb      	adds	r3, r7, r3
 801a88e:	781b      	ldrb	r3, [r3, #0]
}
 801a890:	0018      	movs	r0, r3
 801a892:	46bd      	mov	sp, r7
 801a894:	b004      	add	sp, #16
 801a896:	bdb0      	pop	{r4, r5, r7, pc}
 801a898:	ff8fffbf 	.word	0xff8fffbf

0801a89c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801a89c:	b5b0      	push	{r4, r5, r7, lr}
 801a89e:	b086      	sub	sp, #24
 801a8a0:	af00      	add	r7, sp, #0
 801a8a2:	60f8      	str	r0, [r7, #12]
 801a8a4:	60b9      	str	r1, [r7, #8]
 801a8a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801a8a8:	2300      	movs	r3, #0
 801a8aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	2220      	movs	r2, #32
 801a8b0:	5c9b      	ldrb	r3, [r3, r2]
 801a8b2:	2b01      	cmp	r3, #1
 801a8b4:	d101      	bne.n	801a8ba <HAL_RTC_SetTime+0x1e>
 801a8b6:	2302      	movs	r3, #2
 801a8b8:	e092      	b.n	801a9e0 <HAL_RTC_SetTime+0x144>
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	2220      	movs	r2, #32
 801a8be:	2101      	movs	r1, #1
 801a8c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801a8c2:	68fb      	ldr	r3, [r7, #12]
 801a8c4:	2221      	movs	r2, #33	@ 0x21
 801a8c6:	2102      	movs	r1, #2
 801a8c8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d125      	bne.n	801a91c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801a8d0:	68fb      	ldr	r3, [r7, #12]
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	689b      	ldr	r3, [r3, #8]
 801a8d6:	2240      	movs	r2, #64	@ 0x40
 801a8d8:	4013      	ands	r3, r2
 801a8da:	d102      	bne.n	801a8e2 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801a8dc:	68bb      	ldr	r3, [r7, #8]
 801a8de:	2200      	movs	r2, #0
 801a8e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801a8e2:	68bb      	ldr	r3, [r7, #8]
 801a8e4:	781b      	ldrb	r3, [r3, #0]
 801a8e6:	0018      	movs	r0, r3
 801a8e8:	f000 fa5a 	bl	801ada0 <RTC_ByteToBcd2>
 801a8ec:	0003      	movs	r3, r0
 801a8ee:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801a8f0:	68bb      	ldr	r3, [r7, #8]
 801a8f2:	785b      	ldrb	r3, [r3, #1]
 801a8f4:	0018      	movs	r0, r3
 801a8f6:	f000 fa53 	bl	801ada0 <RTC_ByteToBcd2>
 801a8fa:	0003      	movs	r3, r0
 801a8fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801a8fe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801a900:	68bb      	ldr	r3, [r7, #8]
 801a902:	789b      	ldrb	r3, [r3, #2]
 801a904:	0018      	movs	r0, r3
 801a906:	f000 fa4b 	bl	801ada0 <RTC_ByteToBcd2>
 801a90a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801a90c:	0022      	movs	r2, r4
 801a90e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801a910:	68bb      	ldr	r3, [r7, #8]
 801a912:	78db      	ldrb	r3, [r3, #3]
 801a914:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801a916:	4313      	orrs	r3, r2
 801a918:	617b      	str	r3, [r7, #20]
 801a91a:	e017      	b.n	801a94c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801a91c:	68fb      	ldr	r3, [r7, #12]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	689b      	ldr	r3, [r3, #8]
 801a922:	2240      	movs	r2, #64	@ 0x40
 801a924:	4013      	ands	r3, r2
 801a926:	d102      	bne.n	801a92e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801a928:	68bb      	ldr	r3, [r7, #8]
 801a92a:	2200      	movs	r2, #0
 801a92c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801a92e:	68bb      	ldr	r3, [r7, #8]
 801a930:	781b      	ldrb	r3, [r3, #0]
 801a932:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801a934:	68bb      	ldr	r3, [r7, #8]
 801a936:	785b      	ldrb	r3, [r3, #1]
 801a938:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801a93a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801a93c:	68ba      	ldr	r2, [r7, #8]
 801a93e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801a940:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801a942:	68bb      	ldr	r3, [r7, #8]
 801a944:	78db      	ldrb	r3, [r3, #3]
 801a946:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801a948:	4313      	orrs	r3, r2
 801a94a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	22ca      	movs	r2, #202	@ 0xca
 801a952:	625a      	str	r2, [r3, #36]	@ 0x24
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	2253      	movs	r2, #83	@ 0x53
 801a95a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801a95c:	2513      	movs	r5, #19
 801a95e:	197c      	adds	r4, r7, r5
 801a960:	68fb      	ldr	r3, [r7, #12]
 801a962:	0018      	movs	r0, r3
 801a964:	f000 f9ae 	bl	801acc4 <RTC_EnterInitMode>
 801a968:	0003      	movs	r3, r0
 801a96a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801a96c:	0028      	movs	r0, r5
 801a96e:	183b      	adds	r3, r7, r0
 801a970:	781b      	ldrb	r3, [r3, #0]
 801a972:	2b00      	cmp	r3, #0
 801a974:	d120      	bne.n	801a9b8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	697a      	ldr	r2, [r7, #20]
 801a97c:	491a      	ldr	r1, [pc, #104]	@ (801a9e8 <HAL_RTC_SetTime+0x14c>)
 801a97e:	400a      	ands	r2, r1
 801a980:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	689a      	ldr	r2, [r3, #8]
 801a988:	68fb      	ldr	r3, [r7, #12]
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	4917      	ldr	r1, [pc, #92]	@ (801a9ec <HAL_RTC_SetTime+0x150>)
 801a98e:	400a      	ands	r2, r1
 801a990:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	6899      	ldr	r1, [r3, #8]
 801a998:	68bb      	ldr	r3, [r7, #8]
 801a99a:	68da      	ldr	r2, [r3, #12]
 801a99c:	68bb      	ldr	r3, [r7, #8]
 801a99e:	691b      	ldr	r3, [r3, #16]
 801a9a0:	431a      	orrs	r2, r3
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	430a      	orrs	r2, r1
 801a9a8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801a9aa:	183c      	adds	r4, r7, r0
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	0018      	movs	r0, r3
 801a9b0:	f000 f9cc 	bl	801ad4c <RTC_ExitInitMode>
 801a9b4:	0003      	movs	r3, r0
 801a9b6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801a9b8:	2313      	movs	r3, #19
 801a9ba:	18fb      	adds	r3, r7, r3
 801a9bc:	781b      	ldrb	r3, [r3, #0]
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d103      	bne.n	801a9ca <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	2221      	movs	r2, #33	@ 0x21
 801a9c6:	2101      	movs	r1, #1
 801a9c8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801a9ca:	68fb      	ldr	r3, [r7, #12]
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	22ff      	movs	r2, #255	@ 0xff
 801a9d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	2220      	movs	r2, #32
 801a9d6:	2100      	movs	r1, #0
 801a9d8:	5499      	strb	r1, [r3, r2]

  return status;
 801a9da:	2313      	movs	r3, #19
 801a9dc:	18fb      	adds	r3, r7, r3
 801a9de:	781b      	ldrb	r3, [r3, #0]
}
 801a9e0:	0018      	movs	r0, r3
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	b006      	add	sp, #24
 801a9e6:	bdb0      	pop	{r4, r5, r7, pc}
 801a9e8:	007f7f7f 	.word	0x007f7f7f
 801a9ec:	fffbffff 	.word	0xfffbffff

0801a9f0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b086      	sub	sp, #24
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	60f8      	str	r0, [r7, #12]
 801a9f8:	60b9      	str	r1, [r7, #8]
 801a9fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801a9fc:	2300      	movs	r3, #0
 801a9fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801aa00:	68fb      	ldr	r3, [r7, #12]
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801aa06:	68bb      	ldr	r3, [r7, #8]
 801aa08:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	691b      	ldr	r3, [r3, #16]
 801aa10:	045b      	lsls	r3, r3, #17
 801aa12:	0c5a      	lsrs	r2, r3, #17
 801aa14:	68bb      	ldr	r3, [r7, #8]
 801aa16:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	4a22      	ldr	r2, [pc, #136]	@ (801aaa8 <HAL_RTC_GetTime+0xb8>)
 801aa20:	4013      	ands	r3, r2
 801aa22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801aa24:	697b      	ldr	r3, [r7, #20]
 801aa26:	0c1b      	lsrs	r3, r3, #16
 801aa28:	b2db      	uxtb	r3, r3
 801aa2a:	223f      	movs	r2, #63	@ 0x3f
 801aa2c:	4013      	ands	r3, r2
 801aa2e:	b2da      	uxtb	r2, r3
 801aa30:	68bb      	ldr	r3, [r7, #8]
 801aa32:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801aa34:	697b      	ldr	r3, [r7, #20]
 801aa36:	0a1b      	lsrs	r3, r3, #8
 801aa38:	b2db      	uxtb	r3, r3
 801aa3a:	227f      	movs	r2, #127	@ 0x7f
 801aa3c:	4013      	ands	r3, r2
 801aa3e:	b2da      	uxtb	r2, r3
 801aa40:	68bb      	ldr	r3, [r7, #8]
 801aa42:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801aa44:	697b      	ldr	r3, [r7, #20]
 801aa46:	b2db      	uxtb	r3, r3
 801aa48:	227f      	movs	r2, #127	@ 0x7f
 801aa4a:	4013      	ands	r3, r2
 801aa4c:	b2da      	uxtb	r2, r3
 801aa4e:	68bb      	ldr	r3, [r7, #8]
 801aa50:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801aa52:	697b      	ldr	r3, [r7, #20]
 801aa54:	0d9b      	lsrs	r3, r3, #22
 801aa56:	b2db      	uxtb	r3, r3
 801aa58:	2201      	movs	r2, #1
 801aa5a:	4013      	ands	r3, r2
 801aa5c:	b2da      	uxtb	r2, r3
 801aa5e:	68bb      	ldr	r3, [r7, #8]
 801aa60:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d11a      	bne.n	801aa9e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801aa68:	68bb      	ldr	r3, [r7, #8]
 801aa6a:	781b      	ldrb	r3, [r3, #0]
 801aa6c:	0018      	movs	r0, r3
 801aa6e:	f000 f9b8 	bl	801ade2 <RTC_Bcd2ToByte>
 801aa72:	0003      	movs	r3, r0
 801aa74:	001a      	movs	r2, r3
 801aa76:	68bb      	ldr	r3, [r7, #8]
 801aa78:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801aa7a:	68bb      	ldr	r3, [r7, #8]
 801aa7c:	785b      	ldrb	r3, [r3, #1]
 801aa7e:	0018      	movs	r0, r3
 801aa80:	f000 f9af 	bl	801ade2 <RTC_Bcd2ToByte>
 801aa84:	0003      	movs	r3, r0
 801aa86:	001a      	movs	r2, r3
 801aa88:	68bb      	ldr	r3, [r7, #8]
 801aa8a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801aa8c:	68bb      	ldr	r3, [r7, #8]
 801aa8e:	789b      	ldrb	r3, [r3, #2]
 801aa90:	0018      	movs	r0, r3
 801aa92:	f000 f9a6 	bl	801ade2 <RTC_Bcd2ToByte>
 801aa96:	0003      	movs	r3, r0
 801aa98:	001a      	movs	r2, r3
 801aa9a:	68bb      	ldr	r3, [r7, #8]
 801aa9c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801aa9e:	2300      	movs	r3, #0
}
 801aaa0:	0018      	movs	r0, r3
 801aaa2:	46bd      	mov	sp, r7
 801aaa4:	b006      	add	sp, #24
 801aaa6:	bd80      	pop	{r7, pc}
 801aaa8:	007f7f7f 	.word	0x007f7f7f

0801aaac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801aaac:	b5b0      	push	{r4, r5, r7, lr}
 801aaae:	b086      	sub	sp, #24
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	60f8      	str	r0, [r7, #12]
 801aab4:	60b9      	str	r1, [r7, #8]
 801aab6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801aab8:	2300      	movs	r3, #0
 801aaba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	2220      	movs	r2, #32
 801aac0:	5c9b      	ldrb	r3, [r3, r2]
 801aac2:	2b01      	cmp	r3, #1
 801aac4:	d101      	bne.n	801aaca <HAL_RTC_SetDate+0x1e>
 801aac6:	2302      	movs	r3, #2
 801aac8:	e07e      	b.n	801abc8 <HAL_RTC_SetDate+0x11c>
 801aaca:	68fb      	ldr	r3, [r7, #12]
 801aacc:	2220      	movs	r2, #32
 801aace:	2101      	movs	r1, #1
 801aad0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	2221      	movs	r2, #33	@ 0x21
 801aad6:	2102      	movs	r1, #2
 801aad8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d10e      	bne.n	801aafe <HAL_RTC_SetDate+0x52>
 801aae0:	68bb      	ldr	r3, [r7, #8]
 801aae2:	785b      	ldrb	r3, [r3, #1]
 801aae4:	001a      	movs	r2, r3
 801aae6:	2310      	movs	r3, #16
 801aae8:	4013      	ands	r3, r2
 801aaea:	d008      	beq.n	801aafe <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801aaec:	68bb      	ldr	r3, [r7, #8]
 801aaee:	785b      	ldrb	r3, [r3, #1]
 801aaf0:	2210      	movs	r2, #16
 801aaf2:	4393      	bics	r3, r2
 801aaf4:	b2db      	uxtb	r3, r3
 801aaf6:	330a      	adds	r3, #10
 801aaf8:	b2da      	uxtb	r2, r3
 801aafa:	68bb      	ldr	r3, [r7, #8]
 801aafc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d11c      	bne.n	801ab3e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801ab04:	68bb      	ldr	r3, [r7, #8]
 801ab06:	78db      	ldrb	r3, [r3, #3]
 801ab08:	0018      	movs	r0, r3
 801ab0a:	f000 f949 	bl	801ada0 <RTC_ByteToBcd2>
 801ab0e:	0003      	movs	r3, r0
 801ab10:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801ab12:	68bb      	ldr	r3, [r7, #8]
 801ab14:	785b      	ldrb	r3, [r3, #1]
 801ab16:	0018      	movs	r0, r3
 801ab18:	f000 f942 	bl	801ada0 <RTC_ByteToBcd2>
 801ab1c:	0003      	movs	r3, r0
 801ab1e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801ab20:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801ab22:	68bb      	ldr	r3, [r7, #8]
 801ab24:	789b      	ldrb	r3, [r3, #2]
 801ab26:	0018      	movs	r0, r3
 801ab28:	f000 f93a 	bl	801ada0 <RTC_ByteToBcd2>
 801ab2c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801ab2e:	0022      	movs	r2, r4
 801ab30:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801ab32:	68bb      	ldr	r3, [r7, #8]
 801ab34:	781b      	ldrb	r3, [r3, #0]
 801ab36:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801ab38:	4313      	orrs	r3, r2
 801ab3a:	617b      	str	r3, [r7, #20]
 801ab3c:	e00e      	b.n	801ab5c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801ab3e:	68bb      	ldr	r3, [r7, #8]
 801ab40:	78db      	ldrb	r3, [r3, #3]
 801ab42:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801ab44:	68bb      	ldr	r3, [r7, #8]
 801ab46:	785b      	ldrb	r3, [r3, #1]
 801ab48:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801ab4a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801ab4c:	68ba      	ldr	r2, [r7, #8]
 801ab4e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801ab50:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801ab52:	68bb      	ldr	r3, [r7, #8]
 801ab54:	781b      	ldrb	r3, [r3, #0]
 801ab56:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801ab58:	4313      	orrs	r3, r2
 801ab5a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	22ca      	movs	r2, #202	@ 0xca
 801ab62:	625a      	str	r2, [r3, #36]	@ 0x24
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	2253      	movs	r2, #83	@ 0x53
 801ab6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801ab6c:	2513      	movs	r5, #19
 801ab6e:	197c      	adds	r4, r7, r5
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	0018      	movs	r0, r3
 801ab74:	f000 f8a6 	bl	801acc4 <RTC_EnterInitMode>
 801ab78:	0003      	movs	r3, r0
 801ab7a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801ab7c:	0028      	movs	r0, r5
 801ab7e:	183b      	adds	r3, r7, r0
 801ab80:	781b      	ldrb	r3, [r3, #0]
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d10c      	bne.n	801aba0 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	697a      	ldr	r2, [r7, #20]
 801ab8c:	4910      	ldr	r1, [pc, #64]	@ (801abd0 <HAL_RTC_SetDate+0x124>)
 801ab8e:	400a      	ands	r2, r1
 801ab90:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801ab92:	183c      	adds	r4, r7, r0
 801ab94:	68fb      	ldr	r3, [r7, #12]
 801ab96:	0018      	movs	r0, r3
 801ab98:	f000 f8d8 	bl	801ad4c <RTC_ExitInitMode>
 801ab9c:	0003      	movs	r3, r0
 801ab9e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801aba0:	2313      	movs	r3, #19
 801aba2:	18fb      	adds	r3, r7, r3
 801aba4:	781b      	ldrb	r3, [r3, #0]
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d103      	bne.n	801abb2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801abaa:	68fb      	ldr	r3, [r7, #12]
 801abac:	2221      	movs	r2, #33	@ 0x21
 801abae:	2101      	movs	r1, #1
 801abb0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	22ff      	movs	r2, #255	@ 0xff
 801abb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801abba:	68fb      	ldr	r3, [r7, #12]
 801abbc:	2220      	movs	r2, #32
 801abbe:	2100      	movs	r1, #0
 801abc0:	5499      	strb	r1, [r3, r2]

  return status;
 801abc2:	2313      	movs	r3, #19
 801abc4:	18fb      	adds	r3, r7, r3
 801abc6:	781b      	ldrb	r3, [r3, #0]
}
 801abc8:	0018      	movs	r0, r3
 801abca:	46bd      	mov	sp, r7
 801abcc:	b006      	add	sp, #24
 801abce:	bdb0      	pop	{r4, r5, r7, pc}
 801abd0:	00ffff3f 	.word	0x00ffff3f

0801abd4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b086      	sub	sp, #24
 801abd8:	af00      	add	r7, sp, #0
 801abda:	60f8      	str	r0, [r7, #12]
 801abdc:	60b9      	str	r1, [r7, #8]
 801abde:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801abe0:	2300      	movs	r3, #0
 801abe2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	685b      	ldr	r3, [r3, #4]
 801abea:	4a21      	ldr	r2, [pc, #132]	@ (801ac70 <HAL_RTC_GetDate+0x9c>)
 801abec:	4013      	ands	r3, r2
 801abee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801abf0:	697b      	ldr	r3, [r7, #20]
 801abf2:	0c1b      	lsrs	r3, r3, #16
 801abf4:	b2da      	uxtb	r2, r3
 801abf6:	68bb      	ldr	r3, [r7, #8]
 801abf8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801abfa:	697b      	ldr	r3, [r7, #20]
 801abfc:	0a1b      	lsrs	r3, r3, #8
 801abfe:	b2db      	uxtb	r3, r3
 801ac00:	221f      	movs	r2, #31
 801ac02:	4013      	ands	r3, r2
 801ac04:	b2da      	uxtb	r2, r3
 801ac06:	68bb      	ldr	r3, [r7, #8]
 801ac08:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801ac0a:	697b      	ldr	r3, [r7, #20]
 801ac0c:	b2db      	uxtb	r3, r3
 801ac0e:	223f      	movs	r2, #63	@ 0x3f
 801ac10:	4013      	ands	r3, r2
 801ac12:	b2da      	uxtb	r2, r3
 801ac14:	68bb      	ldr	r3, [r7, #8]
 801ac16:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801ac18:	697b      	ldr	r3, [r7, #20]
 801ac1a:	0b5b      	lsrs	r3, r3, #13
 801ac1c:	b2db      	uxtb	r3, r3
 801ac1e:	2207      	movs	r2, #7
 801ac20:	4013      	ands	r3, r2
 801ac22:	b2da      	uxtb	r2, r3
 801ac24:	68bb      	ldr	r3, [r7, #8]
 801ac26:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d11a      	bne.n	801ac64 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801ac2e:	68bb      	ldr	r3, [r7, #8]
 801ac30:	78db      	ldrb	r3, [r3, #3]
 801ac32:	0018      	movs	r0, r3
 801ac34:	f000 f8d5 	bl	801ade2 <RTC_Bcd2ToByte>
 801ac38:	0003      	movs	r3, r0
 801ac3a:	001a      	movs	r2, r3
 801ac3c:	68bb      	ldr	r3, [r7, #8]
 801ac3e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801ac40:	68bb      	ldr	r3, [r7, #8]
 801ac42:	785b      	ldrb	r3, [r3, #1]
 801ac44:	0018      	movs	r0, r3
 801ac46:	f000 f8cc 	bl	801ade2 <RTC_Bcd2ToByte>
 801ac4a:	0003      	movs	r3, r0
 801ac4c:	001a      	movs	r2, r3
 801ac4e:	68bb      	ldr	r3, [r7, #8]
 801ac50:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801ac52:	68bb      	ldr	r3, [r7, #8]
 801ac54:	789b      	ldrb	r3, [r3, #2]
 801ac56:	0018      	movs	r0, r3
 801ac58:	f000 f8c3 	bl	801ade2 <RTC_Bcd2ToByte>
 801ac5c:	0003      	movs	r3, r0
 801ac5e:	001a      	movs	r2, r3
 801ac60:	68bb      	ldr	r3, [r7, #8]
 801ac62:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801ac64:	2300      	movs	r3, #0
}
 801ac66:	0018      	movs	r0, r3
 801ac68:	46bd      	mov	sp, r7
 801ac6a:	b006      	add	sp, #24
 801ac6c:	bd80      	pop	{r7, pc}
 801ac6e:	46c0      	nop			@ (mov r8, r8)
 801ac70:	00ffff3f 	.word	0x00ffff3f

0801ac74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801ac74:	b580      	push	{r7, lr}
 801ac76:	b084      	sub	sp, #16
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801ac7c:	2300      	movs	r3, #0
 801ac7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	4a0e      	ldr	r2, [pc, #56]	@ (801acc0 <HAL_RTC_WaitForSynchro+0x4c>)
 801ac86:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801ac88:	f7f8 fa50 	bl	801312c <HAL_GetTick>
 801ac8c:	0003      	movs	r3, r0
 801ac8e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801ac90:	e00a      	b.n	801aca8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801ac92:	f7f8 fa4b 	bl	801312c <HAL_GetTick>
 801ac96:	0002      	movs	r2, r0
 801ac98:	68fb      	ldr	r3, [r7, #12]
 801ac9a:	1ad2      	subs	r2, r2, r3
 801ac9c:	23fa      	movs	r3, #250	@ 0xfa
 801ac9e:	009b      	lsls	r3, r3, #2
 801aca0:	429a      	cmp	r2, r3
 801aca2:	d901      	bls.n	801aca8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801aca4:	2303      	movs	r3, #3
 801aca6:	e006      	b.n	801acb6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	68db      	ldr	r3, [r3, #12]
 801acae:	2220      	movs	r2, #32
 801acb0:	4013      	ands	r3, r2
 801acb2:	d0ee      	beq.n	801ac92 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801acb4:	2300      	movs	r3, #0
}
 801acb6:	0018      	movs	r0, r3
 801acb8:	46bd      	mov	sp, r7
 801acba:	b004      	add	sp, #16
 801acbc:	bd80      	pop	{r7, pc}
 801acbe:	46c0      	nop			@ (mov r8, r8)
 801acc0:	0001ff5f 	.word	0x0001ff5f

0801acc4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801acc4:	b580      	push	{r7, lr}
 801acc6:	b084      	sub	sp, #16
 801acc8:	af00      	add	r7, sp, #0
 801acca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801accc:	2300      	movs	r3, #0
 801acce:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801acd0:	230f      	movs	r3, #15
 801acd2:	18fb      	adds	r3, r7, r3
 801acd4:	2200      	movs	r2, #0
 801acd6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	68db      	ldr	r3, [r3, #12]
 801acde:	2240      	movs	r2, #64	@ 0x40
 801ace0:	4013      	ands	r3, r2
 801ace2:	d12c      	bne.n	801ad3e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	68da      	ldr	r2, [r3, #12]
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	2180      	movs	r1, #128	@ 0x80
 801acf0:	430a      	orrs	r2, r1
 801acf2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801acf4:	f7f8 fa1a 	bl	801312c <HAL_GetTick>
 801acf8:	0003      	movs	r3, r0
 801acfa:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801acfc:	e014      	b.n	801ad28 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801acfe:	f7f8 fa15 	bl	801312c <HAL_GetTick>
 801ad02:	0002      	movs	r2, r0
 801ad04:	68bb      	ldr	r3, [r7, #8]
 801ad06:	1ad2      	subs	r2, r2, r3
 801ad08:	200f      	movs	r0, #15
 801ad0a:	183b      	adds	r3, r7, r0
 801ad0c:	1839      	adds	r1, r7, r0
 801ad0e:	7809      	ldrb	r1, [r1, #0]
 801ad10:	7019      	strb	r1, [r3, #0]
 801ad12:	23fa      	movs	r3, #250	@ 0xfa
 801ad14:	009b      	lsls	r3, r3, #2
 801ad16:	429a      	cmp	r2, r3
 801ad18:	d906      	bls.n	801ad28 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	2221      	movs	r2, #33	@ 0x21
 801ad1e:	2104      	movs	r1, #4
 801ad20:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801ad22:	183b      	adds	r3, r7, r0
 801ad24:	2201      	movs	r2, #1
 801ad26:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	68db      	ldr	r3, [r3, #12]
 801ad2e:	2240      	movs	r2, #64	@ 0x40
 801ad30:	4013      	ands	r3, r2
 801ad32:	d104      	bne.n	801ad3e <RTC_EnterInitMode+0x7a>
 801ad34:	230f      	movs	r3, #15
 801ad36:	18fb      	adds	r3, r7, r3
 801ad38:	781b      	ldrb	r3, [r3, #0]
 801ad3a:	2b01      	cmp	r3, #1
 801ad3c:	d1df      	bne.n	801acfe <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801ad3e:	230f      	movs	r3, #15
 801ad40:	18fb      	adds	r3, r7, r3
 801ad42:	781b      	ldrb	r3, [r3, #0]
}
 801ad44:	0018      	movs	r0, r3
 801ad46:	46bd      	mov	sp, r7
 801ad48:	b004      	add	sp, #16
 801ad4a:	bd80      	pop	{r7, pc}

0801ad4c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801ad4c:	b590      	push	{r4, r7, lr}
 801ad4e:	b085      	sub	sp, #20
 801ad50:	af00      	add	r7, sp, #0
 801ad52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ad54:	240f      	movs	r4, #15
 801ad56:	193b      	adds	r3, r7, r4
 801ad58:	2200      	movs	r2, #0
 801ad5a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	68da      	ldr	r2, [r3, #12]
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	2180      	movs	r1, #128	@ 0x80
 801ad68:	438a      	bics	r2, r1
 801ad6a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	689b      	ldr	r3, [r3, #8]
 801ad72:	2220      	movs	r2, #32
 801ad74:	4013      	ands	r3, r2
 801ad76:	d10c      	bne.n	801ad92 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	0018      	movs	r0, r3
 801ad7c:	f7ff ff7a 	bl	801ac74 <HAL_RTC_WaitForSynchro>
 801ad80:	1e03      	subs	r3, r0, #0
 801ad82:	d006      	beq.n	801ad92 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	2221      	movs	r2, #33	@ 0x21
 801ad88:	2104      	movs	r1, #4
 801ad8a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801ad8c:	193b      	adds	r3, r7, r4
 801ad8e:	2201      	movs	r2, #1
 801ad90:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801ad92:	230f      	movs	r3, #15
 801ad94:	18fb      	adds	r3, r7, r3
 801ad96:	781b      	ldrb	r3, [r3, #0]
}
 801ad98:	0018      	movs	r0, r3
 801ad9a:	46bd      	mov	sp, r7
 801ad9c:	b005      	add	sp, #20
 801ad9e:	bd90      	pop	{r4, r7, pc}

0801ada0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b084      	sub	sp, #16
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	0002      	movs	r2, r0
 801ada8:	1dfb      	adds	r3, r7, #7
 801adaa:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801adac:	2300      	movs	r3, #0
 801adae:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801adb0:	e007      	b.n	801adc2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801adb2:	68fb      	ldr	r3, [r7, #12]
 801adb4:	3301      	adds	r3, #1
 801adb6:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801adb8:	1dfb      	adds	r3, r7, #7
 801adba:	1dfa      	adds	r2, r7, #7
 801adbc:	7812      	ldrb	r2, [r2, #0]
 801adbe:	3a0a      	subs	r2, #10
 801adc0:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801adc2:	1dfb      	adds	r3, r7, #7
 801adc4:	781b      	ldrb	r3, [r3, #0]
 801adc6:	2b09      	cmp	r3, #9
 801adc8:	d8f3      	bhi.n	801adb2 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	b2db      	uxtb	r3, r3
 801adce:	011b      	lsls	r3, r3, #4
 801add0:	b2da      	uxtb	r2, r3
 801add2:	1dfb      	adds	r3, r7, #7
 801add4:	781b      	ldrb	r3, [r3, #0]
 801add6:	4313      	orrs	r3, r2
 801add8:	b2db      	uxtb	r3, r3
}
 801adda:	0018      	movs	r0, r3
 801addc:	46bd      	mov	sp, r7
 801adde:	b004      	add	sp, #16
 801ade0:	bd80      	pop	{r7, pc}

0801ade2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801ade2:	b580      	push	{r7, lr}
 801ade4:	b084      	sub	sp, #16
 801ade6:	af00      	add	r7, sp, #0
 801ade8:	0002      	movs	r2, r0
 801adea:	1dfb      	adds	r3, r7, #7
 801adec:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801adee:	2300      	movs	r3, #0
 801adf0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801adf2:	1dfb      	adds	r3, r7, #7
 801adf4:	781b      	ldrb	r3, [r3, #0]
 801adf6:	091b      	lsrs	r3, r3, #4
 801adf8:	b2db      	uxtb	r3, r3
 801adfa:	001a      	movs	r2, r3
 801adfc:	0013      	movs	r3, r2
 801adfe:	009b      	lsls	r3, r3, #2
 801ae00:	189b      	adds	r3, r3, r2
 801ae02:	005b      	lsls	r3, r3, #1
 801ae04:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801ae06:	68fb      	ldr	r3, [r7, #12]
 801ae08:	b2da      	uxtb	r2, r3
 801ae0a:	1dfb      	adds	r3, r7, #7
 801ae0c:	781b      	ldrb	r3, [r3, #0]
 801ae0e:	210f      	movs	r1, #15
 801ae10:	400b      	ands	r3, r1
 801ae12:	b2db      	uxtb	r3, r3
 801ae14:	18d3      	adds	r3, r2, r3
 801ae16:	b2db      	uxtb	r3, r3
}
 801ae18:	0018      	movs	r0, r3
 801ae1a:	46bd      	mov	sp, r7
 801ae1c:	b004      	add	sp, #16
 801ae1e:	bd80      	pop	{r7, pc}

0801ae20 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b086      	sub	sp, #24
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	60f8      	str	r0, [r7, #12]
 801ae28:	60b9      	str	r1, [r7, #8]
 801ae2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801ae2c:	4b64      	ldr	r3, [pc, #400]	@ (801afc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	22fa      	movs	r2, #250	@ 0xfa
 801ae32:	01d1      	lsls	r1, r2, #7
 801ae34:	0018      	movs	r0, r3
 801ae36:	f7e5 f9b5 	bl	80001a4 <__udivsi3>
 801ae3a:	0003      	movs	r3, r0
 801ae3c:	001a      	movs	r2, r3
 801ae3e:	0013      	movs	r3, r2
 801ae40:	015b      	lsls	r3, r3, #5
 801ae42:	1a9b      	subs	r3, r3, r2
 801ae44:	009b      	lsls	r3, r3, #2
 801ae46:	189b      	adds	r3, r3, r2
 801ae48:	00db      	lsls	r3, r3, #3
 801ae4a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801ae4c:	68fb      	ldr	r3, [r7, #12]
 801ae4e:	2220      	movs	r2, #32
 801ae50:	5c9b      	ldrb	r3, [r3, r2]
 801ae52:	2b01      	cmp	r3, #1
 801ae54:	d101      	bne.n	801ae5a <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801ae56:	2302      	movs	r3, #2
 801ae58:	e0ad      	b.n	801afb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	2220      	movs	r2, #32
 801ae5e:	2101      	movs	r1, #1
 801ae60:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	2221      	movs	r2, #33	@ 0x21
 801ae66:	2102      	movs	r1, #2
 801ae68:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801ae6a:	68fb      	ldr	r3, [r7, #12]
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	22ca      	movs	r2, #202	@ 0xca
 801ae70:	625a      	str	r2, [r3, #36]	@ 0x24
 801ae72:	68fb      	ldr	r3, [r7, #12]
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	2253      	movs	r2, #83	@ 0x53
 801ae78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	689a      	ldr	r2, [r3, #8]
 801ae80:	2380      	movs	r3, #128	@ 0x80
 801ae82:	00db      	lsls	r3, r3, #3
 801ae84:	4013      	ands	r3, r2
 801ae86:	d019      	beq.n	801aebc <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801ae88:	697b      	ldr	r3, [r7, #20]
 801ae8a:	3b01      	subs	r3, #1
 801ae8c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801ae8e:	697b      	ldr	r3, [r7, #20]
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d10d      	bne.n	801aeb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	22ff      	movs	r2, #255	@ 0xff
 801ae9a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	2221      	movs	r2, #33	@ 0x21
 801aea0:	2103      	movs	r1, #3
 801aea2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	2220      	movs	r2, #32
 801aea8:	2100      	movs	r1, #0
 801aeaa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801aeac:	2303      	movs	r3, #3
 801aeae:	e082      	b.n	801afb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	68db      	ldr	r3, [r3, #12]
 801aeb6:	2204      	movs	r2, #4
 801aeb8:	4013      	ands	r3, r2
 801aeba:	d1e5      	bne.n	801ae88 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	689a      	ldr	r2, [r3, #8]
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	493f      	ldr	r1, [pc, #252]	@ (801afc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801aec8:	400a      	ands	r2, r1
 801aeca:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801aecc:	68fb      	ldr	r3, [r7, #12]
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	68db      	ldr	r3, [r3, #12]
 801aed2:	22ff      	movs	r2, #255	@ 0xff
 801aed4:	401a      	ands	r2, r3
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	493b      	ldr	r1, [pc, #236]	@ (801afc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801aedc:	430a      	orrs	r2, r1
 801aede:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801aee0:	4b37      	ldr	r3, [pc, #220]	@ (801afc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	22fa      	movs	r2, #250	@ 0xfa
 801aee6:	01d1      	lsls	r1, r2, #7
 801aee8:	0018      	movs	r0, r3
 801aeea:	f7e5 f95b 	bl	80001a4 <__udivsi3>
 801aeee:	0003      	movs	r3, r0
 801aef0:	001a      	movs	r2, r3
 801aef2:	0013      	movs	r3, r2
 801aef4:	015b      	lsls	r3, r3, #5
 801aef6:	1a9b      	subs	r3, r3, r2
 801aef8:	009b      	lsls	r3, r3, #2
 801aefa:	189b      	adds	r3, r3, r2
 801aefc:	00db      	lsls	r3, r3, #3
 801aefe:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801af00:	697b      	ldr	r3, [r7, #20]
 801af02:	3b01      	subs	r3, #1
 801af04:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801af06:	697b      	ldr	r3, [r7, #20]
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d10d      	bne.n	801af28 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	22ff      	movs	r2, #255	@ 0xff
 801af12:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	2221      	movs	r2, #33	@ 0x21
 801af18:	2103      	movs	r1, #3
 801af1a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801af1c:	68fb      	ldr	r3, [r7, #12]
 801af1e:	2220      	movs	r2, #32
 801af20:	2100      	movs	r1, #0
 801af22:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801af24:	2303      	movs	r3, #3
 801af26:	e046      	b.n	801afb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	68db      	ldr	r3, [r3, #12]
 801af2e:	2204      	movs	r2, #4
 801af30:	4013      	ands	r3, r2
 801af32:	d0e5      	beq.n	801af00 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801af34:	68fb      	ldr	r3, [r7, #12]
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	689a      	ldr	r2, [r3, #8]
 801af3a:	68fb      	ldr	r3, [r7, #12]
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	2107      	movs	r1, #7
 801af40:	438a      	bics	r2, r1
 801af42:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801af44:	68fb      	ldr	r3, [r7, #12]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	6899      	ldr	r1, [r3, #8]
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	681b      	ldr	r3, [r3, #0]
 801af4e:	687a      	ldr	r2, [r7, #4]
 801af50:	430a      	orrs	r2, r1
 801af52:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801af54:	68fb      	ldr	r3, [r7, #12]
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	68ba      	ldr	r2, [r7, #8]
 801af5a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801af5c:	4b1b      	ldr	r3, [pc, #108]	@ (801afcc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801af5e:	681a      	ldr	r2, [r3, #0]
 801af60:	4b1a      	ldr	r3, [pc, #104]	@ (801afcc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801af62:	2180      	movs	r1, #128	@ 0x80
 801af64:	0349      	lsls	r1, r1, #13
 801af66:	430a      	orrs	r2, r1
 801af68:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801af6a:	4b18      	ldr	r3, [pc, #96]	@ (801afcc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801af6c:	689a      	ldr	r2, [r3, #8]
 801af6e:	4b17      	ldr	r3, [pc, #92]	@ (801afcc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801af70:	2180      	movs	r1, #128	@ 0x80
 801af72:	0349      	lsls	r1, r1, #13
 801af74:	430a      	orrs	r2, r1
 801af76:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	689a      	ldr	r2, [r3, #8]
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	2180      	movs	r1, #128	@ 0x80
 801af84:	01c9      	lsls	r1, r1, #7
 801af86:	430a      	orrs	r2, r1
 801af88:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	689a      	ldr	r2, [r3, #8]
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	2180      	movs	r1, #128	@ 0x80
 801af96:	00c9      	lsls	r1, r1, #3
 801af98:	430a      	orrs	r2, r1
 801af9a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801af9c:	68fb      	ldr	r3, [r7, #12]
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	22ff      	movs	r2, #255	@ 0xff
 801afa2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	2221      	movs	r2, #33	@ 0x21
 801afa8:	2101      	movs	r1, #1
 801afaa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	2220      	movs	r2, #32
 801afb0:	2100      	movs	r1, #0
 801afb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801afb4:	2300      	movs	r3, #0
}
 801afb6:	0018      	movs	r0, r3
 801afb8:	46bd      	mov	sp, r7
 801afba:	b006      	add	sp, #24
 801afbc:	bd80      	pop	{r7, pc}
 801afbe:	46c0      	nop			@ (mov r8, r8)
 801afc0:	200000e0 	.word	0x200000e0
 801afc4:	fffffbff 	.word	0xfffffbff
 801afc8:	fffffb7f 	.word	0xfffffb7f
 801afcc:	40010400 	.word	0x40010400

0801afd0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b084      	sub	sp, #16
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801afd8:	2300      	movs	r3, #0
 801afda:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	2220      	movs	r2, #32
 801afe0:	5c9b      	ldrb	r3, [r3, r2]
 801afe2:	2b01      	cmp	r3, #1
 801afe4:	d101      	bne.n	801afea <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801afe6:	2302      	movs	r3, #2
 801afe8:	e04e      	b.n	801b088 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	2220      	movs	r2, #32
 801afee:	2101      	movs	r1, #1
 801aff0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	2221      	movs	r2, #33	@ 0x21
 801aff6:	2102      	movs	r1, #2
 801aff8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	22ca      	movs	r2, #202	@ 0xca
 801b000:	625a      	str	r2, [r3, #36]	@ 0x24
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	2253      	movs	r2, #83	@ 0x53
 801b008:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	689a      	ldr	r2, [r3, #8]
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	491e      	ldr	r1, [pc, #120]	@ (801b090 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801b016:	400a      	ands	r2, r1
 801b018:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	689a      	ldr	r2, [r3, #8]
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	681b      	ldr	r3, [r3, #0]
 801b024:	491b      	ldr	r1, [pc, #108]	@ (801b094 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801b026:	400a      	ands	r2, r1
 801b028:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b02a:	f7f8 f87f 	bl	801312c <HAL_GetTick>
 801b02e:	0003      	movs	r3, r0
 801b030:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801b032:	e016      	b.n	801b062 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801b034:	f7f8 f87a 	bl	801312c <HAL_GetTick>
 801b038:	0002      	movs	r2, r0
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	1ad2      	subs	r2, r2, r3
 801b03e:	23fa      	movs	r3, #250	@ 0xfa
 801b040:	009b      	lsls	r3, r3, #2
 801b042:	429a      	cmp	r2, r3
 801b044:	d90d      	bls.n	801b062 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	22ff      	movs	r2, #255	@ 0xff
 801b04c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	2221      	movs	r2, #33	@ 0x21
 801b052:	2103      	movs	r1, #3
 801b054:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	2220      	movs	r2, #32
 801b05a:	2100      	movs	r1, #0
 801b05c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801b05e:	2303      	movs	r3, #3
 801b060:	e012      	b.n	801b088 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	68db      	ldr	r3, [r3, #12]
 801b068:	2204      	movs	r2, #4
 801b06a:	4013      	ands	r3, r2
 801b06c:	d0e2      	beq.n	801b034 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	22ff      	movs	r2, #255	@ 0xff
 801b074:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	2221      	movs	r2, #33	@ 0x21
 801b07a:	2101      	movs	r1, #1
 801b07c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	2220      	movs	r2, #32
 801b082:	2100      	movs	r1, #0
 801b084:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b086:	2300      	movs	r3, #0
}
 801b088:	0018      	movs	r0, r3
 801b08a:	46bd      	mov	sp, r7
 801b08c:	b004      	add	sp, #16
 801b08e:	bd80      	pop	{r7, pc}
 801b090:	fffffbff 	.word	0xfffffbff
 801b094:	ffffbfff 	.word	0xffffbfff

0801b098 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801b098:	b580      	push	{r7, lr}
 801b09a:	b082      	sub	sp, #8
 801b09c:	af00      	add	r7, sp, #0
 801b09e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801b0a0:	4b13      	ldr	r3, [pc, #76]	@ (801b0f0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801b0a2:	2280      	movs	r2, #128	@ 0x80
 801b0a4:	0352      	lsls	r2, r2, #13
 801b0a6:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	689a      	ldr	r2, [r3, #8]
 801b0ae:	2380      	movs	r3, #128	@ 0x80
 801b0b0:	01db      	lsls	r3, r3, #7
 801b0b2:	4013      	ands	r3, r2
 801b0b4:	d014      	beq.n	801b0e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	68da      	ldr	r2, [r3, #12]
 801b0bc:	2380      	movs	r3, #128	@ 0x80
 801b0be:	00db      	lsls	r3, r3, #3
 801b0c0:	4013      	ands	r3, r2
 801b0c2:	d00d      	beq.n	801b0e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	68db      	ldr	r3, [r3, #12]
 801b0ca:	22ff      	movs	r2, #255	@ 0xff
 801b0cc:	401a      	ands	r2, r3
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	4908      	ldr	r1, [pc, #32]	@ (801b0f4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801b0d4:	430a      	orrs	r2, r1
 801b0d6:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	0018      	movs	r0, r3
 801b0dc:	f000 f80c 	bl	801b0f8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	2221      	movs	r2, #33	@ 0x21
 801b0e4:	2101      	movs	r1, #1
 801b0e6:	5499      	strb	r1, [r3, r2]
}
 801b0e8:	46c0      	nop			@ (mov r8, r8)
 801b0ea:	46bd      	mov	sp, r7
 801b0ec:	b002      	add	sp, #8
 801b0ee:	bd80      	pop	{r7, pc}
 801b0f0:	40010400 	.word	0x40010400
 801b0f4:	fffffb7f 	.word	0xfffffb7f

0801b0f8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801b0f8:	b580      	push	{r7, lr}
 801b0fa:	b082      	sub	sp, #8
 801b0fc:	af00      	add	r7, sp, #0
 801b0fe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801b100:	46c0      	nop			@ (mov r8, r8)
 801b102:	46bd      	mov	sp, r7
 801b104:	b002      	add	sp, #8
 801b106:	bd80      	pop	{r7, pc}

0801b108 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	b086      	sub	sp, #24
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	60f8      	str	r0, [r7, #12]
 801b110:	60b9      	str	r1, [r7, #8]
 801b112:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801b114:	2300      	movs	r3, #0
 801b116:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	3350      	adds	r3, #80	@ 0x50
 801b11e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801b120:	68bb      	ldr	r3, [r7, #8]
 801b122:	009b      	lsls	r3, r3, #2
 801b124:	697a      	ldr	r2, [r7, #20]
 801b126:	18d3      	adds	r3, r2, r3
 801b128:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801b12a:	697b      	ldr	r3, [r7, #20]
 801b12c:	687a      	ldr	r2, [r7, #4]
 801b12e:	601a      	str	r2, [r3, #0]
}
 801b130:	46c0      	nop			@ (mov r8, r8)
 801b132:	46bd      	mov	sp, r7
 801b134:	b006      	add	sp, #24
 801b136:	bd80      	pop	{r7, pc}

0801b138 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801b138:	b580      	push	{r7, lr}
 801b13a:	b084      	sub	sp, #16
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	6078      	str	r0, [r7, #4]
 801b140:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801b142:	2300      	movs	r3, #0
 801b144:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	3350      	adds	r3, #80	@ 0x50
 801b14c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801b14e:	683b      	ldr	r3, [r7, #0]
 801b150:	009b      	lsls	r3, r3, #2
 801b152:	68fa      	ldr	r2, [r7, #12]
 801b154:	18d3      	adds	r3, r2, r3
 801b156:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801b158:	68fb      	ldr	r3, [r7, #12]
 801b15a:	681b      	ldr	r3, [r3, #0]
}
 801b15c:	0018      	movs	r0, r3
 801b15e:	46bd      	mov	sp, r7
 801b160:	b004      	add	sp, #16
 801b162:	bd80      	pop	{r7, pc}

0801b164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801b164:	b580      	push	{r7, lr}
 801b166:	b082      	sub	sp, #8
 801b168:	af00      	add	r7, sp, #0
 801b16a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d101      	bne.n	801b176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801b172:	2301      	movs	r3, #1
 801b174:	e032      	b.n	801b1dc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	2239      	movs	r2, #57	@ 0x39
 801b17a:	5c9b      	ldrb	r3, [r3, r2]
 801b17c:	b2db      	uxtb	r3, r3
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d107      	bne.n	801b192 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	2238      	movs	r2, #56	@ 0x38
 801b186:	2100      	movs	r1, #0
 801b188:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	0018      	movs	r0, r3
 801b18e:	f7f6 fff3 	bl	8012178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	2239      	movs	r2, #57	@ 0x39
 801b196:	2102      	movs	r1, #2
 801b198:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	681a      	ldr	r2, [r3, #0]
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	3304      	adds	r3, #4
 801b1a2:	0019      	movs	r1, r3
 801b1a4:	0010      	movs	r0, r2
 801b1a6:	f000 fa1d 	bl	801b5e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	223e      	movs	r2, #62	@ 0x3e
 801b1ae:	2101      	movs	r1, #1
 801b1b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	223a      	movs	r2, #58	@ 0x3a
 801b1b6:	2101      	movs	r1, #1
 801b1b8:	5499      	strb	r1, [r3, r2]
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	223b      	movs	r2, #59	@ 0x3b
 801b1be:	2101      	movs	r1, #1
 801b1c0:	5499      	strb	r1, [r3, r2]
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	223c      	movs	r2, #60	@ 0x3c
 801b1c6:	2101      	movs	r1, #1
 801b1c8:	5499      	strb	r1, [r3, r2]
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	223d      	movs	r2, #61	@ 0x3d
 801b1ce:	2101      	movs	r1, #1
 801b1d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	2239      	movs	r2, #57	@ 0x39
 801b1d6:	2101      	movs	r1, #1
 801b1d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b1da:	2300      	movs	r3, #0
}
 801b1dc:	0018      	movs	r0, r3
 801b1de:	46bd      	mov	sp, r7
 801b1e0:	b002      	add	sp, #8
 801b1e2:	bd80      	pop	{r7, pc}

0801b1e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801b1e4:	b580      	push	{r7, lr}
 801b1e6:	b084      	sub	sp, #16
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	2239      	movs	r2, #57	@ 0x39
 801b1f0:	5c9b      	ldrb	r3, [r3, r2]
 801b1f2:	b2db      	uxtb	r3, r3
 801b1f4:	2b01      	cmp	r3, #1
 801b1f6:	d001      	beq.n	801b1fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801b1f8:	2301      	movs	r3, #1
 801b1fa:	e033      	b.n	801b264 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	2239      	movs	r2, #57	@ 0x39
 801b200:	2102      	movs	r1, #2
 801b202:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	681a      	ldr	r2, [r3, #0]
 801b208:	2380      	movs	r3, #128	@ 0x80
 801b20a:	05db      	lsls	r3, r3, #23
 801b20c:	429a      	cmp	r2, r3
 801b20e:	d00e      	beq.n	801b22e <HAL_TIM_Base_Start+0x4a>
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	4a15      	ldr	r2, [pc, #84]	@ (801b26c <HAL_TIM_Base_Start+0x88>)
 801b216:	4293      	cmp	r3, r2
 801b218:	d009      	beq.n	801b22e <HAL_TIM_Base_Start+0x4a>
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	4a14      	ldr	r2, [pc, #80]	@ (801b270 <HAL_TIM_Base_Start+0x8c>)
 801b220:	4293      	cmp	r3, r2
 801b222:	d004      	beq.n	801b22e <HAL_TIM_Base_Start+0x4a>
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	4a12      	ldr	r2, [pc, #72]	@ (801b274 <HAL_TIM_Base_Start+0x90>)
 801b22a:	4293      	cmp	r3, r2
 801b22c:	d111      	bne.n	801b252 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	689b      	ldr	r3, [r3, #8]
 801b234:	2207      	movs	r2, #7
 801b236:	4013      	ands	r3, r2
 801b238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b23a:	68fb      	ldr	r3, [r7, #12]
 801b23c:	2b06      	cmp	r3, #6
 801b23e:	d010      	beq.n	801b262 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	681a      	ldr	r2, [r3, #0]
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	2101      	movs	r1, #1
 801b24c:	430a      	orrs	r2, r1
 801b24e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b250:	e007      	b.n	801b262 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	681a      	ldr	r2, [r3, #0]
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	2101      	movs	r1, #1
 801b25e:	430a      	orrs	r2, r1
 801b260:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801b262:	2300      	movs	r3, #0
}
 801b264:	0018      	movs	r0, r3
 801b266:	46bd      	mov	sp, r7
 801b268:	b004      	add	sp, #16
 801b26a:	bd80      	pop	{r7, pc}
 801b26c:	40000400 	.word	0x40000400
 801b270:	40010800 	.word	0x40010800
 801b274:	40011400 	.word	0x40011400

0801b278 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801b278:	b580      	push	{r7, lr}
 801b27a:	b082      	sub	sp, #8
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	681b      	ldr	r3, [r3, #0]
 801b284:	6a1b      	ldr	r3, [r3, #32]
 801b286:	4a0a      	ldr	r2, [pc, #40]	@ (801b2b0 <HAL_TIM_Base_Stop+0x38>)
 801b288:	4013      	ands	r3, r2
 801b28a:	d107      	bne.n	801b29c <HAL_TIM_Base_Stop+0x24>
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	681a      	ldr	r2, [r3, #0]
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	2101      	movs	r1, #1
 801b298:	438a      	bics	r2, r1
 801b29a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	2239      	movs	r2, #57	@ 0x39
 801b2a0:	2101      	movs	r1, #1
 801b2a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801b2a4:	2300      	movs	r3, #0
}
 801b2a6:	0018      	movs	r0, r3
 801b2a8:	46bd      	mov	sp, r7
 801b2aa:	b002      	add	sp, #8
 801b2ac:	bd80      	pop	{r7, pc}
 801b2ae:	46c0      	nop			@ (mov r8, r8)
 801b2b0:	00001111 	.word	0x00001111

0801b2b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801b2b4:	b580      	push	{r7, lr}
 801b2b6:	b082      	sub	sp, #8
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d101      	bne.n	801b2c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801b2c2:	2301      	movs	r3, #1
 801b2c4:	e032      	b.n	801b32c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	2239      	movs	r2, #57	@ 0x39
 801b2ca:	5c9b      	ldrb	r3, [r3, r2]
 801b2cc:	b2db      	uxtb	r3, r3
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d107      	bne.n	801b2e2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	2238      	movs	r2, #56	@ 0x38
 801b2d6:	2100      	movs	r1, #0
 801b2d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	0018      	movs	r0, r3
 801b2de:	f7f6 ff27 	bl	8012130 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	2239      	movs	r2, #57	@ 0x39
 801b2e6:	2102      	movs	r1, #2
 801b2e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	681a      	ldr	r2, [r3, #0]
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	3304      	adds	r3, #4
 801b2f2:	0019      	movs	r1, r3
 801b2f4:	0010      	movs	r0, r2
 801b2f6:	f000 f975 	bl	801b5e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	223e      	movs	r2, #62	@ 0x3e
 801b2fe:	2101      	movs	r1, #1
 801b300:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	223a      	movs	r2, #58	@ 0x3a
 801b306:	2101      	movs	r1, #1
 801b308:	5499      	strb	r1, [r3, r2]
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	223b      	movs	r2, #59	@ 0x3b
 801b30e:	2101      	movs	r1, #1
 801b310:	5499      	strb	r1, [r3, r2]
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	223c      	movs	r2, #60	@ 0x3c
 801b316:	2101      	movs	r1, #1
 801b318:	5499      	strb	r1, [r3, r2]
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	223d      	movs	r2, #61	@ 0x3d
 801b31e:	2101      	movs	r1, #1
 801b320:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	2239      	movs	r2, #57	@ 0x39
 801b326:	2101      	movs	r1, #1
 801b328:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b32a:	2300      	movs	r3, #0
}
 801b32c:	0018      	movs	r0, r3
 801b32e:	46bd      	mov	sp, r7
 801b330:	b002      	add	sp, #8
 801b332:	bd80      	pop	{r7, pc}

0801b334 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801b334:	b580      	push	{r7, lr}
 801b336:	b084      	sub	sp, #16
 801b338:	af00      	add	r7, sp, #0
 801b33a:	6078      	str	r0, [r7, #4]
 801b33c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801b33e:	683b      	ldr	r3, [r7, #0]
 801b340:	2b00      	cmp	r3, #0
 801b342:	d108      	bne.n	801b356 <HAL_TIM_PWM_Start+0x22>
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	223a      	movs	r2, #58	@ 0x3a
 801b348:	5c9b      	ldrb	r3, [r3, r2]
 801b34a:	b2db      	uxtb	r3, r3
 801b34c:	3b01      	subs	r3, #1
 801b34e:	1e5a      	subs	r2, r3, #1
 801b350:	4193      	sbcs	r3, r2
 801b352:	b2db      	uxtb	r3, r3
 801b354:	e01f      	b.n	801b396 <HAL_TIM_PWM_Start+0x62>
 801b356:	683b      	ldr	r3, [r7, #0]
 801b358:	2b04      	cmp	r3, #4
 801b35a:	d108      	bne.n	801b36e <HAL_TIM_PWM_Start+0x3a>
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	223b      	movs	r2, #59	@ 0x3b
 801b360:	5c9b      	ldrb	r3, [r3, r2]
 801b362:	b2db      	uxtb	r3, r3
 801b364:	3b01      	subs	r3, #1
 801b366:	1e5a      	subs	r2, r3, #1
 801b368:	4193      	sbcs	r3, r2
 801b36a:	b2db      	uxtb	r3, r3
 801b36c:	e013      	b.n	801b396 <HAL_TIM_PWM_Start+0x62>
 801b36e:	683b      	ldr	r3, [r7, #0]
 801b370:	2b08      	cmp	r3, #8
 801b372:	d108      	bne.n	801b386 <HAL_TIM_PWM_Start+0x52>
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	223c      	movs	r2, #60	@ 0x3c
 801b378:	5c9b      	ldrb	r3, [r3, r2]
 801b37a:	b2db      	uxtb	r3, r3
 801b37c:	3b01      	subs	r3, #1
 801b37e:	1e5a      	subs	r2, r3, #1
 801b380:	4193      	sbcs	r3, r2
 801b382:	b2db      	uxtb	r3, r3
 801b384:	e007      	b.n	801b396 <HAL_TIM_PWM_Start+0x62>
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	223d      	movs	r2, #61	@ 0x3d
 801b38a:	5c9b      	ldrb	r3, [r3, r2]
 801b38c:	b2db      	uxtb	r3, r3
 801b38e:	3b01      	subs	r3, #1
 801b390:	1e5a      	subs	r2, r3, #1
 801b392:	4193      	sbcs	r3, r2
 801b394:	b2db      	uxtb	r3, r3
 801b396:	2b00      	cmp	r3, #0
 801b398:	d001      	beq.n	801b39e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801b39a:	2301      	movs	r3, #1
 801b39c:	e052      	b.n	801b444 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801b39e:	683b      	ldr	r3, [r7, #0]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d104      	bne.n	801b3ae <HAL_TIM_PWM_Start+0x7a>
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	223a      	movs	r2, #58	@ 0x3a
 801b3a8:	2102      	movs	r1, #2
 801b3aa:	5499      	strb	r1, [r3, r2]
 801b3ac:	e013      	b.n	801b3d6 <HAL_TIM_PWM_Start+0xa2>
 801b3ae:	683b      	ldr	r3, [r7, #0]
 801b3b0:	2b04      	cmp	r3, #4
 801b3b2:	d104      	bne.n	801b3be <HAL_TIM_PWM_Start+0x8a>
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	223b      	movs	r2, #59	@ 0x3b
 801b3b8:	2102      	movs	r1, #2
 801b3ba:	5499      	strb	r1, [r3, r2]
 801b3bc:	e00b      	b.n	801b3d6 <HAL_TIM_PWM_Start+0xa2>
 801b3be:	683b      	ldr	r3, [r7, #0]
 801b3c0:	2b08      	cmp	r3, #8
 801b3c2:	d104      	bne.n	801b3ce <HAL_TIM_PWM_Start+0x9a>
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	223c      	movs	r2, #60	@ 0x3c
 801b3c8:	2102      	movs	r1, #2
 801b3ca:	5499      	strb	r1, [r3, r2]
 801b3cc:	e003      	b.n	801b3d6 <HAL_TIM_PWM_Start+0xa2>
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	223d      	movs	r2, #61	@ 0x3d
 801b3d2:	2102      	movs	r1, #2
 801b3d4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	6839      	ldr	r1, [r7, #0]
 801b3dc:	2201      	movs	r2, #1
 801b3de:	0018      	movs	r0, r3
 801b3e0:	f000 fa62 	bl	801b8a8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	681a      	ldr	r2, [r3, #0]
 801b3e8:	2380      	movs	r3, #128	@ 0x80
 801b3ea:	05db      	lsls	r3, r3, #23
 801b3ec:	429a      	cmp	r2, r3
 801b3ee:	d00e      	beq.n	801b40e <HAL_TIM_PWM_Start+0xda>
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	4a15      	ldr	r2, [pc, #84]	@ (801b44c <HAL_TIM_PWM_Start+0x118>)
 801b3f6:	4293      	cmp	r3, r2
 801b3f8:	d009      	beq.n	801b40e <HAL_TIM_PWM_Start+0xda>
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	4a14      	ldr	r2, [pc, #80]	@ (801b450 <HAL_TIM_PWM_Start+0x11c>)
 801b400:	4293      	cmp	r3, r2
 801b402:	d004      	beq.n	801b40e <HAL_TIM_PWM_Start+0xda>
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	4a12      	ldr	r2, [pc, #72]	@ (801b454 <HAL_TIM_PWM_Start+0x120>)
 801b40a:	4293      	cmp	r3, r2
 801b40c:	d111      	bne.n	801b432 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	689b      	ldr	r3, [r3, #8]
 801b414:	2207      	movs	r2, #7
 801b416:	4013      	ands	r3, r2
 801b418:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b41a:	68fb      	ldr	r3, [r7, #12]
 801b41c:	2b06      	cmp	r3, #6
 801b41e:	d010      	beq.n	801b442 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	681a      	ldr	r2, [r3, #0]
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	2101      	movs	r1, #1
 801b42c:	430a      	orrs	r2, r1
 801b42e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b430:	e007      	b.n	801b442 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	681a      	ldr	r2, [r3, #0]
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	681b      	ldr	r3, [r3, #0]
 801b43c:	2101      	movs	r1, #1
 801b43e:	430a      	orrs	r2, r1
 801b440:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801b442:	2300      	movs	r3, #0
}
 801b444:	0018      	movs	r0, r3
 801b446:	46bd      	mov	sp, r7
 801b448:	b004      	add	sp, #16
 801b44a:	bd80      	pop	{r7, pc}
 801b44c:	40000400 	.word	0x40000400
 801b450:	40010800 	.word	0x40010800
 801b454:	40011400 	.word	0x40011400

0801b458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801b458:	b580      	push	{r7, lr}
 801b45a:	b086      	sub	sp, #24
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	60f8      	str	r0, [r7, #12]
 801b460:	60b9      	str	r1, [r7, #8]
 801b462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b464:	2317      	movs	r3, #23
 801b466:	18fb      	adds	r3, r7, r3
 801b468:	2200      	movs	r2, #0
 801b46a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801b46c:	68fb      	ldr	r3, [r7, #12]
 801b46e:	2238      	movs	r2, #56	@ 0x38
 801b470:	5c9b      	ldrb	r3, [r3, r2]
 801b472:	2b01      	cmp	r3, #1
 801b474:	d101      	bne.n	801b47a <HAL_TIM_PWM_ConfigChannel+0x22>
 801b476:	2302      	movs	r3, #2
 801b478:	e0ad      	b.n	801b5d6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801b47a:	68fb      	ldr	r3, [r7, #12]
 801b47c:	2238      	movs	r2, #56	@ 0x38
 801b47e:	2101      	movs	r1, #1
 801b480:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	2b0c      	cmp	r3, #12
 801b486:	d100      	bne.n	801b48a <HAL_TIM_PWM_ConfigChannel+0x32>
 801b488:	e076      	b.n	801b578 <HAL_TIM_PWM_ConfigChannel+0x120>
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	2b0c      	cmp	r3, #12
 801b48e:	d900      	bls.n	801b492 <HAL_TIM_PWM_ConfigChannel+0x3a>
 801b490:	e095      	b.n	801b5be <HAL_TIM_PWM_ConfigChannel+0x166>
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	2b08      	cmp	r3, #8
 801b496:	d04e      	beq.n	801b536 <HAL_TIM_PWM_ConfigChannel+0xde>
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	2b08      	cmp	r3, #8
 801b49c:	d900      	bls.n	801b4a0 <HAL_TIM_PWM_ConfigChannel+0x48>
 801b49e:	e08e      	b.n	801b5be <HAL_TIM_PWM_ConfigChannel+0x166>
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d003      	beq.n	801b4ae <HAL_TIM_PWM_ConfigChannel+0x56>
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	2b04      	cmp	r3, #4
 801b4aa:	d021      	beq.n	801b4f0 <HAL_TIM_PWM_ConfigChannel+0x98>
 801b4ac:	e087      	b.n	801b5be <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	68ba      	ldr	r2, [r7, #8]
 801b4b4:	0011      	movs	r1, r2
 801b4b6:	0018      	movs	r0, r3
 801b4b8:	f000 f8f2 	bl	801b6a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	699a      	ldr	r2, [r3, #24]
 801b4c2:	68fb      	ldr	r3, [r7, #12]
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	2108      	movs	r1, #8
 801b4c8:	430a      	orrs	r2, r1
 801b4ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801b4cc:	68fb      	ldr	r3, [r7, #12]
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	699a      	ldr	r2, [r3, #24]
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	2104      	movs	r1, #4
 801b4d8:	438a      	bics	r2, r1
 801b4da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	6999      	ldr	r1, [r3, #24]
 801b4e2:	68bb      	ldr	r3, [r7, #8]
 801b4e4:	68da      	ldr	r2, [r3, #12]
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	430a      	orrs	r2, r1
 801b4ec:	619a      	str	r2, [r3, #24]
      break;
 801b4ee:	e06b      	b.n	801b5c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801b4f0:	68fb      	ldr	r3, [r7, #12]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	68ba      	ldr	r2, [r7, #8]
 801b4f6:	0011      	movs	r1, r2
 801b4f8:	0018      	movs	r0, r3
 801b4fa:	f000 f90d 	bl	801b718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801b4fe:	68fb      	ldr	r3, [r7, #12]
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	699a      	ldr	r2, [r3, #24]
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	681b      	ldr	r3, [r3, #0]
 801b508:	2180      	movs	r1, #128	@ 0x80
 801b50a:	0109      	lsls	r1, r1, #4
 801b50c:	430a      	orrs	r2, r1
 801b50e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	699a      	ldr	r2, [r3, #24]
 801b516:	68fb      	ldr	r3, [r7, #12]
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	4931      	ldr	r1, [pc, #196]	@ (801b5e0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801b51c:	400a      	ands	r2, r1
 801b51e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801b520:	68fb      	ldr	r3, [r7, #12]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	6999      	ldr	r1, [r3, #24]
 801b526:	68bb      	ldr	r3, [r7, #8]
 801b528:	68db      	ldr	r3, [r3, #12]
 801b52a:	021a      	lsls	r2, r3, #8
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	430a      	orrs	r2, r1
 801b532:	619a      	str	r2, [r3, #24]
      break;
 801b534:	e048      	b.n	801b5c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	68ba      	ldr	r2, [r7, #8]
 801b53c:	0011      	movs	r1, r2
 801b53e:	0018      	movs	r0, r3
 801b540:	f000 f92c 	bl	801b79c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	69da      	ldr	r2, [r3, #28]
 801b54a:	68fb      	ldr	r3, [r7, #12]
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	2108      	movs	r1, #8
 801b550:	430a      	orrs	r2, r1
 801b552:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801b554:	68fb      	ldr	r3, [r7, #12]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	69da      	ldr	r2, [r3, #28]
 801b55a:	68fb      	ldr	r3, [r7, #12]
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	2104      	movs	r1, #4
 801b560:	438a      	bics	r2, r1
 801b562:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801b564:	68fb      	ldr	r3, [r7, #12]
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	69d9      	ldr	r1, [r3, #28]
 801b56a:	68bb      	ldr	r3, [r7, #8]
 801b56c:	68da      	ldr	r2, [r3, #12]
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	430a      	orrs	r2, r1
 801b574:	61da      	str	r2, [r3, #28]
      break;
 801b576:	e027      	b.n	801b5c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	681b      	ldr	r3, [r3, #0]
 801b57c:	68ba      	ldr	r2, [r7, #8]
 801b57e:	0011      	movs	r1, r2
 801b580:	0018      	movs	r0, r3
 801b582:	f000 f94b 	bl	801b81c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	69da      	ldr	r2, [r3, #28]
 801b58c:	68fb      	ldr	r3, [r7, #12]
 801b58e:	681b      	ldr	r3, [r3, #0]
 801b590:	2180      	movs	r1, #128	@ 0x80
 801b592:	0109      	lsls	r1, r1, #4
 801b594:	430a      	orrs	r2, r1
 801b596:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801b598:	68fb      	ldr	r3, [r7, #12]
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	69da      	ldr	r2, [r3, #28]
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	490f      	ldr	r1, [pc, #60]	@ (801b5e0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801b5a4:	400a      	ands	r2, r1
 801b5a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801b5a8:	68fb      	ldr	r3, [r7, #12]
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	69d9      	ldr	r1, [r3, #28]
 801b5ae:	68bb      	ldr	r3, [r7, #8]
 801b5b0:	68db      	ldr	r3, [r3, #12]
 801b5b2:	021a      	lsls	r2, r3, #8
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	430a      	orrs	r2, r1
 801b5ba:	61da      	str	r2, [r3, #28]
      break;
 801b5bc:	e004      	b.n	801b5c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801b5be:	2317      	movs	r3, #23
 801b5c0:	18fb      	adds	r3, r7, r3
 801b5c2:	2201      	movs	r2, #1
 801b5c4:	701a      	strb	r2, [r3, #0]
      break;
 801b5c6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801b5c8:	68fb      	ldr	r3, [r7, #12]
 801b5ca:	2238      	movs	r2, #56	@ 0x38
 801b5cc:	2100      	movs	r1, #0
 801b5ce:	5499      	strb	r1, [r3, r2]

  return status;
 801b5d0:	2317      	movs	r3, #23
 801b5d2:	18fb      	adds	r3, r7, r3
 801b5d4:	781b      	ldrb	r3, [r3, #0]
}
 801b5d6:	0018      	movs	r0, r3
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	b006      	add	sp, #24
 801b5dc:	bd80      	pop	{r7, pc}
 801b5de:	46c0      	nop			@ (mov r8, r8)
 801b5e0:	fffffbff 	.word	0xfffffbff

0801b5e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b084      	sub	sp, #16
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	6078      	str	r0, [r7, #4]
 801b5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b5f4:	687a      	ldr	r2, [r7, #4]
 801b5f6:	2380      	movs	r3, #128	@ 0x80
 801b5f8:	05db      	lsls	r3, r3, #23
 801b5fa:	429a      	cmp	r2, r3
 801b5fc:	d00b      	beq.n	801b616 <TIM_Base_SetConfig+0x32>
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	4a23      	ldr	r2, [pc, #140]	@ (801b690 <TIM_Base_SetConfig+0xac>)
 801b602:	4293      	cmp	r3, r2
 801b604:	d007      	beq.n	801b616 <TIM_Base_SetConfig+0x32>
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	4a22      	ldr	r2, [pc, #136]	@ (801b694 <TIM_Base_SetConfig+0xb0>)
 801b60a:	4293      	cmp	r3, r2
 801b60c:	d003      	beq.n	801b616 <TIM_Base_SetConfig+0x32>
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	4a21      	ldr	r2, [pc, #132]	@ (801b698 <TIM_Base_SetConfig+0xb4>)
 801b612:	4293      	cmp	r3, r2
 801b614:	d108      	bne.n	801b628 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b616:	68fb      	ldr	r3, [r7, #12]
 801b618:	2270      	movs	r2, #112	@ 0x70
 801b61a:	4393      	bics	r3, r2
 801b61c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b61e:	683b      	ldr	r3, [r7, #0]
 801b620:	685b      	ldr	r3, [r3, #4]
 801b622:	68fa      	ldr	r2, [r7, #12]
 801b624:	4313      	orrs	r3, r2
 801b626:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b628:	687a      	ldr	r2, [r7, #4]
 801b62a:	2380      	movs	r3, #128	@ 0x80
 801b62c:	05db      	lsls	r3, r3, #23
 801b62e:	429a      	cmp	r2, r3
 801b630:	d00b      	beq.n	801b64a <TIM_Base_SetConfig+0x66>
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	4a16      	ldr	r2, [pc, #88]	@ (801b690 <TIM_Base_SetConfig+0xac>)
 801b636:	4293      	cmp	r3, r2
 801b638:	d007      	beq.n	801b64a <TIM_Base_SetConfig+0x66>
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	4a15      	ldr	r2, [pc, #84]	@ (801b694 <TIM_Base_SetConfig+0xb0>)
 801b63e:	4293      	cmp	r3, r2
 801b640:	d003      	beq.n	801b64a <TIM_Base_SetConfig+0x66>
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	4a14      	ldr	r2, [pc, #80]	@ (801b698 <TIM_Base_SetConfig+0xb4>)
 801b646:	4293      	cmp	r3, r2
 801b648:	d108      	bne.n	801b65c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	4a13      	ldr	r2, [pc, #76]	@ (801b69c <TIM_Base_SetConfig+0xb8>)
 801b64e:	4013      	ands	r3, r2
 801b650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b652:	683b      	ldr	r3, [r7, #0]
 801b654:	68db      	ldr	r3, [r3, #12]
 801b656:	68fa      	ldr	r2, [r7, #12]
 801b658:	4313      	orrs	r3, r2
 801b65a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b65c:	68fb      	ldr	r3, [r7, #12]
 801b65e:	2280      	movs	r2, #128	@ 0x80
 801b660:	4393      	bics	r3, r2
 801b662:	001a      	movs	r2, r3
 801b664:	683b      	ldr	r3, [r7, #0]
 801b666:	691b      	ldr	r3, [r3, #16]
 801b668:	4313      	orrs	r3, r2
 801b66a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	68fa      	ldr	r2, [r7, #12]
 801b670:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b672:	683b      	ldr	r3, [r7, #0]
 801b674:	689a      	ldr	r2, [r3, #8]
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b67a:	683b      	ldr	r3, [r7, #0]
 801b67c:	681a      	ldr	r2, [r3, #0]
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	2201      	movs	r2, #1
 801b686:	615a      	str	r2, [r3, #20]
}
 801b688:	46c0      	nop			@ (mov r8, r8)
 801b68a:	46bd      	mov	sp, r7
 801b68c:	b004      	add	sp, #16
 801b68e:	bd80      	pop	{r7, pc}
 801b690:	40000400 	.word	0x40000400
 801b694:	40010800 	.word	0x40010800
 801b698:	40011400 	.word	0x40011400
 801b69c:	fffffcff 	.word	0xfffffcff

0801b6a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801b6a0:	b580      	push	{r7, lr}
 801b6a2:	b086      	sub	sp, #24
 801b6a4:	af00      	add	r7, sp, #0
 801b6a6:	6078      	str	r0, [r7, #4]
 801b6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	6a1b      	ldr	r3, [r3, #32]
 801b6ae:	2201      	movs	r2, #1
 801b6b0:	4393      	bics	r3, r2
 801b6b2:	001a      	movs	r2, r3
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	6a1b      	ldr	r3, [r3, #32]
 801b6bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	685b      	ldr	r3, [r3, #4]
 801b6c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	699b      	ldr	r3, [r3, #24]
 801b6c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801b6ca:	68fb      	ldr	r3, [r7, #12]
 801b6cc:	2270      	movs	r2, #112	@ 0x70
 801b6ce:	4393      	bics	r3, r2
 801b6d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801b6d2:	68fb      	ldr	r3, [r7, #12]
 801b6d4:	2203      	movs	r2, #3
 801b6d6:	4393      	bics	r3, r2
 801b6d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b6da:	683b      	ldr	r3, [r7, #0]
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	68fa      	ldr	r2, [r7, #12]
 801b6e0:	4313      	orrs	r3, r2
 801b6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801b6e4:	697b      	ldr	r3, [r7, #20]
 801b6e6:	2202      	movs	r2, #2
 801b6e8:	4393      	bics	r3, r2
 801b6ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801b6ec:	683b      	ldr	r3, [r7, #0]
 801b6ee:	689b      	ldr	r3, [r3, #8]
 801b6f0:	697a      	ldr	r2, [r7, #20]
 801b6f2:	4313      	orrs	r3, r2
 801b6f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	693a      	ldr	r2, [r7, #16]
 801b6fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	68fa      	ldr	r2, [r7, #12]
 801b700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801b702:	683b      	ldr	r3, [r7, #0]
 801b704:	685a      	ldr	r2, [r3, #4]
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	697a      	ldr	r2, [r7, #20]
 801b70e:	621a      	str	r2, [r3, #32]
}
 801b710:	46c0      	nop			@ (mov r8, r8)
 801b712:	46bd      	mov	sp, r7
 801b714:	b006      	add	sp, #24
 801b716:	bd80      	pop	{r7, pc}

0801b718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801b718:	b580      	push	{r7, lr}
 801b71a:	b086      	sub	sp, #24
 801b71c:	af00      	add	r7, sp, #0
 801b71e:	6078      	str	r0, [r7, #4]
 801b720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	6a1b      	ldr	r3, [r3, #32]
 801b726:	2210      	movs	r2, #16
 801b728:	4393      	bics	r3, r2
 801b72a:	001a      	movs	r2, r3
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	6a1b      	ldr	r3, [r3, #32]
 801b734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	685b      	ldr	r3, [r3, #4]
 801b73a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	699b      	ldr	r3, [r3, #24]
 801b740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b742:	68fb      	ldr	r3, [r7, #12]
 801b744:	4a13      	ldr	r2, [pc, #76]	@ (801b794 <TIM_OC2_SetConfig+0x7c>)
 801b746:	4013      	ands	r3, r2
 801b748:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b74a:	68fb      	ldr	r3, [r7, #12]
 801b74c:	4a12      	ldr	r2, [pc, #72]	@ (801b798 <TIM_OC2_SetConfig+0x80>)
 801b74e:	4013      	ands	r3, r2
 801b750:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b752:	683b      	ldr	r3, [r7, #0]
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	021b      	lsls	r3, r3, #8
 801b758:	68fa      	ldr	r2, [r7, #12]
 801b75a:	4313      	orrs	r3, r2
 801b75c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b75e:	697b      	ldr	r3, [r7, #20]
 801b760:	2220      	movs	r2, #32
 801b762:	4393      	bics	r3, r2
 801b764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b766:	683b      	ldr	r3, [r7, #0]
 801b768:	689b      	ldr	r3, [r3, #8]
 801b76a:	011b      	lsls	r3, r3, #4
 801b76c:	697a      	ldr	r2, [r7, #20]
 801b76e:	4313      	orrs	r3, r2
 801b770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	693a      	ldr	r2, [r7, #16]
 801b776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	68fa      	ldr	r2, [r7, #12]
 801b77c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801b77e:	683b      	ldr	r3, [r7, #0]
 801b780:	685a      	ldr	r2, [r3, #4]
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	697a      	ldr	r2, [r7, #20]
 801b78a:	621a      	str	r2, [r3, #32]
}
 801b78c:	46c0      	nop			@ (mov r8, r8)
 801b78e:	46bd      	mov	sp, r7
 801b790:	b006      	add	sp, #24
 801b792:	bd80      	pop	{r7, pc}
 801b794:	ffff8fff 	.word	0xffff8fff
 801b798:	fffffcff 	.word	0xfffffcff

0801b79c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801b79c:	b580      	push	{r7, lr}
 801b79e:	b086      	sub	sp, #24
 801b7a0:	af00      	add	r7, sp, #0
 801b7a2:	6078      	str	r0, [r7, #4]
 801b7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	6a1b      	ldr	r3, [r3, #32]
 801b7aa:	4a1a      	ldr	r2, [pc, #104]	@ (801b814 <TIM_OC3_SetConfig+0x78>)
 801b7ac:	401a      	ands	r2, r3
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	6a1b      	ldr	r3, [r3, #32]
 801b7b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	685b      	ldr	r3, [r3, #4]
 801b7bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	69db      	ldr	r3, [r3, #28]
 801b7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801b7c4:	68fb      	ldr	r3, [r7, #12]
 801b7c6:	2270      	movs	r2, #112	@ 0x70
 801b7c8:	4393      	bics	r3, r2
 801b7ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801b7cc:	68fb      	ldr	r3, [r7, #12]
 801b7ce:	2203      	movs	r2, #3
 801b7d0:	4393      	bics	r3, r2
 801b7d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b7d4:	683b      	ldr	r3, [r7, #0]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	68fa      	ldr	r2, [r7, #12]
 801b7da:	4313      	orrs	r3, r2
 801b7dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801b7de:	697b      	ldr	r3, [r7, #20]
 801b7e0:	4a0d      	ldr	r2, [pc, #52]	@ (801b818 <TIM_OC3_SetConfig+0x7c>)
 801b7e2:	4013      	ands	r3, r2
 801b7e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801b7e6:	683b      	ldr	r3, [r7, #0]
 801b7e8:	689b      	ldr	r3, [r3, #8]
 801b7ea:	021b      	lsls	r3, r3, #8
 801b7ec:	697a      	ldr	r2, [r7, #20]
 801b7ee:	4313      	orrs	r3, r2
 801b7f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	693a      	ldr	r2, [r7, #16]
 801b7f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	68fa      	ldr	r2, [r7, #12]
 801b7fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801b7fe:	683b      	ldr	r3, [r7, #0]
 801b800:	685a      	ldr	r2, [r3, #4]
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	697a      	ldr	r2, [r7, #20]
 801b80a:	621a      	str	r2, [r3, #32]
}
 801b80c:	46c0      	nop			@ (mov r8, r8)
 801b80e:	46bd      	mov	sp, r7
 801b810:	b006      	add	sp, #24
 801b812:	bd80      	pop	{r7, pc}
 801b814:	fffffeff 	.word	0xfffffeff
 801b818:	fffffdff 	.word	0xfffffdff

0801b81c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801b81c:	b580      	push	{r7, lr}
 801b81e:	b086      	sub	sp, #24
 801b820:	af00      	add	r7, sp, #0
 801b822:	6078      	str	r0, [r7, #4]
 801b824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	6a1b      	ldr	r3, [r3, #32]
 801b82a:	4a1b      	ldr	r2, [pc, #108]	@ (801b898 <TIM_OC4_SetConfig+0x7c>)
 801b82c:	401a      	ands	r2, r3
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	6a1b      	ldr	r3, [r3, #32]
 801b836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	685b      	ldr	r3, [r3, #4]
 801b83c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	69db      	ldr	r3, [r3, #28]
 801b842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801b844:	68fb      	ldr	r3, [r7, #12]
 801b846:	4a15      	ldr	r2, [pc, #84]	@ (801b89c <TIM_OC4_SetConfig+0x80>)
 801b848:	4013      	ands	r3, r2
 801b84a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	4a14      	ldr	r2, [pc, #80]	@ (801b8a0 <TIM_OC4_SetConfig+0x84>)
 801b850:	4013      	ands	r3, r2
 801b852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b854:	683b      	ldr	r3, [r7, #0]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	021b      	lsls	r3, r3, #8
 801b85a:	68fa      	ldr	r2, [r7, #12]
 801b85c:	4313      	orrs	r3, r2
 801b85e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801b860:	697b      	ldr	r3, [r7, #20]
 801b862:	4a10      	ldr	r2, [pc, #64]	@ (801b8a4 <TIM_OC4_SetConfig+0x88>)
 801b864:	4013      	ands	r3, r2
 801b866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801b868:	683b      	ldr	r3, [r7, #0]
 801b86a:	689b      	ldr	r3, [r3, #8]
 801b86c:	031b      	lsls	r3, r3, #12
 801b86e:	697a      	ldr	r2, [r7, #20]
 801b870:	4313      	orrs	r3, r2
 801b872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	693a      	ldr	r2, [r7, #16]
 801b878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	68fa      	ldr	r2, [r7, #12]
 801b87e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801b880:	683b      	ldr	r3, [r7, #0]
 801b882:	685a      	ldr	r2, [r3, #4]
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	697a      	ldr	r2, [r7, #20]
 801b88c:	621a      	str	r2, [r3, #32]
}
 801b88e:	46c0      	nop			@ (mov r8, r8)
 801b890:	46bd      	mov	sp, r7
 801b892:	b006      	add	sp, #24
 801b894:	bd80      	pop	{r7, pc}
 801b896:	46c0      	nop			@ (mov r8, r8)
 801b898:	ffffefff 	.word	0xffffefff
 801b89c:	ffff8fff 	.word	0xffff8fff
 801b8a0:	fffffcff 	.word	0xfffffcff
 801b8a4:	ffffdfff 	.word	0xffffdfff

0801b8a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801b8a8:	b580      	push	{r7, lr}
 801b8aa:	b086      	sub	sp, #24
 801b8ac:	af00      	add	r7, sp, #0
 801b8ae:	60f8      	str	r0, [r7, #12]
 801b8b0:	60b9      	str	r1, [r7, #8]
 801b8b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801b8b4:	68bb      	ldr	r3, [r7, #8]
 801b8b6:	221f      	movs	r2, #31
 801b8b8:	4013      	ands	r3, r2
 801b8ba:	2201      	movs	r2, #1
 801b8bc:	409a      	lsls	r2, r3
 801b8be:	0013      	movs	r3, r2
 801b8c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801b8c2:	68fb      	ldr	r3, [r7, #12]
 801b8c4:	6a1b      	ldr	r3, [r3, #32]
 801b8c6:	697a      	ldr	r2, [r7, #20]
 801b8c8:	43d2      	mvns	r2, r2
 801b8ca:	401a      	ands	r2, r3
 801b8cc:	68fb      	ldr	r3, [r7, #12]
 801b8ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	6a1a      	ldr	r2, [r3, #32]
 801b8d4:	68bb      	ldr	r3, [r7, #8]
 801b8d6:	211f      	movs	r1, #31
 801b8d8:	400b      	ands	r3, r1
 801b8da:	6879      	ldr	r1, [r7, #4]
 801b8dc:	4099      	lsls	r1, r3
 801b8de:	000b      	movs	r3, r1
 801b8e0:	431a      	orrs	r2, r3
 801b8e2:	68fb      	ldr	r3, [r7, #12]
 801b8e4:	621a      	str	r2, [r3, #32]
}
 801b8e6:	46c0      	nop			@ (mov r8, r8)
 801b8e8:	46bd      	mov	sp, r7
 801b8ea:	b006      	add	sp, #24
 801b8ec:	bd80      	pop	{r7, pc}
	...

0801b8f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801b8f0:	b580      	push	{r7, lr}
 801b8f2:	b084      	sub	sp, #16
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	6078      	str	r0, [r7, #4]
 801b8f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	2238      	movs	r2, #56	@ 0x38
 801b8fe:	5c9b      	ldrb	r3, [r3, r2]
 801b900:	2b01      	cmp	r3, #1
 801b902:	d101      	bne.n	801b908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801b904:	2302      	movs	r3, #2
 801b906:	e047      	b.n	801b998 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	2238      	movs	r2, #56	@ 0x38
 801b90c:	2101      	movs	r1, #1
 801b90e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	2239      	movs	r2, #57	@ 0x39
 801b914:	2102      	movs	r1, #2
 801b916:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	685b      	ldr	r3, [r3, #4]
 801b91e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	681b      	ldr	r3, [r3, #0]
 801b924:	689b      	ldr	r3, [r3, #8]
 801b926:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801b928:	68fb      	ldr	r3, [r7, #12]
 801b92a:	2270      	movs	r2, #112	@ 0x70
 801b92c:	4393      	bics	r3, r2
 801b92e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801b930:	683b      	ldr	r3, [r7, #0]
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	68fa      	ldr	r2, [r7, #12]
 801b936:	4313      	orrs	r3, r2
 801b938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	68fa      	ldr	r2, [r7, #12]
 801b940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	681a      	ldr	r2, [r3, #0]
 801b946:	2380      	movs	r3, #128	@ 0x80
 801b948:	05db      	lsls	r3, r3, #23
 801b94a:	429a      	cmp	r2, r3
 801b94c:	d00e      	beq.n	801b96c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	4a13      	ldr	r2, [pc, #76]	@ (801b9a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801b954:	4293      	cmp	r3, r2
 801b956:	d009      	beq.n	801b96c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	681b      	ldr	r3, [r3, #0]
 801b95c:	4a11      	ldr	r2, [pc, #68]	@ (801b9a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801b95e:	4293      	cmp	r3, r2
 801b960:	d004      	beq.n	801b96c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	4a10      	ldr	r2, [pc, #64]	@ (801b9a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801b968:	4293      	cmp	r3, r2
 801b96a:	d10c      	bne.n	801b986 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801b96c:	68bb      	ldr	r3, [r7, #8]
 801b96e:	2280      	movs	r2, #128	@ 0x80
 801b970:	4393      	bics	r3, r2
 801b972:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801b974:	683b      	ldr	r3, [r7, #0]
 801b976:	685b      	ldr	r3, [r3, #4]
 801b978:	68ba      	ldr	r2, [r7, #8]
 801b97a:	4313      	orrs	r3, r2
 801b97c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	68ba      	ldr	r2, [r7, #8]
 801b984:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	2239      	movs	r2, #57	@ 0x39
 801b98a:	2101      	movs	r1, #1
 801b98c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	2238      	movs	r2, #56	@ 0x38
 801b992:	2100      	movs	r1, #0
 801b994:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b996:	2300      	movs	r3, #0
}
 801b998:	0018      	movs	r0, r3
 801b99a:	46bd      	mov	sp, r7
 801b99c:	b004      	add	sp, #16
 801b99e:	bd80      	pop	{r7, pc}
 801b9a0:	40000400 	.word	0x40000400
 801b9a4:	40010800 	.word	0x40010800
 801b9a8:	40011400 	.word	0x40011400

0801b9ac <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801b9ac:	b580      	push	{r7, lr}
 801b9ae:	b082      	sub	sp, #8
 801b9b0:	af00      	add	r7, sp, #0
 801b9b2:	6078      	str	r0, [r7, #4]
 801b9b4:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	2238      	movs	r2, #56	@ 0x38
 801b9ba:	5c9b      	ldrb	r3, [r3, r2]
 801b9bc:	2b01      	cmp	r3, #1
 801b9be:	d101      	bne.n	801b9c4 <HAL_TIMEx_RemapConfig+0x18>
 801b9c0:	2302      	movs	r3, #2
 801b9c2:	e00c      	b.n	801b9de <HAL_TIMEx_RemapConfig+0x32>
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	2238      	movs	r2, #56	@ 0x38
 801b9c8:	2101      	movs	r1, #1
 801b9ca:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	683a      	ldr	r2, [r7, #0]
 801b9d2:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	2238      	movs	r2, #56	@ 0x38
 801b9d8:	2100      	movs	r1, #0
 801b9da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b9dc:	2300      	movs	r3, #0
}
 801b9de:	0018      	movs	r0, r3
 801b9e0:	46bd      	mov	sp, r7
 801b9e2:	b002      	add	sp, #8
 801b9e4:	bd80      	pop	{r7, pc}
	...

0801b9e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b9e8:	b580      	push	{r7, lr}
 801b9ea:	b082      	sub	sp, #8
 801b9ec:	af00      	add	r7, sp, #0
 801b9ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d101      	bne.n	801b9fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b9f6:	2301      	movs	r3, #1
 801b9f8:	e053      	b.n	801baa2 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d116      	bne.n	801ba30 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	2278      	movs	r2, #120	@ 0x78
 801ba06:	2100      	movs	r1, #0
 801ba08:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	0018      	movs	r0, r3
 801ba0e:	f000 fd65 	bl	801c4dc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	22b0      	movs	r2, #176	@ 0xb0
 801ba16:	589b      	ldr	r3, [r3, r2]
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d103      	bne.n	801ba24 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	21b0      	movs	r1, #176	@ 0xb0
 801ba20:	4a22      	ldr	r2, [pc, #136]	@ (801baac <HAL_UART_Init+0xc4>)
 801ba22:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	22b0      	movs	r2, #176	@ 0xb0
 801ba28:	589b      	ldr	r3, [r3, r2]
 801ba2a:	687a      	ldr	r2, [r7, #4]
 801ba2c:	0010      	movs	r0, r2
 801ba2e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	2224      	movs	r2, #36	@ 0x24
 801ba34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	681a      	ldr	r2, [r3, #0]
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	2101      	movs	r1, #1
 801ba42:	438a      	bics	r2, r1
 801ba44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	0018      	movs	r0, r3
 801ba4a:	f000 fd8b 	bl	801c564 <UART_SetConfig>
 801ba4e:	0003      	movs	r3, r0
 801ba50:	2b01      	cmp	r3, #1
 801ba52:	d101      	bne.n	801ba58 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801ba54:	2301      	movs	r3, #1
 801ba56:	e024      	b.n	801baa2 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d003      	beq.n	801ba68 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	0018      	movs	r0, r3
 801ba64:	f001 f81c 	bl	801caa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	685a      	ldr	r2, [r3, #4]
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	490f      	ldr	r1, [pc, #60]	@ (801bab0 <HAL_UART_Init+0xc8>)
 801ba74:	400a      	ands	r2, r1
 801ba76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	689a      	ldr	r2, [r3, #8]
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	212a      	movs	r1, #42	@ 0x2a
 801ba84:	438a      	bics	r2, r1
 801ba86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	681a      	ldr	r2, [r3, #0]
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	2101      	movs	r1, #1
 801ba94:	430a      	orrs	r2, r1
 801ba96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	0018      	movs	r0, r3
 801ba9c:	f001 f8b4 	bl	801cc08 <UART_CheckIdleState>
 801baa0:	0003      	movs	r3, r0
}
 801baa2:	0018      	movs	r0, r3
 801baa4:	46bd      	mov	sp, r7
 801baa6:	b002      	add	sp, #8
 801baa8:	bd80      	pop	{r7, pc}
 801baaa:	46c0      	nop			@ (mov r8, r8)
 801baac:	080123a5 	.word	0x080123a5
 801bab0:	ffffb7ff 	.word	0xffffb7ff

0801bab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801bab4:	b580      	push	{r7, lr}
 801bab6:	b08a      	sub	sp, #40	@ 0x28
 801bab8:	af02      	add	r7, sp, #8
 801baba:	60f8      	str	r0, [r7, #12]
 801babc:	60b9      	str	r1, [r7, #8]
 801babe:	603b      	str	r3, [r7, #0]
 801bac0:	1dbb      	adds	r3, r7, #6
 801bac2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801bac8:	2b20      	cmp	r3, #32
 801baca:	d000      	beq.n	801bace <HAL_UART_Transmit+0x1a>
 801bacc:	e08c      	b.n	801bbe8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801bace:	68bb      	ldr	r3, [r7, #8]
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d003      	beq.n	801badc <HAL_UART_Transmit+0x28>
 801bad4:	1dbb      	adds	r3, r7, #6
 801bad6:	881b      	ldrh	r3, [r3, #0]
 801bad8:	2b00      	cmp	r3, #0
 801bada:	d101      	bne.n	801bae0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801badc:	2301      	movs	r3, #1
 801bade:	e084      	b.n	801bbea <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bae0:	68fb      	ldr	r3, [r7, #12]
 801bae2:	689a      	ldr	r2, [r3, #8]
 801bae4:	2380      	movs	r3, #128	@ 0x80
 801bae6:	015b      	lsls	r3, r3, #5
 801bae8:	429a      	cmp	r2, r3
 801baea:	d109      	bne.n	801bb00 <HAL_UART_Transmit+0x4c>
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	691b      	ldr	r3, [r3, #16]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d105      	bne.n	801bb00 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801baf4:	68bb      	ldr	r3, [r7, #8]
 801baf6:	2201      	movs	r2, #1
 801baf8:	4013      	ands	r3, r2
 801bafa:	d001      	beq.n	801bb00 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801bafc:	2301      	movs	r3, #1
 801bafe:	e074      	b.n	801bbea <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bb00:	68fb      	ldr	r3, [r7, #12]
 801bb02:	2284      	movs	r2, #132	@ 0x84
 801bb04:	2100      	movs	r1, #0
 801bb06:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801bb08:	68fb      	ldr	r3, [r7, #12]
 801bb0a:	2221      	movs	r2, #33	@ 0x21
 801bb0c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801bb0e:	f7f7 fb0d 	bl	801312c <HAL_GetTick>
 801bb12:	0003      	movs	r3, r0
 801bb14:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	1dba      	adds	r2, r7, #6
 801bb1a:	2150      	movs	r1, #80	@ 0x50
 801bb1c:	8812      	ldrh	r2, [r2, #0]
 801bb1e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801bb20:	68fb      	ldr	r3, [r7, #12]
 801bb22:	1dba      	adds	r2, r7, #6
 801bb24:	2152      	movs	r1, #82	@ 0x52
 801bb26:	8812      	ldrh	r2, [r2, #0]
 801bb28:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bb2a:	68fb      	ldr	r3, [r7, #12]
 801bb2c:	689a      	ldr	r2, [r3, #8]
 801bb2e:	2380      	movs	r3, #128	@ 0x80
 801bb30:	015b      	lsls	r3, r3, #5
 801bb32:	429a      	cmp	r2, r3
 801bb34:	d108      	bne.n	801bb48 <HAL_UART_Transmit+0x94>
 801bb36:	68fb      	ldr	r3, [r7, #12]
 801bb38:	691b      	ldr	r3, [r3, #16]
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d104      	bne.n	801bb48 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801bb3e:	2300      	movs	r3, #0
 801bb40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801bb42:	68bb      	ldr	r3, [r7, #8]
 801bb44:	61bb      	str	r3, [r7, #24]
 801bb46:	e003      	b.n	801bb50 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801bb48:	68bb      	ldr	r3, [r7, #8]
 801bb4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801bb4c:	2300      	movs	r3, #0
 801bb4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801bb50:	e02f      	b.n	801bbb2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801bb52:	697a      	ldr	r2, [r7, #20]
 801bb54:	68f8      	ldr	r0, [r7, #12]
 801bb56:	683b      	ldr	r3, [r7, #0]
 801bb58:	9300      	str	r3, [sp, #0]
 801bb5a:	0013      	movs	r3, r2
 801bb5c:	2200      	movs	r2, #0
 801bb5e:	2180      	movs	r1, #128	@ 0x80
 801bb60:	f001 f8fa 	bl	801cd58 <UART_WaitOnFlagUntilTimeout>
 801bb64:	1e03      	subs	r3, r0, #0
 801bb66:	d004      	beq.n	801bb72 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801bb68:	68fb      	ldr	r3, [r7, #12]
 801bb6a:	2220      	movs	r2, #32
 801bb6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801bb6e:	2303      	movs	r3, #3
 801bb70:	e03b      	b.n	801bbea <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801bb72:	69fb      	ldr	r3, [r7, #28]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d10b      	bne.n	801bb90 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801bb78:	69bb      	ldr	r3, [r7, #24]
 801bb7a:	881b      	ldrh	r3, [r3, #0]
 801bb7c:	001a      	movs	r2, r3
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	05d2      	lsls	r2, r2, #23
 801bb84:	0dd2      	lsrs	r2, r2, #23
 801bb86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801bb88:	69bb      	ldr	r3, [r7, #24]
 801bb8a:	3302      	adds	r3, #2
 801bb8c:	61bb      	str	r3, [r7, #24]
 801bb8e:	e007      	b.n	801bba0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801bb90:	69fb      	ldr	r3, [r7, #28]
 801bb92:	781a      	ldrb	r2, [r3, #0]
 801bb94:	68fb      	ldr	r3, [r7, #12]
 801bb96:	681b      	ldr	r3, [r3, #0]
 801bb98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801bb9a:	69fb      	ldr	r3, [r7, #28]
 801bb9c:	3301      	adds	r3, #1
 801bb9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801bba0:	68fb      	ldr	r3, [r7, #12]
 801bba2:	2252      	movs	r2, #82	@ 0x52
 801bba4:	5a9b      	ldrh	r3, [r3, r2]
 801bba6:	b29b      	uxth	r3, r3
 801bba8:	3b01      	subs	r3, #1
 801bbaa:	b299      	uxth	r1, r3
 801bbac:	68fb      	ldr	r3, [r7, #12]
 801bbae:	2252      	movs	r2, #82	@ 0x52
 801bbb0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801bbb2:	68fb      	ldr	r3, [r7, #12]
 801bbb4:	2252      	movs	r2, #82	@ 0x52
 801bbb6:	5a9b      	ldrh	r3, [r3, r2]
 801bbb8:	b29b      	uxth	r3, r3
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d1c9      	bne.n	801bb52 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801bbbe:	697a      	ldr	r2, [r7, #20]
 801bbc0:	68f8      	ldr	r0, [r7, #12]
 801bbc2:	683b      	ldr	r3, [r7, #0]
 801bbc4:	9300      	str	r3, [sp, #0]
 801bbc6:	0013      	movs	r3, r2
 801bbc8:	2200      	movs	r2, #0
 801bbca:	2140      	movs	r1, #64	@ 0x40
 801bbcc:	f001 f8c4 	bl	801cd58 <UART_WaitOnFlagUntilTimeout>
 801bbd0:	1e03      	subs	r3, r0, #0
 801bbd2:	d004      	beq.n	801bbde <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	2220      	movs	r2, #32
 801bbd8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801bbda:	2303      	movs	r3, #3
 801bbdc:	e005      	b.n	801bbea <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801bbde:	68fb      	ldr	r3, [r7, #12]
 801bbe0:	2220      	movs	r2, #32
 801bbe2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801bbe4:	2300      	movs	r3, #0
 801bbe6:	e000      	b.n	801bbea <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801bbe8:	2302      	movs	r3, #2
  }
}
 801bbea:	0018      	movs	r0, r3
 801bbec:	46bd      	mov	sp, r7
 801bbee:	b008      	add	sp, #32
 801bbf0:	bd80      	pop	{r7, pc}
	...

0801bbf4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b088      	sub	sp, #32
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	60f8      	str	r0, [r7, #12]
 801bbfc:	60b9      	str	r1, [r7, #8]
 801bbfe:	1dbb      	adds	r3, r7, #6
 801bc00:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	2280      	movs	r2, #128	@ 0x80
 801bc06:	589b      	ldr	r3, [r3, r2]
 801bc08:	2b20      	cmp	r3, #32
 801bc0a:	d14a      	bne.n	801bca2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801bc0c:	68bb      	ldr	r3, [r7, #8]
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d003      	beq.n	801bc1a <HAL_UART_Receive_IT+0x26>
 801bc12:	1dbb      	adds	r3, r7, #6
 801bc14:	881b      	ldrh	r3, [r3, #0]
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d101      	bne.n	801bc1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801bc1a:	2301      	movs	r3, #1
 801bc1c:	e042      	b.n	801bca4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	689a      	ldr	r2, [r3, #8]
 801bc22:	2380      	movs	r3, #128	@ 0x80
 801bc24:	015b      	lsls	r3, r3, #5
 801bc26:	429a      	cmp	r2, r3
 801bc28:	d109      	bne.n	801bc3e <HAL_UART_Receive_IT+0x4a>
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	691b      	ldr	r3, [r3, #16]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d105      	bne.n	801bc3e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801bc32:	68bb      	ldr	r3, [r7, #8]
 801bc34:	2201      	movs	r2, #1
 801bc36:	4013      	ands	r3, r2
 801bc38:	d001      	beq.n	801bc3e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801bc3a:	2301      	movs	r3, #1
 801bc3c:	e032      	b.n	801bca4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bc3e:	68fb      	ldr	r3, [r7, #12]
 801bc40:	2200      	movs	r2, #0
 801bc42:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801bc44:	68fb      	ldr	r3, [r7, #12]
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	4a18      	ldr	r2, [pc, #96]	@ (801bcac <HAL_UART_Receive_IT+0xb8>)
 801bc4a:	4293      	cmp	r3, r2
 801bc4c:	d020      	beq.n	801bc90 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801bc4e:	68fb      	ldr	r3, [r7, #12]
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	685a      	ldr	r2, [r3, #4]
 801bc54:	2380      	movs	r3, #128	@ 0x80
 801bc56:	041b      	lsls	r3, r3, #16
 801bc58:	4013      	ands	r3, r2
 801bc5a:	d019      	beq.n	801bc90 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc5c:	f3ef 8310 	mrs	r3, PRIMASK
 801bc60:	613b      	str	r3, [r7, #16]
  return(result);
 801bc62:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801bc64:	61fb      	str	r3, [r7, #28]
 801bc66:	2301      	movs	r3, #1
 801bc68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc6a:	697b      	ldr	r3, [r7, #20]
 801bc6c:	f383 8810 	msr	PRIMASK, r3
}
 801bc70:	46c0      	nop			@ (mov r8, r8)
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	681a      	ldr	r2, [r3, #0]
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	2180      	movs	r1, #128	@ 0x80
 801bc7e:	04c9      	lsls	r1, r1, #19
 801bc80:	430a      	orrs	r2, r1
 801bc82:	601a      	str	r2, [r3, #0]
 801bc84:	69fb      	ldr	r3, [r7, #28]
 801bc86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc88:	69bb      	ldr	r3, [r7, #24]
 801bc8a:	f383 8810 	msr	PRIMASK, r3
}
 801bc8e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801bc90:	1dbb      	adds	r3, r7, #6
 801bc92:	881a      	ldrh	r2, [r3, #0]
 801bc94:	68b9      	ldr	r1, [r7, #8]
 801bc96:	68fb      	ldr	r3, [r7, #12]
 801bc98:	0018      	movs	r0, r3
 801bc9a:	f001 f8c7 	bl	801ce2c <UART_Start_Receive_IT>
 801bc9e:	0003      	movs	r3, r0
 801bca0:	e000      	b.n	801bca4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801bca2:	2302      	movs	r3, #2
  }
}
 801bca4:	0018      	movs	r0, r3
 801bca6:	46bd      	mov	sp, r7
 801bca8:	b008      	add	sp, #32
 801bcaa:	bd80      	pop	{r7, pc}
 801bcac:	40004800 	.word	0x40004800

0801bcb0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801bcb0:	b580      	push	{r7, lr}
 801bcb2:	b088      	sub	sp, #32
 801bcb4:	af00      	add	r7, sp, #0
 801bcb6:	60f8      	str	r0, [r7, #12]
 801bcb8:	60b9      	str	r1, [r7, #8]
 801bcba:	1dbb      	adds	r3, r7, #6
 801bcbc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801bcbe:	68fb      	ldr	r3, [r7, #12]
 801bcc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801bcc2:	2b20      	cmp	r3, #32
 801bcc4:	d000      	beq.n	801bcc8 <HAL_UART_Transmit_DMA+0x18>
 801bcc6:	e077      	b.n	801bdb8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801bcc8:	68bb      	ldr	r3, [r7, #8]
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d003      	beq.n	801bcd6 <HAL_UART_Transmit_DMA+0x26>
 801bcce:	1dbb      	adds	r3, r7, #6
 801bcd0:	881b      	ldrh	r3, [r3, #0]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d101      	bne.n	801bcda <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801bcd6:	2301      	movs	r3, #1
 801bcd8:	e06f      	b.n	801bdba <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bcda:	68fb      	ldr	r3, [r7, #12]
 801bcdc:	689a      	ldr	r2, [r3, #8]
 801bcde:	2380      	movs	r3, #128	@ 0x80
 801bce0:	015b      	lsls	r3, r3, #5
 801bce2:	429a      	cmp	r2, r3
 801bce4:	d109      	bne.n	801bcfa <HAL_UART_Transmit_DMA+0x4a>
 801bce6:	68fb      	ldr	r3, [r7, #12]
 801bce8:	691b      	ldr	r3, [r3, #16]
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d105      	bne.n	801bcfa <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801bcee:	68bb      	ldr	r3, [r7, #8]
 801bcf0:	2201      	movs	r2, #1
 801bcf2:	4013      	ands	r3, r2
 801bcf4:	d001      	beq.n	801bcfa <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801bcf6:	2301      	movs	r3, #1
 801bcf8:	e05f      	b.n	801bdba <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801bcfa:	68fb      	ldr	r3, [r7, #12]
 801bcfc:	68ba      	ldr	r2, [r7, #8]
 801bcfe:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801bd00:	68fb      	ldr	r3, [r7, #12]
 801bd02:	1dba      	adds	r2, r7, #6
 801bd04:	2150      	movs	r1, #80	@ 0x50
 801bd06:	8812      	ldrh	r2, [r2, #0]
 801bd08:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801bd0a:	68fb      	ldr	r3, [r7, #12]
 801bd0c:	1dba      	adds	r2, r7, #6
 801bd0e:	2152      	movs	r1, #82	@ 0x52
 801bd10:	8812      	ldrh	r2, [r2, #0]
 801bd12:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bd14:	68fb      	ldr	r3, [r7, #12]
 801bd16:	2284      	movs	r2, #132	@ 0x84
 801bd18:	2100      	movs	r1, #0
 801bd1a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801bd1c:	68fb      	ldr	r3, [r7, #12]
 801bd1e:	2221      	movs	r2, #33	@ 0x21
 801bd20:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801bd22:	68fb      	ldr	r3, [r7, #12]
 801bd24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d027      	beq.n	801bd7a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801bd2a:	68fb      	ldr	r3, [r7, #12]
 801bd2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bd2e:	4a25      	ldr	r2, [pc, #148]	@ (801bdc4 <HAL_UART_Transmit_DMA+0x114>)
 801bd30:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801bd32:	68fb      	ldr	r3, [r7, #12]
 801bd34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bd36:	4a24      	ldr	r2, [pc, #144]	@ (801bdc8 <HAL_UART_Transmit_DMA+0x118>)
 801bd38:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801bd3a:	68fb      	ldr	r3, [r7, #12]
 801bd3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bd3e:	4a23      	ldr	r2, [pc, #140]	@ (801bdcc <HAL_UART_Transmit_DMA+0x11c>)
 801bd40:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801bd42:	68fb      	ldr	r3, [r7, #12]
 801bd44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bd46:	2200      	movs	r2, #0
 801bd48:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801bd4e:	68fb      	ldr	r3, [r7, #12]
 801bd50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bd52:	0019      	movs	r1, r3
 801bd54:	68fb      	ldr	r3, [r7, #12]
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	3328      	adds	r3, #40	@ 0x28
 801bd5a:	001a      	movs	r2, r3
 801bd5c:	1dbb      	adds	r3, r7, #6
 801bd5e:	881b      	ldrh	r3, [r3, #0]
 801bd60:	f7f7 ff36 	bl	8013bd0 <HAL_DMA_Start_IT>
 801bd64:	1e03      	subs	r3, r0, #0
 801bd66:	d008      	beq.n	801bd7a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801bd68:	68fb      	ldr	r3, [r7, #12]
 801bd6a:	2284      	movs	r2, #132	@ 0x84
 801bd6c:	2110      	movs	r1, #16
 801bd6e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801bd70:	68fb      	ldr	r3, [r7, #12]
 801bd72:	2220      	movs	r2, #32
 801bd74:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801bd76:	2301      	movs	r3, #1
 801bd78:	e01f      	b.n	801bdba <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	2240      	movs	r2, #64	@ 0x40
 801bd80:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd82:	f3ef 8310 	mrs	r3, PRIMASK
 801bd86:	613b      	str	r3, [r7, #16]
  return(result);
 801bd88:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801bd8a:	61fb      	str	r3, [r7, #28]
 801bd8c:	2301      	movs	r3, #1
 801bd8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd90:	697b      	ldr	r3, [r7, #20]
 801bd92:	f383 8810 	msr	PRIMASK, r3
}
 801bd96:	46c0      	nop			@ (mov r8, r8)
 801bd98:	68fb      	ldr	r3, [r7, #12]
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	689a      	ldr	r2, [r3, #8]
 801bd9e:	68fb      	ldr	r3, [r7, #12]
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	2180      	movs	r1, #128	@ 0x80
 801bda4:	430a      	orrs	r2, r1
 801bda6:	609a      	str	r2, [r3, #8]
 801bda8:	69fb      	ldr	r3, [r7, #28]
 801bdaa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bdac:	69bb      	ldr	r3, [r7, #24]
 801bdae:	f383 8810 	msr	PRIMASK, r3
}
 801bdb2:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801bdb4:	2300      	movs	r3, #0
 801bdb6:	e000      	b.n	801bdba <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801bdb8:	2302      	movs	r3, #2
  }
}
 801bdba:	0018      	movs	r0, r3
 801bdbc:	46bd      	mov	sp, r7
 801bdbe:	b008      	add	sp, #32
 801bdc0:	bd80      	pop	{r7, pc}
 801bdc2:	46c0      	nop			@ (mov r8, r8)
 801bdc4:	0801d211 	.word	0x0801d211
 801bdc8:	0801d2ad 	.word	0x0801d2ad
 801bdcc:	0801d44d 	.word	0x0801d44d

0801bdd0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b088      	sub	sp, #32
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	60f8      	str	r0, [r7, #12]
 801bdd8:	60b9      	str	r1, [r7, #8]
 801bdda:	1dbb      	adds	r3, r7, #6
 801bddc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	2280      	movs	r2, #128	@ 0x80
 801bde2:	589b      	ldr	r3, [r3, r2]
 801bde4:	2b20      	cmp	r3, #32
 801bde6:	d14a      	bne.n	801be7e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801bde8:	68bb      	ldr	r3, [r7, #8]
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d003      	beq.n	801bdf6 <HAL_UART_Receive_DMA+0x26>
 801bdee:	1dbb      	adds	r3, r7, #6
 801bdf0:	881b      	ldrh	r3, [r3, #0]
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d101      	bne.n	801bdfa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801bdf6:	2301      	movs	r3, #1
 801bdf8:	e042      	b.n	801be80 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	689a      	ldr	r2, [r3, #8]
 801bdfe:	2380      	movs	r3, #128	@ 0x80
 801be00:	015b      	lsls	r3, r3, #5
 801be02:	429a      	cmp	r2, r3
 801be04:	d109      	bne.n	801be1a <HAL_UART_Receive_DMA+0x4a>
 801be06:	68fb      	ldr	r3, [r7, #12]
 801be08:	691b      	ldr	r3, [r3, #16]
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d105      	bne.n	801be1a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801be0e:	68bb      	ldr	r3, [r7, #8]
 801be10:	2201      	movs	r2, #1
 801be12:	4013      	ands	r3, r2
 801be14:	d001      	beq.n	801be1a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801be16:	2301      	movs	r3, #1
 801be18:	e032      	b.n	801be80 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801be1a:	68fb      	ldr	r3, [r7, #12]
 801be1c:	2200      	movs	r2, #0
 801be1e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801be20:	68fb      	ldr	r3, [r7, #12]
 801be22:	681b      	ldr	r3, [r3, #0]
 801be24:	4a18      	ldr	r2, [pc, #96]	@ (801be88 <HAL_UART_Receive_DMA+0xb8>)
 801be26:	4293      	cmp	r3, r2
 801be28:	d020      	beq.n	801be6c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801be2a:	68fb      	ldr	r3, [r7, #12]
 801be2c:	681b      	ldr	r3, [r3, #0]
 801be2e:	685a      	ldr	r2, [r3, #4]
 801be30:	2380      	movs	r3, #128	@ 0x80
 801be32:	041b      	lsls	r3, r3, #16
 801be34:	4013      	ands	r3, r2
 801be36:	d019      	beq.n	801be6c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be38:	f3ef 8310 	mrs	r3, PRIMASK
 801be3c:	613b      	str	r3, [r7, #16]
  return(result);
 801be3e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801be40:	61fb      	str	r3, [r7, #28]
 801be42:	2301      	movs	r3, #1
 801be44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be46:	697b      	ldr	r3, [r7, #20]
 801be48:	f383 8810 	msr	PRIMASK, r3
}
 801be4c:	46c0      	nop			@ (mov r8, r8)
 801be4e:	68fb      	ldr	r3, [r7, #12]
 801be50:	681b      	ldr	r3, [r3, #0]
 801be52:	681a      	ldr	r2, [r3, #0]
 801be54:	68fb      	ldr	r3, [r7, #12]
 801be56:	681b      	ldr	r3, [r3, #0]
 801be58:	2180      	movs	r1, #128	@ 0x80
 801be5a:	04c9      	lsls	r1, r1, #19
 801be5c:	430a      	orrs	r2, r1
 801be5e:	601a      	str	r2, [r3, #0]
 801be60:	69fb      	ldr	r3, [r7, #28]
 801be62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be64:	69bb      	ldr	r3, [r7, #24]
 801be66:	f383 8810 	msr	PRIMASK, r3
}
 801be6a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801be6c:	1dbb      	adds	r3, r7, #6
 801be6e:	881a      	ldrh	r2, [r3, #0]
 801be70:	68b9      	ldr	r1, [r7, #8]
 801be72:	68fb      	ldr	r3, [r7, #12]
 801be74:	0018      	movs	r0, r3
 801be76:	f001 f8a3 	bl	801cfc0 <UART_Start_Receive_DMA>
 801be7a:	0003      	movs	r3, r0
 801be7c:	e000      	b.n	801be80 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801be7e:	2302      	movs	r3, #2
  }
}
 801be80:	0018      	movs	r0, r3
 801be82:	46bd      	mov	sp, r7
 801be84:	b008      	add	sp, #32
 801be86:	bd80      	pop	{r7, pc}
 801be88:	40004800 	.word	0x40004800

0801be8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801be8c:	b590      	push	{r4, r7, lr}
 801be8e:	b0ab      	sub	sp, #172	@ 0xac
 801be90:	af00      	add	r7, sp, #0
 801be92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	681b      	ldr	r3, [r3, #0]
 801be98:	69db      	ldr	r3, [r3, #28]
 801be9a:	22a4      	movs	r2, #164	@ 0xa4
 801be9c:	18b9      	adds	r1, r7, r2
 801be9e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	20a0      	movs	r0, #160	@ 0xa0
 801bea8:	1839      	adds	r1, r7, r0
 801beaa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	681b      	ldr	r3, [r3, #0]
 801beb0:	689b      	ldr	r3, [r3, #8]
 801beb2:	219c      	movs	r1, #156	@ 0x9c
 801beb4:	1879      	adds	r1, r7, r1
 801beb6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801beb8:	0011      	movs	r1, r2
 801beba:	18bb      	adds	r3, r7, r2
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	4a9c      	ldr	r2, [pc, #624]	@ (801c130 <HAL_UART_IRQHandler+0x2a4>)
 801bec0:	4013      	ands	r3, r2
 801bec2:	2298      	movs	r2, #152	@ 0x98
 801bec4:	18bc      	adds	r4, r7, r2
 801bec6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801bec8:	18bb      	adds	r3, r7, r2
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	2b00      	cmp	r3, #0
 801bece:	d114      	bne.n	801befa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801bed0:	187b      	adds	r3, r7, r1
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	2220      	movs	r2, #32
 801bed6:	4013      	ands	r3, r2
 801bed8:	d00f      	beq.n	801befa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801beda:	183b      	adds	r3, r7, r0
 801bedc:	681b      	ldr	r3, [r3, #0]
 801bede:	2220      	movs	r2, #32
 801bee0:	4013      	ands	r3, r2
 801bee2:	d00a      	beq.n	801befa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d100      	bne.n	801beee <HAL_UART_IRQHandler+0x62>
 801beec:	e2aa      	b.n	801c444 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801bef2:	687a      	ldr	r2, [r7, #4]
 801bef4:	0010      	movs	r0, r2
 801bef6:	4798      	blx	r3
      }
      return;
 801bef8:	e2a4      	b.n	801c444 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801befa:	2398      	movs	r3, #152	@ 0x98
 801befc:	18fb      	adds	r3, r7, r3
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d100      	bne.n	801bf06 <HAL_UART_IRQHandler+0x7a>
 801bf04:	e11a      	b.n	801c13c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801bf06:	239c      	movs	r3, #156	@ 0x9c
 801bf08:	18fb      	adds	r3, r7, r3
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	2201      	movs	r2, #1
 801bf0e:	4013      	ands	r3, r2
 801bf10:	d106      	bne.n	801bf20 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801bf12:	23a0      	movs	r3, #160	@ 0xa0
 801bf14:	18fb      	adds	r3, r7, r3
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	4a86      	ldr	r2, [pc, #536]	@ (801c134 <HAL_UART_IRQHandler+0x2a8>)
 801bf1a:	4013      	ands	r3, r2
 801bf1c:	d100      	bne.n	801bf20 <HAL_UART_IRQHandler+0x94>
 801bf1e:	e10d      	b.n	801c13c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801bf20:	23a4      	movs	r3, #164	@ 0xa4
 801bf22:	18fb      	adds	r3, r7, r3
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	2201      	movs	r2, #1
 801bf28:	4013      	ands	r3, r2
 801bf2a:	d012      	beq.n	801bf52 <HAL_UART_IRQHandler+0xc6>
 801bf2c:	23a0      	movs	r3, #160	@ 0xa0
 801bf2e:	18fb      	adds	r3, r7, r3
 801bf30:	681a      	ldr	r2, [r3, #0]
 801bf32:	2380      	movs	r3, #128	@ 0x80
 801bf34:	005b      	lsls	r3, r3, #1
 801bf36:	4013      	ands	r3, r2
 801bf38:	d00b      	beq.n	801bf52 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	2201      	movs	r2, #1
 801bf40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	2284      	movs	r2, #132	@ 0x84
 801bf46:	589b      	ldr	r3, [r3, r2]
 801bf48:	2201      	movs	r2, #1
 801bf4a:	431a      	orrs	r2, r3
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	2184      	movs	r1, #132	@ 0x84
 801bf50:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801bf52:	23a4      	movs	r3, #164	@ 0xa4
 801bf54:	18fb      	adds	r3, r7, r3
 801bf56:	681b      	ldr	r3, [r3, #0]
 801bf58:	2202      	movs	r2, #2
 801bf5a:	4013      	ands	r3, r2
 801bf5c:	d011      	beq.n	801bf82 <HAL_UART_IRQHandler+0xf6>
 801bf5e:	239c      	movs	r3, #156	@ 0x9c
 801bf60:	18fb      	adds	r3, r7, r3
 801bf62:	681b      	ldr	r3, [r3, #0]
 801bf64:	2201      	movs	r2, #1
 801bf66:	4013      	ands	r3, r2
 801bf68:	d00b      	beq.n	801bf82 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	681b      	ldr	r3, [r3, #0]
 801bf6e:	2202      	movs	r2, #2
 801bf70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	2284      	movs	r2, #132	@ 0x84
 801bf76:	589b      	ldr	r3, [r3, r2]
 801bf78:	2204      	movs	r2, #4
 801bf7a:	431a      	orrs	r2, r3
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	2184      	movs	r1, #132	@ 0x84
 801bf80:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801bf82:	23a4      	movs	r3, #164	@ 0xa4
 801bf84:	18fb      	adds	r3, r7, r3
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	2204      	movs	r2, #4
 801bf8a:	4013      	ands	r3, r2
 801bf8c:	d011      	beq.n	801bfb2 <HAL_UART_IRQHandler+0x126>
 801bf8e:	239c      	movs	r3, #156	@ 0x9c
 801bf90:	18fb      	adds	r3, r7, r3
 801bf92:	681b      	ldr	r3, [r3, #0]
 801bf94:	2201      	movs	r2, #1
 801bf96:	4013      	ands	r3, r2
 801bf98:	d00b      	beq.n	801bfb2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	2204      	movs	r2, #4
 801bfa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	2284      	movs	r2, #132	@ 0x84
 801bfa6:	589b      	ldr	r3, [r3, r2]
 801bfa8:	2202      	movs	r2, #2
 801bfaa:	431a      	orrs	r2, r3
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	2184      	movs	r1, #132	@ 0x84
 801bfb0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801bfb2:	23a4      	movs	r3, #164	@ 0xa4
 801bfb4:	18fb      	adds	r3, r7, r3
 801bfb6:	681b      	ldr	r3, [r3, #0]
 801bfb8:	2208      	movs	r2, #8
 801bfba:	4013      	ands	r3, r2
 801bfbc:	d017      	beq.n	801bfee <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801bfbe:	23a0      	movs	r3, #160	@ 0xa0
 801bfc0:	18fb      	adds	r3, r7, r3
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	2220      	movs	r2, #32
 801bfc6:	4013      	ands	r3, r2
 801bfc8:	d105      	bne.n	801bfd6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801bfca:	239c      	movs	r3, #156	@ 0x9c
 801bfcc:	18fb      	adds	r3, r7, r3
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	2201      	movs	r2, #1
 801bfd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801bfd4:	d00b      	beq.n	801bfee <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	2208      	movs	r2, #8
 801bfdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	2284      	movs	r2, #132	@ 0x84
 801bfe2:	589b      	ldr	r3, [r3, r2]
 801bfe4:	2208      	movs	r2, #8
 801bfe6:	431a      	orrs	r2, r3
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	2184      	movs	r1, #132	@ 0x84
 801bfec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801bfee:	23a4      	movs	r3, #164	@ 0xa4
 801bff0:	18fb      	adds	r3, r7, r3
 801bff2:	681a      	ldr	r2, [r3, #0]
 801bff4:	2380      	movs	r3, #128	@ 0x80
 801bff6:	011b      	lsls	r3, r3, #4
 801bff8:	4013      	ands	r3, r2
 801bffa:	d013      	beq.n	801c024 <HAL_UART_IRQHandler+0x198>
 801bffc:	23a0      	movs	r3, #160	@ 0xa0
 801bffe:	18fb      	adds	r3, r7, r3
 801c000:	681a      	ldr	r2, [r3, #0]
 801c002:	2380      	movs	r3, #128	@ 0x80
 801c004:	04db      	lsls	r3, r3, #19
 801c006:	4013      	ands	r3, r2
 801c008:	d00c      	beq.n	801c024 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	2280      	movs	r2, #128	@ 0x80
 801c010:	0112      	lsls	r2, r2, #4
 801c012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	2284      	movs	r2, #132	@ 0x84
 801c018:	589b      	ldr	r3, [r3, r2]
 801c01a:	2220      	movs	r2, #32
 801c01c:	431a      	orrs	r2, r3
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	2184      	movs	r1, #132	@ 0x84
 801c022:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	2284      	movs	r2, #132	@ 0x84
 801c028:	589b      	ldr	r3, [r3, r2]
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d100      	bne.n	801c030 <HAL_UART_IRQHandler+0x1a4>
 801c02e:	e20b      	b.n	801c448 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801c030:	23a4      	movs	r3, #164	@ 0xa4
 801c032:	18fb      	adds	r3, r7, r3
 801c034:	681b      	ldr	r3, [r3, #0]
 801c036:	2220      	movs	r2, #32
 801c038:	4013      	ands	r3, r2
 801c03a:	d00e      	beq.n	801c05a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801c03c:	23a0      	movs	r3, #160	@ 0xa0
 801c03e:	18fb      	adds	r3, r7, r3
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	2220      	movs	r2, #32
 801c044:	4013      	ands	r3, r2
 801c046:	d008      	beq.n	801c05a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d004      	beq.n	801c05a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c054:	687a      	ldr	r2, [r7, #4]
 801c056:	0010      	movs	r0, r2
 801c058:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	2284      	movs	r2, #132	@ 0x84
 801c05e:	589b      	ldr	r3, [r3, r2]
 801c060:	2194      	movs	r1, #148	@ 0x94
 801c062:	187a      	adds	r2, r7, r1
 801c064:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	689b      	ldr	r3, [r3, #8]
 801c06c:	2240      	movs	r2, #64	@ 0x40
 801c06e:	4013      	ands	r3, r2
 801c070:	2b40      	cmp	r3, #64	@ 0x40
 801c072:	d004      	beq.n	801c07e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801c074:	187b      	adds	r3, r7, r1
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	2228      	movs	r2, #40	@ 0x28
 801c07a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801c07c:	d04b      	beq.n	801c116 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	0018      	movs	r0, r3
 801c082:	f001 f861 	bl	801d148 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	681b      	ldr	r3, [r3, #0]
 801c08a:	689b      	ldr	r3, [r3, #8]
 801c08c:	2240      	movs	r2, #64	@ 0x40
 801c08e:	4013      	ands	r3, r2
 801c090:	2b40      	cmp	r3, #64	@ 0x40
 801c092:	d139      	bne.n	801c108 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c094:	f3ef 8310 	mrs	r3, PRIMASK
 801c098:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801c09a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c09c:	2090      	movs	r0, #144	@ 0x90
 801c09e:	183a      	adds	r2, r7, r0
 801c0a0:	6013      	str	r3, [r2, #0]
 801c0a2:	2301      	movs	r3, #1
 801c0a4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c0a8:	f383 8810 	msr	PRIMASK, r3
}
 801c0ac:	46c0      	nop			@ (mov r8, r8)
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	689a      	ldr	r2, [r3, #8]
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	2140      	movs	r1, #64	@ 0x40
 801c0ba:	438a      	bics	r2, r1
 801c0bc:	609a      	str	r2, [r3, #8]
 801c0be:	183b      	adds	r3, r7, r0
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c0c6:	f383 8810 	msr	PRIMASK, r3
}
 801c0ca:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	d012      	beq.n	801c0fa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c0d8:	4a17      	ldr	r2, [pc, #92]	@ (801c138 <HAL_UART_IRQHandler+0x2ac>)
 801c0da:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c0e0:	0018      	movs	r0, r3
 801c0e2:	f7f7 fe1b 	bl	8013d1c <HAL_DMA_Abort_IT>
 801c0e6:	1e03      	subs	r3, r0, #0
 801c0e8:	d020      	beq.n	801c12c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c0ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c0f4:	0018      	movs	r0, r3
 801c0f6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c0f8:	e018      	b.n	801c12c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	2298      	movs	r2, #152	@ 0x98
 801c0fe:	589b      	ldr	r3, [r3, r2]
 801c100:	687a      	ldr	r2, [r7, #4]
 801c102:	0010      	movs	r0, r2
 801c104:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c106:	e011      	b.n	801c12c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	2298      	movs	r2, #152	@ 0x98
 801c10c:	589b      	ldr	r3, [r3, r2]
 801c10e:	687a      	ldr	r2, [r7, #4]
 801c110:	0010      	movs	r0, r2
 801c112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c114:	e00a      	b.n	801c12c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	2298      	movs	r2, #152	@ 0x98
 801c11a:	589b      	ldr	r3, [r3, r2]
 801c11c:	687a      	ldr	r2, [r7, #4]
 801c11e:	0010      	movs	r0, r2
 801c120:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	2284      	movs	r2, #132	@ 0x84
 801c126:	2100      	movs	r1, #0
 801c128:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801c12a:	e18d      	b.n	801c448 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c12c:	46c0      	nop			@ (mov r8, r8)
    return;
 801c12e:	e18b      	b.n	801c448 <HAL_UART_IRQHandler+0x5bc>
 801c130:	0000080f 	.word	0x0000080f
 801c134:	04000120 	.word	0x04000120
 801c138:	0801d4d5 	.word	0x0801d4d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c140:	2b01      	cmp	r3, #1
 801c142:	d000      	beq.n	801c146 <HAL_UART_IRQHandler+0x2ba>
 801c144:	e13d      	b.n	801c3c2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801c146:	23a4      	movs	r3, #164	@ 0xa4
 801c148:	18fb      	adds	r3, r7, r3
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	2210      	movs	r2, #16
 801c14e:	4013      	ands	r3, r2
 801c150:	d100      	bne.n	801c154 <HAL_UART_IRQHandler+0x2c8>
 801c152:	e136      	b.n	801c3c2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801c154:	23a0      	movs	r3, #160	@ 0xa0
 801c156:	18fb      	adds	r3, r7, r3
 801c158:	681b      	ldr	r3, [r3, #0]
 801c15a:	2210      	movs	r2, #16
 801c15c:	4013      	ands	r3, r2
 801c15e:	d100      	bne.n	801c162 <HAL_UART_IRQHandler+0x2d6>
 801c160:	e12f      	b.n	801c3c2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	2210      	movs	r2, #16
 801c168:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	681b      	ldr	r3, [r3, #0]
 801c16e:	689b      	ldr	r3, [r3, #8]
 801c170:	2240      	movs	r2, #64	@ 0x40
 801c172:	4013      	ands	r3, r2
 801c174:	2b40      	cmp	r3, #64	@ 0x40
 801c176:	d000      	beq.n	801c17a <HAL_UART_IRQHandler+0x2ee>
 801c178:	e0a2      	b.n	801c2c0 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c17e:	681b      	ldr	r3, [r3, #0]
 801c180:	685a      	ldr	r2, [r3, #4]
 801c182:	217e      	movs	r1, #126	@ 0x7e
 801c184:	187b      	adds	r3, r7, r1
 801c186:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801c188:	187b      	adds	r3, r7, r1
 801c18a:	881b      	ldrh	r3, [r3, #0]
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d100      	bne.n	801c192 <HAL_UART_IRQHandler+0x306>
 801c190:	e15c      	b.n	801c44c <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	2258      	movs	r2, #88	@ 0x58
 801c196:	5a9b      	ldrh	r3, [r3, r2]
 801c198:	187a      	adds	r2, r7, r1
 801c19a:	8812      	ldrh	r2, [r2, #0]
 801c19c:	429a      	cmp	r2, r3
 801c19e:	d300      	bcc.n	801c1a2 <HAL_UART_IRQHandler+0x316>
 801c1a0:	e154      	b.n	801c44c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	187a      	adds	r2, r7, r1
 801c1a6:	215a      	movs	r1, #90	@ 0x5a
 801c1a8:	8812      	ldrh	r2, [r2, #0]
 801c1aa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	681b      	ldr	r3, [r3, #0]
 801c1b4:	2220      	movs	r2, #32
 801c1b6:	4013      	ands	r3, r2
 801c1b8:	d16f      	bne.n	801c29a <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1ba:	f3ef 8310 	mrs	r3, PRIMASK
 801c1be:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801c1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c1c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 801c1c4:	2301      	movs	r3, #1
 801c1c6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c1ca:	f383 8810 	msr	PRIMASK, r3
}
 801c1ce:	46c0      	nop			@ (mov r8, r8)
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	681a      	ldr	r2, [r3, #0]
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	49a0      	ldr	r1, [pc, #640]	@ (801c45c <HAL_UART_IRQHandler+0x5d0>)
 801c1dc:	400a      	ands	r2, r1
 801c1de:	601a      	str	r2, [r3, #0]
 801c1e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c1e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1e6:	f383 8810 	msr	PRIMASK, r3
}
 801c1ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1ec:	f3ef 8310 	mrs	r3, PRIMASK
 801c1f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801c1f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c1f4:	677b      	str	r3, [r7, #116]	@ 0x74
 801c1f6:	2301      	movs	r3, #1
 801c1f8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c1fc:	f383 8810 	msr	PRIMASK, r3
}
 801c200:	46c0      	nop			@ (mov r8, r8)
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	689a      	ldr	r2, [r3, #8]
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	681b      	ldr	r3, [r3, #0]
 801c20c:	2101      	movs	r1, #1
 801c20e:	438a      	bics	r2, r1
 801c210:	609a      	str	r2, [r3, #8]
 801c212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801c214:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c218:	f383 8810 	msr	PRIMASK, r3
}
 801c21c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c21e:	f3ef 8310 	mrs	r3, PRIMASK
 801c222:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801c224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c226:	673b      	str	r3, [r7, #112]	@ 0x70
 801c228:	2301      	movs	r3, #1
 801c22a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c22c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c22e:	f383 8810 	msr	PRIMASK, r3
}
 801c232:	46c0      	nop			@ (mov r8, r8)
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	689a      	ldr	r2, [r3, #8]
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	2140      	movs	r1, #64	@ 0x40
 801c240:	438a      	bics	r2, r1
 801c242:	609a      	str	r2, [r3, #8]
 801c244:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c246:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c248:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c24a:	f383 8810 	msr	PRIMASK, r3
}
 801c24e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	2280      	movs	r2, #128	@ 0x80
 801c254:	2120      	movs	r1, #32
 801c256:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	2200      	movs	r2, #0
 801c25c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c25e:	f3ef 8310 	mrs	r3, PRIMASK
 801c262:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801c264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c266:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801c268:	2301      	movs	r3, #1
 801c26a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c26c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c26e:	f383 8810 	msr	PRIMASK, r3
}
 801c272:	46c0      	nop			@ (mov r8, r8)
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	681a      	ldr	r2, [r3, #0]
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	2110      	movs	r1, #16
 801c280:	438a      	bics	r2, r1
 801c282:	601a      	str	r2, [r3, #0]
 801c284:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801c286:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c288:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c28a:	f383 8810 	msr	PRIMASK, r3
}
 801c28e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c294:	0018      	movs	r0, r3
 801c296:	f7f7 fd01 	bl	8013c9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	2202      	movs	r2, #2
 801c29e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	22ac      	movs	r2, #172	@ 0xac
 801c2a4:	589b      	ldr	r3, [r3, r2]
 801c2a6:	687a      	ldr	r2, [r7, #4]
 801c2a8:	2158      	movs	r1, #88	@ 0x58
 801c2aa:	5a51      	ldrh	r1, [r2, r1]
 801c2ac:	687a      	ldr	r2, [r7, #4]
 801c2ae:	205a      	movs	r0, #90	@ 0x5a
 801c2b0:	5a12      	ldrh	r2, [r2, r0]
 801c2b2:	b292      	uxth	r2, r2
 801c2b4:	1a8a      	subs	r2, r1, r2
 801c2b6:	b291      	uxth	r1, r2
 801c2b8:	687a      	ldr	r2, [r7, #4]
 801c2ba:	0010      	movs	r0, r2
 801c2bc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801c2be:	e0c5      	b.n	801c44c <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801c2c0:	687b      	ldr	r3, [r7, #4]
 801c2c2:	2258      	movs	r2, #88	@ 0x58
 801c2c4:	5a99      	ldrh	r1, [r3, r2]
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	225a      	movs	r2, #90	@ 0x5a
 801c2ca:	5a9b      	ldrh	r3, [r3, r2]
 801c2cc:	b29a      	uxth	r2, r3
 801c2ce:	208e      	movs	r0, #142	@ 0x8e
 801c2d0:	183b      	adds	r3, r7, r0
 801c2d2:	1a8a      	subs	r2, r1, r2
 801c2d4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801c2d6:	687b      	ldr	r3, [r7, #4]
 801c2d8:	225a      	movs	r2, #90	@ 0x5a
 801c2da:	5a9b      	ldrh	r3, [r3, r2]
 801c2dc:	b29b      	uxth	r3, r3
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	d100      	bne.n	801c2e4 <HAL_UART_IRQHandler+0x458>
 801c2e2:	e0b5      	b.n	801c450 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801c2e4:	183b      	adds	r3, r7, r0
 801c2e6:	881b      	ldrh	r3, [r3, #0]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d100      	bne.n	801c2ee <HAL_UART_IRQHandler+0x462>
 801c2ec:	e0b0      	b.n	801c450 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2ee:	f3ef 8310 	mrs	r3, PRIMASK
 801c2f2:	60fb      	str	r3, [r7, #12]
  return(result);
 801c2f4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c2f6:	2488      	movs	r4, #136	@ 0x88
 801c2f8:	193a      	adds	r2, r7, r4
 801c2fa:	6013      	str	r3, [r2, #0]
 801c2fc:	2301      	movs	r3, #1
 801c2fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c300:	693b      	ldr	r3, [r7, #16]
 801c302:	f383 8810 	msr	PRIMASK, r3
}
 801c306:	46c0      	nop			@ (mov r8, r8)
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	681a      	ldr	r2, [r3, #0]
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	681b      	ldr	r3, [r3, #0]
 801c312:	4953      	ldr	r1, [pc, #332]	@ (801c460 <HAL_UART_IRQHandler+0x5d4>)
 801c314:	400a      	ands	r2, r1
 801c316:	601a      	str	r2, [r3, #0]
 801c318:	193b      	adds	r3, r7, r4
 801c31a:	681b      	ldr	r3, [r3, #0]
 801c31c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c31e:	697b      	ldr	r3, [r7, #20]
 801c320:	f383 8810 	msr	PRIMASK, r3
}
 801c324:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c326:	f3ef 8310 	mrs	r3, PRIMASK
 801c32a:	61bb      	str	r3, [r7, #24]
  return(result);
 801c32c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c32e:	2484      	movs	r4, #132	@ 0x84
 801c330:	193a      	adds	r2, r7, r4
 801c332:	6013      	str	r3, [r2, #0]
 801c334:	2301      	movs	r3, #1
 801c336:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c338:	69fb      	ldr	r3, [r7, #28]
 801c33a:	f383 8810 	msr	PRIMASK, r3
}
 801c33e:	46c0      	nop			@ (mov r8, r8)
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	689a      	ldr	r2, [r3, #8]
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	2101      	movs	r1, #1
 801c34c:	438a      	bics	r2, r1
 801c34e:	609a      	str	r2, [r3, #8]
 801c350:	193b      	adds	r3, r7, r4
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c356:	6a3b      	ldr	r3, [r7, #32]
 801c358:	f383 8810 	msr	PRIMASK, r3
}
 801c35c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	2280      	movs	r2, #128	@ 0x80
 801c362:	2120      	movs	r1, #32
 801c364:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	2200      	movs	r2, #0
 801c36a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	2200      	movs	r2, #0
 801c370:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c372:	f3ef 8310 	mrs	r3, PRIMASK
 801c376:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801c378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c37a:	2480      	movs	r4, #128	@ 0x80
 801c37c:	193a      	adds	r2, r7, r4
 801c37e:	6013      	str	r3, [r2, #0]
 801c380:	2301      	movs	r3, #1
 801c382:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c386:	f383 8810 	msr	PRIMASK, r3
}
 801c38a:	46c0      	nop			@ (mov r8, r8)
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	681a      	ldr	r2, [r3, #0]
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	2110      	movs	r1, #16
 801c398:	438a      	bics	r2, r1
 801c39a:	601a      	str	r2, [r3, #0]
 801c39c:	193b      	adds	r3, r7, r4
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3a4:	f383 8810 	msr	PRIMASK, r3
}
 801c3a8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	2202      	movs	r2, #2
 801c3ae:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	22ac      	movs	r2, #172	@ 0xac
 801c3b4:	589b      	ldr	r3, [r3, r2]
 801c3b6:	183a      	adds	r2, r7, r0
 801c3b8:	8811      	ldrh	r1, [r2, #0]
 801c3ba:	687a      	ldr	r2, [r7, #4]
 801c3bc:	0010      	movs	r0, r2
 801c3be:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801c3c0:	e046      	b.n	801c450 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801c3c2:	23a4      	movs	r3, #164	@ 0xa4
 801c3c4:	18fb      	adds	r3, r7, r3
 801c3c6:	681a      	ldr	r2, [r3, #0]
 801c3c8:	2380      	movs	r3, #128	@ 0x80
 801c3ca:	035b      	lsls	r3, r3, #13
 801c3cc:	4013      	ands	r3, r2
 801c3ce:	d012      	beq.n	801c3f6 <HAL_UART_IRQHandler+0x56a>
 801c3d0:	239c      	movs	r3, #156	@ 0x9c
 801c3d2:	18fb      	adds	r3, r7, r3
 801c3d4:	681a      	ldr	r2, [r3, #0]
 801c3d6:	2380      	movs	r3, #128	@ 0x80
 801c3d8:	03db      	lsls	r3, r3, #15
 801c3da:	4013      	ands	r3, r2
 801c3dc:	d00b      	beq.n	801c3f6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	2280      	movs	r2, #128	@ 0x80
 801c3e4:	0352      	lsls	r2, r2, #13
 801c3e6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	22a8      	movs	r2, #168	@ 0xa8
 801c3ec:	589b      	ldr	r3, [r3, r2]
 801c3ee:	687a      	ldr	r2, [r7, #4]
 801c3f0:	0010      	movs	r0, r2
 801c3f2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801c3f4:	e02f      	b.n	801c456 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801c3f6:	23a4      	movs	r3, #164	@ 0xa4
 801c3f8:	18fb      	adds	r3, r7, r3
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	2280      	movs	r2, #128	@ 0x80
 801c3fe:	4013      	ands	r3, r2
 801c400:	d00f      	beq.n	801c422 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801c402:	23a0      	movs	r3, #160	@ 0xa0
 801c404:	18fb      	adds	r3, r7, r3
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	2280      	movs	r2, #128	@ 0x80
 801c40a:	4013      	ands	r3, r2
 801c40c:	d009      	beq.n	801c422 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c412:	2b00      	cmp	r3, #0
 801c414:	d01e      	beq.n	801c454 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c41a:	687a      	ldr	r2, [r7, #4]
 801c41c:	0010      	movs	r0, r2
 801c41e:	4798      	blx	r3
    }
    return;
 801c420:	e018      	b.n	801c454 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801c422:	23a4      	movs	r3, #164	@ 0xa4
 801c424:	18fb      	adds	r3, r7, r3
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	2240      	movs	r2, #64	@ 0x40
 801c42a:	4013      	ands	r3, r2
 801c42c:	d013      	beq.n	801c456 <HAL_UART_IRQHandler+0x5ca>
 801c42e:	23a0      	movs	r3, #160	@ 0xa0
 801c430:	18fb      	adds	r3, r7, r3
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	2240      	movs	r2, #64	@ 0x40
 801c436:	4013      	ands	r3, r2
 801c438:	d00d      	beq.n	801c456 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	0018      	movs	r0, r3
 801c43e:	f001 f862 	bl	801d506 <UART_EndTransmit_IT>
    return;
 801c442:	e008      	b.n	801c456 <HAL_UART_IRQHandler+0x5ca>
      return;
 801c444:	46c0      	nop			@ (mov r8, r8)
 801c446:	e006      	b.n	801c456 <HAL_UART_IRQHandler+0x5ca>
    return;
 801c448:	46c0      	nop			@ (mov r8, r8)
 801c44a:	e004      	b.n	801c456 <HAL_UART_IRQHandler+0x5ca>
      return;
 801c44c:	46c0      	nop			@ (mov r8, r8)
 801c44e:	e002      	b.n	801c456 <HAL_UART_IRQHandler+0x5ca>
      return;
 801c450:	46c0      	nop			@ (mov r8, r8)
 801c452:	e000      	b.n	801c456 <HAL_UART_IRQHandler+0x5ca>
    return;
 801c454:	46c0      	nop			@ (mov r8, r8)
  }

}
 801c456:	46bd      	mov	sp, r7
 801c458:	b02b      	add	sp, #172	@ 0xac
 801c45a:	bd90      	pop	{r4, r7, pc}
 801c45c:	fffffeff 	.word	0xfffffeff
 801c460:	fffffedf 	.word	0xfffffedf

0801c464 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801c464:	b580      	push	{r7, lr}
 801c466:	b082      	sub	sp, #8
 801c468:	af00      	add	r7, sp, #0
 801c46a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801c46c:	46c0      	nop			@ (mov r8, r8)
 801c46e:	46bd      	mov	sp, r7
 801c470:	b002      	add	sp, #8
 801c472:	bd80      	pop	{r7, pc}

0801c474 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801c474:	b580      	push	{r7, lr}
 801c476:	b082      	sub	sp, #8
 801c478:	af00      	add	r7, sp, #0
 801c47a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801c47c:	46c0      	nop			@ (mov r8, r8)
 801c47e:	46bd      	mov	sp, r7
 801c480:	b002      	add	sp, #8
 801c482:	bd80      	pop	{r7, pc}

0801c484 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801c484:	b580      	push	{r7, lr}
 801c486:	b082      	sub	sp, #8
 801c488:	af00      	add	r7, sp, #0
 801c48a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801c48c:	46c0      	nop			@ (mov r8, r8)
 801c48e:	46bd      	mov	sp, r7
 801c490:	b002      	add	sp, #8
 801c492:	bd80      	pop	{r7, pc}

0801c494 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801c494:	b580      	push	{r7, lr}
 801c496:	b082      	sub	sp, #8
 801c498:	af00      	add	r7, sp, #0
 801c49a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801c49c:	46c0      	nop			@ (mov r8, r8)
 801c49e:	46bd      	mov	sp, r7
 801c4a0:	b002      	add	sp, #8
 801c4a2:	bd80      	pop	{r7, pc}

0801c4a4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801c4a4:	b580      	push	{r7, lr}
 801c4a6:	b082      	sub	sp, #8
 801c4a8:	af00      	add	r7, sp, #0
 801c4aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801c4ac:	46c0      	nop			@ (mov r8, r8)
 801c4ae:	46bd      	mov	sp, r7
 801c4b0:	b002      	add	sp, #8
 801c4b2:	bd80      	pop	{r7, pc}

0801c4b4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801c4b4:	b580      	push	{r7, lr}
 801c4b6:	b082      	sub	sp, #8
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801c4bc:	46c0      	nop			@ (mov r8, r8)
 801c4be:	46bd      	mov	sp, r7
 801c4c0:	b002      	add	sp, #8
 801c4c2:	bd80      	pop	{r7, pc}

0801c4c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	b082      	sub	sp, #8
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	6078      	str	r0, [r7, #4]
 801c4cc:	000a      	movs	r2, r1
 801c4ce:	1cbb      	adds	r3, r7, #2
 801c4d0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801c4d2:	46c0      	nop			@ (mov r8, r8)
 801c4d4:	46bd      	mov	sp, r7
 801c4d6:	b002      	add	sp, #8
 801c4d8:	bd80      	pop	{r7, pc}
	...

0801c4dc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801c4dc:	b580      	push	{r7, lr}
 801c4de:	b082      	sub	sp, #8
 801c4e0:	af00      	add	r7, sp, #0
 801c4e2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	2188      	movs	r1, #136	@ 0x88
 801c4e8:	4a14      	ldr	r2, [pc, #80]	@ (801c53c <UART_InitCallbacksToDefault+0x60>)
 801c4ea:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	218c      	movs	r1, #140	@ 0x8c
 801c4f0:	4a13      	ldr	r2, [pc, #76]	@ (801c540 <UART_InitCallbacksToDefault+0x64>)
 801c4f2:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	2190      	movs	r1, #144	@ 0x90
 801c4f8:	4a12      	ldr	r2, [pc, #72]	@ (801c544 <UART_InitCallbacksToDefault+0x68>)
 801c4fa:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	2194      	movs	r1, #148	@ 0x94
 801c500:	4a11      	ldr	r2, [pc, #68]	@ (801c548 <UART_InitCallbacksToDefault+0x6c>)
 801c502:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	2198      	movs	r1, #152	@ 0x98
 801c508:	4a10      	ldr	r2, [pc, #64]	@ (801c54c <UART_InitCallbacksToDefault+0x70>)
 801c50a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	219c      	movs	r1, #156	@ 0x9c
 801c510:	4a0f      	ldr	r2, [pc, #60]	@ (801c550 <UART_InitCallbacksToDefault+0x74>)
 801c512:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	21a0      	movs	r1, #160	@ 0xa0
 801c518:	4a0e      	ldr	r2, [pc, #56]	@ (801c554 <UART_InitCallbacksToDefault+0x78>)
 801c51a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	21a4      	movs	r1, #164	@ 0xa4
 801c520:	4a0d      	ldr	r2, [pc, #52]	@ (801c558 <UART_InitCallbacksToDefault+0x7c>)
 801c522:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	21a8      	movs	r1, #168	@ 0xa8
 801c528:	4a0c      	ldr	r2, [pc, #48]	@ (801c55c <UART_InitCallbacksToDefault+0x80>)
 801c52a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	21ac      	movs	r1, #172	@ 0xac
 801c530:	4a0b      	ldr	r2, [pc, #44]	@ (801c560 <UART_InitCallbacksToDefault+0x84>)
 801c532:	505a      	str	r2, [r3, r1]

}
 801c534:	46c0      	nop			@ (mov r8, r8)
 801c536:	46bd      	mov	sp, r7
 801c538:	b002      	add	sp, #8
 801c53a:	bd80      	pop	{r7, pc}
 801c53c:	0801c475 	.word	0x0801c475
 801c540:	0801c465 	.word	0x0801c465
 801c544:	0801c485 	.word	0x0801c485
 801c548:	0800bee9 	.word	0x0800bee9
 801c54c:	08004c7d 	.word	0x08004c7d
 801c550:	0801c495 	.word	0x0801c495
 801c554:	0801c4a5 	.word	0x0801c4a5
 801c558:	0801c4b5 	.word	0x0801c4b5
 801c55c:	0801d8f9 	.word	0x0801d8f9
 801c560:	0801c4c5 	.word	0x0801c4c5

0801c564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801c564:	b5b0      	push	{r4, r5, r7, lr}
 801c566:	b08e      	sub	sp, #56	@ 0x38
 801c568:	af00      	add	r7, sp, #0
 801c56a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801c56c:	231a      	movs	r3, #26
 801c56e:	2218      	movs	r2, #24
 801c570:	189b      	adds	r3, r3, r2
 801c572:	19db      	adds	r3, r3, r7
 801c574:	2200      	movs	r2, #0
 801c576:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801c578:	69fb      	ldr	r3, [r7, #28]
 801c57a:	689a      	ldr	r2, [r3, #8]
 801c57c:	69fb      	ldr	r3, [r7, #28]
 801c57e:	691b      	ldr	r3, [r3, #16]
 801c580:	431a      	orrs	r2, r3
 801c582:	69fb      	ldr	r3, [r7, #28]
 801c584:	695b      	ldr	r3, [r3, #20]
 801c586:	431a      	orrs	r2, r3
 801c588:	69fb      	ldr	r3, [r7, #28]
 801c58a:	69db      	ldr	r3, [r3, #28]
 801c58c:	4313      	orrs	r3, r2
 801c58e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801c590:	69fb      	ldr	r3, [r7, #28]
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	4ac3      	ldr	r2, [pc, #780]	@ (801c8a4 <UART_SetConfig+0x340>)
 801c598:	4013      	ands	r3, r2
 801c59a:	0019      	movs	r1, r3
 801c59c:	69fb      	ldr	r3, [r7, #28]
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c5a2:	430a      	orrs	r2, r1
 801c5a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801c5a6:	69fb      	ldr	r3, [r7, #28]
 801c5a8:	681b      	ldr	r3, [r3, #0]
 801c5aa:	685b      	ldr	r3, [r3, #4]
 801c5ac:	4abe      	ldr	r2, [pc, #760]	@ (801c8a8 <UART_SetConfig+0x344>)
 801c5ae:	4013      	ands	r3, r2
 801c5b0:	0019      	movs	r1, r3
 801c5b2:	69fb      	ldr	r3, [r7, #28]
 801c5b4:	68da      	ldr	r2, [r3, #12]
 801c5b6:	69fb      	ldr	r3, [r7, #28]
 801c5b8:	681b      	ldr	r3, [r3, #0]
 801c5ba:	430a      	orrs	r2, r1
 801c5bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801c5be:	69fb      	ldr	r3, [r7, #28]
 801c5c0:	699b      	ldr	r3, [r3, #24]
 801c5c2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801c5c4:	69fb      	ldr	r3, [r7, #28]
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	4ab8      	ldr	r2, [pc, #736]	@ (801c8ac <UART_SetConfig+0x348>)
 801c5ca:	4293      	cmp	r3, r2
 801c5cc:	d004      	beq.n	801c5d8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801c5ce:	69fb      	ldr	r3, [r7, #28]
 801c5d0:	6a1b      	ldr	r3, [r3, #32]
 801c5d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c5d4:	4313      	orrs	r3, r2
 801c5d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801c5d8:	69fb      	ldr	r3, [r7, #28]
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	689b      	ldr	r3, [r3, #8]
 801c5de:	4ab4      	ldr	r2, [pc, #720]	@ (801c8b0 <UART_SetConfig+0x34c>)
 801c5e0:	4013      	ands	r3, r2
 801c5e2:	0019      	movs	r1, r3
 801c5e4:	69fb      	ldr	r3, [r7, #28]
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c5ea:	430a      	orrs	r2, r1
 801c5ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801c5ee:	69fb      	ldr	r3, [r7, #28]
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	4ab0      	ldr	r2, [pc, #704]	@ (801c8b4 <UART_SetConfig+0x350>)
 801c5f4:	4293      	cmp	r3, r2
 801c5f6:	d131      	bne.n	801c65c <UART_SetConfig+0xf8>
 801c5f8:	4baf      	ldr	r3, [pc, #700]	@ (801c8b8 <UART_SetConfig+0x354>)
 801c5fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c5fc:	2203      	movs	r2, #3
 801c5fe:	4013      	ands	r3, r2
 801c600:	2b03      	cmp	r3, #3
 801c602:	d01d      	beq.n	801c640 <UART_SetConfig+0xdc>
 801c604:	d823      	bhi.n	801c64e <UART_SetConfig+0xea>
 801c606:	2b02      	cmp	r3, #2
 801c608:	d00c      	beq.n	801c624 <UART_SetConfig+0xc0>
 801c60a:	d820      	bhi.n	801c64e <UART_SetConfig+0xea>
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d002      	beq.n	801c616 <UART_SetConfig+0xb2>
 801c610:	2b01      	cmp	r3, #1
 801c612:	d00e      	beq.n	801c632 <UART_SetConfig+0xce>
 801c614:	e01b      	b.n	801c64e <UART_SetConfig+0xea>
 801c616:	231b      	movs	r3, #27
 801c618:	2218      	movs	r2, #24
 801c61a:	189b      	adds	r3, r3, r2
 801c61c:	19db      	adds	r3, r3, r7
 801c61e:	2201      	movs	r2, #1
 801c620:	701a      	strb	r2, [r3, #0]
 801c622:	e0b4      	b.n	801c78e <UART_SetConfig+0x22a>
 801c624:	231b      	movs	r3, #27
 801c626:	2218      	movs	r2, #24
 801c628:	189b      	adds	r3, r3, r2
 801c62a:	19db      	adds	r3, r3, r7
 801c62c:	2202      	movs	r2, #2
 801c62e:	701a      	strb	r2, [r3, #0]
 801c630:	e0ad      	b.n	801c78e <UART_SetConfig+0x22a>
 801c632:	231b      	movs	r3, #27
 801c634:	2218      	movs	r2, #24
 801c636:	189b      	adds	r3, r3, r2
 801c638:	19db      	adds	r3, r3, r7
 801c63a:	2204      	movs	r2, #4
 801c63c:	701a      	strb	r2, [r3, #0]
 801c63e:	e0a6      	b.n	801c78e <UART_SetConfig+0x22a>
 801c640:	231b      	movs	r3, #27
 801c642:	2218      	movs	r2, #24
 801c644:	189b      	adds	r3, r3, r2
 801c646:	19db      	adds	r3, r3, r7
 801c648:	2208      	movs	r2, #8
 801c64a:	701a      	strb	r2, [r3, #0]
 801c64c:	e09f      	b.n	801c78e <UART_SetConfig+0x22a>
 801c64e:	231b      	movs	r3, #27
 801c650:	2218      	movs	r2, #24
 801c652:	189b      	adds	r3, r3, r2
 801c654:	19db      	adds	r3, r3, r7
 801c656:	2210      	movs	r2, #16
 801c658:	701a      	strb	r2, [r3, #0]
 801c65a:	e098      	b.n	801c78e <UART_SetConfig+0x22a>
 801c65c:	69fb      	ldr	r3, [r7, #28]
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	4a96      	ldr	r2, [pc, #600]	@ (801c8bc <UART_SetConfig+0x358>)
 801c662:	4293      	cmp	r3, r2
 801c664:	d131      	bne.n	801c6ca <UART_SetConfig+0x166>
 801c666:	4b94      	ldr	r3, [pc, #592]	@ (801c8b8 <UART_SetConfig+0x354>)
 801c668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c66a:	220c      	movs	r2, #12
 801c66c:	4013      	ands	r3, r2
 801c66e:	2b0c      	cmp	r3, #12
 801c670:	d01d      	beq.n	801c6ae <UART_SetConfig+0x14a>
 801c672:	d823      	bhi.n	801c6bc <UART_SetConfig+0x158>
 801c674:	2b08      	cmp	r3, #8
 801c676:	d00c      	beq.n	801c692 <UART_SetConfig+0x12e>
 801c678:	d820      	bhi.n	801c6bc <UART_SetConfig+0x158>
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	d002      	beq.n	801c684 <UART_SetConfig+0x120>
 801c67e:	2b04      	cmp	r3, #4
 801c680:	d00e      	beq.n	801c6a0 <UART_SetConfig+0x13c>
 801c682:	e01b      	b.n	801c6bc <UART_SetConfig+0x158>
 801c684:	231b      	movs	r3, #27
 801c686:	2218      	movs	r2, #24
 801c688:	189b      	adds	r3, r3, r2
 801c68a:	19db      	adds	r3, r3, r7
 801c68c:	2200      	movs	r2, #0
 801c68e:	701a      	strb	r2, [r3, #0]
 801c690:	e07d      	b.n	801c78e <UART_SetConfig+0x22a>
 801c692:	231b      	movs	r3, #27
 801c694:	2218      	movs	r2, #24
 801c696:	189b      	adds	r3, r3, r2
 801c698:	19db      	adds	r3, r3, r7
 801c69a:	2202      	movs	r2, #2
 801c69c:	701a      	strb	r2, [r3, #0]
 801c69e:	e076      	b.n	801c78e <UART_SetConfig+0x22a>
 801c6a0:	231b      	movs	r3, #27
 801c6a2:	2218      	movs	r2, #24
 801c6a4:	189b      	adds	r3, r3, r2
 801c6a6:	19db      	adds	r3, r3, r7
 801c6a8:	2204      	movs	r2, #4
 801c6aa:	701a      	strb	r2, [r3, #0]
 801c6ac:	e06f      	b.n	801c78e <UART_SetConfig+0x22a>
 801c6ae:	231b      	movs	r3, #27
 801c6b0:	2218      	movs	r2, #24
 801c6b2:	189b      	adds	r3, r3, r2
 801c6b4:	19db      	adds	r3, r3, r7
 801c6b6:	2208      	movs	r2, #8
 801c6b8:	701a      	strb	r2, [r3, #0]
 801c6ba:	e068      	b.n	801c78e <UART_SetConfig+0x22a>
 801c6bc:	231b      	movs	r3, #27
 801c6be:	2218      	movs	r2, #24
 801c6c0:	189b      	adds	r3, r3, r2
 801c6c2:	19db      	adds	r3, r3, r7
 801c6c4:	2210      	movs	r2, #16
 801c6c6:	701a      	strb	r2, [r3, #0]
 801c6c8:	e061      	b.n	801c78e <UART_SetConfig+0x22a>
 801c6ca:	69fb      	ldr	r3, [r7, #28]
 801c6cc:	681b      	ldr	r3, [r3, #0]
 801c6ce:	4a7c      	ldr	r2, [pc, #496]	@ (801c8c0 <UART_SetConfig+0x35c>)
 801c6d0:	4293      	cmp	r3, r2
 801c6d2:	d106      	bne.n	801c6e2 <UART_SetConfig+0x17e>
 801c6d4:	231b      	movs	r3, #27
 801c6d6:	2218      	movs	r2, #24
 801c6d8:	189b      	adds	r3, r3, r2
 801c6da:	19db      	adds	r3, r3, r7
 801c6dc:	2200      	movs	r2, #0
 801c6de:	701a      	strb	r2, [r3, #0]
 801c6e0:	e055      	b.n	801c78e <UART_SetConfig+0x22a>
 801c6e2:	69fb      	ldr	r3, [r7, #28]
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	4a77      	ldr	r2, [pc, #476]	@ (801c8c4 <UART_SetConfig+0x360>)
 801c6e8:	4293      	cmp	r3, r2
 801c6ea:	d106      	bne.n	801c6fa <UART_SetConfig+0x196>
 801c6ec:	231b      	movs	r3, #27
 801c6ee:	2218      	movs	r2, #24
 801c6f0:	189b      	adds	r3, r3, r2
 801c6f2:	19db      	adds	r3, r3, r7
 801c6f4:	2200      	movs	r2, #0
 801c6f6:	701a      	strb	r2, [r3, #0]
 801c6f8:	e049      	b.n	801c78e <UART_SetConfig+0x22a>
 801c6fa:	69fb      	ldr	r3, [r7, #28]
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	4a6b      	ldr	r2, [pc, #428]	@ (801c8ac <UART_SetConfig+0x348>)
 801c700:	4293      	cmp	r3, r2
 801c702:	d13e      	bne.n	801c782 <UART_SetConfig+0x21e>
 801c704:	4b6c      	ldr	r3, [pc, #432]	@ (801c8b8 <UART_SetConfig+0x354>)
 801c706:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c708:	23c0      	movs	r3, #192	@ 0xc0
 801c70a:	011b      	lsls	r3, r3, #4
 801c70c:	4013      	ands	r3, r2
 801c70e:	22c0      	movs	r2, #192	@ 0xc0
 801c710:	0112      	lsls	r2, r2, #4
 801c712:	4293      	cmp	r3, r2
 801c714:	d027      	beq.n	801c766 <UART_SetConfig+0x202>
 801c716:	22c0      	movs	r2, #192	@ 0xc0
 801c718:	0112      	lsls	r2, r2, #4
 801c71a:	4293      	cmp	r3, r2
 801c71c:	d82a      	bhi.n	801c774 <UART_SetConfig+0x210>
 801c71e:	2280      	movs	r2, #128	@ 0x80
 801c720:	0112      	lsls	r2, r2, #4
 801c722:	4293      	cmp	r3, r2
 801c724:	d011      	beq.n	801c74a <UART_SetConfig+0x1e6>
 801c726:	2280      	movs	r2, #128	@ 0x80
 801c728:	0112      	lsls	r2, r2, #4
 801c72a:	4293      	cmp	r3, r2
 801c72c:	d822      	bhi.n	801c774 <UART_SetConfig+0x210>
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d004      	beq.n	801c73c <UART_SetConfig+0x1d8>
 801c732:	2280      	movs	r2, #128	@ 0x80
 801c734:	00d2      	lsls	r2, r2, #3
 801c736:	4293      	cmp	r3, r2
 801c738:	d00e      	beq.n	801c758 <UART_SetConfig+0x1f4>
 801c73a:	e01b      	b.n	801c774 <UART_SetConfig+0x210>
 801c73c:	231b      	movs	r3, #27
 801c73e:	2218      	movs	r2, #24
 801c740:	189b      	adds	r3, r3, r2
 801c742:	19db      	adds	r3, r3, r7
 801c744:	2200      	movs	r2, #0
 801c746:	701a      	strb	r2, [r3, #0]
 801c748:	e021      	b.n	801c78e <UART_SetConfig+0x22a>
 801c74a:	231b      	movs	r3, #27
 801c74c:	2218      	movs	r2, #24
 801c74e:	189b      	adds	r3, r3, r2
 801c750:	19db      	adds	r3, r3, r7
 801c752:	2202      	movs	r2, #2
 801c754:	701a      	strb	r2, [r3, #0]
 801c756:	e01a      	b.n	801c78e <UART_SetConfig+0x22a>
 801c758:	231b      	movs	r3, #27
 801c75a:	2218      	movs	r2, #24
 801c75c:	189b      	adds	r3, r3, r2
 801c75e:	19db      	adds	r3, r3, r7
 801c760:	2204      	movs	r2, #4
 801c762:	701a      	strb	r2, [r3, #0]
 801c764:	e013      	b.n	801c78e <UART_SetConfig+0x22a>
 801c766:	231b      	movs	r3, #27
 801c768:	2218      	movs	r2, #24
 801c76a:	189b      	adds	r3, r3, r2
 801c76c:	19db      	adds	r3, r3, r7
 801c76e:	2208      	movs	r2, #8
 801c770:	701a      	strb	r2, [r3, #0]
 801c772:	e00c      	b.n	801c78e <UART_SetConfig+0x22a>
 801c774:	231b      	movs	r3, #27
 801c776:	2218      	movs	r2, #24
 801c778:	189b      	adds	r3, r3, r2
 801c77a:	19db      	adds	r3, r3, r7
 801c77c:	2210      	movs	r2, #16
 801c77e:	701a      	strb	r2, [r3, #0]
 801c780:	e005      	b.n	801c78e <UART_SetConfig+0x22a>
 801c782:	231b      	movs	r3, #27
 801c784:	2218      	movs	r2, #24
 801c786:	189b      	adds	r3, r3, r2
 801c788:	19db      	adds	r3, r3, r7
 801c78a:	2210      	movs	r2, #16
 801c78c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801c78e:	69fb      	ldr	r3, [r7, #28]
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	4a46      	ldr	r2, [pc, #280]	@ (801c8ac <UART_SetConfig+0x348>)
 801c794:	4293      	cmp	r3, r2
 801c796:	d000      	beq.n	801c79a <UART_SetConfig+0x236>
 801c798:	e09a      	b.n	801c8d0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801c79a:	231b      	movs	r3, #27
 801c79c:	2218      	movs	r2, #24
 801c79e:	189b      	adds	r3, r3, r2
 801c7a0:	19db      	adds	r3, r3, r7
 801c7a2:	781b      	ldrb	r3, [r3, #0]
 801c7a4:	2b08      	cmp	r3, #8
 801c7a6:	d01d      	beq.n	801c7e4 <UART_SetConfig+0x280>
 801c7a8:	dc20      	bgt.n	801c7ec <UART_SetConfig+0x288>
 801c7aa:	2b04      	cmp	r3, #4
 801c7ac:	d015      	beq.n	801c7da <UART_SetConfig+0x276>
 801c7ae:	dc1d      	bgt.n	801c7ec <UART_SetConfig+0x288>
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	d002      	beq.n	801c7ba <UART_SetConfig+0x256>
 801c7b4:	2b02      	cmp	r3, #2
 801c7b6:	d005      	beq.n	801c7c4 <UART_SetConfig+0x260>
 801c7b8:	e018      	b.n	801c7ec <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c7ba:	f7fd fe4b 	bl	801a454 <HAL_RCC_GetPCLK1Freq>
 801c7be:	0003      	movs	r3, r0
 801c7c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801c7c2:	e01c      	b.n	801c7fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c7c4:	4b3c      	ldr	r3, [pc, #240]	@ (801c8b8 <UART_SetConfig+0x354>)
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	2210      	movs	r2, #16
 801c7ca:	4013      	ands	r3, r2
 801c7cc:	d002      	beq.n	801c7d4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801c7ce:	4b3e      	ldr	r3, [pc, #248]	@ (801c8c8 <UART_SetConfig+0x364>)
 801c7d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801c7d2:	e014      	b.n	801c7fe <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801c7d4:	4b3d      	ldr	r3, [pc, #244]	@ (801c8cc <UART_SetConfig+0x368>)
 801c7d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801c7d8:	e011      	b.n	801c7fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c7da:	f7fd fd8b 	bl	801a2f4 <HAL_RCC_GetSysClockFreq>
 801c7de:	0003      	movs	r3, r0
 801c7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801c7e2:	e00c      	b.n	801c7fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c7e4:	2380      	movs	r3, #128	@ 0x80
 801c7e6:	021b      	lsls	r3, r3, #8
 801c7e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801c7ea:	e008      	b.n	801c7fe <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801c7ec:	2300      	movs	r3, #0
 801c7ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801c7f0:	231a      	movs	r3, #26
 801c7f2:	2218      	movs	r2, #24
 801c7f4:	189b      	adds	r3, r3, r2
 801c7f6:	19db      	adds	r3, r3, r7
 801c7f8:	2201      	movs	r2, #1
 801c7fa:	701a      	strb	r2, [r3, #0]
        break;
 801c7fc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801c7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c800:	2b00      	cmp	r3, #0
 801c802:	d100      	bne.n	801c806 <UART_SetConfig+0x2a2>
 801c804:	e133      	b.n	801ca6e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801c806:	69fb      	ldr	r3, [r7, #28]
 801c808:	685a      	ldr	r2, [r3, #4]
 801c80a:	0013      	movs	r3, r2
 801c80c:	005b      	lsls	r3, r3, #1
 801c80e:	189b      	adds	r3, r3, r2
 801c810:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c812:	429a      	cmp	r2, r3
 801c814:	d305      	bcc.n	801c822 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801c816:	69fb      	ldr	r3, [r7, #28]
 801c818:	685b      	ldr	r3, [r3, #4]
 801c81a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801c81c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c81e:	429a      	cmp	r2, r3
 801c820:	d906      	bls.n	801c830 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801c822:	231a      	movs	r3, #26
 801c824:	2218      	movs	r2, #24
 801c826:	189b      	adds	r3, r3, r2
 801c828:	19db      	adds	r3, r3, r7
 801c82a:	2201      	movs	r2, #1
 801c82c:	701a      	strb	r2, [r3, #0]
 801c82e:	e11e      	b.n	801ca6e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801c830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c832:	613b      	str	r3, [r7, #16]
 801c834:	2300      	movs	r3, #0
 801c836:	617b      	str	r3, [r7, #20]
 801c838:	6939      	ldr	r1, [r7, #16]
 801c83a:	697a      	ldr	r2, [r7, #20]
 801c83c:	000b      	movs	r3, r1
 801c83e:	0e1b      	lsrs	r3, r3, #24
 801c840:	0010      	movs	r0, r2
 801c842:	0205      	lsls	r5, r0, #8
 801c844:	431d      	orrs	r5, r3
 801c846:	000b      	movs	r3, r1
 801c848:	021c      	lsls	r4, r3, #8
 801c84a:	69fb      	ldr	r3, [r7, #28]
 801c84c:	685b      	ldr	r3, [r3, #4]
 801c84e:	085b      	lsrs	r3, r3, #1
 801c850:	60bb      	str	r3, [r7, #8]
 801c852:	2300      	movs	r3, #0
 801c854:	60fb      	str	r3, [r7, #12]
 801c856:	68b8      	ldr	r0, [r7, #8]
 801c858:	68f9      	ldr	r1, [r7, #12]
 801c85a:	1900      	adds	r0, r0, r4
 801c85c:	4169      	adcs	r1, r5
 801c85e:	69fb      	ldr	r3, [r7, #28]
 801c860:	685b      	ldr	r3, [r3, #4]
 801c862:	603b      	str	r3, [r7, #0]
 801c864:	2300      	movs	r3, #0
 801c866:	607b      	str	r3, [r7, #4]
 801c868:	683a      	ldr	r2, [r7, #0]
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	f7e3 fe88 	bl	8000580 <__aeabi_uldivmod>
 801c870:	0002      	movs	r2, r0
 801c872:	000b      	movs	r3, r1
 801c874:	0013      	movs	r3, r2
 801c876:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801c878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c87a:	23c0      	movs	r3, #192	@ 0xc0
 801c87c:	009b      	lsls	r3, r3, #2
 801c87e:	429a      	cmp	r2, r3
 801c880:	d309      	bcc.n	801c896 <UART_SetConfig+0x332>
 801c882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c884:	2380      	movs	r3, #128	@ 0x80
 801c886:	035b      	lsls	r3, r3, #13
 801c888:	429a      	cmp	r2, r3
 801c88a:	d204      	bcs.n	801c896 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801c88c:	69fb      	ldr	r3, [r7, #28]
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c892:	60da      	str	r2, [r3, #12]
 801c894:	e0eb      	b.n	801ca6e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801c896:	231a      	movs	r3, #26
 801c898:	2218      	movs	r2, #24
 801c89a:	189b      	adds	r3, r3, r2
 801c89c:	19db      	adds	r3, r3, r7
 801c89e:	2201      	movs	r2, #1
 801c8a0:	701a      	strb	r2, [r3, #0]
 801c8a2:	e0e4      	b.n	801ca6e <UART_SetConfig+0x50a>
 801c8a4:	efff69f3 	.word	0xefff69f3
 801c8a8:	ffffcfff 	.word	0xffffcfff
 801c8ac:	40004800 	.word	0x40004800
 801c8b0:	fffff4ff 	.word	0xfffff4ff
 801c8b4:	40013800 	.word	0x40013800
 801c8b8:	40021000 	.word	0x40021000
 801c8bc:	40004400 	.word	0x40004400
 801c8c0:	40004c00 	.word	0x40004c00
 801c8c4:	40005000 	.word	0x40005000
 801c8c8:	003d0900 	.word	0x003d0900
 801c8cc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c8d0:	69fb      	ldr	r3, [r7, #28]
 801c8d2:	69da      	ldr	r2, [r3, #28]
 801c8d4:	2380      	movs	r3, #128	@ 0x80
 801c8d6:	021b      	lsls	r3, r3, #8
 801c8d8:	429a      	cmp	r2, r3
 801c8da:	d000      	beq.n	801c8de <UART_SetConfig+0x37a>
 801c8dc:	e070      	b.n	801c9c0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801c8de:	231b      	movs	r3, #27
 801c8e0:	2218      	movs	r2, #24
 801c8e2:	189b      	adds	r3, r3, r2
 801c8e4:	19db      	adds	r3, r3, r7
 801c8e6:	781b      	ldrb	r3, [r3, #0]
 801c8e8:	2b08      	cmp	r3, #8
 801c8ea:	d822      	bhi.n	801c932 <UART_SetConfig+0x3ce>
 801c8ec:	009a      	lsls	r2, r3, #2
 801c8ee:	4b67      	ldr	r3, [pc, #412]	@ (801ca8c <UART_SetConfig+0x528>)
 801c8f0:	18d3      	adds	r3, r2, r3
 801c8f2:	681b      	ldr	r3, [r3, #0]
 801c8f4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c8f6:	f7fd fdad 	bl	801a454 <HAL_RCC_GetPCLK1Freq>
 801c8fa:	0003      	movs	r3, r0
 801c8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801c8fe:	e021      	b.n	801c944 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c900:	f7fd fdbe 	bl	801a480 <HAL_RCC_GetPCLK2Freq>
 801c904:	0003      	movs	r3, r0
 801c906:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801c908:	e01c      	b.n	801c944 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c90a:	4b61      	ldr	r3, [pc, #388]	@ (801ca90 <UART_SetConfig+0x52c>)
 801c90c:	681b      	ldr	r3, [r3, #0]
 801c90e:	2210      	movs	r2, #16
 801c910:	4013      	ands	r3, r2
 801c912:	d002      	beq.n	801c91a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801c914:	4b5f      	ldr	r3, [pc, #380]	@ (801ca94 <UART_SetConfig+0x530>)
 801c916:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801c918:	e014      	b.n	801c944 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801c91a:	4b5f      	ldr	r3, [pc, #380]	@ (801ca98 <UART_SetConfig+0x534>)
 801c91c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801c91e:	e011      	b.n	801c944 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c920:	f7fd fce8 	bl	801a2f4 <HAL_RCC_GetSysClockFreq>
 801c924:	0003      	movs	r3, r0
 801c926:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801c928:	e00c      	b.n	801c944 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c92a:	2380      	movs	r3, #128	@ 0x80
 801c92c:	021b      	lsls	r3, r3, #8
 801c92e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801c930:	e008      	b.n	801c944 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801c932:	2300      	movs	r3, #0
 801c934:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801c936:	231a      	movs	r3, #26
 801c938:	2218      	movs	r2, #24
 801c93a:	189b      	adds	r3, r3, r2
 801c93c:	19db      	adds	r3, r3, r7
 801c93e:	2201      	movs	r2, #1
 801c940:	701a      	strb	r2, [r3, #0]
        break;
 801c942:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801c944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c946:	2b00      	cmp	r3, #0
 801c948:	d100      	bne.n	801c94c <UART_SetConfig+0x3e8>
 801c94a:	e090      	b.n	801ca6e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801c94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c94e:	005a      	lsls	r2, r3, #1
 801c950:	69fb      	ldr	r3, [r7, #28]
 801c952:	685b      	ldr	r3, [r3, #4]
 801c954:	085b      	lsrs	r3, r3, #1
 801c956:	18d2      	adds	r2, r2, r3
 801c958:	69fb      	ldr	r3, [r7, #28]
 801c95a:	685b      	ldr	r3, [r3, #4]
 801c95c:	0019      	movs	r1, r3
 801c95e:	0010      	movs	r0, r2
 801c960:	f7e3 fc20 	bl	80001a4 <__udivsi3>
 801c964:	0003      	movs	r3, r0
 801c966:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801c968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c96a:	2b0f      	cmp	r3, #15
 801c96c:	d921      	bls.n	801c9b2 <UART_SetConfig+0x44e>
 801c96e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c970:	2380      	movs	r3, #128	@ 0x80
 801c972:	025b      	lsls	r3, r3, #9
 801c974:	429a      	cmp	r2, r3
 801c976:	d21c      	bcs.n	801c9b2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801c978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c97a:	b29a      	uxth	r2, r3
 801c97c:	200e      	movs	r0, #14
 801c97e:	2418      	movs	r4, #24
 801c980:	1903      	adds	r3, r0, r4
 801c982:	19db      	adds	r3, r3, r7
 801c984:	210f      	movs	r1, #15
 801c986:	438a      	bics	r2, r1
 801c988:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801c98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c98c:	085b      	lsrs	r3, r3, #1
 801c98e:	b29b      	uxth	r3, r3
 801c990:	2207      	movs	r2, #7
 801c992:	4013      	ands	r3, r2
 801c994:	b299      	uxth	r1, r3
 801c996:	1903      	adds	r3, r0, r4
 801c998:	19db      	adds	r3, r3, r7
 801c99a:	1902      	adds	r2, r0, r4
 801c99c:	19d2      	adds	r2, r2, r7
 801c99e:	8812      	ldrh	r2, [r2, #0]
 801c9a0:	430a      	orrs	r2, r1
 801c9a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801c9a4:	69fb      	ldr	r3, [r7, #28]
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	1902      	adds	r2, r0, r4
 801c9aa:	19d2      	adds	r2, r2, r7
 801c9ac:	8812      	ldrh	r2, [r2, #0]
 801c9ae:	60da      	str	r2, [r3, #12]
 801c9b0:	e05d      	b.n	801ca6e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801c9b2:	231a      	movs	r3, #26
 801c9b4:	2218      	movs	r2, #24
 801c9b6:	189b      	adds	r3, r3, r2
 801c9b8:	19db      	adds	r3, r3, r7
 801c9ba:	2201      	movs	r2, #1
 801c9bc:	701a      	strb	r2, [r3, #0]
 801c9be:	e056      	b.n	801ca6e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801c9c0:	231b      	movs	r3, #27
 801c9c2:	2218      	movs	r2, #24
 801c9c4:	189b      	adds	r3, r3, r2
 801c9c6:	19db      	adds	r3, r3, r7
 801c9c8:	781b      	ldrb	r3, [r3, #0]
 801c9ca:	2b08      	cmp	r3, #8
 801c9cc:	d822      	bhi.n	801ca14 <UART_SetConfig+0x4b0>
 801c9ce:	009a      	lsls	r2, r3, #2
 801c9d0:	4b32      	ldr	r3, [pc, #200]	@ (801ca9c <UART_SetConfig+0x538>)
 801c9d2:	18d3      	adds	r3, r2, r3
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c9d8:	f7fd fd3c 	bl	801a454 <HAL_RCC_GetPCLK1Freq>
 801c9dc:	0003      	movs	r3, r0
 801c9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801c9e0:	e021      	b.n	801ca26 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c9e2:	f7fd fd4d 	bl	801a480 <HAL_RCC_GetPCLK2Freq>
 801c9e6:	0003      	movs	r3, r0
 801c9e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801c9ea:	e01c      	b.n	801ca26 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c9ec:	4b28      	ldr	r3, [pc, #160]	@ (801ca90 <UART_SetConfig+0x52c>)
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	2210      	movs	r2, #16
 801c9f2:	4013      	ands	r3, r2
 801c9f4:	d002      	beq.n	801c9fc <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801c9f6:	4b27      	ldr	r3, [pc, #156]	@ (801ca94 <UART_SetConfig+0x530>)
 801c9f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801c9fa:	e014      	b.n	801ca26 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801c9fc:	4b26      	ldr	r3, [pc, #152]	@ (801ca98 <UART_SetConfig+0x534>)
 801c9fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801ca00:	e011      	b.n	801ca26 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801ca02:	f7fd fc77 	bl	801a2f4 <HAL_RCC_GetSysClockFreq>
 801ca06:	0003      	movs	r3, r0
 801ca08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801ca0a:	e00c      	b.n	801ca26 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ca0c:	2380      	movs	r3, #128	@ 0x80
 801ca0e:	021b      	lsls	r3, r3, #8
 801ca10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801ca12:	e008      	b.n	801ca26 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801ca14:	2300      	movs	r3, #0
 801ca16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801ca18:	231a      	movs	r3, #26
 801ca1a:	2218      	movs	r2, #24
 801ca1c:	189b      	adds	r3, r3, r2
 801ca1e:	19db      	adds	r3, r3, r7
 801ca20:	2201      	movs	r2, #1
 801ca22:	701a      	strb	r2, [r3, #0]
        break;
 801ca24:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801ca26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d020      	beq.n	801ca6e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801ca2c:	69fb      	ldr	r3, [r7, #28]
 801ca2e:	685b      	ldr	r3, [r3, #4]
 801ca30:	085a      	lsrs	r2, r3, #1
 801ca32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca34:	18d2      	adds	r2, r2, r3
 801ca36:	69fb      	ldr	r3, [r7, #28]
 801ca38:	685b      	ldr	r3, [r3, #4]
 801ca3a:	0019      	movs	r1, r3
 801ca3c:	0010      	movs	r0, r2
 801ca3e:	f7e3 fbb1 	bl	80001a4 <__udivsi3>
 801ca42:	0003      	movs	r3, r0
 801ca44:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ca46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca48:	2b0f      	cmp	r3, #15
 801ca4a:	d90a      	bls.n	801ca62 <UART_SetConfig+0x4fe>
 801ca4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ca4e:	2380      	movs	r3, #128	@ 0x80
 801ca50:	025b      	lsls	r3, r3, #9
 801ca52:	429a      	cmp	r2, r3
 801ca54:	d205      	bcs.n	801ca62 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801ca56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca58:	b29a      	uxth	r2, r3
 801ca5a:	69fb      	ldr	r3, [r7, #28]
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	60da      	str	r2, [r3, #12]
 801ca60:	e005      	b.n	801ca6e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801ca62:	231a      	movs	r3, #26
 801ca64:	2218      	movs	r2, #24
 801ca66:	189b      	adds	r3, r3, r2
 801ca68:	19db      	adds	r3, r3, r7
 801ca6a:	2201      	movs	r2, #1
 801ca6c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801ca6e:	69fb      	ldr	r3, [r7, #28]
 801ca70:	2200      	movs	r2, #0
 801ca72:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801ca74:	69fb      	ldr	r3, [r7, #28]
 801ca76:	2200      	movs	r2, #0
 801ca78:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801ca7a:	231a      	movs	r3, #26
 801ca7c:	2218      	movs	r2, #24
 801ca7e:	189b      	adds	r3, r3, r2
 801ca80:	19db      	adds	r3, r3, r7
 801ca82:	781b      	ldrb	r3, [r3, #0]
}
 801ca84:	0018      	movs	r0, r3
 801ca86:	46bd      	mov	sp, r7
 801ca88:	b00e      	add	sp, #56	@ 0x38
 801ca8a:	bdb0      	pop	{r4, r5, r7, pc}
 801ca8c:	0802ccb0 	.word	0x0802ccb0
 801ca90:	40021000 	.word	0x40021000
 801ca94:	003d0900 	.word	0x003d0900
 801ca98:	00f42400 	.word	0x00f42400
 801ca9c:	0802ccd4 	.word	0x0802ccd4

0801caa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801caa0:	b580      	push	{r7, lr}
 801caa2:	b082      	sub	sp, #8
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801caac:	2201      	movs	r2, #1
 801caae:	4013      	ands	r3, r2
 801cab0:	d00b      	beq.n	801caca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	681b      	ldr	r3, [r3, #0]
 801cab6:	685b      	ldr	r3, [r3, #4]
 801cab8:	4a4a      	ldr	r2, [pc, #296]	@ (801cbe4 <UART_AdvFeatureConfig+0x144>)
 801caba:	4013      	ands	r3, r2
 801cabc:	0019      	movs	r1, r3
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	430a      	orrs	r2, r1
 801cac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cace:	2202      	movs	r2, #2
 801cad0:	4013      	ands	r3, r2
 801cad2:	d00b      	beq.n	801caec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	685b      	ldr	r3, [r3, #4]
 801cada:	4a43      	ldr	r2, [pc, #268]	@ (801cbe8 <UART_AdvFeatureConfig+0x148>)
 801cadc:	4013      	ands	r3, r2
 801cade:	0019      	movs	r1, r3
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	681b      	ldr	r3, [r3, #0]
 801cae8:	430a      	orrs	r2, r1
 801caea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801caf0:	2204      	movs	r2, #4
 801caf2:	4013      	ands	r3, r2
 801caf4:	d00b      	beq.n	801cb0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	681b      	ldr	r3, [r3, #0]
 801cafa:	685b      	ldr	r3, [r3, #4]
 801cafc:	4a3b      	ldr	r2, [pc, #236]	@ (801cbec <UART_AdvFeatureConfig+0x14c>)
 801cafe:	4013      	ands	r3, r2
 801cb00:	0019      	movs	r1, r3
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	681b      	ldr	r3, [r3, #0]
 801cb0a:	430a      	orrs	r2, r1
 801cb0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cb12:	2208      	movs	r2, #8
 801cb14:	4013      	ands	r3, r2
 801cb16:	d00b      	beq.n	801cb30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	681b      	ldr	r3, [r3, #0]
 801cb1c:	685b      	ldr	r3, [r3, #4]
 801cb1e:	4a34      	ldr	r2, [pc, #208]	@ (801cbf0 <UART_AdvFeatureConfig+0x150>)
 801cb20:	4013      	ands	r3, r2
 801cb22:	0019      	movs	r1, r3
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	681b      	ldr	r3, [r3, #0]
 801cb2c:	430a      	orrs	r2, r1
 801cb2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cb34:	2210      	movs	r2, #16
 801cb36:	4013      	ands	r3, r2
 801cb38:	d00b      	beq.n	801cb52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	681b      	ldr	r3, [r3, #0]
 801cb3e:	689b      	ldr	r3, [r3, #8]
 801cb40:	4a2c      	ldr	r2, [pc, #176]	@ (801cbf4 <UART_AdvFeatureConfig+0x154>)
 801cb42:	4013      	ands	r3, r2
 801cb44:	0019      	movs	r1, r3
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	681b      	ldr	r3, [r3, #0]
 801cb4e:	430a      	orrs	r2, r1
 801cb50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cb56:	2220      	movs	r2, #32
 801cb58:	4013      	ands	r3, r2
 801cb5a:	d00b      	beq.n	801cb74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	681b      	ldr	r3, [r3, #0]
 801cb60:	689b      	ldr	r3, [r3, #8]
 801cb62:	4a25      	ldr	r2, [pc, #148]	@ (801cbf8 <UART_AdvFeatureConfig+0x158>)
 801cb64:	4013      	ands	r3, r2
 801cb66:	0019      	movs	r1, r3
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	681b      	ldr	r3, [r3, #0]
 801cb70:	430a      	orrs	r2, r1
 801cb72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cb78:	2240      	movs	r2, #64	@ 0x40
 801cb7a:	4013      	ands	r3, r2
 801cb7c:	d01d      	beq.n	801cbba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	685b      	ldr	r3, [r3, #4]
 801cb84:	4a1d      	ldr	r2, [pc, #116]	@ (801cbfc <UART_AdvFeatureConfig+0x15c>)
 801cb86:	4013      	ands	r3, r2
 801cb88:	0019      	movs	r1, r3
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	430a      	orrs	r2, r1
 801cb94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cb9a:	2380      	movs	r3, #128	@ 0x80
 801cb9c:	035b      	lsls	r3, r3, #13
 801cb9e:	429a      	cmp	r2, r3
 801cba0:	d10b      	bne.n	801cbba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	685b      	ldr	r3, [r3, #4]
 801cba8:	4a15      	ldr	r2, [pc, #84]	@ (801cc00 <UART_AdvFeatureConfig+0x160>)
 801cbaa:	4013      	ands	r3, r2
 801cbac:	0019      	movs	r1, r3
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	430a      	orrs	r2, r1
 801cbb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cbbe:	2280      	movs	r2, #128	@ 0x80
 801cbc0:	4013      	ands	r3, r2
 801cbc2:	d00b      	beq.n	801cbdc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	685b      	ldr	r3, [r3, #4]
 801cbca:	4a0e      	ldr	r2, [pc, #56]	@ (801cc04 <UART_AdvFeatureConfig+0x164>)
 801cbcc:	4013      	ands	r3, r2
 801cbce:	0019      	movs	r1, r3
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	681b      	ldr	r3, [r3, #0]
 801cbd8:	430a      	orrs	r2, r1
 801cbda:	605a      	str	r2, [r3, #4]
  }
}
 801cbdc:	46c0      	nop			@ (mov r8, r8)
 801cbde:	46bd      	mov	sp, r7
 801cbe0:	b002      	add	sp, #8
 801cbe2:	bd80      	pop	{r7, pc}
 801cbe4:	fffdffff 	.word	0xfffdffff
 801cbe8:	fffeffff 	.word	0xfffeffff
 801cbec:	fffbffff 	.word	0xfffbffff
 801cbf0:	ffff7fff 	.word	0xffff7fff
 801cbf4:	ffffefff 	.word	0xffffefff
 801cbf8:	ffffdfff 	.word	0xffffdfff
 801cbfc:	ffefffff 	.word	0xffefffff
 801cc00:	ff9fffff 	.word	0xff9fffff
 801cc04:	fff7ffff 	.word	0xfff7ffff

0801cc08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	b092      	sub	sp, #72	@ 0x48
 801cc0c:	af02      	add	r7, sp, #8
 801cc0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	2284      	movs	r2, #132	@ 0x84
 801cc14:	2100      	movs	r1, #0
 801cc16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801cc18:	f7f6 fa88 	bl	801312c <HAL_GetTick>
 801cc1c:	0003      	movs	r3, r0
 801cc1e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	681b      	ldr	r3, [r3, #0]
 801cc26:	2208      	movs	r2, #8
 801cc28:	4013      	ands	r3, r2
 801cc2a:	2b08      	cmp	r3, #8
 801cc2c:	d12c      	bne.n	801cc88 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801cc2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cc30:	2280      	movs	r2, #128	@ 0x80
 801cc32:	0391      	lsls	r1, r2, #14
 801cc34:	6878      	ldr	r0, [r7, #4]
 801cc36:	4a46      	ldr	r2, [pc, #280]	@ (801cd50 <UART_CheckIdleState+0x148>)
 801cc38:	9200      	str	r2, [sp, #0]
 801cc3a:	2200      	movs	r2, #0
 801cc3c:	f000 f88c 	bl	801cd58 <UART_WaitOnFlagUntilTimeout>
 801cc40:	1e03      	subs	r3, r0, #0
 801cc42:	d021      	beq.n	801cc88 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cc44:	f3ef 8310 	mrs	r3, PRIMASK
 801cc48:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801cc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801cc4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801cc4e:	2301      	movs	r3, #1
 801cc50:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc54:	f383 8810 	msr	PRIMASK, r3
}
 801cc58:	46c0      	nop			@ (mov r8, r8)
 801cc5a:	687b      	ldr	r3, [r7, #4]
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	681a      	ldr	r2, [r3, #0]
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	681b      	ldr	r3, [r3, #0]
 801cc64:	2180      	movs	r1, #128	@ 0x80
 801cc66:	438a      	bics	r2, r1
 801cc68:	601a      	str	r2, [r3, #0]
 801cc6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc70:	f383 8810 	msr	PRIMASK, r3
}
 801cc74:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	2220      	movs	r2, #32
 801cc7a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	2278      	movs	r2, #120	@ 0x78
 801cc80:	2100      	movs	r1, #0
 801cc82:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801cc84:	2303      	movs	r3, #3
 801cc86:	e05f      	b.n	801cd48 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	681b      	ldr	r3, [r3, #0]
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	2204      	movs	r2, #4
 801cc90:	4013      	ands	r3, r2
 801cc92:	2b04      	cmp	r3, #4
 801cc94:	d146      	bne.n	801cd24 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801cc96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cc98:	2280      	movs	r2, #128	@ 0x80
 801cc9a:	03d1      	lsls	r1, r2, #15
 801cc9c:	6878      	ldr	r0, [r7, #4]
 801cc9e:	4a2c      	ldr	r2, [pc, #176]	@ (801cd50 <UART_CheckIdleState+0x148>)
 801cca0:	9200      	str	r2, [sp, #0]
 801cca2:	2200      	movs	r2, #0
 801cca4:	f000 f858 	bl	801cd58 <UART_WaitOnFlagUntilTimeout>
 801cca8:	1e03      	subs	r3, r0, #0
 801ccaa:	d03b      	beq.n	801cd24 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ccac:	f3ef 8310 	mrs	r3, PRIMASK
 801ccb0:	60fb      	str	r3, [r7, #12]
  return(result);
 801ccb2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ccb4:	637b      	str	r3, [r7, #52]	@ 0x34
 801ccb6:	2301      	movs	r3, #1
 801ccb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccba:	693b      	ldr	r3, [r7, #16]
 801ccbc:	f383 8810 	msr	PRIMASK, r3
}
 801ccc0:	46c0      	nop			@ (mov r8, r8)
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	681a      	ldr	r2, [r3, #0]
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	4921      	ldr	r1, [pc, #132]	@ (801cd54 <UART_CheckIdleState+0x14c>)
 801ccce:	400a      	ands	r2, r1
 801ccd0:	601a      	str	r2, [r3, #0]
 801ccd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ccd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccd6:	697b      	ldr	r3, [r7, #20]
 801ccd8:	f383 8810 	msr	PRIMASK, r3
}
 801ccdc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ccde:	f3ef 8310 	mrs	r3, PRIMASK
 801cce2:	61bb      	str	r3, [r7, #24]
  return(result);
 801cce4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801cce6:	633b      	str	r3, [r7, #48]	@ 0x30
 801cce8:	2301      	movs	r3, #1
 801ccea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccec:	69fb      	ldr	r3, [r7, #28]
 801ccee:	f383 8810 	msr	PRIMASK, r3
}
 801ccf2:	46c0      	nop			@ (mov r8, r8)
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	681b      	ldr	r3, [r3, #0]
 801ccf8:	689a      	ldr	r2, [r3, #8]
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	681b      	ldr	r3, [r3, #0]
 801ccfe:	2101      	movs	r1, #1
 801cd00:	438a      	bics	r2, r1
 801cd02:	609a      	str	r2, [r3, #8]
 801cd04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd08:	6a3b      	ldr	r3, [r7, #32]
 801cd0a:	f383 8810 	msr	PRIMASK, r3
}
 801cd0e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	2280      	movs	r2, #128	@ 0x80
 801cd14:	2120      	movs	r1, #32
 801cd16:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	2278      	movs	r2, #120	@ 0x78
 801cd1c:	2100      	movs	r1, #0
 801cd1e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801cd20:	2303      	movs	r3, #3
 801cd22:	e011      	b.n	801cd48 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	2220      	movs	r2, #32
 801cd28:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	2280      	movs	r2, #128	@ 0x80
 801cd2e:	2120      	movs	r1, #32
 801cd30:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	2200      	movs	r2, #0
 801cd36:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	2200      	movs	r2, #0
 801cd3c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	2278      	movs	r2, #120	@ 0x78
 801cd42:	2100      	movs	r1, #0
 801cd44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cd46:	2300      	movs	r3, #0
}
 801cd48:	0018      	movs	r0, r3
 801cd4a:	46bd      	mov	sp, r7
 801cd4c:	b010      	add	sp, #64	@ 0x40
 801cd4e:	bd80      	pop	{r7, pc}
 801cd50:	01ffffff 	.word	0x01ffffff
 801cd54:	fffffedf 	.word	0xfffffedf

0801cd58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801cd58:	b580      	push	{r7, lr}
 801cd5a:	b084      	sub	sp, #16
 801cd5c:	af00      	add	r7, sp, #0
 801cd5e:	60f8      	str	r0, [r7, #12]
 801cd60:	60b9      	str	r1, [r7, #8]
 801cd62:	603b      	str	r3, [r7, #0]
 801cd64:	1dfb      	adds	r3, r7, #7
 801cd66:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801cd68:	e04b      	b.n	801ce02 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801cd6a:	69bb      	ldr	r3, [r7, #24]
 801cd6c:	3301      	adds	r3, #1
 801cd6e:	d048      	beq.n	801ce02 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801cd70:	f7f6 f9dc 	bl	801312c <HAL_GetTick>
 801cd74:	0002      	movs	r2, r0
 801cd76:	683b      	ldr	r3, [r7, #0]
 801cd78:	1ad3      	subs	r3, r2, r3
 801cd7a:	69ba      	ldr	r2, [r7, #24]
 801cd7c:	429a      	cmp	r2, r3
 801cd7e:	d302      	bcc.n	801cd86 <UART_WaitOnFlagUntilTimeout+0x2e>
 801cd80:	69bb      	ldr	r3, [r7, #24]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d101      	bne.n	801cd8a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801cd86:	2303      	movs	r3, #3
 801cd88:	e04b      	b.n	801ce22 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801cd8a:	68fb      	ldr	r3, [r7, #12]
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	681b      	ldr	r3, [r3, #0]
 801cd90:	2204      	movs	r2, #4
 801cd92:	4013      	ands	r3, r2
 801cd94:	d035      	beq.n	801ce02 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801cd96:	68fb      	ldr	r3, [r7, #12]
 801cd98:	681b      	ldr	r3, [r3, #0]
 801cd9a:	69db      	ldr	r3, [r3, #28]
 801cd9c:	2208      	movs	r2, #8
 801cd9e:	4013      	ands	r3, r2
 801cda0:	2b08      	cmp	r3, #8
 801cda2:	d111      	bne.n	801cdc8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801cda4:	68fb      	ldr	r3, [r7, #12]
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	2208      	movs	r2, #8
 801cdaa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801cdac:	68fb      	ldr	r3, [r7, #12]
 801cdae:	0018      	movs	r0, r3
 801cdb0:	f000 f9ca 	bl	801d148 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	2284      	movs	r2, #132	@ 0x84
 801cdb8:	2108      	movs	r1, #8
 801cdba:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801cdbc:	68fb      	ldr	r3, [r7, #12]
 801cdbe:	2278      	movs	r2, #120	@ 0x78
 801cdc0:	2100      	movs	r1, #0
 801cdc2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801cdc4:	2301      	movs	r3, #1
 801cdc6:	e02c      	b.n	801ce22 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801cdc8:	68fb      	ldr	r3, [r7, #12]
 801cdca:	681b      	ldr	r3, [r3, #0]
 801cdcc:	69da      	ldr	r2, [r3, #28]
 801cdce:	2380      	movs	r3, #128	@ 0x80
 801cdd0:	011b      	lsls	r3, r3, #4
 801cdd2:	401a      	ands	r2, r3
 801cdd4:	2380      	movs	r3, #128	@ 0x80
 801cdd6:	011b      	lsls	r3, r3, #4
 801cdd8:	429a      	cmp	r2, r3
 801cdda:	d112      	bne.n	801ce02 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801cddc:	68fb      	ldr	r3, [r7, #12]
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	2280      	movs	r2, #128	@ 0x80
 801cde2:	0112      	lsls	r2, r2, #4
 801cde4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801cde6:	68fb      	ldr	r3, [r7, #12]
 801cde8:	0018      	movs	r0, r3
 801cdea:	f000 f9ad 	bl	801d148 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801cdee:	68fb      	ldr	r3, [r7, #12]
 801cdf0:	2284      	movs	r2, #132	@ 0x84
 801cdf2:	2120      	movs	r1, #32
 801cdf4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801cdf6:	68fb      	ldr	r3, [r7, #12]
 801cdf8:	2278      	movs	r2, #120	@ 0x78
 801cdfa:	2100      	movs	r1, #0
 801cdfc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801cdfe:	2303      	movs	r3, #3
 801ce00:	e00f      	b.n	801ce22 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ce02:	68fb      	ldr	r3, [r7, #12]
 801ce04:	681b      	ldr	r3, [r3, #0]
 801ce06:	69db      	ldr	r3, [r3, #28]
 801ce08:	68ba      	ldr	r2, [r7, #8]
 801ce0a:	4013      	ands	r3, r2
 801ce0c:	68ba      	ldr	r2, [r7, #8]
 801ce0e:	1ad3      	subs	r3, r2, r3
 801ce10:	425a      	negs	r2, r3
 801ce12:	4153      	adcs	r3, r2
 801ce14:	b2db      	uxtb	r3, r3
 801ce16:	001a      	movs	r2, r3
 801ce18:	1dfb      	adds	r3, r7, #7
 801ce1a:	781b      	ldrb	r3, [r3, #0]
 801ce1c:	429a      	cmp	r2, r3
 801ce1e:	d0a4      	beq.n	801cd6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801ce20:	2300      	movs	r3, #0
}
 801ce22:	0018      	movs	r0, r3
 801ce24:	46bd      	mov	sp, r7
 801ce26:	b004      	add	sp, #16
 801ce28:	bd80      	pop	{r7, pc}
	...

0801ce2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ce2c:	b580      	push	{r7, lr}
 801ce2e:	b090      	sub	sp, #64	@ 0x40
 801ce30:	af00      	add	r7, sp, #0
 801ce32:	60f8      	str	r0, [r7, #12]
 801ce34:	60b9      	str	r1, [r7, #8]
 801ce36:	1dbb      	adds	r3, r7, #6
 801ce38:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801ce3a:	68fb      	ldr	r3, [r7, #12]
 801ce3c:	68ba      	ldr	r2, [r7, #8]
 801ce3e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801ce40:	68fb      	ldr	r3, [r7, #12]
 801ce42:	1dba      	adds	r2, r7, #6
 801ce44:	2158      	movs	r1, #88	@ 0x58
 801ce46:	8812      	ldrh	r2, [r2, #0]
 801ce48:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801ce4a:	68fb      	ldr	r3, [r7, #12]
 801ce4c:	1dba      	adds	r2, r7, #6
 801ce4e:	215a      	movs	r1, #90	@ 0x5a
 801ce50:	8812      	ldrh	r2, [r2, #0]
 801ce52:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801ce54:	68fb      	ldr	r3, [r7, #12]
 801ce56:	2200      	movs	r2, #0
 801ce58:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801ce5a:	68fb      	ldr	r3, [r7, #12]
 801ce5c:	689a      	ldr	r2, [r3, #8]
 801ce5e:	2380      	movs	r3, #128	@ 0x80
 801ce60:	015b      	lsls	r3, r3, #5
 801ce62:	429a      	cmp	r2, r3
 801ce64:	d10d      	bne.n	801ce82 <UART_Start_Receive_IT+0x56>
 801ce66:	68fb      	ldr	r3, [r7, #12]
 801ce68:	691b      	ldr	r3, [r3, #16]
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d104      	bne.n	801ce78 <UART_Start_Receive_IT+0x4c>
 801ce6e:	68fb      	ldr	r3, [r7, #12]
 801ce70:	225c      	movs	r2, #92	@ 0x5c
 801ce72:	4950      	ldr	r1, [pc, #320]	@ (801cfb4 <UART_Start_Receive_IT+0x188>)
 801ce74:	5299      	strh	r1, [r3, r2]
 801ce76:	e02e      	b.n	801ced6 <UART_Start_Receive_IT+0xaa>
 801ce78:	68fb      	ldr	r3, [r7, #12]
 801ce7a:	225c      	movs	r2, #92	@ 0x5c
 801ce7c:	21ff      	movs	r1, #255	@ 0xff
 801ce7e:	5299      	strh	r1, [r3, r2]
 801ce80:	e029      	b.n	801ced6 <UART_Start_Receive_IT+0xaa>
 801ce82:	68fb      	ldr	r3, [r7, #12]
 801ce84:	689b      	ldr	r3, [r3, #8]
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d10d      	bne.n	801cea6 <UART_Start_Receive_IT+0x7a>
 801ce8a:	68fb      	ldr	r3, [r7, #12]
 801ce8c:	691b      	ldr	r3, [r3, #16]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d104      	bne.n	801ce9c <UART_Start_Receive_IT+0x70>
 801ce92:	68fb      	ldr	r3, [r7, #12]
 801ce94:	225c      	movs	r2, #92	@ 0x5c
 801ce96:	21ff      	movs	r1, #255	@ 0xff
 801ce98:	5299      	strh	r1, [r3, r2]
 801ce9a:	e01c      	b.n	801ced6 <UART_Start_Receive_IT+0xaa>
 801ce9c:	68fb      	ldr	r3, [r7, #12]
 801ce9e:	225c      	movs	r2, #92	@ 0x5c
 801cea0:	217f      	movs	r1, #127	@ 0x7f
 801cea2:	5299      	strh	r1, [r3, r2]
 801cea4:	e017      	b.n	801ced6 <UART_Start_Receive_IT+0xaa>
 801cea6:	68fb      	ldr	r3, [r7, #12]
 801cea8:	689a      	ldr	r2, [r3, #8]
 801ceaa:	2380      	movs	r3, #128	@ 0x80
 801ceac:	055b      	lsls	r3, r3, #21
 801ceae:	429a      	cmp	r2, r3
 801ceb0:	d10d      	bne.n	801cece <UART_Start_Receive_IT+0xa2>
 801ceb2:	68fb      	ldr	r3, [r7, #12]
 801ceb4:	691b      	ldr	r3, [r3, #16]
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	d104      	bne.n	801cec4 <UART_Start_Receive_IT+0x98>
 801ceba:	68fb      	ldr	r3, [r7, #12]
 801cebc:	225c      	movs	r2, #92	@ 0x5c
 801cebe:	217f      	movs	r1, #127	@ 0x7f
 801cec0:	5299      	strh	r1, [r3, r2]
 801cec2:	e008      	b.n	801ced6 <UART_Start_Receive_IT+0xaa>
 801cec4:	68fb      	ldr	r3, [r7, #12]
 801cec6:	225c      	movs	r2, #92	@ 0x5c
 801cec8:	213f      	movs	r1, #63	@ 0x3f
 801ceca:	5299      	strh	r1, [r3, r2]
 801cecc:	e003      	b.n	801ced6 <UART_Start_Receive_IT+0xaa>
 801cece:	68fb      	ldr	r3, [r7, #12]
 801ced0:	225c      	movs	r2, #92	@ 0x5c
 801ced2:	2100      	movs	r1, #0
 801ced4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ced6:	68fb      	ldr	r3, [r7, #12]
 801ced8:	2284      	movs	r2, #132	@ 0x84
 801ceda:	2100      	movs	r1, #0
 801cedc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	2280      	movs	r2, #128	@ 0x80
 801cee2:	2122      	movs	r1, #34	@ 0x22
 801cee4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cee6:	f3ef 8310 	mrs	r3, PRIMASK
 801ceea:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801ceec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ceee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cef0:	2301      	movs	r3, #1
 801cef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cef6:	f383 8810 	msr	PRIMASK, r3
}
 801cefa:	46c0      	nop			@ (mov r8, r8)
 801cefc:	68fb      	ldr	r3, [r7, #12]
 801cefe:	681b      	ldr	r3, [r3, #0]
 801cf00:	689a      	ldr	r2, [r3, #8]
 801cf02:	68fb      	ldr	r3, [r7, #12]
 801cf04:	681b      	ldr	r3, [r3, #0]
 801cf06:	2101      	movs	r1, #1
 801cf08:	430a      	orrs	r2, r1
 801cf0a:	609a      	str	r2, [r3, #8]
 801cf0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cf0e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf12:	f383 8810 	msr	PRIMASK, r3
}
 801cf16:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801cf18:	68fb      	ldr	r3, [r7, #12]
 801cf1a:	689a      	ldr	r2, [r3, #8]
 801cf1c:	2380      	movs	r3, #128	@ 0x80
 801cf1e:	015b      	lsls	r3, r3, #5
 801cf20:	429a      	cmp	r2, r3
 801cf22:	d107      	bne.n	801cf34 <UART_Start_Receive_IT+0x108>
 801cf24:	68fb      	ldr	r3, [r7, #12]
 801cf26:	691b      	ldr	r3, [r3, #16]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d103      	bne.n	801cf34 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	4a22      	ldr	r2, [pc, #136]	@ (801cfb8 <UART_Start_Receive_IT+0x18c>)
 801cf30:	669a      	str	r2, [r3, #104]	@ 0x68
 801cf32:	e002      	b.n	801cf3a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801cf34:	68fb      	ldr	r3, [r7, #12]
 801cf36:	4a21      	ldr	r2, [pc, #132]	@ (801cfbc <UART_Start_Receive_IT+0x190>)
 801cf38:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801cf3a:	68fb      	ldr	r3, [r7, #12]
 801cf3c:	691b      	ldr	r3, [r3, #16]
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	d019      	beq.n	801cf76 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf42:	f3ef 8310 	mrs	r3, PRIMASK
 801cf46:	61fb      	str	r3, [r7, #28]
  return(result);
 801cf48:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801cf4a:	637b      	str	r3, [r7, #52]	@ 0x34
 801cf4c:	2301      	movs	r3, #1
 801cf4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf50:	6a3b      	ldr	r3, [r7, #32]
 801cf52:	f383 8810 	msr	PRIMASK, r3
}
 801cf56:	46c0      	nop			@ (mov r8, r8)
 801cf58:	68fb      	ldr	r3, [r7, #12]
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	681a      	ldr	r2, [r3, #0]
 801cf5e:	68fb      	ldr	r3, [r7, #12]
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	2190      	movs	r1, #144	@ 0x90
 801cf64:	0049      	lsls	r1, r1, #1
 801cf66:	430a      	orrs	r2, r1
 801cf68:	601a      	str	r2, [r3, #0]
 801cf6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf6c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf70:	f383 8810 	msr	PRIMASK, r3
}
 801cf74:	e018      	b.n	801cfa8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf76:	f3ef 8310 	mrs	r3, PRIMASK
 801cf7a:	613b      	str	r3, [r7, #16]
  return(result);
 801cf7c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801cf7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801cf80:	2301      	movs	r3, #1
 801cf82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf84:	697b      	ldr	r3, [r7, #20]
 801cf86:	f383 8810 	msr	PRIMASK, r3
}
 801cf8a:	46c0      	nop			@ (mov r8, r8)
 801cf8c:	68fb      	ldr	r3, [r7, #12]
 801cf8e:	681b      	ldr	r3, [r3, #0]
 801cf90:	681a      	ldr	r2, [r3, #0]
 801cf92:	68fb      	ldr	r3, [r7, #12]
 801cf94:	681b      	ldr	r3, [r3, #0]
 801cf96:	2120      	movs	r1, #32
 801cf98:	430a      	orrs	r2, r1
 801cf9a:	601a      	str	r2, [r3, #0]
 801cf9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfa0:	69bb      	ldr	r3, [r7, #24]
 801cfa2:	f383 8810 	msr	PRIMASK, r3
}
 801cfa6:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801cfa8:	2300      	movs	r3, #0
}
 801cfaa:	0018      	movs	r0, r3
 801cfac:	46bd      	mov	sp, r7
 801cfae:	b010      	add	sp, #64	@ 0x40
 801cfb0:	bd80      	pop	{r7, pc}
 801cfb2:	46c0      	nop			@ (mov r8, r8)
 801cfb4:	000001ff 	.word	0x000001ff
 801cfb8:	0801d72d 	.word	0x0801d72d
 801cfbc:	0801d561 	.word	0x0801d561

0801cfc0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801cfc0:	b580      	push	{r7, lr}
 801cfc2:	b090      	sub	sp, #64	@ 0x40
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	60f8      	str	r0, [r7, #12]
 801cfc8:	60b9      	str	r1, [r7, #8]
 801cfca:	1dbb      	adds	r3, r7, #6
 801cfcc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801cfce:	68fb      	ldr	r3, [r7, #12]
 801cfd0:	68ba      	ldr	r2, [r7, #8]
 801cfd2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801cfd4:	68fb      	ldr	r3, [r7, #12]
 801cfd6:	1dba      	adds	r2, r7, #6
 801cfd8:	2158      	movs	r1, #88	@ 0x58
 801cfda:	8812      	ldrh	r2, [r2, #0]
 801cfdc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801cfde:	68fb      	ldr	r3, [r7, #12]
 801cfe0:	2284      	movs	r2, #132	@ 0x84
 801cfe2:	2100      	movs	r1, #0
 801cfe4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801cfe6:	68fb      	ldr	r3, [r7, #12]
 801cfe8:	2280      	movs	r2, #128	@ 0x80
 801cfea:	2122      	movs	r1, #34	@ 0x22
 801cfec:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	d028      	beq.n	801d048 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801cff6:	68fb      	ldr	r3, [r7, #12]
 801cff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cffa:	4a3e      	ldr	r2, [pc, #248]	@ (801d0f4 <UART_Start_Receive_DMA+0x134>)
 801cffc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801cffe:	68fb      	ldr	r3, [r7, #12]
 801d000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d002:	4a3d      	ldr	r2, [pc, #244]	@ (801d0f8 <UART_Start_Receive_DMA+0x138>)
 801d004:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801d006:	68fb      	ldr	r3, [r7, #12]
 801d008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d00a:	4a3c      	ldr	r2, [pc, #240]	@ (801d0fc <UART_Start_Receive_DMA+0x13c>)
 801d00c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801d00e:	68fb      	ldr	r3, [r7, #12]
 801d010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d012:	2200      	movs	r2, #0
 801d014:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801d016:	68fb      	ldr	r3, [r7, #12]
 801d018:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	681b      	ldr	r3, [r3, #0]
 801d01e:	3324      	adds	r3, #36	@ 0x24
 801d020:	0019      	movs	r1, r3
 801d022:	68fb      	ldr	r3, [r7, #12]
 801d024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d026:	001a      	movs	r2, r3
 801d028:	1dbb      	adds	r3, r7, #6
 801d02a:	881b      	ldrh	r3, [r3, #0]
 801d02c:	f7f6 fdd0 	bl	8013bd0 <HAL_DMA_Start_IT>
 801d030:	1e03      	subs	r3, r0, #0
 801d032:	d009      	beq.n	801d048 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d034:	68fb      	ldr	r3, [r7, #12]
 801d036:	2284      	movs	r2, #132	@ 0x84
 801d038:	2110      	movs	r1, #16
 801d03a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801d03c:	68fb      	ldr	r3, [r7, #12]
 801d03e:	2280      	movs	r2, #128	@ 0x80
 801d040:	2120      	movs	r1, #32
 801d042:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801d044:	2301      	movs	r3, #1
 801d046:	e050      	b.n	801d0ea <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801d048:	68fb      	ldr	r3, [r7, #12]
 801d04a:	691b      	ldr	r3, [r3, #16]
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	d019      	beq.n	801d084 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d050:	f3ef 8310 	mrs	r3, PRIMASK
 801d054:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801d056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d058:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d05a:	2301      	movs	r3, #1
 801d05c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d060:	f383 8810 	msr	PRIMASK, r3
}
 801d064:	46c0      	nop			@ (mov r8, r8)
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	681a      	ldr	r2, [r3, #0]
 801d06c:	68fb      	ldr	r3, [r7, #12]
 801d06e:	681b      	ldr	r3, [r3, #0]
 801d070:	2180      	movs	r1, #128	@ 0x80
 801d072:	0049      	lsls	r1, r1, #1
 801d074:	430a      	orrs	r2, r1
 801d076:	601a      	str	r2, [r3, #0]
 801d078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d07a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d07e:	f383 8810 	msr	PRIMASK, r3
}
 801d082:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d084:	f3ef 8310 	mrs	r3, PRIMASK
 801d088:	613b      	str	r3, [r7, #16]
  return(result);
 801d08a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d08c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d08e:	2301      	movs	r3, #1
 801d090:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d092:	697b      	ldr	r3, [r7, #20]
 801d094:	f383 8810 	msr	PRIMASK, r3
}
 801d098:	46c0      	nop			@ (mov r8, r8)
 801d09a:	68fb      	ldr	r3, [r7, #12]
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	689a      	ldr	r2, [r3, #8]
 801d0a0:	68fb      	ldr	r3, [r7, #12]
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	2101      	movs	r1, #1
 801d0a6:	430a      	orrs	r2, r1
 801d0a8:	609a      	str	r2, [r3, #8]
 801d0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0ae:	69bb      	ldr	r3, [r7, #24]
 801d0b0:	f383 8810 	msr	PRIMASK, r3
}
 801d0b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0b6:	f3ef 8310 	mrs	r3, PRIMASK
 801d0ba:	61fb      	str	r3, [r7, #28]
  return(result);
 801d0bc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d0be:	637b      	str	r3, [r7, #52]	@ 0x34
 801d0c0:	2301      	movs	r3, #1
 801d0c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0c4:	6a3b      	ldr	r3, [r7, #32]
 801d0c6:	f383 8810 	msr	PRIMASK, r3
}
 801d0ca:	46c0      	nop			@ (mov r8, r8)
 801d0cc:	68fb      	ldr	r3, [r7, #12]
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	689a      	ldr	r2, [r3, #8]
 801d0d2:	68fb      	ldr	r3, [r7, #12]
 801d0d4:	681b      	ldr	r3, [r3, #0]
 801d0d6:	2140      	movs	r1, #64	@ 0x40
 801d0d8:	430a      	orrs	r2, r1
 801d0da:	609a      	str	r2, [r3, #8]
 801d0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d0de:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0e2:	f383 8810 	msr	PRIMASK, r3
}
 801d0e6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801d0e8:	2300      	movs	r3, #0
}
 801d0ea:	0018      	movs	r0, r3
 801d0ec:	46bd      	mov	sp, r7
 801d0ee:	b010      	add	sp, #64	@ 0x40
 801d0f0:	bd80      	pop	{r7, pc}
 801d0f2:	46c0      	nop			@ (mov r8, r8)
 801d0f4:	0801d2d1 	.word	0x0801d2d1
 801d0f8:	0801d405 	.word	0x0801d405
 801d0fc:	0801d44d 	.word	0x0801d44d

0801d100 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801d100:	b580      	push	{r7, lr}
 801d102:	b086      	sub	sp, #24
 801d104:	af00      	add	r7, sp, #0
 801d106:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d108:	f3ef 8310 	mrs	r3, PRIMASK
 801d10c:	60bb      	str	r3, [r7, #8]
  return(result);
 801d10e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801d110:	617b      	str	r3, [r7, #20]
 801d112:	2301      	movs	r3, #1
 801d114:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d116:	68fb      	ldr	r3, [r7, #12]
 801d118:	f383 8810 	msr	PRIMASK, r3
}
 801d11c:	46c0      	nop			@ (mov r8, r8)
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	681b      	ldr	r3, [r3, #0]
 801d122:	681a      	ldr	r2, [r3, #0]
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	21c0      	movs	r1, #192	@ 0xc0
 801d12a:	438a      	bics	r2, r1
 801d12c:	601a      	str	r2, [r3, #0]
 801d12e:	697b      	ldr	r3, [r7, #20]
 801d130:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d132:	693b      	ldr	r3, [r7, #16]
 801d134:	f383 8810 	msr	PRIMASK, r3
}
 801d138:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	2220      	movs	r2, #32
 801d13e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801d140:	46c0      	nop			@ (mov r8, r8)
 801d142:	46bd      	mov	sp, r7
 801d144:	b006      	add	sp, #24
 801d146:	bd80      	pop	{r7, pc}

0801d148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801d148:	b580      	push	{r7, lr}
 801d14a:	b08e      	sub	sp, #56	@ 0x38
 801d14c:	af00      	add	r7, sp, #0
 801d14e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d150:	f3ef 8310 	mrs	r3, PRIMASK
 801d154:	617b      	str	r3, [r7, #20]
  return(result);
 801d156:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d158:	637b      	str	r3, [r7, #52]	@ 0x34
 801d15a:	2301      	movs	r3, #1
 801d15c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d15e:	69bb      	ldr	r3, [r7, #24]
 801d160:	f383 8810 	msr	PRIMASK, r3
}
 801d164:	46c0      	nop			@ (mov r8, r8)
 801d166:	687b      	ldr	r3, [r7, #4]
 801d168:	681b      	ldr	r3, [r3, #0]
 801d16a:	681a      	ldr	r2, [r3, #0]
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	4926      	ldr	r1, [pc, #152]	@ (801d20c <UART_EndRxTransfer+0xc4>)
 801d172:	400a      	ands	r2, r1
 801d174:	601a      	str	r2, [r3, #0]
 801d176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d178:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d17a:	69fb      	ldr	r3, [r7, #28]
 801d17c:	f383 8810 	msr	PRIMASK, r3
}
 801d180:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d182:	f3ef 8310 	mrs	r3, PRIMASK
 801d186:	623b      	str	r3, [r7, #32]
  return(result);
 801d188:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d18a:	633b      	str	r3, [r7, #48]	@ 0x30
 801d18c:	2301      	movs	r3, #1
 801d18e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d192:	f383 8810 	msr	PRIMASK, r3
}
 801d196:	46c0      	nop			@ (mov r8, r8)
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	681b      	ldr	r3, [r3, #0]
 801d19c:	689a      	ldr	r2, [r3, #8]
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	681b      	ldr	r3, [r3, #0]
 801d1a2:	2101      	movs	r1, #1
 801d1a4:	438a      	bics	r2, r1
 801d1a6:	609a      	str	r2, [r3, #8]
 801d1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d1aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1ae:	f383 8810 	msr	PRIMASK, r3
}
 801d1b2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d1b8:	2b01      	cmp	r3, #1
 801d1ba:	d118      	bne.n	801d1ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d1bc:	f3ef 8310 	mrs	r3, PRIMASK
 801d1c0:	60bb      	str	r3, [r7, #8]
  return(result);
 801d1c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d1c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d1c6:	2301      	movs	r3, #1
 801d1c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	f383 8810 	msr	PRIMASK, r3
}
 801d1d0:	46c0      	nop			@ (mov r8, r8)
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	681b      	ldr	r3, [r3, #0]
 801d1d6:	681a      	ldr	r2, [r3, #0]
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	681b      	ldr	r3, [r3, #0]
 801d1dc:	2110      	movs	r1, #16
 801d1de:	438a      	bics	r2, r1
 801d1e0:	601a      	str	r2, [r3, #0]
 801d1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d1e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d1e6:	693b      	ldr	r3, [r7, #16]
 801d1e8:	f383 8810 	msr	PRIMASK, r3
}
 801d1ec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801d1ee:	687b      	ldr	r3, [r7, #4]
 801d1f0:	2280      	movs	r2, #128	@ 0x80
 801d1f2:	2120      	movs	r1, #32
 801d1f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	2200      	movs	r2, #0
 801d1fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	2200      	movs	r2, #0
 801d200:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801d202:	46c0      	nop			@ (mov r8, r8)
 801d204:	46bd      	mov	sp, r7
 801d206:	b00e      	add	sp, #56	@ 0x38
 801d208:	bd80      	pop	{r7, pc}
 801d20a:	46c0      	nop			@ (mov r8, r8)
 801d20c:	fffffedf 	.word	0xfffffedf

0801d210 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801d210:	b580      	push	{r7, lr}
 801d212:	b08c      	sub	sp, #48	@ 0x30
 801d214:	af00      	add	r7, sp, #0
 801d216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d21c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	681b      	ldr	r3, [r3, #0]
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	2220      	movs	r2, #32
 801d226:	4013      	ands	r3, r2
 801d228:	d135      	bne.n	801d296 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801d22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d22c:	2252      	movs	r2, #82	@ 0x52
 801d22e:	2100      	movs	r1, #0
 801d230:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d232:	f3ef 8310 	mrs	r3, PRIMASK
 801d236:	60fb      	str	r3, [r7, #12]
  return(result);
 801d238:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d23a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d23c:	2301      	movs	r3, #1
 801d23e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d240:	693b      	ldr	r3, [r7, #16]
 801d242:	f383 8810 	msr	PRIMASK, r3
}
 801d246:	46c0      	nop			@ (mov r8, r8)
 801d248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d24a:	681b      	ldr	r3, [r3, #0]
 801d24c:	689a      	ldr	r2, [r3, #8]
 801d24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d250:	681b      	ldr	r3, [r3, #0]
 801d252:	2180      	movs	r1, #128	@ 0x80
 801d254:	438a      	bics	r2, r1
 801d256:	609a      	str	r2, [r3, #8]
 801d258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d25a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d25c:	697b      	ldr	r3, [r7, #20]
 801d25e:	f383 8810 	msr	PRIMASK, r3
}
 801d262:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d264:	f3ef 8310 	mrs	r3, PRIMASK
 801d268:	61bb      	str	r3, [r7, #24]
  return(result);
 801d26a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801d26c:	627b      	str	r3, [r7, #36]	@ 0x24
 801d26e:	2301      	movs	r3, #1
 801d270:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d272:	69fb      	ldr	r3, [r7, #28]
 801d274:	f383 8810 	msr	PRIMASK, r3
}
 801d278:	46c0      	nop			@ (mov r8, r8)
 801d27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d27c:	681b      	ldr	r3, [r3, #0]
 801d27e:	681a      	ldr	r2, [r3, #0]
 801d280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	2140      	movs	r1, #64	@ 0x40
 801d286:	430a      	orrs	r2, r1
 801d288:	601a      	str	r2, [r3, #0]
 801d28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d28c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d28e:	6a3b      	ldr	r3, [r7, #32]
 801d290:	f383 8810 	msr	PRIMASK, r3
}
 801d294:	e006      	b.n	801d2a4 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801d296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d298:	228c      	movs	r2, #140	@ 0x8c
 801d29a:	589b      	ldr	r3, [r3, r2]
 801d29c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d29e:	0010      	movs	r0, r2
 801d2a0:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801d2a2:	46c0      	nop			@ (mov r8, r8)
 801d2a4:	46c0      	nop			@ (mov r8, r8)
 801d2a6:	46bd      	mov	sp, r7
 801d2a8:	b00c      	add	sp, #48	@ 0x30
 801d2aa:	bd80      	pop	{r7, pc}

0801d2ac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801d2ac:	b580      	push	{r7, lr}
 801d2ae:	b084      	sub	sp, #16
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d2b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	2288      	movs	r2, #136	@ 0x88
 801d2be:	589b      	ldr	r3, [r3, r2]
 801d2c0:	68fa      	ldr	r2, [r7, #12]
 801d2c2:	0010      	movs	r0, r2
 801d2c4:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d2c6:	46c0      	nop			@ (mov r8, r8)
 801d2c8:	46bd      	mov	sp, r7
 801d2ca:	b004      	add	sp, #16
 801d2cc:	bd80      	pop	{r7, pc}
	...

0801d2d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801d2d0:	b580      	push	{r7, lr}
 801d2d2:	b094      	sub	sp, #80	@ 0x50
 801d2d4:	af00      	add	r7, sp, #0
 801d2d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d2dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801d2de:	687b      	ldr	r3, [r7, #4]
 801d2e0:	681b      	ldr	r3, [r3, #0]
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	2220      	movs	r2, #32
 801d2e6:	4013      	ands	r3, r2
 801d2e8:	d16f      	bne.n	801d3ca <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801d2ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d2ec:	225a      	movs	r2, #90	@ 0x5a
 801d2ee:	2100      	movs	r1, #0
 801d2f0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d2f2:	f3ef 8310 	mrs	r3, PRIMASK
 801d2f6:	61bb      	str	r3, [r7, #24]
  return(result);
 801d2f8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d2fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d2fc:	2301      	movs	r3, #1
 801d2fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d300:	69fb      	ldr	r3, [r7, #28]
 801d302:	f383 8810 	msr	PRIMASK, r3
}
 801d306:	46c0      	nop			@ (mov r8, r8)
 801d308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	681a      	ldr	r2, [r3, #0]
 801d30e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d310:	681b      	ldr	r3, [r3, #0]
 801d312:	493b      	ldr	r1, [pc, #236]	@ (801d400 <UART_DMAReceiveCplt+0x130>)
 801d314:	400a      	ands	r2, r1
 801d316:	601a      	str	r2, [r3, #0]
 801d318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d31a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d31c:	6a3b      	ldr	r3, [r7, #32]
 801d31e:	f383 8810 	msr	PRIMASK, r3
}
 801d322:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d324:	f3ef 8310 	mrs	r3, PRIMASK
 801d328:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801d32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d32c:	647b      	str	r3, [r7, #68]	@ 0x44
 801d32e:	2301      	movs	r3, #1
 801d330:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d334:	f383 8810 	msr	PRIMASK, r3
}
 801d338:	46c0      	nop			@ (mov r8, r8)
 801d33a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d33c:	681b      	ldr	r3, [r3, #0]
 801d33e:	689a      	ldr	r2, [r3, #8]
 801d340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d342:	681b      	ldr	r3, [r3, #0]
 801d344:	2101      	movs	r1, #1
 801d346:	438a      	bics	r2, r1
 801d348:	609a      	str	r2, [r3, #8]
 801d34a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d34c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d350:	f383 8810 	msr	PRIMASK, r3
}
 801d354:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d356:	f3ef 8310 	mrs	r3, PRIMASK
 801d35a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801d35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d35e:	643b      	str	r3, [r7, #64]	@ 0x40
 801d360:	2301      	movs	r3, #1
 801d362:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d366:	f383 8810 	msr	PRIMASK, r3
}
 801d36a:	46c0      	nop			@ (mov r8, r8)
 801d36c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d36e:	681b      	ldr	r3, [r3, #0]
 801d370:	689a      	ldr	r2, [r3, #8]
 801d372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d374:	681b      	ldr	r3, [r3, #0]
 801d376:	2140      	movs	r1, #64	@ 0x40
 801d378:	438a      	bics	r2, r1
 801d37a:	609a      	str	r2, [r3, #8]
 801d37c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d37e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d382:	f383 8810 	msr	PRIMASK, r3
}
 801d386:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801d388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d38a:	2280      	movs	r2, #128	@ 0x80
 801d38c:	2120      	movs	r1, #32
 801d38e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d394:	2b01      	cmp	r3, #1
 801d396:	d118      	bne.n	801d3ca <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d398:	f3ef 8310 	mrs	r3, PRIMASK
 801d39c:	60fb      	str	r3, [r7, #12]
  return(result);
 801d39e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d3a2:	2301      	movs	r3, #1
 801d3a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3a6:	693b      	ldr	r3, [r7, #16]
 801d3a8:	f383 8810 	msr	PRIMASK, r3
}
 801d3ac:	46c0      	nop			@ (mov r8, r8)
 801d3ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	681a      	ldr	r2, [r3, #0]
 801d3b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d3b6:	681b      	ldr	r3, [r3, #0]
 801d3b8:	2110      	movs	r1, #16
 801d3ba:	438a      	bics	r2, r1
 801d3bc:	601a      	str	r2, [r3, #0]
 801d3be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d3c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3c2:	697b      	ldr	r3, [r7, #20]
 801d3c4:	f383 8810 	msr	PRIMASK, r3
}
 801d3c8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d3ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d3cc:	2200      	movs	r2, #0
 801d3ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d3d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d3d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d3d4:	2b01      	cmp	r3, #1
 801d3d6:	d109      	bne.n	801d3ec <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801d3d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d3da:	22ac      	movs	r2, #172	@ 0xac
 801d3dc:	589b      	ldr	r3, [r3, r2]
 801d3de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d3e0:	2158      	movs	r1, #88	@ 0x58
 801d3e2:	5a51      	ldrh	r1, [r2, r1]
 801d3e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d3e6:	0010      	movs	r0, r2
 801d3e8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801d3ea:	e005      	b.n	801d3f8 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801d3ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d3ee:	2294      	movs	r2, #148	@ 0x94
 801d3f0:	589b      	ldr	r3, [r3, r2]
 801d3f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d3f4:	0010      	movs	r0, r2
 801d3f6:	4798      	blx	r3
}
 801d3f8:	46c0      	nop			@ (mov r8, r8)
 801d3fa:	46bd      	mov	sp, r7
 801d3fc:	b014      	add	sp, #80	@ 0x50
 801d3fe:	bd80      	pop	{r7, pc}
 801d400:	fffffeff 	.word	0xfffffeff

0801d404 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801d404:	b580      	push	{r7, lr}
 801d406:	b084      	sub	sp, #16
 801d408:	af00      	add	r7, sp, #0
 801d40a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d410:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801d412:	68fb      	ldr	r3, [r7, #12]
 801d414:	2201      	movs	r2, #1
 801d416:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d418:	68fb      	ldr	r3, [r7, #12]
 801d41a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d41c:	2b01      	cmp	r3, #1
 801d41e:	d10b      	bne.n	801d438 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	22ac      	movs	r2, #172	@ 0xac
 801d424:	589b      	ldr	r3, [r3, r2]
 801d426:	68fa      	ldr	r2, [r7, #12]
 801d428:	2158      	movs	r1, #88	@ 0x58
 801d42a:	5a52      	ldrh	r2, [r2, r1]
 801d42c:	0852      	lsrs	r2, r2, #1
 801d42e:	b291      	uxth	r1, r2
 801d430:	68fa      	ldr	r2, [r7, #12]
 801d432:	0010      	movs	r0, r2
 801d434:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801d436:	e005      	b.n	801d444 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801d438:	68fb      	ldr	r3, [r7, #12]
 801d43a:	2290      	movs	r2, #144	@ 0x90
 801d43c:	589b      	ldr	r3, [r3, r2]
 801d43e:	68fa      	ldr	r2, [r7, #12]
 801d440:	0010      	movs	r0, r2
 801d442:	4798      	blx	r3
}
 801d444:	46c0      	nop			@ (mov r8, r8)
 801d446:	46bd      	mov	sp, r7
 801d448:	b004      	add	sp, #16
 801d44a:	bd80      	pop	{r7, pc}

0801d44c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801d44c:	b580      	push	{r7, lr}
 801d44e:	b086      	sub	sp, #24
 801d450:	af00      	add	r7, sp, #0
 801d452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d458:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801d45a:	697b      	ldr	r3, [r7, #20]
 801d45c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d45e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801d460:	697b      	ldr	r3, [r7, #20]
 801d462:	2280      	movs	r2, #128	@ 0x80
 801d464:	589b      	ldr	r3, [r3, r2]
 801d466:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801d468:	697b      	ldr	r3, [r7, #20]
 801d46a:	681b      	ldr	r3, [r3, #0]
 801d46c:	689b      	ldr	r3, [r3, #8]
 801d46e:	2280      	movs	r2, #128	@ 0x80
 801d470:	4013      	ands	r3, r2
 801d472:	2b80      	cmp	r3, #128	@ 0x80
 801d474:	d10a      	bne.n	801d48c <UART_DMAError+0x40>
 801d476:	693b      	ldr	r3, [r7, #16]
 801d478:	2b21      	cmp	r3, #33	@ 0x21
 801d47a:	d107      	bne.n	801d48c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801d47c:	697b      	ldr	r3, [r7, #20]
 801d47e:	2252      	movs	r2, #82	@ 0x52
 801d480:	2100      	movs	r1, #0
 801d482:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801d484:	697b      	ldr	r3, [r7, #20]
 801d486:	0018      	movs	r0, r3
 801d488:	f7ff fe3a 	bl	801d100 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801d48c:	697b      	ldr	r3, [r7, #20]
 801d48e:	681b      	ldr	r3, [r3, #0]
 801d490:	689b      	ldr	r3, [r3, #8]
 801d492:	2240      	movs	r2, #64	@ 0x40
 801d494:	4013      	ands	r3, r2
 801d496:	2b40      	cmp	r3, #64	@ 0x40
 801d498:	d10a      	bne.n	801d4b0 <UART_DMAError+0x64>
 801d49a:	68fb      	ldr	r3, [r7, #12]
 801d49c:	2b22      	cmp	r3, #34	@ 0x22
 801d49e:	d107      	bne.n	801d4b0 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801d4a0:	697b      	ldr	r3, [r7, #20]
 801d4a2:	225a      	movs	r2, #90	@ 0x5a
 801d4a4:	2100      	movs	r1, #0
 801d4a6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801d4a8:	697b      	ldr	r3, [r7, #20]
 801d4aa:	0018      	movs	r0, r3
 801d4ac:	f7ff fe4c 	bl	801d148 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801d4b0:	697b      	ldr	r3, [r7, #20]
 801d4b2:	2284      	movs	r2, #132	@ 0x84
 801d4b4:	589b      	ldr	r3, [r3, r2]
 801d4b6:	2210      	movs	r2, #16
 801d4b8:	431a      	orrs	r2, r3
 801d4ba:	697b      	ldr	r3, [r7, #20]
 801d4bc:	2184      	movs	r1, #132	@ 0x84
 801d4be:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801d4c0:	697b      	ldr	r3, [r7, #20]
 801d4c2:	2298      	movs	r2, #152	@ 0x98
 801d4c4:	589b      	ldr	r3, [r3, r2]
 801d4c6:	697a      	ldr	r2, [r7, #20]
 801d4c8:	0010      	movs	r0, r2
 801d4ca:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d4cc:	46c0      	nop			@ (mov r8, r8)
 801d4ce:	46bd      	mov	sp, r7
 801d4d0:	b006      	add	sp, #24
 801d4d2:	bd80      	pop	{r7, pc}

0801d4d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801d4d4:	b580      	push	{r7, lr}
 801d4d6:	b084      	sub	sp, #16
 801d4d8:	af00      	add	r7, sp, #0
 801d4da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d4e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801d4e2:	68fb      	ldr	r3, [r7, #12]
 801d4e4:	225a      	movs	r2, #90	@ 0x5a
 801d4e6:	2100      	movs	r1, #0
 801d4e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801d4ea:	68fb      	ldr	r3, [r7, #12]
 801d4ec:	2252      	movs	r2, #82	@ 0x52
 801d4ee:	2100      	movs	r1, #0
 801d4f0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801d4f2:	68fb      	ldr	r3, [r7, #12]
 801d4f4:	2298      	movs	r2, #152	@ 0x98
 801d4f6:	589b      	ldr	r3, [r3, r2]
 801d4f8:	68fa      	ldr	r2, [r7, #12]
 801d4fa:	0010      	movs	r0, r2
 801d4fc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d4fe:	46c0      	nop			@ (mov r8, r8)
 801d500:	46bd      	mov	sp, r7
 801d502:	b004      	add	sp, #16
 801d504:	bd80      	pop	{r7, pc}

0801d506 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801d506:	b580      	push	{r7, lr}
 801d508:	b086      	sub	sp, #24
 801d50a:	af00      	add	r7, sp, #0
 801d50c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d50e:	f3ef 8310 	mrs	r3, PRIMASK
 801d512:	60bb      	str	r3, [r7, #8]
  return(result);
 801d514:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801d516:	617b      	str	r3, [r7, #20]
 801d518:	2301      	movs	r3, #1
 801d51a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	f383 8810 	msr	PRIMASK, r3
}
 801d522:	46c0      	nop			@ (mov r8, r8)
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	681b      	ldr	r3, [r3, #0]
 801d528:	681a      	ldr	r2, [r3, #0]
 801d52a:	687b      	ldr	r3, [r7, #4]
 801d52c:	681b      	ldr	r3, [r3, #0]
 801d52e:	2140      	movs	r1, #64	@ 0x40
 801d530:	438a      	bics	r2, r1
 801d532:	601a      	str	r2, [r3, #0]
 801d534:	697b      	ldr	r3, [r7, #20]
 801d536:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d538:	693b      	ldr	r3, [r7, #16]
 801d53a:	f383 8810 	msr	PRIMASK, r3
}
 801d53e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	2220      	movs	r2, #32
 801d544:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	2200      	movs	r2, #0
 801d54a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	228c      	movs	r2, #140	@ 0x8c
 801d550:	589b      	ldr	r3, [r3, r2]
 801d552:	687a      	ldr	r2, [r7, #4]
 801d554:	0010      	movs	r0, r2
 801d556:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d558:	46c0      	nop			@ (mov r8, r8)
 801d55a:	46bd      	mov	sp, r7
 801d55c:	b006      	add	sp, #24
 801d55e:	bd80      	pop	{r7, pc}

0801d560 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801d560:	b580      	push	{r7, lr}
 801d562:	b094      	sub	sp, #80	@ 0x50
 801d564:	af00      	add	r7, sp, #0
 801d566:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801d568:	204e      	movs	r0, #78	@ 0x4e
 801d56a:	183b      	adds	r3, r7, r0
 801d56c:	687a      	ldr	r2, [r7, #4]
 801d56e:	215c      	movs	r1, #92	@ 0x5c
 801d570:	5a52      	ldrh	r2, [r2, r1]
 801d572:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d574:	687b      	ldr	r3, [r7, #4]
 801d576:	2280      	movs	r2, #128	@ 0x80
 801d578:	589b      	ldr	r3, [r3, r2]
 801d57a:	2b22      	cmp	r3, #34	@ 0x22
 801d57c:	d000      	beq.n	801d580 <UART_RxISR_8BIT+0x20>
 801d57e:	e0c2      	b.n	801d706 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	681b      	ldr	r3, [r3, #0]
 801d584:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d586:	214c      	movs	r1, #76	@ 0x4c
 801d588:	187b      	adds	r3, r7, r1
 801d58a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801d58c:	187b      	adds	r3, r7, r1
 801d58e:	881b      	ldrh	r3, [r3, #0]
 801d590:	b2da      	uxtb	r2, r3
 801d592:	183b      	adds	r3, r7, r0
 801d594:	881b      	ldrh	r3, [r3, #0]
 801d596:	b2d9      	uxtb	r1, r3
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d59c:	400a      	ands	r2, r1
 801d59e:	b2d2      	uxtb	r2, r2
 801d5a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d5a6:	1c5a      	adds	r2, r3, #1
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801d5ac:	687b      	ldr	r3, [r7, #4]
 801d5ae:	225a      	movs	r2, #90	@ 0x5a
 801d5b0:	5a9b      	ldrh	r3, [r3, r2]
 801d5b2:	b29b      	uxth	r3, r3
 801d5b4:	3b01      	subs	r3, #1
 801d5b6:	b299      	uxth	r1, r3
 801d5b8:	687b      	ldr	r3, [r7, #4]
 801d5ba:	225a      	movs	r2, #90	@ 0x5a
 801d5bc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	225a      	movs	r2, #90	@ 0x5a
 801d5c2:	5a9b      	ldrh	r3, [r3, r2]
 801d5c4:	b29b      	uxth	r3, r3
 801d5c6:	2b00      	cmp	r3, #0
 801d5c8:	d000      	beq.n	801d5cc <UART_RxISR_8BIT+0x6c>
 801d5ca:	e0a4      	b.n	801d716 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d5cc:	f3ef 8310 	mrs	r3, PRIMASK
 801d5d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801d5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d5d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d5d6:	2301      	movs	r3, #1
 801d5d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d5dc:	f383 8810 	msr	PRIMASK, r3
}
 801d5e0:	46c0      	nop			@ (mov r8, r8)
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	681a      	ldr	r2, [r3, #0]
 801d5e8:	687b      	ldr	r3, [r7, #4]
 801d5ea:	681b      	ldr	r3, [r3, #0]
 801d5ec:	494c      	ldr	r1, [pc, #304]	@ (801d720 <UART_RxISR_8BIT+0x1c0>)
 801d5ee:	400a      	ands	r2, r1
 801d5f0:	601a      	str	r2, [r3, #0]
 801d5f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d5f8:	f383 8810 	msr	PRIMASK, r3
}
 801d5fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d5fe:	f3ef 8310 	mrs	r3, PRIMASK
 801d602:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801d604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d606:	647b      	str	r3, [r7, #68]	@ 0x44
 801d608:	2301      	movs	r3, #1
 801d60a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d60c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d60e:	f383 8810 	msr	PRIMASK, r3
}
 801d612:	46c0      	nop			@ (mov r8, r8)
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	689a      	ldr	r2, [r3, #8]
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	681b      	ldr	r3, [r3, #0]
 801d61e:	2101      	movs	r1, #1
 801d620:	438a      	bics	r2, r1
 801d622:	609a      	str	r2, [r3, #8]
 801d624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d626:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d62a:	f383 8810 	msr	PRIMASK, r3
}
 801d62e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	2280      	movs	r2, #128	@ 0x80
 801d634:	2120      	movs	r1, #32
 801d636:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	2200      	movs	r2, #0
 801d63c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	2200      	movs	r2, #0
 801d642:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	681b      	ldr	r3, [r3, #0]
 801d648:	4a36      	ldr	r2, [pc, #216]	@ (801d724 <UART_RxISR_8BIT+0x1c4>)
 801d64a:	4293      	cmp	r3, r2
 801d64c:	d01f      	beq.n	801d68e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	681b      	ldr	r3, [r3, #0]
 801d652:	685a      	ldr	r2, [r3, #4]
 801d654:	2380      	movs	r3, #128	@ 0x80
 801d656:	041b      	lsls	r3, r3, #16
 801d658:	4013      	ands	r3, r2
 801d65a:	d018      	beq.n	801d68e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d65c:	f3ef 8310 	mrs	r3, PRIMASK
 801d660:	61bb      	str	r3, [r7, #24]
  return(result);
 801d662:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d664:	643b      	str	r3, [r7, #64]	@ 0x40
 801d666:	2301      	movs	r3, #1
 801d668:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d66a:	69fb      	ldr	r3, [r7, #28]
 801d66c:	f383 8810 	msr	PRIMASK, r3
}
 801d670:	46c0      	nop			@ (mov r8, r8)
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	681b      	ldr	r3, [r3, #0]
 801d676:	681a      	ldr	r2, [r3, #0]
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	681b      	ldr	r3, [r3, #0]
 801d67c:	492a      	ldr	r1, [pc, #168]	@ (801d728 <UART_RxISR_8BIT+0x1c8>)
 801d67e:	400a      	ands	r2, r1
 801d680:	601a      	str	r2, [r3, #0]
 801d682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d684:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d686:	6a3b      	ldr	r3, [r7, #32]
 801d688:	f383 8810 	msr	PRIMASK, r3
}
 801d68c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d692:	2b01      	cmp	r3, #1
 801d694:	d130      	bne.n	801d6f8 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	2200      	movs	r2, #0
 801d69a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d69c:	f3ef 8310 	mrs	r3, PRIMASK
 801d6a0:	60fb      	str	r3, [r7, #12]
  return(result);
 801d6a2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d6a6:	2301      	movs	r3, #1
 801d6a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d6aa:	693b      	ldr	r3, [r7, #16]
 801d6ac:	f383 8810 	msr	PRIMASK, r3
}
 801d6b0:	46c0      	nop			@ (mov r8, r8)
 801d6b2:	687b      	ldr	r3, [r7, #4]
 801d6b4:	681b      	ldr	r3, [r3, #0]
 801d6b6:	681a      	ldr	r2, [r3, #0]
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	681b      	ldr	r3, [r3, #0]
 801d6bc:	2110      	movs	r1, #16
 801d6be:	438a      	bics	r2, r1
 801d6c0:	601a      	str	r2, [r3, #0]
 801d6c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d6c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d6c6:	697b      	ldr	r3, [r7, #20]
 801d6c8:	f383 8810 	msr	PRIMASK, r3
}
 801d6cc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	69db      	ldr	r3, [r3, #28]
 801d6d4:	2210      	movs	r2, #16
 801d6d6:	4013      	ands	r3, r2
 801d6d8:	2b10      	cmp	r3, #16
 801d6da:	d103      	bne.n	801d6e4 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	681b      	ldr	r3, [r3, #0]
 801d6e0:	2210      	movs	r2, #16
 801d6e2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	22ac      	movs	r2, #172	@ 0xac
 801d6e8:	589b      	ldr	r3, [r3, r2]
 801d6ea:	687a      	ldr	r2, [r7, #4]
 801d6ec:	2158      	movs	r1, #88	@ 0x58
 801d6ee:	5a51      	ldrh	r1, [r2, r1]
 801d6f0:	687a      	ldr	r2, [r7, #4]
 801d6f2:	0010      	movs	r0, r2
 801d6f4:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801d6f6:	e00e      	b.n	801d716 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	2294      	movs	r2, #148	@ 0x94
 801d6fc:	589b      	ldr	r3, [r3, r2]
 801d6fe:	687a      	ldr	r2, [r7, #4]
 801d700:	0010      	movs	r0, r2
 801d702:	4798      	blx	r3
}
 801d704:	e007      	b.n	801d716 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801d706:	687b      	ldr	r3, [r7, #4]
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	699a      	ldr	r2, [r3, #24]
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	681b      	ldr	r3, [r3, #0]
 801d710:	2108      	movs	r1, #8
 801d712:	430a      	orrs	r2, r1
 801d714:	619a      	str	r2, [r3, #24]
}
 801d716:	46c0      	nop			@ (mov r8, r8)
 801d718:	46bd      	mov	sp, r7
 801d71a:	b014      	add	sp, #80	@ 0x50
 801d71c:	bd80      	pop	{r7, pc}
 801d71e:	46c0      	nop			@ (mov r8, r8)
 801d720:	fffffedf 	.word	0xfffffedf
 801d724:	40004800 	.word	0x40004800
 801d728:	fbffffff 	.word	0xfbffffff

0801d72c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801d72c:	b580      	push	{r7, lr}
 801d72e:	b094      	sub	sp, #80	@ 0x50
 801d730:	af00      	add	r7, sp, #0
 801d732:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801d734:	204e      	movs	r0, #78	@ 0x4e
 801d736:	183b      	adds	r3, r7, r0
 801d738:	687a      	ldr	r2, [r7, #4]
 801d73a:	215c      	movs	r1, #92	@ 0x5c
 801d73c:	5a52      	ldrh	r2, [r2, r1]
 801d73e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	2280      	movs	r2, #128	@ 0x80
 801d744:	589b      	ldr	r3, [r3, r2]
 801d746:	2b22      	cmp	r3, #34	@ 0x22
 801d748:	d000      	beq.n	801d74c <UART_RxISR_16BIT+0x20>
 801d74a:	e0c2      	b.n	801d8d2 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d752:	214c      	movs	r1, #76	@ 0x4c
 801d754:	187b      	adds	r3, r7, r1
 801d756:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d75c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801d75e:	187b      	adds	r3, r7, r1
 801d760:	183a      	adds	r2, r7, r0
 801d762:	881b      	ldrh	r3, [r3, #0]
 801d764:	8812      	ldrh	r2, [r2, #0]
 801d766:	4013      	ands	r3, r2
 801d768:	b29a      	uxth	r2, r3
 801d76a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d76c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d772:	1c9a      	adds	r2, r3, #2
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	225a      	movs	r2, #90	@ 0x5a
 801d77c:	5a9b      	ldrh	r3, [r3, r2]
 801d77e:	b29b      	uxth	r3, r3
 801d780:	3b01      	subs	r3, #1
 801d782:	b299      	uxth	r1, r3
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	225a      	movs	r2, #90	@ 0x5a
 801d788:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	225a      	movs	r2, #90	@ 0x5a
 801d78e:	5a9b      	ldrh	r3, [r3, r2]
 801d790:	b29b      	uxth	r3, r3
 801d792:	2b00      	cmp	r3, #0
 801d794:	d000      	beq.n	801d798 <UART_RxISR_16BIT+0x6c>
 801d796:	e0a4      	b.n	801d8e2 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d798:	f3ef 8310 	mrs	r3, PRIMASK
 801d79c:	623b      	str	r3, [r7, #32]
  return(result);
 801d79e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d7a0:	647b      	str	r3, [r7, #68]	@ 0x44
 801d7a2:	2301      	movs	r3, #1
 801d7a4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d7a8:	f383 8810 	msr	PRIMASK, r3
}
 801d7ac:	46c0      	nop			@ (mov r8, r8)
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	681a      	ldr	r2, [r3, #0]
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	494c      	ldr	r1, [pc, #304]	@ (801d8ec <UART_RxISR_16BIT+0x1c0>)
 801d7ba:	400a      	ands	r2, r1
 801d7bc:	601a      	str	r2, [r3, #0]
 801d7be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d7c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d7c4:	f383 8810 	msr	PRIMASK, r3
}
 801d7c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7ca:	f3ef 8310 	mrs	r3, PRIMASK
 801d7ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801d7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d7d2:	643b      	str	r3, [r7, #64]	@ 0x40
 801d7d4:	2301      	movs	r3, #1
 801d7d6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d7da:	f383 8810 	msr	PRIMASK, r3
}
 801d7de:	46c0      	nop			@ (mov r8, r8)
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	681b      	ldr	r3, [r3, #0]
 801d7e4:	689a      	ldr	r2, [r3, #8]
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	681b      	ldr	r3, [r3, #0]
 801d7ea:	2101      	movs	r1, #1
 801d7ec:	438a      	bics	r2, r1
 801d7ee:	609a      	str	r2, [r3, #8]
 801d7f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d7f2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d7f6:	f383 8810 	msr	PRIMASK, r3
}
 801d7fa:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	2280      	movs	r2, #128	@ 0x80
 801d800:	2120      	movs	r1, #32
 801d802:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	2200      	movs	r2, #0
 801d808:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	2200      	movs	r2, #0
 801d80e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	681b      	ldr	r3, [r3, #0]
 801d814:	4a36      	ldr	r2, [pc, #216]	@ (801d8f0 <UART_RxISR_16BIT+0x1c4>)
 801d816:	4293      	cmp	r3, r2
 801d818:	d01f      	beq.n	801d85a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	681b      	ldr	r3, [r3, #0]
 801d81e:	685a      	ldr	r2, [r3, #4]
 801d820:	2380      	movs	r3, #128	@ 0x80
 801d822:	041b      	lsls	r3, r3, #16
 801d824:	4013      	ands	r3, r2
 801d826:	d018      	beq.n	801d85a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d828:	f3ef 8310 	mrs	r3, PRIMASK
 801d82c:	617b      	str	r3, [r7, #20]
  return(result);
 801d82e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d832:	2301      	movs	r3, #1
 801d834:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d836:	69bb      	ldr	r3, [r7, #24]
 801d838:	f383 8810 	msr	PRIMASK, r3
}
 801d83c:	46c0      	nop			@ (mov r8, r8)
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	681b      	ldr	r3, [r3, #0]
 801d842:	681a      	ldr	r2, [r3, #0]
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	681b      	ldr	r3, [r3, #0]
 801d848:	492a      	ldr	r1, [pc, #168]	@ (801d8f4 <UART_RxISR_16BIT+0x1c8>)
 801d84a:	400a      	ands	r2, r1
 801d84c:	601a      	str	r2, [r3, #0]
 801d84e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d850:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d852:	69fb      	ldr	r3, [r7, #28]
 801d854:	f383 8810 	msr	PRIMASK, r3
}
 801d858:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d85e:	2b01      	cmp	r3, #1
 801d860:	d130      	bne.n	801d8c4 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	2200      	movs	r2, #0
 801d866:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d868:	f3ef 8310 	mrs	r3, PRIMASK
 801d86c:	60bb      	str	r3, [r7, #8]
  return(result);
 801d86e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d870:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d872:	2301      	movs	r3, #1
 801d874:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d876:	68fb      	ldr	r3, [r7, #12]
 801d878:	f383 8810 	msr	PRIMASK, r3
}
 801d87c:	46c0      	nop			@ (mov r8, r8)
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	681a      	ldr	r2, [r3, #0]
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	681b      	ldr	r3, [r3, #0]
 801d888:	2110      	movs	r1, #16
 801d88a:	438a      	bics	r2, r1
 801d88c:	601a      	str	r2, [r3, #0]
 801d88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d890:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d892:	693b      	ldr	r3, [r7, #16]
 801d894:	f383 8810 	msr	PRIMASK, r3
}
 801d898:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	681b      	ldr	r3, [r3, #0]
 801d89e:	69db      	ldr	r3, [r3, #28]
 801d8a0:	2210      	movs	r2, #16
 801d8a2:	4013      	ands	r3, r2
 801d8a4:	2b10      	cmp	r3, #16
 801d8a6:	d103      	bne.n	801d8b0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	681b      	ldr	r3, [r3, #0]
 801d8ac:	2210      	movs	r2, #16
 801d8ae:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	22ac      	movs	r2, #172	@ 0xac
 801d8b4:	589b      	ldr	r3, [r3, r2]
 801d8b6:	687a      	ldr	r2, [r7, #4]
 801d8b8:	2158      	movs	r1, #88	@ 0x58
 801d8ba:	5a51      	ldrh	r1, [r2, r1]
 801d8bc:	687a      	ldr	r2, [r7, #4]
 801d8be:	0010      	movs	r0, r2
 801d8c0:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801d8c2:	e00e      	b.n	801d8e2 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	2294      	movs	r2, #148	@ 0x94
 801d8c8:	589b      	ldr	r3, [r3, r2]
 801d8ca:	687a      	ldr	r2, [r7, #4]
 801d8cc:	0010      	movs	r0, r2
 801d8ce:	4798      	blx	r3
}
 801d8d0:	e007      	b.n	801d8e2 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801d8d2:	687b      	ldr	r3, [r7, #4]
 801d8d4:	681b      	ldr	r3, [r3, #0]
 801d8d6:	699a      	ldr	r2, [r3, #24]
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	681b      	ldr	r3, [r3, #0]
 801d8dc:	2108      	movs	r1, #8
 801d8de:	430a      	orrs	r2, r1
 801d8e0:	619a      	str	r2, [r3, #24]
}
 801d8e2:	46c0      	nop			@ (mov r8, r8)
 801d8e4:	46bd      	mov	sp, r7
 801d8e6:	b014      	add	sp, #80	@ 0x50
 801d8e8:	bd80      	pop	{r7, pc}
 801d8ea:	46c0      	nop			@ (mov r8, r8)
 801d8ec:	fffffedf 	.word	0xfffffedf
 801d8f0:	40004800 	.word	0x40004800
 801d8f4:	fbffffff 	.word	0xfbffffff

0801d8f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801d8f8:	b580      	push	{r7, lr}
 801d8fa:	b082      	sub	sp, #8
 801d8fc:	af00      	add	r7, sp, #0
 801d8fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801d900:	46c0      	nop			@ (mov r8, r8)
 801d902:	46bd      	mov	sp, r7
 801d904:	b002      	add	sp, #8
 801d906:	bd80      	pop	{r7, pc}

0801d908 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801d908:	b580      	push	{r7, lr}
 801d90a:	b084      	sub	sp, #16
 801d90c:	af00      	add	r7, sp, #0
 801d90e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801d910:	687b      	ldr	r3, [r7, #4]
 801d912:	2244      	movs	r2, #68	@ 0x44
 801d914:	2100      	movs	r1, #0
 801d916:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801d918:	4b05      	ldr	r3, [pc, #20]	@ (801d930 <USB_EnableGlobalInt+0x28>)
 801d91a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801d91c:	68fb      	ldr	r3, [r7, #12]
 801d91e:	b299      	uxth	r1, r3
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	2240      	movs	r2, #64	@ 0x40
 801d924:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801d926:	2300      	movs	r3, #0
}
 801d928:	0018      	movs	r0, r3
 801d92a:	46bd      	mov	sp, r7
 801d92c:	b004      	add	sp, #16
 801d92e:	bd80      	pop	{r7, pc}
 801d930:	0000bf80 	.word	0x0000bf80

0801d934 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801d934:	b580      	push	{r7, lr}
 801d936:	b084      	sub	sp, #16
 801d938:	af00      	add	r7, sp, #0
 801d93a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801d93c:	4b09      	ldr	r3, [pc, #36]	@ (801d964 <USB_DisableGlobalInt+0x30>)
 801d93e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	2240      	movs	r2, #64	@ 0x40
 801d944:	5a9b      	ldrh	r3, [r3, r2]
 801d946:	b29b      	uxth	r3, r3
 801d948:	68fa      	ldr	r2, [r7, #12]
 801d94a:	b292      	uxth	r2, r2
 801d94c:	43d2      	mvns	r2, r2
 801d94e:	b292      	uxth	r2, r2
 801d950:	4013      	ands	r3, r2
 801d952:	b299      	uxth	r1, r3
 801d954:	687b      	ldr	r3, [r7, #4]
 801d956:	2240      	movs	r2, #64	@ 0x40
 801d958:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801d95a:	2300      	movs	r3, #0
}
 801d95c:	0018      	movs	r0, r3
 801d95e:	46bd      	mov	sp, r7
 801d960:	b004      	add	sp, #16
 801d962:	bd80      	pop	{r7, pc}
 801d964:	0000bf80 	.word	0x0000bf80

0801d968 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801d968:	b084      	sub	sp, #16
 801d96a:	b590      	push	{r4, r7, lr}
 801d96c:	b083      	sub	sp, #12
 801d96e:	af00      	add	r7, sp, #0
 801d970:	6078      	str	r0, [r7, #4]
 801d972:	2004      	movs	r0, #4
 801d974:	2410      	movs	r4, #16
 801d976:	1900      	adds	r0, r0, r4
 801d978:	2408      	movs	r4, #8
 801d97a:	46a4      	mov	ip, r4
 801d97c:	44bc      	add	ip, r7
 801d97e:	4460      	add	r0, ip
 801d980:	6001      	str	r1, [r0, #0]
 801d982:	6042      	str	r2, [r0, #4]
 801d984:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801d986:	687b      	ldr	r3, [r7, #4]
 801d988:	2240      	movs	r2, #64	@ 0x40
 801d98a:	2101      	movs	r1, #1
 801d98c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	2240      	movs	r2, #64	@ 0x40
 801d992:	2100      	movs	r1, #0
 801d994:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801d996:	687b      	ldr	r3, [r7, #4]
 801d998:	2244      	movs	r2, #68	@ 0x44
 801d99a:	2100      	movs	r1, #0
 801d99c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801d99e:	687b      	ldr	r3, [r7, #4]
 801d9a0:	2250      	movs	r2, #80	@ 0x50
 801d9a2:	2100      	movs	r1, #0
 801d9a4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801d9a6:	2300      	movs	r3, #0
}
 801d9a8:	0018      	movs	r0, r3
 801d9aa:	46bd      	mov	sp, r7
 801d9ac:	b003      	add	sp, #12
 801d9ae:	bc90      	pop	{r4, r7}
 801d9b0:	bc08      	pop	{r3}
 801d9b2:	b004      	add	sp, #16
 801d9b4:	4718      	bx	r3
	...

0801d9b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d9b8:	b580      	push	{r7, lr}
 801d9ba:	b09c      	sub	sp, #112	@ 0x70
 801d9bc:	af00      	add	r7, sp, #0
 801d9be:	6078      	str	r0, [r7, #4]
 801d9c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801d9c2:	236f      	movs	r3, #111	@ 0x6f
 801d9c4:	18fb      	adds	r3, r7, r3
 801d9c6:	2200      	movs	r2, #0
 801d9c8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801d9ca:	687a      	ldr	r2, [r7, #4]
 801d9cc:	683b      	ldr	r3, [r7, #0]
 801d9ce:	781b      	ldrb	r3, [r3, #0]
 801d9d0:	009b      	lsls	r3, r3, #2
 801d9d2:	18d3      	adds	r3, r2, r3
 801d9d4:	881b      	ldrh	r3, [r3, #0]
 801d9d6:	b29a      	uxth	r2, r3
 801d9d8:	236c      	movs	r3, #108	@ 0x6c
 801d9da:	18fb      	adds	r3, r7, r3
 801d9dc:	49a3      	ldr	r1, [pc, #652]	@ (801dc6c <USB_ActivateEndpoint+0x2b4>)
 801d9de:	400a      	ands	r2, r1
 801d9e0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801d9e2:	683b      	ldr	r3, [r7, #0]
 801d9e4:	78db      	ldrb	r3, [r3, #3]
 801d9e6:	2b03      	cmp	r3, #3
 801d9e8:	d017      	beq.n	801da1a <USB_ActivateEndpoint+0x62>
 801d9ea:	dc28      	bgt.n	801da3e <USB_ActivateEndpoint+0x86>
 801d9ec:	2b02      	cmp	r3, #2
 801d9ee:	d00e      	beq.n	801da0e <USB_ActivateEndpoint+0x56>
 801d9f0:	dc25      	bgt.n	801da3e <USB_ActivateEndpoint+0x86>
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	d002      	beq.n	801d9fc <USB_ActivateEndpoint+0x44>
 801d9f6:	2b01      	cmp	r3, #1
 801d9f8:	d018      	beq.n	801da2c <USB_ActivateEndpoint+0x74>
 801d9fa:	e020      	b.n	801da3e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801d9fc:	226c      	movs	r2, #108	@ 0x6c
 801d9fe:	18bb      	adds	r3, r7, r2
 801da00:	18ba      	adds	r2, r7, r2
 801da02:	8812      	ldrh	r2, [r2, #0]
 801da04:	2180      	movs	r1, #128	@ 0x80
 801da06:	0089      	lsls	r1, r1, #2
 801da08:	430a      	orrs	r2, r1
 801da0a:	801a      	strh	r2, [r3, #0]
      break;
 801da0c:	e01c      	b.n	801da48 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801da0e:	226c      	movs	r2, #108	@ 0x6c
 801da10:	18bb      	adds	r3, r7, r2
 801da12:	18ba      	adds	r2, r7, r2
 801da14:	8812      	ldrh	r2, [r2, #0]
 801da16:	801a      	strh	r2, [r3, #0]
      break;
 801da18:	e016      	b.n	801da48 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801da1a:	226c      	movs	r2, #108	@ 0x6c
 801da1c:	18bb      	adds	r3, r7, r2
 801da1e:	18ba      	adds	r2, r7, r2
 801da20:	8812      	ldrh	r2, [r2, #0]
 801da22:	21c0      	movs	r1, #192	@ 0xc0
 801da24:	00c9      	lsls	r1, r1, #3
 801da26:	430a      	orrs	r2, r1
 801da28:	801a      	strh	r2, [r3, #0]
      break;
 801da2a:	e00d      	b.n	801da48 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801da2c:	226c      	movs	r2, #108	@ 0x6c
 801da2e:	18bb      	adds	r3, r7, r2
 801da30:	18ba      	adds	r2, r7, r2
 801da32:	8812      	ldrh	r2, [r2, #0]
 801da34:	2180      	movs	r1, #128	@ 0x80
 801da36:	00c9      	lsls	r1, r1, #3
 801da38:	430a      	orrs	r2, r1
 801da3a:	801a      	strh	r2, [r3, #0]
      break;
 801da3c:	e004      	b.n	801da48 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801da3e:	236f      	movs	r3, #111	@ 0x6f
 801da40:	18fb      	adds	r3, r7, r3
 801da42:	2201      	movs	r2, #1
 801da44:	701a      	strb	r2, [r3, #0]
      break;
 801da46:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801da48:	687a      	ldr	r2, [r7, #4]
 801da4a:	683b      	ldr	r3, [r7, #0]
 801da4c:	781b      	ldrb	r3, [r3, #0]
 801da4e:	009b      	lsls	r3, r3, #2
 801da50:	18d3      	adds	r3, r2, r3
 801da52:	226c      	movs	r2, #108	@ 0x6c
 801da54:	18ba      	adds	r2, r7, r2
 801da56:	8812      	ldrh	r2, [r2, #0]
 801da58:	4985      	ldr	r1, [pc, #532]	@ (801dc70 <USB_ActivateEndpoint+0x2b8>)
 801da5a:	430a      	orrs	r2, r1
 801da5c:	b292      	uxth	r2, r2
 801da5e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801da60:	687a      	ldr	r2, [r7, #4]
 801da62:	683b      	ldr	r3, [r7, #0]
 801da64:	781b      	ldrb	r3, [r3, #0]
 801da66:	009b      	lsls	r3, r3, #2
 801da68:	18d3      	adds	r3, r2, r3
 801da6a:	881b      	ldrh	r3, [r3, #0]
 801da6c:	b29b      	uxth	r3, r3
 801da6e:	b21b      	sxth	r3, r3
 801da70:	4a80      	ldr	r2, [pc, #512]	@ (801dc74 <USB_ActivateEndpoint+0x2bc>)
 801da72:	4013      	ands	r3, r2
 801da74:	b21a      	sxth	r2, r3
 801da76:	683b      	ldr	r3, [r7, #0]
 801da78:	781b      	ldrb	r3, [r3, #0]
 801da7a:	b21b      	sxth	r3, r3
 801da7c:	4313      	orrs	r3, r2
 801da7e:	b21a      	sxth	r2, r3
 801da80:	2166      	movs	r1, #102	@ 0x66
 801da82:	187b      	adds	r3, r7, r1
 801da84:	801a      	strh	r2, [r3, #0]
 801da86:	687a      	ldr	r2, [r7, #4]
 801da88:	683b      	ldr	r3, [r7, #0]
 801da8a:	781b      	ldrb	r3, [r3, #0]
 801da8c:	009b      	lsls	r3, r3, #2
 801da8e:	18d3      	adds	r3, r2, r3
 801da90:	187a      	adds	r2, r7, r1
 801da92:	8812      	ldrh	r2, [r2, #0]
 801da94:	4976      	ldr	r1, [pc, #472]	@ (801dc70 <USB_ActivateEndpoint+0x2b8>)
 801da96:	430a      	orrs	r2, r1
 801da98:	b292      	uxth	r2, r2
 801da9a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801da9c:	683b      	ldr	r3, [r7, #0]
 801da9e:	7b1b      	ldrb	r3, [r3, #12]
 801daa0:	2b00      	cmp	r3, #0
 801daa2:	d000      	beq.n	801daa6 <USB_ActivateEndpoint+0xee>
 801daa4:	e178      	b.n	801dd98 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801daa6:	683b      	ldr	r3, [r7, #0]
 801daa8:	785b      	ldrb	r3, [r3, #1]
 801daaa:	2b00      	cmp	r3, #0
 801daac:	d100      	bne.n	801dab0 <USB_ActivateEndpoint+0xf8>
 801daae:	e07a      	b.n	801dba6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	61bb      	str	r3, [r7, #24]
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	2250      	movs	r2, #80	@ 0x50
 801dab8:	5a9b      	ldrh	r3, [r3, r2]
 801daba:	b29b      	uxth	r3, r3
 801dabc:	001a      	movs	r2, r3
 801dabe:	69bb      	ldr	r3, [r7, #24]
 801dac0:	189b      	adds	r3, r3, r2
 801dac2:	61bb      	str	r3, [r7, #24]
 801dac4:	683b      	ldr	r3, [r7, #0]
 801dac6:	781b      	ldrb	r3, [r3, #0]
 801dac8:	00da      	lsls	r2, r3, #3
 801daca:	69bb      	ldr	r3, [r7, #24]
 801dacc:	18d3      	adds	r3, r2, r3
 801dace:	2280      	movs	r2, #128	@ 0x80
 801dad0:	00d2      	lsls	r2, r2, #3
 801dad2:	4694      	mov	ip, r2
 801dad4:	4463      	add	r3, ip
 801dad6:	617b      	str	r3, [r7, #20]
 801dad8:	683b      	ldr	r3, [r7, #0]
 801dada:	88db      	ldrh	r3, [r3, #6]
 801dadc:	085b      	lsrs	r3, r3, #1
 801dade:	b29b      	uxth	r3, r3
 801dae0:	18db      	adds	r3, r3, r3
 801dae2:	b29a      	uxth	r2, r3
 801dae4:	697b      	ldr	r3, [r7, #20]
 801dae6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801dae8:	687a      	ldr	r2, [r7, #4]
 801daea:	683b      	ldr	r3, [r7, #0]
 801daec:	781b      	ldrb	r3, [r3, #0]
 801daee:	009b      	lsls	r3, r3, #2
 801daf0:	18d2      	adds	r2, r2, r3
 801daf2:	2112      	movs	r1, #18
 801daf4:	187b      	adds	r3, r7, r1
 801daf6:	8812      	ldrh	r2, [r2, #0]
 801daf8:	801a      	strh	r2, [r3, #0]
 801dafa:	187b      	adds	r3, r7, r1
 801dafc:	881b      	ldrh	r3, [r3, #0]
 801dafe:	2240      	movs	r2, #64	@ 0x40
 801db00:	4013      	ands	r3, r2
 801db02:	d016      	beq.n	801db32 <USB_ActivateEndpoint+0x17a>
 801db04:	687a      	ldr	r2, [r7, #4]
 801db06:	683b      	ldr	r3, [r7, #0]
 801db08:	781b      	ldrb	r3, [r3, #0]
 801db0a:	009b      	lsls	r3, r3, #2
 801db0c:	18d3      	adds	r3, r2, r3
 801db0e:	881b      	ldrh	r3, [r3, #0]
 801db10:	b29a      	uxth	r2, r3
 801db12:	2010      	movs	r0, #16
 801db14:	183b      	adds	r3, r7, r0
 801db16:	4957      	ldr	r1, [pc, #348]	@ (801dc74 <USB_ActivateEndpoint+0x2bc>)
 801db18:	400a      	ands	r2, r1
 801db1a:	801a      	strh	r2, [r3, #0]
 801db1c:	687a      	ldr	r2, [r7, #4]
 801db1e:	683b      	ldr	r3, [r7, #0]
 801db20:	781b      	ldrb	r3, [r3, #0]
 801db22:	009b      	lsls	r3, r3, #2
 801db24:	18d3      	adds	r3, r2, r3
 801db26:	183a      	adds	r2, r7, r0
 801db28:	8812      	ldrh	r2, [r2, #0]
 801db2a:	4953      	ldr	r1, [pc, #332]	@ (801dc78 <USB_ActivateEndpoint+0x2c0>)
 801db2c:	430a      	orrs	r2, r1
 801db2e:	b292      	uxth	r2, r2
 801db30:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801db32:	683b      	ldr	r3, [r7, #0]
 801db34:	78db      	ldrb	r3, [r3, #3]
 801db36:	2b01      	cmp	r3, #1
 801db38:	d01d      	beq.n	801db76 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801db3a:	687a      	ldr	r2, [r7, #4]
 801db3c:	683b      	ldr	r3, [r7, #0]
 801db3e:	781b      	ldrb	r3, [r3, #0]
 801db40:	009b      	lsls	r3, r3, #2
 801db42:	18d3      	adds	r3, r2, r3
 801db44:	881b      	ldrh	r3, [r3, #0]
 801db46:	b29a      	uxth	r2, r3
 801db48:	200c      	movs	r0, #12
 801db4a:	183b      	adds	r3, r7, r0
 801db4c:	494b      	ldr	r1, [pc, #300]	@ (801dc7c <USB_ActivateEndpoint+0x2c4>)
 801db4e:	400a      	ands	r2, r1
 801db50:	801a      	strh	r2, [r3, #0]
 801db52:	183b      	adds	r3, r7, r0
 801db54:	183a      	adds	r2, r7, r0
 801db56:	8812      	ldrh	r2, [r2, #0]
 801db58:	2120      	movs	r1, #32
 801db5a:	404a      	eors	r2, r1
 801db5c:	801a      	strh	r2, [r3, #0]
 801db5e:	687a      	ldr	r2, [r7, #4]
 801db60:	683b      	ldr	r3, [r7, #0]
 801db62:	781b      	ldrb	r3, [r3, #0]
 801db64:	009b      	lsls	r3, r3, #2
 801db66:	18d3      	adds	r3, r2, r3
 801db68:	183a      	adds	r2, r7, r0
 801db6a:	8812      	ldrh	r2, [r2, #0]
 801db6c:	4940      	ldr	r1, [pc, #256]	@ (801dc70 <USB_ActivateEndpoint+0x2b8>)
 801db6e:	430a      	orrs	r2, r1
 801db70:	b292      	uxth	r2, r2
 801db72:	801a      	strh	r2, [r3, #0]
 801db74:	e2b4      	b.n	801e0e0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801db76:	687a      	ldr	r2, [r7, #4]
 801db78:	683b      	ldr	r3, [r7, #0]
 801db7a:	781b      	ldrb	r3, [r3, #0]
 801db7c:	009b      	lsls	r3, r3, #2
 801db7e:	18d3      	adds	r3, r2, r3
 801db80:	881b      	ldrh	r3, [r3, #0]
 801db82:	b29a      	uxth	r2, r3
 801db84:	200e      	movs	r0, #14
 801db86:	183b      	adds	r3, r7, r0
 801db88:	493c      	ldr	r1, [pc, #240]	@ (801dc7c <USB_ActivateEndpoint+0x2c4>)
 801db8a:	400a      	ands	r2, r1
 801db8c:	801a      	strh	r2, [r3, #0]
 801db8e:	687a      	ldr	r2, [r7, #4]
 801db90:	683b      	ldr	r3, [r7, #0]
 801db92:	781b      	ldrb	r3, [r3, #0]
 801db94:	009b      	lsls	r3, r3, #2
 801db96:	18d3      	adds	r3, r2, r3
 801db98:	183a      	adds	r2, r7, r0
 801db9a:	8812      	ldrh	r2, [r2, #0]
 801db9c:	4934      	ldr	r1, [pc, #208]	@ (801dc70 <USB_ActivateEndpoint+0x2b8>)
 801db9e:	430a      	orrs	r2, r1
 801dba0:	b292      	uxth	r2, r2
 801dba2:	801a      	strh	r2, [r3, #0]
 801dba4:	e29c      	b.n	801e0e0 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	633b      	str	r3, [r7, #48]	@ 0x30
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	2250      	movs	r2, #80	@ 0x50
 801dbae:	5a9b      	ldrh	r3, [r3, r2]
 801dbb0:	b29b      	uxth	r3, r3
 801dbb2:	001a      	movs	r2, r3
 801dbb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbb6:	189b      	adds	r3, r3, r2
 801dbb8:	633b      	str	r3, [r7, #48]	@ 0x30
 801dbba:	683b      	ldr	r3, [r7, #0]
 801dbbc:	781b      	ldrb	r3, [r3, #0]
 801dbbe:	00da      	lsls	r2, r3, #3
 801dbc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbc2:	18d3      	adds	r3, r2, r3
 801dbc4:	4a2e      	ldr	r2, [pc, #184]	@ (801dc80 <USB_ActivateEndpoint+0x2c8>)
 801dbc6:	4694      	mov	ip, r2
 801dbc8:	4463      	add	r3, ip
 801dbca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801dbcc:	683b      	ldr	r3, [r7, #0]
 801dbce:	88db      	ldrh	r3, [r3, #6]
 801dbd0:	085b      	lsrs	r3, r3, #1
 801dbd2:	b29b      	uxth	r3, r3
 801dbd4:	18db      	adds	r3, r3, r3
 801dbd6:	b29a      	uxth	r2, r3
 801dbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dbda:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	62bb      	str	r3, [r7, #40]	@ 0x28
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	2250      	movs	r2, #80	@ 0x50
 801dbe4:	5a9b      	ldrh	r3, [r3, r2]
 801dbe6:	b29b      	uxth	r3, r3
 801dbe8:	001a      	movs	r2, r3
 801dbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dbec:	189b      	adds	r3, r3, r2
 801dbee:	62bb      	str	r3, [r7, #40]	@ 0x28
 801dbf0:	683b      	ldr	r3, [r7, #0]
 801dbf2:	781b      	ldrb	r3, [r3, #0]
 801dbf4:	00da      	lsls	r2, r3, #3
 801dbf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dbf8:	18d3      	adds	r3, r2, r3
 801dbfa:	4a22      	ldr	r2, [pc, #136]	@ (801dc84 <USB_ActivateEndpoint+0x2cc>)
 801dbfc:	4694      	mov	ip, r2
 801dbfe:	4463      	add	r3, ip
 801dc00:	627b      	str	r3, [r7, #36]	@ 0x24
 801dc02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc04:	881b      	ldrh	r3, [r3, #0]
 801dc06:	b29b      	uxth	r3, r3
 801dc08:	059b      	lsls	r3, r3, #22
 801dc0a:	0d9b      	lsrs	r3, r3, #22
 801dc0c:	b29a      	uxth	r2, r3
 801dc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc10:	801a      	strh	r2, [r3, #0]
 801dc12:	683b      	ldr	r3, [r7, #0]
 801dc14:	691b      	ldr	r3, [r3, #16]
 801dc16:	2b3e      	cmp	r3, #62	@ 0x3e
 801dc18:	d91a      	bls.n	801dc50 <USB_ActivateEndpoint+0x298>
 801dc1a:	683b      	ldr	r3, [r7, #0]
 801dc1c:	691b      	ldr	r3, [r3, #16]
 801dc1e:	095b      	lsrs	r3, r3, #5
 801dc20:	66bb      	str	r3, [r7, #104]	@ 0x68
 801dc22:	683b      	ldr	r3, [r7, #0]
 801dc24:	691b      	ldr	r3, [r3, #16]
 801dc26:	221f      	movs	r2, #31
 801dc28:	4013      	ands	r3, r2
 801dc2a:	d102      	bne.n	801dc32 <USB_ActivateEndpoint+0x27a>
 801dc2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dc2e:	3b01      	subs	r3, #1
 801dc30:	66bb      	str	r3, [r7, #104]	@ 0x68
 801dc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc34:	881b      	ldrh	r3, [r3, #0]
 801dc36:	b29a      	uxth	r2, r3
 801dc38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dc3a:	b29b      	uxth	r3, r3
 801dc3c:	029b      	lsls	r3, r3, #10
 801dc3e:	b29b      	uxth	r3, r3
 801dc40:	4313      	orrs	r3, r2
 801dc42:	b29b      	uxth	r3, r3
 801dc44:	4a10      	ldr	r2, [pc, #64]	@ (801dc88 <USB_ActivateEndpoint+0x2d0>)
 801dc46:	4313      	orrs	r3, r2
 801dc48:	b29a      	uxth	r2, r3
 801dc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc4c:	801a      	strh	r2, [r3, #0]
 801dc4e:	e034      	b.n	801dcba <USB_ActivateEndpoint+0x302>
 801dc50:	683b      	ldr	r3, [r7, #0]
 801dc52:	691b      	ldr	r3, [r3, #16]
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	d119      	bne.n	801dc8c <USB_ActivateEndpoint+0x2d4>
 801dc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc5a:	881b      	ldrh	r3, [r3, #0]
 801dc5c:	b29b      	uxth	r3, r3
 801dc5e:	4a0a      	ldr	r2, [pc, #40]	@ (801dc88 <USB_ActivateEndpoint+0x2d0>)
 801dc60:	4313      	orrs	r3, r2
 801dc62:	b29a      	uxth	r2, r3
 801dc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc66:	801a      	strh	r2, [r3, #0]
 801dc68:	e027      	b.n	801dcba <USB_ActivateEndpoint+0x302>
 801dc6a:	46c0      	nop			@ (mov r8, r8)
 801dc6c:	ffff898f 	.word	0xffff898f
 801dc70:	ffff8080 	.word	0xffff8080
 801dc74:	ffff8f8f 	.word	0xffff8f8f
 801dc78:	ffff80c0 	.word	0xffff80c0
 801dc7c:	ffff8fbf 	.word	0xffff8fbf
 801dc80:	00000404 	.word	0x00000404
 801dc84:	00000406 	.word	0x00000406
 801dc88:	ffff8000 	.word	0xffff8000
 801dc8c:	683b      	ldr	r3, [r7, #0]
 801dc8e:	691b      	ldr	r3, [r3, #16]
 801dc90:	085b      	lsrs	r3, r3, #1
 801dc92:	66bb      	str	r3, [r7, #104]	@ 0x68
 801dc94:	683b      	ldr	r3, [r7, #0]
 801dc96:	691b      	ldr	r3, [r3, #16]
 801dc98:	2201      	movs	r2, #1
 801dc9a:	4013      	ands	r3, r2
 801dc9c:	d002      	beq.n	801dca4 <USB_ActivateEndpoint+0x2ec>
 801dc9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dca0:	3301      	adds	r3, #1
 801dca2:	66bb      	str	r3, [r7, #104]	@ 0x68
 801dca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dca6:	881b      	ldrh	r3, [r3, #0]
 801dca8:	b29a      	uxth	r2, r3
 801dcaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dcac:	b29b      	uxth	r3, r3
 801dcae:	029b      	lsls	r3, r3, #10
 801dcb0:	b29b      	uxth	r3, r3
 801dcb2:	4313      	orrs	r3, r2
 801dcb4:	b29a      	uxth	r2, r3
 801dcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dcb8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801dcba:	687a      	ldr	r2, [r7, #4]
 801dcbc:	683b      	ldr	r3, [r7, #0]
 801dcbe:	781b      	ldrb	r3, [r3, #0]
 801dcc0:	009b      	lsls	r3, r3, #2
 801dcc2:	18d2      	adds	r2, r2, r3
 801dcc4:	2122      	movs	r1, #34	@ 0x22
 801dcc6:	187b      	adds	r3, r7, r1
 801dcc8:	8812      	ldrh	r2, [r2, #0]
 801dcca:	801a      	strh	r2, [r3, #0]
 801dccc:	187b      	adds	r3, r7, r1
 801dcce:	881a      	ldrh	r2, [r3, #0]
 801dcd0:	2380      	movs	r3, #128	@ 0x80
 801dcd2:	01db      	lsls	r3, r3, #7
 801dcd4:	4013      	ands	r3, r2
 801dcd6:	d016      	beq.n	801dd06 <USB_ActivateEndpoint+0x34e>
 801dcd8:	687a      	ldr	r2, [r7, #4]
 801dcda:	683b      	ldr	r3, [r7, #0]
 801dcdc:	781b      	ldrb	r3, [r3, #0]
 801dcde:	009b      	lsls	r3, r3, #2
 801dce0:	18d3      	adds	r3, r2, r3
 801dce2:	881b      	ldrh	r3, [r3, #0]
 801dce4:	b29a      	uxth	r2, r3
 801dce6:	2020      	movs	r0, #32
 801dce8:	183b      	adds	r3, r7, r0
 801dcea:	49dd      	ldr	r1, [pc, #884]	@ (801e060 <USB_ActivateEndpoint+0x6a8>)
 801dcec:	400a      	ands	r2, r1
 801dcee:	801a      	strh	r2, [r3, #0]
 801dcf0:	687a      	ldr	r2, [r7, #4]
 801dcf2:	683b      	ldr	r3, [r7, #0]
 801dcf4:	781b      	ldrb	r3, [r3, #0]
 801dcf6:	009b      	lsls	r3, r3, #2
 801dcf8:	18d3      	adds	r3, r2, r3
 801dcfa:	183a      	adds	r2, r7, r0
 801dcfc:	8812      	ldrh	r2, [r2, #0]
 801dcfe:	49d9      	ldr	r1, [pc, #868]	@ (801e064 <USB_ActivateEndpoint+0x6ac>)
 801dd00:	430a      	orrs	r2, r1
 801dd02:	b292      	uxth	r2, r2
 801dd04:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801dd06:	683b      	ldr	r3, [r7, #0]
 801dd08:	781b      	ldrb	r3, [r3, #0]
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	d125      	bne.n	801dd5a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801dd0e:	687a      	ldr	r2, [r7, #4]
 801dd10:	683b      	ldr	r3, [r7, #0]
 801dd12:	781b      	ldrb	r3, [r3, #0]
 801dd14:	009b      	lsls	r3, r3, #2
 801dd16:	18d3      	adds	r3, r2, r3
 801dd18:	881b      	ldrh	r3, [r3, #0]
 801dd1a:	b29a      	uxth	r2, r3
 801dd1c:	201c      	movs	r0, #28
 801dd1e:	183b      	adds	r3, r7, r0
 801dd20:	49d1      	ldr	r1, [pc, #836]	@ (801e068 <USB_ActivateEndpoint+0x6b0>)
 801dd22:	400a      	ands	r2, r1
 801dd24:	801a      	strh	r2, [r3, #0]
 801dd26:	183b      	adds	r3, r7, r0
 801dd28:	183a      	adds	r2, r7, r0
 801dd2a:	8812      	ldrh	r2, [r2, #0]
 801dd2c:	2180      	movs	r1, #128	@ 0x80
 801dd2e:	0149      	lsls	r1, r1, #5
 801dd30:	404a      	eors	r2, r1
 801dd32:	801a      	strh	r2, [r3, #0]
 801dd34:	183b      	adds	r3, r7, r0
 801dd36:	183a      	adds	r2, r7, r0
 801dd38:	8812      	ldrh	r2, [r2, #0]
 801dd3a:	2180      	movs	r1, #128	@ 0x80
 801dd3c:	0189      	lsls	r1, r1, #6
 801dd3e:	404a      	eors	r2, r1
 801dd40:	801a      	strh	r2, [r3, #0]
 801dd42:	687a      	ldr	r2, [r7, #4]
 801dd44:	683b      	ldr	r3, [r7, #0]
 801dd46:	781b      	ldrb	r3, [r3, #0]
 801dd48:	009b      	lsls	r3, r3, #2
 801dd4a:	18d3      	adds	r3, r2, r3
 801dd4c:	183a      	adds	r2, r7, r0
 801dd4e:	8812      	ldrh	r2, [r2, #0]
 801dd50:	49c6      	ldr	r1, [pc, #792]	@ (801e06c <USB_ActivateEndpoint+0x6b4>)
 801dd52:	430a      	orrs	r2, r1
 801dd54:	b292      	uxth	r2, r2
 801dd56:	801a      	strh	r2, [r3, #0]
 801dd58:	e1c2      	b.n	801e0e0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801dd5a:	687a      	ldr	r2, [r7, #4]
 801dd5c:	683b      	ldr	r3, [r7, #0]
 801dd5e:	781b      	ldrb	r3, [r3, #0]
 801dd60:	009b      	lsls	r3, r3, #2
 801dd62:	18d3      	adds	r3, r2, r3
 801dd64:	881b      	ldrh	r3, [r3, #0]
 801dd66:	b29a      	uxth	r2, r3
 801dd68:	201e      	movs	r0, #30
 801dd6a:	183b      	adds	r3, r7, r0
 801dd6c:	49be      	ldr	r1, [pc, #760]	@ (801e068 <USB_ActivateEndpoint+0x6b0>)
 801dd6e:	400a      	ands	r2, r1
 801dd70:	801a      	strh	r2, [r3, #0]
 801dd72:	183b      	adds	r3, r7, r0
 801dd74:	183a      	adds	r2, r7, r0
 801dd76:	8812      	ldrh	r2, [r2, #0]
 801dd78:	2180      	movs	r1, #128	@ 0x80
 801dd7a:	0189      	lsls	r1, r1, #6
 801dd7c:	404a      	eors	r2, r1
 801dd7e:	801a      	strh	r2, [r3, #0]
 801dd80:	687a      	ldr	r2, [r7, #4]
 801dd82:	683b      	ldr	r3, [r7, #0]
 801dd84:	781b      	ldrb	r3, [r3, #0]
 801dd86:	009b      	lsls	r3, r3, #2
 801dd88:	18d3      	adds	r3, r2, r3
 801dd8a:	183a      	adds	r2, r7, r0
 801dd8c:	8812      	ldrh	r2, [r2, #0]
 801dd8e:	49b7      	ldr	r1, [pc, #732]	@ (801e06c <USB_ActivateEndpoint+0x6b4>)
 801dd90:	430a      	orrs	r2, r1
 801dd92:	b292      	uxth	r2, r2
 801dd94:	801a      	strh	r2, [r3, #0]
 801dd96:	e1a3      	b.n	801e0e0 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801dd98:	683b      	ldr	r3, [r7, #0]
 801dd9a:	78db      	ldrb	r3, [r3, #3]
 801dd9c:	2b02      	cmp	r3, #2
 801dd9e:	d117      	bne.n	801ddd0 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801dda0:	687a      	ldr	r2, [r7, #4]
 801dda2:	683b      	ldr	r3, [r7, #0]
 801dda4:	781b      	ldrb	r3, [r3, #0]
 801dda6:	009b      	lsls	r3, r3, #2
 801dda8:	18d3      	adds	r3, r2, r3
 801ddaa:	881b      	ldrh	r3, [r3, #0]
 801ddac:	b29a      	uxth	r2, r3
 801ddae:	2062      	movs	r0, #98	@ 0x62
 801ddb0:	183b      	adds	r3, r7, r0
 801ddb2:	49ab      	ldr	r1, [pc, #684]	@ (801e060 <USB_ActivateEndpoint+0x6a8>)
 801ddb4:	400a      	ands	r2, r1
 801ddb6:	801a      	strh	r2, [r3, #0]
 801ddb8:	687a      	ldr	r2, [r7, #4]
 801ddba:	683b      	ldr	r3, [r7, #0]
 801ddbc:	781b      	ldrb	r3, [r3, #0]
 801ddbe:	009b      	lsls	r3, r3, #2
 801ddc0:	18d3      	adds	r3, r2, r3
 801ddc2:	183a      	adds	r2, r7, r0
 801ddc4:	8812      	ldrh	r2, [r2, #0]
 801ddc6:	49aa      	ldr	r1, [pc, #680]	@ (801e070 <USB_ActivateEndpoint+0x6b8>)
 801ddc8:	430a      	orrs	r2, r1
 801ddca:	b292      	uxth	r2, r2
 801ddcc:	801a      	strh	r2, [r3, #0]
 801ddce:	e016      	b.n	801ddfe <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801ddd0:	687a      	ldr	r2, [r7, #4]
 801ddd2:	683b      	ldr	r3, [r7, #0]
 801ddd4:	781b      	ldrb	r3, [r3, #0]
 801ddd6:	009b      	lsls	r3, r3, #2
 801ddd8:	18d3      	adds	r3, r2, r3
 801ddda:	881b      	ldrh	r3, [r3, #0]
 801dddc:	b29a      	uxth	r2, r3
 801ddde:	2064      	movs	r0, #100	@ 0x64
 801dde0:	183b      	adds	r3, r7, r0
 801dde2:	49a4      	ldr	r1, [pc, #656]	@ (801e074 <USB_ActivateEndpoint+0x6bc>)
 801dde4:	400a      	ands	r2, r1
 801dde6:	801a      	strh	r2, [r3, #0]
 801dde8:	687a      	ldr	r2, [r7, #4]
 801ddea:	683b      	ldr	r3, [r7, #0]
 801ddec:	781b      	ldrb	r3, [r3, #0]
 801ddee:	009b      	lsls	r3, r3, #2
 801ddf0:	18d3      	adds	r3, r2, r3
 801ddf2:	183a      	adds	r2, r7, r0
 801ddf4:	8812      	ldrh	r2, [r2, #0]
 801ddf6:	499d      	ldr	r1, [pc, #628]	@ (801e06c <USB_ActivateEndpoint+0x6b4>)
 801ddf8:	430a      	orrs	r2, r1
 801ddfa:	b292      	uxth	r2, r2
 801ddfc:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801ddfe:	687b      	ldr	r3, [r7, #4]
 801de00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	2250      	movs	r2, #80	@ 0x50
 801de06:	5a9b      	ldrh	r3, [r3, r2]
 801de08:	b29b      	uxth	r3, r3
 801de0a:	001a      	movs	r2, r3
 801de0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801de0e:	189b      	adds	r3, r3, r2
 801de10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801de12:	683b      	ldr	r3, [r7, #0]
 801de14:	781b      	ldrb	r3, [r3, #0]
 801de16:	00da      	lsls	r2, r3, #3
 801de18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801de1a:	18d3      	adds	r3, r2, r3
 801de1c:	2280      	movs	r2, #128	@ 0x80
 801de1e:	00d2      	lsls	r2, r2, #3
 801de20:	4694      	mov	ip, r2
 801de22:	4463      	add	r3, ip
 801de24:	65bb      	str	r3, [r7, #88]	@ 0x58
 801de26:	683b      	ldr	r3, [r7, #0]
 801de28:	891b      	ldrh	r3, [r3, #8]
 801de2a:	085b      	lsrs	r3, r3, #1
 801de2c:	b29b      	uxth	r3, r3
 801de2e:	18db      	adds	r3, r3, r3
 801de30:	b29a      	uxth	r2, r3
 801de32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801de34:	801a      	strh	r2, [r3, #0]
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	657b      	str	r3, [r7, #84]	@ 0x54
 801de3a:	687b      	ldr	r3, [r7, #4]
 801de3c:	2250      	movs	r2, #80	@ 0x50
 801de3e:	5a9b      	ldrh	r3, [r3, r2]
 801de40:	b29b      	uxth	r3, r3
 801de42:	001a      	movs	r2, r3
 801de44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801de46:	189b      	adds	r3, r3, r2
 801de48:	657b      	str	r3, [r7, #84]	@ 0x54
 801de4a:	683b      	ldr	r3, [r7, #0]
 801de4c:	781b      	ldrb	r3, [r3, #0]
 801de4e:	00da      	lsls	r2, r3, #3
 801de50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801de52:	18d3      	adds	r3, r2, r3
 801de54:	4a88      	ldr	r2, [pc, #544]	@ (801e078 <USB_ActivateEndpoint+0x6c0>)
 801de56:	4694      	mov	ip, r2
 801de58:	4463      	add	r3, ip
 801de5a:	653b      	str	r3, [r7, #80]	@ 0x50
 801de5c:	683b      	ldr	r3, [r7, #0]
 801de5e:	895b      	ldrh	r3, [r3, #10]
 801de60:	085b      	lsrs	r3, r3, #1
 801de62:	b29b      	uxth	r3, r3
 801de64:	18db      	adds	r3, r3, r3
 801de66:	b29a      	uxth	r2, r3
 801de68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801de6a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801de6c:	683b      	ldr	r3, [r7, #0]
 801de6e:	785b      	ldrb	r3, [r3, #1]
 801de70:	2b00      	cmp	r3, #0
 801de72:	d000      	beq.n	801de76 <USB_ActivateEndpoint+0x4be>
 801de74:	e087      	b.n	801df86 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801de76:	687a      	ldr	r2, [r7, #4]
 801de78:	683b      	ldr	r3, [r7, #0]
 801de7a:	781b      	ldrb	r3, [r3, #0]
 801de7c:	009b      	lsls	r3, r3, #2
 801de7e:	18d2      	adds	r2, r2, r3
 801de80:	2140      	movs	r1, #64	@ 0x40
 801de82:	187b      	adds	r3, r7, r1
 801de84:	8812      	ldrh	r2, [r2, #0]
 801de86:	801a      	strh	r2, [r3, #0]
 801de88:	187b      	adds	r3, r7, r1
 801de8a:	881a      	ldrh	r2, [r3, #0]
 801de8c:	2380      	movs	r3, #128	@ 0x80
 801de8e:	01db      	lsls	r3, r3, #7
 801de90:	4013      	ands	r3, r2
 801de92:	d016      	beq.n	801dec2 <USB_ActivateEndpoint+0x50a>
 801de94:	687a      	ldr	r2, [r7, #4]
 801de96:	683b      	ldr	r3, [r7, #0]
 801de98:	781b      	ldrb	r3, [r3, #0]
 801de9a:	009b      	lsls	r3, r3, #2
 801de9c:	18d3      	adds	r3, r2, r3
 801de9e:	881b      	ldrh	r3, [r3, #0]
 801dea0:	b29a      	uxth	r2, r3
 801dea2:	203e      	movs	r0, #62	@ 0x3e
 801dea4:	183b      	adds	r3, r7, r0
 801dea6:	496e      	ldr	r1, [pc, #440]	@ (801e060 <USB_ActivateEndpoint+0x6a8>)
 801dea8:	400a      	ands	r2, r1
 801deaa:	801a      	strh	r2, [r3, #0]
 801deac:	687a      	ldr	r2, [r7, #4]
 801deae:	683b      	ldr	r3, [r7, #0]
 801deb0:	781b      	ldrb	r3, [r3, #0]
 801deb2:	009b      	lsls	r3, r3, #2
 801deb4:	18d3      	adds	r3, r2, r3
 801deb6:	183a      	adds	r2, r7, r0
 801deb8:	8812      	ldrh	r2, [r2, #0]
 801deba:	496a      	ldr	r1, [pc, #424]	@ (801e064 <USB_ActivateEndpoint+0x6ac>)
 801debc:	430a      	orrs	r2, r1
 801debe:	b292      	uxth	r2, r2
 801dec0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801dec2:	687a      	ldr	r2, [r7, #4]
 801dec4:	683b      	ldr	r3, [r7, #0]
 801dec6:	781b      	ldrb	r3, [r3, #0]
 801dec8:	009b      	lsls	r3, r3, #2
 801deca:	18d2      	adds	r2, r2, r3
 801decc:	213c      	movs	r1, #60	@ 0x3c
 801dece:	187b      	adds	r3, r7, r1
 801ded0:	8812      	ldrh	r2, [r2, #0]
 801ded2:	801a      	strh	r2, [r3, #0]
 801ded4:	187b      	adds	r3, r7, r1
 801ded6:	881b      	ldrh	r3, [r3, #0]
 801ded8:	2240      	movs	r2, #64	@ 0x40
 801deda:	4013      	ands	r3, r2
 801dedc:	d016      	beq.n	801df0c <USB_ActivateEndpoint+0x554>
 801dede:	687a      	ldr	r2, [r7, #4]
 801dee0:	683b      	ldr	r3, [r7, #0]
 801dee2:	781b      	ldrb	r3, [r3, #0]
 801dee4:	009b      	lsls	r3, r3, #2
 801dee6:	18d3      	adds	r3, r2, r3
 801dee8:	881b      	ldrh	r3, [r3, #0]
 801deea:	b29a      	uxth	r2, r3
 801deec:	203a      	movs	r0, #58	@ 0x3a
 801deee:	183b      	adds	r3, r7, r0
 801def0:	495b      	ldr	r1, [pc, #364]	@ (801e060 <USB_ActivateEndpoint+0x6a8>)
 801def2:	400a      	ands	r2, r1
 801def4:	801a      	strh	r2, [r3, #0]
 801def6:	687a      	ldr	r2, [r7, #4]
 801def8:	683b      	ldr	r3, [r7, #0]
 801defa:	781b      	ldrb	r3, [r3, #0]
 801defc:	009b      	lsls	r3, r3, #2
 801defe:	18d3      	adds	r3, r2, r3
 801df00:	183a      	adds	r2, r7, r0
 801df02:	8812      	ldrh	r2, [r2, #0]
 801df04:	495d      	ldr	r1, [pc, #372]	@ (801e07c <USB_ActivateEndpoint+0x6c4>)
 801df06:	430a      	orrs	r2, r1
 801df08:	b292      	uxth	r2, r2
 801df0a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801df0c:	687a      	ldr	r2, [r7, #4]
 801df0e:	683b      	ldr	r3, [r7, #0]
 801df10:	781b      	ldrb	r3, [r3, #0]
 801df12:	009b      	lsls	r3, r3, #2
 801df14:	18d3      	adds	r3, r2, r3
 801df16:	881b      	ldrh	r3, [r3, #0]
 801df18:	b29a      	uxth	r2, r3
 801df1a:	2038      	movs	r0, #56	@ 0x38
 801df1c:	183b      	adds	r3, r7, r0
 801df1e:	4952      	ldr	r1, [pc, #328]	@ (801e068 <USB_ActivateEndpoint+0x6b0>)
 801df20:	400a      	ands	r2, r1
 801df22:	801a      	strh	r2, [r3, #0]
 801df24:	183b      	adds	r3, r7, r0
 801df26:	183a      	adds	r2, r7, r0
 801df28:	8812      	ldrh	r2, [r2, #0]
 801df2a:	2180      	movs	r1, #128	@ 0x80
 801df2c:	0149      	lsls	r1, r1, #5
 801df2e:	404a      	eors	r2, r1
 801df30:	801a      	strh	r2, [r3, #0]
 801df32:	183b      	adds	r3, r7, r0
 801df34:	183a      	adds	r2, r7, r0
 801df36:	8812      	ldrh	r2, [r2, #0]
 801df38:	2180      	movs	r1, #128	@ 0x80
 801df3a:	0189      	lsls	r1, r1, #6
 801df3c:	404a      	eors	r2, r1
 801df3e:	801a      	strh	r2, [r3, #0]
 801df40:	687a      	ldr	r2, [r7, #4]
 801df42:	683b      	ldr	r3, [r7, #0]
 801df44:	781b      	ldrb	r3, [r3, #0]
 801df46:	009b      	lsls	r3, r3, #2
 801df48:	18d3      	adds	r3, r2, r3
 801df4a:	183a      	adds	r2, r7, r0
 801df4c:	8812      	ldrh	r2, [r2, #0]
 801df4e:	4947      	ldr	r1, [pc, #284]	@ (801e06c <USB_ActivateEndpoint+0x6b4>)
 801df50:	430a      	orrs	r2, r1
 801df52:	b292      	uxth	r2, r2
 801df54:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801df56:	687a      	ldr	r2, [r7, #4]
 801df58:	683b      	ldr	r3, [r7, #0]
 801df5a:	781b      	ldrb	r3, [r3, #0]
 801df5c:	009b      	lsls	r3, r3, #2
 801df5e:	18d3      	adds	r3, r2, r3
 801df60:	881b      	ldrh	r3, [r3, #0]
 801df62:	b29a      	uxth	r2, r3
 801df64:	2036      	movs	r0, #54	@ 0x36
 801df66:	183b      	adds	r3, r7, r0
 801df68:	4945      	ldr	r1, [pc, #276]	@ (801e080 <USB_ActivateEndpoint+0x6c8>)
 801df6a:	400a      	ands	r2, r1
 801df6c:	801a      	strh	r2, [r3, #0]
 801df6e:	687a      	ldr	r2, [r7, #4]
 801df70:	683b      	ldr	r3, [r7, #0]
 801df72:	781b      	ldrb	r3, [r3, #0]
 801df74:	009b      	lsls	r3, r3, #2
 801df76:	18d3      	adds	r3, r2, r3
 801df78:	183a      	adds	r2, r7, r0
 801df7a:	8812      	ldrh	r2, [r2, #0]
 801df7c:	493b      	ldr	r1, [pc, #236]	@ (801e06c <USB_ActivateEndpoint+0x6b4>)
 801df7e:	430a      	orrs	r2, r1
 801df80:	b292      	uxth	r2, r2
 801df82:	801a      	strh	r2, [r3, #0]
 801df84:	e0ac      	b.n	801e0e0 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801df86:	687a      	ldr	r2, [r7, #4]
 801df88:	683b      	ldr	r3, [r7, #0]
 801df8a:	781b      	ldrb	r3, [r3, #0]
 801df8c:	009b      	lsls	r3, r3, #2
 801df8e:	18d2      	adds	r2, r2, r3
 801df90:	214e      	movs	r1, #78	@ 0x4e
 801df92:	187b      	adds	r3, r7, r1
 801df94:	8812      	ldrh	r2, [r2, #0]
 801df96:	801a      	strh	r2, [r3, #0]
 801df98:	187b      	adds	r3, r7, r1
 801df9a:	881a      	ldrh	r2, [r3, #0]
 801df9c:	2380      	movs	r3, #128	@ 0x80
 801df9e:	01db      	lsls	r3, r3, #7
 801dfa0:	4013      	ands	r3, r2
 801dfa2:	d016      	beq.n	801dfd2 <USB_ActivateEndpoint+0x61a>
 801dfa4:	687a      	ldr	r2, [r7, #4]
 801dfa6:	683b      	ldr	r3, [r7, #0]
 801dfa8:	781b      	ldrb	r3, [r3, #0]
 801dfaa:	009b      	lsls	r3, r3, #2
 801dfac:	18d3      	adds	r3, r2, r3
 801dfae:	881b      	ldrh	r3, [r3, #0]
 801dfb0:	b29a      	uxth	r2, r3
 801dfb2:	204c      	movs	r0, #76	@ 0x4c
 801dfb4:	183b      	adds	r3, r7, r0
 801dfb6:	492a      	ldr	r1, [pc, #168]	@ (801e060 <USB_ActivateEndpoint+0x6a8>)
 801dfb8:	400a      	ands	r2, r1
 801dfba:	801a      	strh	r2, [r3, #0]
 801dfbc:	687a      	ldr	r2, [r7, #4]
 801dfbe:	683b      	ldr	r3, [r7, #0]
 801dfc0:	781b      	ldrb	r3, [r3, #0]
 801dfc2:	009b      	lsls	r3, r3, #2
 801dfc4:	18d3      	adds	r3, r2, r3
 801dfc6:	183a      	adds	r2, r7, r0
 801dfc8:	8812      	ldrh	r2, [r2, #0]
 801dfca:	4926      	ldr	r1, [pc, #152]	@ (801e064 <USB_ActivateEndpoint+0x6ac>)
 801dfcc:	430a      	orrs	r2, r1
 801dfce:	b292      	uxth	r2, r2
 801dfd0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801dfd2:	687a      	ldr	r2, [r7, #4]
 801dfd4:	683b      	ldr	r3, [r7, #0]
 801dfd6:	781b      	ldrb	r3, [r3, #0]
 801dfd8:	009b      	lsls	r3, r3, #2
 801dfda:	18d2      	adds	r2, r2, r3
 801dfdc:	214a      	movs	r1, #74	@ 0x4a
 801dfde:	187b      	adds	r3, r7, r1
 801dfe0:	8812      	ldrh	r2, [r2, #0]
 801dfe2:	801a      	strh	r2, [r3, #0]
 801dfe4:	187b      	adds	r3, r7, r1
 801dfe6:	881b      	ldrh	r3, [r3, #0]
 801dfe8:	2240      	movs	r2, #64	@ 0x40
 801dfea:	4013      	ands	r3, r2
 801dfec:	d016      	beq.n	801e01c <USB_ActivateEndpoint+0x664>
 801dfee:	687a      	ldr	r2, [r7, #4]
 801dff0:	683b      	ldr	r3, [r7, #0]
 801dff2:	781b      	ldrb	r3, [r3, #0]
 801dff4:	009b      	lsls	r3, r3, #2
 801dff6:	18d3      	adds	r3, r2, r3
 801dff8:	881b      	ldrh	r3, [r3, #0]
 801dffa:	b29a      	uxth	r2, r3
 801dffc:	2048      	movs	r0, #72	@ 0x48
 801dffe:	183b      	adds	r3, r7, r0
 801e000:	4917      	ldr	r1, [pc, #92]	@ (801e060 <USB_ActivateEndpoint+0x6a8>)
 801e002:	400a      	ands	r2, r1
 801e004:	801a      	strh	r2, [r3, #0]
 801e006:	687a      	ldr	r2, [r7, #4]
 801e008:	683b      	ldr	r3, [r7, #0]
 801e00a:	781b      	ldrb	r3, [r3, #0]
 801e00c:	009b      	lsls	r3, r3, #2
 801e00e:	18d3      	adds	r3, r2, r3
 801e010:	183a      	adds	r2, r7, r0
 801e012:	8812      	ldrh	r2, [r2, #0]
 801e014:	4919      	ldr	r1, [pc, #100]	@ (801e07c <USB_ActivateEndpoint+0x6c4>)
 801e016:	430a      	orrs	r2, r1
 801e018:	b292      	uxth	r2, r2
 801e01a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e01c:	683b      	ldr	r3, [r7, #0]
 801e01e:	78db      	ldrb	r3, [r3, #3]
 801e020:	2b01      	cmp	r3, #1
 801e022:	d02f      	beq.n	801e084 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801e024:	687a      	ldr	r2, [r7, #4]
 801e026:	683b      	ldr	r3, [r7, #0]
 801e028:	781b      	ldrb	r3, [r3, #0]
 801e02a:	009b      	lsls	r3, r3, #2
 801e02c:	18d3      	adds	r3, r2, r3
 801e02e:	881b      	ldrh	r3, [r3, #0]
 801e030:	b29a      	uxth	r2, r3
 801e032:	2044      	movs	r0, #68	@ 0x44
 801e034:	183b      	adds	r3, r7, r0
 801e036:	4912      	ldr	r1, [pc, #72]	@ (801e080 <USB_ActivateEndpoint+0x6c8>)
 801e038:	400a      	ands	r2, r1
 801e03a:	801a      	strh	r2, [r3, #0]
 801e03c:	183b      	adds	r3, r7, r0
 801e03e:	183a      	adds	r2, r7, r0
 801e040:	8812      	ldrh	r2, [r2, #0]
 801e042:	2120      	movs	r1, #32
 801e044:	404a      	eors	r2, r1
 801e046:	801a      	strh	r2, [r3, #0]
 801e048:	687a      	ldr	r2, [r7, #4]
 801e04a:	683b      	ldr	r3, [r7, #0]
 801e04c:	781b      	ldrb	r3, [r3, #0]
 801e04e:	009b      	lsls	r3, r3, #2
 801e050:	18d3      	adds	r3, r2, r3
 801e052:	183a      	adds	r2, r7, r0
 801e054:	8812      	ldrh	r2, [r2, #0]
 801e056:	4905      	ldr	r1, [pc, #20]	@ (801e06c <USB_ActivateEndpoint+0x6b4>)
 801e058:	430a      	orrs	r2, r1
 801e05a:	b292      	uxth	r2, r2
 801e05c:	801a      	strh	r2, [r3, #0]
 801e05e:	e028      	b.n	801e0b2 <USB_ActivateEndpoint+0x6fa>
 801e060:	ffff8f8f 	.word	0xffff8f8f
 801e064:	ffffc080 	.word	0xffffc080
 801e068:	ffffbf8f 	.word	0xffffbf8f
 801e06c:	ffff8080 	.word	0xffff8080
 801e070:	ffff8180 	.word	0xffff8180
 801e074:	ffff8e8f 	.word	0xffff8e8f
 801e078:	00000404 	.word	0x00000404
 801e07c:	ffff80c0 	.word	0xffff80c0
 801e080:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e084:	687a      	ldr	r2, [r7, #4]
 801e086:	683b      	ldr	r3, [r7, #0]
 801e088:	781b      	ldrb	r3, [r3, #0]
 801e08a:	009b      	lsls	r3, r3, #2
 801e08c:	18d3      	adds	r3, r2, r3
 801e08e:	881b      	ldrh	r3, [r3, #0]
 801e090:	b29a      	uxth	r2, r3
 801e092:	2046      	movs	r0, #70	@ 0x46
 801e094:	183b      	adds	r3, r7, r0
 801e096:	4916      	ldr	r1, [pc, #88]	@ (801e0f0 <USB_ActivateEndpoint+0x738>)
 801e098:	400a      	ands	r2, r1
 801e09a:	801a      	strh	r2, [r3, #0]
 801e09c:	687a      	ldr	r2, [r7, #4]
 801e09e:	683b      	ldr	r3, [r7, #0]
 801e0a0:	781b      	ldrb	r3, [r3, #0]
 801e0a2:	009b      	lsls	r3, r3, #2
 801e0a4:	18d3      	adds	r3, r2, r3
 801e0a6:	183a      	adds	r2, r7, r0
 801e0a8:	8812      	ldrh	r2, [r2, #0]
 801e0aa:	4912      	ldr	r1, [pc, #72]	@ (801e0f4 <USB_ActivateEndpoint+0x73c>)
 801e0ac:	430a      	orrs	r2, r1
 801e0ae:	b292      	uxth	r2, r2
 801e0b0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801e0b2:	687a      	ldr	r2, [r7, #4]
 801e0b4:	683b      	ldr	r3, [r7, #0]
 801e0b6:	781b      	ldrb	r3, [r3, #0]
 801e0b8:	009b      	lsls	r3, r3, #2
 801e0ba:	18d3      	adds	r3, r2, r3
 801e0bc:	881b      	ldrh	r3, [r3, #0]
 801e0be:	b29a      	uxth	r2, r3
 801e0c0:	2042      	movs	r0, #66	@ 0x42
 801e0c2:	183b      	adds	r3, r7, r0
 801e0c4:	490c      	ldr	r1, [pc, #48]	@ (801e0f8 <USB_ActivateEndpoint+0x740>)
 801e0c6:	400a      	ands	r2, r1
 801e0c8:	801a      	strh	r2, [r3, #0]
 801e0ca:	687a      	ldr	r2, [r7, #4]
 801e0cc:	683b      	ldr	r3, [r7, #0]
 801e0ce:	781b      	ldrb	r3, [r3, #0]
 801e0d0:	009b      	lsls	r3, r3, #2
 801e0d2:	18d3      	adds	r3, r2, r3
 801e0d4:	183a      	adds	r2, r7, r0
 801e0d6:	8812      	ldrh	r2, [r2, #0]
 801e0d8:	4906      	ldr	r1, [pc, #24]	@ (801e0f4 <USB_ActivateEndpoint+0x73c>)
 801e0da:	430a      	orrs	r2, r1
 801e0dc:	b292      	uxth	r2, r2
 801e0de:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801e0e0:	236f      	movs	r3, #111	@ 0x6f
 801e0e2:	18fb      	adds	r3, r7, r3
 801e0e4:	781b      	ldrb	r3, [r3, #0]
}
 801e0e6:	0018      	movs	r0, r3
 801e0e8:	46bd      	mov	sp, r7
 801e0ea:	b01c      	add	sp, #112	@ 0x70
 801e0ec:	bd80      	pop	{r7, pc}
 801e0ee:	46c0      	nop			@ (mov r8, r8)
 801e0f0:	ffff8fbf 	.word	0xffff8fbf
 801e0f4:	ffff8080 	.word	0xffff8080
 801e0f8:	ffffbf8f 	.word	0xffffbf8f

0801e0fc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e0fc:	b580      	push	{r7, lr}
 801e0fe:	b08c      	sub	sp, #48	@ 0x30
 801e100:	af00      	add	r7, sp, #0
 801e102:	6078      	str	r0, [r7, #4]
 801e104:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801e106:	683b      	ldr	r3, [r7, #0]
 801e108:	7b1b      	ldrb	r3, [r3, #12]
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d000      	beq.n	801e110 <USB_DeactivateEndpoint+0x14>
 801e10e:	e07e      	b.n	801e20e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801e110:	683b      	ldr	r3, [r7, #0]
 801e112:	785b      	ldrb	r3, [r3, #1]
 801e114:	2b00      	cmp	r3, #0
 801e116:	d03c      	beq.n	801e192 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e118:	687a      	ldr	r2, [r7, #4]
 801e11a:	683b      	ldr	r3, [r7, #0]
 801e11c:	781b      	ldrb	r3, [r3, #0]
 801e11e:	009b      	lsls	r3, r3, #2
 801e120:	18d2      	adds	r2, r2, r3
 801e122:	210c      	movs	r1, #12
 801e124:	187b      	adds	r3, r7, r1
 801e126:	8812      	ldrh	r2, [r2, #0]
 801e128:	801a      	strh	r2, [r3, #0]
 801e12a:	187b      	adds	r3, r7, r1
 801e12c:	881b      	ldrh	r3, [r3, #0]
 801e12e:	2240      	movs	r2, #64	@ 0x40
 801e130:	4013      	ands	r3, r2
 801e132:	d016      	beq.n	801e162 <USB_DeactivateEndpoint+0x66>
 801e134:	687a      	ldr	r2, [r7, #4]
 801e136:	683b      	ldr	r3, [r7, #0]
 801e138:	781b      	ldrb	r3, [r3, #0]
 801e13a:	009b      	lsls	r3, r3, #2
 801e13c:	18d3      	adds	r3, r2, r3
 801e13e:	881b      	ldrh	r3, [r3, #0]
 801e140:	b29a      	uxth	r2, r3
 801e142:	200a      	movs	r0, #10
 801e144:	183b      	adds	r3, r7, r0
 801e146:	49c7      	ldr	r1, [pc, #796]	@ (801e464 <USB_DeactivateEndpoint+0x368>)
 801e148:	400a      	ands	r2, r1
 801e14a:	801a      	strh	r2, [r3, #0]
 801e14c:	687a      	ldr	r2, [r7, #4]
 801e14e:	683b      	ldr	r3, [r7, #0]
 801e150:	781b      	ldrb	r3, [r3, #0]
 801e152:	009b      	lsls	r3, r3, #2
 801e154:	18d3      	adds	r3, r2, r3
 801e156:	183a      	adds	r2, r7, r0
 801e158:	8812      	ldrh	r2, [r2, #0]
 801e15a:	49c3      	ldr	r1, [pc, #780]	@ (801e468 <USB_DeactivateEndpoint+0x36c>)
 801e15c:	430a      	orrs	r2, r1
 801e15e:	b292      	uxth	r2, r2
 801e160:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e162:	687a      	ldr	r2, [r7, #4]
 801e164:	683b      	ldr	r3, [r7, #0]
 801e166:	781b      	ldrb	r3, [r3, #0]
 801e168:	009b      	lsls	r3, r3, #2
 801e16a:	18d3      	adds	r3, r2, r3
 801e16c:	881b      	ldrh	r3, [r3, #0]
 801e16e:	b29a      	uxth	r2, r3
 801e170:	2008      	movs	r0, #8
 801e172:	183b      	adds	r3, r7, r0
 801e174:	49bd      	ldr	r1, [pc, #756]	@ (801e46c <USB_DeactivateEndpoint+0x370>)
 801e176:	400a      	ands	r2, r1
 801e178:	801a      	strh	r2, [r3, #0]
 801e17a:	687a      	ldr	r2, [r7, #4]
 801e17c:	683b      	ldr	r3, [r7, #0]
 801e17e:	781b      	ldrb	r3, [r3, #0]
 801e180:	009b      	lsls	r3, r3, #2
 801e182:	18d3      	adds	r3, r2, r3
 801e184:	183a      	adds	r2, r7, r0
 801e186:	8812      	ldrh	r2, [r2, #0]
 801e188:	49b9      	ldr	r1, [pc, #740]	@ (801e470 <USB_DeactivateEndpoint+0x374>)
 801e18a:	430a      	orrs	r2, r1
 801e18c:	b292      	uxth	r2, r2
 801e18e:	801a      	strh	r2, [r3, #0]
 801e190:	e163      	b.n	801e45a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e192:	687a      	ldr	r2, [r7, #4]
 801e194:	683b      	ldr	r3, [r7, #0]
 801e196:	781b      	ldrb	r3, [r3, #0]
 801e198:	009b      	lsls	r3, r3, #2
 801e19a:	18d2      	adds	r2, r2, r3
 801e19c:	2112      	movs	r1, #18
 801e19e:	187b      	adds	r3, r7, r1
 801e1a0:	8812      	ldrh	r2, [r2, #0]
 801e1a2:	801a      	strh	r2, [r3, #0]
 801e1a4:	187b      	adds	r3, r7, r1
 801e1a6:	881a      	ldrh	r2, [r3, #0]
 801e1a8:	2380      	movs	r3, #128	@ 0x80
 801e1aa:	01db      	lsls	r3, r3, #7
 801e1ac:	4013      	ands	r3, r2
 801e1ae:	d016      	beq.n	801e1de <USB_DeactivateEndpoint+0xe2>
 801e1b0:	687a      	ldr	r2, [r7, #4]
 801e1b2:	683b      	ldr	r3, [r7, #0]
 801e1b4:	781b      	ldrb	r3, [r3, #0]
 801e1b6:	009b      	lsls	r3, r3, #2
 801e1b8:	18d3      	adds	r3, r2, r3
 801e1ba:	881b      	ldrh	r3, [r3, #0]
 801e1bc:	b29a      	uxth	r2, r3
 801e1be:	2010      	movs	r0, #16
 801e1c0:	183b      	adds	r3, r7, r0
 801e1c2:	49a8      	ldr	r1, [pc, #672]	@ (801e464 <USB_DeactivateEndpoint+0x368>)
 801e1c4:	400a      	ands	r2, r1
 801e1c6:	801a      	strh	r2, [r3, #0]
 801e1c8:	687a      	ldr	r2, [r7, #4]
 801e1ca:	683b      	ldr	r3, [r7, #0]
 801e1cc:	781b      	ldrb	r3, [r3, #0]
 801e1ce:	009b      	lsls	r3, r3, #2
 801e1d0:	18d3      	adds	r3, r2, r3
 801e1d2:	183a      	adds	r2, r7, r0
 801e1d4:	8812      	ldrh	r2, [r2, #0]
 801e1d6:	49a7      	ldr	r1, [pc, #668]	@ (801e474 <USB_DeactivateEndpoint+0x378>)
 801e1d8:	430a      	orrs	r2, r1
 801e1da:	b292      	uxth	r2, r2
 801e1dc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801e1de:	687a      	ldr	r2, [r7, #4]
 801e1e0:	683b      	ldr	r3, [r7, #0]
 801e1e2:	781b      	ldrb	r3, [r3, #0]
 801e1e4:	009b      	lsls	r3, r3, #2
 801e1e6:	18d3      	adds	r3, r2, r3
 801e1e8:	881b      	ldrh	r3, [r3, #0]
 801e1ea:	b29a      	uxth	r2, r3
 801e1ec:	200e      	movs	r0, #14
 801e1ee:	183b      	adds	r3, r7, r0
 801e1f0:	49a1      	ldr	r1, [pc, #644]	@ (801e478 <USB_DeactivateEndpoint+0x37c>)
 801e1f2:	400a      	ands	r2, r1
 801e1f4:	801a      	strh	r2, [r3, #0]
 801e1f6:	687a      	ldr	r2, [r7, #4]
 801e1f8:	683b      	ldr	r3, [r7, #0]
 801e1fa:	781b      	ldrb	r3, [r3, #0]
 801e1fc:	009b      	lsls	r3, r3, #2
 801e1fe:	18d3      	adds	r3, r2, r3
 801e200:	183a      	adds	r2, r7, r0
 801e202:	8812      	ldrh	r2, [r2, #0]
 801e204:	499a      	ldr	r1, [pc, #616]	@ (801e470 <USB_DeactivateEndpoint+0x374>)
 801e206:	430a      	orrs	r2, r1
 801e208:	b292      	uxth	r2, r2
 801e20a:	801a      	strh	r2, [r3, #0]
 801e20c:	e125      	b.n	801e45a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801e20e:	683b      	ldr	r3, [r7, #0]
 801e210:	785b      	ldrb	r3, [r3, #1]
 801e212:	2b00      	cmp	r3, #0
 801e214:	d000      	beq.n	801e218 <USB_DeactivateEndpoint+0x11c>
 801e216:	e090      	b.n	801e33a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e218:	687a      	ldr	r2, [r7, #4]
 801e21a:	683b      	ldr	r3, [r7, #0]
 801e21c:	781b      	ldrb	r3, [r3, #0]
 801e21e:	009b      	lsls	r3, r3, #2
 801e220:	18d2      	adds	r2, r2, r3
 801e222:	2120      	movs	r1, #32
 801e224:	187b      	adds	r3, r7, r1
 801e226:	8812      	ldrh	r2, [r2, #0]
 801e228:	801a      	strh	r2, [r3, #0]
 801e22a:	187b      	adds	r3, r7, r1
 801e22c:	881a      	ldrh	r2, [r3, #0]
 801e22e:	2380      	movs	r3, #128	@ 0x80
 801e230:	01db      	lsls	r3, r3, #7
 801e232:	4013      	ands	r3, r2
 801e234:	d016      	beq.n	801e264 <USB_DeactivateEndpoint+0x168>
 801e236:	687a      	ldr	r2, [r7, #4]
 801e238:	683b      	ldr	r3, [r7, #0]
 801e23a:	781b      	ldrb	r3, [r3, #0]
 801e23c:	009b      	lsls	r3, r3, #2
 801e23e:	18d3      	adds	r3, r2, r3
 801e240:	881b      	ldrh	r3, [r3, #0]
 801e242:	b29a      	uxth	r2, r3
 801e244:	201e      	movs	r0, #30
 801e246:	183b      	adds	r3, r7, r0
 801e248:	4986      	ldr	r1, [pc, #536]	@ (801e464 <USB_DeactivateEndpoint+0x368>)
 801e24a:	400a      	ands	r2, r1
 801e24c:	801a      	strh	r2, [r3, #0]
 801e24e:	687a      	ldr	r2, [r7, #4]
 801e250:	683b      	ldr	r3, [r7, #0]
 801e252:	781b      	ldrb	r3, [r3, #0]
 801e254:	009b      	lsls	r3, r3, #2
 801e256:	18d3      	adds	r3, r2, r3
 801e258:	183a      	adds	r2, r7, r0
 801e25a:	8812      	ldrh	r2, [r2, #0]
 801e25c:	4985      	ldr	r1, [pc, #532]	@ (801e474 <USB_DeactivateEndpoint+0x378>)
 801e25e:	430a      	orrs	r2, r1
 801e260:	b292      	uxth	r2, r2
 801e262:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e264:	687a      	ldr	r2, [r7, #4]
 801e266:	683b      	ldr	r3, [r7, #0]
 801e268:	781b      	ldrb	r3, [r3, #0]
 801e26a:	009b      	lsls	r3, r3, #2
 801e26c:	18d2      	adds	r2, r2, r3
 801e26e:	211c      	movs	r1, #28
 801e270:	187b      	adds	r3, r7, r1
 801e272:	8812      	ldrh	r2, [r2, #0]
 801e274:	801a      	strh	r2, [r3, #0]
 801e276:	187b      	adds	r3, r7, r1
 801e278:	881b      	ldrh	r3, [r3, #0]
 801e27a:	2240      	movs	r2, #64	@ 0x40
 801e27c:	4013      	ands	r3, r2
 801e27e:	d016      	beq.n	801e2ae <USB_DeactivateEndpoint+0x1b2>
 801e280:	687a      	ldr	r2, [r7, #4]
 801e282:	683b      	ldr	r3, [r7, #0]
 801e284:	781b      	ldrb	r3, [r3, #0]
 801e286:	009b      	lsls	r3, r3, #2
 801e288:	18d3      	adds	r3, r2, r3
 801e28a:	881b      	ldrh	r3, [r3, #0]
 801e28c:	b29a      	uxth	r2, r3
 801e28e:	201a      	movs	r0, #26
 801e290:	183b      	adds	r3, r7, r0
 801e292:	4974      	ldr	r1, [pc, #464]	@ (801e464 <USB_DeactivateEndpoint+0x368>)
 801e294:	400a      	ands	r2, r1
 801e296:	801a      	strh	r2, [r3, #0]
 801e298:	687a      	ldr	r2, [r7, #4]
 801e29a:	683b      	ldr	r3, [r7, #0]
 801e29c:	781b      	ldrb	r3, [r3, #0]
 801e29e:	009b      	lsls	r3, r3, #2
 801e2a0:	18d3      	adds	r3, r2, r3
 801e2a2:	183a      	adds	r2, r7, r0
 801e2a4:	8812      	ldrh	r2, [r2, #0]
 801e2a6:	4970      	ldr	r1, [pc, #448]	@ (801e468 <USB_DeactivateEndpoint+0x36c>)
 801e2a8:	430a      	orrs	r2, r1
 801e2aa:	b292      	uxth	r2, r2
 801e2ac:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801e2ae:	687a      	ldr	r2, [r7, #4]
 801e2b0:	683b      	ldr	r3, [r7, #0]
 801e2b2:	781b      	ldrb	r3, [r3, #0]
 801e2b4:	009b      	lsls	r3, r3, #2
 801e2b6:	18d3      	adds	r3, r2, r3
 801e2b8:	881b      	ldrh	r3, [r3, #0]
 801e2ba:	b29a      	uxth	r2, r3
 801e2bc:	2018      	movs	r0, #24
 801e2be:	183b      	adds	r3, r7, r0
 801e2c0:	4968      	ldr	r1, [pc, #416]	@ (801e464 <USB_DeactivateEndpoint+0x368>)
 801e2c2:	400a      	ands	r2, r1
 801e2c4:	801a      	strh	r2, [r3, #0]
 801e2c6:	687a      	ldr	r2, [r7, #4]
 801e2c8:	683b      	ldr	r3, [r7, #0]
 801e2ca:	781b      	ldrb	r3, [r3, #0]
 801e2cc:	009b      	lsls	r3, r3, #2
 801e2ce:	18d3      	adds	r3, r2, r3
 801e2d0:	183a      	adds	r2, r7, r0
 801e2d2:	8812      	ldrh	r2, [r2, #0]
 801e2d4:	4964      	ldr	r1, [pc, #400]	@ (801e468 <USB_DeactivateEndpoint+0x36c>)
 801e2d6:	430a      	orrs	r2, r1
 801e2d8:	b292      	uxth	r2, r2
 801e2da:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801e2dc:	687a      	ldr	r2, [r7, #4]
 801e2de:	683b      	ldr	r3, [r7, #0]
 801e2e0:	781b      	ldrb	r3, [r3, #0]
 801e2e2:	009b      	lsls	r3, r3, #2
 801e2e4:	18d3      	adds	r3, r2, r3
 801e2e6:	881b      	ldrh	r3, [r3, #0]
 801e2e8:	b29a      	uxth	r2, r3
 801e2ea:	2016      	movs	r0, #22
 801e2ec:	183b      	adds	r3, r7, r0
 801e2ee:	4962      	ldr	r1, [pc, #392]	@ (801e478 <USB_DeactivateEndpoint+0x37c>)
 801e2f0:	400a      	ands	r2, r1
 801e2f2:	801a      	strh	r2, [r3, #0]
 801e2f4:	687a      	ldr	r2, [r7, #4]
 801e2f6:	683b      	ldr	r3, [r7, #0]
 801e2f8:	781b      	ldrb	r3, [r3, #0]
 801e2fa:	009b      	lsls	r3, r3, #2
 801e2fc:	18d3      	adds	r3, r2, r3
 801e2fe:	183a      	adds	r2, r7, r0
 801e300:	8812      	ldrh	r2, [r2, #0]
 801e302:	495b      	ldr	r1, [pc, #364]	@ (801e470 <USB_DeactivateEndpoint+0x374>)
 801e304:	430a      	orrs	r2, r1
 801e306:	b292      	uxth	r2, r2
 801e308:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e30a:	687a      	ldr	r2, [r7, #4]
 801e30c:	683b      	ldr	r3, [r7, #0]
 801e30e:	781b      	ldrb	r3, [r3, #0]
 801e310:	009b      	lsls	r3, r3, #2
 801e312:	18d3      	adds	r3, r2, r3
 801e314:	881b      	ldrh	r3, [r3, #0]
 801e316:	b29a      	uxth	r2, r3
 801e318:	2014      	movs	r0, #20
 801e31a:	183b      	adds	r3, r7, r0
 801e31c:	4953      	ldr	r1, [pc, #332]	@ (801e46c <USB_DeactivateEndpoint+0x370>)
 801e31e:	400a      	ands	r2, r1
 801e320:	801a      	strh	r2, [r3, #0]
 801e322:	687a      	ldr	r2, [r7, #4]
 801e324:	683b      	ldr	r3, [r7, #0]
 801e326:	781b      	ldrb	r3, [r3, #0]
 801e328:	009b      	lsls	r3, r3, #2
 801e32a:	18d3      	adds	r3, r2, r3
 801e32c:	183a      	adds	r2, r7, r0
 801e32e:	8812      	ldrh	r2, [r2, #0]
 801e330:	494f      	ldr	r1, [pc, #316]	@ (801e470 <USB_DeactivateEndpoint+0x374>)
 801e332:	430a      	orrs	r2, r1
 801e334:	b292      	uxth	r2, r2
 801e336:	801a      	strh	r2, [r3, #0]
 801e338:	e08f      	b.n	801e45a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e33a:	687a      	ldr	r2, [r7, #4]
 801e33c:	683b      	ldr	r3, [r7, #0]
 801e33e:	781b      	ldrb	r3, [r3, #0]
 801e340:	009b      	lsls	r3, r3, #2
 801e342:	18d2      	adds	r2, r2, r3
 801e344:	212e      	movs	r1, #46	@ 0x2e
 801e346:	187b      	adds	r3, r7, r1
 801e348:	8812      	ldrh	r2, [r2, #0]
 801e34a:	801a      	strh	r2, [r3, #0]
 801e34c:	187b      	adds	r3, r7, r1
 801e34e:	881a      	ldrh	r2, [r3, #0]
 801e350:	2380      	movs	r3, #128	@ 0x80
 801e352:	01db      	lsls	r3, r3, #7
 801e354:	4013      	ands	r3, r2
 801e356:	d016      	beq.n	801e386 <USB_DeactivateEndpoint+0x28a>
 801e358:	687a      	ldr	r2, [r7, #4]
 801e35a:	683b      	ldr	r3, [r7, #0]
 801e35c:	781b      	ldrb	r3, [r3, #0]
 801e35e:	009b      	lsls	r3, r3, #2
 801e360:	18d3      	adds	r3, r2, r3
 801e362:	881b      	ldrh	r3, [r3, #0]
 801e364:	b29a      	uxth	r2, r3
 801e366:	202c      	movs	r0, #44	@ 0x2c
 801e368:	183b      	adds	r3, r7, r0
 801e36a:	493e      	ldr	r1, [pc, #248]	@ (801e464 <USB_DeactivateEndpoint+0x368>)
 801e36c:	400a      	ands	r2, r1
 801e36e:	801a      	strh	r2, [r3, #0]
 801e370:	687a      	ldr	r2, [r7, #4]
 801e372:	683b      	ldr	r3, [r7, #0]
 801e374:	781b      	ldrb	r3, [r3, #0]
 801e376:	009b      	lsls	r3, r3, #2
 801e378:	18d3      	adds	r3, r2, r3
 801e37a:	183a      	adds	r2, r7, r0
 801e37c:	8812      	ldrh	r2, [r2, #0]
 801e37e:	493d      	ldr	r1, [pc, #244]	@ (801e474 <USB_DeactivateEndpoint+0x378>)
 801e380:	430a      	orrs	r2, r1
 801e382:	b292      	uxth	r2, r2
 801e384:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e386:	687a      	ldr	r2, [r7, #4]
 801e388:	683b      	ldr	r3, [r7, #0]
 801e38a:	781b      	ldrb	r3, [r3, #0]
 801e38c:	009b      	lsls	r3, r3, #2
 801e38e:	18d2      	adds	r2, r2, r3
 801e390:	212a      	movs	r1, #42	@ 0x2a
 801e392:	187b      	adds	r3, r7, r1
 801e394:	8812      	ldrh	r2, [r2, #0]
 801e396:	801a      	strh	r2, [r3, #0]
 801e398:	187b      	adds	r3, r7, r1
 801e39a:	881b      	ldrh	r3, [r3, #0]
 801e39c:	2240      	movs	r2, #64	@ 0x40
 801e39e:	4013      	ands	r3, r2
 801e3a0:	d016      	beq.n	801e3d0 <USB_DeactivateEndpoint+0x2d4>
 801e3a2:	687a      	ldr	r2, [r7, #4]
 801e3a4:	683b      	ldr	r3, [r7, #0]
 801e3a6:	781b      	ldrb	r3, [r3, #0]
 801e3a8:	009b      	lsls	r3, r3, #2
 801e3aa:	18d3      	adds	r3, r2, r3
 801e3ac:	881b      	ldrh	r3, [r3, #0]
 801e3ae:	b29a      	uxth	r2, r3
 801e3b0:	2028      	movs	r0, #40	@ 0x28
 801e3b2:	183b      	adds	r3, r7, r0
 801e3b4:	492b      	ldr	r1, [pc, #172]	@ (801e464 <USB_DeactivateEndpoint+0x368>)
 801e3b6:	400a      	ands	r2, r1
 801e3b8:	801a      	strh	r2, [r3, #0]
 801e3ba:	687a      	ldr	r2, [r7, #4]
 801e3bc:	683b      	ldr	r3, [r7, #0]
 801e3be:	781b      	ldrb	r3, [r3, #0]
 801e3c0:	009b      	lsls	r3, r3, #2
 801e3c2:	18d3      	adds	r3, r2, r3
 801e3c4:	183a      	adds	r2, r7, r0
 801e3c6:	8812      	ldrh	r2, [r2, #0]
 801e3c8:	4927      	ldr	r1, [pc, #156]	@ (801e468 <USB_DeactivateEndpoint+0x36c>)
 801e3ca:	430a      	orrs	r2, r1
 801e3cc:	b292      	uxth	r2, r2
 801e3ce:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801e3d0:	687a      	ldr	r2, [r7, #4]
 801e3d2:	683b      	ldr	r3, [r7, #0]
 801e3d4:	781b      	ldrb	r3, [r3, #0]
 801e3d6:	009b      	lsls	r3, r3, #2
 801e3d8:	18d3      	adds	r3, r2, r3
 801e3da:	881b      	ldrh	r3, [r3, #0]
 801e3dc:	b29a      	uxth	r2, r3
 801e3de:	2026      	movs	r0, #38	@ 0x26
 801e3e0:	183b      	adds	r3, r7, r0
 801e3e2:	4920      	ldr	r1, [pc, #128]	@ (801e464 <USB_DeactivateEndpoint+0x368>)
 801e3e4:	400a      	ands	r2, r1
 801e3e6:	801a      	strh	r2, [r3, #0]
 801e3e8:	687a      	ldr	r2, [r7, #4]
 801e3ea:	683b      	ldr	r3, [r7, #0]
 801e3ec:	781b      	ldrb	r3, [r3, #0]
 801e3ee:	009b      	lsls	r3, r3, #2
 801e3f0:	18d3      	adds	r3, r2, r3
 801e3f2:	183a      	adds	r2, r7, r0
 801e3f4:	8812      	ldrh	r2, [r2, #0]
 801e3f6:	491f      	ldr	r1, [pc, #124]	@ (801e474 <USB_DeactivateEndpoint+0x378>)
 801e3f8:	430a      	orrs	r2, r1
 801e3fa:	b292      	uxth	r2, r2
 801e3fc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e3fe:	687a      	ldr	r2, [r7, #4]
 801e400:	683b      	ldr	r3, [r7, #0]
 801e402:	781b      	ldrb	r3, [r3, #0]
 801e404:	009b      	lsls	r3, r3, #2
 801e406:	18d3      	adds	r3, r2, r3
 801e408:	881b      	ldrh	r3, [r3, #0]
 801e40a:	b29a      	uxth	r2, r3
 801e40c:	2024      	movs	r0, #36	@ 0x24
 801e40e:	183b      	adds	r3, r7, r0
 801e410:	4916      	ldr	r1, [pc, #88]	@ (801e46c <USB_DeactivateEndpoint+0x370>)
 801e412:	400a      	ands	r2, r1
 801e414:	801a      	strh	r2, [r3, #0]
 801e416:	687a      	ldr	r2, [r7, #4]
 801e418:	683b      	ldr	r3, [r7, #0]
 801e41a:	781b      	ldrb	r3, [r3, #0]
 801e41c:	009b      	lsls	r3, r3, #2
 801e41e:	18d3      	adds	r3, r2, r3
 801e420:	183a      	adds	r2, r7, r0
 801e422:	8812      	ldrh	r2, [r2, #0]
 801e424:	4912      	ldr	r1, [pc, #72]	@ (801e470 <USB_DeactivateEndpoint+0x374>)
 801e426:	430a      	orrs	r2, r1
 801e428:	b292      	uxth	r2, r2
 801e42a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801e42c:	687a      	ldr	r2, [r7, #4]
 801e42e:	683b      	ldr	r3, [r7, #0]
 801e430:	781b      	ldrb	r3, [r3, #0]
 801e432:	009b      	lsls	r3, r3, #2
 801e434:	18d3      	adds	r3, r2, r3
 801e436:	881b      	ldrh	r3, [r3, #0]
 801e438:	b29a      	uxth	r2, r3
 801e43a:	2022      	movs	r0, #34	@ 0x22
 801e43c:	183b      	adds	r3, r7, r0
 801e43e:	490e      	ldr	r1, [pc, #56]	@ (801e478 <USB_DeactivateEndpoint+0x37c>)
 801e440:	400a      	ands	r2, r1
 801e442:	801a      	strh	r2, [r3, #0]
 801e444:	687a      	ldr	r2, [r7, #4]
 801e446:	683b      	ldr	r3, [r7, #0]
 801e448:	781b      	ldrb	r3, [r3, #0]
 801e44a:	009b      	lsls	r3, r3, #2
 801e44c:	18d3      	adds	r3, r2, r3
 801e44e:	183a      	adds	r2, r7, r0
 801e450:	8812      	ldrh	r2, [r2, #0]
 801e452:	4907      	ldr	r1, [pc, #28]	@ (801e470 <USB_DeactivateEndpoint+0x374>)
 801e454:	430a      	orrs	r2, r1
 801e456:	b292      	uxth	r2, r2
 801e458:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801e45a:	2300      	movs	r3, #0
}
 801e45c:	0018      	movs	r0, r3
 801e45e:	46bd      	mov	sp, r7
 801e460:	b00c      	add	sp, #48	@ 0x30
 801e462:	bd80      	pop	{r7, pc}
 801e464:	ffff8f8f 	.word	0xffff8f8f
 801e468:	ffff80c0 	.word	0xffff80c0
 801e46c:	ffff8fbf 	.word	0xffff8fbf
 801e470:	ffff8080 	.word	0xffff8080
 801e474:	ffffc080 	.word	0xffffc080
 801e478:	ffffbf8f 	.word	0xffffbf8f

0801e47c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e47c:	b590      	push	{r4, r7, lr}
 801e47e:	b0c3      	sub	sp, #268	@ 0x10c
 801e480:	af00      	add	r7, sp, #0
 801e482:	6078      	str	r0, [r7, #4]
 801e484:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e486:	683b      	ldr	r3, [r7, #0]
 801e488:	785b      	ldrb	r3, [r3, #1]
 801e48a:	2b01      	cmp	r3, #1
 801e48c:	d001      	beq.n	801e492 <USB_EPStartXfer+0x16>
 801e48e:	f000 fd2d 	bl	801eeec <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801e492:	683b      	ldr	r3, [r7, #0]
 801e494:	699a      	ldr	r2, [r3, #24]
 801e496:	683b      	ldr	r3, [r7, #0]
 801e498:	691b      	ldr	r3, [r3, #16]
 801e49a:	429a      	cmp	r2, r3
 801e49c:	d905      	bls.n	801e4aa <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801e49e:	683b      	ldr	r3, [r7, #0]
 801e4a0:	691b      	ldr	r3, [r3, #16]
 801e4a2:	1d7a      	adds	r2, r7, #5
 801e4a4:	32ff      	adds	r2, #255	@ 0xff
 801e4a6:	6013      	str	r3, [r2, #0]
 801e4a8:	e004      	b.n	801e4b4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801e4aa:	683b      	ldr	r3, [r7, #0]
 801e4ac:	699b      	ldr	r3, [r3, #24]
 801e4ae:	1d7a      	adds	r2, r7, #5
 801e4b0:	32ff      	adds	r2, #255	@ 0xff
 801e4b2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801e4b4:	683b      	ldr	r3, [r7, #0]
 801e4b6:	7b1b      	ldrb	r3, [r3, #12]
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	d125      	bne.n	801e508 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801e4bc:	683b      	ldr	r3, [r7, #0]
 801e4be:	6959      	ldr	r1, [r3, #20]
 801e4c0:	683b      	ldr	r3, [r7, #0]
 801e4c2:	88da      	ldrh	r2, [r3, #6]
 801e4c4:	1d7b      	adds	r3, r7, #5
 801e4c6:	33ff      	adds	r3, #255	@ 0xff
 801e4c8:	681b      	ldr	r3, [r3, #0]
 801e4ca:	b29b      	uxth	r3, r3
 801e4cc:	6878      	ldr	r0, [r7, #4]
 801e4ce:	f001 fa47 	bl	801f960 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	613b      	str	r3, [r7, #16]
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	2250      	movs	r2, #80	@ 0x50
 801e4da:	5a9b      	ldrh	r3, [r3, r2]
 801e4dc:	b29b      	uxth	r3, r3
 801e4de:	001a      	movs	r2, r3
 801e4e0:	693b      	ldr	r3, [r7, #16]
 801e4e2:	189b      	adds	r3, r3, r2
 801e4e4:	613b      	str	r3, [r7, #16]
 801e4e6:	683b      	ldr	r3, [r7, #0]
 801e4e8:	781b      	ldrb	r3, [r3, #0]
 801e4ea:	00da      	lsls	r2, r3, #3
 801e4ec:	693b      	ldr	r3, [r7, #16]
 801e4ee:	18d3      	adds	r3, r2, r3
 801e4f0:	4ad7      	ldr	r2, [pc, #860]	@ (801e850 <USB_EPStartXfer+0x3d4>)
 801e4f2:	4694      	mov	ip, r2
 801e4f4:	4463      	add	r3, ip
 801e4f6:	60fb      	str	r3, [r7, #12]
 801e4f8:	1d7b      	adds	r3, r7, #5
 801e4fa:	33ff      	adds	r3, #255	@ 0xff
 801e4fc:	681b      	ldr	r3, [r3, #0]
 801e4fe:	b29a      	uxth	r2, r3
 801e500:	68fb      	ldr	r3, [r7, #12]
 801e502:	801a      	strh	r2, [r3, #0]
 801e504:	f000 fccd 	bl	801eea2 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801e508:	683b      	ldr	r3, [r7, #0]
 801e50a:	78db      	ldrb	r3, [r3, #3]
 801e50c:	2b02      	cmp	r3, #2
 801e50e:	d000      	beq.n	801e512 <USB_EPStartXfer+0x96>
 801e510:	e362      	b.n	801ebd8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801e512:	683b      	ldr	r3, [r7, #0]
 801e514:	6a1a      	ldr	r2, [r3, #32]
 801e516:	683b      	ldr	r3, [r7, #0]
 801e518:	691b      	ldr	r3, [r3, #16]
 801e51a:	429a      	cmp	r2, r3
 801e51c:	d800      	bhi.n	801e520 <USB_EPStartXfer+0xa4>
 801e51e:	e309      	b.n	801eb34 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801e520:	687a      	ldr	r2, [r7, #4]
 801e522:	683b      	ldr	r3, [r7, #0]
 801e524:	781b      	ldrb	r3, [r3, #0]
 801e526:	009b      	lsls	r3, r3, #2
 801e528:	18d3      	adds	r3, r2, r3
 801e52a:	881b      	ldrh	r3, [r3, #0]
 801e52c:	b29a      	uxth	r2, r3
 801e52e:	2056      	movs	r0, #86	@ 0x56
 801e530:	183b      	adds	r3, r7, r0
 801e532:	49c8      	ldr	r1, [pc, #800]	@ (801e854 <USB_EPStartXfer+0x3d8>)
 801e534:	400a      	ands	r2, r1
 801e536:	801a      	strh	r2, [r3, #0]
 801e538:	687a      	ldr	r2, [r7, #4]
 801e53a:	683b      	ldr	r3, [r7, #0]
 801e53c:	781b      	ldrb	r3, [r3, #0]
 801e53e:	009b      	lsls	r3, r3, #2
 801e540:	18d3      	adds	r3, r2, r3
 801e542:	183a      	adds	r2, r7, r0
 801e544:	8812      	ldrh	r2, [r2, #0]
 801e546:	49c4      	ldr	r1, [pc, #784]	@ (801e858 <USB_EPStartXfer+0x3dc>)
 801e548:	430a      	orrs	r2, r1
 801e54a:	b292      	uxth	r2, r2
 801e54c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801e54e:	683b      	ldr	r3, [r7, #0]
 801e550:	6a1a      	ldr	r2, [r3, #32]
 801e552:	1d7b      	adds	r3, r7, #5
 801e554:	33ff      	adds	r3, #255	@ 0xff
 801e556:	681b      	ldr	r3, [r3, #0]
 801e558:	1ad2      	subs	r2, r2, r3
 801e55a:	683b      	ldr	r3, [r7, #0]
 801e55c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801e55e:	687a      	ldr	r2, [r7, #4]
 801e560:	683b      	ldr	r3, [r7, #0]
 801e562:	781b      	ldrb	r3, [r3, #0]
 801e564:	009b      	lsls	r3, r3, #2
 801e566:	18d3      	adds	r3, r2, r3
 801e568:	881b      	ldrh	r3, [r3, #0]
 801e56a:	b29b      	uxth	r3, r3
 801e56c:	001a      	movs	r2, r3
 801e56e:	2340      	movs	r3, #64	@ 0x40
 801e570:	4013      	ands	r3, r2
 801e572:	d100      	bne.n	801e576 <USB_EPStartXfer+0xfa>
 801e574:	e176      	b.n	801e864 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801e576:	687b      	ldr	r3, [r7, #4]
 801e578:	633b      	str	r3, [r7, #48]	@ 0x30
 801e57a:	683b      	ldr	r3, [r7, #0]
 801e57c:	785b      	ldrb	r3, [r3, #1]
 801e57e:	2b00      	cmp	r3, #0
 801e580:	d000      	beq.n	801e584 <USB_EPStartXfer+0x108>
 801e582:	e074      	b.n	801e66e <USB_EPStartXfer+0x1f2>
 801e584:	687b      	ldr	r3, [r7, #4]
 801e586:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	2250      	movs	r2, #80	@ 0x50
 801e58c:	5a9b      	ldrh	r3, [r3, r2]
 801e58e:	b29b      	uxth	r3, r3
 801e590:	001a      	movs	r2, r3
 801e592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e594:	189b      	adds	r3, r3, r2
 801e596:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e598:	683b      	ldr	r3, [r7, #0]
 801e59a:	781b      	ldrb	r3, [r3, #0]
 801e59c:	00da      	lsls	r2, r3, #3
 801e59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e5a0:	18d3      	adds	r3, r2, r3
 801e5a2:	4aae      	ldr	r2, [pc, #696]	@ (801e85c <USB_EPStartXfer+0x3e0>)
 801e5a4:	4694      	mov	ip, r2
 801e5a6:	4463      	add	r3, ip
 801e5a8:	627b      	str	r3, [r7, #36]	@ 0x24
 801e5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e5ac:	881b      	ldrh	r3, [r3, #0]
 801e5ae:	b29b      	uxth	r3, r3
 801e5b0:	059b      	lsls	r3, r3, #22
 801e5b2:	0d9b      	lsrs	r3, r3, #22
 801e5b4:	b29a      	uxth	r2, r3
 801e5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e5b8:	801a      	strh	r2, [r3, #0]
 801e5ba:	1d7b      	adds	r3, r7, #5
 801e5bc:	33ff      	adds	r3, #255	@ 0xff
 801e5be:	681b      	ldr	r3, [r3, #0]
 801e5c0:	2b3e      	cmp	r3, #62	@ 0x3e
 801e5c2:	d924      	bls.n	801e60e <USB_EPStartXfer+0x192>
 801e5c4:	1d7b      	adds	r3, r7, #5
 801e5c6:	33ff      	adds	r3, #255	@ 0xff
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	095b      	lsrs	r3, r3, #5
 801e5cc:	1c7a      	adds	r2, r7, #1
 801e5ce:	32ff      	adds	r2, #255	@ 0xff
 801e5d0:	6013      	str	r3, [r2, #0]
 801e5d2:	1d7b      	adds	r3, r7, #5
 801e5d4:	33ff      	adds	r3, #255	@ 0xff
 801e5d6:	681b      	ldr	r3, [r3, #0]
 801e5d8:	221f      	movs	r2, #31
 801e5da:	4013      	ands	r3, r2
 801e5dc:	d106      	bne.n	801e5ec <USB_EPStartXfer+0x170>
 801e5de:	1c7b      	adds	r3, r7, #1
 801e5e0:	33ff      	adds	r3, #255	@ 0xff
 801e5e2:	681b      	ldr	r3, [r3, #0]
 801e5e4:	3b01      	subs	r3, #1
 801e5e6:	1c7a      	adds	r2, r7, #1
 801e5e8:	32ff      	adds	r2, #255	@ 0xff
 801e5ea:	6013      	str	r3, [r2, #0]
 801e5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e5ee:	881b      	ldrh	r3, [r3, #0]
 801e5f0:	b29a      	uxth	r2, r3
 801e5f2:	1c7b      	adds	r3, r7, #1
 801e5f4:	33ff      	adds	r3, #255	@ 0xff
 801e5f6:	681b      	ldr	r3, [r3, #0]
 801e5f8:	b29b      	uxth	r3, r3
 801e5fa:	029b      	lsls	r3, r3, #10
 801e5fc:	b29b      	uxth	r3, r3
 801e5fe:	4313      	orrs	r3, r2
 801e600:	b29b      	uxth	r3, r3
 801e602:	4a97      	ldr	r2, [pc, #604]	@ (801e860 <USB_EPStartXfer+0x3e4>)
 801e604:	4313      	orrs	r3, r2
 801e606:	b29a      	uxth	r2, r3
 801e608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e60a:	801a      	strh	r2, [r3, #0]
 801e60c:	e04a      	b.n	801e6a4 <USB_EPStartXfer+0x228>
 801e60e:	1d7b      	adds	r3, r7, #5
 801e610:	33ff      	adds	r3, #255	@ 0xff
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	2b00      	cmp	r3, #0
 801e616:	d108      	bne.n	801e62a <USB_EPStartXfer+0x1ae>
 801e618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e61a:	881b      	ldrh	r3, [r3, #0]
 801e61c:	b29b      	uxth	r3, r3
 801e61e:	4a90      	ldr	r2, [pc, #576]	@ (801e860 <USB_EPStartXfer+0x3e4>)
 801e620:	4313      	orrs	r3, r2
 801e622:	b29a      	uxth	r2, r3
 801e624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e626:	801a      	strh	r2, [r3, #0]
 801e628:	e03c      	b.n	801e6a4 <USB_EPStartXfer+0x228>
 801e62a:	1d7b      	adds	r3, r7, #5
 801e62c:	33ff      	adds	r3, #255	@ 0xff
 801e62e:	681b      	ldr	r3, [r3, #0]
 801e630:	085b      	lsrs	r3, r3, #1
 801e632:	1c7a      	adds	r2, r7, #1
 801e634:	32ff      	adds	r2, #255	@ 0xff
 801e636:	6013      	str	r3, [r2, #0]
 801e638:	1d7b      	adds	r3, r7, #5
 801e63a:	33ff      	adds	r3, #255	@ 0xff
 801e63c:	681b      	ldr	r3, [r3, #0]
 801e63e:	2201      	movs	r2, #1
 801e640:	4013      	ands	r3, r2
 801e642:	d006      	beq.n	801e652 <USB_EPStartXfer+0x1d6>
 801e644:	1c7b      	adds	r3, r7, #1
 801e646:	33ff      	adds	r3, #255	@ 0xff
 801e648:	681b      	ldr	r3, [r3, #0]
 801e64a:	3301      	adds	r3, #1
 801e64c:	1c7a      	adds	r2, r7, #1
 801e64e:	32ff      	adds	r2, #255	@ 0xff
 801e650:	6013      	str	r3, [r2, #0]
 801e652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e654:	881b      	ldrh	r3, [r3, #0]
 801e656:	b29a      	uxth	r2, r3
 801e658:	1c7b      	adds	r3, r7, #1
 801e65a:	33ff      	adds	r3, #255	@ 0xff
 801e65c:	681b      	ldr	r3, [r3, #0]
 801e65e:	b29b      	uxth	r3, r3
 801e660:	029b      	lsls	r3, r3, #10
 801e662:	b29b      	uxth	r3, r3
 801e664:	4313      	orrs	r3, r2
 801e666:	b29a      	uxth	r2, r3
 801e668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e66a:	801a      	strh	r2, [r3, #0]
 801e66c:	e01a      	b.n	801e6a4 <USB_EPStartXfer+0x228>
 801e66e:	683b      	ldr	r3, [r7, #0]
 801e670:	785b      	ldrb	r3, [r3, #1]
 801e672:	2b01      	cmp	r3, #1
 801e674:	d116      	bne.n	801e6a4 <USB_EPStartXfer+0x228>
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	2250      	movs	r2, #80	@ 0x50
 801e67a:	5a9b      	ldrh	r3, [r3, r2]
 801e67c:	b29b      	uxth	r3, r3
 801e67e:	001a      	movs	r2, r3
 801e680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e682:	189b      	adds	r3, r3, r2
 801e684:	633b      	str	r3, [r7, #48]	@ 0x30
 801e686:	683b      	ldr	r3, [r7, #0]
 801e688:	781b      	ldrb	r3, [r3, #0]
 801e68a:	00da      	lsls	r2, r3, #3
 801e68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e68e:	18d3      	adds	r3, r2, r3
 801e690:	4a72      	ldr	r2, [pc, #456]	@ (801e85c <USB_EPStartXfer+0x3e0>)
 801e692:	4694      	mov	ip, r2
 801e694:	4463      	add	r3, ip
 801e696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e698:	1d7b      	adds	r3, r7, #5
 801e69a:	33ff      	adds	r3, #255	@ 0xff
 801e69c:	681b      	ldr	r3, [r3, #0]
 801e69e:	b29a      	uxth	r2, r3
 801e6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e6a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801e6a4:	2076      	movs	r0, #118	@ 0x76
 801e6a6:	183b      	adds	r3, r7, r0
 801e6a8:	683a      	ldr	r2, [r7, #0]
 801e6aa:	8952      	ldrh	r2, [r2, #10]
 801e6ac:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801e6ae:	683b      	ldr	r3, [r7, #0]
 801e6b0:	6959      	ldr	r1, [r3, #20]
 801e6b2:	1d7b      	adds	r3, r7, #5
 801e6b4:	33ff      	adds	r3, #255	@ 0xff
 801e6b6:	681b      	ldr	r3, [r3, #0]
 801e6b8:	b29c      	uxth	r4, r3
 801e6ba:	183b      	adds	r3, r7, r0
 801e6bc:	881a      	ldrh	r2, [r3, #0]
 801e6be:	6878      	ldr	r0, [r7, #4]
 801e6c0:	0023      	movs	r3, r4
 801e6c2:	f001 f94d 	bl	801f960 <USB_WritePMA>
            ep->xfer_buff += len;
 801e6c6:	683b      	ldr	r3, [r7, #0]
 801e6c8:	695a      	ldr	r2, [r3, #20]
 801e6ca:	1d7b      	adds	r3, r7, #5
 801e6cc:	33ff      	adds	r3, #255	@ 0xff
 801e6ce:	681b      	ldr	r3, [r3, #0]
 801e6d0:	18d2      	adds	r2, r2, r3
 801e6d2:	683b      	ldr	r3, [r7, #0]
 801e6d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801e6d6:	683b      	ldr	r3, [r7, #0]
 801e6d8:	6a1a      	ldr	r2, [r3, #32]
 801e6da:	683b      	ldr	r3, [r7, #0]
 801e6dc:	691b      	ldr	r3, [r3, #16]
 801e6de:	429a      	cmp	r2, r3
 801e6e0:	d908      	bls.n	801e6f4 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801e6e2:	683b      	ldr	r3, [r7, #0]
 801e6e4:	6a1a      	ldr	r2, [r3, #32]
 801e6e6:	1d7b      	adds	r3, r7, #5
 801e6e8:	33ff      	adds	r3, #255	@ 0xff
 801e6ea:	681b      	ldr	r3, [r3, #0]
 801e6ec:	1ad2      	subs	r2, r2, r3
 801e6ee:	683b      	ldr	r3, [r7, #0]
 801e6f0:	621a      	str	r2, [r3, #32]
 801e6f2:	e007      	b.n	801e704 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801e6f4:	683b      	ldr	r3, [r7, #0]
 801e6f6:	6a1b      	ldr	r3, [r3, #32]
 801e6f8:	1d7a      	adds	r2, r7, #5
 801e6fa:	32ff      	adds	r2, #255	@ 0xff
 801e6fc:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801e6fe:	683b      	ldr	r3, [r7, #0]
 801e700:	2200      	movs	r2, #0
 801e702:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801e704:	683b      	ldr	r3, [r7, #0]
 801e706:	785b      	ldrb	r3, [r3, #1]
 801e708:	2b00      	cmp	r3, #0
 801e70a:	d000      	beq.n	801e70e <USB_EPStartXfer+0x292>
 801e70c:	e070      	b.n	801e7f0 <USB_EPStartXfer+0x374>
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	61bb      	str	r3, [r7, #24]
 801e712:	687b      	ldr	r3, [r7, #4]
 801e714:	2250      	movs	r2, #80	@ 0x50
 801e716:	5a9b      	ldrh	r3, [r3, r2]
 801e718:	b29b      	uxth	r3, r3
 801e71a:	001a      	movs	r2, r3
 801e71c:	69bb      	ldr	r3, [r7, #24]
 801e71e:	189b      	adds	r3, r3, r2
 801e720:	61bb      	str	r3, [r7, #24]
 801e722:	683b      	ldr	r3, [r7, #0]
 801e724:	781b      	ldrb	r3, [r3, #0]
 801e726:	00da      	lsls	r2, r3, #3
 801e728:	69bb      	ldr	r3, [r7, #24]
 801e72a:	18d3      	adds	r3, r2, r3
 801e72c:	4a48      	ldr	r2, [pc, #288]	@ (801e850 <USB_EPStartXfer+0x3d4>)
 801e72e:	4694      	mov	ip, r2
 801e730:	4463      	add	r3, ip
 801e732:	617b      	str	r3, [r7, #20]
 801e734:	697b      	ldr	r3, [r7, #20]
 801e736:	881b      	ldrh	r3, [r3, #0]
 801e738:	b29b      	uxth	r3, r3
 801e73a:	059b      	lsls	r3, r3, #22
 801e73c:	0d9b      	lsrs	r3, r3, #22
 801e73e:	b29a      	uxth	r2, r3
 801e740:	697b      	ldr	r3, [r7, #20]
 801e742:	801a      	strh	r2, [r3, #0]
 801e744:	1d7b      	adds	r3, r7, #5
 801e746:	33ff      	adds	r3, #255	@ 0xff
 801e748:	681b      	ldr	r3, [r3, #0]
 801e74a:	2b3e      	cmp	r3, #62	@ 0x3e
 801e74c:	d922      	bls.n	801e794 <USB_EPStartXfer+0x318>
 801e74e:	1d7b      	adds	r3, r7, #5
 801e750:	33ff      	adds	r3, #255	@ 0xff
 801e752:	681b      	ldr	r3, [r3, #0]
 801e754:	095b      	lsrs	r3, r3, #5
 801e756:	21fc      	movs	r1, #252	@ 0xfc
 801e758:	187a      	adds	r2, r7, r1
 801e75a:	6013      	str	r3, [r2, #0]
 801e75c:	1d7b      	adds	r3, r7, #5
 801e75e:	33ff      	adds	r3, #255	@ 0xff
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	221f      	movs	r2, #31
 801e764:	4013      	ands	r3, r2
 801e766:	d104      	bne.n	801e772 <USB_EPStartXfer+0x2f6>
 801e768:	187b      	adds	r3, r7, r1
 801e76a:	681b      	ldr	r3, [r3, #0]
 801e76c:	3b01      	subs	r3, #1
 801e76e:	187a      	adds	r2, r7, r1
 801e770:	6013      	str	r3, [r2, #0]
 801e772:	697b      	ldr	r3, [r7, #20]
 801e774:	881b      	ldrh	r3, [r3, #0]
 801e776:	b29a      	uxth	r2, r3
 801e778:	23fc      	movs	r3, #252	@ 0xfc
 801e77a:	18fb      	adds	r3, r7, r3
 801e77c:	681b      	ldr	r3, [r3, #0]
 801e77e:	b29b      	uxth	r3, r3
 801e780:	029b      	lsls	r3, r3, #10
 801e782:	b29b      	uxth	r3, r3
 801e784:	4313      	orrs	r3, r2
 801e786:	b29b      	uxth	r3, r3
 801e788:	4a35      	ldr	r2, [pc, #212]	@ (801e860 <USB_EPStartXfer+0x3e4>)
 801e78a:	4313      	orrs	r3, r2
 801e78c:	b29a      	uxth	r2, r3
 801e78e:	697b      	ldr	r3, [r7, #20]
 801e790:	801a      	strh	r2, [r3, #0]
 801e792:	e04a      	b.n	801e82a <USB_EPStartXfer+0x3ae>
 801e794:	1d7b      	adds	r3, r7, #5
 801e796:	33ff      	adds	r3, #255	@ 0xff
 801e798:	681b      	ldr	r3, [r3, #0]
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	d108      	bne.n	801e7b0 <USB_EPStartXfer+0x334>
 801e79e:	697b      	ldr	r3, [r7, #20]
 801e7a0:	881b      	ldrh	r3, [r3, #0]
 801e7a2:	b29b      	uxth	r3, r3
 801e7a4:	4a2e      	ldr	r2, [pc, #184]	@ (801e860 <USB_EPStartXfer+0x3e4>)
 801e7a6:	4313      	orrs	r3, r2
 801e7a8:	b29a      	uxth	r2, r3
 801e7aa:	697b      	ldr	r3, [r7, #20]
 801e7ac:	801a      	strh	r2, [r3, #0]
 801e7ae:	e03c      	b.n	801e82a <USB_EPStartXfer+0x3ae>
 801e7b0:	1d7b      	adds	r3, r7, #5
 801e7b2:	33ff      	adds	r3, #255	@ 0xff
 801e7b4:	681b      	ldr	r3, [r3, #0]
 801e7b6:	085b      	lsrs	r3, r3, #1
 801e7b8:	21fc      	movs	r1, #252	@ 0xfc
 801e7ba:	187a      	adds	r2, r7, r1
 801e7bc:	6013      	str	r3, [r2, #0]
 801e7be:	1d7b      	adds	r3, r7, #5
 801e7c0:	33ff      	adds	r3, #255	@ 0xff
 801e7c2:	681b      	ldr	r3, [r3, #0]
 801e7c4:	2201      	movs	r2, #1
 801e7c6:	4013      	ands	r3, r2
 801e7c8:	d004      	beq.n	801e7d4 <USB_EPStartXfer+0x358>
 801e7ca:	187b      	adds	r3, r7, r1
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	3301      	adds	r3, #1
 801e7d0:	187a      	adds	r2, r7, r1
 801e7d2:	6013      	str	r3, [r2, #0]
 801e7d4:	697b      	ldr	r3, [r7, #20]
 801e7d6:	881b      	ldrh	r3, [r3, #0]
 801e7d8:	b29a      	uxth	r2, r3
 801e7da:	23fc      	movs	r3, #252	@ 0xfc
 801e7dc:	18fb      	adds	r3, r7, r3
 801e7de:	681b      	ldr	r3, [r3, #0]
 801e7e0:	b29b      	uxth	r3, r3
 801e7e2:	029b      	lsls	r3, r3, #10
 801e7e4:	b29b      	uxth	r3, r3
 801e7e6:	4313      	orrs	r3, r2
 801e7e8:	b29a      	uxth	r2, r3
 801e7ea:	697b      	ldr	r3, [r7, #20]
 801e7ec:	801a      	strh	r2, [r3, #0]
 801e7ee:	e01c      	b.n	801e82a <USB_EPStartXfer+0x3ae>
 801e7f0:	683b      	ldr	r3, [r7, #0]
 801e7f2:	785b      	ldrb	r3, [r3, #1]
 801e7f4:	2b01      	cmp	r3, #1
 801e7f6:	d118      	bne.n	801e82a <USB_EPStartXfer+0x3ae>
 801e7f8:	687b      	ldr	r3, [r7, #4]
 801e7fa:	623b      	str	r3, [r7, #32]
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	2250      	movs	r2, #80	@ 0x50
 801e800:	5a9b      	ldrh	r3, [r3, r2]
 801e802:	b29b      	uxth	r3, r3
 801e804:	001a      	movs	r2, r3
 801e806:	6a3b      	ldr	r3, [r7, #32]
 801e808:	189b      	adds	r3, r3, r2
 801e80a:	623b      	str	r3, [r7, #32]
 801e80c:	683b      	ldr	r3, [r7, #0]
 801e80e:	781b      	ldrb	r3, [r3, #0]
 801e810:	00da      	lsls	r2, r3, #3
 801e812:	6a3b      	ldr	r3, [r7, #32]
 801e814:	18d3      	adds	r3, r2, r3
 801e816:	4a0e      	ldr	r2, [pc, #56]	@ (801e850 <USB_EPStartXfer+0x3d4>)
 801e818:	4694      	mov	ip, r2
 801e81a:	4463      	add	r3, ip
 801e81c:	61fb      	str	r3, [r7, #28]
 801e81e:	1d7b      	adds	r3, r7, #5
 801e820:	33ff      	adds	r3, #255	@ 0xff
 801e822:	681b      	ldr	r3, [r3, #0]
 801e824:	b29a      	uxth	r2, r3
 801e826:	69fb      	ldr	r3, [r7, #28]
 801e828:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801e82a:	2076      	movs	r0, #118	@ 0x76
 801e82c:	183b      	adds	r3, r7, r0
 801e82e:	683a      	ldr	r2, [r7, #0]
 801e830:	8912      	ldrh	r2, [r2, #8]
 801e832:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801e834:	683b      	ldr	r3, [r7, #0]
 801e836:	6959      	ldr	r1, [r3, #20]
 801e838:	1d7b      	adds	r3, r7, #5
 801e83a:	33ff      	adds	r3, #255	@ 0xff
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	b29c      	uxth	r4, r3
 801e840:	183b      	adds	r3, r7, r0
 801e842:	881a      	ldrh	r2, [r3, #0]
 801e844:	6878      	ldr	r0, [r7, #4]
 801e846:	0023      	movs	r3, r4
 801e848:	f001 f88a 	bl	801f960 <USB_WritePMA>
 801e84c:	e329      	b.n	801eea2 <USB_EPStartXfer+0xa26>
 801e84e:	46c0      	nop			@ (mov r8, r8)
 801e850:	00000402 	.word	0x00000402
 801e854:	ffff8f8f 	.word	0xffff8f8f
 801e858:	ffff8180 	.word	0xffff8180
 801e85c:	00000406 	.word	0x00000406
 801e860:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801e864:	683b      	ldr	r3, [r7, #0]
 801e866:	785b      	ldrb	r3, [r3, #1]
 801e868:	2b00      	cmp	r3, #0
 801e86a:	d000      	beq.n	801e86e <USB_EPStartXfer+0x3f2>
 801e86c:	e070      	b.n	801e950 <USB_EPStartXfer+0x4d4>
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e872:	687b      	ldr	r3, [r7, #4]
 801e874:	2250      	movs	r2, #80	@ 0x50
 801e876:	5a9b      	ldrh	r3, [r3, r2]
 801e878:	b29b      	uxth	r3, r3
 801e87a:	001a      	movs	r2, r3
 801e87c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e87e:	189b      	adds	r3, r3, r2
 801e880:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e882:	683b      	ldr	r3, [r7, #0]
 801e884:	781b      	ldrb	r3, [r3, #0]
 801e886:	00da      	lsls	r2, r3, #3
 801e888:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e88a:	18d3      	adds	r3, r2, r3
 801e88c:	4acd      	ldr	r2, [pc, #820]	@ (801ebc4 <USB_EPStartXfer+0x748>)
 801e88e:	4694      	mov	ip, r2
 801e890:	4463      	add	r3, ip
 801e892:	647b      	str	r3, [r7, #68]	@ 0x44
 801e894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e896:	881b      	ldrh	r3, [r3, #0]
 801e898:	b29b      	uxth	r3, r3
 801e89a:	059b      	lsls	r3, r3, #22
 801e89c:	0d9b      	lsrs	r3, r3, #22
 801e89e:	b29a      	uxth	r2, r3
 801e8a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e8a2:	801a      	strh	r2, [r3, #0]
 801e8a4:	1d7b      	adds	r3, r7, #5
 801e8a6:	33ff      	adds	r3, #255	@ 0xff
 801e8a8:	681b      	ldr	r3, [r3, #0]
 801e8aa:	2b3e      	cmp	r3, #62	@ 0x3e
 801e8ac:	d922      	bls.n	801e8f4 <USB_EPStartXfer+0x478>
 801e8ae:	1d7b      	adds	r3, r7, #5
 801e8b0:	33ff      	adds	r3, #255	@ 0xff
 801e8b2:	681b      	ldr	r3, [r3, #0]
 801e8b4:	095b      	lsrs	r3, r3, #5
 801e8b6:	21f8      	movs	r1, #248	@ 0xf8
 801e8b8:	187a      	adds	r2, r7, r1
 801e8ba:	6013      	str	r3, [r2, #0]
 801e8bc:	1d7b      	adds	r3, r7, #5
 801e8be:	33ff      	adds	r3, #255	@ 0xff
 801e8c0:	681b      	ldr	r3, [r3, #0]
 801e8c2:	221f      	movs	r2, #31
 801e8c4:	4013      	ands	r3, r2
 801e8c6:	d104      	bne.n	801e8d2 <USB_EPStartXfer+0x456>
 801e8c8:	187b      	adds	r3, r7, r1
 801e8ca:	681b      	ldr	r3, [r3, #0]
 801e8cc:	3b01      	subs	r3, #1
 801e8ce:	187a      	adds	r2, r7, r1
 801e8d0:	6013      	str	r3, [r2, #0]
 801e8d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e8d4:	881b      	ldrh	r3, [r3, #0]
 801e8d6:	b29a      	uxth	r2, r3
 801e8d8:	23f8      	movs	r3, #248	@ 0xf8
 801e8da:	18fb      	adds	r3, r7, r3
 801e8dc:	681b      	ldr	r3, [r3, #0]
 801e8de:	b29b      	uxth	r3, r3
 801e8e0:	029b      	lsls	r3, r3, #10
 801e8e2:	b29b      	uxth	r3, r3
 801e8e4:	4313      	orrs	r3, r2
 801e8e6:	b29b      	uxth	r3, r3
 801e8e8:	4ab7      	ldr	r2, [pc, #732]	@ (801ebc8 <USB_EPStartXfer+0x74c>)
 801e8ea:	4313      	orrs	r3, r2
 801e8ec:	b29a      	uxth	r2, r3
 801e8ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e8f0:	801a      	strh	r2, [r3, #0]
 801e8f2:	e04a      	b.n	801e98a <USB_EPStartXfer+0x50e>
 801e8f4:	1d7b      	adds	r3, r7, #5
 801e8f6:	33ff      	adds	r3, #255	@ 0xff
 801e8f8:	681b      	ldr	r3, [r3, #0]
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d108      	bne.n	801e910 <USB_EPStartXfer+0x494>
 801e8fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e900:	881b      	ldrh	r3, [r3, #0]
 801e902:	b29b      	uxth	r3, r3
 801e904:	4ab0      	ldr	r2, [pc, #704]	@ (801ebc8 <USB_EPStartXfer+0x74c>)
 801e906:	4313      	orrs	r3, r2
 801e908:	b29a      	uxth	r2, r3
 801e90a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e90c:	801a      	strh	r2, [r3, #0]
 801e90e:	e03c      	b.n	801e98a <USB_EPStartXfer+0x50e>
 801e910:	1d7b      	adds	r3, r7, #5
 801e912:	33ff      	adds	r3, #255	@ 0xff
 801e914:	681b      	ldr	r3, [r3, #0]
 801e916:	085b      	lsrs	r3, r3, #1
 801e918:	21f8      	movs	r1, #248	@ 0xf8
 801e91a:	187a      	adds	r2, r7, r1
 801e91c:	6013      	str	r3, [r2, #0]
 801e91e:	1d7b      	adds	r3, r7, #5
 801e920:	33ff      	adds	r3, #255	@ 0xff
 801e922:	681b      	ldr	r3, [r3, #0]
 801e924:	2201      	movs	r2, #1
 801e926:	4013      	ands	r3, r2
 801e928:	d004      	beq.n	801e934 <USB_EPStartXfer+0x4b8>
 801e92a:	187b      	adds	r3, r7, r1
 801e92c:	681b      	ldr	r3, [r3, #0]
 801e92e:	3301      	adds	r3, #1
 801e930:	187a      	adds	r2, r7, r1
 801e932:	6013      	str	r3, [r2, #0]
 801e934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e936:	881b      	ldrh	r3, [r3, #0]
 801e938:	b29a      	uxth	r2, r3
 801e93a:	23f8      	movs	r3, #248	@ 0xf8
 801e93c:	18fb      	adds	r3, r7, r3
 801e93e:	681b      	ldr	r3, [r3, #0]
 801e940:	b29b      	uxth	r3, r3
 801e942:	029b      	lsls	r3, r3, #10
 801e944:	b29b      	uxth	r3, r3
 801e946:	4313      	orrs	r3, r2
 801e948:	b29a      	uxth	r2, r3
 801e94a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e94c:	801a      	strh	r2, [r3, #0]
 801e94e:	e01c      	b.n	801e98a <USB_EPStartXfer+0x50e>
 801e950:	683b      	ldr	r3, [r7, #0]
 801e952:	785b      	ldrb	r3, [r3, #1]
 801e954:	2b01      	cmp	r3, #1
 801e956:	d118      	bne.n	801e98a <USB_EPStartXfer+0x50e>
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	653b      	str	r3, [r7, #80]	@ 0x50
 801e95c:	687b      	ldr	r3, [r7, #4]
 801e95e:	2250      	movs	r2, #80	@ 0x50
 801e960:	5a9b      	ldrh	r3, [r3, r2]
 801e962:	b29b      	uxth	r3, r3
 801e964:	001a      	movs	r2, r3
 801e966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e968:	189b      	adds	r3, r3, r2
 801e96a:	653b      	str	r3, [r7, #80]	@ 0x50
 801e96c:	683b      	ldr	r3, [r7, #0]
 801e96e:	781b      	ldrb	r3, [r3, #0]
 801e970:	00da      	lsls	r2, r3, #3
 801e972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e974:	18d3      	adds	r3, r2, r3
 801e976:	4a93      	ldr	r2, [pc, #588]	@ (801ebc4 <USB_EPStartXfer+0x748>)
 801e978:	4694      	mov	ip, r2
 801e97a:	4463      	add	r3, ip
 801e97c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e97e:	1d7b      	adds	r3, r7, #5
 801e980:	33ff      	adds	r3, #255	@ 0xff
 801e982:	681b      	ldr	r3, [r3, #0]
 801e984:	b29a      	uxth	r2, r3
 801e986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e988:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801e98a:	2076      	movs	r0, #118	@ 0x76
 801e98c:	183b      	adds	r3, r7, r0
 801e98e:	683a      	ldr	r2, [r7, #0]
 801e990:	8912      	ldrh	r2, [r2, #8]
 801e992:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801e994:	683b      	ldr	r3, [r7, #0]
 801e996:	6959      	ldr	r1, [r3, #20]
 801e998:	1d7b      	adds	r3, r7, #5
 801e99a:	33ff      	adds	r3, #255	@ 0xff
 801e99c:	681b      	ldr	r3, [r3, #0]
 801e99e:	b29c      	uxth	r4, r3
 801e9a0:	183b      	adds	r3, r7, r0
 801e9a2:	881a      	ldrh	r2, [r3, #0]
 801e9a4:	6878      	ldr	r0, [r7, #4]
 801e9a6:	0023      	movs	r3, r4
 801e9a8:	f000 ffda 	bl	801f960 <USB_WritePMA>
            ep->xfer_buff += len;
 801e9ac:	683b      	ldr	r3, [r7, #0]
 801e9ae:	695a      	ldr	r2, [r3, #20]
 801e9b0:	1d7b      	adds	r3, r7, #5
 801e9b2:	33ff      	adds	r3, #255	@ 0xff
 801e9b4:	681b      	ldr	r3, [r3, #0]
 801e9b6:	18d2      	adds	r2, r2, r3
 801e9b8:	683b      	ldr	r3, [r7, #0]
 801e9ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801e9bc:	683b      	ldr	r3, [r7, #0]
 801e9be:	6a1a      	ldr	r2, [r3, #32]
 801e9c0:	683b      	ldr	r3, [r7, #0]
 801e9c2:	691b      	ldr	r3, [r3, #16]
 801e9c4:	429a      	cmp	r2, r3
 801e9c6:	d908      	bls.n	801e9da <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801e9c8:	683b      	ldr	r3, [r7, #0]
 801e9ca:	6a1a      	ldr	r2, [r3, #32]
 801e9cc:	1d7b      	adds	r3, r7, #5
 801e9ce:	33ff      	adds	r3, #255	@ 0xff
 801e9d0:	681b      	ldr	r3, [r3, #0]
 801e9d2:	1ad2      	subs	r2, r2, r3
 801e9d4:	683b      	ldr	r3, [r7, #0]
 801e9d6:	621a      	str	r2, [r3, #32]
 801e9d8:	e007      	b.n	801e9ea <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801e9da:	683b      	ldr	r3, [r7, #0]
 801e9dc:	6a1b      	ldr	r3, [r3, #32]
 801e9de:	1d7a      	adds	r2, r7, #5
 801e9e0:	32ff      	adds	r2, #255	@ 0xff
 801e9e2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801e9e4:	683b      	ldr	r3, [r7, #0]
 801e9e6:	2200      	movs	r2, #0
 801e9e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801e9ea:	687b      	ldr	r3, [r7, #4]
 801e9ec:	643b      	str	r3, [r7, #64]	@ 0x40
 801e9ee:	683b      	ldr	r3, [r7, #0]
 801e9f0:	785b      	ldrb	r3, [r3, #1]
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	d000      	beq.n	801e9f8 <USB_EPStartXfer+0x57c>
 801e9f6:	e070      	b.n	801eada <USB_EPStartXfer+0x65e>
 801e9f8:	687b      	ldr	r3, [r7, #4]
 801e9fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	2250      	movs	r2, #80	@ 0x50
 801ea00:	5a9b      	ldrh	r3, [r3, r2]
 801ea02:	b29b      	uxth	r3, r3
 801ea04:	001a      	movs	r2, r3
 801ea06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea08:	189b      	adds	r3, r3, r2
 801ea0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ea0c:	683b      	ldr	r3, [r7, #0]
 801ea0e:	781b      	ldrb	r3, [r3, #0]
 801ea10:	00da      	lsls	r2, r3, #3
 801ea12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea14:	18d3      	adds	r3, r2, r3
 801ea16:	4a6d      	ldr	r2, [pc, #436]	@ (801ebcc <USB_EPStartXfer+0x750>)
 801ea18:	4694      	mov	ip, r2
 801ea1a:	4463      	add	r3, ip
 801ea1c:	637b      	str	r3, [r7, #52]	@ 0x34
 801ea1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea20:	881b      	ldrh	r3, [r3, #0]
 801ea22:	b29b      	uxth	r3, r3
 801ea24:	059b      	lsls	r3, r3, #22
 801ea26:	0d9b      	lsrs	r3, r3, #22
 801ea28:	b29a      	uxth	r2, r3
 801ea2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea2c:	801a      	strh	r2, [r3, #0]
 801ea2e:	1d7b      	adds	r3, r7, #5
 801ea30:	33ff      	adds	r3, #255	@ 0xff
 801ea32:	681b      	ldr	r3, [r3, #0]
 801ea34:	2b3e      	cmp	r3, #62	@ 0x3e
 801ea36:	d922      	bls.n	801ea7e <USB_EPStartXfer+0x602>
 801ea38:	1d7b      	adds	r3, r7, #5
 801ea3a:	33ff      	adds	r3, #255	@ 0xff
 801ea3c:	681b      	ldr	r3, [r3, #0]
 801ea3e:	095b      	lsrs	r3, r3, #5
 801ea40:	21f4      	movs	r1, #244	@ 0xf4
 801ea42:	187a      	adds	r2, r7, r1
 801ea44:	6013      	str	r3, [r2, #0]
 801ea46:	1d7b      	adds	r3, r7, #5
 801ea48:	33ff      	adds	r3, #255	@ 0xff
 801ea4a:	681b      	ldr	r3, [r3, #0]
 801ea4c:	221f      	movs	r2, #31
 801ea4e:	4013      	ands	r3, r2
 801ea50:	d104      	bne.n	801ea5c <USB_EPStartXfer+0x5e0>
 801ea52:	187b      	adds	r3, r7, r1
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	3b01      	subs	r3, #1
 801ea58:	187a      	adds	r2, r7, r1
 801ea5a:	6013      	str	r3, [r2, #0]
 801ea5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea5e:	881b      	ldrh	r3, [r3, #0]
 801ea60:	b29a      	uxth	r2, r3
 801ea62:	23f4      	movs	r3, #244	@ 0xf4
 801ea64:	18fb      	adds	r3, r7, r3
 801ea66:	681b      	ldr	r3, [r3, #0]
 801ea68:	b29b      	uxth	r3, r3
 801ea6a:	029b      	lsls	r3, r3, #10
 801ea6c:	b29b      	uxth	r3, r3
 801ea6e:	4313      	orrs	r3, r2
 801ea70:	b29b      	uxth	r3, r3
 801ea72:	4a55      	ldr	r2, [pc, #340]	@ (801ebc8 <USB_EPStartXfer+0x74c>)
 801ea74:	4313      	orrs	r3, r2
 801ea76:	b29a      	uxth	r2, r3
 801ea78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea7a:	801a      	strh	r2, [r3, #0]
 801ea7c:	e048      	b.n	801eb10 <USB_EPStartXfer+0x694>
 801ea7e:	1d7b      	adds	r3, r7, #5
 801ea80:	33ff      	adds	r3, #255	@ 0xff
 801ea82:	681b      	ldr	r3, [r3, #0]
 801ea84:	2b00      	cmp	r3, #0
 801ea86:	d108      	bne.n	801ea9a <USB_EPStartXfer+0x61e>
 801ea88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea8a:	881b      	ldrh	r3, [r3, #0]
 801ea8c:	b29b      	uxth	r3, r3
 801ea8e:	4a4e      	ldr	r2, [pc, #312]	@ (801ebc8 <USB_EPStartXfer+0x74c>)
 801ea90:	4313      	orrs	r3, r2
 801ea92:	b29a      	uxth	r2, r3
 801ea94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea96:	801a      	strh	r2, [r3, #0]
 801ea98:	e03a      	b.n	801eb10 <USB_EPStartXfer+0x694>
 801ea9a:	1d7b      	adds	r3, r7, #5
 801ea9c:	33ff      	adds	r3, #255	@ 0xff
 801ea9e:	681b      	ldr	r3, [r3, #0]
 801eaa0:	085b      	lsrs	r3, r3, #1
 801eaa2:	21f4      	movs	r1, #244	@ 0xf4
 801eaa4:	187a      	adds	r2, r7, r1
 801eaa6:	6013      	str	r3, [r2, #0]
 801eaa8:	1d7b      	adds	r3, r7, #5
 801eaaa:	33ff      	adds	r3, #255	@ 0xff
 801eaac:	681b      	ldr	r3, [r3, #0]
 801eaae:	2201      	movs	r2, #1
 801eab0:	4013      	ands	r3, r2
 801eab2:	d004      	beq.n	801eabe <USB_EPStartXfer+0x642>
 801eab4:	187b      	adds	r3, r7, r1
 801eab6:	681b      	ldr	r3, [r3, #0]
 801eab8:	3301      	adds	r3, #1
 801eaba:	187a      	adds	r2, r7, r1
 801eabc:	6013      	str	r3, [r2, #0]
 801eabe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eac0:	881b      	ldrh	r3, [r3, #0]
 801eac2:	b29a      	uxth	r2, r3
 801eac4:	23f4      	movs	r3, #244	@ 0xf4
 801eac6:	18fb      	adds	r3, r7, r3
 801eac8:	681b      	ldr	r3, [r3, #0]
 801eaca:	b29b      	uxth	r3, r3
 801eacc:	029b      	lsls	r3, r3, #10
 801eace:	b29b      	uxth	r3, r3
 801ead0:	4313      	orrs	r3, r2
 801ead2:	b29a      	uxth	r2, r3
 801ead4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ead6:	801a      	strh	r2, [r3, #0]
 801ead8:	e01a      	b.n	801eb10 <USB_EPStartXfer+0x694>
 801eada:	683b      	ldr	r3, [r7, #0]
 801eadc:	785b      	ldrb	r3, [r3, #1]
 801eade:	2b01      	cmp	r3, #1
 801eae0:	d116      	bne.n	801eb10 <USB_EPStartXfer+0x694>
 801eae2:	687b      	ldr	r3, [r7, #4]
 801eae4:	2250      	movs	r2, #80	@ 0x50
 801eae6:	5a9b      	ldrh	r3, [r3, r2]
 801eae8:	b29b      	uxth	r3, r3
 801eaea:	001a      	movs	r2, r3
 801eaec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801eaee:	189b      	adds	r3, r3, r2
 801eaf0:	643b      	str	r3, [r7, #64]	@ 0x40
 801eaf2:	683b      	ldr	r3, [r7, #0]
 801eaf4:	781b      	ldrb	r3, [r3, #0]
 801eaf6:	00da      	lsls	r2, r3, #3
 801eaf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801eafa:	18d3      	adds	r3, r2, r3
 801eafc:	4a33      	ldr	r2, [pc, #204]	@ (801ebcc <USB_EPStartXfer+0x750>)
 801eafe:	4694      	mov	ip, r2
 801eb00:	4463      	add	r3, ip
 801eb02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801eb04:	1d7b      	adds	r3, r7, #5
 801eb06:	33ff      	adds	r3, #255	@ 0xff
 801eb08:	681b      	ldr	r3, [r3, #0]
 801eb0a:	b29a      	uxth	r2, r3
 801eb0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801eb0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801eb10:	2076      	movs	r0, #118	@ 0x76
 801eb12:	183b      	adds	r3, r7, r0
 801eb14:	683a      	ldr	r2, [r7, #0]
 801eb16:	8952      	ldrh	r2, [r2, #10]
 801eb18:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801eb1a:	683b      	ldr	r3, [r7, #0]
 801eb1c:	6959      	ldr	r1, [r3, #20]
 801eb1e:	1d7b      	adds	r3, r7, #5
 801eb20:	33ff      	adds	r3, #255	@ 0xff
 801eb22:	681b      	ldr	r3, [r3, #0]
 801eb24:	b29c      	uxth	r4, r3
 801eb26:	183b      	adds	r3, r7, r0
 801eb28:	881a      	ldrh	r2, [r3, #0]
 801eb2a:	6878      	ldr	r0, [r7, #4]
 801eb2c:	0023      	movs	r3, r4
 801eb2e:	f000 ff17 	bl	801f960 <USB_WritePMA>
 801eb32:	e1b6      	b.n	801eea2 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801eb34:	683b      	ldr	r3, [r7, #0]
 801eb36:	6a1b      	ldr	r3, [r3, #32]
 801eb38:	1d7a      	adds	r2, r7, #5
 801eb3a:	32ff      	adds	r2, #255	@ 0xff
 801eb3c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801eb3e:	687a      	ldr	r2, [r7, #4]
 801eb40:	683b      	ldr	r3, [r7, #0]
 801eb42:	781b      	ldrb	r3, [r3, #0]
 801eb44:	009b      	lsls	r3, r3, #2
 801eb46:	18d3      	adds	r3, r2, r3
 801eb48:	881b      	ldrh	r3, [r3, #0]
 801eb4a:	b29a      	uxth	r2, r3
 801eb4c:	2062      	movs	r0, #98	@ 0x62
 801eb4e:	183b      	adds	r3, r7, r0
 801eb50:	491f      	ldr	r1, [pc, #124]	@ (801ebd0 <USB_EPStartXfer+0x754>)
 801eb52:	400a      	ands	r2, r1
 801eb54:	801a      	strh	r2, [r3, #0]
 801eb56:	687a      	ldr	r2, [r7, #4]
 801eb58:	683b      	ldr	r3, [r7, #0]
 801eb5a:	781b      	ldrb	r3, [r3, #0]
 801eb5c:	009b      	lsls	r3, r3, #2
 801eb5e:	18d3      	adds	r3, r2, r3
 801eb60:	183a      	adds	r2, r7, r0
 801eb62:	8812      	ldrh	r2, [r2, #0]
 801eb64:	491b      	ldr	r1, [pc, #108]	@ (801ebd4 <USB_EPStartXfer+0x758>)
 801eb66:	430a      	orrs	r2, r1
 801eb68:	b292      	uxth	r2, r2
 801eb6a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801eb70:	687b      	ldr	r3, [r7, #4]
 801eb72:	2250      	movs	r2, #80	@ 0x50
 801eb74:	5a9b      	ldrh	r3, [r3, r2]
 801eb76:	b29b      	uxth	r3, r3
 801eb78:	001a      	movs	r2, r3
 801eb7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801eb7c:	189b      	adds	r3, r3, r2
 801eb7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801eb80:	683b      	ldr	r3, [r7, #0]
 801eb82:	781b      	ldrb	r3, [r3, #0]
 801eb84:	00da      	lsls	r2, r3, #3
 801eb86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801eb88:	18d3      	adds	r3, r2, r3
 801eb8a:	4a0e      	ldr	r2, [pc, #56]	@ (801ebc4 <USB_EPStartXfer+0x748>)
 801eb8c:	4694      	mov	ip, r2
 801eb8e:	4463      	add	r3, ip
 801eb90:	65bb      	str	r3, [r7, #88]	@ 0x58
 801eb92:	1d7b      	adds	r3, r7, #5
 801eb94:	33ff      	adds	r3, #255	@ 0xff
 801eb96:	681b      	ldr	r3, [r3, #0]
 801eb98:	b29a      	uxth	r2, r3
 801eb9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801eb9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801eb9e:	2076      	movs	r0, #118	@ 0x76
 801eba0:	183b      	adds	r3, r7, r0
 801eba2:	683a      	ldr	r2, [r7, #0]
 801eba4:	8912      	ldrh	r2, [r2, #8]
 801eba6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801eba8:	683b      	ldr	r3, [r7, #0]
 801ebaa:	6959      	ldr	r1, [r3, #20]
 801ebac:	1d7b      	adds	r3, r7, #5
 801ebae:	33ff      	adds	r3, #255	@ 0xff
 801ebb0:	681b      	ldr	r3, [r3, #0]
 801ebb2:	b29c      	uxth	r4, r3
 801ebb4:	183b      	adds	r3, r7, r0
 801ebb6:	881a      	ldrh	r2, [r3, #0]
 801ebb8:	6878      	ldr	r0, [r7, #4]
 801ebba:	0023      	movs	r3, r4
 801ebbc:	f000 fed0 	bl	801f960 <USB_WritePMA>
 801ebc0:	e16f      	b.n	801eea2 <USB_EPStartXfer+0xa26>
 801ebc2:	46c0      	nop			@ (mov r8, r8)
 801ebc4:	00000402 	.word	0x00000402
 801ebc8:	ffff8000 	.word	0xffff8000
 801ebcc:	00000406 	.word	0x00000406
 801ebd0:	ffff8e8f 	.word	0xffff8e8f
 801ebd4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801ebd8:	683b      	ldr	r3, [r7, #0]
 801ebda:	6a1a      	ldr	r2, [r3, #32]
 801ebdc:	1d7b      	adds	r3, r7, #5
 801ebde:	33ff      	adds	r3, #255	@ 0xff
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	1ad2      	subs	r2, r2, r3
 801ebe4:	683b      	ldr	r3, [r7, #0]
 801ebe6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801ebe8:	687a      	ldr	r2, [r7, #4]
 801ebea:	683b      	ldr	r3, [r7, #0]
 801ebec:	781b      	ldrb	r3, [r3, #0]
 801ebee:	009b      	lsls	r3, r3, #2
 801ebf0:	18d3      	adds	r3, r2, r3
 801ebf2:	881b      	ldrh	r3, [r3, #0]
 801ebf4:	b29b      	uxth	r3, r3
 801ebf6:	001a      	movs	r2, r3
 801ebf8:	2340      	movs	r3, #64	@ 0x40
 801ebfa:	4013      	ands	r3, r2
 801ebfc:	d100      	bne.n	801ec00 <USB_EPStartXfer+0x784>
 801ebfe:	e0a4      	b.n	801ed4a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801ec00:	687b      	ldr	r3, [r7, #4]
 801ec02:	673b      	str	r3, [r7, #112]	@ 0x70
 801ec04:	683b      	ldr	r3, [r7, #0]
 801ec06:	785b      	ldrb	r3, [r3, #1]
 801ec08:	2b00      	cmp	r3, #0
 801ec0a:	d000      	beq.n	801ec0e <USB_EPStartXfer+0x792>
 801ec0c:	e070      	b.n	801ecf0 <USB_EPStartXfer+0x874>
 801ec0e:	687b      	ldr	r3, [r7, #4]
 801ec10:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ec12:	687b      	ldr	r3, [r7, #4]
 801ec14:	2250      	movs	r2, #80	@ 0x50
 801ec16:	5a9b      	ldrh	r3, [r3, r2]
 801ec18:	b29b      	uxth	r3, r3
 801ec1a:	001a      	movs	r2, r3
 801ec1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ec1e:	189b      	adds	r3, r3, r2
 801ec20:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ec22:	683b      	ldr	r3, [r7, #0]
 801ec24:	781b      	ldrb	r3, [r3, #0]
 801ec26:	00da      	lsls	r2, r3, #3
 801ec28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ec2a:	18d3      	adds	r3, r2, r3
 801ec2c:	4abc      	ldr	r2, [pc, #752]	@ (801ef20 <USB_EPStartXfer+0xaa4>)
 801ec2e:	4694      	mov	ip, r2
 801ec30:	4463      	add	r3, ip
 801ec32:	667b      	str	r3, [r7, #100]	@ 0x64
 801ec34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ec36:	881b      	ldrh	r3, [r3, #0]
 801ec38:	b29b      	uxth	r3, r3
 801ec3a:	059b      	lsls	r3, r3, #22
 801ec3c:	0d9b      	lsrs	r3, r3, #22
 801ec3e:	b29a      	uxth	r2, r3
 801ec40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ec42:	801a      	strh	r2, [r3, #0]
 801ec44:	1d7b      	adds	r3, r7, #5
 801ec46:	33ff      	adds	r3, #255	@ 0xff
 801ec48:	681b      	ldr	r3, [r3, #0]
 801ec4a:	2b3e      	cmp	r3, #62	@ 0x3e
 801ec4c:	d922      	bls.n	801ec94 <USB_EPStartXfer+0x818>
 801ec4e:	1d7b      	adds	r3, r7, #5
 801ec50:	33ff      	adds	r3, #255	@ 0xff
 801ec52:	681b      	ldr	r3, [r3, #0]
 801ec54:	095b      	lsrs	r3, r3, #5
 801ec56:	21f0      	movs	r1, #240	@ 0xf0
 801ec58:	187a      	adds	r2, r7, r1
 801ec5a:	6013      	str	r3, [r2, #0]
 801ec5c:	1d7b      	adds	r3, r7, #5
 801ec5e:	33ff      	adds	r3, #255	@ 0xff
 801ec60:	681b      	ldr	r3, [r3, #0]
 801ec62:	221f      	movs	r2, #31
 801ec64:	4013      	ands	r3, r2
 801ec66:	d104      	bne.n	801ec72 <USB_EPStartXfer+0x7f6>
 801ec68:	187b      	adds	r3, r7, r1
 801ec6a:	681b      	ldr	r3, [r3, #0]
 801ec6c:	3b01      	subs	r3, #1
 801ec6e:	187a      	adds	r2, r7, r1
 801ec70:	6013      	str	r3, [r2, #0]
 801ec72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ec74:	881b      	ldrh	r3, [r3, #0]
 801ec76:	b29a      	uxth	r2, r3
 801ec78:	23f0      	movs	r3, #240	@ 0xf0
 801ec7a:	18fb      	adds	r3, r7, r3
 801ec7c:	681b      	ldr	r3, [r3, #0]
 801ec7e:	b29b      	uxth	r3, r3
 801ec80:	029b      	lsls	r3, r3, #10
 801ec82:	b29b      	uxth	r3, r3
 801ec84:	4313      	orrs	r3, r2
 801ec86:	b29b      	uxth	r3, r3
 801ec88:	4aa6      	ldr	r2, [pc, #664]	@ (801ef24 <USB_EPStartXfer+0xaa8>)
 801ec8a:	4313      	orrs	r3, r2
 801ec8c:	b29a      	uxth	r2, r3
 801ec8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ec90:	801a      	strh	r2, [r3, #0]
 801ec92:	e048      	b.n	801ed26 <USB_EPStartXfer+0x8aa>
 801ec94:	1d7b      	adds	r3, r7, #5
 801ec96:	33ff      	adds	r3, #255	@ 0xff
 801ec98:	681b      	ldr	r3, [r3, #0]
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d108      	bne.n	801ecb0 <USB_EPStartXfer+0x834>
 801ec9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801eca0:	881b      	ldrh	r3, [r3, #0]
 801eca2:	b29b      	uxth	r3, r3
 801eca4:	4a9f      	ldr	r2, [pc, #636]	@ (801ef24 <USB_EPStartXfer+0xaa8>)
 801eca6:	4313      	orrs	r3, r2
 801eca8:	b29a      	uxth	r2, r3
 801ecaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ecac:	801a      	strh	r2, [r3, #0]
 801ecae:	e03a      	b.n	801ed26 <USB_EPStartXfer+0x8aa>
 801ecb0:	1d7b      	adds	r3, r7, #5
 801ecb2:	33ff      	adds	r3, #255	@ 0xff
 801ecb4:	681b      	ldr	r3, [r3, #0]
 801ecb6:	085b      	lsrs	r3, r3, #1
 801ecb8:	21f0      	movs	r1, #240	@ 0xf0
 801ecba:	187a      	adds	r2, r7, r1
 801ecbc:	6013      	str	r3, [r2, #0]
 801ecbe:	1d7b      	adds	r3, r7, #5
 801ecc0:	33ff      	adds	r3, #255	@ 0xff
 801ecc2:	681b      	ldr	r3, [r3, #0]
 801ecc4:	2201      	movs	r2, #1
 801ecc6:	4013      	ands	r3, r2
 801ecc8:	d004      	beq.n	801ecd4 <USB_EPStartXfer+0x858>
 801ecca:	187b      	adds	r3, r7, r1
 801eccc:	681b      	ldr	r3, [r3, #0]
 801ecce:	3301      	adds	r3, #1
 801ecd0:	187a      	adds	r2, r7, r1
 801ecd2:	6013      	str	r3, [r2, #0]
 801ecd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ecd6:	881b      	ldrh	r3, [r3, #0]
 801ecd8:	b29a      	uxth	r2, r3
 801ecda:	23f0      	movs	r3, #240	@ 0xf0
 801ecdc:	18fb      	adds	r3, r7, r3
 801ecde:	681b      	ldr	r3, [r3, #0]
 801ece0:	b29b      	uxth	r3, r3
 801ece2:	029b      	lsls	r3, r3, #10
 801ece4:	b29b      	uxth	r3, r3
 801ece6:	4313      	orrs	r3, r2
 801ece8:	b29a      	uxth	r2, r3
 801ecea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ecec:	801a      	strh	r2, [r3, #0]
 801ecee:	e01a      	b.n	801ed26 <USB_EPStartXfer+0x8aa>
 801ecf0:	683b      	ldr	r3, [r7, #0]
 801ecf2:	785b      	ldrb	r3, [r3, #1]
 801ecf4:	2b01      	cmp	r3, #1
 801ecf6:	d116      	bne.n	801ed26 <USB_EPStartXfer+0x8aa>
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	2250      	movs	r2, #80	@ 0x50
 801ecfc:	5a9b      	ldrh	r3, [r3, r2]
 801ecfe:	b29b      	uxth	r3, r3
 801ed00:	001a      	movs	r2, r3
 801ed02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ed04:	189b      	adds	r3, r3, r2
 801ed06:	673b      	str	r3, [r7, #112]	@ 0x70
 801ed08:	683b      	ldr	r3, [r7, #0]
 801ed0a:	781b      	ldrb	r3, [r3, #0]
 801ed0c:	00da      	lsls	r2, r3, #3
 801ed0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ed10:	18d3      	adds	r3, r2, r3
 801ed12:	4a83      	ldr	r2, [pc, #524]	@ (801ef20 <USB_EPStartXfer+0xaa4>)
 801ed14:	4694      	mov	ip, r2
 801ed16:	4463      	add	r3, ip
 801ed18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ed1a:	1d7b      	adds	r3, r7, #5
 801ed1c:	33ff      	adds	r3, #255	@ 0xff
 801ed1e:	681b      	ldr	r3, [r3, #0]
 801ed20:	b29a      	uxth	r2, r3
 801ed22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ed24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801ed26:	2076      	movs	r0, #118	@ 0x76
 801ed28:	183b      	adds	r3, r7, r0
 801ed2a:	683a      	ldr	r2, [r7, #0]
 801ed2c:	8952      	ldrh	r2, [r2, #10]
 801ed2e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ed30:	683b      	ldr	r3, [r7, #0]
 801ed32:	6959      	ldr	r1, [r3, #20]
 801ed34:	1d7b      	adds	r3, r7, #5
 801ed36:	33ff      	adds	r3, #255	@ 0xff
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	b29c      	uxth	r4, r3
 801ed3c:	183b      	adds	r3, r7, r0
 801ed3e:	881a      	ldrh	r2, [r3, #0]
 801ed40:	6878      	ldr	r0, [r7, #4]
 801ed42:	0023      	movs	r3, r4
 801ed44:	f000 fe0c 	bl	801f960 <USB_WritePMA>
 801ed48:	e0ab      	b.n	801eea2 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801ed4a:	683b      	ldr	r3, [r7, #0]
 801ed4c:	785b      	ldrb	r3, [r3, #1]
 801ed4e:	2b00      	cmp	r3, #0
 801ed50:	d000      	beq.n	801ed54 <USB_EPStartXfer+0x8d8>
 801ed52:	e070      	b.n	801ee36 <USB_EPStartXfer+0x9ba>
 801ed54:	687b      	ldr	r3, [r7, #4]
 801ed56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ed58:	687b      	ldr	r3, [r7, #4]
 801ed5a:	2250      	movs	r2, #80	@ 0x50
 801ed5c:	5a9b      	ldrh	r3, [r3, r2]
 801ed5e:	b29b      	uxth	r3, r3
 801ed60:	001a      	movs	r2, r3
 801ed62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ed64:	189b      	adds	r3, r3, r2
 801ed66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ed68:	683b      	ldr	r3, [r7, #0]
 801ed6a:	781b      	ldrb	r3, [r3, #0]
 801ed6c:	00da      	lsls	r2, r3, #3
 801ed6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ed70:	18d3      	adds	r3, r2, r3
 801ed72:	4a6d      	ldr	r2, [pc, #436]	@ (801ef28 <USB_EPStartXfer+0xaac>)
 801ed74:	4694      	mov	ip, r2
 801ed76:	4463      	add	r3, ip
 801ed78:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ed7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ed7c:	881b      	ldrh	r3, [r3, #0]
 801ed7e:	b29b      	uxth	r3, r3
 801ed80:	059b      	lsls	r3, r3, #22
 801ed82:	0d9b      	lsrs	r3, r3, #22
 801ed84:	b29a      	uxth	r2, r3
 801ed86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ed88:	801a      	strh	r2, [r3, #0]
 801ed8a:	1d7b      	adds	r3, r7, #5
 801ed8c:	33ff      	adds	r3, #255	@ 0xff
 801ed8e:	681b      	ldr	r3, [r3, #0]
 801ed90:	2b3e      	cmp	r3, #62	@ 0x3e
 801ed92:	d922      	bls.n	801edda <USB_EPStartXfer+0x95e>
 801ed94:	1d7b      	adds	r3, r7, #5
 801ed96:	33ff      	adds	r3, #255	@ 0xff
 801ed98:	681b      	ldr	r3, [r3, #0]
 801ed9a:	095b      	lsrs	r3, r3, #5
 801ed9c:	21ec      	movs	r1, #236	@ 0xec
 801ed9e:	187a      	adds	r2, r7, r1
 801eda0:	6013      	str	r3, [r2, #0]
 801eda2:	1d7b      	adds	r3, r7, #5
 801eda4:	33ff      	adds	r3, #255	@ 0xff
 801eda6:	681b      	ldr	r3, [r3, #0]
 801eda8:	221f      	movs	r2, #31
 801edaa:	4013      	ands	r3, r2
 801edac:	d104      	bne.n	801edb8 <USB_EPStartXfer+0x93c>
 801edae:	187b      	adds	r3, r7, r1
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	3b01      	subs	r3, #1
 801edb4:	187a      	adds	r2, r7, r1
 801edb6:	6013      	str	r3, [r2, #0]
 801edb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801edba:	881b      	ldrh	r3, [r3, #0]
 801edbc:	b29a      	uxth	r2, r3
 801edbe:	23ec      	movs	r3, #236	@ 0xec
 801edc0:	18fb      	adds	r3, r7, r3
 801edc2:	681b      	ldr	r3, [r3, #0]
 801edc4:	b29b      	uxth	r3, r3
 801edc6:	029b      	lsls	r3, r3, #10
 801edc8:	b29b      	uxth	r3, r3
 801edca:	4313      	orrs	r3, r2
 801edcc:	b29b      	uxth	r3, r3
 801edce:	4a55      	ldr	r2, [pc, #340]	@ (801ef24 <USB_EPStartXfer+0xaa8>)
 801edd0:	4313      	orrs	r3, r2
 801edd2:	b29a      	uxth	r2, r3
 801edd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801edd6:	801a      	strh	r2, [r3, #0]
 801edd8:	e052      	b.n	801ee80 <USB_EPStartXfer+0xa04>
 801edda:	1d7b      	adds	r3, r7, #5
 801eddc:	33ff      	adds	r3, #255	@ 0xff
 801edde:	681b      	ldr	r3, [r3, #0]
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	d108      	bne.n	801edf6 <USB_EPStartXfer+0x97a>
 801ede4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ede6:	881b      	ldrh	r3, [r3, #0]
 801ede8:	b29b      	uxth	r3, r3
 801edea:	4a4e      	ldr	r2, [pc, #312]	@ (801ef24 <USB_EPStartXfer+0xaa8>)
 801edec:	4313      	orrs	r3, r2
 801edee:	b29a      	uxth	r2, r3
 801edf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801edf2:	801a      	strh	r2, [r3, #0]
 801edf4:	e044      	b.n	801ee80 <USB_EPStartXfer+0xa04>
 801edf6:	1d7b      	adds	r3, r7, #5
 801edf8:	33ff      	adds	r3, #255	@ 0xff
 801edfa:	681b      	ldr	r3, [r3, #0]
 801edfc:	085b      	lsrs	r3, r3, #1
 801edfe:	21ec      	movs	r1, #236	@ 0xec
 801ee00:	187a      	adds	r2, r7, r1
 801ee02:	6013      	str	r3, [r2, #0]
 801ee04:	1d7b      	adds	r3, r7, #5
 801ee06:	33ff      	adds	r3, #255	@ 0xff
 801ee08:	681b      	ldr	r3, [r3, #0]
 801ee0a:	2201      	movs	r2, #1
 801ee0c:	4013      	ands	r3, r2
 801ee0e:	d004      	beq.n	801ee1a <USB_EPStartXfer+0x99e>
 801ee10:	187b      	adds	r3, r7, r1
 801ee12:	681b      	ldr	r3, [r3, #0]
 801ee14:	3301      	adds	r3, #1
 801ee16:	187a      	adds	r2, r7, r1
 801ee18:	6013      	str	r3, [r2, #0]
 801ee1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ee1c:	881b      	ldrh	r3, [r3, #0]
 801ee1e:	b29a      	uxth	r2, r3
 801ee20:	23ec      	movs	r3, #236	@ 0xec
 801ee22:	18fb      	adds	r3, r7, r3
 801ee24:	681b      	ldr	r3, [r3, #0]
 801ee26:	b29b      	uxth	r3, r3
 801ee28:	029b      	lsls	r3, r3, #10
 801ee2a:	b29b      	uxth	r3, r3
 801ee2c:	4313      	orrs	r3, r2
 801ee2e:	b29a      	uxth	r2, r3
 801ee30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ee32:	801a      	strh	r2, [r3, #0]
 801ee34:	e024      	b.n	801ee80 <USB_EPStartXfer+0xa04>
 801ee36:	683b      	ldr	r3, [r7, #0]
 801ee38:	785b      	ldrb	r3, [r3, #1]
 801ee3a:	2b01      	cmp	r3, #1
 801ee3c:	d120      	bne.n	801ee80 <USB_EPStartXfer+0xa04>
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	2184      	movs	r1, #132	@ 0x84
 801ee42:	187a      	adds	r2, r7, r1
 801ee44:	6013      	str	r3, [r2, #0]
 801ee46:	687b      	ldr	r3, [r7, #4]
 801ee48:	2250      	movs	r2, #80	@ 0x50
 801ee4a:	5a9b      	ldrh	r3, [r3, r2]
 801ee4c:	b29b      	uxth	r3, r3
 801ee4e:	001a      	movs	r2, r3
 801ee50:	187b      	adds	r3, r7, r1
 801ee52:	681b      	ldr	r3, [r3, #0]
 801ee54:	189b      	adds	r3, r3, r2
 801ee56:	187a      	adds	r2, r7, r1
 801ee58:	6013      	str	r3, [r2, #0]
 801ee5a:	683b      	ldr	r3, [r7, #0]
 801ee5c:	781b      	ldrb	r3, [r3, #0]
 801ee5e:	00da      	lsls	r2, r3, #3
 801ee60:	187b      	adds	r3, r7, r1
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	18d3      	adds	r3, r2, r3
 801ee66:	4a30      	ldr	r2, [pc, #192]	@ (801ef28 <USB_EPStartXfer+0xaac>)
 801ee68:	4694      	mov	ip, r2
 801ee6a:	4463      	add	r3, ip
 801ee6c:	2180      	movs	r1, #128	@ 0x80
 801ee6e:	187a      	adds	r2, r7, r1
 801ee70:	6013      	str	r3, [r2, #0]
 801ee72:	1d7b      	adds	r3, r7, #5
 801ee74:	33ff      	adds	r3, #255	@ 0xff
 801ee76:	681b      	ldr	r3, [r3, #0]
 801ee78:	b29a      	uxth	r2, r3
 801ee7a:	187b      	adds	r3, r7, r1
 801ee7c:	681b      	ldr	r3, [r3, #0]
 801ee7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801ee80:	2076      	movs	r0, #118	@ 0x76
 801ee82:	183b      	adds	r3, r7, r0
 801ee84:	683a      	ldr	r2, [r7, #0]
 801ee86:	8912      	ldrh	r2, [r2, #8]
 801ee88:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ee8a:	683b      	ldr	r3, [r7, #0]
 801ee8c:	6959      	ldr	r1, [r3, #20]
 801ee8e:	1d7b      	adds	r3, r7, #5
 801ee90:	33ff      	adds	r3, #255	@ 0xff
 801ee92:	681b      	ldr	r3, [r3, #0]
 801ee94:	b29c      	uxth	r4, r3
 801ee96:	183b      	adds	r3, r7, r0
 801ee98:	881a      	ldrh	r2, [r3, #0]
 801ee9a:	6878      	ldr	r0, [r7, #4]
 801ee9c:	0023      	movs	r3, r4
 801ee9e:	f000 fd5f 	bl	801f960 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801eea2:	687a      	ldr	r2, [r7, #4]
 801eea4:	683b      	ldr	r3, [r7, #0]
 801eea6:	781b      	ldrb	r3, [r3, #0]
 801eea8:	009b      	lsls	r3, r3, #2
 801eeaa:	18d3      	adds	r3, r2, r3
 801eeac:	881b      	ldrh	r3, [r3, #0]
 801eeae:	b29a      	uxth	r2, r3
 801eeb0:	200a      	movs	r0, #10
 801eeb2:	183b      	adds	r3, r7, r0
 801eeb4:	491d      	ldr	r1, [pc, #116]	@ (801ef2c <USB_EPStartXfer+0xab0>)
 801eeb6:	400a      	ands	r2, r1
 801eeb8:	801a      	strh	r2, [r3, #0]
 801eeba:	183b      	adds	r3, r7, r0
 801eebc:	183a      	adds	r2, r7, r0
 801eebe:	8812      	ldrh	r2, [r2, #0]
 801eec0:	2110      	movs	r1, #16
 801eec2:	404a      	eors	r2, r1
 801eec4:	801a      	strh	r2, [r3, #0]
 801eec6:	183b      	adds	r3, r7, r0
 801eec8:	183a      	adds	r2, r7, r0
 801eeca:	8812      	ldrh	r2, [r2, #0]
 801eecc:	2120      	movs	r1, #32
 801eece:	404a      	eors	r2, r1
 801eed0:	801a      	strh	r2, [r3, #0]
 801eed2:	687a      	ldr	r2, [r7, #4]
 801eed4:	683b      	ldr	r3, [r7, #0]
 801eed6:	781b      	ldrb	r3, [r3, #0]
 801eed8:	009b      	lsls	r3, r3, #2
 801eeda:	18d3      	adds	r3, r2, r3
 801eedc:	183a      	adds	r2, r7, r0
 801eede:	8812      	ldrh	r2, [r2, #0]
 801eee0:	4913      	ldr	r1, [pc, #76]	@ (801ef30 <USB_EPStartXfer+0xab4>)
 801eee2:	430a      	orrs	r2, r1
 801eee4:	b292      	uxth	r2, r2
 801eee6:	801a      	strh	r2, [r3, #0]
 801eee8:	f000 fbf4 	bl	801f6d4 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801eeec:	683b      	ldr	r3, [r7, #0]
 801eeee:	7b1b      	ldrb	r3, [r3, #12]
 801eef0:	2b00      	cmp	r3, #0
 801eef2:	d000      	beq.n	801eef6 <USB_EPStartXfer+0xa7a>
 801eef4:	e0a9      	b.n	801f04a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801eef6:	683b      	ldr	r3, [r7, #0]
 801eef8:	699a      	ldr	r2, [r3, #24]
 801eefa:	683b      	ldr	r3, [r7, #0]
 801eefc:	691b      	ldr	r3, [r3, #16]
 801eefe:	429a      	cmp	r2, r3
 801ef00:	d918      	bls.n	801ef34 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801ef02:	683b      	ldr	r3, [r7, #0]
 801ef04:	691b      	ldr	r3, [r3, #16]
 801ef06:	1d7a      	adds	r2, r7, #5
 801ef08:	32ff      	adds	r2, #255	@ 0xff
 801ef0a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801ef0c:	683b      	ldr	r3, [r7, #0]
 801ef0e:	699a      	ldr	r2, [r3, #24]
 801ef10:	1d7b      	adds	r3, r7, #5
 801ef12:	33ff      	adds	r3, #255	@ 0xff
 801ef14:	681b      	ldr	r3, [r3, #0]
 801ef16:	1ad2      	subs	r2, r2, r3
 801ef18:	683b      	ldr	r3, [r7, #0]
 801ef1a:	619a      	str	r2, [r3, #24]
 801ef1c:	e012      	b.n	801ef44 <USB_EPStartXfer+0xac8>
 801ef1e:	46c0      	nop			@ (mov r8, r8)
 801ef20:	00000406 	.word	0x00000406
 801ef24:	ffff8000 	.word	0xffff8000
 801ef28:	00000402 	.word	0x00000402
 801ef2c:	ffff8fbf 	.word	0xffff8fbf
 801ef30:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801ef34:	683b      	ldr	r3, [r7, #0]
 801ef36:	699b      	ldr	r3, [r3, #24]
 801ef38:	1d7a      	adds	r2, r7, #5
 801ef3a:	32ff      	adds	r2, #255	@ 0xff
 801ef3c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801ef3e:	683b      	ldr	r3, [r7, #0]
 801ef40:	2200      	movs	r2, #0
 801ef42:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	2190      	movs	r1, #144	@ 0x90
 801ef48:	187a      	adds	r2, r7, r1
 801ef4a:	6013      	str	r3, [r2, #0]
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	2250      	movs	r2, #80	@ 0x50
 801ef50:	5a9b      	ldrh	r3, [r3, r2]
 801ef52:	b29b      	uxth	r3, r3
 801ef54:	001a      	movs	r2, r3
 801ef56:	187b      	adds	r3, r7, r1
 801ef58:	681b      	ldr	r3, [r3, #0]
 801ef5a:	189b      	adds	r3, r3, r2
 801ef5c:	187a      	adds	r2, r7, r1
 801ef5e:	6013      	str	r3, [r2, #0]
 801ef60:	683b      	ldr	r3, [r7, #0]
 801ef62:	781b      	ldrb	r3, [r3, #0]
 801ef64:	00da      	lsls	r2, r3, #3
 801ef66:	187b      	adds	r3, r7, r1
 801ef68:	681b      	ldr	r3, [r3, #0]
 801ef6a:	18d3      	adds	r3, r2, r3
 801ef6c:	4acf      	ldr	r2, [pc, #828]	@ (801f2ac <USB_EPStartXfer+0xe30>)
 801ef6e:	4694      	mov	ip, r2
 801ef70:	4463      	add	r3, ip
 801ef72:	218c      	movs	r1, #140	@ 0x8c
 801ef74:	187a      	adds	r2, r7, r1
 801ef76:	6013      	str	r3, [r2, #0]
 801ef78:	187b      	adds	r3, r7, r1
 801ef7a:	681b      	ldr	r3, [r3, #0]
 801ef7c:	881b      	ldrh	r3, [r3, #0]
 801ef7e:	b29b      	uxth	r3, r3
 801ef80:	059b      	lsls	r3, r3, #22
 801ef82:	0d9b      	lsrs	r3, r3, #22
 801ef84:	b29a      	uxth	r2, r3
 801ef86:	187b      	adds	r3, r7, r1
 801ef88:	681b      	ldr	r3, [r3, #0]
 801ef8a:	801a      	strh	r2, [r3, #0]
 801ef8c:	1d7b      	adds	r3, r7, #5
 801ef8e:	33ff      	adds	r3, #255	@ 0xff
 801ef90:	681b      	ldr	r3, [r3, #0]
 801ef92:	2b3e      	cmp	r3, #62	@ 0x3e
 801ef94:	d925      	bls.n	801efe2 <USB_EPStartXfer+0xb66>
 801ef96:	1d7b      	adds	r3, r7, #5
 801ef98:	33ff      	adds	r3, #255	@ 0xff
 801ef9a:	681b      	ldr	r3, [r3, #0]
 801ef9c:	095b      	lsrs	r3, r3, #5
 801ef9e:	21e8      	movs	r1, #232	@ 0xe8
 801efa0:	187a      	adds	r2, r7, r1
 801efa2:	6013      	str	r3, [r2, #0]
 801efa4:	1d7b      	adds	r3, r7, #5
 801efa6:	33ff      	adds	r3, #255	@ 0xff
 801efa8:	681b      	ldr	r3, [r3, #0]
 801efaa:	221f      	movs	r2, #31
 801efac:	4013      	ands	r3, r2
 801efae:	d104      	bne.n	801efba <USB_EPStartXfer+0xb3e>
 801efb0:	187b      	adds	r3, r7, r1
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	3b01      	subs	r3, #1
 801efb6:	187a      	adds	r2, r7, r1
 801efb8:	6013      	str	r3, [r2, #0]
 801efba:	218c      	movs	r1, #140	@ 0x8c
 801efbc:	187b      	adds	r3, r7, r1
 801efbe:	681b      	ldr	r3, [r3, #0]
 801efc0:	881b      	ldrh	r3, [r3, #0]
 801efc2:	b29a      	uxth	r2, r3
 801efc4:	23e8      	movs	r3, #232	@ 0xe8
 801efc6:	18fb      	adds	r3, r7, r3
 801efc8:	681b      	ldr	r3, [r3, #0]
 801efca:	b29b      	uxth	r3, r3
 801efcc:	029b      	lsls	r3, r3, #10
 801efce:	b29b      	uxth	r3, r3
 801efd0:	4313      	orrs	r3, r2
 801efd2:	b29b      	uxth	r3, r3
 801efd4:	4ab6      	ldr	r2, [pc, #728]	@ (801f2b0 <USB_EPStartXfer+0xe34>)
 801efd6:	4313      	orrs	r3, r2
 801efd8:	b29a      	uxth	r2, r3
 801efda:	187b      	adds	r3, r7, r1
 801efdc:	681b      	ldr	r3, [r3, #0]
 801efde:	801a      	strh	r2, [r3, #0]
 801efe0:	e353      	b.n	801f68a <USB_EPStartXfer+0x120e>
 801efe2:	1d7b      	adds	r3, r7, #5
 801efe4:	33ff      	adds	r3, #255	@ 0xff
 801efe6:	681b      	ldr	r3, [r3, #0]
 801efe8:	2b00      	cmp	r3, #0
 801efea:	d10b      	bne.n	801f004 <USB_EPStartXfer+0xb88>
 801efec:	218c      	movs	r1, #140	@ 0x8c
 801efee:	187b      	adds	r3, r7, r1
 801eff0:	681b      	ldr	r3, [r3, #0]
 801eff2:	881b      	ldrh	r3, [r3, #0]
 801eff4:	b29b      	uxth	r3, r3
 801eff6:	4aae      	ldr	r2, [pc, #696]	@ (801f2b0 <USB_EPStartXfer+0xe34>)
 801eff8:	4313      	orrs	r3, r2
 801effa:	b29a      	uxth	r2, r3
 801effc:	187b      	adds	r3, r7, r1
 801effe:	681b      	ldr	r3, [r3, #0]
 801f000:	801a      	strh	r2, [r3, #0]
 801f002:	e342      	b.n	801f68a <USB_EPStartXfer+0x120e>
 801f004:	1d7b      	adds	r3, r7, #5
 801f006:	33ff      	adds	r3, #255	@ 0xff
 801f008:	681b      	ldr	r3, [r3, #0]
 801f00a:	085b      	lsrs	r3, r3, #1
 801f00c:	21e8      	movs	r1, #232	@ 0xe8
 801f00e:	187a      	adds	r2, r7, r1
 801f010:	6013      	str	r3, [r2, #0]
 801f012:	1d7b      	adds	r3, r7, #5
 801f014:	33ff      	adds	r3, #255	@ 0xff
 801f016:	681b      	ldr	r3, [r3, #0]
 801f018:	2201      	movs	r2, #1
 801f01a:	4013      	ands	r3, r2
 801f01c:	d004      	beq.n	801f028 <USB_EPStartXfer+0xbac>
 801f01e:	187b      	adds	r3, r7, r1
 801f020:	681b      	ldr	r3, [r3, #0]
 801f022:	3301      	adds	r3, #1
 801f024:	187a      	adds	r2, r7, r1
 801f026:	6013      	str	r3, [r2, #0]
 801f028:	218c      	movs	r1, #140	@ 0x8c
 801f02a:	187b      	adds	r3, r7, r1
 801f02c:	681b      	ldr	r3, [r3, #0]
 801f02e:	881b      	ldrh	r3, [r3, #0]
 801f030:	b29a      	uxth	r2, r3
 801f032:	23e8      	movs	r3, #232	@ 0xe8
 801f034:	18fb      	adds	r3, r7, r3
 801f036:	681b      	ldr	r3, [r3, #0]
 801f038:	b29b      	uxth	r3, r3
 801f03a:	029b      	lsls	r3, r3, #10
 801f03c:	b29b      	uxth	r3, r3
 801f03e:	4313      	orrs	r3, r2
 801f040:	b29a      	uxth	r2, r3
 801f042:	187b      	adds	r3, r7, r1
 801f044:	681b      	ldr	r3, [r3, #0]
 801f046:	801a      	strh	r2, [r3, #0]
 801f048:	e31f      	b.n	801f68a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801f04a:	683b      	ldr	r3, [r7, #0]
 801f04c:	78db      	ldrb	r3, [r3, #3]
 801f04e:	2b02      	cmp	r3, #2
 801f050:	d000      	beq.n	801f054 <USB_EPStartXfer+0xbd8>
 801f052:	e191      	b.n	801f378 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801f054:	683b      	ldr	r3, [r7, #0]
 801f056:	785b      	ldrb	r3, [r3, #1]
 801f058:	2b00      	cmp	r3, #0
 801f05a:	d000      	beq.n	801f05e <USB_EPStartXfer+0xbe2>
 801f05c:	e07c      	b.n	801f158 <USB_EPStartXfer+0xcdc>
 801f05e:	687b      	ldr	r3, [r7, #4]
 801f060:	21ac      	movs	r1, #172	@ 0xac
 801f062:	187a      	adds	r2, r7, r1
 801f064:	6013      	str	r3, [r2, #0]
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	2250      	movs	r2, #80	@ 0x50
 801f06a:	5a9b      	ldrh	r3, [r3, r2]
 801f06c:	b29b      	uxth	r3, r3
 801f06e:	001a      	movs	r2, r3
 801f070:	187b      	adds	r3, r7, r1
 801f072:	681b      	ldr	r3, [r3, #0]
 801f074:	189b      	adds	r3, r3, r2
 801f076:	187a      	adds	r2, r7, r1
 801f078:	6013      	str	r3, [r2, #0]
 801f07a:	683b      	ldr	r3, [r7, #0]
 801f07c:	781b      	ldrb	r3, [r3, #0]
 801f07e:	00da      	lsls	r2, r3, #3
 801f080:	187b      	adds	r3, r7, r1
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	18d3      	adds	r3, r2, r3
 801f086:	4a8b      	ldr	r2, [pc, #556]	@ (801f2b4 <USB_EPStartXfer+0xe38>)
 801f088:	4694      	mov	ip, r2
 801f08a:	4463      	add	r3, ip
 801f08c:	21a8      	movs	r1, #168	@ 0xa8
 801f08e:	187a      	adds	r2, r7, r1
 801f090:	6013      	str	r3, [r2, #0]
 801f092:	187b      	adds	r3, r7, r1
 801f094:	681b      	ldr	r3, [r3, #0]
 801f096:	881b      	ldrh	r3, [r3, #0]
 801f098:	b29b      	uxth	r3, r3
 801f09a:	059b      	lsls	r3, r3, #22
 801f09c:	0d9b      	lsrs	r3, r3, #22
 801f09e:	b29a      	uxth	r2, r3
 801f0a0:	187b      	adds	r3, r7, r1
 801f0a2:	681b      	ldr	r3, [r3, #0]
 801f0a4:	801a      	strh	r2, [r3, #0]
 801f0a6:	683b      	ldr	r3, [r7, #0]
 801f0a8:	691b      	ldr	r3, [r3, #16]
 801f0aa:	2b3e      	cmp	r3, #62	@ 0x3e
 801f0ac:	d923      	bls.n	801f0f6 <USB_EPStartXfer+0xc7a>
 801f0ae:	683b      	ldr	r3, [r7, #0]
 801f0b0:	691b      	ldr	r3, [r3, #16]
 801f0b2:	095b      	lsrs	r3, r3, #5
 801f0b4:	21e4      	movs	r1, #228	@ 0xe4
 801f0b6:	187a      	adds	r2, r7, r1
 801f0b8:	6013      	str	r3, [r2, #0]
 801f0ba:	683b      	ldr	r3, [r7, #0]
 801f0bc:	691b      	ldr	r3, [r3, #16]
 801f0be:	221f      	movs	r2, #31
 801f0c0:	4013      	ands	r3, r2
 801f0c2:	d104      	bne.n	801f0ce <USB_EPStartXfer+0xc52>
 801f0c4:	187b      	adds	r3, r7, r1
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	3b01      	subs	r3, #1
 801f0ca:	187a      	adds	r2, r7, r1
 801f0cc:	6013      	str	r3, [r2, #0]
 801f0ce:	21a8      	movs	r1, #168	@ 0xa8
 801f0d0:	187b      	adds	r3, r7, r1
 801f0d2:	681b      	ldr	r3, [r3, #0]
 801f0d4:	881b      	ldrh	r3, [r3, #0]
 801f0d6:	b29a      	uxth	r2, r3
 801f0d8:	23e4      	movs	r3, #228	@ 0xe4
 801f0da:	18fb      	adds	r3, r7, r3
 801f0dc:	681b      	ldr	r3, [r3, #0]
 801f0de:	b29b      	uxth	r3, r3
 801f0e0:	029b      	lsls	r3, r3, #10
 801f0e2:	b29b      	uxth	r3, r3
 801f0e4:	4313      	orrs	r3, r2
 801f0e6:	b29b      	uxth	r3, r3
 801f0e8:	4a71      	ldr	r2, [pc, #452]	@ (801f2b0 <USB_EPStartXfer+0xe34>)
 801f0ea:	4313      	orrs	r3, r2
 801f0ec:	b29a      	uxth	r2, r3
 801f0ee:	187b      	adds	r3, r7, r1
 801f0f0:	681b      	ldr	r3, [r3, #0]
 801f0f2:	801a      	strh	r2, [r3, #0]
 801f0f4:	e054      	b.n	801f1a0 <USB_EPStartXfer+0xd24>
 801f0f6:	683b      	ldr	r3, [r7, #0]
 801f0f8:	691b      	ldr	r3, [r3, #16]
 801f0fa:	2b00      	cmp	r3, #0
 801f0fc:	d10b      	bne.n	801f116 <USB_EPStartXfer+0xc9a>
 801f0fe:	21a8      	movs	r1, #168	@ 0xa8
 801f100:	187b      	adds	r3, r7, r1
 801f102:	681b      	ldr	r3, [r3, #0]
 801f104:	881b      	ldrh	r3, [r3, #0]
 801f106:	b29b      	uxth	r3, r3
 801f108:	4a69      	ldr	r2, [pc, #420]	@ (801f2b0 <USB_EPStartXfer+0xe34>)
 801f10a:	4313      	orrs	r3, r2
 801f10c:	b29a      	uxth	r2, r3
 801f10e:	187b      	adds	r3, r7, r1
 801f110:	681b      	ldr	r3, [r3, #0]
 801f112:	801a      	strh	r2, [r3, #0]
 801f114:	e044      	b.n	801f1a0 <USB_EPStartXfer+0xd24>
 801f116:	683b      	ldr	r3, [r7, #0]
 801f118:	691b      	ldr	r3, [r3, #16]
 801f11a:	085b      	lsrs	r3, r3, #1
 801f11c:	21e4      	movs	r1, #228	@ 0xe4
 801f11e:	187a      	adds	r2, r7, r1
 801f120:	6013      	str	r3, [r2, #0]
 801f122:	683b      	ldr	r3, [r7, #0]
 801f124:	691b      	ldr	r3, [r3, #16]
 801f126:	2201      	movs	r2, #1
 801f128:	4013      	ands	r3, r2
 801f12a:	d004      	beq.n	801f136 <USB_EPStartXfer+0xcba>
 801f12c:	187b      	adds	r3, r7, r1
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	3301      	adds	r3, #1
 801f132:	187a      	adds	r2, r7, r1
 801f134:	6013      	str	r3, [r2, #0]
 801f136:	21a8      	movs	r1, #168	@ 0xa8
 801f138:	187b      	adds	r3, r7, r1
 801f13a:	681b      	ldr	r3, [r3, #0]
 801f13c:	881b      	ldrh	r3, [r3, #0]
 801f13e:	b29a      	uxth	r2, r3
 801f140:	23e4      	movs	r3, #228	@ 0xe4
 801f142:	18fb      	adds	r3, r7, r3
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	b29b      	uxth	r3, r3
 801f148:	029b      	lsls	r3, r3, #10
 801f14a:	b29b      	uxth	r3, r3
 801f14c:	4313      	orrs	r3, r2
 801f14e:	b29a      	uxth	r2, r3
 801f150:	187b      	adds	r3, r7, r1
 801f152:	681b      	ldr	r3, [r3, #0]
 801f154:	801a      	strh	r2, [r3, #0]
 801f156:	e023      	b.n	801f1a0 <USB_EPStartXfer+0xd24>
 801f158:	683b      	ldr	r3, [r7, #0]
 801f15a:	785b      	ldrb	r3, [r3, #1]
 801f15c:	2b01      	cmp	r3, #1
 801f15e:	d11f      	bne.n	801f1a0 <USB_EPStartXfer+0xd24>
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	21b4      	movs	r1, #180	@ 0xb4
 801f164:	187a      	adds	r2, r7, r1
 801f166:	6013      	str	r3, [r2, #0]
 801f168:	687b      	ldr	r3, [r7, #4]
 801f16a:	2250      	movs	r2, #80	@ 0x50
 801f16c:	5a9b      	ldrh	r3, [r3, r2]
 801f16e:	b29b      	uxth	r3, r3
 801f170:	001a      	movs	r2, r3
 801f172:	187b      	adds	r3, r7, r1
 801f174:	681b      	ldr	r3, [r3, #0]
 801f176:	189b      	adds	r3, r3, r2
 801f178:	187a      	adds	r2, r7, r1
 801f17a:	6013      	str	r3, [r2, #0]
 801f17c:	683b      	ldr	r3, [r7, #0]
 801f17e:	781b      	ldrb	r3, [r3, #0]
 801f180:	00da      	lsls	r2, r3, #3
 801f182:	187b      	adds	r3, r7, r1
 801f184:	681b      	ldr	r3, [r3, #0]
 801f186:	18d3      	adds	r3, r2, r3
 801f188:	4a4a      	ldr	r2, [pc, #296]	@ (801f2b4 <USB_EPStartXfer+0xe38>)
 801f18a:	4694      	mov	ip, r2
 801f18c:	4463      	add	r3, ip
 801f18e:	21b0      	movs	r1, #176	@ 0xb0
 801f190:	187a      	adds	r2, r7, r1
 801f192:	6013      	str	r3, [r2, #0]
 801f194:	683b      	ldr	r3, [r7, #0]
 801f196:	691b      	ldr	r3, [r3, #16]
 801f198:	b29a      	uxth	r2, r3
 801f19a:	187b      	adds	r3, r7, r1
 801f19c:	681b      	ldr	r3, [r3, #0]
 801f19e:	801a      	strh	r2, [r3, #0]
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	22a4      	movs	r2, #164	@ 0xa4
 801f1a4:	18ba      	adds	r2, r7, r2
 801f1a6:	6013      	str	r3, [r2, #0]
 801f1a8:	683b      	ldr	r3, [r7, #0]
 801f1aa:	785b      	ldrb	r3, [r3, #1]
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d000      	beq.n	801f1b2 <USB_EPStartXfer+0xd36>
 801f1b0:	e082      	b.n	801f2b8 <USB_EPStartXfer+0xe3c>
 801f1b2:	687b      	ldr	r3, [r7, #4]
 801f1b4:	219c      	movs	r1, #156	@ 0x9c
 801f1b6:	187a      	adds	r2, r7, r1
 801f1b8:	6013      	str	r3, [r2, #0]
 801f1ba:	687b      	ldr	r3, [r7, #4]
 801f1bc:	2250      	movs	r2, #80	@ 0x50
 801f1be:	5a9b      	ldrh	r3, [r3, r2]
 801f1c0:	b29b      	uxth	r3, r3
 801f1c2:	001a      	movs	r2, r3
 801f1c4:	187b      	adds	r3, r7, r1
 801f1c6:	681b      	ldr	r3, [r3, #0]
 801f1c8:	189b      	adds	r3, r3, r2
 801f1ca:	187a      	adds	r2, r7, r1
 801f1cc:	6013      	str	r3, [r2, #0]
 801f1ce:	683b      	ldr	r3, [r7, #0]
 801f1d0:	781b      	ldrb	r3, [r3, #0]
 801f1d2:	00da      	lsls	r2, r3, #3
 801f1d4:	187b      	adds	r3, r7, r1
 801f1d6:	681b      	ldr	r3, [r3, #0]
 801f1d8:	18d3      	adds	r3, r2, r3
 801f1da:	4a34      	ldr	r2, [pc, #208]	@ (801f2ac <USB_EPStartXfer+0xe30>)
 801f1dc:	4694      	mov	ip, r2
 801f1de:	4463      	add	r3, ip
 801f1e0:	2198      	movs	r1, #152	@ 0x98
 801f1e2:	187a      	adds	r2, r7, r1
 801f1e4:	6013      	str	r3, [r2, #0]
 801f1e6:	187b      	adds	r3, r7, r1
 801f1e8:	681b      	ldr	r3, [r3, #0]
 801f1ea:	881b      	ldrh	r3, [r3, #0]
 801f1ec:	b29b      	uxth	r3, r3
 801f1ee:	059b      	lsls	r3, r3, #22
 801f1f0:	0d9b      	lsrs	r3, r3, #22
 801f1f2:	b29a      	uxth	r2, r3
 801f1f4:	187b      	adds	r3, r7, r1
 801f1f6:	681b      	ldr	r3, [r3, #0]
 801f1f8:	801a      	strh	r2, [r3, #0]
 801f1fa:	683b      	ldr	r3, [r7, #0]
 801f1fc:	691b      	ldr	r3, [r3, #16]
 801f1fe:	2b3e      	cmp	r3, #62	@ 0x3e
 801f200:	d923      	bls.n	801f24a <USB_EPStartXfer+0xdce>
 801f202:	683b      	ldr	r3, [r7, #0]
 801f204:	691b      	ldr	r3, [r3, #16]
 801f206:	095b      	lsrs	r3, r3, #5
 801f208:	21e0      	movs	r1, #224	@ 0xe0
 801f20a:	187a      	adds	r2, r7, r1
 801f20c:	6013      	str	r3, [r2, #0]
 801f20e:	683b      	ldr	r3, [r7, #0]
 801f210:	691b      	ldr	r3, [r3, #16]
 801f212:	221f      	movs	r2, #31
 801f214:	4013      	ands	r3, r2
 801f216:	d104      	bne.n	801f222 <USB_EPStartXfer+0xda6>
 801f218:	187b      	adds	r3, r7, r1
 801f21a:	681b      	ldr	r3, [r3, #0]
 801f21c:	3b01      	subs	r3, #1
 801f21e:	187a      	adds	r2, r7, r1
 801f220:	6013      	str	r3, [r2, #0]
 801f222:	2198      	movs	r1, #152	@ 0x98
 801f224:	187b      	adds	r3, r7, r1
 801f226:	681b      	ldr	r3, [r3, #0]
 801f228:	881b      	ldrh	r3, [r3, #0]
 801f22a:	b29a      	uxth	r2, r3
 801f22c:	23e0      	movs	r3, #224	@ 0xe0
 801f22e:	18fb      	adds	r3, r7, r3
 801f230:	681b      	ldr	r3, [r3, #0]
 801f232:	b29b      	uxth	r3, r3
 801f234:	029b      	lsls	r3, r3, #10
 801f236:	b29b      	uxth	r3, r3
 801f238:	4313      	orrs	r3, r2
 801f23a:	b29b      	uxth	r3, r3
 801f23c:	4a1c      	ldr	r2, [pc, #112]	@ (801f2b0 <USB_EPStartXfer+0xe34>)
 801f23e:	4313      	orrs	r3, r2
 801f240:	b29a      	uxth	r2, r3
 801f242:	187b      	adds	r3, r7, r1
 801f244:	681b      	ldr	r3, [r3, #0]
 801f246:	801a      	strh	r2, [r3, #0]
 801f248:	e057      	b.n	801f2fa <USB_EPStartXfer+0xe7e>
 801f24a:	683b      	ldr	r3, [r7, #0]
 801f24c:	691b      	ldr	r3, [r3, #16]
 801f24e:	2b00      	cmp	r3, #0
 801f250:	d10b      	bne.n	801f26a <USB_EPStartXfer+0xdee>
 801f252:	2198      	movs	r1, #152	@ 0x98
 801f254:	187b      	adds	r3, r7, r1
 801f256:	681b      	ldr	r3, [r3, #0]
 801f258:	881b      	ldrh	r3, [r3, #0]
 801f25a:	b29b      	uxth	r3, r3
 801f25c:	4a14      	ldr	r2, [pc, #80]	@ (801f2b0 <USB_EPStartXfer+0xe34>)
 801f25e:	4313      	orrs	r3, r2
 801f260:	b29a      	uxth	r2, r3
 801f262:	187b      	adds	r3, r7, r1
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	801a      	strh	r2, [r3, #0]
 801f268:	e047      	b.n	801f2fa <USB_EPStartXfer+0xe7e>
 801f26a:	683b      	ldr	r3, [r7, #0]
 801f26c:	691b      	ldr	r3, [r3, #16]
 801f26e:	085b      	lsrs	r3, r3, #1
 801f270:	21e0      	movs	r1, #224	@ 0xe0
 801f272:	187a      	adds	r2, r7, r1
 801f274:	6013      	str	r3, [r2, #0]
 801f276:	683b      	ldr	r3, [r7, #0]
 801f278:	691b      	ldr	r3, [r3, #16]
 801f27a:	2201      	movs	r2, #1
 801f27c:	4013      	ands	r3, r2
 801f27e:	d004      	beq.n	801f28a <USB_EPStartXfer+0xe0e>
 801f280:	187b      	adds	r3, r7, r1
 801f282:	681b      	ldr	r3, [r3, #0]
 801f284:	3301      	adds	r3, #1
 801f286:	187a      	adds	r2, r7, r1
 801f288:	6013      	str	r3, [r2, #0]
 801f28a:	2198      	movs	r1, #152	@ 0x98
 801f28c:	187b      	adds	r3, r7, r1
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	881b      	ldrh	r3, [r3, #0]
 801f292:	b29a      	uxth	r2, r3
 801f294:	23e0      	movs	r3, #224	@ 0xe0
 801f296:	18fb      	adds	r3, r7, r3
 801f298:	681b      	ldr	r3, [r3, #0]
 801f29a:	b29b      	uxth	r3, r3
 801f29c:	029b      	lsls	r3, r3, #10
 801f29e:	b29b      	uxth	r3, r3
 801f2a0:	4313      	orrs	r3, r2
 801f2a2:	b29a      	uxth	r2, r3
 801f2a4:	187b      	adds	r3, r7, r1
 801f2a6:	681b      	ldr	r3, [r3, #0]
 801f2a8:	801a      	strh	r2, [r3, #0]
 801f2aa:	e026      	b.n	801f2fa <USB_EPStartXfer+0xe7e>
 801f2ac:	00000406 	.word	0x00000406
 801f2b0:	ffff8000 	.word	0xffff8000
 801f2b4:	00000402 	.word	0x00000402
 801f2b8:	683b      	ldr	r3, [r7, #0]
 801f2ba:	785b      	ldrb	r3, [r3, #1]
 801f2bc:	2b01      	cmp	r3, #1
 801f2be:	d11c      	bne.n	801f2fa <USB_EPStartXfer+0xe7e>
 801f2c0:	687b      	ldr	r3, [r7, #4]
 801f2c2:	2250      	movs	r2, #80	@ 0x50
 801f2c4:	5a9b      	ldrh	r3, [r3, r2]
 801f2c6:	b29b      	uxth	r3, r3
 801f2c8:	001a      	movs	r2, r3
 801f2ca:	21a4      	movs	r1, #164	@ 0xa4
 801f2cc:	187b      	adds	r3, r7, r1
 801f2ce:	681b      	ldr	r3, [r3, #0]
 801f2d0:	189b      	adds	r3, r3, r2
 801f2d2:	187a      	adds	r2, r7, r1
 801f2d4:	6013      	str	r3, [r2, #0]
 801f2d6:	683b      	ldr	r3, [r7, #0]
 801f2d8:	781b      	ldrb	r3, [r3, #0]
 801f2da:	00da      	lsls	r2, r3, #3
 801f2dc:	187b      	adds	r3, r7, r1
 801f2de:	681b      	ldr	r3, [r3, #0]
 801f2e0:	18d3      	adds	r3, r2, r3
 801f2e2:	4ad2      	ldr	r2, [pc, #840]	@ (801f62c <USB_EPStartXfer+0x11b0>)
 801f2e4:	4694      	mov	ip, r2
 801f2e6:	4463      	add	r3, ip
 801f2e8:	21a0      	movs	r1, #160	@ 0xa0
 801f2ea:	187a      	adds	r2, r7, r1
 801f2ec:	6013      	str	r3, [r2, #0]
 801f2ee:	683b      	ldr	r3, [r7, #0]
 801f2f0:	691b      	ldr	r3, [r3, #16]
 801f2f2:	b29a      	uxth	r2, r3
 801f2f4:	187b      	adds	r3, r7, r1
 801f2f6:	681b      	ldr	r3, [r3, #0]
 801f2f8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801f2fa:	683b      	ldr	r3, [r7, #0]
 801f2fc:	69db      	ldr	r3, [r3, #28]
 801f2fe:	2b00      	cmp	r3, #0
 801f300:	d100      	bne.n	801f304 <USB_EPStartXfer+0xe88>
 801f302:	e1c2      	b.n	801f68a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801f304:	687a      	ldr	r2, [r7, #4]
 801f306:	683b      	ldr	r3, [r7, #0]
 801f308:	781b      	ldrb	r3, [r3, #0]
 801f30a:	009b      	lsls	r3, r3, #2
 801f30c:	18d2      	adds	r2, r2, r3
 801f30e:	2196      	movs	r1, #150	@ 0x96
 801f310:	187b      	adds	r3, r7, r1
 801f312:	8812      	ldrh	r2, [r2, #0]
 801f314:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801f316:	187b      	adds	r3, r7, r1
 801f318:	881a      	ldrh	r2, [r3, #0]
 801f31a:	2380      	movs	r3, #128	@ 0x80
 801f31c:	01db      	lsls	r3, r3, #7
 801f31e:	4013      	ands	r3, r2
 801f320:	d004      	beq.n	801f32c <USB_EPStartXfer+0xeb0>
 801f322:	187b      	adds	r3, r7, r1
 801f324:	881b      	ldrh	r3, [r3, #0]
 801f326:	2240      	movs	r2, #64	@ 0x40
 801f328:	4013      	ands	r3, r2
 801f32a:	d10d      	bne.n	801f348 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801f32c:	2196      	movs	r1, #150	@ 0x96
 801f32e:	187b      	adds	r3, r7, r1
 801f330:	881a      	ldrh	r2, [r3, #0]
 801f332:	2380      	movs	r3, #128	@ 0x80
 801f334:	01db      	lsls	r3, r3, #7
 801f336:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801f338:	d000      	beq.n	801f33c <USB_EPStartXfer+0xec0>
 801f33a:	e1a6      	b.n	801f68a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801f33c:	187b      	adds	r3, r7, r1
 801f33e:	881b      	ldrh	r3, [r3, #0]
 801f340:	2240      	movs	r2, #64	@ 0x40
 801f342:	4013      	ands	r3, r2
 801f344:	d000      	beq.n	801f348 <USB_EPStartXfer+0xecc>
 801f346:	e1a0      	b.n	801f68a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801f348:	687a      	ldr	r2, [r7, #4]
 801f34a:	683b      	ldr	r3, [r7, #0]
 801f34c:	781b      	ldrb	r3, [r3, #0]
 801f34e:	009b      	lsls	r3, r3, #2
 801f350:	18d3      	adds	r3, r2, r3
 801f352:	881b      	ldrh	r3, [r3, #0]
 801f354:	b29a      	uxth	r2, r3
 801f356:	2094      	movs	r0, #148	@ 0x94
 801f358:	183b      	adds	r3, r7, r0
 801f35a:	49b5      	ldr	r1, [pc, #724]	@ (801f630 <USB_EPStartXfer+0x11b4>)
 801f35c:	400a      	ands	r2, r1
 801f35e:	801a      	strh	r2, [r3, #0]
 801f360:	687a      	ldr	r2, [r7, #4]
 801f362:	683b      	ldr	r3, [r7, #0]
 801f364:	781b      	ldrb	r3, [r3, #0]
 801f366:	009b      	lsls	r3, r3, #2
 801f368:	18d3      	adds	r3, r2, r3
 801f36a:	183a      	adds	r2, r7, r0
 801f36c:	8812      	ldrh	r2, [r2, #0]
 801f36e:	49b1      	ldr	r1, [pc, #708]	@ (801f634 <USB_EPStartXfer+0x11b8>)
 801f370:	430a      	orrs	r2, r1
 801f372:	b292      	uxth	r2, r2
 801f374:	801a      	strh	r2, [r3, #0]
 801f376:	e188      	b.n	801f68a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801f378:	683b      	ldr	r3, [r7, #0]
 801f37a:	78db      	ldrb	r3, [r3, #3]
 801f37c:	2b01      	cmp	r3, #1
 801f37e:	d000      	beq.n	801f382 <USB_EPStartXfer+0xf06>
 801f380:	e181      	b.n	801f686 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801f382:	683b      	ldr	r3, [r7, #0]
 801f384:	699a      	ldr	r2, [r3, #24]
 801f386:	683b      	ldr	r3, [r7, #0]
 801f388:	691b      	ldr	r3, [r3, #16]
 801f38a:	429a      	cmp	r2, r3
 801f38c:	d90d      	bls.n	801f3aa <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801f38e:	683b      	ldr	r3, [r7, #0]
 801f390:	691b      	ldr	r3, [r3, #16]
 801f392:	1d7a      	adds	r2, r7, #5
 801f394:	32ff      	adds	r2, #255	@ 0xff
 801f396:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801f398:	683b      	ldr	r3, [r7, #0]
 801f39a:	699a      	ldr	r2, [r3, #24]
 801f39c:	1d7b      	adds	r3, r7, #5
 801f39e:	33ff      	adds	r3, #255	@ 0xff
 801f3a0:	681b      	ldr	r3, [r3, #0]
 801f3a2:	1ad2      	subs	r2, r2, r3
 801f3a4:	683b      	ldr	r3, [r7, #0]
 801f3a6:	619a      	str	r2, [r3, #24]
 801f3a8:	e007      	b.n	801f3ba <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801f3aa:	683b      	ldr	r3, [r7, #0]
 801f3ac:	699b      	ldr	r3, [r3, #24]
 801f3ae:	1d7a      	adds	r2, r7, #5
 801f3b0:	32ff      	adds	r2, #255	@ 0xff
 801f3b2:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801f3b4:	683b      	ldr	r3, [r7, #0]
 801f3b6:	2200      	movs	r2, #0
 801f3b8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801f3ba:	683b      	ldr	r3, [r7, #0]
 801f3bc:	785b      	ldrb	r3, [r3, #1]
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	d000      	beq.n	801f3c4 <USB_EPStartXfer+0xf48>
 801f3c2:	e082      	b.n	801f4ca <USB_EPStartXfer+0x104e>
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	21cc      	movs	r1, #204	@ 0xcc
 801f3c8:	187a      	adds	r2, r7, r1
 801f3ca:	6013      	str	r3, [r2, #0]
 801f3cc:	687b      	ldr	r3, [r7, #4]
 801f3ce:	2250      	movs	r2, #80	@ 0x50
 801f3d0:	5a9b      	ldrh	r3, [r3, r2]
 801f3d2:	b29b      	uxth	r3, r3
 801f3d4:	001a      	movs	r2, r3
 801f3d6:	187b      	adds	r3, r7, r1
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	189b      	adds	r3, r3, r2
 801f3dc:	187a      	adds	r2, r7, r1
 801f3de:	6013      	str	r3, [r2, #0]
 801f3e0:	683b      	ldr	r3, [r7, #0]
 801f3e2:	781b      	ldrb	r3, [r3, #0]
 801f3e4:	00da      	lsls	r2, r3, #3
 801f3e6:	187b      	adds	r3, r7, r1
 801f3e8:	681b      	ldr	r3, [r3, #0]
 801f3ea:	18d3      	adds	r3, r2, r3
 801f3ec:	4a92      	ldr	r2, [pc, #584]	@ (801f638 <USB_EPStartXfer+0x11bc>)
 801f3ee:	4694      	mov	ip, r2
 801f3f0:	4463      	add	r3, ip
 801f3f2:	21c8      	movs	r1, #200	@ 0xc8
 801f3f4:	187a      	adds	r2, r7, r1
 801f3f6:	6013      	str	r3, [r2, #0]
 801f3f8:	187b      	adds	r3, r7, r1
 801f3fa:	681b      	ldr	r3, [r3, #0]
 801f3fc:	881b      	ldrh	r3, [r3, #0]
 801f3fe:	b29b      	uxth	r3, r3
 801f400:	059b      	lsls	r3, r3, #22
 801f402:	0d9b      	lsrs	r3, r3, #22
 801f404:	b29a      	uxth	r2, r3
 801f406:	187b      	adds	r3, r7, r1
 801f408:	681b      	ldr	r3, [r3, #0]
 801f40a:	801a      	strh	r2, [r3, #0]
 801f40c:	1d7b      	adds	r3, r7, #5
 801f40e:	33ff      	adds	r3, #255	@ 0xff
 801f410:	681b      	ldr	r3, [r3, #0]
 801f412:	2b3e      	cmp	r3, #62	@ 0x3e
 801f414:	d925      	bls.n	801f462 <USB_EPStartXfer+0xfe6>
 801f416:	1d7b      	adds	r3, r7, #5
 801f418:	33ff      	adds	r3, #255	@ 0xff
 801f41a:	681b      	ldr	r3, [r3, #0]
 801f41c:	095b      	lsrs	r3, r3, #5
 801f41e:	21dc      	movs	r1, #220	@ 0xdc
 801f420:	187a      	adds	r2, r7, r1
 801f422:	6013      	str	r3, [r2, #0]
 801f424:	1d7b      	adds	r3, r7, #5
 801f426:	33ff      	adds	r3, #255	@ 0xff
 801f428:	681b      	ldr	r3, [r3, #0]
 801f42a:	221f      	movs	r2, #31
 801f42c:	4013      	ands	r3, r2
 801f42e:	d104      	bne.n	801f43a <USB_EPStartXfer+0xfbe>
 801f430:	187b      	adds	r3, r7, r1
 801f432:	681b      	ldr	r3, [r3, #0]
 801f434:	3b01      	subs	r3, #1
 801f436:	187a      	adds	r2, r7, r1
 801f438:	6013      	str	r3, [r2, #0]
 801f43a:	21c8      	movs	r1, #200	@ 0xc8
 801f43c:	187b      	adds	r3, r7, r1
 801f43e:	681b      	ldr	r3, [r3, #0]
 801f440:	881b      	ldrh	r3, [r3, #0]
 801f442:	b29a      	uxth	r2, r3
 801f444:	23dc      	movs	r3, #220	@ 0xdc
 801f446:	18fb      	adds	r3, r7, r3
 801f448:	681b      	ldr	r3, [r3, #0]
 801f44a:	b29b      	uxth	r3, r3
 801f44c:	029b      	lsls	r3, r3, #10
 801f44e:	b29b      	uxth	r3, r3
 801f450:	4313      	orrs	r3, r2
 801f452:	b29b      	uxth	r3, r3
 801f454:	4a79      	ldr	r2, [pc, #484]	@ (801f63c <USB_EPStartXfer+0x11c0>)
 801f456:	4313      	orrs	r3, r2
 801f458:	b29a      	uxth	r2, r3
 801f45a:	187b      	adds	r3, r7, r1
 801f45c:	681b      	ldr	r3, [r3, #0]
 801f45e:	801a      	strh	r2, [r3, #0]
 801f460:	e058      	b.n	801f514 <USB_EPStartXfer+0x1098>
 801f462:	1d7b      	adds	r3, r7, #5
 801f464:	33ff      	adds	r3, #255	@ 0xff
 801f466:	681b      	ldr	r3, [r3, #0]
 801f468:	2b00      	cmp	r3, #0
 801f46a:	d10b      	bne.n	801f484 <USB_EPStartXfer+0x1008>
 801f46c:	21c8      	movs	r1, #200	@ 0xc8
 801f46e:	187b      	adds	r3, r7, r1
 801f470:	681b      	ldr	r3, [r3, #0]
 801f472:	881b      	ldrh	r3, [r3, #0]
 801f474:	b29b      	uxth	r3, r3
 801f476:	4a71      	ldr	r2, [pc, #452]	@ (801f63c <USB_EPStartXfer+0x11c0>)
 801f478:	4313      	orrs	r3, r2
 801f47a:	b29a      	uxth	r2, r3
 801f47c:	187b      	adds	r3, r7, r1
 801f47e:	681b      	ldr	r3, [r3, #0]
 801f480:	801a      	strh	r2, [r3, #0]
 801f482:	e047      	b.n	801f514 <USB_EPStartXfer+0x1098>
 801f484:	1d7b      	adds	r3, r7, #5
 801f486:	33ff      	adds	r3, #255	@ 0xff
 801f488:	681b      	ldr	r3, [r3, #0]
 801f48a:	085b      	lsrs	r3, r3, #1
 801f48c:	21dc      	movs	r1, #220	@ 0xdc
 801f48e:	187a      	adds	r2, r7, r1
 801f490:	6013      	str	r3, [r2, #0]
 801f492:	1d7b      	adds	r3, r7, #5
 801f494:	33ff      	adds	r3, #255	@ 0xff
 801f496:	681b      	ldr	r3, [r3, #0]
 801f498:	2201      	movs	r2, #1
 801f49a:	4013      	ands	r3, r2
 801f49c:	d004      	beq.n	801f4a8 <USB_EPStartXfer+0x102c>
 801f49e:	187b      	adds	r3, r7, r1
 801f4a0:	681b      	ldr	r3, [r3, #0]
 801f4a2:	3301      	adds	r3, #1
 801f4a4:	187a      	adds	r2, r7, r1
 801f4a6:	6013      	str	r3, [r2, #0]
 801f4a8:	21c8      	movs	r1, #200	@ 0xc8
 801f4aa:	187b      	adds	r3, r7, r1
 801f4ac:	681b      	ldr	r3, [r3, #0]
 801f4ae:	881b      	ldrh	r3, [r3, #0]
 801f4b0:	b29a      	uxth	r2, r3
 801f4b2:	23dc      	movs	r3, #220	@ 0xdc
 801f4b4:	18fb      	adds	r3, r7, r3
 801f4b6:	681b      	ldr	r3, [r3, #0]
 801f4b8:	b29b      	uxth	r3, r3
 801f4ba:	029b      	lsls	r3, r3, #10
 801f4bc:	b29b      	uxth	r3, r3
 801f4be:	4313      	orrs	r3, r2
 801f4c0:	b29a      	uxth	r2, r3
 801f4c2:	187b      	adds	r3, r7, r1
 801f4c4:	681b      	ldr	r3, [r3, #0]
 801f4c6:	801a      	strh	r2, [r3, #0]
 801f4c8:	e024      	b.n	801f514 <USB_EPStartXfer+0x1098>
 801f4ca:	683b      	ldr	r3, [r7, #0]
 801f4cc:	785b      	ldrb	r3, [r3, #1]
 801f4ce:	2b01      	cmp	r3, #1
 801f4d0:	d120      	bne.n	801f514 <USB_EPStartXfer+0x1098>
 801f4d2:	687b      	ldr	r3, [r7, #4]
 801f4d4:	21d4      	movs	r1, #212	@ 0xd4
 801f4d6:	187a      	adds	r2, r7, r1
 801f4d8:	6013      	str	r3, [r2, #0]
 801f4da:	687b      	ldr	r3, [r7, #4]
 801f4dc:	2250      	movs	r2, #80	@ 0x50
 801f4de:	5a9b      	ldrh	r3, [r3, r2]
 801f4e0:	b29b      	uxth	r3, r3
 801f4e2:	001a      	movs	r2, r3
 801f4e4:	187b      	adds	r3, r7, r1
 801f4e6:	681b      	ldr	r3, [r3, #0]
 801f4e8:	189b      	adds	r3, r3, r2
 801f4ea:	187a      	adds	r2, r7, r1
 801f4ec:	6013      	str	r3, [r2, #0]
 801f4ee:	683b      	ldr	r3, [r7, #0]
 801f4f0:	781b      	ldrb	r3, [r3, #0]
 801f4f2:	00da      	lsls	r2, r3, #3
 801f4f4:	187b      	adds	r3, r7, r1
 801f4f6:	681b      	ldr	r3, [r3, #0]
 801f4f8:	18d3      	adds	r3, r2, r3
 801f4fa:	4a4f      	ldr	r2, [pc, #316]	@ (801f638 <USB_EPStartXfer+0x11bc>)
 801f4fc:	4694      	mov	ip, r2
 801f4fe:	4463      	add	r3, ip
 801f500:	21d0      	movs	r1, #208	@ 0xd0
 801f502:	187a      	adds	r2, r7, r1
 801f504:	6013      	str	r3, [r2, #0]
 801f506:	1d7b      	adds	r3, r7, #5
 801f508:	33ff      	adds	r3, #255	@ 0xff
 801f50a:	681b      	ldr	r3, [r3, #0]
 801f50c:	b29a      	uxth	r2, r3
 801f50e:	187b      	adds	r3, r7, r1
 801f510:	681b      	ldr	r3, [r3, #0]
 801f512:	801a      	strh	r2, [r3, #0]
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	22c4      	movs	r2, #196	@ 0xc4
 801f518:	18ba      	adds	r2, r7, r2
 801f51a:	6013      	str	r3, [r2, #0]
 801f51c:	683b      	ldr	r3, [r7, #0]
 801f51e:	785b      	ldrb	r3, [r3, #1]
 801f520:	2b00      	cmp	r3, #0
 801f522:	d000      	beq.n	801f526 <USB_EPStartXfer+0x10aa>
 801f524:	e08c      	b.n	801f640 <USB_EPStartXfer+0x11c4>
 801f526:	687b      	ldr	r3, [r7, #4]
 801f528:	21bc      	movs	r1, #188	@ 0xbc
 801f52a:	187a      	adds	r2, r7, r1
 801f52c:	6013      	str	r3, [r2, #0]
 801f52e:	687b      	ldr	r3, [r7, #4]
 801f530:	2250      	movs	r2, #80	@ 0x50
 801f532:	5a9b      	ldrh	r3, [r3, r2]
 801f534:	b29b      	uxth	r3, r3
 801f536:	001a      	movs	r2, r3
 801f538:	187b      	adds	r3, r7, r1
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	189b      	adds	r3, r3, r2
 801f53e:	187a      	adds	r2, r7, r1
 801f540:	6013      	str	r3, [r2, #0]
 801f542:	683b      	ldr	r3, [r7, #0]
 801f544:	781b      	ldrb	r3, [r3, #0]
 801f546:	00da      	lsls	r2, r3, #3
 801f548:	187b      	adds	r3, r7, r1
 801f54a:	681b      	ldr	r3, [r3, #0]
 801f54c:	18d3      	adds	r3, r2, r3
 801f54e:	4a37      	ldr	r2, [pc, #220]	@ (801f62c <USB_EPStartXfer+0x11b0>)
 801f550:	4694      	mov	ip, r2
 801f552:	4463      	add	r3, ip
 801f554:	21b8      	movs	r1, #184	@ 0xb8
 801f556:	187a      	adds	r2, r7, r1
 801f558:	6013      	str	r3, [r2, #0]
 801f55a:	187b      	adds	r3, r7, r1
 801f55c:	681b      	ldr	r3, [r3, #0]
 801f55e:	881b      	ldrh	r3, [r3, #0]
 801f560:	b29b      	uxth	r3, r3
 801f562:	059b      	lsls	r3, r3, #22
 801f564:	0d9b      	lsrs	r3, r3, #22
 801f566:	b29a      	uxth	r2, r3
 801f568:	187b      	adds	r3, r7, r1
 801f56a:	681b      	ldr	r3, [r3, #0]
 801f56c:	801a      	strh	r2, [r3, #0]
 801f56e:	1d7b      	adds	r3, r7, #5
 801f570:	33ff      	adds	r3, #255	@ 0xff
 801f572:	681b      	ldr	r3, [r3, #0]
 801f574:	2b3e      	cmp	r3, #62	@ 0x3e
 801f576:	d925      	bls.n	801f5c4 <USB_EPStartXfer+0x1148>
 801f578:	1d7b      	adds	r3, r7, #5
 801f57a:	33ff      	adds	r3, #255	@ 0xff
 801f57c:	681b      	ldr	r3, [r3, #0]
 801f57e:	095b      	lsrs	r3, r3, #5
 801f580:	21d8      	movs	r1, #216	@ 0xd8
 801f582:	187a      	adds	r2, r7, r1
 801f584:	6013      	str	r3, [r2, #0]
 801f586:	1d7b      	adds	r3, r7, #5
 801f588:	33ff      	adds	r3, #255	@ 0xff
 801f58a:	681b      	ldr	r3, [r3, #0]
 801f58c:	221f      	movs	r2, #31
 801f58e:	4013      	ands	r3, r2
 801f590:	d104      	bne.n	801f59c <USB_EPStartXfer+0x1120>
 801f592:	187b      	adds	r3, r7, r1
 801f594:	681b      	ldr	r3, [r3, #0]
 801f596:	3b01      	subs	r3, #1
 801f598:	187a      	adds	r2, r7, r1
 801f59a:	6013      	str	r3, [r2, #0]
 801f59c:	21b8      	movs	r1, #184	@ 0xb8
 801f59e:	187b      	adds	r3, r7, r1
 801f5a0:	681b      	ldr	r3, [r3, #0]
 801f5a2:	881b      	ldrh	r3, [r3, #0]
 801f5a4:	b29a      	uxth	r2, r3
 801f5a6:	23d8      	movs	r3, #216	@ 0xd8
 801f5a8:	18fb      	adds	r3, r7, r3
 801f5aa:	681b      	ldr	r3, [r3, #0]
 801f5ac:	b29b      	uxth	r3, r3
 801f5ae:	029b      	lsls	r3, r3, #10
 801f5b0:	b29b      	uxth	r3, r3
 801f5b2:	4313      	orrs	r3, r2
 801f5b4:	b29b      	uxth	r3, r3
 801f5b6:	4a21      	ldr	r2, [pc, #132]	@ (801f63c <USB_EPStartXfer+0x11c0>)
 801f5b8:	4313      	orrs	r3, r2
 801f5ba:	b29a      	uxth	r2, r3
 801f5bc:	187b      	adds	r3, r7, r1
 801f5be:	681b      	ldr	r3, [r3, #0]
 801f5c0:	801a      	strh	r2, [r3, #0]
 801f5c2:	e062      	b.n	801f68a <USB_EPStartXfer+0x120e>
 801f5c4:	1d7b      	adds	r3, r7, #5
 801f5c6:	33ff      	adds	r3, #255	@ 0xff
 801f5c8:	681b      	ldr	r3, [r3, #0]
 801f5ca:	2b00      	cmp	r3, #0
 801f5cc:	d10b      	bne.n	801f5e6 <USB_EPStartXfer+0x116a>
 801f5ce:	21b8      	movs	r1, #184	@ 0xb8
 801f5d0:	187b      	adds	r3, r7, r1
 801f5d2:	681b      	ldr	r3, [r3, #0]
 801f5d4:	881b      	ldrh	r3, [r3, #0]
 801f5d6:	b29b      	uxth	r3, r3
 801f5d8:	4a18      	ldr	r2, [pc, #96]	@ (801f63c <USB_EPStartXfer+0x11c0>)
 801f5da:	4313      	orrs	r3, r2
 801f5dc:	b29a      	uxth	r2, r3
 801f5de:	187b      	adds	r3, r7, r1
 801f5e0:	681b      	ldr	r3, [r3, #0]
 801f5e2:	801a      	strh	r2, [r3, #0]
 801f5e4:	e051      	b.n	801f68a <USB_EPStartXfer+0x120e>
 801f5e6:	1d7b      	adds	r3, r7, #5
 801f5e8:	33ff      	adds	r3, #255	@ 0xff
 801f5ea:	681b      	ldr	r3, [r3, #0]
 801f5ec:	085b      	lsrs	r3, r3, #1
 801f5ee:	21d8      	movs	r1, #216	@ 0xd8
 801f5f0:	187a      	adds	r2, r7, r1
 801f5f2:	6013      	str	r3, [r2, #0]
 801f5f4:	1d7b      	adds	r3, r7, #5
 801f5f6:	33ff      	adds	r3, #255	@ 0xff
 801f5f8:	681b      	ldr	r3, [r3, #0]
 801f5fa:	2201      	movs	r2, #1
 801f5fc:	4013      	ands	r3, r2
 801f5fe:	d004      	beq.n	801f60a <USB_EPStartXfer+0x118e>
 801f600:	187b      	adds	r3, r7, r1
 801f602:	681b      	ldr	r3, [r3, #0]
 801f604:	3301      	adds	r3, #1
 801f606:	187a      	adds	r2, r7, r1
 801f608:	6013      	str	r3, [r2, #0]
 801f60a:	21b8      	movs	r1, #184	@ 0xb8
 801f60c:	187b      	adds	r3, r7, r1
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	881b      	ldrh	r3, [r3, #0]
 801f612:	b29a      	uxth	r2, r3
 801f614:	23d8      	movs	r3, #216	@ 0xd8
 801f616:	18fb      	adds	r3, r7, r3
 801f618:	681b      	ldr	r3, [r3, #0]
 801f61a:	b29b      	uxth	r3, r3
 801f61c:	029b      	lsls	r3, r3, #10
 801f61e:	b29b      	uxth	r3, r3
 801f620:	4313      	orrs	r3, r2
 801f622:	b29a      	uxth	r2, r3
 801f624:	187b      	adds	r3, r7, r1
 801f626:	681b      	ldr	r3, [r3, #0]
 801f628:	801a      	strh	r2, [r3, #0]
 801f62a:	e02e      	b.n	801f68a <USB_EPStartXfer+0x120e>
 801f62c:	00000406 	.word	0x00000406
 801f630:	ffff8f8f 	.word	0xffff8f8f
 801f634:	ffff80c0 	.word	0xffff80c0
 801f638:	00000402 	.word	0x00000402
 801f63c:	ffff8000 	.word	0xffff8000
 801f640:	683b      	ldr	r3, [r7, #0]
 801f642:	785b      	ldrb	r3, [r3, #1]
 801f644:	2b01      	cmp	r3, #1
 801f646:	d120      	bne.n	801f68a <USB_EPStartXfer+0x120e>
 801f648:	687b      	ldr	r3, [r7, #4]
 801f64a:	2250      	movs	r2, #80	@ 0x50
 801f64c:	5a9b      	ldrh	r3, [r3, r2]
 801f64e:	b29b      	uxth	r3, r3
 801f650:	001a      	movs	r2, r3
 801f652:	21c4      	movs	r1, #196	@ 0xc4
 801f654:	187b      	adds	r3, r7, r1
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	189b      	adds	r3, r3, r2
 801f65a:	187a      	adds	r2, r7, r1
 801f65c:	6013      	str	r3, [r2, #0]
 801f65e:	683b      	ldr	r3, [r7, #0]
 801f660:	781b      	ldrb	r3, [r3, #0]
 801f662:	00da      	lsls	r2, r3, #3
 801f664:	187b      	adds	r3, r7, r1
 801f666:	681b      	ldr	r3, [r3, #0]
 801f668:	18d3      	adds	r3, r2, r3
 801f66a:	4a1d      	ldr	r2, [pc, #116]	@ (801f6e0 <USB_EPStartXfer+0x1264>)
 801f66c:	4694      	mov	ip, r2
 801f66e:	4463      	add	r3, ip
 801f670:	21c0      	movs	r1, #192	@ 0xc0
 801f672:	187a      	adds	r2, r7, r1
 801f674:	6013      	str	r3, [r2, #0]
 801f676:	1d7b      	adds	r3, r7, #5
 801f678:	33ff      	adds	r3, #255	@ 0xff
 801f67a:	681b      	ldr	r3, [r3, #0]
 801f67c:	b29a      	uxth	r2, r3
 801f67e:	187b      	adds	r3, r7, r1
 801f680:	681b      	ldr	r3, [r3, #0]
 801f682:	801a      	strh	r2, [r3, #0]
 801f684:	e001      	b.n	801f68a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801f686:	2301      	movs	r3, #1
 801f688:	e025      	b.n	801f6d6 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f68a:	687a      	ldr	r2, [r7, #4]
 801f68c:	683b      	ldr	r3, [r7, #0]
 801f68e:	781b      	ldrb	r3, [r3, #0]
 801f690:	009b      	lsls	r3, r3, #2
 801f692:	18d3      	adds	r3, r2, r3
 801f694:	881b      	ldrh	r3, [r3, #0]
 801f696:	b29a      	uxth	r2, r3
 801f698:	208a      	movs	r0, #138	@ 0x8a
 801f69a:	183b      	adds	r3, r7, r0
 801f69c:	4911      	ldr	r1, [pc, #68]	@ (801f6e4 <USB_EPStartXfer+0x1268>)
 801f69e:	400a      	ands	r2, r1
 801f6a0:	801a      	strh	r2, [r3, #0]
 801f6a2:	183b      	adds	r3, r7, r0
 801f6a4:	183a      	adds	r2, r7, r0
 801f6a6:	8812      	ldrh	r2, [r2, #0]
 801f6a8:	2180      	movs	r1, #128	@ 0x80
 801f6aa:	0149      	lsls	r1, r1, #5
 801f6ac:	404a      	eors	r2, r1
 801f6ae:	801a      	strh	r2, [r3, #0]
 801f6b0:	183b      	adds	r3, r7, r0
 801f6b2:	183a      	adds	r2, r7, r0
 801f6b4:	8812      	ldrh	r2, [r2, #0]
 801f6b6:	2180      	movs	r1, #128	@ 0x80
 801f6b8:	0189      	lsls	r1, r1, #6
 801f6ba:	404a      	eors	r2, r1
 801f6bc:	801a      	strh	r2, [r3, #0]
 801f6be:	687a      	ldr	r2, [r7, #4]
 801f6c0:	683b      	ldr	r3, [r7, #0]
 801f6c2:	781b      	ldrb	r3, [r3, #0]
 801f6c4:	009b      	lsls	r3, r3, #2
 801f6c6:	18d3      	adds	r3, r2, r3
 801f6c8:	183a      	adds	r2, r7, r0
 801f6ca:	8812      	ldrh	r2, [r2, #0]
 801f6cc:	4906      	ldr	r1, [pc, #24]	@ (801f6e8 <USB_EPStartXfer+0x126c>)
 801f6ce:	430a      	orrs	r2, r1
 801f6d0:	b292      	uxth	r2, r2
 801f6d2:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801f6d4:	2300      	movs	r3, #0
}
 801f6d6:	0018      	movs	r0, r3
 801f6d8:	46bd      	mov	sp, r7
 801f6da:	b043      	add	sp, #268	@ 0x10c
 801f6dc:	bd90      	pop	{r4, r7, pc}
 801f6de:	46c0      	nop			@ (mov r8, r8)
 801f6e0:	00000406 	.word	0x00000406
 801f6e4:	ffffbf8f 	.word	0xffffbf8f
 801f6e8:	ffff8080 	.word	0xffff8080

0801f6ec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f6ec:	b580      	push	{r7, lr}
 801f6ee:	b084      	sub	sp, #16
 801f6f0:	af00      	add	r7, sp, #0
 801f6f2:	6078      	str	r0, [r7, #4]
 801f6f4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801f6f6:	683b      	ldr	r3, [r7, #0]
 801f6f8:	785b      	ldrb	r3, [r3, #1]
 801f6fa:	2b00      	cmp	r3, #0
 801f6fc:	d01d      	beq.n	801f73a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801f6fe:	687a      	ldr	r2, [r7, #4]
 801f700:	683b      	ldr	r3, [r7, #0]
 801f702:	781b      	ldrb	r3, [r3, #0]
 801f704:	009b      	lsls	r3, r3, #2
 801f706:	18d3      	adds	r3, r2, r3
 801f708:	881b      	ldrh	r3, [r3, #0]
 801f70a:	b29a      	uxth	r2, r3
 801f70c:	200c      	movs	r0, #12
 801f70e:	183b      	adds	r3, r7, r0
 801f710:	491b      	ldr	r1, [pc, #108]	@ (801f780 <USB_EPSetStall+0x94>)
 801f712:	400a      	ands	r2, r1
 801f714:	801a      	strh	r2, [r3, #0]
 801f716:	183b      	adds	r3, r7, r0
 801f718:	183a      	adds	r2, r7, r0
 801f71a:	8812      	ldrh	r2, [r2, #0]
 801f71c:	2110      	movs	r1, #16
 801f71e:	404a      	eors	r2, r1
 801f720:	801a      	strh	r2, [r3, #0]
 801f722:	687a      	ldr	r2, [r7, #4]
 801f724:	683b      	ldr	r3, [r7, #0]
 801f726:	781b      	ldrb	r3, [r3, #0]
 801f728:	009b      	lsls	r3, r3, #2
 801f72a:	18d3      	adds	r3, r2, r3
 801f72c:	183a      	adds	r2, r7, r0
 801f72e:	8812      	ldrh	r2, [r2, #0]
 801f730:	4914      	ldr	r1, [pc, #80]	@ (801f784 <USB_EPSetStall+0x98>)
 801f732:	430a      	orrs	r2, r1
 801f734:	b292      	uxth	r2, r2
 801f736:	801a      	strh	r2, [r3, #0]
 801f738:	e01d      	b.n	801f776 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801f73a:	687a      	ldr	r2, [r7, #4]
 801f73c:	683b      	ldr	r3, [r7, #0]
 801f73e:	781b      	ldrb	r3, [r3, #0]
 801f740:	009b      	lsls	r3, r3, #2
 801f742:	18d3      	adds	r3, r2, r3
 801f744:	881b      	ldrh	r3, [r3, #0]
 801f746:	b29a      	uxth	r2, r3
 801f748:	200e      	movs	r0, #14
 801f74a:	183b      	adds	r3, r7, r0
 801f74c:	490e      	ldr	r1, [pc, #56]	@ (801f788 <USB_EPSetStall+0x9c>)
 801f74e:	400a      	ands	r2, r1
 801f750:	801a      	strh	r2, [r3, #0]
 801f752:	183b      	adds	r3, r7, r0
 801f754:	183a      	adds	r2, r7, r0
 801f756:	8812      	ldrh	r2, [r2, #0]
 801f758:	2180      	movs	r1, #128	@ 0x80
 801f75a:	0149      	lsls	r1, r1, #5
 801f75c:	404a      	eors	r2, r1
 801f75e:	801a      	strh	r2, [r3, #0]
 801f760:	687a      	ldr	r2, [r7, #4]
 801f762:	683b      	ldr	r3, [r7, #0]
 801f764:	781b      	ldrb	r3, [r3, #0]
 801f766:	009b      	lsls	r3, r3, #2
 801f768:	18d3      	adds	r3, r2, r3
 801f76a:	183a      	adds	r2, r7, r0
 801f76c:	8812      	ldrh	r2, [r2, #0]
 801f76e:	4905      	ldr	r1, [pc, #20]	@ (801f784 <USB_EPSetStall+0x98>)
 801f770:	430a      	orrs	r2, r1
 801f772:	b292      	uxth	r2, r2
 801f774:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801f776:	2300      	movs	r3, #0
}
 801f778:	0018      	movs	r0, r3
 801f77a:	46bd      	mov	sp, r7
 801f77c:	b004      	add	sp, #16
 801f77e:	bd80      	pop	{r7, pc}
 801f780:	ffff8fbf 	.word	0xffff8fbf
 801f784:	ffff8080 	.word	0xffff8080
 801f788:	ffffbf8f 	.word	0xffffbf8f

0801f78c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f78c:	b580      	push	{r7, lr}
 801f78e:	b086      	sub	sp, #24
 801f790:	af00      	add	r7, sp, #0
 801f792:	6078      	str	r0, [r7, #4]
 801f794:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801f796:	683b      	ldr	r3, [r7, #0]
 801f798:	7b1b      	ldrb	r3, [r3, #12]
 801f79a:	2b00      	cmp	r3, #0
 801f79c:	d000      	beq.n	801f7a0 <USB_EPClearStall+0x14>
 801f79e:	e095      	b.n	801f8cc <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801f7a0:	683b      	ldr	r3, [r7, #0]
 801f7a2:	785b      	ldrb	r3, [r3, #1]
 801f7a4:	2b00      	cmp	r3, #0
 801f7a6:	d046      	beq.n	801f836 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f7a8:	687a      	ldr	r2, [r7, #4]
 801f7aa:	683b      	ldr	r3, [r7, #0]
 801f7ac:	781b      	ldrb	r3, [r3, #0]
 801f7ae:	009b      	lsls	r3, r3, #2
 801f7b0:	18d2      	adds	r2, r2, r3
 801f7b2:	2110      	movs	r1, #16
 801f7b4:	187b      	adds	r3, r7, r1
 801f7b6:	8812      	ldrh	r2, [r2, #0]
 801f7b8:	801a      	strh	r2, [r3, #0]
 801f7ba:	187b      	adds	r3, r7, r1
 801f7bc:	881b      	ldrh	r3, [r3, #0]
 801f7be:	2240      	movs	r2, #64	@ 0x40
 801f7c0:	4013      	ands	r3, r2
 801f7c2:	d016      	beq.n	801f7f2 <USB_EPClearStall+0x66>
 801f7c4:	687a      	ldr	r2, [r7, #4]
 801f7c6:	683b      	ldr	r3, [r7, #0]
 801f7c8:	781b      	ldrb	r3, [r3, #0]
 801f7ca:	009b      	lsls	r3, r3, #2
 801f7cc:	18d3      	adds	r3, r2, r3
 801f7ce:	881b      	ldrh	r3, [r3, #0]
 801f7d0:	b29a      	uxth	r2, r3
 801f7d2:	200e      	movs	r0, #14
 801f7d4:	183b      	adds	r3, r7, r0
 801f7d6:	4940      	ldr	r1, [pc, #256]	@ (801f8d8 <USB_EPClearStall+0x14c>)
 801f7d8:	400a      	ands	r2, r1
 801f7da:	801a      	strh	r2, [r3, #0]
 801f7dc:	687a      	ldr	r2, [r7, #4]
 801f7de:	683b      	ldr	r3, [r7, #0]
 801f7e0:	781b      	ldrb	r3, [r3, #0]
 801f7e2:	009b      	lsls	r3, r3, #2
 801f7e4:	18d3      	adds	r3, r2, r3
 801f7e6:	183a      	adds	r2, r7, r0
 801f7e8:	8812      	ldrh	r2, [r2, #0]
 801f7ea:	493c      	ldr	r1, [pc, #240]	@ (801f8dc <USB_EPClearStall+0x150>)
 801f7ec:	430a      	orrs	r2, r1
 801f7ee:	b292      	uxth	r2, r2
 801f7f0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f7f2:	683b      	ldr	r3, [r7, #0]
 801f7f4:	78db      	ldrb	r3, [r3, #3]
 801f7f6:	2b01      	cmp	r3, #1
 801f7f8:	d068      	beq.n	801f8cc <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f7fa:	687a      	ldr	r2, [r7, #4]
 801f7fc:	683b      	ldr	r3, [r7, #0]
 801f7fe:	781b      	ldrb	r3, [r3, #0]
 801f800:	009b      	lsls	r3, r3, #2
 801f802:	18d3      	adds	r3, r2, r3
 801f804:	881b      	ldrh	r3, [r3, #0]
 801f806:	b29a      	uxth	r2, r3
 801f808:	200c      	movs	r0, #12
 801f80a:	183b      	adds	r3, r7, r0
 801f80c:	4934      	ldr	r1, [pc, #208]	@ (801f8e0 <USB_EPClearStall+0x154>)
 801f80e:	400a      	ands	r2, r1
 801f810:	801a      	strh	r2, [r3, #0]
 801f812:	183b      	adds	r3, r7, r0
 801f814:	183a      	adds	r2, r7, r0
 801f816:	8812      	ldrh	r2, [r2, #0]
 801f818:	2120      	movs	r1, #32
 801f81a:	404a      	eors	r2, r1
 801f81c:	801a      	strh	r2, [r3, #0]
 801f81e:	687a      	ldr	r2, [r7, #4]
 801f820:	683b      	ldr	r3, [r7, #0]
 801f822:	781b      	ldrb	r3, [r3, #0]
 801f824:	009b      	lsls	r3, r3, #2
 801f826:	18d3      	adds	r3, r2, r3
 801f828:	183a      	adds	r2, r7, r0
 801f82a:	8812      	ldrh	r2, [r2, #0]
 801f82c:	492d      	ldr	r1, [pc, #180]	@ (801f8e4 <USB_EPClearStall+0x158>)
 801f82e:	430a      	orrs	r2, r1
 801f830:	b292      	uxth	r2, r2
 801f832:	801a      	strh	r2, [r3, #0]
 801f834:	e04a      	b.n	801f8cc <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f836:	687a      	ldr	r2, [r7, #4]
 801f838:	683b      	ldr	r3, [r7, #0]
 801f83a:	781b      	ldrb	r3, [r3, #0]
 801f83c:	009b      	lsls	r3, r3, #2
 801f83e:	18d2      	adds	r2, r2, r3
 801f840:	2116      	movs	r1, #22
 801f842:	187b      	adds	r3, r7, r1
 801f844:	8812      	ldrh	r2, [r2, #0]
 801f846:	801a      	strh	r2, [r3, #0]
 801f848:	187b      	adds	r3, r7, r1
 801f84a:	881a      	ldrh	r2, [r3, #0]
 801f84c:	2380      	movs	r3, #128	@ 0x80
 801f84e:	01db      	lsls	r3, r3, #7
 801f850:	4013      	ands	r3, r2
 801f852:	d016      	beq.n	801f882 <USB_EPClearStall+0xf6>
 801f854:	687a      	ldr	r2, [r7, #4]
 801f856:	683b      	ldr	r3, [r7, #0]
 801f858:	781b      	ldrb	r3, [r3, #0]
 801f85a:	009b      	lsls	r3, r3, #2
 801f85c:	18d3      	adds	r3, r2, r3
 801f85e:	881b      	ldrh	r3, [r3, #0]
 801f860:	b29a      	uxth	r2, r3
 801f862:	2014      	movs	r0, #20
 801f864:	183b      	adds	r3, r7, r0
 801f866:	491c      	ldr	r1, [pc, #112]	@ (801f8d8 <USB_EPClearStall+0x14c>)
 801f868:	400a      	ands	r2, r1
 801f86a:	801a      	strh	r2, [r3, #0]
 801f86c:	687a      	ldr	r2, [r7, #4]
 801f86e:	683b      	ldr	r3, [r7, #0]
 801f870:	781b      	ldrb	r3, [r3, #0]
 801f872:	009b      	lsls	r3, r3, #2
 801f874:	18d3      	adds	r3, r2, r3
 801f876:	183a      	adds	r2, r7, r0
 801f878:	8812      	ldrh	r2, [r2, #0]
 801f87a:	491b      	ldr	r1, [pc, #108]	@ (801f8e8 <USB_EPClearStall+0x15c>)
 801f87c:	430a      	orrs	r2, r1
 801f87e:	b292      	uxth	r2, r2
 801f880:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f882:	687a      	ldr	r2, [r7, #4]
 801f884:	683b      	ldr	r3, [r7, #0]
 801f886:	781b      	ldrb	r3, [r3, #0]
 801f888:	009b      	lsls	r3, r3, #2
 801f88a:	18d3      	adds	r3, r2, r3
 801f88c:	881b      	ldrh	r3, [r3, #0]
 801f88e:	b29a      	uxth	r2, r3
 801f890:	2012      	movs	r0, #18
 801f892:	183b      	adds	r3, r7, r0
 801f894:	4915      	ldr	r1, [pc, #84]	@ (801f8ec <USB_EPClearStall+0x160>)
 801f896:	400a      	ands	r2, r1
 801f898:	801a      	strh	r2, [r3, #0]
 801f89a:	183b      	adds	r3, r7, r0
 801f89c:	183a      	adds	r2, r7, r0
 801f89e:	8812      	ldrh	r2, [r2, #0]
 801f8a0:	2180      	movs	r1, #128	@ 0x80
 801f8a2:	0149      	lsls	r1, r1, #5
 801f8a4:	404a      	eors	r2, r1
 801f8a6:	801a      	strh	r2, [r3, #0]
 801f8a8:	183b      	adds	r3, r7, r0
 801f8aa:	183a      	adds	r2, r7, r0
 801f8ac:	8812      	ldrh	r2, [r2, #0]
 801f8ae:	2180      	movs	r1, #128	@ 0x80
 801f8b0:	0189      	lsls	r1, r1, #6
 801f8b2:	404a      	eors	r2, r1
 801f8b4:	801a      	strh	r2, [r3, #0]
 801f8b6:	687a      	ldr	r2, [r7, #4]
 801f8b8:	683b      	ldr	r3, [r7, #0]
 801f8ba:	781b      	ldrb	r3, [r3, #0]
 801f8bc:	009b      	lsls	r3, r3, #2
 801f8be:	18d3      	adds	r3, r2, r3
 801f8c0:	183a      	adds	r2, r7, r0
 801f8c2:	8812      	ldrh	r2, [r2, #0]
 801f8c4:	4907      	ldr	r1, [pc, #28]	@ (801f8e4 <USB_EPClearStall+0x158>)
 801f8c6:	430a      	orrs	r2, r1
 801f8c8:	b292      	uxth	r2, r2
 801f8ca:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801f8cc:	2300      	movs	r3, #0
}
 801f8ce:	0018      	movs	r0, r3
 801f8d0:	46bd      	mov	sp, r7
 801f8d2:	b006      	add	sp, #24
 801f8d4:	bd80      	pop	{r7, pc}
 801f8d6:	46c0      	nop			@ (mov r8, r8)
 801f8d8:	ffff8f8f 	.word	0xffff8f8f
 801f8dc:	ffff80c0 	.word	0xffff80c0
 801f8e0:	ffff8fbf 	.word	0xffff8fbf
 801f8e4:	ffff8080 	.word	0xffff8080
 801f8e8:	ffffc080 	.word	0xffffc080
 801f8ec:	ffffbf8f 	.word	0xffffbf8f

0801f8f0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801f8f0:	b580      	push	{r7, lr}
 801f8f2:	b082      	sub	sp, #8
 801f8f4:	af00      	add	r7, sp, #0
 801f8f6:	6078      	str	r0, [r7, #4]
 801f8f8:	000a      	movs	r2, r1
 801f8fa:	1cfb      	adds	r3, r7, #3
 801f8fc:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801f8fe:	1cfb      	adds	r3, r7, #3
 801f900:	781b      	ldrb	r3, [r3, #0]
 801f902:	2b00      	cmp	r3, #0
 801f904:	d103      	bne.n	801f90e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801f906:	687b      	ldr	r3, [r7, #4]
 801f908:	224c      	movs	r2, #76	@ 0x4c
 801f90a:	2180      	movs	r1, #128	@ 0x80
 801f90c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801f90e:	2300      	movs	r3, #0
}
 801f910:	0018      	movs	r0, r3
 801f912:	46bd      	mov	sp, r7
 801f914:	b002      	add	sp, #8
 801f916:	bd80      	pop	{r7, pc}

0801f918 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801f918:	b580      	push	{r7, lr}
 801f91a:	b082      	sub	sp, #8
 801f91c:	af00      	add	r7, sp, #0
 801f91e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	2258      	movs	r2, #88	@ 0x58
 801f924:	5a9b      	ldrh	r3, [r3, r2]
 801f926:	b29b      	uxth	r3, r3
 801f928:	4a05      	ldr	r2, [pc, #20]	@ (801f940 <USB_DevConnect+0x28>)
 801f92a:	4313      	orrs	r3, r2
 801f92c:	b299      	uxth	r1, r3
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	2258      	movs	r2, #88	@ 0x58
 801f932:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f934:	2300      	movs	r3, #0
}
 801f936:	0018      	movs	r0, r3
 801f938:	46bd      	mov	sp, r7
 801f93a:	b002      	add	sp, #8
 801f93c:	bd80      	pop	{r7, pc}
 801f93e:	46c0      	nop			@ (mov r8, r8)
 801f940:	ffff8000 	.word	0xffff8000

0801f944 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801f944:	b580      	push	{r7, lr}
 801f946:	b084      	sub	sp, #16
 801f948:	af00      	add	r7, sp, #0
 801f94a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801f94c:	687b      	ldr	r3, [r7, #4]
 801f94e:	2244      	movs	r2, #68	@ 0x44
 801f950:	5a9b      	ldrh	r3, [r3, r2]
 801f952:	b29b      	uxth	r3, r3
 801f954:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801f956:	68fb      	ldr	r3, [r7, #12]
}
 801f958:	0018      	movs	r0, r3
 801f95a:	46bd      	mov	sp, r7
 801f95c:	b004      	add	sp, #16
 801f95e:	bd80      	pop	{r7, pc}

0801f960 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801f960:	b580      	push	{r7, lr}
 801f962:	b08a      	sub	sp, #40	@ 0x28
 801f964:	af00      	add	r7, sp, #0
 801f966:	60f8      	str	r0, [r7, #12]
 801f968:	60b9      	str	r1, [r7, #8]
 801f96a:	0019      	movs	r1, r3
 801f96c:	1dbb      	adds	r3, r7, #6
 801f96e:	801a      	strh	r2, [r3, #0]
 801f970:	1d3b      	adds	r3, r7, #4
 801f972:	1c0a      	adds	r2, r1, #0
 801f974:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801f976:	1d3b      	adds	r3, r7, #4
 801f978:	881b      	ldrh	r3, [r3, #0]
 801f97a:	3301      	adds	r3, #1
 801f97c:	085b      	lsrs	r3, r3, #1
 801f97e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801f980:	68fb      	ldr	r3, [r7, #12]
 801f982:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801f984:	68bb      	ldr	r3, [r7, #8]
 801f986:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801f988:	1dbb      	adds	r3, r7, #6
 801f98a:	881a      	ldrh	r2, [r3, #0]
 801f98c:	697b      	ldr	r3, [r7, #20]
 801f98e:	18d3      	adds	r3, r2, r3
 801f990:	2280      	movs	r2, #128	@ 0x80
 801f992:	00d2      	lsls	r2, r2, #3
 801f994:	4694      	mov	ip, r2
 801f996:	4463      	add	r3, ip
 801f998:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801f99a:	69bb      	ldr	r3, [r7, #24]
 801f99c:	627b      	str	r3, [r7, #36]	@ 0x24
 801f99e:	e020      	b.n	801f9e2 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801f9a0:	69fb      	ldr	r3, [r7, #28]
 801f9a2:	781a      	ldrb	r2, [r3, #0]
 801f9a4:	2112      	movs	r1, #18
 801f9a6:	187b      	adds	r3, r7, r1
 801f9a8:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801f9aa:	69fb      	ldr	r3, [r7, #28]
 801f9ac:	3301      	adds	r3, #1
 801f9ae:	781b      	ldrb	r3, [r3, #0]
 801f9b0:	021b      	lsls	r3, r3, #8
 801f9b2:	b21a      	sxth	r2, r3
 801f9b4:	187b      	adds	r3, r7, r1
 801f9b6:	2000      	movs	r0, #0
 801f9b8:	5e1b      	ldrsh	r3, [r3, r0]
 801f9ba:	4313      	orrs	r3, r2
 801f9bc:	b21a      	sxth	r2, r3
 801f9be:	187b      	adds	r3, r7, r1
 801f9c0:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801f9c2:	6a3b      	ldr	r3, [r7, #32]
 801f9c4:	187a      	adds	r2, r7, r1
 801f9c6:	8812      	ldrh	r2, [r2, #0]
 801f9c8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801f9ca:	6a3b      	ldr	r3, [r7, #32]
 801f9cc:	3302      	adds	r3, #2
 801f9ce:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801f9d0:	69fb      	ldr	r3, [r7, #28]
 801f9d2:	3301      	adds	r3, #1
 801f9d4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801f9d6:	69fb      	ldr	r3, [r7, #28]
 801f9d8:	3301      	adds	r3, #1
 801f9da:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801f9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f9de:	3b01      	subs	r3, #1
 801f9e0:	627b      	str	r3, [r7, #36]	@ 0x24
 801f9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f9e4:	2b00      	cmp	r3, #0
 801f9e6:	d1db      	bne.n	801f9a0 <USB_WritePMA+0x40>
  }
}
 801f9e8:	46c0      	nop			@ (mov r8, r8)
 801f9ea:	46c0      	nop			@ (mov r8, r8)
 801f9ec:	46bd      	mov	sp, r7
 801f9ee:	b00a      	add	sp, #40	@ 0x28
 801f9f0:	bd80      	pop	{r7, pc}

0801f9f2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801f9f2:	b580      	push	{r7, lr}
 801f9f4:	b08a      	sub	sp, #40	@ 0x28
 801f9f6:	af00      	add	r7, sp, #0
 801f9f8:	60f8      	str	r0, [r7, #12]
 801f9fa:	60b9      	str	r1, [r7, #8]
 801f9fc:	0019      	movs	r1, r3
 801f9fe:	1dbb      	adds	r3, r7, #6
 801fa00:	801a      	strh	r2, [r3, #0]
 801fa02:	1d3b      	adds	r3, r7, #4
 801fa04:	1c0a      	adds	r2, r1, #0
 801fa06:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801fa08:	1d3b      	adds	r3, r7, #4
 801fa0a:	881b      	ldrh	r3, [r3, #0]
 801fa0c:	085b      	lsrs	r3, r3, #1
 801fa0e:	b29b      	uxth	r3, r3
 801fa10:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801fa12:	68fb      	ldr	r3, [r7, #12]
 801fa14:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801fa16:	68bb      	ldr	r3, [r7, #8]
 801fa18:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801fa1a:	1dbb      	adds	r3, r7, #6
 801fa1c:	881a      	ldrh	r2, [r3, #0]
 801fa1e:	697b      	ldr	r3, [r7, #20]
 801fa20:	18d3      	adds	r3, r2, r3
 801fa22:	2280      	movs	r2, #128	@ 0x80
 801fa24:	00d2      	lsls	r2, r2, #3
 801fa26:	4694      	mov	ip, r2
 801fa28:	4463      	add	r3, ip
 801fa2a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801fa2c:	69bb      	ldr	r3, [r7, #24]
 801fa2e:	627b      	str	r3, [r7, #36]	@ 0x24
 801fa30:	e018      	b.n	801fa64 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801fa32:	6a3b      	ldr	r3, [r7, #32]
 801fa34:	881b      	ldrh	r3, [r3, #0]
 801fa36:	b29b      	uxth	r3, r3
 801fa38:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801fa3a:	6a3b      	ldr	r3, [r7, #32]
 801fa3c:	3302      	adds	r3, #2
 801fa3e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801fa40:	693b      	ldr	r3, [r7, #16]
 801fa42:	b2da      	uxtb	r2, r3
 801fa44:	69fb      	ldr	r3, [r7, #28]
 801fa46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801fa48:	69fb      	ldr	r3, [r7, #28]
 801fa4a:	3301      	adds	r3, #1
 801fa4c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801fa4e:	693b      	ldr	r3, [r7, #16]
 801fa50:	0a1b      	lsrs	r3, r3, #8
 801fa52:	b2da      	uxtb	r2, r3
 801fa54:	69fb      	ldr	r3, [r7, #28]
 801fa56:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801fa58:	69fb      	ldr	r3, [r7, #28]
 801fa5a:	3301      	adds	r3, #1
 801fa5c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801fa5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa60:	3b01      	subs	r3, #1
 801fa62:	627b      	str	r3, [r7, #36]	@ 0x24
 801fa64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	d1e3      	bne.n	801fa32 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801fa6a:	1d3b      	adds	r3, r7, #4
 801fa6c:	881b      	ldrh	r3, [r3, #0]
 801fa6e:	2201      	movs	r2, #1
 801fa70:	4013      	ands	r3, r2
 801fa72:	b29b      	uxth	r3, r3
 801fa74:	2b00      	cmp	r3, #0
 801fa76:	d007      	beq.n	801fa88 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801fa78:	6a3b      	ldr	r3, [r7, #32]
 801fa7a:	881b      	ldrh	r3, [r3, #0]
 801fa7c:	b29b      	uxth	r3, r3
 801fa7e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801fa80:	693b      	ldr	r3, [r7, #16]
 801fa82:	b2da      	uxtb	r2, r3
 801fa84:	69fb      	ldr	r3, [r7, #28]
 801fa86:	701a      	strb	r2, [r3, #0]
  }
}
 801fa88:	46c0      	nop			@ (mov r8, r8)
 801fa8a:	46bd      	mov	sp, r7
 801fa8c:	b00a      	add	sp, #40	@ 0x28
 801fa8e:	bd80      	pop	{r7, pc}

0801fa90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801fa90:	b580      	push	{r7, lr}
 801fa92:	b084      	sub	sp, #16
 801fa94:	af00      	add	r7, sp, #0
 801fa96:	6078      	str	r0, [r7, #4]
 801fa98:	000a      	movs	r2, r1
 801fa9a:	1cfb      	adds	r3, r7, #3
 801fa9c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801fa9e:	230f      	movs	r3, #15
 801faa0:	18fb      	adds	r3, r7, r3
 801faa2:	2200      	movs	r2, #0
 801faa4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801faa6:	687b      	ldr	r3, [r7, #4]
 801faa8:	7c1b      	ldrb	r3, [r3, #16]
 801faaa:	2b00      	cmp	r3, #0
 801faac:	d116      	bne.n	801fadc <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801faae:	2380      	movs	r3, #128	@ 0x80
 801fab0:	009b      	lsls	r3, r3, #2
 801fab2:	6878      	ldr	r0, [r7, #4]
 801fab4:	2202      	movs	r2, #2
 801fab6:	2181      	movs	r1, #129	@ 0x81
 801fab8:	f002 f8eb 	bl	8021c92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801fabc:	687b      	ldr	r3, [r7, #4]
 801fabe:	2201      	movs	r2, #1
 801fac0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801fac2:	2380      	movs	r3, #128	@ 0x80
 801fac4:	009b      	lsls	r3, r3, #2
 801fac6:	6878      	ldr	r0, [r7, #4]
 801fac8:	2202      	movs	r2, #2
 801faca:	2101      	movs	r1, #1
 801facc:	f002 f8e1 	bl	8021c92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801fad0:	687a      	ldr	r2, [r7, #4]
 801fad2:	23b6      	movs	r3, #182	@ 0xb6
 801fad4:	005b      	lsls	r3, r3, #1
 801fad6:	2101      	movs	r1, #1
 801fad8:	50d1      	str	r1, [r2, r3]
 801fada:	e013      	b.n	801fb04 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801fadc:	6878      	ldr	r0, [r7, #4]
 801fade:	2340      	movs	r3, #64	@ 0x40
 801fae0:	2202      	movs	r2, #2
 801fae2:	2181      	movs	r1, #129	@ 0x81
 801fae4:	f002 f8d5 	bl	8021c92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801fae8:	687b      	ldr	r3, [r7, #4]
 801faea:	2201      	movs	r2, #1
 801faec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801faee:	6878      	ldr	r0, [r7, #4]
 801faf0:	2340      	movs	r3, #64	@ 0x40
 801faf2:	2202      	movs	r2, #2
 801faf4:	2101      	movs	r1, #1
 801faf6:	f002 f8cc 	bl	8021c92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801fafa:	687a      	ldr	r2, [r7, #4]
 801fafc:	23b6      	movs	r3, #182	@ 0xb6
 801fafe:	005b      	lsls	r3, r3, #1
 801fb00:	2101      	movs	r1, #1
 801fb02:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801fb04:	6878      	ldr	r0, [r7, #4]
 801fb06:	2308      	movs	r3, #8
 801fb08:	2203      	movs	r2, #3
 801fb0a:	2182      	movs	r1, #130	@ 0x82
 801fb0c:	f002 f8c1 	bl	8021c92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801fb10:	687b      	ldr	r3, [r7, #4]
 801fb12:	2201      	movs	r2, #1
 801fb14:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801fb16:	2387      	movs	r3, #135	@ 0x87
 801fb18:	009b      	lsls	r3, r3, #2
 801fb1a:	0018      	movs	r0, r3
 801fb1c:	f002 fa52 	bl	8021fc4 <USBD_static_malloc>
 801fb20:	0001      	movs	r1, r0
 801fb22:	687a      	ldr	r2, [r7, #4]
 801fb24:	23ae      	movs	r3, #174	@ 0xae
 801fb26:	009b      	lsls	r3, r3, #2
 801fb28:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801fb2a:	687a      	ldr	r2, [r7, #4]
 801fb2c:	23ae      	movs	r3, #174	@ 0xae
 801fb2e:	009b      	lsls	r3, r3, #2
 801fb30:	58d3      	ldr	r3, [r2, r3]
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	d104      	bne.n	801fb40 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801fb36:	230f      	movs	r3, #15
 801fb38:	18fb      	adds	r3, r7, r3
 801fb3a:	2201      	movs	r2, #1
 801fb3c:	701a      	strb	r2, [r3, #0]
 801fb3e:	e02c      	b.n	801fb9a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801fb40:	687a      	ldr	r2, [r7, #4]
 801fb42:	23ae      	movs	r3, #174	@ 0xae
 801fb44:	009b      	lsls	r3, r3, #2
 801fb46:	58d3      	ldr	r3, [r2, r3]
 801fb48:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801fb4a:	687a      	ldr	r2, [r7, #4]
 801fb4c:	23af      	movs	r3, #175	@ 0xaf
 801fb4e:	009b      	lsls	r3, r3, #2
 801fb50:	58d3      	ldr	r3, [r2, r3]
 801fb52:	681b      	ldr	r3, [r3, #0]
 801fb54:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801fb56:	68ba      	ldr	r2, [r7, #8]
 801fb58:	2385      	movs	r3, #133	@ 0x85
 801fb5a:	009b      	lsls	r3, r3, #2
 801fb5c:	2100      	movs	r1, #0
 801fb5e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801fb60:	68ba      	ldr	r2, [r7, #8]
 801fb62:	2386      	movs	r3, #134	@ 0x86
 801fb64:	009b      	lsls	r3, r3, #2
 801fb66:	2100      	movs	r1, #0
 801fb68:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801fb6a:	687b      	ldr	r3, [r7, #4]
 801fb6c:	7c1b      	ldrb	r3, [r3, #16]
 801fb6e:	2b00      	cmp	r3, #0
 801fb70:	d10a      	bne.n	801fb88 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801fb72:	68ba      	ldr	r2, [r7, #8]
 801fb74:	2381      	movs	r3, #129	@ 0x81
 801fb76:	009b      	lsls	r3, r3, #2
 801fb78:	58d2      	ldr	r2, [r2, r3]
 801fb7a:	2380      	movs	r3, #128	@ 0x80
 801fb7c:	009b      	lsls	r3, r3, #2
 801fb7e:	6878      	ldr	r0, [r7, #4]
 801fb80:	2101      	movs	r1, #1
 801fb82:	f002 f9d1 	bl	8021f28 <USBD_LL_PrepareReceive>
 801fb86:	e008      	b.n	801fb9a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801fb88:	68ba      	ldr	r2, [r7, #8]
 801fb8a:	2381      	movs	r3, #129	@ 0x81
 801fb8c:	009b      	lsls	r3, r3, #2
 801fb8e:	58d2      	ldr	r2, [r2, r3]
 801fb90:	6878      	ldr	r0, [r7, #4]
 801fb92:	2340      	movs	r3, #64	@ 0x40
 801fb94:	2101      	movs	r1, #1
 801fb96:	f002 f9c7 	bl	8021f28 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801fb9a:	230f      	movs	r3, #15
 801fb9c:	18fb      	adds	r3, r7, r3
 801fb9e:	781b      	ldrb	r3, [r3, #0]
}
 801fba0:	0018      	movs	r0, r3
 801fba2:	46bd      	mov	sp, r7
 801fba4:	b004      	add	sp, #16
 801fba6:	bd80      	pop	{r7, pc}

0801fba8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801fba8:	b580      	push	{r7, lr}
 801fbaa:	b084      	sub	sp, #16
 801fbac:	af00      	add	r7, sp, #0
 801fbae:	6078      	str	r0, [r7, #4]
 801fbb0:	000a      	movs	r2, r1
 801fbb2:	1cfb      	adds	r3, r7, #3
 801fbb4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801fbb6:	230f      	movs	r3, #15
 801fbb8:	18fb      	adds	r3, r7, r3
 801fbba:	2200      	movs	r2, #0
 801fbbc:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801fbbe:	687b      	ldr	r3, [r7, #4]
 801fbc0:	2181      	movs	r1, #129	@ 0x81
 801fbc2:	0018      	movs	r0, r3
 801fbc4:	f002 f89c 	bl	8021d00 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801fbc8:	687b      	ldr	r3, [r7, #4]
 801fbca:	2200      	movs	r2, #0
 801fbcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801fbce:	687b      	ldr	r3, [r7, #4]
 801fbd0:	2101      	movs	r1, #1
 801fbd2:	0018      	movs	r0, r3
 801fbd4:	f002 f894 	bl	8021d00 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801fbd8:	687a      	ldr	r2, [r7, #4]
 801fbda:	23b6      	movs	r3, #182	@ 0xb6
 801fbdc:	005b      	lsls	r3, r3, #1
 801fbde:	2100      	movs	r1, #0
 801fbe0:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801fbe2:	687b      	ldr	r3, [r7, #4]
 801fbe4:	2182      	movs	r1, #130	@ 0x82
 801fbe6:	0018      	movs	r0, r3
 801fbe8:	f002 f88a 	bl	8021d00 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801fbec:	687b      	ldr	r3, [r7, #4]
 801fbee:	2200      	movs	r2, #0
 801fbf0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801fbf2:	687a      	ldr	r2, [r7, #4]
 801fbf4:	23ae      	movs	r3, #174	@ 0xae
 801fbf6:	009b      	lsls	r3, r3, #2
 801fbf8:	58d3      	ldr	r3, [r2, r3]
 801fbfa:	2b00      	cmp	r3, #0
 801fbfc:	d011      	beq.n	801fc22 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801fbfe:	687a      	ldr	r2, [r7, #4]
 801fc00:	23af      	movs	r3, #175	@ 0xaf
 801fc02:	009b      	lsls	r3, r3, #2
 801fc04:	58d3      	ldr	r3, [r2, r3]
 801fc06:	685b      	ldr	r3, [r3, #4]
 801fc08:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801fc0a:	687a      	ldr	r2, [r7, #4]
 801fc0c:	23ae      	movs	r3, #174	@ 0xae
 801fc0e:	009b      	lsls	r3, r3, #2
 801fc10:	58d3      	ldr	r3, [r2, r3]
 801fc12:	0018      	movs	r0, r3
 801fc14:	f002 f9e2 	bl	8021fdc <USBD_static_free>
    pdev->pClassData = NULL;
 801fc18:	687a      	ldr	r2, [r7, #4]
 801fc1a:	23ae      	movs	r3, #174	@ 0xae
 801fc1c:	009b      	lsls	r3, r3, #2
 801fc1e:	2100      	movs	r1, #0
 801fc20:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801fc22:	230f      	movs	r3, #15
 801fc24:	18fb      	adds	r3, r7, r3
 801fc26:	781b      	ldrb	r3, [r3, #0]
}
 801fc28:	0018      	movs	r0, r3
 801fc2a:	46bd      	mov	sp, r7
 801fc2c:	b004      	add	sp, #16
 801fc2e:	bd80      	pop	{r7, pc}

0801fc30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801fc30:	b580      	push	{r7, lr}
 801fc32:	b086      	sub	sp, #24
 801fc34:	af00      	add	r7, sp, #0
 801fc36:	6078      	str	r0, [r7, #4]
 801fc38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801fc3a:	687a      	ldr	r2, [r7, #4]
 801fc3c:	23ae      	movs	r3, #174	@ 0xae
 801fc3e:	009b      	lsls	r3, r3, #2
 801fc40:	58d3      	ldr	r3, [r2, r3]
 801fc42:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801fc44:	230f      	movs	r3, #15
 801fc46:	18fb      	adds	r3, r7, r3
 801fc48:	2200      	movs	r2, #0
 801fc4a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801fc4c:	230c      	movs	r3, #12
 801fc4e:	18fb      	adds	r3, r7, r3
 801fc50:	2200      	movs	r2, #0
 801fc52:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801fc54:	2317      	movs	r3, #23
 801fc56:	18fb      	adds	r3, r7, r3
 801fc58:	2200      	movs	r2, #0
 801fc5a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801fc5c:	683b      	ldr	r3, [r7, #0]
 801fc5e:	781b      	ldrb	r3, [r3, #0]
 801fc60:	001a      	movs	r2, r3
 801fc62:	2360      	movs	r3, #96	@ 0x60
 801fc64:	4013      	ands	r3, r2
 801fc66:	d03d      	beq.n	801fce4 <USBD_CDC_Setup+0xb4>
 801fc68:	2b20      	cmp	r3, #32
 801fc6a:	d000      	beq.n	801fc6e <USBD_CDC_Setup+0x3e>
 801fc6c:	e094      	b.n	801fd98 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801fc6e:	683b      	ldr	r3, [r7, #0]
 801fc70:	88db      	ldrh	r3, [r3, #6]
 801fc72:	2b00      	cmp	r3, #0
 801fc74:	d02b      	beq.n	801fcce <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801fc76:	683b      	ldr	r3, [r7, #0]
 801fc78:	781b      	ldrb	r3, [r3, #0]
 801fc7a:	b25b      	sxtb	r3, r3
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	da12      	bge.n	801fca6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801fc80:	687a      	ldr	r2, [r7, #4]
 801fc82:	23af      	movs	r3, #175	@ 0xaf
 801fc84:	009b      	lsls	r3, r3, #2
 801fc86:	58d3      	ldr	r3, [r2, r3]
 801fc88:	689b      	ldr	r3, [r3, #8]
 801fc8a:	683a      	ldr	r2, [r7, #0]
 801fc8c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801fc8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801fc90:	683a      	ldr	r2, [r7, #0]
 801fc92:	88d2      	ldrh	r2, [r2, #6]
 801fc94:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801fc96:	6939      	ldr	r1, [r7, #16]
 801fc98:	683b      	ldr	r3, [r7, #0]
 801fc9a:	88da      	ldrh	r2, [r3, #6]
 801fc9c:	687b      	ldr	r3, [r7, #4]
 801fc9e:	0018      	movs	r0, r3
 801fca0:	f001 fbaf 	bl	8021402 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801fca4:	e083      	b.n	801fdae <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801fca6:	683b      	ldr	r3, [r7, #0]
 801fca8:	7859      	ldrb	r1, [r3, #1]
 801fcaa:	693a      	ldr	r2, [r7, #16]
 801fcac:	2380      	movs	r3, #128	@ 0x80
 801fcae:	009b      	lsls	r3, r3, #2
 801fcb0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801fcb2:	683b      	ldr	r3, [r7, #0]
 801fcb4:	88db      	ldrh	r3, [r3, #6]
 801fcb6:	b2d9      	uxtb	r1, r3
 801fcb8:	693b      	ldr	r3, [r7, #16]
 801fcba:	4a40      	ldr	r2, [pc, #256]	@ (801fdbc <USBD_CDC_Setup+0x18c>)
 801fcbc:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801fcbe:	6939      	ldr	r1, [r7, #16]
 801fcc0:	683b      	ldr	r3, [r7, #0]
 801fcc2:	88da      	ldrh	r2, [r3, #6]
 801fcc4:	687b      	ldr	r3, [r7, #4]
 801fcc6:	0018      	movs	r0, r3
 801fcc8:	f001 fbce 	bl	8021468 <USBD_CtlPrepareRx>
      break;
 801fccc:	e06f      	b.n	801fdae <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801fcce:	687a      	ldr	r2, [r7, #4]
 801fcd0:	23af      	movs	r3, #175	@ 0xaf
 801fcd2:	009b      	lsls	r3, r3, #2
 801fcd4:	58d3      	ldr	r3, [r2, r3]
 801fcd6:	689b      	ldr	r3, [r3, #8]
 801fcd8:	683a      	ldr	r2, [r7, #0]
 801fcda:	7850      	ldrb	r0, [r2, #1]
 801fcdc:	6839      	ldr	r1, [r7, #0]
 801fcde:	2200      	movs	r2, #0
 801fce0:	4798      	blx	r3
      break;
 801fce2:	e064      	b.n	801fdae <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801fce4:	683b      	ldr	r3, [r7, #0]
 801fce6:	785b      	ldrb	r3, [r3, #1]
 801fce8:	2b0b      	cmp	r3, #11
 801fcea:	d037      	beq.n	801fd5c <USBD_CDC_Setup+0x12c>
 801fcec:	dc47      	bgt.n	801fd7e <USBD_CDC_Setup+0x14e>
 801fcee:	2b00      	cmp	r3, #0
 801fcf0:	d002      	beq.n	801fcf8 <USBD_CDC_Setup+0xc8>
 801fcf2:	2b0a      	cmp	r3, #10
 801fcf4:	d019      	beq.n	801fd2a <USBD_CDC_Setup+0xfa>
 801fcf6:	e042      	b.n	801fd7e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801fcf8:	687a      	ldr	r2, [r7, #4]
 801fcfa:	23a7      	movs	r3, #167	@ 0xa7
 801fcfc:	009b      	lsls	r3, r3, #2
 801fcfe:	5cd3      	ldrb	r3, [r2, r3]
 801fd00:	2b03      	cmp	r3, #3
 801fd02:	d107      	bne.n	801fd14 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801fd04:	230c      	movs	r3, #12
 801fd06:	18f9      	adds	r1, r7, r3
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	2202      	movs	r2, #2
 801fd0c:	0018      	movs	r0, r3
 801fd0e:	f001 fb78 	bl	8021402 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801fd12:	e040      	b.n	801fd96 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801fd14:	683a      	ldr	r2, [r7, #0]
 801fd16:	687b      	ldr	r3, [r7, #4]
 801fd18:	0011      	movs	r1, r2
 801fd1a:	0018      	movs	r0, r3
 801fd1c:	f001 faf3 	bl	8021306 <USBD_CtlError>
            ret = USBD_FAIL;
 801fd20:	2317      	movs	r3, #23
 801fd22:	18fb      	adds	r3, r7, r3
 801fd24:	2202      	movs	r2, #2
 801fd26:	701a      	strb	r2, [r3, #0]
          break;
 801fd28:	e035      	b.n	801fd96 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801fd2a:	687a      	ldr	r2, [r7, #4]
 801fd2c:	23a7      	movs	r3, #167	@ 0xa7
 801fd2e:	009b      	lsls	r3, r3, #2
 801fd30:	5cd3      	ldrb	r3, [r2, r3]
 801fd32:	2b03      	cmp	r3, #3
 801fd34:	d107      	bne.n	801fd46 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801fd36:	230f      	movs	r3, #15
 801fd38:	18f9      	adds	r1, r7, r3
 801fd3a:	687b      	ldr	r3, [r7, #4]
 801fd3c:	2201      	movs	r2, #1
 801fd3e:	0018      	movs	r0, r3
 801fd40:	f001 fb5f 	bl	8021402 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801fd44:	e027      	b.n	801fd96 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801fd46:	683a      	ldr	r2, [r7, #0]
 801fd48:	687b      	ldr	r3, [r7, #4]
 801fd4a:	0011      	movs	r1, r2
 801fd4c:	0018      	movs	r0, r3
 801fd4e:	f001 fada 	bl	8021306 <USBD_CtlError>
            ret = USBD_FAIL;
 801fd52:	2317      	movs	r3, #23
 801fd54:	18fb      	adds	r3, r7, r3
 801fd56:	2202      	movs	r2, #2
 801fd58:	701a      	strb	r2, [r3, #0]
          break;
 801fd5a:	e01c      	b.n	801fd96 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801fd5c:	687a      	ldr	r2, [r7, #4]
 801fd5e:	23a7      	movs	r3, #167	@ 0xa7
 801fd60:	009b      	lsls	r3, r3, #2
 801fd62:	5cd3      	ldrb	r3, [r2, r3]
 801fd64:	2b03      	cmp	r3, #3
 801fd66:	d015      	beq.n	801fd94 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801fd68:	683a      	ldr	r2, [r7, #0]
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	0011      	movs	r1, r2
 801fd6e:	0018      	movs	r0, r3
 801fd70:	f001 fac9 	bl	8021306 <USBD_CtlError>
            ret = USBD_FAIL;
 801fd74:	2317      	movs	r3, #23
 801fd76:	18fb      	adds	r3, r7, r3
 801fd78:	2202      	movs	r2, #2
 801fd7a:	701a      	strb	r2, [r3, #0]
          }
          break;
 801fd7c:	e00a      	b.n	801fd94 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801fd7e:	683a      	ldr	r2, [r7, #0]
 801fd80:	687b      	ldr	r3, [r7, #4]
 801fd82:	0011      	movs	r1, r2
 801fd84:	0018      	movs	r0, r3
 801fd86:	f001 fabe 	bl	8021306 <USBD_CtlError>
          ret = USBD_FAIL;
 801fd8a:	2317      	movs	r3, #23
 801fd8c:	18fb      	adds	r3, r7, r3
 801fd8e:	2202      	movs	r2, #2
 801fd90:	701a      	strb	r2, [r3, #0]
          break;
 801fd92:	e000      	b.n	801fd96 <USBD_CDC_Setup+0x166>
          break;
 801fd94:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801fd96:	e00a      	b.n	801fdae <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801fd98:	683a      	ldr	r2, [r7, #0]
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	0011      	movs	r1, r2
 801fd9e:	0018      	movs	r0, r3
 801fda0:	f001 fab1 	bl	8021306 <USBD_CtlError>
      ret = USBD_FAIL;
 801fda4:	2317      	movs	r3, #23
 801fda6:	18fb      	adds	r3, r7, r3
 801fda8:	2202      	movs	r2, #2
 801fdaa:	701a      	strb	r2, [r3, #0]
      break;
 801fdac:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801fdae:	2317      	movs	r3, #23
 801fdb0:	18fb      	adds	r3, r7, r3
 801fdb2:	781b      	ldrb	r3, [r3, #0]
}
 801fdb4:	0018      	movs	r0, r3
 801fdb6:	46bd      	mov	sp, r7
 801fdb8:	b006      	add	sp, #24
 801fdba:	bd80      	pop	{r7, pc}
 801fdbc:	00000201 	.word	0x00000201

0801fdc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fdc0:	b580      	push	{r7, lr}
 801fdc2:	b084      	sub	sp, #16
 801fdc4:	af00      	add	r7, sp, #0
 801fdc6:	6078      	str	r0, [r7, #4]
 801fdc8:	000a      	movs	r2, r1
 801fdca:	1cfb      	adds	r3, r7, #3
 801fdcc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801fdce:	687a      	ldr	r2, [r7, #4]
 801fdd0:	23ae      	movs	r3, #174	@ 0xae
 801fdd2:	009b      	lsls	r3, r3, #2
 801fdd4:	58d3      	ldr	r3, [r2, r3]
 801fdd6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801fdd8:	687a      	ldr	r2, [r7, #4]
 801fdda:	23b0      	movs	r3, #176	@ 0xb0
 801fddc:	009b      	lsls	r3, r3, #2
 801fdde:	58d3      	ldr	r3, [r2, r3]
 801fde0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801fde2:	687a      	ldr	r2, [r7, #4]
 801fde4:	23ae      	movs	r3, #174	@ 0xae
 801fde6:	009b      	lsls	r3, r3, #2
 801fde8:	58d3      	ldr	r3, [r2, r3]
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	d03e      	beq.n	801fe6c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801fdee:	1cfb      	adds	r3, r7, #3
 801fdf0:	781a      	ldrb	r2, [r3, #0]
 801fdf2:	6879      	ldr	r1, [r7, #4]
 801fdf4:	0013      	movs	r3, r2
 801fdf6:	009b      	lsls	r3, r3, #2
 801fdf8:	189b      	adds	r3, r3, r2
 801fdfa:	009b      	lsls	r3, r3, #2
 801fdfc:	18cb      	adds	r3, r1, r3
 801fdfe:	331c      	adds	r3, #28
 801fe00:	681b      	ldr	r3, [r3, #0]
 801fe02:	2b00      	cmp	r3, #0
 801fe04:	d02b      	beq.n	801fe5e <USBD_CDC_DataIn+0x9e>
 801fe06:	1cfb      	adds	r3, r7, #3
 801fe08:	781a      	ldrb	r2, [r3, #0]
 801fe0a:	6879      	ldr	r1, [r7, #4]
 801fe0c:	0013      	movs	r3, r2
 801fe0e:	009b      	lsls	r3, r3, #2
 801fe10:	189b      	adds	r3, r3, r2
 801fe12:	009b      	lsls	r3, r3, #2
 801fe14:	18cb      	adds	r3, r1, r3
 801fe16:	331c      	adds	r3, #28
 801fe18:	6818      	ldr	r0, [r3, #0]
 801fe1a:	1cfb      	adds	r3, r7, #3
 801fe1c:	781a      	ldrb	r2, [r3, #0]
 801fe1e:	68b9      	ldr	r1, [r7, #8]
 801fe20:	0013      	movs	r3, r2
 801fe22:	009b      	lsls	r3, r3, #2
 801fe24:	189b      	adds	r3, r3, r2
 801fe26:	00db      	lsls	r3, r3, #3
 801fe28:	18cb      	adds	r3, r1, r3
 801fe2a:	3338      	adds	r3, #56	@ 0x38
 801fe2c:	681b      	ldr	r3, [r3, #0]
 801fe2e:	0019      	movs	r1, r3
 801fe30:	f7e0 fa3e 	bl	80002b0 <__aeabi_uidivmod>
 801fe34:	1e0b      	subs	r3, r1, #0
 801fe36:	d112      	bne.n	801fe5e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801fe38:	1cfb      	adds	r3, r7, #3
 801fe3a:	781a      	ldrb	r2, [r3, #0]
 801fe3c:	6879      	ldr	r1, [r7, #4]
 801fe3e:	0013      	movs	r3, r2
 801fe40:	009b      	lsls	r3, r3, #2
 801fe42:	189b      	adds	r3, r3, r2
 801fe44:	009b      	lsls	r3, r3, #2
 801fe46:	18cb      	adds	r3, r1, r3
 801fe48:	331c      	adds	r3, #28
 801fe4a:	2200      	movs	r2, #0
 801fe4c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801fe4e:	1cfb      	adds	r3, r7, #3
 801fe50:	7819      	ldrb	r1, [r3, #0]
 801fe52:	6878      	ldr	r0, [r7, #4]
 801fe54:	2300      	movs	r3, #0
 801fe56:	2200      	movs	r2, #0
 801fe58:	f002 f82f 	bl	8021eba <USBD_LL_Transmit>
 801fe5c:	e004      	b.n	801fe68 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801fe5e:	68fa      	ldr	r2, [r7, #12]
 801fe60:	2385      	movs	r3, #133	@ 0x85
 801fe62:	009b      	lsls	r3, r3, #2
 801fe64:	2100      	movs	r1, #0
 801fe66:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801fe68:	2300      	movs	r3, #0
 801fe6a:	e000      	b.n	801fe6e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801fe6c:	2302      	movs	r3, #2
  }
}
 801fe6e:	0018      	movs	r0, r3
 801fe70:	46bd      	mov	sp, r7
 801fe72:	b004      	add	sp, #16
 801fe74:	bd80      	pop	{r7, pc}

0801fe76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fe76:	b580      	push	{r7, lr}
 801fe78:	b084      	sub	sp, #16
 801fe7a:	af00      	add	r7, sp, #0
 801fe7c:	6078      	str	r0, [r7, #4]
 801fe7e:	000a      	movs	r2, r1
 801fe80:	1cfb      	adds	r3, r7, #3
 801fe82:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801fe84:	687a      	ldr	r2, [r7, #4]
 801fe86:	23ae      	movs	r3, #174	@ 0xae
 801fe88:	009b      	lsls	r3, r3, #2
 801fe8a:	58d3      	ldr	r3, [r2, r3]
 801fe8c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801fe8e:	1cfb      	adds	r3, r7, #3
 801fe90:	781a      	ldrb	r2, [r3, #0]
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	0011      	movs	r1, r2
 801fe96:	0018      	movs	r0, r3
 801fe98:	f002 f87d 	bl	8021f96 <USBD_LL_GetRxDataSize>
 801fe9c:	0001      	movs	r1, r0
 801fe9e:	68fa      	ldr	r2, [r7, #12]
 801fea0:	2383      	movs	r3, #131	@ 0x83
 801fea2:	009b      	lsls	r3, r3, #2
 801fea4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801fea6:	687a      	ldr	r2, [r7, #4]
 801fea8:	23ae      	movs	r3, #174	@ 0xae
 801feaa:	009b      	lsls	r3, r3, #2
 801feac:	58d3      	ldr	r3, [r2, r3]
 801feae:	2b00      	cmp	r3, #0
 801feb0:	d011      	beq.n	801fed6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801feb2:	687a      	ldr	r2, [r7, #4]
 801feb4:	23af      	movs	r3, #175	@ 0xaf
 801feb6:	009b      	lsls	r3, r3, #2
 801feb8:	58d3      	ldr	r3, [r2, r3]
 801feba:	68da      	ldr	r2, [r3, #12]
 801febc:	68f9      	ldr	r1, [r7, #12]
 801febe:	2381      	movs	r3, #129	@ 0x81
 801fec0:	009b      	lsls	r3, r3, #2
 801fec2:	58c8      	ldr	r0, [r1, r3]
 801fec4:	68fb      	ldr	r3, [r7, #12]
 801fec6:	2183      	movs	r1, #131	@ 0x83
 801fec8:	0089      	lsls	r1, r1, #2
 801feca:	468c      	mov	ip, r1
 801fecc:	4463      	add	r3, ip
 801fece:	0019      	movs	r1, r3
 801fed0:	4790      	blx	r2

    return USBD_OK;
 801fed2:	2300      	movs	r3, #0
 801fed4:	e000      	b.n	801fed8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801fed6:	2302      	movs	r3, #2
  }
}
 801fed8:	0018      	movs	r0, r3
 801feda:	46bd      	mov	sp, r7
 801fedc:	b004      	add	sp, #16
 801fede:	bd80      	pop	{r7, pc}

0801fee0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801fee0:	b590      	push	{r4, r7, lr}
 801fee2:	b085      	sub	sp, #20
 801fee4:	af00      	add	r7, sp, #0
 801fee6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801fee8:	687a      	ldr	r2, [r7, #4]
 801feea:	23ae      	movs	r3, #174	@ 0xae
 801feec:	009b      	lsls	r3, r3, #2
 801feee:	58d3      	ldr	r3, [r2, r3]
 801fef0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801fef2:	687a      	ldr	r2, [r7, #4]
 801fef4:	23af      	movs	r3, #175	@ 0xaf
 801fef6:	009b      	lsls	r3, r3, #2
 801fef8:	58d3      	ldr	r3, [r2, r3]
 801fefa:	2b00      	cmp	r3, #0
 801fefc:	d018      	beq.n	801ff30 <USBD_CDC_EP0_RxReady+0x50>
 801fefe:	68fa      	ldr	r2, [r7, #12]
 801ff00:	2380      	movs	r3, #128	@ 0x80
 801ff02:	009b      	lsls	r3, r3, #2
 801ff04:	5cd3      	ldrb	r3, [r2, r3]
 801ff06:	2bff      	cmp	r3, #255	@ 0xff
 801ff08:	d012      	beq.n	801ff30 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ff0a:	687a      	ldr	r2, [r7, #4]
 801ff0c:	23af      	movs	r3, #175	@ 0xaf
 801ff0e:	009b      	lsls	r3, r3, #2
 801ff10:	58d3      	ldr	r3, [r2, r3]
 801ff12:	689b      	ldr	r3, [r3, #8]
 801ff14:	68f9      	ldr	r1, [r7, #12]
 801ff16:	2280      	movs	r2, #128	@ 0x80
 801ff18:	0092      	lsls	r2, r2, #2
 801ff1a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801ff1c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801ff1e:	68fa      	ldr	r2, [r7, #12]
 801ff20:	4c06      	ldr	r4, [pc, #24]	@ (801ff3c <USBD_CDC_EP0_RxReady+0x5c>)
 801ff22:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ff24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801ff26:	68fa      	ldr	r2, [r7, #12]
 801ff28:	2380      	movs	r3, #128	@ 0x80
 801ff2a:	009b      	lsls	r3, r3, #2
 801ff2c:	21ff      	movs	r1, #255	@ 0xff
 801ff2e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801ff30:	2300      	movs	r3, #0
}
 801ff32:	0018      	movs	r0, r3
 801ff34:	46bd      	mov	sp, r7
 801ff36:	b005      	add	sp, #20
 801ff38:	bd90      	pop	{r4, r7, pc}
 801ff3a:	46c0      	nop			@ (mov r8, r8)
 801ff3c:	00000201 	.word	0x00000201

0801ff40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801ff40:	b580      	push	{r7, lr}
 801ff42:	b082      	sub	sp, #8
 801ff44:	af00      	add	r7, sp, #0
 801ff46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	2243      	movs	r2, #67	@ 0x43
 801ff4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801ff4e:	4b02      	ldr	r3, [pc, #8]	@ (801ff58 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801ff50:	0018      	movs	r0, r3
 801ff52:	46bd      	mov	sp, r7
 801ff54:	b002      	add	sp, #8
 801ff56:	bd80      	pop	{r7, pc}
 801ff58:	20000180 	.word	0x20000180

0801ff5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801ff5c:	b580      	push	{r7, lr}
 801ff5e:	b082      	sub	sp, #8
 801ff60:	af00      	add	r7, sp, #0
 801ff62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801ff64:	687b      	ldr	r3, [r7, #4]
 801ff66:	2243      	movs	r2, #67	@ 0x43
 801ff68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801ff6a:	4b02      	ldr	r3, [pc, #8]	@ (801ff74 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801ff6c:	0018      	movs	r0, r3
 801ff6e:	46bd      	mov	sp, r7
 801ff70:	b002      	add	sp, #8
 801ff72:	bd80      	pop	{r7, pc}
 801ff74:	2000013c 	.word	0x2000013c

0801ff78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801ff78:	b580      	push	{r7, lr}
 801ff7a:	b082      	sub	sp, #8
 801ff7c:	af00      	add	r7, sp, #0
 801ff7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801ff80:	687b      	ldr	r3, [r7, #4]
 801ff82:	2243      	movs	r2, #67	@ 0x43
 801ff84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801ff86:	4b02      	ldr	r3, [pc, #8]	@ (801ff90 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801ff88:	0018      	movs	r0, r3
 801ff8a:	46bd      	mov	sp, r7
 801ff8c:	b002      	add	sp, #8
 801ff8e:	bd80      	pop	{r7, pc}
 801ff90:	200001c4 	.word	0x200001c4

0801ff94 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801ff94:	b580      	push	{r7, lr}
 801ff96:	b082      	sub	sp, #8
 801ff98:	af00      	add	r7, sp, #0
 801ff9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801ff9c:	687b      	ldr	r3, [r7, #4]
 801ff9e:	220a      	movs	r2, #10
 801ffa0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801ffa2:	4b02      	ldr	r3, [pc, #8]	@ (801ffac <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801ffa4:	0018      	movs	r0, r3
 801ffa6:	46bd      	mov	sp, r7
 801ffa8:	b002      	add	sp, #8
 801ffaa:	bd80      	pop	{r7, pc}
 801ffac:	200000f8 	.word	0x200000f8

0801ffb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801ffb0:	b580      	push	{r7, lr}
 801ffb2:	b084      	sub	sp, #16
 801ffb4:	af00      	add	r7, sp, #0
 801ffb6:	6078      	str	r0, [r7, #4]
 801ffb8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801ffba:	200f      	movs	r0, #15
 801ffbc:	183b      	adds	r3, r7, r0
 801ffbe:	2202      	movs	r2, #2
 801ffc0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801ffc2:	683b      	ldr	r3, [r7, #0]
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	d007      	beq.n	801ffd8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801ffc8:	687a      	ldr	r2, [r7, #4]
 801ffca:	23af      	movs	r3, #175	@ 0xaf
 801ffcc:	009b      	lsls	r3, r3, #2
 801ffce:	6839      	ldr	r1, [r7, #0]
 801ffd0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801ffd2:	183b      	adds	r3, r7, r0
 801ffd4:	2200      	movs	r2, #0
 801ffd6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801ffd8:	230f      	movs	r3, #15
 801ffda:	18fb      	adds	r3, r7, r3
 801ffdc:	781b      	ldrb	r3, [r3, #0]
}
 801ffde:	0018      	movs	r0, r3
 801ffe0:	46bd      	mov	sp, r7
 801ffe2:	b004      	add	sp, #16
 801ffe4:	bd80      	pop	{r7, pc}

0801ffe6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801ffe6:	b580      	push	{r7, lr}
 801ffe8:	b086      	sub	sp, #24
 801ffea:	af00      	add	r7, sp, #0
 801ffec:	60f8      	str	r0, [r7, #12]
 801ffee:	60b9      	str	r1, [r7, #8]
 801fff0:	1dbb      	adds	r3, r7, #6
 801fff2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801fff4:	68fa      	ldr	r2, [r7, #12]
 801fff6:	23ae      	movs	r3, #174	@ 0xae
 801fff8:	009b      	lsls	r3, r3, #2
 801fffa:	58d3      	ldr	r3, [r2, r3]
 801fffc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801fffe:	697a      	ldr	r2, [r7, #20]
 8020000:	2382      	movs	r3, #130	@ 0x82
 8020002:	009b      	lsls	r3, r3, #2
 8020004:	68b9      	ldr	r1, [r7, #8]
 8020006:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8020008:	1dbb      	adds	r3, r7, #6
 802000a:	8819      	ldrh	r1, [r3, #0]
 802000c:	697a      	ldr	r2, [r7, #20]
 802000e:	2384      	movs	r3, #132	@ 0x84
 8020010:	009b      	lsls	r3, r3, #2
 8020012:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8020014:	2300      	movs	r3, #0
}
 8020016:	0018      	movs	r0, r3
 8020018:	46bd      	mov	sp, r7
 802001a:	b006      	add	sp, #24
 802001c:	bd80      	pop	{r7, pc}

0802001e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 802001e:	b580      	push	{r7, lr}
 8020020:	b084      	sub	sp, #16
 8020022:	af00      	add	r7, sp, #0
 8020024:	6078      	str	r0, [r7, #4]
 8020026:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020028:	687a      	ldr	r2, [r7, #4]
 802002a:	23ae      	movs	r3, #174	@ 0xae
 802002c:	009b      	lsls	r3, r3, #2
 802002e:	58d3      	ldr	r3, [r2, r3]
 8020030:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8020032:	68fa      	ldr	r2, [r7, #12]
 8020034:	2381      	movs	r3, #129	@ 0x81
 8020036:	009b      	lsls	r3, r3, #2
 8020038:	6839      	ldr	r1, [r7, #0]
 802003a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 802003c:	2300      	movs	r3, #0
}
 802003e:	0018      	movs	r0, r3
 8020040:	46bd      	mov	sp, r7
 8020042:	b004      	add	sp, #16
 8020044:	bd80      	pop	{r7, pc}

08020046 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8020046:	b580      	push	{r7, lr}
 8020048:	b084      	sub	sp, #16
 802004a:	af00      	add	r7, sp, #0
 802004c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802004e:	687a      	ldr	r2, [r7, #4]
 8020050:	23ae      	movs	r3, #174	@ 0xae
 8020052:	009b      	lsls	r3, r3, #2
 8020054:	58d3      	ldr	r3, [r2, r3]
 8020056:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8020058:	687a      	ldr	r2, [r7, #4]
 802005a:	23ae      	movs	r3, #174	@ 0xae
 802005c:	009b      	lsls	r3, r3, #2
 802005e:	58d3      	ldr	r3, [r2, r3]
 8020060:	2b00      	cmp	r3, #0
 8020062:	d022      	beq.n	80200aa <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8020064:	68fa      	ldr	r2, [r7, #12]
 8020066:	2385      	movs	r3, #133	@ 0x85
 8020068:	009b      	lsls	r3, r3, #2
 802006a:	58d3      	ldr	r3, [r2, r3]
 802006c:	2b00      	cmp	r3, #0
 802006e:	d11a      	bne.n	80200a6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8020070:	68fa      	ldr	r2, [r7, #12]
 8020072:	2385      	movs	r3, #133	@ 0x85
 8020074:	009b      	lsls	r3, r3, #2
 8020076:	2101      	movs	r1, #1
 8020078:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 802007a:	68fa      	ldr	r2, [r7, #12]
 802007c:	2384      	movs	r3, #132	@ 0x84
 802007e:	009b      	lsls	r3, r3, #2
 8020080:	58d2      	ldr	r2, [r2, r3]
 8020082:	687b      	ldr	r3, [r7, #4]
 8020084:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8020086:	68fa      	ldr	r2, [r7, #12]
 8020088:	2382      	movs	r3, #130	@ 0x82
 802008a:	009b      	lsls	r3, r3, #2
 802008c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 802008e:	68fa      	ldr	r2, [r7, #12]
 8020090:	2384      	movs	r3, #132	@ 0x84
 8020092:	009b      	lsls	r3, r3, #2
 8020094:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8020096:	b29b      	uxth	r3, r3
 8020098:	6878      	ldr	r0, [r7, #4]
 802009a:	000a      	movs	r2, r1
 802009c:	2181      	movs	r1, #129	@ 0x81
 802009e:	f001 ff0c 	bl	8021eba <USBD_LL_Transmit>

      return USBD_OK;
 80200a2:	2300      	movs	r3, #0
 80200a4:	e002      	b.n	80200ac <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80200a6:	2301      	movs	r3, #1
 80200a8:	e000      	b.n	80200ac <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80200aa:	2302      	movs	r3, #2
  }
}
 80200ac:	0018      	movs	r0, r3
 80200ae:	46bd      	mov	sp, r7
 80200b0:	b004      	add	sp, #16
 80200b2:	bd80      	pop	{r7, pc}

080200b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80200b4:	b580      	push	{r7, lr}
 80200b6:	b084      	sub	sp, #16
 80200b8:	af00      	add	r7, sp, #0
 80200ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80200bc:	687a      	ldr	r2, [r7, #4]
 80200be:	23ae      	movs	r3, #174	@ 0xae
 80200c0:	009b      	lsls	r3, r3, #2
 80200c2:	58d3      	ldr	r3, [r2, r3]
 80200c4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80200c6:	687a      	ldr	r2, [r7, #4]
 80200c8:	23ae      	movs	r3, #174	@ 0xae
 80200ca:	009b      	lsls	r3, r3, #2
 80200cc:	58d3      	ldr	r3, [r2, r3]
 80200ce:	2b00      	cmp	r3, #0
 80200d0:	d019      	beq.n	8020106 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80200d2:	687b      	ldr	r3, [r7, #4]
 80200d4:	7c1b      	ldrb	r3, [r3, #16]
 80200d6:	2b00      	cmp	r3, #0
 80200d8:	d10a      	bne.n	80200f0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80200da:	68fa      	ldr	r2, [r7, #12]
 80200dc:	2381      	movs	r3, #129	@ 0x81
 80200de:	009b      	lsls	r3, r3, #2
 80200e0:	58d2      	ldr	r2, [r2, r3]
 80200e2:	2380      	movs	r3, #128	@ 0x80
 80200e4:	009b      	lsls	r3, r3, #2
 80200e6:	6878      	ldr	r0, [r7, #4]
 80200e8:	2101      	movs	r1, #1
 80200ea:	f001 ff1d 	bl	8021f28 <USBD_LL_PrepareReceive>
 80200ee:	e008      	b.n	8020102 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80200f0:	68fa      	ldr	r2, [r7, #12]
 80200f2:	2381      	movs	r3, #129	@ 0x81
 80200f4:	009b      	lsls	r3, r3, #2
 80200f6:	58d2      	ldr	r2, [r2, r3]
 80200f8:	6878      	ldr	r0, [r7, #4]
 80200fa:	2340      	movs	r3, #64	@ 0x40
 80200fc:	2101      	movs	r1, #1
 80200fe:	f001 ff13 	bl	8021f28 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8020102:	2300      	movs	r3, #0
 8020104:	e000      	b.n	8020108 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8020106:	2302      	movs	r3, #2
  }
}
 8020108:	0018      	movs	r0, r3
 802010a:	46bd      	mov	sp, r7
 802010c:	b004      	add	sp, #16
 802010e:	bd80      	pop	{r7, pc}

08020110 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020110:	b580      	push	{r7, lr}
 8020112:	b084      	sub	sp, #16
 8020114:	af00      	add	r7, sp, #0
 8020116:	60f8      	str	r0, [r7, #12]
 8020118:	60b9      	str	r1, [r7, #8]
 802011a:	1dfb      	adds	r3, r7, #7
 802011c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 802011e:	68fb      	ldr	r3, [r7, #12]
 8020120:	2b00      	cmp	r3, #0
 8020122:	d101      	bne.n	8020128 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8020124:	2302      	movs	r3, #2
 8020126:	e020      	b.n	802016a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8020128:	68fa      	ldr	r2, [r7, #12]
 802012a:	23ad      	movs	r3, #173	@ 0xad
 802012c:	009b      	lsls	r3, r3, #2
 802012e:	58d3      	ldr	r3, [r2, r3]
 8020130:	2b00      	cmp	r3, #0
 8020132:	d004      	beq.n	802013e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8020134:	68fa      	ldr	r2, [r7, #12]
 8020136:	23ad      	movs	r3, #173	@ 0xad
 8020138:	009b      	lsls	r3, r3, #2
 802013a:	2100      	movs	r1, #0
 802013c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 802013e:	68bb      	ldr	r3, [r7, #8]
 8020140:	2b00      	cmp	r3, #0
 8020142:	d004      	beq.n	802014e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020144:	68fa      	ldr	r2, [r7, #12]
 8020146:	23ac      	movs	r3, #172	@ 0xac
 8020148:	009b      	lsls	r3, r3, #2
 802014a:	68b9      	ldr	r1, [r7, #8]
 802014c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802014e:	68fa      	ldr	r2, [r7, #12]
 8020150:	23a7      	movs	r3, #167	@ 0xa7
 8020152:	009b      	lsls	r3, r3, #2
 8020154:	2101      	movs	r1, #1
 8020156:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8020158:	68fb      	ldr	r3, [r7, #12]
 802015a:	1dfa      	adds	r2, r7, #7
 802015c:	7812      	ldrb	r2, [r2, #0]
 802015e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8020160:	68fb      	ldr	r3, [r7, #12]
 8020162:	0018      	movs	r0, r3
 8020164:	f001 fd0c 	bl	8021b80 <USBD_LL_Init>

  return USBD_OK;
 8020168:	2300      	movs	r3, #0
}
 802016a:	0018      	movs	r0, r3
 802016c:	46bd      	mov	sp, r7
 802016e:	b004      	add	sp, #16
 8020170:	bd80      	pop	{r7, pc}

08020172 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020172:	b580      	push	{r7, lr}
 8020174:	b084      	sub	sp, #16
 8020176:	af00      	add	r7, sp, #0
 8020178:	6078      	str	r0, [r7, #4]
 802017a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 802017c:	200f      	movs	r0, #15
 802017e:	183b      	adds	r3, r7, r0
 8020180:	2200      	movs	r2, #0
 8020182:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8020184:	683b      	ldr	r3, [r7, #0]
 8020186:	2b00      	cmp	r3, #0
 8020188:	d008      	beq.n	802019c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 802018a:	687a      	ldr	r2, [r7, #4]
 802018c:	23ad      	movs	r3, #173	@ 0xad
 802018e:	009b      	lsls	r3, r3, #2
 8020190:	6839      	ldr	r1, [r7, #0]
 8020192:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8020194:	183b      	adds	r3, r7, r0
 8020196:	2200      	movs	r2, #0
 8020198:	701a      	strb	r2, [r3, #0]
 802019a:	e003      	b.n	80201a4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 802019c:	230f      	movs	r3, #15
 802019e:	18fb      	adds	r3, r7, r3
 80201a0:	2202      	movs	r2, #2
 80201a2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80201a4:	230f      	movs	r3, #15
 80201a6:	18fb      	adds	r3, r7, r3
 80201a8:	781b      	ldrb	r3, [r3, #0]
}
 80201aa:	0018      	movs	r0, r3
 80201ac:	46bd      	mov	sp, r7
 80201ae:	b004      	add	sp, #16
 80201b0:	bd80      	pop	{r7, pc}

080201b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80201b2:	b580      	push	{r7, lr}
 80201b4:	b082      	sub	sp, #8
 80201b6:	af00      	add	r7, sp, #0
 80201b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80201ba:	687b      	ldr	r3, [r7, #4]
 80201bc:	0018      	movs	r0, r3
 80201be:	f001 fd43 	bl	8021c48 <USBD_LL_Start>

  return USBD_OK;
 80201c2:	2300      	movs	r3, #0
}
 80201c4:	0018      	movs	r0, r3
 80201c6:	46bd      	mov	sp, r7
 80201c8:	b002      	add	sp, #8
 80201ca:	bd80      	pop	{r7, pc}

080201cc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80201cc:	b580      	push	{r7, lr}
 80201ce:	b082      	sub	sp, #8
 80201d0:	af00      	add	r7, sp, #0
 80201d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80201d4:	2300      	movs	r3, #0
}
 80201d6:	0018      	movs	r0, r3
 80201d8:	46bd      	mov	sp, r7
 80201da:	b002      	add	sp, #8
 80201dc:	bd80      	pop	{r7, pc}

080201de <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80201de:	b590      	push	{r4, r7, lr}
 80201e0:	b085      	sub	sp, #20
 80201e2:	af00      	add	r7, sp, #0
 80201e4:	6078      	str	r0, [r7, #4]
 80201e6:	000a      	movs	r2, r1
 80201e8:	1cfb      	adds	r3, r7, #3
 80201ea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80201ec:	240f      	movs	r4, #15
 80201ee:	193b      	adds	r3, r7, r4
 80201f0:	2202      	movs	r2, #2
 80201f2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80201f4:	687a      	ldr	r2, [r7, #4]
 80201f6:	23ad      	movs	r3, #173	@ 0xad
 80201f8:	009b      	lsls	r3, r3, #2
 80201fa:	58d3      	ldr	r3, [r2, r3]
 80201fc:	2b00      	cmp	r3, #0
 80201fe:	d00e      	beq.n	802021e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8020200:	687a      	ldr	r2, [r7, #4]
 8020202:	23ad      	movs	r3, #173	@ 0xad
 8020204:	009b      	lsls	r3, r3, #2
 8020206:	58d3      	ldr	r3, [r2, r3]
 8020208:	681b      	ldr	r3, [r3, #0]
 802020a:	1cfa      	adds	r2, r7, #3
 802020c:	7811      	ldrb	r1, [r2, #0]
 802020e:	687a      	ldr	r2, [r7, #4]
 8020210:	0010      	movs	r0, r2
 8020212:	4798      	blx	r3
 8020214:	1e03      	subs	r3, r0, #0
 8020216:	d102      	bne.n	802021e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8020218:	193b      	adds	r3, r7, r4
 802021a:	2200      	movs	r2, #0
 802021c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 802021e:	230f      	movs	r3, #15
 8020220:	18fb      	adds	r3, r7, r3
 8020222:	781b      	ldrb	r3, [r3, #0]
}
 8020224:	0018      	movs	r0, r3
 8020226:	46bd      	mov	sp, r7
 8020228:	b005      	add	sp, #20
 802022a:	bd90      	pop	{r4, r7, pc}

0802022c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 802022c:	b580      	push	{r7, lr}
 802022e:	b082      	sub	sp, #8
 8020230:	af00      	add	r7, sp, #0
 8020232:	6078      	str	r0, [r7, #4]
 8020234:	000a      	movs	r2, r1
 8020236:	1cfb      	adds	r3, r7, #3
 8020238:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 802023a:	687a      	ldr	r2, [r7, #4]
 802023c:	23ad      	movs	r3, #173	@ 0xad
 802023e:	009b      	lsls	r3, r3, #2
 8020240:	58d3      	ldr	r3, [r2, r3]
 8020242:	685b      	ldr	r3, [r3, #4]
 8020244:	1cfa      	adds	r2, r7, #3
 8020246:	7811      	ldrb	r1, [r2, #0]
 8020248:	687a      	ldr	r2, [r7, #4]
 802024a:	0010      	movs	r0, r2
 802024c:	4798      	blx	r3

  return USBD_OK;
 802024e:	2300      	movs	r3, #0
}
 8020250:	0018      	movs	r0, r3
 8020252:	46bd      	mov	sp, r7
 8020254:	b002      	add	sp, #8
 8020256:	bd80      	pop	{r7, pc}

08020258 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8020258:	b580      	push	{r7, lr}
 802025a:	b082      	sub	sp, #8
 802025c:	af00      	add	r7, sp, #0
 802025e:	6078      	str	r0, [r7, #4]
 8020260:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020262:	687b      	ldr	r3, [r7, #4]
 8020264:	22aa      	movs	r2, #170	@ 0xaa
 8020266:	0092      	lsls	r2, r2, #2
 8020268:	4694      	mov	ip, r2
 802026a:	4463      	add	r3, ip
 802026c:	683a      	ldr	r2, [r7, #0]
 802026e:	0011      	movs	r1, r2
 8020270:	0018      	movs	r0, r3
 8020272:	f001 f810 	bl	8021296 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8020276:	687a      	ldr	r2, [r7, #4]
 8020278:	23a5      	movs	r3, #165	@ 0xa5
 802027a:	009b      	lsls	r3, r3, #2
 802027c:	2101      	movs	r1, #1
 802027e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	4a23      	ldr	r2, [pc, #140]	@ (8020310 <USBD_LL_SetupStage+0xb8>)
 8020284:	5a9b      	ldrh	r3, [r3, r2]
 8020286:	0019      	movs	r1, r3
 8020288:	687a      	ldr	r2, [r7, #4]
 802028a:	23a6      	movs	r3, #166	@ 0xa6
 802028c:	009b      	lsls	r3, r3, #2
 802028e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8020290:	687a      	ldr	r2, [r7, #4]
 8020292:	23aa      	movs	r3, #170	@ 0xaa
 8020294:	009b      	lsls	r3, r3, #2
 8020296:	5cd3      	ldrb	r3, [r2, r3]
 8020298:	001a      	movs	r2, r3
 802029a:	231f      	movs	r3, #31
 802029c:	4013      	ands	r3, r2
 802029e:	2b02      	cmp	r3, #2
 80202a0:	d019      	beq.n	80202d6 <USBD_LL_SetupStage+0x7e>
 80202a2:	d822      	bhi.n	80202ea <USBD_LL_SetupStage+0x92>
 80202a4:	2b00      	cmp	r3, #0
 80202a6:	d002      	beq.n	80202ae <USBD_LL_SetupStage+0x56>
 80202a8:	2b01      	cmp	r3, #1
 80202aa:	d00a      	beq.n	80202c2 <USBD_LL_SetupStage+0x6a>
 80202ac:	e01d      	b.n	80202ea <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80202ae:	687b      	ldr	r3, [r7, #4]
 80202b0:	22aa      	movs	r2, #170	@ 0xaa
 80202b2:	0092      	lsls	r2, r2, #2
 80202b4:	189a      	adds	r2, r3, r2
 80202b6:	687b      	ldr	r3, [r7, #4]
 80202b8:	0011      	movs	r1, r2
 80202ba:	0018      	movs	r0, r3
 80202bc:	f000 fa10 	bl	80206e0 <USBD_StdDevReq>
      break;
 80202c0:	e020      	b.n	8020304 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80202c2:	687b      	ldr	r3, [r7, #4]
 80202c4:	22aa      	movs	r2, #170	@ 0xaa
 80202c6:	0092      	lsls	r2, r2, #2
 80202c8:	189a      	adds	r2, r3, r2
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	0011      	movs	r1, r2
 80202ce:	0018      	movs	r0, r3
 80202d0:	f000 fa78 	bl	80207c4 <USBD_StdItfReq>
      break;
 80202d4:	e016      	b.n	8020304 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80202d6:	687b      	ldr	r3, [r7, #4]
 80202d8:	22aa      	movs	r2, #170	@ 0xaa
 80202da:	0092      	lsls	r2, r2, #2
 80202dc:	189a      	adds	r2, r3, r2
 80202de:	687b      	ldr	r3, [r7, #4]
 80202e0:	0011      	movs	r1, r2
 80202e2:	0018      	movs	r0, r3
 80202e4:	f000 fac5 	bl	8020872 <USBD_StdEPReq>
      break;
 80202e8:	e00c      	b.n	8020304 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80202ea:	687a      	ldr	r2, [r7, #4]
 80202ec:	23aa      	movs	r3, #170	@ 0xaa
 80202ee:	009b      	lsls	r3, r3, #2
 80202f0:	5cd3      	ldrb	r3, [r2, r3]
 80202f2:	227f      	movs	r2, #127	@ 0x7f
 80202f4:	4393      	bics	r3, r2
 80202f6:	b2da      	uxtb	r2, r3
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	0011      	movs	r1, r2
 80202fc:	0018      	movs	r0, r3
 80202fe:	f001 fd2a 	bl	8021d56 <USBD_LL_StallEP>
      break;
 8020302:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8020304:	2300      	movs	r3, #0
}
 8020306:	0018      	movs	r0, r3
 8020308:	46bd      	mov	sp, r7
 802030a:	b002      	add	sp, #8
 802030c:	bd80      	pop	{r7, pc}
 802030e:	46c0      	nop			@ (mov r8, r8)
 8020310:	000002ae 	.word	0x000002ae

08020314 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8020314:	b580      	push	{r7, lr}
 8020316:	b086      	sub	sp, #24
 8020318:	af00      	add	r7, sp, #0
 802031a:	60f8      	str	r0, [r7, #12]
 802031c:	607a      	str	r2, [r7, #4]
 802031e:	200b      	movs	r0, #11
 8020320:	183b      	adds	r3, r7, r0
 8020322:	1c0a      	adds	r2, r1, #0
 8020324:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8020326:	183b      	adds	r3, r7, r0
 8020328:	781b      	ldrb	r3, [r3, #0]
 802032a:	2b00      	cmp	r3, #0
 802032c:	d154      	bne.n	80203d8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 802032e:	68fb      	ldr	r3, [r7, #12]
 8020330:	3355      	adds	r3, #85	@ 0x55
 8020332:	33ff      	adds	r3, #255	@ 0xff
 8020334:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8020336:	68fa      	ldr	r2, [r7, #12]
 8020338:	23a5      	movs	r3, #165	@ 0xa5
 802033a:	009b      	lsls	r3, r3, #2
 802033c:	58d3      	ldr	r3, [r2, r3]
 802033e:	2b03      	cmp	r3, #3
 8020340:	d139      	bne.n	80203b6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8020342:	697b      	ldr	r3, [r7, #20]
 8020344:	68da      	ldr	r2, [r3, #12]
 8020346:	697b      	ldr	r3, [r7, #20]
 8020348:	691b      	ldr	r3, [r3, #16]
 802034a:	429a      	cmp	r2, r3
 802034c:	d919      	bls.n	8020382 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 802034e:	697b      	ldr	r3, [r7, #20]
 8020350:	68da      	ldr	r2, [r3, #12]
 8020352:	697b      	ldr	r3, [r7, #20]
 8020354:	691b      	ldr	r3, [r3, #16]
 8020356:	1ad2      	subs	r2, r2, r3
 8020358:	697b      	ldr	r3, [r7, #20]
 802035a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 802035c:	697b      	ldr	r3, [r7, #20]
 802035e:	68da      	ldr	r2, [r3, #12]
 8020360:	697b      	ldr	r3, [r7, #20]
 8020362:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8020364:	429a      	cmp	r2, r3
 8020366:	d203      	bcs.n	8020370 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020368:	697b      	ldr	r3, [r7, #20]
 802036a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 802036c:	b29b      	uxth	r3, r3
 802036e:	e002      	b.n	8020376 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020370:	697b      	ldr	r3, [r7, #20]
 8020372:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8020374:	b29b      	uxth	r3, r3
 8020376:	6879      	ldr	r1, [r7, #4]
 8020378:	68f8      	ldr	r0, [r7, #12]
 802037a:	001a      	movs	r2, r3
 802037c:	f001 f898 	bl	80214b0 <USBD_CtlContinueRx>
 8020380:	e045      	b.n	802040e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8020382:	68fa      	ldr	r2, [r7, #12]
 8020384:	23ad      	movs	r3, #173	@ 0xad
 8020386:	009b      	lsls	r3, r3, #2
 8020388:	58d3      	ldr	r3, [r2, r3]
 802038a:	691b      	ldr	r3, [r3, #16]
 802038c:	2b00      	cmp	r3, #0
 802038e:	d00d      	beq.n	80203ac <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020390:	68fa      	ldr	r2, [r7, #12]
 8020392:	23a7      	movs	r3, #167	@ 0xa7
 8020394:	009b      	lsls	r3, r3, #2
 8020396:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8020398:	2b03      	cmp	r3, #3
 802039a:	d107      	bne.n	80203ac <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 802039c:	68fa      	ldr	r2, [r7, #12]
 802039e:	23ad      	movs	r3, #173	@ 0xad
 80203a0:	009b      	lsls	r3, r3, #2
 80203a2:	58d3      	ldr	r3, [r2, r3]
 80203a4:	691b      	ldr	r3, [r3, #16]
 80203a6:	68fa      	ldr	r2, [r7, #12]
 80203a8:	0010      	movs	r0, r2
 80203aa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80203ac:	68fb      	ldr	r3, [r7, #12]
 80203ae:	0018      	movs	r0, r3
 80203b0:	f001 f891 	bl	80214d6 <USBD_CtlSendStatus>
 80203b4:	e02b      	b.n	802040e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80203b6:	68fa      	ldr	r2, [r7, #12]
 80203b8:	23a5      	movs	r3, #165	@ 0xa5
 80203ba:	009b      	lsls	r3, r3, #2
 80203bc:	58d3      	ldr	r3, [r2, r3]
 80203be:	2b05      	cmp	r3, #5
 80203c0:	d125      	bne.n	802040e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80203c2:	68fa      	ldr	r2, [r7, #12]
 80203c4:	23a5      	movs	r3, #165	@ 0xa5
 80203c6:	009b      	lsls	r3, r3, #2
 80203c8:	2100      	movs	r1, #0
 80203ca:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80203cc:	68fb      	ldr	r3, [r7, #12]
 80203ce:	2100      	movs	r1, #0
 80203d0:	0018      	movs	r0, r3
 80203d2:	f001 fcc0 	bl	8021d56 <USBD_LL_StallEP>
 80203d6:	e01a      	b.n	802040e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80203d8:	68fa      	ldr	r2, [r7, #12]
 80203da:	23ad      	movs	r3, #173	@ 0xad
 80203dc:	009b      	lsls	r3, r3, #2
 80203de:	58d3      	ldr	r3, [r2, r3]
 80203e0:	699b      	ldr	r3, [r3, #24]
 80203e2:	2b00      	cmp	r3, #0
 80203e4:	d011      	beq.n	802040a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80203e6:	68fa      	ldr	r2, [r7, #12]
 80203e8:	23a7      	movs	r3, #167	@ 0xa7
 80203ea:	009b      	lsls	r3, r3, #2
 80203ec:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80203ee:	2b03      	cmp	r3, #3
 80203f0:	d10b      	bne.n	802040a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80203f2:	68fa      	ldr	r2, [r7, #12]
 80203f4:	23ad      	movs	r3, #173	@ 0xad
 80203f6:	009b      	lsls	r3, r3, #2
 80203f8:	58d3      	ldr	r3, [r2, r3]
 80203fa:	699b      	ldr	r3, [r3, #24]
 80203fc:	220b      	movs	r2, #11
 80203fe:	18ba      	adds	r2, r7, r2
 8020400:	7811      	ldrb	r1, [r2, #0]
 8020402:	68fa      	ldr	r2, [r7, #12]
 8020404:	0010      	movs	r0, r2
 8020406:	4798      	blx	r3
 8020408:	e001      	b.n	802040e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 802040a:	2302      	movs	r3, #2
 802040c:	e000      	b.n	8020410 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 802040e:	2300      	movs	r3, #0
}
 8020410:	0018      	movs	r0, r3
 8020412:	46bd      	mov	sp, r7
 8020414:	b006      	add	sp, #24
 8020416:	bd80      	pop	{r7, pc}

08020418 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8020418:	b580      	push	{r7, lr}
 802041a:	b086      	sub	sp, #24
 802041c:	af00      	add	r7, sp, #0
 802041e:	60f8      	str	r0, [r7, #12]
 8020420:	607a      	str	r2, [r7, #4]
 8020422:	200b      	movs	r0, #11
 8020424:	183b      	adds	r3, r7, r0
 8020426:	1c0a      	adds	r2, r1, #0
 8020428:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 802042a:	183b      	adds	r3, r7, r0
 802042c:	781b      	ldrb	r3, [r3, #0]
 802042e:	2b00      	cmp	r3, #0
 8020430:	d000      	beq.n	8020434 <USBD_LL_DataInStage+0x1c>
 8020432:	e08e      	b.n	8020552 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8020434:	68fb      	ldr	r3, [r7, #12]
 8020436:	3314      	adds	r3, #20
 8020438:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802043a:	68fa      	ldr	r2, [r7, #12]
 802043c:	23a5      	movs	r3, #165	@ 0xa5
 802043e:	009b      	lsls	r3, r3, #2
 8020440:	58d3      	ldr	r3, [r2, r3]
 8020442:	2b02      	cmp	r3, #2
 8020444:	d164      	bne.n	8020510 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8020446:	697b      	ldr	r3, [r7, #20]
 8020448:	68da      	ldr	r2, [r3, #12]
 802044a:	697b      	ldr	r3, [r7, #20]
 802044c:	691b      	ldr	r3, [r3, #16]
 802044e:	429a      	cmp	r2, r3
 8020450:	d915      	bls.n	802047e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8020452:	697b      	ldr	r3, [r7, #20]
 8020454:	68da      	ldr	r2, [r3, #12]
 8020456:	697b      	ldr	r3, [r7, #20]
 8020458:	691b      	ldr	r3, [r3, #16]
 802045a:	1ad2      	subs	r2, r2, r3
 802045c:	697b      	ldr	r3, [r7, #20]
 802045e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8020460:	697b      	ldr	r3, [r7, #20]
 8020462:	68db      	ldr	r3, [r3, #12]
 8020464:	b29a      	uxth	r2, r3
 8020466:	6879      	ldr	r1, [r7, #4]
 8020468:	68fb      	ldr	r3, [r7, #12]
 802046a:	0018      	movs	r0, r3
 802046c:	f000 ffe9 	bl	8021442 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020470:	68f8      	ldr	r0, [r7, #12]
 8020472:	2300      	movs	r3, #0
 8020474:	2200      	movs	r2, #0
 8020476:	2100      	movs	r1, #0
 8020478:	f001 fd56 	bl	8021f28 <USBD_LL_PrepareReceive>
 802047c:	e059      	b.n	8020532 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 802047e:	697b      	ldr	r3, [r7, #20]
 8020480:	689a      	ldr	r2, [r3, #8]
 8020482:	697b      	ldr	r3, [r7, #20]
 8020484:	691b      	ldr	r3, [r3, #16]
 8020486:	0019      	movs	r1, r3
 8020488:	0010      	movs	r0, r2
 802048a:	f7df ff11 	bl	80002b0 <__aeabi_uidivmod>
 802048e:	1e0b      	subs	r3, r1, #0
 8020490:	d11f      	bne.n	80204d2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8020492:	697b      	ldr	r3, [r7, #20]
 8020494:	689a      	ldr	r2, [r3, #8]
 8020496:	697b      	ldr	r3, [r7, #20]
 8020498:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 802049a:	429a      	cmp	r2, r3
 802049c:	d319      	bcc.n	80204d2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 802049e:	697b      	ldr	r3, [r7, #20]
 80204a0:	689a      	ldr	r2, [r3, #8]
 80204a2:	68f9      	ldr	r1, [r7, #12]
 80204a4:	23a6      	movs	r3, #166	@ 0xa6
 80204a6:	009b      	lsls	r3, r3, #2
 80204a8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80204aa:	429a      	cmp	r2, r3
 80204ac:	d211      	bcs.n	80204d2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80204ae:	68fb      	ldr	r3, [r7, #12]
 80204b0:	2200      	movs	r2, #0
 80204b2:	2100      	movs	r1, #0
 80204b4:	0018      	movs	r0, r3
 80204b6:	f000 ffc4 	bl	8021442 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80204ba:	68fa      	ldr	r2, [r7, #12]
 80204bc:	23a6      	movs	r3, #166	@ 0xa6
 80204be:	009b      	lsls	r3, r3, #2
 80204c0:	2100      	movs	r1, #0
 80204c2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80204c4:	68f8      	ldr	r0, [r7, #12]
 80204c6:	2300      	movs	r3, #0
 80204c8:	2200      	movs	r2, #0
 80204ca:	2100      	movs	r1, #0
 80204cc:	f001 fd2c 	bl	8021f28 <USBD_LL_PrepareReceive>
 80204d0:	e02f      	b.n	8020532 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80204d2:	68fa      	ldr	r2, [r7, #12]
 80204d4:	23ad      	movs	r3, #173	@ 0xad
 80204d6:	009b      	lsls	r3, r3, #2
 80204d8:	58d3      	ldr	r3, [r2, r3]
 80204da:	68db      	ldr	r3, [r3, #12]
 80204dc:	2b00      	cmp	r3, #0
 80204de:	d00d      	beq.n	80204fc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80204e0:	68fa      	ldr	r2, [r7, #12]
 80204e2:	23a7      	movs	r3, #167	@ 0xa7
 80204e4:	009b      	lsls	r3, r3, #2
 80204e6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80204e8:	2b03      	cmp	r3, #3
 80204ea:	d107      	bne.n	80204fc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80204ec:	68fa      	ldr	r2, [r7, #12]
 80204ee:	23ad      	movs	r3, #173	@ 0xad
 80204f0:	009b      	lsls	r3, r3, #2
 80204f2:	58d3      	ldr	r3, [r2, r3]
 80204f4:	68db      	ldr	r3, [r3, #12]
 80204f6:	68fa      	ldr	r2, [r7, #12]
 80204f8:	0010      	movs	r0, r2
 80204fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80204fc:	68fb      	ldr	r3, [r7, #12]
 80204fe:	2180      	movs	r1, #128	@ 0x80
 8020500:	0018      	movs	r0, r3
 8020502:	f001 fc28 	bl	8021d56 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8020506:	68fb      	ldr	r3, [r7, #12]
 8020508:	0018      	movs	r0, r3
 802050a:	f000 fff8 	bl	80214fe <USBD_CtlReceiveStatus>
 802050e:	e010      	b.n	8020532 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8020510:	68fa      	ldr	r2, [r7, #12]
 8020512:	23a5      	movs	r3, #165	@ 0xa5
 8020514:	009b      	lsls	r3, r3, #2
 8020516:	58d3      	ldr	r3, [r2, r3]
 8020518:	2b04      	cmp	r3, #4
 802051a:	d005      	beq.n	8020528 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 802051c:	68fa      	ldr	r2, [r7, #12]
 802051e:	23a5      	movs	r3, #165	@ 0xa5
 8020520:	009b      	lsls	r3, r3, #2
 8020522:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8020524:	2b00      	cmp	r3, #0
 8020526:	d104      	bne.n	8020532 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8020528:	68fb      	ldr	r3, [r7, #12]
 802052a:	2180      	movs	r1, #128	@ 0x80
 802052c:	0018      	movs	r0, r3
 802052e:	f001 fc12 	bl	8021d56 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8020532:	68fa      	ldr	r2, [r7, #12]
 8020534:	23a8      	movs	r3, #168	@ 0xa8
 8020536:	009b      	lsls	r3, r3, #2
 8020538:	5cd3      	ldrb	r3, [r2, r3]
 802053a:	2b01      	cmp	r3, #1
 802053c:	d124      	bne.n	8020588 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 802053e:	68fb      	ldr	r3, [r7, #12]
 8020540:	0018      	movs	r0, r3
 8020542:	f7ff fe43 	bl	80201cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8020546:	68fa      	ldr	r2, [r7, #12]
 8020548:	23a8      	movs	r3, #168	@ 0xa8
 802054a:	009b      	lsls	r3, r3, #2
 802054c:	2100      	movs	r1, #0
 802054e:	54d1      	strb	r1, [r2, r3]
 8020550:	e01a      	b.n	8020588 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8020552:	68fa      	ldr	r2, [r7, #12]
 8020554:	23ad      	movs	r3, #173	@ 0xad
 8020556:	009b      	lsls	r3, r3, #2
 8020558:	58d3      	ldr	r3, [r2, r3]
 802055a:	695b      	ldr	r3, [r3, #20]
 802055c:	2b00      	cmp	r3, #0
 802055e:	d011      	beq.n	8020584 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020560:	68fa      	ldr	r2, [r7, #12]
 8020562:	23a7      	movs	r3, #167	@ 0xa7
 8020564:	009b      	lsls	r3, r3, #2
 8020566:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8020568:	2b03      	cmp	r3, #3
 802056a:	d10b      	bne.n	8020584 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 802056c:	68fa      	ldr	r2, [r7, #12]
 802056e:	23ad      	movs	r3, #173	@ 0xad
 8020570:	009b      	lsls	r3, r3, #2
 8020572:	58d3      	ldr	r3, [r2, r3]
 8020574:	695b      	ldr	r3, [r3, #20]
 8020576:	220b      	movs	r2, #11
 8020578:	18ba      	adds	r2, r7, r2
 802057a:	7811      	ldrb	r1, [r2, #0]
 802057c:	68fa      	ldr	r2, [r7, #12]
 802057e:	0010      	movs	r0, r2
 8020580:	4798      	blx	r3
 8020582:	e001      	b.n	8020588 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8020584:	2302      	movs	r3, #2
 8020586:	e000      	b.n	802058a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8020588:	2300      	movs	r3, #0
}
 802058a:	0018      	movs	r0, r3
 802058c:	46bd      	mov	sp, r7
 802058e:	b006      	add	sp, #24
 8020590:	bd80      	pop	{r7, pc}

08020592 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8020592:	b580      	push	{r7, lr}
 8020594:	b082      	sub	sp, #8
 8020596:	af00      	add	r7, sp, #0
 8020598:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802059a:	6878      	ldr	r0, [r7, #4]
 802059c:	2340      	movs	r3, #64	@ 0x40
 802059e:	2200      	movs	r2, #0
 80205a0:	2100      	movs	r1, #0
 80205a2:	f001 fb76 	bl	8021c92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80205a6:	687a      	ldr	r2, [r7, #4]
 80205a8:	23ac      	movs	r3, #172	@ 0xac
 80205aa:	005b      	lsls	r3, r3, #1
 80205ac:	2101      	movs	r1, #1
 80205ae:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80205b0:	687a      	ldr	r2, [r7, #4]
 80205b2:	23b2      	movs	r3, #178	@ 0xb2
 80205b4:	005b      	lsls	r3, r3, #1
 80205b6:	2140      	movs	r1, #64	@ 0x40
 80205b8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80205ba:	6878      	ldr	r0, [r7, #4]
 80205bc:	2340      	movs	r3, #64	@ 0x40
 80205be:	2200      	movs	r2, #0
 80205c0:	2180      	movs	r1, #128	@ 0x80
 80205c2:	f001 fb66 	bl	8021c92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80205c6:	687b      	ldr	r3, [r7, #4]
 80205c8:	2201      	movs	r2, #1
 80205ca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80205cc:	687b      	ldr	r3, [r7, #4]
 80205ce:	2240      	movs	r2, #64	@ 0x40
 80205d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80205d2:	687a      	ldr	r2, [r7, #4]
 80205d4:	23a7      	movs	r3, #167	@ 0xa7
 80205d6:	009b      	lsls	r3, r3, #2
 80205d8:	2101      	movs	r1, #1
 80205da:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80205dc:	687a      	ldr	r2, [r7, #4]
 80205de:	23a5      	movs	r3, #165	@ 0xa5
 80205e0:	009b      	lsls	r3, r3, #2
 80205e2:	2100      	movs	r1, #0
 80205e4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80205e6:	687b      	ldr	r3, [r7, #4]
 80205e8:	2200      	movs	r2, #0
 80205ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80205ec:	687a      	ldr	r2, [r7, #4]
 80205ee:	23a9      	movs	r3, #169	@ 0xa9
 80205f0:	009b      	lsls	r3, r3, #2
 80205f2:	2100      	movs	r1, #0
 80205f4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80205f6:	687a      	ldr	r2, [r7, #4]
 80205f8:	23ae      	movs	r3, #174	@ 0xae
 80205fa:	009b      	lsls	r3, r3, #2
 80205fc:	58d3      	ldr	r3, [r2, r3]
 80205fe:	2b00      	cmp	r3, #0
 8020600:	d00a      	beq.n	8020618 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8020602:	687a      	ldr	r2, [r7, #4]
 8020604:	23ad      	movs	r3, #173	@ 0xad
 8020606:	009b      	lsls	r3, r3, #2
 8020608:	58d3      	ldr	r3, [r2, r3]
 802060a:	685a      	ldr	r2, [r3, #4]
 802060c:	687b      	ldr	r3, [r7, #4]
 802060e:	685b      	ldr	r3, [r3, #4]
 8020610:	b2d9      	uxtb	r1, r3
 8020612:	687b      	ldr	r3, [r7, #4]
 8020614:	0018      	movs	r0, r3
 8020616:	4790      	blx	r2
  }

  return USBD_OK;
 8020618:	2300      	movs	r3, #0
}
 802061a:	0018      	movs	r0, r3
 802061c:	46bd      	mov	sp, r7
 802061e:	b002      	add	sp, #8
 8020620:	bd80      	pop	{r7, pc}

08020622 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8020622:	b580      	push	{r7, lr}
 8020624:	b082      	sub	sp, #8
 8020626:	af00      	add	r7, sp, #0
 8020628:	6078      	str	r0, [r7, #4]
 802062a:	000a      	movs	r2, r1
 802062c:	1cfb      	adds	r3, r7, #3
 802062e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8020630:	687b      	ldr	r3, [r7, #4]
 8020632:	1cfa      	adds	r2, r7, #3
 8020634:	7812      	ldrb	r2, [r2, #0]
 8020636:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8020638:	2300      	movs	r3, #0
}
 802063a:	0018      	movs	r0, r3
 802063c:	46bd      	mov	sp, r7
 802063e:	b002      	add	sp, #8
 8020640:	bd80      	pop	{r7, pc}
	...

08020644 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8020644:	b580      	push	{r7, lr}
 8020646:	b082      	sub	sp, #8
 8020648:	af00      	add	r7, sp, #0
 802064a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 802064c:	687a      	ldr	r2, [r7, #4]
 802064e:	23a7      	movs	r3, #167	@ 0xa7
 8020650:	009b      	lsls	r3, r3, #2
 8020652:	5cd1      	ldrb	r1, [r2, r3]
 8020654:	687b      	ldr	r3, [r7, #4]
 8020656:	4a06      	ldr	r2, [pc, #24]	@ (8020670 <USBD_LL_Suspend+0x2c>)
 8020658:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 802065a:	687a      	ldr	r2, [r7, #4]
 802065c:	23a7      	movs	r3, #167	@ 0xa7
 802065e:	009b      	lsls	r3, r3, #2
 8020660:	2104      	movs	r1, #4
 8020662:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8020664:	2300      	movs	r3, #0
}
 8020666:	0018      	movs	r0, r3
 8020668:	46bd      	mov	sp, r7
 802066a:	b002      	add	sp, #8
 802066c:	bd80      	pop	{r7, pc}
 802066e:	46c0      	nop			@ (mov r8, r8)
 8020670:	0000029d 	.word	0x0000029d

08020674 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8020674:	b580      	push	{r7, lr}
 8020676:	b082      	sub	sp, #8
 8020678:	af00      	add	r7, sp, #0
 802067a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 802067c:	687a      	ldr	r2, [r7, #4]
 802067e:	23a7      	movs	r3, #167	@ 0xa7
 8020680:	009b      	lsls	r3, r3, #2
 8020682:	5cd3      	ldrb	r3, [r2, r3]
 8020684:	2b04      	cmp	r3, #4
 8020686:	d106      	bne.n	8020696 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8020688:	687b      	ldr	r3, [r7, #4]
 802068a:	4a05      	ldr	r2, [pc, #20]	@ (80206a0 <USBD_LL_Resume+0x2c>)
 802068c:	5c99      	ldrb	r1, [r3, r2]
 802068e:	687a      	ldr	r2, [r7, #4]
 8020690:	23a7      	movs	r3, #167	@ 0xa7
 8020692:	009b      	lsls	r3, r3, #2
 8020694:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8020696:	2300      	movs	r3, #0
}
 8020698:	0018      	movs	r0, r3
 802069a:	46bd      	mov	sp, r7
 802069c:	b002      	add	sp, #8
 802069e:	bd80      	pop	{r7, pc}
 80206a0:	0000029d 	.word	0x0000029d

080206a4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80206a4:	b580      	push	{r7, lr}
 80206a6:	b082      	sub	sp, #8
 80206a8:	af00      	add	r7, sp, #0
 80206aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80206ac:	687a      	ldr	r2, [r7, #4]
 80206ae:	23a7      	movs	r3, #167	@ 0xa7
 80206b0:	009b      	lsls	r3, r3, #2
 80206b2:	5cd3      	ldrb	r3, [r2, r3]
 80206b4:	2b03      	cmp	r3, #3
 80206b6:	d10e      	bne.n	80206d6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80206b8:	687a      	ldr	r2, [r7, #4]
 80206ba:	23ad      	movs	r3, #173	@ 0xad
 80206bc:	009b      	lsls	r3, r3, #2
 80206be:	58d3      	ldr	r3, [r2, r3]
 80206c0:	69db      	ldr	r3, [r3, #28]
 80206c2:	2b00      	cmp	r3, #0
 80206c4:	d007      	beq.n	80206d6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80206c6:	687a      	ldr	r2, [r7, #4]
 80206c8:	23ad      	movs	r3, #173	@ 0xad
 80206ca:	009b      	lsls	r3, r3, #2
 80206cc:	58d3      	ldr	r3, [r2, r3]
 80206ce:	69db      	ldr	r3, [r3, #28]
 80206d0:	687a      	ldr	r2, [r7, #4]
 80206d2:	0010      	movs	r0, r2
 80206d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80206d6:	2300      	movs	r3, #0
}
 80206d8:	0018      	movs	r0, r3
 80206da:	46bd      	mov	sp, r7
 80206dc:	b002      	add	sp, #8
 80206de:	bd80      	pop	{r7, pc}

080206e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80206e0:	b580      	push	{r7, lr}
 80206e2:	b084      	sub	sp, #16
 80206e4:	af00      	add	r7, sp, #0
 80206e6:	6078      	str	r0, [r7, #4]
 80206e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80206ea:	230f      	movs	r3, #15
 80206ec:	18fb      	adds	r3, r7, r3
 80206ee:	2200      	movs	r2, #0
 80206f0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80206f2:	683b      	ldr	r3, [r7, #0]
 80206f4:	781b      	ldrb	r3, [r3, #0]
 80206f6:	001a      	movs	r2, r3
 80206f8:	2360      	movs	r3, #96	@ 0x60
 80206fa:	4013      	ands	r3, r2
 80206fc:	2b40      	cmp	r3, #64	@ 0x40
 80206fe:	d004      	beq.n	802070a <USBD_StdDevReq+0x2a>
 8020700:	d84f      	bhi.n	80207a2 <USBD_StdDevReq+0xc2>
 8020702:	2b00      	cmp	r3, #0
 8020704:	d00b      	beq.n	802071e <USBD_StdDevReq+0x3e>
 8020706:	2b20      	cmp	r3, #32
 8020708:	d14b      	bne.n	80207a2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 802070a:	687a      	ldr	r2, [r7, #4]
 802070c:	23ad      	movs	r3, #173	@ 0xad
 802070e:	009b      	lsls	r3, r3, #2
 8020710:	58d3      	ldr	r3, [r2, r3]
 8020712:	689b      	ldr	r3, [r3, #8]
 8020714:	6839      	ldr	r1, [r7, #0]
 8020716:	687a      	ldr	r2, [r7, #4]
 8020718:	0010      	movs	r0, r2
 802071a:	4798      	blx	r3
      break;
 802071c:	e048      	b.n	80207b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802071e:	683b      	ldr	r3, [r7, #0]
 8020720:	785b      	ldrb	r3, [r3, #1]
 8020722:	2b09      	cmp	r3, #9
 8020724:	d835      	bhi.n	8020792 <USBD_StdDevReq+0xb2>
 8020726:	009a      	lsls	r2, r3, #2
 8020728:	4b25      	ldr	r3, [pc, #148]	@ (80207c0 <USBD_StdDevReq+0xe0>)
 802072a:	18d3      	adds	r3, r2, r3
 802072c:	681b      	ldr	r3, [r3, #0]
 802072e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8020730:	683a      	ldr	r2, [r7, #0]
 8020732:	687b      	ldr	r3, [r7, #4]
 8020734:	0011      	movs	r1, r2
 8020736:	0018      	movs	r0, r3
 8020738:	f000 fa52 	bl	8020be0 <USBD_GetDescriptor>
          break;
 802073c:	e030      	b.n	80207a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802073e:	683a      	ldr	r2, [r7, #0]
 8020740:	687b      	ldr	r3, [r7, #4]
 8020742:	0011      	movs	r1, r2
 8020744:	0018      	movs	r0, r3
 8020746:	f000 fbfd 	bl	8020f44 <USBD_SetAddress>
          break;
 802074a:	e029      	b.n	80207a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 802074c:	683a      	ldr	r2, [r7, #0]
 802074e:	687b      	ldr	r3, [r7, #4]
 8020750:	0011      	movs	r1, r2
 8020752:	0018      	movs	r0, r3
 8020754:	f000 fc4a 	bl	8020fec <USBD_SetConfig>
          break;
 8020758:	e022      	b.n	80207a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 802075a:	683a      	ldr	r2, [r7, #0]
 802075c:	687b      	ldr	r3, [r7, #4]
 802075e:	0011      	movs	r1, r2
 8020760:	0018      	movs	r0, r3
 8020762:	f000 fce7 	bl	8021134 <USBD_GetConfig>
          break;
 8020766:	e01b      	b.n	80207a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8020768:	683a      	ldr	r2, [r7, #0]
 802076a:	687b      	ldr	r3, [r7, #4]
 802076c:	0011      	movs	r1, r2
 802076e:	0018      	movs	r0, r3
 8020770:	f000 fd1b 	bl	80211aa <USBD_GetStatus>
          break;
 8020774:	e014      	b.n	80207a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8020776:	683a      	ldr	r2, [r7, #0]
 8020778:	687b      	ldr	r3, [r7, #4]
 802077a:	0011      	movs	r1, r2
 802077c:	0018      	movs	r0, r3
 802077e:	f000 fd4e 	bl	802121e <USBD_SetFeature>
          break;
 8020782:	e00d      	b.n	80207a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8020784:	683a      	ldr	r2, [r7, #0]
 8020786:	687b      	ldr	r3, [r7, #4]
 8020788:	0011      	movs	r1, r2
 802078a:	0018      	movs	r0, r3
 802078c:	f000 fd5d 	bl	802124a <USBD_ClrFeature>
          break;
 8020790:	e006      	b.n	80207a0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8020792:	683a      	ldr	r2, [r7, #0]
 8020794:	687b      	ldr	r3, [r7, #4]
 8020796:	0011      	movs	r1, r2
 8020798:	0018      	movs	r0, r3
 802079a:	f000 fdb4 	bl	8021306 <USBD_CtlError>
          break;
 802079e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80207a0:	e006      	b.n	80207b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80207a2:	683a      	ldr	r2, [r7, #0]
 80207a4:	687b      	ldr	r3, [r7, #4]
 80207a6:	0011      	movs	r1, r2
 80207a8:	0018      	movs	r0, r3
 80207aa:	f000 fdac 	bl	8021306 <USBD_CtlError>
      break;
 80207ae:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80207b0:	230f      	movs	r3, #15
 80207b2:	18fb      	adds	r3, r7, r3
 80207b4:	781b      	ldrb	r3, [r3, #0]
}
 80207b6:	0018      	movs	r0, r3
 80207b8:	46bd      	mov	sp, r7
 80207ba:	b004      	add	sp, #16
 80207bc:	bd80      	pop	{r7, pc}
 80207be:	46c0      	nop			@ (mov r8, r8)
 80207c0:	0802ccf8 	.word	0x0802ccf8

080207c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80207c4:	b5b0      	push	{r4, r5, r7, lr}
 80207c6:	b084      	sub	sp, #16
 80207c8:	af00      	add	r7, sp, #0
 80207ca:	6078      	str	r0, [r7, #4]
 80207cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80207ce:	230f      	movs	r3, #15
 80207d0:	18fb      	adds	r3, r7, r3
 80207d2:	2200      	movs	r2, #0
 80207d4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80207d6:	683b      	ldr	r3, [r7, #0]
 80207d8:	781b      	ldrb	r3, [r3, #0]
 80207da:	001a      	movs	r2, r3
 80207dc:	2360      	movs	r3, #96	@ 0x60
 80207de:	4013      	ands	r3, r2
 80207e0:	2b40      	cmp	r3, #64	@ 0x40
 80207e2:	d004      	beq.n	80207ee <USBD_StdItfReq+0x2a>
 80207e4:	d839      	bhi.n	802085a <USBD_StdItfReq+0x96>
 80207e6:	2b00      	cmp	r3, #0
 80207e8:	d001      	beq.n	80207ee <USBD_StdItfReq+0x2a>
 80207ea:	2b20      	cmp	r3, #32
 80207ec:	d135      	bne.n	802085a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80207ee:	687a      	ldr	r2, [r7, #4]
 80207f0:	23a7      	movs	r3, #167	@ 0xa7
 80207f2:	009b      	lsls	r3, r3, #2
 80207f4:	5cd3      	ldrb	r3, [r2, r3]
 80207f6:	3b01      	subs	r3, #1
 80207f8:	2b02      	cmp	r3, #2
 80207fa:	d825      	bhi.n	8020848 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80207fc:	683b      	ldr	r3, [r7, #0]
 80207fe:	889b      	ldrh	r3, [r3, #4]
 8020800:	b2db      	uxtb	r3, r3
 8020802:	2b01      	cmp	r3, #1
 8020804:	d819      	bhi.n	802083a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8020806:	687a      	ldr	r2, [r7, #4]
 8020808:	23ad      	movs	r3, #173	@ 0xad
 802080a:	009b      	lsls	r3, r3, #2
 802080c:	58d3      	ldr	r3, [r2, r3]
 802080e:	689b      	ldr	r3, [r3, #8]
 8020810:	250f      	movs	r5, #15
 8020812:	197c      	adds	r4, r7, r5
 8020814:	6839      	ldr	r1, [r7, #0]
 8020816:	687a      	ldr	r2, [r7, #4]
 8020818:	0010      	movs	r0, r2
 802081a:	4798      	blx	r3
 802081c:	0003      	movs	r3, r0
 802081e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8020820:	683b      	ldr	r3, [r7, #0]
 8020822:	88db      	ldrh	r3, [r3, #6]
 8020824:	2b00      	cmp	r3, #0
 8020826:	d116      	bne.n	8020856 <USBD_StdItfReq+0x92>
 8020828:	197b      	adds	r3, r7, r5
 802082a:	781b      	ldrb	r3, [r3, #0]
 802082c:	2b00      	cmp	r3, #0
 802082e:	d112      	bne.n	8020856 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8020830:	687b      	ldr	r3, [r7, #4]
 8020832:	0018      	movs	r0, r3
 8020834:	f000 fe4f 	bl	80214d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8020838:	e00d      	b.n	8020856 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 802083a:	683a      	ldr	r2, [r7, #0]
 802083c:	687b      	ldr	r3, [r7, #4]
 802083e:	0011      	movs	r1, r2
 8020840:	0018      	movs	r0, r3
 8020842:	f000 fd60 	bl	8021306 <USBD_CtlError>
          break;
 8020846:	e006      	b.n	8020856 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8020848:	683a      	ldr	r2, [r7, #0]
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	0011      	movs	r1, r2
 802084e:	0018      	movs	r0, r3
 8020850:	f000 fd59 	bl	8021306 <USBD_CtlError>
          break;
 8020854:	e000      	b.n	8020858 <USBD_StdItfReq+0x94>
          break;
 8020856:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8020858:	e006      	b.n	8020868 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 802085a:	683a      	ldr	r2, [r7, #0]
 802085c:	687b      	ldr	r3, [r7, #4]
 802085e:	0011      	movs	r1, r2
 8020860:	0018      	movs	r0, r3
 8020862:	f000 fd50 	bl	8021306 <USBD_CtlError>
      break;
 8020866:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8020868:	2300      	movs	r3, #0
}
 802086a:	0018      	movs	r0, r3
 802086c:	46bd      	mov	sp, r7
 802086e:	b004      	add	sp, #16
 8020870:	bdb0      	pop	{r4, r5, r7, pc}

08020872 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8020872:	b5b0      	push	{r4, r5, r7, lr}
 8020874:	b084      	sub	sp, #16
 8020876:	af00      	add	r7, sp, #0
 8020878:	6078      	str	r0, [r7, #4]
 802087a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 802087c:	230f      	movs	r3, #15
 802087e:	18fb      	adds	r3, r7, r3
 8020880:	2200      	movs	r2, #0
 8020882:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8020884:	683b      	ldr	r3, [r7, #0]
 8020886:	889a      	ldrh	r2, [r3, #4]
 8020888:	230e      	movs	r3, #14
 802088a:	18fb      	adds	r3, r7, r3
 802088c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802088e:	683b      	ldr	r3, [r7, #0]
 8020890:	781b      	ldrb	r3, [r3, #0]
 8020892:	001a      	movs	r2, r3
 8020894:	2360      	movs	r3, #96	@ 0x60
 8020896:	4013      	ands	r3, r2
 8020898:	2b40      	cmp	r3, #64	@ 0x40
 802089a:	d006      	beq.n	80208aa <USBD_StdEPReq+0x38>
 802089c:	d900      	bls.n	80208a0 <USBD_StdEPReq+0x2e>
 802089e:	e190      	b.n	8020bc2 <USBD_StdEPReq+0x350>
 80208a0:	2b00      	cmp	r3, #0
 80208a2:	d00c      	beq.n	80208be <USBD_StdEPReq+0x4c>
 80208a4:	2b20      	cmp	r3, #32
 80208a6:	d000      	beq.n	80208aa <USBD_StdEPReq+0x38>
 80208a8:	e18b      	b.n	8020bc2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80208aa:	687a      	ldr	r2, [r7, #4]
 80208ac:	23ad      	movs	r3, #173	@ 0xad
 80208ae:	009b      	lsls	r3, r3, #2
 80208b0:	58d3      	ldr	r3, [r2, r3]
 80208b2:	689b      	ldr	r3, [r3, #8]
 80208b4:	6839      	ldr	r1, [r7, #0]
 80208b6:	687a      	ldr	r2, [r7, #4]
 80208b8:	0010      	movs	r0, r2
 80208ba:	4798      	blx	r3
      break;
 80208bc:	e188      	b.n	8020bd0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80208be:	683b      	ldr	r3, [r7, #0]
 80208c0:	781b      	ldrb	r3, [r3, #0]
 80208c2:	001a      	movs	r2, r3
 80208c4:	2360      	movs	r3, #96	@ 0x60
 80208c6:	4013      	ands	r3, r2
 80208c8:	2b20      	cmp	r3, #32
 80208ca:	d10f      	bne.n	80208ec <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80208cc:	687a      	ldr	r2, [r7, #4]
 80208ce:	23ad      	movs	r3, #173	@ 0xad
 80208d0:	009b      	lsls	r3, r3, #2
 80208d2:	58d3      	ldr	r3, [r2, r3]
 80208d4:	689b      	ldr	r3, [r3, #8]
 80208d6:	250f      	movs	r5, #15
 80208d8:	197c      	adds	r4, r7, r5
 80208da:	6839      	ldr	r1, [r7, #0]
 80208dc:	687a      	ldr	r2, [r7, #4]
 80208de:	0010      	movs	r0, r2
 80208e0:	4798      	blx	r3
 80208e2:	0003      	movs	r3, r0
 80208e4:	7023      	strb	r3, [r4, #0]

        return ret;
 80208e6:	197b      	adds	r3, r7, r5
 80208e8:	781b      	ldrb	r3, [r3, #0]
 80208ea:	e174      	b.n	8020bd6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80208ec:	683b      	ldr	r3, [r7, #0]
 80208ee:	785b      	ldrb	r3, [r3, #1]
 80208f0:	2b03      	cmp	r3, #3
 80208f2:	d007      	beq.n	8020904 <USBD_StdEPReq+0x92>
 80208f4:	dd00      	ble.n	80208f8 <USBD_StdEPReq+0x86>
 80208f6:	e15c      	b.n	8020bb2 <USBD_StdEPReq+0x340>
 80208f8:	2b00      	cmp	r3, #0
 80208fa:	d100      	bne.n	80208fe <USBD_StdEPReq+0x8c>
 80208fc:	e092      	b.n	8020a24 <USBD_StdEPReq+0x1b2>
 80208fe:	2b01      	cmp	r3, #1
 8020900:	d04b      	beq.n	802099a <USBD_StdEPReq+0x128>
 8020902:	e156      	b.n	8020bb2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8020904:	687a      	ldr	r2, [r7, #4]
 8020906:	23a7      	movs	r3, #167	@ 0xa7
 8020908:	009b      	lsls	r3, r3, #2
 802090a:	5cd3      	ldrb	r3, [r2, r3]
 802090c:	2b02      	cmp	r3, #2
 802090e:	d002      	beq.n	8020916 <USBD_StdEPReq+0xa4>
 8020910:	2b03      	cmp	r3, #3
 8020912:	d01d      	beq.n	8020950 <USBD_StdEPReq+0xde>
 8020914:	e039      	b.n	802098a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8020916:	220e      	movs	r2, #14
 8020918:	18bb      	adds	r3, r7, r2
 802091a:	781b      	ldrb	r3, [r3, #0]
 802091c:	2b00      	cmp	r3, #0
 802091e:	d010      	beq.n	8020942 <USBD_StdEPReq+0xd0>
 8020920:	18bb      	adds	r3, r7, r2
 8020922:	781b      	ldrb	r3, [r3, #0]
 8020924:	2b80      	cmp	r3, #128	@ 0x80
 8020926:	d00c      	beq.n	8020942 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8020928:	18bb      	adds	r3, r7, r2
 802092a:	781a      	ldrb	r2, [r3, #0]
 802092c:	687b      	ldr	r3, [r7, #4]
 802092e:	0011      	movs	r1, r2
 8020930:	0018      	movs	r0, r3
 8020932:	f001 fa10 	bl	8021d56 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	2180      	movs	r1, #128	@ 0x80
 802093a:	0018      	movs	r0, r3
 802093c:	f001 fa0b 	bl	8021d56 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8020940:	e02a      	b.n	8020998 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8020942:	683a      	ldr	r2, [r7, #0]
 8020944:	687b      	ldr	r3, [r7, #4]
 8020946:	0011      	movs	r1, r2
 8020948:	0018      	movs	r0, r3
 802094a:	f000 fcdc 	bl	8021306 <USBD_CtlError>
              break;
 802094e:	e023      	b.n	8020998 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8020950:	683b      	ldr	r3, [r7, #0]
 8020952:	885b      	ldrh	r3, [r3, #2]
 8020954:	2b00      	cmp	r3, #0
 8020956:	d113      	bne.n	8020980 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8020958:	220e      	movs	r2, #14
 802095a:	18bb      	adds	r3, r7, r2
 802095c:	781b      	ldrb	r3, [r3, #0]
 802095e:	2b00      	cmp	r3, #0
 8020960:	d00e      	beq.n	8020980 <USBD_StdEPReq+0x10e>
 8020962:	18bb      	adds	r3, r7, r2
 8020964:	781b      	ldrb	r3, [r3, #0]
 8020966:	2b80      	cmp	r3, #128	@ 0x80
 8020968:	d00a      	beq.n	8020980 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 802096a:	683b      	ldr	r3, [r7, #0]
 802096c:	88db      	ldrh	r3, [r3, #6]
 802096e:	2b00      	cmp	r3, #0
 8020970:	d106      	bne.n	8020980 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8020972:	18bb      	adds	r3, r7, r2
 8020974:	781a      	ldrb	r2, [r3, #0]
 8020976:	687b      	ldr	r3, [r7, #4]
 8020978:	0011      	movs	r1, r2
 802097a:	0018      	movs	r0, r3
 802097c:	f001 f9eb 	bl	8021d56 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8020980:	687b      	ldr	r3, [r7, #4]
 8020982:	0018      	movs	r0, r3
 8020984:	f000 fda7 	bl	80214d6 <USBD_CtlSendStatus>

              break;
 8020988:	e006      	b.n	8020998 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 802098a:	683a      	ldr	r2, [r7, #0]
 802098c:	687b      	ldr	r3, [r7, #4]
 802098e:	0011      	movs	r1, r2
 8020990:	0018      	movs	r0, r3
 8020992:	f000 fcb8 	bl	8021306 <USBD_CtlError>
              break;
 8020996:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8020998:	e112      	b.n	8020bc0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802099a:	687a      	ldr	r2, [r7, #4]
 802099c:	23a7      	movs	r3, #167	@ 0xa7
 802099e:	009b      	lsls	r3, r3, #2
 80209a0:	5cd3      	ldrb	r3, [r2, r3]
 80209a2:	2b02      	cmp	r3, #2
 80209a4:	d002      	beq.n	80209ac <USBD_StdEPReq+0x13a>
 80209a6:	2b03      	cmp	r3, #3
 80209a8:	d01d      	beq.n	80209e6 <USBD_StdEPReq+0x174>
 80209aa:	e032      	b.n	8020a12 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80209ac:	220e      	movs	r2, #14
 80209ae:	18bb      	adds	r3, r7, r2
 80209b0:	781b      	ldrb	r3, [r3, #0]
 80209b2:	2b00      	cmp	r3, #0
 80209b4:	d010      	beq.n	80209d8 <USBD_StdEPReq+0x166>
 80209b6:	18bb      	adds	r3, r7, r2
 80209b8:	781b      	ldrb	r3, [r3, #0]
 80209ba:	2b80      	cmp	r3, #128	@ 0x80
 80209bc:	d00c      	beq.n	80209d8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80209be:	18bb      	adds	r3, r7, r2
 80209c0:	781a      	ldrb	r2, [r3, #0]
 80209c2:	687b      	ldr	r3, [r7, #4]
 80209c4:	0011      	movs	r1, r2
 80209c6:	0018      	movs	r0, r3
 80209c8:	f001 f9c5 	bl	8021d56 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80209cc:	687b      	ldr	r3, [r7, #4]
 80209ce:	2180      	movs	r1, #128	@ 0x80
 80209d0:	0018      	movs	r0, r3
 80209d2:	f001 f9c0 	bl	8021d56 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80209d6:	e024      	b.n	8020a22 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80209d8:	683a      	ldr	r2, [r7, #0]
 80209da:	687b      	ldr	r3, [r7, #4]
 80209dc:	0011      	movs	r1, r2
 80209de:	0018      	movs	r0, r3
 80209e0:	f000 fc91 	bl	8021306 <USBD_CtlError>
              break;
 80209e4:	e01d      	b.n	8020a22 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80209e6:	683b      	ldr	r3, [r7, #0]
 80209e8:	885b      	ldrh	r3, [r3, #2]
 80209ea:	2b00      	cmp	r3, #0
 80209ec:	d118      	bne.n	8020a20 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80209ee:	210e      	movs	r1, #14
 80209f0:	187b      	adds	r3, r7, r1
 80209f2:	781b      	ldrb	r3, [r3, #0]
 80209f4:	227f      	movs	r2, #127	@ 0x7f
 80209f6:	4013      	ands	r3, r2
 80209f8:	d006      	beq.n	8020a08 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80209fa:	187b      	adds	r3, r7, r1
 80209fc:	781a      	ldrb	r2, [r3, #0]
 80209fe:	687b      	ldr	r3, [r7, #4]
 8020a00:	0011      	movs	r1, r2
 8020a02:	0018      	movs	r0, r3
 8020a04:	f001 f9d2 	bl	8021dac <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8020a08:	687b      	ldr	r3, [r7, #4]
 8020a0a:	0018      	movs	r0, r3
 8020a0c:	f000 fd63 	bl	80214d6 <USBD_CtlSendStatus>
              }
              break;
 8020a10:	e006      	b.n	8020a20 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8020a12:	683a      	ldr	r2, [r7, #0]
 8020a14:	687b      	ldr	r3, [r7, #4]
 8020a16:	0011      	movs	r1, r2
 8020a18:	0018      	movs	r0, r3
 8020a1a:	f000 fc74 	bl	8021306 <USBD_CtlError>
              break;
 8020a1e:	e000      	b.n	8020a22 <USBD_StdEPReq+0x1b0>
              break;
 8020a20:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8020a22:	e0cd      	b.n	8020bc0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8020a24:	687a      	ldr	r2, [r7, #4]
 8020a26:	23a7      	movs	r3, #167	@ 0xa7
 8020a28:	009b      	lsls	r3, r3, #2
 8020a2a:	5cd3      	ldrb	r3, [r2, r3]
 8020a2c:	2b02      	cmp	r3, #2
 8020a2e:	d002      	beq.n	8020a36 <USBD_StdEPReq+0x1c4>
 8020a30:	2b03      	cmp	r3, #3
 8020a32:	d03c      	beq.n	8020aae <USBD_StdEPReq+0x23c>
 8020a34:	e0b5      	b.n	8020ba2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8020a36:	220e      	movs	r2, #14
 8020a38:	18bb      	adds	r3, r7, r2
 8020a3a:	781b      	ldrb	r3, [r3, #0]
 8020a3c:	2b00      	cmp	r3, #0
 8020a3e:	d00a      	beq.n	8020a56 <USBD_StdEPReq+0x1e4>
 8020a40:	18bb      	adds	r3, r7, r2
 8020a42:	781b      	ldrb	r3, [r3, #0]
 8020a44:	2b80      	cmp	r3, #128	@ 0x80
 8020a46:	d006      	beq.n	8020a56 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8020a48:	683a      	ldr	r2, [r7, #0]
 8020a4a:	687b      	ldr	r3, [r7, #4]
 8020a4c:	0011      	movs	r1, r2
 8020a4e:	0018      	movs	r0, r3
 8020a50:	f000 fc59 	bl	8021306 <USBD_CtlError>
                break;
 8020a54:	e0ac      	b.n	8020bb0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020a56:	220e      	movs	r2, #14
 8020a58:	18bb      	adds	r3, r7, r2
 8020a5a:	781b      	ldrb	r3, [r3, #0]
 8020a5c:	b25b      	sxtb	r3, r3
 8020a5e:	2b00      	cmp	r3, #0
 8020a60:	da0c      	bge.n	8020a7c <USBD_StdEPReq+0x20a>
 8020a62:	18bb      	adds	r3, r7, r2
 8020a64:	781b      	ldrb	r3, [r3, #0]
 8020a66:	227f      	movs	r2, #127	@ 0x7f
 8020a68:	401a      	ands	r2, r3
 8020a6a:	0013      	movs	r3, r2
 8020a6c:	009b      	lsls	r3, r3, #2
 8020a6e:	189b      	adds	r3, r3, r2
 8020a70:	009b      	lsls	r3, r3, #2
 8020a72:	3310      	adds	r3, #16
 8020a74:	687a      	ldr	r2, [r7, #4]
 8020a76:	18d3      	adds	r3, r2, r3
 8020a78:	3304      	adds	r3, #4
 8020a7a:	e00d      	b.n	8020a98 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8020a7c:	230e      	movs	r3, #14
 8020a7e:	18fb      	adds	r3, r7, r3
 8020a80:	781b      	ldrb	r3, [r3, #0]
 8020a82:	227f      	movs	r2, #127	@ 0x7f
 8020a84:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020a86:	0013      	movs	r3, r2
 8020a88:	009b      	lsls	r3, r3, #2
 8020a8a:	189b      	adds	r3, r3, r2
 8020a8c:	009b      	lsls	r3, r3, #2
 8020a8e:	3351      	adds	r3, #81	@ 0x51
 8020a90:	33ff      	adds	r3, #255	@ 0xff
 8020a92:	687a      	ldr	r2, [r7, #4]
 8020a94:	18d3      	adds	r3, r2, r3
 8020a96:	3304      	adds	r3, #4
 8020a98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8020a9a:	68bb      	ldr	r3, [r7, #8]
 8020a9c:	2200      	movs	r2, #0
 8020a9e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8020aa0:	68b9      	ldr	r1, [r7, #8]
 8020aa2:	687b      	ldr	r3, [r7, #4]
 8020aa4:	2202      	movs	r2, #2
 8020aa6:	0018      	movs	r0, r3
 8020aa8:	f000 fcab 	bl	8021402 <USBD_CtlSendData>
              break;
 8020aac:	e080      	b.n	8020bb0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8020aae:	220e      	movs	r2, #14
 8020ab0:	18bb      	adds	r3, r7, r2
 8020ab2:	781b      	ldrb	r3, [r3, #0]
 8020ab4:	b25b      	sxtb	r3, r3
 8020ab6:	2b00      	cmp	r3, #0
 8020ab8:	da14      	bge.n	8020ae4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8020aba:	18bb      	adds	r3, r7, r2
 8020abc:	781b      	ldrb	r3, [r3, #0]
 8020abe:	220f      	movs	r2, #15
 8020ac0:	401a      	ands	r2, r3
 8020ac2:	6879      	ldr	r1, [r7, #4]
 8020ac4:	0013      	movs	r3, r2
 8020ac6:	009b      	lsls	r3, r3, #2
 8020ac8:	189b      	adds	r3, r3, r2
 8020aca:	009b      	lsls	r3, r3, #2
 8020acc:	18cb      	adds	r3, r1, r3
 8020ace:	3318      	adds	r3, #24
 8020ad0:	681b      	ldr	r3, [r3, #0]
 8020ad2:	2b00      	cmp	r3, #0
 8020ad4:	d11e      	bne.n	8020b14 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8020ad6:	683a      	ldr	r2, [r7, #0]
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	0011      	movs	r1, r2
 8020adc:	0018      	movs	r0, r3
 8020ade:	f000 fc12 	bl	8021306 <USBD_CtlError>
                  break;
 8020ae2:	e065      	b.n	8020bb0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8020ae4:	230e      	movs	r3, #14
 8020ae6:	18fb      	adds	r3, r7, r3
 8020ae8:	781b      	ldrb	r3, [r3, #0]
 8020aea:	220f      	movs	r2, #15
 8020aec:	401a      	ands	r2, r3
 8020aee:	6878      	ldr	r0, [r7, #4]
 8020af0:	23ac      	movs	r3, #172	@ 0xac
 8020af2:	0059      	lsls	r1, r3, #1
 8020af4:	0013      	movs	r3, r2
 8020af6:	009b      	lsls	r3, r3, #2
 8020af8:	189b      	adds	r3, r3, r2
 8020afa:	009b      	lsls	r3, r3, #2
 8020afc:	18c3      	adds	r3, r0, r3
 8020afe:	185b      	adds	r3, r3, r1
 8020b00:	681b      	ldr	r3, [r3, #0]
 8020b02:	2b00      	cmp	r3, #0
 8020b04:	d106      	bne.n	8020b14 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8020b06:	683a      	ldr	r2, [r7, #0]
 8020b08:	687b      	ldr	r3, [r7, #4]
 8020b0a:	0011      	movs	r1, r2
 8020b0c:	0018      	movs	r0, r3
 8020b0e:	f000 fbfa 	bl	8021306 <USBD_CtlError>
                  break;
 8020b12:	e04d      	b.n	8020bb0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020b14:	220e      	movs	r2, #14
 8020b16:	18bb      	adds	r3, r7, r2
 8020b18:	781b      	ldrb	r3, [r3, #0]
 8020b1a:	b25b      	sxtb	r3, r3
 8020b1c:	2b00      	cmp	r3, #0
 8020b1e:	da0c      	bge.n	8020b3a <USBD_StdEPReq+0x2c8>
 8020b20:	18bb      	adds	r3, r7, r2
 8020b22:	781b      	ldrb	r3, [r3, #0]
 8020b24:	227f      	movs	r2, #127	@ 0x7f
 8020b26:	401a      	ands	r2, r3
 8020b28:	0013      	movs	r3, r2
 8020b2a:	009b      	lsls	r3, r3, #2
 8020b2c:	189b      	adds	r3, r3, r2
 8020b2e:	009b      	lsls	r3, r3, #2
 8020b30:	3310      	adds	r3, #16
 8020b32:	687a      	ldr	r2, [r7, #4]
 8020b34:	18d3      	adds	r3, r2, r3
 8020b36:	3304      	adds	r3, #4
 8020b38:	e00d      	b.n	8020b56 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8020b3a:	230e      	movs	r3, #14
 8020b3c:	18fb      	adds	r3, r7, r3
 8020b3e:	781b      	ldrb	r3, [r3, #0]
 8020b40:	227f      	movs	r2, #127	@ 0x7f
 8020b42:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020b44:	0013      	movs	r3, r2
 8020b46:	009b      	lsls	r3, r3, #2
 8020b48:	189b      	adds	r3, r3, r2
 8020b4a:	009b      	lsls	r3, r3, #2
 8020b4c:	3351      	adds	r3, #81	@ 0x51
 8020b4e:	33ff      	adds	r3, #255	@ 0xff
 8020b50:	687a      	ldr	r2, [r7, #4]
 8020b52:	18d3      	adds	r3, r2, r3
 8020b54:	3304      	adds	r3, #4
 8020b56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8020b58:	220e      	movs	r2, #14
 8020b5a:	18bb      	adds	r3, r7, r2
 8020b5c:	781b      	ldrb	r3, [r3, #0]
 8020b5e:	2b00      	cmp	r3, #0
 8020b60:	d003      	beq.n	8020b6a <USBD_StdEPReq+0x2f8>
 8020b62:	18bb      	adds	r3, r7, r2
 8020b64:	781b      	ldrb	r3, [r3, #0]
 8020b66:	2b80      	cmp	r3, #128	@ 0x80
 8020b68:	d103      	bne.n	8020b72 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8020b6a:	68bb      	ldr	r3, [r7, #8]
 8020b6c:	2200      	movs	r2, #0
 8020b6e:	601a      	str	r2, [r3, #0]
 8020b70:	e010      	b.n	8020b94 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8020b72:	230e      	movs	r3, #14
 8020b74:	18fb      	adds	r3, r7, r3
 8020b76:	781a      	ldrb	r2, [r3, #0]
 8020b78:	687b      	ldr	r3, [r7, #4]
 8020b7a:	0011      	movs	r1, r2
 8020b7c:	0018      	movs	r0, r3
 8020b7e:	f001 f940 	bl	8021e02 <USBD_LL_IsStallEP>
 8020b82:	1e03      	subs	r3, r0, #0
 8020b84:	d003      	beq.n	8020b8e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8020b86:	68bb      	ldr	r3, [r7, #8]
 8020b88:	2201      	movs	r2, #1
 8020b8a:	601a      	str	r2, [r3, #0]
 8020b8c:	e002      	b.n	8020b94 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8020b8e:	68bb      	ldr	r3, [r7, #8]
 8020b90:	2200      	movs	r2, #0
 8020b92:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8020b94:	68b9      	ldr	r1, [r7, #8]
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	2202      	movs	r2, #2
 8020b9a:	0018      	movs	r0, r3
 8020b9c:	f000 fc31 	bl	8021402 <USBD_CtlSendData>
              break;
 8020ba0:	e006      	b.n	8020bb0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8020ba2:	683a      	ldr	r2, [r7, #0]
 8020ba4:	687b      	ldr	r3, [r7, #4]
 8020ba6:	0011      	movs	r1, r2
 8020ba8:	0018      	movs	r0, r3
 8020baa:	f000 fbac 	bl	8021306 <USBD_CtlError>
              break;
 8020bae:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8020bb0:	e006      	b.n	8020bc0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8020bb2:	683a      	ldr	r2, [r7, #0]
 8020bb4:	687b      	ldr	r3, [r7, #4]
 8020bb6:	0011      	movs	r1, r2
 8020bb8:	0018      	movs	r0, r3
 8020bba:	f000 fba4 	bl	8021306 <USBD_CtlError>
          break;
 8020bbe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8020bc0:	e006      	b.n	8020bd0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8020bc2:	683a      	ldr	r2, [r7, #0]
 8020bc4:	687b      	ldr	r3, [r7, #4]
 8020bc6:	0011      	movs	r1, r2
 8020bc8:	0018      	movs	r0, r3
 8020bca:	f000 fb9c 	bl	8021306 <USBD_CtlError>
      break;
 8020bce:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8020bd0:	230f      	movs	r3, #15
 8020bd2:	18fb      	adds	r3, r7, r3
 8020bd4:	781b      	ldrb	r3, [r3, #0]
}
 8020bd6:	0018      	movs	r0, r3
 8020bd8:	46bd      	mov	sp, r7
 8020bda:	b004      	add	sp, #16
 8020bdc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08020be0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8020be0:	b580      	push	{r7, lr}
 8020be2:	b084      	sub	sp, #16
 8020be4:	af00      	add	r7, sp, #0
 8020be6:	6078      	str	r0, [r7, #4]
 8020be8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8020bea:	2308      	movs	r3, #8
 8020bec:	18fb      	adds	r3, r7, r3
 8020bee:	2200      	movs	r2, #0
 8020bf0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8020bf2:	2300      	movs	r3, #0
 8020bf4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8020bf6:	230b      	movs	r3, #11
 8020bf8:	18fb      	adds	r3, r7, r3
 8020bfa:	2200      	movs	r2, #0
 8020bfc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8020bfe:	683b      	ldr	r3, [r7, #0]
 8020c00:	885b      	ldrh	r3, [r3, #2]
 8020c02:	0a1b      	lsrs	r3, r3, #8
 8020c04:	b29b      	uxth	r3, r3
 8020c06:	2b07      	cmp	r3, #7
 8020c08:	d900      	bls.n	8020c0c <USBD_GetDescriptor+0x2c>
 8020c0a:	e159      	b.n	8020ec0 <USBD_GetDescriptor+0x2e0>
 8020c0c:	009a      	lsls	r2, r3, #2
 8020c0e:	4bcb      	ldr	r3, [pc, #812]	@ (8020f3c <USBD_GetDescriptor+0x35c>)
 8020c10:	18d3      	adds	r3, r2, r3
 8020c12:	681b      	ldr	r3, [r3, #0]
 8020c14:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8020c16:	687a      	ldr	r2, [r7, #4]
 8020c18:	23ac      	movs	r3, #172	@ 0xac
 8020c1a:	009b      	lsls	r3, r3, #2
 8020c1c:	58d3      	ldr	r3, [r2, r3]
 8020c1e:	681b      	ldr	r3, [r3, #0]
 8020c20:	687a      	ldr	r2, [r7, #4]
 8020c22:	7c12      	ldrb	r2, [r2, #16]
 8020c24:	2108      	movs	r1, #8
 8020c26:	1879      	adds	r1, r7, r1
 8020c28:	0010      	movs	r0, r2
 8020c2a:	4798      	blx	r3
 8020c2c:	0003      	movs	r3, r0
 8020c2e:	60fb      	str	r3, [r7, #12]
      break;
 8020c30:	e153      	b.n	8020eda <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020c32:	687b      	ldr	r3, [r7, #4]
 8020c34:	7c1b      	ldrb	r3, [r3, #16]
 8020c36:	2b00      	cmp	r3, #0
 8020c38:	d10f      	bne.n	8020c5a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8020c3a:	687a      	ldr	r2, [r7, #4]
 8020c3c:	23ad      	movs	r3, #173	@ 0xad
 8020c3e:	009b      	lsls	r3, r3, #2
 8020c40:	58d3      	ldr	r3, [r2, r3]
 8020c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020c44:	2208      	movs	r2, #8
 8020c46:	18ba      	adds	r2, r7, r2
 8020c48:	0010      	movs	r0, r2
 8020c4a:	4798      	blx	r3
 8020c4c:	0003      	movs	r3, r0
 8020c4e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8020c50:	68fb      	ldr	r3, [r7, #12]
 8020c52:	3301      	adds	r3, #1
 8020c54:	2202      	movs	r2, #2
 8020c56:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8020c58:	e13f      	b.n	8020eda <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8020c5a:	687a      	ldr	r2, [r7, #4]
 8020c5c:	23ad      	movs	r3, #173	@ 0xad
 8020c5e:	009b      	lsls	r3, r3, #2
 8020c60:	58d3      	ldr	r3, [r2, r3]
 8020c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020c64:	2208      	movs	r2, #8
 8020c66:	18ba      	adds	r2, r7, r2
 8020c68:	0010      	movs	r0, r2
 8020c6a:	4798      	blx	r3
 8020c6c:	0003      	movs	r3, r0
 8020c6e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8020c70:	68fb      	ldr	r3, [r7, #12]
 8020c72:	3301      	adds	r3, #1
 8020c74:	2202      	movs	r2, #2
 8020c76:	701a      	strb	r2, [r3, #0]
      break;
 8020c78:	e12f      	b.n	8020eda <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8020c7a:	683b      	ldr	r3, [r7, #0]
 8020c7c:	885b      	ldrh	r3, [r3, #2]
 8020c7e:	b2db      	uxtb	r3, r3
 8020c80:	2b05      	cmp	r3, #5
 8020c82:	d900      	bls.n	8020c86 <USBD_GetDescriptor+0xa6>
 8020c84:	e0d0      	b.n	8020e28 <USBD_GetDescriptor+0x248>
 8020c86:	009a      	lsls	r2, r3, #2
 8020c88:	4bad      	ldr	r3, [pc, #692]	@ (8020f40 <USBD_GetDescriptor+0x360>)
 8020c8a:	18d3      	adds	r3, r2, r3
 8020c8c:	681b      	ldr	r3, [r3, #0]
 8020c8e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8020c90:	687a      	ldr	r2, [r7, #4]
 8020c92:	23ac      	movs	r3, #172	@ 0xac
 8020c94:	009b      	lsls	r3, r3, #2
 8020c96:	58d3      	ldr	r3, [r2, r3]
 8020c98:	685b      	ldr	r3, [r3, #4]
 8020c9a:	2b00      	cmp	r3, #0
 8020c9c:	d00d      	beq.n	8020cba <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8020c9e:	687a      	ldr	r2, [r7, #4]
 8020ca0:	23ac      	movs	r3, #172	@ 0xac
 8020ca2:	009b      	lsls	r3, r3, #2
 8020ca4:	58d3      	ldr	r3, [r2, r3]
 8020ca6:	685b      	ldr	r3, [r3, #4]
 8020ca8:	687a      	ldr	r2, [r7, #4]
 8020caa:	7c12      	ldrb	r2, [r2, #16]
 8020cac:	2108      	movs	r1, #8
 8020cae:	1879      	adds	r1, r7, r1
 8020cb0:	0010      	movs	r0, r2
 8020cb2:	4798      	blx	r3
 8020cb4:	0003      	movs	r3, r0
 8020cb6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8020cb8:	e0c3      	b.n	8020e42 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8020cba:	683a      	ldr	r2, [r7, #0]
 8020cbc:	687b      	ldr	r3, [r7, #4]
 8020cbe:	0011      	movs	r1, r2
 8020cc0:	0018      	movs	r0, r3
 8020cc2:	f000 fb20 	bl	8021306 <USBD_CtlError>
            err++;
 8020cc6:	210b      	movs	r1, #11
 8020cc8:	187b      	adds	r3, r7, r1
 8020cca:	781a      	ldrb	r2, [r3, #0]
 8020ccc:	187b      	adds	r3, r7, r1
 8020cce:	3201      	adds	r2, #1
 8020cd0:	701a      	strb	r2, [r3, #0]
          break;
 8020cd2:	e0b6      	b.n	8020e42 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8020cd4:	687a      	ldr	r2, [r7, #4]
 8020cd6:	23ac      	movs	r3, #172	@ 0xac
 8020cd8:	009b      	lsls	r3, r3, #2
 8020cda:	58d3      	ldr	r3, [r2, r3]
 8020cdc:	689b      	ldr	r3, [r3, #8]
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d00d      	beq.n	8020cfe <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8020ce2:	687a      	ldr	r2, [r7, #4]
 8020ce4:	23ac      	movs	r3, #172	@ 0xac
 8020ce6:	009b      	lsls	r3, r3, #2
 8020ce8:	58d3      	ldr	r3, [r2, r3]
 8020cea:	689b      	ldr	r3, [r3, #8]
 8020cec:	687a      	ldr	r2, [r7, #4]
 8020cee:	7c12      	ldrb	r2, [r2, #16]
 8020cf0:	2108      	movs	r1, #8
 8020cf2:	1879      	adds	r1, r7, r1
 8020cf4:	0010      	movs	r0, r2
 8020cf6:	4798      	blx	r3
 8020cf8:	0003      	movs	r3, r0
 8020cfa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8020cfc:	e0a1      	b.n	8020e42 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8020cfe:	683a      	ldr	r2, [r7, #0]
 8020d00:	687b      	ldr	r3, [r7, #4]
 8020d02:	0011      	movs	r1, r2
 8020d04:	0018      	movs	r0, r3
 8020d06:	f000 fafe 	bl	8021306 <USBD_CtlError>
            err++;
 8020d0a:	210b      	movs	r1, #11
 8020d0c:	187b      	adds	r3, r7, r1
 8020d0e:	781a      	ldrb	r2, [r3, #0]
 8020d10:	187b      	adds	r3, r7, r1
 8020d12:	3201      	adds	r2, #1
 8020d14:	701a      	strb	r2, [r3, #0]
          break;
 8020d16:	e094      	b.n	8020e42 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8020d18:	687a      	ldr	r2, [r7, #4]
 8020d1a:	23ac      	movs	r3, #172	@ 0xac
 8020d1c:	009b      	lsls	r3, r3, #2
 8020d1e:	58d3      	ldr	r3, [r2, r3]
 8020d20:	68db      	ldr	r3, [r3, #12]
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	d00d      	beq.n	8020d42 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8020d26:	687a      	ldr	r2, [r7, #4]
 8020d28:	23ac      	movs	r3, #172	@ 0xac
 8020d2a:	009b      	lsls	r3, r3, #2
 8020d2c:	58d3      	ldr	r3, [r2, r3]
 8020d2e:	68db      	ldr	r3, [r3, #12]
 8020d30:	687a      	ldr	r2, [r7, #4]
 8020d32:	7c12      	ldrb	r2, [r2, #16]
 8020d34:	2108      	movs	r1, #8
 8020d36:	1879      	adds	r1, r7, r1
 8020d38:	0010      	movs	r0, r2
 8020d3a:	4798      	blx	r3
 8020d3c:	0003      	movs	r3, r0
 8020d3e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8020d40:	e07f      	b.n	8020e42 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8020d42:	683a      	ldr	r2, [r7, #0]
 8020d44:	687b      	ldr	r3, [r7, #4]
 8020d46:	0011      	movs	r1, r2
 8020d48:	0018      	movs	r0, r3
 8020d4a:	f000 fadc 	bl	8021306 <USBD_CtlError>
            err++;
 8020d4e:	210b      	movs	r1, #11
 8020d50:	187b      	adds	r3, r7, r1
 8020d52:	781a      	ldrb	r2, [r3, #0]
 8020d54:	187b      	adds	r3, r7, r1
 8020d56:	3201      	adds	r2, #1
 8020d58:	701a      	strb	r2, [r3, #0]
          break;
 8020d5a:	e072      	b.n	8020e42 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8020d5c:	687a      	ldr	r2, [r7, #4]
 8020d5e:	23ac      	movs	r3, #172	@ 0xac
 8020d60:	009b      	lsls	r3, r3, #2
 8020d62:	58d3      	ldr	r3, [r2, r3]
 8020d64:	691b      	ldr	r3, [r3, #16]
 8020d66:	2b00      	cmp	r3, #0
 8020d68:	d00d      	beq.n	8020d86 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8020d6a:	687a      	ldr	r2, [r7, #4]
 8020d6c:	23ac      	movs	r3, #172	@ 0xac
 8020d6e:	009b      	lsls	r3, r3, #2
 8020d70:	58d3      	ldr	r3, [r2, r3]
 8020d72:	691b      	ldr	r3, [r3, #16]
 8020d74:	687a      	ldr	r2, [r7, #4]
 8020d76:	7c12      	ldrb	r2, [r2, #16]
 8020d78:	2108      	movs	r1, #8
 8020d7a:	1879      	adds	r1, r7, r1
 8020d7c:	0010      	movs	r0, r2
 8020d7e:	4798      	blx	r3
 8020d80:	0003      	movs	r3, r0
 8020d82:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8020d84:	e05d      	b.n	8020e42 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8020d86:	683a      	ldr	r2, [r7, #0]
 8020d88:	687b      	ldr	r3, [r7, #4]
 8020d8a:	0011      	movs	r1, r2
 8020d8c:	0018      	movs	r0, r3
 8020d8e:	f000 faba 	bl	8021306 <USBD_CtlError>
            err++;
 8020d92:	210b      	movs	r1, #11
 8020d94:	187b      	adds	r3, r7, r1
 8020d96:	781a      	ldrb	r2, [r3, #0]
 8020d98:	187b      	adds	r3, r7, r1
 8020d9a:	3201      	adds	r2, #1
 8020d9c:	701a      	strb	r2, [r3, #0]
          break;
 8020d9e:	e050      	b.n	8020e42 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8020da0:	687a      	ldr	r2, [r7, #4]
 8020da2:	23ac      	movs	r3, #172	@ 0xac
 8020da4:	009b      	lsls	r3, r3, #2
 8020da6:	58d3      	ldr	r3, [r2, r3]
 8020da8:	695b      	ldr	r3, [r3, #20]
 8020daa:	2b00      	cmp	r3, #0
 8020dac:	d00d      	beq.n	8020dca <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8020dae:	687a      	ldr	r2, [r7, #4]
 8020db0:	23ac      	movs	r3, #172	@ 0xac
 8020db2:	009b      	lsls	r3, r3, #2
 8020db4:	58d3      	ldr	r3, [r2, r3]
 8020db6:	695b      	ldr	r3, [r3, #20]
 8020db8:	687a      	ldr	r2, [r7, #4]
 8020dba:	7c12      	ldrb	r2, [r2, #16]
 8020dbc:	2108      	movs	r1, #8
 8020dbe:	1879      	adds	r1, r7, r1
 8020dc0:	0010      	movs	r0, r2
 8020dc2:	4798      	blx	r3
 8020dc4:	0003      	movs	r3, r0
 8020dc6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8020dc8:	e03b      	b.n	8020e42 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8020dca:	683a      	ldr	r2, [r7, #0]
 8020dcc:	687b      	ldr	r3, [r7, #4]
 8020dce:	0011      	movs	r1, r2
 8020dd0:	0018      	movs	r0, r3
 8020dd2:	f000 fa98 	bl	8021306 <USBD_CtlError>
            err++;
 8020dd6:	210b      	movs	r1, #11
 8020dd8:	187b      	adds	r3, r7, r1
 8020dda:	781a      	ldrb	r2, [r3, #0]
 8020ddc:	187b      	adds	r3, r7, r1
 8020dde:	3201      	adds	r2, #1
 8020de0:	701a      	strb	r2, [r3, #0]
          break;
 8020de2:	e02e      	b.n	8020e42 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8020de4:	687a      	ldr	r2, [r7, #4]
 8020de6:	23ac      	movs	r3, #172	@ 0xac
 8020de8:	009b      	lsls	r3, r3, #2
 8020dea:	58d3      	ldr	r3, [r2, r3]
 8020dec:	699b      	ldr	r3, [r3, #24]
 8020dee:	2b00      	cmp	r3, #0
 8020df0:	d00d      	beq.n	8020e0e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8020df2:	687a      	ldr	r2, [r7, #4]
 8020df4:	23ac      	movs	r3, #172	@ 0xac
 8020df6:	009b      	lsls	r3, r3, #2
 8020df8:	58d3      	ldr	r3, [r2, r3]
 8020dfa:	699b      	ldr	r3, [r3, #24]
 8020dfc:	687a      	ldr	r2, [r7, #4]
 8020dfe:	7c12      	ldrb	r2, [r2, #16]
 8020e00:	2108      	movs	r1, #8
 8020e02:	1879      	adds	r1, r7, r1
 8020e04:	0010      	movs	r0, r2
 8020e06:	4798      	blx	r3
 8020e08:	0003      	movs	r3, r0
 8020e0a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8020e0c:	e019      	b.n	8020e42 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8020e0e:	683a      	ldr	r2, [r7, #0]
 8020e10:	687b      	ldr	r3, [r7, #4]
 8020e12:	0011      	movs	r1, r2
 8020e14:	0018      	movs	r0, r3
 8020e16:	f000 fa76 	bl	8021306 <USBD_CtlError>
            err++;
 8020e1a:	210b      	movs	r1, #11
 8020e1c:	187b      	adds	r3, r7, r1
 8020e1e:	781a      	ldrb	r2, [r3, #0]
 8020e20:	187b      	adds	r3, r7, r1
 8020e22:	3201      	adds	r2, #1
 8020e24:	701a      	strb	r2, [r3, #0]
          break;
 8020e26:	e00c      	b.n	8020e42 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8020e28:	683a      	ldr	r2, [r7, #0]
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	0011      	movs	r1, r2
 8020e2e:	0018      	movs	r0, r3
 8020e30:	f000 fa69 	bl	8021306 <USBD_CtlError>
          err++;
 8020e34:	210b      	movs	r1, #11
 8020e36:	187b      	adds	r3, r7, r1
 8020e38:	781a      	ldrb	r2, [r3, #0]
 8020e3a:	187b      	adds	r3, r7, r1
 8020e3c:	3201      	adds	r2, #1
 8020e3e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8020e40:	e04b      	b.n	8020eda <USBD_GetDescriptor+0x2fa>
 8020e42:	e04a      	b.n	8020eda <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020e44:	687b      	ldr	r3, [r7, #4]
 8020e46:	7c1b      	ldrb	r3, [r3, #16]
 8020e48:	2b00      	cmp	r3, #0
 8020e4a:	d10b      	bne.n	8020e64 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8020e4c:	687a      	ldr	r2, [r7, #4]
 8020e4e:	23ad      	movs	r3, #173	@ 0xad
 8020e50:	009b      	lsls	r3, r3, #2
 8020e52:	58d3      	ldr	r3, [r2, r3]
 8020e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020e56:	2208      	movs	r2, #8
 8020e58:	18ba      	adds	r2, r7, r2
 8020e5a:	0010      	movs	r0, r2
 8020e5c:	4798      	blx	r3
 8020e5e:	0003      	movs	r3, r0
 8020e60:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8020e62:	e03a      	b.n	8020eda <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8020e64:	683a      	ldr	r2, [r7, #0]
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	0011      	movs	r1, r2
 8020e6a:	0018      	movs	r0, r3
 8020e6c:	f000 fa4b 	bl	8021306 <USBD_CtlError>
        err++;
 8020e70:	210b      	movs	r1, #11
 8020e72:	187b      	adds	r3, r7, r1
 8020e74:	781a      	ldrb	r2, [r3, #0]
 8020e76:	187b      	adds	r3, r7, r1
 8020e78:	3201      	adds	r2, #1
 8020e7a:	701a      	strb	r2, [r3, #0]
      break;
 8020e7c:	e02d      	b.n	8020eda <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020e7e:	687b      	ldr	r3, [r7, #4]
 8020e80:	7c1b      	ldrb	r3, [r3, #16]
 8020e82:	2b00      	cmp	r3, #0
 8020e84:	d10f      	bne.n	8020ea6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8020e86:	687a      	ldr	r2, [r7, #4]
 8020e88:	23ad      	movs	r3, #173	@ 0xad
 8020e8a:	009b      	lsls	r3, r3, #2
 8020e8c:	58d3      	ldr	r3, [r2, r3]
 8020e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020e90:	2208      	movs	r2, #8
 8020e92:	18ba      	adds	r2, r7, r2
 8020e94:	0010      	movs	r0, r2
 8020e96:	4798      	blx	r3
 8020e98:	0003      	movs	r3, r0
 8020e9a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8020e9c:	68fb      	ldr	r3, [r7, #12]
 8020e9e:	3301      	adds	r3, #1
 8020ea0:	2207      	movs	r2, #7
 8020ea2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8020ea4:	e019      	b.n	8020eda <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8020ea6:	683a      	ldr	r2, [r7, #0]
 8020ea8:	687b      	ldr	r3, [r7, #4]
 8020eaa:	0011      	movs	r1, r2
 8020eac:	0018      	movs	r0, r3
 8020eae:	f000 fa2a 	bl	8021306 <USBD_CtlError>
        err++;
 8020eb2:	210b      	movs	r1, #11
 8020eb4:	187b      	adds	r3, r7, r1
 8020eb6:	781a      	ldrb	r2, [r3, #0]
 8020eb8:	187b      	adds	r3, r7, r1
 8020eba:	3201      	adds	r2, #1
 8020ebc:	701a      	strb	r2, [r3, #0]
      break;
 8020ebe:	e00c      	b.n	8020eda <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8020ec0:	683a      	ldr	r2, [r7, #0]
 8020ec2:	687b      	ldr	r3, [r7, #4]
 8020ec4:	0011      	movs	r1, r2
 8020ec6:	0018      	movs	r0, r3
 8020ec8:	f000 fa1d 	bl	8021306 <USBD_CtlError>
      err++;
 8020ecc:	210b      	movs	r1, #11
 8020ece:	187b      	adds	r3, r7, r1
 8020ed0:	781a      	ldrb	r2, [r3, #0]
 8020ed2:	187b      	adds	r3, r7, r1
 8020ed4:	3201      	adds	r2, #1
 8020ed6:	701a      	strb	r2, [r3, #0]
      break;
 8020ed8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8020eda:	230b      	movs	r3, #11
 8020edc:	18fb      	adds	r3, r7, r3
 8020ede:	781b      	ldrb	r3, [r3, #0]
 8020ee0:	2b00      	cmp	r3, #0
 8020ee2:	d127      	bne.n	8020f34 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8020ee4:	2108      	movs	r1, #8
 8020ee6:	187b      	adds	r3, r7, r1
 8020ee8:	881b      	ldrh	r3, [r3, #0]
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	d019      	beq.n	8020f22 <USBD_GetDescriptor+0x342>
 8020eee:	683b      	ldr	r3, [r7, #0]
 8020ef0:	88db      	ldrh	r3, [r3, #6]
 8020ef2:	2b00      	cmp	r3, #0
 8020ef4:	d015      	beq.n	8020f22 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8020ef6:	683b      	ldr	r3, [r7, #0]
 8020ef8:	88da      	ldrh	r2, [r3, #6]
 8020efa:	187b      	adds	r3, r7, r1
 8020efc:	881b      	ldrh	r3, [r3, #0]
 8020efe:	1c18      	adds	r0, r3, #0
 8020f00:	1c11      	adds	r1, r2, #0
 8020f02:	b28a      	uxth	r2, r1
 8020f04:	b283      	uxth	r3, r0
 8020f06:	429a      	cmp	r2, r3
 8020f08:	d900      	bls.n	8020f0c <USBD_GetDescriptor+0x32c>
 8020f0a:	1c01      	adds	r1, r0, #0
 8020f0c:	b28a      	uxth	r2, r1
 8020f0e:	2108      	movs	r1, #8
 8020f10:	187b      	adds	r3, r7, r1
 8020f12:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8020f14:	187b      	adds	r3, r7, r1
 8020f16:	881a      	ldrh	r2, [r3, #0]
 8020f18:	68f9      	ldr	r1, [r7, #12]
 8020f1a:	687b      	ldr	r3, [r7, #4]
 8020f1c:	0018      	movs	r0, r3
 8020f1e:	f000 fa70 	bl	8021402 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8020f22:	683b      	ldr	r3, [r7, #0]
 8020f24:	88db      	ldrh	r3, [r3, #6]
 8020f26:	2b00      	cmp	r3, #0
 8020f28:	d105      	bne.n	8020f36 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8020f2a:	687b      	ldr	r3, [r7, #4]
 8020f2c:	0018      	movs	r0, r3
 8020f2e:	f000 fad2 	bl	80214d6 <USBD_CtlSendStatus>
 8020f32:	e000      	b.n	8020f36 <USBD_GetDescriptor+0x356>
    return;
 8020f34:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8020f36:	46bd      	mov	sp, r7
 8020f38:	b004      	add	sp, #16
 8020f3a:	bd80      	pop	{r7, pc}
 8020f3c:	0802cd20 	.word	0x0802cd20
 8020f40:	0802cd40 	.word	0x0802cd40

08020f44 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8020f44:	b590      	push	{r4, r7, lr}
 8020f46:	b085      	sub	sp, #20
 8020f48:	af00      	add	r7, sp, #0
 8020f4a:	6078      	str	r0, [r7, #4]
 8020f4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8020f4e:	683b      	ldr	r3, [r7, #0]
 8020f50:	889b      	ldrh	r3, [r3, #4]
 8020f52:	2b00      	cmp	r3, #0
 8020f54:	d13d      	bne.n	8020fd2 <USBD_SetAddress+0x8e>
 8020f56:	683b      	ldr	r3, [r7, #0]
 8020f58:	88db      	ldrh	r3, [r3, #6]
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	d139      	bne.n	8020fd2 <USBD_SetAddress+0x8e>
 8020f5e:	683b      	ldr	r3, [r7, #0]
 8020f60:	885b      	ldrh	r3, [r3, #2]
 8020f62:	2b7f      	cmp	r3, #127	@ 0x7f
 8020f64:	d835      	bhi.n	8020fd2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8020f66:	683b      	ldr	r3, [r7, #0]
 8020f68:	885b      	ldrh	r3, [r3, #2]
 8020f6a:	b2da      	uxtb	r2, r3
 8020f6c:	230f      	movs	r3, #15
 8020f6e:	18fb      	adds	r3, r7, r3
 8020f70:	217f      	movs	r1, #127	@ 0x7f
 8020f72:	400a      	ands	r2, r1
 8020f74:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020f76:	687a      	ldr	r2, [r7, #4]
 8020f78:	23a7      	movs	r3, #167	@ 0xa7
 8020f7a:	009b      	lsls	r3, r3, #2
 8020f7c:	5cd3      	ldrb	r3, [r2, r3]
 8020f7e:	2b03      	cmp	r3, #3
 8020f80:	d106      	bne.n	8020f90 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8020f82:	683a      	ldr	r2, [r7, #0]
 8020f84:	687b      	ldr	r3, [r7, #4]
 8020f86:	0011      	movs	r1, r2
 8020f88:	0018      	movs	r0, r3
 8020f8a:	f000 f9bc 	bl	8021306 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020f8e:	e027      	b.n	8020fe0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8020f90:	687b      	ldr	r3, [r7, #4]
 8020f92:	240f      	movs	r4, #15
 8020f94:	193a      	adds	r2, r7, r4
 8020f96:	4914      	ldr	r1, [pc, #80]	@ (8020fe8 <USBD_SetAddress+0xa4>)
 8020f98:	7812      	ldrb	r2, [r2, #0]
 8020f9a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8020f9c:	193b      	adds	r3, r7, r4
 8020f9e:	781a      	ldrb	r2, [r3, #0]
 8020fa0:	687b      	ldr	r3, [r7, #4]
 8020fa2:	0011      	movs	r1, r2
 8020fa4:	0018      	movs	r0, r3
 8020fa6:	f000 ff5d 	bl	8021e64 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8020faa:	687b      	ldr	r3, [r7, #4]
 8020fac:	0018      	movs	r0, r3
 8020fae:	f000 fa92 	bl	80214d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8020fb2:	193b      	adds	r3, r7, r4
 8020fb4:	781b      	ldrb	r3, [r3, #0]
 8020fb6:	2b00      	cmp	r3, #0
 8020fb8:	d005      	beq.n	8020fc6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8020fba:	687a      	ldr	r2, [r7, #4]
 8020fbc:	23a7      	movs	r3, #167	@ 0xa7
 8020fbe:	009b      	lsls	r3, r3, #2
 8020fc0:	2102      	movs	r1, #2
 8020fc2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020fc4:	e00c      	b.n	8020fe0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8020fc6:	687a      	ldr	r2, [r7, #4]
 8020fc8:	23a7      	movs	r3, #167	@ 0xa7
 8020fca:	009b      	lsls	r3, r3, #2
 8020fcc:	2101      	movs	r1, #1
 8020fce:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020fd0:	e006      	b.n	8020fe0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8020fd2:	683a      	ldr	r2, [r7, #0]
 8020fd4:	687b      	ldr	r3, [r7, #4]
 8020fd6:	0011      	movs	r1, r2
 8020fd8:	0018      	movs	r0, r3
 8020fda:	f000 f994 	bl	8021306 <USBD_CtlError>
  }
}
 8020fde:	46c0      	nop			@ (mov r8, r8)
 8020fe0:	46c0      	nop			@ (mov r8, r8)
 8020fe2:	46bd      	mov	sp, r7
 8020fe4:	b005      	add	sp, #20
 8020fe6:	bd90      	pop	{r4, r7, pc}
 8020fe8:	0000029e 	.word	0x0000029e

08020fec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8020fec:	b580      	push	{r7, lr}
 8020fee:	b082      	sub	sp, #8
 8020ff0:	af00      	add	r7, sp, #0
 8020ff2:	6078      	str	r0, [r7, #4]
 8020ff4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8020ff6:	683b      	ldr	r3, [r7, #0]
 8020ff8:	885b      	ldrh	r3, [r3, #2]
 8020ffa:	b2da      	uxtb	r2, r3
 8020ffc:	4b4c      	ldr	r3, [pc, #304]	@ (8021130 <USBD_SetConfig+0x144>)
 8020ffe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021000:	4b4b      	ldr	r3, [pc, #300]	@ (8021130 <USBD_SetConfig+0x144>)
 8021002:	781b      	ldrb	r3, [r3, #0]
 8021004:	2b01      	cmp	r3, #1
 8021006:	d906      	bls.n	8021016 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8021008:	683a      	ldr	r2, [r7, #0]
 802100a:	687b      	ldr	r3, [r7, #4]
 802100c:	0011      	movs	r1, r2
 802100e:	0018      	movs	r0, r3
 8021010:	f000 f979 	bl	8021306 <USBD_CtlError>
 8021014:	e088      	b.n	8021128 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8021016:	687a      	ldr	r2, [r7, #4]
 8021018:	23a7      	movs	r3, #167	@ 0xa7
 802101a:	009b      	lsls	r3, r3, #2
 802101c:	5cd3      	ldrb	r3, [r2, r3]
 802101e:	2b02      	cmp	r3, #2
 8021020:	d002      	beq.n	8021028 <USBD_SetConfig+0x3c>
 8021022:	2b03      	cmp	r3, #3
 8021024:	d029      	beq.n	802107a <USBD_SetConfig+0x8e>
 8021026:	e071      	b.n	802110c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8021028:	4b41      	ldr	r3, [pc, #260]	@ (8021130 <USBD_SetConfig+0x144>)
 802102a:	781b      	ldrb	r3, [r3, #0]
 802102c:	2b00      	cmp	r3, #0
 802102e:	d01f      	beq.n	8021070 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8021030:	4b3f      	ldr	r3, [pc, #252]	@ (8021130 <USBD_SetConfig+0x144>)
 8021032:	781b      	ldrb	r3, [r3, #0]
 8021034:	001a      	movs	r2, r3
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 802103a:	687a      	ldr	r2, [r7, #4]
 802103c:	23a7      	movs	r3, #167	@ 0xa7
 802103e:	009b      	lsls	r3, r3, #2
 8021040:	2103      	movs	r1, #3
 8021042:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8021044:	4b3a      	ldr	r3, [pc, #232]	@ (8021130 <USBD_SetConfig+0x144>)
 8021046:	781a      	ldrb	r2, [r3, #0]
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	0011      	movs	r1, r2
 802104c:	0018      	movs	r0, r3
 802104e:	f7ff f8c6 	bl	80201de <USBD_SetClassConfig>
 8021052:	0003      	movs	r3, r0
 8021054:	2b02      	cmp	r3, #2
 8021056:	d106      	bne.n	8021066 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8021058:	683a      	ldr	r2, [r7, #0]
 802105a:	687b      	ldr	r3, [r7, #4]
 802105c:	0011      	movs	r1, r2
 802105e:	0018      	movs	r0, r3
 8021060:	f000 f951 	bl	8021306 <USBD_CtlError>
            return;
 8021064:	e060      	b.n	8021128 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8021066:	687b      	ldr	r3, [r7, #4]
 8021068:	0018      	movs	r0, r3
 802106a:	f000 fa34 	bl	80214d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 802106e:	e05b      	b.n	8021128 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021070:	687b      	ldr	r3, [r7, #4]
 8021072:	0018      	movs	r0, r3
 8021074:	f000 fa2f 	bl	80214d6 <USBD_CtlSendStatus>
        break;
 8021078:	e056      	b.n	8021128 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 802107a:	4b2d      	ldr	r3, [pc, #180]	@ (8021130 <USBD_SetConfig+0x144>)
 802107c:	781b      	ldrb	r3, [r3, #0]
 802107e:	2b00      	cmp	r3, #0
 8021080:	d115      	bne.n	80210ae <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021082:	687a      	ldr	r2, [r7, #4]
 8021084:	23a7      	movs	r3, #167	@ 0xa7
 8021086:	009b      	lsls	r3, r3, #2
 8021088:	2102      	movs	r1, #2
 802108a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 802108c:	4b28      	ldr	r3, [pc, #160]	@ (8021130 <USBD_SetConfig+0x144>)
 802108e:	781b      	ldrb	r3, [r3, #0]
 8021090:	001a      	movs	r2, r3
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8021096:	4b26      	ldr	r3, [pc, #152]	@ (8021130 <USBD_SetConfig+0x144>)
 8021098:	781a      	ldrb	r2, [r3, #0]
 802109a:	687b      	ldr	r3, [r7, #4]
 802109c:	0011      	movs	r1, r2
 802109e:	0018      	movs	r0, r3
 80210a0:	f7ff f8c4 	bl	802022c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80210a4:	687b      	ldr	r3, [r7, #4]
 80210a6:	0018      	movs	r0, r3
 80210a8:	f000 fa15 	bl	80214d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80210ac:	e03c      	b.n	8021128 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80210ae:	4b20      	ldr	r3, [pc, #128]	@ (8021130 <USBD_SetConfig+0x144>)
 80210b0:	781b      	ldrb	r3, [r3, #0]
 80210b2:	001a      	movs	r2, r3
 80210b4:	687b      	ldr	r3, [r7, #4]
 80210b6:	685b      	ldr	r3, [r3, #4]
 80210b8:	429a      	cmp	r2, r3
 80210ba:	d022      	beq.n	8021102 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	685b      	ldr	r3, [r3, #4]
 80210c0:	b2da      	uxtb	r2, r3
 80210c2:	687b      	ldr	r3, [r7, #4]
 80210c4:	0011      	movs	r1, r2
 80210c6:	0018      	movs	r0, r3
 80210c8:	f7ff f8b0 	bl	802022c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80210cc:	4b18      	ldr	r3, [pc, #96]	@ (8021130 <USBD_SetConfig+0x144>)
 80210ce:	781b      	ldrb	r3, [r3, #0]
 80210d0:	001a      	movs	r2, r3
 80210d2:	687b      	ldr	r3, [r7, #4]
 80210d4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80210d6:	4b16      	ldr	r3, [pc, #88]	@ (8021130 <USBD_SetConfig+0x144>)
 80210d8:	781a      	ldrb	r2, [r3, #0]
 80210da:	687b      	ldr	r3, [r7, #4]
 80210dc:	0011      	movs	r1, r2
 80210de:	0018      	movs	r0, r3
 80210e0:	f7ff f87d 	bl	80201de <USBD_SetClassConfig>
 80210e4:	0003      	movs	r3, r0
 80210e6:	2b02      	cmp	r3, #2
 80210e8:	d106      	bne.n	80210f8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80210ea:	683a      	ldr	r2, [r7, #0]
 80210ec:	687b      	ldr	r3, [r7, #4]
 80210ee:	0011      	movs	r1, r2
 80210f0:	0018      	movs	r0, r3
 80210f2:	f000 f908 	bl	8021306 <USBD_CtlError>
            return;
 80210f6:	e017      	b.n	8021128 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	0018      	movs	r0, r3
 80210fc:	f000 f9eb 	bl	80214d6 <USBD_CtlSendStatus>
        break;
 8021100:	e012      	b.n	8021128 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021102:	687b      	ldr	r3, [r7, #4]
 8021104:	0018      	movs	r0, r3
 8021106:	f000 f9e6 	bl	80214d6 <USBD_CtlSendStatus>
        break;
 802110a:	e00d      	b.n	8021128 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 802110c:	683a      	ldr	r2, [r7, #0]
 802110e:	687b      	ldr	r3, [r7, #4]
 8021110:	0011      	movs	r1, r2
 8021112:	0018      	movs	r0, r3
 8021114:	f000 f8f7 	bl	8021306 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8021118:	4b05      	ldr	r3, [pc, #20]	@ (8021130 <USBD_SetConfig+0x144>)
 802111a:	781a      	ldrb	r2, [r3, #0]
 802111c:	687b      	ldr	r3, [r7, #4]
 802111e:	0011      	movs	r1, r2
 8021120:	0018      	movs	r0, r3
 8021122:	f7ff f883 	bl	802022c <USBD_ClrClassConfig>
        break;
 8021126:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8021128:	46bd      	mov	sp, r7
 802112a:	b002      	add	sp, #8
 802112c:	bd80      	pop	{r7, pc}
 802112e:	46c0      	nop			@ (mov r8, r8)
 8021130:	20002260 	.word	0x20002260

08021134 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021134:	b580      	push	{r7, lr}
 8021136:	b082      	sub	sp, #8
 8021138:	af00      	add	r7, sp, #0
 802113a:	6078      	str	r0, [r7, #4]
 802113c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 802113e:	683b      	ldr	r3, [r7, #0]
 8021140:	88db      	ldrh	r3, [r3, #6]
 8021142:	2b01      	cmp	r3, #1
 8021144:	d006      	beq.n	8021154 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8021146:	683a      	ldr	r2, [r7, #0]
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	0011      	movs	r1, r2
 802114c:	0018      	movs	r0, r3
 802114e:	f000 f8da 	bl	8021306 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021152:	e026      	b.n	80211a2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8021154:	687a      	ldr	r2, [r7, #4]
 8021156:	23a7      	movs	r3, #167	@ 0xa7
 8021158:	009b      	lsls	r3, r3, #2
 802115a:	5cd3      	ldrb	r3, [r2, r3]
 802115c:	2b02      	cmp	r3, #2
 802115e:	dc02      	bgt.n	8021166 <USBD_GetConfig+0x32>
 8021160:	2b00      	cmp	r3, #0
 8021162:	dc03      	bgt.n	802116c <USBD_GetConfig+0x38>
 8021164:	e016      	b.n	8021194 <USBD_GetConfig+0x60>
 8021166:	2b03      	cmp	r3, #3
 8021168:	d00c      	beq.n	8021184 <USBD_GetConfig+0x50>
 802116a:	e013      	b.n	8021194 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	2200      	movs	r2, #0
 8021170:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8021172:	687b      	ldr	r3, [r7, #4]
 8021174:	3308      	adds	r3, #8
 8021176:	0019      	movs	r1, r3
 8021178:	687b      	ldr	r3, [r7, #4]
 802117a:	2201      	movs	r2, #1
 802117c:	0018      	movs	r0, r3
 802117e:	f000 f940 	bl	8021402 <USBD_CtlSendData>
        break;
 8021182:	e00e      	b.n	80211a2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8021184:	687b      	ldr	r3, [r7, #4]
 8021186:	1d19      	adds	r1, r3, #4
 8021188:	687b      	ldr	r3, [r7, #4]
 802118a:	2201      	movs	r2, #1
 802118c:	0018      	movs	r0, r3
 802118e:	f000 f938 	bl	8021402 <USBD_CtlSendData>
        break;
 8021192:	e006      	b.n	80211a2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8021194:	683a      	ldr	r2, [r7, #0]
 8021196:	687b      	ldr	r3, [r7, #4]
 8021198:	0011      	movs	r1, r2
 802119a:	0018      	movs	r0, r3
 802119c:	f000 f8b3 	bl	8021306 <USBD_CtlError>
        break;
 80211a0:	46c0      	nop			@ (mov r8, r8)
}
 80211a2:	46c0      	nop			@ (mov r8, r8)
 80211a4:	46bd      	mov	sp, r7
 80211a6:	b002      	add	sp, #8
 80211a8:	bd80      	pop	{r7, pc}

080211aa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80211aa:	b580      	push	{r7, lr}
 80211ac:	b082      	sub	sp, #8
 80211ae:	af00      	add	r7, sp, #0
 80211b0:	6078      	str	r0, [r7, #4]
 80211b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80211b4:	687a      	ldr	r2, [r7, #4]
 80211b6:	23a7      	movs	r3, #167	@ 0xa7
 80211b8:	009b      	lsls	r3, r3, #2
 80211ba:	5cd3      	ldrb	r3, [r2, r3]
 80211bc:	3b01      	subs	r3, #1
 80211be:	2b02      	cmp	r3, #2
 80211c0:	d822      	bhi.n	8021208 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80211c2:	683b      	ldr	r3, [r7, #0]
 80211c4:	88db      	ldrh	r3, [r3, #6]
 80211c6:	2b02      	cmp	r3, #2
 80211c8:	d006      	beq.n	80211d8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80211ca:	683a      	ldr	r2, [r7, #0]
 80211cc:	687b      	ldr	r3, [r7, #4]
 80211ce:	0011      	movs	r1, r2
 80211d0:	0018      	movs	r0, r3
 80211d2:	f000 f898 	bl	8021306 <USBD_CtlError>
        break;
 80211d6:	e01e      	b.n	8021216 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80211d8:	687b      	ldr	r3, [r7, #4]
 80211da:	2201      	movs	r2, #1
 80211dc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80211de:	687a      	ldr	r2, [r7, #4]
 80211e0:	23a9      	movs	r3, #169	@ 0xa9
 80211e2:	009b      	lsls	r3, r3, #2
 80211e4:	58d3      	ldr	r3, [r2, r3]
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	d005      	beq.n	80211f6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80211ea:	687b      	ldr	r3, [r7, #4]
 80211ec:	68db      	ldr	r3, [r3, #12]
 80211ee:	2202      	movs	r2, #2
 80211f0:	431a      	orrs	r2, r3
 80211f2:	687b      	ldr	r3, [r7, #4]
 80211f4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80211f6:	687b      	ldr	r3, [r7, #4]
 80211f8:	330c      	adds	r3, #12
 80211fa:	0019      	movs	r1, r3
 80211fc:	687b      	ldr	r3, [r7, #4]
 80211fe:	2202      	movs	r2, #2
 8021200:	0018      	movs	r0, r3
 8021202:	f000 f8fe 	bl	8021402 <USBD_CtlSendData>
      break;
 8021206:	e006      	b.n	8021216 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8021208:	683a      	ldr	r2, [r7, #0]
 802120a:	687b      	ldr	r3, [r7, #4]
 802120c:	0011      	movs	r1, r2
 802120e:	0018      	movs	r0, r3
 8021210:	f000 f879 	bl	8021306 <USBD_CtlError>
      break;
 8021214:	46c0      	nop			@ (mov r8, r8)
  }
}
 8021216:	46c0      	nop			@ (mov r8, r8)
 8021218:	46bd      	mov	sp, r7
 802121a:	b002      	add	sp, #8
 802121c:	bd80      	pop	{r7, pc}

0802121e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 802121e:	b580      	push	{r7, lr}
 8021220:	b082      	sub	sp, #8
 8021222:	af00      	add	r7, sp, #0
 8021224:	6078      	str	r0, [r7, #4]
 8021226:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021228:	683b      	ldr	r3, [r7, #0]
 802122a:	885b      	ldrh	r3, [r3, #2]
 802122c:	2b01      	cmp	r3, #1
 802122e:	d108      	bne.n	8021242 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8021230:	687a      	ldr	r2, [r7, #4]
 8021232:	23a9      	movs	r3, #169	@ 0xa9
 8021234:	009b      	lsls	r3, r3, #2
 8021236:	2101      	movs	r1, #1
 8021238:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 802123a:	687b      	ldr	r3, [r7, #4]
 802123c:	0018      	movs	r0, r3
 802123e:	f000 f94a 	bl	80214d6 <USBD_CtlSendStatus>
  }
}
 8021242:	46c0      	nop			@ (mov r8, r8)
 8021244:	46bd      	mov	sp, r7
 8021246:	b002      	add	sp, #8
 8021248:	bd80      	pop	{r7, pc}

0802124a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 802124a:	b580      	push	{r7, lr}
 802124c:	b082      	sub	sp, #8
 802124e:	af00      	add	r7, sp, #0
 8021250:	6078      	str	r0, [r7, #4]
 8021252:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021254:	687a      	ldr	r2, [r7, #4]
 8021256:	23a7      	movs	r3, #167	@ 0xa7
 8021258:	009b      	lsls	r3, r3, #2
 802125a:	5cd3      	ldrb	r3, [r2, r3]
 802125c:	3b01      	subs	r3, #1
 802125e:	2b02      	cmp	r3, #2
 8021260:	d80d      	bhi.n	802127e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021262:	683b      	ldr	r3, [r7, #0]
 8021264:	885b      	ldrh	r3, [r3, #2]
 8021266:	2b01      	cmp	r3, #1
 8021268:	d110      	bne.n	802128c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 802126a:	687a      	ldr	r2, [r7, #4]
 802126c:	23a9      	movs	r3, #169	@ 0xa9
 802126e:	009b      	lsls	r3, r3, #2
 8021270:	2100      	movs	r1, #0
 8021272:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8021274:	687b      	ldr	r3, [r7, #4]
 8021276:	0018      	movs	r0, r3
 8021278:	f000 f92d 	bl	80214d6 <USBD_CtlSendStatus>
      }
      break;
 802127c:	e006      	b.n	802128c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 802127e:	683a      	ldr	r2, [r7, #0]
 8021280:	687b      	ldr	r3, [r7, #4]
 8021282:	0011      	movs	r1, r2
 8021284:	0018      	movs	r0, r3
 8021286:	f000 f83e 	bl	8021306 <USBD_CtlError>
      break;
 802128a:	e000      	b.n	802128e <USBD_ClrFeature+0x44>
      break;
 802128c:	46c0      	nop			@ (mov r8, r8)
  }
}
 802128e:	46c0      	nop			@ (mov r8, r8)
 8021290:	46bd      	mov	sp, r7
 8021292:	b002      	add	sp, #8
 8021294:	bd80      	pop	{r7, pc}

08021296 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8021296:	b580      	push	{r7, lr}
 8021298:	b082      	sub	sp, #8
 802129a:	af00      	add	r7, sp, #0
 802129c:	6078      	str	r0, [r7, #4]
 802129e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80212a0:	683b      	ldr	r3, [r7, #0]
 80212a2:	781a      	ldrb	r2, [r3, #0]
 80212a4:	687b      	ldr	r3, [r7, #4]
 80212a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80212a8:	683b      	ldr	r3, [r7, #0]
 80212aa:	785a      	ldrb	r2, [r3, #1]
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80212b0:	683b      	ldr	r3, [r7, #0]
 80212b2:	3302      	adds	r3, #2
 80212b4:	781b      	ldrb	r3, [r3, #0]
 80212b6:	001a      	movs	r2, r3
 80212b8:	683b      	ldr	r3, [r7, #0]
 80212ba:	3303      	adds	r3, #3
 80212bc:	781b      	ldrb	r3, [r3, #0]
 80212be:	021b      	lsls	r3, r3, #8
 80212c0:	b29b      	uxth	r3, r3
 80212c2:	18d3      	adds	r3, r2, r3
 80212c4:	b29a      	uxth	r2, r3
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80212ca:	683b      	ldr	r3, [r7, #0]
 80212cc:	3304      	adds	r3, #4
 80212ce:	781b      	ldrb	r3, [r3, #0]
 80212d0:	001a      	movs	r2, r3
 80212d2:	683b      	ldr	r3, [r7, #0]
 80212d4:	3305      	adds	r3, #5
 80212d6:	781b      	ldrb	r3, [r3, #0]
 80212d8:	021b      	lsls	r3, r3, #8
 80212da:	b29b      	uxth	r3, r3
 80212dc:	18d3      	adds	r3, r2, r3
 80212de:	b29a      	uxth	r2, r3
 80212e0:	687b      	ldr	r3, [r7, #4]
 80212e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80212e4:	683b      	ldr	r3, [r7, #0]
 80212e6:	3306      	adds	r3, #6
 80212e8:	781b      	ldrb	r3, [r3, #0]
 80212ea:	001a      	movs	r2, r3
 80212ec:	683b      	ldr	r3, [r7, #0]
 80212ee:	3307      	adds	r3, #7
 80212f0:	781b      	ldrb	r3, [r3, #0]
 80212f2:	021b      	lsls	r3, r3, #8
 80212f4:	b29b      	uxth	r3, r3
 80212f6:	18d3      	adds	r3, r2, r3
 80212f8:	b29a      	uxth	r2, r3
 80212fa:	687b      	ldr	r3, [r7, #4]
 80212fc:	80da      	strh	r2, [r3, #6]

}
 80212fe:	46c0      	nop			@ (mov r8, r8)
 8021300:	46bd      	mov	sp, r7
 8021302:	b002      	add	sp, #8
 8021304:	bd80      	pop	{r7, pc}

08021306 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8021306:	b580      	push	{r7, lr}
 8021308:	b082      	sub	sp, #8
 802130a:	af00      	add	r7, sp, #0
 802130c:	6078      	str	r0, [r7, #4]
 802130e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8021310:	687b      	ldr	r3, [r7, #4]
 8021312:	2180      	movs	r1, #128	@ 0x80
 8021314:	0018      	movs	r0, r3
 8021316:	f000 fd1e 	bl	8021d56 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 802131a:	687b      	ldr	r3, [r7, #4]
 802131c:	2100      	movs	r1, #0
 802131e:	0018      	movs	r0, r3
 8021320:	f000 fd19 	bl	8021d56 <USBD_LL_StallEP>
}
 8021324:	46c0      	nop			@ (mov r8, r8)
 8021326:	46bd      	mov	sp, r7
 8021328:	b002      	add	sp, #8
 802132a:	bd80      	pop	{r7, pc}

0802132c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 802132c:	b590      	push	{r4, r7, lr}
 802132e:	b087      	sub	sp, #28
 8021330:	af00      	add	r7, sp, #0
 8021332:	60f8      	str	r0, [r7, #12]
 8021334:	60b9      	str	r1, [r7, #8]
 8021336:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8021338:	2417      	movs	r4, #23
 802133a:	193b      	adds	r3, r7, r4
 802133c:	2200      	movs	r2, #0
 802133e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8021340:	68fb      	ldr	r3, [r7, #12]
 8021342:	2b00      	cmp	r3, #0
 8021344:	d03c      	beq.n	80213c0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8021346:	68fb      	ldr	r3, [r7, #12]
 8021348:	0018      	movs	r0, r3
 802134a:	f000 f83d 	bl	80213c8 <USBD_GetLen>
 802134e:	0003      	movs	r3, r0
 8021350:	3301      	adds	r3, #1
 8021352:	b29b      	uxth	r3, r3
 8021354:	18db      	adds	r3, r3, r3
 8021356:	b29a      	uxth	r2, r3
 8021358:	687b      	ldr	r3, [r7, #4]
 802135a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 802135c:	193b      	adds	r3, r7, r4
 802135e:	781b      	ldrb	r3, [r3, #0]
 8021360:	193a      	adds	r2, r7, r4
 8021362:	1c59      	adds	r1, r3, #1
 8021364:	7011      	strb	r1, [r2, #0]
 8021366:	001a      	movs	r2, r3
 8021368:	68bb      	ldr	r3, [r7, #8]
 802136a:	189b      	adds	r3, r3, r2
 802136c:	687a      	ldr	r2, [r7, #4]
 802136e:	7812      	ldrb	r2, [r2, #0]
 8021370:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8021372:	193b      	adds	r3, r7, r4
 8021374:	781b      	ldrb	r3, [r3, #0]
 8021376:	193a      	adds	r2, r7, r4
 8021378:	1c59      	adds	r1, r3, #1
 802137a:	7011      	strb	r1, [r2, #0]
 802137c:	001a      	movs	r2, r3
 802137e:	68bb      	ldr	r3, [r7, #8]
 8021380:	189b      	adds	r3, r3, r2
 8021382:	2203      	movs	r2, #3
 8021384:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8021386:	e017      	b.n	80213b8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8021388:	68fb      	ldr	r3, [r7, #12]
 802138a:	1c5a      	adds	r2, r3, #1
 802138c:	60fa      	str	r2, [r7, #12]
 802138e:	2417      	movs	r4, #23
 8021390:	193a      	adds	r2, r7, r4
 8021392:	7812      	ldrb	r2, [r2, #0]
 8021394:	1939      	adds	r1, r7, r4
 8021396:	1c50      	adds	r0, r2, #1
 8021398:	7008      	strb	r0, [r1, #0]
 802139a:	0011      	movs	r1, r2
 802139c:	68ba      	ldr	r2, [r7, #8]
 802139e:	1852      	adds	r2, r2, r1
 80213a0:	781b      	ldrb	r3, [r3, #0]
 80213a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80213a4:	193b      	adds	r3, r7, r4
 80213a6:	781b      	ldrb	r3, [r3, #0]
 80213a8:	193a      	adds	r2, r7, r4
 80213aa:	1c59      	adds	r1, r3, #1
 80213ac:	7011      	strb	r1, [r2, #0]
 80213ae:	001a      	movs	r2, r3
 80213b0:	68bb      	ldr	r3, [r7, #8]
 80213b2:	189b      	adds	r3, r3, r2
 80213b4:	2200      	movs	r2, #0
 80213b6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80213b8:	68fb      	ldr	r3, [r7, #12]
 80213ba:	781b      	ldrb	r3, [r3, #0]
 80213bc:	2b00      	cmp	r3, #0
 80213be:	d1e3      	bne.n	8021388 <USBD_GetString+0x5c>
    }
  }
}
 80213c0:	46c0      	nop			@ (mov r8, r8)
 80213c2:	46bd      	mov	sp, r7
 80213c4:	b007      	add	sp, #28
 80213c6:	bd90      	pop	{r4, r7, pc}

080213c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80213c8:	b580      	push	{r7, lr}
 80213ca:	b084      	sub	sp, #16
 80213cc:	af00      	add	r7, sp, #0
 80213ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80213d0:	230f      	movs	r3, #15
 80213d2:	18fb      	adds	r3, r7, r3
 80213d4:	2200      	movs	r2, #0
 80213d6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80213d8:	e008      	b.n	80213ec <USBD_GetLen+0x24>
  {
    len++;
 80213da:	210f      	movs	r1, #15
 80213dc:	187b      	adds	r3, r7, r1
 80213de:	781a      	ldrb	r2, [r3, #0]
 80213e0:	187b      	adds	r3, r7, r1
 80213e2:	3201      	adds	r2, #1
 80213e4:	701a      	strb	r2, [r3, #0]
    buf++;
 80213e6:	687b      	ldr	r3, [r7, #4]
 80213e8:	3301      	adds	r3, #1
 80213ea:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80213ec:	687b      	ldr	r3, [r7, #4]
 80213ee:	781b      	ldrb	r3, [r3, #0]
 80213f0:	2b00      	cmp	r3, #0
 80213f2:	d1f2      	bne.n	80213da <USBD_GetLen+0x12>
  }

  return len;
 80213f4:	230f      	movs	r3, #15
 80213f6:	18fb      	adds	r3, r7, r3
 80213f8:	781b      	ldrb	r3, [r3, #0]
}
 80213fa:	0018      	movs	r0, r3
 80213fc:	46bd      	mov	sp, r7
 80213fe:	b004      	add	sp, #16
 8021400:	bd80      	pop	{r7, pc}

08021402 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8021402:	b580      	push	{r7, lr}
 8021404:	b084      	sub	sp, #16
 8021406:	af00      	add	r7, sp, #0
 8021408:	60f8      	str	r0, [r7, #12]
 802140a:	60b9      	str	r1, [r7, #8]
 802140c:	1dbb      	adds	r3, r7, #6
 802140e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8021410:	68fa      	ldr	r2, [r7, #12]
 8021412:	23a5      	movs	r3, #165	@ 0xa5
 8021414:	009b      	lsls	r3, r3, #2
 8021416:	2102      	movs	r1, #2
 8021418:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 802141a:	1dbb      	adds	r3, r7, #6
 802141c:	881a      	ldrh	r2, [r3, #0]
 802141e:	68fb      	ldr	r3, [r7, #12]
 8021420:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8021422:	1dbb      	adds	r3, r7, #6
 8021424:	881a      	ldrh	r2, [r3, #0]
 8021426:	68fb      	ldr	r3, [r7, #12]
 8021428:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802142a:	1dbb      	adds	r3, r7, #6
 802142c:	881b      	ldrh	r3, [r3, #0]
 802142e:	68ba      	ldr	r2, [r7, #8]
 8021430:	68f8      	ldr	r0, [r7, #12]
 8021432:	2100      	movs	r1, #0
 8021434:	f000 fd41 	bl	8021eba <USBD_LL_Transmit>

  return USBD_OK;
 8021438:	2300      	movs	r3, #0
}
 802143a:	0018      	movs	r0, r3
 802143c:	46bd      	mov	sp, r7
 802143e:	b004      	add	sp, #16
 8021440:	bd80      	pop	{r7, pc}

08021442 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8021442:	b580      	push	{r7, lr}
 8021444:	b084      	sub	sp, #16
 8021446:	af00      	add	r7, sp, #0
 8021448:	60f8      	str	r0, [r7, #12]
 802144a:	60b9      	str	r1, [r7, #8]
 802144c:	1dbb      	adds	r3, r7, #6
 802144e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8021450:	1dbb      	adds	r3, r7, #6
 8021452:	881b      	ldrh	r3, [r3, #0]
 8021454:	68ba      	ldr	r2, [r7, #8]
 8021456:	68f8      	ldr	r0, [r7, #12]
 8021458:	2100      	movs	r1, #0
 802145a:	f000 fd2e 	bl	8021eba <USBD_LL_Transmit>

  return USBD_OK;
 802145e:	2300      	movs	r3, #0
}
 8021460:	0018      	movs	r0, r3
 8021462:	46bd      	mov	sp, r7
 8021464:	b004      	add	sp, #16
 8021466:	bd80      	pop	{r7, pc}

08021468 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8021468:	b580      	push	{r7, lr}
 802146a:	b084      	sub	sp, #16
 802146c:	af00      	add	r7, sp, #0
 802146e:	60f8      	str	r0, [r7, #12]
 8021470:	60b9      	str	r1, [r7, #8]
 8021472:	1dbb      	adds	r3, r7, #6
 8021474:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8021476:	68fa      	ldr	r2, [r7, #12]
 8021478:	23a5      	movs	r3, #165	@ 0xa5
 802147a:	009b      	lsls	r3, r3, #2
 802147c:	2103      	movs	r1, #3
 802147e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8021480:	1dbb      	adds	r3, r7, #6
 8021482:	8819      	ldrh	r1, [r3, #0]
 8021484:	68fa      	ldr	r2, [r7, #12]
 8021486:	23ae      	movs	r3, #174	@ 0xae
 8021488:	005b      	lsls	r3, r3, #1
 802148a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 802148c:	1dbb      	adds	r3, r7, #6
 802148e:	8819      	ldrh	r1, [r3, #0]
 8021490:	68fa      	ldr	r2, [r7, #12]
 8021492:	23b0      	movs	r3, #176	@ 0xb0
 8021494:	005b      	lsls	r3, r3, #1
 8021496:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8021498:	1dbb      	adds	r3, r7, #6
 802149a:	881b      	ldrh	r3, [r3, #0]
 802149c:	68ba      	ldr	r2, [r7, #8]
 802149e:	68f8      	ldr	r0, [r7, #12]
 80214a0:	2100      	movs	r1, #0
 80214a2:	f000 fd41 	bl	8021f28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80214a6:	2300      	movs	r3, #0
}
 80214a8:	0018      	movs	r0, r3
 80214aa:	46bd      	mov	sp, r7
 80214ac:	b004      	add	sp, #16
 80214ae:	bd80      	pop	{r7, pc}

080214b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80214b0:	b580      	push	{r7, lr}
 80214b2:	b084      	sub	sp, #16
 80214b4:	af00      	add	r7, sp, #0
 80214b6:	60f8      	str	r0, [r7, #12]
 80214b8:	60b9      	str	r1, [r7, #8]
 80214ba:	1dbb      	adds	r3, r7, #6
 80214bc:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80214be:	1dbb      	adds	r3, r7, #6
 80214c0:	881b      	ldrh	r3, [r3, #0]
 80214c2:	68ba      	ldr	r2, [r7, #8]
 80214c4:	68f8      	ldr	r0, [r7, #12]
 80214c6:	2100      	movs	r1, #0
 80214c8:	f000 fd2e 	bl	8021f28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80214cc:	2300      	movs	r3, #0
}
 80214ce:	0018      	movs	r0, r3
 80214d0:	46bd      	mov	sp, r7
 80214d2:	b004      	add	sp, #16
 80214d4:	bd80      	pop	{r7, pc}

080214d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80214d6:	b580      	push	{r7, lr}
 80214d8:	b082      	sub	sp, #8
 80214da:	af00      	add	r7, sp, #0
 80214dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80214de:	687a      	ldr	r2, [r7, #4]
 80214e0:	23a5      	movs	r3, #165	@ 0xa5
 80214e2:	009b      	lsls	r3, r3, #2
 80214e4:	2104      	movs	r1, #4
 80214e6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80214e8:	6878      	ldr	r0, [r7, #4]
 80214ea:	2300      	movs	r3, #0
 80214ec:	2200      	movs	r2, #0
 80214ee:	2100      	movs	r1, #0
 80214f0:	f000 fce3 	bl	8021eba <USBD_LL_Transmit>

  return USBD_OK;
 80214f4:	2300      	movs	r3, #0
}
 80214f6:	0018      	movs	r0, r3
 80214f8:	46bd      	mov	sp, r7
 80214fa:	b002      	add	sp, #8
 80214fc:	bd80      	pop	{r7, pc}

080214fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80214fe:	b580      	push	{r7, lr}
 8021500:	b082      	sub	sp, #8
 8021502:	af00      	add	r7, sp, #0
 8021504:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8021506:	687a      	ldr	r2, [r7, #4]
 8021508:	23a5      	movs	r3, #165	@ 0xa5
 802150a:	009b      	lsls	r3, r3, #2
 802150c:	2105      	movs	r1, #5
 802150e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021510:	6878      	ldr	r0, [r7, #4]
 8021512:	2300      	movs	r3, #0
 8021514:	2200      	movs	r2, #0
 8021516:	2100      	movs	r1, #0
 8021518:	f000 fd06 	bl	8021f28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802151c:	2300      	movs	r3, #0
}
 802151e:	0018      	movs	r0, r3
 8021520:	46bd      	mov	sp, r7
 8021522:	b002      	add	sp, #8
 8021524:	bd80      	pop	{r7, pc}
	...

08021528 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8021528:	b580      	push	{r7, lr}
 802152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 802152c:	4914      	ldr	r1, [pc, #80]	@ (8021580 <MX_USB_DEVICE_Init+0x58>)
 802152e:	4b15      	ldr	r3, [pc, #84]	@ (8021584 <MX_USB_DEVICE_Init+0x5c>)
 8021530:	2200      	movs	r2, #0
 8021532:	0018      	movs	r0, r3
 8021534:	f7fe fdec 	bl	8020110 <USBD_Init>
 8021538:	1e03      	subs	r3, r0, #0
 802153a:	d001      	beq.n	8021540 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 802153c:	f7ea fd0a 	bl	800bf54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8021540:	4a11      	ldr	r2, [pc, #68]	@ (8021588 <MX_USB_DEVICE_Init+0x60>)
 8021542:	4b10      	ldr	r3, [pc, #64]	@ (8021584 <MX_USB_DEVICE_Init+0x5c>)
 8021544:	0011      	movs	r1, r2
 8021546:	0018      	movs	r0, r3
 8021548:	f7fe fe13 	bl	8020172 <USBD_RegisterClass>
 802154c:	1e03      	subs	r3, r0, #0
 802154e:	d001      	beq.n	8021554 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8021550:	f7ea fd00 	bl	800bf54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8021554:	4a0d      	ldr	r2, [pc, #52]	@ (802158c <MX_USB_DEVICE_Init+0x64>)
 8021556:	4b0b      	ldr	r3, [pc, #44]	@ (8021584 <MX_USB_DEVICE_Init+0x5c>)
 8021558:	0011      	movs	r1, r2
 802155a:	0018      	movs	r0, r3
 802155c:	f7fe fd28 	bl	801ffb0 <USBD_CDC_RegisterInterface>
 8021560:	1e03      	subs	r3, r0, #0
 8021562:	d001      	beq.n	8021568 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8021564:	f7ea fcf6 	bl	800bf54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8021568:	4b06      	ldr	r3, [pc, #24]	@ (8021584 <MX_USB_DEVICE_Init+0x5c>)
 802156a:	0018      	movs	r0, r3
 802156c:	f7fe fe21 	bl	80201b2 <USBD_Start>
 8021570:	1e03      	subs	r3, r0, #0
 8021572:	d001      	beq.n	8021578 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8021574:	f7ea fcee 	bl	800bf54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8021578:	46c0      	nop			@ (mov r8, r8)
 802157a:	46bd      	mov	sp, r7
 802157c:	bd80      	pop	{r7, pc}
 802157e:	46c0      	nop			@ (mov r8, r8)
 8021580:	20000218 	.word	0x20000218
 8021584:	20002264 	.word	0x20002264
 8021588:	20000104 	.word	0x20000104
 802158c:	20000208 	.word	0x20000208

08021590 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8021590:	b580      	push	{r7, lr}
 8021592:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8021594:	4907      	ldr	r1, [pc, #28]	@ (80215b4 <CDC_Init_FS+0x24>)
 8021596:	4b08      	ldr	r3, [pc, #32]	@ (80215b8 <CDC_Init_FS+0x28>)
 8021598:	2200      	movs	r2, #0
 802159a:	0018      	movs	r0, r3
 802159c:	f7fe fd23 	bl	801ffe6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80215a0:	4a06      	ldr	r2, [pc, #24]	@ (80215bc <CDC_Init_FS+0x2c>)
 80215a2:	4b05      	ldr	r3, [pc, #20]	@ (80215b8 <CDC_Init_FS+0x28>)
 80215a4:	0011      	movs	r1, r2
 80215a6:	0018      	movs	r0, r3
 80215a8:	f7fe fd39 	bl	802001e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80215ac:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80215ae:	0018      	movs	r0, r3
 80215b0:	46bd      	mov	sp, r7
 80215b2:	bd80      	pop	{r7, pc}
 80215b4:	200029e8 	.word	0x200029e8
 80215b8:	20002264 	.word	0x20002264
 80215bc:	200025e8 	.word	0x200025e8

080215c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80215c0:	b580      	push	{r7, lr}
 80215c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80215c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80215c6:	0018      	movs	r0, r3
 80215c8:	46bd      	mov	sp, r7
 80215ca:	bd80      	pop	{r7, pc}

080215cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80215cc:	b580      	push	{r7, lr}
 80215ce:	b082      	sub	sp, #8
 80215d0:	af00      	add	r7, sp, #0
 80215d2:	6039      	str	r1, [r7, #0]
 80215d4:	0011      	movs	r1, r2
 80215d6:	1dfb      	adds	r3, r7, #7
 80215d8:	1c02      	adds	r2, r0, #0
 80215da:	701a      	strb	r2, [r3, #0]
 80215dc:	1d3b      	adds	r3, r7, #4
 80215de:	1c0a      	adds	r2, r1, #0
 80215e0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80215e2:	1dfb      	adds	r3, r7, #7
 80215e4:	781b      	ldrb	r3, [r3, #0]
 80215e6:	2b23      	cmp	r3, #35	@ 0x23
 80215e8:	d804      	bhi.n	80215f4 <CDC_Control_FS+0x28>
 80215ea:	009a      	lsls	r2, r3, #2
 80215ec:	4b04      	ldr	r3, [pc, #16]	@ (8021600 <CDC_Control_FS+0x34>)
 80215ee:	18d3      	adds	r3, r2, r3
 80215f0:	681b      	ldr	r3, [r3, #0]
 80215f2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80215f4:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80215f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80215f8:	0018      	movs	r0, r3
 80215fa:	46bd      	mov	sp, r7
 80215fc:	b002      	add	sp, #8
 80215fe:	bd80      	pop	{r7, pc}
 8021600:	0802cd58 	.word	0x0802cd58

08021604 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8021604:	b580      	push	{r7, lr}
 8021606:	b082      	sub	sp, #8
 8021608:	af00      	add	r7, sp, #0
 802160a:	6078      	str	r0, [r7, #4]
 802160c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 802160e:	4b12      	ldr	r3, [pc, #72]	@ (8021658 <CDC_Receive_FS+0x54>)
 8021610:	781b      	ldrb	r3, [r3, #0]
 8021612:	2b00      	cmp	r3, #0
 8021614:	d013      	beq.n	802163e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8021616:	683b      	ldr	r3, [r7, #0]
 8021618:	681b      	ldr	r3, [r3, #0]
 802161a:	b29a      	uxth	r2, r3
 802161c:	2301      	movs	r3, #1
 802161e:	425b      	negs	r3, r3
 8021620:	6879      	ldr	r1, [r7, #4]
 8021622:	480e      	ldr	r0, [pc, #56]	@ (802165c <CDC_Receive_FS+0x58>)
 8021624:	f7fa fa46 	bl	801bab4 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8021628:	687a      	ldr	r2, [r7, #4]
 802162a:	4b0d      	ldr	r3, [pc, #52]	@ (8021660 <CDC_Receive_FS+0x5c>)
 802162c:	0011      	movs	r1, r2
 802162e:	0018      	movs	r0, r3
 8021630:	f7fe fcf5 	bl	802001e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8021634:	4b0a      	ldr	r3, [pc, #40]	@ (8021660 <CDC_Receive_FS+0x5c>)
 8021636:	0018      	movs	r0, r3
 8021638:	f7fe fd3c 	bl	80200b4 <USBD_CDC_ReceivePacket>
 802163c:	e006      	b.n	802164c <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 802163e:	683b      	ldr	r3, [r7, #0]
 8021640:	681a      	ldr	r2, [r3, #0]
 8021642:	4b08      	ldr	r3, [pc, #32]	@ (8021664 <CDC_Receive_FS+0x60>)
 8021644:	681b      	ldr	r3, [r3, #0]
 8021646:	18d2      	adds	r2, r2, r3
 8021648:	4b06      	ldr	r3, [pc, #24]	@ (8021664 <CDC_Receive_FS+0x60>)
 802164a:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 802164c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 802164e:	0018      	movs	r0, r3
 8021650:	46bd      	mov	sp, r7
 8021652:	b002      	add	sp, #8
 8021654:	bd80      	pop	{r7, pc}
 8021656:	46c0      	nop			@ (mov r8, r8)
 8021658:	20002528 	.word	0x20002528
 802165c:	2000252c 	.word	0x2000252c
 8021660:	20002264 	.word	0x20002264
 8021664:	200025e4 	.word	0x200025e4

08021668 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8021668:	b5b0      	push	{r4, r5, r7, lr}
 802166a:	b084      	sub	sp, #16
 802166c:	af00      	add	r7, sp, #0
 802166e:	6078      	str	r0, [r7, #4]
 8021670:	000a      	movs	r2, r1
 8021672:	1cbb      	adds	r3, r7, #2
 8021674:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8021676:	230f      	movs	r3, #15
 8021678:	18fb      	adds	r3, r7, r3
 802167a:	2200      	movs	r2, #0
 802167c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 802167e:	4a11      	ldr	r2, [pc, #68]	@ (80216c4 <CDC_Transmit_FS+0x5c>)
 8021680:	23ae      	movs	r3, #174	@ 0xae
 8021682:	009b      	lsls	r3, r3, #2
 8021684:	58d3      	ldr	r3, [r2, r3]
 8021686:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8021688:	68ba      	ldr	r2, [r7, #8]
 802168a:	2385      	movs	r3, #133	@ 0x85
 802168c:	009b      	lsls	r3, r3, #2
 802168e:	58d3      	ldr	r3, [r2, r3]
 8021690:	2b00      	cmp	r3, #0
 8021692:	d001      	beq.n	8021698 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8021694:	2301      	movs	r3, #1
 8021696:	e010      	b.n	80216ba <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8021698:	1cbb      	adds	r3, r7, #2
 802169a:	881a      	ldrh	r2, [r3, #0]
 802169c:	6879      	ldr	r1, [r7, #4]
 802169e:	4b09      	ldr	r3, [pc, #36]	@ (80216c4 <CDC_Transmit_FS+0x5c>)
 80216a0:	0018      	movs	r0, r3
 80216a2:	f7fe fca0 	bl	801ffe6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80216a6:	250f      	movs	r5, #15
 80216a8:	197c      	adds	r4, r7, r5
 80216aa:	4b06      	ldr	r3, [pc, #24]	@ (80216c4 <CDC_Transmit_FS+0x5c>)
 80216ac:	0018      	movs	r0, r3
 80216ae:	f7fe fcca 	bl	8020046 <USBD_CDC_TransmitPacket>
 80216b2:	0003      	movs	r3, r0
 80216b4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80216b6:	197b      	adds	r3, r7, r5
 80216b8:	781b      	ldrb	r3, [r3, #0]
}
 80216ba:	0018      	movs	r0, r3
 80216bc:	46bd      	mov	sp, r7
 80216be:	b004      	add	sp, #16
 80216c0:	bdb0      	pop	{r4, r5, r7, pc}
 80216c2:	46c0      	nop			@ (mov r8, r8)
 80216c4:	20002264 	.word	0x20002264

080216c8 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 80216c8:	b580      	push	{r7, lr}
 80216ca:	af00      	add	r7, sp, #0
  ESPProg = true;
 80216cc:	4b02      	ldr	r3, [pc, #8]	@ (80216d8 <EnableESPProg+0x10>)
 80216ce:	2201      	movs	r2, #1
 80216d0:	701a      	strb	r2, [r3, #0]
}
 80216d2:	46c0      	nop			@ (mov r8, r8)
 80216d4:	46bd      	mov	sp, r7
 80216d6:	bd80      	pop	{r7, pc}
 80216d8:	20002528 	.word	0x20002528

080216dc <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 80216dc:	b580      	push	{r7, lr}
 80216de:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 80216e0:	4b01      	ldr	r3, [pc, #4]	@ (80216e8 <GetUsbRxPointer+0xc>)
}
 80216e2:	0018      	movs	r0, r3
 80216e4:	46bd      	mov	sp, r7
 80216e6:	bd80      	pop	{r7, pc}
 80216e8:	200025e8 	.word	0x200025e8

080216ec <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 80216ec:	b580      	push	{r7, lr}
 80216ee:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 80216f0:	4b07      	ldr	r3, [pc, #28]	@ (8021710 <ResetUsbRxDataSize+0x24>)
 80216f2:	2200      	movs	r2, #0
 80216f4:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 80216f6:	4a07      	ldr	r2, [pc, #28]	@ (8021714 <ResetUsbRxDataSize+0x28>)
 80216f8:	4b07      	ldr	r3, [pc, #28]	@ (8021718 <ResetUsbRxDataSize+0x2c>)
 80216fa:	0011      	movs	r1, r2
 80216fc:	0018      	movs	r0, r3
 80216fe:	f7fe fc8e 	bl	802001e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8021702:	4b05      	ldr	r3, [pc, #20]	@ (8021718 <ResetUsbRxDataSize+0x2c>)
 8021704:	0018      	movs	r0, r3
 8021706:	f7fe fcd5 	bl	80200b4 <USBD_CDC_ReceivePacket>
}
 802170a:	46c0      	nop			@ (mov r8, r8)
 802170c:	46bd      	mov	sp, r7
 802170e:	bd80      	pop	{r7, pc}
 8021710:	200025e4 	.word	0x200025e4
 8021714:	200025e8 	.word	0x200025e8
 8021718:	20002264 	.word	0x20002264

0802171c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 802171c:	b580      	push	{r7, lr}
 802171e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8021720:	4b02      	ldr	r3, [pc, #8]	@ (802172c <GetUsbRxDataSize+0x10>)
 8021722:	681b      	ldr	r3, [r3, #0]
}
 8021724:	0018      	movs	r0, r3
 8021726:	46bd      	mov	sp, r7
 8021728:	bd80      	pop	{r7, pc}
 802172a:	46c0      	nop			@ (mov r8, r8)
 802172c:	200025e4 	.word	0x200025e4

08021730 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8021730:	b580      	push	{r7, lr}
 8021732:	b082      	sub	sp, #8
 8021734:	af00      	add	r7, sp, #0
 8021736:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8021738:	687a      	ldr	r2, [r7, #4]
 802173a:	4b07      	ldr	r3, [pc, #28]	@ (8021758 <GetUsbRxNextChunk+0x28>)
 802173c:	18d2      	adds	r2, r2, r3
 802173e:	4b07      	ldr	r3, [pc, #28]	@ (802175c <GetUsbRxNextChunk+0x2c>)
 8021740:	0011      	movs	r1, r2
 8021742:	0018      	movs	r0, r3
 8021744:	f7fe fc6b 	bl	802001e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8021748:	4b04      	ldr	r3, [pc, #16]	@ (802175c <GetUsbRxNextChunk+0x2c>)
 802174a:	0018      	movs	r0, r3
 802174c:	f7fe fcb2 	bl	80200b4 <USBD_CDC_ReceivePacket>
}
 8021750:	46c0      	nop			@ (mov r8, r8)
 8021752:	46bd      	mov	sp, r7
 8021754:	b002      	add	sp, #8
 8021756:	bd80      	pop	{r7, pc}
 8021758:	200025e8 	.word	0x200025e8
 802175c:	20002264 	.word	0x20002264

08021760 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021760:	b580      	push	{r7, lr}
 8021762:	b082      	sub	sp, #8
 8021764:	af00      	add	r7, sp, #0
 8021766:	0002      	movs	r2, r0
 8021768:	6039      	str	r1, [r7, #0]
 802176a:	1dfb      	adds	r3, r7, #7
 802176c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 802176e:	683b      	ldr	r3, [r7, #0]
 8021770:	2212      	movs	r2, #18
 8021772:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8021774:	4b02      	ldr	r3, [pc, #8]	@ (8021780 <USBD_FS_DeviceDescriptor+0x20>)
}
 8021776:	0018      	movs	r0, r3
 8021778:	46bd      	mov	sp, r7
 802177a:	b002      	add	sp, #8
 802177c:	bd80      	pop	{r7, pc}
 802177e:	46c0      	nop			@ (mov r8, r8)
 8021780:	20000234 	.word	0x20000234

08021784 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021784:	b580      	push	{r7, lr}
 8021786:	b082      	sub	sp, #8
 8021788:	af00      	add	r7, sp, #0
 802178a:	0002      	movs	r2, r0
 802178c:	6039      	str	r1, [r7, #0]
 802178e:	1dfb      	adds	r3, r7, #7
 8021790:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8021792:	683b      	ldr	r3, [r7, #0]
 8021794:	2204      	movs	r2, #4
 8021796:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8021798:	4b02      	ldr	r3, [pc, #8]	@ (80217a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 802179a:	0018      	movs	r0, r3
 802179c:	46bd      	mov	sp, r7
 802179e:	b002      	add	sp, #8
 80217a0:	bd80      	pop	{r7, pc}
 80217a2:	46c0      	nop			@ (mov r8, r8)
 80217a4:	20000248 	.word	0x20000248

080217a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80217a8:	b580      	push	{r7, lr}
 80217aa:	b082      	sub	sp, #8
 80217ac:	af00      	add	r7, sp, #0
 80217ae:	0002      	movs	r2, r0
 80217b0:	6039      	str	r1, [r7, #0]
 80217b2:	1dfb      	adds	r3, r7, #7
 80217b4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80217b6:	1dfb      	adds	r3, r7, #7
 80217b8:	781b      	ldrb	r3, [r3, #0]
 80217ba:	2b00      	cmp	r3, #0
 80217bc:	d106      	bne.n	80217cc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80217be:	683a      	ldr	r2, [r7, #0]
 80217c0:	4908      	ldr	r1, [pc, #32]	@ (80217e4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80217c2:	4b09      	ldr	r3, [pc, #36]	@ (80217e8 <USBD_FS_ProductStrDescriptor+0x40>)
 80217c4:	0018      	movs	r0, r3
 80217c6:	f7ff fdb1 	bl	802132c <USBD_GetString>
 80217ca:	e005      	b.n	80217d8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80217cc:	683a      	ldr	r2, [r7, #0]
 80217ce:	4905      	ldr	r1, [pc, #20]	@ (80217e4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80217d0:	4b05      	ldr	r3, [pc, #20]	@ (80217e8 <USBD_FS_ProductStrDescriptor+0x40>)
 80217d2:	0018      	movs	r0, r3
 80217d4:	f7ff fdaa 	bl	802132c <USBD_GetString>
  }
  return USBD_StrDesc;
 80217d8:	4b02      	ldr	r3, [pc, #8]	@ (80217e4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80217da:	0018      	movs	r0, r3
 80217dc:	46bd      	mov	sp, r7
 80217de:	b002      	add	sp, #8
 80217e0:	bd80      	pop	{r7, pc}
 80217e2:	46c0      	nop			@ (mov r8, r8)
 80217e4:	20002de8 	.word	0x20002de8
 80217e8:	0802c724 	.word	0x0802c724

080217ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80217ec:	b580      	push	{r7, lr}
 80217ee:	b082      	sub	sp, #8
 80217f0:	af00      	add	r7, sp, #0
 80217f2:	0002      	movs	r2, r0
 80217f4:	6039      	str	r1, [r7, #0]
 80217f6:	1dfb      	adds	r3, r7, #7
 80217f8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80217fa:	683a      	ldr	r2, [r7, #0]
 80217fc:	4904      	ldr	r1, [pc, #16]	@ (8021810 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80217fe:	4b05      	ldr	r3, [pc, #20]	@ (8021814 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8021800:	0018      	movs	r0, r3
 8021802:	f7ff fd93 	bl	802132c <USBD_GetString>
  return USBD_StrDesc;
 8021806:	4b02      	ldr	r3, [pc, #8]	@ (8021810 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8021808:	0018      	movs	r0, r3
 802180a:	46bd      	mov	sp, r7
 802180c:	b002      	add	sp, #8
 802180e:	bd80      	pop	{r7, pc}
 8021810:	20002de8 	.word	0x20002de8
 8021814:	0802c73c 	.word	0x0802c73c

08021818 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021818:	b580      	push	{r7, lr}
 802181a:	b082      	sub	sp, #8
 802181c:	af00      	add	r7, sp, #0
 802181e:	0002      	movs	r2, r0
 8021820:	6039      	str	r1, [r7, #0]
 8021822:	1dfb      	adds	r3, r7, #7
 8021824:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8021826:	683b      	ldr	r3, [r7, #0]
 8021828:	221a      	movs	r2, #26
 802182a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802182c:	f000 f84c 	bl	80218c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8021830:	4b02      	ldr	r3, [pc, #8]	@ (802183c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8021832:	0018      	movs	r0, r3
 8021834:	46bd      	mov	sp, r7
 8021836:	b002      	add	sp, #8
 8021838:	bd80      	pop	{r7, pc}
 802183a:	46c0      	nop			@ (mov r8, r8)
 802183c:	2000024c 	.word	0x2000024c

08021840 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021840:	b580      	push	{r7, lr}
 8021842:	b082      	sub	sp, #8
 8021844:	af00      	add	r7, sp, #0
 8021846:	0002      	movs	r2, r0
 8021848:	6039      	str	r1, [r7, #0]
 802184a:	1dfb      	adds	r3, r7, #7
 802184c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 802184e:	1dfb      	adds	r3, r7, #7
 8021850:	781b      	ldrb	r3, [r3, #0]
 8021852:	2b00      	cmp	r3, #0
 8021854:	d106      	bne.n	8021864 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8021856:	683a      	ldr	r2, [r7, #0]
 8021858:	4908      	ldr	r1, [pc, #32]	@ (802187c <USBD_FS_ConfigStrDescriptor+0x3c>)
 802185a:	4b09      	ldr	r3, [pc, #36]	@ (8021880 <USBD_FS_ConfigStrDescriptor+0x40>)
 802185c:	0018      	movs	r0, r3
 802185e:	f7ff fd65 	bl	802132c <USBD_GetString>
 8021862:	e005      	b.n	8021870 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8021864:	683a      	ldr	r2, [r7, #0]
 8021866:	4905      	ldr	r1, [pc, #20]	@ (802187c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8021868:	4b05      	ldr	r3, [pc, #20]	@ (8021880 <USBD_FS_ConfigStrDescriptor+0x40>)
 802186a:	0018      	movs	r0, r3
 802186c:	f7ff fd5e 	bl	802132c <USBD_GetString>
  }
  return USBD_StrDesc;
 8021870:	4b02      	ldr	r3, [pc, #8]	@ (802187c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8021872:	0018      	movs	r0, r3
 8021874:	46bd      	mov	sp, r7
 8021876:	b002      	add	sp, #8
 8021878:	bd80      	pop	{r7, pc}
 802187a:	46c0      	nop			@ (mov r8, r8)
 802187c:	20002de8 	.word	0x20002de8
 8021880:	0802c750 	.word	0x0802c750

08021884 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021884:	b580      	push	{r7, lr}
 8021886:	b082      	sub	sp, #8
 8021888:	af00      	add	r7, sp, #0
 802188a:	0002      	movs	r2, r0
 802188c:	6039      	str	r1, [r7, #0]
 802188e:	1dfb      	adds	r3, r7, #7
 8021890:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8021892:	1dfb      	adds	r3, r7, #7
 8021894:	781b      	ldrb	r3, [r3, #0]
 8021896:	2b00      	cmp	r3, #0
 8021898:	d106      	bne.n	80218a8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802189a:	683a      	ldr	r2, [r7, #0]
 802189c:	4908      	ldr	r1, [pc, #32]	@ (80218c0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 802189e:	4b09      	ldr	r3, [pc, #36]	@ (80218c4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80218a0:	0018      	movs	r0, r3
 80218a2:	f7ff fd43 	bl	802132c <USBD_GetString>
 80218a6:	e005      	b.n	80218b4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80218a8:	683a      	ldr	r2, [r7, #0]
 80218aa:	4905      	ldr	r1, [pc, #20]	@ (80218c0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80218ac:	4b05      	ldr	r3, [pc, #20]	@ (80218c4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80218ae:	0018      	movs	r0, r3
 80218b0:	f7ff fd3c 	bl	802132c <USBD_GetString>
  }
  return USBD_StrDesc;
 80218b4:	4b02      	ldr	r3, [pc, #8]	@ (80218c0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80218b6:	0018      	movs	r0, r3
 80218b8:	46bd      	mov	sp, r7
 80218ba:	b002      	add	sp, #8
 80218bc:	bd80      	pop	{r7, pc}
 80218be:	46c0      	nop			@ (mov r8, r8)
 80218c0:	20002de8 	.word	0x20002de8
 80218c4:	0802c75c 	.word	0x0802c75c

080218c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80218c8:	b580      	push	{r7, lr}
 80218ca:	b084      	sub	sp, #16
 80218cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80218ce:	4b10      	ldr	r3, [pc, #64]	@ (8021910 <Get_SerialNum+0x48>)
 80218d0:	681b      	ldr	r3, [r3, #0]
 80218d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80218d4:	4b0f      	ldr	r3, [pc, #60]	@ (8021914 <Get_SerialNum+0x4c>)
 80218d6:	681b      	ldr	r3, [r3, #0]
 80218d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80218da:	4b0f      	ldr	r3, [pc, #60]	@ (8021918 <Get_SerialNum+0x50>)
 80218dc:	681b      	ldr	r3, [r3, #0]
 80218de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80218e0:	68fa      	ldr	r2, [r7, #12]
 80218e2:	687b      	ldr	r3, [r7, #4]
 80218e4:	18d3      	adds	r3, r2, r3
 80218e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80218e8:	68fb      	ldr	r3, [r7, #12]
 80218ea:	2b00      	cmp	r3, #0
 80218ec:	d00b      	beq.n	8021906 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80218ee:	490b      	ldr	r1, [pc, #44]	@ (802191c <Get_SerialNum+0x54>)
 80218f0:	68fb      	ldr	r3, [r7, #12]
 80218f2:	2208      	movs	r2, #8
 80218f4:	0018      	movs	r0, r3
 80218f6:	f000 f815 	bl	8021924 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80218fa:	4909      	ldr	r1, [pc, #36]	@ (8021920 <Get_SerialNum+0x58>)
 80218fc:	68bb      	ldr	r3, [r7, #8]
 80218fe:	2204      	movs	r2, #4
 8021900:	0018      	movs	r0, r3
 8021902:	f000 f80f 	bl	8021924 <IntToUnicode>
  }
}
 8021906:	46c0      	nop			@ (mov r8, r8)
 8021908:	46bd      	mov	sp, r7
 802190a:	b004      	add	sp, #16
 802190c:	bd80      	pop	{r7, pc}
 802190e:	46c0      	nop			@ (mov r8, r8)
 8021910:	1ff80050 	.word	0x1ff80050
 8021914:	1ff80054 	.word	0x1ff80054
 8021918:	1ff80058 	.word	0x1ff80058
 802191c:	2000024e 	.word	0x2000024e
 8021920:	2000025e 	.word	0x2000025e

08021924 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8021924:	b580      	push	{r7, lr}
 8021926:	b086      	sub	sp, #24
 8021928:	af00      	add	r7, sp, #0
 802192a:	60f8      	str	r0, [r7, #12]
 802192c:	60b9      	str	r1, [r7, #8]
 802192e:	1dfb      	adds	r3, r7, #7
 8021930:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8021932:	2117      	movs	r1, #23
 8021934:	187b      	adds	r3, r7, r1
 8021936:	2200      	movs	r2, #0
 8021938:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 802193a:	187b      	adds	r3, r7, r1
 802193c:	2200      	movs	r2, #0
 802193e:	701a      	strb	r2, [r3, #0]
 8021940:	e02f      	b.n	80219a2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8021942:	68fb      	ldr	r3, [r7, #12]
 8021944:	0f1b      	lsrs	r3, r3, #28
 8021946:	2b09      	cmp	r3, #9
 8021948:	d80d      	bhi.n	8021966 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802194a:	68fb      	ldr	r3, [r7, #12]
 802194c:	0f1b      	lsrs	r3, r3, #28
 802194e:	b2da      	uxtb	r2, r3
 8021950:	2317      	movs	r3, #23
 8021952:	18fb      	adds	r3, r7, r3
 8021954:	781b      	ldrb	r3, [r3, #0]
 8021956:	005b      	lsls	r3, r3, #1
 8021958:	0019      	movs	r1, r3
 802195a:	68bb      	ldr	r3, [r7, #8]
 802195c:	185b      	adds	r3, r3, r1
 802195e:	3230      	adds	r2, #48	@ 0x30
 8021960:	b2d2      	uxtb	r2, r2
 8021962:	701a      	strb	r2, [r3, #0]
 8021964:	e00c      	b.n	8021980 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8021966:	68fb      	ldr	r3, [r7, #12]
 8021968:	0f1b      	lsrs	r3, r3, #28
 802196a:	b2da      	uxtb	r2, r3
 802196c:	2317      	movs	r3, #23
 802196e:	18fb      	adds	r3, r7, r3
 8021970:	781b      	ldrb	r3, [r3, #0]
 8021972:	005b      	lsls	r3, r3, #1
 8021974:	0019      	movs	r1, r3
 8021976:	68bb      	ldr	r3, [r7, #8]
 8021978:	185b      	adds	r3, r3, r1
 802197a:	3237      	adds	r2, #55	@ 0x37
 802197c:	b2d2      	uxtb	r2, r2
 802197e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8021980:	68fb      	ldr	r3, [r7, #12]
 8021982:	011b      	lsls	r3, r3, #4
 8021984:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8021986:	2117      	movs	r1, #23
 8021988:	187b      	adds	r3, r7, r1
 802198a:	781b      	ldrb	r3, [r3, #0]
 802198c:	005b      	lsls	r3, r3, #1
 802198e:	3301      	adds	r3, #1
 8021990:	68ba      	ldr	r2, [r7, #8]
 8021992:	18d3      	adds	r3, r2, r3
 8021994:	2200      	movs	r2, #0
 8021996:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8021998:	187b      	adds	r3, r7, r1
 802199a:	781a      	ldrb	r2, [r3, #0]
 802199c:	187b      	adds	r3, r7, r1
 802199e:	3201      	adds	r2, #1
 80219a0:	701a      	strb	r2, [r3, #0]
 80219a2:	2317      	movs	r3, #23
 80219a4:	18fa      	adds	r2, r7, r3
 80219a6:	1dfb      	adds	r3, r7, #7
 80219a8:	7812      	ldrb	r2, [r2, #0]
 80219aa:	781b      	ldrb	r3, [r3, #0]
 80219ac:	429a      	cmp	r2, r3
 80219ae:	d3c8      	bcc.n	8021942 <IntToUnicode+0x1e>
  }
}
 80219b0:	46c0      	nop			@ (mov r8, r8)
 80219b2:	46c0      	nop			@ (mov r8, r8)
 80219b4:	46bd      	mov	sp, r7
 80219b6:	b006      	add	sp, #24
 80219b8:	bd80      	pop	{r7, pc}
	...

080219bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80219bc:	b580      	push	{r7, lr}
 80219be:	b082      	sub	sp, #8
 80219c0:	af00      	add	r7, sp, #0
 80219c2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80219c4:	687b      	ldr	r3, [r7, #4]
 80219c6:	681b      	ldr	r3, [r3, #0]
 80219c8:	4a0a      	ldr	r2, [pc, #40]	@ (80219f4 <HAL_PCD_MspInit+0x38>)
 80219ca:	4293      	cmp	r3, r2
 80219cc:	d10e      	bne.n	80219ec <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80219ce:	4b0a      	ldr	r3, [pc, #40]	@ (80219f8 <HAL_PCD_MspInit+0x3c>)
 80219d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80219d2:	4b09      	ldr	r3, [pc, #36]	@ (80219f8 <HAL_PCD_MspInit+0x3c>)
 80219d4:	2180      	movs	r1, #128	@ 0x80
 80219d6:	0409      	lsls	r1, r1, #16
 80219d8:	430a      	orrs	r2, r1
 80219da:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80219dc:	2200      	movs	r2, #0
 80219de:	2100      	movs	r1, #0
 80219e0:	201f      	movs	r0, #31
 80219e2:	f7f2 f847 	bl	8013a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80219e6:	201f      	movs	r0, #31
 80219e8:	f7f2 f859 	bl	8013a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80219ec:	46c0      	nop			@ (mov r8, r8)
 80219ee:	46bd      	mov	sp, r7
 80219f0:	b002      	add	sp, #8
 80219f2:	bd80      	pop	{r7, pc}
 80219f4:	40005c00 	.word	0x40005c00
 80219f8:	40021000 	.word	0x40021000

080219fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80219fc:	b580      	push	{r7, lr}
 80219fe:	b082      	sub	sp, #8
 8021a00:	af00      	add	r7, sp, #0
 8021a02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8021a04:	687a      	ldr	r2, [r7, #4]
 8021a06:	23bc      	movs	r3, #188	@ 0xbc
 8021a08:	009b      	lsls	r3, r3, #2
 8021a0a:	58d2      	ldr	r2, [r2, r3]
 8021a0c:	687b      	ldr	r3, [r7, #4]
 8021a0e:	21ac      	movs	r1, #172	@ 0xac
 8021a10:	0089      	lsls	r1, r1, #2
 8021a12:	468c      	mov	ip, r1
 8021a14:	4463      	add	r3, ip
 8021a16:	0019      	movs	r1, r3
 8021a18:	0010      	movs	r0, r2
 8021a1a:	f7fe fc1d 	bl	8020258 <USBD_LL_SetupStage>
}
 8021a1e:	46c0      	nop			@ (mov r8, r8)
 8021a20:	46bd      	mov	sp, r7
 8021a22:	b002      	add	sp, #8
 8021a24:	bd80      	pop	{r7, pc}

08021a26 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021a26:	b590      	push	{r4, r7, lr}
 8021a28:	b083      	sub	sp, #12
 8021a2a:	af00      	add	r7, sp, #0
 8021a2c:	6078      	str	r0, [r7, #4]
 8021a2e:	000a      	movs	r2, r1
 8021a30:	1cfb      	adds	r3, r7, #3
 8021a32:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8021a34:	687a      	ldr	r2, [r7, #4]
 8021a36:	23bc      	movs	r3, #188	@ 0xbc
 8021a38:	009b      	lsls	r3, r3, #2
 8021a3a:	58d4      	ldr	r4, [r2, r3]
 8021a3c:	1cfb      	adds	r3, r7, #3
 8021a3e:	781a      	ldrb	r2, [r3, #0]
 8021a40:	6878      	ldr	r0, [r7, #4]
 8021a42:	23be      	movs	r3, #190	@ 0xbe
 8021a44:	0059      	lsls	r1, r3, #1
 8021a46:	0013      	movs	r3, r2
 8021a48:	009b      	lsls	r3, r3, #2
 8021a4a:	189b      	adds	r3, r3, r2
 8021a4c:	00db      	lsls	r3, r3, #3
 8021a4e:	18c3      	adds	r3, r0, r3
 8021a50:	185b      	adds	r3, r3, r1
 8021a52:	681a      	ldr	r2, [r3, #0]
 8021a54:	1cfb      	adds	r3, r7, #3
 8021a56:	781b      	ldrb	r3, [r3, #0]
 8021a58:	0019      	movs	r1, r3
 8021a5a:	0020      	movs	r0, r4
 8021a5c:	f7fe fc5a 	bl	8020314 <USBD_LL_DataOutStage>
}
 8021a60:	46c0      	nop			@ (mov r8, r8)
 8021a62:	46bd      	mov	sp, r7
 8021a64:	b003      	add	sp, #12
 8021a66:	bd90      	pop	{r4, r7, pc}

08021a68 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021a68:	b580      	push	{r7, lr}
 8021a6a:	b082      	sub	sp, #8
 8021a6c:	af00      	add	r7, sp, #0
 8021a6e:	6078      	str	r0, [r7, #4]
 8021a70:	000a      	movs	r2, r1
 8021a72:	1cfb      	adds	r3, r7, #3
 8021a74:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8021a76:	687a      	ldr	r2, [r7, #4]
 8021a78:	23bc      	movs	r3, #188	@ 0xbc
 8021a7a:	009b      	lsls	r3, r3, #2
 8021a7c:	58d0      	ldr	r0, [r2, r3]
 8021a7e:	1cfb      	adds	r3, r7, #3
 8021a80:	781a      	ldrb	r2, [r3, #0]
 8021a82:	6879      	ldr	r1, [r7, #4]
 8021a84:	0013      	movs	r3, r2
 8021a86:	009b      	lsls	r3, r3, #2
 8021a88:	189b      	adds	r3, r3, r2
 8021a8a:	00db      	lsls	r3, r3, #3
 8021a8c:	18cb      	adds	r3, r1, r3
 8021a8e:	333c      	adds	r3, #60	@ 0x3c
 8021a90:	681a      	ldr	r2, [r3, #0]
 8021a92:	1cfb      	adds	r3, r7, #3
 8021a94:	781b      	ldrb	r3, [r3, #0]
 8021a96:	0019      	movs	r1, r3
 8021a98:	f7fe fcbe 	bl	8020418 <USBD_LL_DataInStage>
}
 8021a9c:	46c0      	nop			@ (mov r8, r8)
 8021a9e:	46bd      	mov	sp, r7
 8021aa0:	b002      	add	sp, #8
 8021aa2:	bd80      	pop	{r7, pc}

08021aa4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021aa4:	b580      	push	{r7, lr}
 8021aa6:	b082      	sub	sp, #8
 8021aa8:	af00      	add	r7, sp, #0
 8021aaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8021aac:	687a      	ldr	r2, [r7, #4]
 8021aae:	23bc      	movs	r3, #188	@ 0xbc
 8021ab0:	009b      	lsls	r3, r3, #2
 8021ab2:	58d3      	ldr	r3, [r2, r3]
 8021ab4:	0018      	movs	r0, r3
 8021ab6:	f7fe fdf5 	bl	80206a4 <USBD_LL_SOF>
}
 8021aba:	46c0      	nop			@ (mov r8, r8)
 8021abc:	46bd      	mov	sp, r7
 8021abe:	b002      	add	sp, #8
 8021ac0:	bd80      	pop	{r7, pc}

08021ac2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021ac2:	b580      	push	{r7, lr}
 8021ac4:	b084      	sub	sp, #16
 8021ac6:	af00      	add	r7, sp, #0
 8021ac8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8021aca:	230f      	movs	r3, #15
 8021acc:	18fb      	adds	r3, r7, r3
 8021ace:	2201      	movs	r2, #1
 8021ad0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8021ad2:	687b      	ldr	r3, [r7, #4]
 8021ad4:	689b      	ldr	r3, [r3, #8]
 8021ad6:	2b02      	cmp	r3, #2
 8021ad8:	d001      	beq.n	8021ade <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8021ada:	f7ea fa3b 	bl	800bf54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8021ade:	687a      	ldr	r2, [r7, #4]
 8021ae0:	23bc      	movs	r3, #188	@ 0xbc
 8021ae2:	009b      	lsls	r3, r3, #2
 8021ae4:	58d2      	ldr	r2, [r2, r3]
 8021ae6:	230f      	movs	r3, #15
 8021ae8:	18fb      	adds	r3, r7, r3
 8021aea:	781b      	ldrb	r3, [r3, #0]
 8021aec:	0019      	movs	r1, r3
 8021aee:	0010      	movs	r0, r2
 8021af0:	f7fe fd97 	bl	8020622 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8021af4:	687a      	ldr	r2, [r7, #4]
 8021af6:	23bc      	movs	r3, #188	@ 0xbc
 8021af8:	009b      	lsls	r3, r3, #2
 8021afa:	58d3      	ldr	r3, [r2, r3]
 8021afc:	0018      	movs	r0, r3
 8021afe:	f7fe fd48 	bl	8020592 <USBD_LL_Reset>
}
 8021b02:	46c0      	nop			@ (mov r8, r8)
 8021b04:	46bd      	mov	sp, r7
 8021b06:	b004      	add	sp, #16
 8021b08:	bd80      	pop	{r7, pc}
	...

08021b0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021b0c:	b580      	push	{r7, lr}
 8021b0e:	b082      	sub	sp, #8
 8021b10:	af00      	add	r7, sp, #0
 8021b12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8021b14:	687a      	ldr	r2, [r7, #4]
 8021b16:	23bc      	movs	r3, #188	@ 0xbc
 8021b18:	009b      	lsls	r3, r3, #2
 8021b1a:	58d3      	ldr	r3, [r2, r3]
 8021b1c:	0018      	movs	r0, r3
 8021b1e:	f7fe fd91 	bl	8020644 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8021b22:	687b      	ldr	r3, [r7, #4]
 8021b24:	699b      	ldr	r3, [r3, #24]
 8021b26:	2b00      	cmp	r3, #0
 8021b28:	d005      	beq.n	8021b36 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021b2a:	4b05      	ldr	r3, [pc, #20]	@ (8021b40 <HAL_PCD_SuspendCallback+0x34>)
 8021b2c:	691a      	ldr	r2, [r3, #16]
 8021b2e:	4b04      	ldr	r3, [pc, #16]	@ (8021b40 <HAL_PCD_SuspendCallback+0x34>)
 8021b30:	2106      	movs	r1, #6
 8021b32:	430a      	orrs	r2, r1
 8021b34:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8021b36:	46c0      	nop			@ (mov r8, r8)
 8021b38:	46bd      	mov	sp, r7
 8021b3a:	b002      	add	sp, #8
 8021b3c:	bd80      	pop	{r7, pc}
 8021b3e:	46c0      	nop			@ (mov r8, r8)
 8021b40:	e000ed00 	.word	0xe000ed00

08021b44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021b44:	b580      	push	{r7, lr}
 8021b46:	b082      	sub	sp, #8
 8021b48:	af00      	add	r7, sp, #0
 8021b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8021b4c:	687b      	ldr	r3, [r7, #4]
 8021b4e:	699b      	ldr	r3, [r3, #24]
 8021b50:	2b00      	cmp	r3, #0
 8021b52:	d007      	beq.n	8021b64 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021b54:	4b09      	ldr	r3, [pc, #36]	@ (8021b7c <HAL_PCD_ResumeCallback+0x38>)
 8021b56:	691a      	ldr	r2, [r3, #16]
 8021b58:	4b08      	ldr	r3, [pc, #32]	@ (8021b7c <HAL_PCD_ResumeCallback+0x38>)
 8021b5a:	2106      	movs	r1, #6
 8021b5c:	438a      	bics	r2, r1
 8021b5e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8021b60:	f000 fa44 	bl	8021fec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8021b64:	687a      	ldr	r2, [r7, #4]
 8021b66:	23bc      	movs	r3, #188	@ 0xbc
 8021b68:	009b      	lsls	r3, r3, #2
 8021b6a:	58d3      	ldr	r3, [r2, r3]
 8021b6c:	0018      	movs	r0, r3
 8021b6e:	f7fe fd81 	bl	8020674 <USBD_LL_Resume>
}
 8021b72:	46c0      	nop			@ (mov r8, r8)
 8021b74:	46bd      	mov	sp, r7
 8021b76:	b002      	add	sp, #8
 8021b78:	bd80      	pop	{r7, pc}
 8021b7a:	46c0      	nop			@ (mov r8, r8)
 8021b7c:	e000ed00 	.word	0xe000ed00

08021b80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8021b80:	b580      	push	{r7, lr}
 8021b82:	b082      	sub	sp, #8
 8021b84:	af00      	add	r7, sp, #0
 8021b86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8021b88:	4a2d      	ldr	r2, [pc, #180]	@ (8021c40 <USBD_LL_Init+0xc0>)
 8021b8a:	23bc      	movs	r3, #188	@ 0xbc
 8021b8c:	009b      	lsls	r3, r3, #2
 8021b8e:	6879      	ldr	r1, [r7, #4]
 8021b90:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8021b92:	687a      	ldr	r2, [r7, #4]
 8021b94:	23b0      	movs	r3, #176	@ 0xb0
 8021b96:	009b      	lsls	r3, r3, #2
 8021b98:	4929      	ldr	r1, [pc, #164]	@ (8021c40 <USBD_LL_Init+0xc0>)
 8021b9a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8021b9c:	4b28      	ldr	r3, [pc, #160]	@ (8021c40 <USBD_LL_Init+0xc0>)
 8021b9e:	4a29      	ldr	r2, [pc, #164]	@ (8021c44 <USBD_LL_Init+0xc4>)
 8021ba0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8021ba2:	4b27      	ldr	r3, [pc, #156]	@ (8021c40 <USBD_LL_Init+0xc0>)
 8021ba4:	2208      	movs	r2, #8
 8021ba6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8021ba8:	4b25      	ldr	r3, [pc, #148]	@ (8021c40 <USBD_LL_Init+0xc0>)
 8021baa:	2202      	movs	r2, #2
 8021bac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8021bae:	4b24      	ldr	r3, [pc, #144]	@ (8021c40 <USBD_LL_Init+0xc0>)
 8021bb0:	2202      	movs	r2, #2
 8021bb2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8021bb4:	4b22      	ldr	r3, [pc, #136]	@ (8021c40 <USBD_LL_Init+0xc0>)
 8021bb6:	2200      	movs	r2, #0
 8021bb8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8021bba:	4b21      	ldr	r3, [pc, #132]	@ (8021c40 <USBD_LL_Init+0xc0>)
 8021bbc:	2200      	movs	r2, #0
 8021bbe:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8021bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8021c40 <USBD_LL_Init+0xc0>)
 8021bc2:	2200      	movs	r2, #0
 8021bc4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8021bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8021c40 <USBD_LL_Init+0xc0>)
 8021bc8:	0018      	movs	r0, r3
 8021bca:	f7f5 ff95 	bl	8017af8 <HAL_PCD_Init>
 8021bce:	1e03      	subs	r3, r0, #0
 8021bd0:	d001      	beq.n	8021bd6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8021bd2:	f7ea f9bf 	bl	800bf54 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8021bd6:	687a      	ldr	r2, [r7, #4]
 8021bd8:	23b0      	movs	r3, #176	@ 0xb0
 8021bda:	009b      	lsls	r3, r3, #2
 8021bdc:	58d0      	ldr	r0, [r2, r3]
 8021bde:	2318      	movs	r3, #24
 8021be0:	2200      	movs	r2, #0
 8021be2:	2100      	movs	r1, #0
 8021be4:	f7f7 fd56 	bl	8019694 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8021be8:	687a      	ldr	r2, [r7, #4]
 8021bea:	23b0      	movs	r3, #176	@ 0xb0
 8021bec:	009b      	lsls	r3, r3, #2
 8021bee:	58d0      	ldr	r0, [r2, r3]
 8021bf0:	2358      	movs	r3, #88	@ 0x58
 8021bf2:	2200      	movs	r2, #0
 8021bf4:	2180      	movs	r1, #128	@ 0x80
 8021bf6:	f7f7 fd4d 	bl	8019694 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8021bfa:	687a      	ldr	r2, [r7, #4]
 8021bfc:	23b0      	movs	r3, #176	@ 0xb0
 8021bfe:	009b      	lsls	r3, r3, #2
 8021c00:	58d0      	ldr	r0, [r2, r3]
 8021c02:	23c0      	movs	r3, #192	@ 0xc0
 8021c04:	2200      	movs	r2, #0
 8021c06:	2181      	movs	r1, #129	@ 0x81
 8021c08:	f7f7 fd44 	bl	8019694 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8021c0c:	687a      	ldr	r2, [r7, #4]
 8021c0e:	23b0      	movs	r3, #176	@ 0xb0
 8021c10:	009b      	lsls	r3, r3, #2
 8021c12:	58d0      	ldr	r0, [r2, r3]
 8021c14:	2388      	movs	r3, #136	@ 0x88
 8021c16:	005b      	lsls	r3, r3, #1
 8021c18:	2200      	movs	r2, #0
 8021c1a:	2101      	movs	r1, #1
 8021c1c:	f7f7 fd3a 	bl	8019694 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8021c20:	687a      	ldr	r2, [r7, #4]
 8021c22:	23b0      	movs	r3, #176	@ 0xb0
 8021c24:	009b      	lsls	r3, r3, #2
 8021c26:	58d0      	ldr	r0, [r2, r3]
 8021c28:	2380      	movs	r3, #128	@ 0x80
 8021c2a:	005b      	lsls	r3, r3, #1
 8021c2c:	2200      	movs	r2, #0
 8021c2e:	2182      	movs	r1, #130	@ 0x82
 8021c30:	f7f7 fd30 	bl	8019694 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8021c34:	2300      	movs	r3, #0
}
 8021c36:	0018      	movs	r0, r3
 8021c38:	46bd      	mov	sp, r7
 8021c3a:	b002      	add	sp, #8
 8021c3c:	bd80      	pop	{r7, pc}
 8021c3e:	46c0      	nop			@ (mov r8, r8)
 8021c40:	20002fe8 	.word	0x20002fe8
 8021c44:	40005c00 	.word	0x40005c00

08021c48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8021c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c4a:	b085      	sub	sp, #20
 8021c4c:	af00      	add	r7, sp, #0
 8021c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021c50:	210f      	movs	r1, #15
 8021c52:	187b      	adds	r3, r7, r1
 8021c54:	2200      	movs	r2, #0
 8021c56:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021c58:	260e      	movs	r6, #14
 8021c5a:	19bb      	adds	r3, r7, r6
 8021c5c:	2200      	movs	r2, #0
 8021c5e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8021c60:	687a      	ldr	r2, [r7, #4]
 8021c62:	23b0      	movs	r3, #176	@ 0xb0
 8021c64:	009b      	lsls	r3, r3, #2
 8021c66:	58d3      	ldr	r3, [r2, r3]
 8021c68:	000d      	movs	r5, r1
 8021c6a:	187c      	adds	r4, r7, r1
 8021c6c:	0018      	movs	r0, r3
 8021c6e:	f7f6 f843 	bl	8017cf8 <HAL_PCD_Start>
 8021c72:	0003      	movs	r3, r0
 8021c74:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021c76:	19bc      	adds	r4, r7, r6
 8021c78:	197b      	adds	r3, r7, r5
 8021c7a:	781b      	ldrb	r3, [r3, #0]
 8021c7c:	0018      	movs	r0, r3
 8021c7e:	f000 f9bc 	bl	8021ffa <USBD_Get_USB_Status>
 8021c82:	0003      	movs	r3, r0
 8021c84:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8021c86:	19bb      	adds	r3, r7, r6
 8021c88:	781b      	ldrb	r3, [r3, #0]
}
 8021c8a:	0018      	movs	r0, r3
 8021c8c:	46bd      	mov	sp, r7
 8021c8e:	b005      	add	sp, #20
 8021c90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021c92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8021c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c94:	b085      	sub	sp, #20
 8021c96:	af00      	add	r7, sp, #0
 8021c98:	6078      	str	r0, [r7, #4]
 8021c9a:	000c      	movs	r4, r1
 8021c9c:	0010      	movs	r0, r2
 8021c9e:	0019      	movs	r1, r3
 8021ca0:	1cfb      	adds	r3, r7, #3
 8021ca2:	1c22      	adds	r2, r4, #0
 8021ca4:	701a      	strb	r2, [r3, #0]
 8021ca6:	1cbb      	adds	r3, r7, #2
 8021ca8:	1c02      	adds	r2, r0, #0
 8021caa:	701a      	strb	r2, [r3, #0]
 8021cac:	003b      	movs	r3, r7
 8021cae:	1c0a      	adds	r2, r1, #0
 8021cb0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021cb2:	260f      	movs	r6, #15
 8021cb4:	19bb      	adds	r3, r7, r6
 8021cb6:	2200      	movs	r2, #0
 8021cb8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021cba:	250e      	movs	r5, #14
 8021cbc:	197b      	adds	r3, r7, r5
 8021cbe:	2200      	movs	r2, #0
 8021cc0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8021cc2:	687a      	ldr	r2, [r7, #4]
 8021cc4:	23b0      	movs	r3, #176	@ 0xb0
 8021cc6:	009b      	lsls	r3, r3, #2
 8021cc8:	58d0      	ldr	r0, [r2, r3]
 8021cca:	19bc      	adds	r4, r7, r6
 8021ccc:	1cbb      	adds	r3, r7, #2
 8021cce:	781d      	ldrb	r5, [r3, #0]
 8021cd0:	003b      	movs	r3, r7
 8021cd2:	881a      	ldrh	r2, [r3, #0]
 8021cd4:	1cfb      	adds	r3, r7, #3
 8021cd6:	7819      	ldrb	r1, [r3, #0]
 8021cd8:	002b      	movs	r3, r5
 8021cda:	f7f6 f9a2 	bl	8018022 <HAL_PCD_EP_Open>
 8021cde:	0003      	movs	r3, r0
 8021ce0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021ce2:	250e      	movs	r5, #14
 8021ce4:	197c      	adds	r4, r7, r5
 8021ce6:	19bb      	adds	r3, r7, r6
 8021ce8:	781b      	ldrb	r3, [r3, #0]
 8021cea:	0018      	movs	r0, r3
 8021cec:	f000 f985 	bl	8021ffa <USBD_Get_USB_Status>
 8021cf0:	0003      	movs	r3, r0
 8021cf2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8021cf4:	197b      	adds	r3, r7, r5
 8021cf6:	781b      	ldrb	r3, [r3, #0]
}
 8021cf8:	0018      	movs	r0, r3
 8021cfa:	46bd      	mov	sp, r7
 8021cfc:	b005      	add	sp, #20
 8021cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021d00 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8021d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d02:	b085      	sub	sp, #20
 8021d04:	af00      	add	r7, sp, #0
 8021d06:	6078      	str	r0, [r7, #4]
 8021d08:	000a      	movs	r2, r1
 8021d0a:	1cfb      	adds	r3, r7, #3
 8021d0c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021d0e:	210f      	movs	r1, #15
 8021d10:	187b      	adds	r3, r7, r1
 8021d12:	2200      	movs	r2, #0
 8021d14:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021d16:	260e      	movs	r6, #14
 8021d18:	19bb      	adds	r3, r7, r6
 8021d1a:	2200      	movs	r2, #0
 8021d1c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8021d1e:	687a      	ldr	r2, [r7, #4]
 8021d20:	23b0      	movs	r3, #176	@ 0xb0
 8021d22:	009b      	lsls	r3, r3, #2
 8021d24:	58d2      	ldr	r2, [r2, r3]
 8021d26:	000d      	movs	r5, r1
 8021d28:	187c      	adds	r4, r7, r1
 8021d2a:	1cfb      	adds	r3, r7, #3
 8021d2c:	781b      	ldrb	r3, [r3, #0]
 8021d2e:	0019      	movs	r1, r3
 8021d30:	0010      	movs	r0, r2
 8021d32:	f7f6 f9e5 	bl	8018100 <HAL_PCD_EP_Close>
 8021d36:	0003      	movs	r3, r0
 8021d38:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021d3a:	19bc      	adds	r4, r7, r6
 8021d3c:	197b      	adds	r3, r7, r5
 8021d3e:	781b      	ldrb	r3, [r3, #0]
 8021d40:	0018      	movs	r0, r3
 8021d42:	f000 f95a 	bl	8021ffa <USBD_Get_USB_Status>
 8021d46:	0003      	movs	r3, r0
 8021d48:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8021d4a:	19bb      	adds	r3, r7, r6
 8021d4c:	781b      	ldrb	r3, [r3, #0]
}
 8021d4e:	0018      	movs	r0, r3
 8021d50:	46bd      	mov	sp, r7
 8021d52:	b005      	add	sp, #20
 8021d54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021d56 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8021d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d58:	b085      	sub	sp, #20
 8021d5a:	af00      	add	r7, sp, #0
 8021d5c:	6078      	str	r0, [r7, #4]
 8021d5e:	000a      	movs	r2, r1
 8021d60:	1cfb      	adds	r3, r7, #3
 8021d62:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021d64:	210f      	movs	r1, #15
 8021d66:	187b      	adds	r3, r7, r1
 8021d68:	2200      	movs	r2, #0
 8021d6a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021d6c:	260e      	movs	r6, #14
 8021d6e:	19bb      	adds	r3, r7, r6
 8021d70:	2200      	movs	r2, #0
 8021d72:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8021d74:	687a      	ldr	r2, [r7, #4]
 8021d76:	23b0      	movs	r3, #176	@ 0xb0
 8021d78:	009b      	lsls	r3, r3, #2
 8021d7a:	58d2      	ldr	r2, [r2, r3]
 8021d7c:	000d      	movs	r5, r1
 8021d7e:	187c      	adds	r4, r7, r1
 8021d80:	1cfb      	adds	r3, r7, #3
 8021d82:	781b      	ldrb	r3, [r3, #0]
 8021d84:	0019      	movs	r1, r3
 8021d86:	0010      	movs	r0, r2
 8021d88:	f7f6 fa97 	bl	80182ba <HAL_PCD_EP_SetStall>
 8021d8c:	0003      	movs	r3, r0
 8021d8e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021d90:	19bc      	adds	r4, r7, r6
 8021d92:	197b      	adds	r3, r7, r5
 8021d94:	781b      	ldrb	r3, [r3, #0]
 8021d96:	0018      	movs	r0, r3
 8021d98:	f000 f92f 	bl	8021ffa <USBD_Get_USB_Status>
 8021d9c:	0003      	movs	r3, r0
 8021d9e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8021da0:	19bb      	adds	r3, r7, r6
 8021da2:	781b      	ldrb	r3, [r3, #0]
}
 8021da4:	0018      	movs	r0, r3
 8021da6:	46bd      	mov	sp, r7
 8021da8:	b005      	add	sp, #20
 8021daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021dac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8021dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021dae:	b085      	sub	sp, #20
 8021db0:	af00      	add	r7, sp, #0
 8021db2:	6078      	str	r0, [r7, #4]
 8021db4:	000a      	movs	r2, r1
 8021db6:	1cfb      	adds	r3, r7, #3
 8021db8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021dba:	210f      	movs	r1, #15
 8021dbc:	187b      	adds	r3, r7, r1
 8021dbe:	2200      	movs	r2, #0
 8021dc0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021dc2:	260e      	movs	r6, #14
 8021dc4:	19bb      	adds	r3, r7, r6
 8021dc6:	2200      	movs	r2, #0
 8021dc8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8021dca:	687a      	ldr	r2, [r7, #4]
 8021dcc:	23b0      	movs	r3, #176	@ 0xb0
 8021dce:	009b      	lsls	r3, r3, #2
 8021dd0:	58d2      	ldr	r2, [r2, r3]
 8021dd2:	000d      	movs	r5, r1
 8021dd4:	187c      	adds	r4, r7, r1
 8021dd6:	1cfb      	adds	r3, r7, #3
 8021dd8:	781b      	ldrb	r3, [r3, #0]
 8021dda:	0019      	movs	r1, r3
 8021ddc:	0010      	movs	r0, r2
 8021dde:	f7f6 fac8 	bl	8018372 <HAL_PCD_EP_ClrStall>
 8021de2:	0003      	movs	r3, r0
 8021de4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021de6:	19bc      	adds	r4, r7, r6
 8021de8:	197b      	adds	r3, r7, r5
 8021dea:	781b      	ldrb	r3, [r3, #0]
 8021dec:	0018      	movs	r0, r3
 8021dee:	f000 f904 	bl	8021ffa <USBD_Get_USB_Status>
 8021df2:	0003      	movs	r3, r0
 8021df4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8021df6:	19bb      	adds	r3, r7, r6
 8021df8:	781b      	ldrb	r3, [r3, #0]
}
 8021dfa:	0018      	movs	r0, r3
 8021dfc:	46bd      	mov	sp, r7
 8021dfe:	b005      	add	sp, #20
 8021e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021e02 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8021e02:	b580      	push	{r7, lr}
 8021e04:	b084      	sub	sp, #16
 8021e06:	af00      	add	r7, sp, #0
 8021e08:	6078      	str	r0, [r7, #4]
 8021e0a:	000a      	movs	r2, r1
 8021e0c:	1cfb      	adds	r3, r7, #3
 8021e0e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8021e10:	687a      	ldr	r2, [r7, #4]
 8021e12:	23b0      	movs	r3, #176	@ 0xb0
 8021e14:	009b      	lsls	r3, r3, #2
 8021e16:	58d3      	ldr	r3, [r2, r3]
 8021e18:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8021e1a:	1cfb      	adds	r3, r7, #3
 8021e1c:	781b      	ldrb	r3, [r3, #0]
 8021e1e:	b25b      	sxtb	r3, r3
 8021e20:	2b00      	cmp	r3, #0
 8021e22:	da0d      	bge.n	8021e40 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8021e24:	1cfb      	adds	r3, r7, #3
 8021e26:	781b      	ldrb	r3, [r3, #0]
 8021e28:	227f      	movs	r2, #127	@ 0x7f
 8021e2a:	4013      	ands	r3, r2
 8021e2c:	68f9      	ldr	r1, [r7, #12]
 8021e2e:	1c5a      	adds	r2, r3, #1
 8021e30:	0013      	movs	r3, r2
 8021e32:	009b      	lsls	r3, r3, #2
 8021e34:	189b      	adds	r3, r3, r2
 8021e36:	00db      	lsls	r3, r3, #3
 8021e38:	18cb      	adds	r3, r1, r3
 8021e3a:	3302      	adds	r3, #2
 8021e3c:	781b      	ldrb	r3, [r3, #0]
 8021e3e:	e00d      	b.n	8021e5c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8021e40:	1cfb      	adds	r3, r7, #3
 8021e42:	781b      	ldrb	r3, [r3, #0]
 8021e44:	227f      	movs	r2, #127	@ 0x7f
 8021e46:	401a      	ands	r2, r3
 8021e48:	68f8      	ldr	r0, [r7, #12]
 8021e4a:	23b5      	movs	r3, #181	@ 0xb5
 8021e4c:	0059      	lsls	r1, r3, #1
 8021e4e:	0013      	movs	r3, r2
 8021e50:	009b      	lsls	r3, r3, #2
 8021e52:	189b      	adds	r3, r3, r2
 8021e54:	00db      	lsls	r3, r3, #3
 8021e56:	18c3      	adds	r3, r0, r3
 8021e58:	185b      	adds	r3, r3, r1
 8021e5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8021e5c:	0018      	movs	r0, r3
 8021e5e:	46bd      	mov	sp, r7
 8021e60:	b004      	add	sp, #16
 8021e62:	bd80      	pop	{r7, pc}

08021e64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8021e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021e66:	b085      	sub	sp, #20
 8021e68:	af00      	add	r7, sp, #0
 8021e6a:	6078      	str	r0, [r7, #4]
 8021e6c:	000a      	movs	r2, r1
 8021e6e:	1cfb      	adds	r3, r7, #3
 8021e70:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021e72:	210f      	movs	r1, #15
 8021e74:	187b      	adds	r3, r7, r1
 8021e76:	2200      	movs	r2, #0
 8021e78:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021e7a:	260e      	movs	r6, #14
 8021e7c:	19bb      	adds	r3, r7, r6
 8021e7e:	2200      	movs	r2, #0
 8021e80:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8021e82:	687a      	ldr	r2, [r7, #4]
 8021e84:	23b0      	movs	r3, #176	@ 0xb0
 8021e86:	009b      	lsls	r3, r3, #2
 8021e88:	58d2      	ldr	r2, [r2, r3]
 8021e8a:	000d      	movs	r5, r1
 8021e8c:	187c      	adds	r4, r7, r1
 8021e8e:	1cfb      	adds	r3, r7, #3
 8021e90:	781b      	ldrb	r3, [r3, #0]
 8021e92:	0019      	movs	r1, r3
 8021e94:	0010      	movs	r0, r2
 8021e96:	f7f6 f899 	bl	8017fcc <HAL_PCD_SetAddress>
 8021e9a:	0003      	movs	r3, r0
 8021e9c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021e9e:	19bc      	adds	r4, r7, r6
 8021ea0:	197b      	adds	r3, r7, r5
 8021ea2:	781b      	ldrb	r3, [r3, #0]
 8021ea4:	0018      	movs	r0, r3
 8021ea6:	f000 f8a8 	bl	8021ffa <USBD_Get_USB_Status>
 8021eaa:	0003      	movs	r3, r0
 8021eac:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8021eae:	19bb      	adds	r3, r7, r6
 8021eb0:	781b      	ldrb	r3, [r3, #0]
}
 8021eb2:	0018      	movs	r0, r3
 8021eb4:	46bd      	mov	sp, r7
 8021eb6:	b005      	add	sp, #20
 8021eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021eba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8021eba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ebc:	b087      	sub	sp, #28
 8021ebe:	af00      	add	r7, sp, #0
 8021ec0:	60f8      	str	r0, [r7, #12]
 8021ec2:	0008      	movs	r0, r1
 8021ec4:	607a      	str	r2, [r7, #4]
 8021ec6:	0019      	movs	r1, r3
 8021ec8:	230b      	movs	r3, #11
 8021eca:	18fb      	adds	r3, r7, r3
 8021ecc:	1c02      	adds	r2, r0, #0
 8021ece:	701a      	strb	r2, [r3, #0]
 8021ed0:	2408      	movs	r4, #8
 8021ed2:	193b      	adds	r3, r7, r4
 8021ed4:	1c0a      	adds	r2, r1, #0
 8021ed6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021ed8:	2117      	movs	r1, #23
 8021eda:	187b      	adds	r3, r7, r1
 8021edc:	2200      	movs	r2, #0
 8021ede:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021ee0:	2516      	movs	r5, #22
 8021ee2:	197b      	adds	r3, r7, r5
 8021ee4:	2200      	movs	r2, #0
 8021ee6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8021ee8:	68fa      	ldr	r2, [r7, #12]
 8021eea:	23b0      	movs	r3, #176	@ 0xb0
 8021eec:	009b      	lsls	r3, r3, #2
 8021eee:	58d0      	ldr	r0, [r2, r3]
 8021ef0:	193b      	adds	r3, r7, r4
 8021ef2:	881d      	ldrh	r5, [r3, #0]
 8021ef4:	000e      	movs	r6, r1
 8021ef6:	187c      	adds	r4, r7, r1
 8021ef8:	687a      	ldr	r2, [r7, #4]
 8021efa:	230b      	movs	r3, #11
 8021efc:	18fb      	adds	r3, r7, r3
 8021efe:	7819      	ldrb	r1, [r3, #0]
 8021f00:	002b      	movs	r3, r5
 8021f02:	f7f6 f99e 	bl	8018242 <HAL_PCD_EP_Transmit>
 8021f06:	0003      	movs	r3, r0
 8021f08:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021f0a:	2516      	movs	r5, #22
 8021f0c:	197c      	adds	r4, r7, r5
 8021f0e:	19bb      	adds	r3, r7, r6
 8021f10:	781b      	ldrb	r3, [r3, #0]
 8021f12:	0018      	movs	r0, r3
 8021f14:	f000 f871 	bl	8021ffa <USBD_Get_USB_Status>
 8021f18:	0003      	movs	r3, r0
 8021f1a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8021f1c:	197b      	adds	r3, r7, r5
 8021f1e:	781b      	ldrb	r3, [r3, #0]
}
 8021f20:	0018      	movs	r0, r3
 8021f22:	46bd      	mov	sp, r7
 8021f24:	b007      	add	sp, #28
 8021f26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021f28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8021f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f2a:	b087      	sub	sp, #28
 8021f2c:	af00      	add	r7, sp, #0
 8021f2e:	60f8      	str	r0, [r7, #12]
 8021f30:	0008      	movs	r0, r1
 8021f32:	607a      	str	r2, [r7, #4]
 8021f34:	0019      	movs	r1, r3
 8021f36:	230b      	movs	r3, #11
 8021f38:	18fb      	adds	r3, r7, r3
 8021f3a:	1c02      	adds	r2, r0, #0
 8021f3c:	701a      	strb	r2, [r3, #0]
 8021f3e:	2408      	movs	r4, #8
 8021f40:	193b      	adds	r3, r7, r4
 8021f42:	1c0a      	adds	r2, r1, #0
 8021f44:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021f46:	2117      	movs	r1, #23
 8021f48:	187b      	adds	r3, r7, r1
 8021f4a:	2200      	movs	r2, #0
 8021f4c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021f4e:	2516      	movs	r5, #22
 8021f50:	197b      	adds	r3, r7, r5
 8021f52:	2200      	movs	r2, #0
 8021f54:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8021f56:	68fa      	ldr	r2, [r7, #12]
 8021f58:	23b0      	movs	r3, #176	@ 0xb0
 8021f5a:	009b      	lsls	r3, r3, #2
 8021f5c:	58d0      	ldr	r0, [r2, r3]
 8021f5e:	193b      	adds	r3, r7, r4
 8021f60:	881d      	ldrh	r5, [r3, #0]
 8021f62:	000e      	movs	r6, r1
 8021f64:	187c      	adds	r4, r7, r1
 8021f66:	687a      	ldr	r2, [r7, #4]
 8021f68:	230b      	movs	r3, #11
 8021f6a:	18fb      	adds	r3, r7, r3
 8021f6c:	7819      	ldrb	r1, [r3, #0]
 8021f6e:	002b      	movs	r3, r5
 8021f70:	f7f6 f917 	bl	80181a2 <HAL_PCD_EP_Receive>
 8021f74:	0003      	movs	r3, r0
 8021f76:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021f78:	2516      	movs	r5, #22
 8021f7a:	197c      	adds	r4, r7, r5
 8021f7c:	19bb      	adds	r3, r7, r6
 8021f7e:	781b      	ldrb	r3, [r3, #0]
 8021f80:	0018      	movs	r0, r3
 8021f82:	f000 f83a 	bl	8021ffa <USBD_Get_USB_Status>
 8021f86:	0003      	movs	r3, r0
 8021f88:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8021f8a:	197b      	adds	r3, r7, r5
 8021f8c:	781b      	ldrb	r3, [r3, #0]
}
 8021f8e:	0018      	movs	r0, r3
 8021f90:	46bd      	mov	sp, r7
 8021f92:	b007      	add	sp, #28
 8021f94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021f96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8021f96:	b580      	push	{r7, lr}
 8021f98:	b082      	sub	sp, #8
 8021f9a:	af00      	add	r7, sp, #0
 8021f9c:	6078      	str	r0, [r7, #4]
 8021f9e:	000a      	movs	r2, r1
 8021fa0:	1cfb      	adds	r3, r7, #3
 8021fa2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8021fa4:	687a      	ldr	r2, [r7, #4]
 8021fa6:	23b0      	movs	r3, #176	@ 0xb0
 8021fa8:	009b      	lsls	r3, r3, #2
 8021faa:	58d2      	ldr	r2, [r2, r3]
 8021fac:	1cfb      	adds	r3, r7, #3
 8021fae:	781b      	ldrb	r3, [r3, #0]
 8021fb0:	0019      	movs	r1, r3
 8021fb2:	0010      	movs	r0, r2
 8021fb4:	f7f6 f92c 	bl	8018210 <HAL_PCD_EP_GetRxCount>
 8021fb8:	0003      	movs	r3, r0
}
 8021fba:	0018      	movs	r0, r3
 8021fbc:	46bd      	mov	sp, r7
 8021fbe:	b002      	add	sp, #8
 8021fc0:	bd80      	pop	{r7, pc}
	...

08021fc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8021fc4:	b580      	push	{r7, lr}
 8021fc6:	b082      	sub	sp, #8
 8021fc8:	af00      	add	r7, sp, #0
 8021fca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8021fcc:	4b02      	ldr	r3, [pc, #8]	@ (8021fd8 <USBD_static_malloc+0x14>)
}
 8021fce:	0018      	movs	r0, r3
 8021fd0:	46bd      	mov	sp, r7
 8021fd2:	b002      	add	sp, #8
 8021fd4:	bd80      	pop	{r7, pc}
 8021fd6:	46c0      	nop			@ (mov r8, r8)
 8021fd8:	200032dc 	.word	0x200032dc

08021fdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8021fdc:	b580      	push	{r7, lr}
 8021fde:	b082      	sub	sp, #8
 8021fe0:	af00      	add	r7, sp, #0
 8021fe2:	6078      	str	r0, [r7, #4]

}
 8021fe4:	46c0      	nop			@ (mov r8, r8)
 8021fe6:	46bd      	mov	sp, r7
 8021fe8:	b002      	add	sp, #8
 8021fea:	bd80      	pop	{r7, pc}

08021fec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8021fec:	b580      	push	{r7, lr}
 8021fee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8021ff0:	f7e9 fe60 	bl	800bcb4 <SystemClock_Config>
}
 8021ff4:	46c0      	nop			@ (mov r8, r8)
 8021ff6:	46bd      	mov	sp, r7
 8021ff8:	bd80      	pop	{r7, pc}

08021ffa <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8021ffa:	b580      	push	{r7, lr}
 8021ffc:	b084      	sub	sp, #16
 8021ffe:	af00      	add	r7, sp, #0
 8022000:	0002      	movs	r2, r0
 8022002:	1dfb      	adds	r3, r7, #7
 8022004:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022006:	230f      	movs	r3, #15
 8022008:	18fb      	adds	r3, r7, r3
 802200a:	2200      	movs	r2, #0
 802200c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 802200e:	1dfb      	adds	r3, r7, #7
 8022010:	781b      	ldrb	r3, [r3, #0]
 8022012:	2b03      	cmp	r3, #3
 8022014:	d017      	beq.n	8022046 <USBD_Get_USB_Status+0x4c>
 8022016:	dc1b      	bgt.n	8022050 <USBD_Get_USB_Status+0x56>
 8022018:	2b02      	cmp	r3, #2
 802201a:	d00f      	beq.n	802203c <USBD_Get_USB_Status+0x42>
 802201c:	dc18      	bgt.n	8022050 <USBD_Get_USB_Status+0x56>
 802201e:	2b00      	cmp	r3, #0
 8022020:	d002      	beq.n	8022028 <USBD_Get_USB_Status+0x2e>
 8022022:	2b01      	cmp	r3, #1
 8022024:	d005      	beq.n	8022032 <USBD_Get_USB_Status+0x38>
 8022026:	e013      	b.n	8022050 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022028:	230f      	movs	r3, #15
 802202a:	18fb      	adds	r3, r7, r3
 802202c:	2200      	movs	r2, #0
 802202e:	701a      	strb	r2, [r3, #0]
    break;
 8022030:	e013      	b.n	802205a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022032:	230f      	movs	r3, #15
 8022034:	18fb      	adds	r3, r7, r3
 8022036:	2202      	movs	r2, #2
 8022038:	701a      	strb	r2, [r3, #0]
    break;
 802203a:	e00e      	b.n	802205a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 802203c:	230f      	movs	r3, #15
 802203e:	18fb      	adds	r3, r7, r3
 8022040:	2201      	movs	r2, #1
 8022042:	701a      	strb	r2, [r3, #0]
    break;
 8022044:	e009      	b.n	802205a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022046:	230f      	movs	r3, #15
 8022048:	18fb      	adds	r3, r7, r3
 802204a:	2202      	movs	r2, #2
 802204c:	701a      	strb	r2, [r3, #0]
    break;
 802204e:	e004      	b.n	802205a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8022050:	230f      	movs	r3, #15
 8022052:	18fb      	adds	r3, r7, r3
 8022054:	2202      	movs	r2, #2
 8022056:	701a      	strb	r2, [r3, #0]
    break;
 8022058:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 802205a:	230f      	movs	r3, #15
 802205c:	18fb      	adds	r3, r7, r3
 802205e:	781b      	ldrb	r3, [r3, #0]
}
 8022060:	0018      	movs	r0, r3
 8022062:	46bd      	mov	sp, r7
 8022064:	b004      	add	sp, #16
 8022066:	bd80      	pop	{r7, pc}

08022068 <arm_cfft_radix4by2_q31>:
 8022068:	b5f0      	push	{r4, r5, r6, r7, lr}
 802206a:	465f      	mov	r7, fp
 802206c:	4656      	mov	r6, sl
 802206e:	464d      	mov	r5, r9
 8022070:	4644      	mov	r4, r8
 8022072:	000b      	movs	r3, r1
 8022074:	b4f0      	push	{r4, r5, r6, r7}
 8022076:	085b      	lsrs	r3, r3, #1
 8022078:	b08f      	sub	sp, #60	@ 0x3c
 802207a:	910a      	str	r1, [sp, #40]	@ 0x28
 802207c:	0007      	movs	r7, r0
 802207e:	9009      	str	r0, [sp, #36]	@ 0x24
 8022080:	0011      	movs	r1, r2
 8022082:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022084:	930c      	str	r3, [sp, #48]	@ 0x30
 8022086:	2b00      	cmp	r3, #0
 8022088:	d100      	bne.n	802208c <arm_cfft_radix4by2_q31+0x24>
 802208a:	e0a0      	b.n	80221ce <arm_cfft_radix4by2_q31+0x166>
 802208c:	0002      	movs	r2, r0
 802208e:	00db      	lsls	r3, r3, #3
 8022090:	3204      	adds	r2, #4
 8022092:	4691      	mov	r9, r2
 8022094:	4698      	mov	r8, r3
 8022096:	000a      	movs	r2, r1
 8022098:	464e      	mov	r6, r9
 802209a:	4442      	add	r2, r8
 802209c:	4699      	mov	r9, r3
 802209e:	4688      	mov	r8, r1
 80220a0:	9208      	str	r2, [sp, #32]
 80220a2:	900d      	str	r0, [sp, #52]	@ 0x34
 80220a4:	4643      	mov	r3, r8
 80220a6:	681b      	ldr	r3, [r3, #0]
 80220a8:	469b      	mov	fp, r3
 80220aa:	4643      	mov	r3, r8
 80220ac:	685b      	ldr	r3, [r3, #4]
 80220ae:	469a      	mov	sl, r3
 80220b0:	683b      	ldr	r3, [r7, #0]
 80220b2:	109c      	asrs	r4, r3, #2
 80220b4:	464b      	mov	r3, r9
 80220b6:	58fb      	ldr	r3, [r7, r3]
 80220b8:	109a      	asrs	r2, r3, #2
 80220ba:	18a3      	adds	r3, r4, r2
 80220bc:	603b      	str	r3, [r7, #0]
 80220be:	6833      	ldr	r3, [r6, #0]
 80220c0:	1aa4      	subs	r4, r4, r2
 80220c2:	109d      	asrs	r5, r3, #2
 80220c4:	464b      	mov	r3, r9
 80220c6:	58f3      	ldr	r3, [r6, r3]
 80220c8:	17e2      	asrs	r2, r4, #31
 80220ca:	109b      	asrs	r3, r3, #2
 80220cc:	18e9      	adds	r1, r5, r3
 80220ce:	6031      	str	r1, [r6, #0]
 80220d0:	0011      	movs	r1, r2
 80220d2:	465a      	mov	r2, fp
 80220d4:	17d2      	asrs	r2, r2, #31
 80220d6:	0010      	movs	r0, r2
 80220d8:	4652      	mov	r2, sl
 80220da:	1aed      	subs	r5, r5, r3
 80220dc:	17eb      	asrs	r3, r5, #31
 80220de:	17d2      	asrs	r2, r2, #31
 80220e0:	9307      	str	r3, [sp, #28]
 80220e2:	9204      	str	r2, [sp, #16]
 80220e4:	0003      	movs	r3, r0
 80220e6:	465a      	mov	r2, fp
 80220e8:	9006      	str	r0, [sp, #24]
 80220ea:	0020      	movs	r0, r4
 80220ec:	9105      	str	r1, [sp, #20]
 80220ee:	f7de fa67 	bl	80005c0 <__aeabi_lmul>
 80220f2:	2280      	movs	r2, #128	@ 0x80
 80220f4:	2300      	movs	r3, #0
 80220f6:	0612      	lsls	r2, r2, #24
 80220f8:	1880      	adds	r0, r0, r2
 80220fa:	4159      	adcs	r1, r3
 80220fc:	2300      	movs	r3, #0
 80220fe:	9101      	str	r1, [sp, #4]
 8022100:	9300      	str	r3, [sp, #0]
 8022102:	4652      	mov	r2, sl
 8022104:	9b04      	ldr	r3, [sp, #16]
 8022106:	0028      	movs	r0, r5
 8022108:	17e9      	asrs	r1, r5, #31
 802210a:	f7de fa59 	bl	80005c0 <__aeabi_lmul>
 802210e:	9a00      	ldr	r2, [sp, #0]
 8022110:	9b01      	ldr	r3, [sp, #4]
 8022112:	1880      	adds	r0, r0, r2
 8022114:	4159      	adcs	r1, r3
 8022116:	2280      	movs	r2, #128	@ 0x80
 8022118:	2300      	movs	r3, #0
 802211a:	0612      	lsls	r2, r2, #24
 802211c:	1880      	adds	r0, r0, r2
 802211e:	4159      	adcs	r1, r3
 8022120:	464a      	mov	r2, r9
 8022122:	004b      	lsls	r3, r1, #1
 8022124:	50bb      	str	r3, [r7, r2]
 8022126:	4658      	mov	r0, fp
 8022128:	002a      	movs	r2, r5
 802212a:	9b07      	ldr	r3, [sp, #28]
 802212c:	9906      	ldr	r1, [sp, #24]
 802212e:	f7de fa47 	bl	80005c0 <__aeabi_lmul>
 8022132:	2280      	movs	r2, #128	@ 0x80
 8022134:	2300      	movs	r3, #0
 8022136:	0612      	lsls	r2, r2, #24
 8022138:	1880      	adds	r0, r0, r2
 802213a:	4159      	adcs	r1, r3
 802213c:	2000      	movs	r0, #0
 802213e:	9103      	str	r1, [sp, #12]
 8022140:	9002      	str	r0, [sp, #8]
 8022142:	4652      	mov	r2, sl
 8022144:	9b04      	ldr	r3, [sp, #16]
 8022146:	0020      	movs	r0, r4
 8022148:	9905      	ldr	r1, [sp, #20]
 802214a:	f7de fa39 	bl	80005c0 <__aeabi_lmul>
 802214e:	9a02      	ldr	r2, [sp, #8]
 8022150:	9b03      	ldr	r3, [sp, #12]
 8022152:	1a12      	subs	r2, r2, r0
 8022154:	418b      	sbcs	r3, r1
 8022156:	2080      	movs	r0, #128	@ 0x80
 8022158:	2100      	movs	r1, #0
 802215a:	0600      	lsls	r0, r0, #24
 802215c:	1812      	adds	r2, r2, r0
 802215e:	414b      	adcs	r3, r1
 8022160:	464a      	mov	r2, r9
 8022162:	005b      	lsls	r3, r3, #1
 8022164:	50b3      	str	r3, [r6, r2]
 8022166:	2308      	movs	r3, #8
 8022168:	469c      	mov	ip, r3
 802216a:	9b08      	ldr	r3, [sp, #32]
 802216c:	44e0      	add	r8, ip
 802216e:	3708      	adds	r7, #8
 8022170:	3608      	adds	r6, #8
 8022172:	4598      	cmp	r8, r3
 8022174:	d196      	bne.n	80220a4 <arm_cfft_radix4by2_q31+0x3c>
 8022176:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022178:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802217a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802217c:	2302      	movs	r3, #2
 802217e:	003a      	movs	r2, r7
 8022180:	0029      	movs	r1, r5
 8022182:	0020      	movs	r0, r4
 8022184:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8022186:	f000 f957 	bl	8022438 <arm_radix4_butterfly_q31>
 802218a:	46a4      	mov	ip, r4
 802218c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802218e:	2302      	movs	r3, #2
 8022190:	0088      	lsls	r0, r1, #2
 8022192:	4460      	add	r0, ip
 8022194:	003a      	movs	r2, r7
 8022196:	0029      	movs	r1, r5
 8022198:	f000 f94e 	bl	8022438 <arm_radix4_butterfly_q31>
 802219c:	46a4      	mov	ip, r4
 802219e:	0128      	lsls	r0, r5, #4
 80221a0:	4460      	add	r0, ip
 80221a2:	6833      	ldr	r3, [r6, #0]
 80221a4:	005b      	lsls	r3, r3, #1
 80221a6:	6033      	str	r3, [r6, #0]
 80221a8:	6873      	ldr	r3, [r6, #4]
 80221aa:	005b      	lsls	r3, r3, #1
 80221ac:	6073      	str	r3, [r6, #4]
 80221ae:	68b3      	ldr	r3, [r6, #8]
 80221b0:	005b      	lsls	r3, r3, #1
 80221b2:	60b3      	str	r3, [r6, #8]
 80221b4:	68f3      	ldr	r3, [r6, #12]
 80221b6:	005b      	lsls	r3, r3, #1
 80221b8:	60f3      	str	r3, [r6, #12]
 80221ba:	3610      	adds	r6, #16
 80221bc:	42b0      	cmp	r0, r6
 80221be:	d1f0      	bne.n	80221a2 <arm_cfft_radix4by2_q31+0x13a>
 80221c0:	b00f      	add	sp, #60	@ 0x3c
 80221c2:	bc3c      	pop	{r2, r3, r4, r5}
 80221c4:	4690      	mov	r8, r2
 80221c6:	4699      	mov	r9, r3
 80221c8:	46a2      	mov	sl, r4
 80221ca:	46ab      	mov	fp, r5
 80221cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80221ce:	2302      	movs	r3, #2
 80221d0:	2100      	movs	r1, #0
 80221d2:	0015      	movs	r5, r2
 80221d4:	f000 f930 	bl	8022438 <arm_radix4_butterfly_q31>
 80221d8:	46bc      	mov	ip, r7
 80221da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80221dc:	002a      	movs	r2, r5
 80221de:	0098      	lsls	r0, r3, #2
 80221e0:	4460      	add	r0, ip
 80221e2:	2302      	movs	r3, #2
 80221e4:	2100      	movs	r1, #0
 80221e6:	f000 f927 	bl	8022438 <arm_radix4_butterfly_q31>
 80221ea:	e7e9      	b.n	80221c0 <arm_cfft_radix4by2_q31+0x158>

080221ec <arm_cfft_radix4by2_inverse_q31>:
 80221ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80221ee:	465f      	mov	r7, fp
 80221f0:	4656      	mov	r6, sl
 80221f2:	464d      	mov	r5, r9
 80221f4:	4644      	mov	r4, r8
 80221f6:	000b      	movs	r3, r1
 80221f8:	b4f0      	push	{r4, r5, r6, r7}
 80221fa:	085b      	lsrs	r3, r3, #1
 80221fc:	b08f      	sub	sp, #60	@ 0x3c
 80221fe:	910a      	str	r1, [sp, #40]	@ 0x28
 8022200:	0007      	movs	r7, r0
 8022202:	9009      	str	r0, [sp, #36]	@ 0x24
 8022204:	0011      	movs	r1, r2
 8022206:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022208:	930c      	str	r3, [sp, #48]	@ 0x30
 802220a:	2b00      	cmp	r3, #0
 802220c:	d100      	bne.n	8022210 <arm_cfft_radix4by2_inverse_q31+0x24>
 802220e:	e0a0      	b.n	8022352 <arm_cfft_radix4by2_inverse_q31+0x166>
 8022210:	0002      	movs	r2, r0
 8022212:	00db      	lsls	r3, r3, #3
 8022214:	3204      	adds	r2, #4
 8022216:	4691      	mov	r9, r2
 8022218:	4698      	mov	r8, r3
 802221a:	000a      	movs	r2, r1
 802221c:	464e      	mov	r6, r9
 802221e:	4442      	add	r2, r8
 8022220:	4699      	mov	r9, r3
 8022222:	4688      	mov	r8, r1
 8022224:	9208      	str	r2, [sp, #32]
 8022226:	900d      	str	r0, [sp, #52]	@ 0x34
 8022228:	4643      	mov	r3, r8
 802222a:	681b      	ldr	r3, [r3, #0]
 802222c:	469b      	mov	fp, r3
 802222e:	4643      	mov	r3, r8
 8022230:	685b      	ldr	r3, [r3, #4]
 8022232:	469a      	mov	sl, r3
 8022234:	683b      	ldr	r3, [r7, #0]
 8022236:	109c      	asrs	r4, r3, #2
 8022238:	464b      	mov	r3, r9
 802223a:	58fb      	ldr	r3, [r7, r3]
 802223c:	109a      	asrs	r2, r3, #2
 802223e:	18a3      	adds	r3, r4, r2
 8022240:	603b      	str	r3, [r7, #0]
 8022242:	6833      	ldr	r3, [r6, #0]
 8022244:	1aa4      	subs	r4, r4, r2
 8022246:	109d      	asrs	r5, r3, #2
 8022248:	464b      	mov	r3, r9
 802224a:	58f3      	ldr	r3, [r6, r3]
 802224c:	17e2      	asrs	r2, r4, #31
 802224e:	109b      	asrs	r3, r3, #2
 8022250:	18e9      	adds	r1, r5, r3
 8022252:	6031      	str	r1, [r6, #0]
 8022254:	0011      	movs	r1, r2
 8022256:	465a      	mov	r2, fp
 8022258:	17d2      	asrs	r2, r2, #31
 802225a:	0010      	movs	r0, r2
 802225c:	4652      	mov	r2, sl
 802225e:	1aed      	subs	r5, r5, r3
 8022260:	17eb      	asrs	r3, r5, #31
 8022262:	17d2      	asrs	r2, r2, #31
 8022264:	9307      	str	r3, [sp, #28]
 8022266:	9204      	str	r2, [sp, #16]
 8022268:	0003      	movs	r3, r0
 802226a:	465a      	mov	r2, fp
 802226c:	9006      	str	r0, [sp, #24]
 802226e:	0020      	movs	r0, r4
 8022270:	9105      	str	r1, [sp, #20]
 8022272:	f7de f9a5 	bl	80005c0 <__aeabi_lmul>
 8022276:	2280      	movs	r2, #128	@ 0x80
 8022278:	2300      	movs	r3, #0
 802227a:	0612      	lsls	r2, r2, #24
 802227c:	1880      	adds	r0, r0, r2
 802227e:	4159      	adcs	r1, r3
 8022280:	2300      	movs	r3, #0
 8022282:	9101      	str	r1, [sp, #4]
 8022284:	9300      	str	r3, [sp, #0]
 8022286:	4652      	mov	r2, sl
 8022288:	9b04      	ldr	r3, [sp, #16]
 802228a:	0028      	movs	r0, r5
 802228c:	17e9      	asrs	r1, r5, #31
 802228e:	f7de f997 	bl	80005c0 <__aeabi_lmul>
 8022292:	9a00      	ldr	r2, [sp, #0]
 8022294:	9b01      	ldr	r3, [sp, #4]
 8022296:	1a12      	subs	r2, r2, r0
 8022298:	418b      	sbcs	r3, r1
 802229a:	2080      	movs	r0, #128	@ 0x80
 802229c:	2100      	movs	r1, #0
 802229e:	0600      	lsls	r0, r0, #24
 80222a0:	1812      	adds	r2, r2, r0
 80222a2:	414b      	adcs	r3, r1
 80222a4:	464a      	mov	r2, r9
 80222a6:	005b      	lsls	r3, r3, #1
 80222a8:	50bb      	str	r3, [r7, r2]
 80222aa:	4658      	mov	r0, fp
 80222ac:	002a      	movs	r2, r5
 80222ae:	9b07      	ldr	r3, [sp, #28]
 80222b0:	9906      	ldr	r1, [sp, #24]
 80222b2:	f7de f985 	bl	80005c0 <__aeabi_lmul>
 80222b6:	2280      	movs	r2, #128	@ 0x80
 80222b8:	2300      	movs	r3, #0
 80222ba:	0612      	lsls	r2, r2, #24
 80222bc:	1880      	adds	r0, r0, r2
 80222be:	4159      	adcs	r1, r3
 80222c0:	2000      	movs	r0, #0
 80222c2:	9103      	str	r1, [sp, #12]
 80222c4:	9002      	str	r0, [sp, #8]
 80222c6:	4652      	mov	r2, sl
 80222c8:	9b04      	ldr	r3, [sp, #16]
 80222ca:	0020      	movs	r0, r4
 80222cc:	9905      	ldr	r1, [sp, #20]
 80222ce:	f7de f977 	bl	80005c0 <__aeabi_lmul>
 80222d2:	9b02      	ldr	r3, [sp, #8]
 80222d4:	9c03      	ldr	r4, [sp, #12]
 80222d6:	18c0      	adds	r0, r0, r3
 80222d8:	4161      	adcs	r1, r4
 80222da:	2380      	movs	r3, #128	@ 0x80
 80222dc:	2400      	movs	r4, #0
 80222de:	061b      	lsls	r3, r3, #24
 80222e0:	18c0      	adds	r0, r0, r3
 80222e2:	4161      	adcs	r1, r4
 80222e4:	464a      	mov	r2, r9
 80222e6:	004b      	lsls	r3, r1, #1
 80222e8:	50b3      	str	r3, [r6, r2]
 80222ea:	2308      	movs	r3, #8
 80222ec:	469c      	mov	ip, r3
 80222ee:	9b08      	ldr	r3, [sp, #32]
 80222f0:	44e0      	add	r8, ip
 80222f2:	3708      	adds	r7, #8
 80222f4:	3608      	adds	r6, #8
 80222f6:	4598      	cmp	r8, r3
 80222f8:	d196      	bne.n	8022228 <arm_cfft_radix4by2_inverse_q31+0x3c>
 80222fa:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80222fc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80222fe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022300:	2302      	movs	r3, #2
 8022302:	003a      	movs	r2, r7
 8022304:	0029      	movs	r1, r5
 8022306:	0020      	movs	r0, r4
 8022308:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 802230a:	f000 fb3b 	bl	8022984 <arm_radix4_butterfly_inverse_q31>
 802230e:	46a4      	mov	ip, r4
 8022310:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022312:	2302      	movs	r3, #2
 8022314:	0088      	lsls	r0, r1, #2
 8022316:	4460      	add	r0, ip
 8022318:	003a      	movs	r2, r7
 802231a:	0029      	movs	r1, r5
 802231c:	f000 fb32 	bl	8022984 <arm_radix4_butterfly_inverse_q31>
 8022320:	46a4      	mov	ip, r4
 8022322:	0128      	lsls	r0, r5, #4
 8022324:	4460      	add	r0, ip
 8022326:	6833      	ldr	r3, [r6, #0]
 8022328:	005b      	lsls	r3, r3, #1
 802232a:	6033      	str	r3, [r6, #0]
 802232c:	6873      	ldr	r3, [r6, #4]
 802232e:	005b      	lsls	r3, r3, #1
 8022330:	6073      	str	r3, [r6, #4]
 8022332:	68b3      	ldr	r3, [r6, #8]
 8022334:	005b      	lsls	r3, r3, #1
 8022336:	60b3      	str	r3, [r6, #8]
 8022338:	68f3      	ldr	r3, [r6, #12]
 802233a:	005b      	lsls	r3, r3, #1
 802233c:	60f3      	str	r3, [r6, #12]
 802233e:	3610      	adds	r6, #16
 8022340:	42b0      	cmp	r0, r6
 8022342:	d1f0      	bne.n	8022326 <arm_cfft_radix4by2_inverse_q31+0x13a>
 8022344:	b00f      	add	sp, #60	@ 0x3c
 8022346:	bc3c      	pop	{r2, r3, r4, r5}
 8022348:	4690      	mov	r8, r2
 802234a:	4699      	mov	r9, r3
 802234c:	46a2      	mov	sl, r4
 802234e:	46ab      	mov	fp, r5
 8022350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022352:	2302      	movs	r3, #2
 8022354:	2100      	movs	r1, #0
 8022356:	0015      	movs	r5, r2
 8022358:	f000 fb14 	bl	8022984 <arm_radix4_butterfly_inverse_q31>
 802235c:	46bc      	mov	ip, r7
 802235e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022360:	002a      	movs	r2, r5
 8022362:	0098      	lsls	r0, r3, #2
 8022364:	4460      	add	r0, ip
 8022366:	2302      	movs	r3, #2
 8022368:	2100      	movs	r1, #0
 802236a:	f000 fb0b 	bl	8022984 <arm_radix4_butterfly_inverse_q31>
 802236e:	e7e9      	b.n	8022344 <arm_cfft_radix4by2_inverse_q31+0x158>

08022370 <arm_cfft_q31>:
 8022370:	b570      	push	{r4, r5, r6, lr}
 8022372:	001e      	movs	r6, r3
 8022374:	2380      	movs	r3, #128	@ 0x80
 8022376:	000d      	movs	r5, r1
 8022378:	0004      	movs	r4, r0
 802237a:	8801      	ldrh	r1, [r0, #0]
 802237c:	005b      	lsls	r3, r3, #1
 802237e:	2a01      	cmp	r2, #1
 8022380:	d028      	beq.n	80223d4 <arm_cfft_q31+0x64>
 8022382:	4299      	cmp	r1, r3
 8022384:	d020      	beq.n	80223c8 <arm_cfft_q31+0x58>
 8022386:	d812      	bhi.n	80223ae <arm_cfft_q31+0x3e>
 8022388:	2920      	cmp	r1, #32
 802238a:	d004      	beq.n	8022396 <arm_cfft_q31+0x26>
 802238c:	d949      	bls.n	8022422 <arm_cfft_q31+0xb2>
 802238e:	2940      	cmp	r1, #64	@ 0x40
 8022390:	d01a      	beq.n	80223c8 <arm_cfft_q31+0x58>
 8022392:	2980      	cmp	r1, #128	@ 0x80
 8022394:	d103      	bne.n	802239e <arm_cfft_q31+0x2e>
 8022396:	6862      	ldr	r2, [r4, #4]
 8022398:	0028      	movs	r0, r5
 802239a:	f7ff fe65 	bl	8022068 <arm_cfft_radix4by2_q31>
 802239e:	2e00      	cmp	r6, #0
 80223a0:	d004      	beq.n	80223ac <arm_cfft_q31+0x3c>
 80223a2:	68a2      	ldr	r2, [r4, #8]
 80223a4:	89a1      	ldrh	r1, [r4, #12]
 80223a6:	0028      	movs	r0, r5
 80223a8:	f7dd feae 	bl	8000108 <arm_bitreversal_32>
 80223ac:	bd70      	pop	{r4, r5, r6, pc}
 80223ae:	2380      	movs	r3, #128	@ 0x80
 80223b0:	00db      	lsls	r3, r3, #3
 80223b2:	4299      	cmp	r1, r3
 80223b4:	d008      	beq.n	80223c8 <arm_cfft_q31+0x58>
 80223b6:	d92f      	bls.n	8022418 <arm_cfft_q31+0xa8>
 80223b8:	2380      	movs	r3, #128	@ 0x80
 80223ba:	011b      	lsls	r3, r3, #4
 80223bc:	4299      	cmp	r1, r3
 80223be:	d0ea      	beq.n	8022396 <arm_cfft_q31+0x26>
 80223c0:	2380      	movs	r3, #128	@ 0x80
 80223c2:	015b      	lsls	r3, r3, #5
 80223c4:	4299      	cmp	r1, r3
 80223c6:	d1ea      	bne.n	802239e <arm_cfft_q31+0x2e>
 80223c8:	2301      	movs	r3, #1
 80223ca:	6862      	ldr	r2, [r4, #4]
 80223cc:	0028      	movs	r0, r5
 80223ce:	f000 f833 	bl	8022438 <arm_radix4_butterfly_q31>
 80223d2:	e7e4      	b.n	802239e <arm_cfft_q31+0x2e>
 80223d4:	4299      	cmp	r1, r3
 80223d6:	d019      	beq.n	802240c <arm_cfft_q31+0x9c>
 80223d8:	d80b      	bhi.n	80223f2 <arm_cfft_q31+0x82>
 80223da:	2920      	cmp	r1, #32
 80223dc:	d004      	beq.n	80223e8 <arm_cfft_q31+0x78>
 80223de:	d928      	bls.n	8022432 <arm_cfft_q31+0xc2>
 80223e0:	2940      	cmp	r1, #64	@ 0x40
 80223e2:	d013      	beq.n	802240c <arm_cfft_q31+0x9c>
 80223e4:	2980      	cmp	r1, #128	@ 0x80
 80223e6:	d1da      	bne.n	802239e <arm_cfft_q31+0x2e>
 80223e8:	6862      	ldr	r2, [r4, #4]
 80223ea:	0028      	movs	r0, r5
 80223ec:	f7ff fefe 	bl	80221ec <arm_cfft_radix4by2_inverse_q31>
 80223f0:	e7d5      	b.n	802239e <arm_cfft_q31+0x2e>
 80223f2:	2380      	movs	r3, #128	@ 0x80
 80223f4:	00db      	lsls	r3, r3, #3
 80223f6:	4299      	cmp	r1, r3
 80223f8:	d008      	beq.n	802240c <arm_cfft_q31+0x9c>
 80223fa:	d915      	bls.n	8022428 <arm_cfft_q31+0xb8>
 80223fc:	2380      	movs	r3, #128	@ 0x80
 80223fe:	011b      	lsls	r3, r3, #4
 8022400:	4299      	cmp	r1, r3
 8022402:	d0f1      	beq.n	80223e8 <arm_cfft_q31+0x78>
 8022404:	2380      	movs	r3, #128	@ 0x80
 8022406:	015b      	lsls	r3, r3, #5
 8022408:	4299      	cmp	r1, r3
 802240a:	d1c8      	bne.n	802239e <arm_cfft_q31+0x2e>
 802240c:	2301      	movs	r3, #1
 802240e:	6862      	ldr	r2, [r4, #4]
 8022410:	0028      	movs	r0, r5
 8022412:	f000 fab7 	bl	8022984 <arm_radix4_butterfly_inverse_q31>
 8022416:	e7c2      	b.n	802239e <arm_cfft_q31+0x2e>
 8022418:	2380      	movs	r3, #128	@ 0x80
 802241a:	009b      	lsls	r3, r3, #2
 802241c:	4299      	cmp	r1, r3
 802241e:	d0ba      	beq.n	8022396 <arm_cfft_q31+0x26>
 8022420:	e7bd      	b.n	802239e <arm_cfft_q31+0x2e>
 8022422:	2910      	cmp	r1, #16
 8022424:	d1bb      	bne.n	802239e <arm_cfft_q31+0x2e>
 8022426:	e7cf      	b.n	80223c8 <arm_cfft_q31+0x58>
 8022428:	2380      	movs	r3, #128	@ 0x80
 802242a:	009b      	lsls	r3, r3, #2
 802242c:	4299      	cmp	r1, r3
 802242e:	d0db      	beq.n	80223e8 <arm_cfft_q31+0x78>
 8022430:	e7b5      	b.n	802239e <arm_cfft_q31+0x2e>
 8022432:	2910      	cmp	r1, #16
 8022434:	d1b3      	bne.n	802239e <arm_cfft_q31+0x2e>
 8022436:	e7e9      	b.n	802240c <arm_cfft_q31+0x9c>

08022438 <arm_radix4_butterfly_q31>:
 8022438:	b5f0      	push	{r4, r5, r6, r7, lr}
 802243a:	464d      	mov	r5, r9
 802243c:	4644      	mov	r4, r8
 802243e:	465f      	mov	r7, fp
 8022440:	4656      	mov	r6, sl
 8022442:	469c      	mov	ip, r3
 8022444:	b4f0      	push	{r4, r5, r6, r7}
 8022446:	b0a7      	sub	sp, #156	@ 0x9c
 8022448:	9114      	str	r1, [sp, #80]	@ 0x50
 802244a:	0889      	lsrs	r1, r1, #2
 802244c:	9310      	str	r3, [sp, #64]	@ 0x40
 802244e:	00cb      	lsls	r3, r1, #3
 8022450:	0015      	movs	r5, r2
 8022452:	9223      	str	r2, [sp, #140]	@ 0x8c
 8022454:	18c2      	adds	r2, r0, r3
 8022456:	000c      	movs	r4, r1
 8022458:	469a      	mov	sl, r3
 802245a:	9124      	str	r1, [sp, #144]	@ 0x90
 802245c:	18d1      	adds	r1, r2, r3
 802245e:	4663      	mov	r3, ip
 8022460:	468b      	mov	fp, r1
 8022462:	0119      	lsls	r1, r3, #4
 8022464:	910d      	str	r1, [sp, #52]	@ 0x34
 8022466:	00d9      	lsls	r1, r3, #3
 8022468:	005b      	lsls	r3, r3, #1
 802246a:	4463      	add	r3, ip
 802246c:	910e      	str	r1, [sp, #56]	@ 0x38
 802246e:	00d9      	lsls	r1, r3, #3
 8022470:	465b      	mov	r3, fp
 8022472:	44da      	add	sl, fp
 8022474:	4690      	mov	r8, r2
 8022476:	4683      	mov	fp, r0
 8022478:	4699      	mov	r9, r3
 802247a:	9022      	str	r0, [sp, #136]	@ 0x88
 802247c:	9025      	str	r0, [sp, #148]	@ 0x94
 802247e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8022480:	9502      	str	r5, [sp, #8]
 8022482:	9500      	str	r5, [sp, #0]
 8022484:	9501      	str	r5, [sp, #4]
 8022486:	9407      	str	r4, [sp, #28]
 8022488:	465b      	mov	r3, fp
 802248a:	681b      	ldr	r3, [r3, #0]
 802248c:	4642      	mov	r2, r8
 802248e:	111c      	asrs	r4, r3, #4
 8022490:	464b      	mov	r3, r9
 8022492:	4658      	mov	r0, fp
 8022494:	681b      	ldr	r3, [r3, #0]
 8022496:	6812      	ldr	r2, [r2, #0]
 8022498:	111b      	asrs	r3, r3, #4
 802249a:	18e7      	adds	r7, r4, r3
 802249c:	1ae3      	subs	r3, r4, r3
 802249e:	1114      	asrs	r4, r2, #4
 80224a0:	4652      	mov	r2, sl
 80224a2:	6840      	ldr	r0, [r0, #4]
 80224a4:	6812      	ldr	r2, [r2, #0]
 80224a6:	1105      	asrs	r5, r0, #4
 80224a8:	4648      	mov	r0, r9
 80224aa:	9303      	str	r3, [sp, #12]
 80224ac:	1113      	asrs	r3, r2, #4
 80224ae:	18e2      	adds	r2, r4, r3
 80224b0:	465c      	mov	r4, fp
 80224b2:	6840      	ldr	r0, [r0, #4]
 80224b4:	1103      	asrs	r3, r0, #4
 80224b6:	18ee      	adds	r6, r5, r3
 80224b8:	1ae8      	subs	r0, r5, r3
 80224ba:	18bb      	adds	r3, r7, r2
 80224bc:	6023      	str	r3, [r4, #0]
 80224be:	4644      	mov	r4, r8
 80224c0:	6864      	ldr	r4, [r4, #4]
 80224c2:	9004      	str	r0, [sp, #16]
 80224c4:	1125      	asrs	r5, r4, #4
 80224c6:	4654      	mov	r4, sl
 80224c8:	6864      	ldr	r4, [r4, #4]
 80224ca:	1123      	asrs	r3, r4, #4
 80224cc:	465c      	mov	r4, fp
 80224ce:	18eb      	adds	r3, r5, r3
 80224d0:	18f1      	adds	r1, r6, r3
 80224d2:	6061      	str	r1, [r4, #4]
 80224d4:	4655      	mov	r5, sl
 80224d6:	4644      	mov	r4, r8
 80224d8:	686d      	ldr	r5, [r5, #4]
 80224da:	6864      	ldr	r4, [r4, #4]
 80224dc:	1129      	asrs	r1, r5, #4
 80224de:	1124      	asrs	r4, r4, #4
 80224e0:	1a64      	subs	r4, r4, r1
 80224e2:	4641      	mov	r1, r8
 80224e4:	6809      	ldr	r1, [r1, #0]
 80224e6:	9405      	str	r4, [sp, #20]
 80224e8:	1108      	asrs	r0, r1, #4
 80224ea:	4651      	mov	r1, sl
 80224ec:	6809      	ldr	r1, [r1, #0]
 80224ee:	1abc      	subs	r4, r7, r2
 80224f0:	1109      	asrs	r1, r1, #4
 80224f2:	1a41      	subs	r1, r0, r1
 80224f4:	17e2      	asrs	r2, r4, #31
 80224f6:	9106      	str	r1, [sp, #24]
 80224f8:	0011      	movs	r1, r2
 80224fa:	9a01      	ldr	r2, [sp, #4]
 80224fc:	9108      	str	r1, [sp, #32]
 80224fe:	6817      	ldr	r7, [r2, #0]
 8022500:	17fd      	asrs	r5, r7, #31
 8022502:	0028      	movs	r0, r5
 8022504:	1af5      	subs	r5, r6, r3
 8022506:	17ee      	asrs	r6, r5, #31
 8022508:	960a      	str	r6, [sp, #40]	@ 0x28
 802250a:	6856      	ldr	r6, [r2, #4]
 802250c:	9009      	str	r0, [sp, #36]	@ 0x24
 802250e:	17f3      	asrs	r3, r6, #31
 8022510:	003a      	movs	r2, r7
 8022512:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022514:	0003      	movs	r3, r0
 8022516:	0020      	movs	r0, r4
 8022518:	f7de f852 	bl	80005c0 <__aeabi_lmul>
 802251c:	0032      	movs	r2, r6
 802251e:	17f3      	asrs	r3, r6, #31
 8022520:	910c      	str	r1, [sp, #48]	@ 0x30
 8022522:	0028      	movs	r0, r5
 8022524:	17e9      	asrs	r1, r5, #31
 8022526:	f7de f84b 	bl	80005c0 <__aeabi_lmul>
 802252a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802252c:	002a      	movs	r2, r5
 802252e:	4684      	mov	ip, r0
 8022530:	4640      	mov	r0, r8
 8022532:	4461      	add	r1, ip
 8022534:	0049      	lsls	r1, r1, #1
 8022536:	6001      	str	r1, [r0, #0]
 8022538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802253a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802253c:	0038      	movs	r0, r7
 802253e:	f7de f83f 	bl	80005c0 <__aeabi_lmul>
 8022542:	0032      	movs	r2, r6
 8022544:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022546:	000d      	movs	r5, r1
 8022548:	0020      	movs	r0, r4
 802254a:	9908      	ldr	r1, [sp, #32]
 802254c:	f7de f838 	bl	80005c0 <__aeabi_lmul>
 8022550:	4646      	mov	r6, r8
 8022552:	1a6d      	subs	r5, r5, r1
 8022554:	006d      	lsls	r5, r5, #1
 8022556:	6075      	str	r5, [r6, #4]
 8022558:	9903      	ldr	r1, [sp, #12]
 802255a:	9d05      	ldr	r5, [sp, #20]
 802255c:	000c      	movs	r4, r1
 802255e:	46ac      	mov	ip, r5
 8022560:	4464      	add	r4, ip
 8022562:	17e6      	asrs	r6, r4, #31
 8022564:	0031      	movs	r1, r6
 8022566:	9b00      	ldr	r3, [sp, #0]
 8022568:	9804      	ldr	r0, [sp, #16]
 802256a:	681e      	ldr	r6, [r3, #0]
 802256c:	17f7      	asrs	r7, r6, #31
 802256e:	9709      	str	r7, [sp, #36]	@ 0x24
 8022570:	9f06      	ldr	r7, [sp, #24]
 8022572:	0032      	movs	r2, r6
 8022574:	1bc7      	subs	r7, r0, r7
 8022576:	17fd      	asrs	r5, r7, #31
 8022578:	950a      	str	r5, [sp, #40]	@ 0x28
 802257a:	685d      	ldr	r5, [r3, #4]
 802257c:	17f3      	asrs	r3, r6, #31
 802257e:	17e8      	asrs	r0, r5, #31
 8022580:	900b      	str	r0, [sp, #44]	@ 0x2c
 8022582:	0020      	movs	r0, r4
 8022584:	9108      	str	r1, [sp, #32]
 8022586:	f7de f81b 	bl	80005c0 <__aeabi_lmul>
 802258a:	002a      	movs	r2, r5
 802258c:	17eb      	asrs	r3, r5, #31
 802258e:	910c      	str	r1, [sp, #48]	@ 0x30
 8022590:	0038      	movs	r0, r7
 8022592:	17f9      	asrs	r1, r7, #31
 8022594:	f7de f814 	bl	80005c0 <__aeabi_lmul>
 8022598:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802259a:	003a      	movs	r2, r7
 802259c:	4684      	mov	ip, r0
 802259e:	4648      	mov	r0, r9
 80225a0:	4461      	add	r1, ip
 80225a2:	0049      	lsls	r1, r1, #1
 80225a4:	6001      	str	r1, [r0, #0]
 80225a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80225a8:	0030      	movs	r0, r6
 80225aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80225ac:	f7de f808 	bl	80005c0 <__aeabi_lmul>
 80225b0:	002a      	movs	r2, r5
 80225b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80225b4:	000e      	movs	r6, r1
 80225b6:	0020      	movs	r0, r4
 80225b8:	9908      	ldr	r1, [sp, #32]
 80225ba:	f7de f801 	bl	80005c0 <__aeabi_lmul>
 80225be:	464c      	mov	r4, r9
 80225c0:	9d05      	ldr	r5, [sp, #20]
 80225c2:	1a76      	subs	r6, r6, r1
 80225c4:	9903      	ldr	r1, [sp, #12]
 80225c6:	0076      	lsls	r6, r6, #1
 80225c8:	6066      	str	r6, [r4, #4]
 80225ca:	1b4c      	subs	r4, r1, r5
 80225cc:	9e06      	ldr	r6, [sp, #24]
 80225ce:	17e1      	asrs	r1, r4, #31
 80225d0:	9103      	str	r1, [sp, #12]
 80225d2:	9902      	ldr	r1, [sp, #8]
 80225d4:	46b4      	mov	ip, r6
 80225d6:	680f      	ldr	r7, [r1, #0]
 80225d8:	9804      	ldr	r0, [sp, #16]
 80225da:	17fd      	asrs	r5, r7, #31
 80225dc:	002b      	movs	r3, r5
 80225de:	684e      	ldr	r6, [r1, #4]
 80225e0:	4460      	add	r0, ip
 80225e2:	0005      	movs	r5, r0
 80225e4:	17c0      	asrs	r0, r0, #31
 80225e6:	9005      	str	r0, [sp, #20]
 80225e8:	17f0      	asrs	r0, r6, #31
 80225ea:	9006      	str	r0, [sp, #24]
 80225ec:	003a      	movs	r2, r7
 80225ee:	0020      	movs	r0, r4
 80225f0:	17e1      	asrs	r1, r4, #31
 80225f2:	9304      	str	r3, [sp, #16]
 80225f4:	f7dd ffe4 	bl	80005c0 <__aeabi_lmul>
 80225f8:	0032      	movs	r2, r6
 80225fa:	9108      	str	r1, [sp, #32]
 80225fc:	17f3      	asrs	r3, r6, #31
 80225fe:	0028      	movs	r0, r5
 8022600:	17e9      	asrs	r1, r5, #31
 8022602:	f7dd ffdd 	bl	80005c0 <__aeabi_lmul>
 8022606:	9808      	ldr	r0, [sp, #32]
 8022608:	002a      	movs	r2, r5
 802260a:	4684      	mov	ip, r0
 802260c:	4650      	mov	r0, sl
 802260e:	4461      	add	r1, ip
 8022610:	0049      	lsls	r1, r1, #1
 8022612:	6001      	str	r1, [r0, #0]
 8022614:	9b05      	ldr	r3, [sp, #20]
 8022616:	9904      	ldr	r1, [sp, #16]
 8022618:	0038      	movs	r0, r7
 802261a:	f7dd ffd1 	bl	80005c0 <__aeabi_lmul>
 802261e:	0020      	movs	r0, r4
 8022620:	2408      	movs	r4, #8
 8022622:	000d      	movs	r5, r1
 8022624:	0032      	movs	r2, r6
 8022626:	9b06      	ldr	r3, [sp, #24]
 8022628:	9903      	ldr	r1, [sp, #12]
 802262a:	f7dd ffc9 	bl	80005c0 <__aeabi_lmul>
 802262e:	46a4      	mov	ip, r4
 8022630:	4650      	mov	r0, sl
 8022632:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022634:	44e3      	add	fp, ip
 8022636:	44e0      	add	r8, ip
 8022638:	44e1      	add	r9, ip
 802263a:	44e2      	add	sl, ip
 802263c:	46a4      	mov	ip, r4
 802263e:	1a6d      	subs	r5, r5, r1
 8022640:	006d      	lsls	r5, r5, #1
 8022642:	9a01      	ldr	r2, [sp, #4]
 8022644:	6045      	str	r5, [r0, #4]
 8022646:	9807      	ldr	r0, [sp, #28]
 8022648:	4462      	add	r2, ip
 802264a:	3801      	subs	r0, #1
 802264c:	9201      	str	r2, [sp, #4]
 802264e:	9007      	str	r0, [sp, #28]
 8022650:	9b00      	ldr	r3, [sp, #0]
 8022652:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022654:	9902      	ldr	r1, [sp, #8]
 8022656:	4694      	mov	ip, r2
 8022658:	4463      	add	r3, ip
 802265a:	9300      	str	r3, [sp, #0]
 802265c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802265e:	469c      	mov	ip, r3
 8022660:	4461      	add	r1, ip
 8022662:	9102      	str	r1, [sp, #8]
 8022664:	2800      	cmp	r0, #0
 8022666:	d000      	beq.n	802266a <arm_radix4_butterfly_q31+0x232>
 8022668:	e70e      	b.n	8022488 <arm_radix4_butterfly_q31+0x50>
 802266a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802266c:	009b      	lsls	r3, r3, #2
 802266e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022670:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022672:	9320      	str	r3, [sp, #128]	@ 0x80
 8022674:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022676:	2b04      	cmp	r3, #4
 8022678:	d800      	bhi.n	802267c <arm_radix4_butterfly_q31+0x244>
 802267a:	e180      	b.n	802297e <arm_radix4_butterfly_q31+0x546>
 802267c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802267e:	0893      	lsrs	r3, r2, #2
 8022680:	1e59      	subs	r1, r3, #1
 8022682:	9321      	str	r3, [sp, #132]	@ 0x84
 8022684:	00db      	lsls	r3, r3, #3
 8022686:	931b      	str	r3, [sp, #108]	@ 0x6c
 8022688:	00d3      	lsls	r3, r2, #3
 802268a:	9300      	str	r3, [sp, #0]
 802268c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802268e:	911a      	str	r1, [sp, #104]	@ 0x68
 8022690:	00da      	lsls	r2, r3, #3
 8022692:	921e      	str	r2, [sp, #120]	@ 0x78
 8022694:	011a      	lsls	r2, r3, #4
 8022696:	921d      	str	r2, [sp, #116]	@ 0x74
 8022698:	001a      	movs	r2, r3
 802269a:	4694      	mov	ip, r2
 802269c:	005b      	lsls	r3, r3, #1
 802269e:	4463      	add	r3, ip
 80226a0:	00db      	lsls	r3, r3, #3
 80226a2:	931c      	str	r3, [sp, #112]	@ 0x70
 80226a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80226a6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80226a8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80226aa:	9318      	str	r3, [sp, #96]	@ 0x60
 80226ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80226ae:	9316      	str	r3, [sp, #88]	@ 0x58
 80226b0:	2300      	movs	r3, #0
 80226b2:	9315      	str	r3, [sp, #84]	@ 0x54
 80226b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80226b6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80226b8:	681a      	ldr	r2, [r3, #0]
 80226ba:	685b      	ldr	r3, [r3, #4]
 80226bc:	9205      	str	r2, [sp, #20]
 80226be:	9306      	str	r3, [sp, #24]
 80226c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80226c2:	468c      	mov	ip, r1
 80226c4:	681a      	ldr	r2, [r3, #0]
 80226c6:	685b      	ldr	r3, [r3, #4]
 80226c8:	9207      	str	r2, [sp, #28]
 80226ca:	9308      	str	r3, [sp, #32]
 80226cc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80226ce:	681a      	ldr	r2, [r3, #0]
 80226d0:	685b      	ldr	r3, [r3, #4]
 80226d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80226d4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80226d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80226d8:	0013      	movs	r3, r2
 80226da:	4463      	add	r3, ip
 80226dc:	4698      	mov	r8, r3
 80226de:	0013      	movs	r3, r2
 80226e0:	4442      	add	r2, r8
 80226e2:	4691      	mov	r9, r2
 80226e4:	001a      	movs	r2, r3
 80226e6:	444a      	add	r2, r9
 80226e8:	4692      	mov	sl, r2
 80226ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80226ec:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80226ee:	4293      	cmp	r3, r2
 80226f0:	d800      	bhi.n	80226f4 <arm_radix4_butterfly_q31+0x2bc>
 80226f2:	e0dd      	b.n	80228b0 <arm_radix4_butterfly_q31+0x478>
 80226f4:	4694      	mov	ip, r2
 80226f6:	468b      	mov	fp, r1
 80226f8:	4644      	mov	r4, r8
 80226fa:	4655      	mov	r5, sl
 80226fc:	9b07      	ldr	r3, [sp, #28]
 80226fe:	17db      	asrs	r3, r3, #31
 8022700:	930c      	str	r3, [sp, #48]	@ 0x30
 8022702:	9b08      	ldr	r3, [sp, #32]
 8022704:	17db      	asrs	r3, r3, #31
 8022706:	930d      	str	r3, [sp, #52]	@ 0x34
 8022708:	9b05      	ldr	r3, [sp, #20]
 802270a:	17db      	asrs	r3, r3, #31
 802270c:	930e      	str	r3, [sp, #56]	@ 0x38
 802270e:	9b06      	ldr	r3, [sp, #24]
 8022710:	17db      	asrs	r3, r3, #31
 8022712:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022716:	17db      	asrs	r3, r3, #31
 8022718:	9310      	str	r3, [sp, #64]	@ 0x40
 802271a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802271c:	17db      	asrs	r3, r3, #31
 802271e:	9311      	str	r3, [sp, #68]	@ 0x44
 8022720:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022722:	4463      	add	r3, ip
 8022724:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022726:	465b      	mov	r3, fp
 8022728:	4659      	mov	r1, fp
 802272a:	681a      	ldr	r2, [r3, #0]
 802272c:	464b      	mov	r3, r9
 802272e:	684f      	ldr	r7, [r1, #4]
 8022730:	4649      	mov	r1, r9
 8022732:	681b      	ldr	r3, [r3, #0]
 8022734:	18d6      	adds	r6, r2, r3
 8022736:	1ad3      	subs	r3, r2, r3
 8022738:	9301      	str	r3, [sp, #4]
 802273a:	684b      	ldr	r3, [r1, #4]
 802273c:	18f8      	adds	r0, r7, r3
 802273e:	1af9      	subs	r1, r7, r3
 8022740:	6827      	ldr	r7, [r4, #0]
 8022742:	9102      	str	r1, [sp, #8]
 8022744:	003a      	movs	r2, r7
 8022746:	682f      	ldr	r7, [r5, #0]
 8022748:	46bc      	mov	ip, r7
 802274a:	465f      	mov	r7, fp
 802274c:	4462      	add	r2, ip
 802274e:	18b3      	adds	r3, r6, r2
 8022750:	109b      	asrs	r3, r3, #2
 8022752:	603b      	str	r3, [r7, #0]
 8022754:	6867      	ldr	r7, [r4, #4]
 8022756:	1ab6      	subs	r6, r6, r2
 8022758:	46b8      	mov	r8, r7
 802275a:	686f      	ldr	r7, [r5, #4]
 802275c:	17f2      	asrs	r2, r6, #31
 802275e:	46bc      	mov	ip, r7
 8022760:	44e0      	add	r8, ip
 8022762:	4643      	mov	r3, r8
 8022764:	465f      	mov	r7, fp
 8022766:	18c1      	adds	r1, r0, r3
 8022768:	1089      	asrs	r1, r1, #2
 802276a:	6079      	str	r1, [r7, #4]
 802276c:	9900      	ldr	r1, [sp, #0]
 802276e:	4690      	mov	r8, r2
 8022770:	468c      	mov	ip, r1
 8022772:	6867      	ldr	r7, [r4, #4]
 8022774:	6869      	ldr	r1, [r5, #4]
 8022776:	44e3      	add	fp, ip
 8022778:	1a7f      	subs	r7, r7, r1
 802277a:	9703      	str	r7, [sp, #12]
 802277c:	6829      	ldr	r1, [r5, #0]
 802277e:	6827      	ldr	r7, [r4, #0]
 8022780:	1a7f      	subs	r7, r7, r1
 8022782:	9704      	str	r7, [sp, #16]
 8022784:	1ac7      	subs	r7, r0, r3
 8022786:	17fa      	asrs	r2, r7, #31
 8022788:	4692      	mov	sl, r2
 802278a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802278c:	9a07      	ldr	r2, [sp, #28]
 802278e:	0030      	movs	r0, r6
 8022790:	4641      	mov	r1, r8
 8022792:	f7dd ff15 	bl	80005c0 <__aeabi_lmul>
 8022796:	9a08      	ldr	r2, [sp, #32]
 8022798:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802279a:	9112      	str	r1, [sp, #72]	@ 0x48
 802279c:	0038      	movs	r0, r7
 802279e:	4651      	mov	r1, sl
 80227a0:	f7dd ff0e 	bl	80005c0 <__aeabi_lmul>
 80227a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80227a6:	9a07      	ldr	r2, [sp, #28]
 80227a8:	4684      	mov	ip, r0
 80227aa:	4461      	add	r1, ip
 80227ac:	1049      	asrs	r1, r1, #1
 80227ae:	6021      	str	r1, [r4, #0]
 80227b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80227b2:	0038      	movs	r0, r7
 80227b4:	4651      	mov	r1, sl
 80227b6:	f7dd ff03 	bl	80005c0 <__aeabi_lmul>
 80227ba:	9a08      	ldr	r2, [sp, #32]
 80227bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80227be:	000f      	movs	r7, r1
 80227c0:	0030      	movs	r0, r6
 80227c2:	4641      	mov	r1, r8
 80227c4:	f7dd fefc 	bl	80005c0 <__aeabi_lmul>
 80227c8:	9b00      	ldr	r3, [sp, #0]
 80227ca:	9a01      	ldr	r2, [sp, #4]
 80227cc:	469c      	mov	ip, r3
 80227ce:	9803      	ldr	r0, [sp, #12]
 80227d0:	1a7f      	subs	r7, r7, r1
 80227d2:	107f      	asrs	r7, r7, #1
 80227d4:	6067      	str	r7, [r4, #4]
 80227d6:	0016      	movs	r6, r2
 80227d8:	4464      	add	r4, ip
 80227da:	4684      	mov	ip, r0
 80227dc:	4466      	add	r6, ip
 80227de:	17f2      	asrs	r2, r6, #31
 80227e0:	4690      	mov	r8, r2
 80227e2:	9902      	ldr	r1, [sp, #8]
 80227e4:	9f04      	ldr	r7, [sp, #16]
 80227e6:	0030      	movs	r0, r6
 80227e8:	1bcf      	subs	r7, r1, r7
 80227ea:	17fa      	asrs	r2, r7, #31
 80227ec:	4692      	mov	sl, r2
 80227ee:	4641      	mov	r1, r8
 80227f0:	9a05      	ldr	r2, [sp, #20]
 80227f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80227f4:	f7dd fee4 	bl	80005c0 <__aeabi_lmul>
 80227f8:	9a06      	ldr	r2, [sp, #24]
 80227fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80227fc:	9112      	str	r1, [sp, #72]	@ 0x48
 80227fe:	0038      	movs	r0, r7
 8022800:	4651      	mov	r1, sl
 8022802:	f7dd fedd 	bl	80005c0 <__aeabi_lmul>
 8022806:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022808:	9a05      	ldr	r2, [sp, #20]
 802280a:	4684      	mov	ip, r0
 802280c:	4648      	mov	r0, r9
 802280e:	4461      	add	r1, ip
 8022810:	1049      	asrs	r1, r1, #1
 8022812:	6001      	str	r1, [r0, #0]
 8022814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022816:	0038      	movs	r0, r7
 8022818:	4651      	mov	r1, sl
 802281a:	f7dd fed1 	bl	80005c0 <__aeabi_lmul>
 802281e:	9a06      	ldr	r2, [sp, #24]
 8022820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022822:	000f      	movs	r7, r1
 8022824:	0030      	movs	r0, r6
 8022826:	4641      	mov	r1, r8
 8022828:	f7dd feca 	bl	80005c0 <__aeabi_lmul>
 802282c:	464e      	mov	r6, r9
 802282e:	9a00      	ldr	r2, [sp, #0]
 8022830:	9b01      	ldr	r3, [sp, #4]
 8022832:	4694      	mov	ip, r2
 8022834:	9803      	ldr	r0, [sp, #12]
 8022836:	1a7f      	subs	r7, r7, r1
 8022838:	107f      	asrs	r7, r7, #1
 802283a:	6077      	str	r7, [r6, #4]
 802283c:	1a1e      	subs	r6, r3, r0
 802283e:	9b04      	ldr	r3, [sp, #16]
 8022840:	44e1      	add	r9, ip
 8022842:	469c      	mov	ip, r3
 8022844:	17f0      	asrs	r0, r6, #31
 8022846:	4680      	mov	r8, r0
 8022848:	9902      	ldr	r1, [sp, #8]
 802284a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802284c:	4461      	add	r1, ip
 802284e:	17cb      	asrs	r3, r1, #31
 8022850:	000f      	movs	r7, r1
 8022852:	469a      	mov	sl, r3
 8022854:	0030      	movs	r0, r6
 8022856:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022858:	4641      	mov	r1, r8
 802285a:	f7dd feb1 	bl	80005c0 <__aeabi_lmul>
 802285e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022860:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022862:	9101      	str	r1, [sp, #4]
 8022864:	0038      	movs	r0, r7
 8022866:	4651      	mov	r1, sl
 8022868:	f7dd feaa 	bl	80005c0 <__aeabi_lmul>
 802286c:	9801      	ldr	r0, [sp, #4]
 802286e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022870:	4684      	mov	ip, r0
 8022872:	4461      	add	r1, ip
 8022874:	1049      	asrs	r1, r1, #1
 8022876:	6029      	str	r1, [r5, #0]
 8022878:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802287a:	0038      	movs	r0, r7
 802287c:	4651      	mov	r1, sl
 802287e:	f7dd fe9f 	bl	80005c0 <__aeabi_lmul>
 8022882:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022884:	000f      	movs	r7, r1
 8022886:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022888:	0030      	movs	r0, r6
 802288a:	4641      	mov	r1, r8
 802288c:	f7dd fe98 	bl	80005c0 <__aeabi_lmul>
 8022890:	1a7f      	subs	r7, r7, r1
 8022892:	107f      	asrs	r7, r7, #1
 8022894:	606f      	str	r7, [r5, #4]
 8022896:	9a00      	ldr	r2, [sp, #0]
 8022898:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802289a:	4694      	mov	ip, r2
 802289c:	4465      	add	r5, ip
 802289e:	468c      	mov	ip, r1
 80228a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80228a2:	0013      	movs	r3, r2
 80228a4:	4462      	add	r2, ip
 80228a6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80228a8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80228aa:	429a      	cmp	r2, r3
 80228ac:	d900      	bls.n	80228b0 <arm_radix4_butterfly_q31+0x478>
 80228ae:	e73a      	b.n	8022726 <arm_radix4_butterfly_q31+0x2ee>
 80228b0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80228b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80228b4:	468c      	mov	ip, r1
 80228b6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80228b8:	4462      	add	r2, ip
 80228ba:	468c      	mov	ip, r1
 80228bc:	9216      	str	r2, [sp, #88]	@ 0x58
 80228be:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80228c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80228c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80228c4:	4462      	add	r2, ip
 80228c6:	468c      	mov	ip, r1
 80228c8:	9219      	str	r2, [sp, #100]	@ 0x64
 80228ca:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80228cc:	3301      	adds	r3, #1
 80228ce:	4462      	add	r2, ip
 80228d0:	9218      	str	r2, [sp, #96]	@ 0x60
 80228d2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80228d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80228d6:	3208      	adds	r2, #8
 80228d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80228da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80228dc:	4293      	cmp	r3, r2
 80228de:	d800      	bhi.n	80228e2 <arm_radix4_butterfly_q31+0x4aa>
 80228e0:	e6e8      	b.n	80226b4 <arm_radix4_butterfly_q31+0x27c>
 80228e2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80228e4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80228e6:	009b      	lsls	r3, r3, #2
 80228e8:	931f      	str	r3, [sp, #124]	@ 0x7c
 80228ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80228ec:	9213      	str	r2, [sp, #76]	@ 0x4c
 80228ee:	089b      	lsrs	r3, r3, #2
 80228f0:	9320      	str	r3, [sp, #128]	@ 0x80
 80228f2:	2b04      	cmp	r3, #4
 80228f4:	d900      	bls.n	80228f8 <arm_radix4_butterfly_q31+0x4c0>
 80228f6:	e6c1      	b.n	802267c <arm_radix4_butterfly_q31+0x244>
 80228f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80228fa:	469a      	mov	sl, r3
 80228fc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80228fe:	691c      	ldr	r4, [r3, #16]
 8022900:	685a      	ldr	r2, [r3, #4]
 8022902:	46a1      	mov	r9, r4
 8022904:	4690      	mov	r8, r2
 8022906:	6819      	ldr	r1, [r3, #0]
 8022908:	689a      	ldr	r2, [r3, #8]
 802290a:	699f      	ldr	r7, [r3, #24]
 802290c:	188d      	adds	r5, r1, r2
 802290e:	444d      	add	r5, r9
 8022910:	19ed      	adds	r5, r5, r7
 8022912:	69de      	ldr	r6, [r3, #28]
 8022914:	601d      	str	r5, [r3, #0]
 8022916:	4645      	mov	r5, r8
 8022918:	46b4      	mov	ip, r6
 802291a:	68d8      	ldr	r0, [r3, #12]
 802291c:	695c      	ldr	r4, [r3, #20]
 802291e:	182d      	adds	r5, r5, r0
 8022920:	192d      	adds	r5, r5, r4
 8022922:	4465      	add	r5, ip
 8022924:	605d      	str	r5, [r3, #4]
 8022926:	1a8d      	subs	r5, r1, r2
 8022928:	444d      	add	r5, r9
 802292a:	1bed      	subs	r5, r5, r7
 802292c:	609d      	str	r5, [r3, #8]
 802292e:	4645      	mov	r5, r8
 8022930:	1a2d      	subs	r5, r5, r0
 8022932:	192d      	adds	r5, r5, r4
 8022934:	1bad      	subs	r5, r5, r6
 8022936:	464e      	mov	r6, r9
 8022938:	60dd      	str	r5, [r3, #12]
 802293a:	180d      	adds	r5, r1, r0
 802293c:	1bad      	subs	r5, r5, r6
 802293e:	4666      	mov	r6, ip
 8022940:	1bad      	subs	r5, r5, r6
 8022942:	611d      	str	r5, [r3, #16]
 8022944:	4645      	mov	r5, r8
 8022946:	1aad      	subs	r5, r5, r2
 8022948:	4442      	add	r2, r8
 802294a:	1b12      	subs	r2, r2, r4
 802294c:	1bd2      	subs	r2, r2, r7
 802294e:	1a08      	subs	r0, r1, r0
 8022950:	61da      	str	r2, [r3, #28]
 8022952:	4649      	mov	r1, r9
 8022954:	2201      	movs	r2, #1
 8022956:	1a41      	subs	r1, r0, r1
 8022958:	4252      	negs	r2, r2
 802295a:	4461      	add	r1, ip
 802295c:	4694      	mov	ip, r2
 802295e:	44e2      	add	sl, ip
 8022960:	4652      	mov	r2, sl
 8022962:	1b2d      	subs	r5, r5, r4
 8022964:	19ed      	adds	r5, r5, r7
 8022966:	615d      	str	r5, [r3, #20]
 8022968:	6199      	str	r1, [r3, #24]
 802296a:	3320      	adds	r3, #32
 802296c:	2a00      	cmp	r2, #0
 802296e:	d1c6      	bne.n	80228fe <arm_radix4_butterfly_q31+0x4c6>
 8022970:	b027      	add	sp, #156	@ 0x9c
 8022972:	bc3c      	pop	{r2, r3, r4, r5}
 8022974:	4690      	mov	r8, r2
 8022976:	4699      	mov	r9, r3
 8022978:	46a2      	mov	sl, r4
 802297a:	46ab      	mov	fp, r5
 802297c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802297e:	469a      	mov	sl, r3
 8022980:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022982:	e7bc      	b.n	80228fe <arm_radix4_butterfly_q31+0x4c6>

08022984 <arm_radix4_butterfly_inverse_q31>:
 8022984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022986:	464d      	mov	r5, r9
 8022988:	4644      	mov	r4, r8
 802298a:	465f      	mov	r7, fp
 802298c:	4656      	mov	r6, sl
 802298e:	b4f0      	push	{r4, r5, r6, r7}
 8022990:	b0a7      	sub	sp, #156	@ 0x9c
 8022992:	469c      	mov	ip, r3
 8022994:	9114      	str	r1, [sp, #80]	@ 0x50
 8022996:	0889      	lsrs	r1, r1, #2
 8022998:	9310      	str	r3, [sp, #64]	@ 0x40
 802299a:	00cb      	lsls	r3, r1, #3
 802299c:	0015      	movs	r5, r2
 802299e:	9223      	str	r2, [sp, #140]	@ 0x8c
 80229a0:	18c2      	adds	r2, r0, r3
 80229a2:	000c      	movs	r4, r1
 80229a4:	9124      	str	r1, [sp, #144]	@ 0x90
 80229a6:	18d1      	adds	r1, r2, r3
 80229a8:	468b      	mov	fp, r1
 80229aa:	469a      	mov	sl, r3
 80229ac:	4663      	mov	r3, ip
 80229ae:	44da      	add	sl, fp
 80229b0:	46d0      	mov	r8, sl
 80229b2:	4681      	mov	r9, r0
 80229b4:	4692      	mov	sl, r2
 80229b6:	0119      	lsls	r1, r3, #4
 80229b8:	910d      	str	r1, [sp, #52]	@ 0x34
 80229ba:	00d9      	lsls	r1, r3, #3
 80229bc:	005b      	lsls	r3, r3, #1
 80229be:	4463      	add	r3, ip
 80229c0:	910e      	str	r1, [sp, #56]	@ 0x38
 80229c2:	00d9      	lsls	r1, r3, #3
 80229c4:	9022      	str	r0, [sp, #136]	@ 0x88
 80229c6:	9025      	str	r0, [sp, #148]	@ 0x94
 80229c8:	910f      	str	r1, [sp, #60]	@ 0x3c
 80229ca:	9502      	str	r5, [sp, #8]
 80229cc:	9500      	str	r5, [sp, #0]
 80229ce:	9501      	str	r5, [sp, #4]
 80229d0:	9409      	str	r4, [sp, #36]	@ 0x24
 80229d2:	464b      	mov	r3, r9
 80229d4:	681b      	ldr	r3, [r3, #0]
 80229d6:	4652      	mov	r2, sl
 80229d8:	111c      	asrs	r4, r3, #4
 80229da:	465b      	mov	r3, fp
 80229dc:	4648      	mov	r0, r9
 80229de:	681b      	ldr	r3, [r3, #0]
 80229e0:	6812      	ldr	r2, [r2, #0]
 80229e2:	6840      	ldr	r0, [r0, #4]
 80229e4:	111b      	asrs	r3, r3, #4
 80229e6:	18e7      	adds	r7, r4, r3
 80229e8:	1ae3      	subs	r3, r4, r3
 80229ea:	1114      	asrs	r4, r2, #4
 80229ec:	4642      	mov	r2, r8
 80229ee:	1105      	asrs	r5, r0, #4
 80229f0:	4658      	mov	r0, fp
 80229f2:	6812      	ldr	r2, [r2, #0]
 80229f4:	6840      	ldr	r0, [r0, #4]
 80229f6:	9303      	str	r3, [sp, #12]
 80229f8:	1113      	asrs	r3, r2, #4
 80229fa:	18e2      	adds	r2, r4, r3
 80229fc:	1103      	asrs	r3, r0, #4
 80229fe:	18ee      	adds	r6, r5, r3
 8022a00:	1ae8      	subs	r0, r5, r3
 8022a02:	464d      	mov	r5, r9
 8022a04:	18bb      	adds	r3, r7, r2
 8022a06:	602b      	str	r3, [r5, #0]
 8022a08:	4641      	mov	r1, r8
 8022a0a:	4655      	mov	r5, sl
 8022a0c:	6849      	ldr	r1, [r1, #4]
 8022a0e:	686d      	ldr	r5, [r5, #4]
 8022a10:	110b      	asrs	r3, r1, #4
 8022a12:	112d      	asrs	r5, r5, #4
 8022a14:	18eb      	adds	r3, r5, r3
 8022a16:	464d      	mov	r5, r9
 8022a18:	18f1      	adds	r1, r6, r3
 8022a1a:	6069      	str	r1, [r5, #4]
 8022a1c:	4655      	mov	r5, sl
 8022a1e:	686d      	ldr	r5, [r5, #4]
 8022a20:	9004      	str	r0, [sp, #16]
 8022a22:	112c      	asrs	r4, r5, #4
 8022a24:	4645      	mov	r5, r8
 8022a26:	686d      	ldr	r5, [r5, #4]
 8022a28:	1129      	asrs	r1, r5, #4
 8022a2a:	1a65      	subs	r5, r4, r1
 8022a2c:	4651      	mov	r1, sl
 8022a2e:	6809      	ldr	r1, [r1, #0]
 8022a30:	1abc      	subs	r4, r7, r2
 8022a32:	1108      	asrs	r0, r1, #4
 8022a34:	4641      	mov	r1, r8
 8022a36:	17e2      	asrs	r2, r4, #31
 8022a38:	6809      	ldr	r1, [r1, #0]
 8022a3a:	9207      	str	r2, [sp, #28]
 8022a3c:	9a01      	ldr	r2, [sp, #4]
 8022a3e:	1109      	asrs	r1, r1, #4
 8022a40:	6817      	ldr	r7, [r2, #0]
 8022a42:	1a41      	subs	r1, r0, r1
 8022a44:	9106      	str	r1, [sp, #24]
 8022a46:	0039      	movs	r1, r7
 8022a48:	17ff      	asrs	r7, r7, #31
 8022a4a:	0038      	movs	r0, r7
 8022a4c:	9505      	str	r5, [sp, #20]
 8022a4e:	1af5      	subs	r5, r6, r3
 8022a50:	17ef      	asrs	r7, r5, #31
 8022a52:	970b      	str	r7, [sp, #44]	@ 0x2c
 8022a54:	6857      	ldr	r7, [r2, #4]
 8022a56:	0003      	movs	r3, r0
 8022a58:	17fe      	asrs	r6, r7, #31
 8022a5a:	000a      	movs	r2, r1
 8022a5c:	9108      	str	r1, [sp, #32]
 8022a5e:	900a      	str	r0, [sp, #40]	@ 0x28
 8022a60:	17e1      	asrs	r1, r4, #31
 8022a62:	0020      	movs	r0, r4
 8022a64:	960c      	str	r6, [sp, #48]	@ 0x30
 8022a66:	f7dd fdab 	bl	80005c0 <__aeabi_lmul>
 8022a6a:	003a      	movs	r2, r7
 8022a6c:	17fb      	asrs	r3, r7, #31
 8022a6e:	000e      	movs	r6, r1
 8022a70:	0028      	movs	r0, r5
 8022a72:	17e9      	asrs	r1, r5, #31
 8022a74:	f7dd fda4 	bl	80005c0 <__aeabi_lmul>
 8022a78:	4653      	mov	r3, sl
 8022a7a:	1a76      	subs	r6, r6, r1
 8022a7c:	0076      	lsls	r6, r6, #1
 8022a7e:	601e      	str	r6, [r3, #0]
 8022a80:	002a      	movs	r2, r5
 8022a82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022a84:	9808      	ldr	r0, [sp, #32]
 8022a86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022a88:	f7dd fd9a 	bl	80005c0 <__aeabi_lmul>
 8022a8c:	003a      	movs	r2, r7
 8022a8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022a90:	000d      	movs	r5, r1
 8022a92:	0020      	movs	r0, r4
 8022a94:	9907      	ldr	r1, [sp, #28]
 8022a96:	f7dd fd93 	bl	80005c0 <__aeabi_lmul>
 8022a9a:	4657      	mov	r7, sl
 8022a9c:	186d      	adds	r5, r5, r1
 8022a9e:	006d      	lsls	r5, r5, #1
 8022aa0:	607d      	str	r5, [r7, #4]
 8022aa2:	9b03      	ldr	r3, [sp, #12]
 8022aa4:	9e06      	ldr	r6, [sp, #24]
 8022aa6:	9d05      	ldr	r5, [sp, #20]
 8022aa8:	46b4      	mov	ip, r6
 8022aaa:	1b5d      	subs	r5, r3, r5
 8022aac:	9b00      	ldr	r3, [sp, #0]
 8022aae:	17ef      	asrs	r7, r5, #31
 8022ab0:	0039      	movs	r1, r7
 8022ab2:	681f      	ldr	r7, [r3, #0]
 8022ab4:	17fc      	asrs	r4, r7, #31
 8022ab6:	0020      	movs	r0, r4
 8022ab8:	9c04      	ldr	r4, [sp, #16]
 8022aba:	4464      	add	r4, ip
 8022abc:	17e6      	asrs	r6, r4, #31
 8022abe:	9407      	str	r4, [sp, #28]
 8022ac0:	9608      	str	r6, [sp, #32]
 8022ac2:	685e      	ldr	r6, [r3, #4]
 8022ac4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8022ac6:	17f2      	asrs	r2, r6, #31
 8022ac8:	0003      	movs	r3, r0
 8022aca:	920c      	str	r2, [sp, #48]	@ 0x30
 8022acc:	0028      	movs	r0, r5
 8022ace:	003a      	movs	r2, r7
 8022ad0:	910a      	str	r1, [sp, #40]	@ 0x28
 8022ad2:	f7dd fd75 	bl	80005c0 <__aeabi_lmul>
 8022ad6:	0032      	movs	r2, r6
 8022ad8:	17f3      	asrs	r3, r6, #31
 8022ada:	9807      	ldr	r0, [sp, #28]
 8022adc:	000c      	movs	r4, r1
 8022ade:	9908      	ldr	r1, [sp, #32]
 8022ae0:	f7dd fd6e 	bl	80005c0 <__aeabi_lmul>
 8022ae4:	4658      	mov	r0, fp
 8022ae6:	1a64      	subs	r4, r4, r1
 8022ae8:	0064      	lsls	r4, r4, #1
 8022aea:	9a07      	ldr	r2, [sp, #28]
 8022aec:	6004      	str	r4, [r0, #0]
 8022aee:	9b08      	ldr	r3, [sp, #32]
 8022af0:	0038      	movs	r0, r7
 8022af2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022af4:	f7dd fd64 	bl	80005c0 <__aeabi_lmul>
 8022af8:	0032      	movs	r2, r6
 8022afa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022afc:	000c      	movs	r4, r1
 8022afe:	0028      	movs	r0, r5
 8022b00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022b02:	f7dd fd5d 	bl	80005c0 <__aeabi_lmul>
 8022b06:	9d05      	ldr	r5, [sp, #20]
 8022b08:	465f      	mov	r7, fp
 8022b0a:	46ac      	mov	ip, r5
 8022b0c:	1864      	adds	r4, r4, r1
 8022b0e:	9903      	ldr	r1, [sp, #12]
 8022b10:	0064      	lsls	r4, r4, #1
 8022b12:	4461      	add	r1, ip
 8022b14:	607c      	str	r4, [r7, #4]
 8022b16:	000c      	movs	r4, r1
 8022b18:	17c9      	asrs	r1, r1, #31
 8022b1a:	9105      	str	r1, [sp, #20]
 8022b1c:	9902      	ldr	r1, [sp, #8]
 8022b1e:	9804      	ldr	r0, [sp, #16]
 8022b20:	680d      	ldr	r5, [r1, #0]
 8022b22:	9e06      	ldr	r6, [sp, #24]
 8022b24:	002b      	movs	r3, r5
 8022b26:	17ed      	asrs	r5, r5, #31
 8022b28:	684f      	ldr	r7, [r1, #4]
 8022b2a:	9503      	str	r5, [sp, #12]
 8022b2c:	1b85      	subs	r5, r0, r6
 8022b2e:	17e8      	asrs	r0, r5, #31
 8022b30:	001a      	movs	r2, r3
 8022b32:	9006      	str	r0, [sp, #24]
 8022b34:	17fe      	asrs	r6, r7, #31
 8022b36:	9304      	str	r3, [sp, #16]
 8022b38:	0020      	movs	r0, r4
 8022b3a:	9b03      	ldr	r3, [sp, #12]
 8022b3c:	17e1      	asrs	r1, r4, #31
 8022b3e:	9607      	str	r6, [sp, #28]
 8022b40:	f7dd fd3e 	bl	80005c0 <__aeabi_lmul>
 8022b44:	003a      	movs	r2, r7
 8022b46:	000e      	movs	r6, r1
 8022b48:	17fb      	asrs	r3, r7, #31
 8022b4a:	0028      	movs	r0, r5
 8022b4c:	17e9      	asrs	r1, r5, #31
 8022b4e:	f7dd fd37 	bl	80005c0 <__aeabi_lmul>
 8022b52:	4640      	mov	r0, r8
 8022b54:	1a76      	subs	r6, r6, r1
 8022b56:	0076      	lsls	r6, r6, #1
 8022b58:	002a      	movs	r2, r5
 8022b5a:	9b06      	ldr	r3, [sp, #24]
 8022b5c:	6006      	str	r6, [r0, #0]
 8022b5e:	9903      	ldr	r1, [sp, #12]
 8022b60:	9804      	ldr	r0, [sp, #16]
 8022b62:	f7dd fd2d 	bl	80005c0 <__aeabi_lmul>
 8022b66:	0020      	movs	r0, r4
 8022b68:	2408      	movs	r4, #8
 8022b6a:	9b07      	ldr	r3, [sp, #28]
 8022b6c:	000d      	movs	r5, r1
 8022b6e:	003a      	movs	r2, r7
 8022b70:	9905      	ldr	r1, [sp, #20]
 8022b72:	f7dd fd25 	bl	80005c0 <__aeabi_lmul>
 8022b76:	4640      	mov	r0, r8
 8022b78:	46a4      	mov	ip, r4
 8022b7a:	186d      	adds	r5, r5, r1
 8022b7c:	006d      	lsls	r5, r5, #1
 8022b7e:	6045      	str	r5, [r0, #4]
 8022b80:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022b82:	44e1      	add	r9, ip
 8022b84:	3801      	subs	r0, #1
 8022b86:	9009      	str	r0, [sp, #36]	@ 0x24
 8022b88:	9a01      	ldr	r2, [sp, #4]
 8022b8a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022b8c:	44e2      	add	sl, ip
 8022b8e:	44e3      	add	fp, ip
 8022b90:	44e0      	add	r8, ip
 8022b92:	46a4      	mov	ip, r4
 8022b94:	4462      	add	r2, ip
 8022b96:	9201      	str	r2, [sp, #4]
 8022b98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022b9a:	9b00      	ldr	r3, [sp, #0]
 8022b9c:	4694      	mov	ip, r2
 8022b9e:	4463      	add	r3, ip
 8022ba0:	9300      	str	r3, [sp, #0]
 8022ba2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022ba4:	9902      	ldr	r1, [sp, #8]
 8022ba6:	469c      	mov	ip, r3
 8022ba8:	4461      	add	r1, ip
 8022baa:	9102      	str	r1, [sp, #8]
 8022bac:	2800      	cmp	r0, #0
 8022bae:	d000      	beq.n	8022bb2 <arm_radix4_butterfly_inverse_q31+0x22e>
 8022bb0:	e70f      	b.n	80229d2 <arm_radix4_butterfly_inverse_q31+0x4e>
 8022bb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022bb4:	009b      	lsls	r3, r3, #2
 8022bb6:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022bb8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022bba:	9320      	str	r3, [sp, #128]	@ 0x80
 8022bbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022bbe:	2b04      	cmp	r3, #4
 8022bc0:	d800      	bhi.n	8022bc4 <arm_radix4_butterfly_inverse_q31+0x240>
 8022bc2:	e17c      	b.n	8022ebe <arm_radix4_butterfly_inverse_q31+0x53a>
 8022bc4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022bc6:	0893      	lsrs	r3, r2, #2
 8022bc8:	1e59      	subs	r1, r3, #1
 8022bca:	9321      	str	r3, [sp, #132]	@ 0x84
 8022bcc:	00db      	lsls	r3, r3, #3
 8022bce:	931b      	str	r3, [sp, #108]	@ 0x6c
 8022bd0:	00d3      	lsls	r3, r2, #3
 8022bd2:	9300      	str	r3, [sp, #0]
 8022bd4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022bd6:	911a      	str	r1, [sp, #104]	@ 0x68
 8022bd8:	00da      	lsls	r2, r3, #3
 8022bda:	921e      	str	r2, [sp, #120]	@ 0x78
 8022bdc:	011a      	lsls	r2, r3, #4
 8022bde:	921d      	str	r2, [sp, #116]	@ 0x74
 8022be0:	001a      	movs	r2, r3
 8022be2:	4694      	mov	ip, r2
 8022be4:	005b      	lsls	r3, r3, #1
 8022be6:	4463      	add	r3, ip
 8022be8:	00db      	lsls	r3, r3, #3
 8022bea:	931c      	str	r3, [sp, #112]	@ 0x70
 8022bec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022bee:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022bf0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022bf2:	9318      	str	r3, [sp, #96]	@ 0x60
 8022bf4:	9319      	str	r3, [sp, #100]	@ 0x64
 8022bf6:	9316      	str	r3, [sp, #88]	@ 0x58
 8022bf8:	2300      	movs	r3, #0
 8022bfa:	9315      	str	r3, [sp, #84]	@ 0x54
 8022bfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022bfe:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8022c00:	681a      	ldr	r2, [r3, #0]
 8022c02:	685b      	ldr	r3, [r3, #4]
 8022c04:	9205      	str	r2, [sp, #20]
 8022c06:	9306      	str	r3, [sp, #24]
 8022c08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022c0a:	468c      	mov	ip, r1
 8022c0c:	681a      	ldr	r2, [r3, #0]
 8022c0e:	685b      	ldr	r3, [r3, #4]
 8022c10:	9207      	str	r2, [sp, #28]
 8022c12:	9308      	str	r3, [sp, #32]
 8022c14:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022c16:	681a      	ldr	r2, [r3, #0]
 8022c18:	685b      	ldr	r3, [r3, #4]
 8022c1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8022c1c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8022c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8022c20:	0013      	movs	r3, r2
 8022c22:	4463      	add	r3, ip
 8022c24:	4698      	mov	r8, r3
 8022c26:	0013      	movs	r3, r2
 8022c28:	4442      	add	r2, r8
 8022c2a:	4691      	mov	r9, r2
 8022c2c:	001a      	movs	r2, r3
 8022c2e:	444a      	add	r2, r9
 8022c30:	4692      	mov	sl, r2
 8022c32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022c34:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8022c36:	4293      	cmp	r3, r2
 8022c38:	d800      	bhi.n	8022c3c <arm_radix4_butterfly_inverse_q31+0x2b8>
 8022c3a:	e0d9      	b.n	8022df0 <arm_radix4_butterfly_inverse_q31+0x46c>
 8022c3c:	4694      	mov	ip, r2
 8022c3e:	4644      	mov	r4, r8
 8022c40:	4655      	mov	r5, sl
 8022c42:	4688      	mov	r8, r1
 8022c44:	9b07      	ldr	r3, [sp, #28]
 8022c46:	17db      	asrs	r3, r3, #31
 8022c48:	930c      	str	r3, [sp, #48]	@ 0x30
 8022c4a:	9b08      	ldr	r3, [sp, #32]
 8022c4c:	17db      	asrs	r3, r3, #31
 8022c4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8022c50:	9b05      	ldr	r3, [sp, #20]
 8022c52:	17db      	asrs	r3, r3, #31
 8022c54:	930e      	str	r3, [sp, #56]	@ 0x38
 8022c56:	9b06      	ldr	r3, [sp, #24]
 8022c58:	17db      	asrs	r3, r3, #31
 8022c5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c5e:	17db      	asrs	r3, r3, #31
 8022c60:	9310      	str	r3, [sp, #64]	@ 0x40
 8022c62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022c64:	17db      	asrs	r3, r3, #31
 8022c66:	9311      	str	r3, [sp, #68]	@ 0x44
 8022c68:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022c6a:	4463      	add	r3, ip
 8022c6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022c6e:	4643      	mov	r3, r8
 8022c70:	4641      	mov	r1, r8
 8022c72:	681a      	ldr	r2, [r3, #0]
 8022c74:	464b      	mov	r3, r9
 8022c76:	684f      	ldr	r7, [r1, #4]
 8022c78:	4649      	mov	r1, r9
 8022c7a:	681b      	ldr	r3, [r3, #0]
 8022c7c:	18d6      	adds	r6, r2, r3
 8022c7e:	1ad3      	subs	r3, r2, r3
 8022c80:	9301      	str	r3, [sp, #4]
 8022c82:	684b      	ldr	r3, [r1, #4]
 8022c84:	1af9      	subs	r1, r7, r3
 8022c86:	9102      	str	r1, [sp, #8]
 8022c88:	6829      	ldr	r1, [r5, #0]
 8022c8a:	18f8      	adds	r0, r7, r3
 8022c8c:	468c      	mov	ip, r1
 8022c8e:	6827      	ldr	r7, [r4, #0]
 8022c90:	4467      	add	r7, ip
 8022c92:	003a      	movs	r2, r7
 8022c94:	19f3      	adds	r3, r6, r7
 8022c96:	4647      	mov	r7, r8
 8022c98:	109b      	asrs	r3, r3, #2
 8022c9a:	603b      	str	r3, [r7, #0]
 8022c9c:	6869      	ldr	r1, [r5, #4]
 8022c9e:	6867      	ldr	r7, [r4, #4]
 8022ca0:	468c      	mov	ip, r1
 8022ca2:	4467      	add	r7, ip
 8022ca4:	003b      	movs	r3, r7
 8022ca6:	19c1      	adds	r1, r0, r7
 8022ca8:	4647      	mov	r7, r8
 8022caa:	1ab6      	subs	r6, r6, r2
 8022cac:	1089      	asrs	r1, r1, #2
 8022cae:	6079      	str	r1, [r7, #4]
 8022cb0:	17f2      	asrs	r2, r6, #31
 8022cb2:	9900      	ldr	r1, [sp, #0]
 8022cb4:	4692      	mov	sl, r2
 8022cb6:	468c      	mov	ip, r1
 8022cb8:	6867      	ldr	r7, [r4, #4]
 8022cba:	6869      	ldr	r1, [r5, #4]
 8022cbc:	44e0      	add	r8, ip
 8022cbe:	1a7f      	subs	r7, r7, r1
 8022cc0:	9703      	str	r7, [sp, #12]
 8022cc2:	6821      	ldr	r1, [r4, #0]
 8022cc4:	682f      	ldr	r7, [r5, #0]
 8022cc6:	1bc9      	subs	r1, r1, r7
 8022cc8:	1ac7      	subs	r7, r0, r3
 8022cca:	17fa      	asrs	r2, r7, #31
 8022ccc:	4693      	mov	fp, r2
 8022cce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022cd0:	9a07      	ldr	r2, [sp, #28]
 8022cd2:	9104      	str	r1, [sp, #16]
 8022cd4:	0030      	movs	r0, r6
 8022cd6:	4651      	mov	r1, sl
 8022cd8:	f7dd fc72 	bl	80005c0 <__aeabi_lmul>
 8022cdc:	9a08      	ldr	r2, [sp, #32]
 8022cde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022ce0:	9112      	str	r1, [sp, #72]	@ 0x48
 8022ce2:	0038      	movs	r0, r7
 8022ce4:	4659      	mov	r1, fp
 8022ce6:	f7dd fc6b 	bl	80005c0 <__aeabi_lmul>
 8022cea:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022cec:	9a07      	ldr	r2, [sp, #28]
 8022cee:	1a41      	subs	r1, r0, r1
 8022cf0:	1049      	asrs	r1, r1, #1
 8022cf2:	6021      	str	r1, [r4, #0]
 8022cf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022cf6:	0038      	movs	r0, r7
 8022cf8:	4659      	mov	r1, fp
 8022cfa:	f7dd fc61 	bl	80005c0 <__aeabi_lmul>
 8022cfe:	9a08      	ldr	r2, [sp, #32]
 8022d00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022d02:	000f      	movs	r7, r1
 8022d04:	0030      	movs	r0, r6
 8022d06:	4651      	mov	r1, sl
 8022d08:	f7dd fc5a 	bl	80005c0 <__aeabi_lmul>
 8022d0c:	9b00      	ldr	r3, [sp, #0]
 8022d0e:	187f      	adds	r7, r7, r1
 8022d10:	469c      	mov	ip, r3
 8022d12:	107f      	asrs	r7, r7, #1
 8022d14:	6067      	str	r7, [r4, #4]
 8022d16:	9a01      	ldr	r2, [sp, #4]
 8022d18:	9f03      	ldr	r7, [sp, #12]
 8022d1a:	9802      	ldr	r0, [sp, #8]
 8022d1c:	1bd7      	subs	r7, r2, r7
 8022d1e:	17fe      	asrs	r6, r7, #31
 8022d20:	0031      	movs	r1, r6
 8022d22:	9e04      	ldr	r6, [sp, #16]
 8022d24:	4682      	mov	sl, r0
 8022d26:	4464      	add	r4, ip
 8022d28:	46b4      	mov	ip, r6
 8022d2a:	44e2      	add	sl, ip
 8022d2c:	4652      	mov	r2, sl
 8022d2e:	17d2      	asrs	r2, r2, #31
 8022d30:	4693      	mov	fp, r2
 8022d32:	0038      	movs	r0, r7
 8022d34:	9a05      	ldr	r2, [sp, #20]
 8022d36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022d38:	9112      	str	r1, [sp, #72]	@ 0x48
 8022d3a:	f7dd fc41 	bl	80005c0 <__aeabi_lmul>
 8022d3e:	9a06      	ldr	r2, [sp, #24]
 8022d40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022d42:	000e      	movs	r6, r1
 8022d44:	4650      	mov	r0, sl
 8022d46:	4659      	mov	r1, fp
 8022d48:	f7dd fc3a 	bl	80005c0 <__aeabi_lmul>
 8022d4c:	4648      	mov	r0, r9
 8022d4e:	1a76      	subs	r6, r6, r1
 8022d50:	1076      	asrs	r6, r6, #1
 8022d52:	6006      	str	r6, [r0, #0]
 8022d54:	9a05      	ldr	r2, [sp, #20]
 8022d56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022d58:	4650      	mov	r0, sl
 8022d5a:	4659      	mov	r1, fp
 8022d5c:	f7dd fc30 	bl	80005c0 <__aeabi_lmul>
 8022d60:	9a06      	ldr	r2, [sp, #24]
 8022d62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022d64:	000e      	movs	r6, r1
 8022d66:	0038      	movs	r0, r7
 8022d68:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8022d6a:	f7dd fc29 	bl	80005c0 <__aeabi_lmul>
 8022d6e:	9a00      	ldr	r2, [sp, #0]
 8022d70:	9f03      	ldr	r7, [sp, #12]
 8022d72:	4694      	mov	ip, r2
 8022d74:	1876      	adds	r6, r6, r1
 8022d76:	4649      	mov	r1, r9
 8022d78:	44e1      	add	r9, ip
 8022d7a:	46bc      	mov	ip, r7
 8022d7c:	9b01      	ldr	r3, [sp, #4]
 8022d7e:	1076      	asrs	r6, r6, #1
 8022d80:	4463      	add	r3, ip
 8022d82:	17df      	asrs	r7, r3, #31
 8022d84:	604e      	str	r6, [r1, #4]
 8022d86:	46ba      	mov	sl, r7
 8022d88:	001e      	movs	r6, r3
 8022d8a:	9802      	ldr	r0, [sp, #8]
 8022d8c:	9b04      	ldr	r3, [sp, #16]
 8022d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022d90:	1ac7      	subs	r7, r0, r3
 8022d92:	17fb      	asrs	r3, r7, #31
 8022d94:	469b      	mov	fp, r3
 8022d96:	0030      	movs	r0, r6
 8022d98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022d9a:	4651      	mov	r1, sl
 8022d9c:	f7dd fc10 	bl	80005c0 <__aeabi_lmul>
 8022da0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022da2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022da4:	9101      	str	r1, [sp, #4]
 8022da6:	0038      	movs	r0, r7
 8022da8:	4659      	mov	r1, fp
 8022daa:	f7dd fc09 	bl	80005c0 <__aeabi_lmul>
 8022dae:	9801      	ldr	r0, [sp, #4]
 8022db0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022db2:	1a41      	subs	r1, r0, r1
 8022db4:	1049      	asrs	r1, r1, #1
 8022db6:	6029      	str	r1, [r5, #0]
 8022db8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022dba:	0038      	movs	r0, r7
 8022dbc:	4659      	mov	r1, fp
 8022dbe:	f7dd fbff 	bl	80005c0 <__aeabi_lmul>
 8022dc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022dc4:	000f      	movs	r7, r1
 8022dc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022dc8:	0030      	movs	r0, r6
 8022dca:	4651      	mov	r1, sl
 8022dcc:	f7dd fbf8 	bl	80005c0 <__aeabi_lmul>
 8022dd0:	187f      	adds	r7, r7, r1
 8022dd2:	107f      	asrs	r7, r7, #1
 8022dd4:	606f      	str	r7, [r5, #4]
 8022dd6:	9a00      	ldr	r2, [sp, #0]
 8022dd8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022dda:	4694      	mov	ip, r2
 8022ddc:	4465      	add	r5, ip
 8022dde:	468c      	mov	ip, r1
 8022de0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022de2:	0013      	movs	r3, r2
 8022de4:	4462      	add	r2, ip
 8022de6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022de8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022dea:	429a      	cmp	r2, r3
 8022dec:	d900      	bls.n	8022df0 <arm_radix4_butterfly_inverse_q31+0x46c>
 8022dee:	e73e      	b.n	8022c6e <arm_radix4_butterfly_inverse_q31+0x2ea>
 8022df0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8022df2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022df4:	468c      	mov	ip, r1
 8022df6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8022df8:	4462      	add	r2, ip
 8022dfa:	468c      	mov	ip, r1
 8022dfc:	9216      	str	r2, [sp, #88]	@ 0x58
 8022dfe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8022e00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8022e02:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022e04:	4462      	add	r2, ip
 8022e06:	468c      	mov	ip, r1
 8022e08:	9219      	str	r2, [sp, #100]	@ 0x64
 8022e0a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8022e0c:	3301      	adds	r3, #1
 8022e0e:	4462      	add	r2, ip
 8022e10:	9218      	str	r2, [sp, #96]	@ 0x60
 8022e12:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8022e14:	9315      	str	r3, [sp, #84]	@ 0x54
 8022e16:	3208      	adds	r2, #8
 8022e18:	9217      	str	r2, [sp, #92]	@ 0x5c
 8022e1a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8022e1c:	4293      	cmp	r3, r2
 8022e1e:	d800      	bhi.n	8022e22 <arm_radix4_butterfly_inverse_q31+0x49e>
 8022e20:	e6ec      	b.n	8022bfc <arm_radix4_butterfly_inverse_q31+0x278>
 8022e22:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022e24:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8022e26:	009b      	lsls	r3, r3, #2
 8022e28:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022e2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022e2c:	9213      	str	r2, [sp, #76]	@ 0x4c
 8022e2e:	089b      	lsrs	r3, r3, #2
 8022e30:	9320      	str	r3, [sp, #128]	@ 0x80
 8022e32:	2b04      	cmp	r3, #4
 8022e34:	d900      	bls.n	8022e38 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8022e36:	e6c5      	b.n	8022bc4 <arm_radix4_butterfly_inverse_q31+0x240>
 8022e38:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022e3a:	469a      	mov	sl, r3
 8022e3c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022e3e:	681a      	ldr	r2, [r3, #0]
 8022e40:	6918      	ldr	r0, [r3, #16]
 8022e42:	4691      	mov	r9, r2
 8022e44:	464c      	mov	r4, r9
 8022e46:	4680      	mov	r8, r0
 8022e48:	69de      	ldr	r6, [r3, #28]
 8022e4a:	689d      	ldr	r5, [r3, #8]
 8022e4c:	46b4      	mov	ip, r6
 8022e4e:	6998      	ldr	r0, [r3, #24]
 8022e50:	1964      	adds	r4, r4, r5
 8022e52:	6859      	ldr	r1, [r3, #4]
 8022e54:	68da      	ldr	r2, [r3, #12]
 8022e56:	4444      	add	r4, r8
 8022e58:	695f      	ldr	r7, [r3, #20]
 8022e5a:	1824      	adds	r4, r4, r0
 8022e5c:	601c      	str	r4, [r3, #0]
 8022e5e:	188c      	adds	r4, r1, r2
 8022e60:	19e4      	adds	r4, r4, r7
 8022e62:	4464      	add	r4, ip
 8022e64:	605c      	str	r4, [r3, #4]
 8022e66:	464c      	mov	r4, r9
 8022e68:	1b64      	subs	r4, r4, r5
 8022e6a:	4444      	add	r4, r8
 8022e6c:	1a24      	subs	r4, r4, r0
 8022e6e:	609c      	str	r4, [r3, #8]
 8022e70:	1a8c      	subs	r4, r1, r2
 8022e72:	19e4      	adds	r4, r4, r7
 8022e74:	1ba4      	subs	r4, r4, r6
 8022e76:	60dc      	str	r4, [r3, #12]
 8022e78:	464c      	mov	r4, r9
 8022e7a:	4646      	mov	r6, r8
 8022e7c:	1aa4      	subs	r4, r4, r2
 8022e7e:	1ba4      	subs	r4, r4, r6
 8022e80:	4464      	add	r4, ip
 8022e82:	611c      	str	r4, [r3, #16]
 8022e84:	194c      	adds	r4, r1, r5
 8022e86:	1be4      	subs	r4, r4, r7
 8022e88:	1a24      	subs	r4, r4, r0
 8022e8a:	615c      	str	r4, [r3, #20]
 8022e8c:	4644      	mov	r4, r8
 8022e8e:	4666      	mov	r6, ip
 8022e90:	444a      	add	r2, r9
 8022e92:	1b12      	subs	r2, r2, r4
 8022e94:	1b92      	subs	r2, r2, r6
 8022e96:	619a      	str	r2, [r3, #24]
 8022e98:	1b4a      	subs	r2, r1, r5
 8022e9a:	1bd1      	subs	r1, r2, r7
 8022e9c:	2201      	movs	r2, #1
 8022e9e:	4252      	negs	r2, r2
 8022ea0:	4694      	mov	ip, r2
 8022ea2:	44e2      	add	sl, ip
 8022ea4:	4652      	mov	r2, sl
 8022ea6:	1809      	adds	r1, r1, r0
 8022ea8:	61d9      	str	r1, [r3, #28]
 8022eaa:	3320      	adds	r3, #32
 8022eac:	2a00      	cmp	r2, #0
 8022eae:	d1c6      	bne.n	8022e3e <arm_radix4_butterfly_inverse_q31+0x4ba>
 8022eb0:	b027      	add	sp, #156	@ 0x9c
 8022eb2:	bc3c      	pop	{r2, r3, r4, r5}
 8022eb4:	4690      	mov	r8, r2
 8022eb6:	4699      	mov	r9, r3
 8022eb8:	46a2      	mov	sl, r4
 8022eba:	46ab      	mov	fp, r5
 8022ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022ebe:	469a      	mov	sl, r3
 8022ec0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022ec2:	e7bc      	b.n	8022e3e <arm_radix4_butterfly_inverse_q31+0x4ba>

08022ec4 <arm_cmplx_mag_squared_q31>:
 8022ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ec6:	464f      	mov	r7, r9
 8022ec8:	4646      	mov	r6, r8
 8022eca:	0004      	movs	r4, r0
 8022ecc:	b4c0      	push	{r6, r7}
 8022ece:	0016      	movs	r6, r2
 8022ed0:	000f      	movs	r7, r1
 8022ed2:	2a00      	cmp	r2, #0
 8022ed4:	d018      	beq.n	8022f08 <arm_cmplx_mag_squared_q31+0x44>
 8022ed6:	6823      	ldr	r3, [r4, #0]
 8022ed8:	6822      	ldr	r2, [r4, #0]
 8022eda:	17d9      	asrs	r1, r3, #31
 8022edc:	6863      	ldr	r3, [r4, #4]
 8022ede:	0010      	movs	r0, r2
 8022ee0:	4698      	mov	r8, r3
 8022ee2:	17db      	asrs	r3, r3, #31
 8022ee4:	4699      	mov	r9, r3
 8022ee6:	000b      	movs	r3, r1
 8022ee8:	f7dd fb6a 	bl	80005c0 <__aeabi_lmul>
 8022eec:	4642      	mov	r2, r8
 8022eee:	104d      	asrs	r5, r1, #1
 8022ef0:	464b      	mov	r3, r9
 8022ef2:	4640      	mov	r0, r8
 8022ef4:	4649      	mov	r1, r9
 8022ef6:	f7dd fb63 	bl	80005c0 <__aeabi_lmul>
 8022efa:	1049      	asrs	r1, r1, #1
 8022efc:	1869      	adds	r1, r5, r1
 8022efe:	3e01      	subs	r6, #1
 8022f00:	c702      	stmia	r7!, {r1}
 8022f02:	3408      	adds	r4, #8
 8022f04:	2e00      	cmp	r6, #0
 8022f06:	d1e6      	bne.n	8022ed6 <arm_cmplx_mag_squared_q31+0x12>
 8022f08:	bc0c      	pop	{r2, r3}
 8022f0a:	4690      	mov	r8, r2
 8022f0c:	4699      	mov	r9, r3
 8022f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022f10 <arm_mult_q31>:
 8022f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f12:	4646      	mov	r6, r8
 8022f14:	464f      	mov	r7, r9
 8022f16:	4690      	mov	r8, r2
 8022f18:	b4c0      	push	{r6, r7}
 8022f1a:	001d      	movs	r5, r3
 8022f1c:	0006      	movs	r6, r0
 8022f1e:	000f      	movs	r7, r1
 8022f20:	2400      	movs	r4, #0
 8022f22:	2b00      	cmp	r3, #0
 8022f24:	d020      	beq.n	8022f68 <arm_mult_q31+0x58>
 8022f26:	4b12      	ldr	r3, [pc, #72]	@ (8022f70 <arm_mult_q31+0x60>)
 8022f28:	4699      	mov	r9, r3
 8022f2a:	e007      	b.n	8022f3c <arm_mult_q31+0x2c>
 8022f2c:	464b      	mov	r3, r9
 8022f2e:	4059      	eors	r1, r3
 8022f30:	4643      	mov	r3, r8
 8022f32:	3d01      	subs	r5, #1
 8022f34:	5119      	str	r1, [r3, r4]
 8022f36:	3404      	adds	r4, #4
 8022f38:	2d00      	cmp	r5, #0
 8022f3a:	d015      	beq.n	8022f68 <arm_mult_q31+0x58>
 8022f3c:	5933      	ldr	r3, [r6, r4]
 8022f3e:	593a      	ldr	r2, [r7, r4]
 8022f40:	17d9      	asrs	r1, r3, #31
 8022f42:	593b      	ldr	r3, [r7, r4]
 8022f44:	5930      	ldr	r0, [r6, r4]
 8022f46:	17db      	asrs	r3, r3, #31
 8022f48:	f7dd fb3a 	bl	80005c0 <__aeabi_lmul>
 8022f4c:	004b      	lsls	r3, r1, #1
 8022f4e:	0fc0      	lsrs	r0, r0, #31
 8022f50:	4318      	orrs	r0, r3
 8022f52:	17c9      	asrs	r1, r1, #31
 8022f54:	17c3      	asrs	r3, r0, #31
 8022f56:	428b      	cmp	r3, r1
 8022f58:	d1e8      	bne.n	8022f2c <arm_mult_q31+0x1c>
 8022f5a:	0001      	movs	r1, r0
 8022f5c:	4643      	mov	r3, r8
 8022f5e:	3d01      	subs	r5, #1
 8022f60:	5119      	str	r1, [r3, r4]
 8022f62:	3404      	adds	r4, #4
 8022f64:	2d00      	cmp	r5, #0
 8022f66:	d1e9      	bne.n	8022f3c <arm_mult_q31+0x2c>
 8022f68:	bc0c      	pop	{r2, r3}
 8022f6a:	4690      	mov	r8, r2
 8022f6c:	4699      	mov	r9, r3
 8022f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022f70:	7fffffff 	.word	0x7fffffff

08022f74 <arm_add_q31>:
 8022f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022f76:	465f      	mov	r7, fp
 8022f78:	4656      	mov	r6, sl
 8022f7a:	464d      	mov	r5, r9
 8022f7c:	4644      	mov	r4, r8
 8022f7e:	b4f0      	push	{r4, r5, r6, r7}
 8022f80:	4693      	mov	fp, r2
 8022f82:	b083      	sub	sp, #12
 8022f84:	4681      	mov	r9, r0
 8022f86:	468a      	mov	sl, r1
 8022f88:	4698      	mov	r8, r3
 8022f8a:	2200      	movs	r2, #0
 8022f8c:	2b00      	cmp	r3, #0
 8022f8e:	d020      	beq.n	8022fd2 <arm_add_q31+0x5e>
 8022f90:	4649      	mov	r1, r9
 8022f92:	4653      	mov	r3, sl
 8022f94:	588e      	ldr	r6, [r1, r2]
 8022f96:	589b      	ldr	r3, [r3, r2]
 8022f98:	17f7      	asrs	r7, r6, #31
 8022f9a:	001c      	movs	r4, r3
 8022f9c:	0030      	movs	r0, r6
 8022f9e:	0039      	movs	r1, r7
 8022fa0:	17dd      	asrs	r5, r3, #31
 8022fa2:	46b4      	mov	ip, r6
 8022fa4:	1900      	adds	r0, r0, r4
 8022fa6:	4169      	adcs	r1, r5
 8022fa8:	4463      	add	r3, ip
 8022faa:	9000      	str	r0, [sp, #0]
 8022fac:	9101      	str	r1, [sp, #4]
 8022fae:	17d9      	asrs	r1, r3, #31
 8022fb0:	468c      	mov	ip, r1
 8022fb2:	9901      	ldr	r1, [sp, #4]
 8022fb4:	458c      	cmp	ip, r1
 8022fb6:	d002      	beq.n	8022fbe <arm_add_q31+0x4a>
 8022fb8:	17cb      	asrs	r3, r1, #31
 8022fba:	4909      	ldr	r1, [pc, #36]	@ (8022fe0 <arm_add_q31+0x6c>)
 8022fbc:	404b      	eors	r3, r1
 8022fbe:	4659      	mov	r1, fp
 8022fc0:	508b      	str	r3, [r1, r2]
 8022fc2:	2301      	movs	r3, #1
 8022fc4:	425b      	negs	r3, r3
 8022fc6:	469c      	mov	ip, r3
 8022fc8:	44e0      	add	r8, ip
 8022fca:	4643      	mov	r3, r8
 8022fcc:	3204      	adds	r2, #4
 8022fce:	2b00      	cmp	r3, #0
 8022fd0:	d1de      	bne.n	8022f90 <arm_add_q31+0x1c>
 8022fd2:	b003      	add	sp, #12
 8022fd4:	bc3c      	pop	{r2, r3, r4, r5}
 8022fd6:	4690      	mov	r8, r2
 8022fd8:	4699      	mov	r9, r3
 8022fda:	46a2      	mov	sl, r4
 8022fdc:	46ab      	mov	fp, r5
 8022fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022fe0:	7fffffff 	.word	0x7fffffff

08022fe4 <atof>:
 8022fe4:	b510      	push	{r4, lr}
 8022fe6:	2100      	movs	r1, #0
 8022fe8:	f000 fe12 	bl	8023c10 <strtod>
 8022fec:	bd10      	pop	{r4, pc}

08022fee <atoi>:
 8022fee:	b510      	push	{r4, lr}
 8022ff0:	220a      	movs	r2, #10
 8022ff2:	2100      	movs	r1, #0
 8022ff4:	f000 fea4 	bl	8023d40 <strtol>
 8022ff8:	bd10      	pop	{r4, pc}
	...

08022ffc <sulp>:
 8022ffc:	b570      	push	{r4, r5, r6, lr}
 8022ffe:	0016      	movs	r6, r2
 8023000:	000d      	movs	r5, r1
 8023002:	f003 fd15 	bl	8026a30 <__ulp>
 8023006:	2e00      	cmp	r6, #0
 8023008:	d00d      	beq.n	8023026 <sulp+0x2a>
 802300a:	236b      	movs	r3, #107	@ 0x6b
 802300c:	006a      	lsls	r2, r5, #1
 802300e:	0d52      	lsrs	r2, r2, #21
 8023010:	1a9b      	subs	r3, r3, r2
 8023012:	2b00      	cmp	r3, #0
 8023014:	dd07      	ble.n	8023026 <sulp+0x2a>
 8023016:	2400      	movs	r4, #0
 8023018:	4a03      	ldr	r2, [pc, #12]	@ (8023028 <sulp+0x2c>)
 802301a:	051b      	lsls	r3, r3, #20
 802301c:	189d      	adds	r5, r3, r2
 802301e:	002b      	movs	r3, r5
 8023020:	0022      	movs	r2, r4
 8023022:	f7df fb0b 	bl	800263c <__aeabi_dmul>
 8023026:	bd70      	pop	{r4, r5, r6, pc}
 8023028:	3ff00000 	.word	0x3ff00000

0802302c <_strtod_l>:
 802302c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802302e:	b0a3      	sub	sp, #140	@ 0x8c
 8023030:	921b      	str	r2, [sp, #108]	@ 0x6c
 8023032:	2200      	movs	r2, #0
 8023034:	2600      	movs	r6, #0
 8023036:	2700      	movs	r7, #0
 8023038:	9005      	str	r0, [sp, #20]
 802303a:	9109      	str	r1, [sp, #36]	@ 0x24
 802303c:	921e      	str	r2, [sp, #120]	@ 0x78
 802303e:	911d      	str	r1, [sp, #116]	@ 0x74
 8023040:	780a      	ldrb	r2, [r1, #0]
 8023042:	2a2b      	cmp	r2, #43	@ 0x2b
 8023044:	d053      	beq.n	80230ee <_strtod_l+0xc2>
 8023046:	d83f      	bhi.n	80230c8 <_strtod_l+0x9c>
 8023048:	2a0d      	cmp	r2, #13
 802304a:	d839      	bhi.n	80230c0 <_strtod_l+0x94>
 802304c:	2a08      	cmp	r2, #8
 802304e:	d839      	bhi.n	80230c4 <_strtod_l+0x98>
 8023050:	2a00      	cmp	r2, #0
 8023052:	d042      	beq.n	80230da <_strtod_l+0xae>
 8023054:	2200      	movs	r2, #0
 8023056:	9212      	str	r2, [sp, #72]	@ 0x48
 8023058:	2100      	movs	r1, #0
 802305a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802305c:	910c      	str	r1, [sp, #48]	@ 0x30
 802305e:	782a      	ldrb	r2, [r5, #0]
 8023060:	2a30      	cmp	r2, #48	@ 0x30
 8023062:	d000      	beq.n	8023066 <_strtod_l+0x3a>
 8023064:	e083      	b.n	802316e <_strtod_l+0x142>
 8023066:	786a      	ldrb	r2, [r5, #1]
 8023068:	3120      	adds	r1, #32
 802306a:	438a      	bics	r2, r1
 802306c:	2a58      	cmp	r2, #88	@ 0x58
 802306e:	d000      	beq.n	8023072 <_strtod_l+0x46>
 8023070:	e073      	b.n	802315a <_strtod_l+0x12e>
 8023072:	9302      	str	r3, [sp, #8]
 8023074:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023076:	4a95      	ldr	r2, [pc, #596]	@ (80232cc <_strtod_l+0x2a0>)
 8023078:	9301      	str	r3, [sp, #4]
 802307a:	ab1e      	add	r3, sp, #120	@ 0x78
 802307c:	9300      	str	r3, [sp, #0]
 802307e:	9805      	ldr	r0, [sp, #20]
 8023080:	ab1f      	add	r3, sp, #124	@ 0x7c
 8023082:	a91d      	add	r1, sp, #116	@ 0x74
 8023084:	f002 fd84 	bl	8025b90 <__gethex>
 8023088:	230f      	movs	r3, #15
 802308a:	0002      	movs	r2, r0
 802308c:	401a      	ands	r2, r3
 802308e:	0004      	movs	r4, r0
 8023090:	9206      	str	r2, [sp, #24]
 8023092:	4218      	tst	r0, r3
 8023094:	d005      	beq.n	80230a2 <_strtod_l+0x76>
 8023096:	2a06      	cmp	r2, #6
 8023098:	d12b      	bne.n	80230f2 <_strtod_l+0xc6>
 802309a:	2300      	movs	r3, #0
 802309c:	3501      	adds	r5, #1
 802309e:	951d      	str	r5, [sp, #116]	@ 0x74
 80230a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80230a2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80230a4:	2b00      	cmp	r3, #0
 80230a6:	d002      	beq.n	80230ae <_strtod_l+0x82>
 80230a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80230aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80230ac:	6013      	str	r3, [r2, #0]
 80230ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80230b0:	2b00      	cmp	r3, #0
 80230b2:	d019      	beq.n	80230e8 <_strtod_l+0xbc>
 80230b4:	2380      	movs	r3, #128	@ 0x80
 80230b6:	0030      	movs	r0, r6
 80230b8:	061b      	lsls	r3, r3, #24
 80230ba:	18f9      	adds	r1, r7, r3
 80230bc:	b023      	add	sp, #140	@ 0x8c
 80230be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80230c0:	2a20      	cmp	r2, #32
 80230c2:	d1c7      	bne.n	8023054 <_strtod_l+0x28>
 80230c4:	3101      	adds	r1, #1
 80230c6:	e7ba      	b.n	802303e <_strtod_l+0x12>
 80230c8:	2a2d      	cmp	r2, #45	@ 0x2d
 80230ca:	d1c3      	bne.n	8023054 <_strtod_l+0x28>
 80230cc:	3a2c      	subs	r2, #44	@ 0x2c
 80230ce:	9212      	str	r2, [sp, #72]	@ 0x48
 80230d0:	1c4a      	adds	r2, r1, #1
 80230d2:	921d      	str	r2, [sp, #116]	@ 0x74
 80230d4:	784a      	ldrb	r2, [r1, #1]
 80230d6:	2a00      	cmp	r2, #0
 80230d8:	d1be      	bne.n	8023058 <_strtod_l+0x2c>
 80230da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80230dc:	931d      	str	r3, [sp, #116]	@ 0x74
 80230de:	2300      	movs	r3, #0
 80230e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80230e2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80230e4:	2b00      	cmp	r3, #0
 80230e6:	d1df      	bne.n	80230a8 <_strtod_l+0x7c>
 80230e8:	0030      	movs	r0, r6
 80230ea:	0039      	movs	r1, r7
 80230ec:	e7e6      	b.n	80230bc <_strtod_l+0x90>
 80230ee:	2200      	movs	r2, #0
 80230f0:	e7ed      	b.n	80230ce <_strtod_l+0xa2>
 80230f2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80230f4:	2a00      	cmp	r2, #0
 80230f6:	d007      	beq.n	8023108 <_strtod_l+0xdc>
 80230f8:	2135      	movs	r1, #53	@ 0x35
 80230fa:	a820      	add	r0, sp, #128	@ 0x80
 80230fc:	f003 fd8e 	bl	8026c1c <__copybits>
 8023100:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023102:	9805      	ldr	r0, [sp, #20]
 8023104:	f003 f948 	bl	8026398 <_Bfree>
 8023108:	9806      	ldr	r0, [sp, #24]
 802310a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802310c:	3801      	subs	r0, #1
 802310e:	2804      	cmp	r0, #4
 8023110:	d806      	bhi.n	8023120 <_strtod_l+0xf4>
 8023112:	f7dd f833 	bl	800017c <__gnu_thumb1_case_uqi>
 8023116:	0312      	.short	0x0312
 8023118:	1e1c      	.short	0x1e1c
 802311a:	12          	.byte	0x12
 802311b:	00          	.byte	0x00
 802311c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802311e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8023120:	05e4      	lsls	r4, r4, #23
 8023122:	d502      	bpl.n	802312a <_strtod_l+0xfe>
 8023124:	2380      	movs	r3, #128	@ 0x80
 8023126:	061b      	lsls	r3, r3, #24
 8023128:	431f      	orrs	r7, r3
 802312a:	4b69      	ldr	r3, [pc, #420]	@ (80232d0 <_strtod_l+0x2a4>)
 802312c:	423b      	tst	r3, r7
 802312e:	d1b8      	bne.n	80230a2 <_strtod_l+0x76>
 8023130:	f001 fdb2 	bl	8024c98 <__errno>
 8023134:	2322      	movs	r3, #34	@ 0x22
 8023136:	6003      	str	r3, [r0, #0]
 8023138:	e7b3      	b.n	80230a2 <_strtod_l+0x76>
 802313a:	4966      	ldr	r1, [pc, #408]	@ (80232d4 <_strtod_l+0x2a8>)
 802313c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802313e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023140:	400a      	ands	r2, r1
 8023142:	4965      	ldr	r1, [pc, #404]	@ (80232d8 <_strtod_l+0x2ac>)
 8023144:	185b      	adds	r3, r3, r1
 8023146:	051b      	lsls	r3, r3, #20
 8023148:	431a      	orrs	r2, r3
 802314a:	0017      	movs	r7, r2
 802314c:	e7e8      	b.n	8023120 <_strtod_l+0xf4>
 802314e:	4f60      	ldr	r7, [pc, #384]	@ (80232d0 <_strtod_l+0x2a4>)
 8023150:	e7e6      	b.n	8023120 <_strtod_l+0xf4>
 8023152:	2601      	movs	r6, #1
 8023154:	4f61      	ldr	r7, [pc, #388]	@ (80232dc <_strtod_l+0x2b0>)
 8023156:	4276      	negs	r6, r6
 8023158:	e7e2      	b.n	8023120 <_strtod_l+0xf4>
 802315a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802315c:	1c5a      	adds	r2, r3, #1
 802315e:	921d      	str	r2, [sp, #116]	@ 0x74
 8023160:	785b      	ldrb	r3, [r3, #1]
 8023162:	2b30      	cmp	r3, #48	@ 0x30
 8023164:	d0f9      	beq.n	802315a <_strtod_l+0x12e>
 8023166:	2b00      	cmp	r3, #0
 8023168:	d09b      	beq.n	80230a2 <_strtod_l+0x76>
 802316a:	2301      	movs	r3, #1
 802316c:	930c      	str	r3, [sp, #48]	@ 0x30
 802316e:	2500      	movs	r5, #0
 8023170:	220a      	movs	r2, #10
 8023172:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023174:	950d      	str	r5, [sp, #52]	@ 0x34
 8023176:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023178:	9508      	str	r5, [sp, #32]
 802317a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802317c:	7804      	ldrb	r4, [r0, #0]
 802317e:	0023      	movs	r3, r4
 8023180:	3b30      	subs	r3, #48	@ 0x30
 8023182:	b2d9      	uxtb	r1, r3
 8023184:	2909      	cmp	r1, #9
 8023186:	d927      	bls.n	80231d8 <_strtod_l+0x1ac>
 8023188:	2201      	movs	r2, #1
 802318a:	4955      	ldr	r1, [pc, #340]	@ (80232e0 <_strtod_l+0x2b4>)
 802318c:	f001 fcf6 	bl	8024b7c <strncmp>
 8023190:	2800      	cmp	r0, #0
 8023192:	d031      	beq.n	80231f8 <_strtod_l+0x1cc>
 8023194:	2000      	movs	r0, #0
 8023196:	0023      	movs	r3, r4
 8023198:	4684      	mov	ip, r0
 802319a:	9a08      	ldr	r2, [sp, #32]
 802319c:	900e      	str	r0, [sp, #56]	@ 0x38
 802319e:	9206      	str	r2, [sp, #24]
 80231a0:	2220      	movs	r2, #32
 80231a2:	0019      	movs	r1, r3
 80231a4:	4391      	bics	r1, r2
 80231a6:	000a      	movs	r2, r1
 80231a8:	2100      	movs	r1, #0
 80231aa:	9107      	str	r1, [sp, #28]
 80231ac:	2a45      	cmp	r2, #69	@ 0x45
 80231ae:	d000      	beq.n	80231b2 <_strtod_l+0x186>
 80231b0:	e0c0      	b.n	8023334 <_strtod_l+0x308>
 80231b2:	9b06      	ldr	r3, [sp, #24]
 80231b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80231b6:	4303      	orrs	r3, r0
 80231b8:	4313      	orrs	r3, r2
 80231ba:	428b      	cmp	r3, r1
 80231bc:	d08d      	beq.n	80230da <_strtod_l+0xae>
 80231be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80231c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80231c2:	3301      	adds	r3, #1
 80231c4:	931d      	str	r3, [sp, #116]	@ 0x74
 80231c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231c8:	785b      	ldrb	r3, [r3, #1]
 80231ca:	2b2b      	cmp	r3, #43	@ 0x2b
 80231cc:	d070      	beq.n	80232b0 <_strtod_l+0x284>
 80231ce:	000c      	movs	r4, r1
 80231d0:	2b2d      	cmp	r3, #45	@ 0x2d
 80231d2:	d173      	bne.n	80232bc <_strtod_l+0x290>
 80231d4:	2401      	movs	r4, #1
 80231d6:	e06c      	b.n	80232b2 <_strtod_l+0x286>
 80231d8:	9908      	ldr	r1, [sp, #32]
 80231da:	2908      	cmp	r1, #8
 80231dc:	dc09      	bgt.n	80231f2 <_strtod_l+0x1c6>
 80231de:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80231e0:	4351      	muls	r1, r2
 80231e2:	185b      	adds	r3, r3, r1
 80231e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80231e6:	9b08      	ldr	r3, [sp, #32]
 80231e8:	3001      	adds	r0, #1
 80231ea:	3301      	adds	r3, #1
 80231ec:	9308      	str	r3, [sp, #32]
 80231ee:	901d      	str	r0, [sp, #116]	@ 0x74
 80231f0:	e7c3      	b.n	802317a <_strtod_l+0x14e>
 80231f2:	4355      	muls	r5, r2
 80231f4:	195d      	adds	r5, r3, r5
 80231f6:	e7f6      	b.n	80231e6 <_strtod_l+0x1ba>
 80231f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80231fa:	1c5a      	adds	r2, r3, #1
 80231fc:	921d      	str	r2, [sp, #116]	@ 0x74
 80231fe:	9a08      	ldr	r2, [sp, #32]
 8023200:	785b      	ldrb	r3, [r3, #1]
 8023202:	2a00      	cmp	r2, #0
 8023204:	d03a      	beq.n	802327c <_strtod_l+0x250>
 8023206:	900e      	str	r0, [sp, #56]	@ 0x38
 8023208:	9206      	str	r2, [sp, #24]
 802320a:	001a      	movs	r2, r3
 802320c:	3a30      	subs	r2, #48	@ 0x30
 802320e:	2a09      	cmp	r2, #9
 8023210:	d912      	bls.n	8023238 <_strtod_l+0x20c>
 8023212:	2201      	movs	r2, #1
 8023214:	4694      	mov	ip, r2
 8023216:	e7c3      	b.n	80231a0 <_strtod_l+0x174>
 8023218:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802321a:	3001      	adds	r0, #1
 802321c:	1c5a      	adds	r2, r3, #1
 802321e:	921d      	str	r2, [sp, #116]	@ 0x74
 8023220:	785b      	ldrb	r3, [r3, #1]
 8023222:	2b30      	cmp	r3, #48	@ 0x30
 8023224:	d0f8      	beq.n	8023218 <_strtod_l+0x1ec>
 8023226:	001a      	movs	r2, r3
 8023228:	3a31      	subs	r2, #49	@ 0x31
 802322a:	2a08      	cmp	r2, #8
 802322c:	d83b      	bhi.n	80232a6 <_strtod_l+0x27a>
 802322e:	900e      	str	r0, [sp, #56]	@ 0x38
 8023230:	2000      	movs	r0, #0
 8023232:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8023234:	9006      	str	r0, [sp, #24]
 8023236:	9213      	str	r2, [sp, #76]	@ 0x4c
 8023238:	001a      	movs	r2, r3
 802323a:	1c41      	adds	r1, r0, #1
 802323c:	3a30      	subs	r2, #48	@ 0x30
 802323e:	2b30      	cmp	r3, #48	@ 0x30
 8023240:	d016      	beq.n	8023270 <_strtod_l+0x244>
 8023242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023244:	185b      	adds	r3, r3, r1
 8023246:	930e      	str	r3, [sp, #56]	@ 0x38
 8023248:	9b06      	ldr	r3, [sp, #24]
 802324a:	210a      	movs	r1, #10
 802324c:	469c      	mov	ip, r3
 802324e:	4484      	add	ip, r0
 8023250:	459c      	cmp	ip, r3
 8023252:	d115      	bne.n	8023280 <_strtod_l+0x254>
 8023254:	9906      	ldr	r1, [sp, #24]
 8023256:	9b06      	ldr	r3, [sp, #24]
 8023258:	3101      	adds	r1, #1
 802325a:	1809      	adds	r1, r1, r0
 802325c:	181b      	adds	r3, r3, r0
 802325e:	9106      	str	r1, [sp, #24]
 8023260:	2b08      	cmp	r3, #8
 8023262:	dc19      	bgt.n	8023298 <_strtod_l+0x26c>
 8023264:	230a      	movs	r3, #10
 8023266:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023268:	434b      	muls	r3, r1
 802326a:	2100      	movs	r1, #0
 802326c:	18d3      	adds	r3, r2, r3
 802326e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023270:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023272:	0008      	movs	r0, r1
 8023274:	1c5a      	adds	r2, r3, #1
 8023276:	921d      	str	r2, [sp, #116]	@ 0x74
 8023278:	785b      	ldrb	r3, [r3, #1]
 802327a:	e7c6      	b.n	802320a <_strtod_l+0x1de>
 802327c:	9808      	ldr	r0, [sp, #32]
 802327e:	e7d0      	b.n	8023222 <_strtod_l+0x1f6>
 8023280:	1c5c      	adds	r4, r3, #1
 8023282:	2b08      	cmp	r3, #8
 8023284:	dc04      	bgt.n	8023290 <_strtod_l+0x264>
 8023286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023288:	434b      	muls	r3, r1
 802328a:	930d      	str	r3, [sp, #52]	@ 0x34
 802328c:	0023      	movs	r3, r4
 802328e:	e7df      	b.n	8023250 <_strtod_l+0x224>
 8023290:	2c10      	cmp	r4, #16
 8023292:	dcfb      	bgt.n	802328c <_strtod_l+0x260>
 8023294:	434d      	muls	r5, r1
 8023296:	e7f9      	b.n	802328c <_strtod_l+0x260>
 8023298:	2100      	movs	r1, #0
 802329a:	2b0f      	cmp	r3, #15
 802329c:	dce8      	bgt.n	8023270 <_strtod_l+0x244>
 802329e:	230a      	movs	r3, #10
 80232a0:	435d      	muls	r5, r3
 80232a2:	1955      	adds	r5, r2, r5
 80232a4:	e7e4      	b.n	8023270 <_strtod_l+0x244>
 80232a6:	2200      	movs	r2, #0
 80232a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80232aa:	9206      	str	r2, [sp, #24]
 80232ac:	3201      	adds	r2, #1
 80232ae:	e7b1      	b.n	8023214 <_strtod_l+0x1e8>
 80232b0:	2400      	movs	r4, #0
 80232b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80232b4:	3302      	adds	r3, #2
 80232b6:	931d      	str	r3, [sp, #116]	@ 0x74
 80232b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80232ba:	789b      	ldrb	r3, [r3, #2]
 80232bc:	001a      	movs	r2, r3
 80232be:	3a30      	subs	r2, #48	@ 0x30
 80232c0:	2a09      	cmp	r2, #9
 80232c2:	d913      	bls.n	80232ec <_strtod_l+0x2c0>
 80232c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80232c6:	921d      	str	r2, [sp, #116]	@ 0x74
 80232c8:	2200      	movs	r2, #0
 80232ca:	e032      	b.n	8023332 <_strtod_l+0x306>
 80232cc:	0802d1f0 	.word	0x0802d1f0
 80232d0:	7ff00000 	.word	0x7ff00000
 80232d4:	ffefffff 	.word	0xffefffff
 80232d8:	00000433 	.word	0x00000433
 80232dc:	7fffffff 	.word	0x7fffffff
 80232e0:	0802d1d8 	.word	0x0802d1d8
 80232e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80232e6:	1c5a      	adds	r2, r3, #1
 80232e8:	921d      	str	r2, [sp, #116]	@ 0x74
 80232ea:	785b      	ldrb	r3, [r3, #1]
 80232ec:	2b30      	cmp	r3, #48	@ 0x30
 80232ee:	d0f9      	beq.n	80232e4 <_strtod_l+0x2b8>
 80232f0:	2200      	movs	r2, #0
 80232f2:	9207      	str	r2, [sp, #28]
 80232f4:	001a      	movs	r2, r3
 80232f6:	3a31      	subs	r2, #49	@ 0x31
 80232f8:	2a08      	cmp	r2, #8
 80232fa:	d81b      	bhi.n	8023334 <_strtod_l+0x308>
 80232fc:	3b30      	subs	r3, #48	@ 0x30
 80232fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8023300:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023302:	9307      	str	r3, [sp, #28]
 8023304:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023306:	1c59      	adds	r1, r3, #1
 8023308:	911d      	str	r1, [sp, #116]	@ 0x74
 802330a:	785b      	ldrb	r3, [r3, #1]
 802330c:	001a      	movs	r2, r3
 802330e:	3a30      	subs	r2, #48	@ 0x30
 8023310:	2a09      	cmp	r2, #9
 8023312:	d93a      	bls.n	802338a <_strtod_l+0x35e>
 8023314:	9a07      	ldr	r2, [sp, #28]
 8023316:	1a8a      	subs	r2, r1, r2
 8023318:	49b4      	ldr	r1, [pc, #720]	@ (80235ec <_strtod_l+0x5c0>)
 802331a:	9107      	str	r1, [sp, #28]
 802331c:	2a08      	cmp	r2, #8
 802331e:	dc04      	bgt.n	802332a <_strtod_l+0x2fe>
 8023320:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023322:	9207      	str	r2, [sp, #28]
 8023324:	428a      	cmp	r2, r1
 8023326:	dd00      	ble.n	802332a <_strtod_l+0x2fe>
 8023328:	9107      	str	r1, [sp, #28]
 802332a:	2c00      	cmp	r4, #0
 802332c:	d002      	beq.n	8023334 <_strtod_l+0x308>
 802332e:	9a07      	ldr	r2, [sp, #28]
 8023330:	4252      	negs	r2, r2
 8023332:	9207      	str	r2, [sp, #28]
 8023334:	9a06      	ldr	r2, [sp, #24]
 8023336:	2a00      	cmp	r2, #0
 8023338:	d14d      	bne.n	80233d6 <_strtod_l+0x3aa>
 802333a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802333c:	4310      	orrs	r0, r2
 802333e:	d000      	beq.n	8023342 <_strtod_l+0x316>
 8023340:	e6af      	b.n	80230a2 <_strtod_l+0x76>
 8023342:	4662      	mov	r2, ip
 8023344:	2a00      	cmp	r2, #0
 8023346:	d000      	beq.n	802334a <_strtod_l+0x31e>
 8023348:	e6c7      	b.n	80230da <_strtod_l+0xae>
 802334a:	2b69      	cmp	r3, #105	@ 0x69
 802334c:	d027      	beq.n	802339e <_strtod_l+0x372>
 802334e:	dc23      	bgt.n	8023398 <_strtod_l+0x36c>
 8023350:	2b49      	cmp	r3, #73	@ 0x49
 8023352:	d024      	beq.n	802339e <_strtod_l+0x372>
 8023354:	2b4e      	cmp	r3, #78	@ 0x4e
 8023356:	d000      	beq.n	802335a <_strtod_l+0x32e>
 8023358:	e6bf      	b.n	80230da <_strtod_l+0xae>
 802335a:	49a5      	ldr	r1, [pc, #660]	@ (80235f0 <_strtod_l+0x5c4>)
 802335c:	a81d      	add	r0, sp, #116	@ 0x74
 802335e:	f002 fe4d 	bl	8025ffc <__match>
 8023362:	2800      	cmp	r0, #0
 8023364:	d100      	bne.n	8023368 <_strtod_l+0x33c>
 8023366:	e6b8      	b.n	80230da <_strtod_l+0xae>
 8023368:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802336a:	781b      	ldrb	r3, [r3, #0]
 802336c:	2b28      	cmp	r3, #40	@ 0x28
 802336e:	d12c      	bne.n	80233ca <_strtod_l+0x39e>
 8023370:	49a0      	ldr	r1, [pc, #640]	@ (80235f4 <_strtod_l+0x5c8>)
 8023372:	aa20      	add	r2, sp, #128	@ 0x80
 8023374:	a81d      	add	r0, sp, #116	@ 0x74
 8023376:	f002 fe55 	bl	8026024 <__hexnan>
 802337a:	2805      	cmp	r0, #5
 802337c:	d125      	bne.n	80233ca <_strtod_l+0x39e>
 802337e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8023380:	4a9d      	ldr	r2, [pc, #628]	@ (80235f8 <_strtod_l+0x5cc>)
 8023382:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023384:	431a      	orrs	r2, r3
 8023386:	0017      	movs	r7, r2
 8023388:	e68b      	b.n	80230a2 <_strtod_l+0x76>
 802338a:	220a      	movs	r2, #10
 802338c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802338e:	434a      	muls	r2, r1
 8023390:	18d2      	adds	r2, r2, r3
 8023392:	3a30      	subs	r2, #48	@ 0x30
 8023394:	9210      	str	r2, [sp, #64]	@ 0x40
 8023396:	e7b5      	b.n	8023304 <_strtod_l+0x2d8>
 8023398:	2b6e      	cmp	r3, #110	@ 0x6e
 802339a:	d0de      	beq.n	802335a <_strtod_l+0x32e>
 802339c:	e69d      	b.n	80230da <_strtod_l+0xae>
 802339e:	4997      	ldr	r1, [pc, #604]	@ (80235fc <_strtod_l+0x5d0>)
 80233a0:	a81d      	add	r0, sp, #116	@ 0x74
 80233a2:	f002 fe2b 	bl	8025ffc <__match>
 80233a6:	2800      	cmp	r0, #0
 80233a8:	d100      	bne.n	80233ac <_strtod_l+0x380>
 80233aa:	e696      	b.n	80230da <_strtod_l+0xae>
 80233ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80233ae:	4994      	ldr	r1, [pc, #592]	@ (8023600 <_strtod_l+0x5d4>)
 80233b0:	3b01      	subs	r3, #1
 80233b2:	a81d      	add	r0, sp, #116	@ 0x74
 80233b4:	931d      	str	r3, [sp, #116]	@ 0x74
 80233b6:	f002 fe21 	bl	8025ffc <__match>
 80233ba:	2800      	cmp	r0, #0
 80233bc:	d102      	bne.n	80233c4 <_strtod_l+0x398>
 80233be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80233c0:	3301      	adds	r3, #1
 80233c2:	931d      	str	r3, [sp, #116]	@ 0x74
 80233c4:	2600      	movs	r6, #0
 80233c6:	4f8c      	ldr	r7, [pc, #560]	@ (80235f8 <_strtod_l+0x5cc>)
 80233c8:	e66b      	b.n	80230a2 <_strtod_l+0x76>
 80233ca:	488e      	ldr	r0, [pc, #568]	@ (8023604 <_strtod_l+0x5d8>)
 80233cc:	f001 fca6 	bl	8024d1c <nan>
 80233d0:	0006      	movs	r6, r0
 80233d2:	000f      	movs	r7, r1
 80233d4:	e665      	b.n	80230a2 <_strtod_l+0x76>
 80233d6:	9b07      	ldr	r3, [sp, #28]
 80233d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80233da:	1a9b      	subs	r3, r3, r2
 80233dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80233de:	9b08      	ldr	r3, [sp, #32]
 80233e0:	2b00      	cmp	r3, #0
 80233e2:	d101      	bne.n	80233e8 <_strtod_l+0x3bc>
 80233e4:	9b06      	ldr	r3, [sp, #24]
 80233e6:	9308      	str	r3, [sp, #32]
 80233e8:	9c06      	ldr	r4, [sp, #24]
 80233ea:	2c10      	cmp	r4, #16
 80233ec:	dd00      	ble.n	80233f0 <_strtod_l+0x3c4>
 80233ee:	2410      	movs	r4, #16
 80233f0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80233f2:	f7e0 f813 	bl	800341c <__aeabi_ui2d>
 80233f6:	9b06      	ldr	r3, [sp, #24]
 80233f8:	0006      	movs	r6, r0
 80233fa:	000f      	movs	r7, r1
 80233fc:	2b09      	cmp	r3, #9
 80233fe:	dc13      	bgt.n	8023428 <_strtod_l+0x3fc>
 8023400:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023402:	2b00      	cmp	r3, #0
 8023404:	d100      	bne.n	8023408 <_strtod_l+0x3dc>
 8023406:	e64c      	b.n	80230a2 <_strtod_l+0x76>
 8023408:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802340a:	2b00      	cmp	r3, #0
 802340c:	dc00      	bgt.n	8023410 <_strtod_l+0x3e4>
 802340e:	e07e      	b.n	802350e <_strtod_l+0x4e2>
 8023410:	2b16      	cmp	r3, #22
 8023412:	dc63      	bgt.n	80234dc <_strtod_l+0x4b0>
 8023414:	497c      	ldr	r1, [pc, #496]	@ (8023608 <_strtod_l+0x5dc>)
 8023416:	00db      	lsls	r3, r3, #3
 8023418:	18c9      	adds	r1, r1, r3
 802341a:	0032      	movs	r2, r6
 802341c:	6808      	ldr	r0, [r1, #0]
 802341e:	6849      	ldr	r1, [r1, #4]
 8023420:	003b      	movs	r3, r7
 8023422:	f7df f90b 	bl	800263c <__aeabi_dmul>
 8023426:	e7d3      	b.n	80233d0 <_strtod_l+0x3a4>
 8023428:	0022      	movs	r2, r4
 802342a:	4b77      	ldr	r3, [pc, #476]	@ (8023608 <_strtod_l+0x5dc>)
 802342c:	3a09      	subs	r2, #9
 802342e:	00d2      	lsls	r2, r2, #3
 8023430:	189b      	adds	r3, r3, r2
 8023432:	681a      	ldr	r2, [r3, #0]
 8023434:	685b      	ldr	r3, [r3, #4]
 8023436:	f7df f901 	bl	800263c <__aeabi_dmul>
 802343a:	0006      	movs	r6, r0
 802343c:	0028      	movs	r0, r5
 802343e:	000f      	movs	r7, r1
 8023440:	f7df ffec 	bl	800341c <__aeabi_ui2d>
 8023444:	000b      	movs	r3, r1
 8023446:	0002      	movs	r2, r0
 8023448:	0039      	movs	r1, r7
 802344a:	0030      	movs	r0, r6
 802344c:	f7de f94e 	bl	80016ec <__aeabi_dadd>
 8023450:	9b06      	ldr	r3, [sp, #24]
 8023452:	0006      	movs	r6, r0
 8023454:	000f      	movs	r7, r1
 8023456:	2b0f      	cmp	r3, #15
 8023458:	ddd2      	ble.n	8023400 <_strtod_l+0x3d4>
 802345a:	9b06      	ldr	r3, [sp, #24]
 802345c:	1b1c      	subs	r4, r3, r4
 802345e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023460:	18e4      	adds	r4, r4, r3
 8023462:	2c00      	cmp	r4, #0
 8023464:	dc00      	bgt.n	8023468 <_strtod_l+0x43c>
 8023466:	e09b      	b.n	80235a0 <_strtod_l+0x574>
 8023468:	220f      	movs	r2, #15
 802346a:	0023      	movs	r3, r4
 802346c:	4013      	ands	r3, r2
 802346e:	4214      	tst	r4, r2
 8023470:	d00a      	beq.n	8023488 <_strtod_l+0x45c>
 8023472:	4965      	ldr	r1, [pc, #404]	@ (8023608 <_strtod_l+0x5dc>)
 8023474:	00db      	lsls	r3, r3, #3
 8023476:	18c9      	adds	r1, r1, r3
 8023478:	0032      	movs	r2, r6
 802347a:	6808      	ldr	r0, [r1, #0]
 802347c:	6849      	ldr	r1, [r1, #4]
 802347e:	003b      	movs	r3, r7
 8023480:	f7df f8dc 	bl	800263c <__aeabi_dmul>
 8023484:	0006      	movs	r6, r0
 8023486:	000f      	movs	r7, r1
 8023488:	230f      	movs	r3, #15
 802348a:	439c      	bics	r4, r3
 802348c:	d073      	beq.n	8023576 <_strtod_l+0x54a>
 802348e:	3326      	adds	r3, #38	@ 0x26
 8023490:	33ff      	adds	r3, #255	@ 0xff
 8023492:	429c      	cmp	r4, r3
 8023494:	dd4b      	ble.n	802352e <_strtod_l+0x502>
 8023496:	2300      	movs	r3, #0
 8023498:	9306      	str	r3, [sp, #24]
 802349a:	9307      	str	r3, [sp, #28]
 802349c:	930d      	str	r3, [sp, #52]	@ 0x34
 802349e:	9308      	str	r3, [sp, #32]
 80234a0:	2322      	movs	r3, #34	@ 0x22
 80234a2:	2600      	movs	r6, #0
 80234a4:	9a05      	ldr	r2, [sp, #20]
 80234a6:	4f54      	ldr	r7, [pc, #336]	@ (80235f8 <_strtod_l+0x5cc>)
 80234a8:	6013      	str	r3, [r2, #0]
 80234aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80234ac:	42b3      	cmp	r3, r6
 80234ae:	d100      	bne.n	80234b2 <_strtod_l+0x486>
 80234b0:	e5f7      	b.n	80230a2 <_strtod_l+0x76>
 80234b2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80234b4:	9805      	ldr	r0, [sp, #20]
 80234b6:	f002 ff6f 	bl	8026398 <_Bfree>
 80234ba:	9908      	ldr	r1, [sp, #32]
 80234bc:	9805      	ldr	r0, [sp, #20]
 80234be:	f002 ff6b 	bl	8026398 <_Bfree>
 80234c2:	9907      	ldr	r1, [sp, #28]
 80234c4:	9805      	ldr	r0, [sp, #20]
 80234c6:	f002 ff67 	bl	8026398 <_Bfree>
 80234ca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80234cc:	9805      	ldr	r0, [sp, #20]
 80234ce:	f002 ff63 	bl	8026398 <_Bfree>
 80234d2:	9906      	ldr	r1, [sp, #24]
 80234d4:	9805      	ldr	r0, [sp, #20]
 80234d6:	f002 ff5f 	bl	8026398 <_Bfree>
 80234da:	e5e2      	b.n	80230a2 <_strtod_l+0x76>
 80234dc:	2325      	movs	r3, #37	@ 0x25
 80234de:	9a06      	ldr	r2, [sp, #24]
 80234e0:	1a9b      	subs	r3, r3, r2
 80234e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80234e4:	4293      	cmp	r3, r2
 80234e6:	dbb8      	blt.n	802345a <_strtod_l+0x42e>
 80234e8:	240f      	movs	r4, #15
 80234ea:	9b06      	ldr	r3, [sp, #24]
 80234ec:	4d46      	ldr	r5, [pc, #280]	@ (8023608 <_strtod_l+0x5dc>)
 80234ee:	1ae4      	subs	r4, r4, r3
 80234f0:	00e1      	lsls	r1, r4, #3
 80234f2:	1869      	adds	r1, r5, r1
 80234f4:	0032      	movs	r2, r6
 80234f6:	6808      	ldr	r0, [r1, #0]
 80234f8:	6849      	ldr	r1, [r1, #4]
 80234fa:	003b      	movs	r3, r7
 80234fc:	f7df f89e 	bl	800263c <__aeabi_dmul>
 8023500:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023502:	1b1c      	subs	r4, r3, r4
 8023504:	00e4      	lsls	r4, r4, #3
 8023506:	192d      	adds	r5, r5, r4
 8023508:	682a      	ldr	r2, [r5, #0]
 802350a:	686b      	ldr	r3, [r5, #4]
 802350c:	e789      	b.n	8023422 <_strtod_l+0x3f6>
 802350e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023510:	3316      	adds	r3, #22
 8023512:	dba2      	blt.n	802345a <_strtod_l+0x42e>
 8023514:	9907      	ldr	r1, [sp, #28]
 8023516:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023518:	4b3b      	ldr	r3, [pc, #236]	@ (8023608 <_strtod_l+0x5dc>)
 802351a:	1a52      	subs	r2, r2, r1
 802351c:	00d2      	lsls	r2, r2, #3
 802351e:	189b      	adds	r3, r3, r2
 8023520:	0030      	movs	r0, r6
 8023522:	681a      	ldr	r2, [r3, #0]
 8023524:	685b      	ldr	r3, [r3, #4]
 8023526:	0039      	movs	r1, r7
 8023528:	f7de fc44 	bl	8001db4 <__aeabi_ddiv>
 802352c:	e750      	b.n	80233d0 <_strtod_l+0x3a4>
 802352e:	2300      	movs	r3, #0
 8023530:	0030      	movs	r0, r6
 8023532:	0039      	movs	r1, r7
 8023534:	4d35      	ldr	r5, [pc, #212]	@ (802360c <_strtod_l+0x5e0>)
 8023536:	1124      	asrs	r4, r4, #4
 8023538:	9309      	str	r3, [sp, #36]	@ 0x24
 802353a:	2c01      	cmp	r4, #1
 802353c:	dc1e      	bgt.n	802357c <_strtod_l+0x550>
 802353e:	2b00      	cmp	r3, #0
 8023540:	d001      	beq.n	8023546 <_strtod_l+0x51a>
 8023542:	0006      	movs	r6, r0
 8023544:	000f      	movs	r7, r1
 8023546:	4b32      	ldr	r3, [pc, #200]	@ (8023610 <_strtod_l+0x5e4>)
 8023548:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802354a:	18ff      	adds	r7, r7, r3
 802354c:	4b2f      	ldr	r3, [pc, #188]	@ (802360c <_strtod_l+0x5e0>)
 802354e:	00d5      	lsls	r5, r2, #3
 8023550:	195d      	adds	r5, r3, r5
 8023552:	0032      	movs	r2, r6
 8023554:	6828      	ldr	r0, [r5, #0]
 8023556:	6869      	ldr	r1, [r5, #4]
 8023558:	003b      	movs	r3, r7
 802355a:	f7df f86f 	bl	800263c <__aeabi_dmul>
 802355e:	4b26      	ldr	r3, [pc, #152]	@ (80235f8 <_strtod_l+0x5cc>)
 8023560:	4a2c      	ldr	r2, [pc, #176]	@ (8023614 <_strtod_l+0x5e8>)
 8023562:	0006      	movs	r6, r0
 8023564:	400b      	ands	r3, r1
 8023566:	4293      	cmp	r3, r2
 8023568:	d895      	bhi.n	8023496 <_strtod_l+0x46a>
 802356a:	4a2b      	ldr	r2, [pc, #172]	@ (8023618 <_strtod_l+0x5ec>)
 802356c:	4293      	cmp	r3, r2
 802356e:	d913      	bls.n	8023598 <_strtod_l+0x56c>
 8023570:	2601      	movs	r6, #1
 8023572:	4f2a      	ldr	r7, [pc, #168]	@ (802361c <_strtod_l+0x5f0>)
 8023574:	4276      	negs	r6, r6
 8023576:	2300      	movs	r3, #0
 8023578:	9309      	str	r3, [sp, #36]	@ 0x24
 802357a:	e086      	b.n	802368a <_strtod_l+0x65e>
 802357c:	2201      	movs	r2, #1
 802357e:	4214      	tst	r4, r2
 8023580:	d004      	beq.n	802358c <_strtod_l+0x560>
 8023582:	682a      	ldr	r2, [r5, #0]
 8023584:	686b      	ldr	r3, [r5, #4]
 8023586:	f7df f859 	bl	800263c <__aeabi_dmul>
 802358a:	2301      	movs	r3, #1
 802358c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802358e:	1064      	asrs	r4, r4, #1
 8023590:	3201      	adds	r2, #1
 8023592:	9209      	str	r2, [sp, #36]	@ 0x24
 8023594:	3508      	adds	r5, #8
 8023596:	e7d0      	b.n	802353a <_strtod_l+0x50e>
 8023598:	23d4      	movs	r3, #212	@ 0xd4
 802359a:	049b      	lsls	r3, r3, #18
 802359c:	18cf      	adds	r7, r1, r3
 802359e:	e7ea      	b.n	8023576 <_strtod_l+0x54a>
 80235a0:	2c00      	cmp	r4, #0
 80235a2:	d0e8      	beq.n	8023576 <_strtod_l+0x54a>
 80235a4:	4264      	negs	r4, r4
 80235a6:	230f      	movs	r3, #15
 80235a8:	0022      	movs	r2, r4
 80235aa:	401a      	ands	r2, r3
 80235ac:	421c      	tst	r4, r3
 80235ae:	d00a      	beq.n	80235c6 <_strtod_l+0x59a>
 80235b0:	4b15      	ldr	r3, [pc, #84]	@ (8023608 <_strtod_l+0x5dc>)
 80235b2:	00d2      	lsls	r2, r2, #3
 80235b4:	189b      	adds	r3, r3, r2
 80235b6:	0030      	movs	r0, r6
 80235b8:	681a      	ldr	r2, [r3, #0]
 80235ba:	685b      	ldr	r3, [r3, #4]
 80235bc:	0039      	movs	r1, r7
 80235be:	f7de fbf9 	bl	8001db4 <__aeabi_ddiv>
 80235c2:	0006      	movs	r6, r0
 80235c4:	000f      	movs	r7, r1
 80235c6:	1124      	asrs	r4, r4, #4
 80235c8:	d0d5      	beq.n	8023576 <_strtod_l+0x54a>
 80235ca:	2c1f      	cmp	r4, #31
 80235cc:	dd28      	ble.n	8023620 <_strtod_l+0x5f4>
 80235ce:	2300      	movs	r3, #0
 80235d0:	9306      	str	r3, [sp, #24]
 80235d2:	9307      	str	r3, [sp, #28]
 80235d4:	930d      	str	r3, [sp, #52]	@ 0x34
 80235d6:	9308      	str	r3, [sp, #32]
 80235d8:	2322      	movs	r3, #34	@ 0x22
 80235da:	9a05      	ldr	r2, [sp, #20]
 80235dc:	2600      	movs	r6, #0
 80235de:	6013      	str	r3, [r2, #0]
 80235e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80235e2:	2700      	movs	r7, #0
 80235e4:	2b00      	cmp	r3, #0
 80235e6:	d000      	beq.n	80235ea <_strtod_l+0x5be>
 80235e8:	e763      	b.n	80234b2 <_strtod_l+0x486>
 80235ea:	e55a      	b.n	80230a2 <_strtod_l+0x76>
 80235ec:	00004e1f 	.word	0x00004e1f
 80235f0:	0802d33e 	.word	0x0802d33e
 80235f4:	0802d1dc 	.word	0x0802d1dc
 80235f8:	7ff00000 	.word	0x7ff00000
 80235fc:	0802d336 	.word	0x0802d336
 8023600:	0802d370 	.word	0x0802d370
 8023604:	0802d5fc 	.word	0x0802d5fc
 8023608:	0802d4e8 	.word	0x0802d4e8
 802360c:	0802d4c0 	.word	0x0802d4c0
 8023610:	fcb00000 	.word	0xfcb00000
 8023614:	7ca00000 	.word	0x7ca00000
 8023618:	7c900000 	.word	0x7c900000
 802361c:	7fefffff 	.word	0x7fefffff
 8023620:	2310      	movs	r3, #16
 8023622:	0022      	movs	r2, r4
 8023624:	401a      	ands	r2, r3
 8023626:	9209      	str	r2, [sp, #36]	@ 0x24
 8023628:	421c      	tst	r4, r3
 802362a:	d001      	beq.n	8023630 <_strtod_l+0x604>
 802362c:	335a      	adds	r3, #90	@ 0x5a
 802362e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023630:	0030      	movs	r0, r6
 8023632:	0039      	movs	r1, r7
 8023634:	2300      	movs	r3, #0
 8023636:	4dbf      	ldr	r5, [pc, #764]	@ (8023934 <_strtod_l+0x908>)
 8023638:	2201      	movs	r2, #1
 802363a:	4214      	tst	r4, r2
 802363c:	d004      	beq.n	8023648 <_strtod_l+0x61c>
 802363e:	682a      	ldr	r2, [r5, #0]
 8023640:	686b      	ldr	r3, [r5, #4]
 8023642:	f7de fffb 	bl	800263c <__aeabi_dmul>
 8023646:	2301      	movs	r3, #1
 8023648:	1064      	asrs	r4, r4, #1
 802364a:	3508      	adds	r5, #8
 802364c:	2c00      	cmp	r4, #0
 802364e:	d1f3      	bne.n	8023638 <_strtod_l+0x60c>
 8023650:	2b00      	cmp	r3, #0
 8023652:	d001      	beq.n	8023658 <_strtod_l+0x62c>
 8023654:	0006      	movs	r6, r0
 8023656:	000f      	movs	r7, r1
 8023658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802365a:	2b00      	cmp	r3, #0
 802365c:	d00d      	beq.n	802367a <_strtod_l+0x64e>
 802365e:	236b      	movs	r3, #107	@ 0x6b
 8023660:	007a      	lsls	r2, r7, #1
 8023662:	0d52      	lsrs	r2, r2, #21
 8023664:	0039      	movs	r1, r7
 8023666:	1a9b      	subs	r3, r3, r2
 8023668:	2b00      	cmp	r3, #0
 802366a:	dd06      	ble.n	802367a <_strtod_l+0x64e>
 802366c:	2b1f      	cmp	r3, #31
 802366e:	dd5a      	ble.n	8023726 <_strtod_l+0x6fa>
 8023670:	2600      	movs	r6, #0
 8023672:	2b34      	cmp	r3, #52	@ 0x34
 8023674:	dd50      	ble.n	8023718 <_strtod_l+0x6ec>
 8023676:	27dc      	movs	r7, #220	@ 0xdc
 8023678:	04bf      	lsls	r7, r7, #18
 802367a:	2200      	movs	r2, #0
 802367c:	2300      	movs	r3, #0
 802367e:	0030      	movs	r0, r6
 8023680:	0039      	movs	r1, r7
 8023682:	f7dc ff15 	bl	80004b0 <__aeabi_dcmpeq>
 8023686:	2800      	cmp	r0, #0
 8023688:	d1a1      	bne.n	80235ce <_strtod_l+0x5a2>
 802368a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802368c:	9a08      	ldr	r2, [sp, #32]
 802368e:	9300      	str	r3, [sp, #0]
 8023690:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023692:	9b06      	ldr	r3, [sp, #24]
 8023694:	9805      	ldr	r0, [sp, #20]
 8023696:	f002 fee7 	bl	8026468 <__s2b>
 802369a:	900d      	str	r0, [sp, #52]	@ 0x34
 802369c:	2800      	cmp	r0, #0
 802369e:	d100      	bne.n	80236a2 <_strtod_l+0x676>
 80236a0:	e6f9      	b.n	8023496 <_strtod_l+0x46a>
 80236a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80236a4:	9907      	ldr	r1, [sp, #28]
 80236a6:	17da      	asrs	r2, r3, #31
 80236a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80236aa:	1a5b      	subs	r3, r3, r1
 80236ac:	401a      	ands	r2, r3
 80236ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80236b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80236b2:	43db      	mvns	r3, r3
 80236b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80236b6:	17db      	asrs	r3, r3, #31
 80236b8:	401a      	ands	r2, r3
 80236ba:	2300      	movs	r3, #0
 80236bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80236be:	9306      	str	r3, [sp, #24]
 80236c0:	9307      	str	r3, [sp, #28]
 80236c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80236c4:	9805      	ldr	r0, [sp, #20]
 80236c6:	6859      	ldr	r1, [r3, #4]
 80236c8:	f002 fe22 	bl	8026310 <_Balloc>
 80236cc:	9008      	str	r0, [sp, #32]
 80236ce:	2800      	cmp	r0, #0
 80236d0:	d100      	bne.n	80236d4 <_strtod_l+0x6a8>
 80236d2:	e6e5      	b.n	80234a0 <_strtod_l+0x474>
 80236d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80236d6:	300c      	adds	r0, #12
 80236d8:	0019      	movs	r1, r3
 80236da:	691a      	ldr	r2, [r3, #16]
 80236dc:	310c      	adds	r1, #12
 80236de:	3202      	adds	r2, #2
 80236e0:	0092      	lsls	r2, r2, #2
 80236e2:	f001 fb11 	bl	8024d08 <memcpy>
 80236e6:	ab20      	add	r3, sp, #128	@ 0x80
 80236e8:	9301      	str	r3, [sp, #4]
 80236ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80236ec:	9300      	str	r3, [sp, #0]
 80236ee:	0032      	movs	r2, r6
 80236f0:	003b      	movs	r3, r7
 80236f2:	9805      	ldr	r0, [sp, #20]
 80236f4:	9610      	str	r6, [sp, #64]	@ 0x40
 80236f6:	9711      	str	r7, [sp, #68]	@ 0x44
 80236f8:	f003 fa06 	bl	8026b08 <__d2b>
 80236fc:	901e      	str	r0, [sp, #120]	@ 0x78
 80236fe:	2800      	cmp	r0, #0
 8023700:	d100      	bne.n	8023704 <_strtod_l+0x6d8>
 8023702:	e6cd      	b.n	80234a0 <_strtod_l+0x474>
 8023704:	2101      	movs	r1, #1
 8023706:	9805      	ldr	r0, [sp, #20]
 8023708:	f002 ff4a 	bl	80265a0 <__i2b>
 802370c:	9007      	str	r0, [sp, #28]
 802370e:	2800      	cmp	r0, #0
 8023710:	d10e      	bne.n	8023730 <_strtod_l+0x704>
 8023712:	2300      	movs	r3, #0
 8023714:	9307      	str	r3, [sp, #28]
 8023716:	e6c3      	b.n	80234a0 <_strtod_l+0x474>
 8023718:	234b      	movs	r3, #75	@ 0x4b
 802371a:	1a9a      	subs	r2, r3, r2
 802371c:	3b4c      	subs	r3, #76	@ 0x4c
 802371e:	4093      	lsls	r3, r2
 8023720:	4019      	ands	r1, r3
 8023722:	000f      	movs	r7, r1
 8023724:	e7a9      	b.n	802367a <_strtod_l+0x64e>
 8023726:	2201      	movs	r2, #1
 8023728:	4252      	negs	r2, r2
 802372a:	409a      	lsls	r2, r3
 802372c:	4016      	ands	r6, r2
 802372e:	e7a4      	b.n	802367a <_strtod_l+0x64e>
 8023730:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023732:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023734:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8023736:	1ad4      	subs	r4, r2, r3
 8023738:	2b00      	cmp	r3, #0
 802373a:	db01      	blt.n	8023740 <_strtod_l+0x714>
 802373c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 802373e:	195d      	adds	r5, r3, r5
 8023740:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023742:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8023744:	1a5b      	subs	r3, r3, r1
 8023746:	2136      	movs	r1, #54	@ 0x36
 8023748:	189b      	adds	r3, r3, r2
 802374a:	1a8a      	subs	r2, r1, r2
 802374c:	497a      	ldr	r1, [pc, #488]	@ (8023938 <_strtod_l+0x90c>)
 802374e:	2001      	movs	r0, #1
 8023750:	468c      	mov	ip, r1
 8023752:	2100      	movs	r1, #0
 8023754:	3b01      	subs	r3, #1
 8023756:	9116      	str	r1, [sp, #88]	@ 0x58
 8023758:	9014      	str	r0, [sp, #80]	@ 0x50
 802375a:	4563      	cmp	r3, ip
 802375c:	da06      	bge.n	802376c <_strtod_l+0x740>
 802375e:	4661      	mov	r1, ip
 8023760:	1ac9      	subs	r1, r1, r3
 8023762:	1a52      	subs	r2, r2, r1
 8023764:	291f      	cmp	r1, #31
 8023766:	dc3f      	bgt.n	80237e8 <_strtod_l+0x7bc>
 8023768:	4088      	lsls	r0, r1
 802376a:	9014      	str	r0, [sp, #80]	@ 0x50
 802376c:	18ab      	adds	r3, r5, r2
 802376e:	930e      	str	r3, [sp, #56]	@ 0x38
 8023770:	18a4      	adds	r4, r4, r2
 8023772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023774:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023776:	191c      	adds	r4, r3, r4
 8023778:	002b      	movs	r3, r5
 802377a:	4295      	cmp	r5, r2
 802377c:	dd00      	ble.n	8023780 <_strtod_l+0x754>
 802377e:	0013      	movs	r3, r2
 8023780:	42a3      	cmp	r3, r4
 8023782:	dd00      	ble.n	8023786 <_strtod_l+0x75a>
 8023784:	0023      	movs	r3, r4
 8023786:	2b00      	cmp	r3, #0
 8023788:	dd04      	ble.n	8023794 <_strtod_l+0x768>
 802378a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802378c:	1ae4      	subs	r4, r4, r3
 802378e:	1ad2      	subs	r2, r2, r3
 8023790:	920e      	str	r2, [sp, #56]	@ 0x38
 8023792:	1aed      	subs	r5, r5, r3
 8023794:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023796:	2b00      	cmp	r3, #0
 8023798:	dd16      	ble.n	80237c8 <_strtod_l+0x79c>
 802379a:	001a      	movs	r2, r3
 802379c:	9907      	ldr	r1, [sp, #28]
 802379e:	9805      	ldr	r0, [sp, #20]
 80237a0:	f002 ffc8 	bl	8026734 <__pow5mult>
 80237a4:	9007      	str	r0, [sp, #28]
 80237a6:	2800      	cmp	r0, #0
 80237a8:	d0b3      	beq.n	8023712 <_strtod_l+0x6e6>
 80237aa:	0001      	movs	r1, r0
 80237ac:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80237ae:	9805      	ldr	r0, [sp, #20]
 80237b0:	f002 ff0e 	bl	80265d0 <__multiply>
 80237b4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80237b6:	2800      	cmp	r0, #0
 80237b8:	d100      	bne.n	80237bc <_strtod_l+0x790>
 80237ba:	e671      	b.n	80234a0 <_strtod_l+0x474>
 80237bc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80237be:	9805      	ldr	r0, [sp, #20]
 80237c0:	f002 fdea 	bl	8026398 <_Bfree>
 80237c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80237c6:	931e      	str	r3, [sp, #120]	@ 0x78
 80237c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80237ca:	2b00      	cmp	r3, #0
 80237cc:	dc12      	bgt.n	80237f4 <_strtod_l+0x7c8>
 80237ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80237d0:	2b00      	cmp	r3, #0
 80237d2:	dd18      	ble.n	8023806 <_strtod_l+0x7da>
 80237d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80237d6:	9908      	ldr	r1, [sp, #32]
 80237d8:	9805      	ldr	r0, [sp, #20]
 80237da:	f002 ffab 	bl	8026734 <__pow5mult>
 80237de:	9008      	str	r0, [sp, #32]
 80237e0:	2800      	cmp	r0, #0
 80237e2:	d110      	bne.n	8023806 <_strtod_l+0x7da>
 80237e4:	2300      	movs	r3, #0
 80237e6:	e65a      	b.n	802349e <_strtod_l+0x472>
 80237e8:	4954      	ldr	r1, [pc, #336]	@ (802393c <_strtod_l+0x910>)
 80237ea:	1acb      	subs	r3, r1, r3
 80237ec:	0001      	movs	r1, r0
 80237ee:	4099      	lsls	r1, r3
 80237f0:	9116      	str	r1, [sp, #88]	@ 0x58
 80237f2:	e7ba      	b.n	802376a <_strtod_l+0x73e>
 80237f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80237f6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80237f8:	9805      	ldr	r0, [sp, #20]
 80237fa:	f002 fff7 	bl	80267ec <__lshift>
 80237fe:	901e      	str	r0, [sp, #120]	@ 0x78
 8023800:	2800      	cmp	r0, #0
 8023802:	d1e4      	bne.n	80237ce <_strtod_l+0x7a2>
 8023804:	e64c      	b.n	80234a0 <_strtod_l+0x474>
 8023806:	2c00      	cmp	r4, #0
 8023808:	dd07      	ble.n	802381a <_strtod_l+0x7ee>
 802380a:	0022      	movs	r2, r4
 802380c:	9908      	ldr	r1, [sp, #32]
 802380e:	9805      	ldr	r0, [sp, #20]
 8023810:	f002 ffec 	bl	80267ec <__lshift>
 8023814:	9008      	str	r0, [sp, #32]
 8023816:	2800      	cmp	r0, #0
 8023818:	d0e4      	beq.n	80237e4 <_strtod_l+0x7b8>
 802381a:	2d00      	cmp	r5, #0
 802381c:	dd08      	ble.n	8023830 <_strtod_l+0x804>
 802381e:	002a      	movs	r2, r5
 8023820:	9907      	ldr	r1, [sp, #28]
 8023822:	9805      	ldr	r0, [sp, #20]
 8023824:	f002 ffe2 	bl	80267ec <__lshift>
 8023828:	9007      	str	r0, [sp, #28]
 802382a:	2800      	cmp	r0, #0
 802382c:	d100      	bne.n	8023830 <_strtod_l+0x804>
 802382e:	e637      	b.n	80234a0 <_strtod_l+0x474>
 8023830:	9a08      	ldr	r2, [sp, #32]
 8023832:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023834:	9805      	ldr	r0, [sp, #20]
 8023836:	f003 f861 	bl	80268fc <__mdiff>
 802383a:	9006      	str	r0, [sp, #24]
 802383c:	2800      	cmp	r0, #0
 802383e:	d100      	bne.n	8023842 <_strtod_l+0x816>
 8023840:	e62e      	b.n	80234a0 <_strtod_l+0x474>
 8023842:	68c3      	ldr	r3, [r0, #12]
 8023844:	9907      	ldr	r1, [sp, #28]
 8023846:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023848:	2300      	movs	r3, #0
 802384a:	60c3      	str	r3, [r0, #12]
 802384c:	f003 f83a 	bl	80268c4 <__mcmp>
 8023850:	2800      	cmp	r0, #0
 8023852:	da3b      	bge.n	80238cc <_strtod_l+0x8a0>
 8023854:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023856:	4333      	orrs	r3, r6
 8023858:	d167      	bne.n	802392a <_strtod_l+0x8fe>
 802385a:	033b      	lsls	r3, r7, #12
 802385c:	d165      	bne.n	802392a <_strtod_l+0x8fe>
 802385e:	22d6      	movs	r2, #214	@ 0xd6
 8023860:	4b37      	ldr	r3, [pc, #220]	@ (8023940 <_strtod_l+0x914>)
 8023862:	04d2      	lsls	r2, r2, #19
 8023864:	403b      	ands	r3, r7
 8023866:	4293      	cmp	r3, r2
 8023868:	d95f      	bls.n	802392a <_strtod_l+0x8fe>
 802386a:	9b06      	ldr	r3, [sp, #24]
 802386c:	695b      	ldr	r3, [r3, #20]
 802386e:	2b00      	cmp	r3, #0
 8023870:	d103      	bne.n	802387a <_strtod_l+0x84e>
 8023872:	9b06      	ldr	r3, [sp, #24]
 8023874:	691b      	ldr	r3, [r3, #16]
 8023876:	2b01      	cmp	r3, #1
 8023878:	dd57      	ble.n	802392a <_strtod_l+0x8fe>
 802387a:	9906      	ldr	r1, [sp, #24]
 802387c:	2201      	movs	r2, #1
 802387e:	9805      	ldr	r0, [sp, #20]
 8023880:	f002 ffb4 	bl	80267ec <__lshift>
 8023884:	9907      	ldr	r1, [sp, #28]
 8023886:	9006      	str	r0, [sp, #24]
 8023888:	f003 f81c 	bl	80268c4 <__mcmp>
 802388c:	2800      	cmp	r0, #0
 802388e:	dd4c      	ble.n	802392a <_strtod_l+0x8fe>
 8023890:	4b2b      	ldr	r3, [pc, #172]	@ (8023940 <_strtod_l+0x914>)
 8023892:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023894:	403b      	ands	r3, r7
 8023896:	2a00      	cmp	r2, #0
 8023898:	d074      	beq.n	8023984 <_strtod_l+0x958>
 802389a:	22d6      	movs	r2, #214	@ 0xd6
 802389c:	04d2      	lsls	r2, r2, #19
 802389e:	4293      	cmp	r3, r2
 80238a0:	d870      	bhi.n	8023984 <_strtod_l+0x958>
 80238a2:	22dc      	movs	r2, #220	@ 0xdc
 80238a4:	0492      	lsls	r2, r2, #18
 80238a6:	4293      	cmp	r3, r2
 80238a8:	d800      	bhi.n	80238ac <_strtod_l+0x880>
 80238aa:	e695      	b.n	80235d8 <_strtod_l+0x5ac>
 80238ac:	0030      	movs	r0, r6
 80238ae:	0039      	movs	r1, r7
 80238b0:	4b24      	ldr	r3, [pc, #144]	@ (8023944 <_strtod_l+0x918>)
 80238b2:	2200      	movs	r2, #0
 80238b4:	f7de fec2 	bl	800263c <__aeabi_dmul>
 80238b8:	4b21      	ldr	r3, [pc, #132]	@ (8023940 <_strtod_l+0x914>)
 80238ba:	0006      	movs	r6, r0
 80238bc:	000f      	movs	r7, r1
 80238be:	420b      	tst	r3, r1
 80238c0:	d000      	beq.n	80238c4 <_strtod_l+0x898>
 80238c2:	e5f6      	b.n	80234b2 <_strtod_l+0x486>
 80238c4:	2322      	movs	r3, #34	@ 0x22
 80238c6:	9a05      	ldr	r2, [sp, #20]
 80238c8:	6013      	str	r3, [r2, #0]
 80238ca:	e5f2      	b.n	80234b2 <_strtod_l+0x486>
 80238cc:	970e      	str	r7, [sp, #56]	@ 0x38
 80238ce:	2800      	cmp	r0, #0
 80238d0:	d175      	bne.n	80239be <_strtod_l+0x992>
 80238d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80238d4:	033b      	lsls	r3, r7, #12
 80238d6:	0b1b      	lsrs	r3, r3, #12
 80238d8:	2a00      	cmp	r2, #0
 80238da:	d039      	beq.n	8023950 <_strtod_l+0x924>
 80238dc:	4a1a      	ldr	r2, [pc, #104]	@ (8023948 <_strtod_l+0x91c>)
 80238de:	4293      	cmp	r3, r2
 80238e0:	d138      	bne.n	8023954 <_strtod_l+0x928>
 80238e2:	2101      	movs	r1, #1
 80238e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80238e6:	4249      	negs	r1, r1
 80238e8:	0032      	movs	r2, r6
 80238ea:	0008      	movs	r0, r1
 80238ec:	2b00      	cmp	r3, #0
 80238ee:	d00b      	beq.n	8023908 <_strtod_l+0x8dc>
 80238f0:	24d4      	movs	r4, #212	@ 0xd4
 80238f2:	4b13      	ldr	r3, [pc, #76]	@ (8023940 <_strtod_l+0x914>)
 80238f4:	0008      	movs	r0, r1
 80238f6:	403b      	ands	r3, r7
 80238f8:	04e4      	lsls	r4, r4, #19
 80238fa:	42a3      	cmp	r3, r4
 80238fc:	d804      	bhi.n	8023908 <_strtod_l+0x8dc>
 80238fe:	306c      	adds	r0, #108	@ 0x6c
 8023900:	0d1b      	lsrs	r3, r3, #20
 8023902:	1ac3      	subs	r3, r0, r3
 8023904:	4099      	lsls	r1, r3
 8023906:	0008      	movs	r0, r1
 8023908:	4282      	cmp	r2, r0
 802390a:	d123      	bne.n	8023954 <_strtod_l+0x928>
 802390c:	4b0f      	ldr	r3, [pc, #60]	@ (802394c <_strtod_l+0x920>)
 802390e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8023910:	4299      	cmp	r1, r3
 8023912:	d102      	bne.n	802391a <_strtod_l+0x8ee>
 8023914:	3201      	adds	r2, #1
 8023916:	d100      	bne.n	802391a <_strtod_l+0x8ee>
 8023918:	e5c2      	b.n	80234a0 <_strtod_l+0x474>
 802391a:	4b09      	ldr	r3, [pc, #36]	@ (8023940 <_strtod_l+0x914>)
 802391c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802391e:	2600      	movs	r6, #0
 8023920:	401a      	ands	r2, r3
 8023922:	0013      	movs	r3, r2
 8023924:	2280      	movs	r2, #128	@ 0x80
 8023926:	0352      	lsls	r2, r2, #13
 8023928:	189f      	adds	r7, r3, r2
 802392a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802392c:	2b00      	cmp	r3, #0
 802392e:	d1bd      	bne.n	80238ac <_strtod_l+0x880>
 8023930:	e5bf      	b.n	80234b2 <_strtod_l+0x486>
 8023932:	46c0      	nop			@ (mov r8, r8)
 8023934:	0802d208 	.word	0x0802d208
 8023938:	fffffc02 	.word	0xfffffc02
 802393c:	fffffbe2 	.word	0xfffffbe2
 8023940:	7ff00000 	.word	0x7ff00000
 8023944:	39500000 	.word	0x39500000
 8023948:	000fffff 	.word	0x000fffff
 802394c:	7fefffff 	.word	0x7fefffff
 8023950:	4333      	orrs	r3, r6
 8023952:	d09d      	beq.n	8023890 <_strtod_l+0x864>
 8023954:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023956:	2b00      	cmp	r3, #0
 8023958:	d01c      	beq.n	8023994 <_strtod_l+0x968>
 802395a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802395c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802395e:	4213      	tst	r3, r2
 8023960:	d0e3      	beq.n	802392a <_strtod_l+0x8fe>
 8023962:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023964:	0030      	movs	r0, r6
 8023966:	0039      	movs	r1, r7
 8023968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802396a:	2b00      	cmp	r3, #0
 802396c:	d016      	beq.n	802399c <_strtod_l+0x970>
 802396e:	f7ff fb45 	bl	8022ffc <sulp>
 8023972:	0002      	movs	r2, r0
 8023974:	000b      	movs	r3, r1
 8023976:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023978:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802397a:	f7dd feb7 	bl	80016ec <__aeabi_dadd>
 802397e:	0006      	movs	r6, r0
 8023980:	000f      	movs	r7, r1
 8023982:	e7d2      	b.n	802392a <_strtod_l+0x8fe>
 8023984:	2601      	movs	r6, #1
 8023986:	4a92      	ldr	r2, [pc, #584]	@ (8023bd0 <_strtod_l+0xba4>)
 8023988:	4276      	negs	r6, r6
 802398a:	189b      	adds	r3, r3, r2
 802398c:	4a91      	ldr	r2, [pc, #580]	@ (8023bd4 <_strtod_l+0xba8>)
 802398e:	431a      	orrs	r2, r3
 8023990:	0017      	movs	r7, r2
 8023992:	e7ca      	b.n	802392a <_strtod_l+0x8fe>
 8023994:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023996:	4233      	tst	r3, r6
 8023998:	d0c7      	beq.n	802392a <_strtod_l+0x8fe>
 802399a:	e7e2      	b.n	8023962 <_strtod_l+0x936>
 802399c:	f7ff fb2e 	bl	8022ffc <sulp>
 80239a0:	0002      	movs	r2, r0
 80239a2:	000b      	movs	r3, r1
 80239a4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80239a6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80239a8:	f7df f910 	bl	8002bcc <__aeabi_dsub>
 80239ac:	2200      	movs	r2, #0
 80239ae:	2300      	movs	r3, #0
 80239b0:	0006      	movs	r6, r0
 80239b2:	000f      	movs	r7, r1
 80239b4:	f7dc fd7c 	bl	80004b0 <__aeabi_dcmpeq>
 80239b8:	2800      	cmp	r0, #0
 80239ba:	d0b6      	beq.n	802392a <_strtod_l+0x8fe>
 80239bc:	e60c      	b.n	80235d8 <_strtod_l+0x5ac>
 80239be:	9907      	ldr	r1, [sp, #28]
 80239c0:	9806      	ldr	r0, [sp, #24]
 80239c2:	f003 f901 	bl	8026bc8 <__ratio>
 80239c6:	2380      	movs	r3, #128	@ 0x80
 80239c8:	2200      	movs	r2, #0
 80239ca:	05db      	lsls	r3, r3, #23
 80239cc:	0004      	movs	r4, r0
 80239ce:	000d      	movs	r5, r1
 80239d0:	f7dc fd7e 	bl	80004d0 <__aeabi_dcmple>
 80239d4:	2800      	cmp	r0, #0
 80239d6:	d06c      	beq.n	8023ab2 <_strtod_l+0xa86>
 80239d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80239da:	2b00      	cmp	r3, #0
 80239dc:	d177      	bne.n	8023ace <_strtod_l+0xaa2>
 80239de:	2e00      	cmp	r6, #0
 80239e0:	d157      	bne.n	8023a92 <_strtod_l+0xa66>
 80239e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80239e4:	031b      	lsls	r3, r3, #12
 80239e6:	d15a      	bne.n	8023a9e <_strtod_l+0xa72>
 80239e8:	2200      	movs	r2, #0
 80239ea:	0020      	movs	r0, r4
 80239ec:	0029      	movs	r1, r5
 80239ee:	4b7a      	ldr	r3, [pc, #488]	@ (8023bd8 <_strtod_l+0xbac>)
 80239f0:	f7dc fd64 	bl	80004bc <__aeabi_dcmplt>
 80239f4:	2800      	cmp	r0, #0
 80239f6:	d159      	bne.n	8023aac <_strtod_l+0xa80>
 80239f8:	0020      	movs	r0, r4
 80239fa:	0029      	movs	r1, r5
 80239fc:	2200      	movs	r2, #0
 80239fe:	4b77      	ldr	r3, [pc, #476]	@ (8023bdc <_strtod_l+0xbb0>)
 8023a00:	f7de fe1c 	bl	800263c <__aeabi_dmul>
 8023a04:	0004      	movs	r4, r0
 8023a06:	000d      	movs	r5, r1
 8023a08:	2380      	movs	r3, #128	@ 0x80
 8023a0a:	061b      	lsls	r3, r3, #24
 8023a0c:	18eb      	adds	r3, r5, r3
 8023a0e:	940a      	str	r4, [sp, #40]	@ 0x28
 8023a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023a12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023a14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023a16:	9214      	str	r2, [sp, #80]	@ 0x50
 8023a18:	9315      	str	r3, [sp, #84]	@ 0x54
 8023a1a:	4a71      	ldr	r2, [pc, #452]	@ (8023be0 <_strtod_l+0xbb4>)
 8023a1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023a1e:	4013      	ands	r3, r2
 8023a20:	9316      	str	r3, [sp, #88]	@ 0x58
 8023a22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023a24:	4b6f      	ldr	r3, [pc, #444]	@ (8023be4 <_strtod_l+0xbb8>)
 8023a26:	429a      	cmp	r2, r3
 8023a28:	d000      	beq.n	8023a2c <_strtod_l+0xa00>
 8023a2a:	e087      	b.n	8023b3c <_strtod_l+0xb10>
 8023a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8023be8 <_strtod_l+0xbbc>)
 8023a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023a30:	4694      	mov	ip, r2
 8023a32:	4463      	add	r3, ip
 8023a34:	001f      	movs	r7, r3
 8023a36:	0030      	movs	r0, r6
 8023a38:	0019      	movs	r1, r3
 8023a3a:	f002 fff9 	bl	8026a30 <__ulp>
 8023a3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023a40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023a42:	f7de fdfb 	bl	800263c <__aeabi_dmul>
 8023a46:	0032      	movs	r2, r6
 8023a48:	003b      	movs	r3, r7
 8023a4a:	f7dd fe4f 	bl	80016ec <__aeabi_dadd>
 8023a4e:	4a64      	ldr	r2, [pc, #400]	@ (8023be0 <_strtod_l+0xbb4>)
 8023a50:	4b66      	ldr	r3, [pc, #408]	@ (8023bec <_strtod_l+0xbc0>)
 8023a52:	0006      	movs	r6, r0
 8023a54:	400a      	ands	r2, r1
 8023a56:	429a      	cmp	r2, r3
 8023a58:	d940      	bls.n	8023adc <_strtod_l+0xab0>
 8023a5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023a5c:	4a64      	ldr	r2, [pc, #400]	@ (8023bf0 <_strtod_l+0xbc4>)
 8023a5e:	4293      	cmp	r3, r2
 8023a60:	d103      	bne.n	8023a6a <_strtod_l+0xa3e>
 8023a62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023a64:	3301      	adds	r3, #1
 8023a66:	d100      	bne.n	8023a6a <_strtod_l+0xa3e>
 8023a68:	e51a      	b.n	80234a0 <_strtod_l+0x474>
 8023a6a:	2601      	movs	r6, #1
 8023a6c:	4f60      	ldr	r7, [pc, #384]	@ (8023bf0 <_strtod_l+0xbc4>)
 8023a6e:	4276      	negs	r6, r6
 8023a70:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023a72:	9805      	ldr	r0, [sp, #20]
 8023a74:	f002 fc90 	bl	8026398 <_Bfree>
 8023a78:	9908      	ldr	r1, [sp, #32]
 8023a7a:	9805      	ldr	r0, [sp, #20]
 8023a7c:	f002 fc8c 	bl	8026398 <_Bfree>
 8023a80:	9907      	ldr	r1, [sp, #28]
 8023a82:	9805      	ldr	r0, [sp, #20]
 8023a84:	f002 fc88 	bl	8026398 <_Bfree>
 8023a88:	9906      	ldr	r1, [sp, #24]
 8023a8a:	9805      	ldr	r0, [sp, #20]
 8023a8c:	f002 fc84 	bl	8026398 <_Bfree>
 8023a90:	e617      	b.n	80236c2 <_strtod_l+0x696>
 8023a92:	2e01      	cmp	r6, #1
 8023a94:	d103      	bne.n	8023a9e <_strtod_l+0xa72>
 8023a96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023a98:	2b00      	cmp	r3, #0
 8023a9a:	d100      	bne.n	8023a9e <_strtod_l+0xa72>
 8023a9c:	e59c      	b.n	80235d8 <_strtod_l+0x5ac>
 8023a9e:	2300      	movs	r3, #0
 8023aa0:	4c54      	ldr	r4, [pc, #336]	@ (8023bf4 <_strtod_l+0xbc8>)
 8023aa2:	4d4d      	ldr	r5, [pc, #308]	@ (8023bd8 <_strtod_l+0xbac>)
 8023aa4:	930a      	str	r3, [sp, #40]	@ 0x28
 8023aa6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023aa8:	2400      	movs	r4, #0
 8023aaa:	e7b2      	b.n	8023a12 <_strtod_l+0x9e6>
 8023aac:	2400      	movs	r4, #0
 8023aae:	4d4b      	ldr	r5, [pc, #300]	@ (8023bdc <_strtod_l+0xbb0>)
 8023ab0:	e7aa      	b.n	8023a08 <_strtod_l+0x9dc>
 8023ab2:	0020      	movs	r0, r4
 8023ab4:	0029      	movs	r1, r5
 8023ab6:	4b49      	ldr	r3, [pc, #292]	@ (8023bdc <_strtod_l+0xbb0>)
 8023ab8:	2200      	movs	r2, #0
 8023aba:	f7de fdbf 	bl	800263c <__aeabi_dmul>
 8023abe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023ac0:	0004      	movs	r4, r0
 8023ac2:	000d      	movs	r5, r1
 8023ac4:	2b00      	cmp	r3, #0
 8023ac6:	d09f      	beq.n	8023a08 <_strtod_l+0x9dc>
 8023ac8:	940a      	str	r4, [sp, #40]	@ 0x28
 8023aca:	950b      	str	r5, [sp, #44]	@ 0x2c
 8023acc:	e7a1      	b.n	8023a12 <_strtod_l+0x9e6>
 8023ace:	2300      	movs	r3, #0
 8023ad0:	4c41      	ldr	r4, [pc, #260]	@ (8023bd8 <_strtod_l+0xbac>)
 8023ad2:	0025      	movs	r5, r4
 8023ad4:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ad6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023ad8:	001c      	movs	r4, r3
 8023ada:	e79a      	b.n	8023a12 <_strtod_l+0x9e6>
 8023adc:	23d4      	movs	r3, #212	@ 0xd4
 8023ade:	049b      	lsls	r3, r3, #18
 8023ae0:	18cf      	adds	r7, r1, r3
 8023ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ae4:	9710      	str	r7, [sp, #64]	@ 0x40
 8023ae6:	2b00      	cmp	r3, #0
 8023ae8:	d1c2      	bne.n	8023a70 <_strtod_l+0xa44>
 8023aea:	4b3d      	ldr	r3, [pc, #244]	@ (8023be0 <_strtod_l+0xbb4>)
 8023aec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023aee:	403b      	ands	r3, r7
 8023af0:	429a      	cmp	r2, r3
 8023af2:	d1bd      	bne.n	8023a70 <_strtod_l+0xa44>
 8023af4:	0020      	movs	r0, r4
 8023af6:	0029      	movs	r1, r5
 8023af8:	f7dc fdc6 	bl	8000688 <__aeabi_d2lz>
 8023afc:	f7dc fdfe 	bl	80006fc <__aeabi_l2d>
 8023b00:	0002      	movs	r2, r0
 8023b02:	000b      	movs	r3, r1
 8023b04:	0020      	movs	r0, r4
 8023b06:	0029      	movs	r1, r5
 8023b08:	f7df f860 	bl	8002bcc <__aeabi_dsub>
 8023b0c:	033c      	lsls	r4, r7, #12
 8023b0e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023b10:	0b24      	lsrs	r4, r4, #12
 8023b12:	4334      	orrs	r4, r6
 8023b14:	900e      	str	r0, [sp, #56]	@ 0x38
 8023b16:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023b18:	4a37      	ldr	r2, [pc, #220]	@ (8023bf8 <_strtod_l+0xbcc>)
 8023b1a:	431c      	orrs	r4, r3
 8023b1c:	d052      	beq.n	8023bc4 <_strtod_l+0xb98>
 8023b1e:	4b37      	ldr	r3, [pc, #220]	@ (8023bfc <_strtod_l+0xbd0>)
 8023b20:	f7dc fccc 	bl	80004bc <__aeabi_dcmplt>
 8023b24:	2800      	cmp	r0, #0
 8023b26:	d000      	beq.n	8023b2a <_strtod_l+0xafe>
 8023b28:	e4c3      	b.n	80234b2 <_strtod_l+0x486>
 8023b2a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8023b2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8023b2e:	4a34      	ldr	r2, [pc, #208]	@ (8023c00 <_strtod_l+0xbd4>)
 8023b30:	4b2a      	ldr	r3, [pc, #168]	@ (8023bdc <_strtod_l+0xbb0>)
 8023b32:	f7dc fcd7 	bl	80004e4 <__aeabi_dcmpgt>
 8023b36:	2800      	cmp	r0, #0
 8023b38:	d09a      	beq.n	8023a70 <_strtod_l+0xa44>
 8023b3a:	e4ba      	b.n	80234b2 <_strtod_l+0x486>
 8023b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023b3e:	2b00      	cmp	r3, #0
 8023b40:	d02a      	beq.n	8023b98 <_strtod_l+0xb6c>
 8023b42:	23d4      	movs	r3, #212	@ 0xd4
 8023b44:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023b46:	04db      	lsls	r3, r3, #19
 8023b48:	429a      	cmp	r2, r3
 8023b4a:	d825      	bhi.n	8023b98 <_strtod_l+0xb6c>
 8023b4c:	0020      	movs	r0, r4
 8023b4e:	0029      	movs	r1, r5
 8023b50:	4a2c      	ldr	r2, [pc, #176]	@ (8023c04 <_strtod_l+0xbd8>)
 8023b52:	4b2d      	ldr	r3, [pc, #180]	@ (8023c08 <_strtod_l+0xbdc>)
 8023b54:	f7dc fcbc 	bl	80004d0 <__aeabi_dcmple>
 8023b58:	2800      	cmp	r0, #0
 8023b5a:	d016      	beq.n	8023b8a <_strtod_l+0xb5e>
 8023b5c:	0020      	movs	r0, r4
 8023b5e:	0029      	movs	r1, r5
 8023b60:	f7dc fd74 	bl	800064c <__aeabi_d2uiz>
 8023b64:	2800      	cmp	r0, #0
 8023b66:	d100      	bne.n	8023b6a <_strtod_l+0xb3e>
 8023b68:	3001      	adds	r0, #1
 8023b6a:	f7df fc57 	bl	800341c <__aeabi_ui2d>
 8023b6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023b70:	0004      	movs	r4, r0
 8023b72:	000d      	movs	r5, r1
 8023b74:	2b00      	cmp	r3, #0
 8023b76:	d122      	bne.n	8023bbe <_strtod_l+0xb92>
 8023b78:	2380      	movs	r3, #128	@ 0x80
 8023b7a:	061b      	lsls	r3, r3, #24
 8023b7c:	18cb      	adds	r3, r1, r3
 8023b7e:	9018      	str	r0, [sp, #96]	@ 0x60
 8023b80:	9319      	str	r3, [sp, #100]	@ 0x64
 8023b82:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023b84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023b86:	9214      	str	r2, [sp, #80]	@ 0x50
 8023b88:	9315      	str	r3, [sp, #84]	@ 0x54
 8023b8a:	22d6      	movs	r2, #214	@ 0xd6
 8023b8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023b8e:	04d2      	lsls	r2, r2, #19
 8023b90:	189b      	adds	r3, r3, r2
 8023b92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023b94:	1a9b      	subs	r3, r3, r2
 8023b96:	9315      	str	r3, [sp, #84]	@ 0x54
 8023b98:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023b9a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8023b9c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8023b9e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8023ba0:	f002 ff46 	bl	8026a30 <__ulp>
 8023ba4:	0002      	movs	r2, r0
 8023ba6:	000b      	movs	r3, r1
 8023ba8:	0030      	movs	r0, r6
 8023baa:	0039      	movs	r1, r7
 8023bac:	f7de fd46 	bl	800263c <__aeabi_dmul>
 8023bb0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023bb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023bb4:	f7dd fd9a 	bl	80016ec <__aeabi_dadd>
 8023bb8:	0006      	movs	r6, r0
 8023bba:	000f      	movs	r7, r1
 8023bbc:	e791      	b.n	8023ae2 <_strtod_l+0xab6>
 8023bbe:	9418      	str	r4, [sp, #96]	@ 0x60
 8023bc0:	9519      	str	r5, [sp, #100]	@ 0x64
 8023bc2:	e7de      	b.n	8023b82 <_strtod_l+0xb56>
 8023bc4:	4b11      	ldr	r3, [pc, #68]	@ (8023c0c <_strtod_l+0xbe0>)
 8023bc6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8023bc8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8023bca:	f7dc fc77 	bl	80004bc <__aeabi_dcmplt>
 8023bce:	e7b2      	b.n	8023b36 <_strtod_l+0xb0a>
 8023bd0:	fff00000 	.word	0xfff00000
 8023bd4:	000fffff 	.word	0x000fffff
 8023bd8:	3ff00000 	.word	0x3ff00000
 8023bdc:	3fe00000 	.word	0x3fe00000
 8023be0:	7ff00000 	.word	0x7ff00000
 8023be4:	7fe00000 	.word	0x7fe00000
 8023be8:	fcb00000 	.word	0xfcb00000
 8023bec:	7c9fffff 	.word	0x7c9fffff
 8023bf0:	7fefffff 	.word	0x7fefffff
 8023bf4:	bff00000 	.word	0xbff00000
 8023bf8:	94a03595 	.word	0x94a03595
 8023bfc:	3fdfffff 	.word	0x3fdfffff
 8023c00:	35afe535 	.word	0x35afe535
 8023c04:	ffc00000 	.word	0xffc00000
 8023c08:	41dfffff 	.word	0x41dfffff
 8023c0c:	3fcfffff 	.word	0x3fcfffff

08023c10 <strtod>:
 8023c10:	b510      	push	{r4, lr}
 8023c12:	4c04      	ldr	r4, [pc, #16]	@ (8023c24 <strtod+0x14>)
 8023c14:	000a      	movs	r2, r1
 8023c16:	0001      	movs	r1, r0
 8023c18:	4b03      	ldr	r3, [pc, #12]	@ (8023c28 <strtod+0x18>)
 8023c1a:	6820      	ldr	r0, [r4, #0]
 8023c1c:	f7ff fa06 	bl	802302c <_strtod_l>
 8023c20:	bd10      	pop	{r4, pc}
 8023c22:	46c0      	nop			@ (mov r8, r8)
 8023c24:	200003e0 	.word	0x200003e0
 8023c28:	20000274 	.word	0x20000274

08023c2c <_strtol_l.constprop.0>:
 8023c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c2e:	b085      	sub	sp, #20
 8023c30:	0017      	movs	r7, r2
 8023c32:	001e      	movs	r6, r3
 8023c34:	9003      	str	r0, [sp, #12]
 8023c36:	9101      	str	r1, [sp, #4]
 8023c38:	2b24      	cmp	r3, #36	@ 0x24
 8023c3a:	d844      	bhi.n	8023cc6 <_strtol_l.constprop.0+0x9a>
 8023c3c:	000c      	movs	r4, r1
 8023c3e:	2b01      	cmp	r3, #1
 8023c40:	d041      	beq.n	8023cc6 <_strtol_l.constprop.0+0x9a>
 8023c42:	4b3d      	ldr	r3, [pc, #244]	@ (8023d38 <_strtol_l.constprop.0+0x10c>)
 8023c44:	2208      	movs	r2, #8
 8023c46:	469c      	mov	ip, r3
 8023c48:	0023      	movs	r3, r4
 8023c4a:	4661      	mov	r1, ip
 8023c4c:	781d      	ldrb	r5, [r3, #0]
 8023c4e:	3401      	adds	r4, #1
 8023c50:	5d48      	ldrb	r0, [r1, r5]
 8023c52:	0001      	movs	r1, r0
 8023c54:	4011      	ands	r1, r2
 8023c56:	4210      	tst	r0, r2
 8023c58:	d1f6      	bne.n	8023c48 <_strtol_l.constprop.0+0x1c>
 8023c5a:	2d2d      	cmp	r5, #45	@ 0x2d
 8023c5c:	d13a      	bne.n	8023cd4 <_strtol_l.constprop.0+0xa8>
 8023c5e:	7825      	ldrb	r5, [r4, #0]
 8023c60:	1c9c      	adds	r4, r3, #2
 8023c62:	2301      	movs	r3, #1
 8023c64:	9300      	str	r3, [sp, #0]
 8023c66:	2210      	movs	r2, #16
 8023c68:	0033      	movs	r3, r6
 8023c6a:	4393      	bics	r3, r2
 8023c6c:	d109      	bne.n	8023c82 <_strtol_l.constprop.0+0x56>
 8023c6e:	2d30      	cmp	r5, #48	@ 0x30
 8023c70:	d136      	bne.n	8023ce0 <_strtol_l.constprop.0+0xb4>
 8023c72:	2120      	movs	r1, #32
 8023c74:	7823      	ldrb	r3, [r4, #0]
 8023c76:	438b      	bics	r3, r1
 8023c78:	2b58      	cmp	r3, #88	@ 0x58
 8023c7a:	d131      	bne.n	8023ce0 <_strtol_l.constprop.0+0xb4>
 8023c7c:	0016      	movs	r6, r2
 8023c7e:	7865      	ldrb	r5, [r4, #1]
 8023c80:	3402      	adds	r4, #2
 8023c82:	4a2e      	ldr	r2, [pc, #184]	@ (8023d3c <_strtol_l.constprop.0+0x110>)
 8023c84:	9b00      	ldr	r3, [sp, #0]
 8023c86:	4694      	mov	ip, r2
 8023c88:	4463      	add	r3, ip
 8023c8a:	0031      	movs	r1, r6
 8023c8c:	0018      	movs	r0, r3
 8023c8e:	9302      	str	r3, [sp, #8]
 8023c90:	f7dc fb0e 	bl	80002b0 <__aeabi_uidivmod>
 8023c94:	2200      	movs	r2, #0
 8023c96:	4684      	mov	ip, r0
 8023c98:	0010      	movs	r0, r2
 8023c9a:	002b      	movs	r3, r5
 8023c9c:	3b30      	subs	r3, #48	@ 0x30
 8023c9e:	2b09      	cmp	r3, #9
 8023ca0:	d825      	bhi.n	8023cee <_strtol_l.constprop.0+0xc2>
 8023ca2:	001d      	movs	r5, r3
 8023ca4:	42ae      	cmp	r6, r5
 8023ca6:	dd31      	ble.n	8023d0c <_strtol_l.constprop.0+0xe0>
 8023ca8:	1c53      	adds	r3, r2, #1
 8023caa:	d009      	beq.n	8023cc0 <_strtol_l.constprop.0+0x94>
 8023cac:	2201      	movs	r2, #1
 8023cae:	4252      	negs	r2, r2
 8023cb0:	4584      	cmp	ip, r0
 8023cb2:	d305      	bcc.n	8023cc0 <_strtol_l.constprop.0+0x94>
 8023cb4:	d101      	bne.n	8023cba <_strtol_l.constprop.0+0x8e>
 8023cb6:	42a9      	cmp	r1, r5
 8023cb8:	db25      	blt.n	8023d06 <_strtol_l.constprop.0+0xda>
 8023cba:	2201      	movs	r2, #1
 8023cbc:	4370      	muls	r0, r6
 8023cbe:	1828      	adds	r0, r5, r0
 8023cc0:	7825      	ldrb	r5, [r4, #0]
 8023cc2:	3401      	adds	r4, #1
 8023cc4:	e7e9      	b.n	8023c9a <_strtol_l.constprop.0+0x6e>
 8023cc6:	f000 ffe7 	bl	8024c98 <__errno>
 8023cca:	2316      	movs	r3, #22
 8023ccc:	6003      	str	r3, [r0, #0]
 8023cce:	2000      	movs	r0, #0
 8023cd0:	b005      	add	sp, #20
 8023cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023cd4:	9100      	str	r1, [sp, #0]
 8023cd6:	2d2b      	cmp	r5, #43	@ 0x2b
 8023cd8:	d1c5      	bne.n	8023c66 <_strtol_l.constprop.0+0x3a>
 8023cda:	7825      	ldrb	r5, [r4, #0]
 8023cdc:	1c9c      	adds	r4, r3, #2
 8023cde:	e7c2      	b.n	8023c66 <_strtol_l.constprop.0+0x3a>
 8023ce0:	2e00      	cmp	r6, #0
 8023ce2:	d1ce      	bne.n	8023c82 <_strtol_l.constprop.0+0x56>
 8023ce4:	3608      	adds	r6, #8
 8023ce6:	2d30      	cmp	r5, #48	@ 0x30
 8023ce8:	d0cb      	beq.n	8023c82 <_strtol_l.constprop.0+0x56>
 8023cea:	3602      	adds	r6, #2
 8023cec:	e7c9      	b.n	8023c82 <_strtol_l.constprop.0+0x56>
 8023cee:	002b      	movs	r3, r5
 8023cf0:	3b41      	subs	r3, #65	@ 0x41
 8023cf2:	2b19      	cmp	r3, #25
 8023cf4:	d801      	bhi.n	8023cfa <_strtol_l.constprop.0+0xce>
 8023cf6:	3d37      	subs	r5, #55	@ 0x37
 8023cf8:	e7d4      	b.n	8023ca4 <_strtol_l.constprop.0+0x78>
 8023cfa:	002b      	movs	r3, r5
 8023cfc:	3b61      	subs	r3, #97	@ 0x61
 8023cfe:	2b19      	cmp	r3, #25
 8023d00:	d804      	bhi.n	8023d0c <_strtol_l.constprop.0+0xe0>
 8023d02:	3d57      	subs	r5, #87	@ 0x57
 8023d04:	e7ce      	b.n	8023ca4 <_strtol_l.constprop.0+0x78>
 8023d06:	2201      	movs	r2, #1
 8023d08:	4252      	negs	r2, r2
 8023d0a:	e7d9      	b.n	8023cc0 <_strtol_l.constprop.0+0x94>
 8023d0c:	1c53      	adds	r3, r2, #1
 8023d0e:	d108      	bne.n	8023d22 <_strtol_l.constprop.0+0xf6>
 8023d10:	2322      	movs	r3, #34	@ 0x22
 8023d12:	9a03      	ldr	r2, [sp, #12]
 8023d14:	9802      	ldr	r0, [sp, #8]
 8023d16:	6013      	str	r3, [r2, #0]
 8023d18:	2f00      	cmp	r7, #0
 8023d1a:	d0d9      	beq.n	8023cd0 <_strtol_l.constprop.0+0xa4>
 8023d1c:	1e63      	subs	r3, r4, #1
 8023d1e:	9301      	str	r3, [sp, #4]
 8023d20:	e007      	b.n	8023d32 <_strtol_l.constprop.0+0x106>
 8023d22:	9b00      	ldr	r3, [sp, #0]
 8023d24:	2b00      	cmp	r3, #0
 8023d26:	d000      	beq.n	8023d2a <_strtol_l.constprop.0+0xfe>
 8023d28:	4240      	negs	r0, r0
 8023d2a:	2f00      	cmp	r7, #0
 8023d2c:	d0d0      	beq.n	8023cd0 <_strtol_l.constprop.0+0xa4>
 8023d2e:	2a00      	cmp	r2, #0
 8023d30:	d1f4      	bne.n	8023d1c <_strtol_l.constprop.0+0xf0>
 8023d32:	9b01      	ldr	r3, [sp, #4]
 8023d34:	603b      	str	r3, [r7, #0]
 8023d36:	e7cb      	b.n	8023cd0 <_strtol_l.constprop.0+0xa4>
 8023d38:	0802d231 	.word	0x0802d231
 8023d3c:	7fffffff 	.word	0x7fffffff

08023d40 <strtol>:
 8023d40:	b510      	push	{r4, lr}
 8023d42:	4c04      	ldr	r4, [pc, #16]	@ (8023d54 <strtol+0x14>)
 8023d44:	0013      	movs	r3, r2
 8023d46:	000a      	movs	r2, r1
 8023d48:	0001      	movs	r1, r0
 8023d4a:	6820      	ldr	r0, [r4, #0]
 8023d4c:	f7ff ff6e 	bl	8023c2c <_strtol_l.constprop.0>
 8023d50:	bd10      	pop	{r4, pc}
 8023d52:	46c0      	nop			@ (mov r8, r8)
 8023d54:	200003e0 	.word	0x200003e0

08023d58 <__cvt>:
 8023d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023d5a:	001f      	movs	r7, r3
 8023d5c:	2300      	movs	r3, #0
 8023d5e:	0016      	movs	r6, r2
 8023d60:	b08b      	sub	sp, #44	@ 0x2c
 8023d62:	429f      	cmp	r7, r3
 8023d64:	da04      	bge.n	8023d70 <__cvt+0x18>
 8023d66:	2180      	movs	r1, #128	@ 0x80
 8023d68:	0609      	lsls	r1, r1, #24
 8023d6a:	187b      	adds	r3, r7, r1
 8023d6c:	001f      	movs	r7, r3
 8023d6e:	232d      	movs	r3, #45	@ 0x2d
 8023d70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023d72:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8023d74:	7013      	strb	r3, [r2, #0]
 8023d76:	2320      	movs	r3, #32
 8023d78:	2203      	movs	r2, #3
 8023d7a:	439d      	bics	r5, r3
 8023d7c:	2d46      	cmp	r5, #70	@ 0x46
 8023d7e:	d007      	beq.n	8023d90 <__cvt+0x38>
 8023d80:	002b      	movs	r3, r5
 8023d82:	3b45      	subs	r3, #69	@ 0x45
 8023d84:	4259      	negs	r1, r3
 8023d86:	414b      	adcs	r3, r1
 8023d88:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8023d8a:	3a01      	subs	r2, #1
 8023d8c:	18cb      	adds	r3, r1, r3
 8023d8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8023d90:	ab09      	add	r3, sp, #36	@ 0x24
 8023d92:	9304      	str	r3, [sp, #16]
 8023d94:	ab08      	add	r3, sp, #32
 8023d96:	9303      	str	r3, [sp, #12]
 8023d98:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023d9a:	9200      	str	r2, [sp, #0]
 8023d9c:	9302      	str	r3, [sp, #8]
 8023d9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023da0:	0032      	movs	r2, r6
 8023da2:	9301      	str	r3, [sp, #4]
 8023da4:	003b      	movs	r3, r7
 8023da6:	f001 f84d 	bl	8024e44 <_dtoa_r>
 8023daa:	0004      	movs	r4, r0
 8023dac:	2d47      	cmp	r5, #71	@ 0x47
 8023dae:	d11b      	bne.n	8023de8 <__cvt+0x90>
 8023db0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023db2:	07db      	lsls	r3, r3, #31
 8023db4:	d511      	bpl.n	8023dda <__cvt+0x82>
 8023db6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023db8:	18c3      	adds	r3, r0, r3
 8023dba:	9307      	str	r3, [sp, #28]
 8023dbc:	2200      	movs	r2, #0
 8023dbe:	2300      	movs	r3, #0
 8023dc0:	0030      	movs	r0, r6
 8023dc2:	0039      	movs	r1, r7
 8023dc4:	f7dc fb74 	bl	80004b0 <__aeabi_dcmpeq>
 8023dc8:	2800      	cmp	r0, #0
 8023dca:	d001      	beq.n	8023dd0 <__cvt+0x78>
 8023dcc:	9b07      	ldr	r3, [sp, #28]
 8023dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8023dd0:	2230      	movs	r2, #48	@ 0x30
 8023dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023dd4:	9907      	ldr	r1, [sp, #28]
 8023dd6:	428b      	cmp	r3, r1
 8023dd8:	d320      	bcc.n	8023e1c <__cvt+0xc4>
 8023dda:	0020      	movs	r0, r4
 8023ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023dde:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8023de0:	1b1b      	subs	r3, r3, r4
 8023de2:	6013      	str	r3, [r2, #0]
 8023de4:	b00b      	add	sp, #44	@ 0x2c
 8023de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023de8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023dea:	18c3      	adds	r3, r0, r3
 8023dec:	9307      	str	r3, [sp, #28]
 8023dee:	2d46      	cmp	r5, #70	@ 0x46
 8023df0:	d1e4      	bne.n	8023dbc <__cvt+0x64>
 8023df2:	7803      	ldrb	r3, [r0, #0]
 8023df4:	2b30      	cmp	r3, #48	@ 0x30
 8023df6:	d10c      	bne.n	8023e12 <__cvt+0xba>
 8023df8:	2200      	movs	r2, #0
 8023dfa:	2300      	movs	r3, #0
 8023dfc:	0030      	movs	r0, r6
 8023dfe:	0039      	movs	r1, r7
 8023e00:	f7dc fb56 	bl	80004b0 <__aeabi_dcmpeq>
 8023e04:	2800      	cmp	r0, #0
 8023e06:	d104      	bne.n	8023e12 <__cvt+0xba>
 8023e08:	2301      	movs	r3, #1
 8023e0a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023e0c:	1a9b      	subs	r3, r3, r2
 8023e0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023e10:	6013      	str	r3, [r2, #0]
 8023e12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023e14:	9a07      	ldr	r2, [sp, #28]
 8023e16:	681b      	ldr	r3, [r3, #0]
 8023e18:	18d3      	adds	r3, r2, r3
 8023e1a:	e7ce      	b.n	8023dba <__cvt+0x62>
 8023e1c:	1c59      	adds	r1, r3, #1
 8023e1e:	9109      	str	r1, [sp, #36]	@ 0x24
 8023e20:	701a      	strb	r2, [r3, #0]
 8023e22:	e7d6      	b.n	8023dd2 <__cvt+0x7a>

08023e24 <__exponent>:
 8023e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023e26:	232b      	movs	r3, #43	@ 0x2b
 8023e28:	0005      	movs	r5, r0
 8023e2a:	000c      	movs	r4, r1
 8023e2c:	b085      	sub	sp, #20
 8023e2e:	7002      	strb	r2, [r0, #0]
 8023e30:	2900      	cmp	r1, #0
 8023e32:	da01      	bge.n	8023e38 <__exponent+0x14>
 8023e34:	424c      	negs	r4, r1
 8023e36:	3302      	adds	r3, #2
 8023e38:	706b      	strb	r3, [r5, #1]
 8023e3a:	2c09      	cmp	r4, #9
 8023e3c:	dd2c      	ble.n	8023e98 <__exponent+0x74>
 8023e3e:	ab02      	add	r3, sp, #8
 8023e40:	1dde      	adds	r6, r3, #7
 8023e42:	0020      	movs	r0, r4
 8023e44:	210a      	movs	r1, #10
 8023e46:	f7dc fb1d 	bl	8000484 <__aeabi_idivmod>
 8023e4a:	0037      	movs	r7, r6
 8023e4c:	3130      	adds	r1, #48	@ 0x30
 8023e4e:	3e01      	subs	r6, #1
 8023e50:	0020      	movs	r0, r4
 8023e52:	7031      	strb	r1, [r6, #0]
 8023e54:	210a      	movs	r1, #10
 8023e56:	9401      	str	r4, [sp, #4]
 8023e58:	f7dc fa2e 	bl	80002b8 <__divsi3>
 8023e5c:	9b01      	ldr	r3, [sp, #4]
 8023e5e:	0004      	movs	r4, r0
 8023e60:	2b63      	cmp	r3, #99	@ 0x63
 8023e62:	dcee      	bgt.n	8023e42 <__exponent+0x1e>
 8023e64:	1eba      	subs	r2, r7, #2
 8023e66:	1ca8      	adds	r0, r5, #2
 8023e68:	0001      	movs	r1, r0
 8023e6a:	0013      	movs	r3, r2
 8023e6c:	3430      	adds	r4, #48	@ 0x30
 8023e6e:	7014      	strb	r4, [r2, #0]
 8023e70:	ac02      	add	r4, sp, #8
 8023e72:	3407      	adds	r4, #7
 8023e74:	429c      	cmp	r4, r3
 8023e76:	d80a      	bhi.n	8023e8e <__exponent+0x6a>
 8023e78:	2300      	movs	r3, #0
 8023e7a:	42a2      	cmp	r2, r4
 8023e7c:	d803      	bhi.n	8023e86 <__exponent+0x62>
 8023e7e:	3309      	adds	r3, #9
 8023e80:	aa02      	add	r2, sp, #8
 8023e82:	189b      	adds	r3, r3, r2
 8023e84:	1bdb      	subs	r3, r3, r7
 8023e86:	18c0      	adds	r0, r0, r3
 8023e88:	1b40      	subs	r0, r0, r5
 8023e8a:	b005      	add	sp, #20
 8023e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023e8e:	781c      	ldrb	r4, [r3, #0]
 8023e90:	3301      	adds	r3, #1
 8023e92:	700c      	strb	r4, [r1, #0]
 8023e94:	3101      	adds	r1, #1
 8023e96:	e7eb      	b.n	8023e70 <__exponent+0x4c>
 8023e98:	2330      	movs	r3, #48	@ 0x30
 8023e9a:	18e4      	adds	r4, r4, r3
 8023e9c:	70ab      	strb	r3, [r5, #2]
 8023e9e:	1d28      	adds	r0, r5, #4
 8023ea0:	70ec      	strb	r4, [r5, #3]
 8023ea2:	e7f1      	b.n	8023e88 <__exponent+0x64>

08023ea4 <_printf_float>:
 8023ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023ea6:	b097      	sub	sp, #92	@ 0x5c
 8023ea8:	000d      	movs	r5, r1
 8023eaa:	920a      	str	r2, [sp, #40]	@ 0x28
 8023eac:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8023eae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023eb0:	9009      	str	r0, [sp, #36]	@ 0x24
 8023eb2:	f000 fe9f 	bl	8024bf4 <_localeconv_r>
 8023eb6:	6803      	ldr	r3, [r0, #0]
 8023eb8:	0018      	movs	r0, r3
 8023eba:	930d      	str	r3, [sp, #52]	@ 0x34
 8023ebc:	f7dc f956 	bl	800016c <strlen>
 8023ec0:	2300      	movs	r3, #0
 8023ec2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8023ec4:	9314      	str	r3, [sp, #80]	@ 0x50
 8023ec6:	7e2b      	ldrb	r3, [r5, #24]
 8023ec8:	2207      	movs	r2, #7
 8023eca:	930c      	str	r3, [sp, #48]	@ 0x30
 8023ecc:	682b      	ldr	r3, [r5, #0]
 8023ece:	930e      	str	r3, [sp, #56]	@ 0x38
 8023ed0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8023ed2:	6823      	ldr	r3, [r4, #0]
 8023ed4:	05c9      	lsls	r1, r1, #23
 8023ed6:	d545      	bpl.n	8023f64 <_printf_float+0xc0>
 8023ed8:	189b      	adds	r3, r3, r2
 8023eda:	4393      	bics	r3, r2
 8023edc:	001a      	movs	r2, r3
 8023ede:	3208      	adds	r2, #8
 8023ee0:	6022      	str	r2, [r4, #0]
 8023ee2:	2201      	movs	r2, #1
 8023ee4:	681e      	ldr	r6, [r3, #0]
 8023ee6:	685f      	ldr	r7, [r3, #4]
 8023ee8:	007b      	lsls	r3, r7, #1
 8023eea:	085b      	lsrs	r3, r3, #1
 8023eec:	9311      	str	r3, [sp, #68]	@ 0x44
 8023eee:	9610      	str	r6, [sp, #64]	@ 0x40
 8023ef0:	64ae      	str	r6, [r5, #72]	@ 0x48
 8023ef2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8023ef4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023ef6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8023ef8:	4ba7      	ldr	r3, [pc, #668]	@ (8024198 <_printf_float+0x2f4>)
 8023efa:	4252      	negs	r2, r2
 8023efc:	f7df fa02 	bl	8003304 <__aeabi_dcmpun>
 8023f00:	2800      	cmp	r0, #0
 8023f02:	d131      	bne.n	8023f68 <_printf_float+0xc4>
 8023f04:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023f06:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8023f08:	2201      	movs	r2, #1
 8023f0a:	4ba3      	ldr	r3, [pc, #652]	@ (8024198 <_printf_float+0x2f4>)
 8023f0c:	4252      	negs	r2, r2
 8023f0e:	f7dc fadf 	bl	80004d0 <__aeabi_dcmple>
 8023f12:	2800      	cmp	r0, #0
 8023f14:	d128      	bne.n	8023f68 <_printf_float+0xc4>
 8023f16:	2200      	movs	r2, #0
 8023f18:	2300      	movs	r3, #0
 8023f1a:	0030      	movs	r0, r6
 8023f1c:	0039      	movs	r1, r7
 8023f1e:	f7dc facd 	bl	80004bc <__aeabi_dcmplt>
 8023f22:	2800      	cmp	r0, #0
 8023f24:	d003      	beq.n	8023f2e <_printf_float+0x8a>
 8023f26:	002b      	movs	r3, r5
 8023f28:	222d      	movs	r2, #45	@ 0x2d
 8023f2a:	3343      	adds	r3, #67	@ 0x43
 8023f2c:	701a      	strb	r2, [r3, #0]
 8023f2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023f30:	4f9a      	ldr	r7, [pc, #616]	@ (802419c <_printf_float+0x2f8>)
 8023f32:	2b47      	cmp	r3, #71	@ 0x47
 8023f34:	d900      	bls.n	8023f38 <_printf_float+0x94>
 8023f36:	4f9a      	ldr	r7, [pc, #616]	@ (80241a0 <_printf_float+0x2fc>)
 8023f38:	2303      	movs	r3, #3
 8023f3a:	2400      	movs	r4, #0
 8023f3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023f3e:	612b      	str	r3, [r5, #16]
 8023f40:	3301      	adds	r3, #1
 8023f42:	439a      	bics	r2, r3
 8023f44:	602a      	str	r2, [r5, #0]
 8023f46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023f48:	0029      	movs	r1, r5
 8023f4a:	9300      	str	r3, [sp, #0]
 8023f4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023f4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023f50:	aa15      	add	r2, sp, #84	@ 0x54
 8023f52:	f000 f9e5 	bl	8024320 <_printf_common>
 8023f56:	3001      	adds	r0, #1
 8023f58:	d000      	beq.n	8023f5c <_printf_float+0xb8>
 8023f5a:	e09f      	b.n	802409c <_printf_float+0x1f8>
 8023f5c:	2001      	movs	r0, #1
 8023f5e:	4240      	negs	r0, r0
 8023f60:	b017      	add	sp, #92	@ 0x5c
 8023f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023f64:	3307      	adds	r3, #7
 8023f66:	e7b8      	b.n	8023eda <_printf_float+0x36>
 8023f68:	0032      	movs	r2, r6
 8023f6a:	003b      	movs	r3, r7
 8023f6c:	0030      	movs	r0, r6
 8023f6e:	0039      	movs	r1, r7
 8023f70:	f7df f9c8 	bl	8003304 <__aeabi_dcmpun>
 8023f74:	2800      	cmp	r0, #0
 8023f76:	d00b      	beq.n	8023f90 <_printf_float+0xec>
 8023f78:	2f00      	cmp	r7, #0
 8023f7a:	da03      	bge.n	8023f84 <_printf_float+0xe0>
 8023f7c:	002b      	movs	r3, r5
 8023f7e:	222d      	movs	r2, #45	@ 0x2d
 8023f80:	3343      	adds	r3, #67	@ 0x43
 8023f82:	701a      	strb	r2, [r3, #0]
 8023f84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023f86:	4f87      	ldr	r7, [pc, #540]	@ (80241a4 <_printf_float+0x300>)
 8023f88:	2b47      	cmp	r3, #71	@ 0x47
 8023f8a:	d9d5      	bls.n	8023f38 <_printf_float+0x94>
 8023f8c:	4f86      	ldr	r7, [pc, #536]	@ (80241a8 <_printf_float+0x304>)
 8023f8e:	e7d3      	b.n	8023f38 <_printf_float+0x94>
 8023f90:	2220      	movs	r2, #32
 8023f92:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023f94:	686b      	ldr	r3, [r5, #4]
 8023f96:	4394      	bics	r4, r2
 8023f98:	1c5a      	adds	r2, r3, #1
 8023f9a:	d146      	bne.n	802402a <_printf_float+0x186>
 8023f9c:	3307      	adds	r3, #7
 8023f9e:	606b      	str	r3, [r5, #4]
 8023fa0:	2380      	movs	r3, #128	@ 0x80
 8023fa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023fa4:	00db      	lsls	r3, r3, #3
 8023fa6:	4313      	orrs	r3, r2
 8023fa8:	2200      	movs	r2, #0
 8023faa:	602b      	str	r3, [r5, #0]
 8023fac:	9206      	str	r2, [sp, #24]
 8023fae:	aa14      	add	r2, sp, #80	@ 0x50
 8023fb0:	9205      	str	r2, [sp, #20]
 8023fb2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023fb4:	a90a      	add	r1, sp, #40	@ 0x28
 8023fb6:	9204      	str	r2, [sp, #16]
 8023fb8:	aa13      	add	r2, sp, #76	@ 0x4c
 8023fba:	9203      	str	r2, [sp, #12]
 8023fbc:	2223      	movs	r2, #35	@ 0x23
 8023fbe:	1852      	adds	r2, r2, r1
 8023fc0:	9202      	str	r2, [sp, #8]
 8023fc2:	9301      	str	r3, [sp, #4]
 8023fc4:	686b      	ldr	r3, [r5, #4]
 8023fc6:	0032      	movs	r2, r6
 8023fc8:	9300      	str	r3, [sp, #0]
 8023fca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023fcc:	003b      	movs	r3, r7
 8023fce:	f7ff fec3 	bl	8023d58 <__cvt>
 8023fd2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023fd4:	0007      	movs	r7, r0
 8023fd6:	2c47      	cmp	r4, #71	@ 0x47
 8023fd8:	d12d      	bne.n	8024036 <_printf_float+0x192>
 8023fda:	1cd3      	adds	r3, r2, #3
 8023fdc:	db02      	blt.n	8023fe4 <_printf_float+0x140>
 8023fde:	686b      	ldr	r3, [r5, #4]
 8023fe0:	429a      	cmp	r2, r3
 8023fe2:	dd48      	ble.n	8024076 <_printf_float+0x1d2>
 8023fe4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023fe6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023fe8:	3b02      	subs	r3, #2
 8023fea:	b2db      	uxtb	r3, r3
 8023fec:	930c      	str	r3, [sp, #48]	@ 0x30
 8023fee:	0028      	movs	r0, r5
 8023ff0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023ff2:	3901      	subs	r1, #1
 8023ff4:	3050      	adds	r0, #80	@ 0x50
 8023ff6:	9113      	str	r1, [sp, #76]	@ 0x4c
 8023ff8:	f7ff ff14 	bl	8023e24 <__exponent>
 8023ffc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023ffe:	0004      	movs	r4, r0
 8024000:	1813      	adds	r3, r2, r0
 8024002:	612b      	str	r3, [r5, #16]
 8024004:	2a01      	cmp	r2, #1
 8024006:	dc02      	bgt.n	802400e <_printf_float+0x16a>
 8024008:	682a      	ldr	r2, [r5, #0]
 802400a:	07d2      	lsls	r2, r2, #31
 802400c:	d501      	bpl.n	8024012 <_printf_float+0x16e>
 802400e:	3301      	adds	r3, #1
 8024010:	612b      	str	r3, [r5, #16]
 8024012:	2323      	movs	r3, #35	@ 0x23
 8024014:	aa0a      	add	r2, sp, #40	@ 0x28
 8024016:	189b      	adds	r3, r3, r2
 8024018:	781b      	ldrb	r3, [r3, #0]
 802401a:	2b00      	cmp	r3, #0
 802401c:	d100      	bne.n	8024020 <_printf_float+0x17c>
 802401e:	e792      	b.n	8023f46 <_printf_float+0xa2>
 8024020:	002b      	movs	r3, r5
 8024022:	222d      	movs	r2, #45	@ 0x2d
 8024024:	3343      	adds	r3, #67	@ 0x43
 8024026:	701a      	strb	r2, [r3, #0]
 8024028:	e78d      	b.n	8023f46 <_printf_float+0xa2>
 802402a:	2c47      	cmp	r4, #71	@ 0x47
 802402c:	d1b8      	bne.n	8023fa0 <_printf_float+0xfc>
 802402e:	2b00      	cmp	r3, #0
 8024030:	d1b6      	bne.n	8023fa0 <_printf_float+0xfc>
 8024032:	3301      	adds	r3, #1
 8024034:	e7b3      	b.n	8023f9e <_printf_float+0xfa>
 8024036:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024038:	0011      	movs	r1, r2
 802403a:	2b65      	cmp	r3, #101	@ 0x65
 802403c:	d9d7      	bls.n	8023fee <_printf_float+0x14a>
 802403e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024040:	2b66      	cmp	r3, #102	@ 0x66
 8024042:	d11a      	bne.n	802407a <_printf_float+0x1d6>
 8024044:	686b      	ldr	r3, [r5, #4]
 8024046:	2a00      	cmp	r2, #0
 8024048:	dd09      	ble.n	802405e <_printf_float+0x1ba>
 802404a:	612a      	str	r2, [r5, #16]
 802404c:	2b00      	cmp	r3, #0
 802404e:	d102      	bne.n	8024056 <_printf_float+0x1b2>
 8024050:	6829      	ldr	r1, [r5, #0]
 8024052:	07c9      	lsls	r1, r1, #31
 8024054:	d50b      	bpl.n	802406e <_printf_float+0x1ca>
 8024056:	3301      	adds	r3, #1
 8024058:	189b      	adds	r3, r3, r2
 802405a:	612b      	str	r3, [r5, #16]
 802405c:	e007      	b.n	802406e <_printf_float+0x1ca>
 802405e:	2b00      	cmp	r3, #0
 8024060:	d103      	bne.n	802406a <_printf_float+0x1c6>
 8024062:	2201      	movs	r2, #1
 8024064:	6829      	ldr	r1, [r5, #0]
 8024066:	4211      	tst	r1, r2
 8024068:	d000      	beq.n	802406c <_printf_float+0x1c8>
 802406a:	1c9a      	adds	r2, r3, #2
 802406c:	612a      	str	r2, [r5, #16]
 802406e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024070:	2400      	movs	r4, #0
 8024072:	65ab      	str	r3, [r5, #88]	@ 0x58
 8024074:	e7cd      	b.n	8024012 <_printf_float+0x16e>
 8024076:	2367      	movs	r3, #103	@ 0x67
 8024078:	930c      	str	r3, [sp, #48]	@ 0x30
 802407a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802407c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802407e:	4299      	cmp	r1, r3
 8024080:	db06      	blt.n	8024090 <_printf_float+0x1ec>
 8024082:	682b      	ldr	r3, [r5, #0]
 8024084:	6129      	str	r1, [r5, #16]
 8024086:	07db      	lsls	r3, r3, #31
 8024088:	d5f1      	bpl.n	802406e <_printf_float+0x1ca>
 802408a:	3101      	adds	r1, #1
 802408c:	6129      	str	r1, [r5, #16]
 802408e:	e7ee      	b.n	802406e <_printf_float+0x1ca>
 8024090:	2201      	movs	r2, #1
 8024092:	2900      	cmp	r1, #0
 8024094:	dce0      	bgt.n	8024058 <_printf_float+0x1b4>
 8024096:	1892      	adds	r2, r2, r2
 8024098:	1a52      	subs	r2, r2, r1
 802409a:	e7dd      	b.n	8024058 <_printf_float+0x1b4>
 802409c:	682a      	ldr	r2, [r5, #0]
 802409e:	0553      	lsls	r3, r2, #21
 80240a0:	d408      	bmi.n	80240b4 <_printf_float+0x210>
 80240a2:	692b      	ldr	r3, [r5, #16]
 80240a4:	003a      	movs	r2, r7
 80240a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80240a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80240aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80240ac:	47a0      	blx	r4
 80240ae:	3001      	adds	r0, #1
 80240b0:	d129      	bne.n	8024106 <_printf_float+0x262>
 80240b2:	e753      	b.n	8023f5c <_printf_float+0xb8>
 80240b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80240b6:	2b65      	cmp	r3, #101	@ 0x65
 80240b8:	d800      	bhi.n	80240bc <_printf_float+0x218>
 80240ba:	e0da      	b.n	8024272 <_printf_float+0x3ce>
 80240bc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80240be:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80240c0:	2200      	movs	r2, #0
 80240c2:	2300      	movs	r3, #0
 80240c4:	f7dc f9f4 	bl	80004b0 <__aeabi_dcmpeq>
 80240c8:	2800      	cmp	r0, #0
 80240ca:	d033      	beq.n	8024134 <_printf_float+0x290>
 80240cc:	2301      	movs	r3, #1
 80240ce:	4a37      	ldr	r2, [pc, #220]	@ (80241ac <_printf_float+0x308>)
 80240d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80240d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80240d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80240d6:	47a0      	blx	r4
 80240d8:	3001      	adds	r0, #1
 80240da:	d100      	bne.n	80240de <_printf_float+0x23a>
 80240dc:	e73e      	b.n	8023f5c <_printf_float+0xb8>
 80240de:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80240e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80240e2:	42b3      	cmp	r3, r6
 80240e4:	db02      	blt.n	80240ec <_printf_float+0x248>
 80240e6:	682b      	ldr	r3, [r5, #0]
 80240e8:	07db      	lsls	r3, r3, #31
 80240ea:	d50c      	bpl.n	8024106 <_printf_float+0x262>
 80240ec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80240ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80240f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80240f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80240f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80240f6:	47a0      	blx	r4
 80240f8:	2400      	movs	r4, #0
 80240fa:	3001      	adds	r0, #1
 80240fc:	d100      	bne.n	8024100 <_printf_float+0x25c>
 80240fe:	e72d      	b.n	8023f5c <_printf_float+0xb8>
 8024100:	1e73      	subs	r3, r6, #1
 8024102:	42a3      	cmp	r3, r4
 8024104:	dc0a      	bgt.n	802411c <_printf_float+0x278>
 8024106:	682b      	ldr	r3, [r5, #0]
 8024108:	079b      	lsls	r3, r3, #30
 802410a:	d500      	bpl.n	802410e <_printf_float+0x26a>
 802410c:	e105      	b.n	802431a <_printf_float+0x476>
 802410e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024110:	68e8      	ldr	r0, [r5, #12]
 8024112:	4298      	cmp	r0, r3
 8024114:	db00      	blt.n	8024118 <_printf_float+0x274>
 8024116:	e723      	b.n	8023f60 <_printf_float+0xbc>
 8024118:	0018      	movs	r0, r3
 802411a:	e721      	b.n	8023f60 <_printf_float+0xbc>
 802411c:	002a      	movs	r2, r5
 802411e:	2301      	movs	r3, #1
 8024120:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024124:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024126:	321a      	adds	r2, #26
 8024128:	47b8      	blx	r7
 802412a:	3001      	adds	r0, #1
 802412c:	d100      	bne.n	8024130 <_printf_float+0x28c>
 802412e:	e715      	b.n	8023f5c <_printf_float+0xb8>
 8024130:	3401      	adds	r4, #1
 8024132:	e7e5      	b.n	8024100 <_printf_float+0x25c>
 8024134:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024136:	2b00      	cmp	r3, #0
 8024138:	dc3a      	bgt.n	80241b0 <_printf_float+0x30c>
 802413a:	2301      	movs	r3, #1
 802413c:	4a1b      	ldr	r2, [pc, #108]	@ (80241ac <_printf_float+0x308>)
 802413e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024140:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024142:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024144:	47a0      	blx	r4
 8024146:	3001      	adds	r0, #1
 8024148:	d100      	bne.n	802414c <_printf_float+0x2a8>
 802414a:	e707      	b.n	8023f5c <_printf_float+0xb8>
 802414c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 802414e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024150:	4333      	orrs	r3, r6
 8024152:	d102      	bne.n	802415a <_printf_float+0x2b6>
 8024154:	682b      	ldr	r3, [r5, #0]
 8024156:	07db      	lsls	r3, r3, #31
 8024158:	d5d5      	bpl.n	8024106 <_printf_float+0x262>
 802415a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802415c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802415e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024160:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024162:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024164:	47a0      	blx	r4
 8024166:	2300      	movs	r3, #0
 8024168:	3001      	adds	r0, #1
 802416a:	d100      	bne.n	802416e <_printf_float+0x2ca>
 802416c:	e6f6      	b.n	8023f5c <_printf_float+0xb8>
 802416e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024170:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024172:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024174:	425b      	negs	r3, r3
 8024176:	4293      	cmp	r3, r2
 8024178:	dc01      	bgt.n	802417e <_printf_float+0x2da>
 802417a:	0033      	movs	r3, r6
 802417c:	e792      	b.n	80240a4 <_printf_float+0x200>
 802417e:	002a      	movs	r2, r5
 8024180:	2301      	movs	r3, #1
 8024182:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024184:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024186:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024188:	321a      	adds	r2, #26
 802418a:	47a0      	blx	r4
 802418c:	3001      	adds	r0, #1
 802418e:	d100      	bne.n	8024192 <_printf_float+0x2ee>
 8024190:	e6e4      	b.n	8023f5c <_printf_float+0xb8>
 8024192:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024194:	3301      	adds	r3, #1
 8024196:	e7ea      	b.n	802416e <_printf_float+0x2ca>
 8024198:	7fefffff 	.word	0x7fefffff
 802419c:	0802d331 	.word	0x0802d331
 80241a0:	0802d335 	.word	0x0802d335
 80241a4:	0802d339 	.word	0x0802d339
 80241a8:	0802d33d 	.word	0x0802d33d
 80241ac:	0802d341 	.word	0x0802d341
 80241b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80241b2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80241b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80241b6:	429e      	cmp	r6, r3
 80241b8:	dd00      	ble.n	80241bc <_printf_float+0x318>
 80241ba:	001e      	movs	r6, r3
 80241bc:	2e00      	cmp	r6, #0
 80241be:	dc31      	bgt.n	8024224 <_printf_float+0x380>
 80241c0:	43f3      	mvns	r3, r6
 80241c2:	2400      	movs	r4, #0
 80241c4:	17db      	asrs	r3, r3, #31
 80241c6:	4033      	ands	r3, r6
 80241c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80241ca:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80241cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80241ce:	1af3      	subs	r3, r6, r3
 80241d0:	42a3      	cmp	r3, r4
 80241d2:	dc30      	bgt.n	8024236 <_printf_float+0x392>
 80241d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80241d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80241d8:	429a      	cmp	r2, r3
 80241da:	dc38      	bgt.n	802424e <_printf_float+0x3aa>
 80241dc:	682b      	ldr	r3, [r5, #0]
 80241de:	07db      	lsls	r3, r3, #31
 80241e0:	d435      	bmi.n	802424e <_printf_float+0x3aa>
 80241e2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80241e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80241e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80241e8:	1b9b      	subs	r3, r3, r6
 80241ea:	1b14      	subs	r4, r2, r4
 80241ec:	429c      	cmp	r4, r3
 80241ee:	dd00      	ble.n	80241f2 <_printf_float+0x34e>
 80241f0:	001c      	movs	r4, r3
 80241f2:	2c00      	cmp	r4, #0
 80241f4:	dc34      	bgt.n	8024260 <_printf_float+0x3bc>
 80241f6:	43e3      	mvns	r3, r4
 80241f8:	2600      	movs	r6, #0
 80241fa:	17db      	asrs	r3, r3, #31
 80241fc:	401c      	ands	r4, r3
 80241fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024200:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024202:	1ad3      	subs	r3, r2, r3
 8024204:	1b1b      	subs	r3, r3, r4
 8024206:	42b3      	cmp	r3, r6
 8024208:	dc00      	bgt.n	802420c <_printf_float+0x368>
 802420a:	e77c      	b.n	8024106 <_printf_float+0x262>
 802420c:	002a      	movs	r2, r5
 802420e:	2301      	movs	r3, #1
 8024210:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024214:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024216:	321a      	adds	r2, #26
 8024218:	47b8      	blx	r7
 802421a:	3001      	adds	r0, #1
 802421c:	d100      	bne.n	8024220 <_printf_float+0x37c>
 802421e:	e69d      	b.n	8023f5c <_printf_float+0xb8>
 8024220:	3601      	adds	r6, #1
 8024222:	e7ec      	b.n	80241fe <_printf_float+0x35a>
 8024224:	0033      	movs	r3, r6
 8024226:	003a      	movs	r2, r7
 8024228:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802422a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802422c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802422e:	47a0      	blx	r4
 8024230:	3001      	adds	r0, #1
 8024232:	d1c5      	bne.n	80241c0 <_printf_float+0x31c>
 8024234:	e692      	b.n	8023f5c <_printf_float+0xb8>
 8024236:	002a      	movs	r2, r5
 8024238:	2301      	movs	r3, #1
 802423a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802423c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802423e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024240:	321a      	adds	r2, #26
 8024242:	47b0      	blx	r6
 8024244:	3001      	adds	r0, #1
 8024246:	d100      	bne.n	802424a <_printf_float+0x3a6>
 8024248:	e688      	b.n	8023f5c <_printf_float+0xb8>
 802424a:	3401      	adds	r4, #1
 802424c:	e7bd      	b.n	80241ca <_printf_float+0x326>
 802424e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024250:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024252:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024254:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024256:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024258:	47a0      	blx	r4
 802425a:	3001      	adds	r0, #1
 802425c:	d1c1      	bne.n	80241e2 <_printf_float+0x33e>
 802425e:	e67d      	b.n	8023f5c <_printf_float+0xb8>
 8024260:	19ba      	adds	r2, r7, r6
 8024262:	0023      	movs	r3, r4
 8024264:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024268:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802426a:	47b0      	blx	r6
 802426c:	3001      	adds	r0, #1
 802426e:	d1c2      	bne.n	80241f6 <_printf_float+0x352>
 8024270:	e674      	b.n	8023f5c <_printf_float+0xb8>
 8024272:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024274:	930c      	str	r3, [sp, #48]	@ 0x30
 8024276:	2b01      	cmp	r3, #1
 8024278:	dc02      	bgt.n	8024280 <_printf_float+0x3dc>
 802427a:	2301      	movs	r3, #1
 802427c:	421a      	tst	r2, r3
 802427e:	d039      	beq.n	80242f4 <_printf_float+0x450>
 8024280:	2301      	movs	r3, #1
 8024282:	003a      	movs	r2, r7
 8024284:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024288:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802428a:	47b0      	blx	r6
 802428c:	3001      	adds	r0, #1
 802428e:	d100      	bne.n	8024292 <_printf_float+0x3ee>
 8024290:	e664      	b.n	8023f5c <_printf_float+0xb8>
 8024292:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024294:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024296:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024298:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802429a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802429c:	47b0      	blx	r6
 802429e:	3001      	adds	r0, #1
 80242a0:	d100      	bne.n	80242a4 <_printf_float+0x400>
 80242a2:	e65b      	b.n	8023f5c <_printf_float+0xb8>
 80242a4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80242a6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80242a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80242aa:	2200      	movs	r2, #0
 80242ac:	3b01      	subs	r3, #1
 80242ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80242b0:	2300      	movs	r3, #0
 80242b2:	f7dc f8fd 	bl	80004b0 <__aeabi_dcmpeq>
 80242b6:	2800      	cmp	r0, #0
 80242b8:	d11a      	bne.n	80242f0 <_printf_float+0x44c>
 80242ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80242bc:	1c7a      	adds	r2, r7, #1
 80242be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80242c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80242c2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80242c4:	47b0      	blx	r6
 80242c6:	3001      	adds	r0, #1
 80242c8:	d10e      	bne.n	80242e8 <_printf_float+0x444>
 80242ca:	e647      	b.n	8023f5c <_printf_float+0xb8>
 80242cc:	002a      	movs	r2, r5
 80242ce:	2301      	movs	r3, #1
 80242d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80242d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80242d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80242d6:	321a      	adds	r2, #26
 80242d8:	47b8      	blx	r7
 80242da:	3001      	adds	r0, #1
 80242dc:	d100      	bne.n	80242e0 <_printf_float+0x43c>
 80242de:	e63d      	b.n	8023f5c <_printf_float+0xb8>
 80242e0:	3601      	adds	r6, #1
 80242e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80242e4:	429e      	cmp	r6, r3
 80242e6:	dbf1      	blt.n	80242cc <_printf_float+0x428>
 80242e8:	002a      	movs	r2, r5
 80242ea:	0023      	movs	r3, r4
 80242ec:	3250      	adds	r2, #80	@ 0x50
 80242ee:	e6da      	b.n	80240a6 <_printf_float+0x202>
 80242f0:	2600      	movs	r6, #0
 80242f2:	e7f6      	b.n	80242e2 <_printf_float+0x43e>
 80242f4:	003a      	movs	r2, r7
 80242f6:	e7e2      	b.n	80242be <_printf_float+0x41a>
 80242f8:	002a      	movs	r2, r5
 80242fa:	2301      	movs	r3, #1
 80242fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80242fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024300:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024302:	3219      	adds	r2, #25
 8024304:	47b0      	blx	r6
 8024306:	3001      	adds	r0, #1
 8024308:	d100      	bne.n	802430c <_printf_float+0x468>
 802430a:	e627      	b.n	8023f5c <_printf_float+0xb8>
 802430c:	3401      	adds	r4, #1
 802430e:	68eb      	ldr	r3, [r5, #12]
 8024310:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024312:	1a9b      	subs	r3, r3, r2
 8024314:	42a3      	cmp	r3, r4
 8024316:	dcef      	bgt.n	80242f8 <_printf_float+0x454>
 8024318:	e6f9      	b.n	802410e <_printf_float+0x26a>
 802431a:	2400      	movs	r4, #0
 802431c:	e7f7      	b.n	802430e <_printf_float+0x46a>
 802431e:	46c0      	nop			@ (mov r8, r8)

08024320 <_printf_common>:
 8024320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024322:	0016      	movs	r6, r2
 8024324:	9301      	str	r3, [sp, #4]
 8024326:	688a      	ldr	r2, [r1, #8]
 8024328:	690b      	ldr	r3, [r1, #16]
 802432a:	000c      	movs	r4, r1
 802432c:	9000      	str	r0, [sp, #0]
 802432e:	4293      	cmp	r3, r2
 8024330:	da00      	bge.n	8024334 <_printf_common+0x14>
 8024332:	0013      	movs	r3, r2
 8024334:	0022      	movs	r2, r4
 8024336:	6033      	str	r3, [r6, #0]
 8024338:	3243      	adds	r2, #67	@ 0x43
 802433a:	7812      	ldrb	r2, [r2, #0]
 802433c:	2a00      	cmp	r2, #0
 802433e:	d001      	beq.n	8024344 <_printf_common+0x24>
 8024340:	3301      	adds	r3, #1
 8024342:	6033      	str	r3, [r6, #0]
 8024344:	6823      	ldr	r3, [r4, #0]
 8024346:	069b      	lsls	r3, r3, #26
 8024348:	d502      	bpl.n	8024350 <_printf_common+0x30>
 802434a:	6833      	ldr	r3, [r6, #0]
 802434c:	3302      	adds	r3, #2
 802434e:	6033      	str	r3, [r6, #0]
 8024350:	6822      	ldr	r2, [r4, #0]
 8024352:	2306      	movs	r3, #6
 8024354:	0015      	movs	r5, r2
 8024356:	401d      	ands	r5, r3
 8024358:	421a      	tst	r2, r3
 802435a:	d027      	beq.n	80243ac <_printf_common+0x8c>
 802435c:	0023      	movs	r3, r4
 802435e:	3343      	adds	r3, #67	@ 0x43
 8024360:	781b      	ldrb	r3, [r3, #0]
 8024362:	1e5a      	subs	r2, r3, #1
 8024364:	4193      	sbcs	r3, r2
 8024366:	6822      	ldr	r2, [r4, #0]
 8024368:	0692      	lsls	r2, r2, #26
 802436a:	d430      	bmi.n	80243ce <_printf_common+0xae>
 802436c:	0022      	movs	r2, r4
 802436e:	9901      	ldr	r1, [sp, #4]
 8024370:	9800      	ldr	r0, [sp, #0]
 8024372:	9d08      	ldr	r5, [sp, #32]
 8024374:	3243      	adds	r2, #67	@ 0x43
 8024376:	47a8      	blx	r5
 8024378:	3001      	adds	r0, #1
 802437a:	d025      	beq.n	80243c8 <_printf_common+0xa8>
 802437c:	2206      	movs	r2, #6
 802437e:	6823      	ldr	r3, [r4, #0]
 8024380:	2500      	movs	r5, #0
 8024382:	4013      	ands	r3, r2
 8024384:	2b04      	cmp	r3, #4
 8024386:	d105      	bne.n	8024394 <_printf_common+0x74>
 8024388:	6833      	ldr	r3, [r6, #0]
 802438a:	68e5      	ldr	r5, [r4, #12]
 802438c:	1aed      	subs	r5, r5, r3
 802438e:	43eb      	mvns	r3, r5
 8024390:	17db      	asrs	r3, r3, #31
 8024392:	401d      	ands	r5, r3
 8024394:	68a3      	ldr	r3, [r4, #8]
 8024396:	6922      	ldr	r2, [r4, #16]
 8024398:	4293      	cmp	r3, r2
 802439a:	dd01      	ble.n	80243a0 <_printf_common+0x80>
 802439c:	1a9b      	subs	r3, r3, r2
 802439e:	18ed      	adds	r5, r5, r3
 80243a0:	2600      	movs	r6, #0
 80243a2:	42b5      	cmp	r5, r6
 80243a4:	d120      	bne.n	80243e8 <_printf_common+0xc8>
 80243a6:	2000      	movs	r0, #0
 80243a8:	e010      	b.n	80243cc <_printf_common+0xac>
 80243aa:	3501      	adds	r5, #1
 80243ac:	68e3      	ldr	r3, [r4, #12]
 80243ae:	6832      	ldr	r2, [r6, #0]
 80243b0:	1a9b      	subs	r3, r3, r2
 80243b2:	42ab      	cmp	r3, r5
 80243b4:	ddd2      	ble.n	802435c <_printf_common+0x3c>
 80243b6:	0022      	movs	r2, r4
 80243b8:	2301      	movs	r3, #1
 80243ba:	9901      	ldr	r1, [sp, #4]
 80243bc:	9800      	ldr	r0, [sp, #0]
 80243be:	9f08      	ldr	r7, [sp, #32]
 80243c0:	3219      	adds	r2, #25
 80243c2:	47b8      	blx	r7
 80243c4:	3001      	adds	r0, #1
 80243c6:	d1f0      	bne.n	80243aa <_printf_common+0x8a>
 80243c8:	2001      	movs	r0, #1
 80243ca:	4240      	negs	r0, r0
 80243cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80243ce:	2030      	movs	r0, #48	@ 0x30
 80243d0:	18e1      	adds	r1, r4, r3
 80243d2:	3143      	adds	r1, #67	@ 0x43
 80243d4:	7008      	strb	r0, [r1, #0]
 80243d6:	0021      	movs	r1, r4
 80243d8:	1c5a      	adds	r2, r3, #1
 80243da:	3145      	adds	r1, #69	@ 0x45
 80243dc:	7809      	ldrb	r1, [r1, #0]
 80243de:	18a2      	adds	r2, r4, r2
 80243e0:	3243      	adds	r2, #67	@ 0x43
 80243e2:	3302      	adds	r3, #2
 80243e4:	7011      	strb	r1, [r2, #0]
 80243e6:	e7c1      	b.n	802436c <_printf_common+0x4c>
 80243e8:	0022      	movs	r2, r4
 80243ea:	2301      	movs	r3, #1
 80243ec:	9901      	ldr	r1, [sp, #4]
 80243ee:	9800      	ldr	r0, [sp, #0]
 80243f0:	9f08      	ldr	r7, [sp, #32]
 80243f2:	321a      	adds	r2, #26
 80243f4:	47b8      	blx	r7
 80243f6:	3001      	adds	r0, #1
 80243f8:	d0e6      	beq.n	80243c8 <_printf_common+0xa8>
 80243fa:	3601      	adds	r6, #1
 80243fc:	e7d1      	b.n	80243a2 <_printf_common+0x82>
	...

08024400 <_printf_i>:
 8024400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024402:	b08b      	sub	sp, #44	@ 0x2c
 8024404:	9206      	str	r2, [sp, #24]
 8024406:	000a      	movs	r2, r1
 8024408:	3243      	adds	r2, #67	@ 0x43
 802440a:	9307      	str	r3, [sp, #28]
 802440c:	9005      	str	r0, [sp, #20]
 802440e:	9203      	str	r2, [sp, #12]
 8024410:	7e0a      	ldrb	r2, [r1, #24]
 8024412:	000c      	movs	r4, r1
 8024414:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024416:	2a78      	cmp	r2, #120	@ 0x78
 8024418:	d809      	bhi.n	802442e <_printf_i+0x2e>
 802441a:	2a62      	cmp	r2, #98	@ 0x62
 802441c:	d80b      	bhi.n	8024436 <_printf_i+0x36>
 802441e:	2a00      	cmp	r2, #0
 8024420:	d100      	bne.n	8024424 <_printf_i+0x24>
 8024422:	e0bc      	b.n	802459e <_printf_i+0x19e>
 8024424:	497b      	ldr	r1, [pc, #492]	@ (8024614 <_printf_i+0x214>)
 8024426:	9104      	str	r1, [sp, #16]
 8024428:	2a58      	cmp	r2, #88	@ 0x58
 802442a:	d100      	bne.n	802442e <_printf_i+0x2e>
 802442c:	e090      	b.n	8024550 <_printf_i+0x150>
 802442e:	0025      	movs	r5, r4
 8024430:	3542      	adds	r5, #66	@ 0x42
 8024432:	702a      	strb	r2, [r5, #0]
 8024434:	e022      	b.n	802447c <_printf_i+0x7c>
 8024436:	0010      	movs	r0, r2
 8024438:	3863      	subs	r0, #99	@ 0x63
 802443a:	2815      	cmp	r0, #21
 802443c:	d8f7      	bhi.n	802442e <_printf_i+0x2e>
 802443e:	f7db fea7 	bl	8000190 <__gnu_thumb1_case_shi>
 8024442:	0016      	.short	0x0016
 8024444:	fff6001f 	.word	0xfff6001f
 8024448:	fff6fff6 	.word	0xfff6fff6
 802444c:	001ffff6 	.word	0x001ffff6
 8024450:	fff6fff6 	.word	0xfff6fff6
 8024454:	fff6fff6 	.word	0xfff6fff6
 8024458:	003600a1 	.word	0x003600a1
 802445c:	fff60080 	.word	0xfff60080
 8024460:	00b2fff6 	.word	0x00b2fff6
 8024464:	0036fff6 	.word	0x0036fff6
 8024468:	fff6fff6 	.word	0xfff6fff6
 802446c:	0084      	.short	0x0084
 802446e:	0025      	movs	r5, r4
 8024470:	681a      	ldr	r2, [r3, #0]
 8024472:	3542      	adds	r5, #66	@ 0x42
 8024474:	1d11      	adds	r1, r2, #4
 8024476:	6019      	str	r1, [r3, #0]
 8024478:	6813      	ldr	r3, [r2, #0]
 802447a:	702b      	strb	r3, [r5, #0]
 802447c:	2301      	movs	r3, #1
 802447e:	e0a0      	b.n	80245c2 <_printf_i+0x1c2>
 8024480:	6818      	ldr	r0, [r3, #0]
 8024482:	6809      	ldr	r1, [r1, #0]
 8024484:	1d02      	adds	r2, r0, #4
 8024486:	060d      	lsls	r5, r1, #24
 8024488:	d50b      	bpl.n	80244a2 <_printf_i+0xa2>
 802448a:	6806      	ldr	r6, [r0, #0]
 802448c:	601a      	str	r2, [r3, #0]
 802448e:	2e00      	cmp	r6, #0
 8024490:	da03      	bge.n	802449a <_printf_i+0x9a>
 8024492:	232d      	movs	r3, #45	@ 0x2d
 8024494:	9a03      	ldr	r2, [sp, #12]
 8024496:	4276      	negs	r6, r6
 8024498:	7013      	strb	r3, [r2, #0]
 802449a:	4b5e      	ldr	r3, [pc, #376]	@ (8024614 <_printf_i+0x214>)
 802449c:	270a      	movs	r7, #10
 802449e:	9304      	str	r3, [sp, #16]
 80244a0:	e018      	b.n	80244d4 <_printf_i+0xd4>
 80244a2:	6806      	ldr	r6, [r0, #0]
 80244a4:	601a      	str	r2, [r3, #0]
 80244a6:	0649      	lsls	r1, r1, #25
 80244a8:	d5f1      	bpl.n	802448e <_printf_i+0x8e>
 80244aa:	b236      	sxth	r6, r6
 80244ac:	e7ef      	b.n	802448e <_printf_i+0x8e>
 80244ae:	6808      	ldr	r0, [r1, #0]
 80244b0:	6819      	ldr	r1, [r3, #0]
 80244b2:	c940      	ldmia	r1!, {r6}
 80244b4:	0605      	lsls	r5, r0, #24
 80244b6:	d402      	bmi.n	80244be <_printf_i+0xbe>
 80244b8:	0640      	lsls	r0, r0, #25
 80244ba:	d500      	bpl.n	80244be <_printf_i+0xbe>
 80244bc:	b2b6      	uxth	r6, r6
 80244be:	6019      	str	r1, [r3, #0]
 80244c0:	4b54      	ldr	r3, [pc, #336]	@ (8024614 <_printf_i+0x214>)
 80244c2:	270a      	movs	r7, #10
 80244c4:	9304      	str	r3, [sp, #16]
 80244c6:	2a6f      	cmp	r2, #111	@ 0x6f
 80244c8:	d100      	bne.n	80244cc <_printf_i+0xcc>
 80244ca:	3f02      	subs	r7, #2
 80244cc:	0023      	movs	r3, r4
 80244ce:	2200      	movs	r2, #0
 80244d0:	3343      	adds	r3, #67	@ 0x43
 80244d2:	701a      	strb	r2, [r3, #0]
 80244d4:	6863      	ldr	r3, [r4, #4]
 80244d6:	60a3      	str	r3, [r4, #8]
 80244d8:	2b00      	cmp	r3, #0
 80244da:	db03      	blt.n	80244e4 <_printf_i+0xe4>
 80244dc:	2104      	movs	r1, #4
 80244de:	6822      	ldr	r2, [r4, #0]
 80244e0:	438a      	bics	r2, r1
 80244e2:	6022      	str	r2, [r4, #0]
 80244e4:	2e00      	cmp	r6, #0
 80244e6:	d102      	bne.n	80244ee <_printf_i+0xee>
 80244e8:	9d03      	ldr	r5, [sp, #12]
 80244ea:	2b00      	cmp	r3, #0
 80244ec:	d00c      	beq.n	8024508 <_printf_i+0x108>
 80244ee:	9d03      	ldr	r5, [sp, #12]
 80244f0:	0030      	movs	r0, r6
 80244f2:	0039      	movs	r1, r7
 80244f4:	f7db fedc 	bl	80002b0 <__aeabi_uidivmod>
 80244f8:	9b04      	ldr	r3, [sp, #16]
 80244fa:	3d01      	subs	r5, #1
 80244fc:	5c5b      	ldrb	r3, [r3, r1]
 80244fe:	702b      	strb	r3, [r5, #0]
 8024500:	0033      	movs	r3, r6
 8024502:	0006      	movs	r6, r0
 8024504:	429f      	cmp	r7, r3
 8024506:	d9f3      	bls.n	80244f0 <_printf_i+0xf0>
 8024508:	2f08      	cmp	r7, #8
 802450a:	d109      	bne.n	8024520 <_printf_i+0x120>
 802450c:	6823      	ldr	r3, [r4, #0]
 802450e:	07db      	lsls	r3, r3, #31
 8024510:	d506      	bpl.n	8024520 <_printf_i+0x120>
 8024512:	6862      	ldr	r2, [r4, #4]
 8024514:	6923      	ldr	r3, [r4, #16]
 8024516:	429a      	cmp	r2, r3
 8024518:	dc02      	bgt.n	8024520 <_printf_i+0x120>
 802451a:	2330      	movs	r3, #48	@ 0x30
 802451c:	3d01      	subs	r5, #1
 802451e:	702b      	strb	r3, [r5, #0]
 8024520:	9b03      	ldr	r3, [sp, #12]
 8024522:	1b5b      	subs	r3, r3, r5
 8024524:	6123      	str	r3, [r4, #16]
 8024526:	9b07      	ldr	r3, [sp, #28]
 8024528:	0021      	movs	r1, r4
 802452a:	9300      	str	r3, [sp, #0]
 802452c:	9805      	ldr	r0, [sp, #20]
 802452e:	9b06      	ldr	r3, [sp, #24]
 8024530:	aa09      	add	r2, sp, #36	@ 0x24
 8024532:	f7ff fef5 	bl	8024320 <_printf_common>
 8024536:	3001      	adds	r0, #1
 8024538:	d148      	bne.n	80245cc <_printf_i+0x1cc>
 802453a:	2001      	movs	r0, #1
 802453c:	4240      	negs	r0, r0
 802453e:	b00b      	add	sp, #44	@ 0x2c
 8024540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024542:	2220      	movs	r2, #32
 8024544:	6809      	ldr	r1, [r1, #0]
 8024546:	430a      	orrs	r2, r1
 8024548:	6022      	str	r2, [r4, #0]
 802454a:	2278      	movs	r2, #120	@ 0x78
 802454c:	4932      	ldr	r1, [pc, #200]	@ (8024618 <_printf_i+0x218>)
 802454e:	9104      	str	r1, [sp, #16]
 8024550:	0021      	movs	r1, r4
 8024552:	3145      	adds	r1, #69	@ 0x45
 8024554:	700a      	strb	r2, [r1, #0]
 8024556:	6819      	ldr	r1, [r3, #0]
 8024558:	6822      	ldr	r2, [r4, #0]
 802455a:	c940      	ldmia	r1!, {r6}
 802455c:	0610      	lsls	r0, r2, #24
 802455e:	d402      	bmi.n	8024566 <_printf_i+0x166>
 8024560:	0650      	lsls	r0, r2, #25
 8024562:	d500      	bpl.n	8024566 <_printf_i+0x166>
 8024564:	b2b6      	uxth	r6, r6
 8024566:	6019      	str	r1, [r3, #0]
 8024568:	07d3      	lsls	r3, r2, #31
 802456a:	d502      	bpl.n	8024572 <_printf_i+0x172>
 802456c:	2320      	movs	r3, #32
 802456e:	4313      	orrs	r3, r2
 8024570:	6023      	str	r3, [r4, #0]
 8024572:	2e00      	cmp	r6, #0
 8024574:	d001      	beq.n	802457a <_printf_i+0x17a>
 8024576:	2710      	movs	r7, #16
 8024578:	e7a8      	b.n	80244cc <_printf_i+0xcc>
 802457a:	2220      	movs	r2, #32
 802457c:	6823      	ldr	r3, [r4, #0]
 802457e:	4393      	bics	r3, r2
 8024580:	6023      	str	r3, [r4, #0]
 8024582:	e7f8      	b.n	8024576 <_printf_i+0x176>
 8024584:	681a      	ldr	r2, [r3, #0]
 8024586:	680d      	ldr	r5, [r1, #0]
 8024588:	1d10      	adds	r0, r2, #4
 802458a:	6949      	ldr	r1, [r1, #20]
 802458c:	6018      	str	r0, [r3, #0]
 802458e:	6813      	ldr	r3, [r2, #0]
 8024590:	062e      	lsls	r6, r5, #24
 8024592:	d501      	bpl.n	8024598 <_printf_i+0x198>
 8024594:	6019      	str	r1, [r3, #0]
 8024596:	e002      	b.n	802459e <_printf_i+0x19e>
 8024598:	066d      	lsls	r5, r5, #25
 802459a:	d5fb      	bpl.n	8024594 <_printf_i+0x194>
 802459c:	8019      	strh	r1, [r3, #0]
 802459e:	2300      	movs	r3, #0
 80245a0:	9d03      	ldr	r5, [sp, #12]
 80245a2:	6123      	str	r3, [r4, #16]
 80245a4:	e7bf      	b.n	8024526 <_printf_i+0x126>
 80245a6:	681a      	ldr	r2, [r3, #0]
 80245a8:	1d11      	adds	r1, r2, #4
 80245aa:	6019      	str	r1, [r3, #0]
 80245ac:	6815      	ldr	r5, [r2, #0]
 80245ae:	2100      	movs	r1, #0
 80245b0:	0028      	movs	r0, r5
 80245b2:	6862      	ldr	r2, [r4, #4]
 80245b4:	f000 fb9d 	bl	8024cf2 <memchr>
 80245b8:	2800      	cmp	r0, #0
 80245ba:	d001      	beq.n	80245c0 <_printf_i+0x1c0>
 80245bc:	1b40      	subs	r0, r0, r5
 80245be:	6060      	str	r0, [r4, #4]
 80245c0:	6863      	ldr	r3, [r4, #4]
 80245c2:	6123      	str	r3, [r4, #16]
 80245c4:	2300      	movs	r3, #0
 80245c6:	9a03      	ldr	r2, [sp, #12]
 80245c8:	7013      	strb	r3, [r2, #0]
 80245ca:	e7ac      	b.n	8024526 <_printf_i+0x126>
 80245cc:	002a      	movs	r2, r5
 80245ce:	6923      	ldr	r3, [r4, #16]
 80245d0:	9906      	ldr	r1, [sp, #24]
 80245d2:	9805      	ldr	r0, [sp, #20]
 80245d4:	9d07      	ldr	r5, [sp, #28]
 80245d6:	47a8      	blx	r5
 80245d8:	3001      	adds	r0, #1
 80245da:	d0ae      	beq.n	802453a <_printf_i+0x13a>
 80245dc:	6823      	ldr	r3, [r4, #0]
 80245de:	079b      	lsls	r3, r3, #30
 80245e0:	d415      	bmi.n	802460e <_printf_i+0x20e>
 80245e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80245e4:	68e0      	ldr	r0, [r4, #12]
 80245e6:	4298      	cmp	r0, r3
 80245e8:	daa9      	bge.n	802453e <_printf_i+0x13e>
 80245ea:	0018      	movs	r0, r3
 80245ec:	e7a7      	b.n	802453e <_printf_i+0x13e>
 80245ee:	0022      	movs	r2, r4
 80245f0:	2301      	movs	r3, #1
 80245f2:	9906      	ldr	r1, [sp, #24]
 80245f4:	9805      	ldr	r0, [sp, #20]
 80245f6:	9e07      	ldr	r6, [sp, #28]
 80245f8:	3219      	adds	r2, #25
 80245fa:	47b0      	blx	r6
 80245fc:	3001      	adds	r0, #1
 80245fe:	d09c      	beq.n	802453a <_printf_i+0x13a>
 8024600:	3501      	adds	r5, #1
 8024602:	68e3      	ldr	r3, [r4, #12]
 8024604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024606:	1a9b      	subs	r3, r3, r2
 8024608:	42ab      	cmp	r3, r5
 802460a:	dcf0      	bgt.n	80245ee <_printf_i+0x1ee>
 802460c:	e7e9      	b.n	80245e2 <_printf_i+0x1e2>
 802460e:	2500      	movs	r5, #0
 8024610:	e7f7      	b.n	8024602 <_printf_i+0x202>
 8024612:	46c0      	nop			@ (mov r8, r8)
 8024614:	0802d343 	.word	0x0802d343
 8024618:	0802d354 	.word	0x0802d354

0802461c <std>:
 802461c:	2300      	movs	r3, #0
 802461e:	b510      	push	{r4, lr}
 8024620:	0004      	movs	r4, r0
 8024622:	6003      	str	r3, [r0, #0]
 8024624:	6043      	str	r3, [r0, #4]
 8024626:	6083      	str	r3, [r0, #8]
 8024628:	8181      	strh	r1, [r0, #12]
 802462a:	6643      	str	r3, [r0, #100]	@ 0x64
 802462c:	81c2      	strh	r2, [r0, #14]
 802462e:	6103      	str	r3, [r0, #16]
 8024630:	6143      	str	r3, [r0, #20]
 8024632:	6183      	str	r3, [r0, #24]
 8024634:	0019      	movs	r1, r3
 8024636:	2208      	movs	r2, #8
 8024638:	305c      	adds	r0, #92	@ 0x5c
 802463a:	f000 fa89 	bl	8024b50 <memset>
 802463e:	4b0b      	ldr	r3, [pc, #44]	@ (802466c <std+0x50>)
 8024640:	6224      	str	r4, [r4, #32]
 8024642:	6263      	str	r3, [r4, #36]	@ 0x24
 8024644:	4b0a      	ldr	r3, [pc, #40]	@ (8024670 <std+0x54>)
 8024646:	62a3      	str	r3, [r4, #40]	@ 0x28
 8024648:	4b0a      	ldr	r3, [pc, #40]	@ (8024674 <std+0x58>)
 802464a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802464c:	4b0a      	ldr	r3, [pc, #40]	@ (8024678 <std+0x5c>)
 802464e:	6323      	str	r3, [r4, #48]	@ 0x30
 8024650:	4b0a      	ldr	r3, [pc, #40]	@ (802467c <std+0x60>)
 8024652:	429c      	cmp	r4, r3
 8024654:	d005      	beq.n	8024662 <std+0x46>
 8024656:	4b0a      	ldr	r3, [pc, #40]	@ (8024680 <std+0x64>)
 8024658:	429c      	cmp	r4, r3
 802465a:	d002      	beq.n	8024662 <std+0x46>
 802465c:	4b09      	ldr	r3, [pc, #36]	@ (8024684 <std+0x68>)
 802465e:	429c      	cmp	r4, r3
 8024660:	d103      	bne.n	802466a <std+0x4e>
 8024662:	0020      	movs	r0, r4
 8024664:	3058      	adds	r0, #88	@ 0x58
 8024666:	f000 fb41 	bl	8024cec <__retarget_lock_init_recursive>
 802466a:	bd10      	pop	{r4, pc}
 802466c:	080248c5 	.word	0x080248c5
 8024670:	080248ed 	.word	0x080248ed
 8024674:	08024925 	.word	0x08024925
 8024678:	08024951 	.word	0x08024951
 802467c:	200034fc 	.word	0x200034fc
 8024680:	20003564 	.word	0x20003564
 8024684:	200035cc 	.word	0x200035cc

08024688 <stdio_exit_handler>:
 8024688:	b510      	push	{r4, lr}
 802468a:	4a03      	ldr	r2, [pc, #12]	@ (8024698 <stdio_exit_handler+0x10>)
 802468c:	4903      	ldr	r1, [pc, #12]	@ (802469c <stdio_exit_handler+0x14>)
 802468e:	4804      	ldr	r0, [pc, #16]	@ (80246a0 <stdio_exit_handler+0x18>)
 8024690:	f000 f86c 	bl	802476c <_fwalk_sglue>
 8024694:	bd10      	pop	{r4, pc}
 8024696:	46c0      	nop			@ (mov r8, r8)
 8024698:	20000268 	.word	0x20000268
 802469c:	08027311 	.word	0x08027311
 80246a0:	200003e4 	.word	0x200003e4

080246a4 <cleanup_stdio>:
 80246a4:	6841      	ldr	r1, [r0, #4]
 80246a6:	4b0b      	ldr	r3, [pc, #44]	@ (80246d4 <cleanup_stdio+0x30>)
 80246a8:	b510      	push	{r4, lr}
 80246aa:	0004      	movs	r4, r0
 80246ac:	4299      	cmp	r1, r3
 80246ae:	d001      	beq.n	80246b4 <cleanup_stdio+0x10>
 80246b0:	f002 fe2e 	bl	8027310 <_fflush_r>
 80246b4:	68a1      	ldr	r1, [r4, #8]
 80246b6:	4b08      	ldr	r3, [pc, #32]	@ (80246d8 <cleanup_stdio+0x34>)
 80246b8:	4299      	cmp	r1, r3
 80246ba:	d002      	beq.n	80246c2 <cleanup_stdio+0x1e>
 80246bc:	0020      	movs	r0, r4
 80246be:	f002 fe27 	bl	8027310 <_fflush_r>
 80246c2:	68e1      	ldr	r1, [r4, #12]
 80246c4:	4b05      	ldr	r3, [pc, #20]	@ (80246dc <cleanup_stdio+0x38>)
 80246c6:	4299      	cmp	r1, r3
 80246c8:	d002      	beq.n	80246d0 <cleanup_stdio+0x2c>
 80246ca:	0020      	movs	r0, r4
 80246cc:	f002 fe20 	bl	8027310 <_fflush_r>
 80246d0:	bd10      	pop	{r4, pc}
 80246d2:	46c0      	nop			@ (mov r8, r8)
 80246d4:	200034fc 	.word	0x200034fc
 80246d8:	20003564 	.word	0x20003564
 80246dc:	200035cc 	.word	0x200035cc

080246e0 <global_stdio_init.part.0>:
 80246e0:	b510      	push	{r4, lr}
 80246e2:	4b09      	ldr	r3, [pc, #36]	@ (8024708 <global_stdio_init.part.0+0x28>)
 80246e4:	4a09      	ldr	r2, [pc, #36]	@ (802470c <global_stdio_init.part.0+0x2c>)
 80246e6:	2104      	movs	r1, #4
 80246e8:	601a      	str	r2, [r3, #0]
 80246ea:	4809      	ldr	r0, [pc, #36]	@ (8024710 <global_stdio_init.part.0+0x30>)
 80246ec:	2200      	movs	r2, #0
 80246ee:	f7ff ff95 	bl	802461c <std>
 80246f2:	2201      	movs	r2, #1
 80246f4:	2109      	movs	r1, #9
 80246f6:	4807      	ldr	r0, [pc, #28]	@ (8024714 <global_stdio_init.part.0+0x34>)
 80246f8:	f7ff ff90 	bl	802461c <std>
 80246fc:	2202      	movs	r2, #2
 80246fe:	2112      	movs	r1, #18
 8024700:	4805      	ldr	r0, [pc, #20]	@ (8024718 <global_stdio_init.part.0+0x38>)
 8024702:	f7ff ff8b 	bl	802461c <std>
 8024706:	bd10      	pop	{r4, pc}
 8024708:	20003634 	.word	0x20003634
 802470c:	08024689 	.word	0x08024689
 8024710:	200034fc 	.word	0x200034fc
 8024714:	20003564 	.word	0x20003564
 8024718:	200035cc 	.word	0x200035cc

0802471c <__sfp_lock_acquire>:
 802471c:	b510      	push	{r4, lr}
 802471e:	4802      	ldr	r0, [pc, #8]	@ (8024728 <__sfp_lock_acquire+0xc>)
 8024720:	f000 fae5 	bl	8024cee <__retarget_lock_acquire_recursive>
 8024724:	bd10      	pop	{r4, pc}
 8024726:	46c0      	nop			@ (mov r8, r8)
 8024728:	2000363d 	.word	0x2000363d

0802472c <__sfp_lock_release>:
 802472c:	b510      	push	{r4, lr}
 802472e:	4802      	ldr	r0, [pc, #8]	@ (8024738 <__sfp_lock_release+0xc>)
 8024730:	f000 fade 	bl	8024cf0 <__retarget_lock_release_recursive>
 8024734:	bd10      	pop	{r4, pc}
 8024736:	46c0      	nop			@ (mov r8, r8)
 8024738:	2000363d 	.word	0x2000363d

0802473c <__sinit>:
 802473c:	b510      	push	{r4, lr}
 802473e:	0004      	movs	r4, r0
 8024740:	f7ff ffec 	bl	802471c <__sfp_lock_acquire>
 8024744:	6a23      	ldr	r3, [r4, #32]
 8024746:	2b00      	cmp	r3, #0
 8024748:	d002      	beq.n	8024750 <__sinit+0x14>
 802474a:	f7ff ffef 	bl	802472c <__sfp_lock_release>
 802474e:	bd10      	pop	{r4, pc}
 8024750:	4b04      	ldr	r3, [pc, #16]	@ (8024764 <__sinit+0x28>)
 8024752:	6223      	str	r3, [r4, #32]
 8024754:	4b04      	ldr	r3, [pc, #16]	@ (8024768 <__sinit+0x2c>)
 8024756:	681b      	ldr	r3, [r3, #0]
 8024758:	2b00      	cmp	r3, #0
 802475a:	d1f6      	bne.n	802474a <__sinit+0xe>
 802475c:	f7ff ffc0 	bl	80246e0 <global_stdio_init.part.0>
 8024760:	e7f3      	b.n	802474a <__sinit+0xe>
 8024762:	46c0      	nop			@ (mov r8, r8)
 8024764:	080246a5 	.word	0x080246a5
 8024768:	20003634 	.word	0x20003634

0802476c <_fwalk_sglue>:
 802476c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802476e:	0014      	movs	r4, r2
 8024770:	2600      	movs	r6, #0
 8024772:	9000      	str	r0, [sp, #0]
 8024774:	9101      	str	r1, [sp, #4]
 8024776:	68a5      	ldr	r5, [r4, #8]
 8024778:	6867      	ldr	r7, [r4, #4]
 802477a:	3f01      	subs	r7, #1
 802477c:	d504      	bpl.n	8024788 <_fwalk_sglue+0x1c>
 802477e:	6824      	ldr	r4, [r4, #0]
 8024780:	2c00      	cmp	r4, #0
 8024782:	d1f8      	bne.n	8024776 <_fwalk_sglue+0xa>
 8024784:	0030      	movs	r0, r6
 8024786:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024788:	89ab      	ldrh	r3, [r5, #12]
 802478a:	2b01      	cmp	r3, #1
 802478c:	d908      	bls.n	80247a0 <_fwalk_sglue+0x34>
 802478e:	220e      	movs	r2, #14
 8024790:	5eab      	ldrsh	r3, [r5, r2]
 8024792:	3301      	adds	r3, #1
 8024794:	d004      	beq.n	80247a0 <_fwalk_sglue+0x34>
 8024796:	0029      	movs	r1, r5
 8024798:	9800      	ldr	r0, [sp, #0]
 802479a:	9b01      	ldr	r3, [sp, #4]
 802479c:	4798      	blx	r3
 802479e:	4306      	orrs	r6, r0
 80247a0:	3568      	adds	r5, #104	@ 0x68
 80247a2:	e7ea      	b.n	802477a <_fwalk_sglue+0xe>

080247a4 <iprintf>:
 80247a4:	b40f      	push	{r0, r1, r2, r3}
 80247a6:	b507      	push	{r0, r1, r2, lr}
 80247a8:	4905      	ldr	r1, [pc, #20]	@ (80247c0 <iprintf+0x1c>)
 80247aa:	ab04      	add	r3, sp, #16
 80247ac:	6808      	ldr	r0, [r1, #0]
 80247ae:	cb04      	ldmia	r3!, {r2}
 80247b0:	6881      	ldr	r1, [r0, #8]
 80247b2:	9301      	str	r3, [sp, #4]
 80247b4:	f002 fc0a 	bl	8026fcc <_vfiprintf_r>
 80247b8:	b003      	add	sp, #12
 80247ba:	bc08      	pop	{r3}
 80247bc:	b004      	add	sp, #16
 80247be:	4718      	bx	r3
 80247c0:	200003e0 	.word	0x200003e0

080247c4 <_puts_r>:
 80247c4:	6a03      	ldr	r3, [r0, #32]
 80247c6:	b570      	push	{r4, r5, r6, lr}
 80247c8:	0005      	movs	r5, r0
 80247ca:	000e      	movs	r6, r1
 80247cc:	6884      	ldr	r4, [r0, #8]
 80247ce:	2b00      	cmp	r3, #0
 80247d0:	d101      	bne.n	80247d6 <_puts_r+0x12>
 80247d2:	f7ff ffb3 	bl	802473c <__sinit>
 80247d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80247d8:	07db      	lsls	r3, r3, #31
 80247da:	d405      	bmi.n	80247e8 <_puts_r+0x24>
 80247dc:	89a3      	ldrh	r3, [r4, #12]
 80247de:	059b      	lsls	r3, r3, #22
 80247e0:	d402      	bmi.n	80247e8 <_puts_r+0x24>
 80247e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80247e4:	f000 fa83 	bl	8024cee <__retarget_lock_acquire_recursive>
 80247e8:	89a3      	ldrh	r3, [r4, #12]
 80247ea:	071b      	lsls	r3, r3, #28
 80247ec:	d502      	bpl.n	80247f4 <_puts_r+0x30>
 80247ee:	6923      	ldr	r3, [r4, #16]
 80247f0:	2b00      	cmp	r3, #0
 80247f2:	d11f      	bne.n	8024834 <_puts_r+0x70>
 80247f4:	0021      	movs	r1, r4
 80247f6:	0028      	movs	r0, r5
 80247f8:	f000 f94c 	bl	8024a94 <__swsetup_r>
 80247fc:	2800      	cmp	r0, #0
 80247fe:	d019      	beq.n	8024834 <_puts_r+0x70>
 8024800:	2501      	movs	r5, #1
 8024802:	426d      	negs	r5, r5
 8024804:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024806:	07db      	lsls	r3, r3, #31
 8024808:	d405      	bmi.n	8024816 <_puts_r+0x52>
 802480a:	89a3      	ldrh	r3, [r4, #12]
 802480c:	059b      	lsls	r3, r3, #22
 802480e:	d402      	bmi.n	8024816 <_puts_r+0x52>
 8024810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024812:	f000 fa6d 	bl	8024cf0 <__retarget_lock_release_recursive>
 8024816:	0028      	movs	r0, r5
 8024818:	bd70      	pop	{r4, r5, r6, pc}
 802481a:	3601      	adds	r6, #1
 802481c:	60a3      	str	r3, [r4, #8]
 802481e:	2b00      	cmp	r3, #0
 8024820:	da04      	bge.n	802482c <_puts_r+0x68>
 8024822:	69a2      	ldr	r2, [r4, #24]
 8024824:	429a      	cmp	r2, r3
 8024826:	dc16      	bgt.n	8024856 <_puts_r+0x92>
 8024828:	290a      	cmp	r1, #10
 802482a:	d014      	beq.n	8024856 <_puts_r+0x92>
 802482c:	6823      	ldr	r3, [r4, #0]
 802482e:	1c5a      	adds	r2, r3, #1
 8024830:	6022      	str	r2, [r4, #0]
 8024832:	7019      	strb	r1, [r3, #0]
 8024834:	68a3      	ldr	r3, [r4, #8]
 8024836:	7831      	ldrb	r1, [r6, #0]
 8024838:	3b01      	subs	r3, #1
 802483a:	2900      	cmp	r1, #0
 802483c:	d1ed      	bne.n	802481a <_puts_r+0x56>
 802483e:	60a3      	str	r3, [r4, #8]
 8024840:	2b00      	cmp	r3, #0
 8024842:	da0f      	bge.n	8024864 <_puts_r+0xa0>
 8024844:	0022      	movs	r2, r4
 8024846:	0028      	movs	r0, r5
 8024848:	310a      	adds	r1, #10
 802484a:	f000 f8e1 	bl	8024a10 <__swbuf_r>
 802484e:	3001      	adds	r0, #1
 8024850:	d0d6      	beq.n	8024800 <_puts_r+0x3c>
 8024852:	250a      	movs	r5, #10
 8024854:	e7d6      	b.n	8024804 <_puts_r+0x40>
 8024856:	0022      	movs	r2, r4
 8024858:	0028      	movs	r0, r5
 802485a:	f000 f8d9 	bl	8024a10 <__swbuf_r>
 802485e:	3001      	adds	r0, #1
 8024860:	d1e8      	bne.n	8024834 <_puts_r+0x70>
 8024862:	e7cd      	b.n	8024800 <_puts_r+0x3c>
 8024864:	6823      	ldr	r3, [r4, #0]
 8024866:	1c5a      	adds	r2, r3, #1
 8024868:	6022      	str	r2, [r4, #0]
 802486a:	220a      	movs	r2, #10
 802486c:	701a      	strb	r2, [r3, #0]
 802486e:	e7f0      	b.n	8024852 <_puts_r+0x8e>

08024870 <puts>:
 8024870:	b510      	push	{r4, lr}
 8024872:	4b03      	ldr	r3, [pc, #12]	@ (8024880 <puts+0x10>)
 8024874:	0001      	movs	r1, r0
 8024876:	6818      	ldr	r0, [r3, #0]
 8024878:	f7ff ffa4 	bl	80247c4 <_puts_r>
 802487c:	bd10      	pop	{r4, pc}
 802487e:	46c0      	nop			@ (mov r8, r8)
 8024880:	200003e0 	.word	0x200003e0

08024884 <siprintf>:
 8024884:	b40e      	push	{r1, r2, r3}
 8024886:	b500      	push	{lr}
 8024888:	490b      	ldr	r1, [pc, #44]	@ (80248b8 <siprintf+0x34>)
 802488a:	b09c      	sub	sp, #112	@ 0x70
 802488c:	ab1d      	add	r3, sp, #116	@ 0x74
 802488e:	9002      	str	r0, [sp, #8]
 8024890:	9006      	str	r0, [sp, #24]
 8024892:	9107      	str	r1, [sp, #28]
 8024894:	9104      	str	r1, [sp, #16]
 8024896:	4809      	ldr	r0, [pc, #36]	@ (80248bc <siprintf+0x38>)
 8024898:	4909      	ldr	r1, [pc, #36]	@ (80248c0 <siprintf+0x3c>)
 802489a:	cb04      	ldmia	r3!, {r2}
 802489c:	9105      	str	r1, [sp, #20]
 802489e:	6800      	ldr	r0, [r0, #0]
 80248a0:	a902      	add	r1, sp, #8
 80248a2:	9301      	str	r3, [sp, #4]
 80248a4:	f002 fa6c 	bl	8026d80 <_svfiprintf_r>
 80248a8:	2200      	movs	r2, #0
 80248aa:	9b02      	ldr	r3, [sp, #8]
 80248ac:	701a      	strb	r2, [r3, #0]
 80248ae:	b01c      	add	sp, #112	@ 0x70
 80248b0:	bc08      	pop	{r3}
 80248b2:	b003      	add	sp, #12
 80248b4:	4718      	bx	r3
 80248b6:	46c0      	nop			@ (mov r8, r8)
 80248b8:	7fffffff 	.word	0x7fffffff
 80248bc:	200003e0 	.word	0x200003e0
 80248c0:	ffff0208 	.word	0xffff0208

080248c4 <__sread>:
 80248c4:	b570      	push	{r4, r5, r6, lr}
 80248c6:	000c      	movs	r4, r1
 80248c8:	250e      	movs	r5, #14
 80248ca:	5f49      	ldrsh	r1, [r1, r5]
 80248cc:	f000 f9bc 	bl	8024c48 <_read_r>
 80248d0:	2800      	cmp	r0, #0
 80248d2:	db03      	blt.n	80248dc <__sread+0x18>
 80248d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80248d6:	181b      	adds	r3, r3, r0
 80248d8:	6563      	str	r3, [r4, #84]	@ 0x54
 80248da:	bd70      	pop	{r4, r5, r6, pc}
 80248dc:	89a3      	ldrh	r3, [r4, #12]
 80248de:	4a02      	ldr	r2, [pc, #8]	@ (80248e8 <__sread+0x24>)
 80248e0:	4013      	ands	r3, r2
 80248e2:	81a3      	strh	r3, [r4, #12]
 80248e4:	e7f9      	b.n	80248da <__sread+0x16>
 80248e6:	46c0      	nop			@ (mov r8, r8)
 80248e8:	ffffefff 	.word	0xffffefff

080248ec <__swrite>:
 80248ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248ee:	001f      	movs	r7, r3
 80248f0:	898b      	ldrh	r3, [r1, #12]
 80248f2:	0005      	movs	r5, r0
 80248f4:	000c      	movs	r4, r1
 80248f6:	0016      	movs	r6, r2
 80248f8:	05db      	lsls	r3, r3, #23
 80248fa:	d505      	bpl.n	8024908 <__swrite+0x1c>
 80248fc:	230e      	movs	r3, #14
 80248fe:	5ec9      	ldrsh	r1, [r1, r3]
 8024900:	2200      	movs	r2, #0
 8024902:	2302      	movs	r3, #2
 8024904:	f000 f98c 	bl	8024c20 <_lseek_r>
 8024908:	89a3      	ldrh	r3, [r4, #12]
 802490a:	4a05      	ldr	r2, [pc, #20]	@ (8024920 <__swrite+0x34>)
 802490c:	0028      	movs	r0, r5
 802490e:	4013      	ands	r3, r2
 8024910:	81a3      	strh	r3, [r4, #12]
 8024912:	0032      	movs	r2, r6
 8024914:	230e      	movs	r3, #14
 8024916:	5ee1      	ldrsh	r1, [r4, r3]
 8024918:	003b      	movs	r3, r7
 802491a:	f000 f9a9 	bl	8024c70 <_write_r>
 802491e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024920:	ffffefff 	.word	0xffffefff

08024924 <__sseek>:
 8024924:	b570      	push	{r4, r5, r6, lr}
 8024926:	000c      	movs	r4, r1
 8024928:	250e      	movs	r5, #14
 802492a:	5f49      	ldrsh	r1, [r1, r5]
 802492c:	f000 f978 	bl	8024c20 <_lseek_r>
 8024930:	89a3      	ldrh	r3, [r4, #12]
 8024932:	1c42      	adds	r2, r0, #1
 8024934:	d103      	bne.n	802493e <__sseek+0x1a>
 8024936:	4a05      	ldr	r2, [pc, #20]	@ (802494c <__sseek+0x28>)
 8024938:	4013      	ands	r3, r2
 802493a:	81a3      	strh	r3, [r4, #12]
 802493c:	bd70      	pop	{r4, r5, r6, pc}
 802493e:	2280      	movs	r2, #128	@ 0x80
 8024940:	0152      	lsls	r2, r2, #5
 8024942:	4313      	orrs	r3, r2
 8024944:	81a3      	strh	r3, [r4, #12]
 8024946:	6560      	str	r0, [r4, #84]	@ 0x54
 8024948:	e7f8      	b.n	802493c <__sseek+0x18>
 802494a:	46c0      	nop			@ (mov r8, r8)
 802494c:	ffffefff 	.word	0xffffefff

08024950 <__sclose>:
 8024950:	b510      	push	{r4, lr}
 8024952:	230e      	movs	r3, #14
 8024954:	5ec9      	ldrsh	r1, [r1, r3]
 8024956:	f000 f951 	bl	8024bfc <_close_r>
 802495a:	bd10      	pop	{r4, pc}

0802495c <_vsniprintf_r>:
 802495c:	b530      	push	{r4, r5, lr}
 802495e:	0014      	movs	r4, r2
 8024960:	0005      	movs	r5, r0
 8024962:	001a      	movs	r2, r3
 8024964:	b09b      	sub	sp, #108	@ 0x6c
 8024966:	2c00      	cmp	r4, #0
 8024968:	da05      	bge.n	8024976 <_vsniprintf_r+0x1a>
 802496a:	238b      	movs	r3, #139	@ 0x8b
 802496c:	6003      	str	r3, [r0, #0]
 802496e:	2001      	movs	r0, #1
 8024970:	4240      	negs	r0, r0
 8024972:	b01b      	add	sp, #108	@ 0x6c
 8024974:	bd30      	pop	{r4, r5, pc}
 8024976:	2382      	movs	r3, #130	@ 0x82
 8024978:	4668      	mov	r0, sp
 802497a:	009b      	lsls	r3, r3, #2
 802497c:	8183      	strh	r3, [r0, #12]
 802497e:	2300      	movs	r3, #0
 8024980:	9100      	str	r1, [sp, #0]
 8024982:	9104      	str	r1, [sp, #16]
 8024984:	429c      	cmp	r4, r3
 8024986:	d000      	beq.n	802498a <_vsniprintf_r+0x2e>
 8024988:	1e63      	subs	r3, r4, #1
 802498a:	9302      	str	r3, [sp, #8]
 802498c:	9305      	str	r3, [sp, #20]
 802498e:	2301      	movs	r3, #1
 8024990:	4669      	mov	r1, sp
 8024992:	425b      	negs	r3, r3
 8024994:	81cb      	strh	r3, [r1, #14]
 8024996:	0028      	movs	r0, r5
 8024998:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802499a:	f002 f9f1 	bl	8026d80 <_svfiprintf_r>
 802499e:	1c43      	adds	r3, r0, #1
 80249a0:	da01      	bge.n	80249a6 <_vsniprintf_r+0x4a>
 80249a2:	238b      	movs	r3, #139	@ 0x8b
 80249a4:	602b      	str	r3, [r5, #0]
 80249a6:	2c00      	cmp	r4, #0
 80249a8:	d0e3      	beq.n	8024972 <_vsniprintf_r+0x16>
 80249aa:	2200      	movs	r2, #0
 80249ac:	9b00      	ldr	r3, [sp, #0]
 80249ae:	701a      	strb	r2, [r3, #0]
 80249b0:	e7df      	b.n	8024972 <_vsniprintf_r+0x16>
	...

080249b4 <vsniprintf>:
 80249b4:	b513      	push	{r0, r1, r4, lr}
 80249b6:	4c04      	ldr	r4, [pc, #16]	@ (80249c8 <vsniprintf+0x14>)
 80249b8:	9300      	str	r3, [sp, #0]
 80249ba:	0013      	movs	r3, r2
 80249bc:	000a      	movs	r2, r1
 80249be:	0001      	movs	r1, r0
 80249c0:	6820      	ldr	r0, [r4, #0]
 80249c2:	f7ff ffcb 	bl	802495c <_vsniprintf_r>
 80249c6:	bd16      	pop	{r1, r2, r4, pc}
 80249c8:	200003e0 	.word	0x200003e0

080249cc <_vsiprintf_r>:
 80249cc:	b500      	push	{lr}
 80249ce:	b09b      	sub	sp, #108	@ 0x6c
 80249d0:	9100      	str	r1, [sp, #0]
 80249d2:	9104      	str	r1, [sp, #16]
 80249d4:	4906      	ldr	r1, [pc, #24]	@ (80249f0 <_vsiprintf_r+0x24>)
 80249d6:	9105      	str	r1, [sp, #20]
 80249d8:	9102      	str	r1, [sp, #8]
 80249da:	4906      	ldr	r1, [pc, #24]	@ (80249f4 <_vsiprintf_r+0x28>)
 80249dc:	9103      	str	r1, [sp, #12]
 80249de:	4669      	mov	r1, sp
 80249e0:	f002 f9ce 	bl	8026d80 <_svfiprintf_r>
 80249e4:	2200      	movs	r2, #0
 80249e6:	9b00      	ldr	r3, [sp, #0]
 80249e8:	701a      	strb	r2, [r3, #0]
 80249ea:	b01b      	add	sp, #108	@ 0x6c
 80249ec:	bd00      	pop	{pc}
 80249ee:	46c0      	nop			@ (mov r8, r8)
 80249f0:	7fffffff 	.word	0x7fffffff
 80249f4:	ffff0208 	.word	0xffff0208

080249f8 <vsiprintf>:
 80249f8:	b510      	push	{r4, lr}
 80249fa:	4c04      	ldr	r4, [pc, #16]	@ (8024a0c <vsiprintf+0x14>)
 80249fc:	0013      	movs	r3, r2
 80249fe:	000a      	movs	r2, r1
 8024a00:	0001      	movs	r1, r0
 8024a02:	6820      	ldr	r0, [r4, #0]
 8024a04:	f7ff ffe2 	bl	80249cc <_vsiprintf_r>
 8024a08:	bd10      	pop	{r4, pc}
 8024a0a:	46c0      	nop			@ (mov r8, r8)
 8024a0c:	200003e0 	.word	0x200003e0

08024a10 <__swbuf_r>:
 8024a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024a12:	0006      	movs	r6, r0
 8024a14:	000d      	movs	r5, r1
 8024a16:	0014      	movs	r4, r2
 8024a18:	2800      	cmp	r0, #0
 8024a1a:	d004      	beq.n	8024a26 <__swbuf_r+0x16>
 8024a1c:	6a03      	ldr	r3, [r0, #32]
 8024a1e:	2b00      	cmp	r3, #0
 8024a20:	d101      	bne.n	8024a26 <__swbuf_r+0x16>
 8024a22:	f7ff fe8b 	bl	802473c <__sinit>
 8024a26:	69a3      	ldr	r3, [r4, #24]
 8024a28:	60a3      	str	r3, [r4, #8]
 8024a2a:	89a3      	ldrh	r3, [r4, #12]
 8024a2c:	071b      	lsls	r3, r3, #28
 8024a2e:	d502      	bpl.n	8024a36 <__swbuf_r+0x26>
 8024a30:	6923      	ldr	r3, [r4, #16]
 8024a32:	2b00      	cmp	r3, #0
 8024a34:	d109      	bne.n	8024a4a <__swbuf_r+0x3a>
 8024a36:	0021      	movs	r1, r4
 8024a38:	0030      	movs	r0, r6
 8024a3a:	f000 f82b 	bl	8024a94 <__swsetup_r>
 8024a3e:	2800      	cmp	r0, #0
 8024a40:	d003      	beq.n	8024a4a <__swbuf_r+0x3a>
 8024a42:	2501      	movs	r5, #1
 8024a44:	426d      	negs	r5, r5
 8024a46:	0028      	movs	r0, r5
 8024a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024a4a:	6923      	ldr	r3, [r4, #16]
 8024a4c:	6820      	ldr	r0, [r4, #0]
 8024a4e:	b2ef      	uxtb	r7, r5
 8024a50:	1ac0      	subs	r0, r0, r3
 8024a52:	6963      	ldr	r3, [r4, #20]
 8024a54:	b2ed      	uxtb	r5, r5
 8024a56:	4283      	cmp	r3, r0
 8024a58:	dc05      	bgt.n	8024a66 <__swbuf_r+0x56>
 8024a5a:	0021      	movs	r1, r4
 8024a5c:	0030      	movs	r0, r6
 8024a5e:	f002 fc57 	bl	8027310 <_fflush_r>
 8024a62:	2800      	cmp	r0, #0
 8024a64:	d1ed      	bne.n	8024a42 <__swbuf_r+0x32>
 8024a66:	68a3      	ldr	r3, [r4, #8]
 8024a68:	3001      	adds	r0, #1
 8024a6a:	3b01      	subs	r3, #1
 8024a6c:	60a3      	str	r3, [r4, #8]
 8024a6e:	6823      	ldr	r3, [r4, #0]
 8024a70:	1c5a      	adds	r2, r3, #1
 8024a72:	6022      	str	r2, [r4, #0]
 8024a74:	701f      	strb	r7, [r3, #0]
 8024a76:	6963      	ldr	r3, [r4, #20]
 8024a78:	4283      	cmp	r3, r0
 8024a7a:	d004      	beq.n	8024a86 <__swbuf_r+0x76>
 8024a7c:	89a3      	ldrh	r3, [r4, #12]
 8024a7e:	07db      	lsls	r3, r3, #31
 8024a80:	d5e1      	bpl.n	8024a46 <__swbuf_r+0x36>
 8024a82:	2d0a      	cmp	r5, #10
 8024a84:	d1df      	bne.n	8024a46 <__swbuf_r+0x36>
 8024a86:	0021      	movs	r1, r4
 8024a88:	0030      	movs	r0, r6
 8024a8a:	f002 fc41 	bl	8027310 <_fflush_r>
 8024a8e:	2800      	cmp	r0, #0
 8024a90:	d0d9      	beq.n	8024a46 <__swbuf_r+0x36>
 8024a92:	e7d6      	b.n	8024a42 <__swbuf_r+0x32>

08024a94 <__swsetup_r>:
 8024a94:	4b2d      	ldr	r3, [pc, #180]	@ (8024b4c <__swsetup_r+0xb8>)
 8024a96:	b570      	push	{r4, r5, r6, lr}
 8024a98:	0005      	movs	r5, r0
 8024a9a:	6818      	ldr	r0, [r3, #0]
 8024a9c:	000c      	movs	r4, r1
 8024a9e:	2800      	cmp	r0, #0
 8024aa0:	d004      	beq.n	8024aac <__swsetup_r+0x18>
 8024aa2:	6a03      	ldr	r3, [r0, #32]
 8024aa4:	2b00      	cmp	r3, #0
 8024aa6:	d101      	bne.n	8024aac <__swsetup_r+0x18>
 8024aa8:	f7ff fe48 	bl	802473c <__sinit>
 8024aac:	230c      	movs	r3, #12
 8024aae:	5ee2      	ldrsh	r2, [r4, r3]
 8024ab0:	0713      	lsls	r3, r2, #28
 8024ab2:	d423      	bmi.n	8024afc <__swsetup_r+0x68>
 8024ab4:	06d3      	lsls	r3, r2, #27
 8024ab6:	d407      	bmi.n	8024ac8 <__swsetup_r+0x34>
 8024ab8:	2309      	movs	r3, #9
 8024aba:	602b      	str	r3, [r5, #0]
 8024abc:	2340      	movs	r3, #64	@ 0x40
 8024abe:	2001      	movs	r0, #1
 8024ac0:	4313      	orrs	r3, r2
 8024ac2:	81a3      	strh	r3, [r4, #12]
 8024ac4:	4240      	negs	r0, r0
 8024ac6:	e03a      	b.n	8024b3e <__swsetup_r+0xaa>
 8024ac8:	0752      	lsls	r2, r2, #29
 8024aca:	d513      	bpl.n	8024af4 <__swsetup_r+0x60>
 8024acc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024ace:	2900      	cmp	r1, #0
 8024ad0:	d008      	beq.n	8024ae4 <__swsetup_r+0x50>
 8024ad2:	0023      	movs	r3, r4
 8024ad4:	3344      	adds	r3, #68	@ 0x44
 8024ad6:	4299      	cmp	r1, r3
 8024ad8:	d002      	beq.n	8024ae0 <__swsetup_r+0x4c>
 8024ada:	0028      	movs	r0, r5
 8024adc:	f000 ffa6 	bl	8025a2c <_free_r>
 8024ae0:	2300      	movs	r3, #0
 8024ae2:	6363      	str	r3, [r4, #52]	@ 0x34
 8024ae4:	2224      	movs	r2, #36	@ 0x24
 8024ae6:	89a3      	ldrh	r3, [r4, #12]
 8024ae8:	4393      	bics	r3, r2
 8024aea:	81a3      	strh	r3, [r4, #12]
 8024aec:	2300      	movs	r3, #0
 8024aee:	6063      	str	r3, [r4, #4]
 8024af0:	6923      	ldr	r3, [r4, #16]
 8024af2:	6023      	str	r3, [r4, #0]
 8024af4:	2308      	movs	r3, #8
 8024af6:	89a2      	ldrh	r2, [r4, #12]
 8024af8:	4313      	orrs	r3, r2
 8024afa:	81a3      	strh	r3, [r4, #12]
 8024afc:	6923      	ldr	r3, [r4, #16]
 8024afe:	2b00      	cmp	r3, #0
 8024b00:	d10b      	bne.n	8024b1a <__swsetup_r+0x86>
 8024b02:	21a0      	movs	r1, #160	@ 0xa0
 8024b04:	2280      	movs	r2, #128	@ 0x80
 8024b06:	89a3      	ldrh	r3, [r4, #12]
 8024b08:	0089      	lsls	r1, r1, #2
 8024b0a:	0092      	lsls	r2, r2, #2
 8024b0c:	400b      	ands	r3, r1
 8024b0e:	4293      	cmp	r3, r2
 8024b10:	d003      	beq.n	8024b1a <__swsetup_r+0x86>
 8024b12:	0021      	movs	r1, r4
 8024b14:	0028      	movs	r0, r5
 8024b16:	f002 fc51 	bl	80273bc <__smakebuf_r>
 8024b1a:	230c      	movs	r3, #12
 8024b1c:	5ee2      	ldrsh	r2, [r4, r3]
 8024b1e:	2101      	movs	r1, #1
 8024b20:	0013      	movs	r3, r2
 8024b22:	400b      	ands	r3, r1
 8024b24:	420a      	tst	r2, r1
 8024b26:	d00b      	beq.n	8024b40 <__swsetup_r+0xac>
 8024b28:	2300      	movs	r3, #0
 8024b2a:	60a3      	str	r3, [r4, #8]
 8024b2c:	6963      	ldr	r3, [r4, #20]
 8024b2e:	425b      	negs	r3, r3
 8024b30:	61a3      	str	r3, [r4, #24]
 8024b32:	2000      	movs	r0, #0
 8024b34:	6923      	ldr	r3, [r4, #16]
 8024b36:	4283      	cmp	r3, r0
 8024b38:	d101      	bne.n	8024b3e <__swsetup_r+0xaa>
 8024b3a:	0613      	lsls	r3, r2, #24
 8024b3c:	d4be      	bmi.n	8024abc <__swsetup_r+0x28>
 8024b3e:	bd70      	pop	{r4, r5, r6, pc}
 8024b40:	0791      	lsls	r1, r2, #30
 8024b42:	d400      	bmi.n	8024b46 <__swsetup_r+0xb2>
 8024b44:	6963      	ldr	r3, [r4, #20]
 8024b46:	60a3      	str	r3, [r4, #8]
 8024b48:	e7f3      	b.n	8024b32 <__swsetup_r+0x9e>
 8024b4a:	46c0      	nop			@ (mov r8, r8)
 8024b4c:	200003e0 	.word	0x200003e0

08024b50 <memset>:
 8024b50:	0003      	movs	r3, r0
 8024b52:	1882      	adds	r2, r0, r2
 8024b54:	4293      	cmp	r3, r2
 8024b56:	d100      	bne.n	8024b5a <memset+0xa>
 8024b58:	4770      	bx	lr
 8024b5a:	7019      	strb	r1, [r3, #0]
 8024b5c:	3301      	adds	r3, #1
 8024b5e:	e7f9      	b.n	8024b54 <memset+0x4>

08024b60 <strchr>:
 8024b60:	b2c9      	uxtb	r1, r1
 8024b62:	7803      	ldrb	r3, [r0, #0]
 8024b64:	2b00      	cmp	r3, #0
 8024b66:	d004      	beq.n	8024b72 <strchr+0x12>
 8024b68:	428b      	cmp	r3, r1
 8024b6a:	d100      	bne.n	8024b6e <strchr+0xe>
 8024b6c:	4770      	bx	lr
 8024b6e:	3001      	adds	r0, #1
 8024b70:	e7f7      	b.n	8024b62 <strchr+0x2>
 8024b72:	424b      	negs	r3, r1
 8024b74:	4159      	adcs	r1, r3
 8024b76:	4249      	negs	r1, r1
 8024b78:	4008      	ands	r0, r1
 8024b7a:	e7f7      	b.n	8024b6c <strchr+0xc>

08024b7c <strncmp>:
 8024b7c:	b530      	push	{r4, r5, lr}
 8024b7e:	0005      	movs	r5, r0
 8024b80:	1e10      	subs	r0, r2, #0
 8024b82:	d00b      	beq.n	8024b9c <strncmp+0x20>
 8024b84:	2400      	movs	r4, #0
 8024b86:	3a01      	subs	r2, #1
 8024b88:	5d2b      	ldrb	r3, [r5, r4]
 8024b8a:	5d08      	ldrb	r0, [r1, r4]
 8024b8c:	4283      	cmp	r3, r0
 8024b8e:	d104      	bne.n	8024b9a <strncmp+0x1e>
 8024b90:	42a2      	cmp	r2, r4
 8024b92:	d002      	beq.n	8024b9a <strncmp+0x1e>
 8024b94:	3401      	adds	r4, #1
 8024b96:	2b00      	cmp	r3, #0
 8024b98:	d1f6      	bne.n	8024b88 <strncmp+0xc>
 8024b9a:	1a18      	subs	r0, r3, r0
 8024b9c:	bd30      	pop	{r4, r5, pc}

08024b9e <strncpy>:
 8024b9e:	0003      	movs	r3, r0
 8024ba0:	b530      	push	{r4, r5, lr}
 8024ba2:	001d      	movs	r5, r3
 8024ba4:	2a00      	cmp	r2, #0
 8024ba6:	d006      	beq.n	8024bb6 <strncpy+0x18>
 8024ba8:	780c      	ldrb	r4, [r1, #0]
 8024baa:	3a01      	subs	r2, #1
 8024bac:	3301      	adds	r3, #1
 8024bae:	702c      	strb	r4, [r5, #0]
 8024bb0:	3101      	adds	r1, #1
 8024bb2:	2c00      	cmp	r4, #0
 8024bb4:	d1f5      	bne.n	8024ba2 <strncpy+0x4>
 8024bb6:	2100      	movs	r1, #0
 8024bb8:	189a      	adds	r2, r3, r2
 8024bba:	4293      	cmp	r3, r2
 8024bbc:	d100      	bne.n	8024bc0 <strncpy+0x22>
 8024bbe:	bd30      	pop	{r4, r5, pc}
 8024bc0:	7019      	strb	r1, [r3, #0]
 8024bc2:	3301      	adds	r3, #1
 8024bc4:	e7f9      	b.n	8024bba <strncpy+0x1c>

08024bc6 <strstr>:
 8024bc6:	780a      	ldrb	r2, [r1, #0]
 8024bc8:	b530      	push	{r4, r5, lr}
 8024bca:	2a00      	cmp	r2, #0
 8024bcc:	d10c      	bne.n	8024be8 <strstr+0x22>
 8024bce:	bd30      	pop	{r4, r5, pc}
 8024bd0:	429a      	cmp	r2, r3
 8024bd2:	d108      	bne.n	8024be6 <strstr+0x20>
 8024bd4:	2301      	movs	r3, #1
 8024bd6:	5ccc      	ldrb	r4, [r1, r3]
 8024bd8:	2c00      	cmp	r4, #0
 8024bda:	d0f8      	beq.n	8024bce <strstr+0x8>
 8024bdc:	5cc5      	ldrb	r5, [r0, r3]
 8024bde:	42a5      	cmp	r5, r4
 8024be0:	d101      	bne.n	8024be6 <strstr+0x20>
 8024be2:	3301      	adds	r3, #1
 8024be4:	e7f7      	b.n	8024bd6 <strstr+0x10>
 8024be6:	3001      	adds	r0, #1
 8024be8:	7803      	ldrb	r3, [r0, #0]
 8024bea:	2b00      	cmp	r3, #0
 8024bec:	d1f0      	bne.n	8024bd0 <strstr+0xa>
 8024bee:	0018      	movs	r0, r3
 8024bf0:	e7ed      	b.n	8024bce <strstr+0x8>
	...

08024bf4 <_localeconv_r>:
 8024bf4:	4800      	ldr	r0, [pc, #0]	@ (8024bf8 <_localeconv_r+0x4>)
 8024bf6:	4770      	bx	lr
 8024bf8:	20000364 	.word	0x20000364

08024bfc <_close_r>:
 8024bfc:	2300      	movs	r3, #0
 8024bfe:	b570      	push	{r4, r5, r6, lr}
 8024c00:	4d06      	ldr	r5, [pc, #24]	@ (8024c1c <_close_r+0x20>)
 8024c02:	0004      	movs	r4, r0
 8024c04:	0008      	movs	r0, r1
 8024c06:	602b      	str	r3, [r5, #0]
 8024c08:	f7ed f8fc 	bl	8011e04 <_close>
 8024c0c:	1c43      	adds	r3, r0, #1
 8024c0e:	d103      	bne.n	8024c18 <_close_r+0x1c>
 8024c10:	682b      	ldr	r3, [r5, #0]
 8024c12:	2b00      	cmp	r3, #0
 8024c14:	d000      	beq.n	8024c18 <_close_r+0x1c>
 8024c16:	6023      	str	r3, [r4, #0]
 8024c18:	bd70      	pop	{r4, r5, r6, pc}
 8024c1a:	46c0      	nop			@ (mov r8, r8)
 8024c1c:	20003638 	.word	0x20003638

08024c20 <_lseek_r>:
 8024c20:	b570      	push	{r4, r5, r6, lr}
 8024c22:	0004      	movs	r4, r0
 8024c24:	0008      	movs	r0, r1
 8024c26:	0011      	movs	r1, r2
 8024c28:	001a      	movs	r2, r3
 8024c2a:	2300      	movs	r3, #0
 8024c2c:	4d05      	ldr	r5, [pc, #20]	@ (8024c44 <_lseek_r+0x24>)
 8024c2e:	602b      	str	r3, [r5, #0]
 8024c30:	f7ed f909 	bl	8011e46 <_lseek>
 8024c34:	1c43      	adds	r3, r0, #1
 8024c36:	d103      	bne.n	8024c40 <_lseek_r+0x20>
 8024c38:	682b      	ldr	r3, [r5, #0]
 8024c3a:	2b00      	cmp	r3, #0
 8024c3c:	d000      	beq.n	8024c40 <_lseek_r+0x20>
 8024c3e:	6023      	str	r3, [r4, #0]
 8024c40:	bd70      	pop	{r4, r5, r6, pc}
 8024c42:	46c0      	nop			@ (mov r8, r8)
 8024c44:	20003638 	.word	0x20003638

08024c48 <_read_r>:
 8024c48:	b570      	push	{r4, r5, r6, lr}
 8024c4a:	0004      	movs	r4, r0
 8024c4c:	0008      	movs	r0, r1
 8024c4e:	0011      	movs	r1, r2
 8024c50:	001a      	movs	r2, r3
 8024c52:	2300      	movs	r3, #0
 8024c54:	4d05      	ldr	r5, [pc, #20]	@ (8024c6c <_read_r+0x24>)
 8024c56:	602b      	str	r3, [r5, #0]
 8024c58:	f7ed f8b7 	bl	8011dca <_read>
 8024c5c:	1c43      	adds	r3, r0, #1
 8024c5e:	d103      	bne.n	8024c68 <_read_r+0x20>
 8024c60:	682b      	ldr	r3, [r5, #0]
 8024c62:	2b00      	cmp	r3, #0
 8024c64:	d000      	beq.n	8024c68 <_read_r+0x20>
 8024c66:	6023      	str	r3, [r4, #0]
 8024c68:	bd70      	pop	{r4, r5, r6, pc}
 8024c6a:	46c0      	nop			@ (mov r8, r8)
 8024c6c:	20003638 	.word	0x20003638

08024c70 <_write_r>:
 8024c70:	b570      	push	{r4, r5, r6, lr}
 8024c72:	0004      	movs	r4, r0
 8024c74:	0008      	movs	r0, r1
 8024c76:	0011      	movs	r1, r2
 8024c78:	001a      	movs	r2, r3
 8024c7a:	2300      	movs	r3, #0
 8024c7c:	4d05      	ldr	r5, [pc, #20]	@ (8024c94 <_write_r+0x24>)
 8024c7e:	602b      	str	r3, [r5, #0]
 8024c80:	f7ed fd74 	bl	801276c <_write>
 8024c84:	1c43      	adds	r3, r0, #1
 8024c86:	d103      	bne.n	8024c90 <_write_r+0x20>
 8024c88:	682b      	ldr	r3, [r5, #0]
 8024c8a:	2b00      	cmp	r3, #0
 8024c8c:	d000      	beq.n	8024c90 <_write_r+0x20>
 8024c8e:	6023      	str	r3, [r4, #0]
 8024c90:	bd70      	pop	{r4, r5, r6, pc}
 8024c92:	46c0      	nop			@ (mov r8, r8)
 8024c94:	20003638 	.word	0x20003638

08024c98 <__errno>:
 8024c98:	4b01      	ldr	r3, [pc, #4]	@ (8024ca0 <__errno+0x8>)
 8024c9a:	6818      	ldr	r0, [r3, #0]
 8024c9c:	4770      	bx	lr
 8024c9e:	46c0      	nop			@ (mov r8, r8)
 8024ca0:	200003e0 	.word	0x200003e0

08024ca4 <__libc_init_array>:
 8024ca4:	b570      	push	{r4, r5, r6, lr}
 8024ca6:	2600      	movs	r6, #0
 8024ca8:	4c0c      	ldr	r4, [pc, #48]	@ (8024cdc <__libc_init_array+0x38>)
 8024caa:	4d0d      	ldr	r5, [pc, #52]	@ (8024ce0 <__libc_init_array+0x3c>)
 8024cac:	1b64      	subs	r4, r4, r5
 8024cae:	10a4      	asrs	r4, r4, #2
 8024cb0:	42a6      	cmp	r6, r4
 8024cb2:	d109      	bne.n	8024cc8 <__libc_init_array+0x24>
 8024cb4:	2600      	movs	r6, #0
 8024cb6:	f003 fff9 	bl	8028cac <_init>
 8024cba:	4c0a      	ldr	r4, [pc, #40]	@ (8024ce4 <__libc_init_array+0x40>)
 8024cbc:	4d0a      	ldr	r5, [pc, #40]	@ (8024ce8 <__libc_init_array+0x44>)
 8024cbe:	1b64      	subs	r4, r4, r5
 8024cc0:	10a4      	asrs	r4, r4, #2
 8024cc2:	42a6      	cmp	r6, r4
 8024cc4:	d105      	bne.n	8024cd2 <__libc_init_array+0x2e>
 8024cc6:	bd70      	pop	{r4, r5, r6, pc}
 8024cc8:	00b3      	lsls	r3, r6, #2
 8024cca:	58eb      	ldr	r3, [r5, r3]
 8024ccc:	4798      	blx	r3
 8024cce:	3601      	adds	r6, #1
 8024cd0:	e7ee      	b.n	8024cb0 <__libc_init_array+0xc>
 8024cd2:	00b3      	lsls	r3, r6, #2
 8024cd4:	58eb      	ldr	r3, [r5, r3]
 8024cd6:	4798      	blx	r3
 8024cd8:	3601      	adds	r6, #1
 8024cda:	e7f2      	b.n	8024cc2 <__libc_init_array+0x1e>
 8024cdc:	0802d650 	.word	0x0802d650
 8024ce0:	0802d650 	.word	0x0802d650
 8024ce4:	0802d654 	.word	0x0802d654
 8024ce8:	0802d650 	.word	0x0802d650

08024cec <__retarget_lock_init_recursive>:
 8024cec:	4770      	bx	lr

08024cee <__retarget_lock_acquire_recursive>:
 8024cee:	4770      	bx	lr

08024cf0 <__retarget_lock_release_recursive>:
 8024cf0:	4770      	bx	lr

08024cf2 <memchr>:
 8024cf2:	b2c9      	uxtb	r1, r1
 8024cf4:	1882      	adds	r2, r0, r2
 8024cf6:	4290      	cmp	r0, r2
 8024cf8:	d101      	bne.n	8024cfe <memchr+0xc>
 8024cfa:	2000      	movs	r0, #0
 8024cfc:	4770      	bx	lr
 8024cfe:	7803      	ldrb	r3, [r0, #0]
 8024d00:	428b      	cmp	r3, r1
 8024d02:	d0fb      	beq.n	8024cfc <memchr+0xa>
 8024d04:	3001      	adds	r0, #1
 8024d06:	e7f6      	b.n	8024cf6 <memchr+0x4>

08024d08 <memcpy>:
 8024d08:	2300      	movs	r3, #0
 8024d0a:	b510      	push	{r4, lr}
 8024d0c:	429a      	cmp	r2, r3
 8024d0e:	d100      	bne.n	8024d12 <memcpy+0xa>
 8024d10:	bd10      	pop	{r4, pc}
 8024d12:	5ccc      	ldrb	r4, [r1, r3]
 8024d14:	54c4      	strb	r4, [r0, r3]
 8024d16:	3301      	adds	r3, #1
 8024d18:	e7f8      	b.n	8024d0c <memcpy+0x4>
	...

08024d1c <nan>:
 8024d1c:	2000      	movs	r0, #0
 8024d1e:	4901      	ldr	r1, [pc, #4]	@ (8024d24 <nan+0x8>)
 8024d20:	4770      	bx	lr
 8024d22:	46c0      	nop			@ (mov r8, r8)
 8024d24:	7ff80000 	.word	0x7ff80000

08024d28 <quorem>:
 8024d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024d2a:	6902      	ldr	r2, [r0, #16]
 8024d2c:	690f      	ldr	r7, [r1, #16]
 8024d2e:	b087      	sub	sp, #28
 8024d30:	0006      	movs	r6, r0
 8024d32:	000b      	movs	r3, r1
 8024d34:	2000      	movs	r0, #0
 8024d36:	9102      	str	r1, [sp, #8]
 8024d38:	42ba      	cmp	r2, r7
 8024d3a:	db6d      	blt.n	8024e18 <quorem+0xf0>
 8024d3c:	3f01      	subs	r7, #1
 8024d3e:	00bc      	lsls	r4, r7, #2
 8024d40:	3314      	adds	r3, #20
 8024d42:	9305      	str	r3, [sp, #20]
 8024d44:	191b      	adds	r3, r3, r4
 8024d46:	9303      	str	r3, [sp, #12]
 8024d48:	0033      	movs	r3, r6
 8024d4a:	3314      	adds	r3, #20
 8024d4c:	191c      	adds	r4, r3, r4
 8024d4e:	9301      	str	r3, [sp, #4]
 8024d50:	6823      	ldr	r3, [r4, #0]
 8024d52:	9304      	str	r3, [sp, #16]
 8024d54:	9b03      	ldr	r3, [sp, #12]
 8024d56:	9804      	ldr	r0, [sp, #16]
 8024d58:	681d      	ldr	r5, [r3, #0]
 8024d5a:	3501      	adds	r5, #1
 8024d5c:	0029      	movs	r1, r5
 8024d5e:	f7db fa21 	bl	80001a4 <__udivsi3>
 8024d62:	9b04      	ldr	r3, [sp, #16]
 8024d64:	9000      	str	r0, [sp, #0]
 8024d66:	42ab      	cmp	r3, r5
 8024d68:	d32b      	bcc.n	8024dc2 <quorem+0x9a>
 8024d6a:	9b05      	ldr	r3, [sp, #20]
 8024d6c:	9d01      	ldr	r5, [sp, #4]
 8024d6e:	469c      	mov	ip, r3
 8024d70:	2300      	movs	r3, #0
 8024d72:	9305      	str	r3, [sp, #20]
 8024d74:	9304      	str	r3, [sp, #16]
 8024d76:	4662      	mov	r2, ip
 8024d78:	ca08      	ldmia	r2!, {r3}
 8024d7a:	6828      	ldr	r0, [r5, #0]
 8024d7c:	4694      	mov	ip, r2
 8024d7e:	9a00      	ldr	r2, [sp, #0]
 8024d80:	b299      	uxth	r1, r3
 8024d82:	4351      	muls	r1, r2
 8024d84:	9a05      	ldr	r2, [sp, #20]
 8024d86:	0c1b      	lsrs	r3, r3, #16
 8024d88:	1889      	adds	r1, r1, r2
 8024d8a:	9a00      	ldr	r2, [sp, #0]
 8024d8c:	4353      	muls	r3, r2
 8024d8e:	0c0a      	lsrs	r2, r1, #16
 8024d90:	189b      	adds	r3, r3, r2
 8024d92:	0c1a      	lsrs	r2, r3, #16
 8024d94:	b289      	uxth	r1, r1
 8024d96:	9205      	str	r2, [sp, #20]
 8024d98:	b282      	uxth	r2, r0
 8024d9a:	1a52      	subs	r2, r2, r1
 8024d9c:	9904      	ldr	r1, [sp, #16]
 8024d9e:	0c00      	lsrs	r0, r0, #16
 8024da0:	1852      	adds	r2, r2, r1
 8024da2:	b29b      	uxth	r3, r3
 8024da4:	1411      	asrs	r1, r2, #16
 8024da6:	1ac3      	subs	r3, r0, r3
 8024da8:	185b      	adds	r3, r3, r1
 8024daa:	1419      	asrs	r1, r3, #16
 8024dac:	b292      	uxth	r2, r2
 8024dae:	041b      	lsls	r3, r3, #16
 8024db0:	431a      	orrs	r2, r3
 8024db2:	9b03      	ldr	r3, [sp, #12]
 8024db4:	9104      	str	r1, [sp, #16]
 8024db6:	c504      	stmia	r5!, {r2}
 8024db8:	4563      	cmp	r3, ip
 8024dba:	d2dc      	bcs.n	8024d76 <quorem+0x4e>
 8024dbc:	6823      	ldr	r3, [r4, #0]
 8024dbe:	2b00      	cmp	r3, #0
 8024dc0:	d030      	beq.n	8024e24 <quorem+0xfc>
 8024dc2:	0030      	movs	r0, r6
 8024dc4:	9902      	ldr	r1, [sp, #8]
 8024dc6:	f001 fd7d 	bl	80268c4 <__mcmp>
 8024dca:	2800      	cmp	r0, #0
 8024dcc:	db23      	blt.n	8024e16 <quorem+0xee>
 8024dce:	0034      	movs	r4, r6
 8024dd0:	2500      	movs	r5, #0
 8024dd2:	9902      	ldr	r1, [sp, #8]
 8024dd4:	3414      	adds	r4, #20
 8024dd6:	3114      	adds	r1, #20
 8024dd8:	6823      	ldr	r3, [r4, #0]
 8024dda:	c901      	ldmia	r1!, {r0}
 8024ddc:	9302      	str	r3, [sp, #8]
 8024dde:	466b      	mov	r3, sp
 8024de0:	891b      	ldrh	r3, [r3, #8]
 8024de2:	b282      	uxth	r2, r0
 8024de4:	1a9a      	subs	r2, r3, r2
 8024de6:	9b02      	ldr	r3, [sp, #8]
 8024de8:	1952      	adds	r2, r2, r5
 8024dea:	0c00      	lsrs	r0, r0, #16
 8024dec:	0c1b      	lsrs	r3, r3, #16
 8024dee:	1a1b      	subs	r3, r3, r0
 8024df0:	1410      	asrs	r0, r2, #16
 8024df2:	181b      	adds	r3, r3, r0
 8024df4:	141d      	asrs	r5, r3, #16
 8024df6:	b292      	uxth	r2, r2
 8024df8:	041b      	lsls	r3, r3, #16
 8024dfa:	431a      	orrs	r2, r3
 8024dfc:	9b03      	ldr	r3, [sp, #12]
 8024dfe:	c404      	stmia	r4!, {r2}
 8024e00:	428b      	cmp	r3, r1
 8024e02:	d2e9      	bcs.n	8024dd8 <quorem+0xb0>
 8024e04:	9a01      	ldr	r2, [sp, #4]
 8024e06:	00bb      	lsls	r3, r7, #2
 8024e08:	18d3      	adds	r3, r2, r3
 8024e0a:	681a      	ldr	r2, [r3, #0]
 8024e0c:	2a00      	cmp	r2, #0
 8024e0e:	d013      	beq.n	8024e38 <quorem+0x110>
 8024e10:	9b00      	ldr	r3, [sp, #0]
 8024e12:	3301      	adds	r3, #1
 8024e14:	9300      	str	r3, [sp, #0]
 8024e16:	9800      	ldr	r0, [sp, #0]
 8024e18:	b007      	add	sp, #28
 8024e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024e1c:	6823      	ldr	r3, [r4, #0]
 8024e1e:	2b00      	cmp	r3, #0
 8024e20:	d104      	bne.n	8024e2c <quorem+0x104>
 8024e22:	3f01      	subs	r7, #1
 8024e24:	9b01      	ldr	r3, [sp, #4]
 8024e26:	3c04      	subs	r4, #4
 8024e28:	42a3      	cmp	r3, r4
 8024e2a:	d3f7      	bcc.n	8024e1c <quorem+0xf4>
 8024e2c:	6137      	str	r7, [r6, #16]
 8024e2e:	e7c8      	b.n	8024dc2 <quorem+0x9a>
 8024e30:	681a      	ldr	r2, [r3, #0]
 8024e32:	2a00      	cmp	r2, #0
 8024e34:	d104      	bne.n	8024e40 <quorem+0x118>
 8024e36:	3f01      	subs	r7, #1
 8024e38:	9a01      	ldr	r2, [sp, #4]
 8024e3a:	3b04      	subs	r3, #4
 8024e3c:	429a      	cmp	r2, r3
 8024e3e:	d3f7      	bcc.n	8024e30 <quorem+0x108>
 8024e40:	6137      	str	r7, [r6, #16]
 8024e42:	e7e5      	b.n	8024e10 <quorem+0xe8>

08024e44 <_dtoa_r>:
 8024e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e46:	0014      	movs	r4, r2
 8024e48:	001d      	movs	r5, r3
 8024e4a:	69c6      	ldr	r6, [r0, #28]
 8024e4c:	b09d      	sub	sp, #116	@ 0x74
 8024e4e:	940a      	str	r4, [sp, #40]	@ 0x28
 8024e50:	950b      	str	r5, [sp, #44]	@ 0x2c
 8024e52:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8024e54:	9003      	str	r0, [sp, #12]
 8024e56:	2e00      	cmp	r6, #0
 8024e58:	d10f      	bne.n	8024e7a <_dtoa_r+0x36>
 8024e5a:	2010      	movs	r0, #16
 8024e5c:	f001 f98a 	bl	8026174 <malloc>
 8024e60:	9b03      	ldr	r3, [sp, #12]
 8024e62:	1e02      	subs	r2, r0, #0
 8024e64:	61d8      	str	r0, [r3, #28]
 8024e66:	d104      	bne.n	8024e72 <_dtoa_r+0x2e>
 8024e68:	21ef      	movs	r1, #239	@ 0xef
 8024e6a:	4bc7      	ldr	r3, [pc, #796]	@ (8025188 <_dtoa_r+0x344>)
 8024e6c:	48c7      	ldr	r0, [pc, #796]	@ (802518c <_dtoa_r+0x348>)
 8024e6e:	f002 fb2f 	bl	80274d0 <__assert_func>
 8024e72:	6046      	str	r6, [r0, #4]
 8024e74:	6086      	str	r6, [r0, #8]
 8024e76:	6006      	str	r6, [r0, #0]
 8024e78:	60c6      	str	r6, [r0, #12]
 8024e7a:	9b03      	ldr	r3, [sp, #12]
 8024e7c:	69db      	ldr	r3, [r3, #28]
 8024e7e:	6819      	ldr	r1, [r3, #0]
 8024e80:	2900      	cmp	r1, #0
 8024e82:	d00b      	beq.n	8024e9c <_dtoa_r+0x58>
 8024e84:	685a      	ldr	r2, [r3, #4]
 8024e86:	2301      	movs	r3, #1
 8024e88:	4093      	lsls	r3, r2
 8024e8a:	604a      	str	r2, [r1, #4]
 8024e8c:	608b      	str	r3, [r1, #8]
 8024e8e:	9803      	ldr	r0, [sp, #12]
 8024e90:	f001 fa82 	bl	8026398 <_Bfree>
 8024e94:	2200      	movs	r2, #0
 8024e96:	9b03      	ldr	r3, [sp, #12]
 8024e98:	69db      	ldr	r3, [r3, #28]
 8024e9a:	601a      	str	r2, [r3, #0]
 8024e9c:	2d00      	cmp	r5, #0
 8024e9e:	da1e      	bge.n	8024ede <_dtoa_r+0x9a>
 8024ea0:	2301      	movs	r3, #1
 8024ea2:	603b      	str	r3, [r7, #0]
 8024ea4:	006b      	lsls	r3, r5, #1
 8024ea6:	085b      	lsrs	r3, r3, #1
 8024ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024eaa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024eac:	4bb8      	ldr	r3, [pc, #736]	@ (8025190 <_dtoa_r+0x34c>)
 8024eae:	4ab8      	ldr	r2, [pc, #736]	@ (8025190 <_dtoa_r+0x34c>)
 8024eb0:	403b      	ands	r3, r7
 8024eb2:	4293      	cmp	r3, r2
 8024eb4:	d116      	bne.n	8024ee4 <_dtoa_r+0xa0>
 8024eb6:	4bb7      	ldr	r3, [pc, #732]	@ (8025194 <_dtoa_r+0x350>)
 8024eb8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8024eba:	6013      	str	r3, [r2, #0]
 8024ebc:	033b      	lsls	r3, r7, #12
 8024ebe:	0b1b      	lsrs	r3, r3, #12
 8024ec0:	4323      	orrs	r3, r4
 8024ec2:	d101      	bne.n	8024ec8 <_dtoa_r+0x84>
 8024ec4:	f000 fd83 	bl	80259ce <_dtoa_r+0xb8a>
 8024ec8:	4bb3      	ldr	r3, [pc, #716]	@ (8025198 <_dtoa_r+0x354>)
 8024eca:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8024ecc:	9308      	str	r3, [sp, #32]
 8024ece:	2a00      	cmp	r2, #0
 8024ed0:	d002      	beq.n	8024ed8 <_dtoa_r+0x94>
 8024ed2:	4bb2      	ldr	r3, [pc, #712]	@ (802519c <_dtoa_r+0x358>)
 8024ed4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8024ed6:	6013      	str	r3, [r2, #0]
 8024ed8:	9808      	ldr	r0, [sp, #32]
 8024eda:	b01d      	add	sp, #116	@ 0x74
 8024edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ede:	2300      	movs	r3, #0
 8024ee0:	603b      	str	r3, [r7, #0]
 8024ee2:	e7e2      	b.n	8024eaa <_dtoa_r+0x66>
 8024ee4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024ee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024ee8:	9212      	str	r2, [sp, #72]	@ 0x48
 8024eea:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024eec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024eee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024ef0:	2200      	movs	r2, #0
 8024ef2:	2300      	movs	r3, #0
 8024ef4:	f7db fadc 	bl	80004b0 <__aeabi_dcmpeq>
 8024ef8:	1e06      	subs	r6, r0, #0
 8024efa:	d00b      	beq.n	8024f14 <_dtoa_r+0xd0>
 8024efc:	2301      	movs	r3, #1
 8024efe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8024f00:	6013      	str	r3, [r2, #0]
 8024f02:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024f04:	2b00      	cmp	r3, #0
 8024f06:	d002      	beq.n	8024f0e <_dtoa_r+0xca>
 8024f08:	4ba5      	ldr	r3, [pc, #660]	@ (80251a0 <_dtoa_r+0x35c>)
 8024f0a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8024f0c:	6013      	str	r3, [r2, #0]
 8024f0e:	4ba5      	ldr	r3, [pc, #660]	@ (80251a4 <_dtoa_r+0x360>)
 8024f10:	9308      	str	r3, [sp, #32]
 8024f12:	e7e1      	b.n	8024ed8 <_dtoa_r+0x94>
 8024f14:	ab1a      	add	r3, sp, #104	@ 0x68
 8024f16:	9301      	str	r3, [sp, #4]
 8024f18:	ab1b      	add	r3, sp, #108	@ 0x6c
 8024f1a:	9300      	str	r3, [sp, #0]
 8024f1c:	9803      	ldr	r0, [sp, #12]
 8024f1e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024f20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024f22:	f001 fdf1 	bl	8026b08 <__d2b>
 8024f26:	007a      	lsls	r2, r7, #1
 8024f28:	9005      	str	r0, [sp, #20]
 8024f2a:	0d52      	lsrs	r2, r2, #21
 8024f2c:	d100      	bne.n	8024f30 <_dtoa_r+0xec>
 8024f2e:	e07b      	b.n	8025028 <_dtoa_r+0x1e4>
 8024f30:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024f32:	9618      	str	r6, [sp, #96]	@ 0x60
 8024f34:	0319      	lsls	r1, r3, #12
 8024f36:	4b9c      	ldr	r3, [pc, #624]	@ (80251a8 <_dtoa_r+0x364>)
 8024f38:	0b09      	lsrs	r1, r1, #12
 8024f3a:	430b      	orrs	r3, r1
 8024f3c:	499b      	ldr	r1, [pc, #620]	@ (80251ac <_dtoa_r+0x368>)
 8024f3e:	1857      	adds	r7, r2, r1
 8024f40:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024f42:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024f44:	0019      	movs	r1, r3
 8024f46:	2200      	movs	r2, #0
 8024f48:	4b99      	ldr	r3, [pc, #612]	@ (80251b0 <_dtoa_r+0x36c>)
 8024f4a:	f7dd fe3f 	bl	8002bcc <__aeabi_dsub>
 8024f4e:	4a99      	ldr	r2, [pc, #612]	@ (80251b4 <_dtoa_r+0x370>)
 8024f50:	4b99      	ldr	r3, [pc, #612]	@ (80251b8 <_dtoa_r+0x374>)
 8024f52:	f7dd fb73 	bl	800263c <__aeabi_dmul>
 8024f56:	4a99      	ldr	r2, [pc, #612]	@ (80251bc <_dtoa_r+0x378>)
 8024f58:	4b99      	ldr	r3, [pc, #612]	@ (80251c0 <_dtoa_r+0x37c>)
 8024f5a:	f7dc fbc7 	bl	80016ec <__aeabi_dadd>
 8024f5e:	0004      	movs	r4, r0
 8024f60:	0038      	movs	r0, r7
 8024f62:	000d      	movs	r5, r1
 8024f64:	f7de fa2c 	bl	80033c0 <__aeabi_i2d>
 8024f68:	4a96      	ldr	r2, [pc, #600]	@ (80251c4 <_dtoa_r+0x380>)
 8024f6a:	4b97      	ldr	r3, [pc, #604]	@ (80251c8 <_dtoa_r+0x384>)
 8024f6c:	f7dd fb66 	bl	800263c <__aeabi_dmul>
 8024f70:	0002      	movs	r2, r0
 8024f72:	000b      	movs	r3, r1
 8024f74:	0020      	movs	r0, r4
 8024f76:	0029      	movs	r1, r5
 8024f78:	f7dc fbb8 	bl	80016ec <__aeabi_dadd>
 8024f7c:	0004      	movs	r4, r0
 8024f7e:	000d      	movs	r5, r1
 8024f80:	f7de f9e2 	bl	8003348 <__aeabi_d2iz>
 8024f84:	2200      	movs	r2, #0
 8024f86:	9004      	str	r0, [sp, #16]
 8024f88:	2300      	movs	r3, #0
 8024f8a:	0020      	movs	r0, r4
 8024f8c:	0029      	movs	r1, r5
 8024f8e:	f7db fa95 	bl	80004bc <__aeabi_dcmplt>
 8024f92:	2800      	cmp	r0, #0
 8024f94:	d00b      	beq.n	8024fae <_dtoa_r+0x16a>
 8024f96:	9804      	ldr	r0, [sp, #16]
 8024f98:	f7de fa12 	bl	80033c0 <__aeabi_i2d>
 8024f9c:	002b      	movs	r3, r5
 8024f9e:	0022      	movs	r2, r4
 8024fa0:	f7db fa86 	bl	80004b0 <__aeabi_dcmpeq>
 8024fa4:	4243      	negs	r3, r0
 8024fa6:	4158      	adcs	r0, r3
 8024fa8:	9b04      	ldr	r3, [sp, #16]
 8024faa:	1a1b      	subs	r3, r3, r0
 8024fac:	9304      	str	r3, [sp, #16]
 8024fae:	2301      	movs	r3, #1
 8024fb0:	9315      	str	r3, [sp, #84]	@ 0x54
 8024fb2:	9b04      	ldr	r3, [sp, #16]
 8024fb4:	2b16      	cmp	r3, #22
 8024fb6:	d810      	bhi.n	8024fda <_dtoa_r+0x196>
 8024fb8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024fba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024fbc:	9a04      	ldr	r2, [sp, #16]
 8024fbe:	4b83      	ldr	r3, [pc, #524]	@ (80251cc <_dtoa_r+0x388>)
 8024fc0:	00d2      	lsls	r2, r2, #3
 8024fc2:	189b      	adds	r3, r3, r2
 8024fc4:	681a      	ldr	r2, [r3, #0]
 8024fc6:	685b      	ldr	r3, [r3, #4]
 8024fc8:	f7db fa78 	bl	80004bc <__aeabi_dcmplt>
 8024fcc:	2800      	cmp	r0, #0
 8024fce:	d047      	beq.n	8025060 <_dtoa_r+0x21c>
 8024fd0:	9b04      	ldr	r3, [sp, #16]
 8024fd2:	3b01      	subs	r3, #1
 8024fd4:	9304      	str	r3, [sp, #16]
 8024fd6:	2300      	movs	r3, #0
 8024fd8:	9315      	str	r3, [sp, #84]	@ 0x54
 8024fda:	2200      	movs	r2, #0
 8024fdc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8024fde:	9206      	str	r2, [sp, #24]
 8024fe0:	1bdb      	subs	r3, r3, r7
 8024fe2:	1e5a      	subs	r2, r3, #1
 8024fe4:	d53e      	bpl.n	8025064 <_dtoa_r+0x220>
 8024fe6:	2201      	movs	r2, #1
 8024fe8:	1ad3      	subs	r3, r2, r3
 8024fea:	9306      	str	r3, [sp, #24]
 8024fec:	2300      	movs	r3, #0
 8024fee:	930d      	str	r3, [sp, #52]	@ 0x34
 8024ff0:	9b04      	ldr	r3, [sp, #16]
 8024ff2:	2b00      	cmp	r3, #0
 8024ff4:	db38      	blt.n	8025068 <_dtoa_r+0x224>
 8024ff6:	9a04      	ldr	r2, [sp, #16]
 8024ff8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024ffa:	4694      	mov	ip, r2
 8024ffc:	4463      	add	r3, ip
 8024ffe:	930d      	str	r3, [sp, #52]	@ 0x34
 8025000:	2300      	movs	r3, #0
 8025002:	9214      	str	r2, [sp, #80]	@ 0x50
 8025004:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025006:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025008:	2401      	movs	r4, #1
 802500a:	2b09      	cmp	r3, #9
 802500c:	d867      	bhi.n	80250de <_dtoa_r+0x29a>
 802500e:	2b05      	cmp	r3, #5
 8025010:	dd02      	ble.n	8025018 <_dtoa_r+0x1d4>
 8025012:	2400      	movs	r4, #0
 8025014:	3b04      	subs	r3, #4
 8025016:	9322      	str	r3, [sp, #136]	@ 0x88
 8025018:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802501a:	1e98      	subs	r0, r3, #2
 802501c:	2803      	cmp	r0, #3
 802501e:	d867      	bhi.n	80250f0 <_dtoa_r+0x2ac>
 8025020:	f7db f8ac 	bl	800017c <__gnu_thumb1_case_uqi>
 8025024:	5b383a2b 	.word	0x5b383a2b
 8025028:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802502a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 802502c:	18f6      	adds	r6, r6, r3
 802502e:	4b68      	ldr	r3, [pc, #416]	@ (80251d0 <_dtoa_r+0x38c>)
 8025030:	18f2      	adds	r2, r6, r3
 8025032:	2a20      	cmp	r2, #32
 8025034:	dd0f      	ble.n	8025056 <_dtoa_r+0x212>
 8025036:	2340      	movs	r3, #64	@ 0x40
 8025038:	1a9b      	subs	r3, r3, r2
 802503a:	409f      	lsls	r7, r3
 802503c:	4b65      	ldr	r3, [pc, #404]	@ (80251d4 <_dtoa_r+0x390>)
 802503e:	0038      	movs	r0, r7
 8025040:	18f3      	adds	r3, r6, r3
 8025042:	40dc      	lsrs	r4, r3
 8025044:	4320      	orrs	r0, r4
 8025046:	f7de f9e9 	bl	800341c <__aeabi_ui2d>
 802504a:	2201      	movs	r2, #1
 802504c:	4b62      	ldr	r3, [pc, #392]	@ (80251d8 <_dtoa_r+0x394>)
 802504e:	1e77      	subs	r7, r6, #1
 8025050:	18cb      	adds	r3, r1, r3
 8025052:	9218      	str	r2, [sp, #96]	@ 0x60
 8025054:	e776      	b.n	8024f44 <_dtoa_r+0x100>
 8025056:	2320      	movs	r3, #32
 8025058:	0020      	movs	r0, r4
 802505a:	1a9b      	subs	r3, r3, r2
 802505c:	4098      	lsls	r0, r3
 802505e:	e7f2      	b.n	8025046 <_dtoa_r+0x202>
 8025060:	9015      	str	r0, [sp, #84]	@ 0x54
 8025062:	e7ba      	b.n	8024fda <_dtoa_r+0x196>
 8025064:	920d      	str	r2, [sp, #52]	@ 0x34
 8025066:	e7c3      	b.n	8024ff0 <_dtoa_r+0x1ac>
 8025068:	9b06      	ldr	r3, [sp, #24]
 802506a:	9a04      	ldr	r2, [sp, #16]
 802506c:	1a9b      	subs	r3, r3, r2
 802506e:	9306      	str	r3, [sp, #24]
 8025070:	4253      	negs	r3, r2
 8025072:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025074:	2300      	movs	r3, #0
 8025076:	9314      	str	r3, [sp, #80]	@ 0x50
 8025078:	e7c5      	b.n	8025006 <_dtoa_r+0x1c2>
 802507a:	2300      	movs	r3, #0
 802507c:	9310      	str	r3, [sp, #64]	@ 0x40
 802507e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025080:	930e      	str	r3, [sp, #56]	@ 0x38
 8025082:	9309      	str	r3, [sp, #36]	@ 0x24
 8025084:	2b00      	cmp	r3, #0
 8025086:	dc13      	bgt.n	80250b0 <_dtoa_r+0x26c>
 8025088:	2301      	movs	r3, #1
 802508a:	001a      	movs	r2, r3
 802508c:	930e      	str	r3, [sp, #56]	@ 0x38
 802508e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025090:	9223      	str	r2, [sp, #140]	@ 0x8c
 8025092:	e00d      	b.n	80250b0 <_dtoa_r+0x26c>
 8025094:	2301      	movs	r3, #1
 8025096:	e7f1      	b.n	802507c <_dtoa_r+0x238>
 8025098:	2300      	movs	r3, #0
 802509a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802509c:	9310      	str	r3, [sp, #64]	@ 0x40
 802509e:	4694      	mov	ip, r2
 80250a0:	9b04      	ldr	r3, [sp, #16]
 80250a2:	4463      	add	r3, ip
 80250a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80250a6:	3301      	adds	r3, #1
 80250a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80250aa:	2b00      	cmp	r3, #0
 80250ac:	dc00      	bgt.n	80250b0 <_dtoa_r+0x26c>
 80250ae:	2301      	movs	r3, #1
 80250b0:	9a03      	ldr	r2, [sp, #12]
 80250b2:	2100      	movs	r1, #0
 80250b4:	69d0      	ldr	r0, [r2, #28]
 80250b6:	2204      	movs	r2, #4
 80250b8:	0015      	movs	r5, r2
 80250ba:	3514      	adds	r5, #20
 80250bc:	429d      	cmp	r5, r3
 80250be:	d91b      	bls.n	80250f8 <_dtoa_r+0x2b4>
 80250c0:	6041      	str	r1, [r0, #4]
 80250c2:	9803      	ldr	r0, [sp, #12]
 80250c4:	f001 f924 	bl	8026310 <_Balloc>
 80250c8:	9008      	str	r0, [sp, #32]
 80250ca:	2800      	cmp	r0, #0
 80250cc:	d117      	bne.n	80250fe <_dtoa_r+0x2ba>
 80250ce:	21b0      	movs	r1, #176	@ 0xb0
 80250d0:	4b42      	ldr	r3, [pc, #264]	@ (80251dc <_dtoa_r+0x398>)
 80250d2:	482e      	ldr	r0, [pc, #184]	@ (802518c <_dtoa_r+0x348>)
 80250d4:	9a08      	ldr	r2, [sp, #32]
 80250d6:	31ff      	adds	r1, #255	@ 0xff
 80250d8:	e6c9      	b.n	8024e6e <_dtoa_r+0x2a>
 80250da:	2301      	movs	r3, #1
 80250dc:	e7dd      	b.n	802509a <_dtoa_r+0x256>
 80250de:	2300      	movs	r3, #0
 80250e0:	9410      	str	r4, [sp, #64]	@ 0x40
 80250e2:	9322      	str	r3, [sp, #136]	@ 0x88
 80250e4:	3b01      	subs	r3, #1
 80250e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80250e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80250ea:	2200      	movs	r2, #0
 80250ec:	3313      	adds	r3, #19
 80250ee:	e7cf      	b.n	8025090 <_dtoa_r+0x24c>
 80250f0:	2301      	movs	r3, #1
 80250f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80250f4:	3b02      	subs	r3, #2
 80250f6:	e7f6      	b.n	80250e6 <_dtoa_r+0x2a2>
 80250f8:	3101      	adds	r1, #1
 80250fa:	0052      	lsls	r2, r2, #1
 80250fc:	e7dc      	b.n	80250b8 <_dtoa_r+0x274>
 80250fe:	9b03      	ldr	r3, [sp, #12]
 8025100:	9a08      	ldr	r2, [sp, #32]
 8025102:	69db      	ldr	r3, [r3, #28]
 8025104:	601a      	str	r2, [r3, #0]
 8025106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025108:	2b0e      	cmp	r3, #14
 802510a:	d900      	bls.n	802510e <_dtoa_r+0x2ca>
 802510c:	e0d9      	b.n	80252c2 <_dtoa_r+0x47e>
 802510e:	2c00      	cmp	r4, #0
 8025110:	d100      	bne.n	8025114 <_dtoa_r+0x2d0>
 8025112:	e0d6      	b.n	80252c2 <_dtoa_r+0x47e>
 8025114:	9b04      	ldr	r3, [sp, #16]
 8025116:	2b00      	cmp	r3, #0
 8025118:	dd64      	ble.n	80251e4 <_dtoa_r+0x3a0>
 802511a:	210f      	movs	r1, #15
 802511c:	9a04      	ldr	r2, [sp, #16]
 802511e:	4b2b      	ldr	r3, [pc, #172]	@ (80251cc <_dtoa_r+0x388>)
 8025120:	400a      	ands	r2, r1
 8025122:	00d2      	lsls	r2, r2, #3
 8025124:	189b      	adds	r3, r3, r2
 8025126:	681e      	ldr	r6, [r3, #0]
 8025128:	685f      	ldr	r7, [r3, #4]
 802512a:	9b04      	ldr	r3, [sp, #16]
 802512c:	2402      	movs	r4, #2
 802512e:	111d      	asrs	r5, r3, #4
 8025130:	05db      	lsls	r3, r3, #23
 8025132:	d50a      	bpl.n	802514a <_dtoa_r+0x306>
 8025134:	4b2a      	ldr	r3, [pc, #168]	@ (80251e0 <_dtoa_r+0x39c>)
 8025136:	400d      	ands	r5, r1
 8025138:	6a1a      	ldr	r2, [r3, #32]
 802513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802513c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802513e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025140:	f7dc fe38 	bl	8001db4 <__aeabi_ddiv>
 8025144:	900a      	str	r0, [sp, #40]	@ 0x28
 8025146:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025148:	3401      	adds	r4, #1
 802514a:	4b25      	ldr	r3, [pc, #148]	@ (80251e0 <_dtoa_r+0x39c>)
 802514c:	930c      	str	r3, [sp, #48]	@ 0x30
 802514e:	2d00      	cmp	r5, #0
 8025150:	d108      	bne.n	8025164 <_dtoa_r+0x320>
 8025152:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025154:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025156:	0032      	movs	r2, r6
 8025158:	003b      	movs	r3, r7
 802515a:	f7dc fe2b 	bl	8001db4 <__aeabi_ddiv>
 802515e:	900a      	str	r0, [sp, #40]	@ 0x28
 8025160:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025162:	e05a      	b.n	802521a <_dtoa_r+0x3d6>
 8025164:	2301      	movs	r3, #1
 8025166:	421d      	tst	r5, r3
 8025168:	d009      	beq.n	802517e <_dtoa_r+0x33a>
 802516a:	18e4      	adds	r4, r4, r3
 802516c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802516e:	0030      	movs	r0, r6
 8025170:	681a      	ldr	r2, [r3, #0]
 8025172:	685b      	ldr	r3, [r3, #4]
 8025174:	0039      	movs	r1, r7
 8025176:	f7dd fa61 	bl	800263c <__aeabi_dmul>
 802517a:	0006      	movs	r6, r0
 802517c:	000f      	movs	r7, r1
 802517e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025180:	106d      	asrs	r5, r5, #1
 8025182:	3308      	adds	r3, #8
 8025184:	e7e2      	b.n	802514c <_dtoa_r+0x308>
 8025186:	46c0      	nop			@ (mov r8, r8)
 8025188:	0802d37a 	.word	0x0802d37a
 802518c:	0802d391 	.word	0x0802d391
 8025190:	7ff00000 	.word	0x7ff00000
 8025194:	0000270f 	.word	0x0000270f
 8025198:	0802d376 	.word	0x0802d376
 802519c:	0802d379 	.word	0x0802d379
 80251a0:	0802d342 	.word	0x0802d342
 80251a4:	0802d341 	.word	0x0802d341
 80251a8:	3ff00000 	.word	0x3ff00000
 80251ac:	fffffc01 	.word	0xfffffc01
 80251b0:	3ff80000 	.word	0x3ff80000
 80251b4:	636f4361 	.word	0x636f4361
 80251b8:	3fd287a7 	.word	0x3fd287a7
 80251bc:	8b60c8b3 	.word	0x8b60c8b3
 80251c0:	3fc68a28 	.word	0x3fc68a28
 80251c4:	509f79fb 	.word	0x509f79fb
 80251c8:	3fd34413 	.word	0x3fd34413
 80251cc:	0802d4e8 	.word	0x0802d4e8
 80251d0:	00000432 	.word	0x00000432
 80251d4:	00000412 	.word	0x00000412
 80251d8:	fe100000 	.word	0xfe100000
 80251dc:	0802d3e9 	.word	0x0802d3e9
 80251e0:	0802d4c0 	.word	0x0802d4c0
 80251e4:	9b04      	ldr	r3, [sp, #16]
 80251e6:	2402      	movs	r4, #2
 80251e8:	2b00      	cmp	r3, #0
 80251ea:	d016      	beq.n	802521a <_dtoa_r+0x3d6>
 80251ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80251ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80251f0:	220f      	movs	r2, #15
 80251f2:	425d      	negs	r5, r3
 80251f4:	402a      	ands	r2, r5
 80251f6:	4bd7      	ldr	r3, [pc, #860]	@ (8025554 <_dtoa_r+0x710>)
 80251f8:	00d2      	lsls	r2, r2, #3
 80251fa:	189b      	adds	r3, r3, r2
 80251fc:	681a      	ldr	r2, [r3, #0]
 80251fe:	685b      	ldr	r3, [r3, #4]
 8025200:	f7dd fa1c 	bl	800263c <__aeabi_dmul>
 8025204:	2701      	movs	r7, #1
 8025206:	2300      	movs	r3, #0
 8025208:	900a      	str	r0, [sp, #40]	@ 0x28
 802520a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802520c:	4ed2      	ldr	r6, [pc, #840]	@ (8025558 <_dtoa_r+0x714>)
 802520e:	112d      	asrs	r5, r5, #4
 8025210:	2d00      	cmp	r5, #0
 8025212:	d000      	beq.n	8025216 <_dtoa_r+0x3d2>
 8025214:	e0ba      	b.n	802538c <_dtoa_r+0x548>
 8025216:	2b00      	cmp	r3, #0
 8025218:	d1a1      	bne.n	802515e <_dtoa_r+0x31a>
 802521a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802521c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802521e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025220:	2b00      	cmp	r3, #0
 8025222:	d100      	bne.n	8025226 <_dtoa_r+0x3e2>
 8025224:	e0bd      	b.n	80253a2 <_dtoa_r+0x55e>
 8025226:	2200      	movs	r2, #0
 8025228:	0030      	movs	r0, r6
 802522a:	0039      	movs	r1, r7
 802522c:	4bcb      	ldr	r3, [pc, #812]	@ (802555c <_dtoa_r+0x718>)
 802522e:	f7db f945 	bl	80004bc <__aeabi_dcmplt>
 8025232:	2800      	cmp	r0, #0
 8025234:	d100      	bne.n	8025238 <_dtoa_r+0x3f4>
 8025236:	e0b4      	b.n	80253a2 <_dtoa_r+0x55e>
 8025238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802523a:	2b00      	cmp	r3, #0
 802523c:	d100      	bne.n	8025240 <_dtoa_r+0x3fc>
 802523e:	e0b0      	b.n	80253a2 <_dtoa_r+0x55e>
 8025240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025242:	2b00      	cmp	r3, #0
 8025244:	dd39      	ble.n	80252ba <_dtoa_r+0x476>
 8025246:	9b04      	ldr	r3, [sp, #16]
 8025248:	2200      	movs	r2, #0
 802524a:	3b01      	subs	r3, #1
 802524c:	930c      	str	r3, [sp, #48]	@ 0x30
 802524e:	0030      	movs	r0, r6
 8025250:	4bc3      	ldr	r3, [pc, #780]	@ (8025560 <_dtoa_r+0x71c>)
 8025252:	0039      	movs	r1, r7
 8025254:	f7dd f9f2 	bl	800263c <__aeabi_dmul>
 8025258:	900a      	str	r0, [sp, #40]	@ 0x28
 802525a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802525c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802525e:	3401      	adds	r4, #1
 8025260:	0020      	movs	r0, r4
 8025262:	9311      	str	r3, [sp, #68]	@ 0x44
 8025264:	f7de f8ac 	bl	80033c0 <__aeabi_i2d>
 8025268:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802526a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802526c:	f7dd f9e6 	bl	800263c <__aeabi_dmul>
 8025270:	4bbc      	ldr	r3, [pc, #752]	@ (8025564 <_dtoa_r+0x720>)
 8025272:	2200      	movs	r2, #0
 8025274:	f7dc fa3a 	bl	80016ec <__aeabi_dadd>
 8025278:	4bbb      	ldr	r3, [pc, #748]	@ (8025568 <_dtoa_r+0x724>)
 802527a:	0006      	movs	r6, r0
 802527c:	18cf      	adds	r7, r1, r3
 802527e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025280:	2b00      	cmp	r3, #0
 8025282:	d000      	beq.n	8025286 <_dtoa_r+0x442>
 8025284:	e091      	b.n	80253aa <_dtoa_r+0x566>
 8025286:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025288:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802528a:	2200      	movs	r2, #0
 802528c:	4bb7      	ldr	r3, [pc, #732]	@ (802556c <_dtoa_r+0x728>)
 802528e:	f7dd fc9d 	bl	8002bcc <__aeabi_dsub>
 8025292:	0032      	movs	r2, r6
 8025294:	003b      	movs	r3, r7
 8025296:	0004      	movs	r4, r0
 8025298:	000d      	movs	r5, r1
 802529a:	f7db f923 	bl	80004e4 <__aeabi_dcmpgt>
 802529e:	2800      	cmp	r0, #0
 80252a0:	d000      	beq.n	80252a4 <_dtoa_r+0x460>
 80252a2:	e29d      	b.n	80257e0 <_dtoa_r+0x99c>
 80252a4:	2180      	movs	r1, #128	@ 0x80
 80252a6:	0609      	lsls	r1, r1, #24
 80252a8:	187b      	adds	r3, r7, r1
 80252aa:	0032      	movs	r2, r6
 80252ac:	0020      	movs	r0, r4
 80252ae:	0029      	movs	r1, r5
 80252b0:	f7db f904 	bl	80004bc <__aeabi_dcmplt>
 80252b4:	2800      	cmp	r0, #0
 80252b6:	d000      	beq.n	80252ba <_dtoa_r+0x476>
 80252b8:	e130      	b.n	802551c <_dtoa_r+0x6d8>
 80252ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80252bc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80252be:	930a      	str	r3, [sp, #40]	@ 0x28
 80252c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80252c2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80252c4:	2b00      	cmp	r3, #0
 80252c6:	da00      	bge.n	80252ca <_dtoa_r+0x486>
 80252c8:	e177      	b.n	80255ba <_dtoa_r+0x776>
 80252ca:	9a04      	ldr	r2, [sp, #16]
 80252cc:	2a0e      	cmp	r2, #14
 80252ce:	dd00      	ble.n	80252d2 <_dtoa_r+0x48e>
 80252d0:	e173      	b.n	80255ba <_dtoa_r+0x776>
 80252d2:	4ba0      	ldr	r3, [pc, #640]	@ (8025554 <_dtoa_r+0x710>)
 80252d4:	00d2      	lsls	r2, r2, #3
 80252d6:	189b      	adds	r3, r3, r2
 80252d8:	685c      	ldr	r4, [r3, #4]
 80252da:	681b      	ldr	r3, [r3, #0]
 80252dc:	9306      	str	r3, [sp, #24]
 80252de:	9407      	str	r4, [sp, #28]
 80252e0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80252e2:	2b00      	cmp	r3, #0
 80252e4:	da03      	bge.n	80252ee <_dtoa_r+0x4aa>
 80252e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80252e8:	2b00      	cmp	r3, #0
 80252ea:	dc00      	bgt.n	80252ee <_dtoa_r+0x4aa>
 80252ec:	e106      	b.n	80254fc <_dtoa_r+0x6b8>
 80252ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80252f0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80252f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80252f4:	9d08      	ldr	r5, [sp, #32]
 80252f6:	3b01      	subs	r3, #1
 80252f8:	195b      	adds	r3, r3, r5
 80252fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80252fc:	9a06      	ldr	r2, [sp, #24]
 80252fe:	9b07      	ldr	r3, [sp, #28]
 8025300:	0030      	movs	r0, r6
 8025302:	0039      	movs	r1, r7
 8025304:	f7dc fd56 	bl	8001db4 <__aeabi_ddiv>
 8025308:	f7de f81e 	bl	8003348 <__aeabi_d2iz>
 802530c:	9009      	str	r0, [sp, #36]	@ 0x24
 802530e:	f7de f857 	bl	80033c0 <__aeabi_i2d>
 8025312:	9a06      	ldr	r2, [sp, #24]
 8025314:	9b07      	ldr	r3, [sp, #28]
 8025316:	f7dd f991 	bl	800263c <__aeabi_dmul>
 802531a:	0002      	movs	r2, r0
 802531c:	000b      	movs	r3, r1
 802531e:	0030      	movs	r0, r6
 8025320:	0039      	movs	r1, r7
 8025322:	f7dd fc53 	bl	8002bcc <__aeabi_dsub>
 8025326:	002b      	movs	r3, r5
 8025328:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802532a:	3501      	adds	r5, #1
 802532c:	3230      	adds	r2, #48	@ 0x30
 802532e:	701a      	strb	r2, [r3, #0]
 8025330:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025332:	002c      	movs	r4, r5
 8025334:	429a      	cmp	r2, r3
 8025336:	d000      	beq.n	802533a <_dtoa_r+0x4f6>
 8025338:	e131      	b.n	802559e <_dtoa_r+0x75a>
 802533a:	0002      	movs	r2, r0
 802533c:	000b      	movs	r3, r1
 802533e:	f7dc f9d5 	bl	80016ec <__aeabi_dadd>
 8025342:	9a06      	ldr	r2, [sp, #24]
 8025344:	9b07      	ldr	r3, [sp, #28]
 8025346:	0006      	movs	r6, r0
 8025348:	000f      	movs	r7, r1
 802534a:	f7db f8cb 	bl	80004e4 <__aeabi_dcmpgt>
 802534e:	2800      	cmp	r0, #0
 8025350:	d000      	beq.n	8025354 <_dtoa_r+0x510>
 8025352:	e10f      	b.n	8025574 <_dtoa_r+0x730>
 8025354:	9a06      	ldr	r2, [sp, #24]
 8025356:	9b07      	ldr	r3, [sp, #28]
 8025358:	0030      	movs	r0, r6
 802535a:	0039      	movs	r1, r7
 802535c:	f7db f8a8 	bl	80004b0 <__aeabi_dcmpeq>
 8025360:	2800      	cmp	r0, #0
 8025362:	d003      	beq.n	802536c <_dtoa_r+0x528>
 8025364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025366:	07dd      	lsls	r5, r3, #31
 8025368:	d500      	bpl.n	802536c <_dtoa_r+0x528>
 802536a:	e103      	b.n	8025574 <_dtoa_r+0x730>
 802536c:	9905      	ldr	r1, [sp, #20]
 802536e:	9803      	ldr	r0, [sp, #12]
 8025370:	f001 f812 	bl	8026398 <_Bfree>
 8025374:	2300      	movs	r3, #0
 8025376:	7023      	strb	r3, [r4, #0]
 8025378:	9b04      	ldr	r3, [sp, #16]
 802537a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802537c:	3301      	adds	r3, #1
 802537e:	6013      	str	r3, [r2, #0]
 8025380:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025382:	2b00      	cmp	r3, #0
 8025384:	d100      	bne.n	8025388 <_dtoa_r+0x544>
 8025386:	e5a7      	b.n	8024ed8 <_dtoa_r+0x94>
 8025388:	601c      	str	r4, [r3, #0]
 802538a:	e5a5      	b.n	8024ed8 <_dtoa_r+0x94>
 802538c:	423d      	tst	r5, r7
 802538e:	d005      	beq.n	802539c <_dtoa_r+0x558>
 8025390:	6832      	ldr	r2, [r6, #0]
 8025392:	6873      	ldr	r3, [r6, #4]
 8025394:	f7dd f952 	bl	800263c <__aeabi_dmul>
 8025398:	003b      	movs	r3, r7
 802539a:	3401      	adds	r4, #1
 802539c:	106d      	asrs	r5, r5, #1
 802539e:	3608      	adds	r6, #8
 80253a0:	e736      	b.n	8025210 <_dtoa_r+0x3cc>
 80253a2:	9b04      	ldr	r3, [sp, #16]
 80253a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80253a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80253a8:	e75a      	b.n	8025260 <_dtoa_r+0x41c>
 80253aa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80253ac:	4b69      	ldr	r3, [pc, #420]	@ (8025554 <_dtoa_r+0x710>)
 80253ae:	3a01      	subs	r2, #1
 80253b0:	00d2      	lsls	r2, r2, #3
 80253b2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80253b4:	189b      	adds	r3, r3, r2
 80253b6:	681a      	ldr	r2, [r3, #0]
 80253b8:	685b      	ldr	r3, [r3, #4]
 80253ba:	2900      	cmp	r1, #0
 80253bc:	d04c      	beq.n	8025458 <_dtoa_r+0x614>
 80253be:	2000      	movs	r0, #0
 80253c0:	496b      	ldr	r1, [pc, #428]	@ (8025570 <_dtoa_r+0x72c>)
 80253c2:	f7dc fcf7 	bl	8001db4 <__aeabi_ddiv>
 80253c6:	0032      	movs	r2, r6
 80253c8:	003b      	movs	r3, r7
 80253ca:	f7dd fbff 	bl	8002bcc <__aeabi_dsub>
 80253ce:	9a08      	ldr	r2, [sp, #32]
 80253d0:	0006      	movs	r6, r0
 80253d2:	4694      	mov	ip, r2
 80253d4:	000f      	movs	r7, r1
 80253d6:	9b08      	ldr	r3, [sp, #32]
 80253d8:	9316      	str	r3, [sp, #88]	@ 0x58
 80253da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80253dc:	4463      	add	r3, ip
 80253de:	9311      	str	r3, [sp, #68]	@ 0x44
 80253e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80253e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80253e4:	f7dd ffb0 	bl	8003348 <__aeabi_d2iz>
 80253e8:	0005      	movs	r5, r0
 80253ea:	f7dd ffe9 	bl	80033c0 <__aeabi_i2d>
 80253ee:	0002      	movs	r2, r0
 80253f0:	000b      	movs	r3, r1
 80253f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80253f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80253f6:	f7dd fbe9 	bl	8002bcc <__aeabi_dsub>
 80253fa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80253fc:	3530      	adds	r5, #48	@ 0x30
 80253fe:	1c5c      	adds	r4, r3, #1
 8025400:	701d      	strb	r5, [r3, #0]
 8025402:	0032      	movs	r2, r6
 8025404:	003b      	movs	r3, r7
 8025406:	900a      	str	r0, [sp, #40]	@ 0x28
 8025408:	910b      	str	r1, [sp, #44]	@ 0x2c
 802540a:	f7db f857 	bl	80004bc <__aeabi_dcmplt>
 802540e:	2800      	cmp	r0, #0
 8025410:	d16a      	bne.n	80254e8 <_dtoa_r+0x6a4>
 8025412:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025414:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025416:	2000      	movs	r0, #0
 8025418:	4950      	ldr	r1, [pc, #320]	@ (802555c <_dtoa_r+0x718>)
 802541a:	f7dd fbd7 	bl	8002bcc <__aeabi_dsub>
 802541e:	0032      	movs	r2, r6
 8025420:	003b      	movs	r3, r7
 8025422:	f7db f84b 	bl	80004bc <__aeabi_dcmplt>
 8025426:	2800      	cmp	r0, #0
 8025428:	d000      	beq.n	802542c <_dtoa_r+0x5e8>
 802542a:	e0a5      	b.n	8025578 <_dtoa_r+0x734>
 802542c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802542e:	42a3      	cmp	r3, r4
 8025430:	d100      	bne.n	8025434 <_dtoa_r+0x5f0>
 8025432:	e742      	b.n	80252ba <_dtoa_r+0x476>
 8025434:	2200      	movs	r2, #0
 8025436:	0030      	movs	r0, r6
 8025438:	0039      	movs	r1, r7
 802543a:	4b49      	ldr	r3, [pc, #292]	@ (8025560 <_dtoa_r+0x71c>)
 802543c:	f7dd f8fe 	bl	800263c <__aeabi_dmul>
 8025440:	2200      	movs	r2, #0
 8025442:	0006      	movs	r6, r0
 8025444:	000f      	movs	r7, r1
 8025446:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025448:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802544a:	4b45      	ldr	r3, [pc, #276]	@ (8025560 <_dtoa_r+0x71c>)
 802544c:	f7dd f8f6 	bl	800263c <__aeabi_dmul>
 8025450:	9416      	str	r4, [sp, #88]	@ 0x58
 8025452:	900a      	str	r0, [sp, #40]	@ 0x28
 8025454:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025456:	e7c3      	b.n	80253e0 <_dtoa_r+0x59c>
 8025458:	0030      	movs	r0, r6
 802545a:	0039      	movs	r1, r7
 802545c:	f7dd f8ee 	bl	800263c <__aeabi_dmul>
 8025460:	9d08      	ldr	r5, [sp, #32]
 8025462:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025464:	002b      	movs	r3, r5
 8025466:	4694      	mov	ip, r2
 8025468:	9016      	str	r0, [sp, #88]	@ 0x58
 802546a:	9117      	str	r1, [sp, #92]	@ 0x5c
 802546c:	4463      	add	r3, ip
 802546e:	9319      	str	r3, [sp, #100]	@ 0x64
 8025470:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025472:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025474:	f7dd ff68 	bl	8003348 <__aeabi_d2iz>
 8025478:	0004      	movs	r4, r0
 802547a:	f7dd ffa1 	bl	80033c0 <__aeabi_i2d>
 802547e:	000b      	movs	r3, r1
 8025480:	0002      	movs	r2, r0
 8025482:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025484:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025486:	f7dd fba1 	bl	8002bcc <__aeabi_dsub>
 802548a:	3430      	adds	r4, #48	@ 0x30
 802548c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802548e:	702c      	strb	r4, [r5, #0]
 8025490:	3501      	adds	r5, #1
 8025492:	0006      	movs	r6, r0
 8025494:	000f      	movs	r7, r1
 8025496:	42ab      	cmp	r3, r5
 8025498:	d129      	bne.n	80254ee <_dtoa_r+0x6aa>
 802549a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802549c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802549e:	9b08      	ldr	r3, [sp, #32]
 80254a0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80254a2:	469c      	mov	ip, r3
 80254a4:	2200      	movs	r2, #0
 80254a6:	4b32      	ldr	r3, [pc, #200]	@ (8025570 <_dtoa_r+0x72c>)
 80254a8:	4464      	add	r4, ip
 80254aa:	f7dc f91f 	bl	80016ec <__aeabi_dadd>
 80254ae:	0002      	movs	r2, r0
 80254b0:	000b      	movs	r3, r1
 80254b2:	0030      	movs	r0, r6
 80254b4:	0039      	movs	r1, r7
 80254b6:	f7db f815 	bl	80004e4 <__aeabi_dcmpgt>
 80254ba:	2800      	cmp	r0, #0
 80254bc:	d15c      	bne.n	8025578 <_dtoa_r+0x734>
 80254be:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80254c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80254c2:	2000      	movs	r0, #0
 80254c4:	492a      	ldr	r1, [pc, #168]	@ (8025570 <_dtoa_r+0x72c>)
 80254c6:	f7dd fb81 	bl	8002bcc <__aeabi_dsub>
 80254ca:	0002      	movs	r2, r0
 80254cc:	000b      	movs	r3, r1
 80254ce:	0030      	movs	r0, r6
 80254d0:	0039      	movs	r1, r7
 80254d2:	f7da fff3 	bl	80004bc <__aeabi_dcmplt>
 80254d6:	2800      	cmp	r0, #0
 80254d8:	d100      	bne.n	80254dc <_dtoa_r+0x698>
 80254da:	e6ee      	b.n	80252ba <_dtoa_r+0x476>
 80254dc:	0023      	movs	r3, r4
 80254de:	3c01      	subs	r4, #1
 80254e0:	7822      	ldrb	r2, [r4, #0]
 80254e2:	2a30      	cmp	r2, #48	@ 0x30
 80254e4:	d0fa      	beq.n	80254dc <_dtoa_r+0x698>
 80254e6:	001c      	movs	r4, r3
 80254e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80254ea:	9304      	str	r3, [sp, #16]
 80254ec:	e73e      	b.n	802536c <_dtoa_r+0x528>
 80254ee:	2200      	movs	r2, #0
 80254f0:	4b1b      	ldr	r3, [pc, #108]	@ (8025560 <_dtoa_r+0x71c>)
 80254f2:	f7dd f8a3 	bl	800263c <__aeabi_dmul>
 80254f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80254f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80254fa:	e7b9      	b.n	8025470 <_dtoa_r+0x62c>
 80254fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80254fe:	2b00      	cmp	r3, #0
 8025500:	d10c      	bne.n	802551c <_dtoa_r+0x6d8>
 8025502:	9806      	ldr	r0, [sp, #24]
 8025504:	9907      	ldr	r1, [sp, #28]
 8025506:	2200      	movs	r2, #0
 8025508:	4b18      	ldr	r3, [pc, #96]	@ (802556c <_dtoa_r+0x728>)
 802550a:	f7dd f897 	bl	800263c <__aeabi_dmul>
 802550e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025510:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025512:	f7da fff1 	bl	80004f8 <__aeabi_dcmpge>
 8025516:	2800      	cmp	r0, #0
 8025518:	d100      	bne.n	802551c <_dtoa_r+0x6d8>
 802551a:	e164      	b.n	80257e6 <_dtoa_r+0x9a2>
 802551c:	2600      	movs	r6, #0
 802551e:	0037      	movs	r7, r6
 8025520:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025522:	9c08      	ldr	r4, [sp, #32]
 8025524:	43db      	mvns	r3, r3
 8025526:	930c      	str	r3, [sp, #48]	@ 0x30
 8025528:	2300      	movs	r3, #0
 802552a:	9304      	str	r3, [sp, #16]
 802552c:	0031      	movs	r1, r6
 802552e:	9803      	ldr	r0, [sp, #12]
 8025530:	f000 ff32 	bl	8026398 <_Bfree>
 8025534:	2f00      	cmp	r7, #0
 8025536:	d0d7      	beq.n	80254e8 <_dtoa_r+0x6a4>
 8025538:	9b04      	ldr	r3, [sp, #16]
 802553a:	2b00      	cmp	r3, #0
 802553c:	d005      	beq.n	802554a <_dtoa_r+0x706>
 802553e:	42bb      	cmp	r3, r7
 8025540:	d003      	beq.n	802554a <_dtoa_r+0x706>
 8025542:	0019      	movs	r1, r3
 8025544:	9803      	ldr	r0, [sp, #12]
 8025546:	f000 ff27 	bl	8026398 <_Bfree>
 802554a:	0039      	movs	r1, r7
 802554c:	9803      	ldr	r0, [sp, #12]
 802554e:	f000 ff23 	bl	8026398 <_Bfree>
 8025552:	e7c9      	b.n	80254e8 <_dtoa_r+0x6a4>
 8025554:	0802d4e8 	.word	0x0802d4e8
 8025558:	0802d4c0 	.word	0x0802d4c0
 802555c:	3ff00000 	.word	0x3ff00000
 8025560:	40240000 	.word	0x40240000
 8025564:	401c0000 	.word	0x401c0000
 8025568:	fcc00000 	.word	0xfcc00000
 802556c:	40140000 	.word	0x40140000
 8025570:	3fe00000 	.word	0x3fe00000
 8025574:	9b04      	ldr	r3, [sp, #16]
 8025576:	930c      	str	r3, [sp, #48]	@ 0x30
 8025578:	0023      	movs	r3, r4
 802557a:	001c      	movs	r4, r3
 802557c:	3b01      	subs	r3, #1
 802557e:	781a      	ldrb	r2, [r3, #0]
 8025580:	2a39      	cmp	r2, #57	@ 0x39
 8025582:	d108      	bne.n	8025596 <_dtoa_r+0x752>
 8025584:	9a08      	ldr	r2, [sp, #32]
 8025586:	429a      	cmp	r2, r3
 8025588:	d1f7      	bne.n	802557a <_dtoa_r+0x736>
 802558a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802558c:	9908      	ldr	r1, [sp, #32]
 802558e:	3201      	adds	r2, #1
 8025590:	920c      	str	r2, [sp, #48]	@ 0x30
 8025592:	2230      	movs	r2, #48	@ 0x30
 8025594:	700a      	strb	r2, [r1, #0]
 8025596:	781a      	ldrb	r2, [r3, #0]
 8025598:	3201      	adds	r2, #1
 802559a:	701a      	strb	r2, [r3, #0]
 802559c:	e7a4      	b.n	80254e8 <_dtoa_r+0x6a4>
 802559e:	2200      	movs	r2, #0
 80255a0:	4bc6      	ldr	r3, [pc, #792]	@ (80258bc <_dtoa_r+0xa78>)
 80255a2:	f7dd f84b 	bl	800263c <__aeabi_dmul>
 80255a6:	2200      	movs	r2, #0
 80255a8:	2300      	movs	r3, #0
 80255aa:	0006      	movs	r6, r0
 80255ac:	000f      	movs	r7, r1
 80255ae:	f7da ff7f 	bl	80004b0 <__aeabi_dcmpeq>
 80255b2:	2800      	cmp	r0, #0
 80255b4:	d100      	bne.n	80255b8 <_dtoa_r+0x774>
 80255b6:	e6a1      	b.n	80252fc <_dtoa_r+0x4b8>
 80255b8:	e6d8      	b.n	802536c <_dtoa_r+0x528>
 80255ba:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80255bc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80255be:	9c06      	ldr	r4, [sp, #24]
 80255c0:	2f00      	cmp	r7, #0
 80255c2:	d014      	beq.n	80255ee <_dtoa_r+0x7aa>
 80255c4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80255c6:	2a01      	cmp	r2, #1
 80255c8:	dd00      	ble.n	80255cc <_dtoa_r+0x788>
 80255ca:	e0c8      	b.n	802575e <_dtoa_r+0x91a>
 80255cc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80255ce:	2a00      	cmp	r2, #0
 80255d0:	d100      	bne.n	80255d4 <_dtoa_r+0x790>
 80255d2:	e0be      	b.n	8025752 <_dtoa_r+0x90e>
 80255d4:	4aba      	ldr	r2, [pc, #744]	@ (80258c0 <_dtoa_r+0xa7c>)
 80255d6:	189b      	adds	r3, r3, r2
 80255d8:	9a06      	ldr	r2, [sp, #24]
 80255da:	2101      	movs	r1, #1
 80255dc:	18d2      	adds	r2, r2, r3
 80255de:	9206      	str	r2, [sp, #24]
 80255e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80255e2:	9803      	ldr	r0, [sp, #12]
 80255e4:	18d3      	adds	r3, r2, r3
 80255e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80255e8:	f000 ffda 	bl	80265a0 <__i2b>
 80255ec:	0007      	movs	r7, r0
 80255ee:	2c00      	cmp	r4, #0
 80255f0:	d00e      	beq.n	8025610 <_dtoa_r+0x7cc>
 80255f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80255f4:	2b00      	cmp	r3, #0
 80255f6:	dd0b      	ble.n	8025610 <_dtoa_r+0x7cc>
 80255f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80255fa:	0023      	movs	r3, r4
 80255fc:	4294      	cmp	r4, r2
 80255fe:	dd00      	ble.n	8025602 <_dtoa_r+0x7be>
 8025600:	0013      	movs	r3, r2
 8025602:	9a06      	ldr	r2, [sp, #24]
 8025604:	1ae4      	subs	r4, r4, r3
 8025606:	1ad2      	subs	r2, r2, r3
 8025608:	9206      	str	r2, [sp, #24]
 802560a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802560c:	1ad3      	subs	r3, r2, r3
 802560e:	930d      	str	r3, [sp, #52]	@ 0x34
 8025610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025612:	2b00      	cmp	r3, #0
 8025614:	d01f      	beq.n	8025656 <_dtoa_r+0x812>
 8025616:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025618:	2b00      	cmp	r3, #0
 802561a:	d100      	bne.n	802561e <_dtoa_r+0x7da>
 802561c:	e0b5      	b.n	802578a <_dtoa_r+0x946>
 802561e:	2d00      	cmp	r5, #0
 8025620:	d010      	beq.n	8025644 <_dtoa_r+0x800>
 8025622:	0039      	movs	r1, r7
 8025624:	002a      	movs	r2, r5
 8025626:	9803      	ldr	r0, [sp, #12]
 8025628:	f001 f884 	bl	8026734 <__pow5mult>
 802562c:	9a05      	ldr	r2, [sp, #20]
 802562e:	0001      	movs	r1, r0
 8025630:	0007      	movs	r7, r0
 8025632:	9803      	ldr	r0, [sp, #12]
 8025634:	f000 ffcc 	bl	80265d0 <__multiply>
 8025638:	0006      	movs	r6, r0
 802563a:	9905      	ldr	r1, [sp, #20]
 802563c:	9803      	ldr	r0, [sp, #12]
 802563e:	f000 feab 	bl	8026398 <_Bfree>
 8025642:	9605      	str	r6, [sp, #20]
 8025644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025646:	1b5a      	subs	r2, r3, r5
 8025648:	42ab      	cmp	r3, r5
 802564a:	d004      	beq.n	8025656 <_dtoa_r+0x812>
 802564c:	9905      	ldr	r1, [sp, #20]
 802564e:	9803      	ldr	r0, [sp, #12]
 8025650:	f001 f870 	bl	8026734 <__pow5mult>
 8025654:	9005      	str	r0, [sp, #20]
 8025656:	2101      	movs	r1, #1
 8025658:	9803      	ldr	r0, [sp, #12]
 802565a:	f000 ffa1 	bl	80265a0 <__i2b>
 802565e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025660:	0006      	movs	r6, r0
 8025662:	2b00      	cmp	r3, #0
 8025664:	d100      	bne.n	8025668 <_dtoa_r+0x824>
 8025666:	e1bc      	b.n	80259e2 <_dtoa_r+0xb9e>
 8025668:	001a      	movs	r2, r3
 802566a:	0001      	movs	r1, r0
 802566c:	9803      	ldr	r0, [sp, #12]
 802566e:	f001 f861 	bl	8026734 <__pow5mult>
 8025672:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025674:	0006      	movs	r6, r0
 8025676:	2500      	movs	r5, #0
 8025678:	2b01      	cmp	r3, #1
 802567a:	dc16      	bgt.n	80256aa <_dtoa_r+0x866>
 802567c:	2500      	movs	r5, #0
 802567e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025680:	42ab      	cmp	r3, r5
 8025682:	d10e      	bne.n	80256a2 <_dtoa_r+0x85e>
 8025684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025686:	031b      	lsls	r3, r3, #12
 8025688:	42ab      	cmp	r3, r5
 802568a:	d10a      	bne.n	80256a2 <_dtoa_r+0x85e>
 802568c:	4b8d      	ldr	r3, [pc, #564]	@ (80258c4 <_dtoa_r+0xa80>)
 802568e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025690:	4213      	tst	r3, r2
 8025692:	d006      	beq.n	80256a2 <_dtoa_r+0x85e>
 8025694:	9b06      	ldr	r3, [sp, #24]
 8025696:	3501      	adds	r5, #1
 8025698:	3301      	adds	r3, #1
 802569a:	9306      	str	r3, [sp, #24]
 802569c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802569e:	3301      	adds	r3, #1
 80256a0:	930d      	str	r3, [sp, #52]	@ 0x34
 80256a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80256a4:	2001      	movs	r0, #1
 80256a6:	2b00      	cmp	r3, #0
 80256a8:	d008      	beq.n	80256bc <_dtoa_r+0x878>
 80256aa:	6933      	ldr	r3, [r6, #16]
 80256ac:	3303      	adds	r3, #3
 80256ae:	009b      	lsls	r3, r3, #2
 80256b0:	18f3      	adds	r3, r6, r3
 80256b2:	6858      	ldr	r0, [r3, #4]
 80256b4:	f000 ff24 	bl	8026500 <__hi0bits>
 80256b8:	2320      	movs	r3, #32
 80256ba:	1a18      	subs	r0, r3, r0
 80256bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80256be:	1818      	adds	r0, r3, r0
 80256c0:	0002      	movs	r2, r0
 80256c2:	231f      	movs	r3, #31
 80256c4:	401a      	ands	r2, r3
 80256c6:	4218      	tst	r0, r3
 80256c8:	d065      	beq.n	8025796 <_dtoa_r+0x952>
 80256ca:	3301      	adds	r3, #1
 80256cc:	1a9b      	subs	r3, r3, r2
 80256ce:	2b04      	cmp	r3, #4
 80256d0:	dd5d      	ble.n	802578e <_dtoa_r+0x94a>
 80256d2:	231c      	movs	r3, #28
 80256d4:	1a9b      	subs	r3, r3, r2
 80256d6:	9a06      	ldr	r2, [sp, #24]
 80256d8:	18e4      	adds	r4, r4, r3
 80256da:	18d2      	adds	r2, r2, r3
 80256dc:	9206      	str	r2, [sp, #24]
 80256de:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80256e0:	18d3      	adds	r3, r2, r3
 80256e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80256e4:	9b06      	ldr	r3, [sp, #24]
 80256e6:	2b00      	cmp	r3, #0
 80256e8:	dd05      	ble.n	80256f6 <_dtoa_r+0x8b2>
 80256ea:	001a      	movs	r2, r3
 80256ec:	9905      	ldr	r1, [sp, #20]
 80256ee:	9803      	ldr	r0, [sp, #12]
 80256f0:	f001 f87c 	bl	80267ec <__lshift>
 80256f4:	9005      	str	r0, [sp, #20]
 80256f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80256f8:	2b00      	cmp	r3, #0
 80256fa:	dd05      	ble.n	8025708 <_dtoa_r+0x8c4>
 80256fc:	0031      	movs	r1, r6
 80256fe:	001a      	movs	r2, r3
 8025700:	9803      	ldr	r0, [sp, #12]
 8025702:	f001 f873 	bl	80267ec <__lshift>
 8025706:	0006      	movs	r6, r0
 8025708:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802570a:	2b00      	cmp	r3, #0
 802570c:	d045      	beq.n	802579a <_dtoa_r+0x956>
 802570e:	0031      	movs	r1, r6
 8025710:	9805      	ldr	r0, [sp, #20]
 8025712:	f001 f8d7 	bl	80268c4 <__mcmp>
 8025716:	2800      	cmp	r0, #0
 8025718:	da3f      	bge.n	802579a <_dtoa_r+0x956>
 802571a:	9b04      	ldr	r3, [sp, #16]
 802571c:	220a      	movs	r2, #10
 802571e:	3b01      	subs	r3, #1
 8025720:	930c      	str	r3, [sp, #48]	@ 0x30
 8025722:	9905      	ldr	r1, [sp, #20]
 8025724:	2300      	movs	r3, #0
 8025726:	9803      	ldr	r0, [sp, #12]
 8025728:	f000 fe5a 	bl	80263e0 <__multadd>
 802572c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802572e:	9005      	str	r0, [sp, #20]
 8025730:	2b00      	cmp	r3, #0
 8025732:	d100      	bne.n	8025736 <_dtoa_r+0x8f2>
 8025734:	e15c      	b.n	80259f0 <_dtoa_r+0xbac>
 8025736:	2300      	movs	r3, #0
 8025738:	0039      	movs	r1, r7
 802573a:	220a      	movs	r2, #10
 802573c:	9803      	ldr	r0, [sp, #12]
 802573e:	f000 fe4f 	bl	80263e0 <__multadd>
 8025742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025744:	0007      	movs	r7, r0
 8025746:	2b00      	cmp	r3, #0
 8025748:	dc55      	bgt.n	80257f6 <_dtoa_r+0x9b2>
 802574a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802574c:	2b02      	cmp	r3, #2
 802574e:	dc2d      	bgt.n	80257ac <_dtoa_r+0x968>
 8025750:	e051      	b.n	80257f6 <_dtoa_r+0x9b2>
 8025752:	2336      	movs	r3, #54	@ 0x36
 8025754:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8025756:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8025758:	9c06      	ldr	r4, [sp, #24]
 802575a:	1a9b      	subs	r3, r3, r2
 802575c:	e73c      	b.n	80255d8 <_dtoa_r+0x794>
 802575e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025760:	1e5d      	subs	r5, r3, #1
 8025762:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025764:	42ab      	cmp	r3, r5
 8025766:	db08      	blt.n	802577a <_dtoa_r+0x936>
 8025768:	1b5d      	subs	r5, r3, r5
 802576a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802576c:	9c06      	ldr	r4, [sp, #24]
 802576e:	2b00      	cmp	r3, #0
 8025770:	db00      	blt.n	8025774 <_dtoa_r+0x930>
 8025772:	e731      	b.n	80255d8 <_dtoa_r+0x794>
 8025774:	1ae4      	subs	r4, r4, r3
 8025776:	2300      	movs	r3, #0
 8025778:	e72e      	b.n	80255d8 <_dtoa_r+0x794>
 802577a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802577c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802577e:	1aeb      	subs	r3, r5, r3
 8025780:	18d3      	adds	r3, r2, r3
 8025782:	950f      	str	r5, [sp, #60]	@ 0x3c
 8025784:	9314      	str	r3, [sp, #80]	@ 0x50
 8025786:	2500      	movs	r5, #0
 8025788:	e7ef      	b.n	802576a <_dtoa_r+0x926>
 802578a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802578c:	e75e      	b.n	802564c <_dtoa_r+0x808>
 802578e:	2b04      	cmp	r3, #4
 8025790:	d0a8      	beq.n	80256e4 <_dtoa_r+0x8a0>
 8025792:	331c      	adds	r3, #28
 8025794:	e79f      	b.n	80256d6 <_dtoa_r+0x892>
 8025796:	0013      	movs	r3, r2
 8025798:	e7fb      	b.n	8025792 <_dtoa_r+0x94e>
 802579a:	9b04      	ldr	r3, [sp, #16]
 802579c:	930c      	str	r3, [sp, #48]	@ 0x30
 802579e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80257a2:	2b00      	cmp	r3, #0
 80257a4:	dc23      	bgt.n	80257ee <_dtoa_r+0x9aa>
 80257a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80257a8:	2b02      	cmp	r3, #2
 80257aa:	dd20      	ble.n	80257ee <_dtoa_r+0x9aa>
 80257ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80257ae:	2b00      	cmp	r3, #0
 80257b0:	d000      	beq.n	80257b4 <_dtoa_r+0x970>
 80257b2:	e6b5      	b.n	8025520 <_dtoa_r+0x6dc>
 80257b4:	0031      	movs	r1, r6
 80257b6:	2205      	movs	r2, #5
 80257b8:	9803      	ldr	r0, [sp, #12]
 80257ba:	f000 fe11 	bl	80263e0 <__multadd>
 80257be:	0006      	movs	r6, r0
 80257c0:	0001      	movs	r1, r0
 80257c2:	9805      	ldr	r0, [sp, #20]
 80257c4:	f001 f87e 	bl	80268c4 <__mcmp>
 80257c8:	2800      	cmp	r0, #0
 80257ca:	dc00      	bgt.n	80257ce <_dtoa_r+0x98a>
 80257cc:	e6a8      	b.n	8025520 <_dtoa_r+0x6dc>
 80257ce:	9b08      	ldr	r3, [sp, #32]
 80257d0:	9a08      	ldr	r2, [sp, #32]
 80257d2:	1c5c      	adds	r4, r3, #1
 80257d4:	2331      	movs	r3, #49	@ 0x31
 80257d6:	7013      	strb	r3, [r2, #0]
 80257d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80257da:	3301      	adds	r3, #1
 80257dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80257de:	e6a3      	b.n	8025528 <_dtoa_r+0x6e4>
 80257e0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80257e2:	0037      	movs	r7, r6
 80257e4:	e7f3      	b.n	80257ce <_dtoa_r+0x98a>
 80257e6:	9b04      	ldr	r3, [sp, #16]
 80257e8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80257ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80257ec:	e7f9      	b.n	80257e2 <_dtoa_r+0x99e>
 80257ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80257f0:	2b00      	cmp	r3, #0
 80257f2:	d100      	bne.n	80257f6 <_dtoa_r+0x9b2>
 80257f4:	e100      	b.n	80259f8 <_dtoa_r+0xbb4>
 80257f6:	2c00      	cmp	r4, #0
 80257f8:	dd05      	ble.n	8025806 <_dtoa_r+0x9c2>
 80257fa:	0039      	movs	r1, r7
 80257fc:	0022      	movs	r2, r4
 80257fe:	9803      	ldr	r0, [sp, #12]
 8025800:	f000 fff4 	bl	80267ec <__lshift>
 8025804:	0007      	movs	r7, r0
 8025806:	0038      	movs	r0, r7
 8025808:	2d00      	cmp	r5, #0
 802580a:	d018      	beq.n	802583e <_dtoa_r+0x9fa>
 802580c:	6879      	ldr	r1, [r7, #4]
 802580e:	9803      	ldr	r0, [sp, #12]
 8025810:	f000 fd7e 	bl	8026310 <_Balloc>
 8025814:	1e04      	subs	r4, r0, #0
 8025816:	d105      	bne.n	8025824 <_dtoa_r+0x9e0>
 8025818:	0022      	movs	r2, r4
 802581a:	4b2b      	ldr	r3, [pc, #172]	@ (80258c8 <_dtoa_r+0xa84>)
 802581c:	482b      	ldr	r0, [pc, #172]	@ (80258cc <_dtoa_r+0xa88>)
 802581e:	492c      	ldr	r1, [pc, #176]	@ (80258d0 <_dtoa_r+0xa8c>)
 8025820:	f7ff fb25 	bl	8024e6e <_dtoa_r+0x2a>
 8025824:	0039      	movs	r1, r7
 8025826:	693a      	ldr	r2, [r7, #16]
 8025828:	310c      	adds	r1, #12
 802582a:	3202      	adds	r2, #2
 802582c:	0092      	lsls	r2, r2, #2
 802582e:	300c      	adds	r0, #12
 8025830:	f7ff fa6a 	bl	8024d08 <memcpy>
 8025834:	2201      	movs	r2, #1
 8025836:	0021      	movs	r1, r4
 8025838:	9803      	ldr	r0, [sp, #12]
 802583a:	f000 ffd7 	bl	80267ec <__lshift>
 802583e:	9b08      	ldr	r3, [sp, #32]
 8025840:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025842:	9306      	str	r3, [sp, #24]
 8025844:	3b01      	subs	r3, #1
 8025846:	189b      	adds	r3, r3, r2
 8025848:	2201      	movs	r2, #1
 802584a:	9704      	str	r7, [sp, #16]
 802584c:	0007      	movs	r7, r0
 802584e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025852:	4013      	ands	r3, r2
 8025854:	930e      	str	r3, [sp, #56]	@ 0x38
 8025856:	0031      	movs	r1, r6
 8025858:	9805      	ldr	r0, [sp, #20]
 802585a:	f7ff fa65 	bl	8024d28 <quorem>
 802585e:	9904      	ldr	r1, [sp, #16]
 8025860:	0005      	movs	r5, r0
 8025862:	900a      	str	r0, [sp, #40]	@ 0x28
 8025864:	9805      	ldr	r0, [sp, #20]
 8025866:	f001 f82d 	bl	80268c4 <__mcmp>
 802586a:	003a      	movs	r2, r7
 802586c:	900d      	str	r0, [sp, #52]	@ 0x34
 802586e:	0031      	movs	r1, r6
 8025870:	9803      	ldr	r0, [sp, #12]
 8025872:	f001 f843 	bl	80268fc <__mdiff>
 8025876:	2201      	movs	r2, #1
 8025878:	68c3      	ldr	r3, [r0, #12]
 802587a:	0004      	movs	r4, r0
 802587c:	3530      	adds	r5, #48	@ 0x30
 802587e:	9209      	str	r2, [sp, #36]	@ 0x24
 8025880:	2b00      	cmp	r3, #0
 8025882:	d104      	bne.n	802588e <_dtoa_r+0xa4a>
 8025884:	0001      	movs	r1, r0
 8025886:	9805      	ldr	r0, [sp, #20]
 8025888:	f001 f81c 	bl	80268c4 <__mcmp>
 802588c:	9009      	str	r0, [sp, #36]	@ 0x24
 802588e:	0021      	movs	r1, r4
 8025890:	9803      	ldr	r0, [sp, #12]
 8025892:	f000 fd81 	bl	8026398 <_Bfree>
 8025896:	9b06      	ldr	r3, [sp, #24]
 8025898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802589a:	1c5c      	adds	r4, r3, #1
 802589c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802589e:	4313      	orrs	r3, r2
 80258a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80258a2:	4313      	orrs	r3, r2
 80258a4:	d116      	bne.n	80258d4 <_dtoa_r+0xa90>
 80258a6:	2d39      	cmp	r5, #57	@ 0x39
 80258a8:	d02f      	beq.n	802590a <_dtoa_r+0xac6>
 80258aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80258ac:	2b00      	cmp	r3, #0
 80258ae:	dd01      	ble.n	80258b4 <_dtoa_r+0xa70>
 80258b0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80258b2:	3531      	adds	r5, #49	@ 0x31
 80258b4:	9b06      	ldr	r3, [sp, #24]
 80258b6:	701d      	strb	r5, [r3, #0]
 80258b8:	e638      	b.n	802552c <_dtoa_r+0x6e8>
 80258ba:	46c0      	nop			@ (mov r8, r8)
 80258bc:	40240000 	.word	0x40240000
 80258c0:	00000433 	.word	0x00000433
 80258c4:	7ff00000 	.word	0x7ff00000
 80258c8:	0802d3e9 	.word	0x0802d3e9
 80258cc:	0802d391 	.word	0x0802d391
 80258d0:	000002ef 	.word	0x000002ef
 80258d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80258d6:	2b00      	cmp	r3, #0
 80258d8:	db04      	blt.n	80258e4 <_dtoa_r+0xaa0>
 80258da:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80258dc:	4313      	orrs	r3, r2
 80258de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80258e0:	4313      	orrs	r3, r2
 80258e2:	d11e      	bne.n	8025922 <_dtoa_r+0xade>
 80258e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80258e6:	2b00      	cmp	r3, #0
 80258e8:	dde4      	ble.n	80258b4 <_dtoa_r+0xa70>
 80258ea:	9905      	ldr	r1, [sp, #20]
 80258ec:	2201      	movs	r2, #1
 80258ee:	9803      	ldr	r0, [sp, #12]
 80258f0:	f000 ff7c 	bl	80267ec <__lshift>
 80258f4:	0031      	movs	r1, r6
 80258f6:	9005      	str	r0, [sp, #20]
 80258f8:	f000 ffe4 	bl	80268c4 <__mcmp>
 80258fc:	2800      	cmp	r0, #0
 80258fe:	dc02      	bgt.n	8025906 <_dtoa_r+0xac2>
 8025900:	d1d8      	bne.n	80258b4 <_dtoa_r+0xa70>
 8025902:	07eb      	lsls	r3, r5, #31
 8025904:	d5d6      	bpl.n	80258b4 <_dtoa_r+0xa70>
 8025906:	2d39      	cmp	r5, #57	@ 0x39
 8025908:	d1d2      	bne.n	80258b0 <_dtoa_r+0xa6c>
 802590a:	2339      	movs	r3, #57	@ 0x39
 802590c:	9a06      	ldr	r2, [sp, #24]
 802590e:	7013      	strb	r3, [r2, #0]
 8025910:	0023      	movs	r3, r4
 8025912:	001c      	movs	r4, r3
 8025914:	3b01      	subs	r3, #1
 8025916:	781a      	ldrb	r2, [r3, #0]
 8025918:	2a39      	cmp	r2, #57	@ 0x39
 802591a:	d04f      	beq.n	80259bc <_dtoa_r+0xb78>
 802591c:	3201      	adds	r2, #1
 802591e:	701a      	strb	r2, [r3, #0]
 8025920:	e604      	b.n	802552c <_dtoa_r+0x6e8>
 8025922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025924:	2b00      	cmp	r3, #0
 8025926:	dd03      	ble.n	8025930 <_dtoa_r+0xaec>
 8025928:	2d39      	cmp	r5, #57	@ 0x39
 802592a:	d0ee      	beq.n	802590a <_dtoa_r+0xac6>
 802592c:	3501      	adds	r5, #1
 802592e:	e7c1      	b.n	80258b4 <_dtoa_r+0xa70>
 8025930:	9b06      	ldr	r3, [sp, #24]
 8025932:	9a06      	ldr	r2, [sp, #24]
 8025934:	701d      	strb	r5, [r3, #0]
 8025936:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025938:	4293      	cmp	r3, r2
 802593a:	d02a      	beq.n	8025992 <_dtoa_r+0xb4e>
 802593c:	2300      	movs	r3, #0
 802593e:	220a      	movs	r2, #10
 8025940:	9905      	ldr	r1, [sp, #20]
 8025942:	9803      	ldr	r0, [sp, #12]
 8025944:	f000 fd4c 	bl	80263e0 <__multadd>
 8025948:	9b04      	ldr	r3, [sp, #16]
 802594a:	9005      	str	r0, [sp, #20]
 802594c:	42bb      	cmp	r3, r7
 802594e:	d109      	bne.n	8025964 <_dtoa_r+0xb20>
 8025950:	2300      	movs	r3, #0
 8025952:	220a      	movs	r2, #10
 8025954:	9904      	ldr	r1, [sp, #16]
 8025956:	9803      	ldr	r0, [sp, #12]
 8025958:	f000 fd42 	bl	80263e0 <__multadd>
 802595c:	9004      	str	r0, [sp, #16]
 802595e:	0007      	movs	r7, r0
 8025960:	9406      	str	r4, [sp, #24]
 8025962:	e778      	b.n	8025856 <_dtoa_r+0xa12>
 8025964:	9904      	ldr	r1, [sp, #16]
 8025966:	2300      	movs	r3, #0
 8025968:	220a      	movs	r2, #10
 802596a:	9803      	ldr	r0, [sp, #12]
 802596c:	f000 fd38 	bl	80263e0 <__multadd>
 8025970:	2300      	movs	r3, #0
 8025972:	9004      	str	r0, [sp, #16]
 8025974:	220a      	movs	r2, #10
 8025976:	0039      	movs	r1, r7
 8025978:	9803      	ldr	r0, [sp, #12]
 802597a:	f000 fd31 	bl	80263e0 <__multadd>
 802597e:	e7ee      	b.n	802595e <_dtoa_r+0xb1a>
 8025980:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025982:	2401      	movs	r4, #1
 8025984:	2b00      	cmp	r3, #0
 8025986:	dd00      	ble.n	802598a <_dtoa_r+0xb46>
 8025988:	001c      	movs	r4, r3
 802598a:	9b08      	ldr	r3, [sp, #32]
 802598c:	191c      	adds	r4, r3, r4
 802598e:	2300      	movs	r3, #0
 8025990:	9304      	str	r3, [sp, #16]
 8025992:	9905      	ldr	r1, [sp, #20]
 8025994:	2201      	movs	r2, #1
 8025996:	9803      	ldr	r0, [sp, #12]
 8025998:	f000 ff28 	bl	80267ec <__lshift>
 802599c:	0031      	movs	r1, r6
 802599e:	9005      	str	r0, [sp, #20]
 80259a0:	f000 ff90 	bl	80268c4 <__mcmp>
 80259a4:	2800      	cmp	r0, #0
 80259a6:	dcb3      	bgt.n	8025910 <_dtoa_r+0xacc>
 80259a8:	d101      	bne.n	80259ae <_dtoa_r+0xb6a>
 80259aa:	07ed      	lsls	r5, r5, #31
 80259ac:	d4b0      	bmi.n	8025910 <_dtoa_r+0xacc>
 80259ae:	0023      	movs	r3, r4
 80259b0:	001c      	movs	r4, r3
 80259b2:	3b01      	subs	r3, #1
 80259b4:	781a      	ldrb	r2, [r3, #0]
 80259b6:	2a30      	cmp	r2, #48	@ 0x30
 80259b8:	d0fa      	beq.n	80259b0 <_dtoa_r+0xb6c>
 80259ba:	e5b7      	b.n	802552c <_dtoa_r+0x6e8>
 80259bc:	9a08      	ldr	r2, [sp, #32]
 80259be:	429a      	cmp	r2, r3
 80259c0:	d1a7      	bne.n	8025912 <_dtoa_r+0xace>
 80259c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80259c4:	3301      	adds	r3, #1
 80259c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80259c8:	2331      	movs	r3, #49	@ 0x31
 80259ca:	7013      	strb	r3, [r2, #0]
 80259cc:	e5ae      	b.n	802552c <_dtoa_r+0x6e8>
 80259ce:	4b15      	ldr	r3, [pc, #84]	@ (8025a24 <_dtoa_r+0xbe0>)
 80259d0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80259d2:	9308      	str	r3, [sp, #32]
 80259d4:	4b14      	ldr	r3, [pc, #80]	@ (8025a28 <_dtoa_r+0xbe4>)
 80259d6:	2a00      	cmp	r2, #0
 80259d8:	d001      	beq.n	80259de <_dtoa_r+0xb9a>
 80259da:	f7ff fa7b 	bl	8024ed4 <_dtoa_r+0x90>
 80259de:	f7ff fa7b 	bl	8024ed8 <_dtoa_r+0x94>
 80259e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80259e4:	2b01      	cmp	r3, #1
 80259e6:	dc00      	bgt.n	80259ea <_dtoa_r+0xba6>
 80259e8:	e648      	b.n	802567c <_dtoa_r+0x838>
 80259ea:	2001      	movs	r0, #1
 80259ec:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80259ee:	e665      	b.n	80256bc <_dtoa_r+0x878>
 80259f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80259f2:	2b00      	cmp	r3, #0
 80259f4:	dc00      	bgt.n	80259f8 <_dtoa_r+0xbb4>
 80259f6:	e6d6      	b.n	80257a6 <_dtoa_r+0x962>
 80259f8:	2400      	movs	r4, #0
 80259fa:	0031      	movs	r1, r6
 80259fc:	9805      	ldr	r0, [sp, #20]
 80259fe:	f7ff f993 	bl	8024d28 <quorem>
 8025a02:	9b08      	ldr	r3, [sp, #32]
 8025a04:	3030      	adds	r0, #48	@ 0x30
 8025a06:	5518      	strb	r0, [r3, r4]
 8025a08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025a0a:	3401      	adds	r4, #1
 8025a0c:	0005      	movs	r5, r0
 8025a0e:	429c      	cmp	r4, r3
 8025a10:	dab6      	bge.n	8025980 <_dtoa_r+0xb3c>
 8025a12:	2300      	movs	r3, #0
 8025a14:	220a      	movs	r2, #10
 8025a16:	9905      	ldr	r1, [sp, #20]
 8025a18:	9803      	ldr	r0, [sp, #12]
 8025a1a:	f000 fce1 	bl	80263e0 <__multadd>
 8025a1e:	9005      	str	r0, [sp, #20]
 8025a20:	e7eb      	b.n	80259fa <_dtoa_r+0xbb6>
 8025a22:	46c0      	nop			@ (mov r8, r8)
 8025a24:	0802d36d 	.word	0x0802d36d
 8025a28:	0802d375 	.word	0x0802d375

08025a2c <_free_r>:
 8025a2c:	b570      	push	{r4, r5, r6, lr}
 8025a2e:	0005      	movs	r5, r0
 8025a30:	1e0c      	subs	r4, r1, #0
 8025a32:	d010      	beq.n	8025a56 <_free_r+0x2a>
 8025a34:	3c04      	subs	r4, #4
 8025a36:	6823      	ldr	r3, [r4, #0]
 8025a38:	2b00      	cmp	r3, #0
 8025a3a:	da00      	bge.n	8025a3e <_free_r+0x12>
 8025a3c:	18e4      	adds	r4, r4, r3
 8025a3e:	0028      	movs	r0, r5
 8025a40:	f000 fc56 	bl	80262f0 <__malloc_lock>
 8025a44:	4a1d      	ldr	r2, [pc, #116]	@ (8025abc <_free_r+0x90>)
 8025a46:	6813      	ldr	r3, [r2, #0]
 8025a48:	2b00      	cmp	r3, #0
 8025a4a:	d105      	bne.n	8025a58 <_free_r+0x2c>
 8025a4c:	6063      	str	r3, [r4, #4]
 8025a4e:	6014      	str	r4, [r2, #0]
 8025a50:	0028      	movs	r0, r5
 8025a52:	f000 fc55 	bl	8026300 <__malloc_unlock>
 8025a56:	bd70      	pop	{r4, r5, r6, pc}
 8025a58:	42a3      	cmp	r3, r4
 8025a5a:	d908      	bls.n	8025a6e <_free_r+0x42>
 8025a5c:	6820      	ldr	r0, [r4, #0]
 8025a5e:	1821      	adds	r1, r4, r0
 8025a60:	428b      	cmp	r3, r1
 8025a62:	d1f3      	bne.n	8025a4c <_free_r+0x20>
 8025a64:	6819      	ldr	r1, [r3, #0]
 8025a66:	685b      	ldr	r3, [r3, #4]
 8025a68:	1809      	adds	r1, r1, r0
 8025a6a:	6021      	str	r1, [r4, #0]
 8025a6c:	e7ee      	b.n	8025a4c <_free_r+0x20>
 8025a6e:	001a      	movs	r2, r3
 8025a70:	685b      	ldr	r3, [r3, #4]
 8025a72:	2b00      	cmp	r3, #0
 8025a74:	d001      	beq.n	8025a7a <_free_r+0x4e>
 8025a76:	42a3      	cmp	r3, r4
 8025a78:	d9f9      	bls.n	8025a6e <_free_r+0x42>
 8025a7a:	6811      	ldr	r1, [r2, #0]
 8025a7c:	1850      	adds	r0, r2, r1
 8025a7e:	42a0      	cmp	r0, r4
 8025a80:	d10b      	bne.n	8025a9a <_free_r+0x6e>
 8025a82:	6820      	ldr	r0, [r4, #0]
 8025a84:	1809      	adds	r1, r1, r0
 8025a86:	1850      	adds	r0, r2, r1
 8025a88:	6011      	str	r1, [r2, #0]
 8025a8a:	4283      	cmp	r3, r0
 8025a8c:	d1e0      	bne.n	8025a50 <_free_r+0x24>
 8025a8e:	6818      	ldr	r0, [r3, #0]
 8025a90:	685b      	ldr	r3, [r3, #4]
 8025a92:	1841      	adds	r1, r0, r1
 8025a94:	6011      	str	r1, [r2, #0]
 8025a96:	6053      	str	r3, [r2, #4]
 8025a98:	e7da      	b.n	8025a50 <_free_r+0x24>
 8025a9a:	42a0      	cmp	r0, r4
 8025a9c:	d902      	bls.n	8025aa4 <_free_r+0x78>
 8025a9e:	230c      	movs	r3, #12
 8025aa0:	602b      	str	r3, [r5, #0]
 8025aa2:	e7d5      	b.n	8025a50 <_free_r+0x24>
 8025aa4:	6820      	ldr	r0, [r4, #0]
 8025aa6:	1821      	adds	r1, r4, r0
 8025aa8:	428b      	cmp	r3, r1
 8025aaa:	d103      	bne.n	8025ab4 <_free_r+0x88>
 8025aac:	6819      	ldr	r1, [r3, #0]
 8025aae:	685b      	ldr	r3, [r3, #4]
 8025ab0:	1809      	adds	r1, r1, r0
 8025ab2:	6021      	str	r1, [r4, #0]
 8025ab4:	6063      	str	r3, [r4, #4]
 8025ab6:	6054      	str	r4, [r2, #4]
 8025ab8:	e7ca      	b.n	8025a50 <_free_r+0x24>
 8025aba:	46c0      	nop			@ (mov r8, r8)
 8025abc:	20003644 	.word	0x20003644

08025ac0 <rshift>:
 8025ac0:	0002      	movs	r2, r0
 8025ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025ac4:	6904      	ldr	r4, [r0, #16]
 8025ac6:	b085      	sub	sp, #20
 8025ac8:	3214      	adds	r2, #20
 8025aca:	114b      	asrs	r3, r1, #5
 8025acc:	0016      	movs	r6, r2
 8025ace:	9302      	str	r3, [sp, #8]
 8025ad0:	429c      	cmp	r4, r3
 8025ad2:	dd31      	ble.n	8025b38 <rshift+0x78>
 8025ad4:	261f      	movs	r6, #31
 8025ad6:	000f      	movs	r7, r1
 8025ad8:	009b      	lsls	r3, r3, #2
 8025ada:	00a5      	lsls	r5, r4, #2
 8025adc:	18d3      	adds	r3, r2, r3
 8025ade:	4037      	ands	r7, r6
 8025ae0:	1955      	adds	r5, r2, r5
 8025ae2:	9300      	str	r3, [sp, #0]
 8025ae4:	9701      	str	r7, [sp, #4]
 8025ae6:	4231      	tst	r1, r6
 8025ae8:	d10d      	bne.n	8025b06 <rshift+0x46>
 8025aea:	0016      	movs	r6, r2
 8025aec:	0019      	movs	r1, r3
 8025aee:	428d      	cmp	r5, r1
 8025af0:	d836      	bhi.n	8025b60 <rshift+0xa0>
 8025af2:	9b00      	ldr	r3, [sp, #0]
 8025af4:	2600      	movs	r6, #0
 8025af6:	3b03      	subs	r3, #3
 8025af8:	429d      	cmp	r5, r3
 8025afa:	d302      	bcc.n	8025b02 <rshift+0x42>
 8025afc:	9b02      	ldr	r3, [sp, #8]
 8025afe:	1ae4      	subs	r4, r4, r3
 8025b00:	00a6      	lsls	r6, r4, #2
 8025b02:	1996      	adds	r6, r2, r6
 8025b04:	e018      	b.n	8025b38 <rshift+0x78>
 8025b06:	2120      	movs	r1, #32
 8025b08:	9e01      	ldr	r6, [sp, #4]
 8025b0a:	9f01      	ldr	r7, [sp, #4]
 8025b0c:	1b89      	subs	r1, r1, r6
 8025b0e:	9e00      	ldr	r6, [sp, #0]
 8025b10:	9103      	str	r1, [sp, #12]
 8025b12:	ce02      	ldmia	r6!, {r1}
 8025b14:	4694      	mov	ip, r2
 8025b16:	40f9      	lsrs	r1, r7
 8025b18:	42b5      	cmp	r5, r6
 8025b1a:	d816      	bhi.n	8025b4a <rshift+0x8a>
 8025b1c:	9b00      	ldr	r3, [sp, #0]
 8025b1e:	2600      	movs	r6, #0
 8025b20:	3301      	adds	r3, #1
 8025b22:	429d      	cmp	r5, r3
 8025b24:	d303      	bcc.n	8025b2e <rshift+0x6e>
 8025b26:	9b02      	ldr	r3, [sp, #8]
 8025b28:	1ae4      	subs	r4, r4, r3
 8025b2a:	00a6      	lsls	r6, r4, #2
 8025b2c:	3e04      	subs	r6, #4
 8025b2e:	1996      	adds	r6, r2, r6
 8025b30:	6031      	str	r1, [r6, #0]
 8025b32:	2900      	cmp	r1, #0
 8025b34:	d000      	beq.n	8025b38 <rshift+0x78>
 8025b36:	3604      	adds	r6, #4
 8025b38:	1ab1      	subs	r1, r6, r2
 8025b3a:	1089      	asrs	r1, r1, #2
 8025b3c:	6101      	str	r1, [r0, #16]
 8025b3e:	4296      	cmp	r6, r2
 8025b40:	d101      	bne.n	8025b46 <rshift+0x86>
 8025b42:	2300      	movs	r3, #0
 8025b44:	6143      	str	r3, [r0, #20]
 8025b46:	b005      	add	sp, #20
 8025b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025b4a:	6837      	ldr	r7, [r6, #0]
 8025b4c:	9b03      	ldr	r3, [sp, #12]
 8025b4e:	409f      	lsls	r7, r3
 8025b50:	430f      	orrs	r7, r1
 8025b52:	4661      	mov	r1, ip
 8025b54:	c180      	stmia	r1!, {r7}
 8025b56:	468c      	mov	ip, r1
 8025b58:	9b01      	ldr	r3, [sp, #4]
 8025b5a:	ce02      	ldmia	r6!, {r1}
 8025b5c:	40d9      	lsrs	r1, r3
 8025b5e:	e7db      	b.n	8025b18 <rshift+0x58>
 8025b60:	c980      	ldmia	r1!, {r7}
 8025b62:	c680      	stmia	r6!, {r7}
 8025b64:	e7c3      	b.n	8025aee <rshift+0x2e>

08025b66 <__hexdig_fun>:
 8025b66:	0002      	movs	r2, r0
 8025b68:	3a30      	subs	r2, #48	@ 0x30
 8025b6a:	0003      	movs	r3, r0
 8025b6c:	2a09      	cmp	r2, #9
 8025b6e:	d802      	bhi.n	8025b76 <__hexdig_fun+0x10>
 8025b70:	3b20      	subs	r3, #32
 8025b72:	b2d8      	uxtb	r0, r3
 8025b74:	4770      	bx	lr
 8025b76:	0002      	movs	r2, r0
 8025b78:	3a61      	subs	r2, #97	@ 0x61
 8025b7a:	2a05      	cmp	r2, #5
 8025b7c:	d801      	bhi.n	8025b82 <__hexdig_fun+0x1c>
 8025b7e:	3b47      	subs	r3, #71	@ 0x47
 8025b80:	e7f7      	b.n	8025b72 <__hexdig_fun+0xc>
 8025b82:	001a      	movs	r2, r3
 8025b84:	3a41      	subs	r2, #65	@ 0x41
 8025b86:	2000      	movs	r0, #0
 8025b88:	2a05      	cmp	r2, #5
 8025b8a:	d8f3      	bhi.n	8025b74 <__hexdig_fun+0xe>
 8025b8c:	3b27      	subs	r3, #39	@ 0x27
 8025b8e:	e7f0      	b.n	8025b72 <__hexdig_fun+0xc>

08025b90 <__gethex>:
 8025b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025b92:	b089      	sub	sp, #36	@ 0x24
 8025b94:	9307      	str	r3, [sp, #28]
 8025b96:	680b      	ldr	r3, [r1, #0]
 8025b98:	9201      	str	r2, [sp, #4]
 8025b9a:	9003      	str	r0, [sp, #12]
 8025b9c:	9106      	str	r1, [sp, #24]
 8025b9e:	1c9a      	adds	r2, r3, #2
 8025ba0:	0011      	movs	r1, r2
 8025ba2:	3201      	adds	r2, #1
 8025ba4:	1e50      	subs	r0, r2, #1
 8025ba6:	7800      	ldrb	r0, [r0, #0]
 8025ba8:	2830      	cmp	r0, #48	@ 0x30
 8025baa:	d0f9      	beq.n	8025ba0 <__gethex+0x10>
 8025bac:	1acb      	subs	r3, r1, r3
 8025bae:	3b02      	subs	r3, #2
 8025bb0:	9305      	str	r3, [sp, #20]
 8025bb2:	9100      	str	r1, [sp, #0]
 8025bb4:	f7ff ffd7 	bl	8025b66 <__hexdig_fun>
 8025bb8:	2300      	movs	r3, #0
 8025bba:	001d      	movs	r5, r3
 8025bbc:	9302      	str	r3, [sp, #8]
 8025bbe:	4298      	cmp	r0, r3
 8025bc0:	d11e      	bne.n	8025c00 <__gethex+0x70>
 8025bc2:	2201      	movs	r2, #1
 8025bc4:	49a6      	ldr	r1, [pc, #664]	@ (8025e60 <__gethex+0x2d0>)
 8025bc6:	9800      	ldr	r0, [sp, #0]
 8025bc8:	f7fe ffd8 	bl	8024b7c <strncmp>
 8025bcc:	0007      	movs	r7, r0
 8025bce:	42a8      	cmp	r0, r5
 8025bd0:	d000      	beq.n	8025bd4 <__gethex+0x44>
 8025bd2:	e06a      	b.n	8025caa <__gethex+0x11a>
 8025bd4:	9b00      	ldr	r3, [sp, #0]
 8025bd6:	7858      	ldrb	r0, [r3, #1]
 8025bd8:	1c5c      	adds	r4, r3, #1
 8025bda:	f7ff ffc4 	bl	8025b66 <__hexdig_fun>
 8025bde:	2301      	movs	r3, #1
 8025be0:	9302      	str	r3, [sp, #8]
 8025be2:	42a8      	cmp	r0, r5
 8025be4:	d02f      	beq.n	8025c46 <__gethex+0xb6>
 8025be6:	9400      	str	r4, [sp, #0]
 8025be8:	9b00      	ldr	r3, [sp, #0]
 8025bea:	7818      	ldrb	r0, [r3, #0]
 8025bec:	2830      	cmp	r0, #48	@ 0x30
 8025bee:	d009      	beq.n	8025c04 <__gethex+0x74>
 8025bf0:	f7ff ffb9 	bl	8025b66 <__hexdig_fun>
 8025bf4:	4242      	negs	r2, r0
 8025bf6:	4142      	adcs	r2, r0
 8025bf8:	2301      	movs	r3, #1
 8025bfa:	0025      	movs	r5, r4
 8025bfc:	9202      	str	r2, [sp, #8]
 8025bfe:	9305      	str	r3, [sp, #20]
 8025c00:	9c00      	ldr	r4, [sp, #0]
 8025c02:	e004      	b.n	8025c0e <__gethex+0x7e>
 8025c04:	9b00      	ldr	r3, [sp, #0]
 8025c06:	3301      	adds	r3, #1
 8025c08:	9300      	str	r3, [sp, #0]
 8025c0a:	e7ed      	b.n	8025be8 <__gethex+0x58>
 8025c0c:	3401      	adds	r4, #1
 8025c0e:	7820      	ldrb	r0, [r4, #0]
 8025c10:	f7ff ffa9 	bl	8025b66 <__hexdig_fun>
 8025c14:	1e07      	subs	r7, r0, #0
 8025c16:	d1f9      	bne.n	8025c0c <__gethex+0x7c>
 8025c18:	2201      	movs	r2, #1
 8025c1a:	0020      	movs	r0, r4
 8025c1c:	4990      	ldr	r1, [pc, #576]	@ (8025e60 <__gethex+0x2d0>)
 8025c1e:	f7fe ffad 	bl	8024b7c <strncmp>
 8025c22:	2800      	cmp	r0, #0
 8025c24:	d10d      	bne.n	8025c42 <__gethex+0xb2>
 8025c26:	2d00      	cmp	r5, #0
 8025c28:	d106      	bne.n	8025c38 <__gethex+0xa8>
 8025c2a:	3401      	adds	r4, #1
 8025c2c:	0025      	movs	r5, r4
 8025c2e:	7820      	ldrb	r0, [r4, #0]
 8025c30:	f7ff ff99 	bl	8025b66 <__hexdig_fun>
 8025c34:	2800      	cmp	r0, #0
 8025c36:	d102      	bne.n	8025c3e <__gethex+0xae>
 8025c38:	1b2d      	subs	r5, r5, r4
 8025c3a:	00af      	lsls	r7, r5, #2
 8025c3c:	e003      	b.n	8025c46 <__gethex+0xb6>
 8025c3e:	3401      	adds	r4, #1
 8025c40:	e7f5      	b.n	8025c2e <__gethex+0x9e>
 8025c42:	2d00      	cmp	r5, #0
 8025c44:	d1f8      	bne.n	8025c38 <__gethex+0xa8>
 8025c46:	2220      	movs	r2, #32
 8025c48:	7823      	ldrb	r3, [r4, #0]
 8025c4a:	0026      	movs	r6, r4
 8025c4c:	4393      	bics	r3, r2
 8025c4e:	2b50      	cmp	r3, #80	@ 0x50
 8025c50:	d11d      	bne.n	8025c8e <__gethex+0xfe>
 8025c52:	7863      	ldrb	r3, [r4, #1]
 8025c54:	2b2b      	cmp	r3, #43	@ 0x2b
 8025c56:	d02d      	beq.n	8025cb4 <__gethex+0x124>
 8025c58:	2b2d      	cmp	r3, #45	@ 0x2d
 8025c5a:	d02f      	beq.n	8025cbc <__gethex+0x12c>
 8025c5c:	2300      	movs	r3, #0
 8025c5e:	1c66      	adds	r6, r4, #1
 8025c60:	9304      	str	r3, [sp, #16]
 8025c62:	7830      	ldrb	r0, [r6, #0]
 8025c64:	f7ff ff7f 	bl	8025b66 <__hexdig_fun>
 8025c68:	1e43      	subs	r3, r0, #1
 8025c6a:	b2db      	uxtb	r3, r3
 8025c6c:	0005      	movs	r5, r0
 8025c6e:	2b18      	cmp	r3, #24
 8025c70:	d82a      	bhi.n	8025cc8 <__gethex+0x138>
 8025c72:	7870      	ldrb	r0, [r6, #1]
 8025c74:	f7ff ff77 	bl	8025b66 <__hexdig_fun>
 8025c78:	1e43      	subs	r3, r0, #1
 8025c7a:	b2db      	uxtb	r3, r3
 8025c7c:	3601      	adds	r6, #1
 8025c7e:	3d10      	subs	r5, #16
 8025c80:	2b18      	cmp	r3, #24
 8025c82:	d91d      	bls.n	8025cc0 <__gethex+0x130>
 8025c84:	9b04      	ldr	r3, [sp, #16]
 8025c86:	2b00      	cmp	r3, #0
 8025c88:	d000      	beq.n	8025c8c <__gethex+0xfc>
 8025c8a:	426d      	negs	r5, r5
 8025c8c:	197f      	adds	r7, r7, r5
 8025c8e:	9b06      	ldr	r3, [sp, #24]
 8025c90:	601e      	str	r6, [r3, #0]
 8025c92:	9b02      	ldr	r3, [sp, #8]
 8025c94:	2b00      	cmp	r3, #0
 8025c96:	d019      	beq.n	8025ccc <__gethex+0x13c>
 8025c98:	9b05      	ldr	r3, [sp, #20]
 8025c9a:	2606      	movs	r6, #6
 8025c9c:	425a      	negs	r2, r3
 8025c9e:	4153      	adcs	r3, r2
 8025ca0:	425b      	negs	r3, r3
 8025ca2:	401e      	ands	r6, r3
 8025ca4:	0030      	movs	r0, r6
 8025ca6:	b009      	add	sp, #36	@ 0x24
 8025ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025caa:	2301      	movs	r3, #1
 8025cac:	2700      	movs	r7, #0
 8025cae:	9c00      	ldr	r4, [sp, #0]
 8025cb0:	9302      	str	r3, [sp, #8]
 8025cb2:	e7c8      	b.n	8025c46 <__gethex+0xb6>
 8025cb4:	2300      	movs	r3, #0
 8025cb6:	9304      	str	r3, [sp, #16]
 8025cb8:	1ca6      	adds	r6, r4, #2
 8025cba:	e7d2      	b.n	8025c62 <__gethex+0xd2>
 8025cbc:	2301      	movs	r3, #1
 8025cbe:	e7fa      	b.n	8025cb6 <__gethex+0x126>
 8025cc0:	230a      	movs	r3, #10
 8025cc2:	435d      	muls	r5, r3
 8025cc4:	182d      	adds	r5, r5, r0
 8025cc6:	e7d4      	b.n	8025c72 <__gethex+0xe2>
 8025cc8:	0026      	movs	r6, r4
 8025cca:	e7e0      	b.n	8025c8e <__gethex+0xfe>
 8025ccc:	9b00      	ldr	r3, [sp, #0]
 8025cce:	9902      	ldr	r1, [sp, #8]
 8025cd0:	1ae3      	subs	r3, r4, r3
 8025cd2:	3b01      	subs	r3, #1
 8025cd4:	2b07      	cmp	r3, #7
 8025cd6:	dc0a      	bgt.n	8025cee <__gethex+0x15e>
 8025cd8:	9803      	ldr	r0, [sp, #12]
 8025cda:	f000 fb19 	bl	8026310 <_Balloc>
 8025cde:	1e05      	subs	r5, r0, #0
 8025ce0:	d108      	bne.n	8025cf4 <__gethex+0x164>
 8025ce2:	002a      	movs	r2, r5
 8025ce4:	21e4      	movs	r1, #228	@ 0xe4
 8025ce6:	4b5f      	ldr	r3, [pc, #380]	@ (8025e64 <__gethex+0x2d4>)
 8025ce8:	485f      	ldr	r0, [pc, #380]	@ (8025e68 <__gethex+0x2d8>)
 8025cea:	f001 fbf1 	bl	80274d0 <__assert_func>
 8025cee:	3101      	adds	r1, #1
 8025cf0:	105b      	asrs	r3, r3, #1
 8025cf2:	e7ef      	b.n	8025cd4 <__gethex+0x144>
 8025cf4:	0003      	movs	r3, r0
 8025cf6:	3314      	adds	r3, #20
 8025cf8:	9302      	str	r3, [sp, #8]
 8025cfa:	9305      	str	r3, [sp, #20]
 8025cfc:	2300      	movs	r3, #0
 8025cfe:	001e      	movs	r6, r3
 8025d00:	9304      	str	r3, [sp, #16]
 8025d02:	9b00      	ldr	r3, [sp, #0]
 8025d04:	42a3      	cmp	r3, r4
 8025d06:	d338      	bcc.n	8025d7a <__gethex+0x1ea>
 8025d08:	9c05      	ldr	r4, [sp, #20]
 8025d0a:	9b02      	ldr	r3, [sp, #8]
 8025d0c:	c440      	stmia	r4!, {r6}
 8025d0e:	1ae4      	subs	r4, r4, r3
 8025d10:	10a4      	asrs	r4, r4, #2
 8025d12:	0030      	movs	r0, r6
 8025d14:	612c      	str	r4, [r5, #16]
 8025d16:	f000 fbf3 	bl	8026500 <__hi0bits>
 8025d1a:	9b01      	ldr	r3, [sp, #4]
 8025d1c:	0164      	lsls	r4, r4, #5
 8025d1e:	681b      	ldr	r3, [r3, #0]
 8025d20:	1a26      	subs	r6, r4, r0
 8025d22:	9300      	str	r3, [sp, #0]
 8025d24:	429e      	cmp	r6, r3
 8025d26:	dd52      	ble.n	8025dce <__gethex+0x23e>
 8025d28:	1af6      	subs	r6, r6, r3
 8025d2a:	0031      	movs	r1, r6
 8025d2c:	0028      	movs	r0, r5
 8025d2e:	f000 ff96 	bl	8026c5e <__any_on>
 8025d32:	1e04      	subs	r4, r0, #0
 8025d34:	d00f      	beq.n	8025d56 <__gethex+0x1c6>
 8025d36:	2401      	movs	r4, #1
 8025d38:	231f      	movs	r3, #31
 8025d3a:	0020      	movs	r0, r4
 8025d3c:	1e72      	subs	r2, r6, #1
 8025d3e:	4013      	ands	r3, r2
 8025d40:	4098      	lsls	r0, r3
 8025d42:	0003      	movs	r3, r0
 8025d44:	1151      	asrs	r1, r2, #5
 8025d46:	9802      	ldr	r0, [sp, #8]
 8025d48:	0089      	lsls	r1, r1, #2
 8025d4a:	5809      	ldr	r1, [r1, r0]
 8025d4c:	4219      	tst	r1, r3
 8025d4e:	d002      	beq.n	8025d56 <__gethex+0x1c6>
 8025d50:	42a2      	cmp	r2, r4
 8025d52:	dc34      	bgt.n	8025dbe <__gethex+0x22e>
 8025d54:	2402      	movs	r4, #2
 8025d56:	0031      	movs	r1, r6
 8025d58:	0028      	movs	r0, r5
 8025d5a:	f7ff feb1 	bl	8025ac0 <rshift>
 8025d5e:	19bf      	adds	r7, r7, r6
 8025d60:	9b01      	ldr	r3, [sp, #4]
 8025d62:	689b      	ldr	r3, [r3, #8]
 8025d64:	42bb      	cmp	r3, r7
 8025d66:	da42      	bge.n	8025dee <__gethex+0x25e>
 8025d68:	0029      	movs	r1, r5
 8025d6a:	9803      	ldr	r0, [sp, #12]
 8025d6c:	f000 fb14 	bl	8026398 <_Bfree>
 8025d70:	2300      	movs	r3, #0
 8025d72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025d74:	26a3      	movs	r6, #163	@ 0xa3
 8025d76:	6013      	str	r3, [r2, #0]
 8025d78:	e794      	b.n	8025ca4 <__gethex+0x114>
 8025d7a:	3c01      	subs	r4, #1
 8025d7c:	7823      	ldrb	r3, [r4, #0]
 8025d7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8025d80:	d012      	beq.n	8025da8 <__gethex+0x218>
 8025d82:	9b04      	ldr	r3, [sp, #16]
 8025d84:	2b20      	cmp	r3, #32
 8025d86:	d104      	bne.n	8025d92 <__gethex+0x202>
 8025d88:	9b05      	ldr	r3, [sp, #20]
 8025d8a:	c340      	stmia	r3!, {r6}
 8025d8c:	2600      	movs	r6, #0
 8025d8e:	9305      	str	r3, [sp, #20]
 8025d90:	9604      	str	r6, [sp, #16]
 8025d92:	7820      	ldrb	r0, [r4, #0]
 8025d94:	f7ff fee7 	bl	8025b66 <__hexdig_fun>
 8025d98:	230f      	movs	r3, #15
 8025d9a:	4018      	ands	r0, r3
 8025d9c:	9b04      	ldr	r3, [sp, #16]
 8025d9e:	4098      	lsls	r0, r3
 8025da0:	3304      	adds	r3, #4
 8025da2:	4306      	orrs	r6, r0
 8025da4:	9304      	str	r3, [sp, #16]
 8025da6:	e7ac      	b.n	8025d02 <__gethex+0x172>
 8025da8:	9b00      	ldr	r3, [sp, #0]
 8025daa:	42a3      	cmp	r3, r4
 8025dac:	d8e9      	bhi.n	8025d82 <__gethex+0x1f2>
 8025dae:	2201      	movs	r2, #1
 8025db0:	0020      	movs	r0, r4
 8025db2:	492b      	ldr	r1, [pc, #172]	@ (8025e60 <__gethex+0x2d0>)
 8025db4:	f7fe fee2 	bl	8024b7c <strncmp>
 8025db8:	2800      	cmp	r0, #0
 8025dba:	d1e2      	bne.n	8025d82 <__gethex+0x1f2>
 8025dbc:	e7a1      	b.n	8025d02 <__gethex+0x172>
 8025dbe:	0028      	movs	r0, r5
 8025dc0:	1eb1      	subs	r1, r6, #2
 8025dc2:	f000 ff4c 	bl	8026c5e <__any_on>
 8025dc6:	2800      	cmp	r0, #0
 8025dc8:	d0c4      	beq.n	8025d54 <__gethex+0x1c4>
 8025dca:	2403      	movs	r4, #3
 8025dcc:	e7c3      	b.n	8025d56 <__gethex+0x1c6>
 8025dce:	9b00      	ldr	r3, [sp, #0]
 8025dd0:	2400      	movs	r4, #0
 8025dd2:	429e      	cmp	r6, r3
 8025dd4:	dac4      	bge.n	8025d60 <__gethex+0x1d0>
 8025dd6:	1b9e      	subs	r6, r3, r6
 8025dd8:	0029      	movs	r1, r5
 8025dda:	0032      	movs	r2, r6
 8025ddc:	9803      	ldr	r0, [sp, #12]
 8025dde:	f000 fd05 	bl	80267ec <__lshift>
 8025de2:	0003      	movs	r3, r0
 8025de4:	3314      	adds	r3, #20
 8025de6:	0005      	movs	r5, r0
 8025de8:	1bbf      	subs	r7, r7, r6
 8025dea:	9302      	str	r3, [sp, #8]
 8025dec:	e7b8      	b.n	8025d60 <__gethex+0x1d0>
 8025dee:	9b01      	ldr	r3, [sp, #4]
 8025df0:	685e      	ldr	r6, [r3, #4]
 8025df2:	42be      	cmp	r6, r7
 8025df4:	dd6f      	ble.n	8025ed6 <__gethex+0x346>
 8025df6:	9b00      	ldr	r3, [sp, #0]
 8025df8:	1bf6      	subs	r6, r6, r7
 8025dfa:	42b3      	cmp	r3, r6
 8025dfc:	dc36      	bgt.n	8025e6c <__gethex+0x2dc>
 8025dfe:	9b01      	ldr	r3, [sp, #4]
 8025e00:	68db      	ldr	r3, [r3, #12]
 8025e02:	2b02      	cmp	r3, #2
 8025e04:	d024      	beq.n	8025e50 <__gethex+0x2c0>
 8025e06:	2b03      	cmp	r3, #3
 8025e08:	d026      	beq.n	8025e58 <__gethex+0x2c8>
 8025e0a:	2b01      	cmp	r3, #1
 8025e0c:	d117      	bne.n	8025e3e <__gethex+0x2ae>
 8025e0e:	9b00      	ldr	r3, [sp, #0]
 8025e10:	42b3      	cmp	r3, r6
 8025e12:	d114      	bne.n	8025e3e <__gethex+0x2ae>
 8025e14:	2b01      	cmp	r3, #1
 8025e16:	d10b      	bne.n	8025e30 <__gethex+0x2a0>
 8025e18:	9b01      	ldr	r3, [sp, #4]
 8025e1a:	9a07      	ldr	r2, [sp, #28]
 8025e1c:	685b      	ldr	r3, [r3, #4]
 8025e1e:	2662      	movs	r6, #98	@ 0x62
 8025e20:	6013      	str	r3, [r2, #0]
 8025e22:	2301      	movs	r3, #1
 8025e24:	9a02      	ldr	r2, [sp, #8]
 8025e26:	612b      	str	r3, [r5, #16]
 8025e28:	6013      	str	r3, [r2, #0]
 8025e2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025e2c:	601d      	str	r5, [r3, #0]
 8025e2e:	e739      	b.n	8025ca4 <__gethex+0x114>
 8025e30:	9900      	ldr	r1, [sp, #0]
 8025e32:	0028      	movs	r0, r5
 8025e34:	3901      	subs	r1, #1
 8025e36:	f000 ff12 	bl	8026c5e <__any_on>
 8025e3a:	2800      	cmp	r0, #0
 8025e3c:	d1ec      	bne.n	8025e18 <__gethex+0x288>
 8025e3e:	0029      	movs	r1, r5
 8025e40:	9803      	ldr	r0, [sp, #12]
 8025e42:	f000 faa9 	bl	8026398 <_Bfree>
 8025e46:	2300      	movs	r3, #0
 8025e48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025e4a:	2650      	movs	r6, #80	@ 0x50
 8025e4c:	6013      	str	r3, [r2, #0]
 8025e4e:	e729      	b.n	8025ca4 <__gethex+0x114>
 8025e50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025e52:	2b00      	cmp	r3, #0
 8025e54:	d1f3      	bne.n	8025e3e <__gethex+0x2ae>
 8025e56:	e7df      	b.n	8025e18 <__gethex+0x288>
 8025e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025e5a:	2b00      	cmp	r3, #0
 8025e5c:	d1dc      	bne.n	8025e18 <__gethex+0x288>
 8025e5e:	e7ee      	b.n	8025e3e <__gethex+0x2ae>
 8025e60:	0802d1d8 	.word	0x0802d1d8
 8025e64:	0802d3e9 	.word	0x0802d3e9
 8025e68:	0802d3fa 	.word	0x0802d3fa
 8025e6c:	1e77      	subs	r7, r6, #1
 8025e6e:	2c00      	cmp	r4, #0
 8025e70:	d12f      	bne.n	8025ed2 <__gethex+0x342>
 8025e72:	2f00      	cmp	r7, #0
 8025e74:	d004      	beq.n	8025e80 <__gethex+0x2f0>
 8025e76:	0039      	movs	r1, r7
 8025e78:	0028      	movs	r0, r5
 8025e7a:	f000 fef0 	bl	8026c5e <__any_on>
 8025e7e:	0004      	movs	r4, r0
 8025e80:	231f      	movs	r3, #31
 8025e82:	117a      	asrs	r2, r7, #5
 8025e84:	401f      	ands	r7, r3
 8025e86:	3b1e      	subs	r3, #30
 8025e88:	40bb      	lsls	r3, r7
 8025e8a:	9902      	ldr	r1, [sp, #8]
 8025e8c:	0092      	lsls	r2, r2, #2
 8025e8e:	5852      	ldr	r2, [r2, r1]
 8025e90:	421a      	tst	r2, r3
 8025e92:	d001      	beq.n	8025e98 <__gethex+0x308>
 8025e94:	2302      	movs	r3, #2
 8025e96:	431c      	orrs	r4, r3
 8025e98:	9b00      	ldr	r3, [sp, #0]
 8025e9a:	0031      	movs	r1, r6
 8025e9c:	1b9b      	subs	r3, r3, r6
 8025e9e:	2602      	movs	r6, #2
 8025ea0:	0028      	movs	r0, r5
 8025ea2:	9300      	str	r3, [sp, #0]
 8025ea4:	f7ff fe0c 	bl	8025ac0 <rshift>
 8025ea8:	9b01      	ldr	r3, [sp, #4]
 8025eaa:	685f      	ldr	r7, [r3, #4]
 8025eac:	2c00      	cmp	r4, #0
 8025eae:	d03f      	beq.n	8025f30 <__gethex+0x3a0>
 8025eb0:	9b01      	ldr	r3, [sp, #4]
 8025eb2:	68db      	ldr	r3, [r3, #12]
 8025eb4:	2b02      	cmp	r3, #2
 8025eb6:	d010      	beq.n	8025eda <__gethex+0x34a>
 8025eb8:	2b03      	cmp	r3, #3
 8025eba:	d012      	beq.n	8025ee2 <__gethex+0x352>
 8025ebc:	2b01      	cmp	r3, #1
 8025ebe:	d106      	bne.n	8025ece <__gethex+0x33e>
 8025ec0:	07a2      	lsls	r2, r4, #30
 8025ec2:	d504      	bpl.n	8025ece <__gethex+0x33e>
 8025ec4:	9a02      	ldr	r2, [sp, #8]
 8025ec6:	6812      	ldr	r2, [r2, #0]
 8025ec8:	4314      	orrs	r4, r2
 8025eca:	421c      	tst	r4, r3
 8025ecc:	d10c      	bne.n	8025ee8 <__gethex+0x358>
 8025ece:	2310      	movs	r3, #16
 8025ed0:	e02d      	b.n	8025f2e <__gethex+0x39e>
 8025ed2:	2401      	movs	r4, #1
 8025ed4:	e7d4      	b.n	8025e80 <__gethex+0x2f0>
 8025ed6:	2601      	movs	r6, #1
 8025ed8:	e7e8      	b.n	8025eac <__gethex+0x31c>
 8025eda:	2301      	movs	r3, #1
 8025edc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025ede:	1a9b      	subs	r3, r3, r2
 8025ee0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025ee2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025ee4:	2b00      	cmp	r3, #0
 8025ee6:	d0f2      	beq.n	8025ece <__gethex+0x33e>
 8025ee8:	692b      	ldr	r3, [r5, #16]
 8025eea:	2000      	movs	r0, #0
 8025eec:	9302      	str	r3, [sp, #8]
 8025eee:	009b      	lsls	r3, r3, #2
 8025ef0:	9304      	str	r3, [sp, #16]
 8025ef2:	002b      	movs	r3, r5
 8025ef4:	9a04      	ldr	r2, [sp, #16]
 8025ef6:	3314      	adds	r3, #20
 8025ef8:	1899      	adds	r1, r3, r2
 8025efa:	681a      	ldr	r2, [r3, #0]
 8025efc:	1c54      	adds	r4, r2, #1
 8025efe:	d01c      	beq.n	8025f3a <__gethex+0x3aa>
 8025f00:	3201      	adds	r2, #1
 8025f02:	601a      	str	r2, [r3, #0]
 8025f04:	002b      	movs	r3, r5
 8025f06:	3314      	adds	r3, #20
 8025f08:	2e02      	cmp	r6, #2
 8025f0a:	d13f      	bne.n	8025f8c <__gethex+0x3fc>
 8025f0c:	9a01      	ldr	r2, [sp, #4]
 8025f0e:	9900      	ldr	r1, [sp, #0]
 8025f10:	6812      	ldr	r2, [r2, #0]
 8025f12:	3a01      	subs	r2, #1
 8025f14:	428a      	cmp	r2, r1
 8025f16:	d109      	bne.n	8025f2c <__gethex+0x39c>
 8025f18:	000a      	movs	r2, r1
 8025f1a:	201f      	movs	r0, #31
 8025f1c:	4010      	ands	r0, r2
 8025f1e:	2201      	movs	r2, #1
 8025f20:	4082      	lsls	r2, r0
 8025f22:	1149      	asrs	r1, r1, #5
 8025f24:	0089      	lsls	r1, r1, #2
 8025f26:	58cb      	ldr	r3, [r1, r3]
 8025f28:	4213      	tst	r3, r2
 8025f2a:	d13d      	bne.n	8025fa8 <__gethex+0x418>
 8025f2c:	2320      	movs	r3, #32
 8025f2e:	431e      	orrs	r6, r3
 8025f30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025f32:	601d      	str	r5, [r3, #0]
 8025f34:	9b07      	ldr	r3, [sp, #28]
 8025f36:	601f      	str	r7, [r3, #0]
 8025f38:	e6b4      	b.n	8025ca4 <__gethex+0x114>
 8025f3a:	c301      	stmia	r3!, {r0}
 8025f3c:	4299      	cmp	r1, r3
 8025f3e:	d8dc      	bhi.n	8025efa <__gethex+0x36a>
 8025f40:	68ab      	ldr	r3, [r5, #8]
 8025f42:	9a02      	ldr	r2, [sp, #8]
 8025f44:	429a      	cmp	r2, r3
 8025f46:	db18      	blt.n	8025f7a <__gethex+0x3ea>
 8025f48:	6869      	ldr	r1, [r5, #4]
 8025f4a:	9803      	ldr	r0, [sp, #12]
 8025f4c:	3101      	adds	r1, #1
 8025f4e:	f000 f9df 	bl	8026310 <_Balloc>
 8025f52:	1e04      	subs	r4, r0, #0
 8025f54:	d104      	bne.n	8025f60 <__gethex+0x3d0>
 8025f56:	0022      	movs	r2, r4
 8025f58:	2184      	movs	r1, #132	@ 0x84
 8025f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8025fd0 <__gethex+0x440>)
 8025f5c:	481d      	ldr	r0, [pc, #116]	@ (8025fd4 <__gethex+0x444>)
 8025f5e:	e6c4      	b.n	8025cea <__gethex+0x15a>
 8025f60:	0029      	movs	r1, r5
 8025f62:	692a      	ldr	r2, [r5, #16]
 8025f64:	310c      	adds	r1, #12
 8025f66:	3202      	adds	r2, #2
 8025f68:	0092      	lsls	r2, r2, #2
 8025f6a:	300c      	adds	r0, #12
 8025f6c:	f7fe fecc 	bl	8024d08 <memcpy>
 8025f70:	0029      	movs	r1, r5
 8025f72:	9803      	ldr	r0, [sp, #12]
 8025f74:	f000 fa10 	bl	8026398 <_Bfree>
 8025f78:	0025      	movs	r5, r4
 8025f7a:	692b      	ldr	r3, [r5, #16]
 8025f7c:	1c5a      	adds	r2, r3, #1
 8025f7e:	612a      	str	r2, [r5, #16]
 8025f80:	2201      	movs	r2, #1
 8025f82:	3304      	adds	r3, #4
 8025f84:	009b      	lsls	r3, r3, #2
 8025f86:	18eb      	adds	r3, r5, r3
 8025f88:	605a      	str	r2, [r3, #4]
 8025f8a:	e7bb      	b.n	8025f04 <__gethex+0x374>
 8025f8c:	692a      	ldr	r2, [r5, #16]
 8025f8e:	9902      	ldr	r1, [sp, #8]
 8025f90:	428a      	cmp	r2, r1
 8025f92:	dd0b      	ble.n	8025fac <__gethex+0x41c>
 8025f94:	2101      	movs	r1, #1
 8025f96:	0028      	movs	r0, r5
 8025f98:	f7ff fd92 	bl	8025ac0 <rshift>
 8025f9c:	9b01      	ldr	r3, [sp, #4]
 8025f9e:	3701      	adds	r7, #1
 8025fa0:	689b      	ldr	r3, [r3, #8]
 8025fa2:	42bb      	cmp	r3, r7
 8025fa4:	da00      	bge.n	8025fa8 <__gethex+0x418>
 8025fa6:	e6df      	b.n	8025d68 <__gethex+0x1d8>
 8025fa8:	2601      	movs	r6, #1
 8025faa:	e7bf      	b.n	8025f2c <__gethex+0x39c>
 8025fac:	221f      	movs	r2, #31
 8025fae:	9c00      	ldr	r4, [sp, #0]
 8025fb0:	9900      	ldr	r1, [sp, #0]
 8025fb2:	4014      	ands	r4, r2
 8025fb4:	4211      	tst	r1, r2
 8025fb6:	d0f7      	beq.n	8025fa8 <__gethex+0x418>
 8025fb8:	9a04      	ldr	r2, [sp, #16]
 8025fba:	189b      	adds	r3, r3, r2
 8025fbc:	3b04      	subs	r3, #4
 8025fbe:	6818      	ldr	r0, [r3, #0]
 8025fc0:	f000 fa9e 	bl	8026500 <__hi0bits>
 8025fc4:	2320      	movs	r3, #32
 8025fc6:	1b1b      	subs	r3, r3, r4
 8025fc8:	4298      	cmp	r0, r3
 8025fca:	dbe3      	blt.n	8025f94 <__gethex+0x404>
 8025fcc:	e7ec      	b.n	8025fa8 <__gethex+0x418>
 8025fce:	46c0      	nop			@ (mov r8, r8)
 8025fd0:	0802d3e9 	.word	0x0802d3e9
 8025fd4:	0802d3fa 	.word	0x0802d3fa

08025fd8 <L_shift>:
 8025fd8:	2308      	movs	r3, #8
 8025fda:	b570      	push	{r4, r5, r6, lr}
 8025fdc:	2520      	movs	r5, #32
 8025fde:	1a9a      	subs	r2, r3, r2
 8025fe0:	0092      	lsls	r2, r2, #2
 8025fe2:	1aad      	subs	r5, r5, r2
 8025fe4:	6843      	ldr	r3, [r0, #4]
 8025fe6:	6804      	ldr	r4, [r0, #0]
 8025fe8:	001e      	movs	r6, r3
 8025fea:	40ae      	lsls	r6, r5
 8025fec:	40d3      	lsrs	r3, r2
 8025fee:	4334      	orrs	r4, r6
 8025ff0:	6004      	str	r4, [r0, #0]
 8025ff2:	6043      	str	r3, [r0, #4]
 8025ff4:	3004      	adds	r0, #4
 8025ff6:	4288      	cmp	r0, r1
 8025ff8:	d3f4      	bcc.n	8025fe4 <L_shift+0xc>
 8025ffa:	bd70      	pop	{r4, r5, r6, pc}

08025ffc <__match>:
 8025ffc:	b530      	push	{r4, r5, lr}
 8025ffe:	6803      	ldr	r3, [r0, #0]
 8026000:	780c      	ldrb	r4, [r1, #0]
 8026002:	3301      	adds	r3, #1
 8026004:	2c00      	cmp	r4, #0
 8026006:	d102      	bne.n	802600e <__match+0x12>
 8026008:	6003      	str	r3, [r0, #0]
 802600a:	2001      	movs	r0, #1
 802600c:	bd30      	pop	{r4, r5, pc}
 802600e:	781a      	ldrb	r2, [r3, #0]
 8026010:	0015      	movs	r5, r2
 8026012:	3d41      	subs	r5, #65	@ 0x41
 8026014:	2d19      	cmp	r5, #25
 8026016:	d800      	bhi.n	802601a <__match+0x1e>
 8026018:	3220      	adds	r2, #32
 802601a:	3101      	adds	r1, #1
 802601c:	42a2      	cmp	r2, r4
 802601e:	d0ef      	beq.n	8026000 <__match+0x4>
 8026020:	2000      	movs	r0, #0
 8026022:	e7f3      	b.n	802600c <__match+0x10>

08026024 <__hexnan>:
 8026024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026026:	680b      	ldr	r3, [r1, #0]
 8026028:	b08b      	sub	sp, #44	@ 0x2c
 802602a:	9201      	str	r2, [sp, #4]
 802602c:	9901      	ldr	r1, [sp, #4]
 802602e:	115a      	asrs	r2, r3, #5
 8026030:	0092      	lsls	r2, r2, #2
 8026032:	188a      	adds	r2, r1, r2
 8026034:	9202      	str	r2, [sp, #8]
 8026036:	0019      	movs	r1, r3
 8026038:	221f      	movs	r2, #31
 802603a:	4011      	ands	r1, r2
 802603c:	9008      	str	r0, [sp, #32]
 802603e:	9106      	str	r1, [sp, #24]
 8026040:	4213      	tst	r3, r2
 8026042:	d002      	beq.n	802604a <__hexnan+0x26>
 8026044:	9b02      	ldr	r3, [sp, #8]
 8026046:	3304      	adds	r3, #4
 8026048:	9302      	str	r3, [sp, #8]
 802604a:	9b02      	ldr	r3, [sp, #8]
 802604c:	2500      	movs	r5, #0
 802604e:	1f1f      	subs	r7, r3, #4
 8026050:	003e      	movs	r6, r7
 8026052:	003c      	movs	r4, r7
 8026054:	9b08      	ldr	r3, [sp, #32]
 8026056:	603d      	str	r5, [r7, #0]
 8026058:	681b      	ldr	r3, [r3, #0]
 802605a:	9507      	str	r5, [sp, #28]
 802605c:	9305      	str	r3, [sp, #20]
 802605e:	9503      	str	r5, [sp, #12]
 8026060:	9b05      	ldr	r3, [sp, #20]
 8026062:	3301      	adds	r3, #1
 8026064:	9309      	str	r3, [sp, #36]	@ 0x24
 8026066:	9b05      	ldr	r3, [sp, #20]
 8026068:	785b      	ldrb	r3, [r3, #1]
 802606a:	9304      	str	r3, [sp, #16]
 802606c:	2b00      	cmp	r3, #0
 802606e:	d028      	beq.n	80260c2 <__hexnan+0x9e>
 8026070:	9804      	ldr	r0, [sp, #16]
 8026072:	f7ff fd78 	bl	8025b66 <__hexdig_fun>
 8026076:	2800      	cmp	r0, #0
 8026078:	d155      	bne.n	8026126 <__hexnan+0x102>
 802607a:	9b04      	ldr	r3, [sp, #16]
 802607c:	2b20      	cmp	r3, #32
 802607e:	d819      	bhi.n	80260b4 <__hexnan+0x90>
 8026080:	9b03      	ldr	r3, [sp, #12]
 8026082:	9a07      	ldr	r2, [sp, #28]
 8026084:	4293      	cmp	r3, r2
 8026086:	dd12      	ble.n	80260ae <__hexnan+0x8a>
 8026088:	42b4      	cmp	r4, r6
 802608a:	d206      	bcs.n	802609a <__hexnan+0x76>
 802608c:	2d07      	cmp	r5, #7
 802608e:	dc04      	bgt.n	802609a <__hexnan+0x76>
 8026090:	002a      	movs	r2, r5
 8026092:	0031      	movs	r1, r6
 8026094:	0020      	movs	r0, r4
 8026096:	f7ff ff9f 	bl	8025fd8 <L_shift>
 802609a:	9b01      	ldr	r3, [sp, #4]
 802609c:	2508      	movs	r5, #8
 802609e:	429c      	cmp	r4, r3
 80260a0:	d905      	bls.n	80260ae <__hexnan+0x8a>
 80260a2:	1f26      	subs	r6, r4, #4
 80260a4:	2500      	movs	r5, #0
 80260a6:	0034      	movs	r4, r6
 80260a8:	9b03      	ldr	r3, [sp, #12]
 80260aa:	6035      	str	r5, [r6, #0]
 80260ac:	9307      	str	r3, [sp, #28]
 80260ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80260b0:	9305      	str	r3, [sp, #20]
 80260b2:	e7d5      	b.n	8026060 <__hexnan+0x3c>
 80260b4:	9b04      	ldr	r3, [sp, #16]
 80260b6:	2b29      	cmp	r3, #41	@ 0x29
 80260b8:	d15a      	bne.n	8026170 <__hexnan+0x14c>
 80260ba:	9b05      	ldr	r3, [sp, #20]
 80260bc:	9a08      	ldr	r2, [sp, #32]
 80260be:	3302      	adds	r3, #2
 80260c0:	6013      	str	r3, [r2, #0]
 80260c2:	9b03      	ldr	r3, [sp, #12]
 80260c4:	2b00      	cmp	r3, #0
 80260c6:	d053      	beq.n	8026170 <__hexnan+0x14c>
 80260c8:	42b4      	cmp	r4, r6
 80260ca:	d206      	bcs.n	80260da <__hexnan+0xb6>
 80260cc:	2d07      	cmp	r5, #7
 80260ce:	dc04      	bgt.n	80260da <__hexnan+0xb6>
 80260d0:	002a      	movs	r2, r5
 80260d2:	0031      	movs	r1, r6
 80260d4:	0020      	movs	r0, r4
 80260d6:	f7ff ff7f 	bl	8025fd8 <L_shift>
 80260da:	9b01      	ldr	r3, [sp, #4]
 80260dc:	429c      	cmp	r4, r3
 80260de:	d936      	bls.n	802614e <__hexnan+0x12a>
 80260e0:	001a      	movs	r2, r3
 80260e2:	0023      	movs	r3, r4
 80260e4:	cb02      	ldmia	r3!, {r1}
 80260e6:	c202      	stmia	r2!, {r1}
 80260e8:	429f      	cmp	r7, r3
 80260ea:	d2fb      	bcs.n	80260e4 <__hexnan+0xc0>
 80260ec:	9b02      	ldr	r3, [sp, #8]
 80260ee:	1c61      	adds	r1, r4, #1
 80260f0:	1eda      	subs	r2, r3, #3
 80260f2:	2304      	movs	r3, #4
 80260f4:	4291      	cmp	r1, r2
 80260f6:	d805      	bhi.n	8026104 <__hexnan+0xe0>
 80260f8:	9b02      	ldr	r3, [sp, #8]
 80260fa:	3b04      	subs	r3, #4
 80260fc:	1b1b      	subs	r3, r3, r4
 80260fe:	089b      	lsrs	r3, r3, #2
 8026100:	3301      	adds	r3, #1
 8026102:	009b      	lsls	r3, r3, #2
 8026104:	9a01      	ldr	r2, [sp, #4]
 8026106:	18d3      	adds	r3, r2, r3
 8026108:	2200      	movs	r2, #0
 802610a:	c304      	stmia	r3!, {r2}
 802610c:	429f      	cmp	r7, r3
 802610e:	d2fc      	bcs.n	802610a <__hexnan+0xe6>
 8026110:	683b      	ldr	r3, [r7, #0]
 8026112:	2b00      	cmp	r3, #0
 8026114:	d104      	bne.n	8026120 <__hexnan+0xfc>
 8026116:	9b01      	ldr	r3, [sp, #4]
 8026118:	429f      	cmp	r7, r3
 802611a:	d127      	bne.n	802616c <__hexnan+0x148>
 802611c:	2301      	movs	r3, #1
 802611e:	603b      	str	r3, [r7, #0]
 8026120:	2005      	movs	r0, #5
 8026122:	b00b      	add	sp, #44	@ 0x2c
 8026124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026126:	9b03      	ldr	r3, [sp, #12]
 8026128:	3501      	adds	r5, #1
 802612a:	3301      	adds	r3, #1
 802612c:	9303      	str	r3, [sp, #12]
 802612e:	2d08      	cmp	r5, #8
 8026130:	dd06      	ble.n	8026140 <__hexnan+0x11c>
 8026132:	9b01      	ldr	r3, [sp, #4]
 8026134:	429c      	cmp	r4, r3
 8026136:	d9ba      	bls.n	80260ae <__hexnan+0x8a>
 8026138:	2300      	movs	r3, #0
 802613a:	2501      	movs	r5, #1
 802613c:	3c04      	subs	r4, #4
 802613e:	6023      	str	r3, [r4, #0]
 8026140:	220f      	movs	r2, #15
 8026142:	6823      	ldr	r3, [r4, #0]
 8026144:	4010      	ands	r0, r2
 8026146:	011b      	lsls	r3, r3, #4
 8026148:	4303      	orrs	r3, r0
 802614a:	6023      	str	r3, [r4, #0]
 802614c:	e7af      	b.n	80260ae <__hexnan+0x8a>
 802614e:	9b06      	ldr	r3, [sp, #24]
 8026150:	2b00      	cmp	r3, #0
 8026152:	d0dd      	beq.n	8026110 <__hexnan+0xec>
 8026154:	2320      	movs	r3, #32
 8026156:	9a06      	ldr	r2, [sp, #24]
 8026158:	9902      	ldr	r1, [sp, #8]
 802615a:	1a9b      	subs	r3, r3, r2
 802615c:	2201      	movs	r2, #1
 802615e:	4252      	negs	r2, r2
 8026160:	40da      	lsrs	r2, r3
 8026162:	3904      	subs	r1, #4
 8026164:	680b      	ldr	r3, [r1, #0]
 8026166:	4013      	ands	r3, r2
 8026168:	600b      	str	r3, [r1, #0]
 802616a:	e7d1      	b.n	8026110 <__hexnan+0xec>
 802616c:	3f04      	subs	r7, #4
 802616e:	e7cf      	b.n	8026110 <__hexnan+0xec>
 8026170:	2004      	movs	r0, #4
 8026172:	e7d6      	b.n	8026122 <__hexnan+0xfe>

08026174 <malloc>:
 8026174:	b510      	push	{r4, lr}
 8026176:	4b03      	ldr	r3, [pc, #12]	@ (8026184 <malloc+0x10>)
 8026178:	0001      	movs	r1, r0
 802617a:	6818      	ldr	r0, [r3, #0]
 802617c:	f000 f826 	bl	80261cc <_malloc_r>
 8026180:	bd10      	pop	{r4, pc}
 8026182:	46c0      	nop			@ (mov r8, r8)
 8026184:	200003e0 	.word	0x200003e0

08026188 <sbrk_aligned>:
 8026188:	b570      	push	{r4, r5, r6, lr}
 802618a:	4e0f      	ldr	r6, [pc, #60]	@ (80261c8 <sbrk_aligned+0x40>)
 802618c:	000d      	movs	r5, r1
 802618e:	6831      	ldr	r1, [r6, #0]
 8026190:	0004      	movs	r4, r0
 8026192:	2900      	cmp	r1, #0
 8026194:	d102      	bne.n	802619c <sbrk_aligned+0x14>
 8026196:	f001 f989 	bl	80274ac <_sbrk_r>
 802619a:	6030      	str	r0, [r6, #0]
 802619c:	0029      	movs	r1, r5
 802619e:	0020      	movs	r0, r4
 80261a0:	f001 f984 	bl	80274ac <_sbrk_r>
 80261a4:	1c43      	adds	r3, r0, #1
 80261a6:	d103      	bne.n	80261b0 <sbrk_aligned+0x28>
 80261a8:	2501      	movs	r5, #1
 80261aa:	426d      	negs	r5, r5
 80261ac:	0028      	movs	r0, r5
 80261ae:	bd70      	pop	{r4, r5, r6, pc}
 80261b0:	2303      	movs	r3, #3
 80261b2:	1cc5      	adds	r5, r0, #3
 80261b4:	439d      	bics	r5, r3
 80261b6:	42a8      	cmp	r0, r5
 80261b8:	d0f8      	beq.n	80261ac <sbrk_aligned+0x24>
 80261ba:	1a29      	subs	r1, r5, r0
 80261bc:	0020      	movs	r0, r4
 80261be:	f001 f975 	bl	80274ac <_sbrk_r>
 80261c2:	3001      	adds	r0, #1
 80261c4:	d1f2      	bne.n	80261ac <sbrk_aligned+0x24>
 80261c6:	e7ef      	b.n	80261a8 <sbrk_aligned+0x20>
 80261c8:	20003640 	.word	0x20003640

080261cc <_malloc_r>:
 80261cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80261ce:	2203      	movs	r2, #3
 80261d0:	1ccb      	adds	r3, r1, #3
 80261d2:	4393      	bics	r3, r2
 80261d4:	3308      	adds	r3, #8
 80261d6:	0005      	movs	r5, r0
 80261d8:	001f      	movs	r7, r3
 80261da:	2b0c      	cmp	r3, #12
 80261dc:	d234      	bcs.n	8026248 <_malloc_r+0x7c>
 80261de:	270c      	movs	r7, #12
 80261e0:	42b9      	cmp	r1, r7
 80261e2:	d833      	bhi.n	802624c <_malloc_r+0x80>
 80261e4:	0028      	movs	r0, r5
 80261e6:	f000 f883 	bl	80262f0 <__malloc_lock>
 80261ea:	4e37      	ldr	r6, [pc, #220]	@ (80262c8 <_malloc_r+0xfc>)
 80261ec:	6833      	ldr	r3, [r6, #0]
 80261ee:	001c      	movs	r4, r3
 80261f0:	2c00      	cmp	r4, #0
 80261f2:	d12f      	bne.n	8026254 <_malloc_r+0x88>
 80261f4:	0039      	movs	r1, r7
 80261f6:	0028      	movs	r0, r5
 80261f8:	f7ff ffc6 	bl	8026188 <sbrk_aligned>
 80261fc:	0004      	movs	r4, r0
 80261fe:	1c43      	adds	r3, r0, #1
 8026200:	d15f      	bne.n	80262c2 <_malloc_r+0xf6>
 8026202:	6834      	ldr	r4, [r6, #0]
 8026204:	9400      	str	r4, [sp, #0]
 8026206:	9b00      	ldr	r3, [sp, #0]
 8026208:	2b00      	cmp	r3, #0
 802620a:	d14a      	bne.n	80262a2 <_malloc_r+0xd6>
 802620c:	2c00      	cmp	r4, #0
 802620e:	d052      	beq.n	80262b6 <_malloc_r+0xea>
 8026210:	6823      	ldr	r3, [r4, #0]
 8026212:	0028      	movs	r0, r5
 8026214:	18e3      	adds	r3, r4, r3
 8026216:	9900      	ldr	r1, [sp, #0]
 8026218:	9301      	str	r3, [sp, #4]
 802621a:	f001 f947 	bl	80274ac <_sbrk_r>
 802621e:	9b01      	ldr	r3, [sp, #4]
 8026220:	4283      	cmp	r3, r0
 8026222:	d148      	bne.n	80262b6 <_malloc_r+0xea>
 8026224:	6823      	ldr	r3, [r4, #0]
 8026226:	0028      	movs	r0, r5
 8026228:	1aff      	subs	r7, r7, r3
 802622a:	0039      	movs	r1, r7
 802622c:	f7ff ffac 	bl	8026188 <sbrk_aligned>
 8026230:	3001      	adds	r0, #1
 8026232:	d040      	beq.n	80262b6 <_malloc_r+0xea>
 8026234:	6823      	ldr	r3, [r4, #0]
 8026236:	19db      	adds	r3, r3, r7
 8026238:	6023      	str	r3, [r4, #0]
 802623a:	6833      	ldr	r3, [r6, #0]
 802623c:	685a      	ldr	r2, [r3, #4]
 802623e:	2a00      	cmp	r2, #0
 8026240:	d133      	bne.n	80262aa <_malloc_r+0xde>
 8026242:	9b00      	ldr	r3, [sp, #0]
 8026244:	6033      	str	r3, [r6, #0]
 8026246:	e019      	b.n	802627c <_malloc_r+0xb0>
 8026248:	2b00      	cmp	r3, #0
 802624a:	dac9      	bge.n	80261e0 <_malloc_r+0x14>
 802624c:	230c      	movs	r3, #12
 802624e:	602b      	str	r3, [r5, #0]
 8026250:	2000      	movs	r0, #0
 8026252:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026254:	6821      	ldr	r1, [r4, #0]
 8026256:	1bc9      	subs	r1, r1, r7
 8026258:	d420      	bmi.n	802629c <_malloc_r+0xd0>
 802625a:	290b      	cmp	r1, #11
 802625c:	d90a      	bls.n	8026274 <_malloc_r+0xa8>
 802625e:	19e2      	adds	r2, r4, r7
 8026260:	6027      	str	r7, [r4, #0]
 8026262:	42a3      	cmp	r3, r4
 8026264:	d104      	bne.n	8026270 <_malloc_r+0xa4>
 8026266:	6032      	str	r2, [r6, #0]
 8026268:	6863      	ldr	r3, [r4, #4]
 802626a:	6011      	str	r1, [r2, #0]
 802626c:	6053      	str	r3, [r2, #4]
 802626e:	e005      	b.n	802627c <_malloc_r+0xb0>
 8026270:	605a      	str	r2, [r3, #4]
 8026272:	e7f9      	b.n	8026268 <_malloc_r+0x9c>
 8026274:	6862      	ldr	r2, [r4, #4]
 8026276:	42a3      	cmp	r3, r4
 8026278:	d10e      	bne.n	8026298 <_malloc_r+0xcc>
 802627a:	6032      	str	r2, [r6, #0]
 802627c:	0028      	movs	r0, r5
 802627e:	f000 f83f 	bl	8026300 <__malloc_unlock>
 8026282:	0020      	movs	r0, r4
 8026284:	2207      	movs	r2, #7
 8026286:	300b      	adds	r0, #11
 8026288:	1d23      	adds	r3, r4, #4
 802628a:	4390      	bics	r0, r2
 802628c:	1ac2      	subs	r2, r0, r3
 802628e:	4298      	cmp	r0, r3
 8026290:	d0df      	beq.n	8026252 <_malloc_r+0x86>
 8026292:	1a1b      	subs	r3, r3, r0
 8026294:	50a3      	str	r3, [r4, r2]
 8026296:	e7dc      	b.n	8026252 <_malloc_r+0x86>
 8026298:	605a      	str	r2, [r3, #4]
 802629a:	e7ef      	b.n	802627c <_malloc_r+0xb0>
 802629c:	0023      	movs	r3, r4
 802629e:	6864      	ldr	r4, [r4, #4]
 80262a0:	e7a6      	b.n	80261f0 <_malloc_r+0x24>
 80262a2:	9c00      	ldr	r4, [sp, #0]
 80262a4:	6863      	ldr	r3, [r4, #4]
 80262a6:	9300      	str	r3, [sp, #0]
 80262a8:	e7ad      	b.n	8026206 <_malloc_r+0x3a>
 80262aa:	001a      	movs	r2, r3
 80262ac:	685b      	ldr	r3, [r3, #4]
 80262ae:	42a3      	cmp	r3, r4
 80262b0:	d1fb      	bne.n	80262aa <_malloc_r+0xde>
 80262b2:	2300      	movs	r3, #0
 80262b4:	e7da      	b.n	802626c <_malloc_r+0xa0>
 80262b6:	230c      	movs	r3, #12
 80262b8:	0028      	movs	r0, r5
 80262ba:	602b      	str	r3, [r5, #0]
 80262bc:	f000 f820 	bl	8026300 <__malloc_unlock>
 80262c0:	e7c6      	b.n	8026250 <_malloc_r+0x84>
 80262c2:	6007      	str	r7, [r0, #0]
 80262c4:	e7da      	b.n	802627c <_malloc_r+0xb0>
 80262c6:	46c0      	nop			@ (mov r8, r8)
 80262c8:	20003644 	.word	0x20003644

080262cc <__ascii_mbtowc>:
 80262cc:	b082      	sub	sp, #8
 80262ce:	2900      	cmp	r1, #0
 80262d0:	d100      	bne.n	80262d4 <__ascii_mbtowc+0x8>
 80262d2:	a901      	add	r1, sp, #4
 80262d4:	1e10      	subs	r0, r2, #0
 80262d6:	d006      	beq.n	80262e6 <__ascii_mbtowc+0x1a>
 80262d8:	2b00      	cmp	r3, #0
 80262da:	d006      	beq.n	80262ea <__ascii_mbtowc+0x1e>
 80262dc:	7813      	ldrb	r3, [r2, #0]
 80262de:	600b      	str	r3, [r1, #0]
 80262e0:	7810      	ldrb	r0, [r2, #0]
 80262e2:	1e43      	subs	r3, r0, #1
 80262e4:	4198      	sbcs	r0, r3
 80262e6:	b002      	add	sp, #8
 80262e8:	4770      	bx	lr
 80262ea:	2002      	movs	r0, #2
 80262ec:	4240      	negs	r0, r0
 80262ee:	e7fa      	b.n	80262e6 <__ascii_mbtowc+0x1a>

080262f0 <__malloc_lock>:
 80262f0:	b510      	push	{r4, lr}
 80262f2:	4802      	ldr	r0, [pc, #8]	@ (80262fc <__malloc_lock+0xc>)
 80262f4:	f7fe fcfb 	bl	8024cee <__retarget_lock_acquire_recursive>
 80262f8:	bd10      	pop	{r4, pc}
 80262fa:	46c0      	nop			@ (mov r8, r8)
 80262fc:	2000363c 	.word	0x2000363c

08026300 <__malloc_unlock>:
 8026300:	b510      	push	{r4, lr}
 8026302:	4802      	ldr	r0, [pc, #8]	@ (802630c <__malloc_unlock+0xc>)
 8026304:	f7fe fcf4 	bl	8024cf0 <__retarget_lock_release_recursive>
 8026308:	bd10      	pop	{r4, pc}
 802630a:	46c0      	nop			@ (mov r8, r8)
 802630c:	2000363c 	.word	0x2000363c

08026310 <_Balloc>:
 8026310:	b570      	push	{r4, r5, r6, lr}
 8026312:	69c5      	ldr	r5, [r0, #28]
 8026314:	0006      	movs	r6, r0
 8026316:	000c      	movs	r4, r1
 8026318:	2d00      	cmp	r5, #0
 802631a:	d10e      	bne.n	802633a <_Balloc+0x2a>
 802631c:	2010      	movs	r0, #16
 802631e:	f7ff ff29 	bl	8026174 <malloc>
 8026322:	1e02      	subs	r2, r0, #0
 8026324:	61f0      	str	r0, [r6, #28]
 8026326:	d104      	bne.n	8026332 <_Balloc+0x22>
 8026328:	216b      	movs	r1, #107	@ 0x6b
 802632a:	4b19      	ldr	r3, [pc, #100]	@ (8026390 <_Balloc+0x80>)
 802632c:	4819      	ldr	r0, [pc, #100]	@ (8026394 <_Balloc+0x84>)
 802632e:	f001 f8cf 	bl	80274d0 <__assert_func>
 8026332:	6045      	str	r5, [r0, #4]
 8026334:	6085      	str	r5, [r0, #8]
 8026336:	6005      	str	r5, [r0, #0]
 8026338:	60c5      	str	r5, [r0, #12]
 802633a:	69f5      	ldr	r5, [r6, #28]
 802633c:	68eb      	ldr	r3, [r5, #12]
 802633e:	2b00      	cmp	r3, #0
 8026340:	d013      	beq.n	802636a <_Balloc+0x5a>
 8026342:	69f3      	ldr	r3, [r6, #28]
 8026344:	00a2      	lsls	r2, r4, #2
 8026346:	68db      	ldr	r3, [r3, #12]
 8026348:	189b      	adds	r3, r3, r2
 802634a:	6818      	ldr	r0, [r3, #0]
 802634c:	2800      	cmp	r0, #0
 802634e:	d118      	bne.n	8026382 <_Balloc+0x72>
 8026350:	2101      	movs	r1, #1
 8026352:	000d      	movs	r5, r1
 8026354:	40a5      	lsls	r5, r4
 8026356:	1d6a      	adds	r2, r5, #5
 8026358:	0030      	movs	r0, r6
 802635a:	0092      	lsls	r2, r2, #2
 802635c:	f001 f8d6 	bl	802750c <_calloc_r>
 8026360:	2800      	cmp	r0, #0
 8026362:	d00c      	beq.n	802637e <_Balloc+0x6e>
 8026364:	6044      	str	r4, [r0, #4]
 8026366:	6085      	str	r5, [r0, #8]
 8026368:	e00d      	b.n	8026386 <_Balloc+0x76>
 802636a:	2221      	movs	r2, #33	@ 0x21
 802636c:	2104      	movs	r1, #4
 802636e:	0030      	movs	r0, r6
 8026370:	f001 f8cc 	bl	802750c <_calloc_r>
 8026374:	69f3      	ldr	r3, [r6, #28]
 8026376:	60e8      	str	r0, [r5, #12]
 8026378:	68db      	ldr	r3, [r3, #12]
 802637a:	2b00      	cmp	r3, #0
 802637c:	d1e1      	bne.n	8026342 <_Balloc+0x32>
 802637e:	2000      	movs	r0, #0
 8026380:	bd70      	pop	{r4, r5, r6, pc}
 8026382:	6802      	ldr	r2, [r0, #0]
 8026384:	601a      	str	r2, [r3, #0]
 8026386:	2300      	movs	r3, #0
 8026388:	6103      	str	r3, [r0, #16]
 802638a:	60c3      	str	r3, [r0, #12]
 802638c:	e7f8      	b.n	8026380 <_Balloc+0x70>
 802638e:	46c0      	nop			@ (mov r8, r8)
 8026390:	0802d37a 	.word	0x0802d37a
 8026394:	0802d45a 	.word	0x0802d45a

08026398 <_Bfree>:
 8026398:	b570      	push	{r4, r5, r6, lr}
 802639a:	69c6      	ldr	r6, [r0, #28]
 802639c:	0005      	movs	r5, r0
 802639e:	000c      	movs	r4, r1
 80263a0:	2e00      	cmp	r6, #0
 80263a2:	d10e      	bne.n	80263c2 <_Bfree+0x2a>
 80263a4:	2010      	movs	r0, #16
 80263a6:	f7ff fee5 	bl	8026174 <malloc>
 80263aa:	1e02      	subs	r2, r0, #0
 80263ac:	61e8      	str	r0, [r5, #28]
 80263ae:	d104      	bne.n	80263ba <_Bfree+0x22>
 80263b0:	218f      	movs	r1, #143	@ 0x8f
 80263b2:	4b09      	ldr	r3, [pc, #36]	@ (80263d8 <_Bfree+0x40>)
 80263b4:	4809      	ldr	r0, [pc, #36]	@ (80263dc <_Bfree+0x44>)
 80263b6:	f001 f88b 	bl	80274d0 <__assert_func>
 80263ba:	6046      	str	r6, [r0, #4]
 80263bc:	6086      	str	r6, [r0, #8]
 80263be:	6006      	str	r6, [r0, #0]
 80263c0:	60c6      	str	r6, [r0, #12]
 80263c2:	2c00      	cmp	r4, #0
 80263c4:	d007      	beq.n	80263d6 <_Bfree+0x3e>
 80263c6:	69eb      	ldr	r3, [r5, #28]
 80263c8:	6862      	ldr	r2, [r4, #4]
 80263ca:	68db      	ldr	r3, [r3, #12]
 80263cc:	0092      	lsls	r2, r2, #2
 80263ce:	189b      	adds	r3, r3, r2
 80263d0:	681a      	ldr	r2, [r3, #0]
 80263d2:	6022      	str	r2, [r4, #0]
 80263d4:	601c      	str	r4, [r3, #0]
 80263d6:	bd70      	pop	{r4, r5, r6, pc}
 80263d8:	0802d37a 	.word	0x0802d37a
 80263dc:	0802d45a 	.word	0x0802d45a

080263e0 <__multadd>:
 80263e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80263e2:	000f      	movs	r7, r1
 80263e4:	9001      	str	r0, [sp, #4]
 80263e6:	000c      	movs	r4, r1
 80263e8:	001e      	movs	r6, r3
 80263ea:	2000      	movs	r0, #0
 80263ec:	690d      	ldr	r5, [r1, #16]
 80263ee:	3714      	adds	r7, #20
 80263f0:	683b      	ldr	r3, [r7, #0]
 80263f2:	3001      	adds	r0, #1
 80263f4:	b299      	uxth	r1, r3
 80263f6:	4351      	muls	r1, r2
 80263f8:	0c1b      	lsrs	r3, r3, #16
 80263fa:	4353      	muls	r3, r2
 80263fc:	1989      	adds	r1, r1, r6
 80263fe:	0c0e      	lsrs	r6, r1, #16
 8026400:	199b      	adds	r3, r3, r6
 8026402:	0c1e      	lsrs	r6, r3, #16
 8026404:	b289      	uxth	r1, r1
 8026406:	041b      	lsls	r3, r3, #16
 8026408:	185b      	adds	r3, r3, r1
 802640a:	c708      	stmia	r7!, {r3}
 802640c:	4285      	cmp	r5, r0
 802640e:	dcef      	bgt.n	80263f0 <__multadd+0x10>
 8026410:	2e00      	cmp	r6, #0
 8026412:	d022      	beq.n	802645a <__multadd+0x7a>
 8026414:	68a3      	ldr	r3, [r4, #8]
 8026416:	42ab      	cmp	r3, r5
 8026418:	dc19      	bgt.n	802644e <__multadd+0x6e>
 802641a:	6861      	ldr	r1, [r4, #4]
 802641c:	9801      	ldr	r0, [sp, #4]
 802641e:	3101      	adds	r1, #1
 8026420:	f7ff ff76 	bl	8026310 <_Balloc>
 8026424:	1e07      	subs	r7, r0, #0
 8026426:	d105      	bne.n	8026434 <__multadd+0x54>
 8026428:	003a      	movs	r2, r7
 802642a:	21ba      	movs	r1, #186	@ 0xba
 802642c:	4b0c      	ldr	r3, [pc, #48]	@ (8026460 <__multadd+0x80>)
 802642e:	480d      	ldr	r0, [pc, #52]	@ (8026464 <__multadd+0x84>)
 8026430:	f001 f84e 	bl	80274d0 <__assert_func>
 8026434:	0021      	movs	r1, r4
 8026436:	6922      	ldr	r2, [r4, #16]
 8026438:	310c      	adds	r1, #12
 802643a:	3202      	adds	r2, #2
 802643c:	0092      	lsls	r2, r2, #2
 802643e:	300c      	adds	r0, #12
 8026440:	f7fe fc62 	bl	8024d08 <memcpy>
 8026444:	0021      	movs	r1, r4
 8026446:	9801      	ldr	r0, [sp, #4]
 8026448:	f7ff ffa6 	bl	8026398 <_Bfree>
 802644c:	003c      	movs	r4, r7
 802644e:	1d2b      	adds	r3, r5, #4
 8026450:	009b      	lsls	r3, r3, #2
 8026452:	18e3      	adds	r3, r4, r3
 8026454:	3501      	adds	r5, #1
 8026456:	605e      	str	r6, [r3, #4]
 8026458:	6125      	str	r5, [r4, #16]
 802645a:	0020      	movs	r0, r4
 802645c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802645e:	46c0      	nop			@ (mov r8, r8)
 8026460:	0802d3e9 	.word	0x0802d3e9
 8026464:	0802d45a 	.word	0x0802d45a

08026468 <__s2b>:
 8026468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802646a:	0007      	movs	r7, r0
 802646c:	0018      	movs	r0, r3
 802646e:	000c      	movs	r4, r1
 8026470:	3008      	adds	r0, #8
 8026472:	2109      	movs	r1, #9
 8026474:	9301      	str	r3, [sp, #4]
 8026476:	0015      	movs	r5, r2
 8026478:	f7d9 ff1e 	bl	80002b8 <__divsi3>
 802647c:	2301      	movs	r3, #1
 802647e:	2100      	movs	r1, #0
 8026480:	4283      	cmp	r3, r0
 8026482:	db0a      	blt.n	802649a <__s2b+0x32>
 8026484:	0038      	movs	r0, r7
 8026486:	f7ff ff43 	bl	8026310 <_Balloc>
 802648a:	1e01      	subs	r1, r0, #0
 802648c:	d108      	bne.n	80264a0 <__s2b+0x38>
 802648e:	000a      	movs	r2, r1
 8026490:	4b19      	ldr	r3, [pc, #100]	@ (80264f8 <__s2b+0x90>)
 8026492:	481a      	ldr	r0, [pc, #104]	@ (80264fc <__s2b+0x94>)
 8026494:	31d3      	adds	r1, #211	@ 0xd3
 8026496:	f001 f81b 	bl	80274d0 <__assert_func>
 802649a:	005b      	lsls	r3, r3, #1
 802649c:	3101      	adds	r1, #1
 802649e:	e7ef      	b.n	8026480 <__s2b+0x18>
 80264a0:	9b08      	ldr	r3, [sp, #32]
 80264a2:	6143      	str	r3, [r0, #20]
 80264a4:	2301      	movs	r3, #1
 80264a6:	6103      	str	r3, [r0, #16]
 80264a8:	2d09      	cmp	r5, #9
 80264aa:	dd18      	ble.n	80264de <__s2b+0x76>
 80264ac:	0023      	movs	r3, r4
 80264ae:	3309      	adds	r3, #9
 80264b0:	001e      	movs	r6, r3
 80264b2:	9300      	str	r3, [sp, #0]
 80264b4:	1964      	adds	r4, r4, r5
 80264b6:	7833      	ldrb	r3, [r6, #0]
 80264b8:	220a      	movs	r2, #10
 80264ba:	0038      	movs	r0, r7
 80264bc:	3b30      	subs	r3, #48	@ 0x30
 80264be:	f7ff ff8f 	bl	80263e0 <__multadd>
 80264c2:	3601      	adds	r6, #1
 80264c4:	0001      	movs	r1, r0
 80264c6:	42a6      	cmp	r6, r4
 80264c8:	d1f5      	bne.n	80264b6 <__s2b+0x4e>
 80264ca:	002c      	movs	r4, r5
 80264cc:	9b00      	ldr	r3, [sp, #0]
 80264ce:	3c08      	subs	r4, #8
 80264d0:	191c      	adds	r4, r3, r4
 80264d2:	002e      	movs	r6, r5
 80264d4:	9b01      	ldr	r3, [sp, #4]
 80264d6:	429e      	cmp	r6, r3
 80264d8:	db04      	blt.n	80264e4 <__s2b+0x7c>
 80264da:	0008      	movs	r0, r1
 80264dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80264de:	2509      	movs	r5, #9
 80264e0:	340a      	adds	r4, #10
 80264e2:	e7f6      	b.n	80264d2 <__s2b+0x6a>
 80264e4:	1b63      	subs	r3, r4, r5
 80264e6:	5d9b      	ldrb	r3, [r3, r6]
 80264e8:	220a      	movs	r2, #10
 80264ea:	0038      	movs	r0, r7
 80264ec:	3b30      	subs	r3, #48	@ 0x30
 80264ee:	f7ff ff77 	bl	80263e0 <__multadd>
 80264f2:	3601      	adds	r6, #1
 80264f4:	0001      	movs	r1, r0
 80264f6:	e7ed      	b.n	80264d4 <__s2b+0x6c>
 80264f8:	0802d3e9 	.word	0x0802d3e9
 80264fc:	0802d45a 	.word	0x0802d45a

08026500 <__hi0bits>:
 8026500:	2280      	movs	r2, #128	@ 0x80
 8026502:	0003      	movs	r3, r0
 8026504:	0252      	lsls	r2, r2, #9
 8026506:	2000      	movs	r0, #0
 8026508:	4293      	cmp	r3, r2
 802650a:	d201      	bcs.n	8026510 <__hi0bits+0x10>
 802650c:	041b      	lsls	r3, r3, #16
 802650e:	3010      	adds	r0, #16
 8026510:	2280      	movs	r2, #128	@ 0x80
 8026512:	0452      	lsls	r2, r2, #17
 8026514:	4293      	cmp	r3, r2
 8026516:	d201      	bcs.n	802651c <__hi0bits+0x1c>
 8026518:	3008      	adds	r0, #8
 802651a:	021b      	lsls	r3, r3, #8
 802651c:	2280      	movs	r2, #128	@ 0x80
 802651e:	0552      	lsls	r2, r2, #21
 8026520:	4293      	cmp	r3, r2
 8026522:	d201      	bcs.n	8026528 <__hi0bits+0x28>
 8026524:	3004      	adds	r0, #4
 8026526:	011b      	lsls	r3, r3, #4
 8026528:	2280      	movs	r2, #128	@ 0x80
 802652a:	05d2      	lsls	r2, r2, #23
 802652c:	4293      	cmp	r3, r2
 802652e:	d201      	bcs.n	8026534 <__hi0bits+0x34>
 8026530:	3002      	adds	r0, #2
 8026532:	009b      	lsls	r3, r3, #2
 8026534:	2b00      	cmp	r3, #0
 8026536:	db03      	blt.n	8026540 <__hi0bits+0x40>
 8026538:	3001      	adds	r0, #1
 802653a:	4213      	tst	r3, r2
 802653c:	d100      	bne.n	8026540 <__hi0bits+0x40>
 802653e:	2020      	movs	r0, #32
 8026540:	4770      	bx	lr

08026542 <__lo0bits>:
 8026542:	6803      	ldr	r3, [r0, #0]
 8026544:	0001      	movs	r1, r0
 8026546:	2207      	movs	r2, #7
 8026548:	0018      	movs	r0, r3
 802654a:	4010      	ands	r0, r2
 802654c:	4213      	tst	r3, r2
 802654e:	d00d      	beq.n	802656c <__lo0bits+0x2a>
 8026550:	3a06      	subs	r2, #6
 8026552:	2000      	movs	r0, #0
 8026554:	4213      	tst	r3, r2
 8026556:	d105      	bne.n	8026564 <__lo0bits+0x22>
 8026558:	3002      	adds	r0, #2
 802655a:	4203      	tst	r3, r0
 802655c:	d003      	beq.n	8026566 <__lo0bits+0x24>
 802655e:	40d3      	lsrs	r3, r2
 8026560:	0010      	movs	r0, r2
 8026562:	600b      	str	r3, [r1, #0]
 8026564:	4770      	bx	lr
 8026566:	089b      	lsrs	r3, r3, #2
 8026568:	600b      	str	r3, [r1, #0]
 802656a:	e7fb      	b.n	8026564 <__lo0bits+0x22>
 802656c:	b29a      	uxth	r2, r3
 802656e:	2a00      	cmp	r2, #0
 8026570:	d101      	bne.n	8026576 <__lo0bits+0x34>
 8026572:	2010      	movs	r0, #16
 8026574:	0c1b      	lsrs	r3, r3, #16
 8026576:	b2da      	uxtb	r2, r3
 8026578:	2a00      	cmp	r2, #0
 802657a:	d101      	bne.n	8026580 <__lo0bits+0x3e>
 802657c:	3008      	adds	r0, #8
 802657e:	0a1b      	lsrs	r3, r3, #8
 8026580:	071a      	lsls	r2, r3, #28
 8026582:	d101      	bne.n	8026588 <__lo0bits+0x46>
 8026584:	3004      	adds	r0, #4
 8026586:	091b      	lsrs	r3, r3, #4
 8026588:	079a      	lsls	r2, r3, #30
 802658a:	d101      	bne.n	8026590 <__lo0bits+0x4e>
 802658c:	3002      	adds	r0, #2
 802658e:	089b      	lsrs	r3, r3, #2
 8026590:	07da      	lsls	r2, r3, #31
 8026592:	d4e9      	bmi.n	8026568 <__lo0bits+0x26>
 8026594:	3001      	adds	r0, #1
 8026596:	085b      	lsrs	r3, r3, #1
 8026598:	d1e6      	bne.n	8026568 <__lo0bits+0x26>
 802659a:	2020      	movs	r0, #32
 802659c:	e7e2      	b.n	8026564 <__lo0bits+0x22>
	...

080265a0 <__i2b>:
 80265a0:	b510      	push	{r4, lr}
 80265a2:	000c      	movs	r4, r1
 80265a4:	2101      	movs	r1, #1
 80265a6:	f7ff feb3 	bl	8026310 <_Balloc>
 80265aa:	2800      	cmp	r0, #0
 80265ac:	d107      	bne.n	80265be <__i2b+0x1e>
 80265ae:	2146      	movs	r1, #70	@ 0x46
 80265b0:	4c05      	ldr	r4, [pc, #20]	@ (80265c8 <__i2b+0x28>)
 80265b2:	0002      	movs	r2, r0
 80265b4:	4b05      	ldr	r3, [pc, #20]	@ (80265cc <__i2b+0x2c>)
 80265b6:	0020      	movs	r0, r4
 80265b8:	31ff      	adds	r1, #255	@ 0xff
 80265ba:	f000 ff89 	bl	80274d0 <__assert_func>
 80265be:	2301      	movs	r3, #1
 80265c0:	6144      	str	r4, [r0, #20]
 80265c2:	6103      	str	r3, [r0, #16]
 80265c4:	bd10      	pop	{r4, pc}
 80265c6:	46c0      	nop			@ (mov r8, r8)
 80265c8:	0802d45a 	.word	0x0802d45a
 80265cc:	0802d3e9 	.word	0x0802d3e9

080265d0 <__multiply>:
 80265d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80265d2:	0014      	movs	r4, r2
 80265d4:	690a      	ldr	r2, [r1, #16]
 80265d6:	6923      	ldr	r3, [r4, #16]
 80265d8:	000d      	movs	r5, r1
 80265da:	b08b      	sub	sp, #44	@ 0x2c
 80265dc:	429a      	cmp	r2, r3
 80265de:	db02      	blt.n	80265e6 <__multiply+0x16>
 80265e0:	0023      	movs	r3, r4
 80265e2:	000c      	movs	r4, r1
 80265e4:	001d      	movs	r5, r3
 80265e6:	6927      	ldr	r7, [r4, #16]
 80265e8:	692e      	ldr	r6, [r5, #16]
 80265ea:	6861      	ldr	r1, [r4, #4]
 80265ec:	19bb      	adds	r3, r7, r6
 80265ee:	9303      	str	r3, [sp, #12]
 80265f0:	68a3      	ldr	r3, [r4, #8]
 80265f2:	19ba      	adds	r2, r7, r6
 80265f4:	4293      	cmp	r3, r2
 80265f6:	da00      	bge.n	80265fa <__multiply+0x2a>
 80265f8:	3101      	adds	r1, #1
 80265fa:	f7ff fe89 	bl	8026310 <_Balloc>
 80265fe:	9002      	str	r0, [sp, #8]
 8026600:	2800      	cmp	r0, #0
 8026602:	d106      	bne.n	8026612 <__multiply+0x42>
 8026604:	21b1      	movs	r1, #177	@ 0xb1
 8026606:	4b49      	ldr	r3, [pc, #292]	@ (802672c <__multiply+0x15c>)
 8026608:	4849      	ldr	r0, [pc, #292]	@ (8026730 <__multiply+0x160>)
 802660a:	9a02      	ldr	r2, [sp, #8]
 802660c:	0049      	lsls	r1, r1, #1
 802660e:	f000 ff5f 	bl	80274d0 <__assert_func>
 8026612:	9b02      	ldr	r3, [sp, #8]
 8026614:	2200      	movs	r2, #0
 8026616:	3314      	adds	r3, #20
 8026618:	469c      	mov	ip, r3
 802661a:	19bb      	adds	r3, r7, r6
 802661c:	009b      	lsls	r3, r3, #2
 802661e:	4463      	add	r3, ip
 8026620:	9304      	str	r3, [sp, #16]
 8026622:	4663      	mov	r3, ip
 8026624:	9904      	ldr	r1, [sp, #16]
 8026626:	428b      	cmp	r3, r1
 8026628:	d32a      	bcc.n	8026680 <__multiply+0xb0>
 802662a:	0023      	movs	r3, r4
 802662c:	00bf      	lsls	r7, r7, #2
 802662e:	3314      	adds	r3, #20
 8026630:	3514      	adds	r5, #20
 8026632:	9308      	str	r3, [sp, #32]
 8026634:	00b6      	lsls	r6, r6, #2
 8026636:	19db      	adds	r3, r3, r7
 8026638:	9305      	str	r3, [sp, #20]
 802663a:	19ab      	adds	r3, r5, r6
 802663c:	9309      	str	r3, [sp, #36]	@ 0x24
 802663e:	2304      	movs	r3, #4
 8026640:	9306      	str	r3, [sp, #24]
 8026642:	0023      	movs	r3, r4
 8026644:	9a05      	ldr	r2, [sp, #20]
 8026646:	3315      	adds	r3, #21
 8026648:	9501      	str	r5, [sp, #4]
 802664a:	429a      	cmp	r2, r3
 802664c:	d305      	bcc.n	802665a <__multiply+0x8a>
 802664e:	1b13      	subs	r3, r2, r4
 8026650:	3b15      	subs	r3, #21
 8026652:	089b      	lsrs	r3, r3, #2
 8026654:	3301      	adds	r3, #1
 8026656:	009b      	lsls	r3, r3, #2
 8026658:	9306      	str	r3, [sp, #24]
 802665a:	9b01      	ldr	r3, [sp, #4]
 802665c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802665e:	4293      	cmp	r3, r2
 8026660:	d310      	bcc.n	8026684 <__multiply+0xb4>
 8026662:	9b03      	ldr	r3, [sp, #12]
 8026664:	2b00      	cmp	r3, #0
 8026666:	dd05      	ble.n	8026674 <__multiply+0xa4>
 8026668:	9b04      	ldr	r3, [sp, #16]
 802666a:	3b04      	subs	r3, #4
 802666c:	9304      	str	r3, [sp, #16]
 802666e:	681b      	ldr	r3, [r3, #0]
 8026670:	2b00      	cmp	r3, #0
 8026672:	d056      	beq.n	8026722 <__multiply+0x152>
 8026674:	9b02      	ldr	r3, [sp, #8]
 8026676:	9a03      	ldr	r2, [sp, #12]
 8026678:	0018      	movs	r0, r3
 802667a:	611a      	str	r2, [r3, #16]
 802667c:	b00b      	add	sp, #44	@ 0x2c
 802667e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026680:	c304      	stmia	r3!, {r2}
 8026682:	e7cf      	b.n	8026624 <__multiply+0x54>
 8026684:	9b01      	ldr	r3, [sp, #4]
 8026686:	6818      	ldr	r0, [r3, #0]
 8026688:	b280      	uxth	r0, r0
 802668a:	2800      	cmp	r0, #0
 802668c:	d01e      	beq.n	80266cc <__multiply+0xfc>
 802668e:	4667      	mov	r7, ip
 8026690:	2500      	movs	r5, #0
 8026692:	9e08      	ldr	r6, [sp, #32]
 8026694:	ce02      	ldmia	r6!, {r1}
 8026696:	683b      	ldr	r3, [r7, #0]
 8026698:	9307      	str	r3, [sp, #28]
 802669a:	b28b      	uxth	r3, r1
 802669c:	4343      	muls	r3, r0
 802669e:	001a      	movs	r2, r3
 80266a0:	466b      	mov	r3, sp
 80266a2:	0c09      	lsrs	r1, r1, #16
 80266a4:	8b9b      	ldrh	r3, [r3, #28]
 80266a6:	4341      	muls	r1, r0
 80266a8:	18d3      	adds	r3, r2, r3
 80266aa:	9a07      	ldr	r2, [sp, #28]
 80266ac:	195b      	adds	r3, r3, r5
 80266ae:	0c12      	lsrs	r2, r2, #16
 80266b0:	1889      	adds	r1, r1, r2
 80266b2:	0c1a      	lsrs	r2, r3, #16
 80266b4:	188a      	adds	r2, r1, r2
 80266b6:	b29b      	uxth	r3, r3
 80266b8:	0c15      	lsrs	r5, r2, #16
 80266ba:	0412      	lsls	r2, r2, #16
 80266bc:	431a      	orrs	r2, r3
 80266be:	9b05      	ldr	r3, [sp, #20]
 80266c0:	c704      	stmia	r7!, {r2}
 80266c2:	42b3      	cmp	r3, r6
 80266c4:	d8e6      	bhi.n	8026694 <__multiply+0xc4>
 80266c6:	4663      	mov	r3, ip
 80266c8:	9a06      	ldr	r2, [sp, #24]
 80266ca:	509d      	str	r5, [r3, r2]
 80266cc:	9b01      	ldr	r3, [sp, #4]
 80266ce:	6818      	ldr	r0, [r3, #0]
 80266d0:	0c00      	lsrs	r0, r0, #16
 80266d2:	d020      	beq.n	8026716 <__multiply+0x146>
 80266d4:	4663      	mov	r3, ip
 80266d6:	0025      	movs	r5, r4
 80266d8:	4661      	mov	r1, ip
 80266da:	2700      	movs	r7, #0
 80266dc:	681b      	ldr	r3, [r3, #0]
 80266de:	3514      	adds	r5, #20
 80266e0:	682a      	ldr	r2, [r5, #0]
 80266e2:	680e      	ldr	r6, [r1, #0]
 80266e4:	b292      	uxth	r2, r2
 80266e6:	4342      	muls	r2, r0
 80266e8:	0c36      	lsrs	r6, r6, #16
 80266ea:	1992      	adds	r2, r2, r6
 80266ec:	19d2      	adds	r2, r2, r7
 80266ee:	0416      	lsls	r6, r2, #16
 80266f0:	b29b      	uxth	r3, r3
 80266f2:	431e      	orrs	r6, r3
 80266f4:	600e      	str	r6, [r1, #0]
 80266f6:	cd40      	ldmia	r5!, {r6}
 80266f8:	684b      	ldr	r3, [r1, #4]
 80266fa:	0c36      	lsrs	r6, r6, #16
 80266fc:	4346      	muls	r6, r0
 80266fe:	b29b      	uxth	r3, r3
 8026700:	0c12      	lsrs	r2, r2, #16
 8026702:	18f3      	adds	r3, r6, r3
 8026704:	189b      	adds	r3, r3, r2
 8026706:	9a05      	ldr	r2, [sp, #20]
 8026708:	0c1f      	lsrs	r7, r3, #16
 802670a:	3104      	adds	r1, #4
 802670c:	42aa      	cmp	r2, r5
 802670e:	d8e7      	bhi.n	80266e0 <__multiply+0x110>
 8026710:	4662      	mov	r2, ip
 8026712:	9906      	ldr	r1, [sp, #24]
 8026714:	5053      	str	r3, [r2, r1]
 8026716:	9b01      	ldr	r3, [sp, #4]
 8026718:	3304      	adds	r3, #4
 802671a:	9301      	str	r3, [sp, #4]
 802671c:	2304      	movs	r3, #4
 802671e:	449c      	add	ip, r3
 8026720:	e79b      	b.n	802665a <__multiply+0x8a>
 8026722:	9b03      	ldr	r3, [sp, #12]
 8026724:	3b01      	subs	r3, #1
 8026726:	9303      	str	r3, [sp, #12]
 8026728:	e79b      	b.n	8026662 <__multiply+0x92>
 802672a:	46c0      	nop			@ (mov r8, r8)
 802672c:	0802d3e9 	.word	0x0802d3e9
 8026730:	0802d45a 	.word	0x0802d45a

08026734 <__pow5mult>:
 8026734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026736:	2303      	movs	r3, #3
 8026738:	0015      	movs	r5, r2
 802673a:	0007      	movs	r7, r0
 802673c:	000e      	movs	r6, r1
 802673e:	401a      	ands	r2, r3
 8026740:	421d      	tst	r5, r3
 8026742:	d008      	beq.n	8026756 <__pow5mult+0x22>
 8026744:	4925      	ldr	r1, [pc, #148]	@ (80267dc <__pow5mult+0xa8>)
 8026746:	3a01      	subs	r2, #1
 8026748:	0092      	lsls	r2, r2, #2
 802674a:	5852      	ldr	r2, [r2, r1]
 802674c:	2300      	movs	r3, #0
 802674e:	0031      	movs	r1, r6
 8026750:	f7ff fe46 	bl	80263e0 <__multadd>
 8026754:	0006      	movs	r6, r0
 8026756:	10ad      	asrs	r5, r5, #2
 8026758:	d03d      	beq.n	80267d6 <__pow5mult+0xa2>
 802675a:	69fc      	ldr	r4, [r7, #28]
 802675c:	2c00      	cmp	r4, #0
 802675e:	d10f      	bne.n	8026780 <__pow5mult+0x4c>
 8026760:	2010      	movs	r0, #16
 8026762:	f7ff fd07 	bl	8026174 <malloc>
 8026766:	1e02      	subs	r2, r0, #0
 8026768:	61f8      	str	r0, [r7, #28]
 802676a:	d105      	bne.n	8026778 <__pow5mult+0x44>
 802676c:	21b4      	movs	r1, #180	@ 0xb4
 802676e:	4b1c      	ldr	r3, [pc, #112]	@ (80267e0 <__pow5mult+0xac>)
 8026770:	481c      	ldr	r0, [pc, #112]	@ (80267e4 <__pow5mult+0xb0>)
 8026772:	31ff      	adds	r1, #255	@ 0xff
 8026774:	f000 feac 	bl	80274d0 <__assert_func>
 8026778:	6044      	str	r4, [r0, #4]
 802677a:	6084      	str	r4, [r0, #8]
 802677c:	6004      	str	r4, [r0, #0]
 802677e:	60c4      	str	r4, [r0, #12]
 8026780:	69fb      	ldr	r3, [r7, #28]
 8026782:	689c      	ldr	r4, [r3, #8]
 8026784:	9301      	str	r3, [sp, #4]
 8026786:	2c00      	cmp	r4, #0
 8026788:	d108      	bne.n	802679c <__pow5mult+0x68>
 802678a:	0038      	movs	r0, r7
 802678c:	4916      	ldr	r1, [pc, #88]	@ (80267e8 <__pow5mult+0xb4>)
 802678e:	f7ff ff07 	bl	80265a0 <__i2b>
 8026792:	9b01      	ldr	r3, [sp, #4]
 8026794:	0004      	movs	r4, r0
 8026796:	6098      	str	r0, [r3, #8]
 8026798:	2300      	movs	r3, #0
 802679a:	6003      	str	r3, [r0, #0]
 802679c:	2301      	movs	r3, #1
 802679e:	421d      	tst	r5, r3
 80267a0:	d00a      	beq.n	80267b8 <__pow5mult+0x84>
 80267a2:	0031      	movs	r1, r6
 80267a4:	0022      	movs	r2, r4
 80267a6:	0038      	movs	r0, r7
 80267a8:	f7ff ff12 	bl	80265d0 <__multiply>
 80267ac:	0031      	movs	r1, r6
 80267ae:	9001      	str	r0, [sp, #4]
 80267b0:	0038      	movs	r0, r7
 80267b2:	f7ff fdf1 	bl	8026398 <_Bfree>
 80267b6:	9e01      	ldr	r6, [sp, #4]
 80267b8:	106d      	asrs	r5, r5, #1
 80267ba:	d00c      	beq.n	80267d6 <__pow5mult+0xa2>
 80267bc:	6820      	ldr	r0, [r4, #0]
 80267be:	2800      	cmp	r0, #0
 80267c0:	d107      	bne.n	80267d2 <__pow5mult+0x9e>
 80267c2:	0022      	movs	r2, r4
 80267c4:	0021      	movs	r1, r4
 80267c6:	0038      	movs	r0, r7
 80267c8:	f7ff ff02 	bl	80265d0 <__multiply>
 80267cc:	2300      	movs	r3, #0
 80267ce:	6020      	str	r0, [r4, #0]
 80267d0:	6003      	str	r3, [r0, #0]
 80267d2:	0004      	movs	r4, r0
 80267d4:	e7e2      	b.n	802679c <__pow5mult+0x68>
 80267d6:	0030      	movs	r0, r6
 80267d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80267da:	46c0      	nop			@ (mov r8, r8)
 80267dc:	0802d4b4 	.word	0x0802d4b4
 80267e0:	0802d37a 	.word	0x0802d37a
 80267e4:	0802d45a 	.word	0x0802d45a
 80267e8:	00000271 	.word	0x00000271

080267ec <__lshift>:
 80267ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80267ee:	000c      	movs	r4, r1
 80267f0:	0016      	movs	r6, r2
 80267f2:	6923      	ldr	r3, [r4, #16]
 80267f4:	1157      	asrs	r7, r2, #5
 80267f6:	b085      	sub	sp, #20
 80267f8:	18fb      	adds	r3, r7, r3
 80267fa:	9301      	str	r3, [sp, #4]
 80267fc:	3301      	adds	r3, #1
 80267fe:	9300      	str	r3, [sp, #0]
 8026800:	6849      	ldr	r1, [r1, #4]
 8026802:	68a3      	ldr	r3, [r4, #8]
 8026804:	9002      	str	r0, [sp, #8]
 8026806:	9a00      	ldr	r2, [sp, #0]
 8026808:	4293      	cmp	r3, r2
 802680a:	db10      	blt.n	802682e <__lshift+0x42>
 802680c:	9802      	ldr	r0, [sp, #8]
 802680e:	f7ff fd7f 	bl	8026310 <_Balloc>
 8026812:	2300      	movs	r3, #0
 8026814:	0001      	movs	r1, r0
 8026816:	0005      	movs	r5, r0
 8026818:	001a      	movs	r2, r3
 802681a:	3114      	adds	r1, #20
 802681c:	4298      	cmp	r0, r3
 802681e:	d10c      	bne.n	802683a <__lshift+0x4e>
 8026820:	21ef      	movs	r1, #239	@ 0xef
 8026822:	002a      	movs	r2, r5
 8026824:	4b25      	ldr	r3, [pc, #148]	@ (80268bc <__lshift+0xd0>)
 8026826:	4826      	ldr	r0, [pc, #152]	@ (80268c0 <__lshift+0xd4>)
 8026828:	0049      	lsls	r1, r1, #1
 802682a:	f000 fe51 	bl	80274d0 <__assert_func>
 802682e:	3101      	adds	r1, #1
 8026830:	005b      	lsls	r3, r3, #1
 8026832:	e7e8      	b.n	8026806 <__lshift+0x1a>
 8026834:	0098      	lsls	r0, r3, #2
 8026836:	500a      	str	r2, [r1, r0]
 8026838:	3301      	adds	r3, #1
 802683a:	42bb      	cmp	r3, r7
 802683c:	dbfa      	blt.n	8026834 <__lshift+0x48>
 802683e:	43fb      	mvns	r3, r7
 8026840:	17db      	asrs	r3, r3, #31
 8026842:	401f      	ands	r7, r3
 8026844:	00bf      	lsls	r7, r7, #2
 8026846:	0023      	movs	r3, r4
 8026848:	201f      	movs	r0, #31
 802684a:	19c9      	adds	r1, r1, r7
 802684c:	0037      	movs	r7, r6
 802684e:	6922      	ldr	r2, [r4, #16]
 8026850:	3314      	adds	r3, #20
 8026852:	0092      	lsls	r2, r2, #2
 8026854:	189a      	adds	r2, r3, r2
 8026856:	4007      	ands	r7, r0
 8026858:	4206      	tst	r6, r0
 802685a:	d029      	beq.n	80268b0 <__lshift+0xc4>
 802685c:	3001      	adds	r0, #1
 802685e:	1bc0      	subs	r0, r0, r7
 8026860:	9003      	str	r0, [sp, #12]
 8026862:	468c      	mov	ip, r1
 8026864:	2000      	movs	r0, #0
 8026866:	681e      	ldr	r6, [r3, #0]
 8026868:	40be      	lsls	r6, r7
 802686a:	4306      	orrs	r6, r0
 802686c:	4660      	mov	r0, ip
 802686e:	c040      	stmia	r0!, {r6}
 8026870:	4684      	mov	ip, r0
 8026872:	9e03      	ldr	r6, [sp, #12]
 8026874:	cb01      	ldmia	r3!, {r0}
 8026876:	40f0      	lsrs	r0, r6
 8026878:	429a      	cmp	r2, r3
 802687a:	d8f4      	bhi.n	8026866 <__lshift+0x7a>
 802687c:	0026      	movs	r6, r4
 802687e:	3615      	adds	r6, #21
 8026880:	2304      	movs	r3, #4
 8026882:	42b2      	cmp	r2, r6
 8026884:	d304      	bcc.n	8026890 <__lshift+0xa4>
 8026886:	1b13      	subs	r3, r2, r4
 8026888:	3b15      	subs	r3, #21
 802688a:	089b      	lsrs	r3, r3, #2
 802688c:	3301      	adds	r3, #1
 802688e:	009b      	lsls	r3, r3, #2
 8026890:	50c8      	str	r0, [r1, r3]
 8026892:	2800      	cmp	r0, #0
 8026894:	d002      	beq.n	802689c <__lshift+0xb0>
 8026896:	9b01      	ldr	r3, [sp, #4]
 8026898:	3302      	adds	r3, #2
 802689a:	9300      	str	r3, [sp, #0]
 802689c:	9b00      	ldr	r3, [sp, #0]
 802689e:	9802      	ldr	r0, [sp, #8]
 80268a0:	3b01      	subs	r3, #1
 80268a2:	0021      	movs	r1, r4
 80268a4:	612b      	str	r3, [r5, #16]
 80268a6:	f7ff fd77 	bl	8026398 <_Bfree>
 80268aa:	0028      	movs	r0, r5
 80268ac:	b005      	add	sp, #20
 80268ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80268b0:	cb01      	ldmia	r3!, {r0}
 80268b2:	c101      	stmia	r1!, {r0}
 80268b4:	429a      	cmp	r2, r3
 80268b6:	d8fb      	bhi.n	80268b0 <__lshift+0xc4>
 80268b8:	e7f0      	b.n	802689c <__lshift+0xb0>
 80268ba:	46c0      	nop			@ (mov r8, r8)
 80268bc:	0802d3e9 	.word	0x0802d3e9
 80268c0:	0802d45a 	.word	0x0802d45a

080268c4 <__mcmp>:
 80268c4:	b530      	push	{r4, r5, lr}
 80268c6:	690b      	ldr	r3, [r1, #16]
 80268c8:	6904      	ldr	r4, [r0, #16]
 80268ca:	0002      	movs	r2, r0
 80268cc:	1ae0      	subs	r0, r4, r3
 80268ce:	429c      	cmp	r4, r3
 80268d0:	d10f      	bne.n	80268f2 <__mcmp+0x2e>
 80268d2:	3214      	adds	r2, #20
 80268d4:	009b      	lsls	r3, r3, #2
 80268d6:	3114      	adds	r1, #20
 80268d8:	0014      	movs	r4, r2
 80268da:	18c9      	adds	r1, r1, r3
 80268dc:	18d2      	adds	r2, r2, r3
 80268de:	3a04      	subs	r2, #4
 80268e0:	3904      	subs	r1, #4
 80268e2:	6815      	ldr	r5, [r2, #0]
 80268e4:	680b      	ldr	r3, [r1, #0]
 80268e6:	429d      	cmp	r5, r3
 80268e8:	d004      	beq.n	80268f4 <__mcmp+0x30>
 80268ea:	2001      	movs	r0, #1
 80268ec:	429d      	cmp	r5, r3
 80268ee:	d200      	bcs.n	80268f2 <__mcmp+0x2e>
 80268f0:	3802      	subs	r0, #2
 80268f2:	bd30      	pop	{r4, r5, pc}
 80268f4:	4294      	cmp	r4, r2
 80268f6:	d3f2      	bcc.n	80268de <__mcmp+0x1a>
 80268f8:	e7fb      	b.n	80268f2 <__mcmp+0x2e>
	...

080268fc <__mdiff>:
 80268fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80268fe:	000c      	movs	r4, r1
 8026900:	b087      	sub	sp, #28
 8026902:	9000      	str	r0, [sp, #0]
 8026904:	0011      	movs	r1, r2
 8026906:	0020      	movs	r0, r4
 8026908:	0017      	movs	r7, r2
 802690a:	f7ff ffdb 	bl	80268c4 <__mcmp>
 802690e:	1e05      	subs	r5, r0, #0
 8026910:	d110      	bne.n	8026934 <__mdiff+0x38>
 8026912:	0001      	movs	r1, r0
 8026914:	9800      	ldr	r0, [sp, #0]
 8026916:	f7ff fcfb 	bl	8026310 <_Balloc>
 802691a:	1e02      	subs	r2, r0, #0
 802691c:	d104      	bne.n	8026928 <__mdiff+0x2c>
 802691e:	4b40      	ldr	r3, [pc, #256]	@ (8026a20 <__mdiff+0x124>)
 8026920:	4840      	ldr	r0, [pc, #256]	@ (8026a24 <__mdiff+0x128>)
 8026922:	4941      	ldr	r1, [pc, #260]	@ (8026a28 <__mdiff+0x12c>)
 8026924:	f000 fdd4 	bl	80274d0 <__assert_func>
 8026928:	2301      	movs	r3, #1
 802692a:	6145      	str	r5, [r0, #20]
 802692c:	6103      	str	r3, [r0, #16]
 802692e:	0010      	movs	r0, r2
 8026930:	b007      	add	sp, #28
 8026932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026934:	2600      	movs	r6, #0
 8026936:	42b0      	cmp	r0, r6
 8026938:	da03      	bge.n	8026942 <__mdiff+0x46>
 802693a:	0023      	movs	r3, r4
 802693c:	003c      	movs	r4, r7
 802693e:	001f      	movs	r7, r3
 8026940:	3601      	adds	r6, #1
 8026942:	6861      	ldr	r1, [r4, #4]
 8026944:	9800      	ldr	r0, [sp, #0]
 8026946:	f7ff fce3 	bl	8026310 <_Balloc>
 802694a:	1e02      	subs	r2, r0, #0
 802694c:	d103      	bne.n	8026956 <__mdiff+0x5a>
 802694e:	4b34      	ldr	r3, [pc, #208]	@ (8026a20 <__mdiff+0x124>)
 8026950:	4834      	ldr	r0, [pc, #208]	@ (8026a24 <__mdiff+0x128>)
 8026952:	4936      	ldr	r1, [pc, #216]	@ (8026a2c <__mdiff+0x130>)
 8026954:	e7e6      	b.n	8026924 <__mdiff+0x28>
 8026956:	6923      	ldr	r3, [r4, #16]
 8026958:	3414      	adds	r4, #20
 802695a:	9300      	str	r3, [sp, #0]
 802695c:	009b      	lsls	r3, r3, #2
 802695e:	18e3      	adds	r3, r4, r3
 8026960:	0021      	movs	r1, r4
 8026962:	9401      	str	r4, [sp, #4]
 8026964:	003c      	movs	r4, r7
 8026966:	9302      	str	r3, [sp, #8]
 8026968:	693b      	ldr	r3, [r7, #16]
 802696a:	3414      	adds	r4, #20
 802696c:	009b      	lsls	r3, r3, #2
 802696e:	18e3      	adds	r3, r4, r3
 8026970:	9303      	str	r3, [sp, #12]
 8026972:	0003      	movs	r3, r0
 8026974:	60c6      	str	r6, [r0, #12]
 8026976:	468c      	mov	ip, r1
 8026978:	2000      	movs	r0, #0
 802697a:	3314      	adds	r3, #20
 802697c:	9304      	str	r3, [sp, #16]
 802697e:	9305      	str	r3, [sp, #20]
 8026980:	4663      	mov	r3, ip
 8026982:	cb20      	ldmia	r3!, {r5}
 8026984:	b2a9      	uxth	r1, r5
 8026986:	000e      	movs	r6, r1
 8026988:	469c      	mov	ip, r3
 802698a:	cc08      	ldmia	r4!, {r3}
 802698c:	0c2d      	lsrs	r5, r5, #16
 802698e:	b299      	uxth	r1, r3
 8026990:	1a71      	subs	r1, r6, r1
 8026992:	1809      	adds	r1, r1, r0
 8026994:	0c1b      	lsrs	r3, r3, #16
 8026996:	1408      	asrs	r0, r1, #16
 8026998:	1aeb      	subs	r3, r5, r3
 802699a:	181b      	adds	r3, r3, r0
 802699c:	1418      	asrs	r0, r3, #16
 802699e:	b289      	uxth	r1, r1
 80269a0:	041b      	lsls	r3, r3, #16
 80269a2:	4319      	orrs	r1, r3
 80269a4:	9b05      	ldr	r3, [sp, #20]
 80269a6:	c302      	stmia	r3!, {r1}
 80269a8:	9305      	str	r3, [sp, #20]
 80269aa:	9b03      	ldr	r3, [sp, #12]
 80269ac:	42a3      	cmp	r3, r4
 80269ae:	d8e7      	bhi.n	8026980 <__mdiff+0x84>
 80269b0:	0039      	movs	r1, r7
 80269b2:	9c03      	ldr	r4, [sp, #12]
 80269b4:	3115      	adds	r1, #21
 80269b6:	2304      	movs	r3, #4
 80269b8:	428c      	cmp	r4, r1
 80269ba:	d304      	bcc.n	80269c6 <__mdiff+0xca>
 80269bc:	1be3      	subs	r3, r4, r7
 80269be:	3b15      	subs	r3, #21
 80269c0:	089b      	lsrs	r3, r3, #2
 80269c2:	3301      	adds	r3, #1
 80269c4:	009b      	lsls	r3, r3, #2
 80269c6:	9901      	ldr	r1, [sp, #4]
 80269c8:	18cd      	adds	r5, r1, r3
 80269ca:	9904      	ldr	r1, [sp, #16]
 80269cc:	002e      	movs	r6, r5
 80269ce:	18cb      	adds	r3, r1, r3
 80269d0:	001f      	movs	r7, r3
 80269d2:	9902      	ldr	r1, [sp, #8]
 80269d4:	428e      	cmp	r6, r1
 80269d6:	d311      	bcc.n	80269fc <__mdiff+0x100>
 80269d8:	9c02      	ldr	r4, [sp, #8]
 80269da:	1ee9      	subs	r1, r5, #3
 80269dc:	2000      	movs	r0, #0
 80269de:	428c      	cmp	r4, r1
 80269e0:	d304      	bcc.n	80269ec <__mdiff+0xf0>
 80269e2:	0021      	movs	r1, r4
 80269e4:	3103      	adds	r1, #3
 80269e6:	1b49      	subs	r1, r1, r5
 80269e8:	0889      	lsrs	r1, r1, #2
 80269ea:	0088      	lsls	r0, r1, #2
 80269ec:	181b      	adds	r3, r3, r0
 80269ee:	3b04      	subs	r3, #4
 80269f0:	6819      	ldr	r1, [r3, #0]
 80269f2:	2900      	cmp	r1, #0
 80269f4:	d010      	beq.n	8026a18 <__mdiff+0x11c>
 80269f6:	9b00      	ldr	r3, [sp, #0]
 80269f8:	6113      	str	r3, [r2, #16]
 80269fa:	e798      	b.n	802692e <__mdiff+0x32>
 80269fc:	4684      	mov	ip, r0
 80269fe:	ce02      	ldmia	r6!, {r1}
 8026a00:	b288      	uxth	r0, r1
 8026a02:	4460      	add	r0, ip
 8026a04:	1400      	asrs	r0, r0, #16
 8026a06:	0c0c      	lsrs	r4, r1, #16
 8026a08:	1904      	adds	r4, r0, r4
 8026a0a:	4461      	add	r1, ip
 8026a0c:	1420      	asrs	r0, r4, #16
 8026a0e:	b289      	uxth	r1, r1
 8026a10:	0424      	lsls	r4, r4, #16
 8026a12:	4321      	orrs	r1, r4
 8026a14:	c702      	stmia	r7!, {r1}
 8026a16:	e7dc      	b.n	80269d2 <__mdiff+0xd6>
 8026a18:	9900      	ldr	r1, [sp, #0]
 8026a1a:	3901      	subs	r1, #1
 8026a1c:	9100      	str	r1, [sp, #0]
 8026a1e:	e7e6      	b.n	80269ee <__mdiff+0xf2>
 8026a20:	0802d3e9 	.word	0x0802d3e9
 8026a24:	0802d45a 	.word	0x0802d45a
 8026a28:	00000237 	.word	0x00000237
 8026a2c:	00000245 	.word	0x00000245

08026a30 <__ulp>:
 8026a30:	b510      	push	{r4, lr}
 8026a32:	2400      	movs	r4, #0
 8026a34:	4b0c      	ldr	r3, [pc, #48]	@ (8026a68 <__ulp+0x38>)
 8026a36:	4a0d      	ldr	r2, [pc, #52]	@ (8026a6c <__ulp+0x3c>)
 8026a38:	400b      	ands	r3, r1
 8026a3a:	189b      	adds	r3, r3, r2
 8026a3c:	42a3      	cmp	r3, r4
 8026a3e:	dc06      	bgt.n	8026a4e <__ulp+0x1e>
 8026a40:	425b      	negs	r3, r3
 8026a42:	151a      	asrs	r2, r3, #20
 8026a44:	2a13      	cmp	r2, #19
 8026a46:	dc05      	bgt.n	8026a54 <__ulp+0x24>
 8026a48:	2380      	movs	r3, #128	@ 0x80
 8026a4a:	031b      	lsls	r3, r3, #12
 8026a4c:	4113      	asrs	r3, r2
 8026a4e:	0019      	movs	r1, r3
 8026a50:	0020      	movs	r0, r4
 8026a52:	bd10      	pop	{r4, pc}
 8026a54:	3a14      	subs	r2, #20
 8026a56:	2401      	movs	r4, #1
 8026a58:	2a1e      	cmp	r2, #30
 8026a5a:	dc02      	bgt.n	8026a62 <__ulp+0x32>
 8026a5c:	2480      	movs	r4, #128	@ 0x80
 8026a5e:	0624      	lsls	r4, r4, #24
 8026a60:	40d4      	lsrs	r4, r2
 8026a62:	2300      	movs	r3, #0
 8026a64:	e7f3      	b.n	8026a4e <__ulp+0x1e>
 8026a66:	46c0      	nop			@ (mov r8, r8)
 8026a68:	7ff00000 	.word	0x7ff00000
 8026a6c:	fcc00000 	.word	0xfcc00000

08026a70 <__b2d>:
 8026a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026a72:	0006      	movs	r6, r0
 8026a74:	6903      	ldr	r3, [r0, #16]
 8026a76:	3614      	adds	r6, #20
 8026a78:	009b      	lsls	r3, r3, #2
 8026a7a:	18f3      	adds	r3, r6, r3
 8026a7c:	1f1d      	subs	r5, r3, #4
 8026a7e:	682c      	ldr	r4, [r5, #0]
 8026a80:	000f      	movs	r7, r1
 8026a82:	0020      	movs	r0, r4
 8026a84:	9301      	str	r3, [sp, #4]
 8026a86:	f7ff fd3b 	bl	8026500 <__hi0bits>
 8026a8a:	2220      	movs	r2, #32
 8026a8c:	1a12      	subs	r2, r2, r0
 8026a8e:	603a      	str	r2, [r7, #0]
 8026a90:	0003      	movs	r3, r0
 8026a92:	4a1c      	ldr	r2, [pc, #112]	@ (8026b04 <__b2d+0x94>)
 8026a94:	280a      	cmp	r0, #10
 8026a96:	dc15      	bgt.n	8026ac4 <__b2d+0x54>
 8026a98:	210b      	movs	r1, #11
 8026a9a:	0027      	movs	r7, r4
 8026a9c:	1a09      	subs	r1, r1, r0
 8026a9e:	40cf      	lsrs	r7, r1
 8026aa0:	433a      	orrs	r2, r7
 8026aa2:	468c      	mov	ip, r1
 8026aa4:	0011      	movs	r1, r2
 8026aa6:	2200      	movs	r2, #0
 8026aa8:	42ae      	cmp	r6, r5
 8026aaa:	d202      	bcs.n	8026ab2 <__b2d+0x42>
 8026aac:	9a01      	ldr	r2, [sp, #4]
 8026aae:	3a08      	subs	r2, #8
 8026ab0:	6812      	ldr	r2, [r2, #0]
 8026ab2:	3315      	adds	r3, #21
 8026ab4:	409c      	lsls	r4, r3
 8026ab6:	4663      	mov	r3, ip
 8026ab8:	0027      	movs	r7, r4
 8026aba:	40da      	lsrs	r2, r3
 8026abc:	4317      	orrs	r7, r2
 8026abe:	0038      	movs	r0, r7
 8026ac0:	b003      	add	sp, #12
 8026ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026ac4:	2700      	movs	r7, #0
 8026ac6:	42ae      	cmp	r6, r5
 8026ac8:	d202      	bcs.n	8026ad0 <__b2d+0x60>
 8026aca:	9d01      	ldr	r5, [sp, #4]
 8026acc:	3d08      	subs	r5, #8
 8026ace:	682f      	ldr	r7, [r5, #0]
 8026ad0:	210b      	movs	r1, #11
 8026ad2:	4249      	negs	r1, r1
 8026ad4:	468c      	mov	ip, r1
 8026ad6:	449c      	add	ip, r3
 8026ad8:	2b0b      	cmp	r3, #11
 8026ada:	d010      	beq.n	8026afe <__b2d+0x8e>
 8026adc:	4661      	mov	r1, ip
 8026ade:	2320      	movs	r3, #32
 8026ae0:	408c      	lsls	r4, r1
 8026ae2:	1a5b      	subs	r3, r3, r1
 8026ae4:	0039      	movs	r1, r7
 8026ae6:	40d9      	lsrs	r1, r3
 8026ae8:	430c      	orrs	r4, r1
 8026aea:	4322      	orrs	r2, r4
 8026aec:	0011      	movs	r1, r2
 8026aee:	2200      	movs	r2, #0
 8026af0:	42b5      	cmp	r5, r6
 8026af2:	d901      	bls.n	8026af8 <__b2d+0x88>
 8026af4:	3d04      	subs	r5, #4
 8026af6:	682a      	ldr	r2, [r5, #0]
 8026af8:	4664      	mov	r4, ip
 8026afa:	40a7      	lsls	r7, r4
 8026afc:	e7dd      	b.n	8026aba <__b2d+0x4a>
 8026afe:	4322      	orrs	r2, r4
 8026b00:	0011      	movs	r1, r2
 8026b02:	e7dc      	b.n	8026abe <__b2d+0x4e>
 8026b04:	3ff00000 	.word	0x3ff00000

08026b08 <__d2b>:
 8026b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026b0a:	2101      	movs	r1, #1
 8026b0c:	0016      	movs	r6, r2
 8026b0e:	001f      	movs	r7, r3
 8026b10:	f7ff fbfe 	bl	8026310 <_Balloc>
 8026b14:	1e04      	subs	r4, r0, #0
 8026b16:	d105      	bne.n	8026b24 <__d2b+0x1c>
 8026b18:	0022      	movs	r2, r4
 8026b1a:	4b25      	ldr	r3, [pc, #148]	@ (8026bb0 <__d2b+0xa8>)
 8026b1c:	4825      	ldr	r0, [pc, #148]	@ (8026bb4 <__d2b+0xac>)
 8026b1e:	4926      	ldr	r1, [pc, #152]	@ (8026bb8 <__d2b+0xb0>)
 8026b20:	f000 fcd6 	bl	80274d0 <__assert_func>
 8026b24:	033b      	lsls	r3, r7, #12
 8026b26:	007d      	lsls	r5, r7, #1
 8026b28:	0b1b      	lsrs	r3, r3, #12
 8026b2a:	0d6d      	lsrs	r5, r5, #21
 8026b2c:	d002      	beq.n	8026b34 <__d2b+0x2c>
 8026b2e:	2280      	movs	r2, #128	@ 0x80
 8026b30:	0352      	lsls	r2, r2, #13
 8026b32:	4313      	orrs	r3, r2
 8026b34:	9301      	str	r3, [sp, #4]
 8026b36:	2e00      	cmp	r6, #0
 8026b38:	d025      	beq.n	8026b86 <__d2b+0x7e>
 8026b3a:	4668      	mov	r0, sp
 8026b3c:	9600      	str	r6, [sp, #0]
 8026b3e:	f7ff fd00 	bl	8026542 <__lo0bits>
 8026b42:	9b01      	ldr	r3, [sp, #4]
 8026b44:	9900      	ldr	r1, [sp, #0]
 8026b46:	2800      	cmp	r0, #0
 8026b48:	d01b      	beq.n	8026b82 <__d2b+0x7a>
 8026b4a:	2220      	movs	r2, #32
 8026b4c:	001e      	movs	r6, r3
 8026b4e:	1a12      	subs	r2, r2, r0
 8026b50:	4096      	lsls	r6, r2
 8026b52:	0032      	movs	r2, r6
 8026b54:	40c3      	lsrs	r3, r0
 8026b56:	430a      	orrs	r2, r1
 8026b58:	6162      	str	r2, [r4, #20]
 8026b5a:	9301      	str	r3, [sp, #4]
 8026b5c:	9e01      	ldr	r6, [sp, #4]
 8026b5e:	61a6      	str	r6, [r4, #24]
 8026b60:	1e73      	subs	r3, r6, #1
 8026b62:	419e      	sbcs	r6, r3
 8026b64:	3601      	adds	r6, #1
 8026b66:	6126      	str	r6, [r4, #16]
 8026b68:	2d00      	cmp	r5, #0
 8026b6a:	d014      	beq.n	8026b96 <__d2b+0x8e>
 8026b6c:	2635      	movs	r6, #53	@ 0x35
 8026b6e:	4b13      	ldr	r3, [pc, #76]	@ (8026bbc <__d2b+0xb4>)
 8026b70:	18ed      	adds	r5, r5, r3
 8026b72:	9b08      	ldr	r3, [sp, #32]
 8026b74:	182d      	adds	r5, r5, r0
 8026b76:	601d      	str	r5, [r3, #0]
 8026b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026b7a:	1a36      	subs	r6, r6, r0
 8026b7c:	601e      	str	r6, [r3, #0]
 8026b7e:	0020      	movs	r0, r4
 8026b80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026b82:	6161      	str	r1, [r4, #20]
 8026b84:	e7ea      	b.n	8026b5c <__d2b+0x54>
 8026b86:	a801      	add	r0, sp, #4
 8026b88:	f7ff fcdb 	bl	8026542 <__lo0bits>
 8026b8c:	9b01      	ldr	r3, [sp, #4]
 8026b8e:	2601      	movs	r6, #1
 8026b90:	6163      	str	r3, [r4, #20]
 8026b92:	3020      	adds	r0, #32
 8026b94:	e7e7      	b.n	8026b66 <__d2b+0x5e>
 8026b96:	4b0a      	ldr	r3, [pc, #40]	@ (8026bc0 <__d2b+0xb8>)
 8026b98:	18c0      	adds	r0, r0, r3
 8026b9a:	9b08      	ldr	r3, [sp, #32]
 8026b9c:	6018      	str	r0, [r3, #0]
 8026b9e:	4b09      	ldr	r3, [pc, #36]	@ (8026bc4 <__d2b+0xbc>)
 8026ba0:	18f3      	adds	r3, r6, r3
 8026ba2:	009b      	lsls	r3, r3, #2
 8026ba4:	18e3      	adds	r3, r4, r3
 8026ba6:	6958      	ldr	r0, [r3, #20]
 8026ba8:	f7ff fcaa 	bl	8026500 <__hi0bits>
 8026bac:	0176      	lsls	r6, r6, #5
 8026bae:	e7e3      	b.n	8026b78 <__d2b+0x70>
 8026bb0:	0802d3e9 	.word	0x0802d3e9
 8026bb4:	0802d45a 	.word	0x0802d45a
 8026bb8:	0000030f 	.word	0x0000030f
 8026bbc:	fffffbcd 	.word	0xfffffbcd
 8026bc0:	fffffbce 	.word	0xfffffbce
 8026bc4:	3fffffff 	.word	0x3fffffff

08026bc8 <__ratio>:
 8026bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026bca:	b087      	sub	sp, #28
 8026bcc:	000f      	movs	r7, r1
 8026bce:	a904      	add	r1, sp, #16
 8026bd0:	0006      	movs	r6, r0
 8026bd2:	f7ff ff4d 	bl	8026a70 <__b2d>
 8026bd6:	9000      	str	r0, [sp, #0]
 8026bd8:	9101      	str	r1, [sp, #4]
 8026bda:	9b00      	ldr	r3, [sp, #0]
 8026bdc:	9c01      	ldr	r4, [sp, #4]
 8026bde:	0038      	movs	r0, r7
 8026be0:	a905      	add	r1, sp, #20
 8026be2:	9302      	str	r3, [sp, #8]
 8026be4:	9403      	str	r4, [sp, #12]
 8026be6:	f7ff ff43 	bl	8026a70 <__b2d>
 8026bea:	000d      	movs	r5, r1
 8026bec:	0002      	movs	r2, r0
 8026bee:	000b      	movs	r3, r1
 8026bf0:	6930      	ldr	r0, [r6, #16]
 8026bf2:	6939      	ldr	r1, [r7, #16]
 8026bf4:	9e04      	ldr	r6, [sp, #16]
 8026bf6:	1a40      	subs	r0, r0, r1
 8026bf8:	9905      	ldr	r1, [sp, #20]
 8026bfa:	0140      	lsls	r0, r0, #5
 8026bfc:	1a71      	subs	r1, r6, r1
 8026bfe:	1841      	adds	r1, r0, r1
 8026c00:	0508      	lsls	r0, r1, #20
 8026c02:	2900      	cmp	r1, #0
 8026c04:	dd08      	ble.n	8026c18 <__ratio+0x50>
 8026c06:	9901      	ldr	r1, [sp, #4]
 8026c08:	1841      	adds	r1, r0, r1
 8026c0a:	9103      	str	r1, [sp, #12]
 8026c0c:	9802      	ldr	r0, [sp, #8]
 8026c0e:	9903      	ldr	r1, [sp, #12]
 8026c10:	f7db f8d0 	bl	8001db4 <__aeabi_ddiv>
 8026c14:	b007      	add	sp, #28
 8026c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026c18:	1a2b      	subs	r3, r5, r0
 8026c1a:	e7f7      	b.n	8026c0c <__ratio+0x44>

08026c1c <__copybits>:
 8026c1c:	b570      	push	{r4, r5, r6, lr}
 8026c1e:	0014      	movs	r4, r2
 8026c20:	0005      	movs	r5, r0
 8026c22:	3901      	subs	r1, #1
 8026c24:	6913      	ldr	r3, [r2, #16]
 8026c26:	1149      	asrs	r1, r1, #5
 8026c28:	3101      	adds	r1, #1
 8026c2a:	0089      	lsls	r1, r1, #2
 8026c2c:	3414      	adds	r4, #20
 8026c2e:	009b      	lsls	r3, r3, #2
 8026c30:	1841      	adds	r1, r0, r1
 8026c32:	18e3      	adds	r3, r4, r3
 8026c34:	42a3      	cmp	r3, r4
 8026c36:	d80d      	bhi.n	8026c54 <__copybits+0x38>
 8026c38:	0014      	movs	r4, r2
 8026c3a:	3411      	adds	r4, #17
 8026c3c:	2500      	movs	r5, #0
 8026c3e:	429c      	cmp	r4, r3
 8026c40:	d803      	bhi.n	8026c4a <__copybits+0x2e>
 8026c42:	1a9b      	subs	r3, r3, r2
 8026c44:	3b11      	subs	r3, #17
 8026c46:	089b      	lsrs	r3, r3, #2
 8026c48:	009d      	lsls	r5, r3, #2
 8026c4a:	2300      	movs	r3, #0
 8026c4c:	1940      	adds	r0, r0, r5
 8026c4e:	4281      	cmp	r1, r0
 8026c50:	d803      	bhi.n	8026c5a <__copybits+0x3e>
 8026c52:	bd70      	pop	{r4, r5, r6, pc}
 8026c54:	cc40      	ldmia	r4!, {r6}
 8026c56:	c540      	stmia	r5!, {r6}
 8026c58:	e7ec      	b.n	8026c34 <__copybits+0x18>
 8026c5a:	c008      	stmia	r0!, {r3}
 8026c5c:	e7f7      	b.n	8026c4e <__copybits+0x32>

08026c5e <__any_on>:
 8026c5e:	0002      	movs	r2, r0
 8026c60:	6900      	ldr	r0, [r0, #16]
 8026c62:	b510      	push	{r4, lr}
 8026c64:	3214      	adds	r2, #20
 8026c66:	114b      	asrs	r3, r1, #5
 8026c68:	4298      	cmp	r0, r3
 8026c6a:	db13      	blt.n	8026c94 <__any_on+0x36>
 8026c6c:	dd0c      	ble.n	8026c88 <__any_on+0x2a>
 8026c6e:	241f      	movs	r4, #31
 8026c70:	0008      	movs	r0, r1
 8026c72:	4020      	ands	r0, r4
 8026c74:	4221      	tst	r1, r4
 8026c76:	d007      	beq.n	8026c88 <__any_on+0x2a>
 8026c78:	0099      	lsls	r1, r3, #2
 8026c7a:	588c      	ldr	r4, [r1, r2]
 8026c7c:	0021      	movs	r1, r4
 8026c7e:	40c1      	lsrs	r1, r0
 8026c80:	4081      	lsls	r1, r0
 8026c82:	2001      	movs	r0, #1
 8026c84:	428c      	cmp	r4, r1
 8026c86:	d104      	bne.n	8026c92 <__any_on+0x34>
 8026c88:	009b      	lsls	r3, r3, #2
 8026c8a:	18d3      	adds	r3, r2, r3
 8026c8c:	4293      	cmp	r3, r2
 8026c8e:	d803      	bhi.n	8026c98 <__any_on+0x3a>
 8026c90:	2000      	movs	r0, #0
 8026c92:	bd10      	pop	{r4, pc}
 8026c94:	0003      	movs	r3, r0
 8026c96:	e7f7      	b.n	8026c88 <__any_on+0x2a>
 8026c98:	3b04      	subs	r3, #4
 8026c9a:	6819      	ldr	r1, [r3, #0]
 8026c9c:	2900      	cmp	r1, #0
 8026c9e:	d0f5      	beq.n	8026c8c <__any_on+0x2e>
 8026ca0:	2001      	movs	r0, #1
 8026ca2:	e7f6      	b.n	8026c92 <__any_on+0x34>

08026ca4 <__ascii_wctomb>:
 8026ca4:	0003      	movs	r3, r0
 8026ca6:	1e08      	subs	r0, r1, #0
 8026ca8:	d005      	beq.n	8026cb6 <__ascii_wctomb+0x12>
 8026caa:	2aff      	cmp	r2, #255	@ 0xff
 8026cac:	d904      	bls.n	8026cb8 <__ascii_wctomb+0x14>
 8026cae:	228a      	movs	r2, #138	@ 0x8a
 8026cb0:	2001      	movs	r0, #1
 8026cb2:	601a      	str	r2, [r3, #0]
 8026cb4:	4240      	negs	r0, r0
 8026cb6:	4770      	bx	lr
 8026cb8:	2001      	movs	r0, #1
 8026cba:	700a      	strb	r2, [r1, #0]
 8026cbc:	e7fb      	b.n	8026cb6 <__ascii_wctomb+0x12>
	...

08026cc0 <__ssputs_r>:
 8026cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026cc2:	688e      	ldr	r6, [r1, #8]
 8026cc4:	b085      	sub	sp, #20
 8026cc6:	001f      	movs	r7, r3
 8026cc8:	000c      	movs	r4, r1
 8026cca:	680b      	ldr	r3, [r1, #0]
 8026ccc:	9002      	str	r0, [sp, #8]
 8026cce:	9203      	str	r2, [sp, #12]
 8026cd0:	42be      	cmp	r6, r7
 8026cd2:	d830      	bhi.n	8026d36 <__ssputs_r+0x76>
 8026cd4:	210c      	movs	r1, #12
 8026cd6:	5e62      	ldrsh	r2, [r4, r1]
 8026cd8:	2190      	movs	r1, #144	@ 0x90
 8026cda:	00c9      	lsls	r1, r1, #3
 8026cdc:	420a      	tst	r2, r1
 8026cde:	d028      	beq.n	8026d32 <__ssputs_r+0x72>
 8026ce0:	2003      	movs	r0, #3
 8026ce2:	6921      	ldr	r1, [r4, #16]
 8026ce4:	1a5b      	subs	r3, r3, r1
 8026ce6:	9301      	str	r3, [sp, #4]
 8026ce8:	6963      	ldr	r3, [r4, #20]
 8026cea:	4343      	muls	r3, r0
 8026cec:	9801      	ldr	r0, [sp, #4]
 8026cee:	0fdd      	lsrs	r5, r3, #31
 8026cf0:	18ed      	adds	r5, r5, r3
 8026cf2:	1c7b      	adds	r3, r7, #1
 8026cf4:	181b      	adds	r3, r3, r0
 8026cf6:	106d      	asrs	r5, r5, #1
 8026cf8:	42ab      	cmp	r3, r5
 8026cfa:	d900      	bls.n	8026cfe <__ssputs_r+0x3e>
 8026cfc:	001d      	movs	r5, r3
 8026cfe:	0552      	lsls	r2, r2, #21
 8026d00:	d528      	bpl.n	8026d54 <__ssputs_r+0x94>
 8026d02:	0029      	movs	r1, r5
 8026d04:	9802      	ldr	r0, [sp, #8]
 8026d06:	f7ff fa61 	bl	80261cc <_malloc_r>
 8026d0a:	1e06      	subs	r6, r0, #0
 8026d0c:	d02c      	beq.n	8026d68 <__ssputs_r+0xa8>
 8026d0e:	9a01      	ldr	r2, [sp, #4]
 8026d10:	6921      	ldr	r1, [r4, #16]
 8026d12:	f7fd fff9 	bl	8024d08 <memcpy>
 8026d16:	89a2      	ldrh	r2, [r4, #12]
 8026d18:	4b18      	ldr	r3, [pc, #96]	@ (8026d7c <__ssputs_r+0xbc>)
 8026d1a:	401a      	ands	r2, r3
 8026d1c:	2380      	movs	r3, #128	@ 0x80
 8026d1e:	4313      	orrs	r3, r2
 8026d20:	81a3      	strh	r3, [r4, #12]
 8026d22:	9b01      	ldr	r3, [sp, #4]
 8026d24:	6126      	str	r6, [r4, #16]
 8026d26:	18f6      	adds	r6, r6, r3
 8026d28:	6026      	str	r6, [r4, #0]
 8026d2a:	003e      	movs	r6, r7
 8026d2c:	6165      	str	r5, [r4, #20]
 8026d2e:	1aed      	subs	r5, r5, r3
 8026d30:	60a5      	str	r5, [r4, #8]
 8026d32:	42be      	cmp	r6, r7
 8026d34:	d900      	bls.n	8026d38 <__ssputs_r+0x78>
 8026d36:	003e      	movs	r6, r7
 8026d38:	0032      	movs	r2, r6
 8026d3a:	9903      	ldr	r1, [sp, #12]
 8026d3c:	6820      	ldr	r0, [r4, #0]
 8026d3e:	f000 fb7e 	bl	802743e <memmove>
 8026d42:	2000      	movs	r0, #0
 8026d44:	68a3      	ldr	r3, [r4, #8]
 8026d46:	1b9b      	subs	r3, r3, r6
 8026d48:	60a3      	str	r3, [r4, #8]
 8026d4a:	6823      	ldr	r3, [r4, #0]
 8026d4c:	199b      	adds	r3, r3, r6
 8026d4e:	6023      	str	r3, [r4, #0]
 8026d50:	b005      	add	sp, #20
 8026d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026d54:	002a      	movs	r2, r5
 8026d56:	9802      	ldr	r0, [sp, #8]
 8026d58:	f000 fc05 	bl	8027566 <_realloc_r>
 8026d5c:	1e06      	subs	r6, r0, #0
 8026d5e:	d1e0      	bne.n	8026d22 <__ssputs_r+0x62>
 8026d60:	6921      	ldr	r1, [r4, #16]
 8026d62:	9802      	ldr	r0, [sp, #8]
 8026d64:	f7fe fe62 	bl	8025a2c <_free_r>
 8026d68:	230c      	movs	r3, #12
 8026d6a:	2001      	movs	r0, #1
 8026d6c:	9a02      	ldr	r2, [sp, #8]
 8026d6e:	4240      	negs	r0, r0
 8026d70:	6013      	str	r3, [r2, #0]
 8026d72:	89a2      	ldrh	r2, [r4, #12]
 8026d74:	3334      	adds	r3, #52	@ 0x34
 8026d76:	4313      	orrs	r3, r2
 8026d78:	81a3      	strh	r3, [r4, #12]
 8026d7a:	e7e9      	b.n	8026d50 <__ssputs_r+0x90>
 8026d7c:	fffffb7f 	.word	0xfffffb7f

08026d80 <_svfiprintf_r>:
 8026d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026d82:	b0a1      	sub	sp, #132	@ 0x84
 8026d84:	9003      	str	r0, [sp, #12]
 8026d86:	001d      	movs	r5, r3
 8026d88:	898b      	ldrh	r3, [r1, #12]
 8026d8a:	000f      	movs	r7, r1
 8026d8c:	0016      	movs	r6, r2
 8026d8e:	061b      	lsls	r3, r3, #24
 8026d90:	d511      	bpl.n	8026db6 <_svfiprintf_r+0x36>
 8026d92:	690b      	ldr	r3, [r1, #16]
 8026d94:	2b00      	cmp	r3, #0
 8026d96:	d10e      	bne.n	8026db6 <_svfiprintf_r+0x36>
 8026d98:	2140      	movs	r1, #64	@ 0x40
 8026d9a:	f7ff fa17 	bl	80261cc <_malloc_r>
 8026d9e:	6038      	str	r0, [r7, #0]
 8026da0:	6138      	str	r0, [r7, #16]
 8026da2:	2800      	cmp	r0, #0
 8026da4:	d105      	bne.n	8026db2 <_svfiprintf_r+0x32>
 8026da6:	230c      	movs	r3, #12
 8026da8:	9a03      	ldr	r2, [sp, #12]
 8026daa:	6013      	str	r3, [r2, #0]
 8026dac:	2001      	movs	r0, #1
 8026dae:	4240      	negs	r0, r0
 8026db0:	e0cf      	b.n	8026f52 <_svfiprintf_r+0x1d2>
 8026db2:	2340      	movs	r3, #64	@ 0x40
 8026db4:	617b      	str	r3, [r7, #20]
 8026db6:	2300      	movs	r3, #0
 8026db8:	ac08      	add	r4, sp, #32
 8026dba:	6163      	str	r3, [r4, #20]
 8026dbc:	3320      	adds	r3, #32
 8026dbe:	7663      	strb	r3, [r4, #25]
 8026dc0:	3310      	adds	r3, #16
 8026dc2:	76a3      	strb	r3, [r4, #26]
 8026dc4:	9507      	str	r5, [sp, #28]
 8026dc6:	0035      	movs	r5, r6
 8026dc8:	782b      	ldrb	r3, [r5, #0]
 8026dca:	2b00      	cmp	r3, #0
 8026dcc:	d001      	beq.n	8026dd2 <_svfiprintf_r+0x52>
 8026dce:	2b25      	cmp	r3, #37	@ 0x25
 8026dd0:	d148      	bne.n	8026e64 <_svfiprintf_r+0xe4>
 8026dd2:	1bab      	subs	r3, r5, r6
 8026dd4:	9305      	str	r3, [sp, #20]
 8026dd6:	42b5      	cmp	r5, r6
 8026dd8:	d00b      	beq.n	8026df2 <_svfiprintf_r+0x72>
 8026dda:	0032      	movs	r2, r6
 8026ddc:	0039      	movs	r1, r7
 8026dde:	9803      	ldr	r0, [sp, #12]
 8026de0:	f7ff ff6e 	bl	8026cc0 <__ssputs_r>
 8026de4:	3001      	adds	r0, #1
 8026de6:	d100      	bne.n	8026dea <_svfiprintf_r+0x6a>
 8026de8:	e0ae      	b.n	8026f48 <_svfiprintf_r+0x1c8>
 8026dea:	6963      	ldr	r3, [r4, #20]
 8026dec:	9a05      	ldr	r2, [sp, #20]
 8026dee:	189b      	adds	r3, r3, r2
 8026df0:	6163      	str	r3, [r4, #20]
 8026df2:	782b      	ldrb	r3, [r5, #0]
 8026df4:	2b00      	cmp	r3, #0
 8026df6:	d100      	bne.n	8026dfa <_svfiprintf_r+0x7a>
 8026df8:	e0a6      	b.n	8026f48 <_svfiprintf_r+0x1c8>
 8026dfa:	2201      	movs	r2, #1
 8026dfc:	2300      	movs	r3, #0
 8026dfe:	4252      	negs	r2, r2
 8026e00:	6062      	str	r2, [r4, #4]
 8026e02:	a904      	add	r1, sp, #16
 8026e04:	3254      	adds	r2, #84	@ 0x54
 8026e06:	1852      	adds	r2, r2, r1
 8026e08:	1c6e      	adds	r6, r5, #1
 8026e0a:	6023      	str	r3, [r4, #0]
 8026e0c:	60e3      	str	r3, [r4, #12]
 8026e0e:	60a3      	str	r3, [r4, #8]
 8026e10:	7013      	strb	r3, [r2, #0]
 8026e12:	65a3      	str	r3, [r4, #88]	@ 0x58
 8026e14:	4b54      	ldr	r3, [pc, #336]	@ (8026f68 <_svfiprintf_r+0x1e8>)
 8026e16:	2205      	movs	r2, #5
 8026e18:	0018      	movs	r0, r3
 8026e1a:	7831      	ldrb	r1, [r6, #0]
 8026e1c:	9305      	str	r3, [sp, #20]
 8026e1e:	f7fd ff68 	bl	8024cf2 <memchr>
 8026e22:	1c75      	adds	r5, r6, #1
 8026e24:	2800      	cmp	r0, #0
 8026e26:	d11f      	bne.n	8026e68 <_svfiprintf_r+0xe8>
 8026e28:	6822      	ldr	r2, [r4, #0]
 8026e2a:	06d3      	lsls	r3, r2, #27
 8026e2c:	d504      	bpl.n	8026e38 <_svfiprintf_r+0xb8>
 8026e2e:	2353      	movs	r3, #83	@ 0x53
 8026e30:	a904      	add	r1, sp, #16
 8026e32:	185b      	adds	r3, r3, r1
 8026e34:	2120      	movs	r1, #32
 8026e36:	7019      	strb	r1, [r3, #0]
 8026e38:	0713      	lsls	r3, r2, #28
 8026e3a:	d504      	bpl.n	8026e46 <_svfiprintf_r+0xc6>
 8026e3c:	2353      	movs	r3, #83	@ 0x53
 8026e3e:	a904      	add	r1, sp, #16
 8026e40:	185b      	adds	r3, r3, r1
 8026e42:	212b      	movs	r1, #43	@ 0x2b
 8026e44:	7019      	strb	r1, [r3, #0]
 8026e46:	7833      	ldrb	r3, [r6, #0]
 8026e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8026e4a:	d016      	beq.n	8026e7a <_svfiprintf_r+0xfa>
 8026e4c:	0035      	movs	r5, r6
 8026e4e:	2100      	movs	r1, #0
 8026e50:	200a      	movs	r0, #10
 8026e52:	68e3      	ldr	r3, [r4, #12]
 8026e54:	782a      	ldrb	r2, [r5, #0]
 8026e56:	1c6e      	adds	r6, r5, #1
 8026e58:	3a30      	subs	r2, #48	@ 0x30
 8026e5a:	2a09      	cmp	r2, #9
 8026e5c:	d950      	bls.n	8026f00 <_svfiprintf_r+0x180>
 8026e5e:	2900      	cmp	r1, #0
 8026e60:	d111      	bne.n	8026e86 <_svfiprintf_r+0x106>
 8026e62:	e017      	b.n	8026e94 <_svfiprintf_r+0x114>
 8026e64:	3501      	adds	r5, #1
 8026e66:	e7af      	b.n	8026dc8 <_svfiprintf_r+0x48>
 8026e68:	9b05      	ldr	r3, [sp, #20]
 8026e6a:	6822      	ldr	r2, [r4, #0]
 8026e6c:	1ac0      	subs	r0, r0, r3
 8026e6e:	2301      	movs	r3, #1
 8026e70:	4083      	lsls	r3, r0
 8026e72:	4313      	orrs	r3, r2
 8026e74:	002e      	movs	r6, r5
 8026e76:	6023      	str	r3, [r4, #0]
 8026e78:	e7cc      	b.n	8026e14 <_svfiprintf_r+0x94>
 8026e7a:	9b07      	ldr	r3, [sp, #28]
 8026e7c:	1d19      	adds	r1, r3, #4
 8026e7e:	681b      	ldr	r3, [r3, #0]
 8026e80:	9107      	str	r1, [sp, #28]
 8026e82:	2b00      	cmp	r3, #0
 8026e84:	db01      	blt.n	8026e8a <_svfiprintf_r+0x10a>
 8026e86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026e88:	e004      	b.n	8026e94 <_svfiprintf_r+0x114>
 8026e8a:	425b      	negs	r3, r3
 8026e8c:	60e3      	str	r3, [r4, #12]
 8026e8e:	2302      	movs	r3, #2
 8026e90:	4313      	orrs	r3, r2
 8026e92:	6023      	str	r3, [r4, #0]
 8026e94:	782b      	ldrb	r3, [r5, #0]
 8026e96:	2b2e      	cmp	r3, #46	@ 0x2e
 8026e98:	d10c      	bne.n	8026eb4 <_svfiprintf_r+0x134>
 8026e9a:	786b      	ldrb	r3, [r5, #1]
 8026e9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8026e9e:	d134      	bne.n	8026f0a <_svfiprintf_r+0x18a>
 8026ea0:	9b07      	ldr	r3, [sp, #28]
 8026ea2:	3502      	adds	r5, #2
 8026ea4:	1d1a      	adds	r2, r3, #4
 8026ea6:	681b      	ldr	r3, [r3, #0]
 8026ea8:	9207      	str	r2, [sp, #28]
 8026eaa:	2b00      	cmp	r3, #0
 8026eac:	da01      	bge.n	8026eb2 <_svfiprintf_r+0x132>
 8026eae:	2301      	movs	r3, #1
 8026eb0:	425b      	negs	r3, r3
 8026eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8026eb4:	4e2d      	ldr	r6, [pc, #180]	@ (8026f6c <_svfiprintf_r+0x1ec>)
 8026eb6:	2203      	movs	r2, #3
 8026eb8:	0030      	movs	r0, r6
 8026eba:	7829      	ldrb	r1, [r5, #0]
 8026ebc:	f7fd ff19 	bl	8024cf2 <memchr>
 8026ec0:	2800      	cmp	r0, #0
 8026ec2:	d006      	beq.n	8026ed2 <_svfiprintf_r+0x152>
 8026ec4:	2340      	movs	r3, #64	@ 0x40
 8026ec6:	1b80      	subs	r0, r0, r6
 8026ec8:	4083      	lsls	r3, r0
 8026eca:	6822      	ldr	r2, [r4, #0]
 8026ecc:	3501      	adds	r5, #1
 8026ece:	4313      	orrs	r3, r2
 8026ed0:	6023      	str	r3, [r4, #0]
 8026ed2:	7829      	ldrb	r1, [r5, #0]
 8026ed4:	2206      	movs	r2, #6
 8026ed6:	4826      	ldr	r0, [pc, #152]	@ (8026f70 <_svfiprintf_r+0x1f0>)
 8026ed8:	1c6e      	adds	r6, r5, #1
 8026eda:	7621      	strb	r1, [r4, #24]
 8026edc:	f7fd ff09 	bl	8024cf2 <memchr>
 8026ee0:	2800      	cmp	r0, #0
 8026ee2:	d038      	beq.n	8026f56 <_svfiprintf_r+0x1d6>
 8026ee4:	4b23      	ldr	r3, [pc, #140]	@ (8026f74 <_svfiprintf_r+0x1f4>)
 8026ee6:	2b00      	cmp	r3, #0
 8026ee8:	d122      	bne.n	8026f30 <_svfiprintf_r+0x1b0>
 8026eea:	2207      	movs	r2, #7
 8026eec:	9b07      	ldr	r3, [sp, #28]
 8026eee:	3307      	adds	r3, #7
 8026ef0:	4393      	bics	r3, r2
 8026ef2:	3308      	adds	r3, #8
 8026ef4:	9307      	str	r3, [sp, #28]
 8026ef6:	6963      	ldr	r3, [r4, #20]
 8026ef8:	9a04      	ldr	r2, [sp, #16]
 8026efa:	189b      	adds	r3, r3, r2
 8026efc:	6163      	str	r3, [r4, #20]
 8026efe:	e762      	b.n	8026dc6 <_svfiprintf_r+0x46>
 8026f00:	4343      	muls	r3, r0
 8026f02:	0035      	movs	r5, r6
 8026f04:	2101      	movs	r1, #1
 8026f06:	189b      	adds	r3, r3, r2
 8026f08:	e7a4      	b.n	8026e54 <_svfiprintf_r+0xd4>
 8026f0a:	2300      	movs	r3, #0
 8026f0c:	200a      	movs	r0, #10
 8026f0e:	0019      	movs	r1, r3
 8026f10:	3501      	adds	r5, #1
 8026f12:	6063      	str	r3, [r4, #4]
 8026f14:	782a      	ldrb	r2, [r5, #0]
 8026f16:	1c6e      	adds	r6, r5, #1
 8026f18:	3a30      	subs	r2, #48	@ 0x30
 8026f1a:	2a09      	cmp	r2, #9
 8026f1c:	d903      	bls.n	8026f26 <_svfiprintf_r+0x1a6>
 8026f1e:	2b00      	cmp	r3, #0
 8026f20:	d0c8      	beq.n	8026eb4 <_svfiprintf_r+0x134>
 8026f22:	9109      	str	r1, [sp, #36]	@ 0x24
 8026f24:	e7c6      	b.n	8026eb4 <_svfiprintf_r+0x134>
 8026f26:	4341      	muls	r1, r0
 8026f28:	0035      	movs	r5, r6
 8026f2a:	2301      	movs	r3, #1
 8026f2c:	1889      	adds	r1, r1, r2
 8026f2e:	e7f1      	b.n	8026f14 <_svfiprintf_r+0x194>
 8026f30:	aa07      	add	r2, sp, #28
 8026f32:	9200      	str	r2, [sp, #0]
 8026f34:	0021      	movs	r1, r4
 8026f36:	003a      	movs	r2, r7
 8026f38:	4b0f      	ldr	r3, [pc, #60]	@ (8026f78 <_svfiprintf_r+0x1f8>)
 8026f3a:	9803      	ldr	r0, [sp, #12]
 8026f3c:	f7fc ffb2 	bl	8023ea4 <_printf_float>
 8026f40:	9004      	str	r0, [sp, #16]
 8026f42:	9b04      	ldr	r3, [sp, #16]
 8026f44:	3301      	adds	r3, #1
 8026f46:	d1d6      	bne.n	8026ef6 <_svfiprintf_r+0x176>
 8026f48:	89bb      	ldrh	r3, [r7, #12]
 8026f4a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8026f4c:	065b      	lsls	r3, r3, #25
 8026f4e:	d500      	bpl.n	8026f52 <_svfiprintf_r+0x1d2>
 8026f50:	e72c      	b.n	8026dac <_svfiprintf_r+0x2c>
 8026f52:	b021      	add	sp, #132	@ 0x84
 8026f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026f56:	aa07      	add	r2, sp, #28
 8026f58:	9200      	str	r2, [sp, #0]
 8026f5a:	0021      	movs	r1, r4
 8026f5c:	003a      	movs	r2, r7
 8026f5e:	4b06      	ldr	r3, [pc, #24]	@ (8026f78 <_svfiprintf_r+0x1f8>)
 8026f60:	9803      	ldr	r0, [sp, #12]
 8026f62:	f7fd fa4d 	bl	8024400 <_printf_i>
 8026f66:	e7eb      	b.n	8026f40 <_svfiprintf_r+0x1c0>
 8026f68:	0802d5b0 	.word	0x0802d5b0
 8026f6c:	0802d5b6 	.word	0x0802d5b6
 8026f70:	0802d5ba 	.word	0x0802d5ba
 8026f74:	08023ea5 	.word	0x08023ea5
 8026f78:	08026cc1 	.word	0x08026cc1

08026f7c <__sfputc_r>:
 8026f7c:	6893      	ldr	r3, [r2, #8]
 8026f7e:	b510      	push	{r4, lr}
 8026f80:	3b01      	subs	r3, #1
 8026f82:	6093      	str	r3, [r2, #8]
 8026f84:	2b00      	cmp	r3, #0
 8026f86:	da04      	bge.n	8026f92 <__sfputc_r+0x16>
 8026f88:	6994      	ldr	r4, [r2, #24]
 8026f8a:	42a3      	cmp	r3, r4
 8026f8c:	db07      	blt.n	8026f9e <__sfputc_r+0x22>
 8026f8e:	290a      	cmp	r1, #10
 8026f90:	d005      	beq.n	8026f9e <__sfputc_r+0x22>
 8026f92:	6813      	ldr	r3, [r2, #0]
 8026f94:	1c58      	adds	r0, r3, #1
 8026f96:	6010      	str	r0, [r2, #0]
 8026f98:	7019      	strb	r1, [r3, #0]
 8026f9a:	0008      	movs	r0, r1
 8026f9c:	bd10      	pop	{r4, pc}
 8026f9e:	f7fd fd37 	bl	8024a10 <__swbuf_r>
 8026fa2:	0001      	movs	r1, r0
 8026fa4:	e7f9      	b.n	8026f9a <__sfputc_r+0x1e>

08026fa6 <__sfputs_r>:
 8026fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026fa8:	0006      	movs	r6, r0
 8026faa:	000f      	movs	r7, r1
 8026fac:	0014      	movs	r4, r2
 8026fae:	18d5      	adds	r5, r2, r3
 8026fb0:	42ac      	cmp	r4, r5
 8026fb2:	d101      	bne.n	8026fb8 <__sfputs_r+0x12>
 8026fb4:	2000      	movs	r0, #0
 8026fb6:	e007      	b.n	8026fc8 <__sfputs_r+0x22>
 8026fb8:	7821      	ldrb	r1, [r4, #0]
 8026fba:	003a      	movs	r2, r7
 8026fbc:	0030      	movs	r0, r6
 8026fbe:	f7ff ffdd 	bl	8026f7c <__sfputc_r>
 8026fc2:	3401      	adds	r4, #1
 8026fc4:	1c43      	adds	r3, r0, #1
 8026fc6:	d1f3      	bne.n	8026fb0 <__sfputs_r+0xa>
 8026fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026fcc <_vfiprintf_r>:
 8026fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026fce:	b0a1      	sub	sp, #132	@ 0x84
 8026fd0:	000f      	movs	r7, r1
 8026fd2:	0015      	movs	r5, r2
 8026fd4:	001e      	movs	r6, r3
 8026fd6:	9003      	str	r0, [sp, #12]
 8026fd8:	2800      	cmp	r0, #0
 8026fda:	d004      	beq.n	8026fe6 <_vfiprintf_r+0x1a>
 8026fdc:	6a03      	ldr	r3, [r0, #32]
 8026fde:	2b00      	cmp	r3, #0
 8026fe0:	d101      	bne.n	8026fe6 <_vfiprintf_r+0x1a>
 8026fe2:	f7fd fbab 	bl	802473c <__sinit>
 8026fe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026fe8:	07db      	lsls	r3, r3, #31
 8026fea:	d405      	bmi.n	8026ff8 <_vfiprintf_r+0x2c>
 8026fec:	89bb      	ldrh	r3, [r7, #12]
 8026fee:	059b      	lsls	r3, r3, #22
 8026ff0:	d402      	bmi.n	8026ff8 <_vfiprintf_r+0x2c>
 8026ff2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8026ff4:	f7fd fe7b 	bl	8024cee <__retarget_lock_acquire_recursive>
 8026ff8:	89bb      	ldrh	r3, [r7, #12]
 8026ffa:	071b      	lsls	r3, r3, #28
 8026ffc:	d502      	bpl.n	8027004 <_vfiprintf_r+0x38>
 8026ffe:	693b      	ldr	r3, [r7, #16]
 8027000:	2b00      	cmp	r3, #0
 8027002:	d113      	bne.n	802702c <_vfiprintf_r+0x60>
 8027004:	0039      	movs	r1, r7
 8027006:	9803      	ldr	r0, [sp, #12]
 8027008:	f7fd fd44 	bl	8024a94 <__swsetup_r>
 802700c:	2800      	cmp	r0, #0
 802700e:	d00d      	beq.n	802702c <_vfiprintf_r+0x60>
 8027010:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027012:	07db      	lsls	r3, r3, #31
 8027014:	d503      	bpl.n	802701e <_vfiprintf_r+0x52>
 8027016:	2001      	movs	r0, #1
 8027018:	4240      	negs	r0, r0
 802701a:	b021      	add	sp, #132	@ 0x84
 802701c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802701e:	89bb      	ldrh	r3, [r7, #12]
 8027020:	059b      	lsls	r3, r3, #22
 8027022:	d4f8      	bmi.n	8027016 <_vfiprintf_r+0x4a>
 8027024:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027026:	f7fd fe63 	bl	8024cf0 <__retarget_lock_release_recursive>
 802702a:	e7f4      	b.n	8027016 <_vfiprintf_r+0x4a>
 802702c:	2300      	movs	r3, #0
 802702e:	ac08      	add	r4, sp, #32
 8027030:	6163      	str	r3, [r4, #20]
 8027032:	3320      	adds	r3, #32
 8027034:	7663      	strb	r3, [r4, #25]
 8027036:	3310      	adds	r3, #16
 8027038:	76a3      	strb	r3, [r4, #26]
 802703a:	9607      	str	r6, [sp, #28]
 802703c:	002e      	movs	r6, r5
 802703e:	7833      	ldrb	r3, [r6, #0]
 8027040:	2b00      	cmp	r3, #0
 8027042:	d001      	beq.n	8027048 <_vfiprintf_r+0x7c>
 8027044:	2b25      	cmp	r3, #37	@ 0x25
 8027046:	d148      	bne.n	80270da <_vfiprintf_r+0x10e>
 8027048:	1b73      	subs	r3, r6, r5
 802704a:	9305      	str	r3, [sp, #20]
 802704c:	42ae      	cmp	r6, r5
 802704e:	d00b      	beq.n	8027068 <_vfiprintf_r+0x9c>
 8027050:	002a      	movs	r2, r5
 8027052:	0039      	movs	r1, r7
 8027054:	9803      	ldr	r0, [sp, #12]
 8027056:	f7ff ffa6 	bl	8026fa6 <__sfputs_r>
 802705a:	3001      	adds	r0, #1
 802705c:	d100      	bne.n	8027060 <_vfiprintf_r+0x94>
 802705e:	e0ae      	b.n	80271be <_vfiprintf_r+0x1f2>
 8027060:	6963      	ldr	r3, [r4, #20]
 8027062:	9a05      	ldr	r2, [sp, #20]
 8027064:	189b      	adds	r3, r3, r2
 8027066:	6163      	str	r3, [r4, #20]
 8027068:	7833      	ldrb	r3, [r6, #0]
 802706a:	2b00      	cmp	r3, #0
 802706c:	d100      	bne.n	8027070 <_vfiprintf_r+0xa4>
 802706e:	e0a6      	b.n	80271be <_vfiprintf_r+0x1f2>
 8027070:	2201      	movs	r2, #1
 8027072:	2300      	movs	r3, #0
 8027074:	4252      	negs	r2, r2
 8027076:	6062      	str	r2, [r4, #4]
 8027078:	a904      	add	r1, sp, #16
 802707a:	3254      	adds	r2, #84	@ 0x54
 802707c:	1852      	adds	r2, r2, r1
 802707e:	1c75      	adds	r5, r6, #1
 8027080:	6023      	str	r3, [r4, #0]
 8027082:	60e3      	str	r3, [r4, #12]
 8027084:	60a3      	str	r3, [r4, #8]
 8027086:	7013      	strb	r3, [r2, #0]
 8027088:	65a3      	str	r3, [r4, #88]	@ 0x58
 802708a:	4b59      	ldr	r3, [pc, #356]	@ (80271f0 <_vfiprintf_r+0x224>)
 802708c:	2205      	movs	r2, #5
 802708e:	0018      	movs	r0, r3
 8027090:	7829      	ldrb	r1, [r5, #0]
 8027092:	9305      	str	r3, [sp, #20]
 8027094:	f7fd fe2d 	bl	8024cf2 <memchr>
 8027098:	1c6e      	adds	r6, r5, #1
 802709a:	2800      	cmp	r0, #0
 802709c:	d11f      	bne.n	80270de <_vfiprintf_r+0x112>
 802709e:	6822      	ldr	r2, [r4, #0]
 80270a0:	06d3      	lsls	r3, r2, #27
 80270a2:	d504      	bpl.n	80270ae <_vfiprintf_r+0xe2>
 80270a4:	2353      	movs	r3, #83	@ 0x53
 80270a6:	a904      	add	r1, sp, #16
 80270a8:	185b      	adds	r3, r3, r1
 80270aa:	2120      	movs	r1, #32
 80270ac:	7019      	strb	r1, [r3, #0]
 80270ae:	0713      	lsls	r3, r2, #28
 80270b0:	d504      	bpl.n	80270bc <_vfiprintf_r+0xf0>
 80270b2:	2353      	movs	r3, #83	@ 0x53
 80270b4:	a904      	add	r1, sp, #16
 80270b6:	185b      	adds	r3, r3, r1
 80270b8:	212b      	movs	r1, #43	@ 0x2b
 80270ba:	7019      	strb	r1, [r3, #0]
 80270bc:	782b      	ldrb	r3, [r5, #0]
 80270be:	2b2a      	cmp	r3, #42	@ 0x2a
 80270c0:	d016      	beq.n	80270f0 <_vfiprintf_r+0x124>
 80270c2:	002e      	movs	r6, r5
 80270c4:	2100      	movs	r1, #0
 80270c6:	200a      	movs	r0, #10
 80270c8:	68e3      	ldr	r3, [r4, #12]
 80270ca:	7832      	ldrb	r2, [r6, #0]
 80270cc:	1c75      	adds	r5, r6, #1
 80270ce:	3a30      	subs	r2, #48	@ 0x30
 80270d0:	2a09      	cmp	r2, #9
 80270d2:	d950      	bls.n	8027176 <_vfiprintf_r+0x1aa>
 80270d4:	2900      	cmp	r1, #0
 80270d6:	d111      	bne.n	80270fc <_vfiprintf_r+0x130>
 80270d8:	e017      	b.n	802710a <_vfiprintf_r+0x13e>
 80270da:	3601      	adds	r6, #1
 80270dc:	e7af      	b.n	802703e <_vfiprintf_r+0x72>
 80270de:	9b05      	ldr	r3, [sp, #20]
 80270e0:	6822      	ldr	r2, [r4, #0]
 80270e2:	1ac0      	subs	r0, r0, r3
 80270e4:	2301      	movs	r3, #1
 80270e6:	4083      	lsls	r3, r0
 80270e8:	4313      	orrs	r3, r2
 80270ea:	0035      	movs	r5, r6
 80270ec:	6023      	str	r3, [r4, #0]
 80270ee:	e7cc      	b.n	802708a <_vfiprintf_r+0xbe>
 80270f0:	9b07      	ldr	r3, [sp, #28]
 80270f2:	1d19      	adds	r1, r3, #4
 80270f4:	681b      	ldr	r3, [r3, #0]
 80270f6:	9107      	str	r1, [sp, #28]
 80270f8:	2b00      	cmp	r3, #0
 80270fa:	db01      	blt.n	8027100 <_vfiprintf_r+0x134>
 80270fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80270fe:	e004      	b.n	802710a <_vfiprintf_r+0x13e>
 8027100:	425b      	negs	r3, r3
 8027102:	60e3      	str	r3, [r4, #12]
 8027104:	2302      	movs	r3, #2
 8027106:	4313      	orrs	r3, r2
 8027108:	6023      	str	r3, [r4, #0]
 802710a:	7833      	ldrb	r3, [r6, #0]
 802710c:	2b2e      	cmp	r3, #46	@ 0x2e
 802710e:	d10c      	bne.n	802712a <_vfiprintf_r+0x15e>
 8027110:	7873      	ldrb	r3, [r6, #1]
 8027112:	2b2a      	cmp	r3, #42	@ 0x2a
 8027114:	d134      	bne.n	8027180 <_vfiprintf_r+0x1b4>
 8027116:	9b07      	ldr	r3, [sp, #28]
 8027118:	3602      	adds	r6, #2
 802711a:	1d1a      	adds	r2, r3, #4
 802711c:	681b      	ldr	r3, [r3, #0]
 802711e:	9207      	str	r2, [sp, #28]
 8027120:	2b00      	cmp	r3, #0
 8027122:	da01      	bge.n	8027128 <_vfiprintf_r+0x15c>
 8027124:	2301      	movs	r3, #1
 8027126:	425b      	negs	r3, r3
 8027128:	9309      	str	r3, [sp, #36]	@ 0x24
 802712a:	4d32      	ldr	r5, [pc, #200]	@ (80271f4 <_vfiprintf_r+0x228>)
 802712c:	2203      	movs	r2, #3
 802712e:	0028      	movs	r0, r5
 8027130:	7831      	ldrb	r1, [r6, #0]
 8027132:	f7fd fdde 	bl	8024cf2 <memchr>
 8027136:	2800      	cmp	r0, #0
 8027138:	d006      	beq.n	8027148 <_vfiprintf_r+0x17c>
 802713a:	2340      	movs	r3, #64	@ 0x40
 802713c:	1b40      	subs	r0, r0, r5
 802713e:	4083      	lsls	r3, r0
 8027140:	6822      	ldr	r2, [r4, #0]
 8027142:	3601      	adds	r6, #1
 8027144:	4313      	orrs	r3, r2
 8027146:	6023      	str	r3, [r4, #0]
 8027148:	7831      	ldrb	r1, [r6, #0]
 802714a:	2206      	movs	r2, #6
 802714c:	482a      	ldr	r0, [pc, #168]	@ (80271f8 <_vfiprintf_r+0x22c>)
 802714e:	1c75      	adds	r5, r6, #1
 8027150:	7621      	strb	r1, [r4, #24]
 8027152:	f7fd fdce 	bl	8024cf2 <memchr>
 8027156:	2800      	cmp	r0, #0
 8027158:	d040      	beq.n	80271dc <_vfiprintf_r+0x210>
 802715a:	4b28      	ldr	r3, [pc, #160]	@ (80271fc <_vfiprintf_r+0x230>)
 802715c:	2b00      	cmp	r3, #0
 802715e:	d122      	bne.n	80271a6 <_vfiprintf_r+0x1da>
 8027160:	2207      	movs	r2, #7
 8027162:	9b07      	ldr	r3, [sp, #28]
 8027164:	3307      	adds	r3, #7
 8027166:	4393      	bics	r3, r2
 8027168:	3308      	adds	r3, #8
 802716a:	9307      	str	r3, [sp, #28]
 802716c:	6963      	ldr	r3, [r4, #20]
 802716e:	9a04      	ldr	r2, [sp, #16]
 8027170:	189b      	adds	r3, r3, r2
 8027172:	6163      	str	r3, [r4, #20]
 8027174:	e762      	b.n	802703c <_vfiprintf_r+0x70>
 8027176:	4343      	muls	r3, r0
 8027178:	002e      	movs	r6, r5
 802717a:	2101      	movs	r1, #1
 802717c:	189b      	adds	r3, r3, r2
 802717e:	e7a4      	b.n	80270ca <_vfiprintf_r+0xfe>
 8027180:	2300      	movs	r3, #0
 8027182:	200a      	movs	r0, #10
 8027184:	0019      	movs	r1, r3
 8027186:	3601      	adds	r6, #1
 8027188:	6063      	str	r3, [r4, #4]
 802718a:	7832      	ldrb	r2, [r6, #0]
 802718c:	1c75      	adds	r5, r6, #1
 802718e:	3a30      	subs	r2, #48	@ 0x30
 8027190:	2a09      	cmp	r2, #9
 8027192:	d903      	bls.n	802719c <_vfiprintf_r+0x1d0>
 8027194:	2b00      	cmp	r3, #0
 8027196:	d0c8      	beq.n	802712a <_vfiprintf_r+0x15e>
 8027198:	9109      	str	r1, [sp, #36]	@ 0x24
 802719a:	e7c6      	b.n	802712a <_vfiprintf_r+0x15e>
 802719c:	4341      	muls	r1, r0
 802719e:	002e      	movs	r6, r5
 80271a0:	2301      	movs	r3, #1
 80271a2:	1889      	adds	r1, r1, r2
 80271a4:	e7f1      	b.n	802718a <_vfiprintf_r+0x1be>
 80271a6:	aa07      	add	r2, sp, #28
 80271a8:	9200      	str	r2, [sp, #0]
 80271aa:	0021      	movs	r1, r4
 80271ac:	003a      	movs	r2, r7
 80271ae:	4b14      	ldr	r3, [pc, #80]	@ (8027200 <_vfiprintf_r+0x234>)
 80271b0:	9803      	ldr	r0, [sp, #12]
 80271b2:	f7fc fe77 	bl	8023ea4 <_printf_float>
 80271b6:	9004      	str	r0, [sp, #16]
 80271b8:	9b04      	ldr	r3, [sp, #16]
 80271ba:	3301      	adds	r3, #1
 80271bc:	d1d6      	bne.n	802716c <_vfiprintf_r+0x1a0>
 80271be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80271c0:	07db      	lsls	r3, r3, #31
 80271c2:	d405      	bmi.n	80271d0 <_vfiprintf_r+0x204>
 80271c4:	89bb      	ldrh	r3, [r7, #12]
 80271c6:	059b      	lsls	r3, r3, #22
 80271c8:	d402      	bmi.n	80271d0 <_vfiprintf_r+0x204>
 80271ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80271cc:	f7fd fd90 	bl	8024cf0 <__retarget_lock_release_recursive>
 80271d0:	89bb      	ldrh	r3, [r7, #12]
 80271d2:	065b      	lsls	r3, r3, #25
 80271d4:	d500      	bpl.n	80271d8 <_vfiprintf_r+0x20c>
 80271d6:	e71e      	b.n	8027016 <_vfiprintf_r+0x4a>
 80271d8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80271da:	e71e      	b.n	802701a <_vfiprintf_r+0x4e>
 80271dc:	aa07      	add	r2, sp, #28
 80271de:	9200      	str	r2, [sp, #0]
 80271e0:	0021      	movs	r1, r4
 80271e2:	003a      	movs	r2, r7
 80271e4:	4b06      	ldr	r3, [pc, #24]	@ (8027200 <_vfiprintf_r+0x234>)
 80271e6:	9803      	ldr	r0, [sp, #12]
 80271e8:	f7fd f90a 	bl	8024400 <_printf_i>
 80271ec:	e7e3      	b.n	80271b6 <_vfiprintf_r+0x1ea>
 80271ee:	46c0      	nop			@ (mov r8, r8)
 80271f0:	0802d5b0 	.word	0x0802d5b0
 80271f4:	0802d5b6 	.word	0x0802d5b6
 80271f8:	0802d5ba 	.word	0x0802d5ba
 80271fc:	08023ea5 	.word	0x08023ea5
 8027200:	08026fa7 	.word	0x08026fa7

08027204 <__sflush_r>:
 8027204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027206:	220c      	movs	r2, #12
 8027208:	5e8b      	ldrsh	r3, [r1, r2]
 802720a:	0005      	movs	r5, r0
 802720c:	000c      	movs	r4, r1
 802720e:	071a      	lsls	r2, r3, #28
 8027210:	d456      	bmi.n	80272c0 <__sflush_r+0xbc>
 8027212:	684a      	ldr	r2, [r1, #4]
 8027214:	2a00      	cmp	r2, #0
 8027216:	dc02      	bgt.n	802721e <__sflush_r+0x1a>
 8027218:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 802721a:	2a00      	cmp	r2, #0
 802721c:	dd4e      	ble.n	80272bc <__sflush_r+0xb8>
 802721e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8027220:	2f00      	cmp	r7, #0
 8027222:	d04b      	beq.n	80272bc <__sflush_r+0xb8>
 8027224:	2200      	movs	r2, #0
 8027226:	2080      	movs	r0, #128	@ 0x80
 8027228:	682e      	ldr	r6, [r5, #0]
 802722a:	602a      	str	r2, [r5, #0]
 802722c:	001a      	movs	r2, r3
 802722e:	0140      	lsls	r0, r0, #5
 8027230:	6a21      	ldr	r1, [r4, #32]
 8027232:	4002      	ands	r2, r0
 8027234:	4203      	tst	r3, r0
 8027236:	d033      	beq.n	80272a0 <__sflush_r+0x9c>
 8027238:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802723a:	89a3      	ldrh	r3, [r4, #12]
 802723c:	075b      	lsls	r3, r3, #29
 802723e:	d506      	bpl.n	802724e <__sflush_r+0x4a>
 8027240:	6863      	ldr	r3, [r4, #4]
 8027242:	1ad2      	subs	r2, r2, r3
 8027244:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8027246:	2b00      	cmp	r3, #0
 8027248:	d001      	beq.n	802724e <__sflush_r+0x4a>
 802724a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802724c:	1ad2      	subs	r2, r2, r3
 802724e:	2300      	movs	r3, #0
 8027250:	0028      	movs	r0, r5
 8027252:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8027254:	6a21      	ldr	r1, [r4, #32]
 8027256:	47b8      	blx	r7
 8027258:	89a2      	ldrh	r2, [r4, #12]
 802725a:	1c43      	adds	r3, r0, #1
 802725c:	d106      	bne.n	802726c <__sflush_r+0x68>
 802725e:	6829      	ldr	r1, [r5, #0]
 8027260:	291d      	cmp	r1, #29
 8027262:	d846      	bhi.n	80272f2 <__sflush_r+0xee>
 8027264:	4b29      	ldr	r3, [pc, #164]	@ (802730c <__sflush_r+0x108>)
 8027266:	410b      	asrs	r3, r1
 8027268:	07db      	lsls	r3, r3, #31
 802726a:	d442      	bmi.n	80272f2 <__sflush_r+0xee>
 802726c:	2300      	movs	r3, #0
 802726e:	6063      	str	r3, [r4, #4]
 8027270:	6923      	ldr	r3, [r4, #16]
 8027272:	6023      	str	r3, [r4, #0]
 8027274:	04d2      	lsls	r2, r2, #19
 8027276:	d505      	bpl.n	8027284 <__sflush_r+0x80>
 8027278:	1c43      	adds	r3, r0, #1
 802727a:	d102      	bne.n	8027282 <__sflush_r+0x7e>
 802727c:	682b      	ldr	r3, [r5, #0]
 802727e:	2b00      	cmp	r3, #0
 8027280:	d100      	bne.n	8027284 <__sflush_r+0x80>
 8027282:	6560      	str	r0, [r4, #84]	@ 0x54
 8027284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027286:	602e      	str	r6, [r5, #0]
 8027288:	2900      	cmp	r1, #0
 802728a:	d017      	beq.n	80272bc <__sflush_r+0xb8>
 802728c:	0023      	movs	r3, r4
 802728e:	3344      	adds	r3, #68	@ 0x44
 8027290:	4299      	cmp	r1, r3
 8027292:	d002      	beq.n	802729a <__sflush_r+0x96>
 8027294:	0028      	movs	r0, r5
 8027296:	f7fe fbc9 	bl	8025a2c <_free_r>
 802729a:	2300      	movs	r3, #0
 802729c:	6363      	str	r3, [r4, #52]	@ 0x34
 802729e:	e00d      	b.n	80272bc <__sflush_r+0xb8>
 80272a0:	2301      	movs	r3, #1
 80272a2:	0028      	movs	r0, r5
 80272a4:	47b8      	blx	r7
 80272a6:	0002      	movs	r2, r0
 80272a8:	1c43      	adds	r3, r0, #1
 80272aa:	d1c6      	bne.n	802723a <__sflush_r+0x36>
 80272ac:	682b      	ldr	r3, [r5, #0]
 80272ae:	2b00      	cmp	r3, #0
 80272b0:	d0c3      	beq.n	802723a <__sflush_r+0x36>
 80272b2:	2b1d      	cmp	r3, #29
 80272b4:	d001      	beq.n	80272ba <__sflush_r+0xb6>
 80272b6:	2b16      	cmp	r3, #22
 80272b8:	d11a      	bne.n	80272f0 <__sflush_r+0xec>
 80272ba:	602e      	str	r6, [r5, #0]
 80272bc:	2000      	movs	r0, #0
 80272be:	e01e      	b.n	80272fe <__sflush_r+0xfa>
 80272c0:	690e      	ldr	r6, [r1, #16]
 80272c2:	2e00      	cmp	r6, #0
 80272c4:	d0fa      	beq.n	80272bc <__sflush_r+0xb8>
 80272c6:	680f      	ldr	r7, [r1, #0]
 80272c8:	600e      	str	r6, [r1, #0]
 80272ca:	1bba      	subs	r2, r7, r6
 80272cc:	9201      	str	r2, [sp, #4]
 80272ce:	2200      	movs	r2, #0
 80272d0:	079b      	lsls	r3, r3, #30
 80272d2:	d100      	bne.n	80272d6 <__sflush_r+0xd2>
 80272d4:	694a      	ldr	r2, [r1, #20]
 80272d6:	60a2      	str	r2, [r4, #8]
 80272d8:	9b01      	ldr	r3, [sp, #4]
 80272da:	2b00      	cmp	r3, #0
 80272dc:	ddee      	ble.n	80272bc <__sflush_r+0xb8>
 80272de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80272e0:	0032      	movs	r2, r6
 80272e2:	001f      	movs	r7, r3
 80272e4:	0028      	movs	r0, r5
 80272e6:	9b01      	ldr	r3, [sp, #4]
 80272e8:	6a21      	ldr	r1, [r4, #32]
 80272ea:	47b8      	blx	r7
 80272ec:	2800      	cmp	r0, #0
 80272ee:	dc07      	bgt.n	8027300 <__sflush_r+0xfc>
 80272f0:	89a2      	ldrh	r2, [r4, #12]
 80272f2:	2340      	movs	r3, #64	@ 0x40
 80272f4:	2001      	movs	r0, #1
 80272f6:	4313      	orrs	r3, r2
 80272f8:	b21b      	sxth	r3, r3
 80272fa:	81a3      	strh	r3, [r4, #12]
 80272fc:	4240      	negs	r0, r0
 80272fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027300:	9b01      	ldr	r3, [sp, #4]
 8027302:	1836      	adds	r6, r6, r0
 8027304:	1a1b      	subs	r3, r3, r0
 8027306:	9301      	str	r3, [sp, #4]
 8027308:	e7e6      	b.n	80272d8 <__sflush_r+0xd4>
 802730a:	46c0      	nop			@ (mov r8, r8)
 802730c:	dfbffffe 	.word	0xdfbffffe

08027310 <_fflush_r>:
 8027310:	690b      	ldr	r3, [r1, #16]
 8027312:	b570      	push	{r4, r5, r6, lr}
 8027314:	0005      	movs	r5, r0
 8027316:	000c      	movs	r4, r1
 8027318:	2b00      	cmp	r3, #0
 802731a:	d102      	bne.n	8027322 <_fflush_r+0x12>
 802731c:	2500      	movs	r5, #0
 802731e:	0028      	movs	r0, r5
 8027320:	bd70      	pop	{r4, r5, r6, pc}
 8027322:	2800      	cmp	r0, #0
 8027324:	d004      	beq.n	8027330 <_fflush_r+0x20>
 8027326:	6a03      	ldr	r3, [r0, #32]
 8027328:	2b00      	cmp	r3, #0
 802732a:	d101      	bne.n	8027330 <_fflush_r+0x20>
 802732c:	f7fd fa06 	bl	802473c <__sinit>
 8027330:	220c      	movs	r2, #12
 8027332:	5ea3      	ldrsh	r3, [r4, r2]
 8027334:	2b00      	cmp	r3, #0
 8027336:	d0f1      	beq.n	802731c <_fflush_r+0xc>
 8027338:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802733a:	07d2      	lsls	r2, r2, #31
 802733c:	d404      	bmi.n	8027348 <_fflush_r+0x38>
 802733e:	059b      	lsls	r3, r3, #22
 8027340:	d402      	bmi.n	8027348 <_fflush_r+0x38>
 8027342:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027344:	f7fd fcd3 	bl	8024cee <__retarget_lock_acquire_recursive>
 8027348:	0028      	movs	r0, r5
 802734a:	0021      	movs	r1, r4
 802734c:	f7ff ff5a 	bl	8027204 <__sflush_r>
 8027350:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027352:	0005      	movs	r5, r0
 8027354:	07db      	lsls	r3, r3, #31
 8027356:	d4e2      	bmi.n	802731e <_fflush_r+0xe>
 8027358:	89a3      	ldrh	r3, [r4, #12]
 802735a:	059b      	lsls	r3, r3, #22
 802735c:	d4df      	bmi.n	802731e <_fflush_r+0xe>
 802735e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027360:	f7fd fcc6 	bl	8024cf0 <__retarget_lock_release_recursive>
 8027364:	e7db      	b.n	802731e <_fflush_r+0xe>
	...

08027368 <__swhatbuf_r>:
 8027368:	b570      	push	{r4, r5, r6, lr}
 802736a:	000e      	movs	r6, r1
 802736c:	001d      	movs	r5, r3
 802736e:	230e      	movs	r3, #14
 8027370:	5ec9      	ldrsh	r1, [r1, r3]
 8027372:	0014      	movs	r4, r2
 8027374:	b096      	sub	sp, #88	@ 0x58
 8027376:	2900      	cmp	r1, #0
 8027378:	da0c      	bge.n	8027394 <__swhatbuf_r+0x2c>
 802737a:	89b2      	ldrh	r2, [r6, #12]
 802737c:	2380      	movs	r3, #128	@ 0x80
 802737e:	0011      	movs	r1, r2
 8027380:	4019      	ands	r1, r3
 8027382:	421a      	tst	r2, r3
 8027384:	d114      	bne.n	80273b0 <__swhatbuf_r+0x48>
 8027386:	2380      	movs	r3, #128	@ 0x80
 8027388:	00db      	lsls	r3, r3, #3
 802738a:	2000      	movs	r0, #0
 802738c:	6029      	str	r1, [r5, #0]
 802738e:	6023      	str	r3, [r4, #0]
 8027390:	b016      	add	sp, #88	@ 0x58
 8027392:	bd70      	pop	{r4, r5, r6, pc}
 8027394:	466a      	mov	r2, sp
 8027396:	f000 f865 	bl	8027464 <_fstat_r>
 802739a:	2800      	cmp	r0, #0
 802739c:	dbed      	blt.n	802737a <__swhatbuf_r+0x12>
 802739e:	23f0      	movs	r3, #240	@ 0xf0
 80273a0:	9901      	ldr	r1, [sp, #4]
 80273a2:	021b      	lsls	r3, r3, #8
 80273a4:	4019      	ands	r1, r3
 80273a6:	4b04      	ldr	r3, [pc, #16]	@ (80273b8 <__swhatbuf_r+0x50>)
 80273a8:	18c9      	adds	r1, r1, r3
 80273aa:	424b      	negs	r3, r1
 80273ac:	4159      	adcs	r1, r3
 80273ae:	e7ea      	b.n	8027386 <__swhatbuf_r+0x1e>
 80273b0:	2100      	movs	r1, #0
 80273b2:	2340      	movs	r3, #64	@ 0x40
 80273b4:	e7e9      	b.n	802738a <__swhatbuf_r+0x22>
 80273b6:	46c0      	nop			@ (mov r8, r8)
 80273b8:	ffffe000 	.word	0xffffe000

080273bc <__smakebuf_r>:
 80273bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80273be:	2602      	movs	r6, #2
 80273c0:	898b      	ldrh	r3, [r1, #12]
 80273c2:	0005      	movs	r5, r0
 80273c4:	000c      	movs	r4, r1
 80273c6:	b085      	sub	sp, #20
 80273c8:	4233      	tst	r3, r6
 80273ca:	d007      	beq.n	80273dc <__smakebuf_r+0x20>
 80273cc:	0023      	movs	r3, r4
 80273ce:	3347      	adds	r3, #71	@ 0x47
 80273d0:	6023      	str	r3, [r4, #0]
 80273d2:	6123      	str	r3, [r4, #16]
 80273d4:	2301      	movs	r3, #1
 80273d6:	6163      	str	r3, [r4, #20]
 80273d8:	b005      	add	sp, #20
 80273da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80273dc:	ab03      	add	r3, sp, #12
 80273de:	aa02      	add	r2, sp, #8
 80273e0:	f7ff ffc2 	bl	8027368 <__swhatbuf_r>
 80273e4:	9f02      	ldr	r7, [sp, #8]
 80273e6:	9001      	str	r0, [sp, #4]
 80273e8:	0039      	movs	r1, r7
 80273ea:	0028      	movs	r0, r5
 80273ec:	f7fe feee 	bl	80261cc <_malloc_r>
 80273f0:	2800      	cmp	r0, #0
 80273f2:	d108      	bne.n	8027406 <__smakebuf_r+0x4a>
 80273f4:	220c      	movs	r2, #12
 80273f6:	5ea3      	ldrsh	r3, [r4, r2]
 80273f8:	059a      	lsls	r2, r3, #22
 80273fa:	d4ed      	bmi.n	80273d8 <__smakebuf_r+0x1c>
 80273fc:	2203      	movs	r2, #3
 80273fe:	4393      	bics	r3, r2
 8027400:	431e      	orrs	r6, r3
 8027402:	81a6      	strh	r6, [r4, #12]
 8027404:	e7e2      	b.n	80273cc <__smakebuf_r+0x10>
 8027406:	2380      	movs	r3, #128	@ 0x80
 8027408:	89a2      	ldrh	r2, [r4, #12]
 802740a:	6020      	str	r0, [r4, #0]
 802740c:	4313      	orrs	r3, r2
 802740e:	81a3      	strh	r3, [r4, #12]
 8027410:	9b03      	ldr	r3, [sp, #12]
 8027412:	6120      	str	r0, [r4, #16]
 8027414:	6167      	str	r7, [r4, #20]
 8027416:	2b00      	cmp	r3, #0
 8027418:	d00c      	beq.n	8027434 <__smakebuf_r+0x78>
 802741a:	0028      	movs	r0, r5
 802741c:	230e      	movs	r3, #14
 802741e:	5ee1      	ldrsh	r1, [r4, r3]
 8027420:	f000 f832 	bl	8027488 <_isatty_r>
 8027424:	2800      	cmp	r0, #0
 8027426:	d005      	beq.n	8027434 <__smakebuf_r+0x78>
 8027428:	2303      	movs	r3, #3
 802742a:	89a2      	ldrh	r2, [r4, #12]
 802742c:	439a      	bics	r2, r3
 802742e:	3b02      	subs	r3, #2
 8027430:	4313      	orrs	r3, r2
 8027432:	81a3      	strh	r3, [r4, #12]
 8027434:	89a3      	ldrh	r3, [r4, #12]
 8027436:	9a01      	ldr	r2, [sp, #4]
 8027438:	4313      	orrs	r3, r2
 802743a:	81a3      	strh	r3, [r4, #12]
 802743c:	e7cc      	b.n	80273d8 <__smakebuf_r+0x1c>

0802743e <memmove>:
 802743e:	b510      	push	{r4, lr}
 8027440:	4288      	cmp	r0, r1
 8027442:	d806      	bhi.n	8027452 <memmove+0x14>
 8027444:	2300      	movs	r3, #0
 8027446:	429a      	cmp	r2, r3
 8027448:	d008      	beq.n	802745c <memmove+0x1e>
 802744a:	5ccc      	ldrb	r4, [r1, r3]
 802744c:	54c4      	strb	r4, [r0, r3]
 802744e:	3301      	adds	r3, #1
 8027450:	e7f9      	b.n	8027446 <memmove+0x8>
 8027452:	188b      	adds	r3, r1, r2
 8027454:	4298      	cmp	r0, r3
 8027456:	d2f5      	bcs.n	8027444 <memmove+0x6>
 8027458:	3a01      	subs	r2, #1
 802745a:	d200      	bcs.n	802745e <memmove+0x20>
 802745c:	bd10      	pop	{r4, pc}
 802745e:	5c8b      	ldrb	r3, [r1, r2]
 8027460:	5483      	strb	r3, [r0, r2]
 8027462:	e7f9      	b.n	8027458 <memmove+0x1a>

08027464 <_fstat_r>:
 8027464:	2300      	movs	r3, #0
 8027466:	b570      	push	{r4, r5, r6, lr}
 8027468:	4d06      	ldr	r5, [pc, #24]	@ (8027484 <_fstat_r+0x20>)
 802746a:	0004      	movs	r4, r0
 802746c:	0008      	movs	r0, r1
 802746e:	0011      	movs	r1, r2
 8027470:	602b      	str	r3, [r5, #0]
 8027472:	f7ea fcd1 	bl	8011e18 <_fstat>
 8027476:	1c43      	adds	r3, r0, #1
 8027478:	d103      	bne.n	8027482 <_fstat_r+0x1e>
 802747a:	682b      	ldr	r3, [r5, #0]
 802747c:	2b00      	cmp	r3, #0
 802747e:	d000      	beq.n	8027482 <_fstat_r+0x1e>
 8027480:	6023      	str	r3, [r4, #0]
 8027482:	bd70      	pop	{r4, r5, r6, pc}
 8027484:	20003638 	.word	0x20003638

08027488 <_isatty_r>:
 8027488:	2300      	movs	r3, #0
 802748a:	b570      	push	{r4, r5, r6, lr}
 802748c:	4d06      	ldr	r5, [pc, #24]	@ (80274a8 <_isatty_r+0x20>)
 802748e:	0004      	movs	r4, r0
 8027490:	0008      	movs	r0, r1
 8027492:	602b      	str	r3, [r5, #0]
 8027494:	f7ea fcce 	bl	8011e34 <_isatty>
 8027498:	1c43      	adds	r3, r0, #1
 802749a:	d103      	bne.n	80274a4 <_isatty_r+0x1c>
 802749c:	682b      	ldr	r3, [r5, #0]
 802749e:	2b00      	cmp	r3, #0
 80274a0:	d000      	beq.n	80274a4 <_isatty_r+0x1c>
 80274a2:	6023      	str	r3, [r4, #0]
 80274a4:	bd70      	pop	{r4, r5, r6, pc}
 80274a6:	46c0      	nop			@ (mov r8, r8)
 80274a8:	20003638 	.word	0x20003638

080274ac <_sbrk_r>:
 80274ac:	2300      	movs	r3, #0
 80274ae:	b570      	push	{r4, r5, r6, lr}
 80274b0:	4d06      	ldr	r5, [pc, #24]	@ (80274cc <_sbrk_r+0x20>)
 80274b2:	0004      	movs	r4, r0
 80274b4:	0008      	movs	r0, r1
 80274b6:	602b      	str	r3, [r5, #0]
 80274b8:	f7ea fcd0 	bl	8011e5c <_sbrk>
 80274bc:	1c43      	adds	r3, r0, #1
 80274be:	d103      	bne.n	80274c8 <_sbrk_r+0x1c>
 80274c0:	682b      	ldr	r3, [r5, #0]
 80274c2:	2b00      	cmp	r3, #0
 80274c4:	d000      	beq.n	80274c8 <_sbrk_r+0x1c>
 80274c6:	6023      	str	r3, [r4, #0]
 80274c8:	bd70      	pop	{r4, r5, r6, pc}
 80274ca:	46c0      	nop			@ (mov r8, r8)
 80274cc:	20003638 	.word	0x20003638

080274d0 <__assert_func>:
 80274d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80274d2:	0014      	movs	r4, r2
 80274d4:	001a      	movs	r2, r3
 80274d6:	4b09      	ldr	r3, [pc, #36]	@ (80274fc <__assert_func+0x2c>)
 80274d8:	0005      	movs	r5, r0
 80274da:	681b      	ldr	r3, [r3, #0]
 80274dc:	000e      	movs	r6, r1
 80274de:	68d8      	ldr	r0, [r3, #12]
 80274e0:	4b07      	ldr	r3, [pc, #28]	@ (8027500 <__assert_func+0x30>)
 80274e2:	2c00      	cmp	r4, #0
 80274e4:	d101      	bne.n	80274ea <__assert_func+0x1a>
 80274e6:	4b07      	ldr	r3, [pc, #28]	@ (8027504 <__assert_func+0x34>)
 80274e8:	001c      	movs	r4, r3
 80274ea:	4907      	ldr	r1, [pc, #28]	@ (8027508 <__assert_func+0x38>)
 80274ec:	9301      	str	r3, [sp, #4]
 80274ee:	9402      	str	r4, [sp, #8]
 80274f0:	002b      	movs	r3, r5
 80274f2:	9600      	str	r6, [sp, #0]
 80274f4:	f000 f866 	bl	80275c4 <fiprintf>
 80274f8:	f000 f874 	bl	80275e4 <abort>
 80274fc:	200003e0 	.word	0x200003e0
 8027500:	0802d5c1 	.word	0x0802d5c1
 8027504:	0802d5fc 	.word	0x0802d5fc
 8027508:	0802d5ce 	.word	0x0802d5ce

0802750c <_calloc_r>:
 802750c:	b570      	push	{r4, r5, r6, lr}
 802750e:	0c0b      	lsrs	r3, r1, #16
 8027510:	0c15      	lsrs	r5, r2, #16
 8027512:	2b00      	cmp	r3, #0
 8027514:	d11e      	bne.n	8027554 <_calloc_r+0x48>
 8027516:	2d00      	cmp	r5, #0
 8027518:	d10c      	bne.n	8027534 <_calloc_r+0x28>
 802751a:	b289      	uxth	r1, r1
 802751c:	b294      	uxth	r4, r2
 802751e:	434c      	muls	r4, r1
 8027520:	0021      	movs	r1, r4
 8027522:	f7fe fe53 	bl	80261cc <_malloc_r>
 8027526:	1e05      	subs	r5, r0, #0
 8027528:	d01a      	beq.n	8027560 <_calloc_r+0x54>
 802752a:	0022      	movs	r2, r4
 802752c:	2100      	movs	r1, #0
 802752e:	f7fd fb0f 	bl	8024b50 <memset>
 8027532:	e016      	b.n	8027562 <_calloc_r+0x56>
 8027534:	1c2b      	adds	r3, r5, #0
 8027536:	1c0c      	adds	r4, r1, #0
 8027538:	b289      	uxth	r1, r1
 802753a:	b292      	uxth	r2, r2
 802753c:	434a      	muls	r2, r1
 802753e:	b29b      	uxth	r3, r3
 8027540:	b2a1      	uxth	r1, r4
 8027542:	4359      	muls	r1, r3
 8027544:	0c14      	lsrs	r4, r2, #16
 8027546:	190c      	adds	r4, r1, r4
 8027548:	0c23      	lsrs	r3, r4, #16
 802754a:	d107      	bne.n	802755c <_calloc_r+0x50>
 802754c:	0424      	lsls	r4, r4, #16
 802754e:	b292      	uxth	r2, r2
 8027550:	4314      	orrs	r4, r2
 8027552:	e7e5      	b.n	8027520 <_calloc_r+0x14>
 8027554:	2d00      	cmp	r5, #0
 8027556:	d101      	bne.n	802755c <_calloc_r+0x50>
 8027558:	1c14      	adds	r4, r2, #0
 802755a:	e7ed      	b.n	8027538 <_calloc_r+0x2c>
 802755c:	230c      	movs	r3, #12
 802755e:	6003      	str	r3, [r0, #0]
 8027560:	2500      	movs	r5, #0
 8027562:	0028      	movs	r0, r5
 8027564:	bd70      	pop	{r4, r5, r6, pc}

08027566 <_realloc_r>:
 8027566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027568:	0006      	movs	r6, r0
 802756a:	000c      	movs	r4, r1
 802756c:	0015      	movs	r5, r2
 802756e:	2900      	cmp	r1, #0
 8027570:	d105      	bne.n	802757e <_realloc_r+0x18>
 8027572:	0011      	movs	r1, r2
 8027574:	f7fe fe2a 	bl	80261cc <_malloc_r>
 8027578:	0004      	movs	r4, r0
 802757a:	0020      	movs	r0, r4
 802757c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802757e:	2a00      	cmp	r2, #0
 8027580:	d103      	bne.n	802758a <_realloc_r+0x24>
 8027582:	f7fe fa53 	bl	8025a2c <_free_r>
 8027586:	2400      	movs	r4, #0
 8027588:	e7f7      	b.n	802757a <_realloc_r+0x14>
 802758a:	f000 f832 	bl	80275f2 <_malloc_usable_size_r>
 802758e:	0007      	movs	r7, r0
 8027590:	4285      	cmp	r5, r0
 8027592:	d802      	bhi.n	802759a <_realloc_r+0x34>
 8027594:	0843      	lsrs	r3, r0, #1
 8027596:	42ab      	cmp	r3, r5
 8027598:	d3ef      	bcc.n	802757a <_realloc_r+0x14>
 802759a:	0029      	movs	r1, r5
 802759c:	0030      	movs	r0, r6
 802759e:	f7fe fe15 	bl	80261cc <_malloc_r>
 80275a2:	9001      	str	r0, [sp, #4]
 80275a4:	2800      	cmp	r0, #0
 80275a6:	d0ee      	beq.n	8027586 <_realloc_r+0x20>
 80275a8:	002a      	movs	r2, r5
 80275aa:	42bd      	cmp	r5, r7
 80275ac:	d900      	bls.n	80275b0 <_realloc_r+0x4a>
 80275ae:	003a      	movs	r2, r7
 80275b0:	0021      	movs	r1, r4
 80275b2:	9801      	ldr	r0, [sp, #4]
 80275b4:	f7fd fba8 	bl	8024d08 <memcpy>
 80275b8:	0021      	movs	r1, r4
 80275ba:	0030      	movs	r0, r6
 80275bc:	f7fe fa36 	bl	8025a2c <_free_r>
 80275c0:	9c01      	ldr	r4, [sp, #4]
 80275c2:	e7da      	b.n	802757a <_realloc_r+0x14>

080275c4 <fiprintf>:
 80275c4:	b40e      	push	{r1, r2, r3}
 80275c6:	b517      	push	{r0, r1, r2, r4, lr}
 80275c8:	4c05      	ldr	r4, [pc, #20]	@ (80275e0 <fiprintf+0x1c>)
 80275ca:	ab05      	add	r3, sp, #20
 80275cc:	cb04      	ldmia	r3!, {r2}
 80275ce:	0001      	movs	r1, r0
 80275d0:	6820      	ldr	r0, [r4, #0]
 80275d2:	9301      	str	r3, [sp, #4]
 80275d4:	f7ff fcfa 	bl	8026fcc <_vfiprintf_r>
 80275d8:	bc1e      	pop	{r1, r2, r3, r4}
 80275da:	bc08      	pop	{r3}
 80275dc:	b003      	add	sp, #12
 80275de:	4718      	bx	r3
 80275e0:	200003e0 	.word	0x200003e0

080275e4 <abort>:
 80275e4:	2006      	movs	r0, #6
 80275e6:	b510      	push	{r4, lr}
 80275e8:	f000 f834 	bl	8027654 <raise>
 80275ec:	2001      	movs	r0, #1
 80275ee:	f7ea fbdf 	bl	8011db0 <_exit>

080275f2 <_malloc_usable_size_r>:
 80275f2:	1f0b      	subs	r3, r1, #4
 80275f4:	681b      	ldr	r3, [r3, #0]
 80275f6:	1f18      	subs	r0, r3, #4
 80275f8:	2b00      	cmp	r3, #0
 80275fa:	da01      	bge.n	8027600 <_malloc_usable_size_r+0xe>
 80275fc:	580b      	ldr	r3, [r1, r0]
 80275fe:	18c0      	adds	r0, r0, r3
 8027600:	4770      	bx	lr

08027602 <_raise_r>:
 8027602:	b570      	push	{r4, r5, r6, lr}
 8027604:	0004      	movs	r4, r0
 8027606:	000d      	movs	r5, r1
 8027608:	291f      	cmp	r1, #31
 802760a:	d904      	bls.n	8027616 <_raise_r+0x14>
 802760c:	2316      	movs	r3, #22
 802760e:	6003      	str	r3, [r0, #0]
 8027610:	2001      	movs	r0, #1
 8027612:	4240      	negs	r0, r0
 8027614:	bd70      	pop	{r4, r5, r6, pc}
 8027616:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8027618:	2b00      	cmp	r3, #0
 802761a:	d004      	beq.n	8027626 <_raise_r+0x24>
 802761c:	008a      	lsls	r2, r1, #2
 802761e:	189b      	adds	r3, r3, r2
 8027620:	681a      	ldr	r2, [r3, #0]
 8027622:	2a00      	cmp	r2, #0
 8027624:	d108      	bne.n	8027638 <_raise_r+0x36>
 8027626:	0020      	movs	r0, r4
 8027628:	f000 f830 	bl	802768c <_getpid_r>
 802762c:	002a      	movs	r2, r5
 802762e:	0001      	movs	r1, r0
 8027630:	0020      	movs	r0, r4
 8027632:	f000 f819 	bl	8027668 <_kill_r>
 8027636:	e7ed      	b.n	8027614 <_raise_r+0x12>
 8027638:	2a01      	cmp	r2, #1
 802763a:	d009      	beq.n	8027650 <_raise_r+0x4e>
 802763c:	1c51      	adds	r1, r2, #1
 802763e:	d103      	bne.n	8027648 <_raise_r+0x46>
 8027640:	2316      	movs	r3, #22
 8027642:	6003      	str	r3, [r0, #0]
 8027644:	2001      	movs	r0, #1
 8027646:	e7e5      	b.n	8027614 <_raise_r+0x12>
 8027648:	2100      	movs	r1, #0
 802764a:	0028      	movs	r0, r5
 802764c:	6019      	str	r1, [r3, #0]
 802764e:	4790      	blx	r2
 8027650:	2000      	movs	r0, #0
 8027652:	e7df      	b.n	8027614 <_raise_r+0x12>

08027654 <raise>:
 8027654:	b510      	push	{r4, lr}
 8027656:	4b03      	ldr	r3, [pc, #12]	@ (8027664 <raise+0x10>)
 8027658:	0001      	movs	r1, r0
 802765a:	6818      	ldr	r0, [r3, #0]
 802765c:	f7ff ffd1 	bl	8027602 <_raise_r>
 8027660:	bd10      	pop	{r4, pc}
 8027662:	46c0      	nop			@ (mov r8, r8)
 8027664:	200003e0 	.word	0x200003e0

08027668 <_kill_r>:
 8027668:	2300      	movs	r3, #0
 802766a:	b570      	push	{r4, r5, r6, lr}
 802766c:	4d06      	ldr	r5, [pc, #24]	@ (8027688 <_kill_r+0x20>)
 802766e:	0004      	movs	r4, r0
 8027670:	0008      	movs	r0, r1
 8027672:	0011      	movs	r1, r2
 8027674:	602b      	str	r3, [r5, #0]
 8027676:	f7ea fb8b 	bl	8011d90 <_kill>
 802767a:	1c43      	adds	r3, r0, #1
 802767c:	d103      	bne.n	8027686 <_kill_r+0x1e>
 802767e:	682b      	ldr	r3, [r5, #0]
 8027680:	2b00      	cmp	r3, #0
 8027682:	d000      	beq.n	8027686 <_kill_r+0x1e>
 8027684:	6023      	str	r3, [r4, #0]
 8027686:	bd70      	pop	{r4, r5, r6, pc}
 8027688:	20003638 	.word	0x20003638

0802768c <_getpid_r>:
 802768c:	b510      	push	{r4, lr}
 802768e:	f7ea fb79 	bl	8011d84 <_getpid>
 8027692:	bd10      	pop	{r4, pc}

08027694 <log>:
 8027694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027696:	0004      	movs	r4, r0
 8027698:	000d      	movs	r5, r1
 802769a:	f000 f991 	bl	80279c0 <__ieee754_log>
 802769e:	0022      	movs	r2, r4
 80276a0:	0006      	movs	r6, r0
 80276a2:	000f      	movs	r7, r1
 80276a4:	002b      	movs	r3, r5
 80276a6:	0020      	movs	r0, r4
 80276a8:	0029      	movs	r1, r5
 80276aa:	f7db fe2b 	bl	8003304 <__aeabi_dcmpun>
 80276ae:	2800      	cmp	r0, #0
 80276b0:	d115      	bne.n	80276de <log+0x4a>
 80276b2:	2200      	movs	r2, #0
 80276b4:	2300      	movs	r3, #0
 80276b6:	0020      	movs	r0, r4
 80276b8:	0029      	movs	r1, r5
 80276ba:	f7d8 ff13 	bl	80004e4 <__aeabi_dcmpgt>
 80276be:	2800      	cmp	r0, #0
 80276c0:	d10d      	bne.n	80276de <log+0x4a>
 80276c2:	2200      	movs	r2, #0
 80276c4:	2300      	movs	r3, #0
 80276c6:	0020      	movs	r0, r4
 80276c8:	0029      	movs	r1, r5
 80276ca:	f7d8 fef1 	bl	80004b0 <__aeabi_dcmpeq>
 80276ce:	2800      	cmp	r0, #0
 80276d0:	d008      	beq.n	80276e4 <log+0x50>
 80276d2:	f7fd fae1 	bl	8024c98 <__errno>
 80276d6:	2322      	movs	r3, #34	@ 0x22
 80276d8:	2600      	movs	r6, #0
 80276da:	4f07      	ldr	r7, [pc, #28]	@ (80276f8 <log+0x64>)
 80276dc:	6003      	str	r3, [r0, #0]
 80276de:	0030      	movs	r0, r6
 80276e0:	0039      	movs	r1, r7
 80276e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80276e4:	f7fd fad8 	bl	8024c98 <__errno>
 80276e8:	2321      	movs	r3, #33	@ 0x21
 80276ea:	6003      	str	r3, [r0, #0]
 80276ec:	4803      	ldr	r0, [pc, #12]	@ (80276fc <log+0x68>)
 80276ee:	f7fd fb15 	bl	8024d1c <nan>
 80276f2:	0006      	movs	r6, r0
 80276f4:	000f      	movs	r7, r1
 80276f6:	e7f2      	b.n	80276de <log+0x4a>
 80276f8:	fff00000 	.word	0xfff00000
 80276fc:	0802d5fc 	.word	0x0802d5fc

08027700 <pow>:
 8027700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027702:	0014      	movs	r4, r2
 8027704:	001d      	movs	r5, r3
 8027706:	9000      	str	r0, [sp, #0]
 8027708:	9101      	str	r1, [sp, #4]
 802770a:	f000 fb0b 	bl	8027d24 <__ieee754_pow>
 802770e:	0022      	movs	r2, r4
 8027710:	0006      	movs	r6, r0
 8027712:	000f      	movs	r7, r1
 8027714:	002b      	movs	r3, r5
 8027716:	0020      	movs	r0, r4
 8027718:	0029      	movs	r1, r5
 802771a:	f7db fdf3 	bl	8003304 <__aeabi_dcmpun>
 802771e:	2800      	cmp	r0, #0
 8027720:	d13f      	bne.n	80277a2 <pow+0xa2>
 8027722:	9800      	ldr	r0, [sp, #0]
 8027724:	9901      	ldr	r1, [sp, #4]
 8027726:	2200      	movs	r2, #0
 8027728:	2300      	movs	r3, #0
 802772a:	f7d8 fec1 	bl	80004b0 <__aeabi_dcmpeq>
 802772e:	2800      	cmp	r0, #0
 8027730:	d019      	beq.n	8027766 <pow+0x66>
 8027732:	2200      	movs	r2, #0
 8027734:	2300      	movs	r3, #0
 8027736:	0020      	movs	r0, r4
 8027738:	0029      	movs	r1, r5
 802773a:	f7d8 feb9 	bl	80004b0 <__aeabi_dcmpeq>
 802773e:	2800      	cmp	r0, #0
 8027740:	d146      	bne.n	80277d0 <pow+0xd0>
 8027742:	0020      	movs	r0, r4
 8027744:	0029      	movs	r1, r5
 8027746:	f000 f88d 	bl	8027864 <finite>
 802774a:	2800      	cmp	r0, #0
 802774c:	d029      	beq.n	80277a2 <pow+0xa2>
 802774e:	2200      	movs	r2, #0
 8027750:	2300      	movs	r3, #0
 8027752:	0020      	movs	r0, r4
 8027754:	0029      	movs	r1, r5
 8027756:	f7d8 feb1 	bl	80004bc <__aeabi_dcmplt>
 802775a:	2800      	cmp	r0, #0
 802775c:	d021      	beq.n	80277a2 <pow+0xa2>
 802775e:	f7fd fa9b 	bl	8024c98 <__errno>
 8027762:	2322      	movs	r3, #34	@ 0x22
 8027764:	e01c      	b.n	80277a0 <pow+0xa0>
 8027766:	0030      	movs	r0, r6
 8027768:	0039      	movs	r1, r7
 802776a:	f000 f87b 	bl	8027864 <finite>
 802776e:	2800      	cmp	r0, #0
 8027770:	d11b      	bne.n	80277aa <pow+0xaa>
 8027772:	9800      	ldr	r0, [sp, #0]
 8027774:	9901      	ldr	r1, [sp, #4]
 8027776:	f000 f875 	bl	8027864 <finite>
 802777a:	2800      	cmp	r0, #0
 802777c:	d015      	beq.n	80277aa <pow+0xaa>
 802777e:	0020      	movs	r0, r4
 8027780:	0029      	movs	r1, r5
 8027782:	f000 f86f 	bl	8027864 <finite>
 8027786:	2800      	cmp	r0, #0
 8027788:	d00f      	beq.n	80277aa <pow+0xaa>
 802778a:	0032      	movs	r2, r6
 802778c:	003b      	movs	r3, r7
 802778e:	0030      	movs	r0, r6
 8027790:	0039      	movs	r1, r7
 8027792:	f7db fdb7 	bl	8003304 <__aeabi_dcmpun>
 8027796:	2800      	cmp	r0, #0
 8027798:	d0e1      	beq.n	802775e <pow+0x5e>
 802779a:	f7fd fa7d 	bl	8024c98 <__errno>
 802779e:	2321      	movs	r3, #33	@ 0x21
 80277a0:	6003      	str	r3, [r0, #0]
 80277a2:	0030      	movs	r0, r6
 80277a4:	0039      	movs	r1, r7
 80277a6:	b003      	add	sp, #12
 80277a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80277aa:	2200      	movs	r2, #0
 80277ac:	2300      	movs	r3, #0
 80277ae:	0030      	movs	r0, r6
 80277b0:	0039      	movs	r1, r7
 80277b2:	f7d8 fe7d 	bl	80004b0 <__aeabi_dcmpeq>
 80277b6:	2800      	cmp	r0, #0
 80277b8:	d0f3      	beq.n	80277a2 <pow+0xa2>
 80277ba:	9800      	ldr	r0, [sp, #0]
 80277bc:	9901      	ldr	r1, [sp, #4]
 80277be:	f000 f851 	bl	8027864 <finite>
 80277c2:	2800      	cmp	r0, #0
 80277c4:	d0ed      	beq.n	80277a2 <pow+0xa2>
 80277c6:	0020      	movs	r0, r4
 80277c8:	0029      	movs	r1, r5
 80277ca:	f000 f84b 	bl	8027864 <finite>
 80277ce:	e7c4      	b.n	802775a <pow+0x5a>
 80277d0:	2600      	movs	r6, #0
 80277d2:	4f01      	ldr	r7, [pc, #4]	@ (80277d8 <pow+0xd8>)
 80277d4:	e7e5      	b.n	80277a2 <pow+0xa2>
 80277d6:	46c0      	nop			@ (mov r8, r8)
 80277d8:	3ff00000 	.word	0x3ff00000

080277dc <expf>:
 80277dc:	b570      	push	{r4, r5, r6, lr}
 80277de:	1c04      	adds	r4, r0, #0
 80277e0:	f000 ffd0 	bl	8028784 <__ieee754_expf>
 80277e4:	1c05      	adds	r5, r0, #0
 80277e6:	1c20      	adds	r0, r4, #0
 80277e8:	f000 f844 	bl	8027874 <finitef>
 80277ec:	2800      	cmp	r0, #0
 80277ee:	d00b      	beq.n	8027808 <expf+0x2c>
 80277f0:	490c      	ldr	r1, [pc, #48]	@ (8027824 <expf+0x48>)
 80277f2:	1c20      	adds	r0, r4, #0
 80277f4:	f7d8 feb0 	bl	8000558 <__aeabi_fcmpgt>
 80277f8:	2800      	cmp	r0, #0
 80277fa:	d007      	beq.n	802780c <expf+0x30>
 80277fc:	f7fd fa4c 	bl	8024c98 <__errno>
 8027800:	25ff      	movs	r5, #255	@ 0xff
 8027802:	2322      	movs	r3, #34	@ 0x22
 8027804:	05ed      	lsls	r5, r5, #23
 8027806:	6003      	str	r3, [r0, #0]
 8027808:	1c28      	adds	r0, r5, #0
 802780a:	bd70      	pop	{r4, r5, r6, pc}
 802780c:	4906      	ldr	r1, [pc, #24]	@ (8027828 <expf+0x4c>)
 802780e:	1c20      	adds	r0, r4, #0
 8027810:	f7d8 fe8e 	bl	8000530 <__aeabi_fcmplt>
 8027814:	2800      	cmp	r0, #0
 8027816:	d0f7      	beq.n	8027808 <expf+0x2c>
 8027818:	f7fd fa3e 	bl	8024c98 <__errno>
 802781c:	2322      	movs	r3, #34	@ 0x22
 802781e:	2500      	movs	r5, #0
 8027820:	6003      	str	r3, [r0, #0]
 8027822:	e7f1      	b.n	8027808 <expf+0x2c>
 8027824:	42b17217 	.word	0x42b17217
 8027828:	c2cff1b5 	.word	0xc2cff1b5

0802782c <sqrtf>:
 802782c:	b570      	push	{r4, r5, r6, lr}
 802782e:	1c05      	adds	r5, r0, #0
 8027830:	f000 f82a 	bl	8027888 <__ieee754_sqrtf>
 8027834:	1c29      	adds	r1, r5, #0
 8027836:	1c04      	adds	r4, r0, #0
 8027838:	1c28      	adds	r0, r5, #0
 802783a:	f7d9 fe93 	bl	8001564 <__aeabi_fcmpun>
 802783e:	2800      	cmp	r0, #0
 8027840:	d10e      	bne.n	8027860 <sqrtf+0x34>
 8027842:	2100      	movs	r1, #0
 8027844:	1c28      	adds	r0, r5, #0
 8027846:	f7d8 fe73 	bl	8000530 <__aeabi_fcmplt>
 802784a:	2800      	cmp	r0, #0
 802784c:	d008      	beq.n	8027860 <sqrtf+0x34>
 802784e:	f7fd fa23 	bl	8024c98 <__errno>
 8027852:	2321      	movs	r3, #33	@ 0x21
 8027854:	2100      	movs	r1, #0
 8027856:	6003      	str	r3, [r0, #0]
 8027858:	1c08      	adds	r0, r1, #0
 802785a:	f7d9 f9bb 	bl	8000bd4 <__aeabi_fdiv>
 802785e:	1c04      	adds	r4, r0, #0
 8027860:	1c20      	adds	r0, r4, #0
 8027862:	bd70      	pop	{r4, r5, r6, pc}

08027864 <finite>:
 8027864:	4b02      	ldr	r3, [pc, #8]	@ (8027870 <finite+0xc>)
 8027866:	0048      	lsls	r0, r1, #1
 8027868:	0840      	lsrs	r0, r0, #1
 802786a:	18c0      	adds	r0, r0, r3
 802786c:	0fc0      	lsrs	r0, r0, #31
 802786e:	4770      	bx	lr
 8027870:	80100000 	.word	0x80100000

08027874 <finitef>:
 8027874:	22ff      	movs	r2, #255	@ 0xff
 8027876:	0043      	lsls	r3, r0, #1
 8027878:	085b      	lsrs	r3, r3, #1
 802787a:	2001      	movs	r0, #1
 802787c:	05d2      	lsls	r2, r2, #23
 802787e:	4293      	cmp	r3, r2
 8027880:	db00      	blt.n	8027884 <finitef+0x10>
 8027882:	2000      	movs	r0, #0
 8027884:	4770      	bx	lr
	...

08027888 <__ieee754_sqrtf>:
 8027888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802788a:	0003      	movs	r3, r0
 802788c:	0042      	lsls	r2, r0, #1
 802788e:	1c04      	adds	r4, r0, #0
 8027890:	20ff      	movs	r0, #255	@ 0xff
 8027892:	0852      	lsrs	r2, r2, #1
 8027894:	05c0      	lsls	r0, r0, #23
 8027896:	4282      	cmp	r2, r0
 8027898:	d30a      	bcc.n	80278b0 <__ieee754_sqrtf+0x28>
 802789a:	1c21      	adds	r1, r4, #0
 802789c:	1c20      	adds	r0, r4, #0
 802789e:	f7d9 fb7f 	bl	8000fa0 <__aeabi_fmul>
 80278a2:	1c01      	adds	r1, r0, #0
 80278a4:	1c20      	adds	r0, r4, #0
 80278a6:	f7d9 f80b 	bl	80008c0 <__aeabi_fadd>
 80278aa:	1c04      	adds	r4, r0, #0
 80278ac:	1c20      	adds	r0, r4, #0
 80278ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80278b0:	2a00      	cmp	r2, #0
 80278b2:	d0fb      	beq.n	80278ac <__ieee754_sqrtf+0x24>
 80278b4:	2c00      	cmp	r4, #0
 80278b6:	da07      	bge.n	80278c8 <__ieee754_sqrtf+0x40>
 80278b8:	1c21      	adds	r1, r4, #0
 80278ba:	1c20      	adds	r0, r4, #0
 80278bc:	f7d9 fcae 	bl	800121c <__aeabi_fsub>
 80278c0:	1c01      	adds	r1, r0, #0
 80278c2:	f7d9 f987 	bl	8000bd4 <__aeabi_fdiv>
 80278c6:	e7f0      	b.n	80278aa <__ieee754_sqrtf+0x22>
 80278c8:	0022      	movs	r2, r4
 80278ca:	15e1      	asrs	r1, r4, #23
 80278cc:	4002      	ands	r2, r0
 80278ce:	4204      	tst	r4, r0
 80278d0:	d046      	beq.n	8027960 <__ieee754_sqrtf+0xd8>
 80278d2:	2280      	movs	r2, #128	@ 0x80
 80278d4:	000f      	movs	r7, r1
 80278d6:	025b      	lsls	r3, r3, #9
 80278d8:	0a5b      	lsrs	r3, r3, #9
 80278da:	0412      	lsls	r2, r2, #16
 80278dc:	3f7f      	subs	r7, #127	@ 0x7f
 80278de:	4313      	orrs	r3, r2
 80278e0:	07c9      	lsls	r1, r1, #31
 80278e2:	d400      	bmi.n	80278e6 <__ieee754_sqrtf+0x5e>
 80278e4:	005b      	lsls	r3, r3, #1
 80278e6:	2400      	movs	r4, #0
 80278e8:	2180      	movs	r1, #128	@ 0x80
 80278ea:	2019      	movs	r0, #25
 80278ec:	0026      	movs	r6, r4
 80278ee:	107f      	asrs	r7, r7, #1
 80278f0:	005b      	lsls	r3, r3, #1
 80278f2:	0449      	lsls	r1, r1, #17
 80278f4:	1875      	adds	r5, r6, r1
 80278f6:	001a      	movs	r2, r3
 80278f8:	429d      	cmp	r5, r3
 80278fa:	dc02      	bgt.n	8027902 <__ieee754_sqrtf+0x7a>
 80278fc:	186e      	adds	r6, r5, r1
 80278fe:	1b5a      	subs	r2, r3, r5
 8027900:	1864      	adds	r4, r4, r1
 8027902:	3801      	subs	r0, #1
 8027904:	0053      	lsls	r3, r2, #1
 8027906:	0849      	lsrs	r1, r1, #1
 8027908:	2800      	cmp	r0, #0
 802790a:	d1f3      	bne.n	80278f4 <__ieee754_sqrtf+0x6c>
 802790c:	2a00      	cmp	r2, #0
 802790e:	d019      	beq.n	8027944 <__ieee754_sqrtf+0xbc>
 8027910:	4d17      	ldr	r5, [pc, #92]	@ (8027970 <__ieee754_sqrtf+0xe8>)
 8027912:	4e18      	ldr	r6, [pc, #96]	@ (8027974 <__ieee754_sqrtf+0xec>)
 8027914:	6828      	ldr	r0, [r5, #0]
 8027916:	6831      	ldr	r1, [r6, #0]
 8027918:	682b      	ldr	r3, [r5, #0]
 802791a:	9301      	str	r3, [sp, #4]
 802791c:	f7d9 fc7e 	bl	800121c <__aeabi_fsub>
 8027920:	1c01      	adds	r1, r0, #0
 8027922:	9801      	ldr	r0, [sp, #4]
 8027924:	f7d8 fe0e 	bl	8000544 <__aeabi_fcmple>
 8027928:	2800      	cmp	r0, #0
 802792a:	d00b      	beq.n	8027944 <__ieee754_sqrtf+0xbc>
 802792c:	6828      	ldr	r0, [r5, #0]
 802792e:	6831      	ldr	r1, [r6, #0]
 8027930:	f7d8 ffc6 	bl	80008c0 <__aeabi_fadd>
 8027934:	682d      	ldr	r5, [r5, #0]
 8027936:	1c01      	adds	r1, r0, #0
 8027938:	1c28      	adds	r0, r5, #0
 802793a:	f7d8 fdf9 	bl	8000530 <__aeabi_fcmplt>
 802793e:	2800      	cmp	r0, #0
 8027940:	d011      	beq.n	8027966 <__ieee754_sqrtf+0xde>
 8027942:	3402      	adds	r4, #2
 8027944:	23fc      	movs	r3, #252	@ 0xfc
 8027946:	1064      	asrs	r4, r4, #1
 8027948:	059b      	lsls	r3, r3, #22
 802794a:	18e3      	adds	r3, r4, r3
 802794c:	05fc      	lsls	r4, r7, #23
 802794e:	18e4      	adds	r4, r4, r3
 8027950:	e7ac      	b.n	80278ac <__ieee754_sqrtf+0x24>
 8027952:	005b      	lsls	r3, r3, #1
 8027954:	3201      	adds	r2, #1
 8027956:	4203      	tst	r3, r0
 8027958:	d0fb      	beq.n	8027952 <__ieee754_sqrtf+0xca>
 802795a:	3a01      	subs	r2, #1
 802795c:	1a89      	subs	r1, r1, r2
 802795e:	e7b8      	b.n	80278d2 <__ieee754_sqrtf+0x4a>
 8027960:	2080      	movs	r0, #128	@ 0x80
 8027962:	0400      	lsls	r0, r0, #16
 8027964:	e7f7      	b.n	8027956 <__ieee754_sqrtf+0xce>
 8027966:	2301      	movs	r3, #1
 8027968:	3401      	adds	r4, #1
 802796a:	439c      	bics	r4, r3
 802796c:	e7ea      	b.n	8027944 <__ieee754_sqrtf+0xbc>
 802796e:	46c0      	nop			@ (mov r8, r8)
 8027970:	20000434 	.word	0x20000434
 8027974:	20000430 	.word	0x20000430

08027978 <roundf>:
 8027978:	0dc3      	lsrs	r3, r0, #23
 802797a:	b2db      	uxtb	r3, r3
 802797c:	3b7f      	subs	r3, #127	@ 0x7f
 802797e:	0002      	movs	r2, r0
 8027980:	b510      	push	{r4, lr}
 8027982:	2b16      	cmp	r3, #22
 8027984:	dc13      	bgt.n	80279ae <roundf+0x36>
 8027986:	2b00      	cmp	r3, #0
 8027988:	da07      	bge.n	802799a <roundf+0x22>
 802798a:	0fc2      	lsrs	r2, r0, #31
 802798c:	07d0      	lsls	r0, r2, #31
 802798e:	3301      	adds	r3, #1
 8027990:	d102      	bne.n	8027998 <roundf+0x20>
 8027992:	23fe      	movs	r3, #254	@ 0xfe
 8027994:	059b      	lsls	r3, r3, #22
 8027996:	4318      	orrs	r0, r3
 8027998:	bd10      	pop	{r4, pc}
 802799a:	4908      	ldr	r1, [pc, #32]	@ (80279bc <roundf+0x44>)
 802799c:	4119      	asrs	r1, r3
 802799e:	4208      	tst	r0, r1
 80279a0:	d0fa      	beq.n	8027998 <roundf+0x20>
 80279a2:	2080      	movs	r0, #128	@ 0x80
 80279a4:	03c0      	lsls	r0, r0, #15
 80279a6:	4118      	asrs	r0, r3
 80279a8:	1880      	adds	r0, r0, r2
 80279aa:	4388      	bics	r0, r1
 80279ac:	e7f4      	b.n	8027998 <roundf+0x20>
 80279ae:	2b80      	cmp	r3, #128	@ 0x80
 80279b0:	d1f2      	bne.n	8027998 <roundf+0x20>
 80279b2:	1c01      	adds	r1, r0, #0
 80279b4:	f7d8 ff84 	bl	80008c0 <__aeabi_fadd>
 80279b8:	e7ee      	b.n	8027998 <roundf+0x20>
 80279ba:	46c0      	nop			@ (mov r8, r8)
 80279bc:	007fffff 	.word	0x007fffff

080279c0 <__ieee754_log>:
 80279c0:	2380      	movs	r3, #128	@ 0x80
 80279c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80279c4:	035b      	lsls	r3, r3, #13
 80279c6:	000e      	movs	r6, r1
 80279c8:	b08d      	sub	sp, #52	@ 0x34
 80279ca:	4299      	cmp	r1, r3
 80279cc:	da23      	bge.n	8027a16 <__ieee754_log+0x56>
 80279ce:	004b      	lsls	r3, r1, #1
 80279d0:	085b      	lsrs	r3, r3, #1
 80279d2:	4303      	orrs	r3, r0
 80279d4:	d107      	bne.n	80279e6 <__ieee754_log+0x26>
 80279d6:	2200      	movs	r2, #0
 80279d8:	2300      	movs	r3, #0
 80279da:	2000      	movs	r0, #0
 80279dc:	49b4      	ldr	r1, [pc, #720]	@ (8027cb0 <__ieee754_log+0x2f0>)
 80279de:	f7da f9e9 	bl	8001db4 <__aeabi_ddiv>
 80279e2:	b00d      	add	sp, #52	@ 0x34
 80279e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80279e6:	2900      	cmp	r1, #0
 80279e8:	da06      	bge.n	80279f8 <__ieee754_log+0x38>
 80279ea:	0002      	movs	r2, r0
 80279ec:	000b      	movs	r3, r1
 80279ee:	f7db f8ed 	bl	8002bcc <__aeabi_dsub>
 80279f2:	2200      	movs	r2, #0
 80279f4:	2300      	movs	r3, #0
 80279f6:	e7f2      	b.n	80279de <__ieee754_log+0x1e>
 80279f8:	4bae      	ldr	r3, [pc, #696]	@ (8027cb4 <__ieee754_log+0x2f4>)
 80279fa:	2200      	movs	r2, #0
 80279fc:	f7da fe1e 	bl	800263c <__aeabi_dmul>
 8027a00:	2336      	movs	r3, #54	@ 0x36
 8027a02:	000e      	movs	r6, r1
 8027a04:	425b      	negs	r3, r3
 8027a06:	4aac      	ldr	r2, [pc, #688]	@ (8027cb8 <__ieee754_log+0x2f8>)
 8027a08:	4296      	cmp	r6, r2
 8027a0a:	dd06      	ble.n	8027a1a <__ieee754_log+0x5a>
 8027a0c:	0002      	movs	r2, r0
 8027a0e:	000b      	movs	r3, r1
 8027a10:	f7d9 fe6c 	bl	80016ec <__aeabi_dadd>
 8027a14:	e7e5      	b.n	80279e2 <__ieee754_log+0x22>
 8027a16:	2300      	movs	r3, #0
 8027a18:	e7f5      	b.n	8027a06 <__ieee754_log+0x46>
 8027a1a:	4ca8      	ldr	r4, [pc, #672]	@ (8027cbc <__ieee754_log+0x2fc>)
 8027a1c:	1532      	asrs	r2, r6, #20
 8027a1e:	1912      	adds	r2, r2, r4
 8027a20:	0336      	lsls	r6, r6, #12
 8027a22:	4ca7      	ldr	r4, [pc, #668]	@ (8027cc0 <__ieee754_log+0x300>)
 8027a24:	18d2      	adds	r2, r2, r3
 8027a26:	0b33      	lsrs	r3, r6, #12
 8027a28:	9302      	str	r3, [sp, #8]
 8027a2a:	191b      	adds	r3, r3, r4
 8027a2c:	2480      	movs	r4, #128	@ 0x80
 8027a2e:	0364      	lsls	r4, r4, #13
 8027a30:	4023      	ands	r3, r4
 8027a32:	4ca4      	ldr	r4, [pc, #656]	@ (8027cc4 <__ieee754_log+0x304>)
 8027a34:	9d02      	ldr	r5, [sp, #8]
 8027a36:	405c      	eors	r4, r3
 8027a38:	151b      	asrs	r3, r3, #20
 8027a3a:	189b      	adds	r3, r3, r2
 8027a3c:	4325      	orrs	r5, r4
 8027a3e:	2200      	movs	r2, #0
 8027a40:	9300      	str	r3, [sp, #0]
 8027a42:	0029      	movs	r1, r5
 8027a44:	4b9f      	ldr	r3, [pc, #636]	@ (8027cc4 <__ieee754_log+0x304>)
 8027a46:	f7db f8c1 	bl	8002bcc <__aeabi_dsub>
 8027a4a:	9b02      	ldr	r3, [sp, #8]
 8027a4c:	0006      	movs	r6, r0
 8027a4e:	3302      	adds	r3, #2
 8027a50:	031b      	lsls	r3, r3, #12
 8027a52:	000f      	movs	r7, r1
 8027a54:	2200      	movs	r2, #0
 8027a56:	0b1b      	lsrs	r3, r3, #12
 8027a58:	2b02      	cmp	r3, #2
 8027a5a:	dc64      	bgt.n	8027b26 <__ieee754_log+0x166>
 8027a5c:	2300      	movs	r3, #0
 8027a5e:	f7d8 fd27 	bl	80004b0 <__aeabi_dcmpeq>
 8027a62:	2800      	cmp	r0, #0
 8027a64:	d019      	beq.n	8027a9a <__ieee754_log+0xda>
 8027a66:	9b00      	ldr	r3, [sp, #0]
 8027a68:	2b00      	cmp	r3, #0
 8027a6a:	d100      	bne.n	8027a6e <__ieee754_log+0xae>
 8027a6c:	e11c      	b.n	8027ca8 <__ieee754_log+0x2e8>
 8027a6e:	0018      	movs	r0, r3
 8027a70:	f7db fca6 	bl	80033c0 <__aeabi_i2d>
 8027a74:	4a94      	ldr	r2, [pc, #592]	@ (8027cc8 <__ieee754_log+0x308>)
 8027a76:	4b95      	ldr	r3, [pc, #596]	@ (8027ccc <__ieee754_log+0x30c>)
 8027a78:	0004      	movs	r4, r0
 8027a7a:	000d      	movs	r5, r1
 8027a7c:	f7da fdde 	bl	800263c <__aeabi_dmul>
 8027a80:	4a93      	ldr	r2, [pc, #588]	@ (8027cd0 <__ieee754_log+0x310>)
 8027a82:	0006      	movs	r6, r0
 8027a84:	000f      	movs	r7, r1
 8027a86:	4b93      	ldr	r3, [pc, #588]	@ (8027cd4 <__ieee754_log+0x314>)
 8027a88:	0020      	movs	r0, r4
 8027a8a:	0029      	movs	r1, r5
 8027a8c:	f7da fdd6 	bl	800263c <__aeabi_dmul>
 8027a90:	0002      	movs	r2, r0
 8027a92:	000b      	movs	r3, r1
 8027a94:	0030      	movs	r0, r6
 8027a96:	0039      	movs	r1, r7
 8027a98:	e7ba      	b.n	8027a10 <__ieee754_log+0x50>
 8027a9a:	4a8f      	ldr	r2, [pc, #572]	@ (8027cd8 <__ieee754_log+0x318>)
 8027a9c:	4b8f      	ldr	r3, [pc, #572]	@ (8027cdc <__ieee754_log+0x31c>)
 8027a9e:	0030      	movs	r0, r6
 8027aa0:	0039      	movs	r1, r7
 8027aa2:	f7da fdcb 	bl	800263c <__aeabi_dmul>
 8027aa6:	0002      	movs	r2, r0
 8027aa8:	000b      	movs	r3, r1
 8027aaa:	2000      	movs	r0, #0
 8027aac:	498c      	ldr	r1, [pc, #560]	@ (8027ce0 <__ieee754_log+0x320>)
 8027aae:	f7db f88d 	bl	8002bcc <__aeabi_dsub>
 8027ab2:	0032      	movs	r2, r6
 8027ab4:	0004      	movs	r4, r0
 8027ab6:	000d      	movs	r5, r1
 8027ab8:	003b      	movs	r3, r7
 8027aba:	0030      	movs	r0, r6
 8027abc:	0039      	movs	r1, r7
 8027abe:	f7da fdbd 	bl	800263c <__aeabi_dmul>
 8027ac2:	000b      	movs	r3, r1
 8027ac4:	0002      	movs	r2, r0
 8027ac6:	0029      	movs	r1, r5
 8027ac8:	0020      	movs	r0, r4
 8027aca:	f7da fdb7 	bl	800263c <__aeabi_dmul>
 8027ace:	9b00      	ldr	r3, [sp, #0]
 8027ad0:	9002      	str	r0, [sp, #8]
 8027ad2:	9103      	str	r1, [sp, #12]
 8027ad4:	2b00      	cmp	r3, #0
 8027ad6:	d106      	bne.n	8027ae6 <__ieee754_log+0x126>
 8027ad8:	0002      	movs	r2, r0
 8027ada:	000b      	movs	r3, r1
 8027adc:	0030      	movs	r0, r6
 8027ade:	0039      	movs	r1, r7
 8027ae0:	f7db f874 	bl	8002bcc <__aeabi_dsub>
 8027ae4:	e77d      	b.n	80279e2 <__ieee754_log+0x22>
 8027ae6:	9800      	ldr	r0, [sp, #0]
 8027ae8:	f7db fc6a 	bl	80033c0 <__aeabi_i2d>
 8027aec:	4a76      	ldr	r2, [pc, #472]	@ (8027cc8 <__ieee754_log+0x308>)
 8027aee:	4b77      	ldr	r3, [pc, #476]	@ (8027ccc <__ieee754_log+0x30c>)
 8027af0:	0004      	movs	r4, r0
 8027af2:	000d      	movs	r5, r1
 8027af4:	f7da fda2 	bl	800263c <__aeabi_dmul>
 8027af8:	4a75      	ldr	r2, [pc, #468]	@ (8027cd0 <__ieee754_log+0x310>)
 8027afa:	9000      	str	r0, [sp, #0]
 8027afc:	9101      	str	r1, [sp, #4]
 8027afe:	4b75      	ldr	r3, [pc, #468]	@ (8027cd4 <__ieee754_log+0x314>)
 8027b00:	0020      	movs	r0, r4
 8027b02:	0029      	movs	r1, r5
 8027b04:	f7da fd9a 	bl	800263c <__aeabi_dmul>
 8027b08:	0002      	movs	r2, r0
 8027b0a:	000b      	movs	r3, r1
 8027b0c:	9802      	ldr	r0, [sp, #8]
 8027b0e:	9903      	ldr	r1, [sp, #12]
 8027b10:	f7db f85c 	bl	8002bcc <__aeabi_dsub>
 8027b14:	0032      	movs	r2, r6
 8027b16:	003b      	movs	r3, r7
 8027b18:	f7db f858 	bl	8002bcc <__aeabi_dsub>
 8027b1c:	0002      	movs	r2, r0
 8027b1e:	000b      	movs	r3, r1
 8027b20:	9800      	ldr	r0, [sp, #0]
 8027b22:	9901      	ldr	r1, [sp, #4]
 8027b24:	e7dc      	b.n	8027ae0 <__ieee754_log+0x120>
 8027b26:	2380      	movs	r3, #128	@ 0x80
 8027b28:	05db      	lsls	r3, r3, #23
 8027b2a:	f7d9 fddf 	bl	80016ec <__aeabi_dadd>
 8027b2e:	0002      	movs	r2, r0
 8027b30:	000b      	movs	r3, r1
 8027b32:	0030      	movs	r0, r6
 8027b34:	0039      	movs	r1, r7
 8027b36:	f7da f93d 	bl	8001db4 <__aeabi_ddiv>
 8027b3a:	9004      	str	r0, [sp, #16]
 8027b3c:	9105      	str	r1, [sp, #20]
 8027b3e:	9800      	ldr	r0, [sp, #0]
 8027b40:	f7db fc3e 	bl	80033c0 <__aeabi_i2d>
 8027b44:	9a04      	ldr	r2, [sp, #16]
 8027b46:	9b05      	ldr	r3, [sp, #20]
 8027b48:	9006      	str	r0, [sp, #24]
 8027b4a:	9107      	str	r1, [sp, #28]
 8027b4c:	0010      	movs	r0, r2
 8027b4e:	0019      	movs	r1, r3
 8027b50:	f7da fd74 	bl	800263c <__aeabi_dmul>
 8027b54:	4a63      	ldr	r2, [pc, #396]	@ (8027ce4 <__ieee754_log+0x324>)
 8027b56:	9b02      	ldr	r3, [sp, #8]
 8027b58:	4694      	mov	ip, r2
 8027b5a:	4463      	add	r3, ip
 8027b5c:	0002      	movs	r2, r0
 8027b5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027b60:	000b      	movs	r3, r1
 8027b62:	9008      	str	r0, [sp, #32]
 8027b64:	9109      	str	r1, [sp, #36]	@ 0x24
 8027b66:	f7da fd69 	bl	800263c <__aeabi_dmul>
 8027b6a:	0004      	movs	r4, r0
 8027b6c:	000d      	movs	r5, r1
 8027b6e:	4a5e      	ldr	r2, [pc, #376]	@ (8027ce8 <__ieee754_log+0x328>)
 8027b70:	4b5e      	ldr	r3, [pc, #376]	@ (8027cec <__ieee754_log+0x32c>)
 8027b72:	f7da fd63 	bl	800263c <__aeabi_dmul>
 8027b76:	4a5e      	ldr	r2, [pc, #376]	@ (8027cf0 <__ieee754_log+0x330>)
 8027b78:	4b5e      	ldr	r3, [pc, #376]	@ (8027cf4 <__ieee754_log+0x334>)
 8027b7a:	f7d9 fdb7 	bl	80016ec <__aeabi_dadd>
 8027b7e:	0022      	movs	r2, r4
 8027b80:	002b      	movs	r3, r5
 8027b82:	f7da fd5b 	bl	800263c <__aeabi_dmul>
 8027b86:	4a5c      	ldr	r2, [pc, #368]	@ (8027cf8 <__ieee754_log+0x338>)
 8027b88:	4b5c      	ldr	r3, [pc, #368]	@ (8027cfc <__ieee754_log+0x33c>)
 8027b8a:	f7d9 fdaf 	bl	80016ec <__aeabi_dadd>
 8027b8e:	0022      	movs	r2, r4
 8027b90:	002b      	movs	r3, r5
 8027b92:	f7da fd53 	bl	800263c <__aeabi_dmul>
 8027b96:	4a5a      	ldr	r2, [pc, #360]	@ (8027d00 <__ieee754_log+0x340>)
 8027b98:	4b5a      	ldr	r3, [pc, #360]	@ (8027d04 <__ieee754_log+0x344>)
 8027b9a:	f7d9 fda7 	bl	80016ec <__aeabi_dadd>
 8027b9e:	9a08      	ldr	r2, [sp, #32]
 8027ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027ba2:	f7da fd4b 	bl	800263c <__aeabi_dmul>
 8027ba6:	4a58      	ldr	r2, [pc, #352]	@ (8027d08 <__ieee754_log+0x348>)
 8027ba8:	9008      	str	r0, [sp, #32]
 8027baa:	9109      	str	r1, [sp, #36]	@ 0x24
 8027bac:	4b57      	ldr	r3, [pc, #348]	@ (8027d0c <__ieee754_log+0x34c>)
 8027bae:	0020      	movs	r0, r4
 8027bb0:	0029      	movs	r1, r5
 8027bb2:	f7da fd43 	bl	800263c <__aeabi_dmul>
 8027bb6:	4a56      	ldr	r2, [pc, #344]	@ (8027d10 <__ieee754_log+0x350>)
 8027bb8:	4b56      	ldr	r3, [pc, #344]	@ (8027d14 <__ieee754_log+0x354>)
 8027bba:	f7d9 fd97 	bl	80016ec <__aeabi_dadd>
 8027bbe:	0022      	movs	r2, r4
 8027bc0:	002b      	movs	r3, r5
 8027bc2:	f7da fd3b 	bl	800263c <__aeabi_dmul>
 8027bc6:	4a54      	ldr	r2, [pc, #336]	@ (8027d18 <__ieee754_log+0x358>)
 8027bc8:	4b54      	ldr	r3, [pc, #336]	@ (8027d1c <__ieee754_log+0x35c>)
 8027bca:	f7d9 fd8f 	bl	80016ec <__aeabi_dadd>
 8027bce:	0022      	movs	r2, r4
 8027bd0:	002b      	movs	r3, r5
 8027bd2:	f7da fd33 	bl	800263c <__aeabi_dmul>
 8027bd6:	0002      	movs	r2, r0
 8027bd8:	000b      	movs	r3, r1
 8027bda:	9808      	ldr	r0, [sp, #32]
 8027bdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027bde:	f7d9 fd85 	bl	80016ec <__aeabi_dadd>
 8027be2:	9a02      	ldr	r2, [sp, #8]
 8027be4:	4b4e      	ldr	r3, [pc, #312]	@ (8027d20 <__ieee754_log+0x360>)
 8027be6:	0004      	movs	r4, r0
 8027be8:	1a9b      	subs	r3, r3, r2
 8027bea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027bec:	000d      	movs	r5, r1
 8027bee:	4313      	orrs	r3, r2
 8027bf0:	2b00      	cmp	r3, #0
 8027bf2:	dd34      	ble.n	8027c5e <__ieee754_log+0x29e>
 8027bf4:	2200      	movs	r2, #0
 8027bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8027ce0 <__ieee754_log+0x320>)
 8027bf8:	0030      	movs	r0, r6
 8027bfa:	0039      	movs	r1, r7
 8027bfc:	f7da fd1e 	bl	800263c <__aeabi_dmul>
 8027c00:	0032      	movs	r2, r6
 8027c02:	003b      	movs	r3, r7
 8027c04:	f7da fd1a 	bl	800263c <__aeabi_dmul>
 8027c08:	0002      	movs	r2, r0
 8027c0a:	000b      	movs	r3, r1
 8027c0c:	9002      	str	r0, [sp, #8]
 8027c0e:	9103      	str	r1, [sp, #12]
 8027c10:	0020      	movs	r0, r4
 8027c12:	0029      	movs	r1, r5
 8027c14:	f7d9 fd6a 	bl	80016ec <__aeabi_dadd>
 8027c18:	9a04      	ldr	r2, [sp, #16]
 8027c1a:	9b05      	ldr	r3, [sp, #20]
 8027c1c:	f7da fd0e 	bl	800263c <__aeabi_dmul>
 8027c20:	9b00      	ldr	r3, [sp, #0]
 8027c22:	0004      	movs	r4, r0
 8027c24:	000d      	movs	r5, r1
 8027c26:	2b00      	cmp	r3, #0
 8027c28:	d106      	bne.n	8027c38 <__ieee754_log+0x278>
 8027c2a:	0002      	movs	r2, r0
 8027c2c:	000b      	movs	r3, r1
 8027c2e:	9802      	ldr	r0, [sp, #8]
 8027c30:	9903      	ldr	r1, [sp, #12]
 8027c32:	f7da ffcb 	bl	8002bcc <__aeabi_dsub>
 8027c36:	e74f      	b.n	8027ad8 <__ieee754_log+0x118>
 8027c38:	4a23      	ldr	r2, [pc, #140]	@ (8027cc8 <__ieee754_log+0x308>)
 8027c3a:	4b24      	ldr	r3, [pc, #144]	@ (8027ccc <__ieee754_log+0x30c>)
 8027c3c:	9806      	ldr	r0, [sp, #24]
 8027c3e:	9907      	ldr	r1, [sp, #28]
 8027c40:	f7da fcfc 	bl	800263c <__aeabi_dmul>
 8027c44:	4a22      	ldr	r2, [pc, #136]	@ (8027cd0 <__ieee754_log+0x310>)
 8027c46:	9000      	str	r0, [sp, #0]
 8027c48:	9101      	str	r1, [sp, #4]
 8027c4a:	9806      	ldr	r0, [sp, #24]
 8027c4c:	9907      	ldr	r1, [sp, #28]
 8027c4e:	4b21      	ldr	r3, [pc, #132]	@ (8027cd4 <__ieee754_log+0x314>)
 8027c50:	f7da fcf4 	bl	800263c <__aeabi_dmul>
 8027c54:	0022      	movs	r2, r4
 8027c56:	002b      	movs	r3, r5
 8027c58:	f7d9 fd48 	bl	80016ec <__aeabi_dadd>
 8027c5c:	e754      	b.n	8027b08 <__ieee754_log+0x148>
 8027c5e:	0002      	movs	r2, r0
 8027c60:	000b      	movs	r3, r1
 8027c62:	0030      	movs	r0, r6
 8027c64:	0039      	movs	r1, r7
 8027c66:	f7da ffb1 	bl	8002bcc <__aeabi_dsub>
 8027c6a:	9a04      	ldr	r2, [sp, #16]
 8027c6c:	9b05      	ldr	r3, [sp, #20]
 8027c6e:	f7da fce5 	bl	800263c <__aeabi_dmul>
 8027c72:	9b00      	ldr	r3, [sp, #0]
 8027c74:	0004      	movs	r4, r0
 8027c76:	000d      	movs	r5, r1
 8027c78:	2b00      	cmp	r3, #0
 8027c7a:	d102      	bne.n	8027c82 <__ieee754_log+0x2c2>
 8027c7c:	0002      	movs	r2, r0
 8027c7e:	000b      	movs	r3, r1
 8027c80:	e72c      	b.n	8027adc <__ieee754_log+0x11c>
 8027c82:	4a11      	ldr	r2, [pc, #68]	@ (8027cc8 <__ieee754_log+0x308>)
 8027c84:	4b11      	ldr	r3, [pc, #68]	@ (8027ccc <__ieee754_log+0x30c>)
 8027c86:	9806      	ldr	r0, [sp, #24]
 8027c88:	9907      	ldr	r1, [sp, #28]
 8027c8a:	f7da fcd7 	bl	800263c <__aeabi_dmul>
 8027c8e:	4a10      	ldr	r2, [pc, #64]	@ (8027cd0 <__ieee754_log+0x310>)
 8027c90:	9000      	str	r0, [sp, #0]
 8027c92:	9101      	str	r1, [sp, #4]
 8027c94:	9806      	ldr	r0, [sp, #24]
 8027c96:	9907      	ldr	r1, [sp, #28]
 8027c98:	4b0e      	ldr	r3, [pc, #56]	@ (8027cd4 <__ieee754_log+0x314>)
 8027c9a:	f7da fccf 	bl	800263c <__aeabi_dmul>
 8027c9e:	0002      	movs	r2, r0
 8027ca0:	000b      	movs	r3, r1
 8027ca2:	0020      	movs	r0, r4
 8027ca4:	0029      	movs	r1, r5
 8027ca6:	e733      	b.n	8027b10 <__ieee754_log+0x150>
 8027ca8:	2000      	movs	r0, #0
 8027caa:	2100      	movs	r1, #0
 8027cac:	e699      	b.n	80279e2 <__ieee754_log+0x22>
 8027cae:	46c0      	nop			@ (mov r8, r8)
 8027cb0:	c3500000 	.word	0xc3500000
 8027cb4:	43500000 	.word	0x43500000
 8027cb8:	7fefffff 	.word	0x7fefffff
 8027cbc:	fffffc01 	.word	0xfffffc01
 8027cc0:	00095f64 	.word	0x00095f64
 8027cc4:	3ff00000 	.word	0x3ff00000
 8027cc8:	fee00000 	.word	0xfee00000
 8027ccc:	3fe62e42 	.word	0x3fe62e42
 8027cd0:	35793c76 	.word	0x35793c76
 8027cd4:	3dea39ef 	.word	0x3dea39ef
 8027cd8:	55555555 	.word	0x55555555
 8027cdc:	3fd55555 	.word	0x3fd55555
 8027ce0:	3fe00000 	.word	0x3fe00000
 8027ce4:	fff9eb86 	.word	0xfff9eb86
 8027ce8:	df3e5244 	.word	0xdf3e5244
 8027cec:	3fc2f112 	.word	0x3fc2f112
 8027cf0:	96cb03de 	.word	0x96cb03de
 8027cf4:	3fc74664 	.word	0x3fc74664
 8027cf8:	94229359 	.word	0x94229359
 8027cfc:	3fd24924 	.word	0x3fd24924
 8027d00:	55555593 	.word	0x55555593
 8027d04:	3fe55555 	.word	0x3fe55555
 8027d08:	d078c69f 	.word	0xd078c69f
 8027d0c:	3fc39a09 	.word	0x3fc39a09
 8027d10:	1d8e78af 	.word	0x1d8e78af
 8027d14:	3fcc71c5 	.word	0x3fcc71c5
 8027d18:	9997fa04 	.word	0x9997fa04
 8027d1c:	3fd99999 	.word	0x3fd99999
 8027d20:	0006b851 	.word	0x0006b851

08027d24 <__ieee754_pow>:
 8027d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027d26:	b095      	sub	sp, #84	@ 0x54
 8027d28:	9202      	str	r2, [sp, #8]
 8027d2a:	9303      	str	r3, [sp, #12]
 8027d2c:	9b03      	ldr	r3, [sp, #12]
 8027d2e:	9a03      	ldr	r2, [sp, #12]
 8027d30:	9306      	str	r3, [sp, #24]
 8027d32:	0052      	lsls	r2, r2, #1
 8027d34:	9b02      	ldr	r3, [sp, #8]
 8027d36:	0852      	lsrs	r2, r2, #1
 8027d38:	9204      	str	r2, [sp, #16]
 8027d3a:	001a      	movs	r2, r3
 8027d3c:	000f      	movs	r7, r1
 8027d3e:	9904      	ldr	r1, [sp, #16]
 8027d40:	0006      	movs	r6, r0
 8027d42:	430a      	orrs	r2, r1
 8027d44:	d119      	bne.n	8027d7a <__ieee754_pow+0x56>
 8027d46:	2180      	movs	r1, #128	@ 0x80
 8027d48:	0309      	lsls	r1, r1, #12
 8027d4a:	4079      	eors	r1, r7
 8027d4c:	0002      	movs	r2, r0
 8027d4e:	000b      	movs	r3, r1
 8027d50:	1892      	adds	r2, r2, r2
 8027d52:	415b      	adcs	r3, r3
 8027d54:	499b      	ldr	r1, [pc, #620]	@ (8027fc4 <__ieee754_pow+0x2a0>)
 8027d56:	428b      	cmp	r3, r1
 8027d58:	d806      	bhi.n	8027d68 <__ieee754_pow+0x44>
 8027d5a:	d001      	beq.n	8027d60 <__ieee754_pow+0x3c>
 8027d5c:	f000 fcde 	bl	802871c <__ieee754_pow+0x9f8>
 8027d60:	2a00      	cmp	r2, #0
 8027d62:	d101      	bne.n	8027d68 <__ieee754_pow+0x44>
 8027d64:	f000 fcda 	bl	802871c <__ieee754_pow+0x9f8>
 8027d68:	9a02      	ldr	r2, [sp, #8]
 8027d6a:	9b03      	ldr	r3, [sp, #12]
 8027d6c:	0030      	movs	r0, r6
 8027d6e:	0039      	movs	r1, r7
 8027d70:	f7d9 fcbc 	bl	80016ec <__aeabi_dadd>
 8027d74:	9000      	str	r0, [sp, #0]
 8027d76:	9101      	str	r1, [sp, #4]
 8027d78:	e0af      	b.n	8027eda <__ieee754_pow+0x1b6>
 8027d7a:	4a93      	ldr	r2, [pc, #588]	@ (8027fc8 <__ieee754_pow+0x2a4>)
 8027d7c:	007c      	lsls	r4, r7, #1
 8027d7e:	9708      	str	r7, [sp, #32]
 8027d80:	900e      	str	r0, [sp, #56]	@ 0x38
 8027d82:	0864      	lsrs	r4, r4, #1
 8027d84:	4294      	cmp	r4, r2
 8027d86:	d809      	bhi.n	8027d9c <__ieee754_pow+0x78>
 8027d88:	d101      	bne.n	8027d8e <__ieee754_pow+0x6a>
 8027d8a:	2800      	cmp	r0, #0
 8027d8c:	d1ec      	bne.n	8027d68 <__ieee754_pow+0x44>
 8027d8e:	9904      	ldr	r1, [sp, #16]
 8027d90:	4a8d      	ldr	r2, [pc, #564]	@ (8027fc8 <__ieee754_pow+0x2a4>)
 8027d92:	4291      	cmp	r1, r2
 8027d94:	d802      	bhi.n	8027d9c <__ieee754_pow+0x78>
 8027d96:	d10c      	bne.n	8027db2 <__ieee754_pow+0x8e>
 8027d98:	2b00      	cmp	r3, #0
 8027d9a:	d00a      	beq.n	8027db2 <__ieee754_pow+0x8e>
 8027d9c:	4b8b      	ldr	r3, [pc, #556]	@ (8027fcc <__ieee754_pow+0x2a8>)
 8027d9e:	18fb      	adds	r3, r7, r3
 8027da0:	4333      	orrs	r3, r6
 8027da2:	d1e1      	bne.n	8027d68 <__ieee754_pow+0x44>
 8027da4:	2180      	movs	r1, #128	@ 0x80
 8027da6:	9803      	ldr	r0, [sp, #12]
 8027da8:	0309      	lsls	r1, r1, #12
 8027daa:	4048      	eors	r0, r1
 8027dac:	0003      	movs	r3, r0
 8027dae:	9a02      	ldr	r2, [sp, #8]
 8027db0:	e7ce      	b.n	8027d50 <__ieee754_pow+0x2c>
 8027db2:	2500      	movs	r5, #0
 8027db4:	9a08      	ldr	r2, [sp, #32]
 8027db6:	940a      	str	r4, [sp, #40]	@ 0x28
 8027db8:	42aa      	cmp	r2, r5
 8027dba:	da68      	bge.n	8027e8e <__ieee754_pow+0x16a>
 8027dbc:	4a84      	ldr	r2, [pc, #528]	@ (8027fd0 <__ieee754_pow+0x2ac>)
 8027dbe:	9904      	ldr	r1, [sp, #16]
 8027dc0:	4291      	cmp	r1, r2
 8027dc2:	d863      	bhi.n	8027e8c <__ieee754_pow+0x168>
 8027dc4:	4a83      	ldr	r2, [pc, #524]	@ (8027fd4 <__ieee754_pow+0x2b0>)
 8027dc6:	4291      	cmp	r1, r2
 8027dc8:	d910      	bls.n	8027dec <__ieee754_pow+0xc8>
 8027dca:	150a      	asrs	r2, r1, #20
 8027dcc:	4982      	ldr	r1, [pc, #520]	@ (8027fd8 <__ieee754_pow+0x2b4>)
 8027dce:	1852      	adds	r2, r2, r1
 8027dd0:	2a14      	cmp	r2, #20
 8027dd2:	dd3b      	ble.n	8027e4c <__ieee754_pow+0x128>
 8027dd4:	2134      	movs	r1, #52	@ 0x34
 8027dd6:	1a89      	subs	r1, r1, r2
 8027dd8:	9a02      	ldr	r2, [sp, #8]
 8027dda:	40ca      	lsrs	r2, r1
 8027ddc:	0010      	movs	r0, r2
 8027dde:	4088      	lsls	r0, r1
 8027de0:	4298      	cmp	r0, r3
 8027de2:	d103      	bne.n	8027dec <__ieee754_pow+0xc8>
 8027de4:	2101      	movs	r1, #1
 8027de6:	3502      	adds	r5, #2
 8027de8:	400a      	ands	r2, r1
 8027dea:	1aad      	subs	r5, r5, r2
 8027dec:	2b00      	cmp	r3, #0
 8027dee:	d03d      	beq.n	8027e6c <__ieee754_pow+0x148>
 8027df0:	0030      	movs	r0, r6
 8027df2:	0039      	movs	r1, r7
 8027df4:	f000 fcc2 	bl	802877c <fabs>
 8027df8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027dfa:	9000      	str	r0, [sp, #0]
 8027dfc:	9101      	str	r1, [sp, #4]
 8027dfe:	2b00      	cmp	r3, #0
 8027e00:	d000      	beq.n	8027e04 <__ieee754_pow+0xe0>
 8027e02:	e093      	b.n	8027f2c <__ieee754_pow+0x208>
 8027e04:	4a75      	ldr	r2, [pc, #468]	@ (8027fdc <__ieee754_pow+0x2b8>)
 8027e06:	00bb      	lsls	r3, r7, #2
 8027e08:	089b      	lsrs	r3, r3, #2
 8027e0a:	4293      	cmp	r3, r2
 8027e0c:	d002      	beq.n	8027e14 <__ieee754_pow+0xf0>
 8027e0e:	2c00      	cmp	r4, #0
 8027e10:	d000      	beq.n	8027e14 <__ieee754_pow+0xf0>
 8027e12:	e08b      	b.n	8027f2c <__ieee754_pow+0x208>
 8027e14:	9b06      	ldr	r3, [sp, #24]
 8027e16:	2b00      	cmp	r3, #0
 8027e18:	da07      	bge.n	8027e2a <__ieee754_pow+0x106>
 8027e1a:	9a00      	ldr	r2, [sp, #0]
 8027e1c:	9b01      	ldr	r3, [sp, #4]
 8027e1e:	2000      	movs	r0, #0
 8027e20:	496e      	ldr	r1, [pc, #440]	@ (8027fdc <__ieee754_pow+0x2b8>)
 8027e22:	f7d9 ffc7 	bl	8001db4 <__aeabi_ddiv>
 8027e26:	9000      	str	r0, [sp, #0]
 8027e28:	9101      	str	r1, [sp, #4]
 8027e2a:	9b08      	ldr	r3, [sp, #32]
 8027e2c:	2b00      	cmp	r3, #0
 8027e2e:	da54      	bge.n	8027eda <__ieee754_pow+0x1b6>
 8027e30:	4b66      	ldr	r3, [pc, #408]	@ (8027fcc <__ieee754_pow+0x2a8>)
 8027e32:	18e4      	adds	r4, r4, r3
 8027e34:	432c      	orrs	r4, r5
 8027e36:	d000      	beq.n	8027e3a <__ieee754_pow+0x116>
 8027e38:	e06d      	b.n	8027f16 <__ieee754_pow+0x1f2>
 8027e3a:	9a00      	ldr	r2, [sp, #0]
 8027e3c:	9b01      	ldr	r3, [sp, #4]
 8027e3e:	0010      	movs	r0, r2
 8027e40:	0019      	movs	r1, r3
 8027e42:	f7da fec3 	bl	8002bcc <__aeabi_dsub>
 8027e46:	0002      	movs	r2, r0
 8027e48:	000b      	movs	r3, r1
 8027e4a:	e01c      	b.n	8027e86 <__ieee754_pow+0x162>
 8027e4c:	2b00      	cmp	r3, #0
 8027e4e:	d1cf      	bne.n	8027df0 <__ieee754_pow+0xcc>
 8027e50:	3314      	adds	r3, #20
 8027e52:	1a9a      	subs	r2, r3, r2
 8027e54:	9b04      	ldr	r3, [sp, #16]
 8027e56:	4113      	asrs	r3, r2
 8027e58:	0019      	movs	r1, r3
 8027e5a:	4091      	lsls	r1, r2
 8027e5c:	000a      	movs	r2, r1
 8027e5e:	9904      	ldr	r1, [sp, #16]
 8027e60:	428a      	cmp	r2, r1
 8027e62:	d103      	bne.n	8027e6c <__ieee754_pow+0x148>
 8027e64:	2201      	movs	r2, #1
 8027e66:	2502      	movs	r5, #2
 8027e68:	4013      	ands	r3, r2
 8027e6a:	1aed      	subs	r5, r5, r3
 8027e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8027fdc <__ieee754_pow+0x2b8>)
 8027e6e:	9a04      	ldr	r2, [sp, #16]
 8027e70:	429a      	cmp	r2, r3
 8027e72:	d136      	bne.n	8027ee2 <__ieee754_pow+0x1be>
 8027e74:	9b06      	ldr	r3, [sp, #24]
 8027e76:	9600      	str	r6, [sp, #0]
 8027e78:	9701      	str	r7, [sp, #4]
 8027e7a:	2b00      	cmp	r3, #0
 8027e7c:	da2d      	bge.n	8027eda <__ieee754_pow+0x1b6>
 8027e7e:	0032      	movs	r2, r6
 8027e80:	003b      	movs	r3, r7
 8027e82:	2000      	movs	r0, #0
 8027e84:	4955      	ldr	r1, [pc, #340]	@ (8027fdc <__ieee754_pow+0x2b8>)
 8027e86:	f7d9 ff95 	bl	8001db4 <__aeabi_ddiv>
 8027e8a:	e773      	b.n	8027d74 <__ieee754_pow+0x50>
 8027e8c:	2502      	movs	r5, #2
 8027e8e:	2b00      	cmp	r3, #0
 8027e90:	d1ae      	bne.n	8027df0 <__ieee754_pow+0xcc>
 8027e92:	9b04      	ldr	r3, [sp, #16]
 8027e94:	4a4c      	ldr	r2, [pc, #304]	@ (8027fc8 <__ieee754_pow+0x2a4>)
 8027e96:	4293      	cmp	r3, r2
 8027e98:	d1e8      	bne.n	8027e6c <__ieee754_pow+0x148>
 8027e9a:	4b4c      	ldr	r3, [pc, #304]	@ (8027fcc <__ieee754_pow+0x2a8>)
 8027e9c:	18e3      	adds	r3, r4, r3
 8027e9e:	4333      	orrs	r3, r6
 8027ea0:	d101      	bne.n	8027ea6 <__ieee754_pow+0x182>
 8027ea2:	f000 fc3b 	bl	802871c <__ieee754_pow+0x9f8>
 8027ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8027fd4 <__ieee754_pow+0x2b0>)
 8027ea8:	429c      	cmp	r4, r3
 8027eaa:	d909      	bls.n	8027ec0 <__ieee754_pow+0x19c>
 8027eac:	9b06      	ldr	r3, [sp, #24]
 8027eae:	2b00      	cmp	r3, #0
 8027eb0:	da01      	bge.n	8027eb6 <__ieee754_pow+0x192>
 8027eb2:	f000 fc37 	bl	8028724 <__ieee754_pow+0xa00>
 8027eb6:	9b02      	ldr	r3, [sp, #8]
 8027eb8:	9c03      	ldr	r4, [sp, #12]
 8027eba:	9300      	str	r3, [sp, #0]
 8027ebc:	9401      	str	r4, [sp, #4]
 8027ebe:	e00c      	b.n	8027eda <__ieee754_pow+0x1b6>
 8027ec0:	9b06      	ldr	r3, [sp, #24]
 8027ec2:	2b00      	cmp	r3, #0
 8027ec4:	db01      	blt.n	8027eca <__ieee754_pow+0x1a6>
 8027ec6:	f000 fc2d 	bl	8028724 <__ieee754_pow+0xa00>
 8027eca:	2280      	movs	r2, #128	@ 0x80
 8027ecc:	0612      	lsls	r2, r2, #24
 8027ece:	4694      	mov	ip, r2
 8027ed0:	9b02      	ldr	r3, [sp, #8]
 8027ed2:	9300      	str	r3, [sp, #0]
 8027ed4:	9b03      	ldr	r3, [sp, #12]
 8027ed6:	4463      	add	r3, ip
 8027ed8:	9301      	str	r3, [sp, #4]
 8027eda:	9800      	ldr	r0, [sp, #0]
 8027edc:	9901      	ldr	r1, [sp, #4]
 8027ede:	b015      	add	sp, #84	@ 0x54
 8027ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027ee2:	2380      	movs	r3, #128	@ 0x80
 8027ee4:	9a06      	ldr	r2, [sp, #24]
 8027ee6:	05db      	lsls	r3, r3, #23
 8027ee8:	429a      	cmp	r2, r3
 8027eea:	d106      	bne.n	8027efa <__ieee754_pow+0x1d6>
 8027eec:	0032      	movs	r2, r6
 8027eee:	003b      	movs	r3, r7
 8027ef0:	0030      	movs	r0, r6
 8027ef2:	0039      	movs	r1, r7
 8027ef4:	f7da fba2 	bl	800263c <__aeabi_dmul>
 8027ef8:	e73c      	b.n	8027d74 <__ieee754_pow+0x50>
 8027efa:	4b39      	ldr	r3, [pc, #228]	@ (8027fe0 <__ieee754_pow+0x2bc>)
 8027efc:	9a06      	ldr	r2, [sp, #24]
 8027efe:	429a      	cmp	r2, r3
 8027f00:	d000      	beq.n	8027f04 <__ieee754_pow+0x1e0>
 8027f02:	e775      	b.n	8027df0 <__ieee754_pow+0xcc>
 8027f04:	9b08      	ldr	r3, [sp, #32]
 8027f06:	2b00      	cmp	r3, #0
 8027f08:	da00      	bge.n	8027f0c <__ieee754_pow+0x1e8>
 8027f0a:	e771      	b.n	8027df0 <__ieee754_pow+0xcc>
 8027f0c:	0030      	movs	r0, r6
 8027f0e:	0039      	movs	r1, r7
 8027f10:	f000 fde4 	bl	8028adc <__ieee754_sqrt>
 8027f14:	e72e      	b.n	8027d74 <__ieee754_pow+0x50>
 8027f16:	2d01      	cmp	r5, #1
 8027f18:	d1df      	bne.n	8027eda <__ieee754_pow+0x1b6>
 8027f1a:	9800      	ldr	r0, [sp, #0]
 8027f1c:	2180      	movs	r1, #128	@ 0x80
 8027f1e:	0002      	movs	r2, r0
 8027f20:	9801      	ldr	r0, [sp, #4]
 8027f22:	0609      	lsls	r1, r1, #24
 8027f24:	1843      	adds	r3, r0, r1
 8027f26:	9200      	str	r2, [sp, #0]
 8027f28:	9301      	str	r3, [sp, #4]
 8027f2a:	e7d6      	b.n	8027eda <__ieee754_pow+0x1b6>
 8027f2c:	0ffb      	lsrs	r3, r7, #31
 8027f2e:	3b01      	subs	r3, #1
 8027f30:	001a      	movs	r2, r3
 8027f32:	432a      	orrs	r2, r5
 8027f34:	d104      	bne.n	8027f40 <__ieee754_pow+0x21c>
 8027f36:	0032      	movs	r2, r6
 8027f38:	003b      	movs	r3, r7
 8027f3a:	0030      	movs	r0, r6
 8027f3c:	0039      	movs	r1, r7
 8027f3e:	e780      	b.n	8027e42 <__ieee754_pow+0x11e>
 8027f40:	3d01      	subs	r5, #1
 8027f42:	2200      	movs	r2, #0
 8027f44:	431d      	orrs	r5, r3
 8027f46:	d015      	beq.n	8027f74 <__ieee754_pow+0x250>
 8027f48:	4b24      	ldr	r3, [pc, #144]	@ (8027fdc <__ieee754_pow+0x2b8>)
 8027f4a:	9208      	str	r2, [sp, #32]
 8027f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8027f4e:	2384      	movs	r3, #132	@ 0x84
 8027f50:	9a04      	ldr	r2, [sp, #16]
 8027f52:	05db      	lsls	r3, r3, #23
 8027f54:	429a      	cmp	r2, r3
 8027f56:	d800      	bhi.n	8027f5a <__ieee754_pow+0x236>
 8027f58:	e102      	b.n	8028160 <__ieee754_pow+0x43c>
 8027f5a:	4b22      	ldr	r3, [pc, #136]	@ (8027fe4 <__ieee754_pow+0x2c0>)
 8027f5c:	429a      	cmp	r2, r3
 8027f5e:	d912      	bls.n	8027f86 <__ieee754_pow+0x262>
 8027f60:	4b1c      	ldr	r3, [pc, #112]	@ (8027fd4 <__ieee754_pow+0x2b0>)
 8027f62:	429c      	cmp	r4, r3
 8027f64:	d808      	bhi.n	8027f78 <__ieee754_pow+0x254>
 8027f66:	9b06      	ldr	r3, [sp, #24]
 8027f68:	2b00      	cmp	r3, #0
 8027f6a:	da08      	bge.n	8027f7e <__ieee754_pow+0x25a>
 8027f6c:	2000      	movs	r0, #0
 8027f6e:	f000 fd8b 	bl	8028a88 <__math_oflow>
 8027f72:	e6ff      	b.n	8027d74 <__ieee754_pow+0x50>
 8027f74:	4b1c      	ldr	r3, [pc, #112]	@ (8027fe8 <__ieee754_pow+0x2c4>)
 8027f76:	e7e8      	b.n	8027f4a <__ieee754_pow+0x226>
 8027f78:	9b06      	ldr	r3, [sp, #24]
 8027f7a:	2b00      	cmp	r3, #0
 8027f7c:	dcf6      	bgt.n	8027f6c <__ieee754_pow+0x248>
 8027f7e:	2000      	movs	r0, #0
 8027f80:	f000 fd7b 	bl	8028a7a <__math_uflow>
 8027f84:	e6f6      	b.n	8027d74 <__ieee754_pow+0x50>
 8027f86:	4b19      	ldr	r3, [pc, #100]	@ (8027fec <__ieee754_pow+0x2c8>)
 8027f88:	429c      	cmp	r4, r3
 8027f8a:	d80b      	bhi.n	8027fa4 <__ieee754_pow+0x280>
 8027f8c:	9808      	ldr	r0, [sp, #32]
 8027f8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027f90:	2300      	movs	r3, #0
 8027f92:	2200      	movs	r2, #0
 8027f94:	f7d8 fa92 	bl	80004bc <__aeabi_dcmplt>
 8027f98:	1e43      	subs	r3, r0, #1
 8027f9a:	4198      	sbcs	r0, r3
 8027f9c:	9b06      	ldr	r3, [sp, #24]
 8027f9e:	2b00      	cmp	r3, #0
 8027fa0:	daee      	bge.n	8027f80 <__ieee754_pow+0x25c>
 8027fa2:	e7e4      	b.n	8027f6e <__ieee754_pow+0x24a>
 8027fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8027fdc <__ieee754_pow+0x2b8>)
 8027fa6:	2200      	movs	r2, #0
 8027fa8:	429c      	cmp	r4, r3
 8027faa:	d921      	bls.n	8027ff0 <__ieee754_pow+0x2cc>
 8027fac:	9808      	ldr	r0, [sp, #32]
 8027fae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027fb0:	2300      	movs	r3, #0
 8027fb2:	f7d8 fa83 	bl	80004bc <__aeabi_dcmplt>
 8027fb6:	1e43      	subs	r3, r0, #1
 8027fb8:	4198      	sbcs	r0, r3
 8027fba:	9b06      	ldr	r3, [sp, #24]
 8027fbc:	2b00      	cmp	r3, #0
 8027fbe:	dcd6      	bgt.n	8027f6e <__ieee754_pow+0x24a>
 8027fc0:	e7de      	b.n	8027f80 <__ieee754_pow+0x25c>
 8027fc2:	46c0      	nop			@ (mov r8, r8)
 8027fc4:	fff00000 	.word	0xfff00000
 8027fc8:	7ff00000 	.word	0x7ff00000
 8027fcc:	c0100000 	.word	0xc0100000
 8027fd0:	433fffff 	.word	0x433fffff
 8027fd4:	3fefffff 	.word	0x3fefffff
 8027fd8:	fffffc01 	.word	0xfffffc01
 8027fdc:	3ff00000 	.word	0x3ff00000
 8027fe0:	3fe00000 	.word	0x3fe00000
 8027fe4:	43f00000 	.word	0x43f00000
 8027fe8:	bff00000 	.word	0xbff00000
 8027fec:	3feffffe 	.word	0x3feffffe
 8027ff0:	9800      	ldr	r0, [sp, #0]
 8027ff2:	9901      	ldr	r1, [sp, #4]
 8027ff4:	4b4f      	ldr	r3, [pc, #316]	@ (8028134 <__ieee754_pow+0x410>)
 8027ff6:	f7da fde9 	bl	8002bcc <__aeabi_dsub>
 8027ffa:	22c0      	movs	r2, #192	@ 0xc0
 8027ffc:	4b4e      	ldr	r3, [pc, #312]	@ (8028138 <__ieee754_pow+0x414>)
 8027ffe:	05d2      	lsls	r2, r2, #23
 8028000:	0006      	movs	r6, r0
 8028002:	000f      	movs	r7, r1
 8028004:	f7da fb1a 	bl	800263c <__aeabi_dmul>
 8028008:	4a4c      	ldr	r2, [pc, #304]	@ (802813c <__ieee754_pow+0x418>)
 802800a:	9004      	str	r0, [sp, #16]
 802800c:	9105      	str	r1, [sp, #20]
 802800e:	4b4c      	ldr	r3, [pc, #304]	@ (8028140 <__ieee754_pow+0x41c>)
 8028010:	0030      	movs	r0, r6
 8028012:	0039      	movs	r1, r7
 8028014:	f7da fb12 	bl	800263c <__aeabi_dmul>
 8028018:	2200      	movs	r2, #0
 802801a:	9000      	str	r0, [sp, #0]
 802801c:	9101      	str	r1, [sp, #4]
 802801e:	4b49      	ldr	r3, [pc, #292]	@ (8028144 <__ieee754_pow+0x420>)
 8028020:	0030      	movs	r0, r6
 8028022:	0039      	movs	r1, r7
 8028024:	f7da fb0a 	bl	800263c <__aeabi_dmul>
 8028028:	0002      	movs	r2, r0
 802802a:	000b      	movs	r3, r1
 802802c:	4846      	ldr	r0, [pc, #280]	@ (8028148 <__ieee754_pow+0x424>)
 802802e:	4947      	ldr	r1, [pc, #284]	@ (802814c <__ieee754_pow+0x428>)
 8028030:	f7da fdcc 	bl	8002bcc <__aeabi_dsub>
 8028034:	0032      	movs	r2, r6
 8028036:	003b      	movs	r3, r7
 8028038:	f7da fb00 	bl	800263c <__aeabi_dmul>
 802803c:	0002      	movs	r2, r0
 802803e:	000b      	movs	r3, r1
 8028040:	2000      	movs	r0, #0
 8028042:	4943      	ldr	r1, [pc, #268]	@ (8028150 <__ieee754_pow+0x42c>)
 8028044:	f7da fdc2 	bl	8002bcc <__aeabi_dsub>
 8028048:	0032      	movs	r2, r6
 802804a:	0004      	movs	r4, r0
 802804c:	000d      	movs	r5, r1
 802804e:	003b      	movs	r3, r7
 8028050:	0030      	movs	r0, r6
 8028052:	0039      	movs	r1, r7
 8028054:	f7da faf2 	bl	800263c <__aeabi_dmul>
 8028058:	0002      	movs	r2, r0
 802805a:	000b      	movs	r3, r1
 802805c:	0020      	movs	r0, r4
 802805e:	0029      	movs	r1, r5
 8028060:	f7da faec 	bl	800263c <__aeabi_dmul>
 8028064:	4a3b      	ldr	r2, [pc, #236]	@ (8028154 <__ieee754_pow+0x430>)
 8028066:	4b34      	ldr	r3, [pc, #208]	@ (8028138 <__ieee754_pow+0x414>)
 8028068:	f7da fae8 	bl	800263c <__aeabi_dmul>
 802806c:	0002      	movs	r2, r0
 802806e:	000b      	movs	r3, r1
 8028070:	9800      	ldr	r0, [sp, #0]
 8028072:	9901      	ldr	r1, [sp, #4]
 8028074:	f7da fdaa 	bl	8002bcc <__aeabi_dsub>
 8028078:	0002      	movs	r2, r0
 802807a:	000b      	movs	r3, r1
 802807c:	0004      	movs	r4, r0
 802807e:	000d      	movs	r5, r1
 8028080:	9804      	ldr	r0, [sp, #16]
 8028082:	9905      	ldr	r1, [sp, #20]
 8028084:	f7d9 fb32 	bl	80016ec <__aeabi_dadd>
 8028088:	9a04      	ldr	r2, [sp, #16]
 802808a:	9b05      	ldr	r3, [sp, #20]
 802808c:	2000      	movs	r0, #0
 802808e:	9000      	str	r0, [sp, #0]
 8028090:	9101      	str	r1, [sp, #4]
 8028092:	f7da fd9b 	bl	8002bcc <__aeabi_dsub>
 8028096:	0002      	movs	r2, r0
 8028098:	000b      	movs	r3, r1
 802809a:	0020      	movs	r0, r4
 802809c:	0029      	movs	r1, r5
 802809e:	f7da fd95 	bl	8002bcc <__aeabi_dsub>
 80280a2:	9b02      	ldr	r3, [sp, #8]
 80280a4:	9c03      	ldr	r4, [sp, #12]
 80280a6:	9304      	str	r3, [sp, #16]
 80280a8:	9405      	str	r4, [sp, #20]
 80280aa:	2300      	movs	r3, #0
 80280ac:	9304      	str	r3, [sp, #16]
 80280ae:	9c04      	ldr	r4, [sp, #16]
 80280b0:	9d05      	ldr	r5, [sp, #20]
 80280b2:	0006      	movs	r6, r0
 80280b4:	000f      	movs	r7, r1
 80280b6:	9802      	ldr	r0, [sp, #8]
 80280b8:	9903      	ldr	r1, [sp, #12]
 80280ba:	0022      	movs	r2, r4
 80280bc:	002b      	movs	r3, r5
 80280be:	f7da fd85 	bl	8002bcc <__aeabi_dsub>
 80280c2:	9a00      	ldr	r2, [sp, #0]
 80280c4:	9b01      	ldr	r3, [sp, #4]
 80280c6:	f7da fab9 	bl	800263c <__aeabi_dmul>
 80280ca:	9a02      	ldr	r2, [sp, #8]
 80280cc:	9b03      	ldr	r3, [sp, #12]
 80280ce:	9006      	str	r0, [sp, #24]
 80280d0:	9107      	str	r1, [sp, #28]
 80280d2:	0030      	movs	r0, r6
 80280d4:	0039      	movs	r1, r7
 80280d6:	f7da fab1 	bl	800263c <__aeabi_dmul>
 80280da:	0002      	movs	r2, r0
 80280dc:	000b      	movs	r3, r1
 80280de:	9806      	ldr	r0, [sp, #24]
 80280e0:	9907      	ldr	r1, [sp, #28]
 80280e2:	f7d9 fb03 	bl	80016ec <__aeabi_dadd>
 80280e6:	0022      	movs	r2, r4
 80280e8:	002b      	movs	r3, r5
 80280ea:	9002      	str	r0, [sp, #8]
 80280ec:	9103      	str	r1, [sp, #12]
 80280ee:	9800      	ldr	r0, [sp, #0]
 80280f0:	9901      	ldr	r1, [sp, #4]
 80280f2:	f7da faa3 	bl	800263c <__aeabi_dmul>
 80280f6:	000b      	movs	r3, r1
 80280f8:	0002      	movs	r2, r0
 80280fa:	0006      	movs	r6, r0
 80280fc:	000f      	movs	r7, r1
 80280fe:	9802      	ldr	r0, [sp, #8]
 8028100:	9903      	ldr	r1, [sp, #12]
 8028102:	f7d9 faf3 	bl	80016ec <__aeabi_dadd>
 8028106:	9000      	str	r0, [sp, #0]
 8028108:	9101      	str	r1, [sp, #4]
 802810a:	9c01      	ldr	r4, [sp, #4]
 802810c:	4b12      	ldr	r3, [pc, #72]	@ (8028158 <__ieee754_pow+0x434>)
 802810e:	9406      	str	r4, [sp, #24]
 8028110:	429c      	cmp	r4, r3
 8028112:	dc00      	bgt.n	8028116 <__ieee754_pow+0x3f2>
 8028114:	e222      	b.n	802855c <__ieee754_pow+0x838>
 8028116:	4a11      	ldr	r2, [pc, #68]	@ (802815c <__ieee754_pow+0x438>)
 8028118:	18a3      	adds	r3, r4, r2
 802811a:	9a00      	ldr	r2, [sp, #0]
 802811c:	4313      	orrs	r3, r2
 802811e:	d100      	bne.n	8028122 <__ieee754_pow+0x3fe>
 8028120:	e1a0      	b.n	8028464 <__ieee754_pow+0x740>
 8028122:	9808      	ldr	r0, [sp, #32]
 8028124:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028126:	2300      	movs	r3, #0
 8028128:	2200      	movs	r2, #0
 802812a:	f7d8 f9c7 	bl	80004bc <__aeabi_dcmplt>
 802812e:	1e43      	subs	r3, r0, #1
 8028130:	4198      	sbcs	r0, r3
 8028132:	e71c      	b.n	8027f6e <__ieee754_pow+0x24a>
 8028134:	3ff00000 	.word	0x3ff00000
 8028138:	3ff71547 	.word	0x3ff71547
 802813c:	f85ddf44 	.word	0xf85ddf44
 8028140:	3e54ae0b 	.word	0x3e54ae0b
 8028144:	3fd00000 	.word	0x3fd00000
 8028148:	55555555 	.word	0x55555555
 802814c:	3fd55555 	.word	0x3fd55555
 8028150:	3fe00000 	.word	0x3fe00000
 8028154:	652b82fe 	.word	0x652b82fe
 8028158:	408fffff 	.word	0x408fffff
 802815c:	bf700000 	.word	0xbf700000
 8028160:	4be0      	ldr	r3, [pc, #896]	@ (80284e4 <__ieee754_pow+0x7c0>)
 8028162:	2200      	movs	r2, #0
 8028164:	423b      	tst	r3, r7
 8028166:	d10b      	bne.n	8028180 <__ieee754_pow+0x45c>
 8028168:	9800      	ldr	r0, [sp, #0]
 802816a:	9901      	ldr	r1, [sp, #4]
 802816c:	2200      	movs	r2, #0
 802816e:	4bde      	ldr	r3, [pc, #888]	@ (80284e8 <__ieee754_pow+0x7c4>)
 8028170:	f7da fa64 	bl	800263c <__aeabi_dmul>
 8028174:	2235      	movs	r2, #53	@ 0x35
 8028176:	9000      	str	r0, [sp, #0]
 8028178:	9101      	str	r1, [sp, #4]
 802817a:	9b01      	ldr	r3, [sp, #4]
 802817c:	4252      	negs	r2, r2
 802817e:	930a      	str	r3, [sp, #40]	@ 0x28
 8028180:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028182:	49da      	ldr	r1, [pc, #872]	@ (80284ec <__ieee754_pow+0x7c8>)
 8028184:	151b      	asrs	r3, r3, #20
 8028186:	185b      	adds	r3, r3, r1
 8028188:	189b      	adds	r3, r3, r2
 802818a:	930e      	str	r3, [sp, #56]	@ 0x38
 802818c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802818e:	4dd8      	ldr	r5, [pc, #864]	@ (80284f0 <__ieee754_pow+0x7cc>)
 8028190:	031b      	lsls	r3, r3, #12
 8028192:	4ad8      	ldr	r2, [pc, #864]	@ (80284f4 <__ieee754_pow+0x7d0>)
 8028194:	0b1b      	lsrs	r3, r3, #12
 8028196:	2600      	movs	r6, #0
 8028198:	431d      	orrs	r5, r3
 802819a:	4293      	cmp	r3, r2
 802819c:	dd09      	ble.n	80281b2 <__ieee754_pow+0x48e>
 802819e:	4ad6      	ldr	r2, [pc, #856]	@ (80284f8 <__ieee754_pow+0x7d4>)
 80281a0:	3601      	adds	r6, #1
 80281a2:	4293      	cmp	r3, r2
 80281a4:	dd05      	ble.n	80281b2 <__ieee754_pow+0x48e>
 80281a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80281a8:	199b      	adds	r3, r3, r6
 80281aa:	2600      	movs	r6, #0
 80281ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80281ae:	4bd3      	ldr	r3, [pc, #844]	@ (80284fc <__ieee754_pow+0x7d8>)
 80281b0:	18ed      	adds	r5, r5, r3
 80281b2:	9800      	ldr	r0, [sp, #0]
 80281b4:	9901      	ldr	r1, [sp, #4]
 80281b6:	0029      	movs	r1, r5
 80281b8:	4bd1      	ldr	r3, [pc, #836]	@ (8028500 <__ieee754_pow+0x7dc>)
 80281ba:	00f2      	lsls	r2, r6, #3
 80281bc:	189b      	adds	r3, r3, r2
 80281be:	685c      	ldr	r4, [r3, #4]
 80281c0:	681b      	ldr	r3, [r3, #0]
 80281c2:	920f      	str	r2, [sp, #60]	@ 0x3c
 80281c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80281c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80281c8:	001a      	movs	r2, r3
 80281ca:	0023      	movs	r3, r4
 80281cc:	900c      	str	r0, [sp, #48]	@ 0x30
 80281ce:	910d      	str	r1, [sp, #52]	@ 0x34
 80281d0:	f7da fcfc 	bl	8002bcc <__aeabi_dsub>
 80281d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80281d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80281d8:	9010      	str	r0, [sp, #64]	@ 0x40
 80281da:	9111      	str	r1, [sp, #68]	@ 0x44
 80281dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80281de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80281e0:	f7d9 fa84 	bl	80016ec <__aeabi_dadd>
 80281e4:	0002      	movs	r2, r0
 80281e6:	000b      	movs	r3, r1
 80281e8:	2000      	movs	r0, #0
 80281ea:	49c1      	ldr	r1, [pc, #772]	@ (80284f0 <__ieee754_pow+0x7cc>)
 80281ec:	f7d9 fde2 	bl	8001db4 <__aeabi_ddiv>
 80281f0:	0002      	movs	r2, r0
 80281f2:	000b      	movs	r3, r1
 80281f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80281f6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80281f8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80281fa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80281fc:	f7da fa1e 	bl	800263c <__aeabi_dmul>
 8028200:	9006      	str	r0, [sp, #24]
 8028202:	9107      	str	r1, [sp, #28]
 8028204:	9b06      	ldr	r3, [sp, #24]
 8028206:	9c07      	ldr	r4, [sp, #28]
 8028208:	2180      	movs	r1, #128	@ 0x80
 802820a:	9304      	str	r3, [sp, #16]
 802820c:	9405      	str	r4, [sp, #20]
 802820e:	2080      	movs	r0, #128	@ 0x80
 8028210:	2300      	movs	r3, #0
 8028212:	2200      	movs	r2, #0
 8028214:	106d      	asrs	r5, r5, #1
 8028216:	0589      	lsls	r1, r1, #22
 8028218:	9304      	str	r3, [sp, #16]
 802821a:	4329      	orrs	r1, r5
 802821c:	0300      	lsls	r0, r0, #12
 802821e:	9b04      	ldr	r3, [sp, #16]
 8028220:	9c05      	ldr	r4, [sp, #20]
 8028222:	1809      	adds	r1, r1, r0
 8028224:	9300      	str	r3, [sp, #0]
 8028226:	9401      	str	r4, [sp, #4]
 8028228:	04b6      	lsls	r6, r6, #18
 802822a:	198b      	adds	r3, r1, r6
 802822c:	9800      	ldr	r0, [sp, #0]
 802822e:	9901      	ldr	r1, [sp, #4]
 8028230:	0014      	movs	r4, r2
 8028232:	001d      	movs	r5, r3
 8028234:	f7da fa02 	bl	800263c <__aeabi_dmul>
 8028238:	0002      	movs	r2, r0
 802823a:	000b      	movs	r3, r1
 802823c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802823e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8028240:	f7da fcc4 	bl	8002bcc <__aeabi_dsub>
 8028244:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028248:	0006      	movs	r6, r0
 802824a:	000f      	movs	r7, r1
 802824c:	0020      	movs	r0, r4
 802824e:	0029      	movs	r1, r5
 8028250:	f7da fcbc 	bl	8002bcc <__aeabi_dsub>
 8028254:	0002      	movs	r2, r0
 8028256:	000b      	movs	r3, r1
 8028258:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802825a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802825c:	f7da fcb6 	bl	8002bcc <__aeabi_dsub>
 8028260:	9a00      	ldr	r2, [sp, #0]
 8028262:	9b01      	ldr	r3, [sp, #4]
 8028264:	f7da f9ea 	bl	800263c <__aeabi_dmul>
 8028268:	0002      	movs	r2, r0
 802826a:	000b      	movs	r3, r1
 802826c:	0030      	movs	r0, r6
 802826e:	0039      	movs	r1, r7
 8028270:	f7da fcac 	bl	8002bcc <__aeabi_dsub>
 8028274:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8028276:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8028278:	f7da f9e0 	bl	800263c <__aeabi_dmul>
 802827c:	9a06      	ldr	r2, [sp, #24]
 802827e:	9b07      	ldr	r3, [sp, #28]
 8028280:	900a      	str	r0, [sp, #40]	@ 0x28
 8028282:	910b      	str	r1, [sp, #44]	@ 0x2c
 8028284:	0010      	movs	r0, r2
 8028286:	0019      	movs	r1, r3
 8028288:	f7da f9d8 	bl	800263c <__aeabi_dmul>
 802828c:	0006      	movs	r6, r0
 802828e:	000f      	movs	r7, r1
 8028290:	4a9c      	ldr	r2, [pc, #624]	@ (8028504 <__ieee754_pow+0x7e0>)
 8028292:	4b9d      	ldr	r3, [pc, #628]	@ (8028508 <__ieee754_pow+0x7e4>)
 8028294:	f7da f9d2 	bl	800263c <__aeabi_dmul>
 8028298:	4a9c      	ldr	r2, [pc, #624]	@ (802850c <__ieee754_pow+0x7e8>)
 802829a:	4b9d      	ldr	r3, [pc, #628]	@ (8028510 <__ieee754_pow+0x7ec>)
 802829c:	f7d9 fa26 	bl	80016ec <__aeabi_dadd>
 80282a0:	0032      	movs	r2, r6
 80282a2:	003b      	movs	r3, r7
 80282a4:	f7da f9ca 	bl	800263c <__aeabi_dmul>
 80282a8:	4a9a      	ldr	r2, [pc, #616]	@ (8028514 <__ieee754_pow+0x7f0>)
 80282aa:	4b9b      	ldr	r3, [pc, #620]	@ (8028518 <__ieee754_pow+0x7f4>)
 80282ac:	f7d9 fa1e 	bl	80016ec <__aeabi_dadd>
 80282b0:	0032      	movs	r2, r6
 80282b2:	003b      	movs	r3, r7
 80282b4:	f7da f9c2 	bl	800263c <__aeabi_dmul>
 80282b8:	4a98      	ldr	r2, [pc, #608]	@ (802851c <__ieee754_pow+0x7f8>)
 80282ba:	4b99      	ldr	r3, [pc, #612]	@ (8028520 <__ieee754_pow+0x7fc>)
 80282bc:	f7d9 fa16 	bl	80016ec <__aeabi_dadd>
 80282c0:	0032      	movs	r2, r6
 80282c2:	003b      	movs	r3, r7
 80282c4:	f7da f9ba 	bl	800263c <__aeabi_dmul>
 80282c8:	4a96      	ldr	r2, [pc, #600]	@ (8028524 <__ieee754_pow+0x800>)
 80282ca:	4b97      	ldr	r3, [pc, #604]	@ (8028528 <__ieee754_pow+0x804>)
 80282cc:	f7d9 fa0e 	bl	80016ec <__aeabi_dadd>
 80282d0:	0032      	movs	r2, r6
 80282d2:	003b      	movs	r3, r7
 80282d4:	f7da f9b2 	bl	800263c <__aeabi_dmul>
 80282d8:	4a94      	ldr	r2, [pc, #592]	@ (802852c <__ieee754_pow+0x808>)
 80282da:	4b95      	ldr	r3, [pc, #596]	@ (8028530 <__ieee754_pow+0x80c>)
 80282dc:	f7d9 fa06 	bl	80016ec <__aeabi_dadd>
 80282e0:	0032      	movs	r2, r6
 80282e2:	0004      	movs	r4, r0
 80282e4:	000d      	movs	r5, r1
 80282e6:	003b      	movs	r3, r7
 80282e8:	0030      	movs	r0, r6
 80282ea:	0039      	movs	r1, r7
 80282ec:	f7da f9a6 	bl	800263c <__aeabi_dmul>
 80282f0:	0002      	movs	r2, r0
 80282f2:	000b      	movs	r3, r1
 80282f4:	0020      	movs	r0, r4
 80282f6:	0029      	movs	r1, r5
 80282f8:	f7da f9a0 	bl	800263c <__aeabi_dmul>
 80282fc:	9a00      	ldr	r2, [sp, #0]
 80282fe:	9b01      	ldr	r3, [sp, #4]
 8028300:	0004      	movs	r4, r0
 8028302:	000d      	movs	r5, r1
 8028304:	9806      	ldr	r0, [sp, #24]
 8028306:	9907      	ldr	r1, [sp, #28]
 8028308:	f7d9 f9f0 	bl	80016ec <__aeabi_dadd>
 802830c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802830e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028310:	f7da f994 	bl	800263c <__aeabi_dmul>
 8028314:	0022      	movs	r2, r4
 8028316:	002b      	movs	r3, r5
 8028318:	f7d9 f9e8 	bl	80016ec <__aeabi_dadd>
 802831c:	9a00      	ldr	r2, [sp, #0]
 802831e:	9b01      	ldr	r3, [sp, #4]
 8028320:	900c      	str	r0, [sp, #48]	@ 0x30
 8028322:	910d      	str	r1, [sp, #52]	@ 0x34
 8028324:	0010      	movs	r0, r2
 8028326:	0019      	movs	r1, r3
 8028328:	f7da f988 	bl	800263c <__aeabi_dmul>
 802832c:	2200      	movs	r2, #0
 802832e:	4b81      	ldr	r3, [pc, #516]	@ (8028534 <__ieee754_pow+0x810>)
 8028330:	0004      	movs	r4, r0
 8028332:	000d      	movs	r5, r1
 8028334:	f7d9 f9da 	bl	80016ec <__aeabi_dadd>
 8028338:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802833a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802833c:	f7d9 f9d6 	bl	80016ec <__aeabi_dadd>
 8028340:	2000      	movs	r0, #0
 8028342:	000f      	movs	r7, r1
 8028344:	0006      	movs	r6, r0
 8028346:	0002      	movs	r2, r0
 8028348:	000b      	movs	r3, r1
 802834a:	9800      	ldr	r0, [sp, #0]
 802834c:	9901      	ldr	r1, [sp, #4]
 802834e:	f7da f975 	bl	800263c <__aeabi_dmul>
 8028352:	2200      	movs	r2, #0
 8028354:	9000      	str	r0, [sp, #0]
 8028356:	9101      	str	r1, [sp, #4]
 8028358:	4b76      	ldr	r3, [pc, #472]	@ (8028534 <__ieee754_pow+0x810>)
 802835a:	0030      	movs	r0, r6
 802835c:	0039      	movs	r1, r7
 802835e:	f7da fc35 	bl	8002bcc <__aeabi_dsub>
 8028362:	0022      	movs	r2, r4
 8028364:	002b      	movs	r3, r5
 8028366:	f7da fc31 	bl	8002bcc <__aeabi_dsub>
 802836a:	0002      	movs	r2, r0
 802836c:	000b      	movs	r3, r1
 802836e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028370:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8028372:	f7da fc2b 	bl	8002bcc <__aeabi_dsub>
 8028376:	9a06      	ldr	r2, [sp, #24]
 8028378:	9b07      	ldr	r3, [sp, #28]
 802837a:	f7da f95f 	bl	800263c <__aeabi_dmul>
 802837e:	0032      	movs	r2, r6
 8028380:	0004      	movs	r4, r0
 8028382:	000d      	movs	r5, r1
 8028384:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8028386:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028388:	003b      	movs	r3, r7
 802838a:	f7da f957 	bl	800263c <__aeabi_dmul>
 802838e:	0002      	movs	r2, r0
 8028390:	000b      	movs	r3, r1
 8028392:	0020      	movs	r0, r4
 8028394:	0029      	movs	r1, r5
 8028396:	f7d9 f9a9 	bl	80016ec <__aeabi_dadd>
 802839a:	0004      	movs	r4, r0
 802839c:	000d      	movs	r5, r1
 802839e:	0002      	movs	r2, r0
 80283a0:	000b      	movs	r3, r1
 80283a2:	9800      	ldr	r0, [sp, #0]
 80283a4:	9901      	ldr	r1, [sp, #4]
 80283a6:	f7d9 f9a1 	bl	80016ec <__aeabi_dadd>
 80283aa:	22e0      	movs	r2, #224	@ 0xe0
 80283ac:	2000      	movs	r0, #0
 80283ae:	4b62      	ldr	r3, [pc, #392]	@ (8028538 <__ieee754_pow+0x814>)
 80283b0:	0612      	lsls	r2, r2, #24
 80283b2:	0006      	movs	r6, r0
 80283b4:	000f      	movs	r7, r1
 80283b6:	f7da f941 	bl	800263c <__aeabi_dmul>
 80283ba:	9006      	str	r0, [sp, #24]
 80283bc:	9107      	str	r1, [sp, #28]
 80283be:	9a00      	ldr	r2, [sp, #0]
 80283c0:	9b01      	ldr	r3, [sp, #4]
 80283c2:	0030      	movs	r0, r6
 80283c4:	0039      	movs	r1, r7
 80283c6:	f7da fc01 	bl	8002bcc <__aeabi_dsub>
 80283ca:	0002      	movs	r2, r0
 80283cc:	000b      	movs	r3, r1
 80283ce:	0020      	movs	r0, r4
 80283d0:	0029      	movs	r1, r5
 80283d2:	f7da fbfb 	bl	8002bcc <__aeabi_dsub>
 80283d6:	4a59      	ldr	r2, [pc, #356]	@ (802853c <__ieee754_pow+0x818>)
 80283d8:	4b57      	ldr	r3, [pc, #348]	@ (8028538 <__ieee754_pow+0x814>)
 80283da:	f7da f92f 	bl	800263c <__aeabi_dmul>
 80283de:	4a58      	ldr	r2, [pc, #352]	@ (8028540 <__ieee754_pow+0x81c>)
 80283e0:	0004      	movs	r4, r0
 80283e2:	000d      	movs	r5, r1
 80283e4:	0030      	movs	r0, r6
 80283e6:	0039      	movs	r1, r7
 80283e8:	4b56      	ldr	r3, [pc, #344]	@ (8028544 <__ieee754_pow+0x820>)
 80283ea:	f7da f927 	bl	800263c <__aeabi_dmul>
 80283ee:	0002      	movs	r2, r0
 80283f0:	000b      	movs	r3, r1
 80283f2:	0020      	movs	r0, r4
 80283f4:	0029      	movs	r1, r5
 80283f6:	f7d9 f979 	bl	80016ec <__aeabi_dadd>
 80283fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80283fc:	4b52      	ldr	r3, [pc, #328]	@ (8028548 <__ieee754_pow+0x824>)
 80283fe:	189b      	adds	r3, r3, r2
 8028400:	681a      	ldr	r2, [r3, #0]
 8028402:	685b      	ldr	r3, [r3, #4]
 8028404:	f7d9 f972 	bl	80016ec <__aeabi_dadd>
 8028408:	900a      	str	r0, [sp, #40]	@ 0x28
 802840a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802840c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802840e:	f7da ffd7 	bl	80033c0 <__aeabi_i2d>
 8028412:	0004      	movs	r4, r0
 8028414:	000d      	movs	r5, r1
 8028416:	9806      	ldr	r0, [sp, #24]
 8028418:	9907      	ldr	r1, [sp, #28]
 802841a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802841c:	4b4b      	ldr	r3, [pc, #300]	@ (802854c <__ieee754_pow+0x828>)
 802841e:	189b      	adds	r3, r3, r2
 8028420:	681e      	ldr	r6, [r3, #0]
 8028422:	685f      	ldr	r7, [r3, #4]
 8028424:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028428:	f7d9 f960 	bl	80016ec <__aeabi_dadd>
 802842c:	0032      	movs	r2, r6
 802842e:	003b      	movs	r3, r7
 8028430:	f7d9 f95c 	bl	80016ec <__aeabi_dadd>
 8028434:	0022      	movs	r2, r4
 8028436:	002b      	movs	r3, r5
 8028438:	f7d9 f958 	bl	80016ec <__aeabi_dadd>
 802843c:	2000      	movs	r0, #0
 802843e:	0022      	movs	r2, r4
 8028440:	002b      	movs	r3, r5
 8028442:	9000      	str	r0, [sp, #0]
 8028444:	9101      	str	r1, [sp, #4]
 8028446:	f7da fbc1 	bl	8002bcc <__aeabi_dsub>
 802844a:	0032      	movs	r2, r6
 802844c:	003b      	movs	r3, r7
 802844e:	f7da fbbd 	bl	8002bcc <__aeabi_dsub>
 8028452:	9a06      	ldr	r2, [sp, #24]
 8028454:	9b07      	ldr	r3, [sp, #28]
 8028456:	f7da fbb9 	bl	8002bcc <__aeabi_dsub>
 802845a:	0002      	movs	r2, r0
 802845c:	000b      	movs	r3, r1
 802845e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8028460:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028462:	e61c      	b.n	802809e <__ieee754_pow+0x37a>
 8028464:	4a3a      	ldr	r2, [pc, #232]	@ (8028550 <__ieee754_pow+0x82c>)
 8028466:	4b3b      	ldr	r3, [pc, #236]	@ (8028554 <__ieee754_pow+0x830>)
 8028468:	9802      	ldr	r0, [sp, #8]
 802846a:	9903      	ldr	r1, [sp, #12]
 802846c:	f7d9 f93e 	bl	80016ec <__aeabi_dadd>
 8028470:	0032      	movs	r2, r6
 8028472:	003b      	movs	r3, r7
 8028474:	9004      	str	r0, [sp, #16]
 8028476:	9105      	str	r1, [sp, #20]
 8028478:	9800      	ldr	r0, [sp, #0]
 802847a:	9901      	ldr	r1, [sp, #4]
 802847c:	f7da fba6 	bl	8002bcc <__aeabi_dsub>
 8028480:	0002      	movs	r2, r0
 8028482:	000b      	movs	r3, r1
 8028484:	9804      	ldr	r0, [sp, #16]
 8028486:	9905      	ldr	r1, [sp, #20]
 8028488:	f7d8 f82c 	bl	80004e4 <__aeabi_dcmpgt>
 802848c:	2800      	cmp	r0, #0
 802848e:	d000      	beq.n	8028492 <__ieee754_pow+0x76e>
 8028490:	e647      	b.n	8028122 <__ieee754_pow+0x3fe>
 8028492:	2580      	movs	r5, #128	@ 0x80
 8028494:	4b30      	ldr	r3, [pc, #192]	@ (8028558 <__ieee754_pow+0x834>)
 8028496:	036d      	lsls	r5, r5, #13
 8028498:	1524      	asrs	r4, r4, #20
 802849a:	18e4      	adds	r4, r4, r3
 802849c:	002b      	movs	r3, r5
 802849e:	4123      	asrs	r3, r4
 80284a0:	9a06      	ldr	r2, [sp, #24]
 80284a2:	4912      	ldr	r1, [pc, #72]	@ (80284ec <__ieee754_pow+0x7c8>)
 80284a4:	189b      	adds	r3, r3, r2
 80284a6:	005a      	lsls	r2, r3, #1
 80284a8:	4c14      	ldr	r4, [pc, #80]	@ (80284fc <__ieee754_pow+0x7d8>)
 80284aa:	0d52      	lsrs	r2, r2, #21
 80284ac:	1852      	adds	r2, r2, r1
 80284ae:	4114      	asrs	r4, r2
 80284b0:	401c      	ands	r4, r3
 80284b2:	0021      	movs	r1, r4
 80284b4:	2414      	movs	r4, #20
 80284b6:	031b      	lsls	r3, r3, #12
 80284b8:	0b1b      	lsrs	r3, r3, #12
 80284ba:	432b      	orrs	r3, r5
 80284bc:	1aa2      	subs	r2, r4, r2
 80284be:	4113      	asrs	r3, r2
 80284c0:	9300      	str	r3, [sp, #0]
 80284c2:	9b06      	ldr	r3, [sp, #24]
 80284c4:	2000      	movs	r0, #0
 80284c6:	2b00      	cmp	r3, #0
 80284c8:	da02      	bge.n	80284d0 <__ieee754_pow+0x7ac>
 80284ca:	9b00      	ldr	r3, [sp, #0]
 80284cc:	425b      	negs	r3, r3
 80284ce:	9300      	str	r3, [sp, #0]
 80284d0:	0002      	movs	r2, r0
 80284d2:	000b      	movs	r3, r1
 80284d4:	0030      	movs	r0, r6
 80284d6:	0039      	movs	r1, r7
 80284d8:	f7da fb78 	bl	8002bcc <__aeabi_dsub>
 80284dc:	0006      	movs	r6, r0
 80284de:	000f      	movs	r7, r1
 80284e0:	e065      	b.n	80285ae <__ieee754_pow+0x88a>
 80284e2:	46c0      	nop			@ (mov r8, r8)
 80284e4:	7ff00000 	.word	0x7ff00000
 80284e8:	43400000 	.word	0x43400000
 80284ec:	fffffc01 	.word	0xfffffc01
 80284f0:	3ff00000 	.word	0x3ff00000
 80284f4:	0003988e 	.word	0x0003988e
 80284f8:	000bb679 	.word	0x000bb679
 80284fc:	fff00000 	.word	0xfff00000
 8028500:	0802d620 	.word	0x0802d620
 8028504:	4a454eef 	.word	0x4a454eef
 8028508:	3fca7e28 	.word	0x3fca7e28
 802850c:	93c9db65 	.word	0x93c9db65
 8028510:	3fcd864a 	.word	0x3fcd864a
 8028514:	a91d4101 	.word	0xa91d4101
 8028518:	3fd17460 	.word	0x3fd17460
 802851c:	518f264d 	.word	0x518f264d
 8028520:	3fd55555 	.word	0x3fd55555
 8028524:	db6fabff 	.word	0xdb6fabff
 8028528:	3fdb6db6 	.word	0x3fdb6db6
 802852c:	33333303 	.word	0x33333303
 8028530:	3fe33333 	.word	0x3fe33333
 8028534:	40080000 	.word	0x40080000
 8028538:	3feec709 	.word	0x3feec709
 802853c:	dc3a03fd 	.word	0xdc3a03fd
 8028540:	145b01f5 	.word	0x145b01f5
 8028544:	be3e2fe0 	.word	0xbe3e2fe0
 8028548:	0802d600 	.word	0x0802d600
 802854c:	0802d610 	.word	0x0802d610
 8028550:	652b82fe 	.word	0x652b82fe
 8028554:	3c971547 	.word	0x3c971547
 8028558:	fffffc02 	.word	0xfffffc02
 802855c:	9b01      	ldr	r3, [sp, #4]
 802855e:	005c      	lsls	r4, r3, #1
 8028560:	4b72      	ldr	r3, [pc, #456]	@ (802872c <__ieee754_pow+0xa08>)
 8028562:	0864      	lsrs	r4, r4, #1
 8028564:	429c      	cmp	r4, r3
 8028566:	d91c      	bls.n	80285a2 <__ieee754_pow+0x87e>
 8028568:	4a71      	ldr	r2, [pc, #452]	@ (8028730 <__ieee754_pow+0xa0c>)
 802856a:	9b01      	ldr	r3, [sp, #4]
 802856c:	189b      	adds	r3, r3, r2
 802856e:	9a00      	ldr	r2, [sp, #0]
 8028570:	4313      	orrs	r3, r2
 8028572:	d008      	beq.n	8028586 <__ieee754_pow+0x862>
 8028574:	9808      	ldr	r0, [sp, #32]
 8028576:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028578:	2300      	movs	r3, #0
 802857a:	2200      	movs	r2, #0
 802857c:	f7d7 ff9e 	bl	80004bc <__aeabi_dcmplt>
 8028580:	1e43      	subs	r3, r0, #1
 8028582:	4198      	sbcs	r0, r3
 8028584:	e4fc      	b.n	8027f80 <__ieee754_pow+0x25c>
 8028586:	0032      	movs	r2, r6
 8028588:	9800      	ldr	r0, [sp, #0]
 802858a:	9901      	ldr	r1, [sp, #4]
 802858c:	003b      	movs	r3, r7
 802858e:	f7da fb1d 	bl	8002bcc <__aeabi_dsub>
 8028592:	9a02      	ldr	r2, [sp, #8]
 8028594:	9b03      	ldr	r3, [sp, #12]
 8028596:	f7d7 ffaf 	bl	80004f8 <__aeabi_dcmpge>
 802859a:	2800      	cmp	r0, #0
 802859c:	d1ea      	bne.n	8028574 <__ieee754_pow+0x850>
 802859e:	4c65      	ldr	r4, [pc, #404]	@ (8028734 <__ieee754_pow+0xa10>)
 80285a0:	e777      	b.n	8028492 <__ieee754_pow+0x76e>
 80285a2:	9a04      	ldr	r2, [sp, #16]
 80285a4:	4b64      	ldr	r3, [pc, #400]	@ (8028738 <__ieee754_pow+0xa14>)
 80285a6:	9200      	str	r2, [sp, #0]
 80285a8:	429c      	cmp	r4, r3
 80285aa:	d900      	bls.n	80285ae <__ieee754_pow+0x88a>
 80285ac:	e771      	b.n	8028492 <__ieee754_pow+0x76e>
 80285ae:	9a02      	ldr	r2, [sp, #8]
 80285b0:	9b03      	ldr	r3, [sp, #12]
 80285b2:	0030      	movs	r0, r6
 80285b4:	0039      	movs	r1, r7
 80285b6:	f7d9 f899 	bl	80016ec <__aeabi_dadd>
 80285ba:	2000      	movs	r0, #0
 80285bc:	2200      	movs	r2, #0
 80285be:	4b5f      	ldr	r3, [pc, #380]	@ (802873c <__ieee754_pow+0xa18>)
 80285c0:	9004      	str	r0, [sp, #16]
 80285c2:	9105      	str	r1, [sp, #20]
 80285c4:	f7da f83a 	bl	800263c <__aeabi_dmul>
 80285c8:	0032      	movs	r2, r6
 80285ca:	003b      	movs	r3, r7
 80285cc:	9006      	str	r0, [sp, #24]
 80285ce:	9107      	str	r1, [sp, #28]
 80285d0:	9804      	ldr	r0, [sp, #16]
 80285d2:	9905      	ldr	r1, [sp, #20]
 80285d4:	f7da fafa 	bl	8002bcc <__aeabi_dsub>
 80285d8:	0002      	movs	r2, r0
 80285da:	000b      	movs	r3, r1
 80285dc:	9802      	ldr	r0, [sp, #8]
 80285de:	9903      	ldr	r1, [sp, #12]
 80285e0:	f7da faf4 	bl	8002bcc <__aeabi_dsub>
 80285e4:	4a56      	ldr	r2, [pc, #344]	@ (8028740 <__ieee754_pow+0xa1c>)
 80285e6:	4b57      	ldr	r3, [pc, #348]	@ (8028744 <__ieee754_pow+0xa20>)
 80285e8:	f7da f828 	bl	800263c <__aeabi_dmul>
 80285ec:	4a56      	ldr	r2, [pc, #344]	@ (8028748 <__ieee754_pow+0xa24>)
 80285ee:	0004      	movs	r4, r0
 80285f0:	000d      	movs	r5, r1
 80285f2:	9804      	ldr	r0, [sp, #16]
 80285f4:	9905      	ldr	r1, [sp, #20]
 80285f6:	4b55      	ldr	r3, [pc, #340]	@ (802874c <__ieee754_pow+0xa28>)
 80285f8:	f7da f820 	bl	800263c <__aeabi_dmul>
 80285fc:	0002      	movs	r2, r0
 80285fe:	000b      	movs	r3, r1
 8028600:	0020      	movs	r0, r4
 8028602:	0029      	movs	r1, r5
 8028604:	f7d9 f872 	bl	80016ec <__aeabi_dadd>
 8028608:	0004      	movs	r4, r0
 802860a:	000d      	movs	r5, r1
 802860c:	0002      	movs	r2, r0
 802860e:	000b      	movs	r3, r1
 8028610:	9806      	ldr	r0, [sp, #24]
 8028612:	9907      	ldr	r1, [sp, #28]
 8028614:	f7d9 f86a 	bl	80016ec <__aeabi_dadd>
 8028618:	9a06      	ldr	r2, [sp, #24]
 802861a:	9b07      	ldr	r3, [sp, #28]
 802861c:	0006      	movs	r6, r0
 802861e:	000f      	movs	r7, r1
 8028620:	f7da fad4 	bl	8002bcc <__aeabi_dsub>
 8028624:	0002      	movs	r2, r0
 8028626:	000b      	movs	r3, r1
 8028628:	0020      	movs	r0, r4
 802862a:	0029      	movs	r1, r5
 802862c:	f7da face 	bl	8002bcc <__aeabi_dsub>
 8028630:	0032      	movs	r2, r6
 8028632:	9002      	str	r0, [sp, #8]
 8028634:	9103      	str	r1, [sp, #12]
 8028636:	003b      	movs	r3, r7
 8028638:	0030      	movs	r0, r6
 802863a:	0039      	movs	r1, r7
 802863c:	f7d9 fffe 	bl	800263c <__aeabi_dmul>
 8028640:	0004      	movs	r4, r0
 8028642:	000d      	movs	r5, r1
 8028644:	4a42      	ldr	r2, [pc, #264]	@ (8028750 <__ieee754_pow+0xa2c>)
 8028646:	4b43      	ldr	r3, [pc, #268]	@ (8028754 <__ieee754_pow+0xa30>)
 8028648:	f7d9 fff8 	bl	800263c <__aeabi_dmul>
 802864c:	4a42      	ldr	r2, [pc, #264]	@ (8028758 <__ieee754_pow+0xa34>)
 802864e:	4b43      	ldr	r3, [pc, #268]	@ (802875c <__ieee754_pow+0xa38>)
 8028650:	f7da fabc 	bl	8002bcc <__aeabi_dsub>
 8028654:	0022      	movs	r2, r4
 8028656:	002b      	movs	r3, r5
 8028658:	f7d9 fff0 	bl	800263c <__aeabi_dmul>
 802865c:	4a40      	ldr	r2, [pc, #256]	@ (8028760 <__ieee754_pow+0xa3c>)
 802865e:	4b41      	ldr	r3, [pc, #260]	@ (8028764 <__ieee754_pow+0xa40>)
 8028660:	f7d9 f844 	bl	80016ec <__aeabi_dadd>
 8028664:	0022      	movs	r2, r4
 8028666:	002b      	movs	r3, r5
 8028668:	f7d9 ffe8 	bl	800263c <__aeabi_dmul>
 802866c:	4a3e      	ldr	r2, [pc, #248]	@ (8028768 <__ieee754_pow+0xa44>)
 802866e:	4b3f      	ldr	r3, [pc, #252]	@ (802876c <__ieee754_pow+0xa48>)
 8028670:	f7da faac 	bl	8002bcc <__aeabi_dsub>
 8028674:	0022      	movs	r2, r4
 8028676:	002b      	movs	r3, r5
 8028678:	f7d9 ffe0 	bl	800263c <__aeabi_dmul>
 802867c:	4a3c      	ldr	r2, [pc, #240]	@ (8028770 <__ieee754_pow+0xa4c>)
 802867e:	4b3d      	ldr	r3, [pc, #244]	@ (8028774 <__ieee754_pow+0xa50>)
 8028680:	f7d9 f834 	bl	80016ec <__aeabi_dadd>
 8028684:	0022      	movs	r2, r4
 8028686:	002b      	movs	r3, r5
 8028688:	f7d9 ffd8 	bl	800263c <__aeabi_dmul>
 802868c:	0002      	movs	r2, r0
 802868e:	000b      	movs	r3, r1
 8028690:	0030      	movs	r0, r6
 8028692:	0039      	movs	r1, r7
 8028694:	f7da fa9a 	bl	8002bcc <__aeabi_dsub>
 8028698:	0004      	movs	r4, r0
 802869a:	000d      	movs	r5, r1
 802869c:	0002      	movs	r2, r0
 802869e:	000b      	movs	r3, r1
 80286a0:	0030      	movs	r0, r6
 80286a2:	0039      	movs	r1, r7
 80286a4:	f7d9 ffca 	bl	800263c <__aeabi_dmul>
 80286a8:	2380      	movs	r3, #128	@ 0x80
 80286aa:	9004      	str	r0, [sp, #16]
 80286ac:	9105      	str	r1, [sp, #20]
 80286ae:	2200      	movs	r2, #0
 80286b0:	0020      	movs	r0, r4
 80286b2:	0029      	movs	r1, r5
 80286b4:	05db      	lsls	r3, r3, #23
 80286b6:	f7da fa89 	bl	8002bcc <__aeabi_dsub>
 80286ba:	0002      	movs	r2, r0
 80286bc:	000b      	movs	r3, r1
 80286be:	9804      	ldr	r0, [sp, #16]
 80286c0:	9905      	ldr	r1, [sp, #20]
 80286c2:	f7d9 fb77 	bl	8001db4 <__aeabi_ddiv>
 80286c6:	9a02      	ldr	r2, [sp, #8]
 80286c8:	9b03      	ldr	r3, [sp, #12]
 80286ca:	0004      	movs	r4, r0
 80286cc:	000d      	movs	r5, r1
 80286ce:	0030      	movs	r0, r6
 80286d0:	0039      	movs	r1, r7
 80286d2:	f7d9 ffb3 	bl	800263c <__aeabi_dmul>
 80286d6:	9a02      	ldr	r2, [sp, #8]
 80286d8:	9b03      	ldr	r3, [sp, #12]
 80286da:	f7d9 f807 	bl	80016ec <__aeabi_dadd>
 80286de:	0002      	movs	r2, r0
 80286e0:	000b      	movs	r3, r1
 80286e2:	0020      	movs	r0, r4
 80286e4:	0029      	movs	r1, r5
 80286e6:	f7da fa71 	bl	8002bcc <__aeabi_dsub>
 80286ea:	0032      	movs	r2, r6
 80286ec:	003b      	movs	r3, r7
 80286ee:	f7da fa6d 	bl	8002bcc <__aeabi_dsub>
 80286f2:	0002      	movs	r2, r0
 80286f4:	000b      	movs	r3, r1
 80286f6:	2000      	movs	r0, #0
 80286f8:	491f      	ldr	r1, [pc, #124]	@ (8028778 <__ieee754_pow+0xa54>)
 80286fa:	f7da fa67 	bl	8002bcc <__aeabi_dsub>
 80286fe:	9b00      	ldr	r3, [sp, #0]
 8028700:	051b      	lsls	r3, r3, #20
 8028702:	185b      	adds	r3, r3, r1
 8028704:	151a      	asrs	r2, r3, #20
 8028706:	2a00      	cmp	r2, #0
 8028708:	dc06      	bgt.n	8028718 <__ieee754_pow+0x9f4>
 802870a:	9a00      	ldr	r2, [sp, #0]
 802870c:	f000 f92a 	bl	8028964 <scalbn>
 8028710:	9a08      	ldr	r2, [sp, #32]
 8028712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028714:	f7ff fbee 	bl	8027ef4 <__ieee754_pow+0x1d0>
 8028718:	0019      	movs	r1, r3
 802871a:	e7f9      	b.n	8028710 <__ieee754_pow+0x9ec>
 802871c:	2300      	movs	r3, #0
 802871e:	4c16      	ldr	r4, [pc, #88]	@ (8028778 <__ieee754_pow+0xa54>)
 8028720:	f7ff fbcb 	bl	8027eba <__ieee754_pow+0x196>
 8028724:	2300      	movs	r3, #0
 8028726:	2400      	movs	r4, #0
 8028728:	f7ff fbc7 	bl	8027eba <__ieee754_pow+0x196>
 802872c:	4090cbff 	.word	0x4090cbff
 8028730:	3f6f3400 	.word	0x3f6f3400
 8028734:	4090cc00 	.word	0x4090cc00
 8028738:	3fe00000 	.word	0x3fe00000
 802873c:	3fe62e43 	.word	0x3fe62e43
 8028740:	fefa39ef 	.word	0xfefa39ef
 8028744:	3fe62e42 	.word	0x3fe62e42
 8028748:	0ca86c39 	.word	0x0ca86c39
 802874c:	be205c61 	.word	0xbe205c61
 8028750:	72bea4d0 	.word	0x72bea4d0
 8028754:	3e663769 	.word	0x3e663769
 8028758:	c5d26bf1 	.word	0xc5d26bf1
 802875c:	3ebbbd41 	.word	0x3ebbbd41
 8028760:	af25de2c 	.word	0xaf25de2c
 8028764:	3f11566a 	.word	0x3f11566a
 8028768:	16bebd93 	.word	0x16bebd93
 802876c:	3f66c16c 	.word	0x3f66c16c
 8028770:	5555553e 	.word	0x5555553e
 8028774:	3fc55555 	.word	0x3fc55555
 8028778:	3ff00000 	.word	0x3ff00000

0802877c <fabs>:
 802877c:	0049      	lsls	r1, r1, #1
 802877e:	084b      	lsrs	r3, r1, #1
 8028780:	0019      	movs	r1, r3
 8028782:	4770      	bx	lr

08028784 <__ieee754_expf>:
 8028784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028786:	21ff      	movs	r1, #255	@ 0xff
 8028788:	0043      	lsls	r3, r0, #1
 802878a:	1c04      	adds	r4, r0, #0
 802878c:	085b      	lsrs	r3, r3, #1
 802878e:	05c9      	lsls	r1, r1, #23
 8028790:	428b      	cmp	r3, r1
 8028792:	d904      	bls.n	802879e <__ieee754_expf+0x1a>
 8028794:	1c01      	adds	r1, r0, #0
 8028796:	1c20      	adds	r0, r4, #0
 8028798:	f7d8 f892 	bl	80008c0 <__aeabi_fadd>
 802879c:	e00d      	b.n	80287ba <__ieee754_expf+0x36>
 802879e:	0fc6      	lsrs	r6, r0, #31
 80287a0:	428b      	cmp	r3, r1
 80287a2:	d104      	bne.n	80287ae <__ieee754_expf+0x2a>
 80287a4:	2e00      	cmp	r6, #0
 80287a6:	d000      	beq.n	80287aa <__ieee754_expf+0x26>
 80287a8:	e0ba      	b.n	8028920 <__ieee754_expf+0x19c>
 80287aa:	1c20      	adds	r0, r4, #0
 80287ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80287ae:	495d      	ldr	r1, [pc, #372]	@ (8028924 <__ieee754_expf+0x1a0>)
 80287b0:	4288      	cmp	r0, r1
 80287b2:	dd04      	ble.n	80287be <__ieee754_expf+0x3a>
 80287b4:	2000      	movs	r0, #0
 80287b6:	f000 f98a 	bl	8028ace <__math_oflowf>
 80287ba:	1c04      	adds	r4, r0, #0
 80287bc:	e7f5      	b.n	80287aa <__ieee754_expf+0x26>
 80287be:	2800      	cmp	r0, #0
 80287c0:	da06      	bge.n	80287d0 <__ieee754_expf+0x4c>
 80287c2:	4a59      	ldr	r2, [pc, #356]	@ (8028928 <__ieee754_expf+0x1a4>)
 80287c4:	4293      	cmp	r3, r2
 80287c6:	d903      	bls.n	80287d0 <__ieee754_expf+0x4c>
 80287c8:	2000      	movs	r0, #0
 80287ca:	f000 f97a 	bl	8028ac2 <__math_uflowf>
 80287ce:	e7f4      	b.n	80287ba <__ieee754_expf+0x36>
 80287d0:	4a56      	ldr	r2, [pc, #344]	@ (802892c <__ieee754_expf+0x1a8>)
 80287d2:	4293      	cmp	r3, r2
 80287d4:	d96e      	bls.n	80288b4 <__ieee754_expf+0x130>
 80287d6:	4a56      	ldr	r2, [pc, #344]	@ (8028930 <__ieee754_expf+0x1ac>)
 80287d8:	00b5      	lsls	r5, r6, #2
 80287da:	4293      	cmp	r3, r2
 80287dc:	d84e      	bhi.n	802887c <__ieee754_expf+0xf8>
 80287de:	4b55      	ldr	r3, [pc, #340]	@ (8028934 <__ieee754_expf+0x1b0>)
 80287e0:	1c20      	adds	r0, r4, #0
 80287e2:	5959      	ldr	r1, [r3, r5]
 80287e4:	f7d8 fd1a 	bl	800121c <__aeabi_fsub>
 80287e8:	4b53      	ldr	r3, [pc, #332]	@ (8028938 <__ieee754_expf+0x1b4>)
 80287ea:	1c07      	adds	r7, r0, #0
 80287ec:	595b      	ldr	r3, [r3, r5]
 80287ee:	2501      	movs	r5, #1
 80287f0:	1bad      	subs	r5, r5, r6
 80287f2:	9300      	str	r3, [sp, #0]
 80287f4:	1bad      	subs	r5, r5, r6
 80287f6:	9900      	ldr	r1, [sp, #0]
 80287f8:	1c38      	adds	r0, r7, #0
 80287fa:	f7d8 fd0f 	bl	800121c <__aeabi_fsub>
 80287fe:	1c04      	adds	r4, r0, #0
 8028800:	1c21      	adds	r1, r4, #0
 8028802:	1c20      	adds	r0, r4, #0
 8028804:	f7d8 fbcc 	bl	8000fa0 <__aeabi_fmul>
 8028808:	494c      	ldr	r1, [pc, #304]	@ (802893c <__ieee754_expf+0x1b8>)
 802880a:	1c06      	adds	r6, r0, #0
 802880c:	f7d8 fbc8 	bl	8000fa0 <__aeabi_fmul>
 8028810:	494b      	ldr	r1, [pc, #300]	@ (8028940 <__ieee754_expf+0x1bc>)
 8028812:	f7d8 fd03 	bl	800121c <__aeabi_fsub>
 8028816:	1c31      	adds	r1, r6, #0
 8028818:	f7d8 fbc2 	bl	8000fa0 <__aeabi_fmul>
 802881c:	4949      	ldr	r1, [pc, #292]	@ (8028944 <__ieee754_expf+0x1c0>)
 802881e:	f7d8 f84f 	bl	80008c0 <__aeabi_fadd>
 8028822:	1c31      	adds	r1, r6, #0
 8028824:	f7d8 fbbc 	bl	8000fa0 <__aeabi_fmul>
 8028828:	4947      	ldr	r1, [pc, #284]	@ (8028948 <__ieee754_expf+0x1c4>)
 802882a:	f7d8 fcf7 	bl	800121c <__aeabi_fsub>
 802882e:	1c31      	adds	r1, r6, #0
 8028830:	f7d8 fbb6 	bl	8000fa0 <__aeabi_fmul>
 8028834:	4945      	ldr	r1, [pc, #276]	@ (802894c <__ieee754_expf+0x1c8>)
 8028836:	f7d8 f843 	bl	80008c0 <__aeabi_fadd>
 802883a:	1c31      	adds	r1, r6, #0
 802883c:	f7d8 fbb0 	bl	8000fa0 <__aeabi_fmul>
 8028840:	1c01      	adds	r1, r0, #0
 8028842:	1c20      	adds	r0, r4, #0
 8028844:	f7d8 fcea 	bl	800121c <__aeabi_fsub>
 8028848:	1c01      	adds	r1, r0, #0
 802884a:	1c06      	adds	r6, r0, #0
 802884c:	1c20      	adds	r0, r4, #0
 802884e:	f7d8 fba7 	bl	8000fa0 <__aeabi_fmul>
 8028852:	9001      	str	r0, [sp, #4]
 8028854:	2d00      	cmp	r5, #0
 8028856:	d140      	bne.n	80288da <__ieee754_expf+0x156>
 8028858:	2180      	movs	r1, #128	@ 0x80
 802885a:	1c30      	adds	r0, r6, #0
 802885c:	05c9      	lsls	r1, r1, #23
 802885e:	f7d8 fcdd 	bl	800121c <__aeabi_fsub>
 8028862:	1c01      	adds	r1, r0, #0
 8028864:	9801      	ldr	r0, [sp, #4]
 8028866:	f7d8 f9b5 	bl	8000bd4 <__aeabi_fdiv>
 802886a:	1c21      	adds	r1, r4, #0
 802886c:	f7d8 fcd6 	bl	800121c <__aeabi_fsub>
 8028870:	1c01      	adds	r1, r0, #0
 8028872:	20fe      	movs	r0, #254	@ 0xfe
 8028874:	0580      	lsls	r0, r0, #22
 8028876:	f7d8 fcd1 	bl	800121c <__aeabi_fsub>
 802887a:	e79e      	b.n	80287ba <__ieee754_expf+0x36>
 802887c:	4934      	ldr	r1, [pc, #208]	@ (8028950 <__ieee754_expf+0x1cc>)
 802887e:	1c20      	adds	r0, r4, #0
 8028880:	f7d8 fb8e 	bl	8000fa0 <__aeabi_fmul>
 8028884:	4b33      	ldr	r3, [pc, #204]	@ (8028954 <__ieee754_expf+0x1d0>)
 8028886:	5959      	ldr	r1, [r3, r5]
 8028888:	f7d8 f81a 	bl	80008c0 <__aeabi_fadd>
 802888c:	f7d8 fe80 	bl	8001590 <__aeabi_f2iz>
 8028890:	0005      	movs	r5, r0
 8028892:	f7d8 fe9d 	bl	80015d0 <__aeabi_i2f>
 8028896:	4930      	ldr	r1, [pc, #192]	@ (8028958 <__ieee754_expf+0x1d4>)
 8028898:	1c06      	adds	r6, r0, #0
 802889a:	f7d8 fb81 	bl	8000fa0 <__aeabi_fmul>
 802889e:	1c01      	adds	r1, r0, #0
 80288a0:	1c20      	adds	r0, r4, #0
 80288a2:	f7d8 fcbb 	bl	800121c <__aeabi_fsub>
 80288a6:	492d      	ldr	r1, [pc, #180]	@ (802895c <__ieee754_expf+0x1d8>)
 80288a8:	1c07      	adds	r7, r0, #0
 80288aa:	1c30      	adds	r0, r6, #0
 80288ac:	f7d8 fb78 	bl	8000fa0 <__aeabi_fmul>
 80288b0:	9000      	str	r0, [sp, #0]
 80288b2:	e7a0      	b.n	80287f6 <__ieee754_expf+0x72>
 80288b4:	22d0      	movs	r2, #208	@ 0xd0
 80288b6:	0592      	lsls	r2, r2, #22
 80288b8:	4293      	cmp	r3, r2
 80288ba:	d20c      	bcs.n	80288d6 <__ieee754_expf+0x152>
 80288bc:	4928      	ldr	r1, [pc, #160]	@ (8028960 <__ieee754_expf+0x1dc>)
 80288be:	1c20      	adds	r0, r4, #0
 80288c0:	f7d7 fffe 	bl	80008c0 <__aeabi_fadd>
 80288c4:	21fe      	movs	r1, #254	@ 0xfe
 80288c6:	0589      	lsls	r1, r1, #22
 80288c8:	f7d7 fe46 	bl	8000558 <__aeabi_fcmpgt>
 80288cc:	1e05      	subs	r5, r0, #0
 80288ce:	d097      	beq.n	8028800 <__ieee754_expf+0x7c>
 80288d0:	21fe      	movs	r1, #254	@ 0xfe
 80288d2:	0589      	lsls	r1, r1, #22
 80288d4:	e75f      	b.n	8028796 <__ieee754_expf+0x12>
 80288d6:	2500      	movs	r5, #0
 80288d8:	e792      	b.n	8028800 <__ieee754_expf+0x7c>
 80288da:	2080      	movs	r0, #128	@ 0x80
 80288dc:	1c31      	adds	r1, r6, #0
 80288de:	05c0      	lsls	r0, r0, #23
 80288e0:	f7d8 fc9c 	bl	800121c <__aeabi_fsub>
 80288e4:	1c01      	adds	r1, r0, #0
 80288e6:	9801      	ldr	r0, [sp, #4]
 80288e8:	f7d8 f974 	bl	8000bd4 <__aeabi_fdiv>
 80288ec:	1c01      	adds	r1, r0, #0
 80288ee:	9800      	ldr	r0, [sp, #0]
 80288f0:	f7d8 fc94 	bl	800121c <__aeabi_fsub>
 80288f4:	1c39      	adds	r1, r7, #0
 80288f6:	f7d8 fc91 	bl	800121c <__aeabi_fsub>
 80288fa:	1c01      	adds	r1, r0, #0
 80288fc:	20fe      	movs	r0, #254	@ 0xfe
 80288fe:	0580      	lsls	r0, r0, #22
 8028900:	f7d8 fc8c 	bl	800121c <__aeabi_fsub>
 8028904:	002b      	movs	r3, r5
 8028906:	337d      	adds	r3, #125	@ 0x7d
 8028908:	db02      	blt.n	8028910 <__ieee754_expf+0x18c>
 802890a:	05ec      	lsls	r4, r5, #23
 802890c:	1824      	adds	r4, r4, r0
 802890e:	e74c      	b.n	80287aa <__ieee754_expf+0x26>
 8028910:	21d8      	movs	r1, #216	@ 0xd8
 8028912:	3564      	adds	r5, #100	@ 0x64
 8028914:	05ed      	lsls	r5, r5, #23
 8028916:	1828      	adds	r0, r5, r0
 8028918:	0509      	lsls	r1, r1, #20
 802891a:	f7d8 fb41 	bl	8000fa0 <__aeabi_fmul>
 802891e:	e74c      	b.n	80287ba <__ieee754_expf+0x36>
 8028920:	2400      	movs	r4, #0
 8028922:	e742      	b.n	80287aa <__ieee754_expf+0x26>
 8028924:	42b17217 	.word	0x42b17217
 8028928:	42cff1b5 	.word	0x42cff1b5
 802892c:	3eb17218 	.word	0x3eb17218
 8028930:	3f851591 	.word	0x3f851591
 8028934:	0802d638 	.word	0x0802d638
 8028938:	0802d630 	.word	0x0802d630
 802893c:	3331bb4c 	.word	0x3331bb4c
 8028940:	35ddea0e 	.word	0x35ddea0e
 8028944:	388ab355 	.word	0x388ab355
 8028948:	3b360b61 	.word	0x3b360b61
 802894c:	3e2aaaab 	.word	0x3e2aaaab
 8028950:	3fb8aa3b 	.word	0x3fb8aa3b
 8028954:	0802d640 	.word	0x0802d640
 8028958:	3f317180 	.word	0x3f317180
 802895c:	3717f7d1 	.word	0x3717f7d1
 8028960:	7149f2ca 	.word	0x7149f2ca

08028964 <scalbn>:
 8028964:	004b      	lsls	r3, r1, #1
 8028966:	b570      	push	{r4, r5, r6, lr}
 8028968:	0d5b      	lsrs	r3, r3, #21
 802896a:	0014      	movs	r4, r2
 802896c:	000d      	movs	r5, r1
 802896e:	2b00      	cmp	r3, #0
 8028970:	d10f      	bne.n	8028992 <scalbn+0x2e>
 8028972:	004b      	lsls	r3, r1, #1
 8028974:	085b      	lsrs	r3, r3, #1
 8028976:	4303      	orrs	r3, r0
 8028978:	d012      	beq.n	80289a0 <scalbn+0x3c>
 802897a:	4b23      	ldr	r3, [pc, #140]	@ (8028a08 <scalbn+0xa4>)
 802897c:	2200      	movs	r2, #0
 802897e:	f7d9 fe5d 	bl	800263c <__aeabi_dmul>
 8028982:	4b22      	ldr	r3, [pc, #136]	@ (8028a0c <scalbn+0xa8>)
 8028984:	429c      	cmp	r4, r3
 8028986:	da0c      	bge.n	80289a2 <scalbn+0x3e>
 8028988:	4a21      	ldr	r2, [pc, #132]	@ (8028a10 <scalbn+0xac>)
 802898a:	4b22      	ldr	r3, [pc, #136]	@ (8028a14 <scalbn+0xb0>)
 802898c:	f7d9 fe56 	bl	800263c <__aeabi_dmul>
 8028990:	e006      	b.n	80289a0 <scalbn+0x3c>
 8028992:	4a21      	ldr	r2, [pc, #132]	@ (8028a18 <scalbn+0xb4>)
 8028994:	4293      	cmp	r3, r2
 8028996:	d108      	bne.n	80289aa <scalbn+0x46>
 8028998:	0002      	movs	r2, r0
 802899a:	000b      	movs	r3, r1
 802899c:	f7d8 fea6 	bl	80016ec <__aeabi_dadd>
 80289a0:	bd70      	pop	{r4, r5, r6, pc}
 80289a2:	000d      	movs	r5, r1
 80289a4:	004b      	lsls	r3, r1, #1
 80289a6:	0d5b      	lsrs	r3, r3, #21
 80289a8:	3b36      	subs	r3, #54	@ 0x36
 80289aa:	4a1c      	ldr	r2, [pc, #112]	@ (8028a1c <scalbn+0xb8>)
 80289ac:	4294      	cmp	r4, r2
 80289ae:	dd0a      	ble.n	80289c6 <scalbn+0x62>
 80289b0:	4c1b      	ldr	r4, [pc, #108]	@ (8028a20 <scalbn+0xbc>)
 80289b2:	4d1c      	ldr	r5, [pc, #112]	@ (8028a24 <scalbn+0xc0>)
 80289b4:	2900      	cmp	r1, #0
 80289b6:	da01      	bge.n	80289bc <scalbn+0x58>
 80289b8:	4c19      	ldr	r4, [pc, #100]	@ (8028a20 <scalbn+0xbc>)
 80289ba:	4d1b      	ldr	r5, [pc, #108]	@ (8028a28 <scalbn+0xc4>)
 80289bc:	4a18      	ldr	r2, [pc, #96]	@ (8028a20 <scalbn+0xbc>)
 80289be:	4b19      	ldr	r3, [pc, #100]	@ (8028a24 <scalbn+0xc0>)
 80289c0:	0020      	movs	r0, r4
 80289c2:	0029      	movs	r1, r5
 80289c4:	e7e2      	b.n	802898c <scalbn+0x28>
 80289c6:	18e2      	adds	r2, r4, r3
 80289c8:	4b18      	ldr	r3, [pc, #96]	@ (8028a2c <scalbn+0xc8>)
 80289ca:	429a      	cmp	r2, r3
 80289cc:	dcf0      	bgt.n	80289b0 <scalbn+0x4c>
 80289ce:	2a00      	cmp	r2, #0
 80289d0:	dd05      	ble.n	80289de <scalbn+0x7a>
 80289d2:	4b17      	ldr	r3, [pc, #92]	@ (8028a30 <scalbn+0xcc>)
 80289d4:	0512      	lsls	r2, r2, #20
 80289d6:	402b      	ands	r3, r5
 80289d8:	431a      	orrs	r2, r3
 80289da:	0011      	movs	r1, r2
 80289dc:	e7e0      	b.n	80289a0 <scalbn+0x3c>
 80289de:	0013      	movs	r3, r2
 80289e0:	3335      	adds	r3, #53	@ 0x35
 80289e2:	da08      	bge.n	80289f6 <scalbn+0x92>
 80289e4:	4c0a      	ldr	r4, [pc, #40]	@ (8028a10 <scalbn+0xac>)
 80289e6:	4d0b      	ldr	r5, [pc, #44]	@ (8028a14 <scalbn+0xb0>)
 80289e8:	2900      	cmp	r1, #0
 80289ea:	da01      	bge.n	80289f0 <scalbn+0x8c>
 80289ec:	4c08      	ldr	r4, [pc, #32]	@ (8028a10 <scalbn+0xac>)
 80289ee:	4d11      	ldr	r5, [pc, #68]	@ (8028a34 <scalbn+0xd0>)
 80289f0:	4a07      	ldr	r2, [pc, #28]	@ (8028a10 <scalbn+0xac>)
 80289f2:	4b08      	ldr	r3, [pc, #32]	@ (8028a14 <scalbn+0xb0>)
 80289f4:	e7e4      	b.n	80289c0 <scalbn+0x5c>
 80289f6:	4b0e      	ldr	r3, [pc, #56]	@ (8028a30 <scalbn+0xcc>)
 80289f8:	3236      	adds	r2, #54	@ 0x36
 80289fa:	401d      	ands	r5, r3
 80289fc:	0512      	lsls	r2, r2, #20
 80289fe:	432a      	orrs	r2, r5
 8028a00:	0011      	movs	r1, r2
 8028a02:	4b0d      	ldr	r3, [pc, #52]	@ (8028a38 <scalbn+0xd4>)
 8028a04:	2200      	movs	r2, #0
 8028a06:	e7c1      	b.n	802898c <scalbn+0x28>
 8028a08:	43500000 	.word	0x43500000
 8028a0c:	ffff3cb0 	.word	0xffff3cb0
 8028a10:	c2f8f359 	.word	0xc2f8f359
 8028a14:	01a56e1f 	.word	0x01a56e1f
 8028a18:	000007ff 	.word	0x000007ff
 8028a1c:	0000c350 	.word	0x0000c350
 8028a20:	8800759c 	.word	0x8800759c
 8028a24:	7e37e43c 	.word	0x7e37e43c
 8028a28:	fe37e43c 	.word	0xfe37e43c
 8028a2c:	000007fe 	.word	0x000007fe
 8028a30:	800fffff 	.word	0x800fffff
 8028a34:	81a56e1f 	.word	0x81a56e1f
 8028a38:	3c900000 	.word	0x3c900000

08028a3c <with_errno>:
 8028a3c:	b570      	push	{r4, r5, r6, lr}
 8028a3e:	000d      	movs	r5, r1
 8028a40:	0016      	movs	r6, r2
 8028a42:	0004      	movs	r4, r0
 8028a44:	f7fc f928 	bl	8024c98 <__errno>
 8028a48:	0029      	movs	r1, r5
 8028a4a:	6006      	str	r6, [r0, #0]
 8028a4c:	0020      	movs	r0, r4
 8028a4e:	bd70      	pop	{r4, r5, r6, pc}

08028a50 <xflow>:
 8028a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8028a52:	0014      	movs	r4, r2
 8028a54:	001d      	movs	r5, r3
 8028a56:	2800      	cmp	r0, #0
 8028a58:	d002      	beq.n	8028a60 <xflow+0x10>
 8028a5a:	2180      	movs	r1, #128	@ 0x80
 8028a5c:	0609      	lsls	r1, r1, #24
 8028a5e:	185b      	adds	r3, r3, r1
 8028a60:	9200      	str	r2, [sp, #0]
 8028a62:	9301      	str	r3, [sp, #4]
 8028a64:	9a00      	ldr	r2, [sp, #0]
 8028a66:	9b01      	ldr	r3, [sp, #4]
 8028a68:	0020      	movs	r0, r4
 8028a6a:	0029      	movs	r1, r5
 8028a6c:	f7d9 fde6 	bl	800263c <__aeabi_dmul>
 8028a70:	2222      	movs	r2, #34	@ 0x22
 8028a72:	f7ff ffe3 	bl	8028a3c <with_errno>
 8028a76:	b003      	add	sp, #12
 8028a78:	bd30      	pop	{r4, r5, pc}

08028a7a <__math_uflow>:
 8028a7a:	2380      	movs	r3, #128	@ 0x80
 8028a7c:	b510      	push	{r4, lr}
 8028a7e:	2200      	movs	r2, #0
 8028a80:	055b      	lsls	r3, r3, #21
 8028a82:	f7ff ffe5 	bl	8028a50 <xflow>
 8028a86:	bd10      	pop	{r4, pc}

08028a88 <__math_oflow>:
 8028a88:	23e0      	movs	r3, #224	@ 0xe0
 8028a8a:	b510      	push	{r4, lr}
 8028a8c:	2200      	movs	r2, #0
 8028a8e:	05db      	lsls	r3, r3, #23
 8028a90:	f7ff ffde 	bl	8028a50 <xflow>
 8028a94:	bd10      	pop	{r4, pc}

08028a96 <with_errnof>:
 8028a96:	b570      	push	{r4, r5, r6, lr}
 8028a98:	000d      	movs	r5, r1
 8028a9a:	1c04      	adds	r4, r0, #0
 8028a9c:	f7fc f8fc 	bl	8024c98 <__errno>
 8028aa0:	6005      	str	r5, [r0, #0]
 8028aa2:	1c20      	adds	r0, r4, #0
 8028aa4:	bd70      	pop	{r4, r5, r6, pc}

08028aa6 <xflowf>:
 8028aa6:	b510      	push	{r4, lr}
 8028aa8:	1c0b      	adds	r3, r1, #0
 8028aaa:	2800      	cmp	r0, #0
 8028aac:	d002      	beq.n	8028ab4 <xflowf+0xe>
 8028aae:	2380      	movs	r3, #128	@ 0x80
 8028ab0:	061b      	lsls	r3, r3, #24
 8028ab2:	18cb      	adds	r3, r1, r3
 8028ab4:	1c18      	adds	r0, r3, #0
 8028ab6:	f7d8 fa73 	bl	8000fa0 <__aeabi_fmul>
 8028aba:	2122      	movs	r1, #34	@ 0x22
 8028abc:	f7ff ffeb 	bl	8028a96 <with_errnof>
 8028ac0:	bd10      	pop	{r4, pc}

08028ac2 <__math_uflowf>:
 8028ac2:	2180      	movs	r1, #128	@ 0x80
 8028ac4:	b510      	push	{r4, lr}
 8028ac6:	0549      	lsls	r1, r1, #21
 8028ac8:	f7ff ffed 	bl	8028aa6 <xflowf>
 8028acc:	bd10      	pop	{r4, pc}

08028ace <__math_oflowf>:
 8028ace:	21e0      	movs	r1, #224	@ 0xe0
 8028ad0:	b510      	push	{r4, lr}
 8028ad2:	05c9      	lsls	r1, r1, #23
 8028ad4:	f7ff ffe7 	bl	8028aa6 <xflowf>
 8028ad8:	bd10      	pop	{r4, pc}
	...

08028adc <__ieee754_sqrt>:
 8028adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028ade:	000a      	movs	r2, r1
 8028ae0:	000d      	movs	r5, r1
 8028ae2:	496d      	ldr	r1, [pc, #436]	@ (8028c98 <__ieee754_sqrt+0x1bc>)
 8028ae4:	0004      	movs	r4, r0
 8028ae6:	0003      	movs	r3, r0
 8028ae8:	0008      	movs	r0, r1
 8028aea:	b087      	sub	sp, #28
 8028aec:	4028      	ands	r0, r5
 8028aee:	4288      	cmp	r0, r1
 8028af0:	d111      	bne.n	8028b16 <__ieee754_sqrt+0x3a>
 8028af2:	0022      	movs	r2, r4
 8028af4:	002b      	movs	r3, r5
 8028af6:	0020      	movs	r0, r4
 8028af8:	0029      	movs	r1, r5
 8028afa:	f7d9 fd9f 	bl	800263c <__aeabi_dmul>
 8028afe:	0002      	movs	r2, r0
 8028b00:	000b      	movs	r3, r1
 8028b02:	0020      	movs	r0, r4
 8028b04:	0029      	movs	r1, r5
 8028b06:	f7d8 fdf1 	bl	80016ec <__aeabi_dadd>
 8028b0a:	0004      	movs	r4, r0
 8028b0c:	000d      	movs	r5, r1
 8028b0e:	0020      	movs	r0, r4
 8028b10:	0029      	movs	r1, r5
 8028b12:	b007      	add	sp, #28
 8028b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028b16:	2d00      	cmp	r5, #0
 8028b18:	dc11      	bgt.n	8028b3e <__ieee754_sqrt+0x62>
 8028b1a:	0069      	lsls	r1, r5, #1
 8028b1c:	0849      	lsrs	r1, r1, #1
 8028b1e:	4321      	orrs	r1, r4
 8028b20:	d0f5      	beq.n	8028b0e <__ieee754_sqrt+0x32>
 8028b22:	2000      	movs	r0, #0
 8028b24:	4285      	cmp	r5, r0
 8028b26:	d010      	beq.n	8028b4a <__ieee754_sqrt+0x6e>
 8028b28:	0022      	movs	r2, r4
 8028b2a:	002b      	movs	r3, r5
 8028b2c:	0020      	movs	r0, r4
 8028b2e:	0029      	movs	r1, r5
 8028b30:	f7da f84c 	bl	8002bcc <__aeabi_dsub>
 8028b34:	0002      	movs	r2, r0
 8028b36:	000b      	movs	r3, r1
 8028b38:	f7d9 f93c 	bl	8001db4 <__aeabi_ddiv>
 8028b3c:	e7e5      	b.n	8028b0a <__ieee754_sqrt+0x2e>
 8028b3e:	1528      	asrs	r0, r5, #20
 8028b40:	d115      	bne.n	8028b6e <__ieee754_sqrt+0x92>
 8028b42:	2480      	movs	r4, #128	@ 0x80
 8028b44:	2100      	movs	r1, #0
 8028b46:	0364      	lsls	r4, r4, #13
 8028b48:	e007      	b.n	8028b5a <__ieee754_sqrt+0x7e>
 8028b4a:	0ada      	lsrs	r2, r3, #11
 8028b4c:	3815      	subs	r0, #21
 8028b4e:	055b      	lsls	r3, r3, #21
 8028b50:	2a00      	cmp	r2, #0
 8028b52:	d0fa      	beq.n	8028b4a <__ieee754_sqrt+0x6e>
 8028b54:	e7f5      	b.n	8028b42 <__ieee754_sqrt+0x66>
 8028b56:	0052      	lsls	r2, r2, #1
 8028b58:	3101      	adds	r1, #1
 8028b5a:	4222      	tst	r2, r4
 8028b5c:	d0fb      	beq.n	8028b56 <__ieee754_sqrt+0x7a>
 8028b5e:	1e4c      	subs	r4, r1, #1
 8028b60:	1b00      	subs	r0, r0, r4
 8028b62:	2420      	movs	r4, #32
 8028b64:	001d      	movs	r5, r3
 8028b66:	1a64      	subs	r4, r4, r1
 8028b68:	40e5      	lsrs	r5, r4
 8028b6a:	408b      	lsls	r3, r1
 8028b6c:	432a      	orrs	r2, r5
 8028b6e:	494b      	ldr	r1, [pc, #300]	@ (8028c9c <__ieee754_sqrt+0x1c0>)
 8028b70:	0312      	lsls	r2, r2, #12
 8028b72:	1844      	adds	r4, r0, r1
 8028b74:	2180      	movs	r1, #128	@ 0x80
 8028b76:	0b12      	lsrs	r2, r2, #12
 8028b78:	0349      	lsls	r1, r1, #13
 8028b7a:	4311      	orrs	r1, r2
 8028b7c:	07c0      	lsls	r0, r0, #31
 8028b7e:	d403      	bmi.n	8028b88 <__ieee754_sqrt+0xac>
 8028b80:	0fda      	lsrs	r2, r3, #31
 8028b82:	0049      	lsls	r1, r1, #1
 8028b84:	1851      	adds	r1, r2, r1
 8028b86:	005b      	lsls	r3, r3, #1
 8028b88:	2500      	movs	r5, #0
 8028b8a:	1062      	asrs	r2, r4, #1
 8028b8c:	0049      	lsls	r1, r1, #1
 8028b8e:	2480      	movs	r4, #128	@ 0x80
 8028b90:	9205      	str	r2, [sp, #20]
 8028b92:	0fda      	lsrs	r2, r3, #31
 8028b94:	1852      	adds	r2, r2, r1
 8028b96:	2016      	movs	r0, #22
 8028b98:	0029      	movs	r1, r5
 8028b9a:	005b      	lsls	r3, r3, #1
 8028b9c:	03a4      	lsls	r4, r4, #14
 8028b9e:	190e      	adds	r6, r1, r4
 8028ba0:	4296      	cmp	r6, r2
 8028ba2:	dc02      	bgt.n	8028baa <__ieee754_sqrt+0xce>
 8028ba4:	1931      	adds	r1, r6, r4
 8028ba6:	1b92      	subs	r2, r2, r6
 8028ba8:	192d      	adds	r5, r5, r4
 8028baa:	0fde      	lsrs	r6, r3, #31
 8028bac:	0052      	lsls	r2, r2, #1
 8028bae:	3801      	subs	r0, #1
 8028bb0:	1992      	adds	r2, r2, r6
 8028bb2:	005b      	lsls	r3, r3, #1
 8028bb4:	0864      	lsrs	r4, r4, #1
 8028bb6:	2800      	cmp	r0, #0
 8028bb8:	d1f1      	bne.n	8028b9e <__ieee754_sqrt+0xc2>
 8028bba:	2620      	movs	r6, #32
 8028bbc:	2780      	movs	r7, #128	@ 0x80
 8028bbe:	0004      	movs	r4, r0
 8028bc0:	9604      	str	r6, [sp, #16]
 8028bc2:	063f      	lsls	r7, r7, #24
 8028bc4:	19c6      	adds	r6, r0, r7
 8028bc6:	46b4      	mov	ip, r6
 8028bc8:	4291      	cmp	r1, r2
 8028bca:	db02      	blt.n	8028bd2 <__ieee754_sqrt+0xf6>
 8028bcc:	d114      	bne.n	8028bf8 <__ieee754_sqrt+0x11c>
 8028bce:	429e      	cmp	r6, r3
 8028bd0:	d812      	bhi.n	8028bf8 <__ieee754_sqrt+0x11c>
 8028bd2:	4660      	mov	r0, ip
 8028bd4:	4666      	mov	r6, ip
 8028bd6:	19c0      	adds	r0, r0, r7
 8028bd8:	9100      	str	r1, [sp, #0]
 8028bda:	2e00      	cmp	r6, #0
 8028bdc:	da03      	bge.n	8028be6 <__ieee754_sqrt+0x10a>
 8028bde:	43c6      	mvns	r6, r0
 8028be0:	0ff6      	lsrs	r6, r6, #31
 8028be2:	198e      	adds	r6, r1, r6
 8028be4:	9600      	str	r6, [sp, #0]
 8028be6:	1a52      	subs	r2, r2, r1
 8028be8:	4563      	cmp	r3, ip
 8028bea:	4189      	sbcs	r1, r1
 8028bec:	4249      	negs	r1, r1
 8028bee:	1a52      	subs	r2, r2, r1
 8028bf0:	4661      	mov	r1, ip
 8028bf2:	1a5b      	subs	r3, r3, r1
 8028bf4:	9900      	ldr	r1, [sp, #0]
 8028bf6:	19e4      	adds	r4, r4, r7
 8028bf8:	0fde      	lsrs	r6, r3, #31
 8028bfa:	0052      	lsls	r2, r2, #1
 8028bfc:	1992      	adds	r2, r2, r6
 8028bfe:	9e04      	ldr	r6, [sp, #16]
 8028c00:	005b      	lsls	r3, r3, #1
 8028c02:	3e01      	subs	r6, #1
 8028c04:	087f      	lsrs	r7, r7, #1
 8028c06:	9604      	str	r6, [sp, #16]
 8028c08:	2e00      	cmp	r6, #0
 8028c0a:	d1db      	bne.n	8028bc4 <__ieee754_sqrt+0xe8>
 8028c0c:	431a      	orrs	r2, r3
 8028c0e:	d01f      	beq.n	8028c50 <__ieee754_sqrt+0x174>
 8028c10:	4e23      	ldr	r6, [pc, #140]	@ (8028ca0 <__ieee754_sqrt+0x1c4>)
 8028c12:	4f24      	ldr	r7, [pc, #144]	@ (8028ca4 <__ieee754_sqrt+0x1c8>)
 8028c14:	6830      	ldr	r0, [r6, #0]
 8028c16:	6871      	ldr	r1, [r6, #4]
 8028c18:	683a      	ldr	r2, [r7, #0]
 8028c1a:	687b      	ldr	r3, [r7, #4]
 8028c1c:	9200      	str	r2, [sp, #0]
 8028c1e:	9301      	str	r3, [sp, #4]
 8028c20:	6832      	ldr	r2, [r6, #0]
 8028c22:	6873      	ldr	r3, [r6, #4]
 8028c24:	9202      	str	r2, [sp, #8]
 8028c26:	9303      	str	r3, [sp, #12]
 8028c28:	9a00      	ldr	r2, [sp, #0]
 8028c2a:	9b01      	ldr	r3, [sp, #4]
 8028c2c:	f7d9 ffce 	bl	8002bcc <__aeabi_dsub>
 8028c30:	0002      	movs	r2, r0
 8028c32:	000b      	movs	r3, r1
 8028c34:	9802      	ldr	r0, [sp, #8]
 8028c36:	9903      	ldr	r1, [sp, #12]
 8028c38:	f7d7 fc4a 	bl	80004d0 <__aeabi_dcmple>
 8028c3c:	2800      	cmp	r0, #0
 8028c3e:	d007      	beq.n	8028c50 <__ieee754_sqrt+0x174>
 8028c40:	6830      	ldr	r0, [r6, #0]
 8028c42:	6871      	ldr	r1, [r6, #4]
 8028c44:	683a      	ldr	r2, [r7, #0]
 8028c46:	687b      	ldr	r3, [r7, #4]
 8028c48:	1c67      	adds	r7, r4, #1
 8028c4a:	d10f      	bne.n	8028c6c <__ieee754_sqrt+0x190>
 8028c4c:	9c04      	ldr	r4, [sp, #16]
 8028c4e:	3501      	adds	r5, #1
 8028c50:	4b15      	ldr	r3, [pc, #84]	@ (8028ca8 <__ieee754_sqrt+0x1cc>)
 8028c52:	106a      	asrs	r2, r5, #1
 8028c54:	18d2      	adds	r2, r2, r3
 8028c56:	0863      	lsrs	r3, r4, #1
 8028c58:	07ed      	lsls	r5, r5, #31
 8028c5a:	d502      	bpl.n	8028c62 <__ieee754_sqrt+0x186>
 8028c5c:	2180      	movs	r1, #128	@ 0x80
 8028c5e:	0609      	lsls	r1, r1, #24
 8028c60:	430b      	orrs	r3, r1
 8028c62:	9905      	ldr	r1, [sp, #20]
 8028c64:	001c      	movs	r4, r3
 8028c66:	0509      	lsls	r1, r1, #20
 8028c68:	188d      	adds	r5, r1, r2
 8028c6a:	e750      	b.n	8028b0e <__ieee754_sqrt+0x32>
 8028c6c:	f7d8 fd3e 	bl	80016ec <__aeabi_dadd>
 8028c70:	6877      	ldr	r7, [r6, #4]
 8028c72:	6836      	ldr	r6, [r6, #0]
 8028c74:	0002      	movs	r2, r0
 8028c76:	000b      	movs	r3, r1
 8028c78:	0030      	movs	r0, r6
 8028c7a:	0039      	movs	r1, r7
 8028c7c:	f7d7 fc1e 	bl	80004bc <__aeabi_dcmplt>
 8028c80:	2800      	cmp	r0, #0
 8028c82:	d004      	beq.n	8028c8e <__ieee754_sqrt+0x1b2>
 8028c84:	3402      	adds	r4, #2
 8028c86:	4263      	negs	r3, r4
 8028c88:	4163      	adcs	r3, r4
 8028c8a:	18ed      	adds	r5, r5, r3
 8028c8c:	e7e0      	b.n	8028c50 <__ieee754_sqrt+0x174>
 8028c8e:	2301      	movs	r3, #1
 8028c90:	3401      	adds	r4, #1
 8028c92:	439c      	bics	r4, r3
 8028c94:	e7dc      	b.n	8028c50 <__ieee754_sqrt+0x174>
 8028c96:	46c0      	nop			@ (mov r8, r8)
 8028c98:	7ff00000 	.word	0x7ff00000
 8028c9c:	fffffc01 	.word	0xfffffc01
 8028ca0:	20000440 	.word	0x20000440
 8028ca4:	20000438 	.word	0x20000438
 8028ca8:	3fe00000 	.word	0x3fe00000

08028cac <_init>:
 8028cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028cae:	46c0      	nop			@ (mov r8, r8)
 8028cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028cb2:	bc08      	pop	{r3}
 8028cb4:	469e      	mov	lr, r3
 8028cb6:	4770      	bx	lr

08028cb8 <_fini>:
 8028cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028cba:	46c0      	nop			@ (mov r8, r8)
 8028cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028cbe:	bc08      	pop	{r3}
 8028cc0:	469e      	mov	lr, r3
 8028cc2:	4770      	bx	lr
