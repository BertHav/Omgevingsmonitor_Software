
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002568c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d10  08025750  08025750  00026750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029460  08029460  0002b434  2**0
                  CONTENTS
  4 .ARM          00000008  08029460  08029460  0002a460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029468  08029468  0002b434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029468  08029468  0002a468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802946c  0802946c  0002a46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000434  20000000  08029470  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000314c  20000434  080298a4  0002b434  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003580  080298a4  0002b580  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002b434  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003561d  00000000  00000000  0002b45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000990b  00000000  00000000  00060a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c38  00000000  00000000  0006a388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000020d3  00000000  00000000  0006cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023705  00000000  00000000  0006f093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00043ebe  00000000  00000000  00092798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1d02  00000000  00000000  000d6656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00178358  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b3b4  00000000  00000000  0017840c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001837c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0018382d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00185da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000434 	.word	0x20000434
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08025734 	.word	0x08025734

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000438 	.word	0x20000438
 8000104:	08025734 	.word	0x08025734

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	080285f4 	.word	0x080285f4
 8000e0c:	08028634 	.word	0x08028634
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08028670 	.word	0x08028670
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8003654:	4b02      	ldr	r3, [pc, #8]	@ (8003660 <forceNTPupdate+0x10>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000628 	.word	0x20000628

08003664 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 800366c:	f00d fbb2 	bl	8010dd4 <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <setESPTimeStamp+0x20>)
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b002      	add	sp, #8
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	20000624 	.word	0x20000624

08003688 <setCharges>:
void setCharges(){
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800368c:	f003 fb14 	bl	8006cb8 <ReadBatteryVoltage>
 8003690:	1c02      	adds	r2, r0, #0
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <setCharges+0x3c>)
 8003694:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 8003696:	f003 fb71 	bl	8006d7c <ReadSolarVoltage>
 800369a:	0003      	movs	r3, r0
 800369c:	0018      	movs	r0, r3
 800369e:	f7ff fe8f 	bl	80033c0 <__aeabi_i2d>
 80036a2:	2200      	movs	r2, #0
 80036a4:	4b08      	ldr	r3, [pc, #32]	@ (80036c8 <setCharges+0x40>)
 80036a6:	f7fe fb85 	bl	8001db4 <__aeabi_ddiv>
 80036aa:	0002      	movs	r2, r0
 80036ac:	000b      	movs	r3, r1
 80036ae:	0010      	movs	r0, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	f7ff ff1f 	bl	80034f4 <__aeabi_d2f>
 80036b6:	1c02      	adds	r2, r0, #0
 80036b8:	4b04      	ldr	r3, [pc, #16]	@ (80036cc <setCharges+0x44>)
 80036ba:	601a      	str	r2, [r3, #0]
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	2000057c 	.word	0x2000057c
 80036c8:	408f4000 	.word	0x408f4000
 80036cc:	20000580 	.word	0x20000580

080036d0 <checkEEprom>:
bool checkEEprom(){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80036d6:	4b15      	ldr	r3, [pc, #84]	@ (800372c <checkEEprom+0x5c>)
 80036d8:	4815      	ldr	r0, [pc, #84]	@ (8003730 <checkEEprom+0x60>)
 80036da:	220c      	movs	r2, #12
 80036dc:	0019      	movs	r1, r3
 80036de:	f005 fc31 	bl	8008f44 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e00e      	b.n	8003708 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80036ea:	1dfb      	adds	r3, r7, #7
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4a0f      	ldr	r2, [pc, #60]	@ (800372c <checkEEprom+0x5c>)
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003734 <checkEEprom+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	18d2      	adds	r2, r2, r3
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <checkEEprom+0x64>)
 80036fc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	3201      	adds	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b0b      	cmp	r3, #11
 800370e:	d9ec      	bls.n	80036ea <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <checkEEprom+0x64>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	425a      	negs	r2, r3
 8003716:	4153      	adcs	r3, r2
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <checkEEprom+0x68>)
 800371c:	701a      	strb	r2, [r3, #0]
  return test;
 800371e:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <checkEEprom+0x68>)
 8003720:	781b      	ldrb	r3, [r3, #0]
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	20000668 	.word	0x20000668
 8003730:	0808000c 	.word	0x0808000c
 8003734:	20000674 	.word	0x20000674
 8003738:	20000678 	.word	0x20000678

0800373c <checkName>:
bool checkName(){
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003742:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <checkName+0x5c>)
 8003744:	4815      	ldr	r0, [pc, #84]	@ (800379c <checkName+0x60>)
 8003746:	2220      	movs	r2, #32
 8003748:	0019      	movs	r1, r3
 800374a:	f005 fbfb 	bl	8008f44 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e00e      	b.n	8003774 <checkName+0x38>
    configSum += nameConfig[i];
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	4a0f      	ldr	r2, [pc, #60]	@ (8003798 <checkName+0x5c>)
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	001a      	movs	r2, r3
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <checkName+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	18d2      	adds	r2, r2, r3
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <checkName+0x64>)
 8003768:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	1dfb      	adds	r3, r7, #7
 8003770:	3201      	adds	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b0b      	cmp	r3, #11
 800377a:	d9ec      	bls.n	8003756 <checkName+0x1a>
  }
  test = (configSum != 0);
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <checkName+0x64>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	4193      	sbcs	r3, r2
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <checkName+0x68>)
 8003788:	701a      	strb	r2, [r3, #0]
  return test;
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <checkName+0x68>)
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b002      	add	sp, #8
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	2000067c 	.word	0x2000067c
 800379c:	08080090 	.word	0x08080090
 80037a0:	2000069c 	.word	0x2000069c
 80037a4:	200006a0 	.word	0x200006a0

080037a8 <setHIDS>:


void setHIDS(float temp, float humid){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <setHIDS+0x20>)
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <setHIDS+0x20>)
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	20000634 	.word	0x20000634

080037cc <setVOC>:

void setVOC(uint16_t voc) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	0002      	movs	r2, r0
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 80037d8:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <setVOC+0x30>)
 80037da:	1dba      	adds	r2, r7, #6
 80037dc:	8812      	ldrh	r2, [r2, #0]
 80037de:	841a      	strh	r2, [r3, #32]
  if (voc > MeasVal.VOCIndexmax) {
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <setVOC+0x30>)
 80037e2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80037e4:	1dba      	adds	r2, r7, #6
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d903      	bls.n	80037f4 <setVOC+0x28>
    MeasVal.VOCIndexmax = voc;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <setVOC+0x30>)
 80037ee:	1dba      	adds	r2, r7, #6
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	845a      	strh	r2, [r3, #34]	@ 0x22
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000634 	.word	0x20000634

08003800 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <setMic+0x28>)
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	629a      	str	r2, [r3, #40]	@ 0x28
  MeasVal.dBApeak = dBmax;
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <setMic+0x28>)
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.dBAaverage = dBAavg;
 8003818:	4b03      	ldr	r3, [pc, #12]	@ (8003828 <setMic+0x28>)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	20000634 	.word	0x20000634

0800382c <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	0002      	movs	r2, r0
 8003834:	1dbb      	adds	r3, r7, #6
 8003836:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8003838:	1dbb      	adds	r3, r7, #6
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	0018      	movs	r0, r3
 800383e:	f7fd fec7 	bl	80015d0 <__aeabi_i2f>
 8003842:	1c03      	adds	r3, r0, #0
 8003844:	490d      	ldr	r1, [pc, #52]	@ (800387c <setPM2p5+0x50>)
 8003846:	1c18      	adds	r0, r3, #0
 8003848:	f7fd f9c4 	bl	8000bd4 <__aeabi_fdiv>
 800384c:	1c03      	adds	r3, r0, #0
 800384e:	1c1a      	adds	r2, r3, #0
 8003850:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <setPM2p5+0x54>)
 8003852:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <setPM2p5+0x54>)
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <setPM2p5+0x54>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	1c19      	adds	r1, r3, #0
 800385e:	1c10      	adds	r0, r2, #0
 8003860:	f7fc fe7a 	bl	8000558 <__aeabi_fcmpgt>
 8003864:	1e03      	subs	r3, r0, #0
 8003866:	d100      	bne.n	800386a <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8003868:	e003      	b.n	8003872 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 800386a:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <setPM2p5+0x54>)
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <setPM2p5+0x54>)
 8003870:	60da      	str	r2, [r3, #12]
}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	41200000 	.word	0x41200000
 8003880:	20000634 	.word	0x20000634

08003884 <setPM10>:

void setPM10(uint16_t PM10) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	0002      	movs	r2, r0
 800388c:	1dbb      	adds	r3, r7, #6
 800388e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8003890:	1dbb      	adds	r3, r7, #6
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	0018      	movs	r0, r3
 8003896:	f7fd fe9b 	bl	80015d0 <__aeabi_i2f>
 800389a:	1c03      	adds	r3, r0, #0
 800389c:	490d      	ldr	r1, [pc, #52]	@ (80038d4 <setPM10+0x50>)
 800389e:	1c18      	adds	r0, r3, #0
 80038a0:	f7fd f998 	bl	8000bd4 <__aeabi_fdiv>
 80038a4:	1c03      	adds	r3, r0, #0
 80038a6:	1c1a      	adds	r2, r3, #0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <setPM10+0x54>)
 80038aa:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80038ac:	4b0a      	ldr	r3, [pc, #40]	@ (80038d8 <setPM10+0x54>)
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <setPM10+0x54>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	1c19      	adds	r1, r3, #0
 80038b6:	1c10      	adds	r0, r2, #0
 80038b8:	f7fc fe4e 	bl	8000558 <__aeabi_fcmpgt>
 80038bc:	1e03      	subs	r3, r0, #0
 80038be:	d100      	bne.n	80038c2 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 80038c0:	e003      	b.n	80038ca <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 80038c2:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <setPM10+0x54>)
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	4b04      	ldr	r3, [pc, #16]	@ (80038d8 <setPM10+0x54>)
 80038c8:	615a      	str	r2, [r3, #20]
}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b002      	add	sp, #8
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	41200000 	.word	0x41200000
 80038d8:	20000634 	.word	0x20000634

080038dc <setNOx>:

void setNOx(uint16_t nox) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	0002      	movs	r2, r0
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 80038e8:	4b08      	ldr	r3, [pc, #32]	@ (800390c <setNOx+0x30>)
 80038ea:	1dba      	adds	r2, r7, #6
 80038ec:	8812      	ldrh	r2, [r2, #0]
 80038ee:	849a      	strh	r2, [r3, #36]	@ 0x24
  if (nox > MeasVal.airNOxmax) {
 80038f0:	4b06      	ldr	r3, [pc, #24]	@ (800390c <setNOx+0x30>)
 80038f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038f4:	1dba      	adds	r2, r7, #6
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d903      	bls.n	8003904 <setNOx+0x28>
    MeasVal.airNOxmax = nox;
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <setNOx+0x30>)
 80038fe:	1dba      	adds	r2, r7, #6
 8003900:	8812      	ldrh	r2, [r2, #0]
 8003902:	84da      	strh	r2, [r3, #38]	@ 0x26
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000634 	.word	0x20000634

08003910 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8003914:	f007 fb34 	bl	800af80 <sen5x_Get_sen5x_enable_state>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d008      	beq.n	800392e <resetMaxMeasurementValues+0x1e>
    MeasVal.PM2p5max = 0.0f;
 800391c:	4b07      	ldr	r3, [pc, #28]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 800391e:	2200      	movs	r2, #0
 8003920:	60da      	str	r2, [r3, #12]
    MeasVal.PM10p0max = 0.0f;
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 8003924:	2200      	movs	r2, #0
 8003926:	615a      	str	r2, [r3, #20]
    MeasVal.airNOxmax = 0;
 8003928:	4b04      	ldr	r3, [pc, #16]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 800392a:	2200      	movs	r2, #0
 800392c:	84da      	strh	r2, [r3, #38]	@ 0x26
  }
  MeasVal.VOCIndexmax = 0;
 800392e:	4b03      	ldr	r3, [pc, #12]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 8003930:	2200      	movs	r2, #0
 8003932:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	20000634 	.word	0x20000634

08003940 <SetConfigMode>:

void SetConfigMode(){
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <SetConfigMode+0x30>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	4053      	eors	r3, r2
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8003952:	4a08      	ldr	r2, [pc, #32]	@ (8003974 <SetConfigMode+0x34>)
 8003954:	4b08      	ldr	r3, [pc, #32]	@ (8003978 <SetConfigMode+0x38>)
 8003956:	0019      	movs	r1, r3
 8003958:	2003      	movs	r0, #3
 800395a:	f00c fdef 	bl	801053c <CreateLine>
  }
  ReconfigSet = true;
 800395e:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <SetConfigMode+0x30>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <SetConfigMode+0x3c>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	2000055b 	.word	0x2000055b
 8003974:	08025750 	.word	0x08025750
 8003978:	08025770 	.word	0x08025770
 800397c:	20000203 	.word	0x20000203

08003980 <GetReconfigMode>:

bool GetReconfigMode() {
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8003984:	4b02      	ldr	r3, [pc, #8]	@ (8003990 <GetReconfigMode+0x10>)
 8003986:	781b      	ldrb	r3, [r3, #0]
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	2000055b 	.word	0x2000055b

08003994 <ESP_GetUID>:

void ESP_GetUID(){
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003998:	f00d fa66 	bl	8010e68 <HAL_GetUIDw0>
 800399c:	0002      	movs	r2, r0
 800399e:	4b07      	ldr	r3, [pc, #28]	@ (80039bc <ESP_GetUID+0x28>)
 80039a0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039a2:	f00d fa6b 	bl	8010e7c <HAL_GetUIDw1>
 80039a6:	0002      	movs	r2, r0
 80039a8:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <ESP_GetUID+0x28>)
 80039aa:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039ac:	f00d fa70 	bl	8010e90 <HAL_GetUIDw2>
 80039b0:	0002      	movs	r2, r0
 80039b2:	4b02      	ldr	r3, [pc, #8]	@ (80039bc <ESP_GetUID+0x28>)
 80039b4:	609a      	str	r2, [r3, #8]
}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000564 	.word	0x20000564

080039c0 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80039c8:	4b08      	ldr	r3, [pc, #32]	@ (80039ec <ESP_Init+0x2c>)
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80039ce:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <ESP_Init+0x30>)
 80039d0:	2202      	movs	r2, #2
 80039d2:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 80039d4:	f7ff ffde 	bl	8003994 <ESP_GetUID>
  beurs = checkEEprom();
 80039d8:	f7ff fe7a 	bl	80036d0 <checkEEprom>
 80039dc:	0003      	movs	r3, r0
 80039de:	001a      	movs	r2, r3
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <ESP_Init+0x34>)
 80039e2:	701a      	strb	r2, [r3, #0]
}
 80039e4:	46c0      	nop			@ (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000450 	.word	0x20000450
 80039f0:	2000002c 	.word	0x2000002c
 80039f4:	2000055e 	.word	0x2000055e

080039f8 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	000a      	movs	r2, r1
 8003a02:	1cbb      	adds	r3, r7, #2
 8003a04:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a06:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <ESP_Send+0x54>)
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	250f      	movs	r5, #15
 8003a0c:	197c      	adds	r4, r7, r5
 8003a0e:	1cbb      	adds	r3, r7, #2
 8003a10:	881a      	ldrh	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0019      	movs	r1, r3
 8003a16:	f015 ff9f 	bl	8019958 <HAL_UART_Transmit_DMA>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a1e:	197b      	adds	r3, r7, r5
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a26:	4a0a      	ldr	r2, [pc, #40]	@ (8003a50 <ESP_Send+0x58>)
 8003a28:	4b0a      	ldr	r3, [pc, #40]	@ (8003a54 <ESP_Send+0x5c>)
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f00c fd85 	bl	801053c <CreateLine>
    return false;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e006      	b.n	8003a44 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4b07      	ldr	r3, [pc, #28]	@ (8003a58 <ESP_Send+0x60>)
 8003a3a:	0011      	movs	r1, r2
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f01e fd05 	bl	802244c <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8003a42:	2301      	movs	r3, #1
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b004      	add	sp, #16
 8003a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4c:	20000450 	.word	0x20000450
 8003a50:	08025774 	.word	0x08025774
 8003a54:	08025794 	.word	0x08025794
 8003a58:	08025798 	.word	0x08025798

08003a5c <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	000a      	movs	r2, r1
 8003a66:	1cbb      	adds	r3, r7, #2
 8003a68:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8003a6a:	4b52      	ldr	r3, [pc, #328]	@ (8003bb4 <ESP_Receive+0x158>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003a70:	260f      	movs	r6, #15
 8003a72:	19bb      	adds	r3, r7, r6
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003a78:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb8 <ESP_Receive+0x15c>)
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	250e      	movs	r5, #14
 8003a7e:	197c      	adds	r4, r7, r5
 8003a80:	1cbb      	adds	r3, r7, #2
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	0019      	movs	r1, r3
 8003a88:	f015 fff6 	bl	8019a78 <HAL_UART_Receive_DMA>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a90:	002c      	movs	r4, r5
 8003a92:	193b      	adds	r3, r7, r4
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d100      	bne.n	8003a9c <ESP_Receive+0x40>
 8003a9a:	e085      	b.n	8003ba8 <ESP_Receive+0x14c>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003a9c:	4b46      	ldr	r3, [pc, #280]	@ (8003bb8 <ESP_Receive+0x15c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2284      	movs	r2, #132	@ 0x84
 8003aa2:	589b      	ldr	r3, [r3, r2]
 8003aa4:	4a45      	ldr	r2, [pc, #276]	@ (8003bbc <ESP_Receive+0x160>)
 8003aa6:	4946      	ldr	r1, [pc, #280]	@ (8003bc0 <ESP_Receive+0x164>)
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	f00c fd47 	bl	801053c <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003aae:	193b      	adds	r3, r7, r4
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d008      	beq.n	8003aca <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003ab8:	4a42      	ldr	r2, [pc, #264]	@ (8003bc4 <ESP_Receive+0x168>)
 8003aba:	4b41      	ldr	r3, [pc, #260]	@ (8003bc0 <ESP_Receive+0x164>)
 8003abc:	0019      	movs	r1, r3
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f00c fd3c 	bl	801053c <CreateLine>
      reset = true;
 8003ac4:	19bb      	adds	r3, r7, r6
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003aca:	230e      	movs	r3, #14
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d005      	beq.n	8003ae2 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003ad6:	4a3c      	ldr	r2, [pc, #240]	@ (8003bc8 <ESP_Receive+0x16c>)
 8003ad8:	4b39      	ldr	r3, [pc, #228]	@ (8003bc0 <ESP_Receive+0x164>)
 8003ada:	0019      	movs	r1, r3
 8003adc:	2001      	movs	r0, #1
 8003ade:	f00c fd2d 	bl	801053c <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003ae2:	230e      	movs	r3, #14
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2204      	movs	r2, #4
 8003aea:	4013      	ands	r3, r2
 8003aec:	d005      	beq.n	8003afa <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003aee:	4a37      	ldr	r2, [pc, #220]	@ (8003bcc <ESP_Receive+0x170>)
 8003af0:	4b33      	ldr	r3, [pc, #204]	@ (8003bc0 <ESP_Receive+0x164>)
 8003af2:	0019      	movs	r1, r3
 8003af4:	2001      	movs	r0, #1
 8003af6:	f00c fd21 	bl	801053c <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003afa:	230e      	movs	r3, #14
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2208      	movs	r2, #8
 8003b02:	4013      	ands	r3, r2
 8003b04:	d005      	beq.n	8003b12 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003b06:	4a32      	ldr	r2, [pc, #200]	@ (8003bd0 <ESP_Receive+0x174>)
 8003b08:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc0 <ESP_Receive+0x164>)
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f00c fd15 	bl	801053c <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b12:	230e      	movs	r3, #14
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2210      	movs	r2, #16
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d005      	beq.n	8003b2a <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd4 <ESP_Receive+0x178>)
 8003b20:	4b27      	ldr	r3, [pc, #156]	@ (8003bc0 <ESP_Receive+0x164>)
 8003b22:	0019      	movs	r1, r3
 8003b24:	2001      	movs	r0, #1
 8003b26:	f00c fd09 	bl	801053c <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b2a:	230e      	movs	r3, #14
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2220      	movs	r2, #32
 8003b32:	4013      	ands	r3, r2
 8003b34:	d005      	beq.n	8003b42 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003b36:	4a28      	ldr	r2, [pc, #160]	@ (8003bd8 <ESP_Receive+0x17c>)
 8003b38:	4b21      	ldr	r3, [pc, #132]	@ (8003bc0 <ESP_Receive+0x164>)
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	f00c fcfd 	bl	801053c <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003b42:	230e      	movs	r3, #14
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2240      	movs	r2, #64	@ 0x40
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d005      	beq.n	8003b5a <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003b4e:	4a23      	ldr	r2, [pc, #140]	@ (8003bdc <ESP_Receive+0x180>)
 8003b50:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc0 <ESP_Receive+0x164>)
 8003b52:	0019      	movs	r1, r3
 8003b54:	2001      	movs	r0, #1
 8003b56:	f00c fcf1 	bl	801053c <CreateLine>
    }
#endif
    if (reset) {
 8003b5a:	230f      	movs	r3, #15
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01c      	beq.n	8003b9e <ESP_Receive+0x142>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003b64:	4b1e      	ldr	r3, [pc, #120]	@ (8003be0 <ESP_Receive+0x184>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	2101      	movs	r1, #1
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f00e fbc3 	bl	80122f6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003b70:	2001      	movs	r0, #1
 8003b72:	f00d f939 	bl	8010de8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8003b76:	2380      	movs	r3, #128	@ 0x80
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	481a      	ldr	r0, [pc, #104]	@ (8003be4 <ESP_Receive+0x188>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	0019      	movs	r1, r3
 8003b80:	f00e fbb9 	bl	80122f6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003b84:	2001      	movs	r0, #1
 8003b86:	f00d f92f 	bl	8010de8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8003b8a:	4b15      	ldr	r3, [pc, #84]	@ (8003be0 <ESP_Receive+0x184>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2102      	movs	r1, #2
 8003b90:	0018      	movs	r0, r3
 8003b92:	f00e fbb0 	bl	80122f6 <HAL_GPIO_WritePin>
      SetAllREDLED();
 8003b96:	f00b fc43 	bl	800f420 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 8003b9a:	f00d fde4 	bl	8011766 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003b9e:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <ESP_Receive+0x158>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
    return false;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <ESP_Receive+0x14e>
  }
  return true;
 8003ba8:	2301      	movs	r3, #1
}
 8003baa:	0018      	movs	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b005      	add	sp, #20
 8003bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	20000454 	.word	0x20000454
 8003bb8:	20000450 	.word	0x20000450
 8003bbc:	080257a8 	.word	0x080257a8
 8003bc0:	08025794 	.word	0x08025794
 8003bc4:	080257d8 	.word	0x080257d8
 8003bc8:	080257fc 	.word	0x080257fc
 8003bcc:	08025820 	.word	0x08025820
 8003bd0:	08025844 	.word	0x08025844
 8003bd4:	08025868 	.word	0x08025868
 8003bd8:	08025894 	.word	0x08025894
 8003bdc:	080258c4 	.word	0x080258c4
 8003be0:	50001c00 	.word	0x50001c00
 8003be4:	50000800 	.word	0x50000800

08003be8 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003bf0:	4b39      	ldr	r3, [pc, #228]	@ (8003cd8 <HAL_UART_ErrorCallback+0xf0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d16b      	bne.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2284      	movs	r2, #132	@ 0x84
 8003bfe:	589b      	ldr	r3, [r3, r2]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d065      	beq.n	8003cd0 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2284      	movs	r2, #132	@ 0x84
 8003c08:	589b      	ldr	r3, [r3, r2]
 8003c0a:	4a34      	ldr	r2, [pc, #208]	@ (8003cdc <HAL_UART_ErrorCallback+0xf4>)
 8003c0c:	4934      	ldr	r1, [pc, #208]	@ (8003ce0 <HAL_UART_ErrorCallback+0xf8>)
 8003c0e:	2003      	movs	r0, #3
 8003c10:	f00c fc94 	bl	801053c <CreateLine>
    switch (huart->ErrorCode) {
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2284      	movs	r2, #132	@ 0x84
 8003c18:	589b      	ldr	r3, [r3, r2]
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d851      	bhi.n	8003cc2 <HAL_UART_ErrorCallback+0xda>
 8003c1e:	009a      	lsls	r2, r3, #2
 8003c20:	4b30      	ldr	r3, [pc, #192]	@ (8003ce4 <HAL_UART_ErrorCallback+0xfc>)
 8003c22:	18d3      	adds	r3, r2, r3
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8003c28:	4a2f      	ldr	r2, [pc, #188]	@ (8003ce8 <HAL_UART_ErrorCallback+0x100>)
 8003c2a:	4b30      	ldr	r3, [pc, #192]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f00c fc84 	bl	801053c <CreateLine>
        break;
 8003c34:	e04d      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 8003c36:	4a2e      	ldr	r2, [pc, #184]	@ (8003cf0 <HAL_UART_ErrorCallback+0x108>)
 8003c38:	4b2c      	ldr	r3, [pc, #176]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	f00c fc7d 	bl	801053c <CreateLine>
        break;
 8003c42:	e046      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8003c44:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf4 <HAL_UART_ErrorCallback+0x10c>)
 8003c46:	4b29      	ldr	r3, [pc, #164]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c48:	0019      	movs	r1, r3
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f00c fc76 	bl	801053c <CreateLine>
        break;
 8003c50:	e03f      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8003c52:	4a29      	ldr	r2, [pc, #164]	@ (8003cf8 <HAL_UART_ErrorCallback+0x110>)
 8003c54:	4b25      	ldr	r3, [pc, #148]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c56:	0019      	movs	r1, r3
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f00c fc6f 	bl	801053c <CreateLine>
        break;
 8003c5e:	e038      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8003c60:	4a26      	ldr	r2, [pc, #152]	@ (8003cfc <HAL_UART_ErrorCallback+0x114>)
 8003c62:	4b22      	ldr	r3, [pc, #136]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c64:	0019      	movs	r1, r3
 8003c66:	2001      	movs	r0, #1
 8003c68:	f00c fc68 	bl	801053c <CreateLine>
        break;
 8003c6c:	e031      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8003c6e:	4a24      	ldr	r2, [pc, #144]	@ (8003d00 <HAL_UART_ErrorCallback+0x118>)
 8003c70:	4b1e      	ldr	r3, [pc, #120]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c72:	0019      	movs	r1, r3
 8003c74:	2001      	movs	r0, #1
 8003c76:	f00c fc61 	bl	801053c <CreateLine>
        break;
 8003c7a:	e02a      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8003c7c:	4a21      	ldr	r2, [pc, #132]	@ (8003d04 <HAL_UART_ErrorCallback+0x11c>)
 8003c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c80:	0019      	movs	r1, r3
 8003c82:	2001      	movs	r0, #1
 8003c84:	f00c fc5a 	bl	801053c <CreateLine>
        break;
 8003c88:	e023      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8003c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003d08 <HAL_UART_ErrorCallback+0x120>)
 8003c8c:	4b17      	ldr	r3, [pc, #92]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c8e:	0019      	movs	r1, r3
 8003c90:	2001      	movs	r0, #1
 8003c92:	f00c fc53 	bl	801053c <CreateLine>
        break;
 8003c96:	e01c      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8003c98:	4a1c      	ldr	r2, [pc, #112]	@ (8003d0c <HAL_UART_ErrorCallback+0x124>)
 8003c9a:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c9c:	0019      	movs	r1, r3
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f00c fc4c 	bl	801053c <CreateLine>
        break;
 8003ca4:	e015      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8003ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8003d10 <HAL_UART_ErrorCallback+0x128>)
 8003ca8:	4b10      	ldr	r3, [pc, #64]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003caa:	0019      	movs	r1, r3
 8003cac:	2001      	movs	r0, #1
 8003cae:	f00c fc45 	bl	801053c <CreateLine>
        break;
 8003cb2:	e00e      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8003cb4:	4a17      	ldr	r2, [pc, #92]	@ (8003d14 <HAL_UART_ErrorCallback+0x12c>)
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003cb8:	0019      	movs	r1, r3
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f00c fc3e 	bl	801053c <CreateLine>
        break;
 8003cc0:	e007      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8003cc2:	4a15      	ldr	r2, [pc, #84]	@ (8003d18 <HAL_UART_ErrorCallback+0x130>)
 8003cc4:	4b09      	ldr	r3, [pc, #36]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f00c fc37 	bl	801053c <CreateLine>
 8003cce:	e000      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      return;
 8003cd0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000450 	.word	0x20000450
 8003cdc:	080258f4 	.word	0x080258f4
 8003ce0:	08025770 	.word	0x08025770
 8003ce4:	0802873c 	.word	0x0802873c
 8003ce8:	08025924 	.word	0x08025924
 8003cec:	08025794 	.word	0x08025794
 8003cf0:	08025958 	.word	0x08025958
 8003cf4:	08025984 	.word	0x08025984
 8003cf8:	080259b8 	.word	0x080259b8
 8003cfc:	080259e4 	.word	0x080259e4
 8003d00:	08025a0c 	.word	0x08025a0c
 8003d04:	08025a3c 	.word	0x08025a3c
 8003d08:	08025a74 	.word	0x08025a74
 8003d0c:	08025aac 	.word	0x08025aac
 8003d10:	08025ad4 	.word	0x08025ad4
 8003d14:	08025afc 	.word	0x08025afc
 8003d18:	08025b28 	.word	0x08025b28

08003d1c <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	e010      	b.n	8003d4e <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	001a      	movs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	1898      	adds	r0, r3, r2
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	18d3      	adds	r3, r2, r3
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	001a      	movs	r2, r3
 8003d40:	4b07      	ldr	r3, [pc, #28]	@ (8003d60 <uint8ArrayToString+0x44>)
 8003d42:	0019      	movs	r1, r3
 8003d44:	f01e fbf2 	bl	802252c <siprintf>
  for (int i = 0; i < 12; i++) {
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b0b      	cmp	r3, #11
 8003d52:	ddeb      	ble.n	8003d2c <uint8ArrayToString+0x10>
  }
}
 8003d54:	46c0      	nop			@ (mov r8, r8)
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b004      	add	sp, #16
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	08025b4c 	.word	0x08025b4c

08003d64 <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8003d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d66:	b089      	sub	sp, #36	@ 0x24
 8003d68:	af04      	add	r7, sp, #16
 8003d6a:	6039      	str	r1, [r7, #0]
 8003d6c:	0011      	movs	r1, r2
 8003d6e:	1dfb      	adds	r3, r7, #7
 8003d70:	1c02      	adds	r2, r0, #0
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	1dbb      	adds	r3, r7, #6
 8003d76:	1c0a      	adds	r2, r1, #0
 8003d78:	701a      	strb	r2, [r3, #0]
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
#ifdef LONGDATAGRAM
  static char Buffer[25];
#endif
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003d7a:	4b20      	ldr	r3, [pc, #128]	@ (8003dfc <CreateMessage+0x98>)
 8003d7c:	4820      	ldr	r0, [pc, #128]	@ (8003e00 <CreateMessage+0x9c>)
 8003d7e:	220c      	movs	r2, #12
 8003d80:	0019      	movs	r1, r3
 8003d82:	f005 f8df 	bl	8008f44 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003d86:	4b1f      	ldr	r3, [pc, #124]	@ (8003e04 <CreateMessage+0xa0>)
 8003d88:	481f      	ldr	r0, [pc, #124]	@ (8003e08 <CreateMessage+0xa4>)
 8003d8a:	220c      	movs	r2, #12
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	f005 f8d9 	bl	8008f44 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003d92:	4b1e      	ldr	r3, [pc, #120]	@ (8003e0c <CreateMessage+0xa8>)
 8003d94:	481e      	ldr	r0, [pc, #120]	@ (8003e10 <CreateMessage+0xac>)
 8003d96:	220c      	movs	r2, #12
 8003d98:	0019      	movs	r1, r3
 8003d9a:	f005 f8d3 	bl	8008f44 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003e14 <CreateMessage+0xb0>)
 8003da0:	481d      	ldr	r0, [pc, #116]	@ (8003e18 <CreateMessage+0xb4>)
 8003da2:	220c      	movs	r2, #12
 8003da4:	0019      	movs	r1, r3
 8003da6:	f005 f8cd 	bl	8008f44 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003daa:	4b1c      	ldr	r3, [pc, #112]	@ (8003e1c <CreateMessage+0xb8>)
 8003dac:	481c      	ldr	r0, [pc, #112]	@ (8003e20 <CreateMessage+0xbc>)
 8003dae:	220c      	movs	r2, #12
 8003db0:	0019      	movs	r1, r3
 8003db2:	f005 f8c7 	bl	8008f44 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003db6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e24 <CreateMessage+0xc0>)
 8003db8:	481b      	ldr	r0, [pc, #108]	@ (8003e28 <CreateMessage+0xc4>)
 8003dba:	220c      	movs	r2, #12
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	f005 f8c1 	bl	8008f44 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e2c <CreateMessage+0xc8>)
 8003dc4:	481a      	ldr	r0, [pc, #104]	@ (8003e30 <CreateMessage+0xcc>)
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	0019      	movs	r1, r3
 8003dca:	f005 f8bb 	bl	8008f44 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003dce:	4b19      	ldr	r3, [pc, #100]	@ (8003e34 <CreateMessage+0xd0>)
 8003dd0:	4819      	ldr	r0, [pc, #100]	@ (8003e38 <CreateMessage+0xd4>)
 8003dd2:	220c      	movs	r2, #12
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	f005 f8b5 	bl	8008f44 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003dda:	4b18      	ldr	r3, [pc, #96]	@ (8003e3c <CreateMessage+0xd8>)
 8003ddc:	4818      	ldr	r0, [pc, #96]	@ (8003e40 <CreateMessage+0xdc>)
 8003dde:	220c      	movs	r2, #12
 8003de0:	0019      	movs	r1, r3
 8003de2:	f005 f8af 	bl	8008f44 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003de6:	f7ff fca9 	bl	800373c <checkName>
 8003dea:	1e03      	subs	r3, r0, #0
 8003dec:	d02e      	beq.n	8003e4c <CreateMessage+0xe8>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003dee:	4b15      	ldr	r3, [pc, #84]	@ (8003e44 <CreateMessage+0xe0>)
 8003df0:	4815      	ldr	r0, [pc, #84]	@ (8003e48 <CreateMessage+0xe4>)
 8003df2:	2220      	movs	r2, #32
 8003df4:	0019      	movs	r1, r3
 8003df6:	f005 f8a5 	bl	8008f44 <ReadUint8ArrayEEprom>
 8003dfa:	e02d      	b.n	8003e58 <CreateMessage+0xf4>
 8003dfc:	200006a4 	.word	0x200006a4
 8003e00:	0808000c 	.word	0x0808000c
 8003e04:	200006b0 	.word	0x200006b0
 8003e08:	08080018 	.word	0x08080018
 8003e0c:	200006bc 	.word	0x200006bc
 8003e10:	08080048 	.word	0x08080048
 8003e14:	200006c8 	.word	0x200006c8
 8003e18:	08080030 	.word	0x08080030
 8003e1c:	200006d4 	.word	0x200006d4
 8003e20:	0808006c 	.word	0x0808006c
 8003e24:	200006e0 	.word	0x200006e0
 8003e28:	08080078 	.word	0x08080078
 8003e2c:	200006ec 	.word	0x200006ec
 8003e30:	08080024 	.word	0x08080024
 8003e34:	200006f8 	.word	0x200006f8
 8003e38:	08080054 	.word	0x08080054
 8003e3c:	20000704 	.word	0x20000704
 8003e40:	08080060 	.word	0x08080060
 8003e44:	20000710 	.word	0x20000710
 8003e48:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e4c:	4bed      	ldr	r3, [pc, #948]	@ (8004204 <CreateMessage+0x4a0>)
 8003e4e:	4aee      	ldr	r2, [pc, #952]	@ (8004208 <CreateMessage+0x4a4>)
 8003e50:	6811      	ldr	r1, [r2, #0]
 8003e52:	6019      	str	r1, [r3, #0]
 8003e54:	7912      	ldrb	r2, [r2, #4]
 8003e56:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8003e58:	f7ff fc16 	bl	8003688 <setCharges>
  uint16_t index = 0;
 8003e5c:	260e      	movs	r6, #14
 8003e5e:	19bb      	adds	r3, r7, r6
 8003e60:	2200      	movs	r2, #0
 8003e62:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003e64:	19bb      	adds	r3, r7, r6
 8003e66:	881a      	ldrh	r2, [r3, #0]
 8003e68:	4be8      	ldr	r3, [pc, #928]	@ (800420c <CreateMessage+0x4a8>)
 8003e6a:	18d3      	adds	r3, r2, r3
 8003e6c:	4ae8      	ldr	r2, [pc, #928]	@ (8004210 <CreateMessage+0x4ac>)
 8003e6e:	0011      	movs	r1, r2
 8003e70:	0018      	movs	r0, r3
 8003e72:	f01e fb5b 	bl	802252c <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  uint8ArrayToString(Buffer, tempConfig);
 8003e76:	4ae7      	ldr	r2, [pc, #924]	@ (8004214 <CreateMessage+0x4b0>)
 8003e78:	4be7      	ldr	r3, [pc, #924]	@ (8004218 <CreateMessage+0x4b4>)
 8003e7a:	0011      	movs	r1, r2
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7ff ff4d 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8003e82:	4be6      	ldr	r3, [pc, #920]	@ (800421c <CreateMessage+0x4b8>)
 8003e84:	689c      	ldr	r4, [r3, #8]
 8003e86:	4be6      	ldr	r3, [pc, #920]	@ (8004220 <CreateMessage+0x4bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	1c18      	adds	r0, r3, #0
 8003e8c:	f7ff faea 	bl	8003464 <__aeabi_f2d>
 8003e90:	0002      	movs	r2, r0
 8003e92:	000b      	movs	r3, r1
 8003e94:	4ddb      	ldr	r5, [pc, #876]	@ (8004204 <CreateMessage+0x4a0>)
 8003e96:	49e3      	ldr	r1, [pc, #908]	@ (8004224 <CreateMessage+0x4c0>)
 8003e98:	48e3      	ldr	r0, [pc, #908]	@ (8004228 <CreateMessage+0x4c4>)
 8003e9a:	9202      	str	r2, [sp, #8]
 8003e9c:	9303      	str	r3, [sp, #12]
 8003e9e:	4bde      	ldr	r3, [pc, #888]	@ (8004218 <CreateMessage+0x4b4>)
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	002b      	movs	r3, r5
 8003ea4:	0022      	movs	r2, r4
 8003ea6:	f01e fb41 	bl	802252c <siprintf>
#endif
index = strlen(message);
 8003eaa:	4bd8      	ldr	r3, [pc, #864]	@ (800420c <CreateMessage+0x4a8>)
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7fc f95d 	bl	800016c <strlen>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	19bb      	adds	r3, r7, r6
 8003eb6:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003eb8:	1dbb      	adds	r3, r7, #6
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d019      	beq.n	8003ef4 <CreateMessage+0x190>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003ec0:	4bd2      	ldr	r3, [pc, #840]	@ (800420c <CreateMessage+0x4a8>)
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7fc f952 	bl	800016c <strlen>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	4bcf      	ldr	r3, [pc, #828]	@ (800420c <CreateMessage+0x4a8>)
 8003ece:	0011      	movs	r1, r2
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f7ff fd91 	bl	80039f8 <ESP_Send>
 8003ed6:	0003      	movs	r3, r0
 8003ed8:	001a      	movs	r2, r3
 8003eda:	4bd4      	ldr	r3, [pc, #848]	@ (800422c <CreateMessage+0x4c8>)
 8003edc:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003ede:	4bd4      	ldr	r3, [pc, #848]	@ (8004230 <CreateMessage+0x4cc>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	001a      	movs	r2, r3
 8003ee4:	4bd1      	ldr	r3, [pc, #836]	@ (800422c <CreateMessage+0x4c8>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	1e5a      	subs	r2, r3, #1
 8003eec:	4193      	sbcs	r3, r2
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	4bcf      	ldr	r3, [pc, #828]	@ (8004230 <CreateMessage+0x4cc>)
 8003ef2:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, humidConfig);
 8003ef4:	4acf      	ldr	r2, [pc, #828]	@ (8004234 <CreateMessage+0x4d0>)
 8003ef6:	4bc8      	ldr	r3, [pc, #800]	@ (8004218 <CreateMessage+0x4b4>)
 8003ef8:	0011      	movs	r1, r2
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7ff ff0e 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8003f00:	4bc6      	ldr	r3, [pc, #792]	@ (800421c <CreateMessage+0x4b8>)
 8003f02:	689c      	ldr	r4, [r3, #8]
 8003f04:	4bc6      	ldr	r3, [pc, #792]	@ (8004220 <CreateMessage+0x4bc>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	1c18      	adds	r0, r3, #0
 8003f0a:	f7ff faab 	bl	8003464 <__aeabi_f2d>
 8003f0e:	0002      	movs	r2, r0
 8003f10:	000b      	movs	r3, r1
 8003f12:	4dbc      	ldr	r5, [pc, #752]	@ (8004204 <CreateMessage+0x4a0>)
 8003f14:	49c8      	ldr	r1, [pc, #800]	@ (8004238 <CreateMessage+0x4d4>)
 8003f16:	48bd      	ldr	r0, [pc, #756]	@ (800420c <CreateMessage+0x4a8>)
 8003f18:	9202      	str	r2, [sp, #8]
 8003f1a:	9303      	str	r3, [sp, #12]
 8003f1c:	4bbe      	ldr	r3, [pc, #760]	@ (8004218 <CreateMessage+0x4b4>)
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	002b      	movs	r3, r5
 8003f22:	0022      	movs	r2, r4
 8003f24:	f01e fb02 	bl	802252c <siprintf>
#endif
  index += strlen(message);
 8003f28:	4bb8      	ldr	r3, [pc, #736]	@ (800420c <CreateMessage+0x4a8>)
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f7fc f91e 	bl	800016c <strlen>
 8003f30:	0003      	movs	r3, r0
 8003f32:	b299      	uxth	r1, r3
 8003f34:	220e      	movs	r2, #14
 8003f36:	18bb      	adds	r3, r7, r2
 8003f38:	18ba      	adds	r2, r7, r2
 8003f3a:	8812      	ldrh	r2, [r2, #0]
 8003f3c:	188a      	adds	r2, r1, r2
 8003f3e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f40:	1dbb      	adds	r3, r7, #6
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d019      	beq.n	8003f7c <CreateMessage+0x218>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f48:	4bb0      	ldr	r3, [pc, #704]	@ (800420c <CreateMessage+0x4a8>)
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7fc f90e 	bl	800016c <strlen>
 8003f50:	0003      	movs	r3, r0
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	4bad      	ldr	r3, [pc, #692]	@ (800420c <CreateMessage+0x4a8>)
 8003f56:	0011      	movs	r1, r2
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff fd4d 	bl	80039f8 <ESP_Send>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	001a      	movs	r2, r3
 8003f62:	4bb2      	ldr	r3, [pc, #712]	@ (800422c <CreateMessage+0x4c8>)
 8003f64:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003f66:	4bb2      	ldr	r3, [pc, #712]	@ (8004230 <CreateMessage+0x4cc>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	001a      	movs	r2, r3
 8003f6c:	4baf      	ldr	r3, [pc, #700]	@ (800422c <CreateMessage+0x4c8>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	4013      	ands	r3, r2
 8003f72:	1e5a      	subs	r2, r3, #1
 8003f74:	4193      	sbcs	r3, r2
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	4bad      	ldr	r3, [pc, #692]	@ (8004230 <CreateMessage+0x4cc>)
 8003f7a:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, vocConfig);
 8003f7c:	4aaf      	ldr	r2, [pc, #700]	@ (800423c <CreateMessage+0x4d8>)
 8003f7e:	4ba6      	ldr	r3, [pc, #664]	@ (8004218 <CreateMessage+0x4b4>)
 8003f80:	0011      	movs	r1, r2
 8003f82:	0018      	movs	r0, r3
 8003f84:	f7ff feca 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndexmax);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndexmax);
 8003f88:	4ba4      	ldr	r3, [pc, #656]	@ (800421c <CreateMessage+0x4b8>)
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	4ba4      	ldr	r3, [pc, #656]	@ (8004220 <CreateMessage+0x4bc>)
 8003f8e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003f90:	4c9c      	ldr	r4, [pc, #624]	@ (8004204 <CreateMessage+0x4a0>)
 8003f92:	49ab      	ldr	r1, [pc, #684]	@ (8004240 <CreateMessage+0x4dc>)
 8003f94:	489d      	ldr	r0, [pc, #628]	@ (800420c <CreateMessage+0x4a8>)
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	4b9f      	ldr	r3, [pc, #636]	@ (8004218 <CreateMessage+0x4b4>)
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	0023      	movs	r3, r4
 8003f9e:	f01e fac5 	bl	802252c <siprintf>
#endif
  index += strlen(message);
 8003fa2:	4b9a      	ldr	r3, [pc, #616]	@ (800420c <CreateMessage+0x4a8>)
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7fc f8e1 	bl	800016c <strlen>
 8003faa:	0003      	movs	r3, r0
 8003fac:	b299      	uxth	r1, r3
 8003fae:	220e      	movs	r2, #14
 8003fb0:	18bb      	adds	r3, r7, r2
 8003fb2:	18ba      	adds	r2, r7, r2
 8003fb4:	8812      	ldrh	r2, [r2, #0]
 8003fb6:	188a      	adds	r2, r1, r2
 8003fb8:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003fba:	1dbb      	adds	r3, r7, #6
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d019      	beq.n	8003ff6 <CreateMessage+0x292>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003fc2:	4b92      	ldr	r3, [pc, #584]	@ (800420c <CreateMessage+0x4a8>)
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7fc f8d1 	bl	800016c <strlen>
 8003fca:	0003      	movs	r3, r0
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	4b8f      	ldr	r3, [pc, #572]	@ (800420c <CreateMessage+0x4a8>)
 8003fd0:	0011      	movs	r1, r2
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f7ff fd10 	bl	80039f8 <ESP_Send>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	001a      	movs	r2, r3
 8003fdc:	4b93      	ldr	r3, [pc, #588]	@ (800422c <CreateMessage+0x4c8>)
 8003fde:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003fe0:	4b93      	ldr	r3, [pc, #588]	@ (8004230 <CreateMessage+0x4cc>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	001a      	movs	r2, r3
 8003fe6:	4b91      	ldr	r3, [pc, #580]	@ (800422c <CreateMessage+0x4c8>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	4013      	ands	r3, r2
 8003fec:	1e5a      	subs	r2, r3, #1
 8003fee:	4193      	sbcs	r3, r2
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4b8f      	ldr	r3, [pc, #572]	@ (8004230 <CreateMessage+0x4cc>)
 8003ff4:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, soundConfig);
 8003ff6:	4a93      	ldr	r2, [pc, #588]	@ (8004244 <CreateMessage+0x4e0>)
 8003ff8:	4b87      	ldr	r3, [pc, #540]	@ (8004218 <CreateMessage+0x4b4>)
 8003ffa:	0011      	movs	r1, r2
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f7ff fe8d 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 8004002:	4b86      	ldr	r3, [pc, #536]	@ (800421c <CreateMessage+0x4b8>)
 8004004:	689c      	ldr	r4, [r3, #8]
 8004006:	4b86      	ldr	r3, [pc, #536]	@ (8004220 <CreateMessage+0x4bc>)
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	1c18      	adds	r0, r3, #0
 800400c:	f7ff fa2a 	bl	8003464 <__aeabi_f2d>
 8004010:	0002      	movs	r2, r0
 8004012:	000b      	movs	r3, r1
 8004014:	4d7b      	ldr	r5, [pc, #492]	@ (8004204 <CreateMessage+0x4a0>)
 8004016:	498c      	ldr	r1, [pc, #560]	@ (8004248 <CreateMessage+0x4e4>)
 8004018:	487c      	ldr	r0, [pc, #496]	@ (800420c <CreateMessage+0x4a8>)
 800401a:	9202      	str	r2, [sp, #8]
 800401c:	9303      	str	r3, [sp, #12]
 800401e:	4b7e      	ldr	r3, [pc, #504]	@ (8004218 <CreateMessage+0x4b4>)
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	002b      	movs	r3, r5
 8004024:	0022      	movs	r2, r4
 8004026:	f01e fa81 	bl	802252c <siprintf>
#endif
  index += strlen(message);
 800402a:	4b78      	ldr	r3, [pc, #480]	@ (800420c <CreateMessage+0x4a8>)
 800402c:	0018      	movs	r0, r3
 800402e:	f7fc f89d 	bl	800016c <strlen>
 8004032:	0003      	movs	r3, r0
 8004034:	b299      	uxth	r1, r3
 8004036:	220e      	movs	r2, #14
 8004038:	18bb      	adds	r3, r7, r2
 800403a:	18ba      	adds	r2, r7, r2
 800403c:	8812      	ldrh	r2, [r2, #0]
 800403e:	188a      	adds	r2, r1, r2
 8004040:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004042:	1dbb      	adds	r3, r7, #6
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d019      	beq.n	800407e <CreateMessage+0x31a>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800404a:	4b70      	ldr	r3, [pc, #448]	@ (800420c <CreateMessage+0x4a8>)
 800404c:	0018      	movs	r0, r3
 800404e:	f7fc f88d 	bl	800016c <strlen>
 8004052:	0003      	movs	r3, r0
 8004054:	b29a      	uxth	r2, r3
 8004056:	4b6d      	ldr	r3, [pc, #436]	@ (800420c <CreateMessage+0x4a8>)
 8004058:	0011      	movs	r1, r2
 800405a:	0018      	movs	r0, r3
 800405c:	f7ff fccc 	bl	80039f8 <ESP_Send>
 8004060:	0003      	movs	r3, r0
 8004062:	001a      	movs	r2, r3
 8004064:	4b71      	ldr	r3, [pc, #452]	@ (800422c <CreateMessage+0x4c8>)
 8004066:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004068:	4b71      	ldr	r3, [pc, #452]	@ (8004230 <CreateMessage+0x4cc>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	001a      	movs	r2, r3
 800406e:	4b6f      	ldr	r3, [pc, #444]	@ (800422c <CreateMessage+0x4c8>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	4013      	ands	r3, r2
 8004074:	1e5a      	subs	r2, r3, #1
 8004076:	4193      	sbcs	r3, r2
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4b6d      	ldr	r3, [pc, #436]	@ (8004230 <CreateMessage+0x4cc>)
 800407c:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 800407e:	1dfb      	adds	r3, r7, #7
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2201      	movs	r2, #1
 8004084:	4053      	eors	r3, r2
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d100      	bne.n	800408e <CreateMessage+0x32a>
 800408c:	e14a      	b.n	8004324 <CreateMessage+0x5c0>
    uint8ArrayToString(Buffer, solarConfig);
 800408e:	4a6f      	ldr	r2, [pc, #444]	@ (800424c <CreateMessage+0x4e8>)
 8004090:	4b61      	ldr	r3, [pc, #388]	@ (8004218 <CreateMessage+0x4b4>)
 8004092:	0011      	movs	r1, r2
 8004094:	0018      	movs	r0, r3
 8004096:	f7ff fe41 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 800409a:	4b60      	ldr	r3, [pc, #384]	@ (800421c <CreateMessage+0x4b8>)
 800409c:	689c      	ldr	r4, [r3, #8]
 800409e:	4b6c      	ldr	r3, [pc, #432]	@ (8004250 <CreateMessage+0x4ec>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	1c18      	adds	r0, r3, #0
 80040a4:	f7ff f9de 	bl	8003464 <__aeabi_f2d>
 80040a8:	0002      	movs	r2, r0
 80040aa:	000b      	movs	r3, r1
 80040ac:	4d55      	ldr	r5, [pc, #340]	@ (8004204 <CreateMessage+0x4a0>)
 80040ae:	4969      	ldr	r1, [pc, #420]	@ (8004254 <CreateMessage+0x4f0>)
 80040b0:	4856      	ldr	r0, [pc, #344]	@ (800420c <CreateMessage+0x4a8>)
 80040b2:	9202      	str	r2, [sp, #8]
 80040b4:	9303      	str	r3, [sp, #12]
 80040b6:	4b58      	ldr	r3, [pc, #352]	@ (8004218 <CreateMessage+0x4b4>)
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	002b      	movs	r3, r5
 80040bc:	0022      	movs	r2, r4
 80040be:	f01e fa35 	bl	802252c <siprintf>
#endif
    index += strlen(message);
 80040c2:	4b52      	ldr	r3, [pc, #328]	@ (800420c <CreateMessage+0x4a8>)
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7fc f851 	bl	800016c <strlen>
 80040ca:	0003      	movs	r3, r0
 80040cc:	b299      	uxth	r1, r3
 80040ce:	220e      	movs	r2, #14
 80040d0:	18bb      	adds	r3, r7, r2
 80040d2:	18ba      	adds	r2, r7, r2
 80040d4:	8812      	ldrh	r2, [r2, #0]
 80040d6:	188a      	adds	r2, r1, r2
 80040d8:	801a      	strh	r2, [r3, #0]
    if (send) {
 80040da:	1dbb      	adds	r3, r7, #6
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d019      	beq.n	8004116 <CreateMessage+0x3b2>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80040e2:	4b4a      	ldr	r3, [pc, #296]	@ (800420c <CreateMessage+0x4a8>)
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7fc f841 	bl	800016c <strlen>
 80040ea:	0003      	movs	r3, r0
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	4b47      	ldr	r3, [pc, #284]	@ (800420c <CreateMessage+0x4a8>)
 80040f0:	0011      	movs	r1, r2
 80040f2:	0018      	movs	r0, r3
 80040f4:	f7ff fc80 	bl	80039f8 <ESP_Send>
 80040f8:	0003      	movs	r3, r0
 80040fa:	001a      	movs	r2, r3
 80040fc:	4b4b      	ldr	r3, [pc, #300]	@ (800422c <CreateMessage+0x4c8>)
 80040fe:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8004100:	4b4b      	ldr	r3, [pc, #300]	@ (8004230 <CreateMessage+0x4cc>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	001a      	movs	r2, r3
 8004106:	4b49      	ldr	r3, [pc, #292]	@ (800422c <CreateMessage+0x4c8>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	4013      	ands	r3, r2
 800410c:	1e5a      	subs	r2, r3, #1
 800410e:	4193      	sbcs	r3, r2
 8004110:	b2da      	uxtb	r2, r3
 8004112:	4b47      	ldr	r3, [pc, #284]	@ (8004230 <CreateMessage+0x4cc>)
 8004114:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8004116:	4b50      	ldr	r3, [pc, #320]	@ (8004258 <CreateMessage+0x4f4>)
 8004118:	791b      	ldrb	r3, [r3, #4]
 800411a:	2b35      	cmp	r3, #53	@ 0x35
 800411c:	d140      	bne.n	80041a0 <CreateMessage+0x43c>
 800411e:	f002 fe81 	bl	8006e24 <Check_USB_PowerOn>
 8004122:	1e03      	subs	r3, r0, #0
 8004124:	d03c      	beq.n	80041a0 <CreateMessage+0x43c>
      uint8ArrayToString(Buffer, noxConfig);
 8004126:	4a4d      	ldr	r2, [pc, #308]	@ (800425c <CreateMessage+0x4f8>)
 8004128:	4b3b      	ldr	r3, [pc, #236]	@ (8004218 <CreateMessage+0x4b4>)
 800412a:	0011      	movs	r1, r2
 800412c:	0018      	movs	r0, r3
 800412e:	f7ff fdf5 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 8004132:	4b3a      	ldr	r3, [pc, #232]	@ (800421c <CreateMessage+0x4b8>)
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	4b3a      	ldr	r3, [pc, #232]	@ (8004220 <CreateMessage+0x4bc>)
 8004138:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800413a:	4c32      	ldr	r4, [pc, #200]	@ (8004204 <CreateMessage+0x4a0>)
 800413c:	4948      	ldr	r1, [pc, #288]	@ (8004260 <CreateMessage+0x4fc>)
 800413e:	4833      	ldr	r0, [pc, #204]	@ (800420c <CreateMessage+0x4a8>)
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	4b35      	ldr	r3, [pc, #212]	@ (8004218 <CreateMessage+0x4b4>)
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	0023      	movs	r3, r4
 8004148:	f01e f9f0 	bl	802252c <siprintf>
#endif
      index += strlen(message);
 800414c:	4b2f      	ldr	r3, [pc, #188]	@ (800420c <CreateMessage+0x4a8>)
 800414e:	0018      	movs	r0, r3
 8004150:	f7fc f80c 	bl	800016c <strlen>
 8004154:	0003      	movs	r3, r0
 8004156:	b299      	uxth	r1, r3
 8004158:	220e      	movs	r2, #14
 800415a:	18bb      	adds	r3, r7, r2
 800415c:	18ba      	adds	r2, r7, r2
 800415e:	8812      	ldrh	r2, [r2, #0]
 8004160:	188a      	adds	r2, r1, r2
 8004162:	801a      	strh	r2, [r3, #0]
      if (send) {
 8004164:	1dbb      	adds	r3, r7, #6
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d019      	beq.n	80041a0 <CreateMessage+0x43c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800416c:	4b27      	ldr	r3, [pc, #156]	@ (800420c <CreateMessage+0x4a8>)
 800416e:	0018      	movs	r0, r3
 8004170:	f7fb fffc 	bl	800016c <strlen>
 8004174:	0003      	movs	r3, r0
 8004176:	b29a      	uxth	r2, r3
 8004178:	4b24      	ldr	r3, [pc, #144]	@ (800420c <CreateMessage+0x4a8>)
 800417a:	0011      	movs	r1, r2
 800417c:	0018      	movs	r0, r3
 800417e:	f7ff fc3b 	bl	80039f8 <ESP_Send>
 8004182:	0003      	movs	r3, r0
 8004184:	001a      	movs	r2, r3
 8004186:	4b29      	ldr	r3, [pc, #164]	@ (800422c <CreateMessage+0x4c8>)
 8004188:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800418a:	4b29      	ldr	r3, [pc, #164]	@ (8004230 <CreateMessage+0x4cc>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	001a      	movs	r2, r3
 8004190:	4b26      	ldr	r3, [pc, #152]	@ (800422c <CreateMessage+0x4c8>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	4013      	ands	r3, r2
 8004196:	1e5a      	subs	r2, r3, #1
 8004198:	4193      	sbcs	r3, r2
 800419a:	b2da      	uxtb	r2, r3
 800419c:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <CreateMessage+0x4cc>)
 800419e:	701a      	strb	r2, [r3, #0]
      }
    }
    if (sen5x_Get_sen5x_enable_state()) {
 80041a0:	f006 feee 	bl	800af80 <sen5x_Get_sen5x_enable_state>
 80041a4:	1e03      	subs	r3, r0, #0
 80041a6:	d100      	bne.n	80041aa <CreateMessage+0x446>
 80041a8:	e0bc      	b.n	8004324 <CreateMessage+0x5c0>
      uint8ArrayToString(Buffer, PM2Config);
 80041aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004264 <CreateMessage+0x500>)
 80041ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004218 <CreateMessage+0x4b4>)
 80041ae:	0011      	movs	r1, r2
 80041b0:	0018      	movs	r0, r3
 80041b2:	f7ff fdb3 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 80041b6:	4b19      	ldr	r3, [pc, #100]	@ (800421c <CreateMessage+0x4b8>)
 80041b8:	689c      	ldr	r4, [r3, #8]
 80041ba:	4b19      	ldr	r3, [pc, #100]	@ (8004220 <CreateMessage+0x4bc>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	1c18      	adds	r0, r3, #0
 80041c0:	f7ff f950 	bl	8003464 <__aeabi_f2d>
 80041c4:	0002      	movs	r2, r0
 80041c6:	000b      	movs	r3, r1
 80041c8:	4d0e      	ldr	r5, [pc, #56]	@ (8004204 <CreateMessage+0x4a0>)
 80041ca:	4927      	ldr	r1, [pc, #156]	@ (8004268 <CreateMessage+0x504>)
 80041cc:	480f      	ldr	r0, [pc, #60]	@ (800420c <CreateMessage+0x4a8>)
 80041ce:	9202      	str	r2, [sp, #8]
 80041d0:	9303      	str	r3, [sp, #12]
 80041d2:	4b11      	ldr	r3, [pc, #68]	@ (8004218 <CreateMessage+0x4b4>)
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	002b      	movs	r3, r5
 80041d8:	0022      	movs	r2, r4
 80041da:	f01e f9a7 	bl	802252c <siprintf>
#endif
      index += strlen(message);
 80041de:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <CreateMessage+0x4a8>)
 80041e0:	0018      	movs	r0, r3
 80041e2:	f7fb ffc3 	bl	800016c <strlen>
 80041e6:	0003      	movs	r3, r0
 80041e8:	b299      	uxth	r1, r3
 80041ea:	220e      	movs	r2, #14
 80041ec:	18bb      	adds	r3, r7, r2
 80041ee:	18ba      	adds	r2, r7, r2
 80041f0:	8812      	ldrh	r2, [r2, #0]
 80041f2:	188a      	adds	r2, r1, r2
 80041f4:	801a      	strh	r2, [r3, #0]
      if (send) {
 80041f6:	1dbb      	adds	r3, r7, #6
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d04e      	beq.n	800429c <CreateMessage+0x538>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80041fe:	4b03      	ldr	r3, [pc, #12]	@ (800420c <CreateMessage+0x4a8>)
 8004200:	0018      	movs	r0, r3
 8004202:	e033      	b.n	800426c <CreateMessage+0x508>
 8004204:	20000710 	.word	0x20000710
 8004208:	080286d0 	.word	0x080286d0
 800420c:	20000584 	.word	0x20000584
 8004210:	08025b54 	.word	0x08025b54
 8004214:	200006a4 	.word	0x200006a4
 8004218:	20000730 	.word	0x20000730
 800421c:	20000564 	.word	0x20000564
 8004220:	20000634 	.word	0x20000634
 8004224:	08025b58 	.word	0x08025b58
 8004228:	20000585 	.word	0x20000585
 800422c:	20000749 	.word	0x20000749
 8004230:	2000002d 	.word	0x2000002d
 8004234:	200006b0 	.word	0x200006b0
 8004238:	08025bac 	.word	0x08025bac
 800423c:	200006c8 	.word	0x200006c8
 8004240:	08025c04 	.word	0x08025c04
 8004244:	200006bc 	.word	0x200006bc
 8004248:	08025c58 	.word	0x08025c58
 800424c:	200006e0 	.word	0x200006e0
 8004250:	20000580 	.word	0x20000580
 8004254:	08025cb4 	.word	0x08025cb4
 8004258:	20000e30 	.word	0x20000e30
 800425c:	200006ec 	.word	0x200006ec
 8004260:	08025d14 	.word	0x08025d14
 8004264:	200006f8 	.word	0x200006f8
 8004268:	08025d68 	.word	0x08025d68
 800426c:	f7fb ff7e 	bl	800016c <strlen>
 8004270:	0003      	movs	r3, r0
 8004272:	b29a      	uxth	r2, r3
 8004274:	4b59      	ldr	r3, [pc, #356]	@ (80043dc <CreateMessage+0x678>)
 8004276:	0011      	movs	r1, r2
 8004278:	0018      	movs	r0, r3
 800427a:	f7ff fbbd 	bl	80039f8 <ESP_Send>
 800427e:	0003      	movs	r3, r0
 8004280:	001a      	movs	r2, r3
 8004282:	4b57      	ldr	r3, [pc, #348]	@ (80043e0 <CreateMessage+0x67c>)
 8004284:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8004286:	4b57      	ldr	r3, [pc, #348]	@ (80043e4 <CreateMessage+0x680>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	001a      	movs	r2, r3
 800428c:	4b54      	ldr	r3, [pc, #336]	@ (80043e0 <CreateMessage+0x67c>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	4013      	ands	r3, r2
 8004292:	1e5a      	subs	r2, r3, #1
 8004294:	4193      	sbcs	r3, r2
 8004296:	b2da      	uxtb	r2, r3
 8004298:	4b52      	ldr	r3, [pc, #328]	@ (80043e4 <CreateMessage+0x680>)
 800429a:	701a      	strb	r2, [r3, #0]
      }

      uint8ArrayToString(Buffer, PM10Config);
 800429c:	4a52      	ldr	r2, [pc, #328]	@ (80043e8 <CreateMessage+0x684>)
 800429e:	4b53      	ldr	r3, [pc, #332]	@ (80043ec <CreateMessage+0x688>)
 80042a0:	0011      	movs	r1, r2
 80042a2:	0018      	movs	r0, r3
 80042a4:	f7ff fd3a 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 80042a8:	4b51      	ldr	r3, [pc, #324]	@ (80043f0 <CreateMessage+0x68c>)
 80042aa:	689c      	ldr	r4, [r3, #8]
 80042ac:	4b51      	ldr	r3, [pc, #324]	@ (80043f4 <CreateMessage+0x690>)
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	1c18      	adds	r0, r3, #0
 80042b2:	f7ff f8d7 	bl	8003464 <__aeabi_f2d>
 80042b6:	0002      	movs	r2, r0
 80042b8:	000b      	movs	r3, r1
 80042ba:	4d4f      	ldr	r5, [pc, #316]	@ (80043f8 <CreateMessage+0x694>)
 80042bc:	494f      	ldr	r1, [pc, #316]	@ (80043fc <CreateMessage+0x698>)
 80042be:	4847      	ldr	r0, [pc, #284]	@ (80043dc <CreateMessage+0x678>)
 80042c0:	9202      	str	r2, [sp, #8]
 80042c2:	9303      	str	r3, [sp, #12]
 80042c4:	4b49      	ldr	r3, [pc, #292]	@ (80043ec <CreateMessage+0x688>)
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	002b      	movs	r3, r5
 80042ca:	0022      	movs	r2, r4
 80042cc:	f01e f92e 	bl	802252c <siprintf>
#endif
      index += strlen(message);
 80042d0:	4b42      	ldr	r3, [pc, #264]	@ (80043dc <CreateMessage+0x678>)
 80042d2:	0018      	movs	r0, r3
 80042d4:	f7fb ff4a 	bl	800016c <strlen>
 80042d8:	0003      	movs	r3, r0
 80042da:	b299      	uxth	r1, r3
 80042dc:	220e      	movs	r2, #14
 80042de:	18bb      	adds	r3, r7, r2
 80042e0:	18ba      	adds	r2, r7, r2
 80042e2:	8812      	ldrh	r2, [r2, #0]
 80042e4:	188a      	adds	r2, r1, r2
 80042e6:	801a      	strh	r2, [r3, #0]
      if (send) {
 80042e8:	1dbb      	adds	r3, r7, #6
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d019      	beq.n	8004324 <CreateMessage+0x5c0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80042f0:	4b3a      	ldr	r3, [pc, #232]	@ (80043dc <CreateMessage+0x678>)
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7fb ff3a 	bl	800016c <strlen>
 80042f8:	0003      	movs	r3, r0
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	4b37      	ldr	r3, [pc, #220]	@ (80043dc <CreateMessage+0x678>)
 80042fe:	0011      	movs	r1, r2
 8004300:	0018      	movs	r0, r3
 8004302:	f7ff fb79 	bl	80039f8 <ESP_Send>
 8004306:	0003      	movs	r3, r0
 8004308:	001a      	movs	r2, r3
 800430a:	4b35      	ldr	r3, [pc, #212]	@ (80043e0 <CreateMessage+0x67c>)
 800430c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800430e:	4b35      	ldr	r3, [pc, #212]	@ (80043e4 <CreateMessage+0x680>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	001a      	movs	r2, r3
 8004314:	4b32      	ldr	r3, [pc, #200]	@ (80043e0 <CreateMessage+0x67c>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	4013      	ands	r3, r2
 800431a:	1e5a      	subs	r2, r3, #1
 800431c:	4193      	sbcs	r3, r2
 800431e:	b2da      	uxtb	r2, r3
 8004320:	4b30      	ldr	r3, [pc, #192]	@ (80043e4 <CreateMessage+0x680>)
 8004322:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  uint8ArrayToString(Buffer, batteryConfig);
 8004324:	4a36      	ldr	r2, [pc, #216]	@ (8004400 <CreateMessage+0x69c>)
 8004326:	4b31      	ldr	r3, [pc, #196]	@ (80043ec <CreateMessage+0x688>)
 8004328:	0011      	movs	r1, r2
 800432a:	0018      	movs	r0, r3
 800432c:	f7ff fcf6 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8004330:	4b2f      	ldr	r3, [pc, #188]	@ (80043f0 <CreateMessage+0x68c>)
 8004332:	689c      	ldr	r4, [r3, #8]
 8004334:	4b33      	ldr	r3, [pc, #204]	@ (8004404 <CreateMessage+0x6a0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	1c18      	adds	r0, r3, #0
 800433a:	f7ff f893 	bl	8003464 <__aeabi_f2d>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	4d2d      	ldr	r5, [pc, #180]	@ (80043f8 <CreateMessage+0x694>)
 8004344:	4930      	ldr	r1, [pc, #192]	@ (8004408 <CreateMessage+0x6a4>)
 8004346:	4825      	ldr	r0, [pc, #148]	@ (80043dc <CreateMessage+0x678>)
 8004348:	9202      	str	r2, [sp, #8]
 800434a:	9303      	str	r3, [sp, #12]
 800434c:	4b27      	ldr	r3, [pc, #156]	@ (80043ec <CreateMessage+0x688>)
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	002b      	movs	r3, r5
 8004352:	0022      	movs	r2, r4
 8004354:	f01e f8ea 	bl	802252c <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8004358:	4b20      	ldr	r3, [pc, #128]	@ (80043dc <CreateMessage+0x678>)
 800435a:	0018      	movs	r0, r3
 800435c:	f7fb ff06 	bl	800016c <strlen>
 8004360:	0002      	movs	r2, r0
 8004362:	4b1e      	ldr	r3, [pc, #120]	@ (80043dc <CreateMessage+0x678>)
 8004364:	18d3      	adds	r3, r2, r3
 8004366:	4a29      	ldr	r2, [pc, #164]	@ (800440c <CreateMessage+0x6a8>)
 8004368:	0011      	movs	r1, r2
 800436a:	0018      	movs	r0, r3
 800436c:	f01e f8de 	bl	802252c <siprintf>
  index += strlen(message);
 8004370:	4b1a      	ldr	r3, [pc, #104]	@ (80043dc <CreateMessage+0x678>)
 8004372:	0018      	movs	r0, r3
 8004374:	f7fb fefa 	bl	800016c <strlen>
 8004378:	0003      	movs	r3, r0
 800437a:	b299      	uxth	r1, r3
 800437c:	220e      	movs	r2, #14
 800437e:	18bb      	adds	r3, r7, r2
 8004380:	18ba      	adds	r2, r7, r2
 8004382:	8812      	ldrh	r2, [r2, #0]
 8004384:	188a      	adds	r2, r1, r2
 8004386:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004388:	1dbb      	adds	r3, r7, #6
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d019      	beq.n	80043c4 <CreateMessage+0x660>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004390:	4b12      	ldr	r3, [pc, #72]	@ (80043dc <CreateMessage+0x678>)
 8004392:	0018      	movs	r0, r3
 8004394:	f7fb feea 	bl	800016c <strlen>
 8004398:	0003      	movs	r3, r0
 800439a:	b29a      	uxth	r2, r3
 800439c:	4b0f      	ldr	r3, [pc, #60]	@ (80043dc <CreateMessage+0x678>)
 800439e:	0011      	movs	r1, r2
 80043a0:	0018      	movs	r0, r3
 80043a2:	f7ff fb29 	bl	80039f8 <ESP_Send>
 80043a6:	0003      	movs	r3, r0
 80043a8:	001a      	movs	r2, r3
 80043aa:	4b0d      	ldr	r3, [pc, #52]	@ (80043e0 <CreateMessage+0x67c>)
 80043ac:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80043ae:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <CreateMessage+0x680>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	001a      	movs	r2, r3
 80043b4:	4b0a      	ldr	r3, [pc, #40]	@ (80043e0 <CreateMessage+0x67c>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	4013      	ands	r3, r2
 80043ba:	1e5a      	subs	r2, r3, #1
 80043bc:	4193      	sbcs	r3, r2
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	4b08      	ldr	r3, [pc, #32]	@ (80043e4 <CreateMessage+0x680>)
 80043c2:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 80043c4:	4b07      	ldr	r3, [pc, #28]	@ (80043e4 <CreateMessage+0x680>)
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	701a      	strb	r2, [r3, #0]
  return index;
 80043cc:	230e      	movs	r3, #14
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	881b      	ldrh	r3, [r3, #0]
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b005      	add	sp, #20
 80043d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043da:	46c0      	nop			@ (mov r8, r8)
 80043dc:	20000584 	.word	0x20000584
 80043e0:	20000749 	.word	0x20000749
 80043e4:	2000002d 	.word	0x2000002d
 80043e8:	20000704 	.word	0x20000704
 80043ec:	20000730 	.word	0x20000730
 80043f0:	20000564 	.word	0x20000564
 80043f4:	20000634 	.word	0x20000634
 80043f8:	20000710 	.word	0x20000710
 80043fc:	08025dc4 	.word	0x08025dc4
 8004400:	200006d4 	.word	0x200006d4
 8004404:	2000057c 	.word	0x2000057c
 8004408:	08025e20 	.word	0x08025e20
 800440c:	08025e78 	.word	0x08025e78

08004410 <StartProg>:

void StartProg(){
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8004414:	2064      	movs	r0, #100	@ 0x64
 8004416:	f00c fce7 	bl	8010de8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800441a:	4b15      	ldr	r3, [pc, #84]	@ (8004470 <StartProg+0x60>)
 800441c:	2200      	movs	r2, #0
 800441e:	2101      	movs	r1, #1
 8004420:	0018      	movs	r0, r3
 8004422:	f00d ff68 	bl	80122f6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004426:	2064      	movs	r0, #100	@ 0x64
 8004428:	f00c fcde 	bl	8010de8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800442c:	4b10      	ldr	r3, [pc, #64]	@ (8004470 <StartProg+0x60>)
 800442e:	2200      	movs	r2, #0
 8004430:	2102      	movs	r1, #2
 8004432:	0018      	movs	r0, r3
 8004434:	f00d ff5f 	bl	80122f6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004438:	23fa      	movs	r3, #250	@ 0xfa
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	0018      	movs	r0, r3
 800443e:	f00c fcd3 	bl	8010de8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004442:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <StartProg+0x60>)
 8004444:	2201      	movs	r2, #1
 8004446:	2101      	movs	r1, #1
 8004448:	0018      	movs	r0, r3
 800444a:	f00d ff54 	bl	80122f6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800444e:	23fa      	movs	r3, #250	@ 0xfa
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	0018      	movs	r0, r3
 8004454:	f00c fcc8 	bl	8010de8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8004458:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <StartProg+0x60>)
 800445a:	2201      	movs	r2, #1
 800445c:	2102      	movs	r1, #2
 800445e:	0018      	movs	r0, r3
 8004460:	f00d ff49 	bl	80122f6 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004464:	2028      	movs	r0, #40	@ 0x28
 8004466:	f00c fcbf 	bl	8010de8 <HAL_Delay>
}
 800446a:	46c0      	nop			@ (mov r8, r8)
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	50001c00 	.word	0x50001c00

08004474 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004476:	b0d9      	sub	sp, #356	@ 0x164
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	0008      	movs	r0, r1
 800447e:	0011      	movs	r1, r2
 8004480:	4ba4      	ldr	r3, [pc, #656]	@ (8004714 <ParseBuffer+0x2a0>)
 8004482:	24b0      	movs	r4, #176	@ 0xb0
 8004484:	0064      	lsls	r4, r4, #1
 8004486:	191b      	adds	r3, r3, r4
 8004488:	19db      	adds	r3, r3, r7
 800448a:	1c02      	adds	r2, r0, #0
 800448c:	801a      	strh	r2, [r3, #0]
 800448e:	4ba2      	ldr	r3, [pc, #648]	@ (8004718 <ParseBuffer+0x2a4>)
 8004490:	191b      	adds	r3, r3, r4
 8004492:	19db      	adds	r3, r3, r7
 8004494:	1c0a      	adds	r2, r1, #0
 8004496:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004498:	2380      	movs	r3, #128	@ 0x80
 800449a:	005a      	lsls	r2, r3, #1
 800449c:	2348      	movs	r3, #72	@ 0x48
 800449e:	18fb      	adds	r3, r7, r3
 80044a0:	2100      	movs	r1, #0
 80044a2:	0018      	movs	r0, r3
 80044a4:	f01e f9a8 	bl	80227f8 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 80044a8:	2360      	movs	r3, #96	@ 0x60
 80044aa:	33ff      	adds	r3, #255	@ 0xff
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	2203      	movs	r2, #3
 80044b0:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 80044b2:	23ae      	movs	r3, #174	@ 0xae
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	2200      	movs	r2, #0
 80044ba:	801a      	strh	r2, [r3, #0]
 80044bc:	e013      	b.n	80044e6 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80044be:	20ae      	movs	r0, #174	@ 0xae
 80044c0:	0040      	lsls	r0, r0, #1
 80044c2:	183b      	adds	r3, r7, r0
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	18d2      	adds	r2, r2, r3
 80044ca:	183b      	adds	r3, r7, r0
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	7811      	ldrb	r1, [r2, #0]
 80044d0:	4a92      	ldr	r2, [pc, #584]	@ (800471c <ParseBuffer+0x2a8>)
 80044d2:	24b0      	movs	r4, #176	@ 0xb0
 80044d4:	0064      	lsls	r4, r4, #1
 80044d6:	1912      	adds	r2, r2, r4
 80044d8:	19d2      	adds	r2, r2, r7
 80044da:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80044dc:	183b      	adds	r3, r7, r0
 80044de:	881a      	ldrh	r2, [r3, #0]
 80044e0:	183b      	adds	r3, r7, r0
 80044e2:	3201      	adds	r2, #1
 80044e4:	801a      	strh	r2, [r3, #0]
 80044e6:	23ae      	movs	r3, #174	@ 0xae
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	18fa      	adds	r2, r7, r3
 80044ec:	4b89      	ldr	r3, [pc, #548]	@ (8004714 <ParseBuffer+0x2a0>)
 80044ee:	21b0      	movs	r1, #176	@ 0xb0
 80044f0:	0049      	lsls	r1, r1, #1
 80044f2:	185b      	adds	r3, r3, r1
 80044f4:	19db      	adds	r3, r3, r7
 80044f6:	8812      	ldrh	r2, [r2, #0]
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d3df      	bcc.n	80044be <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80044fe:	4b85      	ldr	r3, [pc, #532]	@ (8004714 <ParseBuffer+0x2a0>)
 8004500:	185b      	adds	r3, r3, r1
 8004502:	19db      	adds	r3, r3, r7
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	4a85      	ldr	r2, [pc, #532]	@ (800471c <ParseBuffer+0x2a8>)
 8004508:	1852      	adds	r2, r2, r1
 800450a:	19d2      	adds	r2, r2, r7
 800450c:	2100      	movs	r1, #0
 800450e:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8004510:	f00c f88e 	bl	8010630 <GetVerboseLevel>
 8004514:	0003      	movs	r3, r0
 8004516:	2b03      	cmp	r3, #3
 8004518:	d106      	bne.n	8004528 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 800451a:	2348      	movs	r3, #72	@ 0x48
 800451c:	18fa      	adds	r2, r7, r3
 800451e:	4b80      	ldr	r3, [pc, #512]	@ (8004720 <ParseBuffer+0x2ac>)
 8004520:	0011      	movs	r1, r2
 8004522:	0018      	movs	r0, r3
 8004524:	f01d ff92 	bl	802244c <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	26ac      	movs	r6, #172	@ 0xac
 800452c:	0076      	lsls	r6, r6, #1
 800452e:	19ba      	adds	r2, r7, r6
 8004530:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8004532:	4b7c      	ldr	r3, [pc, #496]	@ (8004724 <ParseBuffer+0x2b0>)
 8004534:	25b0      	movs	r5, #176	@ 0xb0
 8004536:	006d      	lsls	r5, r5, #1
 8004538:	195b      	adds	r3, r3, r5
 800453a:	19db      	adds	r3, r3, r7
 800453c:	4a7a      	ldr	r2, [pc, #488]	@ (8004728 <ParseBuffer+0x2b4>)
 800453e:	8811      	ldrh	r1, [r2, #0]
 8004540:	8019      	strh	r1, [r3, #0]
 8004542:	7892      	ldrb	r2, [r2, #2]
 8004544:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8004546:	4b79      	ldr	r3, [pc, #484]	@ (800472c <ParseBuffer+0x2b8>)
 8004548:	195b      	adds	r3, r3, r5
 800454a:	19db      	adds	r3, r3, r7
 800454c:	4a78      	ldr	r2, [pc, #480]	@ (8004730 <ParseBuffer+0x2bc>)
 800454e:	6811      	ldr	r1, [r2, #0]
 8004550:	6019      	str	r1, [r3, #0]
 8004552:	8892      	ldrh	r2, [r2, #4]
 8004554:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8004556:	4b77      	ldr	r3, [pc, #476]	@ (8004734 <ParseBuffer+0x2c0>)
 8004558:	195b      	adds	r3, r3, r5
 800455a:	19db      	adds	r3, r3, r7
 800455c:	4a76      	ldr	r2, [pc, #472]	@ (8004738 <ParseBuffer+0x2c4>)
 800455e:	6811      	ldr	r1, [r2, #0]
 8004560:	6019      	str	r1, [r3, #0]
 8004562:	7912      	ldrb	r2, [r2, #4]
 8004564:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8004566:	4b75      	ldr	r3, [pc, #468]	@ (800473c <ParseBuffer+0x2c8>)
 8004568:	195b      	adds	r3, r3, r5
 800456a:	19db      	adds	r3, r3, r7
 800456c:	4a74      	ldr	r2, [pc, #464]	@ (8004740 <ParseBuffer+0x2cc>)
 800456e:	6811      	ldr	r1, [r2, #0]
 8004570:	6019      	str	r1, [r3, #0]
 8004572:	8892      	ldrh	r2, [r2, #4]
 8004574:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004576:	4b73      	ldr	r3, [pc, #460]	@ (8004744 <ParseBuffer+0x2d0>)
 8004578:	195b      	adds	r3, r3, r5
 800457a:	19db      	adds	r3, r3, r7
 800457c:	223e      	movs	r2, #62	@ 0x3e
 800457e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004580:	4b71      	ldr	r3, [pc, #452]	@ (8004748 <ParseBuffer+0x2d4>)
 8004582:	195b      	adds	r3, r3, r5
 8004584:	19db      	adds	r3, r3, r7
 8004586:	4a71      	ldr	r2, [pc, #452]	@ (800474c <ParseBuffer+0x2d8>)
 8004588:	ca13      	ldmia	r2!, {r0, r1, r4}
 800458a:	c313      	stmia	r3!, {r0, r1, r4}
 800458c:	8811      	ldrh	r1, [r2, #0]
 800458e:	8019      	strh	r1, [r3, #0]
 8004590:	7892      	ldrb	r2, [r2, #2]
 8004592:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004594:	4b6e      	ldr	r3, [pc, #440]	@ (8004750 <ParseBuffer+0x2dc>)
 8004596:	195b      	adds	r3, r3, r5
 8004598:	19db      	adds	r3, r3, r7
 800459a:	4a6e      	ldr	r2, [pc, #440]	@ (8004754 <ParseBuffer+0x2e0>)
 800459c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800459e:	c313      	stmia	r3!, {r0, r1, r4}
 80045a0:	8812      	ldrh	r2, [r2, #0]
 80045a2:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 80045a4:	4b5c      	ldr	r3, [pc, #368]	@ (8004718 <ParseBuffer+0x2a4>)
 80045a6:	195b      	adds	r3, r3, r5
 80045a8:	19db      	adds	r3, r3, r7
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10a      	bne.n	80045c6 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 80045b0:	2344      	movs	r3, #68	@ 0x44
 80045b2:	18fa      	adds	r2, r7, r3
 80045b4:	2348      	movs	r3, #72	@ 0x48
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	0011      	movs	r1, r2
 80045ba:	0018      	movs	r0, r3
 80045bc:	f01e f957 	bl	802286e <strstr>
 80045c0:	0003      	movs	r3, r0
 80045c2:	19ba      	adds	r2, r7, r6
 80045c4:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80045c6:	4b54      	ldr	r3, [pc, #336]	@ (8004718 <ParseBuffer+0x2a4>)
 80045c8:	22b0      	movs	r2, #176	@ 0xb0
 80045ca:	0052      	lsls	r2, r2, #1
 80045cc:	189b      	adds	r3, r3, r2
 80045ce:	19db      	adds	r3, r3, r7
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d10c      	bne.n	80045f0 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 80045d6:	232c      	movs	r3, #44	@ 0x2c
 80045d8:	18fa      	adds	r2, r7, r3
 80045da:	2348      	movs	r3, #72	@ 0x48
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	0011      	movs	r1, r2
 80045e0:	0018      	movs	r0, r3
 80045e2:	f01e f944 	bl	802286e <strstr>
 80045e6:	0003      	movs	r3, r0
 80045e8:	22ac      	movs	r2, #172	@ 0xac
 80045ea:	0052      	lsls	r2, r2, #1
 80045ec:	18ba      	adds	r2, r7, r2
 80045ee:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80045f0:	4b49      	ldr	r3, [pc, #292]	@ (8004718 <ParseBuffer+0x2a4>)
 80045f2:	22b0      	movs	r2, #176	@ 0xb0
 80045f4:	0052      	lsls	r2, r2, #1
 80045f6:	189b      	adds	r3, r3, r2
 80045f8:	19db      	adds	r3, r3, r7
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d10c      	bne.n	800461a <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 8004600:	2328      	movs	r3, #40	@ 0x28
 8004602:	18fa      	adds	r2, r7, r3
 8004604:	2348      	movs	r3, #72	@ 0x48
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	0011      	movs	r1, r2
 800460a:	0018      	movs	r0, r3
 800460c:	f01e f92f 	bl	802286e <strstr>
 8004610:	0003      	movs	r3, r0
 8004612:	22ac      	movs	r2, #172	@ 0xac
 8004614:	0052      	lsls	r2, r2, #1
 8004616:	18ba      	adds	r2, r7, r2
 8004618:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 800461a:	4b3f      	ldr	r3, [pc, #252]	@ (8004718 <ParseBuffer+0x2a4>)
 800461c:	22b0      	movs	r2, #176	@ 0xb0
 800461e:	0052      	lsls	r2, r2, #1
 8004620:	189b      	adds	r3, r3, r2
 8004622:	19db      	adds	r3, r3, r7
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b05      	cmp	r3, #5
 8004628:	d10c      	bne.n	8004644 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 800462a:	2308      	movs	r3, #8
 800462c:	18fa      	adds	r2, r7, r3
 800462e:	2348      	movs	r3, #72	@ 0x48
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	0011      	movs	r1, r2
 8004634:	0018      	movs	r0, r3
 8004636:	f01e f91a 	bl	802286e <strstr>
 800463a:	0003      	movs	r3, r0
 800463c:	22ac      	movs	r2, #172	@ 0xac
 800463e:	0052      	lsls	r2, r2, #1
 8004640:	18ba      	adds	r2, r7, r2
 8004642:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004644:	233c      	movs	r3, #60	@ 0x3c
 8004646:	18fa      	adds	r2, r7, r3
 8004648:	2448      	movs	r4, #72	@ 0x48
 800464a:	193b      	adds	r3, r7, r4
 800464c:	0011      	movs	r1, r2
 800464e:	0018      	movs	r0, r3
 8004650:	f01e f90d 	bl	802286e <strstr>
 8004654:	0003      	movs	r3, r0
 8004656:	22aa      	movs	r2, #170	@ 0xaa
 8004658:	0052      	lsls	r2, r2, #1
 800465a:	18ba      	adds	r2, r7, r2
 800465c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800465e:	2318      	movs	r3, #24
 8004660:	18fa      	adds	r2, r7, r3
 8004662:	193b      	adds	r3, r7, r4
 8004664:	0011      	movs	r1, r2
 8004666:	0018      	movs	r0, r3
 8004668:	f01e f901 	bl	802286e <strstr>
 800466c:	0003      	movs	r3, r0
 800466e:	22a8      	movs	r2, #168	@ 0xa8
 8004670:	0052      	lsls	r2, r2, #1
 8004672:	18ba      	adds	r2, r7, r2
 8004674:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004676:	4a38      	ldr	r2, [pc, #224]	@ (8004758 <ParseBuffer+0x2e4>)
 8004678:	193b      	adds	r3, r7, r4
 800467a:	0011      	movs	r1, r2
 800467c:	0018      	movs	r0, r3
 800467e:	f01e f8f6 	bl	802286e <strstr>
 8004682:	0003      	movs	r3, r0
 8004684:	22a6      	movs	r2, #166	@ 0xa6
 8004686:	0052      	lsls	r2, r2, #1
 8004688:	18ba      	adds	r2, r7, r2
 800468a:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800468c:	2334      	movs	r3, #52	@ 0x34
 800468e:	18fa      	adds	r2, r7, r3
 8004690:	193b      	adds	r3, r7, r4
 8004692:	0011      	movs	r1, r2
 8004694:	0018      	movs	r0, r3
 8004696:	f01e f8ea 	bl	802286e <strstr>
 800469a:	0003      	movs	r3, r0
 800469c:	22a4      	movs	r2, #164	@ 0xa4
 800469e:	0052      	lsls	r2, r2, #1
 80046a0:	18ba      	adds	r2, r7, r2
 80046a2:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80046a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004714 <ParseBuffer+0x2a0>)
 80046a6:	21b0      	movs	r1, #176	@ 0xb0
 80046a8:	0049      	lsls	r1, r1, #1
 80046aa:	185b      	adds	r3, r3, r1
 80046ac:	19db      	adds	r3, r3, r7
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d800      	bhi.n	80046b6 <ParseBuffer+0x242>
 80046b4:	e0bf      	b.n	8004836 <ParseBuffer+0x3c2>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80046b6:	22ac      	movs	r2, #172	@ 0xac
 80046b8:	0052      	lsls	r2, r2, #1
 80046ba:	18bb      	adds	r3, r7, r2
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d052      	beq.n	8004768 <ParseBuffer+0x2f4>
 80046c2:	18bb      	adds	r3, r7, r2
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b4f      	cmp	r3, #79	@ 0x4f
 80046ca:	d14d      	bne.n	8004768 <ParseBuffer+0x2f4>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80046cc:	2360      	movs	r3, #96	@ 0x60
 80046ce:	33ff      	adds	r3, #255	@ 0xff
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	2200      	movs	r2, #0
 80046d4:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80046d6:	4b21      	ldr	r3, [pc, #132]	@ (800475c <ParseBuffer+0x2e8>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b12      	cmp	r3, #18
 80046dc:	d144      	bne.n	8004768 <ParseBuffer+0x2f4>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80046de:	4b0d      	ldr	r3, [pc, #52]	@ (8004714 <ParseBuffer+0x2a0>)
 80046e0:	185b      	adds	r3, r3, r1
 80046e2:	19db      	adds	r3, r3, r7
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80046e8:	d10b      	bne.n	8004702 <ParseBuffer+0x28e>
 80046ea:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <ParseBuffer+0x2a8>)
 80046ec:	185b      	adds	r3, r3, r1
 80046ee:	19db      	adds	r3, r3, r7
 80046f0:	2221      	movs	r2, #33	@ 0x21
 80046f2:	5c9b      	ldrb	r3, [r3, r2]
 80046f4:	2b32      	cmp	r3, #50	@ 0x32
 80046f6:	d104      	bne.n	8004702 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 80046f8:	193b      	adds	r3, r7, r4
 80046fa:	0018      	movs	r0, r3
 80046fc:	f002 fcfe 	bl	80070fc <ParseTime>
 8004700:	e032      	b.n	8004768 <ParseBuffer+0x2f4>
        }
        else {
          Error("Error getting time");
 8004702:	4a17      	ldr	r2, [pc, #92]	@ (8004760 <ParseBuffer+0x2ec>)
 8004704:	4b17      	ldr	r3, [pc, #92]	@ (8004764 <ParseBuffer+0x2f0>)
 8004706:	0019      	movs	r1, r3
 8004708:	2001      	movs	r0, #1
 800470a:	f00b ff17 	bl	801053c <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800470e:	2306      	movs	r3, #6
 8004710:	e095      	b.n	800483e <ParseBuffer+0x3ca>
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	fffffea2 	.word	0xfffffea2
 8004718:	fffffea1 	.word	0xfffffea1
 800471c:	fffffee8 	.word	0xfffffee8
 8004720:	08025e7c 	.word	0x08025e7c
 8004724:	fffffee4 	.word	0xfffffee4
 8004728:	08025ea8 	.word	0x08025ea8
 800472c:	fffffedc 	.word	0xfffffedc
 8004730:	08025eac 	.word	0x08025eac
 8004734:	fffffed4 	.word	0xfffffed4
 8004738:	08025eb4 	.word	0x08025eb4
 800473c:	fffffecc 	.word	0xfffffecc
 8004740:	08025ebc 	.word	0x08025ebc
 8004744:	fffffec8 	.word	0xfffffec8
 8004748:	fffffeb8 	.word	0xfffffeb8
 800474c:	08025ec4 	.word	0x08025ec4
 8004750:	fffffea8 	.word	0xfffffea8
 8004754:	08025ed4 	.word	0x08025ed4
 8004758:	080286b0 	.word	0x080286b0
 800475c:	2000062e 	.word	0x2000062e
 8004760:	08025e94 	.word	0x08025e94
 8004764:	08025794 	.word	0x08025794
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8004768:	22ac      	movs	r2, #172	@ 0xac
 800476a:	0052      	lsls	r2, r2, #1
 800476c:	18bb      	adds	r3, r7, r2
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d009      	beq.n	8004788 <ParseBuffer+0x314>
 8004774:	18bb      	adds	r3, r7, r2
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b72      	cmp	r3, #114	@ 0x72
 800477c:	d104      	bne.n	8004788 <ParseBuffer+0x314>
      status = RECEIVE_STATUS_READY;
 800477e:	2360      	movs	r3, #96	@ 0x60
 8004780:	33ff      	adds	r3, #255	@ 0xff
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	2202      	movs	r2, #2
 8004786:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004788:	22ac      	movs	r2, #172	@ 0xac
 800478a:	0052      	lsls	r2, r2, #1
 800478c:	18bb      	adds	r3, r7, r2
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d009      	beq.n	80047a8 <ParseBuffer+0x334>
 8004794:	18bb      	adds	r3, r7, r2
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b3e      	cmp	r3, #62	@ 0x3e
 800479c:	d104      	bne.n	80047a8 <ParseBuffer+0x334>
      status = RECEIVE_STATUS_START;
 800479e:	2360      	movs	r3, #96	@ 0x60
 80047a0:	33ff      	adds	r3, #255	@ 0xff
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	2205      	movs	r2, #5
 80047a6:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80047a8:	22ac      	movs	r2, #172	@ 0xac
 80047aa:	0052      	lsls	r2, r2, #1
 80047ac:	18bb      	adds	r3, r7, r2
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <ParseBuffer+0x354>
 80047b4:	18bb      	adds	r3, r7, r2
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80047bc:	d104      	bne.n	80047c8 <ParseBuffer+0x354>
      status = RECEIVE_STATUS_TIME;
 80047be:	2360      	movs	r3, #96	@ 0x60
 80047c0:	33ff      	adds	r3, #255	@ 0xff
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	220b      	movs	r2, #11
 80047c6:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80047c8:	22aa      	movs	r2, #170	@ 0xaa
 80047ca:	0052      	lsls	r2, r2, #1
 80047cc:	18bb      	adds	r3, r7, r2
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d004      	beq.n	80047de <ParseBuffer+0x36a>
 80047d4:	18bb      	adds	r3, r7, r2
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b45      	cmp	r3, #69	@ 0x45
 80047dc:	d00a      	beq.n	80047f4 <ParseBuffer+0x380>
 80047de:	22a4      	movs	r2, #164	@ 0xa4
 80047e0:	0052      	lsls	r2, r2, #1
 80047e2:	18bb      	adds	r3, r7, r2
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <ParseBuffer+0x38a>
 80047ea:	18bb      	adds	r3, r7, r2
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b46      	cmp	r3, #70	@ 0x46
 80047f2:	d104      	bne.n	80047fe <ParseBuffer+0x38a>
      status = RECEIVE_STATUS_ERROR;
 80047f4:	2360      	movs	r3, #96	@ 0x60
 80047f6:	33ff      	adds	r3, #255	@ 0xff
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	2201      	movs	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80047fe:	22a8      	movs	r2, #168	@ 0xa8
 8004800:	0052      	lsls	r2, r2, #1
 8004802:	18bb      	adds	r3, r7, r2
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d007      	beq.n	800481a <ParseBuffer+0x3a6>
 800480a:	18bb      	adds	r3, r7, r2
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b57      	cmp	r3, #87	@ 0x57
 8004812:	d102      	bne.n	800481a <ParseBuffer+0x3a6>
      ConnectionMade = true;
 8004814:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <ParseBuffer+0x3d4>)
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800481a:	22a6      	movs	r2, #166	@ 0xa6
 800481c:	0052      	lsls	r2, r2, #1
 800481e:	18bb      	adds	r3, r7, r2
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <ParseBuffer+0x3c2>
 8004826:	18bb      	adds	r3, r7, r2
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b32      	cmp	r3, #50	@ 0x32
 800482e:	d102      	bne.n	8004836 <ParseBuffer+0x3c2>
      beurs = true;
 8004830:	4b06      	ldr	r3, [pc, #24]	@ (800484c <ParseBuffer+0x3d8>)
 8004832:	2201      	movs	r2, #1
 8004834:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8004836:	2360      	movs	r3, #96	@ 0x60
 8004838:	33ff      	adds	r3, #255	@ 0xff
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	781b      	ldrb	r3, [r3, #0]

}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b059      	add	sp, #356	@ 0x164
 8004844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	2000055c 	.word	0x2000055c
 800484c:	2000055e 	.word	0x2000055e

08004850 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8004856:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <PollAwake+0x34>)
 8004858:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	0018      	movs	r0, r3
 800485e:	f7fb fc85 	bl	800016c <strlen>
 8004862:	0003      	movs	r3, r0
 8004864:	b29a      	uxth	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	0011      	movs	r1, r2
 800486a:	0018      	movs	r0, r3
 800486c:	f7ff f8c4 	bl	80039f8 <ESP_Send>
 8004870:	1e03      	subs	r3, r0, #0
 8004872:	d001      	beq.n	8004878 <PollAwake+0x28>
    return true;
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <PollAwake+0x2a>
  }
  else{
    return false;
 8004878:	2300      	movs	r3, #0
  }
}
 800487a:	0018      	movs	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	b002      	add	sp, #8
 8004880:	bd80      	pop	{r7, pc}
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	08025ee4 	.word	0x08025ee4

08004888 <RFPower>:

bool RFPower(){
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800488e:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <RFPower+0x34>)
 8004890:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0018      	movs	r0, r3
 8004896:	f7fb fc69 	bl	800016c <strlen>
 800489a:	0003      	movs	r3, r0
 800489c:	b29a      	uxth	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	0011      	movs	r1, r2
 80048a2:	0018      	movs	r0, r3
 80048a4:	f7ff f8a8 	bl	80039f8 <ESP_Send>
 80048a8:	1e03      	subs	r3, r0, #0
 80048aa:	d001      	beq.n	80048b0 <RFPower+0x28>
    return true;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <RFPower+0x2a>
  }
  else{
    return false;
 80048b0:	2300      	movs	r3, #0
  }
}
 80048b2:	0018      	movs	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b002      	add	sp, #8
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	08025eec 	.word	0x08025eec

080048c0 <CheckRFPower>:

bool CheckRFPower(){
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80048c6:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <CheckRFPower+0x34>)
 80048c8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0018      	movs	r0, r3
 80048ce:	f7fb fc4d 	bl	800016c <strlen>
 80048d2:	0003      	movs	r3, r0
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	0011      	movs	r1, r2
 80048da:	0018      	movs	r0, r3
 80048dc:	f7ff f88c 	bl	80039f8 <ESP_Send>
 80048e0:	1e03      	subs	r3, r0, #0
 80048e2:	d001      	beq.n	80048e8 <CheckRFPower+0x28>
    return true;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <CheckRFPower+0x2a>
  }
  else{
    return false;
 80048e8:	2300      	movs	r3, #0
  }
}
 80048ea:	0018      	movs	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b002      	add	sp, #8
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	08025efc 	.word	0x08025efc

080048f8 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80048fe:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <ATRestore+0x34>)
 8004900:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	0018      	movs	r0, r3
 8004906:	f7fb fc31 	bl	800016c <strlen>
 800490a:	0003      	movs	r3, r0
 800490c:	b29a      	uxth	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	0011      	movs	r1, r2
 8004912:	0018      	movs	r0, r3
 8004914:	f7ff f870 	bl	80039f8 <ESP_Send>
 8004918:	1e03      	subs	r3, r0, #0
 800491a:	d001      	beq.n	8004920 <ATRestore+0x28>
    return true;
 800491c:	2301      	movs	r3, #1
 800491e:	e000      	b.n	8004922 <ATRestore+0x2a>
  }
  else{
    return false;
 8004920:	2300      	movs	r3, #0
  }
}
 8004922:	0018      	movs	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	b002      	add	sp, #8
 8004928:	bd80      	pop	{r7, pc}
 800492a:	46c0      	nop			@ (mov r8, r8)
 800492c:	08025f0c 	.word	0x08025f0c

08004930 <CWINIT>:

bool CWINIT(){
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8004936:	4b0b      	ldr	r3, [pc, #44]	@ (8004964 <CWINIT+0x34>)
 8004938:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	0018      	movs	r0, r3
 800493e:	f7fb fc15 	bl	800016c <strlen>
 8004942:	0003      	movs	r3, r0
 8004944:	b29a      	uxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	0011      	movs	r1, r2
 800494a:	0018      	movs	r0, r3
 800494c:	f7ff f854 	bl	80039f8 <ESP_Send>
 8004950:	1e03      	subs	r3, r0, #0
 8004952:	d001      	beq.n	8004958 <CWINIT+0x28>
    return true;
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <CWINIT+0x2a>
  }
  else{
    return false;
 8004958:	2300      	movs	r3, #0
  }
}
 800495a:	0018      	movs	r0, r3
 800495c:	46bd      	mov	sp, r7
 800495e:	b002      	add	sp, #8
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			@ (mov r8, r8)
 8004964:	08025f1c 	.word	0x08025f1c

08004968 <CWMODE1>:

bool CWMODE1(){
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800496e:	4b0b      	ldr	r3, [pc, #44]	@ (800499c <CWMODE1+0x34>)
 8004970:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0018      	movs	r0, r3
 8004976:	f7fb fbf9 	bl	800016c <strlen>
 800497a:	0003      	movs	r3, r0
 800497c:	b29a      	uxth	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0011      	movs	r1, r2
 8004982:	0018      	movs	r0, r3
 8004984:	f7ff f838 	bl	80039f8 <ESP_Send>
 8004988:	1e03      	subs	r3, r0, #0
 800498a:	d001      	beq.n	8004990 <CWMODE1+0x28>
    return true;
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004990:	2300      	movs	r3, #0
  }
}
 8004992:	0018      	movs	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	b002      	add	sp, #8
 8004998:	bd80      	pop	{r7, pc}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	08025f2c 	.word	0x08025f2c

080049a0 <CWMODE2>:

bool CWMODE2(){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80049a6:	4b0b      	ldr	r3, [pc, #44]	@ (80049d4 <CWMODE2+0x34>)
 80049a8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7fb fbdd 	bl	800016c <strlen>
 80049b2:	0003      	movs	r3, r0
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	0011      	movs	r1, r2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7ff f81c 	bl	80039f8 <ESP_Send>
 80049c0:	1e03      	subs	r3, r0, #0
 80049c2:	d001      	beq.n	80049c8 <CWMODE2+0x28>
    return true;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <CWMODE2+0x2a>
  }
  else{
    return false;
 80049c8:	2300      	movs	r3, #0
  }
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b002      	add	sp, #8
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	08025f3c 	.word	0x08025f3c

080049d8 <CWAUTOCONN>:

bool CWAUTOCONN(){
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80049de:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <CWAUTOCONN+0x34>)
 80049e0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f7fb fbc1 	bl	800016c <strlen>
 80049ea:	0003      	movs	r3, r0
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0011      	movs	r1, r2
 80049f2:	0018      	movs	r0, r3
 80049f4:	f7ff f800 	bl	80039f8 <ESP_Send>
 80049f8:	1e03      	subs	r3, r0, #0
 80049fa:	d001      	beq.n	8004a00 <CWAUTOCONN+0x28>
    return true;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004a00:	2300      	movs	r3, #0
  }
}
 8004a02:	0018      	movs	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b002      	add	sp, #8
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	08025f4c 	.word	0x08025f4c

08004a10 <CWJAP>:

bool CWJAP(){
 8004a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a12:	46c6      	mov	lr, r8
 8004a14:	b500      	push	{lr}
 8004a16:	b0a2      	sub	sp, #136	@ 0x88
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	466b      	mov	r3, sp
 8004a1c:	4698      	mov	r8, r3
  beursTest = true;
 8004a1e:	4b39      	ldr	r3, [pc, #228]	@ (8004b04 <CWJAP+0xf4>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004a24:	2618      	movs	r6, #24
 8004a26:	19bb      	adds	r3, r7, r6
 8004a28:	2264      	movs	r2, #100	@ 0x64
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f01d fee3 	bl	80227f8 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004a32:	4b35      	ldr	r3, [pc, #212]	@ (8004b08 <CWJAP+0xf8>)
 8004a34:	4a35      	ldr	r2, [pc, #212]	@ (8004b0c <CWJAP+0xfc>)
 8004a36:	4936      	ldr	r1, [pc, #216]	@ (8004b10 <CWJAP+0x100>)
 8004a38:	19b8      	adds	r0, r7, r6
 8004a3a:	f01d fd77 	bl	802252c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004a3e:	19bb      	adds	r3, r7, r6
 8004a40:	0018      	movs	r0, r3
 8004a42:	f7fb fb93 	bl	800016c <strlen>
 8004a46:	0002      	movs	r2, r0
 8004a48:	216f      	movs	r1, #111	@ 0x6f
 8004a4a:	0030      	movs	r0, r6
 8004a4c:	180b      	adds	r3, r1, r0
 8004a4e:	19db      	adds	r3, r3, r7
 8004a50:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004a52:	180b      	adds	r3, r1, r0
 8004a54:	19db      	adds	r3, r3, r7
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	1e5a      	subs	r2, r3, #1
 8004a5c:	2180      	movs	r1, #128	@ 0x80
 8004a5e:	1879      	adds	r1, r7, r1
 8004a60:	600a      	str	r2, [r1, #0]
 8004a62:	001a      	movs	r2, r3
 8004a64:	60ba      	str	r2, [r7, #8]
 8004a66:	2200      	movs	r2, #0
 8004a68:	60fa      	str	r2, [r7, #12]
 8004a6a:	68b8      	ldr	r0, [r7, #8]
 8004a6c:	68f9      	ldr	r1, [r7, #12]
 8004a6e:	0002      	movs	r2, r0
 8004a70:	0f52      	lsrs	r2, r2, #29
 8004a72:	000e      	movs	r6, r1
 8004a74:	00f6      	lsls	r6, r6, #3
 8004a76:	617e      	str	r6, [r7, #20]
 8004a78:	697e      	ldr	r6, [r7, #20]
 8004a7a:	4316      	orrs	r6, r2
 8004a7c:	617e      	str	r6, [r7, #20]
 8004a7e:	0002      	movs	r2, r0
 8004a80:	00d2      	lsls	r2, r2, #3
 8004a82:	613a      	str	r2, [r7, #16]
 8004a84:	001a      	movs	r2, r3
 8004a86:	603a      	str	r2, [r7, #0]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	6838      	ldr	r0, [r7, #0]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	0002      	movs	r2, r0
 8004a92:	0f52      	lsrs	r2, r2, #29
 8004a94:	000e      	movs	r6, r1
 8004a96:	00f5      	lsls	r5, r6, #3
 8004a98:	4315      	orrs	r5, r2
 8004a9a:	0002      	movs	r2, r0
 8004a9c:	00d4      	lsls	r4, r2, #3
 8004a9e:	3307      	adds	r3, #7
 8004aa0:	08db      	lsrs	r3, r3, #3
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	466a      	mov	r2, sp
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	469d      	mov	sp, r3
 8004aaa:	466b      	mov	r3, sp
 8004aac:	3300      	adds	r3, #0
 8004aae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004ab0:	246f      	movs	r4, #111	@ 0x6f
 8004ab2:	2518      	movs	r5, #24
 8004ab4:	1963      	adds	r3, r4, r5
 8004ab6:	19db      	adds	r3, r3, r7
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	3301      	adds	r3, #1
 8004abc:	001a      	movs	r2, r3
 8004abe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f01d fe98 	bl	80227f8 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004ac8:	1963      	adds	r3, r4, r5
 8004aca:	19db      	adds	r3, r3, r7
 8004acc:	781a      	ldrb	r2, [r3, #0]
 8004ace:	1979      	adds	r1, r7, r5
 8004ad0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f01d feb7 	bl	8022846 <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004ad8:	1963      	adds	r3, r4, r5
 8004ada:	19db      	adds	r3, r3, r7
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ae2:	0011      	movs	r1, r2
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7fe ff87 	bl	80039f8 <ESP_Send>
 8004aea:	1e03      	subs	r3, r0, #0
 8004aec:	d001      	beq.n	8004af2 <CWJAP+0xe2>
    return true;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <CWJAP+0xe4>
  }
  else{
    return false;
 8004af2:	2300      	movs	r3, #0
 8004af4:	46c5      	mov	sp, r8
  }
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b022      	add	sp, #136	@ 0x88
 8004afc:	bc80      	pop	{r7}
 8004afe:	46b8      	mov	r8, r7
 8004b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b02:	46c0      	nop			@ (mov r8, r8)
 8004b04:	2000055d 	.word	0x2000055d
 8004b08:	080286bc 	.word	0x080286bc
 8004b0c:	080286b0 	.word	0x080286b0
 8004b10:	08025f60 	.word	0x08025f60

08004b14 <CWMODE3>:

bool CWMODE3(){
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <CWMODE3+0x34>)
 8004b1c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	0018      	movs	r0, r3
 8004b22:	f7fb fb23 	bl	800016c <strlen>
 8004b26:	0003      	movs	r3, r0
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	0011      	movs	r1, r2
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f7fe ff62 	bl	80039f8 <ESP_Send>
 8004b34:	1e03      	subs	r3, r0, #0
 8004b36:	d001      	beq.n	8004b3c <CWMODE3+0x28>
    return true;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <CWMODE3+0x2a>
  }
  else{
    return false;
 8004b3c:	2300      	movs	r3, #0
  }
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b002      	add	sp, #8
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	08025f78 	.word	0x08025f78

08004b4c <CWSTATE>:

bool CWSTATE(){
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004b52:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <CWSTATE+0x34>)
 8004b54:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f7fb fb07 	bl	800016c <strlen>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	0011      	movs	r1, r2
 8004b66:	0018      	movs	r0, r3
 8004b68:	f7fe ff46 	bl	80039f8 <ESP_Send>
 8004b6c:	1e03      	subs	r3, r0, #0
 8004b6e:	d001      	beq.n	8004b74 <CWSTATE+0x28>
    return true;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004b74:	2300      	movs	r3, #0
  }
}
 8004b76:	0018      	movs	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b002      	add	sp, #8
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	08025f88 	.word	0x08025f88

08004b84 <CWSAP>:

bool CWSAP(){
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <CWSAP+0x34>)
 8004b8c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f7fb faeb 	bl	800016c <strlen>
 8004b96:	0003      	movs	r3, r0
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0011      	movs	r1, r2
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f7fe ff2a 	bl	80039f8 <ESP_Send>
 8004ba4:	1e03      	subs	r3, r0, #0
 8004ba6:	d001      	beq.n	8004bac <CWSAP+0x28>
    return true;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <CWSAP+0x2a>
  }
  else{
    return false;
 8004bac:	2300      	movs	r3, #0
  }
}
 8004bae:	0018      	movs	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b002      	add	sp, #8
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	08025f98 	.word	0x08025f98

08004bbc <CIPMUX>:

bool CIPMUX(){
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf0 <CIPMUX+0x34>)
 8004bc4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7fb facf 	bl	800016c <strlen>
 8004bce:	0003      	movs	r3, r0
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0011      	movs	r1, r2
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f7fe ff0e 	bl	80039f8 <ESP_Send>
 8004bdc:	1e03      	subs	r3, r0, #0
 8004bde:	d001      	beq.n	8004be4 <CIPMUX+0x28>
    return true;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <CIPMUX+0x2a>
  }
  else{
    return false;
 8004be4:	2300      	movs	r3, #0
  }
}
 8004be6:	0018      	movs	r0, r3
 8004be8:	46bd      	mov	sp, r7
 8004bea:	b002      	add	sp, #8
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	08025fbc 	.word	0x08025fbc

08004bf4 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004c28 <WEBSERVER+0x34>)
 8004bfc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	0018      	movs	r0, r3
 8004c02:	f7fb fab3 	bl	800016c <strlen>
 8004c06:	0003      	movs	r3, r0
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	0011      	movs	r1, r2
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f7fe fef2 	bl	80039f8 <ESP_Send>
 8004c14:	1e03      	subs	r3, r0, #0
 8004c16:	d001      	beq.n	8004c1c <WEBSERVER+0x28>
    return true;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004c1c:	2300      	movs	r3, #0
  }
}
 8004c1e:	0018      	movs	r0, r3
 8004c20:	46bd      	mov	sp, r7
 8004c22:	b002      	add	sp, #8
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	08025fcc 	.word	0x08025fcc

08004c2c <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 8004c32:	1cfb      	adds	r3, r7, #3
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8004c38:	4b26      	ldr	r3, [pc, #152]	@ (8004cd4 <HTTPCPOST+0xa8>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	1dbc      	adds	r4, r7, #6
 8004c3e:	1cf9      	adds	r1, r7, #3
 8004c40:	2200      	movs	r2, #0
 8004c42:	0018      	movs	r0, r3
 8004c44:	f7ff f88e 	bl	8003d64 <CreateMessage>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004c4c:	4b21      	ldr	r3, [pc, #132]	@ (8004cd4 <HTTPCPOST+0xa8>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d007      	beq.n	8004c64 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004c54:	1dbb      	adds	r3, r7, #6
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd8 <HTTPCPOST+0xac>)
 8004c5a:	4920      	ldr	r1, [pc, #128]	@ (8004cdc <HTTPCPOST+0xb0>)
 8004c5c:	4820      	ldr	r0, [pc, #128]	@ (8004ce0 <HTTPCPOST+0xb4>)
 8004c5e:	f01d fc65 	bl	802252c <siprintf>
 8004c62:	e015      	b.n	8004c90 <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004c64:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce4 <HTTPCPOST+0xb8>)
 8004c66:	4820      	ldr	r0, [pc, #128]	@ (8004ce8 <HTTPCPOST+0xbc>)
 8004c68:	220c      	movs	r2, #12
 8004c6a:	0019      	movs	r1, r3
 8004c6c:	f004 f96a 	bl	8008f44 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004c70:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce4 <HTTPCPOST+0xb8>)
 8004c72:	4b1e      	ldr	r3, [pc, #120]	@ (8004cec <HTTPCPOST+0xc0>)
 8004c74:	0011      	movs	r1, r2
 8004c76:	0018      	movs	r0, r3
 8004c78:	f7ff f850 	bl	8003d1c <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004c7c:	1dbb      	adds	r3, r7, #6
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	4c1a      	ldr	r4, [pc, #104]	@ (8004cec <HTTPCPOST+0xc0>)
 8004c82:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf0 <HTTPCPOST+0xc4>)
 8004c84:	491b      	ldr	r1, [pc, #108]	@ (8004cf4 <HTTPCPOST+0xc8>)
 8004c86:	4816      	ldr	r0, [pc, #88]	@ (8004ce0 <HTTPCPOST+0xb4>)
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	0023      	movs	r3, r4
 8004c8c:	f01d fc4e 	bl	802252c <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8004c90:	4b13      	ldr	r3, [pc, #76]	@ (8004ce0 <HTTPCPOST+0xb4>)
 8004c92:	0018      	movs	r0, r3
 8004c94:	f7fb fa6a 	bl	800016c <strlen>
 8004c98:	0002      	movs	r2, r0
 8004c9a:	1d3b      	adds	r3, r7, #4
 8004c9c:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8004c9e:	1d3b      	adds	r3, r7, #4
 8004ca0:	8818      	ldrh	r0, [r3, #0]
 8004ca2:	1cfb      	adds	r3, r7, #3
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	4a14      	ldr	r2, [pc, #80]	@ (8004cf8 <HTTPCPOST+0xcc>)
 8004ca8:	4914      	ldr	r1, [pc, #80]	@ (8004cfc <HTTPCPOST+0xd0>)
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	0003      	movs	r3, r0
 8004cae:	2003      	movs	r0, #3
 8004cb0:	f00b fc44 	bl	801053c <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8004cb4:	1d3b      	adds	r3, r7, #4
 8004cb6:	881a      	ldrh	r2, [r3, #0]
 8004cb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ce0 <HTTPCPOST+0xb4>)
 8004cba:	0011      	movs	r1, r2
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f7fe fe9b 	bl	80039f8 <ESP_Send>
 8004cc2:	1e03      	subs	r3, r0, #0
 8004cc4:	d001      	beq.n	8004cca <HTTPCPOST+0x9e>
    return true;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8004cca:	2300      	movs	r3, #0
  }
}
 8004ccc:	0018      	movs	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b003      	add	sp, #12
 8004cd2:	bd90      	pop	{r4, r7, pc}
 8004cd4:	2000055e 	.word	0x2000055e
 8004cd8:	080286d8 	.word	0x080286d8
 8004cdc:	08025fe4 	.word	0x08025fe4
 8004ce0:	20000584 	.word	0x20000584
 8004ce4:	2000074c 	.word	0x2000074c
 8004ce8:	08080000 	.word	0x08080000
 8004cec:	20000758 	.word	0x20000758
 8004cf0:	08028714 	.word	0x08028714
 8004cf4:	0802601c 	.word	0x0802601c
 8004cf8:	0802605c 	.word	0x0802605c
 8004cfc:	08025770 	.word	0x08025770

08004d00 <SENDDATA>:

bool SENDDATA(){
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af02      	add	r7, sp, #8
  bool result = false;
 8004d06:	1dfb      	adds	r3, r7, #7
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d48 <SENDDATA+0x48>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	1df9      	adds	r1, r7, #7
 8004d12:	2201      	movs	r2, #1
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7ff f825 	bl	8003d64 <CreateMessage>
 8004d1a:	0003      	movs	r3, r0
 8004d1c:	001a      	movs	r2, r3
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <SENDDATA+0x4c>)
 8004d20:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8004d22:	1dfb      	adds	r3, r7, #7
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	0018      	movs	r0, r3
 8004d28:	4b08      	ldr	r3, [pc, #32]	@ (8004d4c <SENDDATA+0x4c>)
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	4a08      	ldr	r2, [pc, #32]	@ (8004d50 <SENDDATA+0x50>)
 8004d2e:	4909      	ldr	r1, [pc, #36]	@ (8004d54 <SENDDATA+0x54>)
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	0003      	movs	r3, r0
 8004d34:	2003      	movs	r0, #3
 8004d36:	f00b fc01 	bl	801053c <CreateLine>
  return result;
 8004d3a:	1dfb      	adds	r3, r7, #7
 8004d3c:	781b      	ldrb	r3, [r3, #0]
}
 8004d3e:	0018      	movs	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b002      	add	sp, #8
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	46c0      	nop			@ (mov r8, r8)
 8004d48:	2000055e 	.word	0x2000055e
 8004d4c:	20000578 	.word	0x20000578
 8004d50:	080260b8 	.word	0x080260b8
 8004d54:	08025770 	.word	0x08025770

08004d58 <SLEEP>:

bool SLEEP(){
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d8c <SLEEP+0x34>)
 8004d60:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	0018      	movs	r0, r3
 8004d66:	f7fb fa01 	bl	800016c <strlen>
 8004d6a:	0003      	movs	r3, r0
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	0011      	movs	r1, r2
 8004d72:	0018      	movs	r0, r3
 8004d74:	f7fe fe40 	bl	80039f8 <ESP_Send>
 8004d78:	1e03      	subs	r3, r0, #0
 8004d7a:	d001      	beq.n	8004d80 <SLEEP+0x28>
    return true;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e000      	b.n	8004d82 <SLEEP+0x2a>
  }
  else{
    return false;
 8004d80:	2300      	movs	r3, #0
  }
}
 8004d82:	0018      	movs	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b002      	add	sp, #8
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	080260f4 	.word	0x080260f4

08004d90 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004d96:	4b0d      	ldr	r3, [pc, #52]	@ (8004dcc <CIPSNTPCFG+0x3c>)
 8004d98:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7fb f9e5 	bl	800016c <strlen>
 8004da2:	0003      	movs	r3, r0
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	0011      	movs	r1, r2
 8004daa:	0018      	movs	r0, r3
 8004dac:	f7fe fe24 	bl	80039f8 <ESP_Send>
 8004db0:	1e03      	subs	r3, r0, #0
 8004db2:	d006      	beq.n	8004dc2 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004db4:	23fa      	movs	r3, #250	@ 0xfa
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	0018      	movs	r0, r3
 8004dba:	f00c f815 	bl	8010de8 <HAL_Delay>
    return true;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004dc2:	2300      	movs	r3, #0
  }
}
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b002      	add	sp, #8
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	08026104 	.word	0x08026104

08004dd0 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e04 <CIPSNTPTIME+0x34>)
 8004dd8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f7fb f9c5 	bl	800016c <strlen>
 8004de2:	0003      	movs	r3, r0
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	0011      	movs	r1, r2
 8004dea:	0018      	movs	r0, r3
 8004dec:	f7fe fe04 	bl	80039f8 <ESP_Send>
 8004df0:	1e03      	subs	r3, r0, #0
 8004df2:	d001      	beq.n	8004df8 <CIPSNTPTIME+0x28>
    return true;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004df8:	2300      	movs	r3, #0
  }
}
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b002      	add	sp, #8
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	08026154 	.word	0x08026154

08004e08 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e3c <CIPSNTPINTV+0x34>)
 8004e10:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7fb f9a9 	bl	800016c <strlen>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	0011      	movs	r1, r2
 8004e22:	0018      	movs	r0, r3
 8004e24:	f7fe fde8 	bl	80039f8 <ESP_Send>
 8004e28:	1e03      	subs	r3, r0, #0
 8004e2a:	d001      	beq.n	8004e30 <CIPSNTPINTV+0x28>
    return true;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004e30:	2300      	movs	r3, #0
  }
}
 8004e32:	0018      	movs	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	b002      	add	sp, #8
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	08026168 	.word	0x08026168

08004e40 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004e40:	b5b0      	push	{r4, r5, r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	0002      	movs	r2, r0
 8004e48:	1dfb      	adds	r3, r7, #7
 8004e4a:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004e4c:	4b6c      	ldr	r3, [pc, #432]	@ (8005000 <DMA_ProcessBuffer+0x1c0>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	200e      	movs	r0, #14
 8004e56:	183b      	adds	r3, r7, r0
 8004e58:	2180      	movs	r1, #128	@ 0x80
 8004e5a:	0049      	lsls	r1, r1, #1
 8004e5c:	1a8a      	subs	r2, r1, r2
 8004e5e:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004e60:	230d      	movs	r3, #13
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	2203      	movs	r2, #3
 8004e66:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004e68:	183b      	adds	r3, r7, r0
 8004e6a:	881a      	ldrh	r2, [r3, #0]
 8004e6c:	2380      	movs	r3, #128	@ 0x80
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d903      	bls.n	8004e7c <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004e74:	183b      	adds	r3, r7, r0
 8004e76:	2280      	movs	r2, #128	@ 0x80
 8004e78:	0052      	lsls	r2, r2, #1
 8004e7a:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004e7c:	4b61      	ldr	r3, [pc, #388]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	001a      	movs	r2, r3
 8004e84:	230e      	movs	r3, #14
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d131      	bne.n	8004ef2 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004e8e:	4b5e      	ldr	r3, [pc, #376]	@ (8005008 <DMA_ProcessBuffer+0x1c8>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b14      	cmp	r3, #20
 8004e94:	d91b      	bls.n	8004ece <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004e96:	4b5c      	ldr	r3, [pc, #368]	@ (8005008 <DMA_ProcessBuffer+0x1c8>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004e9c:	4b5b      	ldr	r3, [pc, #364]	@ (800500c <DMA_ProcessBuffer+0x1cc>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d107      	bne.n	8004eb4 <DMA_ProcessBuffer+0x74>
 8004ea4:	4b5a      	ldr	r3, [pc, #360]	@ (8005010 <DMA_ProcessBuffer+0x1d0>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004eac:	230d      	movs	r3, #13
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004eb4:	4b55      	ldr	r3, [pc, #340]	@ (800500c <DMA_ProcessBuffer+0x1cc>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d103      	bne.n	8004ec4 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004ebc:	4b55      	ldr	r3, [pc, #340]	@ (8005014 <DMA_ProcessBuffer+0x1d4>)
 8004ebe:	220b      	movs	r2, #11
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	e016      	b.n	8004ef2 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004ec4:	230d      	movs	r3, #13
 8004ec6:	18fb      	adds	r3, r7, r3
 8004ec8:	2206      	movs	r2, #6
 8004eca:	701a      	strb	r2, [r3, #0]
 8004ecc:	e011      	b.n	8004ef2 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004ece:	4b4e      	ldr	r3, [pc, #312]	@ (8005008 <DMA_ProcessBuffer+0x1c8>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8005008 <DMA_ProcessBuffer+0x1c8>)
 8004ed8:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004eda:	f00b ff7b 	bl	8010dd4 <HAL_GetTick>
 8004ede:	0003      	movs	r3, r0
 8004ee0:	33f5      	adds	r3, #245	@ 0xf5
 8004ee2:	33ff      	adds	r3, #255	@ 0xff
 8004ee4:	001a      	movs	r2, r3
 8004ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8005018 <DMA_ProcessBuffer+0x1d8>)
 8004ee8:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004eea:	230d      	movs	r3, #13
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	2204      	movs	r2, #4
 8004ef0:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004ef2:	4b44      	ldr	r3, [pc, #272]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	001a      	movs	r2, r3
 8004efa:	210e      	movs	r1, #14
 8004efc:	187b      	adds	r3, r7, r1
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d100      	bne.n	8004f06 <DMA_ProcessBuffer+0xc6>
 8004f04:	e075      	b.n	8004ff2 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004f06:	4b40      	ldr	r3, [pc, #256]	@ (8005008 <DMA_ProcessBuffer+0x1c8>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004f0c:	4b43      	ldr	r3, [pc, #268]	@ (800501c <DMA_ProcessBuffer+0x1dc>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	4b3c      	ldr	r3, [pc, #240]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d109      	bne.n	8004f30 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	4b3e      	ldr	r3, [pc, #248]	@ (800501c <DMA_ProcessBuffer+0x1dc>)
 8004f24:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004f26:	230d      	movs	r3, #13
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	220a      	movs	r2, #10
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e060      	b.n	8004ff2 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004f30:	4b3a      	ldr	r3, [pc, #232]	@ (800501c <DMA_ProcessBuffer+0x1dc>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	001a      	movs	r2, r3
 8004f38:	210e      	movs	r1, #14
 8004f3a:	187b      	adds	r3, r7, r1
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d009      	beq.n	8004f56 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004f42:	187b      	adds	r3, r7, r1
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	4b34      	ldr	r3, [pc, #208]	@ (800501c <DMA_ProcessBuffer+0x1dc>)
 8004f4a:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004f4c:	230d      	movs	r3, #13
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	220a      	movs	r2, #10
 8004f52:	701a      	strb	r2, [r3, #0]
 8004f54:	e04d      	b.n	8004ff2 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004f56:	4b2b      	ldr	r3, [pc, #172]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	210e      	movs	r1, #14
 8004f60:	187b      	adds	r3, r7, r1
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d917      	bls.n	8004f98 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004f68:	4b26      	ldr	r3, [pc, #152]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	001a      	movs	r2, r3
 8004f70:	4b2b      	ldr	r3, [pc, #172]	@ (8005020 <DMA_ProcessBuffer+0x1e0>)
 8004f72:	18d0      	adds	r0, r2, r3
 8004f74:	4b23      	ldr	r3, [pc, #140]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	001a      	movs	r2, r3
 8004f7c:	187b      	adds	r3, r7, r1
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	b299      	uxth	r1, r3
 8004f84:	230d      	movs	r3, #13
 8004f86:	18fc      	adds	r4, r7, r3
 8004f88:	1dfb      	adds	r3, r7, #7
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	001a      	movs	r2, r3
 8004f8e:	f7ff fa71 	bl	8004474 <ParseBuffer>
 8004f92:	0003      	movs	r3, r0
 8004f94:	7023      	strb	r3, [r4, #0]
 8004f96:	e026      	b.n	8004fe6 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004f98:	4b1a      	ldr	r3, [pc, #104]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	001a      	movs	r2, r3
 8004fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8005020 <DMA_ProcessBuffer+0x1e0>)
 8004fa2:	18d0      	adds	r0, r2, r3
 8004fa4:	4b17      	ldr	r3, [pc, #92]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	001a      	movs	r2, r3
 8004fac:	2380      	movs	r3, #128	@ 0x80
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	b299      	uxth	r1, r3
 8004fb4:	250d      	movs	r5, #13
 8004fb6:	197c      	adds	r4, r7, r5
 8004fb8:	1dfb      	adds	r3, r7, #7
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	001a      	movs	r2, r3
 8004fbe:	f7ff fa59 	bl	8004474 <ParseBuffer>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004fc6:	210e      	movs	r1, #14
 8004fc8:	187b      	adds	r3, r7, r1
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004fd0:	197c      	adds	r4, r7, r5
 8004fd2:	1dfb      	adds	r3, r7, #7
 8004fd4:	781a      	ldrb	r2, [r3, #0]
 8004fd6:	187b      	adds	r3, r7, r1
 8004fd8:	8819      	ldrh	r1, [r3, #0]
 8004fda:	4b11      	ldr	r3, [pc, #68]	@ (8005020 <DMA_ProcessBuffer+0x1e0>)
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f7ff fa49 	bl	8004474 <ParseBuffer>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8004fe6:	230e      	movs	r3, #14
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	4b05      	ldr	r3, [pc, #20]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004ff0:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004ff2:	230d      	movs	r3, #13
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	781b      	ldrb	r3, [r3, #0]
}
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b004      	add	sp, #16
 8004ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8005000:	200020c4 	.word	0x200020c4
 8005004:	20000771 	.word	0x20000771
 8005008:	2000062c 	.word	0x2000062c
 800500c:	2000062e 	.word	0x2000062e
 8005010:	20000000 	.word	0x20000000
 8005014:	2000002c 	.word	0x2000002c
 8005018:	20000624 	.word	0x20000624
 800501c:	20000772 	.word	0x20000772
 8005020:	20000458 	.word	0x20000458

08005024 <clearDMABuffer>:

void clearDMABuffer(){
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8005028:	2380      	movs	r3, #128	@ 0x80
 800502a:	005a      	lsls	r2, r3, #1
 800502c:	4b03      	ldr	r3, [pc, #12]	@ (800503c <clearDMABuffer+0x18>)
 800502e:	2100      	movs	r1, #0
 8005030:	0018      	movs	r0, r3
 8005032:	f01d fbe1 	bl	80227f8 <memset>
}
 8005036:	46c0      	nop			@ (mov r8, r8)
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20000458 	.word	0x20000458

08005040 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	0002      	movs	r2, r0
 8005048:	1dfb      	adds	r3, r7, #7
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	1dbb      	adds	r3, r7, #6
 800504e:	1c0a      	adds	r2, r1, #0
 8005050:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8005052:	210f      	movs	r1, #15
 8005054:	187b      	adds	r3, r7, r1
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800505a:	1dbb      	adds	r3, r7, #6
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d105      	bne.n	800506e <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8005062:	187b      	adds	r3, r7, r1
 8005064:	1dfa      	adds	r2, r7, #7
 8005066:	7812      	ldrb	r2, [r2, #0]
 8005068:	4251      	negs	r1, r2
 800506a:	414a      	adcs	r2, r1
 800506c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 800506e:	1dbb      	adds	r3, r7, #6
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d107      	bne.n	8005086 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8005076:	230f      	movs	r3, #15
 8005078:	18fb      	adds	r3, r7, r3
 800507a:	1dfa      	adds	r2, r7, #7
 800507c:	7812      	ldrb	r2, [r2, #0]
 800507e:	3a02      	subs	r2, #2
 8005080:	4251      	negs	r1, r2
 8005082:	414a      	adcs	r2, r1
 8005084:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8005086:	1dbb      	adds	r3, r7, #6
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d107      	bne.n	800509e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 800508e:	230f      	movs	r3, #15
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	1dfa      	adds	r2, r7, #7
 8005094:	7812      	ldrb	r2, [r2, #0]
 8005096:	3a05      	subs	r2, #5
 8005098:	4251      	negs	r1, r2
 800509a:	414a      	adcs	r2, r1
 800509c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 800509e:	1dbb      	adds	r3, r7, #6
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d107      	bne.n	80050b6 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 80050a6:	230f      	movs	r3, #15
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	1dfa      	adds	r2, r7, #7
 80050ac:	7812      	ldrb	r2, [r2, #0]
 80050ae:	3a0b      	subs	r2, #11
 80050b0:	4251      	negs	r1, r2
 80050b2:	414a      	adcs	r2, r1
 80050b4:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80050b6:	230f      	movs	r3, #15
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	781b      	ldrb	r3, [r3, #0]
}
 80050bc:	0018      	movs	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	b004      	add	sp, #16
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <AT_Send>:

bool AT_Send(AT_Commands state){
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	0002      	movs	r2, r0
 80050cc:	1dfb      	adds	r3, r7, #7
 80050ce:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80050d0:	230f      	movs	r3, #15
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
  switch (state){
 80050d8:	1dfb      	adds	r3, r7, #7
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b14      	cmp	r3, #20
 80050de:	d900      	bls.n	80050e2 <AT_Send+0x1e>
 80050e0:	e19e      	b.n	8005420 <AT_Send+0x35c>
 80050e2:	009a      	lsls	r2, r3, #2
 80050e4:	4bd2      	ldr	r3, [pc, #840]	@ (8005430 <AT_Send+0x36c>)
 80050e6:	18d3      	adds	r3, r2, r3
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80050ec:	4bd1      	ldr	r3, [pc, #836]	@ (8005434 <AT_Send+0x370>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	0018      	movs	r0, r3
 80050f2:	f00b f9cd 	bl	8010490 <TimestampIsReached>
 80050f6:	1e03      	subs	r3, r0, #0
 80050f8:	d100      	bne.n	80050fc <AT_Send+0x38>
 80050fa:	e190      	b.n	800541e <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 80050fc:	4ace      	ldr	r2, [pc, #824]	@ (8005438 <AT_Send+0x374>)
 80050fe:	4bcf      	ldr	r3, [pc, #828]	@ (800543c <AT_Send+0x378>)
 8005100:	0019      	movs	r1, r3
 8005102:	2003      	movs	r0, #3
 8005104:	f00b fa1a 	bl	801053c <CreateLine>
    ATCommandSend = PollAwake();
 8005108:	230f      	movs	r3, #15
 800510a:	18fc      	adds	r4, r7, r3
 800510c:	f7ff fba0 	bl	8004850 <PollAwake>
 8005110:	0003      	movs	r3, r0
 8005112:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005114:	f00b fe5e 	bl	8010dd4 <HAL_GetTick>
 8005118:	0003      	movs	r3, r0
 800511a:	3332      	adds	r3, #50	@ 0x32
 800511c:	001a      	movs	r2, r3
 800511e:	4bc5      	ldr	r3, [pc, #788]	@ (8005434 <AT_Send+0x370>)
 8005120:	601a      	str	r2, [r3, #0]
  }
  break;
 8005122:	e17c      	b.n	800541e <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8005124:	4ac6      	ldr	r2, [pc, #792]	@ (8005440 <AT_Send+0x37c>)
 8005126:	4bc5      	ldr	r3, [pc, #788]	@ (800543c <AT_Send+0x378>)
 8005128:	0019      	movs	r1, r3
 800512a:	2003      	movs	r0, #3
 800512c:	f00b fa06 	bl	801053c <CreateLine>
    ATCommandSend = RFPower();
 8005130:	230f      	movs	r3, #15
 8005132:	18fc      	adds	r4, r7, r3
 8005134:	f7ff fba8 	bl	8004888 <RFPower>
 8005138:	0003      	movs	r3, r0
 800513a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800513c:	f00b fe4a 	bl	8010dd4 <HAL_GetTick>
 8005140:	0003      	movs	r3, r0
 8005142:	330a      	adds	r3, #10
 8005144:	001a      	movs	r2, r3
 8005146:	4bbb      	ldr	r3, [pc, #748]	@ (8005434 <AT_Send+0x370>)
 8005148:	601a      	str	r2, [r3, #0]
    break;
 800514a:	e169      	b.n	8005420 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 800514c:	4abd      	ldr	r2, [pc, #756]	@ (8005444 <AT_Send+0x380>)
 800514e:	4bbb      	ldr	r3, [pc, #748]	@ (800543c <AT_Send+0x378>)
 8005150:	0019      	movs	r1, r3
 8005152:	2003      	movs	r0, #3
 8005154:	f00b f9f2 	bl	801053c <CreateLine>
    ATCommandSend = CheckRFPower();
 8005158:	230f      	movs	r3, #15
 800515a:	18fc      	adds	r4, r7, r3
 800515c:	f7ff fbb0 	bl	80048c0 <CheckRFPower>
 8005160:	0003      	movs	r3, r0
 8005162:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005164:	f00b fe36 	bl	8010dd4 <HAL_GetTick>
 8005168:	0003      	movs	r3, r0
 800516a:	330a      	adds	r3, #10
 800516c:	001a      	movs	r2, r3
 800516e:	4bb1      	ldr	r3, [pc, #708]	@ (8005434 <AT_Send+0x370>)
 8005170:	601a      	str	r2, [r3, #0]
    break;
 8005172:	e155      	b.n	8005420 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8005174:	4ab4      	ldr	r2, [pc, #720]	@ (8005448 <AT_Send+0x384>)
 8005176:	4bb1      	ldr	r3, [pc, #708]	@ (800543c <AT_Send+0x378>)
 8005178:	0019      	movs	r1, r3
 800517a:	2003      	movs	r0, #3
 800517c:	f00b f9de 	bl	801053c <CreateLine>
    ATCommandSend = ATRestore();
 8005180:	230f      	movs	r3, #15
 8005182:	18fc      	adds	r4, r7, r3
 8005184:	f7ff fbb8 	bl	80048f8 <ATRestore>
 8005188:	0003      	movs	r3, r0
 800518a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800518c:	f00b fe22 	bl	8010dd4 <HAL_GetTick>
 8005190:	0003      	movs	r3, r0
 8005192:	3332      	adds	r3, #50	@ 0x32
 8005194:	001a      	movs	r2, r3
 8005196:	4ba7      	ldr	r3, [pc, #668]	@ (8005434 <AT_Send+0x370>)
 8005198:	601a      	str	r2, [r3, #0]
    break;
 800519a:	e141      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 800519c:	4aab      	ldr	r2, [pc, #684]	@ (800544c <AT_Send+0x388>)
 800519e:	4ba7      	ldr	r3, [pc, #668]	@ (800543c <AT_Send+0x378>)
 80051a0:	0019      	movs	r1, r3
 80051a2:	2003      	movs	r0, #3
 80051a4:	f00b f9ca 	bl	801053c <CreateLine>
    ATCommandSend = CWINIT();
 80051a8:	230f      	movs	r3, #15
 80051aa:	18fc      	adds	r4, r7, r3
 80051ac:	f7ff fbc0 	bl	8004930 <CWINIT>
 80051b0:	0003      	movs	r3, r0
 80051b2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051b4:	f00b fe0e 	bl	8010dd4 <HAL_GetTick>
 80051b8:	0003      	movs	r3, r0
 80051ba:	33f5      	adds	r3, #245	@ 0xf5
 80051bc:	33ff      	adds	r3, #255	@ 0xff
 80051be:	001a      	movs	r2, r3
 80051c0:	4b9c      	ldr	r3, [pc, #624]	@ (8005434 <AT_Send+0x370>)
 80051c2:	601a      	str	r2, [r3, #0]
    break;
 80051c4:	e12c      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 80051c6:	4aa2      	ldr	r2, [pc, #648]	@ (8005450 <AT_Send+0x38c>)
 80051c8:	4b9c      	ldr	r3, [pc, #624]	@ (800543c <AT_Send+0x378>)
 80051ca:	0019      	movs	r1, r3
 80051cc:	2003      	movs	r0, #3
 80051ce:	f00b f9b5 	bl	801053c <CreateLine>
    ATCommandSend = CWSTATE();
 80051d2:	230f      	movs	r3, #15
 80051d4:	18fc      	adds	r4, r7, r3
 80051d6:	f7ff fcb9 	bl	8004b4c <CWSTATE>
 80051da:	0003      	movs	r3, r0
 80051dc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051de:	f00b fdf9 	bl	8010dd4 <HAL_GetTick>
 80051e2:	0003      	movs	r3, r0
 80051e4:	33f5      	adds	r3, #245	@ 0xf5
 80051e6:	33ff      	adds	r3, #255	@ 0xff
 80051e8:	001a      	movs	r2, r3
 80051ea:	4b92      	ldr	r3, [pc, #584]	@ (8005434 <AT_Send+0x370>)
 80051ec:	601a      	str	r2, [r3, #0]
    break;
 80051ee:	e117      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80051f0:	4a98      	ldr	r2, [pc, #608]	@ (8005454 <AT_Send+0x390>)
 80051f2:	4b92      	ldr	r3, [pc, #584]	@ (800543c <AT_Send+0x378>)
 80051f4:	0019      	movs	r1, r3
 80051f6:	2003      	movs	r0, #3
 80051f8:	f00b f9a0 	bl	801053c <CreateLine>
    ATCommandSend = CWMODE1();
 80051fc:	230f      	movs	r3, #15
 80051fe:	18fc      	adds	r4, r7, r3
 8005200:	f7ff fbb2 	bl	8004968 <CWMODE1>
 8005204:	0003      	movs	r3, r0
 8005206:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005208:	f00b fde4 	bl	8010dd4 <HAL_GetTick>
 800520c:	0003      	movs	r3, r0
 800520e:	330a      	adds	r3, #10
 8005210:	001a      	movs	r2, r3
 8005212:	4b88      	ldr	r3, [pc, #544]	@ (8005434 <AT_Send+0x370>)
 8005214:	601a      	str	r2, [r3, #0]
    break;
 8005216:	e103      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8005218:	4a8e      	ldr	r2, [pc, #568]	@ (8005454 <AT_Send+0x390>)
 800521a:	4b88      	ldr	r3, [pc, #544]	@ (800543c <AT_Send+0x378>)
 800521c:	0019      	movs	r1, r3
 800521e:	2003      	movs	r0, #3
 8005220:	f00b f98c 	bl	801053c <CreateLine>
    ATCommandSend = CWMODE2();
 8005224:	230f      	movs	r3, #15
 8005226:	18fc      	adds	r4, r7, r3
 8005228:	f7ff fbba 	bl	80049a0 <CWMODE2>
 800522c:	0003      	movs	r3, r0
 800522e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005230:	f00b fdd0 	bl	8010dd4 <HAL_GetTick>
 8005234:	0003      	movs	r3, r0
 8005236:	330a      	adds	r3, #10
 8005238:	001a      	movs	r2, r3
 800523a:	4b7e      	ldr	r3, [pc, #504]	@ (8005434 <AT_Send+0x370>)
 800523c:	601a      	str	r2, [r3, #0]
    break;
 800523e:	e0ef      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005240:	4a85      	ldr	r2, [pc, #532]	@ (8005458 <AT_Send+0x394>)
 8005242:	4b7e      	ldr	r3, [pc, #504]	@ (800543c <AT_Send+0x378>)
 8005244:	0019      	movs	r1, r3
 8005246:	2003      	movs	r0, #3
 8005248:	f00b f978 	bl	801053c <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800524c:	230f      	movs	r3, #15
 800524e:	18fc      	adds	r4, r7, r3
 8005250:	f7ff fbc2 	bl	80049d8 <CWAUTOCONN>
 8005254:	0003      	movs	r3, r0
 8005256:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005258:	f00b fdbc 	bl	8010dd4 <HAL_GetTick>
 800525c:	0003      	movs	r3, r0
 800525e:	330a      	adds	r3, #10
 8005260:	001a      	movs	r2, r3
 8005262:	4b74      	ldr	r3, [pc, #464]	@ (8005434 <AT_Send+0x370>)
 8005264:	601a      	str	r2, [r3, #0]
    break;
 8005266:	e0db      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8005268:	4a7c      	ldr	r2, [pc, #496]	@ (800545c <AT_Send+0x398>)
 800526a:	4b74      	ldr	r3, [pc, #464]	@ (800543c <AT_Send+0x378>)
 800526c:	0019      	movs	r1, r3
 800526e:	2003      	movs	r0, #3
 8005270:	f00b f964 	bl	801053c <CreateLine>
    ATCommandSend = CWJAP();
 8005274:	230f      	movs	r3, #15
 8005276:	18fc      	adds	r4, r7, r3
 8005278:	f7ff fbca 	bl	8004a10 <CWJAP>
 800527c:	0003      	movs	r3, r0
 800527e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005280:	f00b fda8 	bl	8010dd4 <HAL_GetTick>
 8005284:	0003      	movs	r3, r0
 8005286:	3332      	adds	r3, #50	@ 0x32
 8005288:	001a      	movs	r2, r3
 800528a:	4b6a      	ldr	r3, [pc, #424]	@ (8005434 <AT_Send+0x370>)
 800528c:	601a      	str	r2, [r3, #0]
    break;
 800528e:	e0c7      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8005290:	4a73      	ldr	r2, [pc, #460]	@ (8005460 <AT_Send+0x39c>)
 8005292:	4b6a      	ldr	r3, [pc, #424]	@ (800543c <AT_Send+0x378>)
 8005294:	0019      	movs	r1, r3
 8005296:	2003      	movs	r0, #3
 8005298:	f00b f950 	bl	801053c <CreateLine>
    ATCommandSend = CWMODE3();
 800529c:	230f      	movs	r3, #15
 800529e:	18fc      	adds	r4, r7, r3
 80052a0:	f7ff fc38 	bl	8004b14 <CWMODE3>
 80052a4:	0003      	movs	r3, r0
 80052a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052a8:	f00b fd94 	bl	8010dd4 <HAL_GetTick>
 80052ac:	0003      	movs	r3, r0
 80052ae:	330a      	adds	r3, #10
 80052b0:	001a      	movs	r2, r3
 80052b2:	4b60      	ldr	r3, [pc, #384]	@ (8005434 <AT_Send+0x370>)
 80052b4:	601a      	str	r2, [r3, #0]
    break;
 80052b6:	e0b3      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80052b8:	4a6a      	ldr	r2, [pc, #424]	@ (8005464 <AT_Send+0x3a0>)
 80052ba:	4b60      	ldr	r3, [pc, #384]	@ (800543c <AT_Send+0x378>)
 80052bc:	0019      	movs	r1, r3
 80052be:	2003      	movs	r0, #3
 80052c0:	f00b f93c 	bl	801053c <CreateLine>
    ATCommandSend = CWSAP();
 80052c4:	230f      	movs	r3, #15
 80052c6:	18fc      	adds	r4, r7, r3
 80052c8:	f7ff fc5c 	bl	8004b84 <CWSAP>
 80052cc:	0003      	movs	r3, r0
 80052ce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052d0:	f00b fd80 	bl	8010dd4 <HAL_GetTick>
 80052d4:	0003      	movs	r3, r0
 80052d6:	330a      	adds	r3, #10
 80052d8:	001a      	movs	r2, r3
 80052da:	4b56      	ldr	r3, [pc, #344]	@ (8005434 <AT_Send+0x370>)
 80052dc:	601a      	str	r2, [r3, #0]
    break;
 80052de:	e09f      	b.n	8005420 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80052e0:	4a61      	ldr	r2, [pc, #388]	@ (8005468 <AT_Send+0x3a4>)
 80052e2:	4b56      	ldr	r3, [pc, #344]	@ (800543c <AT_Send+0x378>)
 80052e4:	0019      	movs	r1, r3
 80052e6:	2003      	movs	r0, #3
 80052e8:	f00b f928 	bl	801053c <CreateLine>
    ATCommandSend = CIPMUX();
 80052ec:	230f      	movs	r3, #15
 80052ee:	18fc      	adds	r4, r7, r3
 80052f0:	f7ff fc64 	bl	8004bbc <CIPMUX>
 80052f4:	0003      	movs	r3, r0
 80052f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052f8:	f00b fd6c 	bl	8010dd4 <HAL_GetTick>
 80052fc:	0003      	movs	r3, r0
 80052fe:	330a      	adds	r3, #10
 8005300:	001a      	movs	r2, r3
 8005302:	4b4c      	ldr	r3, [pc, #304]	@ (8005434 <AT_Send+0x370>)
 8005304:	601a      	str	r2, [r3, #0]
    break;
 8005306:	e08b      	b.n	8005420 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 8005308:	4a58      	ldr	r2, [pc, #352]	@ (800546c <AT_Send+0x3a8>)
 800530a:	4b4c      	ldr	r3, [pc, #304]	@ (800543c <AT_Send+0x378>)
 800530c:	0019      	movs	r1, r3
 800530e:	2003      	movs	r0, #3
 8005310:	f00b f914 	bl	801053c <CreateLine>
    ATCommandSend = WEBSERVER();
 8005314:	230f      	movs	r3, #15
 8005316:	18fc      	adds	r4, r7, r3
 8005318:	f7ff fc6c 	bl	8004bf4 <WEBSERVER>
 800531c:	0003      	movs	r3, r0
 800531e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005320:	f00b fd58 	bl	8010dd4 <HAL_GetTick>
 8005324:	0003      	movs	r3, r0
 8005326:	330a      	adds	r3, #10
 8005328:	001a      	movs	r2, r3
 800532a:	4b42      	ldr	r3, [pc, #264]	@ (8005434 <AT_Send+0x370>)
 800532c:	601a      	str	r2, [r3, #0]
    break;
 800532e:	e077      	b.n	8005420 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8005330:	230f      	movs	r3, #15
 8005332:	18fc      	adds	r4, r7, r3
 8005334:	f7ff fc7a 	bl	8004c2c <HTTPCPOST>
 8005338:	0003      	movs	r3, r0
 800533a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800533c:	f00b fd4a 	bl	8010dd4 <HAL_GetTick>
 8005340:	0003      	movs	r3, r0
 8005342:	33f5      	adds	r3, #245	@ 0xf5
 8005344:	33ff      	adds	r3, #255	@ 0xff
 8005346:	001a      	movs	r2, r3
 8005348:	4b3a      	ldr	r3, [pc, #232]	@ (8005434 <AT_Send+0x370>)
 800534a:	601a      	str	r2, [r3, #0]
    break;
 800534c:	e068      	b.n	8005420 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 800534e:	4a48      	ldr	r2, [pc, #288]	@ (8005470 <AT_Send+0x3ac>)
 8005350:	4b3a      	ldr	r3, [pc, #232]	@ (800543c <AT_Send+0x378>)
 8005352:	0019      	movs	r1, r3
 8005354:	2003      	movs	r0, #3
 8005356:	f00b f8f1 	bl	801053c <CreateLine>
    ATCommandSend = SENDDATA();
 800535a:	230f      	movs	r3, #15
 800535c:	18fc      	adds	r4, r7, r3
 800535e:	f7ff fccf 	bl	8004d00 <SENDDATA>
 8005362:	0003      	movs	r3, r0
 8005364:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8005366:	f00b fd35 	bl	8010dd4 <HAL_GetTick>
 800536a:	0003      	movs	r3, r0
 800536c:	33f5      	adds	r3, #245	@ 0xf5
 800536e:	33ff      	adds	r3, #255	@ 0xff
 8005370:	001a      	movs	r2, r3
 8005372:	4b30      	ldr	r3, [pc, #192]	@ (8005434 <AT_Send+0x370>)
 8005374:	601a      	str	r2, [r3, #0]
    break;
 8005376:	e053      	b.n	8005420 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8005378:	4a3e      	ldr	r2, [pc, #248]	@ (8005474 <AT_Send+0x3b0>)
 800537a:	4b30      	ldr	r3, [pc, #192]	@ (800543c <AT_Send+0x378>)
 800537c:	0019      	movs	r1, r3
 800537e:	2003      	movs	r0, #3
 8005380:	f00b f8dc 	bl	801053c <CreateLine>
    ATCommandSend = SLEEP();
 8005384:	230f      	movs	r3, #15
 8005386:	18fc      	adds	r4, r7, r3
 8005388:	f7ff fce6 	bl	8004d58 <SLEEP>
 800538c:	0003      	movs	r3, r0
 800538e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005390:	f00b fd20 	bl	8010dd4 <HAL_GetTick>
 8005394:	0003      	movs	r3, r0
 8005396:	330a      	adds	r3, #10
 8005398:	001a      	movs	r2, r3
 800539a:	4b26      	ldr	r3, [pc, #152]	@ (8005434 <AT_Send+0x370>)
 800539c:	601a      	str	r2, [r3, #0]
    break;
 800539e:	e03f      	b.n	8005420 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 80053a0:	4a35      	ldr	r2, [pc, #212]	@ (8005478 <AT_Send+0x3b4>)
 80053a2:	4b26      	ldr	r3, [pc, #152]	@ (800543c <AT_Send+0x378>)
 80053a4:	0019      	movs	r1, r3
 80053a6:	2003      	movs	r0, #3
 80053a8:	f00b f8c8 	bl	801053c <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 80053ac:	230f      	movs	r3, #15
 80053ae:	18fc      	adds	r4, r7, r3
 80053b0:	f7ff fcee 	bl	8004d90 <CIPSNTPCFG>
 80053b4:	0003      	movs	r3, r0
 80053b6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80053b8:	f00b fd0c 	bl	8010dd4 <HAL_GetTick>
 80053bc:	0003      	movs	r3, r0
 80053be:	330a      	adds	r3, #10
 80053c0:	001a      	movs	r2, r3
 80053c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005434 <AT_Send+0x370>)
 80053c4:	601a      	str	r2, [r3, #0]
    break;
 80053c6:	e02b      	b.n	8005420 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80053c8:	4a2c      	ldr	r2, [pc, #176]	@ (800547c <AT_Send+0x3b8>)
 80053ca:	4b1c      	ldr	r3, [pc, #112]	@ (800543c <AT_Send+0x378>)
 80053cc:	0019      	movs	r1, r3
 80053ce:	2003      	movs	r0, #3
 80053d0:	f00b f8b4 	bl	801053c <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80053d4:	230f      	movs	r3, #15
 80053d6:	18fc      	adds	r4, r7, r3
 80053d8:	f7ff fcfa 	bl	8004dd0 <CIPSNTPTIME>
 80053dc:	0003      	movs	r3, r0
 80053de:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80053e0:	f00b fcf8 	bl	8010dd4 <HAL_GetTick>
 80053e4:	0003      	movs	r3, r0
 80053e6:	33f5      	adds	r3, #245	@ 0xf5
 80053e8:	33ff      	adds	r3, #255	@ 0xff
 80053ea:	001a      	movs	r2, r3
 80053ec:	4b11      	ldr	r3, [pc, #68]	@ (8005434 <AT_Send+0x370>)
 80053ee:	601a      	str	r2, [r3, #0]
    break;
 80053f0:	e016      	b.n	8005420 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80053f2:	4a23      	ldr	r2, [pc, #140]	@ (8005480 <AT_Send+0x3bc>)
 80053f4:	4b11      	ldr	r3, [pc, #68]	@ (800543c <AT_Send+0x378>)
 80053f6:	0019      	movs	r1, r3
 80053f8:	2003      	movs	r0, #3
 80053fa:	f00b f89f 	bl	801053c <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80053fe:	230f      	movs	r3, #15
 8005400:	18fc      	adds	r4, r7, r3
 8005402:	f7ff fd01 	bl	8004e08 <CIPSNTPINTV>
 8005406:	0003      	movs	r3, r0
 8005408:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800540a:	f00b fce3 	bl	8010dd4 <HAL_GetTick>
 800540e:	0003      	movs	r3, r0
 8005410:	330a      	adds	r3, #10
 8005412:	001a      	movs	r2, r3
 8005414:	4b07      	ldr	r3, [pc, #28]	@ (8005434 <AT_Send+0x370>)
 8005416:	601a      	str	r2, [r3, #0]
    break;
 8005418:	e002      	b.n	8005420 <AT_Send+0x35c>

  case AT_END:
    break;
 800541a:	46c0      	nop			@ (mov r8, r8)
 800541c:	e000      	b.n	8005420 <AT_Send+0x35c>
  break;
 800541e:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8005420:	230f      	movs	r3, #15
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	781b      	ldrb	r3, [r3, #0]
}
 8005426:	0018      	movs	r0, r3
 8005428:	46bd      	mov	sp, r7
 800542a:	b005      	add	sp, #20
 800542c:	bd90      	pop	{r4, r7, pc}
 800542e:	46c0      	nop			@ (mov r8, r8)
 8005430:	08028770 	.word	0x08028770
 8005434:	20000624 	.word	0x20000624
 8005438:	08026180 	.word	0x08026180
 800543c:	08025770 	.word	0x08025770
 8005440:	0802618c 	.word	0x0802618c
 8005444:	080261a0 	.word	0x080261a0
 8005448:	080261b4 	.word	0x080261b4
 800544c:	080261c4 	.word	0x080261c4
 8005450:	080261d8 	.word	0x080261d8
 8005454:	080261f0 	.word	0x080261f0
 8005458:	08026208 	.word	0x08026208
 800545c:	08026220 	.word	0x08026220
 8005460:	08026234 	.word	0x08026234
 8005464:	08026250 	.word	0x08026250
 8005468:	0802626c 	.word	0x0802626c
 800546c:	08026288 	.word	0x08026288
 8005470:	080262a4 	.word	0x080262a4
 8005474:	080262b4 	.word	0x080262b4
 8005478:	080262d8 	.word	0x080262d8
 800547c:	080262ec 	.word	0x080262ec
 8005480:	08026304 	.word	0x08026304

08005484 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800548a:	1dfb      	adds	r3, r7, #7
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005490:	4b7d      	ldr	r3, [pc, #500]	@ (8005688 <ESP_WakeTest+0x204>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b05      	cmp	r3, #5
 8005496:	d900      	bls.n	800549a <ESP_WakeTest+0x16>
 8005498:	e0d9      	b.n	800564e <ESP_WakeTest+0x1ca>
 800549a:	009a      	lsls	r2, r3, #2
 800549c:	4b7b      	ldr	r3, [pc, #492]	@ (800568c <ESP_WakeTest+0x208>)
 800549e:	18d3      	adds	r3, r2, r3
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 80054a4:	4b7a      	ldr	r3, [pc, #488]	@ (8005690 <ESP_WakeTest+0x20c>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2201      	movs	r2, #1
 80054aa:	4053      	eors	r3, r2
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d036      	beq.n	8005520 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80054b2:	2380      	movs	r3, #128	@ 0x80
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	4877      	ldr	r0, [pc, #476]	@ (8005694 <ESP_WakeTest+0x210>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	0019      	movs	r1, r3
 80054bc:	f00c ff1b 	bl	80122f6 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80054c0:	2032      	movs	r0, #50	@ 0x32
 80054c2:	f00b fc91 	bl	8010de8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80054c6:	2380      	movs	r3, #128	@ 0x80
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	4872      	ldr	r0, [pc, #456]	@ (8005694 <ESP_WakeTest+0x210>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	0019      	movs	r1, r3
 80054d0:	f00c ff11 	bl	80122f6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054d4:	200a      	movs	r0, #10
 80054d6:	f00b fc87 	bl	8010de8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80054da:	4b6f      	ldr	r3, [pc, #444]	@ (8005698 <ESP_WakeTest+0x214>)
 80054dc:	2200      	movs	r2, #0
 80054de:	2101      	movs	r1, #1
 80054e0:	0018      	movs	r0, r3
 80054e2:	f00c ff08 	bl	80122f6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054e6:	200a      	movs	r0, #10
 80054e8:	f00b fc7e 	bl	8010de8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80054ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005698 <ESP_WakeTest+0x214>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	2102      	movs	r1, #2
 80054f2:	0018      	movs	r0, r3
 80054f4:	f00c feff 	bl	80122f6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054f8:	200a      	movs	r0, #10
 80054fa:	f00b fc75 	bl	8010de8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80054fe:	4b66      	ldr	r3, [pc, #408]	@ (8005698 <ESP_WakeTest+0x214>)
 8005500:	2201      	movs	r2, #1
 8005502:	2101      	movs	r1, #1
 8005504:	0018      	movs	r0, r3
 8005506:	f00c fef6 	bl	80122f6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800550a:	f00b fc63 	bl	8010dd4 <HAL_GetTick>
 800550e:	0003      	movs	r3, r0
 8005510:	22af      	movs	r2, #175	@ 0xaf
 8005512:	0092      	lsls	r2, r2, #2
 8005514:	189a      	adds	r2, r3, r2
 8005516:	4b61      	ldr	r3, [pc, #388]	@ (800569c <ESP_WakeTest+0x218>)
 8005518:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800551a:	4b5d      	ldr	r3, [pc, #372]	@ (8005690 <ESP_WakeTest+0x20c>)
 800551c:	2201      	movs	r2, #1
 800551e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005520:	2380      	movs	r3, #128	@ 0x80
 8005522:	005a      	lsls	r2, r3, #1
 8005524:	4b5e      	ldr	r3, [pc, #376]	@ (80056a0 <ESP_WakeTest+0x21c>)
 8005526:	0011      	movs	r1, r2
 8005528:	0018      	movs	r0, r3
 800552a:	f7fe fa97 	bl	8003a5c <ESP_Receive>
 800552e:	1e03      	subs	r3, r0, #0
 8005530:	d100      	bne.n	8005534 <ESP_WakeTest+0xb0>
 8005532:	e09f      	b.n	8005674 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8005534:	4b54      	ldr	r3, [pc, #336]	@ (8005688 <ESP_WakeTest+0x204>)
 8005536:	2201      	movs	r2, #1
 8005538:	701a      	strb	r2, [r3, #0]
      }
      break;
 800553a:	e09b      	b.n	8005674 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 800553c:	4b57      	ldr	r3, [pc, #348]	@ (800569c <ESP_WakeTest+0x218>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	0018      	movs	r0, r3
 8005542:	f00a ffa5 	bl	8010490 <TimestampIsReached>
 8005546:	1e03      	subs	r3, r0, #0
 8005548:	d100      	bne.n	800554c <ESP_WakeTest+0xc8>
 800554a:	e095      	b.n	8005678 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 800554c:	4b55      	ldr	r3, [pc, #340]	@ (80056a4 <ESP_WakeTest+0x220>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	1dfc      	adds	r4, r7, #7
 8005552:	0018      	movs	r0, r3
 8005554:	f7ff fdb6 	bl	80050c4 <AT_Send>
 8005558:	0003      	movs	r3, r0
 800555a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800555c:	1dfb      	adds	r3, r7, #7
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d100      	bne.n	8005566 <ESP_WakeTest+0xe2>
 8005564:	e088      	b.n	8005678 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8005566:	4b48      	ldr	r3, [pc, #288]	@ (8005688 <ESP_WakeTest+0x204>)
 8005568:	2202      	movs	r2, #2
 800556a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800556c:	e084      	b.n	8005678 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800556e:	4b4b      	ldr	r3, [pc, #300]	@ (800569c <ESP_WakeTest+0x218>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	0018      	movs	r0, r3
 8005574:	f00a ff8c 	bl	8010490 <TimestampIsReached>
 8005578:	1e03      	subs	r3, r0, #0
 800557a:	d100      	bne.n	800557e <ESP_WakeTest+0xfa>
 800557c:	e07e      	b.n	800567c <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800557e:	4b4a      	ldr	r3, [pc, #296]	@ (80056a8 <ESP_WakeTest+0x224>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	0018      	movs	r0, r3
 8005584:	f7ff fc5c 	bl	8004e40 <DMA_ProcessBuffer>
 8005588:	0003      	movs	r3, r0
 800558a:	001a      	movs	r2, r3
 800558c:	4b47      	ldr	r3, [pc, #284]	@ (80056ac <ESP_WakeTest+0x228>)
 800558e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005590:	4b46      	ldr	r3, [pc, #280]	@ (80056ac <ESP_WakeTest+0x228>)
 8005592:	781a      	ldrb	r2, [r3, #0]
 8005594:	4b44      	ldr	r3, [pc, #272]	@ (80056a8 <ESP_WakeTest+0x224>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	1dbc      	adds	r4, r7, #6
 800559a:	0019      	movs	r1, r3
 800559c:	0010      	movs	r0, r2
 800559e:	f7ff fd4f 	bl	8005040 <ATCompare>
 80055a2:	0003      	movs	r3, r0
 80055a4:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80055a6:	4b41      	ldr	r3, [pc, #260]	@ (80056ac <ESP_WakeTest+0x228>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d102      	bne.n	80055b4 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 80055ae:	4b36      	ldr	r3, [pc, #216]	@ (8005688 <ESP_WakeTest+0x204>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80055b4:	4b3d      	ldr	r3, [pc, #244]	@ (80056ac <ESP_WakeTest+0x228>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b07      	cmp	r3, #7
 80055ba:	d104      	bne.n	80055c6 <ESP_WakeTest+0x142>
          StartProg();
 80055bc:	f7fe ff28 	bl	8004410 <StartProg>
          TestState = ESP_TEST_BOOT;
 80055c0:	4b31      	ldr	r3, [pc, #196]	@ (8005688 <ESP_WakeTest+0x204>)
 80055c2:	2205      	movs	r2, #5
 80055c4:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80055c6:	4b39      	ldr	r3, [pc, #228]	@ (80056ac <ESP_WakeTest+0x228>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d109      	bne.n	80055e2 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 80055ce:	f00b fc01 	bl	8010dd4 <HAL_GetTick>
 80055d2:	0003      	movs	r3, r0
 80055d4:	3332      	adds	r3, #50	@ 0x32
 80055d6:	001a      	movs	r2, r3
 80055d8:	4b30      	ldr	r3, [pc, #192]	@ (800569c <ESP_WakeTest+0x218>)
 80055da:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80055dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005688 <ESP_WakeTest+0x204>)
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80055e2:	1dbb      	adds	r3, r7, #6
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d048      	beq.n	800567c <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80055ea:	4b27      	ldr	r3, [pc, #156]	@ (8005688 <ESP_WakeTest+0x204>)
 80055ec:	2203      	movs	r2, #3
 80055ee:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80055f0:	e044      	b.n	800567c <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80055f2:	4b2f      	ldr	r3, [pc, #188]	@ (80056b0 <ESP_WakeTest+0x22c>)
 80055f4:	22fa      	movs	r2, #250	@ 0xfa
 80055f6:	0112      	lsls	r2, r2, #4
 80055f8:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80055fa:	f009 fcef 	bl	800efdc <Calculate_LED_ON>
 80055fe:	0003      	movs	r3, r0
 8005600:	001a      	movs	r2, r3
 8005602:	4b2b      	ldr	r3, [pc, #172]	@ (80056b0 <ESP_WakeTest+0x22c>)
 8005604:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005606:	4b2a      	ldr	r3, [pc, #168]	@ (80056b0 <ESP_WakeTest+0x22c>)
 8005608:	22fa      	movs	r2, #250	@ 0xfa
 800560a:	0112      	lsls	r2, r2, #4
 800560c:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 800560e:	4b1e      	ldr	r3, [pc, #120]	@ (8005688 <ESP_WakeTest+0x204>)
 8005610:	2204      	movs	r2, #4
 8005612:	701a      	strb	r2, [r3, #0]

      break;
 8005614:	e033      	b.n	800567e <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 8005616:	4b27      	ldr	r3, [pc, #156]	@ (80056b4 <ESP_WakeTest+0x230>)
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800561c:	4b1c      	ldr	r3, [pc, #112]	@ (8005690 <ESP_WakeTest+0x20c>)
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005622:	4b1d      	ldr	r3, [pc, #116]	@ (8005698 <ESP_WakeTest+0x214>)
 8005624:	2200      	movs	r2, #0
 8005626:	2101      	movs	r1, #1
 8005628:	0018      	movs	r0, r3
 800562a:	f00c fe64 	bl	80122f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800562e:	2380      	movs	r3, #128	@ 0x80
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	4818      	ldr	r0, [pc, #96]	@ (8005694 <ESP_WakeTest+0x210>)
 8005634:	2200      	movs	r2, #0
 8005636:	0019      	movs	r1, r3
 8005638:	f00c fe5d 	bl	80122f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800563c:	4b16      	ldr	r3, [pc, #88]	@ (8005698 <ESP_WakeTest+0x214>)
 800563e:	2200      	movs	r2, #0
 8005640:	2102      	movs	r1, #2
 8005642:	0018      	movs	r0, r3
 8005644:	f00c fe57 	bl	80122f6 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8005648:	f004 fdda 	bl	800a200 <SetESPMeasurementDone>
      break;
 800564c:	e017      	b.n	800567e <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 800564e:	4b0e      	ldr	r3, [pc, #56]	@ (8005688 <ESP_WakeTest+0x204>)
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
      break;
 8005654:	e013      	b.n	800567e <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8005656:	4b16      	ldr	r3, [pc, #88]	@ (80056b0 <ESP_WakeTest+0x22c>)
 8005658:	22fa      	movs	r2, #250	@ 0xfa
 800565a:	0112      	lsls	r2, r2, #4
 800565c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 800565e:	4b14      	ldr	r3, [pc, #80]	@ (80056b0 <ESP_WakeTest+0x22c>)
 8005660:	22fa      	movs	r2, #250	@ 0xfa
 8005662:	0112      	lsls	r2, r2, #4
 8005664:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8005666:	f009 fcb9 	bl	800efdc <Calculate_LED_ON>
 800566a:	0003      	movs	r3, r0
 800566c:	001a      	movs	r2, r3
 800566e:	4b10      	ldr	r3, [pc, #64]	@ (80056b0 <ESP_WakeTest+0x22c>)
 8005670:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8005672:	e004      	b.n	800567e <ESP_WakeTest+0x1fa>
      break;
 8005674:	46c0      	nop			@ (mov r8, r8)
 8005676:	e002      	b.n	800567e <ESP_WakeTest+0x1fa>
      break;
 8005678:	46c0      	nop			@ (mov r8, r8)
 800567a:	e000      	b.n	800567e <ESP_WakeTest+0x1fa>
      break;
 800567c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800567e:	46c0      	nop			@ (mov r8, r8)
 8005680:	46bd      	mov	sp, r7
 8005682:	b003      	add	sp, #12
 8005684:	bd90      	pop	{r4, r7, pc}
 8005686:	46c0      	nop			@ (mov r8, r8)
 8005688:	20000630 	.word	0x20000630
 800568c:	080287c4 	.word	0x080287c4
 8005690:	20000558 	.word	0x20000558
 8005694:	50000800 	.word	0x50000800
 8005698:	50001c00 	.word	0x50001c00
 800569c:	20000624 	.word	0x20000624
 80056a0:	20000458 	.word	0x20000458
 80056a4:	2000062e 	.word	0x2000062e
 80056a8:	2000062d 	.word	0x2000062d
 80056ac:	2000002e 	.word	0x2000002e
 80056b0:	40000400 	.word	0x40000400
 80056b4:	20000000 	.word	0x20000000

080056b8 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80056b8:	b5b0      	push	{r4, r5, r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80056be:	1dfb      	adds	r3, r7, #7
 80056c0:	2200      	movs	r2, #0
 80056c2:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80056c4:	4be2      	ldr	r3, [pc, #904]	@ (8005a50 <ESP_Upkeep+0x398>)
 80056c6:	781a      	ldrb	r2, [r3, #0]
 80056c8:	4be2      	ldr	r3, [pc, #904]	@ (8005a54 <ESP_Upkeep+0x39c>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d024      	beq.n	800571a <ESP_Upkeep+0x62>
 80056d0:	f00a ffae 	bl	8010630 <GetVerboseLevel>
 80056d4:	0003      	movs	r3, r0
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d11f      	bne.n	800571a <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80056da:	4bdd      	ldr	r3, [pc, #884]	@ (8005a50 <ESP_Upkeep+0x398>)
 80056dc:	781a      	ldrb	r2, [r3, #0]
 80056de:	4bdd      	ldr	r3, [pc, #884]	@ (8005a54 <ESP_Upkeep+0x39c>)
 80056e0:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80056e2:	4bdc      	ldr	r3, [pc, #880]	@ (8005a54 <ESP_Upkeep+0x39c>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d103      	bne.n	80056f2 <ESP_Upkeep+0x3a>
 80056ea:	4bdb      	ldr	r3, [pc, #876]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b0e      	cmp	r3, #14
 80056f0:	d013      	beq.n	800571a <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80056f2:	4bd8      	ldr	r3, [pc, #864]	@ (8005a54 <ESP_Upkeep+0x39c>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	001d      	movs	r5, r3
 80056f8:	4bd7      	ldr	r3, [pc, #860]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	0018      	movs	r0, r3
 80056fe:	4bd7      	ldr	r3, [pc, #860]	@ (8005a5c <ESP_Upkeep+0x3a4>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	001c      	movs	r4, r3
 8005704:	4bd6      	ldr	r3, [pc, #856]	@ (8005a60 <ESP_Upkeep+0x3a8>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	4ad6      	ldr	r2, [pc, #856]	@ (8005a64 <ESP_Upkeep+0x3ac>)
 800570a:	49d7      	ldr	r1, [pc, #860]	@ (8005a68 <ESP_Upkeep+0x3b0>)
 800570c:	9302      	str	r3, [sp, #8]
 800570e:	9401      	str	r4, [sp, #4]
 8005710:	9000      	str	r0, [sp, #0]
 8005712:	002b      	movs	r3, r5
 8005714:	2003      	movs	r0, #3
 8005716:	f00a ff11 	bl	801053c <CreateLine>
    }
  }
  switch (EspState) {
 800571a:	4bcd      	ldr	r3, [pc, #820]	@ (8005a50 <ESP_Upkeep+0x398>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b0f      	cmp	r3, #15
 8005720:	d901      	bls.n	8005726 <ESP_Upkeep+0x6e>
 8005722:	f000 fc32 	bl	8005f8a <ESP_Upkeep+0x8d2>
 8005726:	009a      	lsls	r2, r3, #2
 8005728:	4bd0      	ldr	r3, [pc, #832]	@ (8005a6c <ESP_Upkeep+0x3b4>)
 800572a:	18d3      	adds	r3, r2, r3
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005730:	4bc7      	ldr	r3, [pc, #796]	@ (8005a50 <ESP_Upkeep+0x398>)
 8005732:	2201      	movs	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
      break;
 8005736:	f000 fc41 	bl	8005fbc <ESP_Upkeep+0x904>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 800573a:	f005 f843 	bl	800a7c4 <DisableConnectedDevices>
      SetESPIndicator();
 800573e:	f009 fddf 	bl	800f300 <SetESPIndicator>
      if(!EspTurnedOn){
 8005742:	4bcb      	ldr	r3, [pc, #812]	@ (8005a70 <ESP_Upkeep+0x3b8>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2201      	movs	r2, #1
 8005748:	4053      	eors	r3, r2
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d036      	beq.n	80057be <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005750:	2380      	movs	r3, #128	@ 0x80
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	48c7      	ldr	r0, [pc, #796]	@ (8005a74 <ESP_Upkeep+0x3bc>)
 8005756:	2200      	movs	r2, #0
 8005758:	0019      	movs	r1, r3
 800575a:	f00c fdcc 	bl	80122f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800575e:	2001      	movs	r0, #1
 8005760:	f00b fb42 	bl	8010de8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005764:	2380      	movs	r3, #128	@ 0x80
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	48c2      	ldr	r0, [pc, #776]	@ (8005a74 <ESP_Upkeep+0x3bc>)
 800576a:	2201      	movs	r2, #1
 800576c:	0019      	movs	r1, r3
 800576e:	f00c fdc2 	bl	80122f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005772:	2001      	movs	r0, #1
 8005774:	f00b fb38 	bl	8010de8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005778:	4bbf      	ldr	r3, [pc, #764]	@ (8005a78 <ESP_Upkeep+0x3c0>)
 800577a:	2200      	movs	r2, #0
 800577c:	2101      	movs	r1, #1
 800577e:	0018      	movs	r0, r3
 8005780:	f00c fdb9 	bl	80122f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005784:	2001      	movs	r0, #1
 8005786:	f00b fb2f 	bl	8010de8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800578a:	4bbb      	ldr	r3, [pc, #748]	@ (8005a78 <ESP_Upkeep+0x3c0>)
 800578c:	2201      	movs	r2, #1
 800578e:	2102      	movs	r1, #2
 8005790:	0018      	movs	r0, r3
 8005792:	f00c fdb0 	bl	80122f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005796:	2001      	movs	r0, #1
 8005798:	f00b fb26 	bl	8010de8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800579c:	4bb6      	ldr	r3, [pc, #728]	@ (8005a78 <ESP_Upkeep+0x3c0>)
 800579e:	2201      	movs	r2, #1
 80057a0:	2101      	movs	r1, #1
 80057a2:	0018      	movs	r0, r3
 80057a4:	f00c fda7 	bl	80122f6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80057a8:	f00b fb14 	bl	8010dd4 <HAL_GetTick>
 80057ac:	0003      	movs	r3, r0
 80057ae:	22af      	movs	r2, #175	@ 0xaf
 80057b0:	0092      	lsls	r2, r2, #2
 80057b2:	189a      	adds	r2, r3, r2
 80057b4:	4bb1      	ldr	r3, [pc, #708]	@ (8005a7c <ESP_Upkeep+0x3c4>)
 80057b6:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80057b8:	4bad      	ldr	r3, [pc, #692]	@ (8005a70 <ESP_Upkeep+0x3b8>)
 80057ba:	2201      	movs	r2, #1
 80057bc:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80057be:	2380      	movs	r3, #128	@ 0x80
 80057c0:	005a      	lsls	r2, r3, #1
 80057c2:	4baf      	ldr	r3, [pc, #700]	@ (8005a80 <ESP_Upkeep+0x3c8>)
 80057c4:	0011      	movs	r1, r2
 80057c6:	0018      	movs	r0, r3
 80057c8:	f7fe f948 	bl	8003a5c <ESP_Receive>
 80057cc:	1e03      	subs	r3, r0, #0
 80057ce:	d101      	bne.n	80057d4 <ESP_Upkeep+0x11c>
 80057d0:	f000 fbe7 	bl	8005fa2 <ESP_Upkeep+0x8ea>
        EspState = ESP_STATE_WAIT_AWAKE;
 80057d4:	4b9e      	ldr	r3, [pc, #632]	@ (8005a50 <ESP_Upkeep+0x398>)
 80057d6:	220f      	movs	r2, #15
 80057d8:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80057da:	f00b fafb 	bl	8010dd4 <HAL_GetTick>
 80057de:	0003      	movs	r3, r0
 80057e0:	22fa      	movs	r2, #250	@ 0xfa
 80057e2:	00d2      	lsls	r2, r2, #3
 80057e4:	189a      	adds	r2, r3, r2
 80057e6:	4ba7      	ldr	r3, [pc, #668]	@ (8005a84 <ESP_Upkeep+0x3cc>)
 80057e8:	601a      	str	r2, [r3, #0]
      }
      break;
 80057ea:	f000 fbda 	bl	8005fa2 <ESP_Upkeep+0x8ea>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80057ee:	2001      	movs	r0, #1
 80057f0:	f7ff fb26 	bl	8004e40 <DMA_ProcessBuffer>
 80057f4:	0003      	movs	r3, r0
 80057f6:	001a      	movs	r2, r3
 80057f8:	4ba3      	ldr	r3, [pc, #652]	@ (8005a88 <ESP_Upkeep+0x3d0>)
 80057fa:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80057fc:	4ba2      	ldr	r3, [pc, #648]	@ (8005a88 <ESP_Upkeep+0x3d0>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	1dbc      	adds	r4, r7, #6
 8005802:	2101      	movs	r1, #1
 8005804:	0018      	movs	r0, r3
 8005806:	f7ff fc1b 	bl	8005040 <ATCompare>
 800580a:	0003      	movs	r3, r0
 800580c:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800580e:	1dbb      	adds	r3, r7, #6
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d108      	bne.n	8005828 <ESP_Upkeep+0x170>
 8005816:	4b9b      	ldr	r3, [pc, #620]	@ (8005a84 <ESP_Upkeep+0x3cc>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	0018      	movs	r0, r3
 800581c:	f00a fe38 	bl	8010490 <TimestampIsReached>
 8005820:	1e03      	subs	r3, r0, #0
 8005822:	d101      	bne.n	8005828 <ESP_Upkeep+0x170>
 8005824:	f000 fbbf 	bl	8005fa6 <ESP_Upkeep+0x8ee>
          EspState = ESP_STATE_MODE_SELECT;
 8005828:	4b89      	ldr	r3, [pc, #548]	@ (8005a50 <ESP_Upkeep+0x398>)
 800582a:	220b      	movs	r2, #11
 800582c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800582e:	f000 fbba 	bl	8005fa6 <ESP_Upkeep+0x8ee>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8005832:	4b96      	ldr	r3, [pc, #600]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 8005834:	2209      	movs	r2, #9
 8005836:	2114      	movs	r1, #20
 8005838:	0018      	movs	r0, r3
 800583a:	f01c ffdd 	bl	80227f8 <memset>
      if(!InitIsDone || WifiReset){
 800583e:	4b94      	ldr	r3, [pc, #592]	@ (8005a90 <ESP_Upkeep+0x3d8>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2201      	movs	r2, #1
 8005844:	4053      	eors	r3, r2
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <ESP_Upkeep+0x19c>
 800584c:	4b91      	ldr	r3, [pc, #580]	@ (8005a94 <ESP_Upkeep+0x3dc>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01a      	beq.n	800588a <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005854:	4b8d      	ldr	r3, [pc, #564]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 8005856:	4a90      	ldr	r2, [pc, #576]	@ (8005a98 <ESP_Upkeep+0x3e0>)
 8005858:	6811      	ldr	r1, [r2, #0]
 800585a:	6019      	str	r1, [r3, #0]
 800585c:	8891      	ldrh	r1, [r2, #4]
 800585e:	8099      	strh	r1, [r3, #4]
 8005860:	7992      	ldrb	r2, [r2, #6]
 8005862:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005864:	4b7a      	ldr	r3, [pc, #488]	@ (8005a50 <ESP_Upkeep+0x398>)
 8005866:	2204      	movs	r2, #4
 8005868:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800586a:	4b8c      	ldr	r3, [pc, #560]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005870:	4b7a      	ldr	r3, [pc, #488]	@ (8005a5c <ESP_Upkeep+0x3a4>)
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005876:	4b89      	ldr	r3, [pc, #548]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	001a      	movs	r2, r3
 800587c:	4b83      	ldr	r3, [pc, #524]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 800587e:	5c9a      	ldrb	r2, [r3, r2]
 8005880:	4b75      	ldr	r3, [pc, #468]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 8005882:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005884:	4b76      	ldr	r3, [pc, #472]	@ (8005a60 <ESP_Upkeep+0x3a8>)
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800588a:	4b81      	ldr	r3, [pc, #516]	@ (8005a90 <ESP_Upkeep+0x3d8>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01f      	beq.n	80058d2 <ESP_Upkeep+0x21a>
 8005892:	4b83      	ldr	r3, [pc, #524]	@ (8005aa0 <ESP_Upkeep+0x3e8>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2201      	movs	r2, #1
 8005898:	4053      	eors	r3, r2
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d018      	beq.n	80058d2 <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80058a0:	4b7a      	ldr	r3, [pc, #488]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 80058a2:	4a80      	ldr	r2, [pc, #512]	@ (8005aa4 <ESP_Upkeep+0x3ec>)
 80058a4:	6811      	ldr	r1, [r2, #0]
 80058a6:	6019      	str	r1, [r3, #0]
 80058a8:	8892      	ldrh	r2, [r2, #4]
 80058aa:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80058ac:	4b68      	ldr	r3, [pc, #416]	@ (8005a50 <ESP_Upkeep+0x398>)
 80058ae:	2204      	movs	r2, #4
 80058b0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80058b2:	4b7a      	ldr	r3, [pc, #488]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80058b8:	4b68      	ldr	r3, [pc, #416]	@ (8005a5c <ESP_Upkeep+0x3a4>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80058be:	4b77      	ldr	r3, [pc, #476]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	001a      	movs	r2, r3
 80058c4:	4b71      	ldr	r3, [pc, #452]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 80058c6:	5c9a      	ldrb	r2, [r3, r2]
 80058c8:	4b63      	ldr	r3, [pc, #396]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 80058ca:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80058cc:	4b64      	ldr	r3, [pc, #400]	@ (8005a60 <ESP_Upkeep+0x3a8>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80058d2:	4b6f      	ldr	r3, [pc, #444]	@ (8005a90 <ESP_Upkeep+0x3d8>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d021      	beq.n	800591e <ESP_Upkeep+0x266>
 80058da:	4b71      	ldr	r3, [pc, #452]	@ (8005aa0 <ESP_Upkeep+0x3e8>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d01d      	beq.n	800591e <ESP_Upkeep+0x266>
 80058e2:	4b71      	ldr	r3, [pc, #452]	@ (8005aa8 <ESP_Upkeep+0x3f0>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2201      	movs	r2, #1
 80058e8:	4053      	eors	r3, r2
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d016      	beq.n	800591e <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80058f0:	4b6e      	ldr	r3, [pc, #440]	@ (8005aac <ESP_Upkeep+0x3f4>)
 80058f2:	881a      	ldrh	r2, [r3, #0]
 80058f4:	4b65      	ldr	r3, [pc, #404]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 80058f6:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80058f8:	4b55      	ldr	r3, [pc, #340]	@ (8005a50 <ESP_Upkeep+0x398>)
 80058fa:	2204      	movs	r2, #4
 80058fc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80058fe:	4b67      	ldr	r3, [pc, #412]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8005904:	4b55      	ldr	r3, [pc, #340]	@ (8005a5c <ESP_Upkeep+0x3a4>)
 8005906:	2204      	movs	r2, #4
 8005908:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800590a:	4b64      	ldr	r3, [pc, #400]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	001a      	movs	r2, r3
 8005910:	4b5e      	ldr	r3, [pc, #376]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 8005912:	5c9a      	ldrb	r2, [r3, r2]
 8005914:	4b50      	ldr	r3, [pc, #320]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 8005916:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005918:	4b51      	ldr	r3, [pc, #324]	@ (8005a60 <ESP_Upkeep+0x3a8>)
 800591a:	2200      	movs	r2, #0
 800591c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800591e:	4b5c      	ldr	r3, [pc, #368]	@ (8005a90 <ESP_Upkeep+0x3d8>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d02c      	beq.n	8005980 <ESP_Upkeep+0x2c8>
 8005926:	4b5e      	ldr	r3, [pc, #376]	@ (8005aa0 <ESP_Upkeep+0x3e8>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d028      	beq.n	8005980 <ESP_Upkeep+0x2c8>
 800592e:	4b5e      	ldr	r3, [pc, #376]	@ (8005aa8 <ESP_Upkeep+0x3f0>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d024      	beq.n	8005980 <ESP_Upkeep+0x2c8>
 8005936:	4b5e      	ldr	r3, [pc, #376]	@ (8005ab0 <ESP_Upkeep+0x3f8>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2201      	movs	r2, #1
 800593c:	4053      	eors	r3, r2
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01d      	beq.n	8005980 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005944:	4b51      	ldr	r3, [pc, #324]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 8005946:	4a5b      	ldr	r2, [pc, #364]	@ (8005ab4 <ESP_Upkeep+0x3fc>)
 8005948:	8811      	ldrh	r1, [r2, #0]
 800594a:	8019      	strh	r1, [r3, #0]
 800594c:	7892      	ldrb	r2, [r2, #2]
 800594e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005950:	4b3f      	ldr	r3, [pc, #252]	@ (8005a50 <ESP_Upkeep+0x398>)
 8005952:	2204      	movs	r2, #4
 8005954:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005956:	4b51      	ldr	r3, [pc, #324]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 8005958:	2200      	movs	r2, #0
 800595a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800595c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a5c <ESP_Upkeep+0x3a4>)
 800595e:	2202      	movs	r2, #2
 8005960:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005962:	f00b fa37 	bl	8010dd4 <HAL_GetTick>
 8005966:	0002      	movs	r2, r0
 8005968:	4b53      	ldr	r3, [pc, #332]	@ (8005ab8 <ESP_Upkeep+0x400>)
 800596a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800596c:	4b4b      	ldr	r3, [pc, #300]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	001a      	movs	r2, r3
 8005972:	4b46      	ldr	r3, [pc, #280]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 8005974:	5c9a      	ldrb	r2, [r3, r2]
 8005976:	4b38      	ldr	r3, [pc, #224]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 8005978:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800597a:	4b39      	ldr	r3, [pc, #228]	@ (8005a60 <ESP_Upkeep+0x3a8>)
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005980:	4b43      	ldr	r3, [pc, #268]	@ (8005a90 <ESP_Upkeep+0x3d8>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d027      	beq.n	80059d8 <ESP_Upkeep+0x320>
 8005988:	4b45      	ldr	r3, [pc, #276]	@ (8005aa0 <ESP_Upkeep+0x3e8>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d023      	beq.n	80059d8 <ESP_Upkeep+0x320>
 8005990:	4b45      	ldr	r3, [pc, #276]	@ (8005aa8 <ESP_Upkeep+0x3f0>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01f      	beq.n	80059d8 <ESP_Upkeep+0x320>
 8005998:	4b45      	ldr	r3, [pc, #276]	@ (8005ab0 <ESP_Upkeep+0x3f8>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01b      	beq.n	80059d8 <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 80059a0:	4b46      	ldr	r3, [pc, #280]	@ (8005abc <ESP_Upkeep+0x404>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	4b39      	ldr	r3, [pc, #228]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 80059a6:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80059a8:	4b29      	ldr	r3, [pc, #164]	@ (8005a50 <ESP_Upkeep+0x398>)
 80059aa:	2204      	movs	r2, #4
 80059ac:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80059ae:	4b3b      	ldr	r3, [pc, #236]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80059b4:	4b29      	ldr	r3, [pc, #164]	@ (8005a5c <ESP_Upkeep+0x3a4>)
 80059b6:	2205      	movs	r2, #5
 80059b8:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80059ba:	f00b fa0b 	bl	8010dd4 <HAL_GetTick>
 80059be:	0002      	movs	r2, r0
 80059c0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ab8 <ESP_Upkeep+0x400>)
 80059c2:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80059c4:	4b35      	ldr	r3, [pc, #212]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	001a      	movs	r2, r3
 80059ca:	4b30      	ldr	r3, [pc, #192]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 80059cc:	5c9a      	ldrb	r2, [r3, r2]
 80059ce:	4b22      	ldr	r3, [pc, #136]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 80059d0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80059d2:	4b23      	ldr	r3, [pc, #140]	@ (8005a60 <ESP_Upkeep+0x3a8>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80059d8:	4b39      	ldr	r3, [pc, #228]	@ (8005ac0 <ESP_Upkeep+0x408>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d100      	bne.n	80059e2 <ESP_Upkeep+0x32a>
 80059e0:	e2e3      	b.n	8005faa <ESP_Upkeep+0x8f2>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80059e2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 80059e4:	4a37      	ldr	r2, [pc, #220]	@ (8005ac4 <ESP_Upkeep+0x40c>)
 80059e6:	6811      	ldr	r1, [r2, #0]
 80059e8:	6019      	str	r1, [r3, #0]
 80059ea:	7912      	ldrb	r2, [r2, #4]
 80059ec:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80059ee:	4a36      	ldr	r2, [pc, #216]	@ (8005ac8 <ESP_Upkeep+0x410>)
 80059f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a68 <ESP_Upkeep+0x3b0>)
 80059f2:	0019      	movs	r1, r3
 80059f4:	2003      	movs	r0, #3
 80059f6:	f00a fda1 	bl	801053c <CreateLine>
        DisableConnectedDevices();
 80059fa:	f004 fee3 	bl	800a7c4 <DisableConnectedDevices>
        usblog = false;
 80059fe:	4b33      	ldr	r3, [pc, #204]	@ (8005acc <ESP_Upkeep+0x414>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005a04:	4b12      	ldr	r3, [pc, #72]	@ (8005a50 <ESP_Upkeep+0x398>)
 8005a06:	2204      	movs	r2, #4
 8005a08:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005a0a:	4b24      	ldr	r3, [pc, #144]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005a10:	4b12      	ldr	r3, [pc, #72]	@ (8005a5c <ESP_Upkeep+0x3a4>)
 8005a12:	2203      	movs	r2, #3
 8005a14:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005a16:	4b21      	ldr	r3, [pc, #132]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	001a      	movs	r2, r3
 8005a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 8005a1e:	5c9a      	ldrb	r2, [r3, r2]
 8005a20:	4b0d      	ldr	r3, [pc, #52]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 8005a22:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005a24:	4b0e      	ldr	r3, [pc, #56]	@ (8005a60 <ESP_Upkeep+0x3a8>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005a2a:	e2be      	b.n	8005faa <ESP_Upkeep+0x8f2>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	1dfc      	adds	r4, r7, #7
 8005a32:	0018      	movs	r0, r3
 8005a34:	f7ff fb46 	bl	80050c4 <AT_Send>
 8005a38:	0003      	movs	r3, r0
 8005a3a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005a3c:	1dfb      	adds	r3, r7, #7
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d100      	bne.n	8005a46 <ESP_Upkeep+0x38e>
 8005a44:	e2b3      	b.n	8005fae <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005a46:	4b02      	ldr	r3, [pc, #8]	@ (8005a50 <ESP_Upkeep+0x398>)
 8005a48:	2203      	movs	r2, #3
 8005a4a:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005a4c:	e2af      	b.n	8005fae <ESP_Upkeep+0x8f6>
 8005a4e:	46c0      	nop			@ (mov r8, r8)
 8005a50:	2000002c 	.word	0x2000002c
 8005a54:	20000002 	.word	0x20000002
 8005a58:	2000062e 	.word	0x2000062e
 8005a5c:	2000062f 	.word	0x2000062f
 8005a60:	2000062d 	.word	0x2000062d
 8005a64:	08026324 	.word	0x08026324
 8005a68:	08025770 	.word	0x08025770
 8005a6c:	080287dc 	.word	0x080287dc
 8005a70:	20000558 	.word	0x20000558
 8005a74:	50000800 	.word	0x50000800
 8005a78:	50001c00 	.word	0x50001c00
 8005a7c:	20000624 	.word	0x20000624
 8005a80:	20000458 	.word	0x20000458
 8005a84:	20000774 	.word	0x20000774
 8005a88:	2000002f 	.word	0x2000002f
 8005a8c:	20000614 	.word	0x20000614
 8005a90:	20000559 	.word	0x20000559
 8005a94:	2000055a 	.word	0x2000055a
 8005a98:	20000004 	.word	0x20000004
 8005a9c:	2000061e 	.word	0x2000061e
 8005aa0:	2000055c 	.word	0x2000055c
 8005aa4:	20000014 	.word	0x20000014
 8005aa8:	2000055d 	.word	0x2000055d
 8005aac:	20000010 	.word	0x20000010
 8005ab0:	20000001 	.word	0x20000001
 8005ab4:	2000000c 	.word	0x2000000c
 8005ab8:	20000570 	.word	0x20000570
 8005abc:	20000024 	.word	0x20000024
 8005ac0:	2000055b 	.word	0x2000055b
 8005ac4:	2000001c 	.word	0x2000001c
 8005ac8:	08026350 	.word	0x08026350
 8005acc:	20000203 	.word	0x20000203

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005ad0:	4bc9      	ldr	r3, [pc, #804]	@ (8005df8 <ESP_Upkeep+0x740>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d007      	beq.n	8005ae8 <ESP_Upkeep+0x430>
 8005ad8:	4bc8      	ldr	r3, [pc, #800]	@ (8005dfc <ESP_Upkeep+0x744>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d003      	beq.n	8005ae8 <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 8005ae0:	4bc7      	ldr	r3, [pc, #796]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005ae2:	220b      	movs	r2, #11
 8005ae4:	701a      	strb	r2, [r3, #0]
        break;
 8005ae6:	e269      	b.n	8005fbc <ESP_Upkeep+0x904>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8005ae8:	4bc6      	ldr	r3, [pc, #792]	@ (8005e04 <ESP_Upkeep+0x74c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	0018      	movs	r0, r3
 8005aee:	f00a fccf 	bl	8010490 <TimestampIsReached>
 8005af2:	1e03      	subs	r3, r0, #0
 8005af4:	d100      	bne.n	8005af8 <ESP_Upkeep+0x440>
 8005af6:	e25c      	b.n	8005fb2 <ESP_Upkeep+0x8fa>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005af8:	4bc3      	ldr	r3, [pc, #780]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	0018      	movs	r0, r3
 8005afe:	f7ff f99f 	bl	8004e40 <DMA_ProcessBuffer>
 8005b02:	0003      	movs	r3, r0
 8005b04:	001a      	movs	r2, r3
 8005b06:	4bc1      	ldr	r3, [pc, #772]	@ (8005e0c <ESP_Upkeep+0x754>)
 8005b08:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005b0a:	4bc0      	ldr	r3, [pc, #768]	@ (8005e0c <ESP_Upkeep+0x754>)
 8005b0c:	781a      	ldrb	r2, [r3, #0]
 8005b0e:	4bbe      	ldr	r3, [pc, #760]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	1d7c      	adds	r4, r7, #5
 8005b14:	0019      	movs	r1, r3
 8005b16:	0010      	movs	r0, r2
 8005b18:	f7ff fa92 	bl	8005040 <ATCompare>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005b20:	4bba      	ldr	r3, [pc, #744]	@ (8005e0c <ESP_Upkeep+0x754>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d138      	bne.n	8005b9a <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 8005b28:	4bb9      	ldr	r3, [pc, #740]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b0f      	cmp	r3, #15
 8005b2e:	d108      	bne.n	8005b42 <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 8005b30:	4bb7      	ldr	r3, [pc, #732]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005b32:	220e      	movs	r2, #14
 8005b34:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005b36:	4bb4      	ldr	r3, [pc, #720]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005b38:	2202      	movs	r2, #2
 8005b3a:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005b3c:	4bb5      	ldr	r3, [pc, #724]	@ (8005e14 <ESP_Upkeep+0x75c>)
 8005b3e:	2201      	movs	r2, #1
 8005b40:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005b42:	4baf      	ldr	r3, [pc, #700]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005b44:	2204      	movs	r2, #4
 8005b46:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005b48:	4bb3      	ldr	r3, [pc, #716]	@ (8005e18 <ESP_Upkeep+0x760>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	4bb1      	ldr	r3, [pc, #708]	@ (8005e18 <ESP_Upkeep+0x760>)
 8005b52:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005b54:	4bb0      	ldr	r3, [pc, #704]	@ (8005e18 <ESP_Upkeep+0x760>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d91e      	bls.n	8005b9a <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005b5c:	f00b f93a 	bl	8010dd4 <HAL_GetTick>
 8005b60:	0003      	movs	r3, r0
 8005b62:	4aae      	ldr	r2, [pc, #696]	@ (8005e1c <ESP_Upkeep+0x764>)
 8005b64:	189a      	adds	r2, r3, r2
 8005b66:	4ba7      	ldr	r3, [pc, #668]	@ (8005e04 <ESP_Upkeep+0x74c>)
 8005b68:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005b6a:	4bad      	ldr	r3, [pc, #692]	@ (8005e20 <ESP_Upkeep+0x768>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005b70:	f7ff fa58 	bl	8005024 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b74:	f00b f92e 	bl	8010dd4 <HAL_GetTick>
 8005b78:	0002      	movs	r2, r0
 8005b7a:	4baa      	ldr	r3, [pc, #680]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005b7c:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8005b7e:	4ba9      	ldr	r3, [pc, #676]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4ba9      	ldr	r3, [pc, #676]	@ (8005e28 <ESP_Upkeep+0x770>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	4aa8      	ldr	r2, [pc, #672]	@ (8005e2c <ESP_Upkeep+0x774>)
 8005b8a:	49a9      	ldr	r1, [pc, #676]	@ (8005e30 <ESP_Upkeep+0x778>)
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f00a fcd5 	bl	801053c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005b92:	4b9b      	ldr	r3, [pc, #620]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005b94:	220d      	movs	r2, #13
 8005b96:	701a      	strb	r2, [r3, #0]
            break;
 8005b98:	e210      	b.n	8005fbc <ESP_Upkeep+0x904>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005b9a:	4b9c      	ldr	r3, [pc, #624]	@ (8005e0c <ESP_Upkeep+0x754>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d106      	bne.n	8005bb0 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005ba2:	f00b f917 	bl	8010dd4 <HAL_GetTick>
 8005ba6:	0003      	movs	r3, r0
 8005ba8:	330a      	adds	r3, #10
 8005baa:	001a      	movs	r2, r3
 8005bac:	4b95      	ldr	r3, [pc, #596]	@ (8005e04 <ESP_Upkeep+0x74c>)
 8005bae:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005bb0:	4b96      	ldr	r3, [pc, #600]	@ (8005e0c <ESP_Upkeep+0x754>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b0a      	cmp	r3, #10
 8005bb6:	d106      	bne.n	8005bc6 <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005bb8:	f00b f90c 	bl	8010dd4 <HAL_GetTick>
 8005bbc:	0003      	movs	r3, r0
 8005bbe:	330a      	adds	r3, #10
 8005bc0:	001a      	movs	r2, r3
 8005bc2:	4b90      	ldr	r3, [pc, #576]	@ (8005e04 <ESP_Upkeep+0x74c>)
 8005bc4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005bc6:	4b91      	ldr	r3, [pc, #580]	@ (8005e0c <ESP_Upkeep+0x754>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b06      	cmp	r3, #6
 8005bcc:	d14b      	bne.n	8005c66 <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 8005bce:	4b99      	ldr	r3, [pc, #612]	@ (8005e34 <ESP_Upkeep+0x77c>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	4b97      	ldr	r3, [pc, #604]	@ (8005e34 <ESP_Upkeep+0x77c>)
 8005bd8:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8005bda:	4a97      	ldr	r2, [pc, #604]	@ (8005e38 <ESP_Upkeep+0x780>)
 8005bdc:	4b94      	ldr	r3, [pc, #592]	@ (8005e30 <ESP_Upkeep+0x778>)
 8005bde:	0019      	movs	r1, r3
 8005be0:	2001      	movs	r0, #1
 8005be2:	f00a fcab 	bl	801053c <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8005be6:	4b93      	ldr	r3, [pc, #588]	@ (8005e34 <ESP_Upkeep+0x77c>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d924      	bls.n	8005c38 <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8005bee:	f00b f8f1 	bl	8010dd4 <HAL_GetTick>
 8005bf2:	0003      	movs	r3, r0
 8005bf4:	4a91      	ldr	r2, [pc, #580]	@ (8005e3c <ESP_Upkeep+0x784>)
 8005bf6:	189a      	adds	r2, r3, r2
 8005bf8:	4b82      	ldr	r3, [pc, #520]	@ (8005e04 <ESP_Upkeep+0x74c>)
 8005bfa:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005bfc:	4b88      	ldr	r3, [pc, #544]	@ (8005e20 <ESP_Upkeep+0x768>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005c02:	f7ff fa0f 	bl	8005024 <clearDMABuffer>
            stop = HAL_GetTick();
 8005c06:	f00b f8e5 	bl	8010dd4 <HAL_GetTick>
 8005c0a:	0002      	movs	r2, r0
 8005c0c:	4b85      	ldr	r3, [pc, #532]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005c0e:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005c10:	4b84      	ldr	r3, [pc, #528]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	4b84      	ldr	r3, [pc, #528]	@ (8005e28 <ESP_Upkeep+0x770>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	4a89      	ldr	r2, [pc, #548]	@ (8005e40 <ESP_Upkeep+0x788>)
 8005c1c:	4984      	ldr	r1, [pc, #528]	@ (8005e30 <ESP_Upkeep+0x778>)
 8005c1e:	2001      	movs	r0, #1
 8005c20:	f00a fc8c 	bl	801053c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005c24:	4b76      	ldr	r3, [pc, #472]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005c26:	220d      	movs	r2, #13
 8005c28:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005c2a:	4b79      	ldr	r3, [pc, #484]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005c2c:	2214      	movs	r2, #20
 8005c2e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8005c30:	4b75      	ldr	r3, [pc, #468]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
            break;
 8005c36:	e1c1      	b.n	8005fbc <ESP_Upkeep+0x904>
          }
          if(ATCommand != AT_SENDDATA){
 8005c38:	4b75      	ldr	r3, [pc, #468]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b0f      	cmp	r3, #15
 8005c3e:	d003      	beq.n	8005c48 <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8005c40:	4b6f      	ldr	r3, [pc, #444]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005c42:	2204      	movs	r2, #4
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	e00e      	b.n	8005c66 <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005c48:	4b71      	ldr	r3, [pc, #452]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005c4a:	220e      	movs	r2, #14
 8005c4c:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005c4e:	4b71      	ldr	r3, [pc, #452]	@ (8005e14 <ESP_Upkeep+0x75c>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	4b6f      	ldr	r3, [pc, #444]	@ (8005e14 <ESP_Upkeep+0x75c>)
 8005c58:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005c5a:	4b6b      	ldr	r3, [pc, #428]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005c60:	4b67      	ldr	r3, [pc, #412]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005c62:	2204      	movs	r2, #4
 8005c64:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005c66:	1d7b      	adds	r3, r7, #5
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d100      	bne.n	8005c70 <ESP_Upkeep+0x5b8>
 8005c6e:	e1a0      	b.n	8005fb2 <ESP_Upkeep+0x8fa>
          EspState = ESP_STATE_NEXT_AT;
 8005c70:	4b63      	ldr	r3, [pc, #396]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005c72:	2205      	movs	r2, #5
 8005c74:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005c76:	e19c      	b.n	8005fb2 <ESP_Upkeep+0x8fa>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8005c78:	4b66      	ldr	r3, [pc, #408]	@ (8005e14 <ESP_Upkeep+0x75c>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	4b64      	ldr	r3, [pc, #400]	@ (8005e14 <ESP_Upkeep+0x75c>)
 8005c82:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005c84:	4b63      	ldr	r3, [pc, #396]	@ (8005e14 <ESP_Upkeep+0x75c>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	001a      	movs	r2, r3
 8005c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8005e44 <ESP_Upkeep+0x78c>)
 8005c8c:	5c9a      	ldrb	r2, [r3, r2]
 8005c8e:	4b60      	ldr	r3, [pc, #384]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005c90:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005c92:	4b5f      	ldr	r3, [pc, #380]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d102      	bne.n	8005ca0 <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005ca0:	4b5b      	ldr	r3, [pc, #364]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b0e      	cmp	r3, #14
 8005ca6:	d102      	bne.n	8005cae <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005ca8:	4b57      	ldr	r3, [pc, #348]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005caa:	2202      	movs	r2, #2
 8005cac:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005cae:	4b58      	ldr	r3, [pc, #352]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b0e      	cmp	r3, #14
 8005cb4:	d006      	beq.n	8005cc4 <ESP_Upkeep+0x60c>
 8005cb6:	4b56      	ldr	r3, [pc, #344]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d002      	beq.n	8005cc4 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005cbe:	4b52      	ldr	r3, [pc, #328]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005cc4:	4b52      	ldr	r3, [pc, #328]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b11      	cmp	r3, #17
 8005cca:	d102      	bne.n	8005cd2 <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005ccc:	4b4e      	ldr	r3, [pc, #312]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005cce:	2205      	movs	r2, #5
 8005cd0:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005cd2:	4b4b      	ldr	r3, [pc, #300]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b14      	cmp	r3, #20
 8005cde:	d000      	beq.n	8005ce2 <ESP_Upkeep+0x62a>
 8005ce0:	e169      	b.n	8005fb6 <ESP_Upkeep+0x8fe>
        if(Mode == AT_MODE_SEND){
 8005ce2:	4b46      	ldr	r3, [pc, #280]	@ (8005dfc <ESP_Upkeep+0x744>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d124      	bne.n	8005d34 <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005cea:	f00b f873 	bl	8010dd4 <HAL_GetTick>
 8005cee:	0003      	movs	r3, r0
 8005cf0:	4a4a      	ldr	r2, [pc, #296]	@ (8005e1c <ESP_Upkeep+0x764>)
 8005cf2:	189a      	adds	r2, r3, r2
 8005cf4:	4b43      	ldr	r3, [pc, #268]	@ (8005e04 <ESP_Upkeep+0x74c>)
 8005cf6:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005cf8:	f7ff f994 	bl	8005024 <clearDMABuffer>
          stop = HAL_GetTick();
 8005cfc:	f00b f86a 	bl	8010dd4 <HAL_GetTick>
 8005d00:	0002      	movs	r2, r0
 8005d02:	4b48      	ldr	r3, [pc, #288]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005d04:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005d06:	4b47      	ldr	r3, [pc, #284]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	4b47      	ldr	r3, [pc, #284]	@ (8005e28 <ESP_Upkeep+0x770>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	4a4d      	ldr	r2, [pc, #308]	@ (8005e48 <ESP_Upkeep+0x790>)
 8005d12:	494e      	ldr	r1, [pc, #312]	@ (8005e4c <ESP_Upkeep+0x794>)
 8005d14:	2002      	movs	r0, #2
 8005d16:	f00a fc11 	bl	801053c <CreateLine>
          ResetdBAmax();
 8005d1a:	f004 fdc9 	bl	800a8b0 <ResetdBAmax>
          resetMaxMeasurementValues();
 8005d1e:	f7fd fdf7 	bl	8003910 <resetMaxMeasurementValues>
          showTime();
 8005d22:	f001 f8af 	bl	8006e84 <showTime>
          ESPTransmitDone = true;
 8005d26:	4b3e      	ldr	r3, [pc, #248]	@ (8005e20 <ESP_Upkeep+0x768>)
 8005d28:	2201      	movs	r2, #1
 8005d2a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005d2c:	4b34      	ldr	r3, [pc, #208]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005d2e:	220d      	movs	r2, #13
 8005d30:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005d32:	e140      	b.n	8005fb6 <ESP_Upkeep+0x8fe>
        else if (Mode == AT_MODE_GETTIME) {
 8005d34:	4b31      	ldr	r3, [pc, #196]	@ (8005dfc <ESP_Upkeep+0x744>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b05      	cmp	r3, #5
 8005d3a:	d12c      	bne.n	8005d96 <ESP_Upkeep+0x6de>
            setTime = false;
 8005d3c:	4b44      	ldr	r3, [pc, #272]	@ (8005e50 <ESP_Upkeep+0x798>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005d42:	f00b f847 	bl	8010dd4 <HAL_GetTick>
 8005d46:	0003      	movs	r3, r0
 8005d48:	4a42      	ldr	r2, [pc, #264]	@ (8005e54 <ESP_Upkeep+0x79c>)
 8005d4a:	189a      	adds	r2, r3, r2
 8005d4c:	4b42      	ldr	r3, [pc, #264]	@ (8005e58 <ESP_Upkeep+0x7a0>)
 8005d4e:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005d50:	4b41      	ldr	r3, [pc, #260]	@ (8005e58 <ESP_Upkeep+0x7a0>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a41      	ldr	r2, [pc, #260]	@ (8005e5c <ESP_Upkeep+0x7a4>)
 8005d56:	493d      	ldr	r1, [pc, #244]	@ (8005e4c <ESP_Upkeep+0x794>)
 8005d58:	2002      	movs	r0, #2
 8005d5a:	f00a fbef 	bl	801053c <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005d5e:	4b40      	ldr	r3, [pc, #256]	@ (8005e60 <ESP_Upkeep+0x7a8>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b28      	ldr	r3, [pc, #160]	@ (8005e04 <ESP_Upkeep+0x74c>)
 8005d64:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005d66:	f7ff f95d 	bl	8005024 <clearDMABuffer>
            stop = HAL_GetTick();
 8005d6a:	f00b f833 	bl	8010dd4 <HAL_GetTick>
 8005d6e:	0002      	movs	r2, r0
 8005d70:	4b2c      	ldr	r3, [pc, #176]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005d72:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005d74:	4b2b      	ldr	r3, [pc, #172]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	4b2b      	ldr	r3, [pc, #172]	@ (8005e28 <ESP_Upkeep+0x770>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	4a39      	ldr	r2, [pc, #228]	@ (8005e64 <ESP_Upkeep+0x7ac>)
 8005d80:	4932      	ldr	r1, [pc, #200]	@ (8005e4c <ESP_Upkeep+0x794>)
 8005d82:	2002      	movs	r0, #2
 8005d84:	f00a fbda 	bl	801053c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005d88:	4b1d      	ldr	r3, [pc, #116]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005d8a:	220d      	movs	r2, #13
 8005d8c:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8005dfc <ESP_Upkeep+0x744>)
 8005d90:	2202      	movs	r2, #2
 8005d92:	701a      	strb	r2, [r3, #0]
    break;
 8005d94:	e10f      	b.n	8005fb6 <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_RESET;
 8005d96:	4b1a      	ldr	r3, [pc, #104]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005d98:	2209      	movs	r2, #9
 8005d9a:	701a      	strb	r2, [r3, #0]
    break;
 8005d9c:	e10b      	b.n	8005fb6 <ESP_Upkeep+0x8fe>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8005d9e:	4b32      	ldr	r3, [pc, #200]	@ (8005e68 <ESP_Upkeep+0x7b0>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005da4:	4b31      	ldr	r3, [pc, #196]	@ (8005e6c <ESP_Upkeep+0x7b4>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	2101      	movs	r1, #1
 8005daa:	0018      	movs	r0, r3
 8005dac:	f00c faa3 	bl	80122f6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005db0:	2001      	movs	r0, #1
 8005db2:	f00b f819 	bl	8010de8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005db6:	2380      	movs	r3, #128	@ 0x80
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	482d      	ldr	r0, [pc, #180]	@ (8005e70 <ESP_Upkeep+0x7b8>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	0019      	movs	r1, r3
 8005dc0:	f00c fa99 	bl	80122f6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005dc4:	2001      	movs	r0, #1
 8005dc6:	f00b f80f 	bl	8010de8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005dca:	4b28      	ldr	r3, [pc, #160]	@ (8005e6c <ESP_Upkeep+0x7b4>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2102      	movs	r1, #2
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f00c fa90 	bl	80122f6 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005dd8:	2209      	movs	r2, #9
 8005dda:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8005ddc:	f004 fcba 	bl	800a754 <EnabledConnectedDevices>
      HAL_Delay(1);
 8005de0:	2001      	movs	r0, #1
 8005de2:	f00b f801 	bl	8010de8 <HAL_Delay>
      ResetESPIndicator();
 8005de6:	f009 faa3 	bl	800f330 <ResetESPIndicator>
      errorcntr = 0;
 8005dea:	4b0b      	ldr	r3, [pc, #44]	@ (8005e18 <ESP_Upkeep+0x760>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005df0:	4b10      	ldr	r3, [pc, #64]	@ (8005e34 <ESP_Upkeep+0x77c>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
      break;
 8005df6:	e0e1      	b.n	8005fbc <ESP_Upkeep+0x904>
 8005df8:	2000055b 	.word	0x2000055b
 8005dfc:	2000062f 	.word	0x2000062f
 8005e00:	2000002c 	.word	0x2000002c
 8005e04:	20000624 	.word	0x20000624
 8005e08:	2000062d 	.word	0x2000062d
 8005e0c:	2000002f 	.word	0x2000002f
 8005e10:	2000062e 	.word	0x2000062e
 8005e14:	2000061e 	.word	0x2000061e
 8005e18:	2000061f 	.word	0x2000061f
 8005e1c:	0003a980 	.word	0x0003a980
 8005e20:	20000560 	.word	0x20000560
 8005e24:	20000574 	.word	0x20000574
 8005e28:	20000570 	.word	0x20000570
 8005e2c:	08026380 	.word	0x08026380
 8005e30:	08025794 	.word	0x08025794
 8005e34:	20000620 	.word	0x20000620
 8005e38:	080263b4 	.word	0x080263b4
 8005e3c:	0000c350 	.word	0x0000c350
 8005e40:	080263f0 	.word	0x080263f0
 8005e44:	20000614 	.word	0x20000614
 8005e48:	08026420 	.word	0x08026420
 8005e4c:	08026438 	.word	0x08026438
 8005e50:	20000001 	.word	0x20000001
 8005e54:	047e7c4f 	.word	0x047e7c4f
 8005e58:	20000628 	.word	0x20000628
 8005e5c:	0802643c 	.word	0x0802643c
 8005e60:	20000028 	.word	0x20000028
 8005e64:	08026480 	.word	0x08026480
 8005e68:	20000558 	.word	0x20000558
 8005e6c:	50001c00 	.word	0x50001c00
 8005e70:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005e74:	4b54      	ldr	r3, [pc, #336]	@ (8005fc8 <ESP_Upkeep+0x910>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f00a fb09 	bl	8010490 <TimestampIsReached>
 8005e7e:	1e03      	subs	r3, r0, #0
 8005e80:	d103      	bne.n	8005e8a <ESP_Upkeep+0x7d2>
 8005e82:	4b52      	ldr	r3, [pc, #328]	@ (8005fcc <ESP_Upkeep+0x914>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d043      	beq.n	8005f12 <ESP_Upkeep+0x85a>
        ESPTransmitDone = false;
 8005e8a:	4b51      	ldr	r3, [pc, #324]	@ (8005fd0 <ESP_Upkeep+0x918>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005e90:	4b50      	ldr	r3, [pc, #320]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <ESP_Upkeep+0x7ec>
          InitIsDone = true;
 8005e98:	4b4f      	ldr	r3, [pc, #316]	@ (8005fd8 <ESP_Upkeep+0x920>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005e9e:	4b4f      	ldr	r3, [pc, #316]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005ea0:	220b      	movs	r2, #11
 8005ea2:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005ea4:	4b4b      	ldr	r3, [pc, #300]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d108      	bne.n	8005ebe <ESP_Upkeep+0x806>
          ConnectionMade = true;
 8005eac:	4b4c      	ldr	r3, [pc, #304]	@ (8005fe0 <ESP_Upkeep+0x928>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005eb2:	4b4c      	ldr	r3, [pc, #304]	@ (8005fe4 <ESP_Upkeep+0x92c>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005eb8:	4b48      	ldr	r3, [pc, #288]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005eba:	220b      	movs	r2, #11
 8005ebc:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005ebe:	4b45      	ldr	r3, [pc, #276]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d102      	bne.n	8005ecc <ESP_Upkeep+0x814>
          EspState = ESP_STATE_INIT;
 8005ec6:	4b45      	ldr	r3, [pc, #276]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005ec8:	2202      	movs	r2, #2
 8005eca:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005ecc:	4b41      	ldr	r3, [pc, #260]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d108      	bne.n	8005ee6 <ESP_Upkeep+0x82e>
          EspState = ESP_STATE_CONFIG;
 8005ed4:	4b41      	ldr	r3, [pc, #260]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005ed6:	220e      	movs	r2, #14
 8005ed8:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005eda:	4a43      	ldr	r2, [pc, #268]	@ (8005fe8 <ESP_Upkeep+0x930>)
 8005edc:	4b43      	ldr	r3, [pc, #268]	@ (8005fec <ESP_Upkeep+0x934>)
 8005ede:	0019      	movs	r1, r3
 8005ee0:	2002      	movs	r0, #2
 8005ee2:	f00a fb2b 	bl	801053c <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d105      	bne.n	8005efa <ESP_Upkeep+0x842>
          EspState = ESP_STATE_MODE_SELECT;
 8005eee:	4b3b      	ldr	r3, [pc, #236]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005ef0:	220b      	movs	r2, #11
 8005ef2:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ff0 <ESP_Upkeep+0x938>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005efa:	4b34      	ldr	r3, [pc, #208]	@ (8005fcc <ESP_Upkeep+0x914>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d020      	beq.n	8005f44 <ESP_Upkeep+0x88c>
 8005f02:	4b34      	ldr	r3, [pc, #208]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d01c      	beq.n	8005f44 <ESP_Upkeep+0x88c>
          EspState = ESP_STATE_INIT;
 8005f0a:	4b34      	ldr	r3, [pc, #208]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005f10:	e018      	b.n	8005f44 <ESP_Upkeep+0x88c>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005f12:	4b38      	ldr	r3, [pc, #224]	@ (8005ff4 <ESP_Upkeep+0x93c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	0018      	movs	r0, r3
 8005f18:	f00a faba 	bl	8010490 <TimestampIsReached>
 8005f1c:	1e03      	subs	r3, r0, #0
 8005f1e:	d04c      	beq.n	8005fba <ESP_Upkeep+0x902>
        if(Mode == AT_MODE_SEND ) {
 8005f20:	4b2c      	ldr	r3, [pc, #176]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d148      	bne.n	8005fba <ESP_Upkeep+0x902>
           Mode = AT_MODE_GETTIME;
 8005f28:	4b2a      	ldr	r3, [pc, #168]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005f2a:	2205      	movs	r2, #5
 8005f2c:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8005f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005f30:	2202      	movs	r2, #2
 8005f32:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8005f34:	4b24      	ldr	r3, [pc, #144]	@ (8005fc8 <ESP_Upkeep+0x910>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4b2f      	ldr	r3, [pc, #188]	@ (8005ff8 <ESP_Upkeep+0x940>)
 8005f3a:	601a      	str	r2, [r3, #0]
           setTime = true;
 8005f3c:	4b2f      	ldr	r3, [pc, #188]	@ (8005ffc <ESP_Upkeep+0x944>)
 8005f3e:	2201      	movs	r2, #1
 8005f40:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005f42:	e03a      	b.n	8005fba <ESP_Upkeep+0x902>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005f44:	46c0      	nop			@ (mov r8, r8)
      break;
 8005f46:	e038      	b.n	8005fba <ESP_Upkeep+0x902>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8005f48:	4b2d      	ldr	r3, [pc, #180]	@ (8006000 <ESP_Upkeep+0x948>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	4053      	eors	r3, r2
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <ESP_Upkeep+0x8b0>
        Info("Do nothing until reset");
 8005f56:	4a24      	ldr	r2, [pc, #144]	@ (8005fe8 <ESP_Upkeep+0x930>)
 8005f58:	4b24      	ldr	r3, [pc, #144]	@ (8005fec <ESP_Upkeep+0x934>)
 8005f5a:	0019      	movs	r1, r3
 8005f5c:	2002      	movs	r0, #2
 8005f5e:	f00a faed 	bl	801053c <CreateLine>
        msgdone = true;
 8005f62:	4b27      	ldr	r3, [pc, #156]	@ (8006000 <ESP_Upkeep+0x948>)
 8005f64:	2201      	movs	r2, #1
 8005f66:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8005f68:	f019 fa0c 	bl	801f384 <GetUsbRxPointer>
 8005f6c:	0003      	movs	r3, r0
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f000 f94a 	bl	8006208 <Process_PC_Config>
      break;
 8005f74:	e022      	b.n	8005fbc <ESP_Upkeep+0x904>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005f76:	4a23      	ldr	r2, [pc, #140]	@ (8006004 <ESP_Upkeep+0x94c>)
 8005f78:	4b23      	ldr	r3, [pc, #140]	@ (8006008 <ESP_Upkeep+0x950>)
 8005f7a:	0019      	movs	r1, r3
 8005f7c:	2001      	movs	r0, #1
 8005f7e:	f00a fadd 	bl	801053c <CreateLine>
      EspState = ESP_STATE_INIT;
 8005f82:	4b16      	ldr	r3, [pc, #88]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005f84:	2202      	movs	r2, #2
 8005f86:	701a      	strb	r2, [r3, #0]
      break;
 8005f88:	e018      	b.n	8005fbc <ESP_Upkeep+0x904>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005f8a:	4a20      	ldr	r2, [pc, #128]	@ (800600c <ESP_Upkeep+0x954>)
 8005f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8006008 <ESP_Upkeep+0x950>)
 8005f8e:	0019      	movs	r1, r3
 8005f90:	2001      	movs	r0, #1
 8005f92:	f00a fad3 	bl	801053c <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005f96:	4b11      	ldr	r3, [pc, #68]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005f98:	2207      	movs	r2, #7
 8005f9a:	701a      	strb	r2, [r3, #0]
      break;
 8005f9c:	e00e      	b.n	8005fbc <ESP_Upkeep+0x904>
      break;
 8005f9e:	46c0      	nop			@ (mov r8, r8)
 8005fa0:	e00c      	b.n	8005fbc <ESP_Upkeep+0x904>
      break;
 8005fa2:	46c0      	nop			@ (mov r8, r8)
 8005fa4:	e00a      	b.n	8005fbc <ESP_Upkeep+0x904>
        break;
 8005fa6:	46c0      	nop			@ (mov r8, r8)
 8005fa8:	e008      	b.n	8005fbc <ESP_Upkeep+0x904>
    break;
 8005faa:	46c0      	nop			@ (mov r8, r8)
 8005fac:	e006      	b.n	8005fbc <ESP_Upkeep+0x904>
    break;
 8005fae:	46c0      	nop			@ (mov r8, r8)
 8005fb0:	e004      	b.n	8005fbc <ESP_Upkeep+0x904>
      break;
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	e002      	b.n	8005fbc <ESP_Upkeep+0x904>
    break;
 8005fb6:	46c0      	nop			@ (mov r8, r8)
 8005fb8:	e000      	b.n	8005fbc <ESP_Upkeep+0x904>
      break;
 8005fba:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005fbc:	4b07      	ldr	r3, [pc, #28]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
}
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	b002      	add	sp, #8
 8005fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8005fc8:	20000624 	.word	0x20000624
 8005fcc:	2000055b 	.word	0x2000055b
 8005fd0:	20000560 	.word	0x20000560
 8005fd4:	2000062f 	.word	0x2000062f
 8005fd8:	20000559 	.word	0x20000559
 8005fdc:	2000002c 	.word	0x2000002c
 8005fe0:	2000055c 	.word	0x2000055c
 8005fe4:	2000055e 	.word	0x2000055e
 8005fe8:	080264a0 	.word	0x080264a0
 8005fec:	08026438 	.word	0x08026438
 8005ff0:	2000055d 	.word	0x2000055d
 8005ff4:	20000628 	.word	0x20000628
 8005ff8:	20000028 	.word	0x20000028
 8005ffc:	20000001 	.word	0x20000001
 8006000:	2000055f 	.word	0x2000055f
 8006004:	080264b8 	.word	0x080264b8
 8006008:	08025794 	.word	0x08025794
 800600c:	080264cc 	.word	0x080264cc

08006010 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8006018:	4b0f      	ldr	r3, [pc, #60]	@ (8006058 <I2CSensors_Init+0x48>)
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 800601e:	4a0f      	ldr	r2, [pc, #60]	@ (800605c <I2CSensors_Init+0x4c>)
 8006020:	4b0f      	ldr	r3, [pc, #60]	@ (8006060 <I2CSensors_Init+0x50>)
 8006022:	0011      	movs	r1, r2
 8006024:	0018      	movs	r0, r3
 8006026:	f00a fbed 	bl	8010804 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 800602a:	4a0c      	ldr	r2, [pc, #48]	@ (800605c <I2CSensors_Init+0x4c>)
 800602c:	4b0c      	ldr	r3, [pc, #48]	@ (8006060 <I2CSensors_Init+0x50>)
 800602e:	0011      	movs	r1, r2
 8006030:	0018      	movs	r0, r3
 8006032:	f007 fb55 	bl	800d6e0 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C);
 8006036:	4a09      	ldr	r2, [pc, #36]	@ (800605c <I2CSensors_Init+0x4c>)
 8006038:	4b09      	ldr	r3, [pc, #36]	@ (8006060 <I2CSensors_Init+0x50>)
 800603a:	0011      	movs	r1, r2
 800603c:	0018      	movs	r0, r3
 800603e:	f001 fe61 	bl	8007d04 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8006042:	4a08      	ldr	r2, [pc, #32]	@ (8006064 <I2CSensors_Init+0x54>)
 8006044:	4b08      	ldr	r3, [pc, #32]	@ (8006068 <I2CSensors_Init+0x58>)
 8006046:	0011      	movs	r1, r2
 8006048:	0018      	movs	r0, r3
 800604a:	f002 fb9b 	bl	8008784 <BMP_Init>
}
 800604e:	46c0      	nop			@ (mov r8, r8)
 8006050:	46bd      	mov	sp, r7
 8006052:	b002      	add	sp, #8
 8006054:	bd80      	pop	{r7, pc}
 8006056:	46c0      	nop			@ (mov r8, r8)
 8006058:	20000778 	.word	0x20000778
 800605c:	080060c1 	.word	0x080060c1
 8006060:	0800606d 	.word	0x0800606d
 8006064:	08006191 	.word	0x08006191
 8006068:	08006115 	.word	0x08006115

0800606c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800606c:	b5b0      	push	{r4, r5, r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6039      	str	r1, [r7, #0]
 8006074:	0011      	movs	r1, r2
 8006076:	1dfb      	adds	r3, r7, #7
 8006078:	1c02      	adds	r2, r0, #0
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	1dbb      	adds	r3, r7, #6
 800607e:	1c0a      	adds	r2, r1, #0
 8006080:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8006082:	4b0e      	ldr	r3, [pc, #56]	@ (80060bc <ReadI2C+0x50>)
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	1dfb      	adds	r3, r7, #7
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	18db      	adds	r3, r3, r3
 800608e:	b299      	uxth	r1, r3
 8006090:	1dbb      	adds	r3, r7, #6
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	250f      	movs	r5, #15
 8006098:	197c      	adds	r4, r7, r5
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	f00c fd10 	bl	8012ac0 <HAL_I2C_Master_Receive_DMA>
 80060a0:	0003      	movs	r3, r0
 80060a2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80060a4:	197b      	adds	r3, r7, r5
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <ReadI2C+0x44>
        return false;
 80060ac:	2300      	movs	r3, #0
 80060ae:	e000      	b.n	80060b2 <ReadI2C+0x46>
    }
    return true;
 80060b0:	2301      	movs	r3, #1
}
 80060b2:	0018      	movs	r0, r3
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b004      	add	sp, #16
 80060b8:	bdb0      	pop	{r4, r5, r7, pc}
 80060ba:	46c0      	nop			@ (mov r8, r8)
 80060bc:	20000778 	.word	0x20000778

080060c0 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80060c0:	b5b0      	push	{r4, r5, r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6039      	str	r1, [r7, #0]
 80060c8:	0011      	movs	r1, r2
 80060ca:	1dfb      	adds	r3, r7, #7
 80060cc:	1c02      	adds	r2, r0, #0
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	1dbb      	adds	r3, r7, #6
 80060d2:	1c0a      	adds	r2, r1, #0
 80060d4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80060d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006110 <WriteI2C+0x50>)
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	1dfb      	adds	r3, r7, #7
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	18db      	adds	r3, r3, r3
 80060e2:	b299      	uxth	r1, r3
 80060e4:	1dbb      	adds	r3, r7, #6
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	250f      	movs	r5, #15
 80060ec:	197c      	adds	r4, r7, r5
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	f00c fbe0 	bl	80128b4 <HAL_I2C_Master_Transmit_DMA>
 80060f4:	0003      	movs	r3, r0
 80060f6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80060f8:	197b      	adds	r3, r7, r5
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <WriteI2C+0x44>
        return false;
 8006100:	2300      	movs	r3, #0
 8006102:	e000      	b.n	8006106 <WriteI2C+0x46>
    }
    return true;
 8006104:	2301      	movs	r3, #1
}
 8006106:	0018      	movs	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	b004      	add	sp, #16
 800610c:	bdb0      	pop	{r4, r5, r7, pc}
 800610e:	46c0      	nop			@ (mov r8, r8)
 8006110:	20000778 	.word	0x20000778

08006114 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8006114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006116:	b08b      	sub	sp, #44	@ 0x2c
 8006118:	af04      	add	r7, sp, #16
 800611a:	0004      	movs	r4, r0
 800611c:	0008      	movs	r0, r1
 800611e:	0011      	movs	r1, r2
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	250f      	movs	r5, #15
 8006124:	197b      	adds	r3, r7, r5
 8006126:	1c22      	adds	r2, r4, #0
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	260c      	movs	r6, #12
 800612c:	19bb      	adds	r3, r7, r6
 800612e:	1c02      	adds	r2, r0, #0
 8006130:	801a      	strh	r2, [r3, #0]
 8006132:	230a      	movs	r3, #10
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	1c0a      	adds	r2, r1, #0
 8006138:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 800613a:	4b14      	ldr	r3, [pc, #80]	@ (800618c <ReadI2CMem+0x78>)
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	197b      	adds	r3, r7, r5
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	b29b      	uxth	r3, r3
 8006144:	18db      	adds	r3, r3, r3
 8006146:	b299      	uxth	r1, r3
 8006148:	2217      	movs	r2, #23
 800614a:	18bc      	adds	r4, r7, r2
 800614c:	230a      	movs	r3, #10
 800614e:	18fb      	adds	r3, r7, r3
 8006150:	881d      	ldrh	r5, [r3, #0]
 8006152:	19bb      	adds	r3, r7, r6
 8006154:	881a      	ldrh	r2, [r3, #0]
 8006156:	2364      	movs	r3, #100	@ 0x64
 8006158:	9302      	str	r3, [sp, #8]
 800615a:	2328      	movs	r3, #40	@ 0x28
 800615c:	2608      	movs	r6, #8
 800615e:	199b      	adds	r3, r3, r6
 8006160:	19db      	adds	r3, r3, r7
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	9301      	str	r3, [sp, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	002b      	movs	r3, r5
 800616c:	f00c fdae 	bl	8012ccc <HAL_I2C_Mem_Read>
 8006170:	0003      	movs	r3, r0
 8006172:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8006174:	2217      	movs	r2, #23
 8006176:	18bb      	adds	r3, r7, r2
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <ReadI2CMem+0x6e>
     return false;
 800617e:	2300      	movs	r3, #0
 8006180:	e000      	b.n	8006184 <ReadI2CMem+0x70>
   }
   return true;
 8006182:	2301      	movs	r3, #1
}
 8006184:	0018      	movs	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	b007      	add	sp, #28
 800618a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800618c:	20000778 	.word	0x20000778

08006190 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8006190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006192:	b089      	sub	sp, #36	@ 0x24
 8006194:	af02      	add	r7, sp, #8
 8006196:	0004      	movs	r4, r0
 8006198:	0008      	movs	r0, r1
 800619a:	0011      	movs	r1, r2
 800619c:	607b      	str	r3, [r7, #4]
 800619e:	250f      	movs	r5, #15
 80061a0:	197b      	adds	r3, r7, r5
 80061a2:	1c22      	adds	r2, r4, #0
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	260c      	movs	r6, #12
 80061a8:	19bb      	adds	r3, r7, r6
 80061aa:	1c02      	adds	r2, r0, #0
 80061ac:	801a      	strh	r2, [r3, #0]
 80061ae:	230a      	movs	r3, #10
 80061b0:	18fb      	adds	r3, r7, r3
 80061b2:	1c0a      	adds	r2, r1, #0
 80061b4:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 80061b6:	4b13      	ldr	r3, [pc, #76]	@ (8006204 <WriteI2CMem+0x74>)
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	197b      	adds	r3, r7, r5
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	18db      	adds	r3, r3, r3
 80061c2:	b299      	uxth	r1, r3
 80061c4:	2217      	movs	r2, #23
 80061c6:	18bc      	adds	r4, r7, r2
 80061c8:	230a      	movs	r3, #10
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	881d      	ldrh	r5, [r3, #0]
 80061ce:	19bb      	adds	r3, r7, r6
 80061d0:	881a      	ldrh	r2, [r3, #0]
 80061d2:	2328      	movs	r3, #40	@ 0x28
 80061d4:	2608      	movs	r6, #8
 80061d6:	199b      	adds	r3, r3, r6
 80061d8:	19db      	adds	r3, r3, r7
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	002b      	movs	r3, r5
 80061e4:	f00c fea6 	bl	8012f34 <HAL_I2C_Mem_Write_DMA>
 80061e8:	0003      	movs	r3, r0
 80061ea:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 80061ec:	2217      	movs	r2, #23
 80061ee:	18bb      	adds	r3, r7, r2
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <WriteI2CMem+0x6a>
     return false;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e000      	b.n	80061fc <WriteI2CMem+0x6c>
   }
   return true;
 80061fa:	2301      	movs	r3, #1
}
 80061fc:	0018      	movs	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	b007      	add	sp, #28
 8006202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006204:	20000778 	.word	0x20000778

08006208 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8006208:	b590      	push	{r4, r7, lr}
 800620a:	b0c3      	sub	sp, #268	@ 0x10c
 800620c:	af3e      	add	r7, sp, #248	@ 0xf8
 800620e:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8006210:	f019 f8d8 	bl	801f3c4 <GetUsbRxDataSize>
 8006214:	0003      	movs	r3, r0
 8006216:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b05      	cmp	r3, #5
 800621c:	d971      	bls.n	8006302 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2123      	movs	r1, #35	@ 0x23
 8006222:	0018      	movs	r0, r3
 8006224:	f01c faf0 	bl	8022808 <strchr>
 8006228:	0003      	movs	r3, r0
 800622a:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d065      	beq.n	80062fe <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	785a      	ldrb	r2, [r3, #1]
 8006236:	4b34      	ldr	r3, [pc, #208]	@ (8006308 <Process_PC_Config+0x100>)
 8006238:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	789a      	ldrb	r2, [r3, #2]
 800623e:	4b32      	ldr	r3, [pc, #200]	@ (8006308 <Process_PC_Config+0x100>)
 8006240:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8006242:	4b31      	ldr	r3, [pc, #196]	@ (8006308 <Process_PC_Config+0x100>)
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	3305      	adds	r3, #5
 8006248:	001a      	movs	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4293      	cmp	r3, r2
 800624e:	d351      	bcc.n	80062f4 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	1cd9      	adds	r1, r3, #3
 8006254:	4b2c      	ldr	r3, [pc, #176]	@ (8006308 <Process_PC_Config+0x100>)
 8006256:	785b      	ldrb	r3, [r3, #1]
 8006258:	001a      	movs	r2, r3
 800625a:	4b2c      	ldr	r3, [pc, #176]	@ (800630c <Process_PC_Config+0x104>)
 800625c:	0018      	movs	r0, r3
 800625e:	f01c fba7 	bl	80229b0 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8006262:	4b29      	ldr	r3, [pc, #164]	@ (8006308 <Process_PC_Config+0x100>)
 8006264:	785b      	ldrb	r3, [r3, #1]
 8006266:	3303      	adds	r3, #3
 8006268:	001a      	movs	r2, r3
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	189b      	adds	r3, r3, r2
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	b21a      	sxth	r2, r3
 8006274:	4b24      	ldr	r3, [pc, #144]	@ (8006308 <Process_PC_Config+0x100>)
 8006276:	785b      	ldrb	r3, [r3, #1]
 8006278:	3304      	adds	r3, #4
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	18cb      	adds	r3, r1, r3
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b21b      	sxth	r3, r3
 8006282:	4313      	orrs	r3, r2
 8006284:	b21b      	sxth	r3, r3
 8006286:	b299      	uxth	r1, r3
 8006288:	4a1f      	ldr	r2, [pc, #124]	@ (8006308 <Process_PC_Config+0x100>)
 800628a:	2381      	movs	r3, #129	@ 0x81
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8006290:	4a1d      	ldr	r2, [pc, #116]	@ (8006308 <Process_PC_Config+0x100>)
 8006292:	2381      	movs	r3, #129	@ 0x81
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	5ad4      	ldrh	r4, [r2, r3]
 8006298:	4b1b      	ldr	r3, [pc, #108]	@ (8006308 <Process_PC_Config+0x100>)
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	3303      	adds	r3, #3
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	0011      	movs	r1, r2
 80062a4:	0018      	movs	r0, r3
 80062a6:	f000 f975 	bl	8006594 <CRC16_ARC>
 80062aa:	0003      	movs	r3, r0
 80062ac:	429c      	cmp	r4, r3
 80062ae:	d007      	beq.n	80062c0 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80062b0:	4b15      	ldr	r3, [pc, #84]	@ (8006308 <Process_PC_Config+0x100>)
 80062b2:	785a      	ldrb	r2, [r3, #1]
 80062b4:	4b15      	ldr	r3, [pc, #84]	@ (800630c <Process_PC_Config+0x104>)
 80062b6:	0019      	movs	r1, r3
 80062b8:	2001      	movs	r0, #1
 80062ba:	f000 f919 	bl	80064f0 <Create_Message>
 80062be:	e016      	b.n	80062ee <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80062c0:	4c11      	ldr	r4, [pc, #68]	@ (8006308 <Process_PC_Config+0x100>)
 80062c2:	466b      	mov	r3, sp
 80062c4:	0018      	movs	r0, r3
 80062c6:	0023      	movs	r3, r4
 80062c8:	3310      	adds	r3, #16
 80062ca:	22f4      	movs	r2, #244	@ 0xf4
 80062cc:	0019      	movs	r1, r3
 80062ce:	f01c fb6f 	bl	80229b0 <memcpy>
 80062d2:	6820      	ldr	r0, [r4, #0]
 80062d4:	6861      	ldr	r1, [r4, #4]
 80062d6:	68a2      	ldr	r2, [r4, #8]
 80062d8:	68e3      	ldr	r3, [r4, #12]
 80062da:	f000 f819 	bl	8006310 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80062de:	4b0a      	ldr	r3, [pc, #40]	@ (8006308 <Process_PC_Config+0x100>)
 80062e0:	7818      	ldrb	r0, [r3, #0]
 80062e2:	4b09      	ldr	r3, [pc, #36]	@ (8006308 <Process_PC_Config+0x100>)
 80062e4:	785a      	ldrb	r2, [r3, #1]
 80062e6:	4b09      	ldr	r3, [pc, #36]	@ (800630c <Process_PC_Config+0x104>)
 80062e8:	0019      	movs	r1, r3
 80062ea:	f000 f901 	bl	80064f0 <Create_Message>
                }
                ResetUsbRxDataSize();
 80062ee:	f019 f851 	bl	801f394 <ResetUsbRxDataSize>
                return;
 80062f2:	e006      	b.n	8006302 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	0018      	movs	r0, r3
 80062f8:	f019 f86e 	bl	801f3d8 <GetUsbRxNextChunk>
 80062fc:	e001      	b.n	8006302 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80062fe:	f019 f849 	bl	801f394 <ResetUsbRxDataSize>
        }
    }
}
 8006302:	46bd      	mov	sp, r7
 8006304:	b005      	add	sp, #20
 8006306:	bd90      	pop	{r4, r7, pc}
 8006308:	2000077c 	.word	0x2000077c
 800630c:	2000077e 	.word	0x2000077e

08006310 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8006310:	b084      	sub	sp, #16
 8006312:	b5b0      	push	{r4, r5, r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	2518      	movs	r5, #24
 800631a:	197c      	adds	r4, r7, r5
 800631c:	6020      	str	r0, [r4, #0]
 800631e:	6061      	str	r1, [r4, #4]
 8006320:	60a2      	str	r2, [r4, #8]
 8006322:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8006324:	197b      	adds	r3, r7, r5
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2bfe      	cmp	r3, #254	@ 0xfe
 800632a:	d100      	bne.n	800632e <ProcessCmd+0x1e>
 800632c:	e09c      	b.n	8006468 <ProcessCmd+0x158>
 800632e:	dd00      	ble.n	8006332 <ProcessCmd+0x22>
 8006330:	e0bc      	b.n	80064ac <ProcessCmd+0x19c>
 8006332:	2b0c      	cmp	r3, #12
 8006334:	dc0a      	bgt.n	800634c <ProcessCmd+0x3c>
 8006336:	2b00      	cmp	r3, #0
 8006338:	da00      	bge.n	800633c <ProcessCmd+0x2c>
 800633a:	e0b7      	b.n	80064ac <ProcessCmd+0x19c>
 800633c:	2b0c      	cmp	r3, #12
 800633e:	d900      	bls.n	8006342 <ProcessCmd+0x32>
 8006340:	e0b4      	b.n	80064ac <ProcessCmd+0x19c>
 8006342:	009a      	lsls	r2, r3, #2
 8006344:	4b5d      	ldr	r3, [pc, #372]	@ (80064bc <ProcessCmd+0x1ac>)
 8006346:	18d3      	adds	r3, r2, r3
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	469f      	mov	pc, r3
 800634c:	2bfd      	cmp	r3, #253	@ 0xfd
 800634e:	d100      	bne.n	8006352 <ProcessCmd+0x42>
 8006350:	e084      	b.n	800645c <ProcessCmd+0x14c>
            }
            break;
        }
    }

}
 8006352:	e0ab      	b.n	80064ac <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006354:	2118      	movs	r1, #24
 8006356:	187b      	adds	r3, r7, r1
 8006358:	785b      	ldrb	r3, [r3, #1]
 800635a:	001a      	movs	r2, r3
 800635c:	187b      	adds	r3, r7, r1
 800635e:	1c99      	adds	r1, r3, #2
 8006360:	4857      	ldr	r0, [pc, #348]	@ (80064c0 <ProcessCmd+0x1b0>)
 8006362:	230c      	movs	r3, #12
 8006364:	f002 fdd2 	bl	8008f0c <WriteUint8ArrayEepromSafe>
        break;
 8006368:	e0a0      	b.n	80064ac <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800636a:	2118      	movs	r1, #24
 800636c:	187b      	adds	r3, r7, r1
 800636e:	785b      	ldrb	r3, [r3, #1]
 8006370:	001a      	movs	r2, r3
 8006372:	187b      	adds	r3, r7, r1
 8006374:	1c99      	adds	r1, r3, #2
 8006376:	4853      	ldr	r0, [pc, #332]	@ (80064c4 <ProcessCmd+0x1b4>)
 8006378:	230c      	movs	r3, #12
 800637a:	f002 fdc7 	bl	8008f0c <WriteUint8ArrayEepromSafe>
        break;
 800637e:	e095      	b.n	80064ac <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006380:	2118      	movs	r1, #24
 8006382:	187b      	adds	r3, r7, r1
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	001a      	movs	r2, r3
 8006388:	187b      	adds	r3, r7, r1
 800638a:	1c99      	adds	r1, r3, #2
 800638c:	484e      	ldr	r0, [pc, #312]	@ (80064c8 <ProcessCmd+0x1b8>)
 800638e:	230c      	movs	r3, #12
 8006390:	f002 fdbc 	bl	8008f0c <WriteUint8ArrayEepromSafe>
        break;
 8006394:	e08a      	b.n	80064ac <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006396:	2118      	movs	r1, #24
 8006398:	187b      	adds	r3, r7, r1
 800639a:	785b      	ldrb	r3, [r3, #1]
 800639c:	001a      	movs	r2, r3
 800639e:	187b      	adds	r3, r7, r1
 80063a0:	1c99      	adds	r1, r3, #2
 80063a2:	484a      	ldr	r0, [pc, #296]	@ (80064cc <ProcessCmd+0x1bc>)
 80063a4:	230c      	movs	r3, #12
 80063a6:	f002 fdb1 	bl	8008f0c <WriteUint8ArrayEepromSafe>
        break;
 80063aa:	e07f      	b.n	80064ac <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80063ac:	2118      	movs	r1, #24
 80063ae:	187b      	adds	r3, r7, r1
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	001a      	movs	r2, r3
 80063b4:	187b      	adds	r3, r7, r1
 80063b6:	1c99      	adds	r1, r3, #2
 80063b8:	4845      	ldr	r0, [pc, #276]	@ (80064d0 <ProcessCmd+0x1c0>)
 80063ba:	230c      	movs	r3, #12
 80063bc:	f002 fda6 	bl	8008f0c <WriteUint8ArrayEepromSafe>
        break;
 80063c0:	e074      	b.n	80064ac <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80063c2:	2118      	movs	r1, #24
 80063c4:	187b      	adds	r3, r7, r1
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	001a      	movs	r2, r3
 80063ca:	187b      	adds	r3, r7, r1
 80063cc:	1c99      	adds	r1, r3, #2
 80063ce:	4841      	ldr	r0, [pc, #260]	@ (80064d4 <ProcessCmd+0x1c4>)
 80063d0:	230c      	movs	r3, #12
 80063d2:	f002 fd9b 	bl	8008f0c <WriteUint8ArrayEepromSafe>
        break;
 80063d6:	e069      	b.n	80064ac <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80063d8:	2118      	movs	r1, #24
 80063da:	187b      	adds	r3, r7, r1
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	001a      	movs	r2, r3
 80063e0:	187b      	adds	r3, r7, r1
 80063e2:	1c99      	adds	r1, r3, #2
 80063e4:	483c      	ldr	r0, [pc, #240]	@ (80064d8 <ProcessCmd+0x1c8>)
 80063e6:	230c      	movs	r3, #12
 80063e8:	f002 fd90 	bl	8008f0c <WriteUint8ArrayEepromSafe>
        break;
 80063ec:	e05e      	b.n	80064ac <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80063ee:	2118      	movs	r1, #24
 80063f0:	187b      	adds	r3, r7, r1
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	001a      	movs	r2, r3
 80063f6:	187b      	adds	r3, r7, r1
 80063f8:	1c99      	adds	r1, r3, #2
 80063fa:	4838      	ldr	r0, [pc, #224]	@ (80064dc <ProcessCmd+0x1cc>)
 80063fc:	2320      	movs	r3, #32
 80063fe:	f002 fd85 	bl	8008f0c <WriteUint8ArrayEepromSafe>
        break;
 8006402:	e053      	b.n	80064ac <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006404:	2118      	movs	r1, #24
 8006406:	187b      	adds	r3, r7, r1
 8006408:	785b      	ldrb	r3, [r3, #1]
 800640a:	001a      	movs	r2, r3
 800640c:	187b      	adds	r3, r7, r1
 800640e:	1c99      	adds	r1, r3, #2
 8006410:	4833      	ldr	r0, [pc, #204]	@ (80064e0 <ProcessCmd+0x1d0>)
 8006412:	230c      	movs	r3, #12
 8006414:	f002 fd7a 	bl	8008f0c <WriteUint8ArrayEepromSafe>
        break;
 8006418:	e048      	b.n	80064ac <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800641a:	2118      	movs	r1, #24
 800641c:	187b      	adds	r3, r7, r1
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	001a      	movs	r2, r3
 8006422:	187b      	adds	r3, r7, r1
 8006424:	1c99      	adds	r1, r3, #2
 8006426:	482f      	ldr	r0, [pc, #188]	@ (80064e4 <ProcessCmd+0x1d4>)
 8006428:	230c      	movs	r3, #12
 800642a:	f002 fd6f 	bl	8008f0c <WriteUint8ArrayEepromSafe>
        break;
 800642e:	e03d      	b.n	80064ac <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006430:	2118      	movs	r1, #24
 8006432:	187b      	adds	r3, r7, r1
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	001a      	movs	r2, r3
 8006438:	187b      	adds	r3, r7, r1
 800643a:	1c99      	adds	r1, r3, #2
 800643c:	482a      	ldr	r0, [pc, #168]	@ (80064e8 <ProcessCmd+0x1d8>)
 800643e:	230c      	movs	r3, #12
 8006440:	f002 fd64 	bl	8008f0c <WriteUint8ArrayEepromSafe>
        break;
 8006444:	e032      	b.n	80064ac <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006446:	2118      	movs	r1, #24
 8006448:	187b      	adds	r3, r7, r1
 800644a:	785b      	ldrb	r3, [r3, #1]
 800644c:	001a      	movs	r2, r3
 800644e:	187b      	adds	r3, r7, r1
 8006450:	1c99      	adds	r1, r3, #2
 8006452:	4826      	ldr	r0, [pc, #152]	@ (80064ec <ProcessCmd+0x1dc>)
 8006454:	230c      	movs	r3, #12
 8006456:	f002 fd59 	bl	8008f0c <WriteUint8ArrayEepromSafe>
        break;
 800645a:	e027      	b.n	80064ac <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 800645c:	4b18      	ldr	r3, [pc, #96]	@ (80064c0 <ProcessCmd+0x1b0>)
 800645e:	21f8      	movs	r1, #248	@ 0xf8
 8006460:	0018      	movs	r0, r3
 8006462:	f002 fd98 	bl	8008f96 <ClearEEprom>
        break;
 8006466:	e021      	b.n	80064ac <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8006468:	2118      	movs	r1, #24
 800646a:	187b      	adds	r3, r7, r1
 800646c:	789b      	ldrb	r3, [r3, #2]
 800646e:	021b      	lsls	r3, r3, #8
 8006470:	b21a      	sxth	r2, r3
 8006472:	187b      	adds	r3, r7, r1
 8006474:	78db      	ldrb	r3, [r3, #3]
 8006476:	b21b      	sxth	r3, r3
 8006478:	4313      	orrs	r3, r2
 800647a:	b21a      	sxth	r2, r3
 800647c:	1dbb      	adds	r3, r7, #6
 800647e:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8006480:	1dbb      	adds	r3, r7, #6
 8006482:	881a      	ldrh	r2, [r3, #0]
 8006484:	23c0      	movs	r3, #192	@ 0xc0
 8006486:	015b      	lsls	r3, r3, #5
 8006488:	429a      	cmp	r2, r3
 800648a:	d207      	bcs.n	800649c <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 800648c:	1dbb      	adds	r3, r7, #6
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	4a0b      	ldr	r2, [pc, #44]	@ (80064c0 <ProcessCmd+0x1b0>)
 8006492:	0019      	movs	r1, r3
 8006494:	0010      	movs	r0, r2
 8006496:	f002 fd7e 	bl	8008f96 <ClearEEprom>
            break;
 800649a:	e006      	b.n	80064aa <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 800649c:	23c0      	movs	r3, #192	@ 0xc0
 800649e:	015b      	lsls	r3, r3, #5
 80064a0:	4a07      	ldr	r2, [pc, #28]	@ (80064c0 <ProcessCmd+0x1b0>)
 80064a2:	0019      	movs	r1, r3
 80064a4:	0010      	movs	r0, r2
 80064a6:	f002 fd76 	bl	8008f96 <ClearEEprom>
            break;
 80064aa:	46c0      	nop			@ (mov r8, r8)
}
 80064ac:	46c0      	nop			@ (mov r8, r8)
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b002      	add	sp, #8
 80064b2:	bcb0      	pop	{r4, r5, r7}
 80064b4:	bc08      	pop	{r3}
 80064b6:	b004      	add	sp, #16
 80064b8:	4718      	bx	r3
 80064ba:	46c0      	nop			@ (mov r8, r8)
 80064bc:	0802881c 	.word	0x0802881c
 80064c0:	08080000 	.word	0x08080000
 80064c4:	0808000c 	.word	0x0808000c
 80064c8:	08080018 	.word	0x08080018
 80064cc:	08080024 	.word	0x08080024
 80064d0:	08080030 	.word	0x08080030
 80064d4:	0808003c 	.word	0x0808003c
 80064d8:	08080048 	.word	0x08080048
 80064dc:	08080090 	.word	0x08080090
 80064e0:	08080078 	.word	0x08080078
 80064e4:	0808006c 	.word	0x0808006c
 80064e8:	08080060 	.word	0x08080060
 80064ec:	08080054 	.word	0x08080054

080064f0 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80064f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6039      	str	r1, [r7, #0]
 80064f8:	0011      	movs	r1, r2
 80064fa:	1dfb      	adds	r3, r7, #7
 80064fc:	1c02      	adds	r2, r0, #0
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	1dbb      	adds	r3, r7, #6
 8006502:	1c0a      	adds	r2, r1, #0
 8006504:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 8006506:	2223      	movs	r2, #35	@ 0x23
 8006508:	4b20      	ldr	r3, [pc, #128]	@ (800658c <Create_Message+0x9c>)
 800650a:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 800650c:	4b1f      	ldr	r3, [pc, #124]	@ (800658c <Create_Message+0x9c>)
 800650e:	1dfa      	adds	r2, r7, #7
 8006510:	7812      	ldrb	r2, [r2, #0]
 8006512:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8006514:	4b1d      	ldr	r3, [pc, #116]	@ (800658c <Create_Message+0x9c>)
 8006516:	1dba      	adds	r2, r7, #6
 8006518:	7812      	ldrb	r2, [r2, #0]
 800651a:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 800651c:	1dbb      	adds	r3, r7, #6
 800651e:	781a      	ldrb	r2, [r3, #0]
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	4b1b      	ldr	r3, [pc, #108]	@ (8006590 <Create_Message+0xa0>)
 8006524:	0018      	movs	r0, r3
 8006526:	f01c fa43 	bl	80229b0 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800652a:	1dbb      	adds	r3, r7, #6
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	b29a      	uxth	r2, r3
 8006530:	250e      	movs	r5, #14
 8006532:	197b      	adds	r3, r7, r5
 8006534:	3203      	adds	r2, #3
 8006536:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8006538:	260c      	movs	r6, #12
 800653a:	19bc      	adds	r4, r7, r6
 800653c:	197b      	adds	r3, r7, r5
 800653e:	881a      	ldrh	r2, [r3, #0]
 8006540:	4b12      	ldr	r3, [pc, #72]	@ (800658c <Create_Message+0x9c>)
 8006542:	0011      	movs	r1, r2
 8006544:	0018      	movs	r0, r3
 8006546:	f000 f825 	bl	8006594 <CRC16_ARC>
 800654a:	0003      	movs	r3, r0
 800654c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800654e:	0030      	movs	r0, r6
 8006550:	183b      	adds	r3, r7, r0
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	0a1b      	lsrs	r3, r3, #8
 8006556:	b29a      	uxth	r2, r3
 8006558:	197b      	adds	r3, r7, r5
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b2d1      	uxtb	r1, r2
 800655e:	4a0b      	ldr	r2, [pc, #44]	@ (800658c <Create_Message+0x9c>)
 8006560:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8006562:	197b      	adds	r3, r7, r5
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	3301      	adds	r3, #1
 8006568:	183a      	adds	r2, r7, r0
 800656a:	8812      	ldrh	r2, [r2, #0]
 800656c:	b2d1      	uxtb	r1, r2
 800656e:	4a07      	ldr	r2, [pc, #28]	@ (800658c <Create_Message+0x9c>)
 8006570:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8006572:	197b      	adds	r3, r7, r5
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	3302      	adds	r3, #2
 8006578:	b29a      	uxth	r2, r3
 800657a:	4b04      	ldr	r3, [pc, #16]	@ (800658c <Create_Message+0x9c>)
 800657c:	0011      	movs	r1, r2
 800657e:	0018      	movs	r0, r3
 8006580:	f018 fec6 	bl	801f310 <CDC_Transmit_FS>
}
 8006584:	46c0      	nop			@ (mov r8, r8)
 8006586:	46bd      	mov	sp, r7
 8006588:	b005      	add	sp, #20
 800658a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800658c:	20000888 	.word	0x20000888
 8006590:	2000088b 	.word	0x2000088b

08006594 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	000a      	movs	r2, r1
 800659e:	1cbb      	adds	r3, r7, #2
 80065a0:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80065a2:	2316      	movs	r3, #22
 80065a4:	18fb      	adds	r3, r7, r3
 80065a6:	2200      	movs	r2, #0
 80065a8:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	e02e      	b.n	800660e <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	18d3      	adds	r3, r2, r3
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	0019      	movs	r1, r3
 80065ba:	2216      	movs	r2, #22
 80065bc:	18bb      	adds	r3, r7, r2
 80065be:	18ba      	adds	r2, r7, r2
 80065c0:	8812      	ldrh	r2, [r2, #0]
 80065c2:	404a      	eors	r2, r1
 80065c4:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	e01a      	b.n	8006602 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80065cc:	2116      	movs	r1, #22
 80065ce:	187b      	adds	r3, r7, r1
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	2201      	movs	r2, #1
 80065d4:	4013      	ands	r3, r2
 80065d6:	d00b      	beq.n	80065f0 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80065d8:	187b      	adds	r3, r7, r1
 80065da:	187a      	adds	r2, r7, r1
 80065dc:	8812      	ldrh	r2, [r2, #0]
 80065de:	0852      	lsrs	r2, r2, #1
 80065e0:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80065e2:	187b      	adds	r3, r7, r1
 80065e4:	187a      	adds	r2, r7, r1
 80065e6:	8812      	ldrh	r2, [r2, #0]
 80065e8:	490f      	ldr	r1, [pc, #60]	@ (8006628 <CRC16_ARC+0x94>)
 80065ea:	404a      	eors	r2, r1
 80065ec:	801a      	strh	r2, [r3, #0]
 80065ee:	e005      	b.n	80065fc <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80065f0:	2216      	movs	r2, #22
 80065f2:	18bb      	adds	r3, r7, r2
 80065f4:	18ba      	adds	r2, r7, r2
 80065f6:	8812      	ldrh	r2, [r2, #0]
 80065f8:	0852      	lsrs	r2, r2, #1
 80065fa:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b07      	cmp	r3, #7
 8006606:	dde1      	ble.n	80065cc <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	3301      	adds	r3, #1
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	1cbb      	adds	r3, r7, #2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	429a      	cmp	r2, r3
 8006616:	dbcb      	blt.n	80065b0 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8006618:	2316      	movs	r3, #22
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	881b      	ldrh	r3, [r3, #0]
}
 800661e:	0018      	movs	r0, r3
 8006620:	46bd      	mov	sp, r7
 8006622:	b006      	add	sp, #24
 8006624:	bd80      	pop	{r7, pc}
 8006626:	46c0      	nop			@ (mov r8, r8)
 8006628:	ffffa001 	.word	0xffffa001

0800662c <printf_USB>:

void printf_USB(const char* message, ...)
{
 800662c:	b40f      	push	{r0, r1, r2, r3}
 800662e:	b590      	push	{r4, r7, lr}
 8006630:	b0a9      	sub	sp, #164	@ 0xa4
 8006632:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8006634:	23ac      	movs	r3, #172	@ 0xac
 8006636:	2108      	movs	r1, #8
 8006638:	185b      	adds	r3, r3, r1
 800663a:	19db      	adds	r3, r3, r7
 800663c:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	23a8      	movs	r3, #168	@ 0xa8
 8006642:	185b      	adds	r3, r3, r1
 8006644:	19db      	adds	r3, r3, r7
 8006646:	6819      	ldr	r1, [r3, #0]
 8006648:	2408      	movs	r4, #8
 800664a:	193b      	adds	r3, r7, r4
 800664c:	0018      	movs	r0, r3
 800664e:	f01c f827 	bl	80226a0 <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8006652:	193b      	adds	r3, r7, r4
 8006654:	0018      	movs	r0, r3
 8006656:	f7f9 fd89 	bl	800016c <strlen>
 800665a:	0003      	movs	r3, r0
 800665c:	b29a      	uxth	r2, r3
 800665e:	193b      	adds	r3, r7, r4
 8006660:	0011      	movs	r1, r2
 8006662:	0018      	movs	r0, r3
 8006664:	f018 fe54 	bl	801f310 <CDC_Transmit_FS>
}
 8006668:	46c0      	nop			@ (mov r8, r8)
 800666a:	46bd      	mov	sp, r7
 800666c:	b029      	add	sp, #164	@ 0xa4
 800666e:	bc90      	pop	{r4, r7}
 8006670:	bc08      	pop	{r3}
 8006672:	b004      	add	sp, #16
 8006674:	4718      	bx	r3

08006676 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	000a      	movs	r2, r1
 8006680:	1cfb      	adds	r3, r7, #3
 8006682:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8006684:	1cfb      	adds	r3, r7, #3
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d004      	beq.n	8006696 <PC_selectout+0x20>
    printf_USB(msg);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	0018      	movs	r0, r3
 8006690:	f7ff ffcc 	bl	800662c <printf_USB>
 8006694:	e003      	b.n	800669e <PC_selectout+0x28>
  }
  else {
    printf(msg);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	0018      	movs	r0, r3
 800669a:	f01b fed7 	bl	802244c <iprintf>
  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 800669e:	200a      	movs	r0, #10
 80066a0:	f00a fba2 	bl	8010de8 <HAL_Delay>
}
 80066a4:	46c0      	nop			@ (mov r8, r8)
 80066a6:	46bd      	mov	sp, r7
 80066a8:	b002      	add	sp, #8
 80066aa:	bd80      	pop	{r7, pc}

080066ac <PC_show_Keys>:

void PC_show_Keys() {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];

  static char Buffer[25];
  static char msg[64];
  if(Check_USB_PowerOn()){
 80066b0:	f000 fbb8 	bl	8006e24 <Check_USB_PowerOn>
 80066b4:	1e03      	subs	r3, r0, #0
 80066b6:	d003      	beq.n	80066c0 <PC_show_Keys+0x14>
    usb_out = true;
 80066b8:	4bbb      	ldr	r3, [pc, #748]	@ (80069a8 <PC_show_Keys+0x2fc>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	e002      	b.n	80066c6 <PC_show_Keys+0x1a>
  }
  else {
    usb_out = false;
 80066c0:	4bb9      	ldr	r3, [pc, #740]	@ (80069a8 <PC_show_Keys+0x2fc>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 80066c6:	4ab9      	ldr	r2, [pc, #740]	@ (80069ac <PC_show_Keys+0x300>)
 80066c8:	4bb9      	ldr	r3, [pc, #740]	@ (80069b0 <PC_show_Keys+0x304>)
 80066ca:	0011      	movs	r1, r2
 80066cc:	0018      	movs	r0, r3
 80066ce:	f01b ff2d 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80066d2:	4bb5      	ldr	r3, [pc, #724]	@ (80069a8 <PC_show_Keys+0x2fc>)
 80066d4:	781a      	ldrb	r2, [r3, #0]
 80066d6:	4bb6      	ldr	r3, [pc, #728]	@ (80069b0 <PC_show_Keys+0x304>)
 80066d8:	0011      	movs	r1, r2
 80066da:	0018      	movs	r0, r3
 80066dc:	f7ff ffcb 	bl	8006676 <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80066e0:	4bb4      	ldr	r3, [pc, #720]	@ (80069b4 <PC_show_Keys+0x308>)
 80066e2:	48b5      	ldr	r0, [pc, #724]	@ (80069b8 <PC_show_Keys+0x30c>)
 80066e4:	220c      	movs	r2, #12
 80066e6:	0019      	movs	r1, r3
 80066e8:	f002 fc2c 	bl	8008f44 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 80066ec:	4ab1      	ldr	r2, [pc, #708]	@ (80069b4 <PC_show_Keys+0x308>)
 80066ee:	4bb3      	ldr	r3, [pc, #716]	@ (80069bc <PC_show_Keys+0x310>)
 80066f0:	0011      	movs	r1, r2
 80066f2:	0018      	movs	r0, r3
 80066f4:	f7fd fb12 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "Box id ----------------------: %s\r\n", Buffer);
 80066f8:	4ab0      	ldr	r2, [pc, #704]	@ (80069bc <PC_show_Keys+0x310>)
 80066fa:	49b1      	ldr	r1, [pc, #708]	@ (80069c0 <PC_show_Keys+0x314>)
 80066fc:	4bac      	ldr	r3, [pc, #688]	@ (80069b0 <PC_show_Keys+0x304>)
 80066fe:	0018      	movs	r0, r3
 8006700:	f01b ff14 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006704:	4ba8      	ldr	r3, [pc, #672]	@ (80069a8 <PC_show_Keys+0x2fc>)
 8006706:	781a      	ldrb	r2, [r3, #0]
 8006708:	4ba9      	ldr	r3, [pc, #676]	@ (80069b0 <PC_show_Keys+0x304>)
 800670a:	0011      	movs	r1, r2
 800670c:	0018      	movs	r0, r3
 800670e:	f7ff ffb2 	bl	8006676 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8006712:	4bac      	ldr	r3, [pc, #688]	@ (80069c4 <PC_show_Keys+0x318>)
 8006714:	48ac      	ldr	r0, [pc, #688]	@ (80069c8 <PC_show_Keys+0x31c>)
 8006716:	220c      	movs	r2, #12
 8006718:	0019      	movs	r1, r3
 800671a:	f002 fc13 	bl	8008f44 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 800671e:	4aa9      	ldr	r2, [pc, #676]	@ (80069c4 <PC_show_Keys+0x318>)
 8006720:	4ba6      	ldr	r3, [pc, #664]	@ (80069bc <PC_show_Keys+0x310>)
 8006722:	0011      	movs	r1, r2
 8006724:	0018      	movs	r0, r3
 8006726:	f7fd faf9 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "1 - Temperature sensor id: --: %s\r\n", Buffer);
 800672a:	4aa4      	ldr	r2, [pc, #656]	@ (80069bc <PC_show_Keys+0x310>)
 800672c:	49a7      	ldr	r1, [pc, #668]	@ (80069cc <PC_show_Keys+0x320>)
 800672e:	4ba0      	ldr	r3, [pc, #640]	@ (80069b0 <PC_show_Keys+0x304>)
 8006730:	0018      	movs	r0, r3
 8006732:	f01b fefb 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006736:	4b9c      	ldr	r3, [pc, #624]	@ (80069a8 <PC_show_Keys+0x2fc>)
 8006738:	781a      	ldrb	r2, [r3, #0]
 800673a:	4b9d      	ldr	r3, [pc, #628]	@ (80069b0 <PC_show_Keys+0x304>)
 800673c:	0011      	movs	r1, r2
 800673e:	0018      	movs	r0, r3
 8006740:	f7ff ff99 	bl	8006676 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8006744:	4ba2      	ldr	r3, [pc, #648]	@ (80069d0 <PC_show_Keys+0x324>)
 8006746:	48a3      	ldr	r0, [pc, #652]	@ (80069d4 <PC_show_Keys+0x328>)
 8006748:	220c      	movs	r2, #12
 800674a:	0019      	movs	r1, r3
 800674c:	f002 fbfa 	bl	8008f44 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8006750:	4a9f      	ldr	r2, [pc, #636]	@ (80069d0 <PC_show_Keys+0x324>)
 8006752:	4b9a      	ldr	r3, [pc, #616]	@ (80069bc <PC_show_Keys+0x310>)
 8006754:	0011      	movs	r1, r2
 8006756:	0018      	movs	r0, r3
 8006758:	f7fd fae0 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "2 - Humidity sensor id ------: %s\r\n", Buffer);
 800675c:	4a97      	ldr	r2, [pc, #604]	@ (80069bc <PC_show_Keys+0x310>)
 800675e:	499e      	ldr	r1, [pc, #632]	@ (80069d8 <PC_show_Keys+0x32c>)
 8006760:	4b93      	ldr	r3, [pc, #588]	@ (80069b0 <PC_show_Keys+0x304>)
 8006762:	0018      	movs	r0, r3
 8006764:	f01b fee2 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006768:	4b8f      	ldr	r3, [pc, #572]	@ (80069a8 <PC_show_Keys+0x2fc>)
 800676a:	781a      	ldrb	r2, [r3, #0]
 800676c:	4b90      	ldr	r3, [pc, #576]	@ (80069b0 <PC_show_Keys+0x304>)
 800676e:	0011      	movs	r1, r2
 8006770:	0018      	movs	r0, r3
 8006772:	f7ff ff80 	bl	8006676 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8006776:	4b99      	ldr	r3, [pc, #612]	@ (80069dc <PC_show_Keys+0x330>)
 8006778:	4899      	ldr	r0, [pc, #612]	@ (80069e0 <PC_show_Keys+0x334>)
 800677a:	220c      	movs	r2, #12
 800677c:	0019      	movs	r1, r3
 800677e:	f002 fbe1 	bl	8008f44 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8006782:	4a96      	ldr	r2, [pc, #600]	@ (80069dc <PC_show_Keys+0x330>)
 8006784:	4b8d      	ldr	r3, [pc, #564]	@ (80069bc <PC_show_Keys+0x310>)
 8006786:	0011      	movs	r1, r2
 8006788:	0018      	movs	r0, r3
 800678a:	f7fd fac7 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "3 - NOx sensor id -----------: %s\r\n", Buffer);
 800678e:	4a8b      	ldr	r2, [pc, #556]	@ (80069bc <PC_show_Keys+0x310>)
 8006790:	4994      	ldr	r1, [pc, #592]	@ (80069e4 <PC_show_Keys+0x338>)
 8006792:	4b87      	ldr	r3, [pc, #540]	@ (80069b0 <PC_show_Keys+0x304>)
 8006794:	0018      	movs	r0, r3
 8006796:	f01b fec9 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800679a:	4b83      	ldr	r3, [pc, #524]	@ (80069a8 <PC_show_Keys+0x2fc>)
 800679c:	781a      	ldrb	r2, [r3, #0]
 800679e:	4b84      	ldr	r3, [pc, #528]	@ (80069b0 <PC_show_Keys+0x304>)
 80067a0:	0011      	movs	r1, r2
 80067a2:	0018      	movs	r0, r3
 80067a4:	f7ff ff67 	bl	8006676 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 80067a8:	4b8f      	ldr	r3, [pc, #572]	@ (80069e8 <PC_show_Keys+0x33c>)
 80067aa:	4890      	ldr	r0, [pc, #576]	@ (80069ec <PC_show_Keys+0x340>)
 80067ac:	220c      	movs	r2, #12
 80067ae:	0019      	movs	r1, r3
 80067b0:	f002 fbc8 	bl	8008f44 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 80067b4:	4a8c      	ldr	r2, [pc, #560]	@ (80069e8 <PC_show_Keys+0x33c>)
 80067b6:	4b81      	ldr	r3, [pc, #516]	@ (80069bc <PC_show_Keys+0x310>)
 80067b8:	0011      	movs	r1, r2
 80067ba:	0018      	movs	r0, r3
 80067bc:	f7fd faae 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "4 - VOC sensor id -----------: %s\r\n", Buffer);
 80067c0:	4a7e      	ldr	r2, [pc, #504]	@ (80069bc <PC_show_Keys+0x310>)
 80067c2:	498b      	ldr	r1, [pc, #556]	@ (80069f0 <PC_show_Keys+0x344>)
 80067c4:	4b7a      	ldr	r3, [pc, #488]	@ (80069b0 <PC_show_Keys+0x304>)
 80067c6:	0018      	movs	r0, r3
 80067c8:	f01b feb0 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80067cc:	4b76      	ldr	r3, [pc, #472]	@ (80069a8 <PC_show_Keys+0x2fc>)
 80067ce:	781a      	ldrb	r2, [r3, #0]
 80067d0:	4b77      	ldr	r3, [pc, #476]	@ (80069b0 <PC_show_Keys+0x304>)
 80067d2:	0011      	movs	r1, r2
 80067d4:	0018      	movs	r0, r3
 80067d6:	f7ff ff4e 	bl	8006676 <PC_selectout>

  ReadUint8ArrayEEprom(dBaConfigAddr, soundConfig, IdSize);
 80067da:	4b86      	ldr	r3, [pc, #536]	@ (80069f4 <PC_show_Keys+0x348>)
 80067dc:	4886      	ldr	r0, [pc, #536]	@ (80069f8 <PC_show_Keys+0x34c>)
 80067de:	220c      	movs	r2, #12
 80067e0:	0019      	movs	r1, r3
 80067e2:	f002 fbaf 	bl	8008f44 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 80067e6:	4a83      	ldr	r2, [pc, #524]	@ (80069f4 <PC_show_Keys+0x348>)
 80067e8:	4b74      	ldr	r3, [pc, #464]	@ (80069bc <PC_show_Keys+0x310>)
 80067ea:	0011      	movs	r1, r2
 80067ec:	0018      	movs	r0, r3
 80067ee:	f7fd fa95 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "5 is former dBa unused\r\n");
 80067f2:	4a82      	ldr	r2, [pc, #520]	@ (80069fc <PC_show_Keys+0x350>)
 80067f4:	4b6e      	ldr	r3, [pc, #440]	@ (80069b0 <PC_show_Keys+0x304>)
 80067f6:	0011      	movs	r1, r2
 80067f8:	0018      	movs	r0, r3
 80067fa:	f01b fe97 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80067fe:	4b6a      	ldr	r3, [pc, #424]	@ (80069a8 <PC_show_Keys+0x2fc>)
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	4b6b      	ldr	r3, [pc, #428]	@ (80069b0 <PC_show_Keys+0x304>)
 8006804:	0011      	movs	r1, r2
 8006806:	0018      	movs	r0, r3
 8006808:	f7ff ff35 	bl	8006676 <PC_selectout>
  sprintf(msg, "5 - Air pressure sensor id --: %s\r\n", Buffer);
 800680c:	4a6b      	ldr	r2, [pc, #428]	@ (80069bc <PC_show_Keys+0x310>)
 800680e:	497c      	ldr	r1, [pc, #496]	@ (8006a00 <PC_show_Keys+0x354>)
 8006810:	4b67      	ldr	r3, [pc, #412]	@ (80069b0 <PC_show_Keys+0x304>)
 8006812:	0018      	movs	r0, r3
 8006814:	f01b fe8a 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006818:	4b63      	ldr	r3, [pc, #396]	@ (80069a8 <PC_show_Keys+0x2fc>)
 800681a:	781a      	ldrb	r2, [r3, #0]
 800681c:	4b64      	ldr	r3, [pc, #400]	@ (80069b0 <PC_show_Keys+0x304>)
 800681e:	0011      	movs	r1, r2
 8006820:	0018      	movs	r0, r3
 8006822:	f7ff ff28 	bl	8006676 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8006826:	4b73      	ldr	r3, [pc, #460]	@ (80069f4 <PC_show_Keys+0x348>)
 8006828:	4876      	ldr	r0, [pc, #472]	@ (8006a04 <PC_show_Keys+0x358>)
 800682a:	220c      	movs	r2, #12
 800682c:	0019      	movs	r1, r3
 800682e:	f002 fb89 	bl	8008f44 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8006832:	4a70      	ldr	r2, [pc, #448]	@ (80069f4 <PC_show_Keys+0x348>)
 8006834:	4b61      	ldr	r3, [pc, #388]	@ (80069bc <PC_show_Keys+0x310>)
 8006836:	0011      	movs	r1, r2
 8006838:	0018      	movs	r0, r3
 800683a:	f7fd fa6f 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "6 is former dBc\r\n");
 800683e:	4a72      	ldr	r2, [pc, #456]	@ (8006a08 <PC_show_Keys+0x35c>)
 8006840:	4b5b      	ldr	r3, [pc, #364]	@ (80069b0 <PC_show_Keys+0x304>)
 8006842:	0011      	movs	r1, r2
 8006844:	0018      	movs	r0, r3
 8006846:	f01b fe71 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800684a:	4b57      	ldr	r3, [pc, #348]	@ (80069a8 <PC_show_Keys+0x2fc>)
 800684c:	781a      	ldrb	r2, [r3, #0]
 800684e:	4b58      	ldr	r3, [pc, #352]	@ (80069b0 <PC_show_Keys+0x304>)
 8006850:	0011      	movs	r1, r2
 8006852:	0018      	movs	r0, r3
 8006854:	f7ff ff0f 	bl	8006676 <PC_selectout>
  sprintf(msg, "6 - Sound dBA sensor id -----: %s\r\n", Buffer);
 8006858:	4a58      	ldr	r2, [pc, #352]	@ (80069bc <PC_show_Keys+0x310>)
 800685a:	496c      	ldr	r1, [pc, #432]	@ (8006a0c <PC_show_Keys+0x360>)
 800685c:	4b54      	ldr	r3, [pc, #336]	@ (80069b0 <PC_show_Keys+0x304>)
 800685e:	0018      	movs	r0, r3
 8006860:	f01b fe64 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006864:	4b50      	ldr	r3, [pc, #320]	@ (80069a8 <PC_show_Keys+0x2fc>)
 8006866:	781a      	ldrb	r2, [r3, #0]
 8006868:	4b51      	ldr	r3, [pc, #324]	@ (80069b0 <PC_show_Keys+0x304>)
 800686a:	0011      	movs	r1, r2
 800686c:	0018      	movs	r0, r3
 800686e:	f7ff ff02 	bl	8006676 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8006872:	4b67      	ldr	r3, [pc, #412]	@ (8006a10 <PC_show_Keys+0x364>)
 8006874:	4867      	ldr	r0, [pc, #412]	@ (8006a14 <PC_show_Keys+0x368>)
 8006876:	2220      	movs	r2, #32
 8006878:	0019      	movs	r1, r3
 800687a:	f002 fb63 	bl	8008f44 <ReadUint8ArrayEEprom>
  sprintf(msg, "7 - Stored name -------------: ");
 800687e:	4a66      	ldr	r2, [pc, #408]	@ (8006a18 <PC_show_Keys+0x36c>)
 8006880:	4b4b      	ldr	r3, [pc, #300]	@ (80069b0 <PC_show_Keys+0x304>)
 8006882:	0011      	movs	r1, r2
 8006884:	0018      	movs	r0, r3
 8006886:	f01b fe51 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800688a:	4b47      	ldr	r3, [pc, #284]	@ (80069a8 <PC_show_Keys+0x2fc>)
 800688c:	781a      	ldrb	r2, [r3, #0]
 800688e:	4b48      	ldr	r3, [pc, #288]	@ (80069b0 <PC_show_Keys+0x304>)
 8006890:	0011      	movs	r1, r2
 8006892:	0018      	movs	r0, r3
 8006894:	f7ff feef 	bl	8006676 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);
 8006898:	4a5d      	ldr	r2, [pc, #372]	@ (8006a10 <PC_show_Keys+0x364>)
 800689a:	4960      	ldr	r1, [pc, #384]	@ (8006a1c <PC_show_Keys+0x370>)
 800689c:	4b44      	ldr	r3, [pc, #272]	@ (80069b0 <PC_show_Keys+0x304>)
 800689e:	0018      	movs	r0, r3
 80068a0:	f01b fe44 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80068a4:	4b40      	ldr	r3, [pc, #256]	@ (80069a8 <PC_show_Keys+0x2fc>)
 80068a6:	781a      	ldrb	r2, [r3, #0]
 80068a8:	4b41      	ldr	r3, [pc, #260]	@ (80069b0 <PC_show_Keys+0x304>)
 80068aa:	0011      	movs	r1, r2
 80068ac:	0018      	movs	r0, r3
 80068ae:	f7ff fee2 	bl	8006676 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 80068b2:	4b5b      	ldr	r3, [pc, #364]	@ (8006a20 <PC_show_Keys+0x374>)
 80068b4:	485b      	ldr	r0, [pc, #364]	@ (8006a24 <PC_show_Keys+0x378>)
 80068b6:	220c      	movs	r2, #12
 80068b8:	0019      	movs	r1, r3
 80068ba:	f002 fb43 	bl	8008f44 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 80068be:	4a58      	ldr	r2, [pc, #352]	@ (8006a20 <PC_show_Keys+0x374>)
 80068c0:	4b3e      	ldr	r3, [pc, #248]	@ (80069bc <PC_show_Keys+0x310>)
 80068c2:	0011      	movs	r1, r2
 80068c4:	0018      	movs	r0, r3
 80068c6:	f7fd fa29 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "8 - Solar voltage sensor id -: %s\r\n", Buffer);
 80068ca:	4a3c      	ldr	r2, [pc, #240]	@ (80069bc <PC_show_Keys+0x310>)
 80068cc:	4956      	ldr	r1, [pc, #344]	@ (8006a28 <PC_show_Keys+0x37c>)
 80068ce:	4b38      	ldr	r3, [pc, #224]	@ (80069b0 <PC_show_Keys+0x304>)
 80068d0:	0018      	movs	r0, r3
 80068d2:	f01b fe2b 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80068d6:	4b34      	ldr	r3, [pc, #208]	@ (80069a8 <PC_show_Keys+0x2fc>)
 80068d8:	781a      	ldrb	r2, [r3, #0]
 80068da:	4b35      	ldr	r3, [pc, #212]	@ (80069b0 <PC_show_Keys+0x304>)
 80068dc:	0011      	movs	r1, r2
 80068de:	0018      	movs	r0, r3
 80068e0:	f7ff fec9 	bl	8006676 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 80068e4:	4b51      	ldr	r3, [pc, #324]	@ (8006a2c <PC_show_Keys+0x380>)
 80068e6:	4852      	ldr	r0, [pc, #328]	@ (8006a30 <PC_show_Keys+0x384>)
 80068e8:	220c      	movs	r2, #12
 80068ea:	0019      	movs	r1, r3
 80068ec:	f002 fb2a 	bl	8008f44 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 80068f0:	4a4e      	ldr	r2, [pc, #312]	@ (8006a2c <PC_show_Keys+0x380>)
 80068f2:	4b32      	ldr	r3, [pc, #200]	@ (80069bc <PC_show_Keys+0x310>)
 80068f4:	0011      	movs	r1, r2
 80068f6:	0018      	movs	r0, r3
 80068f8:	f7fd fa10 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "9 - Battery voltage sensor id: %s\r\n", Buffer);
 80068fc:	4a2f      	ldr	r2, [pc, #188]	@ (80069bc <PC_show_Keys+0x310>)
 80068fe:	494d      	ldr	r1, [pc, #308]	@ (8006a34 <PC_show_Keys+0x388>)
 8006900:	4b2b      	ldr	r3, [pc, #172]	@ (80069b0 <PC_show_Keys+0x304>)
 8006902:	0018      	movs	r0, r3
 8006904:	f01b fe12 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006908:	4b27      	ldr	r3, [pc, #156]	@ (80069a8 <PC_show_Keys+0x2fc>)
 800690a:	781a      	ldrb	r2, [r3, #0]
 800690c:	4b28      	ldr	r3, [pc, #160]	@ (80069b0 <PC_show_Keys+0x304>)
 800690e:	0011      	movs	r1, r2
 8006910:	0018      	movs	r0, r3
 8006912:	f7ff feb0 	bl	8006676 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8006916:	4b48      	ldr	r3, [pc, #288]	@ (8006a38 <PC_show_Keys+0x38c>)
 8006918:	4848      	ldr	r0, [pc, #288]	@ (8006a3c <PC_show_Keys+0x390>)
 800691a:	220c      	movs	r2, #12
 800691c:	0019      	movs	r1, r3
 800691e:	f002 fb11 	bl	8008f44 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8006922:	4a45      	ldr	r2, [pc, #276]	@ (8006a38 <PC_show_Keys+0x38c>)
 8006924:	4b25      	ldr	r3, [pc, #148]	@ (80069bc <PC_show_Keys+0x310>)
 8006926:	0011      	movs	r1, r2
 8006928:	0018      	movs	r0, r3
 800692a:	f7fd f9f7 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, ": - PM10 sensor id ----------: %s\r\n", Buffer);
 800692e:	4a23      	ldr	r2, [pc, #140]	@ (80069bc <PC_show_Keys+0x310>)
 8006930:	4943      	ldr	r1, [pc, #268]	@ (8006a40 <PC_show_Keys+0x394>)
 8006932:	4b1f      	ldr	r3, [pc, #124]	@ (80069b0 <PC_show_Keys+0x304>)
 8006934:	0018      	movs	r0, r3
 8006936:	f01b fdf9 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800693a:	4b1b      	ldr	r3, [pc, #108]	@ (80069a8 <PC_show_Keys+0x2fc>)
 800693c:	781a      	ldrb	r2, [r3, #0]
 800693e:	4b1c      	ldr	r3, [pc, #112]	@ (80069b0 <PC_show_Keys+0x304>)
 8006940:	0011      	movs	r1, r2
 8006942:	0018      	movs	r0, r3
 8006944:	f7ff fe97 	bl	8006676 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8006948:	4b3e      	ldr	r3, [pc, #248]	@ (8006a44 <PC_show_Keys+0x398>)
 800694a:	483f      	ldr	r0, [pc, #252]	@ (8006a48 <PC_show_Keys+0x39c>)
 800694c:	220c      	movs	r2, #12
 800694e:	0019      	movs	r1, r3
 8006950:	f002 faf8 	bl	8008f44 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8006954:	4a3b      	ldr	r2, [pc, #236]	@ (8006a44 <PC_show_Keys+0x398>)
 8006956:	4b19      	ldr	r3, [pc, #100]	@ (80069bc <PC_show_Keys+0x310>)
 8006958:	0011      	movs	r1, r2
 800695a:	0018      	movs	r0, r3
 800695c:	f7fd f9de 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "; - PM2p5 sensor id ---------: %s\r\n", Buffer);
 8006960:	4a16      	ldr	r2, [pc, #88]	@ (80069bc <PC_show_Keys+0x310>)
 8006962:	493a      	ldr	r1, [pc, #232]	@ (8006a4c <PC_show_Keys+0x3a0>)
 8006964:	4b12      	ldr	r3, [pc, #72]	@ (80069b0 <PC_show_Keys+0x304>)
 8006966:	0018      	movs	r0, r3
 8006968:	f01b fde0 	bl	802252c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800696c:	4b0e      	ldr	r3, [pc, #56]	@ (80069a8 <PC_show_Keys+0x2fc>)
 800696e:	781a      	ldrb	r2, [r3, #0]
 8006970:	4b0f      	ldr	r3, [pc, #60]	@ (80069b0 <PC_show_Keys+0x304>)
 8006972:	0011      	movs	r1, r2
 8006974:	0018      	movs	r0, r3
 8006976:	f7ff fe7e 	bl	8006676 <PC_selectout>

  printf_USB("\r\nOnly the last two nibbles are necessary.\r\n");
 800697a:	4b35      	ldr	r3, [pc, #212]	@ (8006a50 <PC_show_Keys+0x3a4>)
 800697c:	0018      	movs	r0, r3
 800697e:	f7ff fe55 	bl	800662c <printf_USB>

  printf_USB("Command example for air pressure => #5,6a\r\n");
 8006982:	4b34      	ldr	r3, [pc, #208]	@ (8006a54 <PC_show_Keys+0x3a8>)
 8006984:	0018      	movs	r0, r3
 8006986:	f7ff fe51 	bl	800662c <printf_USB>

  if (!usb_out) {
 800698a:	4b07      	ldr	r3, [pc, #28]	@ (80069a8 <PC_show_Keys+0x2fc>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2201      	movs	r2, #1
 8006990:	4053      	eors	r3, r2
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <PC_show_Keys+0x2f4>
    printf("A key can only be changed via USB input.\r\n");
 8006998:	4b2f      	ldr	r3, [pc, #188]	@ (8006a58 <PC_show_Keys+0x3ac>)
 800699a:	0018      	movs	r0, r3
 800699c:	f01b fdbc 	bl	8022518 <puts>
  }
}
 80069a0:	46c0      	nop			@ (mov r8, r8)
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	46c0      	nop			@ (mov r8, r8)
 80069a8:	2000098d 	.word	0x2000098d
 80069ac:	080264fc 	.word	0x080264fc
 80069b0:	20000990 	.word	0x20000990
 80069b4:	200009d0 	.word	0x200009d0
 80069b8:	08080000 	.word	0x08080000
 80069bc:	200009dc 	.word	0x200009dc
 80069c0:	08026518 	.word	0x08026518
 80069c4:	200009f8 	.word	0x200009f8
 80069c8:	0808000c 	.word	0x0808000c
 80069cc:	0802653c 	.word	0x0802653c
 80069d0:	20000a04 	.word	0x20000a04
 80069d4:	08080018 	.word	0x08080018
 80069d8:	08026560 	.word	0x08026560
 80069dc:	20000a10 	.word	0x20000a10
 80069e0:	08080024 	.word	0x08080024
 80069e4:	08026584 	.word	0x08026584
 80069e8:	20000a1c 	.word	0x20000a1c
 80069ec:	08080030 	.word	0x08080030
 80069f0:	080265a8 	.word	0x080265a8
 80069f4:	20000a28 	.word	0x20000a28
 80069f8:	0808003c 	.word	0x0808003c
 80069fc:	080265cc 	.word	0x080265cc
 8006a00:	080265e8 	.word	0x080265e8
 8006a04:	08080048 	.word	0x08080048
 8006a08:	0802660c 	.word	0x0802660c
 8006a0c:	08026620 	.word	0x08026620
 8006a10:	20000a34 	.word	0x20000a34
 8006a14:	08080090 	.word	0x08080090
 8006a18:	08026644 	.word	0x08026644
 8006a1c:	08026664 	.word	0x08026664
 8006a20:	20000a54 	.word	0x20000a54
 8006a24:	08080078 	.word	0x08080078
 8006a28:	0802666c 	.word	0x0802666c
 8006a2c:	20000a60 	.word	0x20000a60
 8006a30:	0808006c 	.word	0x0808006c
 8006a34:	08026690 	.word	0x08026690
 8006a38:	20000a6c 	.word	0x20000a6c
 8006a3c:	08080060 	.word	0x08080060
 8006a40:	080266b4 	.word	0x080266b4
 8006a44:	20000a78 	.word	0x20000a78
 8006a48:	08080054 	.word	0x08080054
 8006a4c:	080266d8 	.word	0x080266d8
 8006a50:	080266fc 	.word	0x080266fc
 8006a54:	0802672c 	.word	0x0802672c
 8006a58:	08026758 	.word	0x08026758

08006a5c <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8006a5c:	b590      	push	{r4, r7, lr}
 8006a5e:	b0c5      	sub	sp, #276	@ 0x114
 8006a60:	af3e      	add	r7, sp, #248	@ 0xf8
 8006a62:	6078      	str	r0, [r7, #4]
  static uint8_t boxConfig[IdSize];
  uint32_t length = GetUsbRxDataSize();
 8006a64:	f018 fcae 	bl	801f3c4 <GetUsbRxDataSize>
 8006a68:	0003      	movs	r3, r0
 8006a6a:	613b      	str	r3, [r7, #16]
  static char Buffer[25];
  if (length > 5) {  //#2,34
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2b05      	cmp	r3, #5
 8006a70:	d800      	bhi.n	8006a74 <Process_USB_input+0x18>
 8006a72:	e0f1      	b.n	8006c58 <Process_USB_input+0x1fc>
    printf_USB("USB input: %s\r\n", (const char*)data);
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	4b84      	ldr	r3, [pc, #528]	@ (8006c88 <Process_USB_input+0x22c>)
 8006a78:	0011      	movs	r1, r2
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f7ff fdd6 	bl	800662c <printf_USB>
    uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);  // zoek op #
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2123      	movs	r1, #35	@ 0x23
 8006a84:	0018      	movs	r0, r3
 8006a86:	f01b febf 	bl	8022808 <strchr>
 8006a8a:	0003      	movs	r3, r0
 8006a8c:	60fb      	str	r3, [r7, #12]
    if(message != NULL) {
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d100      	bne.n	8006a96 <Process_USB_input+0x3a>
 8006a94:	e0c6      	b.n	8006c24 <Process_USB_input+0x1c8>
      received.Command = (message[1] & 0x0F);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	220f      	movs	r2, #15
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	4b7a      	ldr	r3, [pc, #488]	@ (8006c8c <Process_USB_input+0x230>)
 8006aa4:	701a      	strb	r2, [r3, #0]
      if (message[2] == ',') {
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3302      	adds	r3, #2
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b2c      	cmp	r3, #44	@ 0x2c
 8006aae:	d000      	beq.n	8006ab2 <Process_USB_input+0x56>
 8006ab0:	e0b1      	b.n	8006c16 <Process_USB_input+0x1ba>
        for (uint8_t i=3; i < 5; i++) {
 8006ab2:	2317      	movs	r3, #23
 8006ab4:	18fb      	adds	r3, r7, r3
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	e061      	b.n	8006b80 <Process_USB_input+0x124>
          if (isxdigit(message[i])) {
 8006abc:	2117      	movs	r1, #23
 8006abe:	187b      	adds	r3, r7, r1
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	18d3      	adds	r3, r2, r3
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	4b71      	ldr	r3, [pc, #452]	@ (8006c90 <Process_USB_input+0x234>)
 8006acc:	18d3      	adds	r3, r2, r3
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	001a      	movs	r2, r3
 8006ad2:	2344      	movs	r3, #68	@ 0x44
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	d03f      	beq.n	8006b58 <Process_USB_input+0xfc>
            result = (result << 4) | (isdigit(message[i]) ? message[i] - '0' : toupper(message[i]) - 'A' + 10);
 8006ad8:	4b6e      	ldr	r3, [pc, #440]	@ (8006c94 <Process_USB_input+0x238>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	011b      	lsls	r3, r3, #4
 8006ade:	b25a      	sxtb	r2, r3
 8006ae0:	0008      	movs	r0, r1
 8006ae2:	187b      	adds	r3, r7, r1
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	68f9      	ldr	r1, [r7, #12]
 8006ae8:	18cb      	adds	r3, r1, r3
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	1c59      	adds	r1, r3, #1
 8006aee:	4b68      	ldr	r3, [pc, #416]	@ (8006c90 <Process_USB_input+0x234>)
 8006af0:	18cb      	adds	r3, r1, r3
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	0019      	movs	r1, r3
 8006af6:	2304      	movs	r3, #4
 8006af8:	400b      	ands	r3, r1
 8006afa:	d008      	beq.n	8006b0e <Process_USB_input+0xb2>
 8006afc:	183b      	adds	r3, r7, r0
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	68f9      	ldr	r1, [r7, #12]
 8006b02:	18cb      	adds	r3, r1, r3
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	3b30      	subs	r3, #48	@ 0x30
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	b25b      	sxtb	r3, r3
 8006b0c:	e01e      	b.n	8006b4c <Process_USB_input+0xf0>
 8006b0e:	2317      	movs	r3, #23
 8006b10:	18fb      	adds	r3, r7, r3
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	68f9      	ldr	r1, [r7, #12]
 8006b16:	18c9      	adds	r1, r1, r3
 8006b18:	200b      	movs	r0, #11
 8006b1a:	183b      	adds	r3, r7, r0
 8006b1c:	7809      	ldrb	r1, [r1, #0]
 8006b1e:	7019      	strb	r1, [r3, #0]
 8006b20:	183b      	adds	r3, r7, r0
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	1c59      	adds	r1, r3, #1
 8006b26:	4b5a      	ldr	r3, [pc, #360]	@ (8006c90 <Process_USB_input+0x234>)
 8006b28:	18cb      	adds	r3, r1, r3
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	0019      	movs	r1, r3
 8006b2e:	2303      	movs	r3, #3
 8006b30:	400b      	ands	r3, r1
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d103      	bne.n	8006b3e <Process_USB_input+0xe2>
 8006b36:	183b      	adds	r3, r7, r0
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	3b20      	subs	r3, #32
 8006b3c:	e002      	b.n	8006b44 <Process_USB_input+0xe8>
 8006b3e:	230b      	movs	r3, #11
 8006b40:	18fb      	adds	r3, r7, r3
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	3b37      	subs	r3, #55	@ 0x37
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	b25b      	sxtb	r3, r3
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	b25b      	sxtb	r3, r3
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	4b50      	ldr	r3, [pc, #320]	@ (8006c94 <Process_USB_input+0x238>)
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	e00d      	b.n	8006b74 <Process_USB_input+0x118>
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c'\r\n", message[i]);
 8006b58:	2317      	movs	r3, #23
 8006b5a:	18fb      	adds	r3, r7, r3
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	18d3      	adds	r3, r2, r3
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	001a      	movs	r2, r3
 8006b66:	4b4c      	ldr	r3, [pc, #304]	@ (8006c98 <Process_USB_input+0x23c>)
 8006b68:	0011      	movs	r1, r2
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	f7ff fd5e 	bl	800662c <printf_USB>
            return false; // Of een andere foutwaarde
 8006b70:	2300      	movs	r3, #0
 8006b72:	e084      	b.n	8006c7e <Process_USB_input+0x222>
        for (uint8_t i=3; i < 5; i++) {
 8006b74:	2117      	movs	r1, #23
 8006b76:	187b      	adds	r3, r7, r1
 8006b78:	781a      	ldrb	r2, [r3, #0]
 8006b7a:	187b      	adds	r3, r7, r1
 8006b7c:	3201      	adds	r2, #1
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	2317      	movs	r3, #23
 8006b82:	18fb      	adds	r3, r7, r3
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d998      	bls.n	8006abc <Process_USB_input+0x60>
          }
        }
        ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006b8a:	4b44      	ldr	r3, [pc, #272]	@ (8006c9c <Process_USB_input+0x240>)
 8006b8c:	4844      	ldr	r0, [pc, #272]	@ (8006ca0 <Process_USB_input+0x244>)
 8006b8e:	220c      	movs	r2, #12
 8006b90:	0019      	movs	r1, r3
 8006b92:	f002 f9d7 	bl	8008f44 <ReadUint8ArrayEEprom>
        boxConfig[11] = result; //overwrite the last byte
 8006b96:	4b3f      	ldr	r3, [pc, #252]	@ (8006c94 <Process_USB_input+0x238>)
 8006b98:	781a      	ldrb	r2, [r3, #0]
 8006b9a:	4b40      	ldr	r3, [pc, #256]	@ (8006c9c <Process_USB_input+0x240>)
 8006b9c:	72da      	strb	r2, [r3, #11]
        memcpy(received.Payload, boxConfig, IdSize);
 8006b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8006c8c <Process_USB_input+0x230>)
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	493e      	ldr	r1, [pc, #248]	@ (8006c9c <Process_USB_input+0x240>)
 8006ba4:	189b      	adds	r3, r3, r2
 8006ba6:	220c      	movs	r2, #12
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f01b ff01 	bl	80229b0 <memcpy>
        received.PayloadLength = IdSize;
 8006bae:	4b37      	ldr	r3, [pc, #220]	@ (8006c8c <Process_USB_input+0x230>)
 8006bb0:	220c      	movs	r2, #12
 8006bb2:	705a      	strb	r2, [r3, #1]
        uint8ArrayToString(Buffer, received.Payload);
 8006bb4:	4a3b      	ldr	r2, [pc, #236]	@ (8006ca4 <Process_USB_input+0x248>)
 8006bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8006ca8 <Process_USB_input+0x24c>)
 8006bb8:	0011      	movs	r1, r2
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f7fd f8ae 	bl	8003d1c <uint8ArrayToString>
        ProcessCmd(received);
 8006bc0:	4c32      	ldr	r4, [pc, #200]	@ (8006c8c <Process_USB_input+0x230>)
 8006bc2:	466b      	mov	r3, sp
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	0023      	movs	r3, r4
 8006bc8:	3310      	adds	r3, #16
 8006bca:	22f4      	movs	r2, #244	@ 0xf4
 8006bcc:	0019      	movs	r1, r3
 8006bce:	f01b feef 	bl	80229b0 <memcpy>
 8006bd2:	6820      	ldr	r0, [r4, #0]
 8006bd4:	6861      	ldr	r1, [r4, #4]
 8006bd6:	68a2      	ldr	r2, [r4, #8]
 8006bd8:	68e3      	ldr	r3, [r4, #12]
 8006bda:	f7ff fb99 	bl	8006310 <ProcessCmd>
        ResetUsbRxDataSize();
 8006bde:	f018 fbd9 	bl	801f394 <ResetUsbRxDataSize>
        PC_show_Keys();
 8006be2:	f7ff fd63 	bl	80066ac <PC_show_Keys>
        for (uint8_t i=0; i < 8; i++) {
 8006be6:	2316      	movs	r3, #22
 8006be8:	18fb      	adds	r3, r7, r3
 8006bea:	2200      	movs	r2, #0
 8006bec:	701a      	strb	r2, [r3, #0]
 8006bee:	e00b      	b.n	8006c08 <Process_USB_input+0x1ac>
          data[i] = '\0';
 8006bf0:	2116      	movs	r1, #22
 8006bf2:	187b      	adds	r3, r7, r1
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	18d3      	adds	r3, r2, r3
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 8; i++) {
 8006bfe:	187b      	adds	r3, r7, r1
 8006c00:	781a      	ldrb	r2, [r3, #0]
 8006c02:	187b      	adds	r3, r7, r1
 8006c04:	3201      	adds	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	2316      	movs	r3, #22
 8006c0a:	18fb      	adds	r3, r7, r3
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b07      	cmp	r3, #7
 8006c10:	d9ee      	bls.n	8006bf0 <Process_USB_input+0x194>
        }
        return true;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e033      	b.n	8006c7e <Process_USB_input+0x222>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 8006c16:	4b25      	ldr	r3, [pc, #148]	@ (8006cac <Process_USB_input+0x250>)
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f7ff fd07 	bl	800662c <printf_USB>
        ResetUsbRxDataSize();
 8006c1e:	f018 fbb9 	bl	801f394 <ResetUsbRxDataSize>
 8006c22:	e003      	b.n	8006c2c <Process_USB_input+0x1d0>
      }
    }
    else {
      PC_show_Keys();
 8006c24:	f7ff fd42 	bl	80066ac <PC_show_Keys>
      ResetUsbRxDataSize();
 8006c28:	f018 fbb4 	bl	801f394 <ResetUsbRxDataSize>
    }
    for (uint8_t i=0; i < 8; i++) {
 8006c2c:	2315      	movs	r3, #21
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	2200      	movs	r2, #0
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	e00b      	b.n	8006c4e <Process_USB_input+0x1f2>
      data[i] = '\0';
 8006c36:	2115      	movs	r1, #21
 8006c38:	187b      	adds	r3, r7, r1
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	18d3      	adds	r3, r2, r3
 8006c40:	2200      	movs	r2, #0
 8006c42:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 8; i++) {
 8006c44:	187b      	adds	r3, r7, r1
 8006c46:	781a      	ldrb	r2, [r3, #0]
 8006c48:	187b      	adds	r3, r7, r1
 8006c4a:	3201      	adds	r2, #1
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	2315      	movs	r3, #21
 8006c50:	18fb      	adds	r3, r7, r3
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b07      	cmp	r3, #7
 8006c56:	d9ee      	bls.n	8006c36 <Process_USB_input+0x1da>
    }

  }
  if (formerlength != length) {
 8006c58:	4b15      	ldr	r3, [pc, #84]	@ (8006cb0 <Process_USB_input+0x254>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d008      	beq.n	8006c74 <Process_USB_input+0x218>
    printf_USB("USB input: %s\r", (const char*)data);
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	4b13      	ldr	r3, [pc, #76]	@ (8006cb4 <Process_USB_input+0x258>)
 8006c66:	0011      	movs	r1, r2
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f7ff fcdf 	bl	800662c <printf_USB>
    formerlength = length;
 8006c6e:	4b10      	ldr	r3, [pc, #64]	@ (8006cb0 <Process_USB_input+0x254>)
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	0018      	movs	r0, r3
 8006c78:	f018 fbae 	bl	801f3d8 <GetUsbRxNextChunk>

  return false;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	0018      	movs	r0, r3
 8006c80:	46bd      	mov	sp, r7
 8006c82:	b007      	add	sp, #28
 8006c84:	bd90      	pop	{r4, r7, pc}
 8006c86:	46c0      	nop			@ (mov r8, r8)
 8006c88:	08026784 	.word	0x08026784
 8006c8c:	2000077c 	.word	0x2000077c
 8006c90:	08029078 	.word	0x08029078
 8006c94:	20000880 	.word	0x20000880
 8006c98:	08026794 	.word	0x08026794
 8006c9c:	20000a84 	.word	0x20000a84
 8006ca0:	08080000 	.word	0x08080000
 8006ca4:	2000077e 	.word	0x2000077e
 8006ca8:	20000a90 	.word	0x20000a90
 8006cac:	080267bc 	.word	0x080267bc
 8006cb0:	20000884 	.word	0x20000884
 8006cb4:	080267e8 	.word	0x080267e8

08006cb8 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8006cbc:	4b26      	ldr	r3, [pc, #152]	@ (8006d58 <ReadBatteryVoltage+0xa0>)
 8006cbe:	4a27      	ldr	r2, [pc, #156]	@ (8006d5c <ReadBatteryVoltage+0xa4>)
 8006cc0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006cc2:	4b25      	ldr	r3, [pc, #148]	@ (8006d58 <ReadBatteryVoltage+0xa0>)
 8006cc4:	2280      	movs	r2, #128	@ 0x80
 8006cc6:	0152      	lsls	r2, r2, #5
 8006cc8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006cca:	4a23      	ldr	r2, [pc, #140]	@ (8006d58 <ReadBatteryVoltage+0xa0>)
 8006ccc:	4b24      	ldr	r3, [pc, #144]	@ (8006d60 <ReadBatteryVoltage+0xa8>)
 8006cce:	0011      	movs	r1, r2
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f00a fb57 	bl	8011384 <HAL_ADC_ConfigChannel>
 8006cd6:	1e03      	subs	r3, r0, #0
 8006cd8:	d001      	beq.n	8006cde <ReadBatteryVoltage+0x26>
    Error_Handler();
 8006cda:	f003 f9d3 	bl	800a084 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006cde:	4b20      	ldr	r3, [pc, #128]	@ (8006d60 <ReadBatteryVoltage+0xa8>)
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f00a fa53 	bl	801118c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d60 <ReadBatteryVoltage+0xa8>)
 8006ce8:	2101      	movs	r1, #1
 8006cea:	0018      	movs	r0, r3
 8006cec:	f00a faa2 	bl	8011234 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8006d60 <ReadBatteryVoltage+0xa8>)
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f00a fb3a 	bl	801136c <HAL_ADC_GetValue>
 8006cf8:	0002      	movs	r2, r0
 8006cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8006d64 <ReadBatteryVoltage+0xac>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4353      	muls	r3, r2
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	4919      	ldr	r1, [pc, #100]	@ (8006d68 <ReadBatteryVoltage+0xb0>)
 8006d04:	0018      	movs	r0, r3
 8006d06:	f7f9 fa4d 	bl	80001a4 <__udivsi3>
 8006d0a:	0003      	movs	r3, r0
 8006d0c:	001a      	movs	r2, r3
 8006d0e:	4b17      	ldr	r3, [pc, #92]	@ (8006d6c <ReadBatteryVoltage+0xb4>)
 8006d10:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006d12:	4b16      	ldr	r3, [pc, #88]	@ (8006d6c <ReadBatteryVoltage+0xb4>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	0018      	movs	r0, r3
 8006d18:	f7fa fca6 	bl	8001668 <__aeabi_ui2f>
 8006d1c:	1c03      	adds	r3, r0, #0
 8006d1e:	4914      	ldr	r1, [pc, #80]	@ (8006d70 <ReadBatteryVoltage+0xb8>)
 8006d20:	1c18      	adds	r0, r3, #0
 8006d22:	f7f9 ff57 	bl	8000bd4 <__aeabi_fdiv>
 8006d26:	1c03      	adds	r3, r0, #0
 8006d28:	1c1a      	adds	r2, r3, #0
 8006d2a:	4b12      	ldr	r3, [pc, #72]	@ (8006d74 <ReadBatteryVoltage+0xbc>)
 8006d2c:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d58 <ReadBatteryVoltage+0xa0>)
 8006d30:	4a0a      	ldr	r2, [pc, #40]	@ (8006d5c <ReadBatteryVoltage+0xa4>)
 8006d32:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006d34:	4b08      	ldr	r3, [pc, #32]	@ (8006d58 <ReadBatteryVoltage+0xa0>)
 8006d36:	4a10      	ldr	r2, [pc, #64]	@ (8006d78 <ReadBatteryVoltage+0xc0>)
 8006d38:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006d3a:	4a07      	ldr	r2, [pc, #28]	@ (8006d58 <ReadBatteryVoltage+0xa0>)
 8006d3c:	4b08      	ldr	r3, [pc, #32]	@ (8006d60 <ReadBatteryVoltage+0xa8>)
 8006d3e:	0011      	movs	r1, r2
 8006d40:	0018      	movs	r0, r3
 8006d42:	f00a fb1f 	bl	8011384 <HAL_ADC_ConfigChannel>
 8006d46:	1e03      	subs	r3, r0, #0
 8006d48:	d001      	beq.n	8006d4e <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006d4a:	f003 f99b 	bl	800a084 <Error_Handler>
  }
  return trueValue;
 8006d4e:	4b09      	ldr	r3, [pc, #36]	@ (8006d74 <ReadBatteryVoltage+0xbc>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 }
 8006d52:	1c18      	adds	r0, r3, #0
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20000aac 	.word	0x20000aac
 8006d5c:	38004000 	.word	0x38004000
 8006d60:	20000ae8 	.word	0x20000ae8
 8006d64:	20000030 	.word	0x20000030
 8006d68:	00000fff 	.word	0x00000fff
 8006d6c:	20000ab4 	.word	0x20000ab4
 8006d70:	447a0000 	.word	0x447a0000
 8006d74:	20000ab8 	.word	0x20000ab8
 8006d78:	00001001 	.word	0x00001001

08006d7c <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8006d80:	4b21      	ldr	r3, [pc, #132]	@ (8006e08 <ReadSolarVoltage+0x8c>)
 8006d82:	4a22      	ldr	r2, [pc, #136]	@ (8006e0c <ReadSolarVoltage+0x90>)
 8006d84:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006d86:	4b20      	ldr	r3, [pc, #128]	@ (8006e08 <ReadSolarVoltage+0x8c>)
 8006d88:	2280      	movs	r2, #128	@ 0x80
 8006d8a:	0152      	lsls	r2, r2, #5
 8006d8c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006e08 <ReadSolarVoltage+0x8c>)
 8006d90:	4b1f      	ldr	r3, [pc, #124]	@ (8006e10 <ReadSolarVoltage+0x94>)
 8006d92:	0011      	movs	r1, r2
 8006d94:	0018      	movs	r0, r3
 8006d96:	f00a faf5 	bl	8011384 <HAL_ADC_ConfigChannel>
 8006d9a:	1e03      	subs	r3, r0, #0
 8006d9c:	d001      	beq.n	8006da2 <ReadSolarVoltage+0x26>
    Error_Handler();
 8006d9e:	f003 f971 	bl	800a084 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006da2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e10 <ReadSolarVoltage+0x94>)
 8006da4:	0018      	movs	r0, r3
 8006da6:	f00a f9f1 	bl	801118c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006daa:	4b19      	ldr	r3, [pc, #100]	@ (8006e10 <ReadSolarVoltage+0x94>)
 8006dac:	2101      	movs	r1, #1
 8006dae:	0018      	movs	r0, r3
 8006db0:	f00a fa40 	bl	8011234 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006db4:	4b16      	ldr	r3, [pc, #88]	@ (8006e10 <ReadSolarVoltage+0x94>)
 8006db6:	0018      	movs	r0, r3
 8006db8:	f00a fad8 	bl	801136c <HAL_ADC_GetValue>
 8006dbc:	0002      	movs	r2, r0
 8006dbe:	4b15      	ldr	r3, [pc, #84]	@ (8006e14 <ReadSolarVoltage+0x98>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	435a      	muls	r2, r3
 8006dc4:	0013      	movs	r3, r2
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	189b      	adds	r3, r3, r2
 8006dca:	4913      	ldr	r1, [pc, #76]	@ (8006e18 <ReadSolarVoltage+0x9c>)
 8006dcc:	0018      	movs	r0, r3
 8006dce:	f7f9 f9e9 	bl	80001a4 <__udivsi3>
 8006dd2:	0003      	movs	r3, r0
 8006dd4:	001a      	movs	r2, r3
 8006dd6:	4b11      	ldr	r3, [pc, #68]	@ (8006e1c <ReadSolarVoltage+0xa0>)
 8006dd8:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8006dda:	4b0b      	ldr	r3, [pc, #44]	@ (8006e08 <ReadSolarVoltage+0x8c>)
 8006ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8006e0c <ReadSolarVoltage+0x90>)
 8006dde:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006de0:	4b09      	ldr	r3, [pc, #36]	@ (8006e08 <ReadSolarVoltage+0x8c>)
 8006de2:	4a0f      	ldr	r2, [pc, #60]	@ (8006e20 <ReadSolarVoltage+0xa4>)
 8006de4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006de6:	4a08      	ldr	r2, [pc, #32]	@ (8006e08 <ReadSolarVoltage+0x8c>)
 8006de8:	4b09      	ldr	r3, [pc, #36]	@ (8006e10 <ReadSolarVoltage+0x94>)
 8006dea:	0011      	movs	r1, r2
 8006dec:	0018      	movs	r0, r3
 8006dee:	f00a fac9 	bl	8011384 <HAL_ADC_ConfigChannel>
 8006df2:	1e03      	subs	r3, r0, #0
 8006df4:	d001      	beq.n	8006dfa <ReadSolarVoltage+0x7e>
    Error_Handler();
 8006df6:	f003 f945 	bl	800a084 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8006dfa:	4b08      	ldr	r3, [pc, #32]	@ (8006e1c <ReadSolarVoltage+0xa0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 }
 8006e00:	0018      	movs	r0, r3
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	46c0      	nop			@ (mov r8, r8)
 8006e08:	20000aac 	.word	0x20000aac
 8006e0c:	3c008000 	.word	0x3c008000
 8006e10:	20000ae8 	.word	0x20000ae8
 8006e14:	20000030 	.word	0x20000030
 8006e18:	00000fff 	.word	0x00000fff
 8006e1c:	20000abc 	.word	0x20000abc
 8006e20:	00001001 	.word	0x00001001

08006e24 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006e28:	23a0      	movs	r3, #160	@ 0xa0
 8006e2a:	05db      	lsls	r3, r3, #23
 8006e2c:	2180      	movs	r1, #128	@ 0x80
 8006e2e:	0018      	movs	r0, r3
 8006e30:	f00b fa44 	bl	80122bc <HAL_GPIO_ReadPin>
 8006e34:	0003      	movs	r3, r0
 8006e36:	1e5a      	subs	r2, r3, #1
 8006e38:	4193      	sbcs	r3, r2
 8006e3a:	b2db      	uxtb	r3, r3
}
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8006e42:	b580      	push	{r7, lr}
 8006e44:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006e46:	2380      	movs	r3, #128	@ 0x80
 8006e48:	021a      	lsls	r2, r3, #8
 8006e4a:	23a0      	movs	r3, #160	@ 0xa0
 8006e4c:	05db      	lsls	r3, r3, #23
 8006e4e:	0011      	movs	r1, r2
 8006e50:	0018      	movs	r0, r3
 8006e52:	f00b fa33 	bl	80122bc <HAL_GPIO_ReadPin>
 8006e56:	0003      	movs	r3, r0
 8006e58:	1e5a      	subs	r2, r3, #1
 8006e5a:	4193      	sbcs	r3, r2
 8006e5c:	b2db      	uxtb	r3, r3
}
 8006e5e:	0018      	movs	r0, r3
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8006e68:	4b05      	ldr	r3, [pc, #20]	@ (8006e80 <UserButton_Pressed+0x1c>)
 8006e6a:	2104      	movs	r1, #4
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f00b fa25 	bl	80122bc <HAL_GPIO_ReadPin>
 8006e72:	0003      	movs	r3, r0
 8006e74:	425a      	negs	r2, r3
 8006e76:	4153      	adcs	r3, r2
 8006e78:	b2db      	uxtb	r3, r3
}
 8006e7a:	0018      	movs	r0, r3
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	50000c00 	.word	0x50000c00

08006e84 <showTime>:
char strbuf[24] = {0}; //fi length -> 22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8006e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e86:	46d6      	mov	lr, sl
 8006e88:	464f      	mov	r7, r9
 8006e8a:	4646      	mov	r6, r8
 8006e8c:	b5c0      	push	{r6, r7, lr}
 8006e8e:	b08e      	sub	sp, #56	@ 0x38
 8006e90:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8006e92:	4b21      	ldr	r3, [pc, #132]	@ (8006f18 <showTime+0x94>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d036      	beq.n	8006f08 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006e9a:	003a      	movs	r2, r7
 8006e9c:	1d3b      	adds	r3, r7, #4
 8006e9e:	0011      	movs	r1, r2
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	f000 fa2b 	bl	80072fc <RTC_GetTime>
  UpdateSystemUptime();
 8006ea6:	f000 f83f 	bl	8006f28 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006eaa:	003b      	movs	r3, r7
 8006eac:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006eae:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006eb0:	003b      	movs	r3, r7
 8006eb2:	785b      	ldrb	r3, [r3, #1]
 8006eb4:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006eb6:	4b19      	ldr	r3, [pc, #100]	@ (8006f1c <showTime+0x98>)
 8006eb8:	0092      	lsls	r2, r2, #2
 8006eba:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006ebc:	003b      	movs	r3, r7
 8006ebe:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006ec0:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006ec2:	1d3b      	adds	r3, r7, #4
 8006ec4:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006ec6:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006ec8:	1d3b      	adds	r3, r7, #4
 8006eca:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006ecc:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006ece:	1d3b      	adds	r3, r7, #4
 8006ed0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006ed2:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006ed4:	4b12      	ldr	r3, [pc, #72]	@ (8006f20 <showTime+0x9c>)
 8006ed6:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006ed8:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006eda:	4b11      	ldr	r3, [pc, #68]	@ (8006f20 <showTime+0x9c>)
 8006edc:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006ede:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8006f20 <showTime+0x9c>)
 8006ee2:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006ee4:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8006f20 <showTime+0x9c>)
 8006ee8:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006eea:	480e      	ldr	r0, [pc, #56]	@ (8006f24 <showTime+0xa0>)
 8006eec:	9306      	str	r3, [sp, #24]
 8006eee:	4643      	mov	r3, r8
 8006ef0:	9305      	str	r3, [sp, #20]
 8006ef2:	4663      	mov	r3, ip
 8006ef4:	9304      	str	r3, [sp, #16]
 8006ef6:	9603      	str	r6, [sp, #12]
 8006ef8:	9502      	str	r5, [sp, #8]
 8006efa:	9401      	str	r4, [sp, #4]
 8006efc:	9100      	str	r1, [sp, #0]
 8006efe:	4653      	mov	r3, sl
 8006f00:	4649      	mov	r1, r9
 8006f02:	f01b faa3 	bl	802244c <iprintf>
 8006f06:	e000      	b.n	8006f0a <showTime+0x86>
    return;
 8006f08:	46c0      	nop			@ (mov r8, r8)
}
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	b006      	add	sp, #24
 8006f0e:	bce0      	pop	{r5, r6, r7}
 8006f10:	46ba      	mov	sl, r7
 8006f12:	46b1      	mov	r9, r6
 8006f14:	46a8      	mov	r8, r5
 8006f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f18:	20000acc 	.word	0x20000acc
 8006f1c:	20000050 	.word	0x20000050
 8006f20:	20000ac0 	.word	0x20000ac0
 8006f24:	08026844 	.word	0x08026844

08006f28 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8006f2e:	003a      	movs	r2, r7
 8006f30:	1d3b      	adds	r3, r7, #4
 8006f32:	0011      	movs	r1, r2
 8006f34:	0018      	movs	r0, r3
 8006f36:	f000 f9e1 	bl	80072fc <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8006f3a:	1d3a      	adds	r2, r7, #4
 8006f3c:	003b      	movs	r3, r7
 8006f3e:	0011      	movs	r1, r2
 8006f40:	0018      	movs	r0, r3
 8006f42:	f000 fba7 	bl	8007694 <makeTime>
 8006f46:	0002      	movs	r2, r0
 8006f48:	4b1e      	ldr	r3, [pc, #120]	@ (8006fc4 <UpdateSystemUptime+0x9c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	213c      	movs	r1, #60	@ 0x3c
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f7f9 f9a9 	bl	80002b0 <__aeabi_uidivmod>
 8006f5e:	000b      	movs	r3, r1
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	4b19      	ldr	r3, [pc, #100]	@ (8006fc8 <UpdateSystemUptime+0xa0>)
 8006f64:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	213c      	movs	r1, #60	@ 0x3c
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	f7f9 f91a 	bl	80001a4 <__udivsi3>
 8006f70:	0003      	movs	r3, r0
 8006f72:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	213c      	movs	r1, #60	@ 0x3c
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f7f9 f999 	bl	80002b0 <__aeabi_uidivmod>
 8006f7e:	000b      	movs	r3, r1
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	4b11      	ldr	r3, [pc, #68]	@ (8006fc8 <UpdateSystemUptime+0xa0>)
 8006f84:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	213c      	movs	r1, #60	@ 0x3c
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f7f9 f90a 	bl	80001a4 <__udivsi3>
 8006f90:	0003      	movs	r3, r0
 8006f92:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	2118      	movs	r1, #24
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f7f9 f989 	bl	80002b0 <__aeabi_uidivmod>
 8006f9e:	000b      	movs	r3, r1
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	4b09      	ldr	r3, [pc, #36]	@ (8006fc8 <UpdateSystemUptime+0xa0>)
 8006fa4:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2118      	movs	r1, #24
 8006faa:	0018      	movs	r0, r3
 8006fac:	f7f9 f8fa 	bl	80001a4 <__udivsi3>
 8006fb0:	0003      	movs	r3, r0
 8006fb2:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	4b03      	ldr	r3, [pc, #12]	@ (8006fc8 <UpdateSystemUptime+0xa0>)
 8006fba:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8006fbc:	46c0      	nop			@ (mov r8, r8)
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	b008      	add	sp, #32
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	20000acc 	.word	0x20000acc
 8006fc8:	20000ac0 	.word	0x20000ac0

08006fcc <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8006fcc:	b590      	push	{r4, r7, lr}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	0008      	movs	r0, r1
 8006fd6:	0011      	movs	r1, r2
 8006fd8:	1cfb      	adds	r3, r7, #3
 8006fda:	1c02      	adds	r2, r0, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	1cbb      	adds	r3, r7, #2
 8006fe0:	1c0a      	adds	r2, r1, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006fe4:	230e      	movs	r3, #14
 8006fe6:	18fb      	adds	r3, r7, r3
 8006fe8:	2200      	movs	r2, #0
 8006fea:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006fec:	230f      	movs	r3, #15
 8006fee:	18fb      	adds	r3, r7, r3
 8006ff0:	1cfa      	adds	r2, r7, #3
 8006ff2:	7812      	ldrb	r2, [r2, #0]
 8006ff4:	701a      	strb	r2, [r3, #0]
 8006ff6:	e015      	b.n	8007024 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006ff8:	200f      	movs	r0, #15
 8006ffa:	183b      	adds	r3, r7, r0
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	18d2      	adds	r2, r2, r3
 8007002:	240e      	movs	r4, #14
 8007004:	193b      	adds	r3, r7, r4
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	7811      	ldrb	r1, [r2, #0]
 800700a:	2208      	movs	r2, #8
 800700c:	18ba      	adds	r2, r7, r2
 800700e:	54d1      	strb	r1, [r2, r3]
    pos++;
 8007010:	193b      	adds	r3, r7, r4
 8007012:	781a      	ldrb	r2, [r3, #0]
 8007014:	193b      	adds	r3, r7, r4
 8007016:	3201      	adds	r2, #1
 8007018:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800701a:	183b      	adds	r3, r7, r0
 800701c:	781a      	ldrb	r2, [r3, #0]
 800701e:	183b      	adds	r3, r7, r0
 8007020:	3201      	adds	r2, #1
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	200f      	movs	r0, #15
 8007026:	183a      	adds	r2, r7, r0
 8007028:	1cbb      	adds	r3, r7, #2
 800702a:	7812      	ldrb	r2, [r2, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d9e2      	bls.n	8006ff8 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8007032:	230e      	movs	r3, #14
 8007034:	18fb      	adds	r3, r7, r3
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2208      	movs	r2, #8
 800703a:	18ba      	adds	r2, r7, r2
 800703c:	2100      	movs	r1, #0
 800703e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8007040:	1cfb      	adds	r3, r7, #3
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b13      	cmp	r3, #19
 8007046:	d849      	bhi.n	80070dc <aBuff2int+0x110>
    if (start == 17) { //month
 8007048:	1cfb      	adds	r3, r7, #3
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b11      	cmp	r3, #17
 800704e:	d122      	bne.n	8007096 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8007050:	183b      	adds	r3, r7, r0
 8007052:	2200      	movs	r2, #0
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	e018      	b.n	800708a <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8007058:	240f      	movs	r4, #15
 800705a:	193b      	adds	r3, r7, r4
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	4b25      	ldr	r3, [pc, #148]	@ (80070f4 <aBuff2int+0x128>)
 8007060:	0092      	lsls	r2, r2, #2
 8007062:	58d2      	ldr	r2, [r2, r3]
 8007064:	2308      	movs	r3, #8
 8007066:	18fb      	adds	r3, r7, r3
 8007068:	0011      	movs	r1, r2
 800706a:	0018      	movs	r0, r3
 800706c:	f7f9 f874 	bl	8000158 <strcmp>
 8007070:	1e03      	subs	r3, r0, #0
 8007072:	d104      	bne.n	800707e <aBuff2int+0xb2>
          return i+1;
 8007074:	193b      	adds	r3, r7, r4
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	3301      	adds	r3, #1
 800707a:	b2db      	uxtb	r3, r3
 800707c:	e035      	b.n	80070ea <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800707e:	210f      	movs	r1, #15
 8007080:	187b      	adds	r3, r7, r1
 8007082:	781a      	ldrb	r2, [r3, #0]
 8007084:	187b      	adds	r3, r7, r1
 8007086:	3201      	adds	r2, #1
 8007088:	701a      	strb	r2, [r3, #0]
 800708a:	230f      	movs	r3, #15
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b0b      	cmp	r3, #11
 8007092:	d9e1      	bls.n	8007058 <aBuff2int+0x8c>
 8007094:	e022      	b.n	80070dc <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8007096:	230f      	movs	r3, #15
 8007098:	18fb      	adds	r3, r7, r3
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	e018      	b.n	80070d2 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80070a0:	240f      	movs	r4, #15
 80070a2:	193b      	adds	r3, r7, r4
 80070a4:	781a      	ldrb	r2, [r3, #0]
 80070a6:	4b14      	ldr	r3, [pc, #80]	@ (80070f8 <aBuff2int+0x12c>)
 80070a8:	0092      	lsls	r2, r2, #2
 80070aa:	58d2      	ldr	r2, [r2, r3]
 80070ac:	2308      	movs	r3, #8
 80070ae:	18fb      	adds	r3, r7, r3
 80070b0:	0011      	movs	r1, r2
 80070b2:	0018      	movs	r0, r3
 80070b4:	f7f9 f850 	bl	8000158 <strcmp>
 80070b8:	1e03      	subs	r3, r0, #0
 80070ba:	d104      	bne.n	80070c6 <aBuff2int+0xfa>
          return i+1;
 80070bc:	193b      	adds	r3, r7, r4
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	3301      	adds	r3, #1
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	e011      	b.n	80070ea <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80070c6:	210f      	movs	r1, #15
 80070c8:	187b      	adds	r3, r7, r1
 80070ca:	781a      	ldrb	r2, [r3, #0]
 80070cc:	187b      	adds	r3, r7, r1
 80070ce:	3201      	adds	r2, #1
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	230f      	movs	r3, #15
 80070d4:	18fb      	adds	r3, r7, r3
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b06      	cmp	r3, #6
 80070da:	d9e1      	bls.n	80070a0 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80070dc:	2308      	movs	r3, #8
 80070de:	18fb      	adds	r3, r7, r3
 80070e0:	0018      	movs	r0, r3
 80070e2:	f019 fdd8 	bl	8020c96 <atoi>
 80070e6:	0003      	movs	r3, r0
 80070e8:	b2db      	uxtb	r3, r3
}
 80070ea:	0018      	movs	r0, r3
 80070ec:	46bd      	mov	sp, r7
 80070ee:	b005      	add	sp, #20
 80070f0:	bd90      	pop	{r4, r7, pc}
 80070f2:	46c0      	nop			@ (mov r8, r8)
 80070f4:	20000050 	.word	0x20000050
 80070f8:	20000034 	.word	0x20000034

080070fc <ParseTime>:

void ParseTime(char* buffer) {
 80070fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070fe:	b08b      	sub	sp, #44	@ 0x2c
 8007100:	af02      	add	r7, sp, #8
 8007102:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8007104:	2408      	movs	r4, #8
 8007106:	193a      	adds	r2, r7, r4
 8007108:	260c      	movs	r6, #12
 800710a:	19bb      	adds	r3, r7, r6
 800710c:	0011      	movs	r1, r2
 800710e:	0018      	movs	r0, r3
 8007110:	f000 f8f4 	bl	80072fc <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2219      	movs	r2, #25
 8007118:	2118      	movs	r1, #24
 800711a:	0018      	movs	r0, r3
 800711c:	f7ff ff56 	bl	8006fcc <aBuff2int>
 8007120:	0003      	movs	r3, r0
 8007122:	001a      	movs	r2, r3
 8007124:	19bb      	adds	r3, r7, r6
 8007126:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	221c      	movs	r2, #28
 800712c:	211b      	movs	r1, #27
 800712e:	0018      	movs	r0, r3
 8007130:	f7ff ff4c 	bl	8006fcc <aBuff2int>
 8007134:	0003      	movs	r3, r0
 8007136:	001a      	movs	r2, r3
 8007138:	19bb      	adds	r3, r7, r6
 800713a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	221f      	movs	r2, #31
 8007140:	211e      	movs	r1, #30
 8007142:	0018      	movs	r0, r3
 8007144:	f7ff ff42 	bl	8006fcc <aBuff2int>
 8007148:	0003      	movs	r3, r0
 800714a:	001a      	movs	r2, r3
 800714c:	19bb      	adds	r3, r7, r6
 800714e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2224      	movs	r2, #36	@ 0x24
 8007154:	2123      	movs	r1, #35	@ 0x23
 8007156:	0018      	movs	r0, r3
 8007158:	f7ff ff38 	bl	8006fcc <aBuff2int>
 800715c:	0003      	movs	r3, r0
 800715e:	001a      	movs	r2, r3
 8007160:	0025      	movs	r5, r4
 8007162:	197b      	adds	r3, r7, r5
 8007164:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2213      	movs	r2, #19
 800716a:	2111      	movs	r1, #17
 800716c:	0018      	movs	r0, r3
 800716e:	f7ff ff2d 	bl	8006fcc <aBuff2int>
 8007172:	0003      	movs	r3, r0
 8007174:	001a      	movs	r2, r3
 8007176:	197b      	adds	r3, r7, r5
 8007178:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2216      	movs	r2, #22
 800717e:	2115      	movs	r1, #21
 8007180:	0018      	movs	r0, r3
 8007182:	f7ff ff23 	bl	8006fcc <aBuff2int>
 8007186:	0003      	movs	r3, r0
 8007188:	001a      	movs	r2, r3
 800718a:	197b      	adds	r3, r7, r5
 800718c:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	220f      	movs	r2, #15
 8007192:	210d      	movs	r1, #13
 8007194:	0018      	movs	r0, r3
 8007196:	f7ff ff19 	bl	8006fcc <aBuff2int>
 800719a:	0003      	movs	r3, r0
 800719c:	001a      	movs	r2, r3
 800719e:	197b      	adds	r3, r7, r5
 80071a0:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80071a2:	19bb      	adds	r3, r7, r6
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	001c      	movs	r4, r3
 80071a8:	19bb      	adds	r3, r7, r6
 80071aa:	785b      	ldrb	r3, [r3, #1]
 80071ac:	0018      	movs	r0, r3
 80071ae:	19bb      	adds	r3, r7, r6
 80071b0:	789b      	ldrb	r3, [r3, #2]
 80071b2:	4a1c      	ldr	r2, [pc, #112]	@ (8007224 <ParseTime+0x128>)
 80071b4:	491c      	ldr	r1, [pc, #112]	@ (8007228 <ParseTime+0x12c>)
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	9000      	str	r0, [sp, #0]
 80071ba:	0023      	movs	r3, r4
 80071bc:	2003      	movs	r0, #3
 80071be:	f009 f9bd 	bl	801053c <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 80071c2:	197b      	adds	r3, r7, r5
 80071c4:	789b      	ldrb	r3, [r3, #2]
 80071c6:	001c      	movs	r4, r3
 80071c8:	197b      	adds	r3, r7, r5
 80071ca:	785b      	ldrb	r3, [r3, #1]
 80071cc:	0018      	movs	r0, r3
 80071ce:	197b      	adds	r3, r7, r5
 80071d0:	78db      	ldrb	r3, [r3, #3]
 80071d2:	4a16      	ldr	r2, [pc, #88]	@ (800722c <ParseTime+0x130>)
 80071d4:	4914      	ldr	r1, [pc, #80]	@ (8007228 <ParseTime+0x12c>)
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	9000      	str	r0, [sp, #0]
 80071da:	0023      	movs	r3, r4
 80071dc:	2003      	movs	r0, #3
 80071de:	f009 f9ad 	bl	801053c <CreateLine>
  RTC_SetTime(&currentTime);
 80071e2:	19bb      	adds	r3, r7, r6
 80071e4:	0018      	movs	r0, r3
 80071e6:	f000 f825 	bl	8007234 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 80071ea:	197b      	adds	r3, r7, r5
 80071ec:	0018      	movs	r0, r3
 80071ee:	f000 f847 	bl	8007280 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 80071f2:	197b      	adds	r3, r7, r5
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d101      	bne.n	80071fe <ParseTime+0x102>
    reset_fanCleaningDone();
 80071fa:	f003 ffb5 	bl	800b168 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 80071fe:	4b0c      	ldr	r3, [pc, #48]	@ (8007230 <ParseTime+0x134>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8007206:	230c      	movs	r3, #12
 8007208:	18fa      	adds	r2, r7, r3
 800720a:	2308      	movs	r3, #8
 800720c:	18fb      	adds	r3, r7, r3
 800720e:	0011      	movs	r1, r2
 8007210:	0018      	movs	r0, r3
 8007212:	f000 fa3f 	bl	8007694 <makeTime>
 8007216:	0002      	movs	r2, r0
 8007218:	4b05      	ldr	r3, [pc, #20]	@ (8007230 <ParseTime+0x134>)
 800721a:	601a      	str	r2, [r3, #0]
  }
}
 800721c:	46c0      	nop			@ (mov r8, r8)
 800721e:	46bd      	mov	sp, r7
 8007220:	b009      	add	sp, #36	@ 0x24
 8007222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007224:	0802689c 	.word	0x0802689c
 8007228:	080268d4 	.word	0x080268d4
 800722c:	080268d8 	.word	0x080268d8
 8007230:	20000acc 	.word	0x20000acc

08007234 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800724e:	4b09      	ldr	r3, [pc, #36]	@ (8007274 <RTC_SetTime+0x40>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	0018      	movs	r0, r3
 8007258:	f011 f974 	bl	8018544 <HAL_RTC_SetTime>
 800725c:	1e03      	subs	r3, r0, #0
 800725e:	d005      	beq.n	800726c <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8007260:	4a05      	ldr	r2, [pc, #20]	@ (8007278 <RTC_SetTime+0x44>)
 8007262:	4b06      	ldr	r3, [pc, #24]	@ (800727c <RTC_SetTime+0x48>)
 8007264:	0019      	movs	r1, r3
 8007266:	2001      	movs	r0, #1
 8007268:	f009 f968 	bl	801053c <CreateLine>
    }
}
 800726c:	46c0      	nop			@ (mov r8, r8)
 800726e:	46bd      	mov	sp, r7
 8007270:	b002      	add	sp, #8
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000ac8 	.word	0x20000ac8
 8007278:	0802690c 	.word	0x0802690c
 800727c:	08026928 	.word	0x08026928

08007280 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8007288:	4b16      	ldr	r3, [pc, #88]	@ (80072e4 <RTC_SetDate+0x64>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	0018      	movs	r0, r3
 8007292:	f011 fa5f 	bl	8018754 <HAL_RTC_SetDate>
 8007296:	1e03      	subs	r3, r0, #0
 8007298:	d005      	beq.n	80072a6 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800729a:	4a13      	ldr	r2, [pc, #76]	@ (80072e8 <RTC_SetDate+0x68>)
 800729c:	4b13      	ldr	r3, [pc, #76]	@ (80072ec <RTC_SetDate+0x6c>)
 800729e:	0019      	movs	r1, r3
 80072a0:	2001      	movs	r0, #1
 80072a2:	f009 f94b 	bl	801053c <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80072a6:	4b0f      	ldr	r3, [pc, #60]	@ (80072e4 <RTC_SetDate+0x64>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2101      	movs	r1, #1
 80072ac:	0018      	movs	r0, r3
 80072ae:	f011 fd97 	bl	8018de0 <HAL_RTCEx_BKUPRead>
 80072b2:	0003      	movs	r3, r0
 80072b4:	4a0e      	ldr	r2, [pc, #56]	@ (80072f0 <RTC_SetDate+0x70>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d010      	beq.n	80072dc <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 80072ba:	4a0e      	ldr	r2, [pc, #56]	@ (80072f4 <RTC_SetDate+0x74>)
 80072bc:	4b0e      	ldr	r3, [pc, #56]	@ (80072f8 <RTC_SetDate+0x78>)
 80072be:	0019      	movs	r1, r3
 80072c0:	2003      	movs	r0, #3
 80072c2:	f009 f93b 	bl	801053c <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 80072c6:	f010 f8bd 	bl	8017444 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 80072ca:	4b06      	ldr	r3, [pc, #24]	@ (80072e4 <RTC_SetDate+0x64>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a08      	ldr	r2, [pc, #32]	@ (80072f0 <RTC_SetDate+0x70>)
 80072d0:	2101      	movs	r1, #1
 80072d2:	0018      	movs	r0, r3
 80072d4:	f011 fd6c 	bl	8018db0 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 80072d8:	f010 f8c2 	bl	8017460 <HAL_PWR_DisableBkUpAccess>
    }
}
 80072dc:	46c0      	nop			@ (mov r8, r8)
 80072de:	46bd      	mov	sp, r7
 80072e0:	b002      	add	sp, #8
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20000ac8 	.word	0x20000ac8
 80072e8:	0802692c 	.word	0x0802692c
 80072ec:	08026928 	.word	0x08026928
 80072f0:	0000bebe 	.word	0x0000bebe
 80072f4:	08026948 	.word	0x08026948
 80072f8:	080268d4 	.word	0x080268d4

080072fc <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 80072fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8007306:	250f      	movs	r5, #15
 8007308:	197b      	adds	r3, r7, r5
 800730a:	2201      	movs	r2, #1
 800730c:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800730e:	230e      	movs	r3, #14
 8007310:	18fb      	adds	r3, r7, r3
 8007312:	2200      	movs	r2, #0
 8007314:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8007316:	260c      	movs	r6, #12
 8007318:	19bc      	adds	r4, r7, r6
 800731a:	f008 f9a1 	bl	800f660 <powerCheck>
 800731e:	0003      	movs	r3, r0
 8007320:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8007322:	19bb      	adds	r3, r7, r6
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d104      	bne.n	8007334 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800732a:	197b      	adds	r3, r7, r5
 800732c:	781a      	ldrb	r2, [r3, #0]
 800732e:	197b      	adds	r3, r7, r5
 8007330:	3201      	adds	r2, #1
 8007332:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8007334:	230d      	movs	r3, #13
 8007336:	18fb      	adds	r3, r7, r3
 8007338:	2200      	movs	r2, #0
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	e039      	b.n	80073b2 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800733e:	4b23      	ldr	r3, [pc, #140]	@ (80073cc <RTC_GetTime+0xd0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	0018      	movs	r0, r3
 8007348:	f011 f9a6 	bl	8018698 <HAL_RTC_GetTime>
 800734c:	1e03      	subs	r3, r0, #0
 800734e:	d005      	beq.n	800735c <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8007350:	4a1f      	ldr	r2, [pc, #124]	@ (80073d0 <RTC_GetTime+0xd4>)
 8007352:	4b20      	ldr	r3, [pc, #128]	@ (80073d4 <RTC_GetTime+0xd8>)
 8007354:	0019      	movs	r1, r3
 8007356:	2001      	movs	r0, #1
 8007358:	f009 f8f0 	bl	801053c <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800735c:	4b1b      	ldr	r3, [pc, #108]	@ (80073cc <RTC_GetTime+0xd0>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	2200      	movs	r2, #0
 8007364:	0018      	movs	r0, r3
 8007366:	f011 fa89 	bl	801887c <HAL_RTC_GetDate>
 800736a:	1e03      	subs	r3, r0, #0
 800736c:	d005      	beq.n	800737a <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 800736e:	4a1a      	ldr	r2, [pc, #104]	@ (80073d8 <RTC_GetTime+0xdc>)
 8007370:	4b18      	ldr	r3, [pc, #96]	@ (80073d4 <RTC_GetTime+0xd8>)
 8007372:	0019      	movs	r1, r3
 8007374:	2001      	movs	r0, #1
 8007376:	f009 f8e1 	bl	801053c <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 800737a:	230c      	movs	r3, #12
 800737c:	18fb      	adds	r3, r7, r3
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d110      	bne.n	80073a6 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	210e      	movs	r1, #14
 800738a:	187a      	adds	r2, r7, r1
 800738c:	7812      	ldrb	r2, [r2, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d018      	beq.n	80073c4 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8007392:	187b      	adds	r3, r7, r1
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	7812      	ldrb	r2, [r2, #0]
 8007398:	701a      	strb	r2, [r3, #0]
        t++;
 800739a:	210f      	movs	r1, #15
 800739c:	187b      	adds	r3, r7, r1
 800739e:	781a      	ldrb	r2, [r3, #0]
 80073a0:	187b      	adds	r3, r7, r1
 80073a2:	3201      	adds	r2, #1
 80073a4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80073a6:	210d      	movs	r1, #13
 80073a8:	187b      	adds	r3, r7, r1
 80073aa:	781a      	ldrb	r2, [r3, #0]
 80073ac:	187b      	adds	r3, r7, r1
 80073ae:	3201      	adds	r2, #1
 80073b0:	701a      	strb	r2, [r3, #0]
 80073b2:	230d      	movs	r3, #13
 80073b4:	18fa      	adds	r2, r7, r3
 80073b6:	230f      	movs	r3, #15
 80073b8:	18fb      	adds	r3, r7, r3
 80073ba:	7812      	ldrb	r2, [r2, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d3bd      	bcc.n	800733e <RTC_GetTime+0x42>
 80073c2:	e000      	b.n	80073c6 <RTC_GetTime+0xca>
      }
      else {
        return;
 80073c4:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 80073c6:	46bd      	mov	sp, r7
 80073c8:	b005      	add	sp, #20
 80073ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073cc:	20000ac8 	.word	0x20000ac8
 80073d0:	08026960 	.word	0x08026960
 80073d4:	08026928 	.word	0x08026928
 80073d8:	0802697c 	.word	0x0802697c

080073dc <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80073e2:	003a      	movs	r2, r7
 80073e4:	1d3b      	adds	r3, r7, #4
 80073e6:	0011      	movs	r1, r2
 80073e8:	0018      	movs	r0, r3
 80073ea:	f7ff ff87 	bl	80072fc <RTC_GetTime>
  return currentDate.WeekDay;
 80073ee:	003b      	movs	r3, r7
 80073f0:	781b      	ldrb	r3, [r3, #0]
}
 80073f2:	0018      	movs	r0, r3
 80073f4:	46bd      	mov	sp, r7
 80073f6:	b006      	add	sp, #24
 80073f8:	bd80      	pop	{r7, pc}

080073fa <getPosixTime>:

uint32_t getPosixTime(void) {
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b086      	sub	sp, #24
 80073fe:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8007400:	003a      	movs	r2, r7
 8007402:	1d3b      	adds	r3, r7, #4
 8007404:	0011      	movs	r1, r2
 8007406:	0018      	movs	r0, r3
 8007408:	f7ff ff78 	bl	80072fc <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800740c:	1d3a      	adds	r2, r7, #4
 800740e:	003b      	movs	r3, r7
 8007410:	0011      	movs	r1, r2
 8007412:	0018      	movs	r0, r3
 8007414:	f000 f93e 	bl	8007694 <makeTime>
 8007418:	0003      	movs	r3, r0
}
 800741a:	0018      	movs	r0, r3
 800741c:	46bd      	mov	sp, r7
 800741e:	b006      	add	sp, #24
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8007424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007426:	b08d      	sub	sp, #52	@ 0x34
 8007428:	af04      	add	r7, sp, #16
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800742e:	240c      	movs	r4, #12
 8007430:	193a      	adds	r2, r7, r4
 8007432:	2508      	movs	r5, #8
 8007434:	1979      	adds	r1, r7, r5
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	0018      	movs	r0, r3
 800743a:	f000 f9f5 	bl	8007828 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800743e:	002a      	movs	r2, r5
 8007440:	18bb      	adds	r3, r7, r2
 8007442:	789b      	ldrb	r3, [r3, #2]
 8007444:	001e      	movs	r6, r3
 8007446:	18bb      	adds	r3, r7, r2
 8007448:	785b      	ldrb	r3, [r3, #1]
 800744a:	469c      	mov	ip, r3
 800744c:	18bb      	adds	r3, r7, r2
 800744e:	78db      	ldrb	r3, [r3, #3]
 8007450:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8007452:	0021      	movs	r1, r4
 8007454:	187b      	adds	r3, r7, r1
 8007456:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8007458:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800745a:	187b      	adds	r3, r7, r1
 800745c:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800745e:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8007460:	187b      	adds	r3, r7, r1
 8007462:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8007464:	4906      	ldr	r1, [pc, #24]	@ (8007480 <getUTCfromPosixTime+0x5c>)
 8007466:	6838      	ldr	r0, [r7, #0]
 8007468:	9303      	str	r3, [sp, #12]
 800746a:	9502      	str	r5, [sp, #8]
 800746c:	9401      	str	r4, [sp, #4]
 800746e:	9200      	str	r2, [sp, #0]
 8007470:	4663      	mov	r3, ip
 8007472:	0032      	movs	r2, r6
 8007474:	f01b f85a 	bl	802252c <siprintf>
}
 8007478:	46c0      	nop			@ (mov r8, r8)
 800747a:	46bd      	mov	sp, r7
 800747c:	b009      	add	sp, #36	@ 0x24
 800747e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007480:	08026998 	.word	0x08026998

08007484 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800748c:	4b10      	ldr	r3, [pc, #64]	@ (80074d0 <RTC_SetWakeUpTimer+0x4c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	0018      	movs	r0, r3
 8007492:	f011 fbf1 	bl	8018c78 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8007496:	4b0e      	ldr	r3, [pc, #56]	@ (80074d0 <RTC_SetWakeUpTimer+0x4c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	22ff      	movs	r2, #255	@ 0xff
 80074a0:	401a      	ands	r2, r3
 80074a2:	4b0b      	ldr	r3, [pc, #44]	@ (80074d0 <RTC_SetWakeUpTimer+0x4c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	490a      	ldr	r1, [pc, #40]	@ (80074d4 <RTC_SetWakeUpTimer+0x50>)
 80074aa:	430a      	orrs	r2, r1
 80074ac:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80074ae:	4b0a      	ldr	r3, [pc, #40]	@ (80074d8 <RTC_SetWakeUpTimer+0x54>)
 80074b0:	2280      	movs	r2, #128	@ 0x80
 80074b2:	0352      	lsls	r2, r2, #13
 80074b4:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 80074b6:	4b06      	ldr	r3, [pc, #24]	@ (80074d0 <RTC_SetWakeUpTimer+0x4c>)
 80074b8:	6818      	ldr	r0, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3b01      	subs	r3, #1
 80074be:	2204      	movs	r2, #4
 80074c0:	0019      	movs	r1, r3
 80074c2:	f011 fb01 	bl	8018ac8 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 80074c6:	46c0      	nop			@ (mov r8, r8)
 80074c8:	46bd      	mov	sp, r7
 80074ca:	b002      	add	sp, #8
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	46c0      	nop			@ (mov r8, r8)
 80074d0:	20000ac8 	.word	0x20000ac8
 80074d4:	fffffb7f 	.word	0xfffffb7f
 80074d8:	40010400 	.word	0x40010400

080074dc <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 80074e0:	4a0b      	ldr	r2, [pc, #44]	@ (8007510 <Enter_Standby_Mode+0x34>)
 80074e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007514 <Enter_Standby_Mode+0x38>)
 80074e4:	0019      	movs	r1, r3
 80074e6:	2003      	movs	r0, #3
 80074e8:	f009 f828 	bl	801053c <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 80074ec:	2064      	movs	r0, #100	@ 0x64
 80074ee:	f009 fc7b 	bl	8010de8 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80074f2:	4b09      	ldr	r3, [pc, #36]	@ (8007518 <Enter_Standby_Mode+0x3c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	0018      	movs	r0, r3
 80074f8:	f011 fbbe 	bl	8018c78 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 80074fc:	f001 fffc 	bl	80094f8 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8007500:	f009 fc96 	bl	8010e30 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8007504:	f010 f818 	bl	8017538 <HAL_PWR_EnterSTANDBYMode>
}
 8007508:	46c0      	nop			@ (mov r8, r8)
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	46c0      	nop			@ (mov r8, r8)
 8007510:	080269ec 	.word	0x080269ec
 8007514:	080268d4 	.word	0x080268d4
 8007518:	20000ac8 	.word	0x20000ac8

0800751c <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af02      	add	r7, sp, #8
 8007522:	0002      	movs	r2, r0
 8007524:	1dbb      	adds	r3, r7, #6
 8007526:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8007528:	4b47      	ldr	r3, [pc, #284]	@ (8007648 <Enter_Stop_Mode+0x12c>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8007530:	f003 fdee 	bl	800b110 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8007534:	f7ff fbc0 	bl	8006cb8 <ReadBatteryVoltage>
 8007538:	1c03      	adds	r3, r0, #0
 800753a:	1c18      	adds	r0, r3, #0
 800753c:	f7fb ff92 	bl	8003464 <__aeabi_f2d>
 8007540:	0002      	movs	r2, r0
 8007542:	000b      	movs	r3, r1
 8007544:	4841      	ldr	r0, [pc, #260]	@ (800764c <Enter_Stop_Mode+0x130>)
 8007546:	4942      	ldr	r1, [pc, #264]	@ (8007650 <Enter_Stop_Mode+0x134>)
 8007548:	9200      	str	r2, [sp, #0]
 800754a:	9301      	str	r3, [sp, #4]
 800754c:	0002      	movs	r2, r0
 800754e:	2002      	movs	r0, #2
 8007550:	f008 fff4 	bl	801053c <CreateLine>
  powerDisplay(powerCheck());
 8007554:	f008 f884 	bl	800f660 <powerCheck>
 8007558:	0003      	movs	r3, r0
 800755a:	0018      	movs	r0, r3
 800755c:	f008 f89c 	bl	800f698 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8007560:	1dbb      	adds	r3, r7, #6
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	4a3b      	ldr	r2, [pc, #236]	@ (8007654 <Enter_Stop_Mode+0x138>)
 8007566:	493c      	ldr	r1, [pc, #240]	@ (8007658 <Enter_Stop_Mode+0x13c>)
 8007568:	2003      	movs	r0, #3
 800756a:	f008 ffe7 	bl	801053c <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800756e:	f7ff ff44 	bl	80073fa <getPosixTime>
 8007572:	0002      	movs	r2, r0
 8007574:	1dbb      	adds	r3, r7, #6
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	18d3      	adds	r3, r2, r3
 800757a:	4a38      	ldr	r2, [pc, #224]	@ (800765c <Enter_Stop_Mode+0x140>)
 800757c:	0011      	movs	r1, r2
 800757e:	0018      	movs	r0, r3
 8007580:	f7ff ff50 	bl	8007424 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8007584:	4b35      	ldr	r3, [pc, #212]	@ (800765c <Enter_Stop_Mode+0x140>)
 8007586:	4a36      	ldr	r2, [pc, #216]	@ (8007660 <Enter_Stop_Mode+0x144>)
 8007588:	4931      	ldr	r1, [pc, #196]	@ (8007650 <Enter_Stop_Mode+0x134>)
 800758a:	2002      	movs	r0, #2
 800758c:	f008 ffd6 	bl	801053c <CreateLine>
  HAL_Delay(100);
 8007590:	2064      	movs	r0, #100	@ 0x64
 8007592:	f009 fc29 	bl	8010de8 <HAL_Delay>
  HAL_SuspendTick();
 8007596:	f009 fc4b 	bl	8010e30 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800759a:	1dbb      	adds	r3, r7, #6
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	0018      	movs	r0, r3
 80075a0:	f7ff ff70 	bl	8007484 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80075a4:	2101      	movs	r1, #1
 80075a6:	2001      	movs	r0, #1
 80075a8:	f00f ff6a 	bl	8017480 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 80075ac:	f002 fc1a 	bl	8009de4 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 80075b0:	f009 fc4c 	bl	8010e4c <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 80075b4:	1dbb      	adds	r3, r7, #6
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	0018      	movs	r0, r3
 80075ba:	f003 fd1d 	bl	800aff8 <sen5x_enable>
 80075be:	1e03      	subs	r3, r0, #0
 80075c0:	d01e      	beq.n	8007600 <Enter_Stop_Mode+0xe4>
    showTime();
 80075c2:	f7ff fc5f 	bl	8006e84 <showTime>
    set_light_on_state();
 80075c6:	f004 fa25 	bl	800ba14 <set_light_on_state>
    if (!userToggle) {
 80075ca:	4b26      	ldr	r3, [pc, #152]	@ (8007664 <Enter_Stop_Mode+0x148>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2201      	movs	r2, #1
 80075d0:	4053      	eors	r3, r2
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d013      	beq.n	8007600 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 80075d8:	201c      	movs	r0, #28
 80075da:	f7ff ff53 	bl	8007484 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 80075de:	4a1d      	ldr	r2, [pc, #116]	@ (8007654 <Enter_Stop_Mode+0x138>)
 80075e0:	491d      	ldr	r1, [pc, #116]	@ (8007658 <Enter_Stop_Mode+0x13c>)
 80075e2:	231c      	movs	r3, #28
 80075e4:	2003      	movs	r0, #3
 80075e6:	f008 ffa9 	bl	801053c <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80075ea:	2101      	movs	r1, #1
 80075ec:	2001      	movs	r0, #1
 80075ee:	f00f ff47 	bl	8017480 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 80075f2:	f002 fbf7 	bl	8009de4 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 80075f6:	f009 fc29 	bl	8010e4c <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 80075fa:	2000      	movs	r0, #0
 80075fc:	f003 fcda 	bl	800afb4 <setsen5xReadTimer>
    }
  }
  showTime();
 8007600:	f7ff fc40 	bl	8006e84 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8007604:	f003 f970 	bl	800a8e8 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8007608:	f006 f860 	bl	800d6cc <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 800760c:	2000      	movs	r0, #0
 800760e:	f003 fce3 	bl	800afd8 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 8007612:	4b15      	ldr	r3, [pc, #84]	@ (8007668 <Enter_Stop_Mode+0x14c>)
 8007614:	0018      	movs	r0, r3
 8007616:	f7fc f825 	bl	8003664 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 800761a:	2000      	movs	r0, #0
 800761c:	f006 f844 	bl	800d6a8 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8007620:	2000      	movs	r0, #0
 8007622:	f009 f94f 	bl	80108c4 <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8007626:	2000      	movs	r0, #0
 8007628:	f003 f94c 	bl	800a8c4 <setMICTimeStamp>
  ESPTransmitDone = false;
 800762c:	4b0f      	ldr	r3, [pc, #60]	@ (800766c <Enter_Stop_Mode+0x150>)
 800762e:	2200      	movs	r2, #0
 8007630:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 8007632:	f009 fbcf 	bl	8010dd4 <HAL_GetTick>
 8007636:	0003      	movs	r3, r0
 8007638:	4a0d      	ldr	r2, [pc, #52]	@ (8007670 <Enter_Stop_Mode+0x154>)
 800763a:	189a      	adds	r2, r3, r2
 800763c:	4b0d      	ldr	r3, [pc, #52]	@ (8007674 <Enter_Stop_Mode+0x158>)
 800763e:	601a      	str	r2, [r3, #0]
}
 8007640:	46c0      	nop			@ (mov r8, r8)
 8007642:	46bd      	mov	sp, r7
 8007644:	b002      	add	sp, #8
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20000e2d 	.word	0x20000e2d
 800764c:	08026a10 	.word	0x08026a10
 8007650:	08026a28 	.word	0x08026a28
 8007654:	08026a2c 	.word	0x08026a2c
 8007658:	080268d4 	.word	0x080268d4
 800765c:	20000ad0 	.word	0x20000ad0
 8007660:	08026a50 	.word	0x08026a50
 8007664:	20001dbe 	.word	0x20001dbe
 8007668:	00001194 	.word	0x00001194
 800766c:	20000560 	.word	0x20000560
 8007670:	00000bb8 	.word	0x00000bb8
 8007674:	20000d84 	.word	0x20000d84

08007678 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8007680:	4b03      	ldr	r3, [pc, #12]	@ (8007690 <InitClock+0x18>)
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	601a      	str	r2, [r3, #0]
}
 8007686:	46c0      	nop			@ (mov r8, r8)
 8007688:	46bd      	mov	sp, r7
 800768a:	b002      	add	sp, #8
 800768c:	bd80      	pop	{r7, pc}
 800768e:	46c0      	nop			@ (mov r8, r8)
 8007690:	20000ac8 	.word	0x20000ac8

08007694 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	78db      	ldrb	r3, [r3, #3]
 80076a2:	001a      	movs	r2, r3
 80076a4:	0013      	movs	r3, r2
 80076a6:	025b      	lsls	r3, r3, #9
 80076a8:	189b      	adds	r3, r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	189b      	adds	r3, r3, r2
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	189b      	adds	r3, r3, r2
 80076b2:	011a      	lsls	r2, r3, #4
 80076b4:	1ad2      	subs	r2, r2, r3
 80076b6:	01d3      	lsls	r3, r2, #7
 80076b8:	001a      	movs	r2, r3
 80076ba:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80076bc:	2300      	movs	r3, #0
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	e028      	b.n	8007714 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4a53      	ldr	r2, [pc, #332]	@ (8007814 <makeTime+0x180>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	db21      	blt.n	800770e <makeTime+0x7a>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4a52      	ldr	r2, [pc, #328]	@ (8007818 <makeTime+0x184>)
 80076ce:	4694      	mov	ip, r2
 80076d0:	4463      	add	r3, ip
 80076d2:	001a      	movs	r2, r3
 80076d4:	2303      	movs	r3, #3
 80076d6:	4013      	ands	r3, r2
 80076d8:	d119      	bne.n	800770e <makeTime+0x7a>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4a4e      	ldr	r2, [pc, #312]	@ (8007818 <makeTime+0x184>)
 80076de:	4694      	mov	ip, r2
 80076e0:	4463      	add	r3, ip
 80076e2:	2164      	movs	r1, #100	@ 0x64
 80076e4:	0018      	movs	r0, r3
 80076e6:	f7f8 fecd 	bl	8000484 <__aeabi_idivmod>
 80076ea:	1e0b      	subs	r3, r1, #0
 80076ec:	d10a      	bne.n	8007704 <makeTime+0x70>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4a49      	ldr	r2, [pc, #292]	@ (8007818 <makeTime+0x184>)
 80076f2:	4694      	mov	ip, r2
 80076f4:	4463      	add	r3, ip
 80076f6:	22c8      	movs	r2, #200	@ 0xc8
 80076f8:	0051      	lsls	r1, r2, #1
 80076fa:	0018      	movs	r0, r3
 80076fc:	f7f8 fec2 	bl	8000484 <__aeabi_idivmod>
 8007700:	1e0b      	subs	r3, r1, #0
 8007702:	d104      	bne.n	800770e <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4a45      	ldr	r2, [pc, #276]	@ (800781c <makeTime+0x188>)
 8007708:	4694      	mov	ip, r2
 800770a:	4463      	add	r3, ip
 800770c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3301      	adds	r3, #1
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	78db      	ldrb	r3, [r3, #3]
 8007718:	001a      	movs	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4293      	cmp	r3, r2
 800771e:	dbd0      	blt.n	80076c2 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8007720:	2301      	movs	r3, #1
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e03c      	b.n	80077a0 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b02      	cmp	r3, #2
 800772a:	d125      	bne.n	8007778 <makeTime+0xe4>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	78db      	ldrb	r3, [r3, #3]
 8007730:	4a39      	ldr	r2, [pc, #228]	@ (8007818 <makeTime+0x184>)
 8007732:	4694      	mov	ip, r2
 8007734:	4463      	add	r3, ip
 8007736:	001a      	movs	r2, r3
 8007738:	2303      	movs	r3, #3
 800773a:	4013      	ands	r3, r2
 800773c:	d11c      	bne.n	8007778 <makeTime+0xe4>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	78db      	ldrb	r3, [r3, #3]
 8007742:	4a35      	ldr	r2, [pc, #212]	@ (8007818 <makeTime+0x184>)
 8007744:	4694      	mov	ip, r2
 8007746:	4463      	add	r3, ip
 8007748:	2164      	movs	r1, #100	@ 0x64
 800774a:	0018      	movs	r0, r3
 800774c:	f7f8 fe9a 	bl	8000484 <__aeabi_idivmod>
 8007750:	1e0b      	subs	r3, r1, #0
 8007752:	d10b      	bne.n	800776c <makeTime+0xd8>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	78db      	ldrb	r3, [r3, #3]
 8007758:	4a2f      	ldr	r2, [pc, #188]	@ (8007818 <makeTime+0x184>)
 800775a:	4694      	mov	ip, r2
 800775c:	4463      	add	r3, ip
 800775e:	22c8      	movs	r2, #200	@ 0xc8
 8007760:	0051      	lsls	r1, r2, #1
 8007762:	0018      	movs	r0, r3
 8007764:	f7f8 fe8e 	bl	8000484 <__aeabi_idivmod>
 8007768:	1e0b      	subs	r3, r1, #0
 800776a:	d105      	bne.n	8007778 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4a2c      	ldr	r2, [pc, #176]	@ (8007820 <makeTime+0x18c>)
 8007770:	4694      	mov	ip, r2
 8007772:	4463      	add	r3, ip
 8007774:	60bb      	str	r3, [r7, #8]
 8007776:	e010      	b.n	800779a <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	3b01      	subs	r3, #1
 800777c:	4a29      	ldr	r2, [pc, #164]	@ (8007824 <makeTime+0x190>)
 800777e:	5cd3      	ldrb	r3, [r2, r3]
 8007780:	001a      	movs	r2, r3
 8007782:	0013      	movs	r3, r2
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	189b      	adds	r3, r3, r2
 8007788:	011a      	lsls	r2, r3, #4
 800778a:	1ad2      	subs	r2, r2, r3
 800778c:	0113      	lsls	r3, r2, #4
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	01db      	lsls	r3, r3, #7
 8007792:	001a      	movs	r2, r3
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	189b      	adds	r3, r3, r2
 8007798:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3301      	adds	r3, #1
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	785b      	ldrb	r3, [r3, #1]
 80077a4:	001a      	movs	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4293      	cmp	r3, r2
 80077aa:	dbbc      	blt.n	8007726 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	789b      	ldrb	r3, [r3, #2]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	001a      	movs	r2, r3
 80077b4:	0013      	movs	r3, r2
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	189b      	adds	r3, r3, r2
 80077ba:	011a      	lsls	r2, r3, #4
 80077bc:	1ad2      	subs	r2, r2, r3
 80077be:	0113      	lsls	r3, r2, #4
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	01db      	lsls	r3, r3, #7
 80077c4:	001a      	movs	r2, r3
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	189b      	adds	r3, r3, r2
 80077ca:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	001a      	movs	r2, r3
 80077d2:	0013      	movs	r3, r2
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	1a9b      	subs	r3, r3, r2
 80077d8:	011a      	lsls	r2, r3, #4
 80077da:	1ad2      	subs	r2, r2, r3
 80077dc:	0113      	lsls	r3, r2, #4
 80077de:	001a      	movs	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	189b      	adds	r3, r3, r2
 80077e4:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	001a      	movs	r2, r3
 80077ec:	0013      	movs	r3, r2
 80077ee:	011b      	lsls	r3, r3, #4
 80077f0:	1a9b      	subs	r3, r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	001a      	movs	r2, r3
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	189b      	adds	r3, r3, r2
 80077fa:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	789b      	ldrb	r3, [r3, #2]
 8007800:	001a      	movs	r2, r3
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	189b      	adds	r3, r3, r2
 8007806:	60bb      	str	r3, [r7, #8]
  return seconds;
 8007808:	68bb      	ldr	r3, [r7, #8]
}
 800780a:	0018      	movs	r0, r3
 800780c:	46bd      	mov	sp, r7
 800780e:	b004      	add	sp, #16
 8007810:	bd80      	pop	{r7, pc}
 8007812:	46c0      	nop			@ (mov r8, r8)
 8007814:	fffff84f 	.word	0xfffff84f
 8007818:	000007b2 	.word	0x000007b2
 800781c:	00015180 	.word	0x00015180
 8007820:	00263b80 	.word	0x00263b80
 8007824:	08028850 	.word	0x08028850

08007828 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8007828:	b590      	push	{r4, r7, lr}
 800782a:	b089      	sub	sp, #36	@ 0x24
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	213c      	movs	r1, #60	@ 0x3c
 800783c:	0018      	movs	r0, r3
 800783e:	f7f8 fd37 	bl	80002b0 <__aeabi_uidivmod>
 8007842:	000b      	movs	r3, r1
 8007844:	b2da      	uxtb	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	213c      	movs	r1, #60	@ 0x3c
 800784e:	0018      	movs	r0, r3
 8007850:	f7f8 fca8 	bl	80001a4 <__udivsi3>
 8007854:	0003      	movs	r3, r0
 8007856:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	213c      	movs	r1, #60	@ 0x3c
 800785c:	0018      	movs	r0, r3
 800785e:	f7f8 fd27 	bl	80002b0 <__aeabi_uidivmod>
 8007862:	000b      	movs	r3, r1
 8007864:	b2da      	uxtb	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	213c      	movs	r1, #60	@ 0x3c
 800786e:	0018      	movs	r0, r3
 8007870:	f7f8 fc98 	bl	80001a4 <__udivsi3>
 8007874:	0003      	movs	r3, r0
 8007876:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	2118      	movs	r1, #24
 800787c:	0018      	movs	r0, r3
 800787e:	f7f8 fd17 	bl	80002b0 <__aeabi_uidivmod>
 8007882:	000b      	movs	r3, r1
 8007884:	b2da      	uxtb	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	2118      	movs	r1, #24
 800788e:	0018      	movs	r0, r3
 8007890:	f7f8 fc88 	bl	80001a4 <__udivsi3>
 8007894:	0003      	movs	r3, r0
 8007896:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	3b01      	subs	r3, #1
 800789c:	2107      	movs	r1, #7
 800789e:	0018      	movs	r0, r3
 80078a0:	f7f8 fd06 	bl	80002b0 <__aeabi_uidivmod>
 80078a4:	000b      	movs	r3, r1
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	3301      	adds	r3, #1
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	701a      	strb	r2, [r3, #0]
  year = 0;
 80078b0:	231f      	movs	r3, #31
 80078b2:	18fb      	adds	r3, r7, r3
 80078b4:	2200      	movs	r2, #0
 80078b6:	701a      	strb	r2, [r3, #0]
  days = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 80078bc:	e005      	b.n	80078ca <breakPosixTime+0xa2>
    year++;
 80078be:	211f      	movs	r1, #31
 80078c0:	187b      	adds	r3, r7, r1
 80078c2:	781a      	ldrb	r2, [r3, #0]
 80078c4:	187b      	adds	r3, r7, r1
 80078c6:	3201      	adds	r2, #1
 80078c8:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 80078ca:	241f      	movs	r4, #31
 80078cc:	193b      	adds	r3, r7, r4
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	4a64      	ldr	r2, [pc, #400]	@ (8007a64 <breakPosixTime+0x23c>)
 80078d2:	4694      	mov	ip, r2
 80078d4:	4463      	add	r3, ip
 80078d6:	001a      	movs	r2, r3
 80078d8:	2303      	movs	r3, #3
 80078da:	4013      	ands	r3, r2
 80078dc:	d119      	bne.n	8007912 <breakPosixTime+0xea>
 80078de:	193b      	adds	r3, r7, r4
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	4a60      	ldr	r2, [pc, #384]	@ (8007a64 <breakPosixTime+0x23c>)
 80078e4:	4694      	mov	ip, r2
 80078e6:	4463      	add	r3, ip
 80078e8:	2164      	movs	r1, #100	@ 0x64
 80078ea:	0018      	movs	r0, r3
 80078ec:	f7f8 fdca 	bl	8000484 <__aeabi_idivmod>
 80078f0:	1e0b      	subs	r3, r1, #0
 80078f2:	d10b      	bne.n	800790c <breakPosixTime+0xe4>
 80078f4:	193b      	adds	r3, r7, r4
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	4a5a      	ldr	r2, [pc, #360]	@ (8007a64 <breakPosixTime+0x23c>)
 80078fa:	4694      	mov	ip, r2
 80078fc:	4463      	add	r3, ip
 80078fe:	22c8      	movs	r2, #200	@ 0xc8
 8007900:	0051      	lsls	r1, r2, #1
 8007902:	0018      	movs	r0, r3
 8007904:	f7f8 fdbe 	bl	8000484 <__aeabi_idivmod>
 8007908:	1e0b      	subs	r3, r1, #0
 800790a:	d102      	bne.n	8007912 <breakPosixTime+0xea>
 800790c:	23b7      	movs	r3, #183	@ 0xb7
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	e001      	b.n	8007916 <breakPosixTime+0xee>
 8007912:	236e      	movs	r3, #110	@ 0x6e
 8007914:	33ff      	adds	r3, #255	@ 0xff
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	18d3      	adds	r3, r2, r3
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	429a      	cmp	r2, r3
 8007922:	d9cc      	bls.n	80078be <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	241f      	movs	r4, #31
 8007928:	193a      	adds	r2, r7, r4
 800792a:	7812      	ldrb	r2, [r2, #0]
 800792c:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800792e:	193b      	adds	r3, r7, r4
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	4a4c      	ldr	r2, [pc, #304]	@ (8007a64 <breakPosixTime+0x23c>)
 8007934:	4694      	mov	ip, r2
 8007936:	4463      	add	r3, ip
 8007938:	001a      	movs	r2, r3
 800793a:	2303      	movs	r3, #3
 800793c:	4013      	ands	r3, r2
 800793e:	d119      	bne.n	8007974 <breakPosixTime+0x14c>
 8007940:	193b      	adds	r3, r7, r4
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	4a47      	ldr	r2, [pc, #284]	@ (8007a64 <breakPosixTime+0x23c>)
 8007946:	4694      	mov	ip, r2
 8007948:	4463      	add	r3, ip
 800794a:	2164      	movs	r1, #100	@ 0x64
 800794c:	0018      	movs	r0, r3
 800794e:	f7f8 fd99 	bl	8000484 <__aeabi_idivmod>
 8007952:	1e0b      	subs	r3, r1, #0
 8007954:	d10b      	bne.n	800796e <breakPosixTime+0x146>
 8007956:	193b      	adds	r3, r7, r4
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	4a42      	ldr	r2, [pc, #264]	@ (8007a64 <breakPosixTime+0x23c>)
 800795c:	4694      	mov	ip, r2
 800795e:	4463      	add	r3, ip
 8007960:	22c8      	movs	r2, #200	@ 0xc8
 8007962:	0051      	lsls	r1, r2, #1
 8007964:	0018      	movs	r0, r3
 8007966:	f7f8 fd8d 	bl	8000484 <__aeabi_idivmod>
 800796a:	1e0b      	subs	r3, r1, #0
 800796c:	d102      	bne.n	8007974 <breakPosixTime+0x14c>
 800796e:	23b7      	movs	r3, #183	@ 0xb7
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	e001      	b.n	8007978 <breakPosixTime+0x150>
 8007974:	236e      	movs	r3, #110	@ 0x6e
 8007976:	33ff      	adds	r3, #255	@ 0xff
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	61bb      	str	r3, [r7, #24]

  days=0;
 8007986:	2300      	movs	r3, #0
 8007988:	617b      	str	r3, [r7, #20]
  month=0;
 800798a:	211e      	movs	r1, #30
 800798c:	187b      	adds	r3, r7, r1
 800798e:	2200      	movs	r2, #0
 8007990:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8007992:	231d      	movs	r3, #29
 8007994:	18fb      	adds	r3, r7, r3
 8007996:	2200      	movs	r2, #0
 8007998:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800799a:	187b      	adds	r3, r7, r1
 800799c:	2200      	movs	r2, #0
 800799e:	701a      	strb	r2, [r3, #0]
 80079a0:	e048      	b.n	8007a34 <breakPosixTime+0x20c>
    if (month==1) { // february
 80079a2:	231e      	movs	r3, #30
 80079a4:	18fb      	adds	r3, r7, r3
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d12a      	bne.n	8007a02 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 80079ac:	241f      	movs	r4, #31
 80079ae:	193b      	adds	r3, r7, r4
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	4a2c      	ldr	r2, [pc, #176]	@ (8007a64 <breakPosixTime+0x23c>)
 80079b4:	4694      	mov	ip, r2
 80079b6:	4463      	add	r3, ip
 80079b8:	001a      	movs	r2, r3
 80079ba:	2303      	movs	r3, #3
 80079bc:	4013      	ands	r3, r2
 80079be:	d11b      	bne.n	80079f8 <breakPosixTime+0x1d0>
 80079c0:	193b      	adds	r3, r7, r4
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	4a27      	ldr	r2, [pc, #156]	@ (8007a64 <breakPosixTime+0x23c>)
 80079c6:	4694      	mov	ip, r2
 80079c8:	4463      	add	r3, ip
 80079ca:	2164      	movs	r1, #100	@ 0x64
 80079cc:	0018      	movs	r0, r3
 80079ce:	f7f8 fd59 	bl	8000484 <__aeabi_idivmod>
 80079d2:	1e0b      	subs	r3, r1, #0
 80079d4:	d10b      	bne.n	80079ee <breakPosixTime+0x1c6>
 80079d6:	193b      	adds	r3, r7, r4
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	4a22      	ldr	r2, [pc, #136]	@ (8007a64 <breakPosixTime+0x23c>)
 80079dc:	4694      	mov	ip, r2
 80079de:	4463      	add	r3, ip
 80079e0:	22c8      	movs	r2, #200	@ 0xc8
 80079e2:	0051      	lsls	r1, r2, #1
 80079e4:	0018      	movs	r0, r3
 80079e6:	f7f8 fd4d 	bl	8000484 <__aeabi_idivmod>
 80079ea:	1e0b      	subs	r3, r1, #0
 80079ec:	d104      	bne.n	80079f8 <breakPosixTime+0x1d0>
        monthLength=29;
 80079ee:	231d      	movs	r3, #29
 80079f0:	18fb      	adds	r3, r7, r3
 80079f2:	221d      	movs	r2, #29
 80079f4:	701a      	strb	r2, [r3, #0]
 80079f6:	e00c      	b.n	8007a12 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 80079f8:	231d      	movs	r3, #29
 80079fa:	18fb      	adds	r3, r7, r3
 80079fc:	221c      	movs	r2, #28
 80079fe:	701a      	strb	r2, [r3, #0]
 8007a00:	e007      	b.n	8007a12 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8007a02:	231e      	movs	r3, #30
 8007a04:	18fb      	adds	r3, r7, r3
 8007a06:	781a      	ldrb	r2, [r3, #0]
 8007a08:	231d      	movs	r3, #29
 8007a0a:	18fb      	adds	r3, r7, r3
 8007a0c:	4916      	ldr	r1, [pc, #88]	@ (8007a68 <breakPosixTime+0x240>)
 8007a0e:	5c8a      	ldrb	r2, [r1, r2]
 8007a10:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8007a12:	211d      	movs	r1, #29
 8007a14:	187b      	adds	r3, r7, r1
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d310      	bcc.n	8007a40 <breakPosixTime+0x218>
      time -= monthLength;
 8007a1e:	187b      	adds	r3, r7, r1
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8007a28:	211e      	movs	r1, #30
 8007a2a:	187b      	adds	r3, r7, r1
 8007a2c:	781a      	ldrb	r2, [r3, #0]
 8007a2e:	187b      	adds	r3, r7, r1
 8007a30:	3201      	adds	r2, #1
 8007a32:	701a      	strb	r2, [r3, #0]
 8007a34:	231e      	movs	r3, #30
 8007a36:	18fb      	adds	r3, r7, r3
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	2b0b      	cmp	r3, #11
 8007a3c:	d9b1      	bls.n	80079a2 <breakPosixTime+0x17a>
 8007a3e:	e000      	b.n	8007a42 <breakPosixTime+0x21a>
    } else {
        break;
 8007a40:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8007a42:	231e      	movs	r3, #30
 8007a44:	18fb      	adds	r3, r7, r3
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	3301      	adds	r3, #1
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	709a      	strb	r2, [r3, #2]
}
 8007a5c:	46c0      	nop			@ (mov r8, r8)
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	b009      	add	sp, #36	@ 0x24
 8007a62:	bd90      	pop	{r4, r7, pc}
 8007a64:	000007b2 	.word	0x000007b2
 8007a68:	08028850 	.word	0x08028850

08007a6c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007a72:	003b      	movs	r3, r7
 8007a74:	0018      	movs	r0, r3
 8007a76:	2308      	movs	r3, #8
 8007a78:	001a      	movs	r2, r3
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	f01a febc 	bl	80227f8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8007a80:	4b30      	ldr	r3, [pc, #192]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007a82:	4a31      	ldr	r2, [pc, #196]	@ (8007b48 <MX_ADC_Init+0xdc>)
 8007a84:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8007a86:	4b2f      	ldr	r3, [pc, #188]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007a8e:	22c0      	movs	r2, #192	@ 0xc0
 8007a90:	0612      	lsls	r2, r2, #24
 8007a92:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8007a94:	4b2b      	ldr	r3, [pc, #172]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8007aa0:	4b28      	ldr	r3, [pc, #160]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007aa6:	4b27      	ldr	r3, [pc, #156]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8007aac:	4b25      	ldr	r3, [pc, #148]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007aae:	2220      	movs	r2, #32
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8007ab4:	4b23      	ldr	r3, [pc, #140]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007ab6:	2221      	movs	r2, #33	@ 0x21
 8007ab8:	2101      	movs	r1, #1
 8007aba:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007abc:	4b21      	ldr	r3, [pc, #132]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007ac2:	4b20      	ldr	r3, [pc, #128]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007ac4:	22c2      	movs	r2, #194	@ 0xc2
 8007ac6:	32ff      	adds	r2, #255	@ 0xff
 8007ac8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8007aca:	4b1e      	ldr	r3, [pc, #120]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007acc:	222c      	movs	r2, #44	@ 0x2c
 8007ace:	2100      	movs	r1, #0
 8007ad0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007ad4:	2204      	movs	r2, #4
 8007ad6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8007ade:	4b19      	ldr	r3, [pc, #100]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007ae4:	4b17      	ldr	r3, [pc, #92]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8007aea:	4b16      	ldr	r3, [pc, #88]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007af0:	4b14      	ldr	r3, [pc, #80]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007af2:	0018      	movs	r0, r3
 8007af4:	f009 f9d6 	bl	8010ea4 <HAL_ADC_Init>
 8007af8:	1e03      	subs	r3, r0, #0
 8007afa:	d001      	beq.n	8007b00 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8007afc:	f002 fac2 	bl	800a084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007b00:	003b      	movs	r3, r7
 8007b02:	4a12      	ldr	r2, [pc, #72]	@ (8007b4c <MX_ADC_Init+0xe0>)
 8007b04:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007b06:	003b      	movs	r3, r7
 8007b08:	2280      	movs	r2, #128	@ 0x80
 8007b0a:	0152      	lsls	r2, r2, #5
 8007b0c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007b0e:	003a      	movs	r2, r7
 8007b10:	4b0c      	ldr	r3, [pc, #48]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007b12:	0011      	movs	r1, r2
 8007b14:	0018      	movs	r0, r3
 8007b16:	f009 fc35 	bl	8011384 <HAL_ADC_ConfigChannel>
 8007b1a:	1e03      	subs	r3, r0, #0
 8007b1c:	d001      	beq.n	8007b22 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8007b1e:	f002 fab1 	bl	800a084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007b22:	003b      	movs	r3, r7
 8007b24:	4a0a      	ldr	r2, [pc, #40]	@ (8007b50 <MX_ADC_Init+0xe4>)
 8007b26:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007b28:	003a      	movs	r2, r7
 8007b2a:	4b06      	ldr	r3, [pc, #24]	@ (8007b44 <MX_ADC_Init+0xd8>)
 8007b2c:	0011      	movs	r1, r2
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f009 fc28 	bl	8011384 <HAL_ADC_ConfigChannel>
 8007b34:	1e03      	subs	r3, r0, #0
 8007b36:	d001      	beq.n	8007b3c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8007b38:	f002 faa4 	bl	800a084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007b3c:	46c0      	nop			@ (mov r8, r8)
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	b002      	add	sp, #8
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	20000ae8 	.word	0x20000ae8
 8007b48:	40012400 	.word	0x40012400
 8007b4c:	38004000 	.word	0x38004000
 8007b50:	3c008000 	.word	0x3c008000

08007b54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007b54:	b590      	push	{r4, r7, lr}
 8007b56:	b089      	sub	sp, #36	@ 0x24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b5c:	240c      	movs	r4, #12
 8007b5e:	193b      	adds	r3, r7, r4
 8007b60:	0018      	movs	r0, r3
 8007b62:	2314      	movs	r3, #20
 8007b64:	001a      	movs	r2, r3
 8007b66:	2100      	movs	r1, #0
 8007b68:	f01a fe46 	bl	80227f8 <memset>
  if(adcHandle->Instance==ADC1)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a14      	ldr	r2, [pc, #80]	@ (8007bc4 <HAL_ADC_MspInit+0x70>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d121      	bne.n	8007bba <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007b76:	4b14      	ldr	r3, [pc, #80]	@ (8007bc8 <HAL_ADC_MspInit+0x74>)
 8007b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b7a:	4b13      	ldr	r3, [pc, #76]	@ (8007bc8 <HAL_ADC_MspInit+0x74>)
 8007b7c:	2180      	movs	r1, #128	@ 0x80
 8007b7e:	0089      	lsls	r1, r1, #2
 8007b80:	430a      	orrs	r2, r1
 8007b82:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b84:	4b10      	ldr	r3, [pc, #64]	@ (8007bc8 <HAL_ADC_MspInit+0x74>)
 8007b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b88:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc8 <HAL_ADC_MspInit+0x74>)
 8007b8a:	2104      	movs	r1, #4
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007b90:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc8 <HAL_ADC_MspInit+0x74>)
 8007b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b94:	2204      	movs	r2, #4
 8007b96:	4013      	ands	r3, r2
 8007b98:	60bb      	str	r3, [r7, #8]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8007b9c:	193b      	adds	r3, r7, r4
 8007b9e:	2230      	movs	r2, #48	@ 0x30
 8007ba0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ba2:	193b      	adds	r3, r7, r4
 8007ba4:	2203      	movs	r2, #3
 8007ba6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba8:	193b      	adds	r3, r7, r4
 8007baa:	2200      	movs	r2, #0
 8007bac:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bae:	193b      	adds	r3, r7, r4
 8007bb0:	4a06      	ldr	r2, [pc, #24]	@ (8007bcc <HAL_ADC_MspInit+0x78>)
 8007bb2:	0019      	movs	r1, r3
 8007bb4:	0010      	movs	r0, r2
 8007bb6:	f00a fa03 	bl	8011fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007bba:	46c0      	nop			@ (mov r8, r8)
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	b009      	add	sp, #36	@ 0x24
 8007bc0:	bd90      	pop	{r4, r7, pc}
 8007bc2:	46c0      	nop			@ (mov r8, r8)
 8007bc4:	40012400 	.word	0x40012400
 8007bc8:	40021000 	.word	0x40021000
 8007bcc:	50000800 	.word	0x50000800

08007bd0 <ReadRegister>:
static uint8_t airtemphumraw[7];
AHT20State AHTState = AHT_STATE_INIT;

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007bd0:	b590      	push	{r4, r7, lr}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6039      	str	r1, [r7, #0]
 8007bd8:	0011      	movs	r1, r2
 8007bda:	1dfb      	adds	r3, r7, #7
 8007bdc:	1c02      	adds	r2, r0, #0
 8007bde:	701a      	strb	r2, [r3, #0]
 8007be0:	1dbb      	adds	r3, r7, #6
 8007be2:	1c0a      	adds	r2, r1, #0
 8007be4:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8007be6:	4b0a      	ldr	r3, [pc, #40]	@ (8007c10 <ReadRegister+0x40>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 8007bee:	4b08      	ldr	r3, [pc, #32]	@ (8007c10 <ReadRegister+0x40>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	1dba      	adds	r2, r7, #6
 8007bf4:	7814      	ldrb	r4, [r2, #0]
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	1dfa      	adds	r2, r7, #7
 8007bfa:	7810      	ldrb	r0, [r2, #0]
 8007bfc:	0022      	movs	r2, r4
 8007bfe:	4798      	blx	r3
 8007c00:	0003      	movs	r3, r0
 8007c02:	e000      	b.n	8007c06 <ReadRegister+0x36>
  }
  return false;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	0018      	movs	r0, r3
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	b003      	add	sp, #12
 8007c0c:	bd90      	pop	{r4, r7, pc}
 8007c0e:	46c0      	nop			@ (mov r8, r8)
 8007c10:	20000b4c 	.word	0x20000b4c

08007c14 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007c14:	b590      	push	{r4, r7, lr}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6039      	str	r1, [r7, #0]
 8007c1c:	0011      	movs	r1, r2
 8007c1e:	1dfb      	adds	r3, r7, #7
 8007c20:	1c02      	adds	r2, r0, #0
 8007c22:	701a      	strb	r2, [r3, #0]
 8007c24:	1dbb      	adds	r3, r7, #6
 8007c26:	1c0a      	adds	r2, r1, #0
 8007c28:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8007c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c54 <WriteRegister+0x40>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8007c32:	4b08      	ldr	r3, [pc, #32]	@ (8007c54 <WriteRegister+0x40>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	1dba      	adds	r2, r7, #6
 8007c38:	7814      	ldrb	r4, [r2, #0]
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	1dfa      	adds	r2, r7, #7
 8007c3e:	7810      	ldrb	r0, [r2, #0]
 8007c40:	0022      	movs	r2, r4
 8007c42:	4798      	blx	r3
 8007c44:	0003      	movs	r3, r0
 8007c46:	e000      	b.n	8007c4a <WriteRegister+0x36>
  }
  return false;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	b003      	add	sp, #12
 8007c50:	bd90      	pop	{r4, r7, pc}
 8007c52:	46c0      	nop			@ (mov r8, r8)
 8007c54:	20000b50 	.word	0x20000b50

08007c58 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	000a      	movs	r2, r1
 8007c62:	1cfb      	adds	r3, r7, #3
 8007c64:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 8007c66:	230f      	movs	r3, #15
 8007c68:	18fb      	adds	r3, r7, r3
 8007c6a:	22ff      	movs	r2, #255	@ 0xff
 8007c6c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8007c6e:	230e      	movs	r3, #14
 8007c70:	18fb      	adds	r3, r7, r3
 8007c72:	2200      	movs	r2, #0
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	e037      	b.n	8007ce8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8007c78:	230e      	movs	r3, #14
 8007c7a:	18fb      	adds	r3, r7, r3
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	18d3      	adds	r3, r2, r3
 8007c82:	7819      	ldrb	r1, [r3, #0]
 8007c84:	220f      	movs	r2, #15
 8007c86:	18bb      	adds	r3, r7, r2
 8007c88:	18ba      	adds	r2, r7, r2
 8007c8a:	7812      	ldrb	r2, [r2, #0]
 8007c8c:	404a      	eors	r2, r1
 8007c8e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8007c90:	230d      	movs	r3, #13
 8007c92:	18fb      	adds	r3, r7, r3
 8007c94:	2200      	movs	r2, #0
 8007c96:	701a      	strb	r2, [r3, #0]
 8007c98:	e01b      	b.n	8007cd2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 8007c9a:	210f      	movs	r1, #15
 8007c9c:	187b      	adds	r3, r7, r1
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	b25b      	sxtb	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	da09      	bge.n	8007cba <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 8007ca6:	187b      	adds	r3, r7, r1
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	005b      	lsls	r3, r3, #1
 8007cac:	b25b      	sxtb	r3, r3
 8007cae:	2231      	movs	r2, #49	@ 0x31
 8007cb0:	4053      	eors	r3, r2
 8007cb2:	b25a      	sxtb	r2, r3
 8007cb4:	187b      	adds	r3, r7, r1
 8007cb6:	701a      	strb	r2, [r3, #0]
 8007cb8:	e005      	b.n	8007cc6 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8007cba:	230f      	movs	r3, #15
 8007cbc:	18fa      	adds	r2, r7, r3
 8007cbe:	18fb      	adds	r3, r7, r3
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	18db      	adds	r3, r3, r3
 8007cc4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8007cc6:	210d      	movs	r1, #13
 8007cc8:	187b      	adds	r3, r7, r1
 8007cca:	781a      	ldrb	r2, [r3, #0]
 8007ccc:	187b      	adds	r3, r7, r1
 8007cce:	3201      	adds	r2, #1
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	230d      	movs	r3, #13
 8007cd4:	18fb      	adds	r3, r7, r3
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	2b07      	cmp	r3, #7
 8007cda:	d9de      	bls.n	8007c9a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8007cdc:	210e      	movs	r1, #14
 8007cde:	187b      	adds	r3, r7, r1
 8007ce0:	781a      	ldrb	r2, [r3, #0]
 8007ce2:	187b      	adds	r3, r7, r1
 8007ce4:	3201      	adds	r2, #1
 8007ce6:	701a      	strb	r2, [r3, #0]
 8007ce8:	230e      	movs	r3, #14
 8007cea:	18fa      	adds	r2, r7, r3
 8007cec:	1cfb      	adds	r3, r7, #3
 8007cee:	7812      	ldrb	r2, [r2, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d3c0      	bcc.n	8007c78 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8007cf6:	230f      	movs	r3, #15
 8007cf8:	18fb      	adds	r3, r7, r3
 8007cfa:	781b      	ldrb	r3, [r3, #0]
}
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	b004      	add	sp, #16
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8007d0e:	4b05      	ldr	r3, [pc, #20]	@ (8007d24 <AHT_Init+0x20>)
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8007d14:	4b04      	ldr	r3, [pc, #16]	@ (8007d28 <AHT_Init+0x24>)
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	601a      	str	r2, [r3, #0]
}
 8007d1a:	46c0      	nop			@ (mov r8, r8)
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	b002      	add	sp, #8
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	46c0      	nop			@ (mov r8, r8)
 8007d24:	20000b4c 	.word	0x20000b4c
 8007d28:	20000b50 	.word	0x20000b50

08007d2c <AHT20_DeviceConnected>:

bool AHT20_DeviceConnected() {
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	af00      	add	r7, sp, #0
  return WriteRegister(03, AHT20_start, 3);
 8007d30:	4b04      	ldr	r3, [pc, #16]	@ (8007d44 <AHT20_DeviceConnected+0x18>)
 8007d32:	2203      	movs	r2, #3
 8007d34:	0019      	movs	r1, r3
 8007d36:	2003      	movs	r0, #3
 8007d38:	f7ff ff6c 	bl	8007c14 <WriteRegister>
 8007d3c:	0003      	movs	r3, r0
}
 8007d3e:	0018      	movs	r0, r3
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	20000080 	.word	0x20000080

08007d48 <AHT20_init>:
bool AHT20_init(void) {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	af00      	add	r7, sp, #0
  Debug("Init AHT20");
 8007d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8007d7c <AHT20_init+0x34>)
 8007d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8007d80 <AHT20_init+0x38>)
 8007d50:	0019      	movs	r1, r3
 8007d52:	2003      	movs	r0, #3
 8007d54:	f008 fbf2 	bl	801053c <CreateLine>
  AHT20TimeStamp = HAL_GetTick() + 50;
 8007d58:	f009 f83c 	bl	8010dd4 <HAL_GetTick>
 8007d5c:	0003      	movs	r3, r0
 8007d5e:	3332      	adds	r3, #50	@ 0x32
 8007d60:	001a      	movs	r2, r3
 8007d62:	4b08      	ldr	r3, [pc, #32]	@ (8007d84 <AHT20_init+0x3c>)
 8007d64:	601a      	str	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 8007d66:	4b08      	ldr	r3, [pc, #32]	@ (8007d88 <AHT20_init+0x40>)
 8007d68:	2203      	movs	r2, #3
 8007d6a:	0019      	movs	r1, r3
 8007d6c:	2038      	movs	r0, #56	@ 0x38
 8007d6e:	f7ff ff51 	bl	8007c14 <WriteRegister>
 8007d72:	0003      	movs	r3, r0
}
 8007d74:	0018      	movs	r0, r3
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	46c0      	nop			@ (mov r8, r8)
 8007d7c:	08026a70 	.word	0x08026a70
 8007d80:	08026a7c 	.word	0x08026a7c
 8007d84:	20000b44 	.word	0x20000b44
 8007d88:	20000080 	.word	0x20000080

08007d8c <AHT20_calibration_start>:

bool AHT20_calibration_start() {
 8007d8c:	b590      	push	{r4, r7, lr}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_calibrated, 1);
 8007d92:	1dfc      	adds	r4, r7, #7
 8007d94:	4b10      	ldr	r3, [pc, #64]	@ (8007dd8 <AHT20_calibration_start+0x4c>)
 8007d96:	2201      	movs	r2, #1
 8007d98:	0019      	movs	r1, r3
 8007d9a:	2038      	movs	r0, #56	@ 0x38
 8007d9c:	f7ff ff3a 	bl	8007c14 <WriteRegister>
 8007da0:	0003      	movs	r3, r0
 8007da2:	7023      	strb	r3, [r4, #0]
  if (!response) {
 8007da4:	1dfb      	adds	r3, r7, #7
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2201      	movs	r2, #1
 8007daa:	4053      	eors	r3, r2
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <AHT20_calibration_start+0x32>
    Error("AHT20 Write error during calibaration");
 8007db2:	4a0a      	ldr	r2, [pc, #40]	@ (8007ddc <AHT20_calibration_start+0x50>)
 8007db4:	4b0a      	ldr	r3, [pc, #40]	@ (8007de0 <AHT20_calibration_start+0x54>)
 8007db6:	0019      	movs	r1, r3
 8007db8:	2001      	movs	r0, #1
 8007dba:	f008 fbbf 	bl	801053c <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 40;
 8007dbe:	f009 f809 	bl	8010dd4 <HAL_GetTick>
 8007dc2:	0003      	movs	r3, r0
 8007dc4:	3328      	adds	r3, #40	@ 0x28
 8007dc6:	001a      	movs	r2, r3
 8007dc8:	4b06      	ldr	r3, [pc, #24]	@ (8007de4 <AHT20_calibration_start+0x58>)
 8007dca:	601a      	str	r2, [r3, #0]
  return response;
 8007dcc:	1dfb      	adds	r3, r7, #7
 8007dce:	781b      	ldrb	r3, [r3, #0]
}
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	b003      	add	sp, #12
 8007dd6:	bd90      	pop	{r4, r7, pc}
 8007dd8:	2000008c 	.word	0x2000008c
 8007ddc:	08026a80 	.word	0x08026a80
 8007de0:	08026aa8 	.word	0x08026aa8
 8007de4:	20000b44 	.word	0x20000b44

08007de8 <AHT20_calibration_complete>:

bool AHT20_calibration_complete(void) {
 8007de8:	b580      	push	{r7, lr}
 8007dea:	af00      	add	r7, sp, #0
  if (!ReadRegister(AHT20_ADDRESS, airtemphumraw, 2)) {
 8007dec:	4b12      	ldr	r3, [pc, #72]	@ (8007e38 <AHT20_calibration_complete+0x50>)
 8007dee:	2202      	movs	r2, #2
 8007df0:	0019      	movs	r1, r3
 8007df2:	2038      	movs	r0, #56	@ 0x38
 8007df4:	f7ff feec 	bl	8007bd0 <ReadRegister>
 8007df8:	0003      	movs	r3, r0
 8007dfa:	001a      	movs	r2, r3
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	4053      	eors	r3, r2
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <AHT20_calibration_complete+0x2a>
    Error("AHT20 Read error during calibaration");;
 8007e06:	4a0d      	ldr	r2, [pc, #52]	@ (8007e3c <AHT20_calibration_complete+0x54>)
 8007e08:	4b0d      	ldr	r3, [pc, #52]	@ (8007e40 <AHT20_calibration_complete+0x58>)
 8007e0a:	0019      	movs	r1, r3
 8007e0c:	2001      	movs	r0, #1
 8007e0e:	f008 fb95 	bl	801053c <CreateLine>
  }
//  Debug("status of AHT20 [0]= 0x%02x [1]=0x%02x", airtemphumraw[0], airtemphumraw[1]);
  AHT20TimeStamp = HAL_GetTick() + 200;
 8007e12:	f008 ffdf 	bl	8010dd4 <HAL_GetTick>
 8007e16:	0003      	movs	r3, r0
 8007e18:	33c8      	adds	r3, #200	@ 0xc8
 8007e1a:	001a      	movs	r2, r3
 8007e1c:	4b09      	ldr	r3, [pc, #36]	@ (8007e44 <AHT20_calibration_complete+0x5c>)
 8007e1e:	601a      	str	r2, [r3, #0]
  return (airtemphumraw[1] & 0x08);
 8007e20:	4b05      	ldr	r3, [pc, #20]	@ (8007e38 <AHT20_calibration_complete+0x50>)
 8007e22:	785b      	ldrb	r3, [r3, #1]
 8007e24:	001a      	movs	r2, r3
 8007e26:	2308      	movs	r3, #8
 8007e28:	4013      	ands	r3, r2
 8007e2a:	1e5a      	subs	r2, r3, #1
 8007e2c:	4193      	sbcs	r3, r2
 8007e2e:	b2db      	uxtb	r3, r3
}
 8007e30:	0018      	movs	r0, r3
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	46c0      	nop			@ (mov r8, r8)
 8007e38:	20000b54 	.word	0x20000b54
 8007e3c:	08026aac 	.word	0x08026aac
 8007e40:	08026aa8 	.word	0x08026aa8
 8007e44:	20000b44 	.word	0x20000b44

08007e48 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 8007e48:	b590      	push	{r4, r7, lr}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 8007e4e:	1dfc      	adds	r4, r7, #7
 8007e50:	4b10      	ldr	r3, [pc, #64]	@ (8007e94 <AHT20_StartMeasurement+0x4c>)
 8007e52:	2203      	movs	r2, #3
 8007e54:	0019      	movs	r1, r3
 8007e56:	2038      	movs	r0, #56	@ 0x38
 8007e58:	f7ff fedc 	bl	8007c14 <WriteRegister>
 8007e5c:	0003      	movs	r3, r0
 8007e5e:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 8007e60:	1dfb      	adds	r3, r7, #7
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	2201      	movs	r2, #1
 8007e66:	4053      	eors	r3, r2
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d005      	beq.n	8007e7a <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 8007e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8007e98 <AHT20_StartMeasurement+0x50>)
 8007e70:	4b0a      	ldr	r3, [pc, #40]	@ (8007e9c <AHT20_StartMeasurement+0x54>)
 8007e72:	0019      	movs	r1, r3
 8007e74:	2001      	movs	r0, #1
 8007e76:	f008 fb61 	bl	801053c <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 100;
 8007e7a:	f008 ffab 	bl	8010dd4 <HAL_GetTick>
 8007e7e:	0003      	movs	r3, r0
 8007e80:	3364      	adds	r3, #100	@ 0x64
 8007e82:	001a      	movs	r2, r3
 8007e84:	4b06      	ldr	r3, [pc, #24]	@ (8007ea0 <AHT20_StartMeasurement+0x58>)
 8007e86:	601a      	str	r2, [r3, #0]
  return response;
 8007e88:	1dfb      	adds	r3, r7, #7
 8007e8a:	781b      	ldrb	r3, [r3, #0]
}
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	b003      	add	sp, #12
 8007e92:	bd90      	pop	{r4, r7, pc}
 8007e94:	20000088 	.word	0x20000088
 8007e98:	08026ad4 	.word	0x08026ad4
 8007e9c:	08026aa8 	.word	0x08026aa8
 8007ea0:	20000b44 	.word	0x20000b44

08007ea4 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 8007ea4:	b590      	push	{r4, r7, lr}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
  bool response = ReadRegister(AHT20_ADDRESS, airtemphumraw, 7);
 8007eaa:	1dfc      	adds	r4, r7, #7
 8007eac:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed8 <AHT20_GetMeasurementValues+0x34>)
 8007eae:	2207      	movs	r2, #7
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	2038      	movs	r0, #56	@ 0x38
 8007eb4:	f7ff fe8c 	bl	8007bd0 <ReadRegister>
 8007eb8:	0003      	movs	r3, r0
 8007eba:	7023      	strb	r3, [r4, #0]
  AHT20TimeStamp = HAL_GetTick() + 100;
 8007ebc:	f008 ff8a 	bl	8010dd4 <HAL_GetTick>
 8007ec0:	0003      	movs	r3, r0
 8007ec2:	3364      	adds	r3, #100	@ 0x64
 8007ec4:	001a      	movs	r2, r3
 8007ec6:	4b05      	ldr	r3, [pc, #20]	@ (8007edc <AHT20_GetMeasurementValues+0x38>)
 8007ec8:	601a      	str	r2, [r3, #0]
  return response;
 8007eca:	1dfb      	adds	r3, r7, #7
 8007ecc:	781b      	ldrb	r3, [r3, #0]
}
 8007ece:	0018      	movs	r0, r3
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	b003      	add	sp, #12
 8007ed4:	bd90      	pop	{r4, r7, pc}
 8007ed6:	46c0      	nop			@ (mov r8, r8)
 8007ed8:	20000b54 	.word	0x20000b54
 8007edc:	20000b44 	.word	0x20000b44

08007ee0 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 8007ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ee2:	46c6      	mov	lr, r8
 8007ee4:	b500      	push	{lr}
 8007ee6:	b08a      	sub	sp, #40	@ 0x28
 8007ee8:	af06      	add	r7, sp, #24
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if (airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) {
 8007eee:	4b53      	ldr	r3, [pc, #332]	@ (800803c <AHT20_Calculate+0x15c>)
 8007ef0:	799c      	ldrb	r4, [r3, #6]
 8007ef2:	4b52      	ldr	r3, [pc, #328]	@ (800803c <AHT20_Calculate+0x15c>)
 8007ef4:	2106      	movs	r1, #6
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	f7ff feae 	bl	8007c58 <CalculateCRC>
 8007efc:	0003      	movs	r3, r0
 8007efe:	429c      	cmp	r4, r3
 8007f00:	d038      	beq.n	8007f74 <AHT20_Calculate+0x94>
    Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 8007f02:	4b4e      	ldr	r3, [pc, #312]	@ (800803c <AHT20_Calculate+0x15c>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	4698      	mov	r8, r3
 8007f08:	4b4c      	ldr	r3, [pc, #304]	@ (800803c <AHT20_Calculate+0x15c>)
 8007f0a:	785b      	ldrb	r3, [r3, #1]
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	4b4b      	ldr	r3, [pc, #300]	@ (800803c <AHT20_Calculate+0x15c>)
 8007f10:	789b      	ldrb	r3, [r3, #2]
 8007f12:	001c      	movs	r4, r3
 8007f14:	4b49      	ldr	r3, [pc, #292]	@ (800803c <AHT20_Calculate+0x15c>)
 8007f16:	78db      	ldrb	r3, [r3, #3]
 8007f18:	001d      	movs	r5, r3
 8007f1a:	4b48      	ldr	r3, [pc, #288]	@ (800803c <AHT20_Calculate+0x15c>)
 8007f1c:	791b      	ldrb	r3, [r3, #4]
 8007f1e:	001e      	movs	r6, r3
 8007f20:	4b46      	ldr	r3, [pc, #280]	@ (800803c <AHT20_Calculate+0x15c>)
 8007f22:	795b      	ldrb	r3, [r3, #5]
 8007f24:	469c      	mov	ip, r3
 8007f26:	4b45      	ldr	r3, [pc, #276]	@ (800803c <AHT20_Calculate+0x15c>)
 8007f28:	799b      	ldrb	r3, [r3, #6]
 8007f2a:	4a45      	ldr	r2, [pc, #276]	@ (8008040 <AHT20_Calculate+0x160>)
 8007f2c:	4945      	ldr	r1, [pc, #276]	@ (8008044 <AHT20_Calculate+0x164>)
 8007f2e:	9305      	str	r3, [sp, #20]
 8007f30:	4663      	mov	r3, ip
 8007f32:	9304      	str	r3, [sp, #16]
 8007f34:	9603      	str	r6, [sp, #12]
 8007f36:	9502      	str	r5, [sp, #8]
 8007f38:	9401      	str	r4, [sp, #4]
 8007f3a:	9000      	str	r0, [sp, #0]
 8007f3c:	4643      	mov	r3, r8
 8007f3e:	2003      	movs	r0, #3
 8007f40:	f008 fafc 	bl	801053c <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 8007f44:	4b3d      	ldr	r3, [pc, #244]	@ (800803c <AHT20_Calculate+0x15c>)
 8007f46:	799b      	ldrb	r3, [r3, #6]
 8007f48:	001c      	movs	r4, r3
 8007f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800803c <AHT20_Calculate+0x15c>)
 8007f4c:	2106      	movs	r1, #6
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f7ff fe82 	bl	8007c58 <CalculateCRC>
 8007f54:	0003      	movs	r3, r0
 8007f56:	4a3c      	ldr	r2, [pc, #240]	@ (8008048 <AHT20_Calculate+0x168>)
 8007f58:	493c      	ldr	r1, [pc, #240]	@ (800804c <AHT20_Calculate+0x16c>)
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	0023      	movs	r3, r4
 8007f5e:	2001      	movs	r0, #1
 8007f60:	f008 faec 	bl	801053c <CreateLine>
    *airtemp = 0.0;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	601a      	str	r2, [r3, #0]
    return false;
 8007f70:	2300      	movs	r3, #0
 8007f72:	e05c      	b.n	800802e <AHT20_Calculate+0x14e>
  }
  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 8007f74:	4b31      	ldr	r3, [pc, #196]	@ (800803c <AHT20_Calculate+0x15c>)
 8007f76:	78db      	ldrb	r3, [r3, #3]
 8007f78:	041a      	lsls	r2, r3, #16
 8007f7a:	23f0      	movs	r3, #240	@ 0xf0
 8007f7c:	031b      	lsls	r3, r3, #12
 8007f7e:	401a      	ands	r2, r3
 8007f80:	4b2e      	ldr	r3, [pc, #184]	@ (800803c <AHT20_Calculate+0x15c>)
 8007f82:	791b      	ldrb	r3, [r3, #4]
 8007f84:	021b      	lsls	r3, r3, #8
 8007f86:	18d3      	adds	r3, r2, r3
 8007f88:	4a2c      	ldr	r2, [pc, #176]	@ (800803c <AHT20_Calculate+0x15c>)
 8007f8a:	7952      	ldrb	r2, [r2, #5]
 8007f8c:	189b      	adds	r3, r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f7f9 fb69 	bl	8001668 <__aeabi_ui2f>
 8007f96:	1c03      	adds	r3, r0, #0
 8007f98:	2193      	movs	r1, #147	@ 0x93
 8007f9a:	05c9      	lsls	r1, r1, #23
 8007f9c:	1c18      	adds	r0, r3, #0
 8007f9e:	f7f8 fe19 	bl	8000bd4 <__aeabi_fdiv>
 8007fa2:	1c03      	adds	r3, r0, #0
 8007fa4:	492a      	ldr	r1, [pc, #168]	@ (8008050 <AHT20_Calculate+0x170>)
 8007fa6:	1c18      	adds	r0, r3, #0
 8007fa8:	f7f8 fffa 	bl	8000fa0 <__aeabi_fmul>
 8007fac:	1c03      	adds	r3, r0, #0
 8007fae:	4929      	ldr	r1, [pc, #164]	@ (8008054 <AHT20_Calculate+0x174>)
 8007fb0:	1c18      	adds	r0, r3, #0
 8007fb2:	f7f9 f933 	bl	800121c <__aeabi_fsub>
 8007fb6:	1c03      	adds	r3, r0, #0
 8007fb8:	1c1a      	adds	r2, r3, #0
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 8007fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800803c <AHT20_Calculate+0x15c>)
 8007fc0:	785b      	ldrb	r3, [r3, #1]
 8007fc2:	031a      	lsls	r2, r3, #12
 8007fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800803c <AHT20_Calculate+0x15c>)
 8007fc6:	789b      	ldrb	r3, [r3, #2]
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	18d3      	adds	r3, r2, r3
 8007fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800803c <AHT20_Calculate+0x15c>)
 8007fce:	78d2      	ldrb	r2, [r2, #3]
 8007fd0:	0912      	lsrs	r2, r2, #4
 8007fd2:	b2d2      	uxtb	r2, r2
 8007fd4:	189b      	adds	r3, r3, r2
 8007fd6:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 8007fd8:	68b8      	ldr	r0, [r7, #8]
 8007fda:	f7f9 fb45 	bl	8001668 <__aeabi_ui2f>
 8007fde:	1c03      	adds	r3, r0, #0
 8007fe0:	2193      	movs	r1, #147	@ 0x93
 8007fe2:	05c9      	lsls	r1, r1, #23
 8007fe4:	1c18      	adds	r0, r3, #0
 8007fe6:	f7f8 fdf5 	bl	8000bd4 <__aeabi_fdiv>
 8007fea:	1c03      	adds	r3, r0, #0
 8007fec:	491a      	ldr	r1, [pc, #104]	@ (8008058 <AHT20_Calculate+0x178>)
 8007fee:	1c18      	adds	r0, r3, #0
 8007ff0:	f7f8 ffd6 	bl	8000fa0 <__aeabi_fmul>
 8007ff4:	1c03      	adds	r3, r0, #0
 8007ff6:	1c1a      	adds	r2, r3, #0
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %f, temperature = %f", *airhum, *airtemp);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	1c18      	adds	r0, r3, #0
 8008002:	f7fb fa2f 	bl	8003464 <__aeabi_f2d>
 8008006:	0004      	movs	r4, r0
 8008008:	000d      	movs	r5, r1
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	1c18      	adds	r0, r3, #0
 8008010:	f7fb fa28 	bl	8003464 <__aeabi_f2d>
 8008014:	0002      	movs	r2, r0
 8008016:	000b      	movs	r3, r1
 8008018:	4810      	ldr	r0, [pc, #64]	@ (800805c <AHT20_Calculate+0x17c>)
 800801a:	490a      	ldr	r1, [pc, #40]	@ (8008044 <AHT20_Calculate+0x164>)
 800801c:	9202      	str	r2, [sp, #8]
 800801e:	9303      	str	r3, [sp, #12]
 8008020:	9400      	str	r4, [sp, #0]
 8008022:	9501      	str	r5, [sp, #4]
 8008024:	0002      	movs	r2, r0
 8008026:	2003      	movs	r0, #3
 8008028:	f008 fa88 	bl	801053c <CreateLine>
  return true;
 800802c:	2301      	movs	r3, #1
}
 800802e:	0018      	movs	r0, r3
 8008030:	46bd      	mov	sp, r7
 8008032:	b004      	add	sp, #16
 8008034:	bc80      	pop	{r7}
 8008036:	46b8      	mov	r8, r7
 8008038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800803a:	46c0      	nop			@ (mov r8, r8)
 800803c:	20000b54 	.word	0x20000b54
 8008040:	08026b00 	.word	0x08026b00
 8008044:	08026a7c 	.word	0x08026a7c
 8008048:	08026b6c 	.word	0x08026b6c
 800804c:	08026aa8 	.word	0x08026aa8
 8008050:	43480000 	.word	0x43480000
 8008054:	42480000 	.word	0x42480000
 8008058:	42c80000 	.word	0x42c80000
 800805c:	08026b94 	.word	0x08026b94

08008060 <AHT20_reset>:

bool AHT20_reset(void) {
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 8008064:	f008 feb6 	bl	8010dd4 <HAL_GetTick>
 8008068:	0003      	movs	r3, r0
 800806a:	3332      	adds	r3, #50	@ 0x32
 800806c:	001a      	movs	r2, r3
 800806e:	4b07      	ldr	r3, [pc, #28]	@ (800808c <AHT20_reset+0x2c>)
 8008070:	601a      	str	r2, [r3, #0]
  calibrated = false;
 8008072:	4b07      	ldr	r3, [pc, #28]	@ (8008090 <AHT20_reset+0x30>)
 8008074:	2200      	movs	r2, #0
 8008076:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 8008078:	4b06      	ldr	r3, [pc, #24]	@ (8008094 <AHT20_reset+0x34>)
 800807a:	2201      	movs	r2, #1
 800807c:	0019      	movs	r1, r3
 800807e:	2038      	movs	r0, #56	@ 0x38
 8008080:	f7ff fdc8 	bl	8007c14 <WriteRegister>
 8008084:	0003      	movs	r3, r0
}
 8008086:	0018      	movs	r0, r3
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20000b44 	.word	0x20000b44
 8008090:	20000b48 	.word	0x20000b48
 8008094:	20000084 	.word	0x20000084

08008098 <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800809e:	4b73      	ldr	r3, [pc, #460]	@ (800826c <AHT_Upkeep+0x1d4>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	0018      	movs	r0, r3
 80080a4:	f008 f9f4 	bl	8010490 <TimestampIsReached>
 80080a8:	0003      	movs	r3, r0
 80080aa:	001a      	movs	r2, r3
 80080ac:	2301      	movs	r3, #1
 80080ae:	4053      	eors	r3, r2
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d002      	beq.n	80080bc <AHT_Upkeep+0x24>
    return AHTState;
 80080b6:	4b6e      	ldr	r3, [pc, #440]	@ (8008270 <AHT_Upkeep+0x1d8>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	e0d2      	b.n	8008262 <AHT_Upkeep+0x1ca>
  }
  switch(AHTState) {
 80080bc:	4b6c      	ldr	r3, [pc, #432]	@ (8008270 <AHT_Upkeep+0x1d8>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d900      	bls.n	80080c6 <AHT_Upkeep+0x2e>
 80080c4:	e0b4      	b.n	8008230 <AHT_Upkeep+0x198>
 80080c6:	009a      	lsls	r2, r3, #2
 80080c8:	4b6a      	ldr	r3, [pc, #424]	@ (8008274 <AHT_Upkeep+0x1dc>)
 80080ca:	18d3      	adds	r3, r2, r3
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 80080d0:	4a69      	ldr	r2, [pc, #420]	@ (8008278 <AHT_Upkeep+0x1e0>)
 80080d2:	4b6a      	ldr	r3, [pc, #424]	@ (800827c <AHT_Upkeep+0x1e4>)
 80080d4:	0019      	movs	r1, r3
 80080d6:	2003      	movs	r0, #3
 80080d8:	f008 fa30 	bl	801053c <CreateLine>
    break;
 80080dc:	e0bf      	b.n	800825e <AHT_Upkeep+0x1c6>

  case AHT_STATE_INIT:
    if (getSensorLock() != FREE) {
 80080de:	f002 fba5 	bl	800a82c <getSensorLock>
 80080e2:	1e03      	subs	r3, r0, #0
 80080e4:	d000      	beq.n	80080e8 <AHT_Upkeep+0x50>
 80080e6:	e0b1      	b.n	800824c <AHT_Upkeep+0x1b4>
      break;
    }
    if (!AHT20_init()) {
 80080e8:	f7ff fe2e 	bl	8007d48 <AHT20_init>
 80080ec:	0003      	movs	r3, r0
 80080ee:	001a      	movs	r2, r3
 80080f0:	2301      	movs	r3, #1
 80080f2:	4053      	eors	r3, r2
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d008      	beq.n	800810c <AHT_Upkeep+0x74>
      Debug("AHT20 Error during initialization");
 80080fa:	4a61      	ldr	r2, [pc, #388]	@ (8008280 <AHT_Upkeep+0x1e8>)
 80080fc:	4b5f      	ldr	r3, [pc, #380]	@ (800827c <AHT_Upkeep+0x1e4>)
 80080fe:	0019      	movs	r1, r3
 8008100:	2003      	movs	r0, #3
 8008102:	f008 fa1b 	bl	801053c <CreateLine>
      AHTState = AHT20_ERROR;
 8008106:	4b5a      	ldr	r3, [pc, #360]	@ (8008270 <AHT_Upkeep+0x1d8>)
 8008108:	22ff      	movs	r2, #255	@ 0xff
 800810a:	701a      	strb	r2, [r3, #0]
    }
    if(!calibrated) {
 800810c:	4b5d      	ldr	r3, [pc, #372]	@ (8008284 <AHT_Upkeep+0x1ec>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2201      	movs	r2, #1
 8008112:	4053      	eors	r3, r2
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <AHT_Upkeep+0x8a>
      AHTState = AHT_START_CALIBRATION;
 800811a:	4b55      	ldr	r3, [pc, #340]	@ (8008270 <AHT_Upkeep+0x1d8>)
 800811c:	2201      	movs	r2, #1
 800811e:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHTState = AHT_STATE_START_MEASUREMENTS;
    }
    break;
 8008120:	e09d      	b.n	800825e <AHT_Upkeep+0x1c6>
      AHTState = AHT_STATE_START_MEASUREMENTS;
 8008122:	4b53      	ldr	r3, [pc, #332]	@ (8008270 <AHT_Upkeep+0x1d8>)
 8008124:	2203      	movs	r2, #3
 8008126:	701a      	strb	r2, [r3, #0]
    break;
 8008128:	e099      	b.n	800825e <AHT_Upkeep+0x1c6>

  case AHT_START_CALIBRATION:
  calibrated = false;
 800812a:	4b56      	ldr	r3, [pc, #344]	@ (8008284 <AHT_Upkeep+0x1ec>)
 800812c:	2200      	movs	r2, #0
 800812e:	701a      	strb	r2, [r3, #0]
  if (getSensorLock() != FREE) {
 8008130:	f002 fb7c 	bl	800a82c <getSensorLock>
 8008134:	1e03      	subs	r3, r0, #0
 8008136:	d000      	beq.n	800813a <AHT_Upkeep+0xa2>
 8008138:	e08a      	b.n	8008250 <AHT_Upkeep+0x1b8>
    break;
  }
  setSensorLock(AHT20);
 800813a:	2003      	movs	r0, #3
 800813c:	f002 fb66 	bl	800a80c <setSensorLock>
  if (AHT20_calibration_start()) {
 8008140:	f7ff fe24 	bl	8007d8c <AHT20_calibration_start>
 8008144:	1e03      	subs	r3, r0, #0
 8008146:	d100      	bne.n	800814a <AHT_Upkeep+0xb2>
 8008148:	e084      	b.n	8008254 <AHT_Upkeep+0x1bc>
    AHTState = AHT_CALIBRATED;
 800814a:	4b49      	ldr	r3, [pc, #292]	@ (8008270 <AHT_Upkeep+0x1d8>)
 800814c:	2202      	movs	r2, #2
 800814e:	701a      	strb	r2, [r3, #0]
  }
  break;
 8008150:	e080      	b.n	8008254 <AHT_Upkeep+0x1bc>

  case AHT_CALIBRATED:
    if (AHT20_calibration_complete()) {
 8008152:	f7ff fe49 	bl	8007de8 <AHT20_calibration_complete>
 8008156:	1e03      	subs	r3, r0, #0
 8008158:	d00f      	beq.n	800817a <AHT_Upkeep+0xe2>
      calibrated = true;
 800815a:	4b4a      	ldr	r3, [pc, #296]	@ (8008284 <AHT_Upkeep+0x1ec>)
 800815c:	2201      	movs	r2, #1
 800815e:	701a      	strb	r2, [r3, #0]
      setSensorLock(FREE);
 8008160:	2000      	movs	r0, #0
 8008162:	f002 fb53 	bl	800a80c <setSensorLock>
      AHTState = AHT_STATE_START_MEASUREMENTS;
 8008166:	4b42      	ldr	r3, [pc, #264]	@ (8008270 <AHT_Upkeep+0x1d8>)
 8008168:	2203      	movs	r2, #3
 800816a:	701a      	strb	r2, [r3, #0]
      Info("AHT20 Calibration success");
 800816c:	4a46      	ldr	r2, [pc, #280]	@ (8008288 <AHT_Upkeep+0x1f0>)
 800816e:	4b47      	ldr	r3, [pc, #284]	@ (800828c <AHT_Upkeep+0x1f4>)
 8008170:	0019      	movs	r1, r3
 8008172:	2002      	movs	r0, #2
 8008174:	f008 f9e2 	bl	801053c <CreateLine>
 8008178:	e009      	b.n	800818e <AHT_Upkeep+0xf6>
    }
    else {
      AHTState = AHT_START_CALIBRATION;
 800817a:	4b3d      	ldr	r3, [pc, #244]	@ (8008270 <AHT_Upkeep+0x1d8>)
 800817c:	2201      	movs	r2, #1
 800817e:	701a      	strb	r2, [r3, #0]
      AHT20TimeStamp = HAL_GetTick() + 20;
 8008180:	f008 fe28 	bl	8010dd4 <HAL_GetTick>
 8008184:	0003      	movs	r3, r0
 8008186:	3314      	adds	r3, #20
 8008188:	001a      	movs	r2, r3
 800818a:	4b38      	ldr	r3, [pc, #224]	@ (800826c <AHT_Upkeep+0x1d4>)
 800818c:	601a      	str	r2, [r3, #0]
    }
    setSensorLock(FREE);
 800818e:	2000      	movs	r0, #0
 8008190:	f002 fb3c 	bl	800a80c <setSensorLock>
    break;
 8008194:	e063      	b.n	800825e <AHT_Upkeep+0x1c6>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 8008196:	f002 fb49 	bl	800a82c <getSensorLock>
 800819a:	1e03      	subs	r3, r0, #0
 800819c:	d15c      	bne.n	8008258 <AHT_Upkeep+0x1c0>
      break;
    }
    setSensorLock(AHT20);
 800819e:	2003      	movs	r0, #3
 80081a0:	f002 fb34 	bl	800a80c <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 80081a4:	f7ff fe50 	bl	8007e48 <AHT20_StartMeasurement>
 80081a8:	0003      	movs	r3, r0
 80081aa:	001a      	movs	r2, r3
 80081ac:	2301      	movs	r3, #1
 80081ae:	4053      	eors	r3, r2
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <AHT_Upkeep+0x126>
      AHTState = AHT20_ERROR;
 80081b6:	4b2e      	ldr	r3, [pc, #184]	@ (8008270 <AHT_Upkeep+0x1d8>)
 80081b8:	22ff      	movs	r2, #255	@ 0xff
 80081ba:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
    }
    break;
 80081bc:	e04f      	b.n	800825e <AHT_Upkeep+0x1c6>
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 80081be:	4b2c      	ldr	r3, [pc, #176]	@ (8008270 <AHT_Upkeep+0x1d8>)
 80081c0:	2204      	movs	r2, #4
 80081c2:	701a      	strb	r2, [r3, #0]
    break;
 80081c4:	e04b      	b.n	800825e <AHT_Upkeep+0x1c6>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 80081c6:	f7ff fe6d 	bl	8007ea4 <AHT20_GetMeasurementValues>
 80081ca:	1e03      	subs	r3, r0, #0
 80081cc:	d006      	beq.n	80081dc <AHT_Upkeep+0x144>
//      Debug("AHT20_GetMeasurementValues success");
      setSensorLock(FREE);
 80081ce:	2000      	movs	r0, #0
 80081d0:	f002 fb1c 	bl	800a80c <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 80081d4:	4b26      	ldr	r3, [pc, #152]	@ (8008270 <AHT_Upkeep+0x1d8>)
 80081d6:	2205      	movs	r2, #5
 80081d8:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHT20TimeStamp = HAL_GetTick() + 40;
    }
    break;
 80081da:	e040      	b.n	800825e <AHT_Upkeep+0x1c6>
      AHT20TimeStamp = HAL_GetTick() + 40;
 80081dc:	f008 fdfa 	bl	8010dd4 <HAL_GetTick>
 80081e0:	0003      	movs	r3, r0
 80081e2:	3328      	adds	r3, #40	@ 0x28
 80081e4:	001a      	movs	r2, r3
 80081e6:	4b21      	ldr	r3, [pc, #132]	@ (800826c <AHT_Upkeep+0x1d4>)
 80081e8:	601a      	str	r2, [r3, #0]
    break;
 80081ea:	e038      	b.n	800825e <AHT_Upkeep+0x1c6>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 80081ec:	003a      	movs	r2, r7
 80081ee:	1d3b      	adds	r3, r7, #4
 80081f0:	0011      	movs	r1, r2
 80081f2:	0018      	movs	r0, r3
 80081f4:	f7ff fe74 	bl	8007ee0 <AHT20_Calculate>
 80081f8:	0003      	movs	r3, r0
 80081fa:	001a      	movs	r2, r3
 80081fc:	2301      	movs	r3, #1
 80081fe:	4053      	eors	r3, r2
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <AHT_Upkeep+0x17a>
      AHTState = AHT20_ERROR;
 8008206:	4b1a      	ldr	r3, [pc, #104]	@ (8008270 <AHT_Upkeep+0x1d8>)
 8008208:	22ff      	movs	r2, #255	@ 0xff
 800820a:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800820c:	4b18      	ldr	r3, [pc, #96]	@ (8008270 <AHT_Upkeep+0x1d8>)
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	e027      	b.n	8008262 <AHT_Upkeep+0x1ca>
    }
//    BMP280_setAirTemPHum(airtemp, airhum);
    AHTState = AHT_WAIT_STATE_MODE;
 8008212:	4b17      	ldr	r3, [pc, #92]	@ (8008270 <AHT_Upkeep+0x1d8>)
 8008214:	2208      	movs	r2, #8
 8008216:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 8008218:	f008 fddc 	bl	8010dd4 <HAL_GetTick>
 800821c:	0003      	movs	r3, r0
 800821e:	4a1c      	ldr	r2, [pc, #112]	@ (8008290 <AHT_Upkeep+0x1f8>)
 8008220:	189a      	adds	r2, r3, r2
 8008222:	4b12      	ldr	r3, [pc, #72]	@ (800826c <AHT_Upkeep+0x1d4>)
 8008224:	601a      	str	r2, [r3, #0]
    break;
 8008226:	e01a      	b.n	800825e <AHT_Upkeep+0x1c6>

  case AHT_WAIT_STATE_MODE:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 8008228:	4b11      	ldr	r3, [pc, #68]	@ (8008270 <AHT_Upkeep+0x1d8>)
 800822a:	2203      	movs	r2, #3
 800822c:	701a      	strb	r2, [r3, #0]
  break;
 800822e:	e016      	b.n	800825e <AHT_Upkeep+0x1c6>

  default:
    // Handle unexpected state
    AHT20_reset();
 8008230:	f7ff ff16 	bl	8008060 <AHT20_reset>
    AHTState = AHT_STATE_INIT;
 8008234:	4b0e      	ldr	r3, [pc, #56]	@ (8008270 <AHT_Upkeep+0x1d8>)
 8008236:	2200      	movs	r2, #0
 8008238:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800823a:	f002 faf7 	bl	800a82c <getSensorLock>
 800823e:	0003      	movs	r3, r0
 8008240:	2b03      	cmp	r3, #3
 8008242:	d10b      	bne.n	800825c <AHT_Upkeep+0x1c4>
      setSensorLock(FREE);
 8008244:	2000      	movs	r0, #0
 8008246:	f002 fae1 	bl	800a80c <setSensorLock>
    }
    break;
 800824a:	e007      	b.n	800825c <AHT_Upkeep+0x1c4>
      break;
 800824c:	46c0      	nop			@ (mov r8, r8)
 800824e:	e006      	b.n	800825e <AHT_Upkeep+0x1c6>
    break;
 8008250:	46c0      	nop			@ (mov r8, r8)
 8008252:	e004      	b.n	800825e <AHT_Upkeep+0x1c6>
  break;
 8008254:	46c0      	nop			@ (mov r8, r8)
 8008256:	e002      	b.n	800825e <AHT_Upkeep+0x1c6>
      break;
 8008258:	46c0      	nop			@ (mov r8, r8)
 800825a:	e000      	b.n	800825e <AHT_Upkeep+0x1c6>
    break;
 800825c:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800825e:	4b04      	ldr	r3, [pc, #16]	@ (8008270 <AHT_Upkeep+0x1d8>)
 8008260:	781b      	ldrb	r3, [r3, #0]
}
 8008262:	0018      	movs	r0, r3
 8008264:	46bd      	mov	sp, r7
 8008266:	b002      	add	sp, #8
 8008268:	bd80      	pop	{r7, pc}
 800826a:	46c0      	nop			@ (mov r8, r8)
 800826c:	20000b44 	.word	0x20000b44
 8008270:	20000b5b 	.word	0x20000b5b
 8008274:	0802885c 	.word	0x0802885c
 8008278:	08026bc0 	.word	0x08026bc0
 800827c:	08026a7c 	.word	0x08026a7c
 8008280:	08026be8 	.word	0x08026be8
 8008284:	20000b48 	.word	0x20000b48
 8008288:	08026c0c 	.word	0x08026c0c
 800828c:	08026c28 	.word	0x08026c28
 8008290:	0000ea60 	.word	0x0000ea60

08008294 <WriteMemRegister>:
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8008294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008296:	b087      	sub	sp, #28
 8008298:	af02      	add	r7, sp, #8
 800829a:	0004      	movs	r4, r0
 800829c:	0008      	movs	r0, r1
 800829e:	60ba      	str	r2, [r7, #8]
 80082a0:	0019      	movs	r1, r3
 80082a2:	260e      	movs	r6, #14
 80082a4:	19bb      	adds	r3, r7, r6
 80082a6:	1c22      	adds	r2, r4, #0
 80082a8:	801a      	strh	r2, [r3, #0]
 80082aa:	230c      	movs	r3, #12
 80082ac:	18fb      	adds	r3, r7, r3
 80082ae:	1c02      	adds	r2, r0, #0
 80082b0:	801a      	strh	r2, [r3, #0]
 80082b2:	1dbb      	adds	r3, r7, #6
 80082b4:	1c0a      	adds	r2, r1, #0
 80082b6:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 80082b8:	4b0c      	ldr	r3, [pc, #48]	@ (80082ec <WriteMemRegister+0x58>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d010      	beq.n	80082e2 <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 80082c0:	4b0a      	ldr	r3, [pc, #40]	@ (80082ec <WriteMemRegister+0x58>)
 80082c2:	681c      	ldr	r4, [r3, #0]
 80082c4:	4b0a      	ldr	r3, [pc, #40]	@ (80082f0 <WriteMemRegister+0x5c>)
 80082c6:	7818      	ldrb	r0, [r3, #0]
 80082c8:	68bd      	ldr	r5, [r7, #8]
 80082ca:	230c      	movs	r3, #12
 80082cc:	18fb      	adds	r3, r7, r3
 80082ce:	881a      	ldrh	r2, [r3, #0]
 80082d0:	19bb      	adds	r3, r7, r6
 80082d2:	8819      	ldrh	r1, [r3, #0]
 80082d4:	1dbb      	adds	r3, r7, #6
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	002b      	movs	r3, r5
 80082dc:	47a0      	blx	r4
 80082de:	0003      	movs	r3, r0
 80082e0:	e000      	b.n	80082e4 <WriteMemRegister+0x50>
  }
  return false;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	0018      	movs	r0, r3
 80082e6:	46bd      	mov	sp, r7
 80082e8:	b005      	add	sp, #20
 80082ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ec:	20000b5c 	.word	0x20000b5c
 80082f0:	2000008d 	.word	0x2000008d

080082f4 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80082f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082f6:	b087      	sub	sp, #28
 80082f8:	af02      	add	r7, sp, #8
 80082fa:	0004      	movs	r4, r0
 80082fc:	0008      	movs	r0, r1
 80082fe:	60ba      	str	r2, [r7, #8]
 8008300:	0019      	movs	r1, r3
 8008302:	260e      	movs	r6, #14
 8008304:	19bb      	adds	r3, r7, r6
 8008306:	1c22      	adds	r2, r4, #0
 8008308:	801a      	strh	r2, [r3, #0]
 800830a:	230c      	movs	r3, #12
 800830c:	18fb      	adds	r3, r7, r3
 800830e:	1c02      	adds	r2, r0, #0
 8008310:	801a      	strh	r2, [r3, #0]
 8008312:	1dbb      	adds	r3, r7, #6
 8008314:	1c0a      	adds	r2, r1, #0
 8008316:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8008318:	4b0c      	ldr	r3, [pc, #48]	@ (800834c <ReadMemRegister+0x58>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d010      	beq.n	8008342 <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 8008320:	4b0a      	ldr	r3, [pc, #40]	@ (800834c <ReadMemRegister+0x58>)
 8008322:	681c      	ldr	r4, [r3, #0]
 8008324:	4b0a      	ldr	r3, [pc, #40]	@ (8008350 <ReadMemRegister+0x5c>)
 8008326:	7818      	ldrb	r0, [r3, #0]
 8008328:	68bd      	ldr	r5, [r7, #8]
 800832a:	230c      	movs	r3, #12
 800832c:	18fb      	adds	r3, r7, r3
 800832e:	881a      	ldrh	r2, [r3, #0]
 8008330:	19bb      	adds	r3, r7, r6
 8008332:	8819      	ldrh	r1, [r3, #0]
 8008334:	1dbb      	adds	r3, r7, #6
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	002b      	movs	r3, r5
 800833c:	47a0      	blx	r4
 800833e:	0003      	movs	r3, r0
 8008340:	e000      	b.n	8008344 <ReadMemRegister+0x50>
  }
  return false;
 8008342:	2300      	movs	r3, #0
}
 8008344:	0018      	movs	r0, r3
 8008346:	46bd      	mov	sp, r7
 8008348:	b005      	add	sp, #20
 800834a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800834c:	20000b60 	.word	0x20000b60
 8008350:	2000008d 	.word	0x2000008d

08008354 <BMP280_reset>:

static void BMP280_reset() {
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800835a:	1dfb      	adds	r3, r7, #7
 800835c:	22b6      	movs	r2, #182	@ 0xb6
 800835e:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 8008360:	1dfa      	adds	r2, r7, #7
 8008362:	2301      	movs	r3, #1
 8008364:	2101      	movs	r1, #1
 8008366:	20e0      	movs	r0, #224	@ 0xe0
 8008368:	f7ff ff94 	bl	8008294 <WriteMemRegister>
  Info("BMP280 has been reset");
 800836c:	4a06      	ldr	r2, [pc, #24]	@ (8008388 <BMP280_reset+0x34>)
 800836e:	4b07      	ldr	r3, [pc, #28]	@ (800838c <BMP280_reset+0x38>)
 8008370:	0019      	movs	r1, r3
 8008372:	2002      	movs	r0, #2
 8008374:	f008 f8e2 	bl	801053c <CreateLine>
  HAL_Delay(100);
 8008378:	2064      	movs	r0, #100	@ 0x64
 800837a:	f008 fd35 	bl	8010de8 <HAL_Delay>
}
 800837e:	46c0      	nop			@ (mov r8, r8)
 8008380:	46bd      	mov	sp, r7
 8008382:	b002      	add	sp, #8
 8008384:	bd80      	pop	{r7, pc}
 8008386:	46c0      	nop			@ (mov r8, r8)
 8008388:	08026c2c 	.word	0x08026c2c
 800838c:	08026c44 	.word	0x08026c44

08008390 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 8008390:	b590      	push	{r4, r7, lr}
 8008392:	b083      	sub	sp, #12
 8008394:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 8008396:	4aab      	ldr	r2, [pc, #684]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008398:	231a      	movs	r3, #26
 800839a:	2101      	movs	r1, #1
 800839c:	2088      	movs	r0, #136	@ 0x88
 800839e:	f7ff ffa9 	bl	80082f4 <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 80083a2:	4ba8      	ldr	r3, [pc, #672]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	021b      	lsls	r3, r3, #8
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	4aa6      	ldr	r2, [pc, #664]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80083ac:	7812      	ldrb	r2, [r2, #0]
 80083ae:	189b      	adds	r3, r3, r2
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	4ba5      	ldr	r3, [pc, #660]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 80083b4:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 80083b6:	4ba3      	ldr	r3, [pc, #652]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80083b8:	78db      	ldrb	r3, [r3, #3]
 80083ba:	021b      	lsls	r3, r3, #8
 80083bc:	b29b      	uxth	r3, r3
 80083be:	4aa1      	ldr	r2, [pc, #644]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80083c0:	7892      	ldrb	r2, [r2, #2]
 80083c2:	189b      	adds	r3, r3, r2
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	b21a      	sxth	r2, r3
 80083c8:	4b9f      	ldr	r3, [pc, #636]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 80083ca:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 80083cc:	4b9d      	ldr	r3, [pc, #628]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80083ce:	795b      	ldrb	r3, [r3, #5]
 80083d0:	021b      	lsls	r3, r3, #8
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	4a9b      	ldr	r2, [pc, #620]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80083d6:	7912      	ldrb	r2, [r2, #4]
 80083d8:	189b      	adds	r3, r3, r2
 80083da:	b29b      	uxth	r3, r3
 80083dc:	b21a      	sxth	r2, r3
 80083de:	4b9a      	ldr	r3, [pc, #616]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 80083e0:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 80083e2:	4b98      	ldr	r3, [pc, #608]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80083e4:	79db      	ldrb	r3, [r3, #7]
 80083e6:	021b      	lsls	r3, r3, #8
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	4a96      	ldr	r2, [pc, #600]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80083ec:	7992      	ldrb	r2, [r2, #6]
 80083ee:	189b      	adds	r3, r3, r2
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	4b95      	ldr	r3, [pc, #596]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 80083f4:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 80083f6:	4b93      	ldr	r3, [pc, #588]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80083f8:	7a5b      	ldrb	r3, [r3, #9]
 80083fa:	021b      	lsls	r3, r3, #8
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	4a91      	ldr	r2, [pc, #580]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008400:	7a12      	ldrb	r2, [r2, #8]
 8008402:	189b      	adds	r3, r3, r2
 8008404:	b29b      	uxth	r3, r3
 8008406:	b21a      	sxth	r2, r3
 8008408:	4b8f      	ldr	r3, [pc, #572]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 800840a:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 800840c:	4b8d      	ldr	r3, [pc, #564]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 800840e:	7adb      	ldrb	r3, [r3, #11]
 8008410:	021b      	lsls	r3, r3, #8
 8008412:	b29b      	uxth	r3, r3
 8008414:	4a8b      	ldr	r2, [pc, #556]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008416:	7a92      	ldrb	r2, [r2, #10]
 8008418:	189b      	adds	r3, r3, r2
 800841a:	b29b      	uxth	r3, r3
 800841c:	b21a      	sxth	r2, r3
 800841e:	4b8a      	ldr	r3, [pc, #552]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 8008420:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 8008422:	4b88      	ldr	r3, [pc, #544]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008424:	7b5b      	ldrb	r3, [r3, #13]
 8008426:	021b      	lsls	r3, r3, #8
 8008428:	b29b      	uxth	r3, r3
 800842a:	4a86      	ldr	r2, [pc, #536]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 800842c:	7b12      	ldrb	r2, [r2, #12]
 800842e:	189b      	adds	r3, r3, r2
 8008430:	b29b      	uxth	r3, r3
 8008432:	b21a      	sxth	r2, r3
 8008434:	4b84      	ldr	r3, [pc, #528]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 8008436:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 8008438:	4b82      	ldr	r3, [pc, #520]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 800843a:	7bdb      	ldrb	r3, [r3, #15]
 800843c:	021b      	lsls	r3, r3, #8
 800843e:	b29b      	uxth	r3, r3
 8008440:	4a80      	ldr	r2, [pc, #512]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008442:	7b92      	ldrb	r2, [r2, #14]
 8008444:	189b      	adds	r3, r3, r2
 8008446:	b29b      	uxth	r3, r3
 8008448:	b21a      	sxth	r2, r3
 800844a:	4b7f      	ldr	r3, [pc, #508]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 800844c:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 800844e:	4b7d      	ldr	r3, [pc, #500]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008450:	7c5b      	ldrb	r3, [r3, #17]
 8008452:	021b      	lsls	r3, r3, #8
 8008454:	b29b      	uxth	r3, r3
 8008456:	4a7b      	ldr	r2, [pc, #492]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008458:	7c12      	ldrb	r2, [r2, #16]
 800845a:	189b      	adds	r3, r3, r2
 800845c:	b29b      	uxth	r3, r3
 800845e:	b21a      	sxth	r2, r3
 8008460:	4b79      	ldr	r3, [pc, #484]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 8008462:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 8008464:	4b77      	ldr	r3, [pc, #476]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008466:	7cdb      	ldrb	r3, [r3, #19]
 8008468:	021b      	lsls	r3, r3, #8
 800846a:	b29b      	uxth	r3, r3
 800846c:	4a75      	ldr	r2, [pc, #468]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 800846e:	7c92      	ldrb	r2, [r2, #18]
 8008470:	189b      	adds	r3, r3, r2
 8008472:	b29b      	uxth	r3, r3
 8008474:	b21a      	sxth	r2, r3
 8008476:	4b74      	ldr	r3, [pc, #464]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 8008478:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800847a:	4b72      	ldr	r3, [pc, #456]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 800847c:	7d5b      	ldrb	r3, [r3, #21]
 800847e:	021b      	lsls	r3, r3, #8
 8008480:	b29b      	uxth	r3, r3
 8008482:	4a70      	ldr	r2, [pc, #448]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008484:	7d12      	ldrb	r2, [r2, #20]
 8008486:	189b      	adds	r3, r3, r2
 8008488:	b29b      	uxth	r3, r3
 800848a:	b21a      	sxth	r2, r3
 800848c:	4b6e      	ldr	r3, [pc, #440]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 800848e:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 8008490:	4b6c      	ldr	r3, [pc, #432]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008492:	7ddb      	ldrb	r3, [r3, #23]
 8008494:	021b      	lsls	r3, r3, #8
 8008496:	b29b      	uxth	r3, r3
 8008498:	4a6a      	ldr	r2, [pc, #424]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 800849a:	7d92      	ldrb	r2, [r2, #22]
 800849c:	189b      	adds	r3, r3, r2
 800849e:	b29b      	uxth	r3, r3
 80084a0:	b21a      	sxth	r2, r3
 80084a2:	4b69      	ldr	r3, [pc, #420]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 80084a4:	82da      	strh	r2, [r3, #22]
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 80084a6:	4b67      	ldr	r3, [pc, #412]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80084a8:	785b      	ldrb	r3, [r3, #1]
 80084aa:	001c      	movs	r4, r3
 80084ac:	4b65      	ldr	r3, [pc, #404]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	0018      	movs	r0, r3
 80084b2:	4b65      	ldr	r3, [pc, #404]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	4a65      	ldr	r2, [pc, #404]	@ (800864c <BMP280_get_calibration+0x2bc>)
 80084b8:	4965      	ldr	r1, [pc, #404]	@ (8008650 <BMP280_get_calibration+0x2c0>)
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	9000      	str	r0, [sp, #0]
 80084be:	0023      	movs	r3, r4
 80084c0:	2003      	movs	r0, #3
 80084c2:	f008 f83b 	bl	801053c <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 80084c6:	4b5f      	ldr	r3, [pc, #380]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80084c8:	78db      	ldrb	r3, [r3, #3]
 80084ca:	001c      	movs	r4, r3
 80084cc:	4b5d      	ldr	r3, [pc, #372]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80084ce:	789b      	ldrb	r3, [r3, #2]
 80084d0:	0018      	movs	r0, r3
 80084d2:	4b5d      	ldr	r3, [pc, #372]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 80084d4:	2202      	movs	r2, #2
 80084d6:	5e9b      	ldrsh	r3, [r3, r2]
 80084d8:	4a5e      	ldr	r2, [pc, #376]	@ (8008654 <BMP280_get_calibration+0x2c4>)
 80084da:	495d      	ldr	r1, [pc, #372]	@ (8008650 <BMP280_get_calibration+0x2c0>)
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	9000      	str	r0, [sp, #0]
 80084e0:	0023      	movs	r3, r4
 80084e2:	2003      	movs	r0, #3
 80084e4:	f008 f82a 	bl	801053c <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 80084e8:	4b56      	ldr	r3, [pc, #344]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80084ea:	795b      	ldrb	r3, [r3, #5]
 80084ec:	001c      	movs	r4, r3
 80084ee:	4b55      	ldr	r3, [pc, #340]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80084f0:	791b      	ldrb	r3, [r3, #4]
 80084f2:	0018      	movs	r0, r3
 80084f4:	4b54      	ldr	r3, [pc, #336]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 80084f6:	2204      	movs	r2, #4
 80084f8:	5e9b      	ldrsh	r3, [r3, r2]
 80084fa:	4a57      	ldr	r2, [pc, #348]	@ (8008658 <BMP280_get_calibration+0x2c8>)
 80084fc:	4954      	ldr	r1, [pc, #336]	@ (8008650 <BMP280_get_calibration+0x2c0>)
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	9000      	str	r0, [sp, #0]
 8008502:	0023      	movs	r3, r4
 8008504:	2003      	movs	r0, #3
 8008506:	f008 f819 	bl	801053c <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 800850a:	4b4e      	ldr	r3, [pc, #312]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 800850c:	79db      	ldrb	r3, [r3, #7]
 800850e:	001c      	movs	r4, r3
 8008510:	4b4c      	ldr	r3, [pc, #304]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008512:	799b      	ldrb	r3, [r3, #6]
 8008514:	0018      	movs	r0, r3
 8008516:	4b4c      	ldr	r3, [pc, #304]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 8008518:	88db      	ldrh	r3, [r3, #6]
 800851a:	4a50      	ldr	r2, [pc, #320]	@ (800865c <BMP280_get_calibration+0x2cc>)
 800851c:	494c      	ldr	r1, [pc, #304]	@ (8008650 <BMP280_get_calibration+0x2c0>)
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	9000      	str	r0, [sp, #0]
 8008522:	0023      	movs	r3, r4
 8008524:	2003      	movs	r0, #3
 8008526:	f008 f809 	bl	801053c <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 800852a:	4b46      	ldr	r3, [pc, #280]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 800852c:	7a5b      	ldrb	r3, [r3, #9]
 800852e:	001c      	movs	r4, r3
 8008530:	4b44      	ldr	r3, [pc, #272]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008532:	7a1b      	ldrb	r3, [r3, #8]
 8008534:	0018      	movs	r0, r3
 8008536:	4b44      	ldr	r3, [pc, #272]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 8008538:	2208      	movs	r2, #8
 800853a:	5e9b      	ldrsh	r3, [r3, r2]
 800853c:	4a48      	ldr	r2, [pc, #288]	@ (8008660 <BMP280_get_calibration+0x2d0>)
 800853e:	4944      	ldr	r1, [pc, #272]	@ (8008650 <BMP280_get_calibration+0x2c0>)
 8008540:	9301      	str	r3, [sp, #4]
 8008542:	9000      	str	r0, [sp, #0]
 8008544:	0023      	movs	r3, r4
 8008546:	2003      	movs	r0, #3
 8008548:	f007 fff8 	bl	801053c <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 800854c:	4b3d      	ldr	r3, [pc, #244]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 800854e:	7adb      	ldrb	r3, [r3, #11]
 8008550:	001c      	movs	r4, r3
 8008552:	4b3c      	ldr	r3, [pc, #240]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008554:	7a9b      	ldrb	r3, [r3, #10]
 8008556:	0018      	movs	r0, r3
 8008558:	4b3b      	ldr	r3, [pc, #236]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 800855a:	220a      	movs	r2, #10
 800855c:	5e9b      	ldrsh	r3, [r3, r2]
 800855e:	4a41      	ldr	r2, [pc, #260]	@ (8008664 <BMP280_get_calibration+0x2d4>)
 8008560:	493b      	ldr	r1, [pc, #236]	@ (8008650 <BMP280_get_calibration+0x2c0>)
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	9000      	str	r0, [sp, #0]
 8008566:	0023      	movs	r3, r4
 8008568:	2003      	movs	r0, #3
 800856a:	f007 ffe7 	bl	801053c <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 800856e:	4b35      	ldr	r3, [pc, #212]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008570:	7b5b      	ldrb	r3, [r3, #13]
 8008572:	001c      	movs	r4, r3
 8008574:	4b33      	ldr	r3, [pc, #204]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008576:	7b1b      	ldrb	r3, [r3, #12]
 8008578:	0018      	movs	r0, r3
 800857a:	4b33      	ldr	r3, [pc, #204]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 800857c:	220c      	movs	r2, #12
 800857e:	5e9b      	ldrsh	r3, [r3, r2]
 8008580:	4a39      	ldr	r2, [pc, #228]	@ (8008668 <BMP280_get_calibration+0x2d8>)
 8008582:	4933      	ldr	r1, [pc, #204]	@ (8008650 <BMP280_get_calibration+0x2c0>)
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	9000      	str	r0, [sp, #0]
 8008588:	0023      	movs	r3, r4
 800858a:	2003      	movs	r0, #3
 800858c:	f007 ffd6 	bl	801053c <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 8008590:	4b2c      	ldr	r3, [pc, #176]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008592:	7bdb      	ldrb	r3, [r3, #15]
 8008594:	001c      	movs	r4, r3
 8008596:	4b2b      	ldr	r3, [pc, #172]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008598:	7b9b      	ldrb	r3, [r3, #14]
 800859a:	0018      	movs	r0, r3
 800859c:	4b2a      	ldr	r3, [pc, #168]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 800859e:	220e      	movs	r2, #14
 80085a0:	5e9b      	ldrsh	r3, [r3, r2]
 80085a2:	4a32      	ldr	r2, [pc, #200]	@ (800866c <BMP280_get_calibration+0x2dc>)
 80085a4:	492a      	ldr	r1, [pc, #168]	@ (8008650 <BMP280_get_calibration+0x2c0>)
 80085a6:	9301      	str	r3, [sp, #4]
 80085a8:	9000      	str	r0, [sp, #0]
 80085aa:	0023      	movs	r3, r4
 80085ac:	2003      	movs	r0, #3
 80085ae:	f007 ffc5 	bl	801053c <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 80085b2:	4b24      	ldr	r3, [pc, #144]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80085b4:	7c5b      	ldrb	r3, [r3, #17]
 80085b6:	001c      	movs	r4, r3
 80085b8:	4b22      	ldr	r3, [pc, #136]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80085ba:	7c1b      	ldrb	r3, [r3, #16]
 80085bc:	0018      	movs	r0, r3
 80085be:	4b22      	ldr	r3, [pc, #136]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 80085c0:	2210      	movs	r2, #16
 80085c2:	5e9b      	ldrsh	r3, [r3, r2]
 80085c4:	4a2a      	ldr	r2, [pc, #168]	@ (8008670 <BMP280_get_calibration+0x2e0>)
 80085c6:	4922      	ldr	r1, [pc, #136]	@ (8008650 <BMP280_get_calibration+0x2c0>)
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	9000      	str	r0, [sp, #0]
 80085cc:	0023      	movs	r3, r4
 80085ce:	2003      	movs	r0, #3
 80085d0:	f007 ffb4 	bl	801053c <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 80085d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80085d6:	7cdb      	ldrb	r3, [r3, #19]
 80085d8:	001c      	movs	r4, r3
 80085da:	4b1a      	ldr	r3, [pc, #104]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80085dc:	7c9b      	ldrb	r3, [r3, #18]
 80085de:	0018      	movs	r0, r3
 80085e0:	4b19      	ldr	r3, [pc, #100]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 80085e2:	2212      	movs	r2, #18
 80085e4:	5e9b      	ldrsh	r3, [r3, r2]
 80085e6:	4a23      	ldr	r2, [pc, #140]	@ (8008674 <BMP280_get_calibration+0x2e4>)
 80085e8:	4919      	ldr	r1, [pc, #100]	@ (8008650 <BMP280_get_calibration+0x2c0>)
 80085ea:	9301      	str	r3, [sp, #4]
 80085ec:	9000      	str	r0, [sp, #0]
 80085ee:	0023      	movs	r3, r4
 80085f0:	2003      	movs	r0, #3
 80085f2:	f007 ffa3 	bl	801053c <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 80085f6:	4b13      	ldr	r3, [pc, #76]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80085f8:	7d5b      	ldrb	r3, [r3, #21]
 80085fa:	001c      	movs	r4, r3
 80085fc:	4b11      	ldr	r3, [pc, #68]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 80085fe:	7d1b      	ldrb	r3, [r3, #20]
 8008600:	0018      	movs	r0, r3
 8008602:	4b11      	ldr	r3, [pc, #68]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 8008604:	2214      	movs	r2, #20
 8008606:	5e9b      	ldrsh	r3, [r3, r2]
 8008608:	4a1b      	ldr	r2, [pc, #108]	@ (8008678 <BMP280_get_calibration+0x2e8>)
 800860a:	4911      	ldr	r1, [pc, #68]	@ (8008650 <BMP280_get_calibration+0x2c0>)
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	9000      	str	r0, [sp, #0]
 8008610:	0023      	movs	r3, r4
 8008612:	2003      	movs	r0, #3
 8008614:	f007 ff92 	bl	801053c <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 8008618:	4b0a      	ldr	r3, [pc, #40]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 800861a:	7ddb      	ldrb	r3, [r3, #23]
 800861c:	001c      	movs	r4, r3
 800861e:	4b09      	ldr	r3, [pc, #36]	@ (8008644 <BMP280_get_calibration+0x2b4>)
 8008620:	7d9b      	ldrb	r3, [r3, #22]
 8008622:	0018      	movs	r0, r3
 8008624:	4b08      	ldr	r3, [pc, #32]	@ (8008648 <BMP280_get_calibration+0x2b8>)
 8008626:	2216      	movs	r2, #22
 8008628:	5e9b      	ldrsh	r3, [r3, r2]
 800862a:	4a14      	ldr	r2, [pc, #80]	@ (800867c <BMP280_get_calibration+0x2ec>)
 800862c:	4908      	ldr	r1, [pc, #32]	@ (8008650 <BMP280_get_calibration+0x2c0>)
 800862e:	9301      	str	r3, [sp, #4]
 8008630:	9000      	str	r0, [sp, #0]
 8008632:	0023      	movs	r3, r4
 8008634:	2003      	movs	r0, #3
 8008636:	f007 ff81 	bl	801053c <CreateLine>
}
 800863a:	46c0      	nop			@ (mov r8, r8)
 800863c:	46bd      	mov	sp, r7
 800863e:	b001      	add	sp, #4
 8008640:	bd90      	pop	{r4, r7, pc}
 8008642:	46c0      	nop			@ (mov r8, r8)
 8008644:	20000b8c 	.word	0x20000b8c
 8008648:	20000b64 	.word	0x20000b64
 800864c:	08026c48 	.word	0x08026c48
 8008650:	08026c7c 	.word	0x08026c7c
 8008654:	08026c80 	.word	0x08026c80
 8008658:	08026cb4 	.word	0x08026cb4
 800865c:	08026ce8 	.word	0x08026ce8
 8008660:	08026d1c 	.word	0x08026d1c
 8008664:	08026d50 	.word	0x08026d50
 8008668:	08026d84 	.word	0x08026d84
 800866c:	08026db8 	.word	0x08026db8
 8008670:	08026dec 	.word	0x08026dec
 8008674:	08026e20 	.word	0x08026e20
 8008678:	08026e54 	.word	0x08026e54
 800867c:	08026e88 	.word	0x08026e88

08008680 <BMP280_probe>:

static bool BMP280_probe() {
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 8008686:	4b34      	ldr	r3, [pc, #208]	@ (8008758 <BMP280_probe+0xd8>)
 8008688:	2276      	movs	r2, #118	@ 0x76
 800868a:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800868c:	1dba      	adds	r2, r7, #6
 800868e:	2301      	movs	r3, #1
 8008690:	2101      	movs	r1, #1
 8008692:	20d0      	movs	r0, #208	@ 0xd0
 8008694:	f7ff fe2e 	bl	80082f4 <ReadMemRegister>
 8008698:	0003      	movs	r3, r0
 800869a:	001a      	movs	r2, r3
 800869c:	1dfb      	adds	r3, r7, #7
 800869e:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 80086a0:	1dfb      	adds	r3, r7, #7
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	b25b      	sxtb	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <BMP280_probe+0x40>
 80086aa:	1dbb      	adds	r3, r7, #6
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d006      	beq.n	80086c0 <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 80086b2:	1dbb      	adds	r3, r7, #6
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	4a29      	ldr	r2, [pc, #164]	@ (800875c <BMP280_probe+0xdc>)
 80086b8:	4929      	ldr	r1, [pc, #164]	@ (8008760 <BMP280_probe+0xe0>)
 80086ba:	2003      	movs	r0, #3
 80086bc:	f007 ff3e 	bl	801053c <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 80086c0:	1dbb      	adds	r3, r7, #6
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b58      	cmp	r3, #88	@ 0x58
 80086c6:	d01f      	beq.n	8008708 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 80086c8:	4b23      	ldr	r3, [pc, #140]	@ (8008758 <BMP280_probe+0xd8>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	3301      	adds	r3, #1
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	4b21      	ldr	r3, [pc, #132]	@ (8008758 <BMP280_probe+0xd8>)
 80086d2:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 80086d4:	1dba      	adds	r2, r7, #6
 80086d6:	2301      	movs	r3, #1
 80086d8:	2101      	movs	r1, #1
 80086da:	20d0      	movs	r0, #208	@ 0xd0
 80086dc:	f7ff fe0a 	bl	80082f4 <ReadMemRegister>
 80086e0:	0003      	movs	r3, r0
 80086e2:	001a      	movs	r2, r3
 80086e4:	1dfb      	adds	r3, r7, #7
 80086e6:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 80086e8:	1dfb      	adds	r3, r7, #7
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	b25b      	sxtb	r3, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00a      	beq.n	8008708 <BMP280_probe+0x88>
 80086f2:	1dbb      	adds	r3, r7, #6
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d006      	beq.n	8008708 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 80086fa:	1dbb      	adds	r3, r7, #6
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	4a17      	ldr	r2, [pc, #92]	@ (800875c <BMP280_probe+0xdc>)
 8008700:	4917      	ldr	r1, [pc, #92]	@ (8008760 <BMP280_probe+0xe0>)
 8008702:	2003      	movs	r0, #3
 8008704:	f007 ff1a 	bl	801053c <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 8008708:	1dbb      	adds	r3, r7, #6
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	2b58      	cmp	r3, #88	@ 0x58
 800870e:	d110      	bne.n	8008732 <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 8008710:	1dbb      	adds	r3, r7, #6
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	0018      	movs	r0, r3
 8008716:	4b10      	ldr	r3, [pc, #64]	@ (8008758 <BMP280_probe+0xd8>)
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	4a12      	ldr	r2, [pc, #72]	@ (8008764 <BMP280_probe+0xe4>)
 800871c:	4912      	ldr	r1, [pc, #72]	@ (8008768 <BMP280_probe+0xe8>)
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	0003      	movs	r3, r0
 8008722:	2002      	movs	r0, #2
 8008724:	f007 ff0a 	bl	801053c <CreateLine>
      BMP280_reset(); // get an initial state
 8008728:	f7ff fe14 	bl	8008354 <BMP280_reset>
      BMP280_get_calibration();
 800872c:	f7ff fe30 	bl	8008390 <BMP280_get_calibration>
 8008730:	e008      	b.n	8008744 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 8008732:	4b09      	ldr	r3, [pc, #36]	@ (8008758 <BMP280_probe+0xd8>)
 8008734:	2200      	movs	r2, #0
 8008736:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 8008738:	4a0c      	ldr	r2, [pc, #48]	@ (800876c <BMP280_probe+0xec>)
 800873a:	4b0d      	ldr	r3, [pc, #52]	@ (8008770 <BMP280_probe+0xf0>)
 800873c:	0019      	movs	r1, r3
 800873e:	2001      	movs	r0, #1
 8008740:	f007 fefc 	bl	801053c <CreateLine>
    }
    return bmp280I2Caddr;
 8008744:	4b04      	ldr	r3, [pc, #16]	@ (8008758 <BMP280_probe+0xd8>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	1e5a      	subs	r2, r3, #1
 800874a:	4193      	sbcs	r3, r2
 800874c:	b2db      	uxtb	r3, r3
}
 800874e:	0018      	movs	r0, r3
 8008750:	46bd      	mov	sp, r7
 8008752:	b002      	add	sp, #8
 8008754:	bd80      	pop	{r7, pc}
 8008756:	46c0      	nop			@ (mov r8, r8)
 8008758:	2000008d 	.word	0x2000008d
 800875c:	08026ebc 	.word	0x08026ebc
 8008760:	08026c7c 	.word	0x08026c7c
 8008764:	08026eec 	.word	0x08026eec
 8008768:	08026c44 	.word	0x08026c44
 800876c:	08026f24 	.word	0x08026f24
 8008770:	08026f38 	.word	0x08026f38

08008774 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0
  return BMP280_probe();
 8008778:	f7ff ff82 	bl	8008680 <BMP280_probe>
 800877c:	0003      	movs	r3, r0
}
 800877e:	0018      	movs	r0, r3
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800878e:	4b05      	ldr	r3, [pc, #20]	@ (80087a4 <BMP_Init+0x20>)
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 8008794:	4b04      	ldr	r3, [pc, #16]	@ (80087a8 <BMP_Init+0x24>)
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	601a      	str	r2, [r3, #0]
  if (BMP280_probe() == 0) {
 800879a:	f7ff ff71 	bl	8008680 <BMP280_probe>
    return;
  }
// register hier de sensor om mee te doen in de meetcyclus
}
 800879e:	46bd      	mov	sp, r7
 80087a0:	b002      	add	sp, #8
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20000b60 	.word	0x20000b60
 80087a8:	20000b5c 	.word	0x20000b5c

080087ac <BMP280_set_config>:


static bool BMP280_set_config() {
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 80087b2:	1dbb      	adds	r3, r7, #6
 80087b4:	228c      	movs	r2, #140	@ 0x8c
 80087b6:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 80087b8:	1dba      	adds	r2, r7, #6
 80087ba:	2301      	movs	r3, #1
 80087bc:	2101      	movs	r1, #1
 80087be:	20f5      	movs	r0, #245	@ 0xf5
 80087c0:	f7ff fd68 	bl	8008294 <WriteMemRegister>
 80087c4:	0003      	movs	r3, r0
 80087c6:	001a      	movs	r2, r3
 80087c8:	1dfb      	adds	r3, r7, #7
 80087ca:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 80087cc:	f008 fb02 	bl	8010dd4 <HAL_GetTick>
 80087d0:	0003      	movs	r3, r0
 80087d2:	330a      	adds	r3, #10
 80087d4:	001a      	movs	r2, r3
 80087d6:	4b06      	ldr	r3, [pc, #24]	@ (80087f0 <BMP280_set_config+0x44>)
 80087d8:	601a      	str	r2, [r3, #0]
  return rslt;
 80087da:	1dfb      	adds	r3, r7, #7
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	b25b      	sxtb	r3, r3
 80087e0:	1e5a      	subs	r2, r3, #1
 80087e2:	4193      	sbcs	r3, r2
 80087e4:	b2db      	uxtb	r3, r3
}
 80087e6:	0018      	movs	r0, r3
 80087e8:	46bd      	mov	sp, r7
 80087ea:	b002      	add	sp, #8
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	46c0      	nop			@ (mov r8, r8)
 80087f0:	20000b88 	.word	0x20000b88

080087f4 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 80087fa:	1dbb      	adds	r3, r7, #6
 80087fc:	2208      	movs	r2, #8
 80087fe:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 8008800:	4b22      	ldr	r3, [pc, #136]	@ (800888c <BMP280_set_mode+0x98>)
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	224c      	movs	r2, #76	@ 0x4c
 8008806:	4313      	orrs	r3, r2
 8008808:	b2da      	uxtb	r2, r3
 800880a:	1d7b      	adds	r3, r7, #5
 800880c:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800880e:	1d7a      	adds	r2, r7, #5
 8008810:	2301      	movs	r3, #1
 8008812:	2101      	movs	r1, #1
 8008814:	20f4      	movs	r0, #244	@ 0xf4
 8008816:	f7ff fd3d 	bl	8008294 <WriteMemRegister>
 800881a:	0003      	movs	r3, r0
 800881c:	001a      	movs	r2, r3
 800881e:	1dfb      	adds	r3, r7, #7
 8008820:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 8008822:	f008 fad7 	bl	8010dd4 <HAL_GetTick>
 8008826:	0003      	movs	r3, r0
 8008828:	22fa      	movs	r2, #250	@ 0xfa
 800882a:	0092      	lsls	r2, r2, #2
 800882c:	189a      	adds	r2, r3, r2
 800882e:	4b18      	ldr	r3, [pc, #96]	@ (8008890 <BMP280_set_mode+0x9c>)
 8008830:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 8008832:	e016      	b.n	8008862 <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 8008834:	1dba      	adds	r2, r7, #6
 8008836:	2301      	movs	r3, #1
 8008838:	2101      	movs	r1, #1
 800883a:	20f3      	movs	r0, #243	@ 0xf3
 800883c:	f7ff fd5a 	bl	80082f4 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 8008840:	4b13      	ldr	r3, [pc, #76]	@ (8008890 <BMP280_set_mode+0x9c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	0018      	movs	r0, r3
 8008846:	f007 fe23 	bl	8010490 <TimestampIsReached>
 800884a:	1e03      	subs	r3, r0, #0
 800884c:	d006      	beq.n	800885c <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 800884e:	4a11      	ldr	r2, [pc, #68]	@ (8008894 <BMP280_set_mode+0xa0>)
 8008850:	4b11      	ldr	r3, [pc, #68]	@ (8008898 <BMP280_set_mode+0xa4>)
 8008852:	0019      	movs	r1, r3
 8008854:	2001      	movs	r0, #1
 8008856:	f007 fe71 	bl	801053c <CreateLine>
      break;
 800885a:	e008      	b.n	800886e <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 800885c:	2001      	movs	r0, #1
 800885e:	f008 fac3 	bl	8010de8 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 8008862:	1dbb      	adds	r3, r7, #6
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	001a      	movs	r2, r3
 8008868:	2308      	movs	r3, #8
 800886a:	4013      	ands	r3, r2
 800886c:	d1e2      	bne.n	8008834 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 800886e:	f008 fab1 	bl	8010dd4 <HAL_GetTick>
 8008872:	0002      	movs	r2, r0
 8008874:	4b06      	ldr	r3, [pc, #24]	@ (8008890 <BMP280_set_mode+0x9c>)
 8008876:	601a      	str	r2, [r3, #0]
  return rslt;
 8008878:	1dfb      	adds	r3, r7, #7
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	b25b      	sxtb	r3, r3
 800887e:	1e5a      	subs	r2, r3, #1
 8008880:	4193      	sbcs	r3, r2
 8008882:	b2db      	uxtb	r3, r3
}
 8008884:	0018      	movs	r0, r3
 8008886:	46bd      	mov	sp, r7
 8008888:	b002      	add	sp, #8
 800888a:	bd80      	pop	{r7, pc}
 800888c:	2000008e 	.word	0x2000008e
 8008890:	20000b88 	.word	0x20000b88
 8008894:	08026f3c 	.word	0x08026f3c
 8008898:	08026f38 	.word	0x08026f38

0800889c <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 80088a2:	1dba      	adds	r2, r7, #6
 80088a4:	2301      	movs	r3, #1
 80088a6:	2101      	movs	r1, #1
 80088a8:	20f4      	movs	r0, #244	@ 0xf4
 80088aa:	f7ff fd23 	bl	80082f4 <ReadMemRegister>
 80088ae:	0003      	movs	r3, r0
 80088b0:	001a      	movs	r2, r3
 80088b2:	1dfb      	adds	r3, r7, #7
 80088b4:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 80088b6:	1dbb      	adds	r3, r7, #6
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2203      	movs	r2, #3
 80088bc:	4013      	ands	r3, r2
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	1dbb      	adds	r3, r7, #6
 80088c2:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 80088c4:	f008 fa86 	bl	8010dd4 <HAL_GetTick>
 80088c8:	0003      	movs	r3, r0
 80088ca:	330a      	adds	r3, #10
 80088cc:	001a      	movs	r2, r3
 80088ce:	4b08      	ldr	r3, [pc, #32]	@ (80088f0 <BMP280_get_mode+0x54>)
 80088d0:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 80088d2:	1dfb      	adds	r3, r7, #7
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	b25b      	sxtb	r3, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d102      	bne.n	80088e2 <BMP280_get_mode+0x46>
    bmpData = 255;
 80088dc:	1dbb      	adds	r3, r7, #6
 80088de:	22ff      	movs	r2, #255	@ 0xff
 80088e0:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 80088e2:	1dbb      	adds	r3, r7, #6
 80088e4:	781b      	ldrb	r3, [r3, #0]
}
 80088e6:	0018      	movs	r0, r3
 80088e8:	46bd      	mov	sp, r7
 80088ea:	b002      	add	sp, #8
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	46c0      	nop			@ (mov r8, r8)
 80088f0:	20000b88 	.word	0x20000b88

080088f4 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 80088f4:	b5b0      	push	{r4, r5, r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 80088fa:	1d3a      	adds	r2, r7, #4
 80088fc:	2306      	movs	r3, #6
 80088fe:	2101      	movs	r1, #1
 8008900:	20f7      	movs	r0, #247	@ 0xf7
 8008902:	f7ff fcf7 	bl	80082f4 <ReadMemRegister>
 8008906:	0003      	movs	r3, r0
 8008908:	001a      	movs	r2, r3
 800890a:	230f      	movs	r3, #15
 800890c:	18fb      	adds	r3, r7, r3
 800890e:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 8008910:	1d3b      	adds	r3, r7, #4
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	2b80      	cmp	r3, #128	@ 0x80
 8008916:	d00f      	beq.n	8008938 <BMP280_get_measurement_values+0x44>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 8008918:	1d3b      	adds	r3, r7, #4
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	031a      	lsls	r2, r3, #12
 800891e:	1d3b      	adds	r3, r7, #4
 8008920:	785b      	ldrb	r3, [r3, #1]
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	18d3      	adds	r3, r2, r3
 8008926:	1d3a      	adds	r2, r7, #4
 8008928:	7892      	ldrb	r2, [r2, #2]
 800892a:	0912      	lsrs	r2, r2, #4
 800892c:	b2d2      	uxtb	r2, r2
 800892e:	189b      	adds	r3, r3, r2
 8008930:	001a      	movs	r2, r3
 8008932:	4b2b      	ldr	r3, [pc, #172]	@ (80089e0 <BMP280_get_measurement_values+0xec>)
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	e019      	b.n	800896c <BMP280_get_measurement_values+0x78>
  }
  else {
    Error("BMP280 Invalid read of barometric pressure, using previous value.");
 8008938:	4a2a      	ldr	r2, [pc, #168]	@ (80089e4 <BMP280_get_measurement_values+0xf0>)
 800893a:	4b2b      	ldr	r3, [pc, #172]	@ (80089e8 <BMP280_get_measurement_values+0xf4>)
 800893c:	0019      	movs	r1, r3
 800893e:	2001      	movs	r0, #1
 8008940:	f007 fdfc 	bl	801053c <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 8008944:	1d3b      	adds	r3, r7, #4
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	001d      	movs	r5, r3
 800894a:	1d3b      	adds	r3, r7, #4
 800894c:	785b      	ldrb	r3, [r3, #1]
 800894e:	0018      	movs	r0, r3
 8008950:	1d3b      	adds	r3, r7, #4
 8008952:	789b      	ldrb	r3, [r3, #2]
 8008954:	001c      	movs	r4, r3
 8008956:	4b22      	ldr	r3, [pc, #136]	@ (80089e0 <BMP280_get_measurement_values+0xec>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a24      	ldr	r2, [pc, #144]	@ (80089ec <BMP280_get_measurement_values+0xf8>)
 800895c:	4924      	ldr	r1, [pc, #144]	@ (80089f0 <BMP280_get_measurement_values+0xfc>)
 800895e:	9302      	str	r3, [sp, #8]
 8008960:	9401      	str	r4, [sp, #4]
 8008962:	9000      	str	r0, [sp, #0]
 8008964:	002b      	movs	r3, r5
 8008966:	2003      	movs	r0, #3
 8008968:	f007 fde8 	bl	801053c <CreateLine>
  }
  if (bmpData[3] != 0x80) {
 800896c:	1d3b      	adds	r3, r7, #4
 800896e:	78db      	ldrb	r3, [r3, #3]
 8008970:	2b80      	cmp	r3, #128	@ 0x80
 8008972:	d00f      	beq.n	8008994 <BMP280_get_measurement_values+0xa0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 8008974:	1d3b      	adds	r3, r7, #4
 8008976:	78db      	ldrb	r3, [r3, #3]
 8008978:	031a      	lsls	r2, r3, #12
 800897a:	1d3b      	adds	r3, r7, #4
 800897c:	791b      	ldrb	r3, [r3, #4]
 800897e:	011b      	lsls	r3, r3, #4
 8008980:	18d3      	adds	r3, r2, r3
 8008982:	1d3a      	adds	r2, r7, #4
 8008984:	7952      	ldrb	r2, [r2, #5]
 8008986:	0912      	lsrs	r2, r2, #4
 8008988:	b2d2      	uxtb	r2, r2
 800898a:	189b      	adds	r3, r3, r2
 800898c:	001a      	movs	r2, r3
 800898e:	4b19      	ldr	r3, [pc, #100]	@ (80089f4 <BMP280_get_measurement_values+0x100>)
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	e019      	b.n	80089c8 <BMP280_get_measurement_values+0xd4>
  }
  else {
    Error("BMP280 Invalid read of temperature, using previous value.");
 8008994:	4a18      	ldr	r2, [pc, #96]	@ (80089f8 <BMP280_get_measurement_values+0x104>)
 8008996:	4b14      	ldr	r3, [pc, #80]	@ (80089e8 <BMP280_get_measurement_values+0xf4>)
 8008998:	0019      	movs	r1, r3
 800899a:	2001      	movs	r0, #1
 800899c:	f007 fdce 	bl	801053c <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 80089a0:	1d3b      	adds	r3, r7, #4
 80089a2:	78db      	ldrb	r3, [r3, #3]
 80089a4:	001d      	movs	r5, r3
 80089a6:	1d3b      	adds	r3, r7, #4
 80089a8:	791b      	ldrb	r3, [r3, #4]
 80089aa:	0018      	movs	r0, r3
 80089ac:	1d3b      	adds	r3, r7, #4
 80089ae:	795b      	ldrb	r3, [r3, #5]
 80089b0:	001c      	movs	r4, r3
 80089b2:	4b10      	ldr	r3, [pc, #64]	@ (80089f4 <BMP280_get_measurement_values+0x100>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a11      	ldr	r2, [pc, #68]	@ (80089fc <BMP280_get_measurement_values+0x108>)
 80089b8:	490d      	ldr	r1, [pc, #52]	@ (80089f0 <BMP280_get_measurement_values+0xfc>)
 80089ba:	9302      	str	r3, [sp, #8]
 80089bc:	9401      	str	r4, [sp, #4]
 80089be:	9000      	str	r0, [sp, #0]
 80089c0:	002b      	movs	r3, r5
 80089c2:	2003      	movs	r0, #3
 80089c4:	f007 fdba 	bl	801053c <CreateLine>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 80089c8:	230f      	movs	r3, #15
 80089ca:	18fb      	adds	r3, r7, r3
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	b25b      	sxtb	r3, r3
 80089d0:	1e5a      	subs	r2, r3, #1
 80089d2:	4193      	sbcs	r3, r2
 80089d4:	b2db      	uxtb	r3, r3
}
 80089d6:	0018      	movs	r0, r3
 80089d8:	46bd      	mov	sp, r7
 80089da:	b004      	add	sp, #16
 80089dc:	bdb0      	pop	{r4, r5, r7, pc}
 80089de:	46c0      	nop			@ (mov r8, r8)
 80089e0:	20000b84 	.word	0x20000b84
 80089e4:	08026f68 	.word	0x08026f68
 80089e8:	08026f38 	.word	0x08026f38
 80089ec:	08026fac 	.word	0x08026fac
 80089f0:	08026c7c 	.word	0x08026c7c
 80089f4:	20000b80 	.word	0x20000b80
 80089f8:	08026ff4 	.word	0x08026ff4
 80089fc:	08027030 	.word	0x08027030

08008a00 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 8008a06:	4b1e      	ldr	r3, [pc, #120]	@ (8008a80 <BMP280_calc_temperature+0x80>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	10da      	asrs	r2, r3, #3
 8008a10:	4b1c      	ldr	r3, [pc, #112]	@ (8008a84 <BMP280_calc_temperature+0x84>)
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	005b      	lsls	r3, r3, #1
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	4a1a      	ldr	r2, [pc, #104]	@ (8008a84 <BMP280_calc_temperature+0x84>)
 8008a1a:	2102      	movs	r1, #2
 8008a1c:	5e52      	ldrsh	r2, [r2, r1]
 8008a1e:	4353      	muls	r3, r2
 8008a20:	12db      	asrs	r3, r3, #11
 8008a22:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	111b      	asrs	r3, r3, #4
 8008a28:	4a16      	ldr	r2, [pc, #88]	@ (8008a84 <BMP280_calc_temperature+0x84>)
 8008a2a:	8812      	ldrh	r2, [r2, #0]
 8008a2c:	1a9b      	subs	r3, r3, r2
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	1112      	asrs	r2, r2, #4
 8008a32:	4914      	ldr	r1, [pc, #80]	@ (8008a84 <BMP280_calc_temperature+0x84>)
 8008a34:	8809      	ldrh	r1, [r1, #0]
 8008a36:	1a52      	subs	r2, r2, r1
 8008a38:	4353      	muls	r3, r2
 8008a3a:	131b      	asrs	r3, r3, #12
 8008a3c:	4a11      	ldr	r2, [pc, #68]	@ (8008a84 <BMP280_calc_temperature+0x84>)
 8008a3e:	2104      	movs	r1, #4
 8008a40:	5e52      	ldrsh	r2, [r2, r1]
 8008a42:	4353      	muls	r3, r2
 8008a44:	139b      	asrs	r3, r3, #14
 8008a46:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	18d2      	adds	r2, r2, r3
 8008a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008a88 <BMP280_calc_temperature+0x88>)
 8008a50:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 8008a52:	4b0d      	ldr	r3, [pc, #52]	@ (8008a88 <BMP280_calc_temperature+0x88>)
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	0013      	movs	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	189b      	adds	r3, r3, r2
 8008a5c:	3380      	adds	r3, #128	@ 0x80
 8008a5e:	121b      	asrs	r3, r3, #8
 8008a60:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 8008a62:	68b8      	ldr	r0, [r7, #8]
 8008a64:	f7f8 fdb4 	bl	80015d0 <__aeabi_i2f>
 8008a68:	1c03      	adds	r3, r0, #0
 8008a6a:	4908      	ldr	r1, [pc, #32]	@ (8008a8c <BMP280_calc_temperature+0x8c>)
 8008a6c:	1c18      	adds	r0, r3, #0
 8008a6e:	f7f8 f8b1 	bl	8000bd4 <__aeabi_fdiv>
 8008a72:	1c03      	adds	r3, r0, #0
 8008a74:	607b      	str	r3, [r7, #4]
  return airTemp;
 8008a76:	687b      	ldr	r3, [r7, #4]
}
 8008a78:	1c18      	adds	r0, r3, #0
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	b006      	add	sp, #24
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	20000b80 	.word	0x20000b80
 8008a84:	20000b64 	.word	0x20000b64
 8008a88:	20000b7c 	.word	0x20000b7c
 8008a8c:	42c80000 	.word	0x42c80000

08008a90 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 8008a96:	4b4e      	ldr	r3, [pc, #312]	@ (8008bd0 <BMP280_calc_pressure+0x140>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 8008a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8008bd4 <BMP280_calc_pressure+0x144>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	105b      	asrs	r3, r3, #1
 8008aa2:	4a4d      	ldr	r2, [pc, #308]	@ (8008bd8 <BMP280_calc_pressure+0x148>)
 8008aa4:	4694      	mov	ip, r2
 8008aa6:	4463      	add	r3, ip
 8008aa8:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	109b      	asrs	r3, r3, #2
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	1092      	asrs	r2, r2, #2
 8008ab2:	4353      	muls	r3, r2
 8008ab4:	12db      	asrs	r3, r3, #11
 8008ab6:	4a49      	ldr	r2, [pc, #292]	@ (8008bdc <BMP280_calc_pressure+0x14c>)
 8008ab8:	2110      	movs	r1, #16
 8008aba:	5e52      	ldrsh	r2, [r2, r1]
 8008abc:	4353      	muls	r3, r2
 8008abe:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 8008ac0:	4b46      	ldr	r3, [pc, #280]	@ (8008bdc <BMP280_calc_pressure+0x14c>)
 8008ac2:	220e      	movs	r2, #14
 8008ac4:	5e9b      	ldrsh	r3, [r3, r2]
 8008ac6:	001a      	movs	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4353      	muls	r3, r2
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	18d3      	adds	r3, r2, r3
 8008ad2:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	109a      	asrs	r2, r3, #2
 8008ad8:	4b40      	ldr	r3, [pc, #256]	@ (8008bdc <BMP280_calc_pressure+0x14c>)
 8008ada:	210c      	movs	r1, #12
 8008adc:	5e5b      	ldrsh	r3, [r3, r1]
 8008ade:	041b      	lsls	r3, r3, #16
 8008ae0:	18d3      	adds	r3, r2, r3
 8008ae2:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 8008ae4:	4b3d      	ldr	r3, [pc, #244]	@ (8008bdc <BMP280_calc_pressure+0x14c>)
 8008ae6:	220a      	movs	r2, #10
 8008ae8:	5e9b      	ldrsh	r3, [r3, r2]
 8008aea:	0019      	movs	r1, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	109b      	asrs	r3, r3, #2
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	1092      	asrs	r2, r2, #2
 8008af4:	4353      	muls	r3, r2
 8008af6:	135b      	asrs	r3, r3, #13
 8008af8:	434b      	muls	r3, r1
 8008afa:	10da      	asrs	r2, r3, #3
 8008afc:	4b37      	ldr	r3, [pc, #220]	@ (8008bdc <BMP280_calc_pressure+0x14c>)
 8008afe:	2108      	movs	r1, #8
 8008b00:	5e5b      	ldrsh	r3, [r3, r1]
 8008b02:	0019      	movs	r1, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	434b      	muls	r3, r1
 8008b08:	105b      	asrs	r3, r3, #1
 8008b0a:	18d3      	adds	r3, r2, r3
 8008b0c:	149b      	asrs	r3, r3, #18
 8008b0e:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2280      	movs	r2, #128	@ 0x80
 8008b14:	0212      	lsls	r2, r2, #8
 8008b16:	4694      	mov	ip, r2
 8008b18:	4463      	add	r3, ip
 8008b1a:	4a30      	ldr	r2, [pc, #192]	@ (8008bdc <BMP280_calc_pressure+0x14c>)
 8008b1c:	88d2      	ldrh	r2, [r2, #6]
 8008b1e:	4353      	muls	r3, r2
 8008b20:	13db      	asrs	r3, r3, #15
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <BMP280_calc_pressure+0x9e>
    return 0;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e04b      	b.n	8008bc6 <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	2280      	movs	r2, #128	@ 0x80
 8008b32:	0352      	lsls	r2, r2, #13
 8008b34:	1ad2      	subs	r2, r2, r3
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	131b      	asrs	r3, r3, #12
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	001a      	movs	r2, r3
 8008b3e:	4b28      	ldr	r3, [pc, #160]	@ (8008be0 <BMP280_calc_pressure+0x150>)
 8008b40:	4353      	muls	r3, r2
 8008b42:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	db09      	blt.n	8008b5e <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	0011      	movs	r1, r2
 8008b52:	0018      	movs	r0, r3
 8008b54:	f7f7 fb26 	bl	80001a4 <__udivsi3>
 8008b58:	0003      	movs	r3, r0
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	e007      	b.n	8008b6e <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	0019      	movs	r1, r3
 8008b62:	6978      	ldr	r0, [r7, #20]
 8008b64:	f7f7 fb1e 	bl	80001a4 <__udivsi3>
 8008b68:	0003      	movs	r3, r0
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 8008b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8008bdc <BMP280_calc_pressure+0x14c>)
 8008b70:	2216      	movs	r2, #22
 8008b72:	5e9b      	ldrsh	r3, [r3, r2]
 8008b74:	0019      	movs	r1, r3
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	08db      	lsrs	r3, r3, #3
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	08d2      	lsrs	r2, r2, #3
 8008b7e:	4353      	muls	r3, r2
 8008b80:	0b5b      	lsrs	r3, r3, #13
 8008b82:	434b      	muls	r3, r1
 8008b84:	131b      	asrs	r3, r3, #12
 8008b86:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	089b      	lsrs	r3, r3, #2
 8008b8c:	001a      	movs	r2, r3
 8008b8e:	4b13      	ldr	r3, [pc, #76]	@ (8008bdc <BMP280_calc_pressure+0x14c>)
 8008b90:	2114      	movs	r1, #20
 8008b92:	5e5b      	ldrsh	r3, [r3, r1]
 8008b94:	4353      	muls	r3, r2
 8008b96:	135b      	asrs	r3, r3, #13
 8008b98:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	18d3      	adds	r3, r2, r3
 8008ba0:	4a0e      	ldr	r2, [pc, #56]	@ (8008bdc <BMP280_calc_pressure+0x14c>)
 8008ba2:	2112      	movs	r1, #18
 8008ba4:	5e52      	ldrsh	r2, [r2, r1]
 8008ba6:	189b      	adds	r3, r3, r2
 8008ba8:	111a      	asrs	r2, r3, #4
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	18d3      	adds	r3, r2, r3
 8008bae:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 8008bb0:	6978      	ldr	r0, [r7, #20]
 8008bb2:	f7f8 fd59 	bl	8001668 <__aeabi_ui2f>
 8008bb6:	1c03      	adds	r3, r0, #0
 8008bb8:	490a      	ldr	r1, [pc, #40]	@ (8008be4 <BMP280_calc_pressure+0x154>)
 8008bba:	1c18      	adds	r0, r3, #0
 8008bbc:	f7f8 f80a 	bl	8000bd4 <__aeabi_fdiv>
 8008bc0:	1c03      	adds	r3, r0, #0
 8008bc2:	607b      	str	r3, [r7, #4]
  return airhPa;
 8008bc4:	687b      	ldr	r3, [r7, #4]
}
 8008bc6:	1c18      	adds	r0, r3, #0
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	b006      	add	sp, #24
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	46c0      	nop			@ (mov r8, r8)
 8008bd0:	20000b84 	.word	0x20000b84
 8008bd4:	20000b7c 	.word	0x20000b7c
 8008bd8:	ffff0600 	.word	0xffff0600
 8008bdc:	20000b64 	.word	0x20000b64
 8008be0:	00000c35 	.word	0x00000c35
 8008be4:	42c80000 	.word	0x42c80000

08008be8 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 8008be8:	b5b0      	push	{r4, r5, r7, lr}
 8008bea:	b088      	sub	sp, #32
 8008bec:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 8008bee:	4b84      	ldr	r3, [pc, #528]	@ (8008e00 <BMP_Upkeep+0x218>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f007 fc4c 	bl	8010490 <TimestampIsReached>
 8008bf8:	0003      	movs	r3, r0
 8008bfa:	001a      	movs	r2, r3
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	4053      	eors	r3, r2
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d002      	beq.n	8008c0c <BMP_Upkeep+0x24>
    return BMPState;
 8008c06:	4b7f      	ldr	r3, [pc, #508]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	e0f5      	b.n	8008df8 <BMP_Upkeep+0x210>
  }
  switch(BMPState) {
 8008c0c:	4b7d      	ldr	r3, [pc, #500]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	2b09      	cmp	r3, #9
 8008c12:	d900      	bls.n	8008c16 <BMP_Upkeep+0x2e>
 8008c14:	e0db      	b.n	8008dce <BMP_Upkeep+0x1e6>
 8008c16:	009a      	lsls	r2, r3, #2
 8008c18:	4b7b      	ldr	r3, [pc, #492]	@ (8008e08 <BMP_Upkeep+0x220>)
 8008c1a:	18d3      	adds	r3, r2, r3
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 8008c20:	4a7a      	ldr	r2, [pc, #488]	@ (8008e0c <BMP_Upkeep+0x224>)
 8008c22:	4b7b      	ldr	r3, [pc, #492]	@ (8008e10 <BMP_Upkeep+0x228>)
 8008c24:	0019      	movs	r1, r3
 8008c26:	2003      	movs	r0, #3
 8008c28:	f007 fc88 	bl	801053c <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 8008c2c:	f008 f8d2 	bl	8010dd4 <HAL_GetTick>
 8008c30:	0003      	movs	r3, r0
 8008c32:	4a78      	ldr	r2, [pc, #480]	@ (8008e14 <BMP_Upkeep+0x22c>)
 8008c34:	189a      	adds	r2, r3, r2
 8008c36:	4b72      	ldr	r3, [pc, #456]	@ (8008e00 <BMP_Upkeep+0x218>)
 8008c38:	601a      	str	r2, [r3, #0]
    break;
 8008c3a:	e0db      	b.n	8008df4 <BMP_Upkeep+0x20c>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 8008c3c:	f001 fdf6 	bl	800a82c <getSensorLock>
 8008c40:	1e03      	subs	r3, r0, #0
 8008c42:	d000      	beq.n	8008c46 <BMP_Upkeep+0x5e>
 8008c44:	e0cf      	b.n	8008de6 <BMP_Upkeep+0x1fe>
      break;
    }
    BMP280_reset();
 8008c46:	f7ff fb85 	bl	8008354 <BMP280_reset>
    BMPState = BMP_SET_CONFIG;
 8008c4a:	4b6e      	ldr	r3, [pc, #440]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	701a      	strb	r2, [r3, #0]
    break;
 8008c50:	e0d0      	b.n	8008df4 <BMP_Upkeep+0x20c>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 8008c52:	f001 fdeb 	bl	800a82c <getSensorLock>
 8008c56:	1e03      	subs	r3, r0, #0
 8008c58:	d000      	beq.n	8008c5c <BMP_Upkeep+0x74>
 8008c5a:	e0c6      	b.n	8008dea <BMP_Upkeep+0x202>
      break;
    }
    setSensorLock(BMP280);
 8008c5c:	2004      	movs	r0, #4
 8008c5e:	f001 fdd5 	bl	800a80c <setSensorLock>
    HAL_Delay(10); // wait for defered DMA transfers
 8008c62:	200a      	movs	r0, #10
 8008c64:	f008 f8c0 	bl	8010de8 <HAL_Delay>
    if (BMP280_set_config()) {
 8008c68:	f7ff fda0 	bl	80087ac <BMP280_set_config>
 8008c6c:	1e03      	subs	r3, r0, #0
 8008c6e:	d003      	beq.n	8008c78 <BMP_Upkeep+0x90>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 8008c70:	4b64      	ldr	r3, [pc, #400]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008c72:	2202      	movs	r2, #2
 8008c74:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
     }
  break;
 8008c76:	e0bd      	b.n	8008df4 <BMP_Upkeep+0x20c>
      BMPState = BMP_STATE_INIT;
 8008c78:	4b62      	ldr	r3, [pc, #392]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	701a      	strb	r2, [r3, #0]
  break;
 8008c7e:	e0b9      	b.n	8008df4 <BMP_Upkeep+0x20c>

  case BMP_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != BMP280)) {
 8008c80:	f001 fdd4 	bl	800a82c <getSensorLock>
 8008c84:	1e03      	subs	r3, r0, #0
 8008c86:	d02e      	beq.n	8008ce6 <BMP_Upkeep+0xfe>
 8008c88:	f001 fdd0 	bl	800a82c <getSensorLock>
 8008c8c:	0003      	movs	r3, r0
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	d029      	beq.n	8008ce6 <BMP_Upkeep+0xfe>
      uint8_t locktype = getSensorLock();
 8008c92:	1dfc      	adds	r4, r7, #7
 8008c94:	f001 fdca 	bl	800a82c <getSensorLock>
 8008c98:	0003      	movs	r3, r0
 8008c9a:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 8008c9c:	1dfb      	adds	r3, r7, #7
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d019      	beq.n	8008cd8 <BMP_Upkeep+0xf0>
 8008ca4:	1dfb      	adds	r3, r7, #7
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d013      	beq.n	8008cd4 <BMP_Upkeep+0xec>
 8008cac:	1dfb      	adds	r3, r7, #7
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d00d      	beq.n	8008cd0 <BMP_Upkeep+0xe8>
 8008cb4:	1dfb      	adds	r3, r7, #7
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d007      	beq.n	8008ccc <BMP_Upkeep+0xe4>
 8008cbc:	1dfb      	adds	r3, r7, #7
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d101      	bne.n	8008cc8 <BMP_Upkeep+0xe0>
 8008cc4:	4b54      	ldr	r3, [pc, #336]	@ (8008e18 <BMP_Upkeep+0x230>)
 8008cc6:	e008      	b.n	8008cda <BMP_Upkeep+0xf2>
 8008cc8:	4b54      	ldr	r3, [pc, #336]	@ (8008e1c <BMP_Upkeep+0x234>)
 8008cca:	e006      	b.n	8008cda <BMP_Upkeep+0xf2>
 8008ccc:	4b54      	ldr	r3, [pc, #336]	@ (8008e20 <BMP_Upkeep+0x238>)
 8008cce:	e004      	b.n	8008cda <BMP_Upkeep+0xf2>
 8008cd0:	4b54      	ldr	r3, [pc, #336]	@ (8008e24 <BMP_Upkeep+0x23c>)
 8008cd2:	e002      	b.n	8008cda <BMP_Upkeep+0xf2>
 8008cd4:	4b54      	ldr	r3, [pc, #336]	@ (8008e28 <BMP_Upkeep+0x240>)
 8008cd6:	e000      	b.n	8008cda <BMP_Upkeep+0xf2>
 8008cd8:	4b54      	ldr	r3, [pc, #336]	@ (8008e2c <BMP_Upkeep+0x244>)
 8008cda:	4a55      	ldr	r2, [pc, #340]	@ (8008e30 <BMP_Upkeep+0x248>)
 8008cdc:	494c      	ldr	r1, [pc, #304]	@ (8008e10 <BMP_Upkeep+0x228>)
 8008cde:	2003      	movs	r0, #3
 8008ce0:	f007 fc2c 	bl	801053c <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      break;
 8008ce4:	e086      	b.n	8008df4 <BMP_Upkeep+0x20c>
    }
    if (getSensorLock() == FREE) {
 8008ce6:	f001 fda1 	bl	800a82c <getSensorLock>
 8008cea:	1e03      	subs	r3, r0, #0
 8008cec:	d105      	bne.n	8008cfa <BMP_Upkeep+0x112>
      HAL_Delay(10);
 8008cee:	200a      	movs	r0, #10
 8008cf0:	f008 f87a 	bl	8010de8 <HAL_Delay>
      setSensorLock(BMP280);
 8008cf4:	2004      	movs	r0, #4
 8008cf6:	f001 fd89 	bl	800a80c <setSensorLock>
    }
    if (BMP280_set_mode()) {
 8008cfa:	f7ff fd7b 	bl	80087f4 <BMP280_set_mode>
 8008cfe:	1e03      	subs	r3, r0, #0
 8008d00:	d003      	beq.n	8008d0a <BMP_Upkeep+0x122>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 8008d02:	4b40      	ldr	r3, [pc, #256]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008d04:	2205      	movs	r2, #5
 8008d06:	701a      	strb	r2, [r3, #0]
    }
    else {
      Error("Error while setting BMP280 to forced mode");
      BMPState = BMP_STATE_INIT ;
    }
    break;
 8008d08:	e074      	b.n	8008df4 <BMP_Upkeep+0x20c>
      Error("Error while setting BMP280 to forced mode");
 8008d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8008e34 <BMP_Upkeep+0x24c>)
 8008d0c:	4b4a      	ldr	r3, [pc, #296]	@ (8008e38 <BMP_Upkeep+0x250>)
 8008d0e:	0019      	movs	r1, r3
 8008d10:	2001      	movs	r0, #1
 8008d12:	f007 fc13 	bl	801053c <CreateLine>
      BMPState = BMP_STATE_INIT ;
 8008d16:	4b3b      	ldr	r3, [pc, #236]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	701a      	strb	r2, [r3, #0]
    break;
 8008d1c:	e06a      	b.n	8008df4 <BMP_Upkeep+0x20c>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (BMP280_get_measurement_values()) {
 8008d1e:	f7ff fde9 	bl	80088f4 <BMP280_get_measurement_values>
 8008d22:	1e03      	subs	r3, r0, #0
 8008d24:	d006      	beq.n	8008d34 <BMP_Upkeep+0x14c>
      setSensorLock(FREE);
 8008d26:	2000      	movs	r0, #0
 8008d28:	f001 fd70 	bl	800a80c <setSensorLock>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 8008d2c:	4b35      	ldr	r3, [pc, #212]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008d2e:	2203      	movs	r2, #3
 8008d30:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
      Error("BMP280 Error during reading measurement results array");
    }
  break;
 8008d32:	e05f      	b.n	8008df4 <BMP_Upkeep+0x20c>
      BMPState = BMP_STATE_INIT;
 8008d34:	4b33      	ldr	r3, [pc, #204]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	701a      	strb	r2, [r3, #0]
      Error("BMP280 Error during reading measurement results array");
 8008d3a:	4a40      	ldr	r2, [pc, #256]	@ (8008e3c <BMP_Upkeep+0x254>)
 8008d3c:	4b3e      	ldr	r3, [pc, #248]	@ (8008e38 <BMP_Upkeep+0x250>)
 8008d3e:	0019      	movs	r1, r3
 8008d40:	2001      	movs	r0, #1
 8008d42:	f007 fbfb 	bl	801053c <CreateLine>
  break;
 8008d46:	e055      	b.n	8008df4 <BMP_Upkeep+0x20c>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 8008d48:	f7ff fe5a 	bl	8008a00 <BMP280_calc_temperature>
 8008d4c:	1c03      	adds	r3, r0, #0
 8008d4e:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 8008d50:	f7ff fe9e 	bl	8008a90 <BMP280_calc_pressure>
 8008d54:	1c03      	adds	r3, r0, #0
 8008d56:	60bb      	str	r3, [r7, #8]
    Info("BMP280 airtemperature: %2.2fC barometric value: %.2fhPa", airtemp, airhpa);
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f7fa fb83 	bl	8003464 <__aeabi_f2d>
 8008d5e:	0004      	movs	r4, r0
 8008d60:	000d      	movs	r5, r1
 8008d62:	68b8      	ldr	r0, [r7, #8]
 8008d64:	f7fa fb7e 	bl	8003464 <__aeabi_f2d>
 8008d68:	0002      	movs	r2, r0
 8008d6a:	000b      	movs	r3, r1
 8008d6c:	4834      	ldr	r0, [pc, #208]	@ (8008e40 <BMP_Upkeep+0x258>)
 8008d6e:	4935      	ldr	r1, [pc, #212]	@ (8008e44 <BMP_Upkeep+0x25c>)
 8008d70:	9202      	str	r2, [sp, #8]
 8008d72:	9303      	str	r3, [sp, #12]
 8008d74:	9400      	str	r4, [sp, #0]
 8008d76:	9501      	str	r5, [sp, #4]
 8008d78:	0002      	movs	r2, r0
 8008d7a:	2002      	movs	r0, #2
 8008d7c:	f007 fbde 	bl	801053c <CreateLine>
    BMPState = BMP_STATE_WAIT;
 8008d80:	4b20      	ldr	r3, [pc, #128]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008d82:	2208      	movs	r2, #8
 8008d84:	701a      	strb	r2, [r3, #0]
    BMP280TimeStamp = HAL_GetTick() + 3000;
 8008d86:	f008 f825 	bl	8010dd4 <HAL_GetTick>
 8008d8a:	0003      	movs	r3, r0
 8008d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8008e48 <BMP_Upkeep+0x260>)
 8008d8e:	189a      	adds	r2, r3, r2
 8008d90:	4b1b      	ldr	r3, [pc, #108]	@ (8008e00 <BMP_Upkeep+0x218>)
 8008d92:	601a      	str	r2, [r3, #0]
    break;
 8008d94:	e02e      	b.n	8008df4 <BMP_Upkeep+0x20c>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 8008d96:	4b1b      	ldr	r3, [pc, #108]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008d98:	2209      	movs	r2, #9
 8008d9a:	701a      	strb	r2, [r3, #0]
    break;
 8008d9c:	e02a      	b.n	8008df4 <BMP_Upkeep+0x20c>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 8008d9e:	f001 fd45 	bl	800a82c <getSensorLock>
 8008da2:	1e03      	subs	r3, r0, #0
 8008da4:	d123      	bne.n	8008dee <BMP_Upkeep+0x206>
      break;
    }
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 8008da6:	f7ff fd79 	bl	800889c <BMP280_get_mode>
 8008daa:	0003      	movs	r3, r0
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d103      	bne.n	8008db8 <BMP_Upkeep+0x1d0>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 8008db0:	4b14      	ldr	r3, [pc, #80]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008db2:	2205      	movs	r2, #5
 8008db4:	701a      	strb	r2, [r3, #0]
 8008db6:	e002      	b.n	8008dbe <BMP_Upkeep+0x1d6>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 8008db8:	4b12      	ldr	r3, [pc, #72]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008dba:	2202      	movs	r2, #2
 8008dbc:	701a      	strb	r2, [r3, #0]
    }
    BMP280TimeStamp = HAL_GetTick() + 60000;
 8008dbe:	f008 f809 	bl	8010dd4 <HAL_GetTick>
 8008dc2:	0003      	movs	r3, r0
 8008dc4:	4a21      	ldr	r2, [pc, #132]	@ (8008e4c <BMP_Upkeep+0x264>)
 8008dc6:	189a      	adds	r2, r3, r2
 8008dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8008e00 <BMP_Upkeep+0x218>)
 8008dca:	601a      	str	r2, [r3, #0]
    break;
 8008dcc:	e012      	b.n	8008df4 <BMP_Upkeep+0x20c>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 8008dce:	4b0d      	ldr	r3, [pc, #52]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != BMP280) {
 8008dd4:	f001 fd2a 	bl	800a82c <getSensorLock>
 8008dd8:	0003      	movs	r3, r0
 8008dda:	2b04      	cmp	r3, #4
 8008ddc:	d009      	beq.n	8008df2 <BMP_Upkeep+0x20a>
      setSensorLock(FREE);
 8008dde:	2000      	movs	r0, #0
 8008de0:	f001 fd14 	bl	800a80c <setSensorLock>
    }
    break;
 8008de4:	e005      	b.n	8008df2 <BMP_Upkeep+0x20a>
      break;
 8008de6:	46c0      	nop			@ (mov r8, r8)
 8008de8:	e004      	b.n	8008df4 <BMP_Upkeep+0x20c>
      break;
 8008dea:	46c0      	nop			@ (mov r8, r8)
 8008dec:	e002      	b.n	8008df4 <BMP_Upkeep+0x20c>
      break;
 8008dee:	46c0      	nop			@ (mov r8, r8)
 8008df0:	e000      	b.n	8008df4 <BMP_Upkeep+0x20c>
    break;
 8008df2:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 8008df4:	4b03      	ldr	r3, [pc, #12]	@ (8008e04 <BMP_Upkeep+0x21c>)
 8008df6:	781b      	ldrb	r3, [r3, #0]
}
 8008df8:	0018      	movs	r0, r3
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	b004      	add	sp, #16
 8008dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8008e00:	20000b88 	.word	0x20000b88
 8008e04:	2000008f 	.word	0x2000008f
 8008e08:	08028880 	.word	0x08028880
 8008e0c:	08027078 	.word	0x08027078
 8008e10:	08026c7c 	.word	0x08026c7c
 8008e14:	002f9b80 	.word	0x002f9b80
 8008e18:	080270b4 	.word	0x080270b4
 8008e1c:	080270bc 	.word	0x080270bc
 8008e20:	080270c4 	.word	0x080270c4
 8008e24:	080270cc 	.word	0x080270cc
 8008e28:	080270d4 	.word	0x080270d4
 8008e2c:	080270dc 	.word	0x080270dc
 8008e30:	080270e4 	.word	0x080270e4
 8008e34:	0802710c 	.word	0x0802710c
 8008e38:	08026f38 	.word	0x08026f38
 8008e3c:	08027138 	.word	0x08027138
 8008e40:	08027170 	.word	0x08027170
 8008e44:	08026c44 	.word	0x08026c44
 8008e48:	00000bb8 	.word	0x00000bb8
 8008e4c:	0000ea60 	.word	0x0000ea60

08008e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008e56:	4b10      	ldr	r3, [pc, #64]	@ (8008e98 <MX_DMA_Init+0x48>)
 8008e58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8008e98 <MX_DMA_Init+0x48>)
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e62:	4b0d      	ldr	r3, [pc, #52]	@ (8008e98 <MX_DMA_Init+0x48>)
 8008e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e66:	2201      	movs	r2, #1
 8008e68:	4013      	ands	r3, r2
 8008e6a:	607b      	str	r3, [r7, #4]
 8008e6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2100      	movs	r1, #0
 8008e72:	200a      	movs	r0, #10
 8008e74:	f008 fc52 	bl	801171c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8008e78:	200a      	movs	r0, #10
 8008e7a:	f008 fc64 	bl	8011746 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2103      	movs	r1, #3
 8008e82:	200b      	movs	r0, #11
 8008e84:	f008 fc4a 	bl	801171c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8008e88:	200b      	movs	r0, #11
 8008e8a:	f008 fc5c 	bl	8011746 <HAL_NVIC_EnableIRQ>

}
 8008e8e:	46c0      	nop			@ (mov r8, r8)
 8008e90:	46bd      	mov	sp, r7
 8008e92:	b002      	add	sp, #8
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	46c0      	nop			@ (mov r8, r8)
 8008e98:	40021000 	.word	0x40021000

08008e9c <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8008e9c:	b590      	push	{r4, r7, lr}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	1dbb      	adds	r3, r7, #6
 8008ea8:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 8008eaa:	4b17      	ldr	r3, [pc, #92]	@ (8008f08 <WriteUint8ArrayEeprom+0x6c>)
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8008eb0:	f008 ffc6 	bl	8011e40 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8008eb4:	2316      	movs	r3, #22
 8008eb6:	18fb      	adds	r3, r7, r3
 8008eb8:	2200      	movs	r2, #0
 8008eba:	801a      	strh	r2, [r3, #0]
 8008ebc:	e015      	b.n	8008eea <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8008ebe:	4b12      	ldr	r3, [pc, #72]	@ (8008f08 <WriteUint8ArrayEeprom+0x6c>)
 8008ec0:	6819      	ldr	r1, [r3, #0]
 8008ec2:	2416      	movs	r4, #22
 8008ec4:	193b      	adds	r3, r7, r4
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	18d3      	adds	r3, r2, r3
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	001a      	movs	r2, r3
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	f009 f81d 	bl	8011f10 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8008ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8008f08 <WriteUint8ArrayEeprom+0x6c>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	4b0a      	ldr	r3, [pc, #40]	@ (8008f08 <WriteUint8ArrayEeprom+0x6c>)
 8008ede:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8008ee0:	193b      	adds	r3, r7, r4
 8008ee2:	881a      	ldrh	r2, [r3, #0]
 8008ee4:	193b      	adds	r3, r7, r4
 8008ee6:	3201      	adds	r2, #1
 8008ee8:	801a      	strh	r2, [r3, #0]
 8008eea:	2316      	movs	r3, #22
 8008eec:	18fa      	adds	r2, r7, r3
 8008eee:	1dbb      	adds	r3, r7, #6
 8008ef0:	8812      	ldrh	r2, [r2, #0]
 8008ef2:	881b      	ldrh	r3, [r3, #0]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d3e2      	bcc.n	8008ebe <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 8008ef8:	f008 ffd0 	bl	8011e9c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 8008efc:	4b02      	ldr	r3, [pc, #8]	@ (8008f08 <WriteUint8ArrayEeprom+0x6c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
}
 8008f00:	0018      	movs	r0, r3
 8008f02:	46bd      	mov	sp, r7
 8008f04:	b007      	add	sp, #28
 8008f06:	bd90      	pop	{r4, r7, pc}
 8008f08:	20000bac 	.word	0x20000bac

08008f0c <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	0019      	movs	r1, r3
 8008f18:	1dbb      	adds	r3, r7, #6
 8008f1a:	801a      	strh	r2, [r3, #0]
 8008f1c:	1d3b      	adds	r3, r7, #4
 8008f1e:	1c0a      	adds	r2, r1, #0
 8008f20:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 8008f22:	1dba      	adds	r2, r7, #6
 8008f24:	1d3b      	adds	r3, r7, #4
 8008f26:	8812      	ldrh	r2, [r2, #0]
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d806      	bhi.n	8008f3c <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 8008f2e:	1dbb      	adds	r3, r7, #6
 8008f30:	881a      	ldrh	r2, [r3, #0]
 8008f32:	68b9      	ldr	r1, [r7, #8]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	0018      	movs	r0, r3
 8008f38:	f7ff ffb0 	bl	8008e9c <WriteUint8ArrayEeprom>
    }
}
 8008f3c:	46c0      	nop			@ (mov r8, r8)
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	b004      	add	sp, #16
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	1dbb      	adds	r3, r7, #6
 8008f50:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8008f52:	2316      	movs	r3, #22
 8008f54:	18fb      	adds	r3, r7, r3
 8008f56:	2200      	movs	r2, #0
 8008f58:	801a      	strh	r2, [r3, #0]
 8008f5a:	e010      	b.n	8008f7e <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8008f5c:	2016      	movs	r0, #22
 8008f5e:	183b      	adds	r3, r7, r0
 8008f60:	881a      	ldrh	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	18d3      	adds	r3, r2, r3
 8008f66:	0019      	movs	r1, r3
 8008f68:	183b      	adds	r3, r7, r0
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	18d3      	adds	r3, r2, r3
 8008f70:	780a      	ldrb	r2, [r1, #0]
 8008f72:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8008f74:	183b      	adds	r3, r7, r0
 8008f76:	881a      	ldrh	r2, [r3, #0]
 8008f78:	183b      	adds	r3, r7, r0
 8008f7a:	3201      	adds	r2, #1
 8008f7c:	801a      	strh	r2, [r3, #0]
 8008f7e:	2316      	movs	r3, #22
 8008f80:	18fa      	adds	r2, r7, r3
 8008f82:	1dbb      	adds	r3, r7, #6
 8008f84:	8812      	ldrh	r2, [r2, #0]
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d3e7      	bcc.n	8008f5c <ReadUint8ArrayEEprom+0x18>
    }
}
 8008f8c:	46c0      	nop			@ (mov r8, r8)
 8008f8e:	46c0      	nop			@ (mov r8, r8)
 8008f90:	46bd      	mov	sp, r7
 8008f92:	b006      	add	sp, #24
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8008f96:	b590      	push	{r4, r7, lr}
 8008f98:	b085      	sub	sp, #20
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	000a      	movs	r2, r1
 8008fa0:	1cbb      	adds	r3, r7, #2
 8008fa2:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8008fa4:	f008 ff4c 	bl	8011e40 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 8008fa8:	230e      	movs	r3, #14
 8008faa:	18fb      	adds	r3, r7, r3
 8008fac:	2200      	movs	r2, #0
 8008fae:	801a      	strh	r2, [r3, #0]
 8008fb0:	e00c      	b.n	8008fcc <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8008fb2:	240e      	movs	r4, #14
 8008fb4:	193b      	adds	r3, r7, r4
 8008fb6:	881a      	ldrh	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	18d3      	adds	r3, r2, r3
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	f008 ff7b 	bl	8011eb8 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8008fc2:	193b      	adds	r3, r7, r4
 8008fc4:	193a      	adds	r2, r7, r4
 8008fc6:	8812      	ldrh	r2, [r2, #0]
 8008fc8:	3204      	adds	r2, #4
 8008fca:	801a      	strh	r2, [r3, #0]
 8008fcc:	230e      	movs	r3, #14
 8008fce:	18fa      	adds	r2, r7, r3
 8008fd0:	1cbb      	adds	r3, r7, #2
 8008fd2:	8812      	ldrh	r2, [r2, #0]
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d3eb      	bcc.n	8008fb2 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 8008fda:	f008 ff5f 	bl	8011e9c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8008fde:	46c0      	nop			@ (mov r8, r8)
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	b005      	add	sp, #20
 8008fe4:	bd90      	pop	{r4, r7, pc}
	...

08008fe8 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ff8:	d901      	bls.n	8008ffe <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8008ffa:	237f      	movs	r3, #127	@ 0x7f
 8008ffc:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8008ffe:	2017      	movs	r0, #23
 8009000:	183b      	adds	r3, r7, r0
 8009002:	490d      	ldr	r1, [pc, #52]	@ (8009038 <accessLUT10log10+0x50>)
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	188a      	adds	r2, r1, r2
 8009008:	7812      	ldrb	r2, [r2, #0]
 800900a:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800900c:	0001      	movs	r1, r0
 800900e:	187b      	adds	r3, r7, r1
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2206      	movs	r2, #6
 8009014:	4113      	asrs	r3, r2
 8009016:	001a      	movs	r2, r3
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800901c:	187b      	adds	r3, r7, r1
 800901e:	781a      	ldrb	r2, [r3, #0]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2106      	movs	r1, #6
 8009026:	408b      	lsls	r3, r1
 8009028:	1ad2      	subs	r2, r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	601a      	str	r2, [r3, #0]
}
 800902e:	46c0      	nop			@ (mov r8, r8)
 8009030:	46bd      	mov	sp, r7
 8009032:	b006      	add	sp, #24
 8009034:	bd80      	pop	{r7, pc}
 8009036:	46c0      	nop			@ (mov r8, r8)
 8009038:	080288a8 	.word	0x080288a8

0800903c <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800903c:	b5b0      	push	{r4, r5, r7, lr}
 800903e:	b090      	sub	sp, #64	@ 0x40
 8009040:	af00      	add	r7, sp, #0
 8009042:	6138      	str	r0, [r7, #16]
 8009044:	6179      	str	r1, [r7, #20]
 8009046:	60fa      	str	r2, [r7, #12]
 8009048:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800904a:	2308      	movs	r3, #8
 800904c:	001a      	movs	r2, r3
 800904e:	3a20      	subs	r2, #32
 8009050:	2a00      	cmp	r2, #0
 8009052:	db03      	blt.n	800905c <efficient10log10+0x20>
 8009054:	2101      	movs	r1, #1
 8009056:	4091      	lsls	r1, r2
 8009058:	000d      	movs	r5, r1
 800905a:	e008      	b.n	800906e <efficient10log10+0x32>
 800905c:	2220      	movs	r2, #32
 800905e:	1ad2      	subs	r2, r2, r3
 8009060:	2101      	movs	r1, #1
 8009062:	40d1      	lsrs	r1, r2
 8009064:	000a      	movs	r2, r1
 8009066:	2100      	movs	r1, #0
 8009068:	4099      	lsls	r1, r3
 800906a:	000d      	movs	r5, r1
 800906c:	4315      	orrs	r5, r2
 800906e:	2201      	movs	r2, #1
 8009070:	409a      	lsls	r2, r3
 8009072:	0014      	movs	r4, r2
 8009074:	2201      	movs	r2, #1
 8009076:	4252      	negs	r2, r2
 8009078:	17d3      	asrs	r3, r2, #31
 800907a:	1912      	adds	r2, r2, r4
 800907c:	416b      	adcs	r3, r5
 800907e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009080:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8009082:	2336      	movs	r3, #54	@ 0x36
 8009084:	2208      	movs	r2, #8
 8009086:	189b      	adds	r3, r3, r2
 8009088:	19db      	adds	r3, r3, r7
 800908a:	2200      	movs	r2, #0
 800908c:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800908e:	e017      	b.n	80090c0 <efficient10log10+0x84>
    {
        P = P >> 1;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	07db      	lsls	r3, r3, #31
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	0852      	lsrs	r2, r2, #1
 8009098:	603a      	str	r2, [r7, #0]
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	431a      	orrs	r2, r3
 800909e:	603a      	str	r2, [r7, #0]
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	085b      	lsrs	r3, r3, #1
 80090a4:	607b      	str	r3, [r7, #4]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	687c      	ldr	r4, [r7, #4]
 80090aa:	613b      	str	r3, [r7, #16]
 80090ac:	617c      	str	r4, [r7, #20]
        bShift++;
 80090ae:	2136      	movs	r1, #54	@ 0x36
 80090b0:	2008      	movs	r0, #8
 80090b2:	180b      	adds	r3, r1, r0
 80090b4:	19db      	adds	r3, r3, r7
 80090b6:	881a      	ldrh	r2, [r3, #0]
 80090b8:	180b      	adds	r3, r1, r0
 80090ba:	19db      	adds	r3, r3, r7
 80090bc:	3201      	adds	r2, #1
 80090be:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d8e3      	bhi.n	8009090 <efficient10log10+0x54>
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d103      	bne.n	80090d8 <efficient10log10+0x9c>
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d8db      	bhi.n	8009090 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	2308      	movs	r3, #8
 80090dc:	3b01      	subs	r3, #1
 80090de:	2101      	movs	r1, #1
 80090e0:	4099      	lsls	r1, r3
 80090e2:	000b      	movs	r3, r1
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 80090e8:	2300      	movs	r3, #0
 80090ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 80090ec:	2300      	movs	r3, #0
 80090ee:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 80090f0:	231c      	movs	r3, #28
 80090f2:	2408      	movs	r4, #8
 80090f4:	191b      	adds	r3, r3, r4
 80090f6:	19da      	adds	r2, r3, r7
 80090f8:	2320      	movs	r3, #32
 80090fa:	191b      	adds	r3, r3, r4
 80090fc:	19d9      	adds	r1, r3, r7
 80090fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009100:	0018      	movs	r0, r3
 8009102:	f7ff ff71 	bl	8008fe8 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8009106:	2215      	movs	r2, #21
 8009108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910a:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800910c:	2036      	movs	r0, #54	@ 0x36
 800910e:	1902      	adds	r2, r0, r4
 8009110:	19d2      	adds	r2, r2, r7
 8009112:	8812      	ldrh	r2, [r2, #0]
 8009114:	2103      	movs	r1, #3
 8009116:	434a      	muls	r2, r1
 8009118:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800911a:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800911c:	0021      	movs	r1, r4
 800911e:	1843      	adds	r3, r0, r1
 8009120:	19db      	adds	r3, r3, r7
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	2201      	movs	r2, #1
 8009126:	4353      	muls	r3, r2
 8009128:	2203      	movs	r2, #3
 800912a:	4113      	asrs	r3, r2
 800912c:	001a      	movs	r2, r3
 800912e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009130:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8009132:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8009134:	2314      	movs	r3, #20
 8009136:	185b      	adds	r3, r3, r1
 8009138:	19da      	adds	r2, r3, r7
 800913a:	2318      	movs	r3, #24
 800913c:	185b      	adds	r3, r3, r1
 800913e:	19db      	adds	r3, r3, r7
 8009140:	0011      	movs	r1, r2
 8009142:	0018      	movs	r0, r3
 8009144:	f000 f80a 	bl	800915c <correctIntFracNumber>
    integerPart[0] = intPart;
 8009148:	6a3a      	ldr	r2, [r7, #32]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800914e:	69fa      	ldr	r2, [r7, #28]
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	601a      	str	r2, [r3, #0]
}
 8009154:	46c0      	nop			@ (mov r8, r8)
 8009156:	46bd      	mov	sp, r7
 8009158:	b010      	add	sp, #64	@ 0x40
 800915a:	bdb0      	pop	{r4, r5, r7, pc}

0800915c <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8009166:	e00a      	b.n	800917e <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	1c5a      	adds	r2, r3, #1
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3b0a      	subs	r3, #10
 8009178:	001a      	movs	r2, r3
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b09      	cmp	r3, #9
 8009184:	dcf0      	bgt.n	8009168 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8009186:	e00a      	b.n	800919e <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	1e5a      	subs	r2, r3, #1
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	330a      	adds	r3, #10
 8009198:	001a      	movs	r2, r3
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3309      	adds	r3, #9
 80091a4:	dbf0      	blt.n	8009188 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	da0f      	bge.n	80091ce <correctIntFracNumber+0x72>
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	dd0b      	ble.n	80091ce <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	1c5a      	adds	r2, r3, #1
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3b0a      	subs	r3, #10
 80091c6:	001a      	movs	r2, r3
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 80091cc:	e012      	b.n	80091f4 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	dd0e      	ble.n	80091f4 <correctIntFracNumber+0x98>
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	da0a      	bge.n	80091f4 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	1e5a      	subs	r2, r3, #1
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	330a      	adds	r3, #10
 80091ee:	001a      	movs	r2, r3
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	601a      	str	r2, [r3, #0]
}
 80091f4:	46c0      	nop			@ (mov r8, r8)
 80091f6:	46bd      	mov	sp, r7
 80091f8:	b002      	add	sp, #8
 80091fa:	bd80      	pop	{r7, pc}

080091fc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80091fc:	b590      	push	{r4, r7, lr}
 80091fe:	b08b      	sub	sp, #44	@ 0x2c
 8009200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009202:	2414      	movs	r4, #20
 8009204:	193b      	adds	r3, r7, r4
 8009206:	0018      	movs	r0, r3
 8009208:	2314      	movs	r3, #20
 800920a:	001a      	movs	r2, r3
 800920c:	2100      	movs	r1, #0
 800920e:	f019 faf3 	bl	80227f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009212:	4b8a      	ldr	r3, [pc, #552]	@ (800943c <MX_GPIO_Init+0x240>)
 8009214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009216:	4b89      	ldr	r3, [pc, #548]	@ (800943c <MX_GPIO_Init+0x240>)
 8009218:	2104      	movs	r1, #4
 800921a:	430a      	orrs	r2, r1
 800921c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800921e:	4b87      	ldr	r3, [pc, #540]	@ (800943c <MX_GPIO_Init+0x240>)
 8009220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009222:	2204      	movs	r2, #4
 8009224:	4013      	ands	r3, r2
 8009226:	613b      	str	r3, [r7, #16]
 8009228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800922a:	4b84      	ldr	r3, [pc, #528]	@ (800943c <MX_GPIO_Init+0x240>)
 800922c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800922e:	4b83      	ldr	r3, [pc, #524]	@ (800943c <MX_GPIO_Init+0x240>)
 8009230:	2180      	movs	r1, #128	@ 0x80
 8009232:	430a      	orrs	r2, r1
 8009234:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009236:	4b81      	ldr	r3, [pc, #516]	@ (800943c <MX_GPIO_Init+0x240>)
 8009238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923a:	2280      	movs	r2, #128	@ 0x80
 800923c:	4013      	ands	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]
 8009240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009242:	4b7e      	ldr	r3, [pc, #504]	@ (800943c <MX_GPIO_Init+0x240>)
 8009244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009246:	4b7d      	ldr	r3, [pc, #500]	@ (800943c <MX_GPIO_Init+0x240>)
 8009248:	2101      	movs	r1, #1
 800924a:	430a      	orrs	r2, r1
 800924c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800924e:	4b7b      	ldr	r3, [pc, #492]	@ (800943c <MX_GPIO_Init+0x240>)
 8009250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009252:	2201      	movs	r2, #1
 8009254:	4013      	ands	r3, r2
 8009256:	60bb      	str	r3, [r7, #8]
 8009258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800925a:	4b78      	ldr	r3, [pc, #480]	@ (800943c <MX_GPIO_Init+0x240>)
 800925c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800925e:	4b77      	ldr	r3, [pc, #476]	@ (800943c <MX_GPIO_Init+0x240>)
 8009260:	2102      	movs	r1, #2
 8009262:	430a      	orrs	r2, r1
 8009264:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009266:	4b75      	ldr	r3, [pc, #468]	@ (800943c <MX_GPIO_Init+0x240>)
 8009268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926a:	2202      	movs	r2, #2
 800926c:	4013      	ands	r3, r2
 800926e:	607b      	str	r3, [r7, #4]
 8009270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009272:	4b72      	ldr	r3, [pc, #456]	@ (800943c <MX_GPIO_Init+0x240>)
 8009274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009276:	4b71      	ldr	r3, [pc, #452]	@ (800943c <MX_GPIO_Init+0x240>)
 8009278:	2108      	movs	r1, #8
 800927a:	430a      	orrs	r2, r1
 800927c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800927e:	4b6f      	ldr	r3, [pc, #444]	@ (800943c <MX_GPIO_Init+0x240>)
 8009280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009282:	2208      	movs	r2, #8
 8009284:	4013      	ands	r3, r2
 8009286:	603b      	str	r3, [r7, #0]
 8009288:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800928a:	4b6d      	ldr	r3, [pc, #436]	@ (8009440 <MX_GPIO_Init+0x244>)
 800928c:	2201      	movs	r2, #1
 800928e:	2101      	movs	r1, #1
 8009290:	0018      	movs	r0, r3
 8009292:	f009 f830 	bl	80122f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8009296:	4b6a      	ldr	r3, [pc, #424]	@ (8009440 <MX_GPIO_Init+0x244>)
 8009298:	2200      	movs	r2, #0
 800929a:	2102      	movs	r1, #2
 800929c:	0018      	movs	r0, r3
 800929e:	f009 f82a 	bl	80122f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 80092a2:	4968      	ldr	r1, [pc, #416]	@ (8009444 <MX_GPIO_Init+0x248>)
 80092a4:	4b68      	ldr	r3, [pc, #416]	@ (8009448 <MX_GPIO_Init+0x24c>)
 80092a6:	2201      	movs	r2, #1
 80092a8:	0018      	movs	r0, r3
 80092aa:	f009 f824 	bl	80122f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80092ae:	2380      	movs	r3, #128	@ 0x80
 80092b0:	011b      	lsls	r3, r3, #4
 80092b2:	4866      	ldr	r0, [pc, #408]	@ (800944c <MX_GPIO_Init+0x250>)
 80092b4:	2201      	movs	r2, #1
 80092b6:	0019      	movs	r1, r3
 80092b8:	f009 f81d 	bl	80122f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80092bc:	2380      	movs	r3, #128	@ 0x80
 80092be:	015b      	lsls	r3, r3, #5
 80092c0:	4862      	ldr	r0, [pc, #392]	@ (800944c <MX_GPIO_Init+0x250>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	0019      	movs	r1, r3
 80092c6:	f009 f816 	bl	80122f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 80092ca:	193b      	adds	r3, r7, r4
 80092cc:	4a60      	ldr	r2, [pc, #384]	@ (8009450 <MX_GPIO_Init+0x254>)
 80092ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80092d0:	193b      	adds	r3, r7, r4
 80092d2:	2203      	movs	r2, #3
 80092d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092d6:	193b      	adds	r3, r7, r4
 80092d8:	2200      	movs	r2, #0
 80092da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092dc:	193b      	adds	r3, r7, r4
 80092de:	4a5b      	ldr	r2, [pc, #364]	@ (800944c <MX_GPIO_Init+0x250>)
 80092e0:	0019      	movs	r1, r3
 80092e2:	0010      	movs	r0, r2
 80092e4:	f008 fe6c 	bl	8011fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 80092e8:	193b      	adds	r3, r7, r4
 80092ea:	2203      	movs	r2, #3
 80092ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092ee:	193b      	adds	r3, r7, r4
 80092f0:	2201      	movs	r2, #1
 80092f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092f4:	193b      	adds	r3, r7, r4
 80092f6:	2200      	movs	r2, #0
 80092f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092fa:	193b      	adds	r3, r7, r4
 80092fc:	2200      	movs	r2, #0
 80092fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009300:	193b      	adds	r3, r7, r4
 8009302:	4a4f      	ldr	r2, [pc, #316]	@ (8009440 <MX_GPIO_Init+0x244>)
 8009304:	0019      	movs	r1, r3
 8009306:	0010      	movs	r0, r2
 8009308:	f008 fe5a 	bl	8011fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800930c:	193b      	adds	r3, r7, r4
 800930e:	2270      	movs	r2, #112	@ 0x70
 8009310:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009312:	193b      	adds	r3, r7, r4
 8009314:	2203      	movs	r2, #3
 8009316:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009318:	193b      	adds	r3, r7, r4
 800931a:	2200      	movs	r2, #0
 800931c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800931e:	193a      	adds	r2, r7, r4
 8009320:	23a0      	movs	r3, #160	@ 0xa0
 8009322:	05db      	lsls	r3, r3, #23
 8009324:	0011      	movs	r1, r2
 8009326:	0018      	movs	r0, r3
 8009328:	f008 fe4a 	bl	8011fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800932c:	193b      	adds	r3, r7, r4
 800932e:	22c0      	movs	r2, #192	@ 0xc0
 8009330:	0052      	lsls	r2, r2, #1
 8009332:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009334:	193b      	adds	r3, r7, r4
 8009336:	2200      	movs	r2, #0
 8009338:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800933a:	193b      	adds	r3, r7, r4
 800933c:	2200      	movs	r2, #0
 800933e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009340:	193a      	adds	r2, r7, r4
 8009342:	23a0      	movs	r3, #160	@ 0xa0
 8009344:	05db      	lsls	r3, r3, #23
 8009346:	0011      	movs	r1, r2
 8009348:	0018      	movs	r0, r3
 800934a:	f008 fe39 	bl	8011fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800934e:	193b      	adds	r3, r7, r4
 8009350:	4a3c      	ldr	r2, [pc, #240]	@ (8009444 <MX_GPIO_Init+0x248>)
 8009352:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009354:	193b      	adds	r3, r7, r4
 8009356:	2201      	movs	r2, #1
 8009358:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800935a:	193b      	adds	r3, r7, r4
 800935c:	2200      	movs	r2, #0
 800935e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009360:	193b      	adds	r3, r7, r4
 8009362:	2200      	movs	r2, #0
 8009364:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009366:	193b      	adds	r3, r7, r4
 8009368:	4a37      	ldr	r2, [pc, #220]	@ (8009448 <MX_GPIO_Init+0x24c>)
 800936a:	0019      	movs	r1, r3
 800936c:	0010      	movs	r0, r2
 800936e:	f008 fe27 	bl	8011fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8009372:	193b      	adds	r3, r7, r4
 8009374:	4a37      	ldr	r2, [pc, #220]	@ (8009454 <MX_GPIO_Init+0x258>)
 8009376:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009378:	193b      	adds	r3, r7, r4
 800937a:	2203      	movs	r2, #3
 800937c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800937e:	193b      	adds	r3, r7, r4
 8009380:	2200      	movs	r2, #0
 8009382:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009384:	193b      	adds	r3, r7, r4
 8009386:	4a30      	ldr	r2, [pc, #192]	@ (8009448 <MX_GPIO_Init+0x24c>)
 8009388:	0019      	movs	r1, r3
 800938a:	0010      	movs	r0, r2
 800938c:	f008 fe18 	bl	8011fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009390:	0021      	movs	r1, r4
 8009392:	187b      	adds	r3, r7, r1
 8009394:	2280      	movs	r2, #128	@ 0x80
 8009396:	0092      	lsls	r2, r2, #2
 8009398:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800939a:	000c      	movs	r4, r1
 800939c:	193b      	adds	r3, r7, r4
 800939e:	2200      	movs	r2, #0
 80093a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093a2:	193b      	adds	r3, r7, r4
 80093a4:	2200      	movs	r2, #0
 80093a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 80093a8:	193b      	adds	r3, r7, r4
 80093aa:	4a28      	ldr	r2, [pc, #160]	@ (800944c <MX_GPIO_Init+0x250>)
 80093ac:	0019      	movs	r1, r3
 80093ae:	0010      	movs	r0, r2
 80093b0:	f008 fe06 	bl	8011fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80093b4:	193b      	adds	r3, r7, r4
 80093b6:	2280      	movs	r2, #128	@ 0x80
 80093b8:	0212      	lsls	r2, r2, #8
 80093ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80093bc:	193b      	adds	r3, r7, r4
 80093be:	2288      	movs	r2, #136	@ 0x88
 80093c0:	0352      	lsls	r2, r2, #13
 80093c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093c4:	193b      	adds	r3, r7, r4
 80093c6:	2200      	movs	r2, #0
 80093c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 80093ca:	193a      	adds	r2, r7, r4
 80093cc:	23a0      	movs	r3, #160	@ 0xa0
 80093ce:	05db      	lsls	r3, r3, #23
 80093d0:	0011      	movs	r1, r2
 80093d2:	0018      	movs	r0, r3
 80093d4:	f008 fdf4 	bl	8011fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 80093d8:	0021      	movs	r1, r4
 80093da:	187b      	adds	r3, r7, r1
 80093dc:	22c0      	movs	r2, #192	@ 0xc0
 80093de:	0152      	lsls	r2, r2, #5
 80093e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80093e2:	000c      	movs	r4, r1
 80093e4:	193b      	adds	r3, r7, r4
 80093e6:	2201      	movs	r2, #1
 80093e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ea:	193b      	adds	r3, r7, r4
 80093ec:	2200      	movs	r2, #0
 80093ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093f0:	193b      	adds	r3, r7, r4
 80093f2:	2200      	movs	r2, #0
 80093f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80093f6:	193b      	adds	r3, r7, r4
 80093f8:	4a14      	ldr	r2, [pc, #80]	@ (800944c <MX_GPIO_Init+0x250>)
 80093fa:	0019      	movs	r1, r3
 80093fc:	0010      	movs	r0, r2
 80093fe:	f008 fddf 	bl	8011fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8009402:	0021      	movs	r1, r4
 8009404:	187b      	adds	r3, r7, r1
 8009406:	2204      	movs	r2, #4
 8009408:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800940a:	187b      	adds	r3, r7, r1
 800940c:	2200      	movs	r2, #0
 800940e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009410:	187b      	adds	r3, r7, r1
 8009412:	2201      	movs	r2, #1
 8009414:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8009416:	187b      	adds	r3, r7, r1
 8009418:	4a0f      	ldr	r2, [pc, #60]	@ (8009458 <MX_GPIO_Init+0x25c>)
 800941a:	0019      	movs	r1, r3
 800941c:	0010      	movs	r0, r2
 800941e:	f008 fdcf 	bl	8011fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8009422:	2200      	movs	r2, #0
 8009424:	2100      	movs	r1, #0
 8009426:	2007      	movs	r0, #7
 8009428:	f008 f978 	bl	801171c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800942c:	2007      	movs	r0, #7
 800942e:	f008 f98a 	bl	8011746 <HAL_NVIC_EnableIRQ>

}
 8009432:	46c0      	nop			@ (mov r8, r8)
 8009434:	46bd      	mov	sp, r7
 8009436:	b00b      	add	sp, #44	@ 0x2c
 8009438:	bd90      	pop	{r4, r7, pc}
 800943a:	46c0      	nop			@ (mov r8, r8)
 800943c:	40021000 	.word	0x40021000
 8009440:	50001c00 	.word	0x50001c00
 8009444:	00000301 	.word	0x00000301
 8009448:	50000400 	.word	0x50000400
 800944c:	50000800 	.word	0x50000800
 8009450:	0000200c 	.word	0x0000200c
 8009454:	0000403e 	.word	0x0000403e
 8009458:	50000c00 	.word	0x50000c00

0800945c <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2100      	movs	r1, #0
 800946a:	0018      	movs	r0, r3
 800946c:	f00f fdb6 	bl	8018fdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2108      	movs	r1, #8
 8009474:	0018      	movs	r0, r3
 8009476:	f00f fdb1 	bl	8018fdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	210c      	movs	r1, #12
 800947e:	0018      	movs	r0, r3
 8009480:	f00f fdac 	bl	8018fdc <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8009484:	2380      	movs	r3, #128	@ 0x80
 8009486:	05db      	lsls	r3, r3, #23
 8009488:	22fa      	movs	r2, #250	@ 0xfa
 800948a:	0112      	lsls	r2, r2, #4
 800948c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800948e:	2380      	movs	r3, #128	@ 0x80
 8009490:	05db      	lsls	r3, r3, #23
 8009492:	22fa      	movs	r2, #250	@ 0xfa
 8009494:	0112      	lsls	r2, r2, #4
 8009496:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8009498:	2380      	movs	r3, #128	@ 0x80
 800949a:	05db      	lsls	r3, r3, #23
 800949c:	22fa      	movs	r2, #250	@ 0xfa
 800949e:	0112      	lsls	r2, r2, #4
 80094a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80094a2:	2380      	movs	r3, #128	@ 0x80
 80094a4:	05db      	lsls	r3, r3, #23
 80094a6:	22fa      	movs	r2, #250	@ 0xfa
 80094a8:	0112      	lsls	r2, r2, #4
 80094aa:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2100      	movs	r1, #0
 80094b0:	0018      	movs	r0, r3
 80094b2:	f00f fd93 	bl	8018fdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	2104      	movs	r1, #4
 80094ba:	0018      	movs	r0, r3
 80094bc:	f00f fd8e 	bl	8018fdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2108      	movs	r1, #8
 80094c4:	0018      	movs	r0, r3
 80094c6:	f00f fd89 	bl	8018fdc <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 80094ca:	4b0a      	ldr	r3, [pc, #40]	@ (80094f4 <GPIO_InitPWMLEDs+0x98>)
 80094cc:	22fa      	movs	r2, #250	@ 0xfa
 80094ce:	0112      	lsls	r2, r2, #4
 80094d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 80094d2:	4b08      	ldr	r3, [pc, #32]	@ (80094f4 <GPIO_InitPWMLEDs+0x98>)
 80094d4:	22fa      	movs	r2, #250	@ 0xfa
 80094d6:	0112      	lsls	r2, r2, #4
 80094d8:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 80094da:	4b06      	ldr	r3, [pc, #24]	@ (80094f4 <GPIO_InitPWMLEDs+0x98>)
 80094dc:	22fa      	movs	r2, #250	@ 0xfa
 80094de:	0112      	lsls	r2, r2, #4
 80094e0:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 80094e2:	4b04      	ldr	r3, [pc, #16]	@ (80094f4 <GPIO_InitPWMLEDs+0x98>)
 80094e4:	22fa      	movs	r2, #250	@ 0xfa
 80094e6:	0112      	lsls	r2, r2, #4
 80094e8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80094ea:	46c0      	nop			@ (mov r8, r8)
 80094ec:	46bd      	mov	sp, r7
 80094ee:	b002      	add	sp, #8
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	46c0      	nop			@ (mov r8, r8)
 80094f4:	40000400 	.word	0x40000400

080094f8 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094fe:	1d3b      	adds	r3, r7, #4
 8009500:	0018      	movs	r0, r3
 8009502:	2314      	movs	r3, #20
 8009504:	001a      	movs	r2, r3
 8009506:	2100      	movs	r1, #0
 8009508:	f019 f976 	bl	80227f8 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800950c:	1d3b      	adds	r3, r7, #4
 800950e:	2205      	movs	r2, #5
 8009510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009512:	1d3b      	adds	r3, r7, #4
 8009514:	2203      	movs	r2, #3
 8009516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009518:	1d3b      	adds	r3, r7, #4
 800951a:	2200      	movs	r2, #0
 800951c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800951e:	1d3a      	adds	r2, r7, #4
 8009520:	23a0      	movs	r3, #160	@ 0xa0
 8009522:	05db      	lsls	r3, r3, #23
 8009524:	0011      	movs	r1, r2
 8009526:	0018      	movs	r0, r3
 8009528:	f008 fd4a 	bl	8011fc0 <HAL_GPIO_Init>
}
 800952c:	46c0      	nop			@ (mov r8, r8)
 800952e:	46bd      	mov	sp, r7
 8009530:	b006      	add	sp, #24
 8009532:	bd80      	pop	{r7, pc}

08009534 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009538:	4b1b      	ldr	r3, [pc, #108]	@ (80095a8 <MX_I2C1_Init+0x74>)
 800953a:	4a1c      	ldr	r2, [pc, #112]	@ (80095ac <MX_I2C1_Init+0x78>)
 800953c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800953e:	4b1a      	ldr	r3, [pc, #104]	@ (80095a8 <MX_I2C1_Init+0x74>)
 8009540:	4a1b      	ldr	r2, [pc, #108]	@ (80095b0 <MX_I2C1_Init+0x7c>)
 8009542:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009544:	4b18      	ldr	r3, [pc, #96]	@ (80095a8 <MX_I2C1_Init+0x74>)
 8009546:	2200      	movs	r2, #0
 8009548:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800954a:	4b17      	ldr	r3, [pc, #92]	@ (80095a8 <MX_I2C1_Init+0x74>)
 800954c:	2201      	movs	r2, #1
 800954e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009550:	4b15      	ldr	r3, [pc, #84]	@ (80095a8 <MX_I2C1_Init+0x74>)
 8009552:	2200      	movs	r2, #0
 8009554:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009556:	4b14      	ldr	r3, [pc, #80]	@ (80095a8 <MX_I2C1_Init+0x74>)
 8009558:	2200      	movs	r2, #0
 800955a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800955c:	4b12      	ldr	r3, [pc, #72]	@ (80095a8 <MX_I2C1_Init+0x74>)
 800955e:	2200      	movs	r2, #0
 8009560:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009562:	4b11      	ldr	r3, [pc, #68]	@ (80095a8 <MX_I2C1_Init+0x74>)
 8009564:	2200      	movs	r2, #0
 8009566:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009568:	4b0f      	ldr	r3, [pc, #60]	@ (80095a8 <MX_I2C1_Init+0x74>)
 800956a:	2200      	movs	r2, #0
 800956c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800956e:	4b0e      	ldr	r3, [pc, #56]	@ (80095a8 <MX_I2C1_Init+0x74>)
 8009570:	0018      	movs	r0, r3
 8009572:	f008 fef9 	bl	8012368 <HAL_I2C_Init>
 8009576:	1e03      	subs	r3, r0, #0
 8009578:	d001      	beq.n	800957e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800957a:	f000 fd83 	bl	800a084 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800957e:	4b0a      	ldr	r3, [pc, #40]	@ (80095a8 <MX_I2C1_Init+0x74>)
 8009580:	2100      	movs	r1, #0
 8009582:	0018      	movs	r0, r3
 8009584:	f00b fd62 	bl	801504c <HAL_I2CEx_ConfigAnalogFilter>
 8009588:	1e03      	subs	r3, r0, #0
 800958a:	d001      	beq.n	8009590 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800958c:	f000 fd7a 	bl	800a084 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009590:	4b05      	ldr	r3, [pc, #20]	@ (80095a8 <MX_I2C1_Init+0x74>)
 8009592:	2100      	movs	r1, #0
 8009594:	0018      	movs	r0, r3
 8009596:	f00b fda5 	bl	80150e4 <HAL_I2CEx_ConfigDigitalFilter>
 800959a:	1e03      	subs	r3, r0, #0
 800959c:	d001      	beq.n	80095a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800959e:	f000 fd71 	bl	800a084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80095a2:	46c0      	nop			@ (mov r8, r8)
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	20000bb0 	.word	0x20000bb0
 80095ac:	40005400 	.word	0x40005400
 80095b0:	00503d58 	.word	0x00503d58

080095b4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80095b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009628 <MX_I2C2_Init+0x74>)
 80095ba:	4a1c      	ldr	r2, [pc, #112]	@ (800962c <MX_I2C2_Init+0x78>)
 80095bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80095be:	4b1a      	ldr	r3, [pc, #104]	@ (8009628 <MX_I2C2_Init+0x74>)
 80095c0:	4a1b      	ldr	r2, [pc, #108]	@ (8009630 <MX_I2C2_Init+0x7c>)
 80095c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80095c4:	4b18      	ldr	r3, [pc, #96]	@ (8009628 <MX_I2C2_Init+0x74>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80095ca:	4b17      	ldr	r3, [pc, #92]	@ (8009628 <MX_I2C2_Init+0x74>)
 80095cc:	2201      	movs	r2, #1
 80095ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80095d0:	4b15      	ldr	r3, [pc, #84]	@ (8009628 <MX_I2C2_Init+0x74>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80095d6:	4b14      	ldr	r3, [pc, #80]	@ (8009628 <MX_I2C2_Init+0x74>)
 80095d8:	2200      	movs	r2, #0
 80095da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80095dc:	4b12      	ldr	r3, [pc, #72]	@ (8009628 <MX_I2C2_Init+0x74>)
 80095de:	2200      	movs	r2, #0
 80095e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80095e2:	4b11      	ldr	r3, [pc, #68]	@ (8009628 <MX_I2C2_Init+0x74>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80095e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009628 <MX_I2C2_Init+0x74>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80095ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009628 <MX_I2C2_Init+0x74>)
 80095f0:	0018      	movs	r0, r3
 80095f2:	f008 feb9 	bl	8012368 <HAL_I2C_Init>
 80095f6:	1e03      	subs	r3, r0, #0
 80095f8:	d001      	beq.n	80095fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80095fa:	f000 fd43 	bl	800a084 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80095fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009628 <MX_I2C2_Init+0x74>)
 8009600:	2100      	movs	r1, #0
 8009602:	0018      	movs	r0, r3
 8009604:	f00b fd22 	bl	801504c <HAL_I2CEx_ConfigAnalogFilter>
 8009608:	1e03      	subs	r3, r0, #0
 800960a:	d001      	beq.n	8009610 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800960c:	f000 fd3a 	bl	800a084 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009610:	4b05      	ldr	r3, [pc, #20]	@ (8009628 <MX_I2C2_Init+0x74>)
 8009612:	2100      	movs	r1, #0
 8009614:	0018      	movs	r0, r3
 8009616:	f00b fd65 	bl	80150e4 <HAL_I2CEx_ConfigDigitalFilter>
 800961a:	1e03      	subs	r3, r0, #0
 800961c:	d001      	beq.n	8009622 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800961e:	f000 fd31 	bl	800a084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8009622:	46c0      	nop			@ (mov r8, r8)
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	20000c04 	.word	0x20000c04
 800962c:	40005800 	.word	0x40005800
 8009630:	00503d58 	.word	0x00503d58

08009634 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009634:	b590      	push	{r4, r7, lr}
 8009636:	b08b      	sub	sp, #44	@ 0x2c
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800963c:	2414      	movs	r4, #20
 800963e:	193b      	adds	r3, r7, r4
 8009640:	0018      	movs	r0, r3
 8009642:	2314      	movs	r3, #20
 8009644:	001a      	movs	r2, r3
 8009646:	2100      	movs	r1, #0
 8009648:	f019 f8d6 	bl	80227f8 <memset>
  if(i2cHandle->Instance==I2C1)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a5d      	ldr	r2, [pc, #372]	@ (80097c8 <HAL_I2C_MspInit+0x194>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d000      	beq.n	8009658 <HAL_I2C_MspInit+0x24>
 8009656:	e083      	b.n	8009760 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009658:	4b5c      	ldr	r3, [pc, #368]	@ (80097cc <HAL_I2C_MspInit+0x198>)
 800965a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800965c:	4b5b      	ldr	r3, [pc, #364]	@ (80097cc <HAL_I2C_MspInit+0x198>)
 800965e:	2102      	movs	r1, #2
 8009660:	430a      	orrs	r2, r1
 8009662:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009664:	4b59      	ldr	r3, [pc, #356]	@ (80097cc <HAL_I2C_MspInit+0x198>)
 8009666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009668:	2202      	movs	r2, #2
 800966a:	4013      	ands	r3, r2
 800966c:	613b      	str	r3, [r7, #16]
 800966e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009670:	0021      	movs	r1, r4
 8009672:	187b      	adds	r3, r7, r1
 8009674:	22c0      	movs	r2, #192	@ 0xc0
 8009676:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009678:	187b      	adds	r3, r7, r1
 800967a:	2212      	movs	r2, #18
 800967c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800967e:	187b      	adds	r3, r7, r1
 8009680:	2200      	movs	r2, #0
 8009682:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009684:	187b      	adds	r3, r7, r1
 8009686:	2203      	movs	r2, #3
 8009688:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800968a:	187b      	adds	r3, r7, r1
 800968c:	2201      	movs	r2, #1
 800968e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009690:	187b      	adds	r3, r7, r1
 8009692:	4a4f      	ldr	r2, [pc, #316]	@ (80097d0 <HAL_I2C_MspInit+0x19c>)
 8009694:	0019      	movs	r1, r3
 8009696:	0010      	movs	r0, r2
 8009698:	f008 fc92 	bl	8011fc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800969c:	4b4b      	ldr	r3, [pc, #300]	@ (80097cc <HAL_I2C_MspInit+0x198>)
 800969e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096a0:	4b4a      	ldr	r3, [pc, #296]	@ (80097cc <HAL_I2C_MspInit+0x198>)
 80096a2:	2180      	movs	r1, #128	@ 0x80
 80096a4:	0389      	lsls	r1, r1, #14
 80096a6:	430a      	orrs	r2, r1
 80096a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80096aa:	4b4a      	ldr	r3, [pc, #296]	@ (80097d4 <HAL_I2C_MspInit+0x1a0>)
 80096ac:	4a4a      	ldr	r2, [pc, #296]	@ (80097d8 <HAL_I2C_MspInit+0x1a4>)
 80096ae:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80096b0:	4b48      	ldr	r3, [pc, #288]	@ (80097d4 <HAL_I2C_MspInit+0x1a0>)
 80096b2:	2206      	movs	r2, #6
 80096b4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80096b6:	4b47      	ldr	r3, [pc, #284]	@ (80097d4 <HAL_I2C_MspInit+0x1a0>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80096bc:	4b45      	ldr	r3, [pc, #276]	@ (80097d4 <HAL_I2C_MspInit+0x1a0>)
 80096be:	2200      	movs	r2, #0
 80096c0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80096c2:	4b44      	ldr	r3, [pc, #272]	@ (80097d4 <HAL_I2C_MspInit+0x1a0>)
 80096c4:	2280      	movs	r2, #128	@ 0x80
 80096c6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80096c8:	4b42      	ldr	r3, [pc, #264]	@ (80097d4 <HAL_I2C_MspInit+0x1a0>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80096ce:	4b41      	ldr	r3, [pc, #260]	@ (80097d4 <HAL_I2C_MspInit+0x1a0>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80096d4:	4b3f      	ldr	r3, [pc, #252]	@ (80097d4 <HAL_I2C_MspInit+0x1a0>)
 80096d6:	2200      	movs	r2, #0
 80096d8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80096da:	4b3e      	ldr	r3, [pc, #248]	@ (80097d4 <HAL_I2C_MspInit+0x1a0>)
 80096dc:	2200      	movs	r2, #0
 80096de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80096e0:	4b3c      	ldr	r3, [pc, #240]	@ (80097d4 <HAL_I2C_MspInit+0x1a0>)
 80096e2:	0018      	movs	r0, r3
 80096e4:	f008 f850 	bl	8011788 <HAL_DMA_Init>
 80096e8:	1e03      	subs	r3, r0, #0
 80096ea:	d001      	beq.n	80096f0 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80096ec:	f000 fcca 	bl	800a084 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a38      	ldr	r2, [pc, #224]	@ (80097d4 <HAL_I2C_MspInit+0x1a0>)
 80096f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80096f6:	4b37      	ldr	r3, [pc, #220]	@ (80097d4 <HAL_I2C_MspInit+0x1a0>)
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80096fc:	4b37      	ldr	r3, [pc, #220]	@ (80097dc <HAL_I2C_MspInit+0x1a8>)
 80096fe:	4a38      	ldr	r2, [pc, #224]	@ (80097e0 <HAL_I2C_MspInit+0x1ac>)
 8009700:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8009702:	4b36      	ldr	r3, [pc, #216]	@ (80097dc <HAL_I2C_MspInit+0x1a8>)
 8009704:	2206      	movs	r2, #6
 8009706:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009708:	4b34      	ldr	r3, [pc, #208]	@ (80097dc <HAL_I2C_MspInit+0x1a8>)
 800970a:	2210      	movs	r2, #16
 800970c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800970e:	4b33      	ldr	r3, [pc, #204]	@ (80097dc <HAL_I2C_MspInit+0x1a8>)
 8009710:	2200      	movs	r2, #0
 8009712:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009714:	4b31      	ldr	r3, [pc, #196]	@ (80097dc <HAL_I2C_MspInit+0x1a8>)
 8009716:	2280      	movs	r2, #128	@ 0x80
 8009718:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800971a:	4b30      	ldr	r3, [pc, #192]	@ (80097dc <HAL_I2C_MspInit+0x1a8>)
 800971c:	2200      	movs	r2, #0
 800971e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009720:	4b2e      	ldr	r3, [pc, #184]	@ (80097dc <HAL_I2C_MspInit+0x1a8>)
 8009722:	2200      	movs	r2, #0
 8009724:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8009726:	4b2d      	ldr	r3, [pc, #180]	@ (80097dc <HAL_I2C_MspInit+0x1a8>)
 8009728:	2200      	movs	r2, #0
 800972a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800972c:	4b2b      	ldr	r3, [pc, #172]	@ (80097dc <HAL_I2C_MspInit+0x1a8>)
 800972e:	2200      	movs	r2, #0
 8009730:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8009732:	4b2a      	ldr	r3, [pc, #168]	@ (80097dc <HAL_I2C_MspInit+0x1a8>)
 8009734:	0018      	movs	r0, r3
 8009736:	f008 f827 	bl	8011788 <HAL_DMA_Init>
 800973a:	1e03      	subs	r3, r0, #0
 800973c:	d001      	beq.n	8009742 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800973e:	f000 fca1 	bl	800a084 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a25      	ldr	r2, [pc, #148]	@ (80097dc <HAL_I2C_MspInit+0x1a8>)
 8009746:	639a      	str	r2, [r3, #56]	@ 0x38
 8009748:	4b24      	ldr	r3, [pc, #144]	@ (80097dc <HAL_I2C_MspInit+0x1a8>)
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800974e:	2200      	movs	r2, #0
 8009750:	2100      	movs	r1, #0
 8009752:	2017      	movs	r0, #23
 8009754:	f007 ffe2 	bl	801171c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8009758:	2017      	movs	r0, #23
 800975a:	f007 fff4 	bl	8011746 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800975e:	e02e      	b.n	80097be <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a1f      	ldr	r2, [pc, #124]	@ (80097e4 <HAL_I2C_MspInit+0x1b0>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d129      	bne.n	80097be <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800976a:	4b18      	ldr	r3, [pc, #96]	@ (80097cc <HAL_I2C_MspInit+0x198>)
 800976c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800976e:	4b17      	ldr	r3, [pc, #92]	@ (80097cc <HAL_I2C_MspInit+0x198>)
 8009770:	2102      	movs	r1, #2
 8009772:	430a      	orrs	r2, r1
 8009774:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009776:	4b15      	ldr	r3, [pc, #84]	@ (80097cc <HAL_I2C_MspInit+0x198>)
 8009778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977a:	2202      	movs	r2, #2
 800977c:	4013      	ands	r3, r2
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009782:	2114      	movs	r1, #20
 8009784:	187b      	adds	r3, r7, r1
 8009786:	22c0      	movs	r2, #192	@ 0xc0
 8009788:	0112      	lsls	r2, r2, #4
 800978a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800978c:	187b      	adds	r3, r7, r1
 800978e:	2212      	movs	r2, #18
 8009790:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009792:	187b      	adds	r3, r7, r1
 8009794:	2200      	movs	r2, #0
 8009796:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009798:	187b      	adds	r3, r7, r1
 800979a:	2203      	movs	r2, #3
 800979c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800979e:	187b      	adds	r3, r7, r1
 80097a0:	2206      	movs	r2, #6
 80097a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097a4:	187b      	adds	r3, r7, r1
 80097a6:	4a0a      	ldr	r2, [pc, #40]	@ (80097d0 <HAL_I2C_MspInit+0x19c>)
 80097a8:	0019      	movs	r1, r3
 80097aa:	0010      	movs	r0, r2
 80097ac:	f008 fc08 	bl	8011fc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80097b0:	4b06      	ldr	r3, [pc, #24]	@ (80097cc <HAL_I2C_MspInit+0x198>)
 80097b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097b4:	4b05      	ldr	r3, [pc, #20]	@ (80097cc <HAL_I2C_MspInit+0x198>)
 80097b6:	2180      	movs	r1, #128	@ 0x80
 80097b8:	03c9      	lsls	r1, r1, #15
 80097ba:	430a      	orrs	r2, r1
 80097bc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80097be:	46c0      	nop			@ (mov r8, r8)
 80097c0:	46bd      	mov	sp, r7
 80097c2:	b00b      	add	sp, #44	@ 0x2c
 80097c4:	bd90      	pop	{r4, r7, pc}
 80097c6:	46c0      	nop			@ (mov r8, r8)
 80097c8:	40005400 	.word	0x40005400
 80097cc:	40021000 	.word	0x40021000
 80097d0:	50000400 	.word	0x50000400
 80097d4:	20000c58 	.word	0x20000c58
 80097d8:	40020030 	.word	0x40020030
 80097dc:	20000ca0 	.word	0x20000ca0
 80097e0:	4002001c 	.word	0x4002001c
 80097e4:	40005800 	.word	0x40005800

080097e8 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80097ec:	4b10      	ldr	r3, [pc, #64]	@ (8009830 <MX_I2S2_Init+0x48>)
 80097ee:	4a11      	ldr	r2, [pc, #68]	@ (8009834 <MX_I2S2_Init+0x4c>)
 80097f0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80097f2:	4b0f      	ldr	r3, [pc, #60]	@ (8009830 <MX_I2S2_Init+0x48>)
 80097f4:	22c0      	movs	r2, #192	@ 0xc0
 80097f6:	0092      	lsls	r2, r2, #2
 80097f8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80097fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009830 <MX_I2S2_Init+0x48>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8009800:	4b0b      	ldr	r3, [pc, #44]	@ (8009830 <MX_I2S2_Init+0x48>)
 8009802:	2203      	movs	r2, #3
 8009804:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8009806:	4b0a      	ldr	r3, [pc, #40]	@ (8009830 <MX_I2S2_Init+0x48>)
 8009808:	2200      	movs	r2, #0
 800980a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800980c:	4b08      	ldr	r3, [pc, #32]	@ (8009830 <MX_I2S2_Init+0x48>)
 800980e:	22fa      	movs	r2, #250	@ 0xfa
 8009810:	0192      	lsls	r2, r2, #6
 8009812:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8009814:	4b06      	ldr	r3, [pc, #24]	@ (8009830 <MX_I2S2_Init+0x48>)
 8009816:	2200      	movs	r2, #0
 8009818:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800981a:	4b05      	ldr	r3, [pc, #20]	@ (8009830 <MX_I2S2_Init+0x48>)
 800981c:	0018      	movs	r0, r3
 800981e:	f00b fcad 	bl	801517c <HAL_I2S_Init>
 8009822:	1e03      	subs	r3, r0, #0
 8009824:	d001      	beq.n	800982a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8009826:	f000 fc2d 	bl	800a084 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800982a:	46c0      	nop			@ (mov r8, r8)
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	20000ce8 	.word	0x20000ce8
 8009834:	40003800 	.word	0x40003800

08009838 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8009838:	b590      	push	{r4, r7, lr}
 800983a:	b089      	sub	sp, #36	@ 0x24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009840:	240c      	movs	r4, #12
 8009842:	193b      	adds	r3, r7, r4
 8009844:	0018      	movs	r0, r3
 8009846:	2314      	movs	r3, #20
 8009848:	001a      	movs	r2, r3
 800984a:	2100      	movs	r1, #0
 800984c:	f018 ffd4 	bl	80227f8 <memset>
  if(i2sHandle->Instance==SPI2)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a2d      	ldr	r2, [pc, #180]	@ (800990c <HAL_I2S_MspInit+0xd4>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d154      	bne.n	8009904 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800985a:	4b2d      	ldr	r3, [pc, #180]	@ (8009910 <HAL_I2S_MspInit+0xd8>)
 800985c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800985e:	4b2c      	ldr	r3, [pc, #176]	@ (8009910 <HAL_I2S_MspInit+0xd8>)
 8009860:	2180      	movs	r1, #128	@ 0x80
 8009862:	01c9      	lsls	r1, r1, #7
 8009864:	430a      	orrs	r2, r1
 8009866:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009868:	4b29      	ldr	r3, [pc, #164]	@ (8009910 <HAL_I2S_MspInit+0xd8>)
 800986a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800986c:	4b28      	ldr	r3, [pc, #160]	@ (8009910 <HAL_I2S_MspInit+0xd8>)
 800986e:	2102      	movs	r1, #2
 8009870:	430a      	orrs	r2, r1
 8009872:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009874:	4b26      	ldr	r3, [pc, #152]	@ (8009910 <HAL_I2S_MspInit+0xd8>)
 8009876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009878:	2202      	movs	r2, #2
 800987a:	4013      	ands	r3, r2
 800987c:	60bb      	str	r3, [r7, #8]
 800987e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8009880:	193b      	adds	r3, r7, r4
 8009882:	22b0      	movs	r2, #176	@ 0xb0
 8009884:	0212      	lsls	r2, r2, #8
 8009886:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009888:	0021      	movs	r1, r4
 800988a:	187b      	adds	r3, r7, r1
 800988c:	2202      	movs	r2, #2
 800988e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009890:	187b      	adds	r3, r7, r1
 8009892:	2200      	movs	r2, #0
 8009894:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009896:	187b      	adds	r3, r7, r1
 8009898:	2200      	movs	r2, #0
 800989a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800989c:	187b      	adds	r3, r7, r1
 800989e:	2200      	movs	r2, #0
 80098a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098a2:	187b      	adds	r3, r7, r1
 80098a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009914 <HAL_I2S_MspInit+0xdc>)
 80098a6:	0019      	movs	r1, r3
 80098a8:	0010      	movs	r0, r2
 80098aa:	f008 fb89 	bl	8011fc0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80098ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009918 <HAL_I2S_MspInit+0xe0>)
 80098b0:	4a1a      	ldr	r2, [pc, #104]	@ (800991c <HAL_I2S_MspInit+0xe4>)
 80098b2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 80098b4:	4b18      	ldr	r3, [pc, #96]	@ (8009918 <HAL_I2S_MspInit+0xe0>)
 80098b6:	2202      	movs	r2, #2
 80098b8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80098ba:	4b17      	ldr	r3, [pc, #92]	@ (8009918 <HAL_I2S_MspInit+0xe0>)
 80098bc:	2200      	movs	r2, #0
 80098be:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80098c0:	4b15      	ldr	r3, [pc, #84]	@ (8009918 <HAL_I2S_MspInit+0xe0>)
 80098c2:	2200      	movs	r2, #0
 80098c4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80098c6:	4b14      	ldr	r3, [pc, #80]	@ (8009918 <HAL_I2S_MspInit+0xe0>)
 80098c8:	2280      	movs	r2, #128	@ 0x80
 80098ca:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80098cc:	4b12      	ldr	r3, [pc, #72]	@ (8009918 <HAL_I2S_MspInit+0xe0>)
 80098ce:	2280      	movs	r2, #128	@ 0x80
 80098d0:	0052      	lsls	r2, r2, #1
 80098d2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80098d4:	4b10      	ldr	r3, [pc, #64]	@ (8009918 <HAL_I2S_MspInit+0xe0>)
 80098d6:	2280      	movs	r2, #128	@ 0x80
 80098d8:	00d2      	lsls	r2, r2, #3
 80098da:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80098dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009918 <HAL_I2S_MspInit+0xe0>)
 80098de:	2220      	movs	r2, #32
 80098e0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80098e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009918 <HAL_I2S_MspInit+0xe0>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80098e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009918 <HAL_I2S_MspInit+0xe0>)
 80098ea:	0018      	movs	r0, r3
 80098ec:	f007 ff4c 	bl	8011788 <HAL_DMA_Init>
 80098f0:	1e03      	subs	r3, r0, #0
 80098f2:	d001      	beq.n	80098f8 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 80098f4:	f000 fbc6 	bl	800a084 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a07      	ldr	r2, [pc, #28]	@ (8009918 <HAL_I2S_MspInit+0xe0>)
 80098fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80098fe:	4b06      	ldr	r3, [pc, #24]	@ (8009918 <HAL_I2S_MspInit+0xe0>)
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8009904:	46c0      	nop			@ (mov r8, r8)
 8009906:	46bd      	mov	sp, r7
 8009908:	b009      	add	sp, #36	@ 0x24
 800990a:	bd90      	pop	{r4, r7, pc}
 800990c:	40003800 	.word	0x40003800
 8009910:	40021000 	.word	0x40021000
 8009914:	50000400 	.word	0x50000400
 8009918:	20000d24 	.word	0x20000d24
 800991c:	40020044 	.word	0x40020044

08009920 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
  testDone = true;
 8009924:	4b14      	ldr	r3, [pc, #80]	@ (8009978 <SetTestDone+0x58>)
 8009926:	2201      	movs	r2, #1
 8009928:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800992a:	23fa      	movs	r3, #250	@ 0xfa
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	0018      	movs	r0, r3
 8009930:	f007 fa5a 	bl	8010de8 <HAL_Delay>
  SetDBLED(false, false, true);
 8009934:	2201      	movs	r2, #1
 8009936:	2100      	movs	r1, #0
 8009938:	2000      	movs	r0, #0
 800993a:	f005 fbcb 	bl	800f0d4 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800993e:	4a0f      	ldr	r2, [pc, #60]	@ (800997c <SetTestDone+0x5c>)
 8009940:	23fa      	movs	r3, #250	@ 0xfa
 8009942:	0119      	lsls	r1, r3, #4
 8009944:	23fa      	movs	r3, #250	@ 0xfa
 8009946:	011b      	lsls	r3, r3, #4
 8009948:	0018      	movs	r0, r3
 800994a:	f005 fb8f 	bl	800f06c <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800994e:	4a0b      	ldr	r2, [pc, #44]	@ (800997c <SetTestDone+0x5c>)
 8009950:	23fa      	movs	r3, #250	@ 0xfa
 8009952:	0119      	lsls	r1, r3, #4
 8009954:	23fa      	movs	r3, #250	@ 0xfa
 8009956:	011b      	lsls	r3, r3, #4
 8009958:	0018      	movs	r0, r3
 800995a:	f005 fc05 	bl	800f168 <SetVocLED>
  HAL_Delay(500);
 800995e:	23fa      	movs	r3, #250	@ 0xfa
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	0018      	movs	r0, r3
 8009964:	f007 fa40 	bl	8010de8 <HAL_Delay>
  SetLEDsOff();
 8009968:	f005 fd3e 	bl	800f3e8 <SetLEDsOff>
  InitDone();
 800996c:	f005 fad2 	bl	800ef14 <InitDone>
}
 8009970:	46c0      	nop			@ (mov r8, r8)
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	46c0      	nop			@ (mov r8, r8)
 8009978:	20000d6c 	.word	0x20000d6c
 800997c:	00000bb8 	.word	0x00000bb8

08009980 <FlashLEDs>:

void FlashLEDs(){
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8009986:	1dfb      	adds	r3, r7, #7
 8009988:	2200      	movs	r2, #0
 800998a:	701a      	strb	r2, [r3, #0]
 800998c:	e021      	b.n	80099d2 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 800998e:	2201      	movs	r2, #1
 8009990:	2101      	movs	r1, #1
 8009992:	2001      	movs	r0, #1
 8009994:	f005 fb9e 	bl	800f0d4 <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 8009998:	4a12      	ldr	r2, [pc, #72]	@ (80099e4 <FlashLEDs+0x64>)
 800999a:	23fa      	movs	r3, #250	@ 0xfa
 800999c:	0119      	lsls	r1, r3, #4
 800999e:	23fa      	movs	r3, #250	@ 0xfa
 80099a0:	011b      	lsls	r3, r3, #4
 80099a2:	0018      	movs	r0, r3
 80099a4:	f005 fb62 	bl	800f06c <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 80099a8:	4a0e      	ldr	r2, [pc, #56]	@ (80099e4 <FlashLEDs+0x64>)
 80099aa:	23fa      	movs	r3, #250	@ 0xfa
 80099ac:	0119      	lsls	r1, r3, #4
 80099ae:	23fa      	movs	r3, #250	@ 0xfa
 80099b0:	011b      	lsls	r3, r3, #4
 80099b2:	0018      	movs	r0, r3
 80099b4:	f005 fbd8 	bl	800f168 <SetVocLED>
    HAL_Delay(250);
 80099b8:	20fa      	movs	r0, #250	@ 0xfa
 80099ba:	f007 fa15 	bl	8010de8 <HAL_Delay>
    SetLEDsOff();
 80099be:	f005 fd13 	bl	800f3e8 <SetLEDsOff>
    HAL_Delay(250);
 80099c2:	20fa      	movs	r0, #250	@ 0xfa
 80099c4:	f007 fa10 	bl	8010de8 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 80099c8:	1dfb      	adds	r3, r7, #7
 80099ca:	781a      	ldrb	r2, [r3, #0]
 80099cc:	1dfb      	adds	r3, r7, #7
 80099ce:	3201      	adds	r2, #1
 80099d0:	701a      	strb	r2, [r3, #0]
 80099d2:	1dfb      	adds	r3, r7, #7
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d9d9      	bls.n	800998e <FlashLEDs+0xe>
  }
}
 80099da:	46c0      	nop			@ (mov r8, r8)
 80099dc:	46c0      	nop			@ (mov r8, r8)
 80099de:	46bd      	mov	sp, r7
 80099e0:	b002      	add	sp, #8
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	00000bb8 	.word	0x00000bb8

080099e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80099ee:	f007 f98b 	bl	8010d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80099f2:	f000 f9f7 	bl	8009de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80099f6:	f7ff fc01 	bl	80091fc <MX_GPIO_Init>
  MX_DMA_Init();
 80099fa:	f7ff fa29 	bl	8008e50 <MX_DMA_Init>
  MX_I2C1_Init();
 80099fe:	f7ff fd99 	bl	8009534 <MX_I2C1_Init>
  MX_I2S2_Init();
 8009a02:	f7ff fef1 	bl	80097e8 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8009a06:	f006 fbab 	bl	8010160 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8009a0a:	f7ff fdd3 	bl	80095b4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8009a0e:	f006 f99f 	bl	800fd50 <MX_TIM2_Init>
  MX_TIM3_Init();
 8009a12:	f006 fa11 	bl	800fe38 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8009a16:	f006 fbd3 	bl	80101c0 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8009a1a:	f7fe f827 	bl	8007a6c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8009a1e:	f015 fbd7 	bl	801f1d0 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8009a22:	f001 fa1f 	bl	800ae64 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8009a26:	f006 fb65 	bl	80100f4 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8009a2a:	f006 fa83 	bl	800ff34 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8009a2e:	4ac7      	ldr	r2, [pc, #796]	@ (8009d4c <main+0x364>)
 8009a30:	4bc7      	ldr	r3, [pc, #796]	@ (8009d50 <main+0x368>)
 8009a32:	0011      	movs	r1, r2
 8009a34:	0018      	movs	r0, r3
 8009a36:	f7ff fd11 	bl	800945c <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 8009a3a:	f006 fe03 	bl	8010644 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 8009a3e:	f006 f80f 	bl	800fa60 <Battery_Upkeep>
 8009a42:	0003      	movs	r3, r0
 8009a44:	001a      	movs	r2, r3
 8009a46:	4bc3      	ldr	r3, [pc, #780]	@ (8009d54 <main+0x36c>)
 8009a48:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 8009a4a:	4bc2      	ldr	r3, [pc, #776]	@ (8009d54 <main+0x36c>)
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d113      	bne.n	8009a7a <main+0x92>
    SetAllREDLED();
 8009a52:	f005 fce5 	bl	800f420 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 8009a56:	f7fd f92f 	bl	8006cb8 <ReadBatteryVoltage>
 8009a5a:	1c03      	adds	r3, r0, #0
 8009a5c:	1c18      	adds	r0, r3, #0
 8009a5e:	f7f9 fd01 	bl	8003464 <__aeabi_f2d>
 8009a62:	0002      	movs	r2, r0
 8009a64:	000b      	movs	r3, r1
 8009a66:	48bc      	ldr	r0, [pc, #752]	@ (8009d58 <main+0x370>)
 8009a68:	49bc      	ldr	r1, [pc, #752]	@ (8009d5c <main+0x374>)
 8009a6a:	9200      	str	r2, [sp, #0]
 8009a6c:	9301      	str	r3, [sp, #4]
 8009a6e:	0002      	movs	r2, r0
 8009a70:	2002      	movs	r0, #2
 8009a72:	f006 fd63 	bl	801053c <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 8009a76:	f7fd fd31 	bl	80074dc <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 8009a7a:	f7fd f9f3 	bl	8006e64 <UserButton_Pressed>
 8009a7e:	1e03      	subs	r3, r0, #0
 8009a80:	d004      	beq.n	8009a8c <main+0xa4>
    EnableESPProg();
 8009a82:	f015 fc75 	bl	801f370 <EnableESPProg>
    ESP_Programming = true;
 8009a86:	4bb6      	ldr	r3, [pc, #728]	@ (8009d60 <main+0x378>)
 8009a88:	2201      	movs	r2, #1
 8009a8a:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8009a8c:	2003      	movs	r0, #3
 8009a8e:	f006 fdbf 	bl	8010610 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8009a92:	49b4      	ldr	r1, [pc, #720]	@ (8009d64 <main+0x37c>)
 8009a94:	4bb4      	ldr	r3, [pc, #720]	@ (8009d68 <main+0x380>)
 8009a96:	2201      	movs	r2, #1
 8009a98:	0018      	movs	r0, r3
 8009a9a:	f00f feff 	bl	801989c <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8009a9e:	4bb3      	ldr	r3, [pc, #716]	@ (8009d6c <main+0x384>)
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	f7fd fde9 	bl	8007678 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8009aa6:	4ab2      	ldr	r2, [pc, #712]	@ (8009d70 <main+0x388>)
 8009aa8:	49b2      	ldr	r1, [pc, #712]	@ (8009d74 <main+0x38c>)
 8009aaa:	48b3      	ldr	r0, [pc, #716]	@ (8009d78 <main+0x390>)
 8009aac:	230b      	movs	r3, #11
 8009aae:	f004 fba7 	bl	800e200 <soundInit>
 8009ab2:	0003      	movs	r3, r0
 8009ab4:	001a      	movs	r2, r3
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	4053      	eors	r3, r2
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d005      	beq.n	8009acc <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 8009ac0:	4aae      	ldr	r2, [pc, #696]	@ (8009d7c <main+0x394>)
 8009ac2:	4baf      	ldr	r3, [pc, #700]	@ (8009d80 <main+0x398>)
 8009ac4:	21f9      	movs	r1, #249	@ 0xf9
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	f006 fdf0 	bl	80106ac <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8009acc:	4bad      	ldr	r3, [pc, #692]	@ (8009d84 <main+0x39c>)
 8009ace:	4aae      	ldr	r2, [pc, #696]	@ (8009d88 <main+0x3a0>)
 8009ad0:	49a8      	ldr	r1, [pc, #672]	@ (8009d74 <main+0x38c>)
 8009ad2:	48ae      	ldr	r0, [pc, #696]	@ (8009d8c <main+0x3a4>)
 8009ad4:	f000 fb9e 	bl	800a214 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 8009ad8:	f007 f97c 	bl	8010dd4 <HAL_GetTick>
 8009adc:	0003      	movs	r3, r0
 8009ade:	4aac      	ldr	r2, [pc, #688]	@ (8009d90 <main+0x3a8>)
 8009ae0:	189a      	adds	r2, r3, r2
 8009ae2:	4bac      	ldr	r3, [pc, #688]	@ (8009d94 <main+0x3ac>)
 8009ae4:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8009ae6:	f7fd f99d 	bl	8006e24 <Check_USB_PowerOn>
 8009aea:	0003      	movs	r3, r0
 8009aec:	1e5a      	subs	r2, r3, #1
 8009aee:	4193      	sbcs	r3, r2
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2201      	movs	r2, #1
 8009af4:	4053      	eors	r3, r2
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	1c1a      	adds	r2, r3, #0
 8009afa:	2301      	movs	r3, #1
 8009afc:	4013      	ands	r3, r2
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	4ba5      	ldr	r3, [pc, #660]	@ (8009d98 <main+0x3b0>)
 8009b02:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 8009b04:	f7fd f98e 	bl	8006e24 <Check_USB_PowerOn>
 8009b08:	1e03      	subs	r3, r0, #0
 8009b0a:	d003      	beq.n	8009b14 <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 8009b0c:	4ba3      	ldr	r3, [pc, #652]	@ (8009d9c <main+0x3b4>)
 8009b0e:	0018      	movs	r0, r3
 8009b10:	f7fc fd8c 	bl	800662c <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8009b14:	4ba2      	ldr	r3, [pc, #648]	@ (8009da0 <main+0x3b8>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	0018      	movs	r0, r3
 8009b1a:	f006 fcb9 	bl	8010490 <TimestampIsReached>
 8009b1e:	1e03      	subs	r3, r0, #0
 8009b20:	d00e      	beq.n	8009b40 <main+0x158>
      charge = Battery_Upkeep();
 8009b22:	f005 ff9d 	bl	800fa60 <Battery_Upkeep>
 8009b26:	0003      	movs	r3, r0
 8009b28:	001a      	movs	r2, r3
 8009b2a:	4b8a      	ldr	r3, [pc, #552]	@ (8009d54 <main+0x36c>)
 8009b2c:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 8009b2e:	f007 f951 	bl	8010dd4 <HAL_GetTick>
 8009b32:	0003      	movs	r3, r0
 8009b34:	4a9b      	ldr	r2, [pc, #620]	@ (8009da4 <main+0x3bc>)
 8009b36:	189a      	adds	r2, r3, r2
 8009b38:	4b99      	ldr	r3, [pc, #612]	@ (8009da0 <main+0x3b8>)
 8009b3a:	601a      	str	r2, [r3, #0]
      showTime();
 8009b3c:	f7fd f9a2 	bl	8006e84 <showTime>

    }
    configCheck();
 8009b40:	f005 fdf2 	bl	800f728 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8009b44:	4b98      	ldr	r3, [pc, #608]	@ (8009da8 <main+0x3c0>)
 8009b46:	2200      	movs	r2, #0
 8009b48:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8009b4a:	4b82      	ldr	r3, [pc, #520]	@ (8009d54 <main+0x36c>)
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d003      	beq.n	8009b5a <main+0x172>
 8009b52:	4b80      	ldr	r3, [pc, #512]	@ (8009d54 <main+0x36c>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d104      	bne.n	8009b64 <main+0x17c>
          FlashLEDs();
 8009b5a:	f7ff ff11 	bl	8009980 <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8009b5e:	4b93      	ldr	r3, [pc, #588]	@ (8009dac <main+0x3c4>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8009b64:	4b7b      	ldr	r3, [pc, #492]	@ (8009d54 <main+0x36c>)
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d109      	bne.n	8009b80 <main+0x198>
 8009b6c:	4b90      	ldr	r3, [pc, #576]	@ (8009db0 <main+0x3c8>)
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	2b09      	cmp	r3, #9
 8009b72:	d105      	bne.n	8009b80 <main+0x198>
          batteryEmpty = true;
 8009b74:	4b8f      	ldr	r3, [pc, #572]	@ (8009db4 <main+0x3cc>)
 8009b76:	2201      	movs	r2, #1
 8009b78:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8009b7a:	f7fd fcaf 	bl	80074dc <Enter_Standby_Mode>
 8009b7e:	e002      	b.n	8009b86 <main+0x19e>
        }
        else{
          batteryEmpty = false;
 8009b80:	4b8c      	ldr	r3, [pc, #560]	@ (8009db4 <main+0x3cc>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8009b86:	4b8c      	ldr	r3, [pc, #560]	@ (8009db8 <main+0x3d0>)
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d100      	bne.n	8009b90 <main+0x1a8>
 8009b8e:	e088      	b.n	8009ca2 <main+0x2ba>
 8009b90:	4b73      	ldr	r3, [pc, #460]	@ (8009d60 <main+0x378>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	2201      	movs	r2, #1
 8009b96:	4053      	eors	r3, r2
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d100      	bne.n	8009ba0 <main+0x1b8>
 8009b9e:	e080      	b.n	8009ca2 <main+0x2ba>
 8009ba0:	4b84      	ldr	r3, [pc, #528]	@ (8009db4 <main+0x3cc>)
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	4053      	eors	r3, r2
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d100      	bne.n	8009bb0 <main+0x1c8>
 8009bae:	e078      	b.n	8009ca2 <main+0x2ba>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8009bb0:	4b79      	ldr	r3, [pc, #484]	@ (8009d98 <main+0x3b0>)
 8009bb2:	781a      	ldrb	r2, [r3, #0]
 8009bb4:	4b81      	ldr	r3, [pc, #516]	@ (8009dbc <main+0x3d4>)
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d020      	beq.n	8009bfe <main+0x216>
        if (IsSGPPresent() && !usbPluggedIn) {
 8009bbc:	f000 fabc 	bl	800a138 <IsSGPPresent>
 8009bc0:	1e03      	subs	r3, r0, #0
 8009bc2:	d009      	beq.n	8009bd8 <main+0x1f0>
 8009bc4:	4b7d      	ldr	r3, [pc, #500]	@ (8009dbc <main+0x3d4>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	4053      	eors	r3, r2
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d002      	beq.n	8009bd8 <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 8009bd2:	2001      	movs	r0, #1
 8009bd4:	f000 faba 	bl	800a14c <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 8009bd8:	4b79      	ldr	r3, [pc, #484]	@ (8009dc0 <main+0x3d8>)
 8009bda:	791b      	ldrb	r3, [r3, #4]
 8009bdc:	2b34      	cmp	r3, #52	@ 0x34
 8009bde:	d003      	beq.n	8009be8 <main+0x200>
 8009be0:	4b77      	ldr	r3, [pc, #476]	@ (8009dc0 <main+0x3d8>)
 8009be2:	791b      	ldrb	r3, [r3, #4]
 8009be4:	2b35      	cmp	r3, #53	@ 0x35
 8009be6:	d106      	bne.n	8009bf6 <main+0x20e>
 8009be8:	4b74      	ldr	r3, [pc, #464]	@ (8009dbc <main+0x3d4>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d002      	beq.n	8009bf6 <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	f000 faab 	bl	800a14c <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 8009bf6:	4b71      	ldr	r3, [pc, #452]	@ (8009dbc <main+0x3d4>)
 8009bf8:	781a      	ldrb	r2, [r3, #0]
 8009bfa:	4b67      	ldr	r3, [pc, #412]	@ (8009d98 <main+0x3b0>)
 8009bfc:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 8009bfe:	f000 fe1f 	bl	800a840 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 8009c02:	4b6a      	ldr	r3, [pc, #424]	@ (8009dac <main+0x3c4>)
 8009c04:	78db      	ldrb	r3, [r3, #3]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d005      	beq.n	8009c16 <main+0x22e>
        MICstate = Mic_Upkeep();
 8009c0a:	f001 f817 	bl	800ac3c <Mic_Upkeep>
 8009c0e:	0003      	movs	r3, r0
 8009c10:	001a      	movs	r2, r3
 8009c12:	4b6c      	ldr	r3, [pc, #432]	@ (8009dc4 <main+0x3dc>)
 8009c14:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8009c16:	4b4f      	ldr	r3, [pc, #316]	@ (8009d54 <main+0x36c>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d803      	bhi.n	8009c26 <main+0x23e>
 8009c1e:	4b62      	ldr	r3, [pc, #392]	@ (8009da8 <main+0x3c0>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d016      	beq.n	8009c54 <main+0x26c>
 8009c26:	4b61      	ldr	r3, [pc, #388]	@ (8009dac <main+0x3c4>)
 8009c28:	789b      	ldrb	r3, [r3, #2]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d012      	beq.n	8009c54 <main+0x26c>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 8009c2e:	f001 f9a7 	bl	800af80 <sen5x_Get_sen5x_enable_state>
 8009c32:	0003      	movs	r3, r0
 8009c34:	001a      	movs	r2, r3
 8009c36:	2301      	movs	r3, #1
 8009c38:	4053      	eors	r3, r2
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d006      	beq.n	8009c4e <main+0x266>
 8009c40:	4b5e      	ldr	r3, [pc, #376]	@ (8009dbc <main+0x3d4>)
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <main+0x266>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 8009c48:	2000      	movs	r0, #0
 8009c4a:	f001 f9d5 	bl	800aff8 <sen5x_enable>
        }
        sen5x_statemachine();
 8009c4e:	f001 ff1f 	bl	800ba90 <sen5x_statemachine>
 8009c52:	e020      	b.n	8009c96 <main+0x2ae>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8009c54:	4b3f      	ldr	r3, [pc, #252]	@ (8009d54 <main+0x36c>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d81c      	bhi.n	8009c96 <main+0x2ae>
 8009c5c:	4b52      	ldr	r3, [pc, #328]	@ (8009da8 <main+0x3c0>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2201      	movs	r2, #1
 8009c62:	4053      	eors	r3, r2
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d015      	beq.n	8009c96 <main+0x2ae>
 8009c6a:	4b50      	ldr	r3, [pc, #320]	@ (8009dac <main+0x3c4>)
 8009c6c:	789b      	ldrb	r3, [r3, #2]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d011      	beq.n	8009c96 <main+0x2ae>
        Info("Battery level insufficient for sen5x operation");
 8009c72:	4a55      	ldr	r2, [pc, #340]	@ (8009dc8 <main+0x3e0>)
 8009c74:	4b39      	ldr	r3, [pc, #228]	@ (8009d5c <main+0x374>)
 8009c76:	0019      	movs	r1, r3
 8009c78:	2002      	movs	r0, #2
 8009c7a:	f006 fc5f 	bl	801053c <CreateLine>
        Sensor.PM_measurementEnabled = false;
 8009c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8009dac <main+0x3c4>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 8009c84:	4b51      	ldr	r3, [pc, #324]	@ (8009dcc <main+0x3e4>)
 8009c86:	2200      	movs	r2, #0
 8009c88:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 8009c8a:	4b51      	ldr	r3, [pc, #324]	@ (8009dd0 <main+0x3e8>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <main+0x2ae>
          sen5x_Power_Off();
 8009c92:	f001 fa3d 	bl	800b110 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 8009c96:	f7fb fd0f 	bl	80056b8 <ESP_Upkeep>
 8009c9a:	0003      	movs	r3, r0
 8009c9c:	001a      	movs	r2, r3
 8009c9e:	4b44      	ldr	r3, [pc, #272]	@ (8009db0 <main+0x3c8>)
 8009ca0:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8009ca2:	4b45      	ldr	r3, [pc, #276]	@ (8009db8 <main+0x3d0>)
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	4053      	eors	r3, r2
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00f      	beq.n	8009cd0 <main+0x2e8>
 8009cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8009d60 <main+0x378>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	4053      	eors	r3, r2
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d008      	beq.n	8009cd0 <main+0x2e8>
 8009cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8009db4 <main+0x3cc>)
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	4053      	eors	r3, r2
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d001      	beq.n	8009cd0 <main+0x2e8>
      Device_Test();  // for device with startup time
 8009ccc:	f000 fc4a 	bl	800a564 <Device_Test>
    }
    if (!usbPluggedIn) {
 8009cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8009dbc <main+0x3d4>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	4053      	eors	r3, r2
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d01c      	beq.n	8009d18 <main+0x330>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8009cde:	4b3d      	ldr	r3, [pc, #244]	@ (8009dd4 <main+0x3ec>)
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	4053      	eors	r3, r2
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d015      	beq.n	8009d18 <main+0x330>
 8009cec:	f000 fcb8 	bl	800a660 <AllDevicesReady>
 8009cf0:	1e03      	subs	r3, r0, #0
 8009cf2:	d011      	beq.n	8009d18 <main+0x330>
 8009cf4:	4b38      	ldr	r3, [pc, #224]	@ (8009dd8 <main+0x3f0>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00d      	beq.n	8009d18 <main+0x330>
        EnabledConnectedDevices();
 8009cfc:	f000 fd2a 	bl	800a754 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8009d00:	4b36      	ldr	r3, [pc, #216]	@ (8009ddc <main+0x3f4>)
 8009d02:	791b      	ldrb	r3, [r3, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <main+0x326>
 8009d08:	23d7      	movs	r3, #215	@ 0xd7
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	e001      	b.n	8009d12 <main+0x32a>
 8009d0e:	23dc      	movs	r3, #220	@ 0xdc
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	0018      	movs	r0, r3
 8009d14:	f7fd fc02 	bl	800751c <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 8009d18:	4b12      	ldr	r3, [pc, #72]	@ (8009d64 <main+0x37c>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <main+0x33c>
      check_cli_command();
 8009d20:	f000 f8ea 	bl	8009ef8 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 8009d24:	f7fd f87e 	bl	8006e24 <Check_USB_PowerOn>
 8009d28:	1e03      	subs	r3, r0, #0
 8009d2a:	d100      	bne.n	8009d2e <main+0x346>
 8009d2c:	e6f2      	b.n	8009b14 <main+0x12c>
 8009d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8009de0 <main+0x3f8>)
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2201      	movs	r2, #1
 8009d34:	4053      	eors	r3, r2
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d100      	bne.n	8009d3e <main+0x356>
 8009d3c:	e6ea      	b.n	8009b14 <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 8009d3e:	f015 fb21 	bl	801f384 <GetUsbRxPointer>
 8009d42:	0003      	movs	r3, r0
 8009d44:	0018      	movs	r0, r3
 8009d46:	f7fc fe89 	bl	8006a5c <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 8009d4a:	e6e3      	b.n	8009b14 <main+0x12c>
 8009d4c:	20001e1c 	.word	0x20001e1c
 8009d50:	20001ddc 	.word	0x20001ddc
 8009d54:	20000d88 	.word	0x20000d88
 8009d58:	080271a8 	.word	0x080271a8
 8009d5c:	080271cc 	.word	0x080271cc
 8009d60:	20000d6d 	.word	0x20000d6d
 8009d64:	20000d74 	.word	0x20000d74
 8009d68:	20001f54 	.word	0x20001f54
 8009d6c:	20000e08 	.word	0x20000e08
 8009d70:	20001e5c 	.word	0x20001e5c
 8009d74:	20000ce8 	.word	0x20000ce8
 8009d78:	20000d24 	.word	0x20000d24
 8009d7c:	080271d0 	.word	0x080271d0
 8009d80:	08028978 	.word	0x08028978
 8009d84:	2000200c 	.word	0x2000200c
 8009d88:	20000ae8 	.word	0x20000ae8
 8009d8c:	20000bb0 	.word	0x20000bb0
 8009d90:	000061a8 	.word	0x000061a8
 8009d94:	20000d84 	.word	0x20000d84
 8009d98:	20000d6f 	.word	0x20000d6f
 8009d9c:	080271e4 	.word	0x080271e4
 8009da0:	20000094 	.word	0x20000094
 8009da4:	0000c350 	.word	0x0000c350
 8009da8:	20000090 	.word	0x20000090
 8009dac:	20000d8c 	.word	0x20000d8c
 8009db0:	20000d71 	.word	0x20000d71
 8009db4:	20000d6e 	.word	0x20000d6e
 8009db8:	20000d6c 	.word	0x20000d6c
 8009dbc:	20001dbd 	.word	0x20001dbd
 8009dc0:	20000e30 	.word	0x20000e30
 8009dc4:	20000d70 	.word	0x20000d70
 8009dc8:	08027218 	.word	0x08027218
 8009dcc:	20000e2e 	.word	0x20000e2e
 8009dd0:	20000e2d 	.word	0x20000e2d
 8009dd4:	20001dbe 	.word	0x20001dbe
 8009dd8:	20000560 	.word	0x20000560
 8009ddc:	20000d94 	.word	0x20000d94
 8009de0:	2000055b 	.word	0x2000055b

08009de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009de4:	b590      	push	{r4, r7, lr}
 8009de6:	b09d      	sub	sp, #116	@ 0x74
 8009de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009dea:	2438      	movs	r4, #56	@ 0x38
 8009dec:	193b      	adds	r3, r7, r4
 8009dee:	0018      	movs	r0, r3
 8009df0:	2338      	movs	r3, #56	@ 0x38
 8009df2:	001a      	movs	r2, r3
 8009df4:	2100      	movs	r1, #0
 8009df6:	f018 fcff 	bl	80227f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009dfa:	2324      	movs	r3, #36	@ 0x24
 8009dfc:	18fb      	adds	r3, r7, r3
 8009dfe:	0018      	movs	r0, r3
 8009e00:	2314      	movs	r3, #20
 8009e02:	001a      	movs	r2, r3
 8009e04:	2100      	movs	r1, #0
 8009e06:	f018 fcf7 	bl	80227f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009e0a:	003b      	movs	r3, r7
 8009e0c:	0018      	movs	r0, r3
 8009e0e:	2324      	movs	r3, #36	@ 0x24
 8009e10:	001a      	movs	r2, r3
 8009e12:	2100      	movs	r1, #0
 8009e14:	f018 fcf0 	bl	80227f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009e18:	4b34      	ldr	r3, [pc, #208]	@ (8009eec <SystemClock_Config+0x108>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a34      	ldr	r2, [pc, #208]	@ (8009ef0 <SystemClock_Config+0x10c>)
 8009e1e:	401a      	ands	r2, r3
 8009e20:	4b32      	ldr	r3, [pc, #200]	@ (8009eec <SystemClock_Config+0x108>)
 8009e22:	2180      	movs	r1, #128	@ 0x80
 8009e24:	0109      	lsls	r1, r1, #4
 8009e26:	430a      	orrs	r2, r1
 8009e28:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8009e2a:	f00d fb0b 	bl	8017444 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8009e2e:	4b31      	ldr	r3, [pc, #196]	@ (8009ef4 <SystemClock_Config+0x110>)
 8009e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e32:	4a2f      	ldr	r2, [pc, #188]	@ (8009ef0 <SystemClock_Config+0x10c>)
 8009e34:	401a      	ands	r2, r3
 8009e36:	4b2f      	ldr	r3, [pc, #188]	@ (8009ef4 <SystemClock_Config+0x110>)
 8009e38:	2180      	movs	r1, #128	@ 0x80
 8009e3a:	0149      	lsls	r1, r1, #5
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8009e40:	193b      	adds	r3, r7, r4
 8009e42:	2226      	movs	r2, #38	@ 0x26
 8009e44:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009e46:	193b      	adds	r3, r7, r4
 8009e48:	2280      	movs	r2, #128	@ 0x80
 8009e4a:	0052      	lsls	r2, r2, #1
 8009e4c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009e4e:	0021      	movs	r1, r4
 8009e50:	187b      	adds	r3, r7, r1
 8009e52:	2201      	movs	r2, #1
 8009e54:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009e56:	187b      	adds	r3, r7, r1
 8009e58:	2210      	movs	r2, #16
 8009e5a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8009e5c:	187b      	adds	r3, r7, r1
 8009e5e:	2201      	movs	r2, #1
 8009e60:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009e62:	187b      	adds	r3, r7, r1
 8009e64:	2200      	movs	r2, #0
 8009e66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009e68:	187b      	adds	r3, r7, r1
 8009e6a:	0018      	movs	r0, r3
 8009e6c:	f00d fb7a 	bl	8017564 <HAL_RCC_OscConfig>
 8009e70:	1e03      	subs	r3, r0, #0
 8009e72:	d001      	beq.n	8009e78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009e74:	f000 f906 	bl	800a084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009e78:	2124      	movs	r1, #36	@ 0x24
 8009e7a:	187b      	adds	r3, r7, r1
 8009e7c:	220f      	movs	r2, #15
 8009e7e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8009e80:	187b      	adds	r3, r7, r1
 8009e82:	2201      	movs	r2, #1
 8009e84:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009e86:	187b      	adds	r3, r7, r1
 8009e88:	2200      	movs	r2, #0
 8009e8a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009e8c:	187b      	adds	r3, r7, r1
 8009e8e:	2200      	movs	r2, #0
 8009e90:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009e92:	187b      	adds	r3, r7, r1
 8009e94:	2200      	movs	r2, #0
 8009e96:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8009e98:	187b      	adds	r3, r7, r1
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	0018      	movs	r0, r3
 8009e9e:	f00d ff35 	bl	8017d0c <HAL_RCC_ClockConfig>
 8009ea2:	1e03      	subs	r3, r0, #0
 8009ea4:	d001      	beq.n	8009eaa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8009ea6:	f000 f8ed 	bl	800a084 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8009eaa:	003b      	movs	r3, r7
 8009eac:	226d      	movs	r2, #109	@ 0x6d
 8009eae:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009eb0:	003b      	movs	r3, r7
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8009eb6:	003b      	movs	r3, r7
 8009eb8:	2200      	movs	r2, #0
 8009eba:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009ebc:	003b      	movs	r3, r7
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009ec2:	003b      	movs	r3, r7
 8009ec4:	2280      	movs	r2, #128	@ 0x80
 8009ec6:	0252      	lsls	r2, r2, #9
 8009ec8:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009eca:	003b      	movs	r3, r7
 8009ecc:	2280      	movs	r2, #128	@ 0x80
 8009ece:	04d2      	lsls	r2, r2, #19
 8009ed0:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009ed2:	003b      	movs	r3, r7
 8009ed4:	0018      	movs	r0, r3
 8009ed6:	f00e f93d 	bl	8018154 <HAL_RCCEx_PeriphCLKConfig>
 8009eda:	1e03      	subs	r3, r0, #0
 8009edc:	d001      	beq.n	8009ee2 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8009ede:	f000 f8d1 	bl	800a084 <Error_Handler>
  }
}
 8009ee2:	46c0      	nop			@ (mov r8, r8)
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	b01d      	add	sp, #116	@ 0x74
 8009ee8:	bd90      	pop	{r4, r7, pc}
 8009eea:	46c0      	nop			@ (mov r8, r8)
 8009eec:	40007000 	.word	0x40007000
 8009ef0:	ffffe7ff 	.word	0xffffe7ff
 8009ef4:	40021000 	.word	0x40021000

08009ef8 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 8009efc:	4b34      	ldr	r3, [pc, #208]	@ (8009fd0 <check_cli_command+0xd8>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	3b61      	subs	r3, #97	@ 0x61
 8009f02:	2b13      	cmp	r3, #19
 8009f04:	d833      	bhi.n	8009f6e <check_cli_command+0x76>
 8009f06:	009a      	lsls	r2, r3, #2
 8009f08:	4b32      	ldr	r3, [pc, #200]	@ (8009fd4 <check_cli_command+0xdc>)
 8009f0a:	18d3      	adds	r3, r2, r3
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8009f10:	4b31      	ldr	r3, [pc, #196]	@ (8009fd8 <check_cli_command+0xe0>)
 8009f12:	0018      	movs	r0, r3
 8009f14:	f018 fb00 	bl	8022518 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 8009f18:	2003      	movs	r0, #3
 8009f1a:	f006 fb79 	bl	8010610 <SetVerboseLevel>
      break;
 8009f1e:	e051      	b.n	8009fc4 <check_cli_command+0xcc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 8009f20:	f7fc fbc4 	bl	80066ac <PC_show_Keys>
    break;
 8009f24:	e04e      	b.n	8009fc4 <check_cli_command+0xcc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8009f26:	f7f9 fb93 	bl	8003650 <forceNTPupdate>
    break;
 8009f2a:	e04b      	b.n	8009fc4 <check_cli_command+0xcc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 8009f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8009fdc <check_cli_command+0xe4>)
 8009f2e:	0018      	movs	r0, r3
 8009f30:	f018 faf2 	bl	8022518 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8009f34:	2002      	movs	r0, #2
 8009f36:	f006 fb6b 	bl	8010610 <SetVerboseLevel>
      break;
 8009f3a:	e043      	b.n	8009fc4 <check_cli_command+0xcc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 8009f3c:	4b28      	ldr	r3, [pc, #160]	@ (8009fe0 <check_cli_command+0xe8>)
 8009f3e:	0018      	movs	r0, r3
 8009f40:	f018 faea 	bl	8022518 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8009f44:	2001      	movs	r0, #1
 8009f46:	f006 fb63 	bl	8010610 <SetVerboseLevel>
      break;
 8009f4a:	e03b      	b.n	8009fc4 <check_cli_command+0xcc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 8009f4c:	4b25      	ldr	r3, [pc, #148]	@ (8009fe4 <check_cli_command+0xec>)
 8009f4e:	0018      	movs	r0, r3
 8009f50:	f018 fae2 	bl	8022518 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 8009f54:	2000      	movs	r0, #0
 8009f56:	f006 fb5b 	bl	8010610 <SetVerboseLevel>
      break;
 8009f5a:	e033      	b.n	8009fc4 <check_cli_command+0xcc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 8009f5c:	f006 ff3a 	bl	8010dd4 <HAL_GetTick>
 8009f60:	0002      	movs	r2, r0
 8009f62:	4b21      	ldr	r3, [pc, #132]	@ (8009fe8 <check_cli_command+0xf0>)
 8009f64:	601a      	str	r2, [r3, #0]
      break;
 8009f66:	e02d      	b.n	8009fc4 <check_cli_command+0xcc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 8009f68:	f7fc ff8c 	bl	8006e84 <showTime>
      break;
 8009f6c:	e02a      	b.n	8009fc4 <check_cli_command+0xcc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8009f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8009fec <check_cli_command+0xf4>)
 8009f70:	4b1f      	ldr	r3, [pc, #124]	@ (8009ff0 <check_cli_command+0xf8>)
 8009f72:	0019      	movs	r1, r3
 8009f74:	2001      	movs	r0, #1
 8009f76:	f006 fae1 	bl	801053c <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8009f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ff4 <check_cli_command+0xfc>)
 8009f7c:	0018      	movs	r0, r3
 8009f7e:	f018 facb 	bl	8022518 <puts>
      printf("a - VerboseLevel set to all\r\n");
 8009f82:	4b1d      	ldr	r3, [pc, #116]	@ (8009ff8 <check_cli_command+0x100>)
 8009f84:	0018      	movs	r0, r3
 8009f86:	f018 fac7 	bl	8022518 <puts>
      printf("e - show EEPROM\r\n");
 8009f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8009ffc <check_cli_command+0x104>)
 8009f8c:	0018      	movs	r0, r3
 8009f8e:	f018 fac3 	bl	8022518 <puts>
      printf("f - Force NTP time synchronization\r\n");
 8009f92:	4b1b      	ldr	r3, [pc, #108]	@ (800a000 <check_cli_command+0x108>)
 8009f94:	0018      	movs	r0, r3
 8009f96:	f018 fabf 	bl	8022518 <puts>
      printf("i - VerboseLevel set to info\r\n");
 8009f9a:	4b1a      	ldr	r3, [pc, #104]	@ (800a004 <check_cli_command+0x10c>)
 8009f9c:	0018      	movs	r0, r3
 8009f9e:	f018 fabb 	bl	8022518 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8009fa2:	4b19      	ldr	r3, [pc, #100]	@ (800a008 <check_cli_command+0x110>)
 8009fa4:	0018      	movs	r0, r3
 8009fa6:	f018 fab7 	bl	8022518 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8009faa:	4b18      	ldr	r3, [pc, #96]	@ (800a00c <check_cli_command+0x114>)
 8009fac:	0018      	movs	r0, r3
 8009fae:	f018 fab3 	bl	8022518 <puts>
      printf("s - Start particle measurement\r\n");
 8009fb2:	4b17      	ldr	r3, [pc, #92]	@ (800a010 <check_cli_command+0x118>)
 8009fb4:	0018      	movs	r0, r3
 8009fb6:	f018 faaf 	bl	8022518 <puts>
      printf("t - Show actual systemtime\r\n");
 8009fba:	4b16      	ldr	r3, [pc, #88]	@ (800a014 <check_cli_command+0x11c>)
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	f018 faab 	bl	8022518 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 8009fc2:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 8009fc4:	4b02      	ldr	r3, [pc, #8]	@ (8009fd0 <check_cli_command+0xd8>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	701a      	strb	r2, [r3, #0]
}
 8009fca:	46c0      	nop			@ (mov r8, r8)
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	20000d74 	.word	0x20000d74
 8009fd4:	08028928 	.word	0x08028928
 8009fd8:	08027248 	.word	0x08027248
 8009fdc:	08027264 	.word	0x08027264
 8009fe0:	08027280 	.word	0x08027280
 8009fe4:	080272a0 	.word	0x080272a0
 8009fe8:	20000e3c 	.word	0x20000e3c
 8009fec:	080272bc 	.word	0x080272bc
 8009ff0:	080272ec 	.word	0x080272ec
 8009ff4:	080272f0 	.word	0x080272f0
 8009ff8:	08027308 	.word	0x08027308
 8009ffc:	08027328 	.word	0x08027328
 800a000:	0802733c 	.word	0x0802733c
 800a004:	08027360 	.word	0x08027360
 800a008:	08027380 	.word	0x08027380
 800a00c:	080273a4 	.word	0x080273a4
 800a010:	080273c4 	.word	0x080273c4
 800a014:	080273e4 	.word	0x080273e4

0800a018 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800a020:	4907      	ldr	r1, [pc, #28]	@ (800a040 <HAL_UART_RxCpltCallback+0x28>)
 800a022:	4b08      	ldr	r3, [pc, #32]	@ (800a044 <HAL_UART_RxCpltCallback+0x2c>)
 800a024:	2201      	movs	r2, #1
 800a026:	0018      	movs	r0, r3
 800a028:	f00f fc38 	bl	801989c <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800a02c:	4904      	ldr	r1, [pc, #16]	@ (800a040 <HAL_UART_RxCpltCallback+0x28>)
 800a02e:	4b05      	ldr	r3, [pc, #20]	@ (800a044 <HAL_UART_RxCpltCallback+0x2c>)
 800a030:	2201      	movs	r2, #1
 800a032:	0018      	movs	r0, r3
 800a034:	f00f fc32 	bl	801989c <HAL_UART_Receive_IT>
}
 800a038:	46c0      	nop			@ (mov r8, r8)
 800a03a:	46bd      	mov	sp, r7
 800a03c:	b002      	add	sp, #8
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20000d74 	.word	0x20000d74
 800a044:	20001f54 	.word	0x20001f54

0800a048 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	0002      	movs	r2, r0
 800a050:	1dbb      	adds	r3, r7, #6
 800a052:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800a054:	1dbb      	adds	r3, r7, #6
 800a056:	881a      	ldrh	r2, [r3, #0]
 800a058:	2380      	movs	r3, #128	@ 0x80
 800a05a:	021b      	lsls	r3, r3, #8
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d10b      	bne.n	800a078 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800a060:	f005 fd12 	bl	800fa88 <setuserToggle>
    if (GetPMSensorPresence()) {
 800a064:	f000 f854 	bl	800a110 <GetPMSensorPresence>
 800a068:	1e03      	subs	r3, r0, #0
 800a06a:	d005      	beq.n	800a078 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800a06c:	4b04      	ldr	r3, [pc, #16]	@ (800a080 <HAL_GPIO_EXTI_Callback+0x38>)
 800a06e:	2201      	movs	r2, #1
 800a070:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800a072:	2000      	movs	r0, #0
 800a074:	f000 ff8e 	bl	800af94 <sen5x_Set_sen5x_state>
    }
  }
}
 800a078:	46c0      	nop			@ (mov r8, r8)
 800a07a:	46bd      	mov	sp, r7
 800a07c:	b002      	add	sp, #8
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	20000d8c 	.word	0x20000d8c

0800a084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800a088:	f005 f9ca 	bl	800f420 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a08c:	b672      	cpsid	i
}
 800a08e:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800a090:	4a05      	ldr	r2, [pc, #20]	@ (800a0a8 <Error_Handler+0x24>)
 800a092:	4b06      	ldr	r3, [pc, #24]	@ (800a0ac <Error_Handler+0x28>)
 800a094:	0019      	movs	r1, r3
 800a096:	2001      	movs	r0, #1
 800a098:	f006 fa50 	bl	801053c <CreateLine>

    HAL_Delay(2500);
 800a09c:	4b04      	ldr	r3, [pc, #16]	@ (800a0b0 <Error_Handler+0x2c>)
 800a09e:	0018      	movs	r0, r3
 800a0a0:	f006 fea2 	bl	8010de8 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800a0a4:	46c0      	nop			@ (mov r8, r8)
 800a0a6:	e7f3      	b.n	800a090 <Error_Handler+0xc>
 800a0a8:	08027400 	.word	0x08027400
 800a0ac:	080272ec 	.word	0x080272ec
 800a0b0:	000009c4 	.word	0x000009c4

0800a0b4 <testInit>:
static uint8_t SGPstate;
static uint8_t HIDSstate;
static uint8_t AHTstate;
static uint8_t BMPstate;

void testInit(){
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800a0b8:	4b13      	ldr	r3, [pc, #76]	@ (800a108 <testInit+0x54>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800a0be:	4b12      	ldr	r3, [pc, #72]	@ (800a108 <testInit+0x54>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800a0c4:	4b10      	ldr	r3, [pc, #64]	@ (800a108 <testInit+0x54>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	709a      	strb	r2, [r3, #2]
  SensorProbe.BMP280_Present = false;
 800a0ca:	4b0f      	ldr	r3, [pc, #60]	@ (800a108 <testInit+0x54>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	70da      	strb	r2, [r3, #3]
  SensorProbe.PM_Present = false;
 800a0d0:	4b0d      	ldr	r3, [pc, #52]	@ (800a108 <testInit+0x54>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	711a      	strb	r2, [r3, #4]
  SensorProbe.MIC_Present = false;
 800a0d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a108 <testInit+0x54>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	715a      	strb	r2, [r3, #5]
  SensorProbe.ESP_Present = false;
 800a0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a108 <testInit+0x54>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	719a      	strb	r2, [r3, #6]
  SensorProbe.SGP_Enabled = false;
 800a0e2:	4b09      	ldr	r3, [pc, #36]	@ (800a108 <testInit+0x54>)
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	71da      	strb	r2, [r3, #7]
  Sensor.HT_measurementEnabled = true;
 800a0e8:	4b08      	ldr	r3, [pc, #32]	@ (800a10c <testInit+0x58>)
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800a0ee:	4b07      	ldr	r3, [pc, #28]	@ (800a10c <testInit+0x58>)
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800a0f4:	4b05      	ldr	r3, [pc, #20]	@ (800a10c <testInit+0x58>)
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800a0fa:	4b04      	ldr	r3, [pc, #16]	@ (800a10c <testInit+0x58>)
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	70da      	strb	r2, [r3, #3]
}
 800a100:	46c0      	nop			@ (mov r8, r8)
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	46c0      	nop			@ (mov r8, r8)
 800a108:	20000d94 	.word	0x20000d94
 800a10c:	20000d8c 	.word	0x20000d8c

0800a110 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800a110:	b580      	push	{r7, lr}
 800a112:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800a114:	4b02      	ldr	r3, [pc, #8]	@ (800a120 <GetPMSensorPresence+0x10>)
 800a116:	791b      	ldrb	r3, [r3, #4]
}
 800a118:	0018      	movs	r0, r3
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	46c0      	nop			@ (mov r8, r8)
 800a120:	20000d94 	.word	0x20000d94

0800a124 <DisablePMSensor>:

void DisablePMSensor() {
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800a128:	4b02      	ldr	r3, [pc, #8]	@ (800a134 <DisablePMSensor+0x10>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	711a      	strb	r2, [r3, #4]
}
 800a12e:	46c0      	nop			@ (mov r8, r8)
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	20000d94 	.word	0x20000d94

0800a138 <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800a13c:	4b02      	ldr	r3, [pc, #8]	@ (800a148 <IsSGPPresent+0x10>)
 800a13e:	785b      	ldrb	r3, [r3, #1]
}
 800a140:	0018      	movs	r0, r3
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	46c0      	nop			@ (mov r8, r8)
 800a148:	20000d94 	.word	0x20000d94

0800a14c <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	0002      	movs	r2, r0
 800a154:	1dfb      	adds	r3, r7, #7
 800a156:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800a158:	4b0b      	ldr	r3, [pc, #44]	@ (800a188 <SetVOCSensorDIS_ENA+0x3c>)
 800a15a:	1dfa      	adds	r2, r7, #7
 800a15c:	7812      	ldrb	r2, [r2, #0]
 800a15e:	71da      	strb	r2, [r3, #7]
  Sensor.VOC_measurementEnabled = setting;
 800a160:	4b0a      	ldr	r3, [pc, #40]	@ (800a18c <SetVOCSensorDIS_ENA+0x40>)
 800a162:	1dfa      	adds	r2, r7, #7
 800a164:	7812      	ldrb	r2, [r2, #0]
 800a166:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800a168:	1dfb      	adds	r3, r7, #7
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <SetVOCSensorDIS_ENA+0x28>
 800a170:	4b07      	ldr	r3, [pc, #28]	@ (800a190 <SetVOCSensorDIS_ENA+0x44>)
 800a172:	e000      	b.n	800a176 <SetVOCSensorDIS_ENA+0x2a>
 800a174:	4b07      	ldr	r3, [pc, #28]	@ (800a194 <SetVOCSensorDIS_ENA+0x48>)
 800a176:	4a08      	ldr	r2, [pc, #32]	@ (800a198 <SetVOCSensorDIS_ENA+0x4c>)
 800a178:	4908      	ldr	r1, [pc, #32]	@ (800a19c <SetVOCSensorDIS_ENA+0x50>)
 800a17a:	2003      	movs	r0, #3
 800a17c:	f006 f9de 	bl	801053c <CreateLine>
}
 800a180:	46c0      	nop			@ (mov r8, r8)
 800a182:	46bd      	mov	sp, r7
 800a184:	b002      	add	sp, #8
 800a186:	bd80      	pop	{r7, pc}
 800a188:	20000d94 	.word	0x20000d94
 800a18c:	20000d8c 	.word	0x20000d8c
 800a190:	0802742c 	.word	0x0802742c
 800a194:	08027434 	.word	0x08027434
 800a198:	08027440 	.word	0x08027440
 800a19c:	08027454 	.word	0x08027454

0800a1a0 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800a1a4:	4b02      	ldr	r3, [pc, #8]	@ (800a1b0 <IsPMSensorEnabled+0x10>)
 800a1a6:	789b      	ldrb	r3, [r3, #2]
}
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	46c0      	nop			@ (mov r8, r8)
 800a1b0:	20000d8c 	.word	0x20000d8c

0800a1b4 <SetVOCSensorStatus>:

void SetBMP280SensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	0002      	movs	r2, r0
 800a1bc:	1dfb      	adds	r3, r7, #7
 800a1be:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800a1c0:	4b05      	ldr	r3, [pc, #20]	@ (800a1d8 <SetVOCSensorStatus+0x24>)
 800a1c2:	79db      	ldrb	r3, [r3, #7]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d003      	beq.n	800a1d0 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800a1c8:	4b04      	ldr	r3, [pc, #16]	@ (800a1dc <SetVOCSensorStatus+0x28>)
 800a1ca:	1dfa      	adds	r2, r7, #7
 800a1cc:	7812      	ldrb	r2, [r2, #0]
 800a1ce:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800a1d0:	46c0      	nop			@ (mov r8, r8)
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	b002      	add	sp, #8
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	20000d94 	.word	0x20000d94
 800a1dc:	20000d8c 	.word	0x20000d8c

0800a1e0 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	0002      	movs	r2, r0
 800a1e8:	1dfb      	adds	r3, r7, #7
 800a1ea:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800a1ec:	4b03      	ldr	r3, [pc, #12]	@ (800a1fc <SetPMSensorStatus+0x1c>)
 800a1ee:	1dfa      	adds	r2, r7, #7
 800a1f0:	7812      	ldrb	r2, [r2, #0]
 800a1f2:	709a      	strb	r2, [r3, #2]
}
 800a1f4:	46c0      	nop			@ (mov r8, r8)
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	b002      	add	sp, #8
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20000d8c 	.word	0x20000d8c

0800a200 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800a200:	b580      	push	{r7, lr}
 800a202:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800a204:	4b02      	ldr	r3, [pc, #8]	@ (800a210 <SetESPMeasurementDone+0x10>)
 800a206:	2201      	movs	r2, #1
 800a208:	719a      	strb	r2, [r3, #6]
}
 800a20a:	46c0      	nop			@ (mov r8, r8)
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	20000d94 	.word	0x20000d94

0800a214 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
 800a220:	603b      	str	r3, [r7, #0]
  testInit();
 800a222:	f7ff ff47 	bl	800a0b4 <testInit>
  I2CSensors_Init(sensorI2C);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	0018      	movs	r0, r3
 800a22a:	f7fb fef1 	bl	8006010 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800a22e:	f006 fbb7 	bl	80109a0 <HIDS_DeviceConnected>
 800a232:	0003      	movs	r3, r0
 800a234:	001a      	movs	r2, r3
 800a236:	2301      	movs	r3, #1
 800a238:	4053      	eors	r3, r2
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00c      	beq.n	800a25a <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800a240:	4aaa      	ldr	r2, [pc, #680]	@ (800a4ec <Device_Init+0x2d8>)
 800a242:	4bab      	ldr	r3, [pc, #684]	@ (800a4f0 <Device_Init+0x2dc>)
 800a244:	0019      	movs	r1, r3
 800a246:	2001      	movs	r0, #1
 800a248:	f006 f978 	bl	801053c <CreateLine>
     SensorProbe.HT_Present = false;
 800a24c:	4ba9      	ldr	r3, [pc, #676]	@ (800a4f4 <Device_Init+0x2e0>)
 800a24e:	2200      	movs	r2, #0
 800a250:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800a252:	4ba9      	ldr	r3, [pc, #676]	@ (800a4f8 <Device_Init+0x2e4>)
 800a254:	2200      	movs	r2, #0
 800a256:	701a      	strb	r2, [r3, #0]
 800a258:	e008      	b.n	800a26c <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800a25a:	4ba6      	ldr	r3, [pc, #664]	@ (800a4f4 <Device_Init+0x2e0>)
 800a25c:	2201      	movs	r2, #1
 800a25e:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800a260:	4aa6      	ldr	r2, [pc, #664]	@ (800a4fc <Device_Init+0x2e8>)
 800a262:	4ba7      	ldr	r3, [pc, #668]	@ (800a500 <Device_Init+0x2ec>)
 800a264:	0019      	movs	r1, r3
 800a266:	2003      	movs	r0, #3
 800a268:	f006 f968 	bl	801053c <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800a26c:	f7fd fd5e 	bl	8007d2c <AHT20_DeviceConnected>
 800a270:	0003      	movs	r3, r0
 800a272:	001a      	movs	r2, r3
 800a274:	2301      	movs	r3, #1
 800a276:	4053      	eors	r3, r2
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00c      	beq.n	800a298 <Device_Init+0x84>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800a27e:	4aa1      	ldr	r2, [pc, #644]	@ (800a504 <Device_Init+0x2f0>)
 800a280:	4b9b      	ldr	r3, [pc, #620]	@ (800a4f0 <Device_Init+0x2dc>)
 800a282:	0019      	movs	r1, r3
 800a284:	2001      	movs	r0, #1
 800a286:	f006 f959 	bl	801053c <CreateLine>
     SensorProbe.AHT20_Present = false;
 800a28a:	4b9a      	ldr	r3, [pc, #616]	@ (800a4f4 <Device_Init+0x2e0>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	709a      	strb	r2, [r3, #2]
     Sensor.AHT20_measurementEnabled = false;
 800a290:	4b99      	ldr	r3, [pc, #612]	@ (800a4f8 <Device_Init+0x2e4>)
 800a292:	2200      	movs	r2, #0
 800a294:	711a      	strb	r2, [r3, #4]
 800a296:	e008      	b.n	800a2aa <Device_Init+0x96>
  }else {
    SensorProbe.AHT20_Present = true;
 800a298:	4b96      	ldr	r3, [pc, #600]	@ (800a4f4 <Device_Init+0x2e0>)
 800a29a:	2201      	movs	r2, #1
 800a29c:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800a29e:	4a9a      	ldr	r2, [pc, #616]	@ (800a508 <Device_Init+0x2f4>)
 800a2a0:	4b97      	ldr	r3, [pc, #604]	@ (800a500 <Device_Init+0x2ec>)
 800a2a2:	0019      	movs	r1, r3
 800a2a4:	2003      	movs	r0, #3
 800a2a6:	f006 f949 	bl	801053c <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800a2aa:	f7fe fa63 	bl	8008774 <BMP280_DeviceConnected>
 800a2ae:	0003      	movs	r3, r0
 800a2b0:	001a      	movs	r2, r3
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	4053      	eors	r3, r2
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00c      	beq.n	800a2d6 <Device_Init+0xc2>
     Error("Air pressure / Temperature sensor NOT connected!");
 800a2bc:	4a93      	ldr	r2, [pc, #588]	@ (800a50c <Device_Init+0x2f8>)
 800a2be:	4b8c      	ldr	r3, [pc, #560]	@ (800a4f0 <Device_Init+0x2dc>)
 800a2c0:	0019      	movs	r1, r3
 800a2c2:	2001      	movs	r0, #1
 800a2c4:	f006 f93a 	bl	801053c <CreateLine>
     SensorProbe.BMP280_Present = false;
 800a2c8:	4b8a      	ldr	r3, [pc, #552]	@ (800a4f4 <Device_Init+0x2e0>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	70da      	strb	r2, [r3, #3]
     Sensor.BMP280_measurementEnabled = false;
 800a2ce:	4b8a      	ldr	r3, [pc, #552]	@ (800a4f8 <Device_Init+0x2e4>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	715a      	strb	r2, [r3, #5]
 800a2d4:	e008      	b.n	800a2e8 <Device_Init+0xd4>
  }else {
    SensorProbe.BMP280_Present = true;
 800a2d6:	4b87      	ldr	r3, [pc, #540]	@ (800a4f4 <Device_Init+0x2e0>)
 800a2d8:	2201      	movs	r2, #1
 800a2da:	70da      	strb	r2, [r3, #3]
    Debug("Air pressure / Temperature sensor initialised.");
 800a2dc:	4a8c      	ldr	r2, [pc, #560]	@ (800a510 <Device_Init+0x2fc>)
 800a2de:	4b88      	ldr	r3, [pc, #544]	@ (800a500 <Device_Init+0x2ec>)
 800a2e0:	0019      	movs	r1, r3
 800a2e2:	2003      	movs	r0, #3
 800a2e4:	f006 f92a 	bl	801053c <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800a2e8:	f003 fbd0 	bl	800da8c <SGP_DeviceConnected>
 800a2ec:	0003      	movs	r3, r0
 800a2ee:	001a      	movs	r2, r3
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	4053      	eors	r3, r2
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00c      	beq.n	800a314 <Device_Init+0x100>
    SensorProbe.VOC_Present = false;
 800a2fa:	4b7e      	ldr	r3, [pc, #504]	@ (800a4f4 <Device_Init+0x2e0>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800a300:	4a84      	ldr	r2, [pc, #528]	@ (800a514 <Device_Init+0x300>)
 800a302:	4b7b      	ldr	r3, [pc, #492]	@ (800a4f0 <Device_Init+0x2dc>)
 800a304:	0019      	movs	r1, r3
 800a306:	2001      	movs	r0, #1
 800a308:	f006 f918 	bl	801053c <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800a30c:	4b7a      	ldr	r3, [pc, #488]	@ (800a4f8 <Device_Init+0x2e4>)
 800a30e:	2200      	movs	r2, #0
 800a310:	705a      	strb	r2, [r3, #1]
 800a312:	e00b      	b.n	800a32c <Device_Init+0x118>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800a314:	4b77      	ldr	r3, [pc, #476]	@ (800a4f4 <Device_Init+0x2e0>)
 800a316:	2201      	movs	r2, #1
 800a318:	71da      	strb	r2, [r3, #7]
    SensorProbe.VOC_Present = true;
 800a31a:	4b76      	ldr	r3, [pc, #472]	@ (800a4f4 <Device_Init+0x2e0>)
 800a31c:	2201      	movs	r2, #1
 800a31e:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800a320:	4a7d      	ldr	r2, [pc, #500]	@ (800a518 <Device_Init+0x304>)
 800a322:	4b77      	ldr	r3, [pc, #476]	@ (800a500 <Device_Init+0x2ec>)
 800a324:	0019      	movs	r1, r3
 800a326:	2003      	movs	r0, #3
 800a328:	f006 f908 	bl	801053c <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800a32c:	4b71      	ldr	r3, [pc, #452]	@ (800a4f4 <Device_Init+0x2e0>)
 800a32e:	785b      	ldrb	r3, [r3, #1]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d009      	beq.n	800a348 <Device_Init+0x134>
 800a334:	4b6f      	ldr	r3, [pc, #444]	@ (800a4f4 <Device_Init+0x2e0>)
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d005      	beq.n	800a348 <Device_Init+0x134>
    SetDBLED(false, true, false);
 800a33c:	2200      	movs	r2, #0
 800a33e:	2101      	movs	r1, #1
 800a340:	2000      	movs	r0, #0
 800a342:	f004 fec7 	bl	800f0d4 <SetDBLED>
 800a346:	e018      	b.n	800a37a <Device_Init+0x166>
  }
  else{
    SetDBLED(true, false, false);
 800a348:	2200      	movs	r2, #0
 800a34a:	2100      	movs	r1, #0
 800a34c:	2001      	movs	r0, #1
 800a34e:	f004 fec1 	bl	800f0d4 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800a352:	4b72      	ldr	r3, [pc, #456]	@ (800a51c <Device_Init+0x308>)
 800a354:	2200      	movs	r2, #0
 800a356:	2101      	movs	r1, #1
 800a358:	0018      	movs	r0, r3
 800a35a:	f007 ffcc 	bl	80122f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800a35e:	2380      	movs	r3, #128	@ 0x80
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	486e      	ldr	r0, [pc, #440]	@ (800a51c <Device_Init+0x308>)
 800a364:	2201      	movs	r2, #1
 800a366:	0019      	movs	r1, r3
 800a368:	f007 ffc5 	bl	80122f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800a36c:	2380      	movs	r3, #128	@ 0x80
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	486a      	ldr	r0, [pc, #424]	@ (800a51c <Device_Init+0x308>)
 800a372:	2201      	movs	r2, #1
 800a374:	0019      	movs	r1, r3
 800a376:	f007 ffbe 	bl	80122f6 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800a37a:	4b5f      	ldr	r3, [pc, #380]	@ (800a4f8 <Device_Init+0x2e4>)
 800a37c:	78db      	ldrb	r3, [r3, #3]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d028      	beq.n	800a3d4 <Device_Init+0x1c0>
    Info("Device_Init calls enableMicrophone");
 800a382:	4a67      	ldr	r2, [pc, #412]	@ (800a520 <Device_Init+0x30c>)
 800a384:	4b67      	ldr	r3, [pc, #412]	@ (800a524 <Device_Init+0x310>)
 800a386:	0019      	movs	r1, r3
 800a388:	2002      	movs	r0, #2
 800a38a:	f006 f8d7 	bl	801053c <CreateLine>
    if (!enableMicrophone(true)) {
 800a38e:	2001      	movs	r0, #1
 800a390:	f003 ff9e 	bl	800e2d0 <enableMicrophone>
 800a394:	0003      	movs	r3, r0
 800a396:	001a      	movs	r2, r3
 800a398:	2301      	movs	r3, #1
 800a39a:	4053      	eors	r3, r2
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00c      	beq.n	800a3bc <Device_Init+0x1a8>
      Error("Microphone device not connected! DMA Error.");
 800a3a2:	4a61      	ldr	r2, [pc, #388]	@ (800a528 <Device_Init+0x314>)
 800a3a4:	4b52      	ldr	r3, [pc, #328]	@ (800a4f0 <Device_Init+0x2dc>)
 800a3a6:	0019      	movs	r1, r3
 800a3a8:	2001      	movs	r0, #1
 800a3aa:	f006 f8c7 	bl	801053c <CreateLine>
      SensorProbe.MIC_Present = false;
 800a3ae:	4b51      	ldr	r3, [pc, #324]	@ (800a4f4 <Device_Init+0x2e0>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	715a      	strb	r2, [r3, #5]
      Sensor.MIC_measurementEnabled = false;
 800a3b4:	4b50      	ldr	r3, [pc, #320]	@ (800a4f8 <Device_Init+0x2e4>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	70da      	strb	r2, [r3, #3]
 800a3ba:	e00b      	b.n	800a3d4 <Device_Init+0x1c0>
    }
    else{
      SensorProbe.MIC_Present = true;
 800a3bc:	4b4d      	ldr	r3, [pc, #308]	@ (800a4f4 <Device_Init+0x2e0>)
 800a3be:	2201      	movs	r2, #1
 800a3c0:	715a      	strb	r2, [r3, #5]
      Sensor.MIC_measurementEnabled = true;
 800a3c2:	4b4d      	ldr	r3, [pc, #308]	@ (800a4f8 <Device_Init+0x2e4>)
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800a3c8:	4a58      	ldr	r2, [pc, #352]	@ (800a52c <Device_Init+0x318>)
 800a3ca:	4b4d      	ldr	r3, [pc, #308]	@ (800a500 <Device_Init+0x2ec>)
 800a3cc:	0019      	movs	r1, r3
 800a3ce:	2003      	movs	r0, #3
 800a3d0:	f006 f8b4 	bl	801053c <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800a3d4:	f000 fed2 	bl	800b17c <probe_sen5x>
 800a3d8:	1e03      	subs	r3, r0, #0
 800a3da:	d122      	bne.n	800a422 <Device_Init+0x20e>
    Debug("PM sensor initialised.");
 800a3dc:	4a54      	ldr	r2, [pc, #336]	@ (800a530 <Device_Init+0x31c>)
 800a3de:	4b48      	ldr	r3, [pc, #288]	@ (800a500 <Device_Init+0x2ec>)
 800a3e0:	0019      	movs	r1, r3
 800a3e2:	2003      	movs	r0, #3
 800a3e4:	f006 f8aa 	bl	801053c <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800a3e8:	4b42      	ldr	r3, [pc, #264]	@ (800a4f4 <Device_Init+0x2e0>)
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	711a      	strb	r2, [r3, #4]
    Sensor.PM_measurementEnabled = true;
 800a3ee:	4b42      	ldr	r3, [pc, #264]	@ (800a4f8 <Device_Init+0x2e4>)
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800a3f4:	4b4f      	ldr	r3, [pc, #316]	@ (800a534 <Device_Init+0x320>)
 800a3f6:	791b      	ldrb	r3, [r3, #4]
 800a3f8:	2b34      	cmp	r3, #52	@ 0x34
 800a3fa:	d003      	beq.n	800a404 <Device_Init+0x1f0>
 800a3fc:	4b4d      	ldr	r3, [pc, #308]	@ (800a534 <Device_Init+0x320>)
 800a3fe:	791b      	ldrb	r3, [r3, #4]
 800a400:	2b35      	cmp	r3, #53	@ 0x35
 800a402:	d11c      	bne.n	800a43e <Device_Init+0x22a>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800a404:	4a4c      	ldr	r2, [pc, #304]	@ (800a538 <Device_Init+0x324>)
 800a406:	4b47      	ldr	r3, [pc, #284]	@ (800a524 <Device_Init+0x310>)
 800a408:	0019      	movs	r1, r3
 800a40a:	2002      	movs	r0, #2
 800a40c:	f006 f896 	bl	801053c <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800a410:	4b39      	ldr	r3, [pc, #228]	@ (800a4f8 <Device_Init+0x2e4>)
 800a412:	2200      	movs	r2, #0
 800a414:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800a416:	4b37      	ldr	r3, [pc, #220]	@ (800a4f4 <Device_Init+0x2e0>)
 800a418:	2200      	movs	r2, #0
 800a41a:	71da      	strb	r2, [r3, #7]
      SGP_SoftReset();
 800a41c:	f003 fd1a 	bl	800de54 <SGP_SoftReset>
 800a420:	e00d      	b.n	800a43e <Device_Init+0x22a>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800a422:	f000 fe75 	bl	800b110 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800a426:	4a45      	ldr	r2, [pc, #276]	@ (800a53c <Device_Init+0x328>)
 800a428:	4b35      	ldr	r3, [pc, #212]	@ (800a500 <Device_Init+0x2ec>)
 800a42a:	0019      	movs	r1, r3
 800a42c:	2003      	movs	r0, #3
 800a42e:	f006 f885 	bl	801053c <CreateLine>
    SensorProbe.PM_Present = false;
 800a432:	4b30      	ldr	r3, [pc, #192]	@ (800a4f4 <Device_Init+0x2e0>)
 800a434:	2200      	movs	r2, #0
 800a436:	711a      	strb	r2, [r3, #4]
    Sensor.PM_measurementEnabled = false;
 800a438:	4b2f      	ldr	r3, [pc, #188]	@ (800a4f8 <Device_Init+0x2e4>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800a43e:	4b2d      	ldr	r3, [pc, #180]	@ (800a4f4 <Device_Init+0x2e0>)
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <Device_Init+0x236>
 800a446:	4b3e      	ldr	r3, [pc, #248]	@ (800a540 <Device_Init+0x32c>)
 800a448:	e000      	b.n	800a44c <Device_Init+0x238>
 800a44a:	4b3e      	ldr	r3, [pc, #248]	@ (800a544 <Device_Init+0x330>)
 800a44c:	4a3e      	ldr	r2, [pc, #248]	@ (800a548 <Device_Init+0x334>)
 800a44e:	4935      	ldr	r1, [pc, #212]	@ (800a524 <Device_Init+0x310>)
 800a450:	2002      	movs	r0, #2
 800a452:	f006 f873 	bl	801053c <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800a456:	4b27      	ldr	r3, [pc, #156]	@ (800a4f4 <Device_Init+0x2e0>)
 800a458:	785b      	ldrb	r3, [r3, #1]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <Device_Init+0x24e>
 800a45e:	4b38      	ldr	r3, [pc, #224]	@ (800a540 <Device_Init+0x32c>)
 800a460:	e000      	b.n	800a464 <Device_Init+0x250>
 800a462:	4b38      	ldr	r3, [pc, #224]	@ (800a544 <Device_Init+0x330>)
 800a464:	4a39      	ldr	r2, [pc, #228]	@ (800a54c <Device_Init+0x338>)
 800a466:	492f      	ldr	r1, [pc, #188]	@ (800a524 <Device_Init+0x310>)
 800a468:	2002      	movs	r0, #2
 800a46a:	f006 f867 	bl	801053c <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800a46e:	4b21      	ldr	r3, [pc, #132]	@ (800a4f4 <Device_Init+0x2e0>)
 800a470:	789b      	ldrb	r3, [r3, #2]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <Device_Init+0x266>
 800a476:	4b32      	ldr	r3, [pc, #200]	@ (800a540 <Device_Init+0x32c>)
 800a478:	e000      	b.n	800a47c <Device_Init+0x268>
 800a47a:	4b32      	ldr	r3, [pc, #200]	@ (800a544 <Device_Init+0x330>)
 800a47c:	4a34      	ldr	r2, [pc, #208]	@ (800a550 <Device_Init+0x33c>)
 800a47e:	4929      	ldr	r1, [pc, #164]	@ (800a524 <Device_Init+0x310>)
 800a480:	2002      	movs	r0, #2
 800a482:	f006 f85b 	bl	801053c <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800a486:	4b1b      	ldr	r3, [pc, #108]	@ (800a4f4 <Device_Init+0x2e0>)
 800a488:	78db      	ldrb	r3, [r3, #3]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <Device_Init+0x27e>
 800a48e:	4b2c      	ldr	r3, [pc, #176]	@ (800a540 <Device_Init+0x32c>)
 800a490:	e000      	b.n	800a494 <Device_Init+0x280>
 800a492:	4b2c      	ldr	r3, [pc, #176]	@ (800a544 <Device_Init+0x330>)
 800a494:	4a2f      	ldr	r2, [pc, #188]	@ (800a554 <Device_Init+0x340>)
 800a496:	4923      	ldr	r1, [pc, #140]	@ (800a524 <Device_Init+0x310>)
 800a498:	2002      	movs	r0, #2
 800a49a:	f006 f84f 	bl	801053c <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800a49e:	4b15      	ldr	r3, [pc, #84]	@ (800a4f4 <Device_Init+0x2e0>)
 800a4a0:	791b      	ldrb	r3, [r3, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d001      	beq.n	800a4aa <Device_Init+0x296>
 800a4a6:	4b26      	ldr	r3, [pc, #152]	@ (800a540 <Device_Init+0x32c>)
 800a4a8:	e000      	b.n	800a4ac <Device_Init+0x298>
 800a4aa:	4b26      	ldr	r3, [pc, #152]	@ (800a544 <Device_Init+0x330>)
 800a4ac:	4a2a      	ldr	r2, [pc, #168]	@ (800a558 <Device_Init+0x344>)
 800a4ae:	491d      	ldr	r1, [pc, #116]	@ (800a524 <Device_Init+0x310>)
 800a4b0:	2002      	movs	r0, #2
 800a4b2:	f006 f843 	bl	801053c <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800a4b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a4f4 <Device_Init+0x2e0>)
 800a4b8:	795b      	ldrb	r3, [r3, #5]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <Device_Init+0x2ae>
 800a4be:	4b20      	ldr	r3, [pc, #128]	@ (800a540 <Device_Init+0x32c>)
 800a4c0:	e000      	b.n	800a4c4 <Device_Init+0x2b0>
 800a4c2:	4b20      	ldr	r3, [pc, #128]	@ (800a544 <Device_Init+0x330>)
 800a4c4:	4a25      	ldr	r2, [pc, #148]	@ (800a55c <Device_Init+0x348>)
 800a4c6:	4917      	ldr	r1, [pc, #92]	@ (800a524 <Device_Init+0x310>)
 800a4c8:	2002      	movs	r0, #2
 800a4ca:	f006 f837 	bl	801053c <CreateLine>
  ESP_Init(espUart);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	0018      	movs	r0, r3
 800a4d2:	f7f9 fa75 	bl	80039c0 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800a4d6:	4a22      	ldr	r2, [pc, #136]	@ (800a560 <Device_Init+0x34c>)
 800a4d8:	4b09      	ldr	r3, [pc, #36]	@ (800a500 <Device_Init+0x2ec>)
 800a4da:	0019      	movs	r1, r3
 800a4dc:	2003      	movs	r0, #3
 800a4de:	f006 f82d 	bl	801053c <CreateLine>
}
 800a4e2:	46c0      	nop			@ (mov r8, r8)
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	b004      	add	sp, #16
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	46c0      	nop			@ (mov r8, r8)
 800a4ec:	08027458 	.word	0x08027458
 800a4f0:	08027488 	.word	0x08027488
 800a4f4:	20000d94 	.word	0x20000d94
 800a4f8:	20000d8c 	.word	0x20000d8c
 800a4fc:	0802748c 	.word	0x0802748c
 800a500:	08027454 	.word	0x08027454
 800a504:	080274b8 	.word	0x080274b8
 800a508:	080274ec 	.word	0x080274ec
 800a50c:	08027520 	.word	0x08027520
 800a510:	08027554 	.word	0x08027554
 800a514:	08027584 	.word	0x08027584
 800a518:	080275a0 	.word	0x080275a0
 800a51c:	50000400 	.word	0x50000400
 800a520:	080275b8 	.word	0x080275b8
 800a524:	080275dc 	.word	0x080275dc
 800a528:	080275e0 	.word	0x080275e0
 800a52c:	0802760c 	.word	0x0802760c
 800a530:	08027638 	.word	0x08027638
 800a534:	20000e30 	.word	0x20000e30
 800a538:	08027650 	.word	0x08027650
 800a53c:	080276a0 	.word	0x080276a0
 800a540:	080276c4 	.word	0x080276c4
 800a544:	080276c8 	.word	0x080276c8
 800a548:	080276cc 	.word	0x080276cc
 800a54c:	080276e8 	.word	0x080276e8
 800a550:	08027704 	.word	0x08027704
 800a554:	08027724 	.word	0x08027724
 800a558:	08027744 	.word	0x08027744
 800a55c:	08027760 	.word	0x08027760
 800a560:	0802777c 	.word	0x0802777c

0800a564 <Device_Test>:

void Device_Test(){
 800a564:	b580      	push	{r7, lr}
 800a566:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800a568:	4b34      	ldr	r3, [pc, #208]	@ (800a63c <Device_Test+0xd8>)
 800a56a:	795b      	ldrb	r3, [r3, #5]
 800a56c:	2201      	movs	r2, #1
 800a56e:	4053      	eors	r3, r2
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	d027      	beq.n	800a5c6 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800a576:	f000 fb31 	bl	800abdc <MIC_TestMeasurementDone>
 800a57a:	1e03      	subs	r3, r0, #0
 800a57c:	d011      	beq.n	800a5a2 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800a57e:	4b2f      	ldr	r3, [pc, #188]	@ (800a63c <Device_Test+0xd8>)
 800a580:	2201      	movs	r2, #1
 800a582:	715a      	strb	r2, [r3, #5]
      Sensor.MIC_measurementEnabled = true;
 800a584:	4b2e      	ldr	r3, [pc, #184]	@ (800a640 <Device_Test+0xdc>)
 800a586:	2201      	movs	r2, #1
 800a588:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800a58a:	f004 fd27 	bl	800efdc <Calculate_LED_ON>
 800a58e:	0003      	movs	r3, r0
 800a590:	0019      	movs	r1, r3
 800a592:	23fa      	movs	r3, #250	@ 0xfa
 800a594:	011a      	lsls	r2, r3, #4
 800a596:	23fa      	movs	r3, #250	@ 0xfa
 800a598:	011b      	lsls	r3, r3, #4
 800a59a:	0018      	movs	r0, r3
 800a59c:	f004 fd66 	bl	800f06c <SetStatusLED>
 800a5a0:	e011      	b.n	800a5c6 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800a5a2:	f003 fe71 	bl	800e288 <micSettlingComplete>
 800a5a6:	1e03      	subs	r3, r0, #0
 800a5a8:	d00d      	beq.n	800a5c6 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800a5aa:	4b25      	ldr	r3, [pc, #148]	@ (800a640 <Device_Test+0xdc>)
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800a5b0:	f004 fd14 	bl	800efdc <Calculate_LED_ON>
 800a5b4:	0003      	movs	r3, r0
 800a5b6:	0018      	movs	r0, r3
 800a5b8:	23fa      	movs	r3, #250	@ 0xfa
 800a5ba:	011a      	lsls	r2, r3, #4
 800a5bc:	23fa      	movs	r3, #250	@ 0xfa
 800a5be:	011b      	lsls	r3, r3, #4
 800a5c0:	0019      	movs	r1, r3
 800a5c2:	f004 fd53 	bl	800f06c <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800a5c6:	4b1d      	ldr	r3, [pc, #116]	@ (800a63c <Device_Test+0xd8>)
 800a5c8:	799b      	ldrb	r3, [r3, #6]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	4053      	eors	r3, r2
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800a5d4:	f7fa ff56 	bl	8005484 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800a5d8:	4b18      	ldr	r3, [pc, #96]	@ (800a63c <Device_Test+0xd8>)
 800a5da:	799b      	ldrb	r3, [r3, #6]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d003      	beq.n	800a5e8 <Device_Test+0x84>
 800a5e0:	4b16      	ldr	r3, [pc, #88]	@ (800a63c <Device_Test+0xd8>)
 800a5e2:	795b      	ldrb	r3, [r3, #5]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d106      	bne.n	800a5f6 <Device_Test+0x92>
 800a5e8:	4b16      	ldr	r3, [pc, #88]	@ (800a644 <Device_Test+0xe0>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	0018      	movs	r0, r3
 800a5ee:	f005 ff4f 	bl	8010490 <TimestampIsReached>
 800a5f2:	1e03      	subs	r3, r0, #0
 800a5f4:	d01f      	beq.n	800a636 <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800a5f6:	4b11      	ldr	r3, [pc, #68]	@ (800a63c <Device_Test+0xd8>)
 800a5f8:	799b      	ldrb	r3, [r3, #6]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <Device_Test+0x9e>
 800a5fe:	4b12      	ldr	r3, [pc, #72]	@ (800a648 <Device_Test+0xe4>)
 800a600:	e000      	b.n	800a604 <Device_Test+0xa0>
 800a602:	4b12      	ldr	r3, [pc, #72]	@ (800a64c <Device_Test+0xe8>)
 800a604:	4a12      	ldr	r2, [pc, #72]	@ (800a650 <Device_Test+0xec>)
 800a606:	4913      	ldr	r1, [pc, #76]	@ (800a654 <Device_Test+0xf0>)
 800a608:	2002      	movs	r0, #2
 800a60a:	f005 ff97 	bl	801053c <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800a60e:	4b0b      	ldr	r3, [pc, #44]	@ (800a63c <Device_Test+0xd8>)
 800a610:	795b      	ldrb	r3, [r3, #5]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <Device_Test+0xb6>
 800a616:	4b0c      	ldr	r3, [pc, #48]	@ (800a648 <Device_Test+0xe4>)
 800a618:	e000      	b.n	800a61c <Device_Test+0xb8>
 800a61a:	4b0c      	ldr	r3, [pc, #48]	@ (800a64c <Device_Test+0xe8>)
 800a61c:	4a0e      	ldr	r2, [pc, #56]	@ (800a658 <Device_Test+0xf4>)
 800a61e:	490d      	ldr	r1, [pc, #52]	@ (800a654 <Device_Test+0xf0>)
 800a620:	2002      	movs	r0, #2
 800a622:	f005 ff8b 	bl	801053c <CreateLine>
    Info("Test completed");
 800a626:	4a0d      	ldr	r2, [pc, #52]	@ (800a65c <Device_Test+0xf8>)
 800a628:	4b0a      	ldr	r3, [pc, #40]	@ (800a654 <Device_Test+0xf0>)
 800a62a:	0019      	movs	r1, r3
 800a62c:	2002      	movs	r0, #2
 800a62e:	f005 ff85 	bl	801053c <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800a632:	f7ff f975 	bl	8009920 <SetTestDone>
  }
}
 800a636:	46c0      	nop			@ (mov r8, r8)
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	20000d94 	.word	0x20000d94
 800a640:	20000d8c 	.word	0x20000d8c
 800a644:	20000d84 	.word	0x20000d84
 800a648:	080277a0 	.word	0x080277a0
 800a64c:	080277a8 	.word	0x080277a8
 800a650:	080277b0 	.word	0x080277b0
 800a654:	080275dc 	.word	0x080275dc
 800a658:	080277c4 	.word	0x080277c4
 800a65c:	080277d8 	.word	0x080277d8

0800a660 <AllDevicesReady>:

bool AllDevicesReady() {
 800a660:	b580      	push	{r7, lr}
 800a662:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 800a664:	4b31      	ldr	r3, [pc, #196]	@ (800a72c <AllDevicesReady+0xcc>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	0018      	movs	r0, r3
 800a66a:	f005 ff11 	bl	8010490 <TimestampIsReached>
 800a66e:	1e03      	subs	r3, r0, #0
 800a670:	d058      	beq.n	800a724 <AllDevicesReady+0xc4>
    if (HIDSstate == HIDS_STATE_WAIT) {
 800a672:	4b2f      	ldr	r3, [pc, #188]	@ (800a730 <AllDevicesReady+0xd0>)
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	2b06      	cmp	r3, #6
 800a678:	d102      	bne.n	800a680 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 800a67a:	4b2e      	ldr	r3, [pc, #184]	@ (800a734 <AllDevicesReady+0xd4>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	701a      	strb	r2, [r3, #0]
    }
    if (AHTstate == AHT_STATE_WAIT) {
 800a680:	4b2d      	ldr	r3, [pc, #180]	@ (800a738 <AllDevicesReady+0xd8>)
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	2b09      	cmp	r3, #9
 800a686:	d102      	bne.n	800a68e <AllDevicesReady+0x2e>
      Sensor.AHT20_measurementEnabled = false;
 800a688:	4b2a      	ldr	r3, [pc, #168]	@ (800a734 <AllDevicesReady+0xd4>)
 800a68a:	2200      	movs	r2, #0
 800a68c:	711a      	strb	r2, [r3, #4]
    }
    if (BMPstate == BMP_STATE_WAIT) {
 800a68e:	4b2b      	ldr	r3, [pc, #172]	@ (800a73c <AllDevicesReady+0xdc>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	2b08      	cmp	r3, #8
 800a694:	d102      	bne.n	800a69c <AllDevicesReady+0x3c>
      Sensor.BMP280_measurementEnabled = false;
 800a696:	4b27      	ldr	r3, [pc, #156]	@ (800a734 <AllDevicesReady+0xd4>)
 800a698:	2200      	movs	r2, #0
 800a69a:	715a      	strb	r2, [r3, #5]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800a69c:	4b28      	ldr	r3, [pc, #160]	@ (800a740 <AllDevicesReady+0xe0>)
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	2b07      	cmp	r3, #7
 800a6a2:	d006      	beq.n	800a6b2 <AllDevicesReady+0x52>
 800a6a4:	4b27      	ldr	r3, [pc, #156]	@ (800a744 <AllDevicesReady+0xe4>)
 800a6a6:	79db      	ldrb	r3, [r3, #7]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	4053      	eors	r3, r2
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <AllDevicesReady+0x58>
      Sensor.VOC_measurementEnabled = false;
 800a6b2:	4b20      	ldr	r3, [pc, #128]	@ (800a734 <AllDevicesReady+0xd4>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 800a6b8:	4b23      	ldr	r3, [pc, #140]	@ (800a748 <AllDevicesReady+0xe8>)
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d102      	bne.n	800a6c6 <AllDevicesReady+0x66>
      Sensor.PM_measurementEnabled = false;
 800a6c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a734 <AllDevicesReady+0xd4>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800a6c6:	4b21      	ldr	r3, [pc, #132]	@ (800a74c <AllDevicesReady+0xec>)
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	2b03      	cmp	r3, #3
 800a6cc:	d102      	bne.n	800a6d4 <AllDevicesReady+0x74>
      Sensor.MIC_measurementEnabled = false;
 800a6ce:	4b19      	ldr	r3, [pc, #100]	@ (800a734 <AllDevicesReady+0xd4>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 800a6d4:	4b1e      	ldr	r3, [pc, #120]	@ (800a750 <AllDevicesReady+0xf0>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	2b09      	cmp	r3, #9
 800a6da:	d123      	bne.n	800a724 <AllDevicesReady+0xc4>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800a6dc:	4b15      	ldr	r3, [pc, #84]	@ (800a734 <AllDevicesReady+0xd4>)
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	4053      	eors	r3, r2
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d016      	beq.n	800a718 <AllDevicesReady+0xb8>
 800a6ea:	4b12      	ldr	r3, [pc, #72]	@ (800a734 <AllDevicesReady+0xd4>)
 800a6ec:	785b      	ldrb	r3, [r3, #1]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	4053      	eors	r3, r2
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00f      	beq.n	800a718 <AllDevicesReady+0xb8>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 800a6f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a734 <AllDevicesReady+0xd4>)
 800a6fa:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	4053      	eors	r3, r2
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b00      	cmp	r3, #0
 800a704:	d008      	beq.n	800a718 <AllDevicesReady+0xb8>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 800a706:	4b0b      	ldr	r3, [pc, #44]	@ (800a734 <AllDevicesReady+0xd4>)
 800a708:	78db      	ldrb	r3, [r3, #3]
 800a70a:	2201      	movs	r2, #1
 800a70c:	4053      	eors	r3, r2
 800a70e:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800a710:	2b00      	cmp	r3, #0
 800a712:	d001      	beq.n	800a718 <AllDevicesReady+0xb8>
 800a714:	2301      	movs	r3, #1
 800a716:	e000      	b.n	800a71a <AllDevicesReady+0xba>
 800a718:	2300      	movs	r3, #0
 800a71a:	1c1a      	adds	r2, r3, #0
 800a71c:	2301      	movs	r3, #1
 800a71e:	4013      	ands	r3, r2
 800a720:	b2db      	uxtb	r3, r3
 800a722:	e000      	b.n	800a726 <AllDevicesReady+0xc6>
    }
  }
  return false;
 800a724:	2300      	movs	r3, #0
}
 800a726:	0018      	movs	r0, r3
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	20000d84 	.word	0x20000d84
 800a730:	20000d9e 	.word	0x20000d9e
 800a734:	20000d8c 	.word	0x20000d8c
 800a738:	20000d9f 	.word	0x20000d9f
 800a73c:	20000da0 	.word	0x20000da0
 800a740:	20000d9d 	.word	0x20000d9d
 800a744:	20000d94 	.word	0x20000d94
 800a748:	20000099 	.word	0x20000099
 800a74c:	20000d70 	.word	0x20000d70
 800a750:	20000d71 	.word	0x20000d71

0800a754 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800a754:	b580      	push	{r7, lr}
 800a756:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800a758:	4b18      	ldr	r3, [pc, #96]	@ (800a7bc <EnabledConnectedDevices+0x68>)
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800a760:	4b17      	ldr	r3, [pc, #92]	@ (800a7c0 <EnabledConnectedDevices+0x6c>)
 800a762:	2201      	movs	r2, #1
 800a764:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.AHT20_Present) {
 800a766:	4b15      	ldr	r3, [pc, #84]	@ (800a7bc <EnabledConnectedDevices+0x68>)
 800a768:	789b      	ldrb	r3, [r3, #2]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d002      	beq.n	800a774 <EnabledConnectedDevices+0x20>
    Sensor.AHT20_measurementEnabled = true;
 800a76e:	4b14      	ldr	r3, [pc, #80]	@ (800a7c0 <EnabledConnectedDevices+0x6c>)
 800a770:	2201      	movs	r2, #1
 800a772:	711a      	strb	r2, [r3, #4]
  }
  if (SensorProbe.BMP280_Present) {
 800a774:	4b11      	ldr	r3, [pc, #68]	@ (800a7bc <EnabledConnectedDevices+0x68>)
 800a776:	78db      	ldrb	r3, [r3, #3]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d002      	beq.n	800a782 <EnabledConnectedDevices+0x2e>
    Sensor.BMP280_measurementEnabled = true;
 800a77c:	4b10      	ldr	r3, [pc, #64]	@ (800a7c0 <EnabledConnectedDevices+0x6c>)
 800a77e:	2201      	movs	r2, #1
 800a780:	715a      	strb	r2, [r3, #5]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800a782:	4b0e      	ldr	r3, [pc, #56]	@ (800a7bc <EnabledConnectedDevices+0x68>)
 800a784:	785b      	ldrb	r3, [r3, #1]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d006      	beq.n	800a798 <EnabledConnectedDevices+0x44>
 800a78a:	4b0c      	ldr	r3, [pc, #48]	@ (800a7bc <EnabledConnectedDevices+0x68>)
 800a78c:	79db      	ldrb	r3, [r3, #7]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d002      	beq.n	800a798 <EnabledConnectedDevices+0x44>
    Sensor.VOC_measurementEnabled = true;
 800a792:	4b0b      	ldr	r3, [pc, #44]	@ (800a7c0 <EnabledConnectedDevices+0x6c>)
 800a794:	2201      	movs	r2, #1
 800a796:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800a798:	4b08      	ldr	r3, [pc, #32]	@ (800a7bc <EnabledConnectedDevices+0x68>)
 800a79a:	791b      	ldrb	r3, [r3, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d002      	beq.n	800a7a6 <EnabledConnectedDevices+0x52>
    Sensor.PM_measurementEnabled = true;
 800a7a0:	4b07      	ldr	r3, [pc, #28]	@ (800a7c0 <EnabledConnectedDevices+0x6c>)
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800a7a6:	4b05      	ldr	r3, [pc, #20]	@ (800a7bc <EnabledConnectedDevices+0x68>)
 800a7a8:	795b      	ldrb	r3, [r3, #5]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d002      	beq.n	800a7b4 <EnabledConnectedDevices+0x60>
    Sensor.MIC_measurementEnabled = true;
 800a7ae:	4b04      	ldr	r3, [pc, #16]	@ (800a7c0 <EnabledConnectedDevices+0x6c>)
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	70da      	strb	r2, [r3, #3]
  }
}
 800a7b4:	46c0      	nop			@ (mov r8, r8)
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	46c0      	nop			@ (mov r8, r8)
 800a7bc:	20000d94 	.word	0x20000d94
 800a7c0:	20000d8c 	.word	0x20000d8c

0800a7c4 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 800a7c8:	4a0d      	ldr	r2, [pc, #52]	@ (800a800 <DisableConnectedDevices+0x3c>)
 800a7ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a804 <DisableConnectedDevices+0x40>)
 800a7cc:	0019      	movs	r1, r3
 800a7ce:	2003      	movs	r0, #3
 800a7d0:	f005 feb4 	bl	801053c <CreateLine>
  Sensor.HT_measurementEnabled = false;
 800a7d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a808 <DisableConnectedDevices+0x44>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800a7da:	4b0b      	ldr	r3, [pc, #44]	@ (800a808 <DisableConnectedDevices+0x44>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	705a      	strb	r2, [r3, #1]
  Sensor.AHT20_measurementEnabled = false;
 800a7e0:	4b09      	ldr	r3, [pc, #36]	@ (800a808 <DisableConnectedDevices+0x44>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	711a      	strb	r2, [r3, #4]
  Sensor.BMP280_measurementEnabled = false;
 800a7e6:	4b08      	ldr	r3, [pc, #32]	@ (800a808 <DisableConnectedDevices+0x44>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	715a      	strb	r2, [r3, #5]
  Sensor.PM_measurementEnabled = false;
 800a7ec:	4b06      	ldr	r3, [pc, #24]	@ (800a808 <DisableConnectedDevices+0x44>)
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800a7f2:	4b05      	ldr	r3, [pc, #20]	@ (800a808 <DisableConnectedDevices+0x44>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	70da      	strb	r2, [r3, #3]
}
 800a7f8:	46c0      	nop			@ (mov r8, r8)
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	46c0      	nop			@ (mov r8, r8)
 800a800:	080277e8 	.word	0x080277e8
 800a804:	08027454 	.word	0x08027454
 800a808:	20000d8c 	.word	0x20000d8c

0800a80c <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	0002      	movs	r2, r0
 800a814:	1dfb      	adds	r3, r7, #7
 800a816:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800a818:	4b03      	ldr	r3, [pc, #12]	@ (800a828 <setSensorLock+0x1c>)
 800a81a:	1dfa      	adds	r2, r7, #7
 800a81c:	7812      	ldrb	r2, [r2, #0]
 800a81e:	701a      	strb	r2, [r3, #0]
}
 800a820:	46c0      	nop			@ (mov r8, r8)
 800a822:	46bd      	mov	sp, r7
 800a824:	b002      	add	sp, #8
 800a826:	bd80      	pop	{r7, pc}
 800a828:	20000d9c 	.word	0x20000d9c

0800a82c <getSensorLock>:

uint8_t getSensorLock() {
 800a82c:	b580      	push	{r7, lr}
 800a82e:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800a830:	4b02      	ldr	r3, [pc, #8]	@ (800a83c <getSensorLock+0x10>)
 800a832:	781b      	ldrb	r3, [r3, #0]
}
 800a834:	0018      	movs	r0, r3
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	46c0      	nop			@ (mov r8, r8)
 800a83c:	20000d9c 	.word	0x20000d9c

0800a840 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800a840:	b580      	push	{r7, lr}
 800a842:	af00      	add	r7, sp, #0
  if (Sensor.HT_measurementEnabled) {
 800a844:	4b15      	ldr	r3, [pc, #84]	@ (800a89c <UpkeepI2Csensors+0x5c>)
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d005      	beq.n	800a858 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800a84c:	f006 f99a 	bl	8010b84 <HIDS_Upkeep>
 800a850:	0003      	movs	r3, r0
 800a852:	001a      	movs	r2, r3
 800a854:	4b12      	ldr	r3, [pc, #72]	@ (800a8a0 <UpkeepI2Csensors+0x60>)
 800a856:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800a858:	4b10      	ldr	r3, [pc, #64]	@ (800a89c <UpkeepI2Csensors+0x5c>)
 800a85a:	785b      	ldrb	r3, [r3, #1]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800a860:	f003 fb1e 	bl	800dea0 <SGP_Upkeep>
 800a864:	0003      	movs	r3, r0
 800a866:	001a      	movs	r2, r3
 800a868:	4b0e      	ldr	r3, [pc, #56]	@ (800a8a4 <UpkeepI2Csensors+0x64>)
 800a86a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT20_measurementEnabled) {
 800a86c:	4b0b      	ldr	r3, [pc, #44]	@ (800a89c <UpkeepI2Csensors+0x5c>)
 800a86e:	791b      	ldrb	r3, [r3, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d005      	beq.n	800a880 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800a874:	f7fd fc10 	bl	8008098 <AHT_Upkeep>
 800a878:	0003      	movs	r3, r0
 800a87a:	001a      	movs	r2, r3
 800a87c:	4b0a      	ldr	r3, [pc, #40]	@ (800a8a8 <UpkeepI2Csensors+0x68>)
 800a87e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP280_measurementEnabled) {
 800a880:	4b06      	ldr	r3, [pc, #24]	@ (800a89c <UpkeepI2Csensors+0x5c>)
 800a882:	795b      	ldrb	r3, [r3, #5]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d005      	beq.n	800a894 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800a888:	f7fe f9ae 	bl	8008be8 <BMP_Upkeep>
 800a88c:	0003      	movs	r3, r0
 800a88e:	001a      	movs	r2, r3
 800a890:	4b06      	ldr	r3, [pc, #24]	@ (800a8ac <UpkeepI2Csensors+0x6c>)
 800a892:	701a      	strb	r2, [r3, #0]
  }
}
 800a894:	46c0      	nop			@ (mov r8, r8)
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	46c0      	nop			@ (mov r8, r8)
 800a89c:	20000d8c 	.word	0x20000d8c
 800a8a0:	20000d9e 	.word	0x20000d9e
 800a8a4:	20000d9d 	.word	0x20000d9d
 800a8a8:	20000d9f 	.word	0x20000d9f
 800a8ac:	20000da0 	.word	0x20000da0

0800a8b0 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800a8b4:	4b02      	ldr	r3, [pc, #8]	@ (800a8c0 <ResetdBAmax+0x10>)
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	601a      	str	r2, [r3, #0]
}
 800a8ba:	46c0      	nop			@ (mov r8, r8)
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	20000de8 	.word	0x20000de8

0800a8c4 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800a8cc:	f006 fa82 	bl	8010dd4 <HAL_GetTick>
 800a8d0:	0002      	movs	r2, r0
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	18d2      	adds	r2, r2, r3
 800a8d6:	4b03      	ldr	r3, [pc, #12]	@ (800a8e4 <setMICTimeStamp+0x20>)
 800a8d8:	601a      	str	r2, [r3, #0]
}
 800a8da:	46c0      	nop			@ (mov r8, r8)
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	b002      	add	sp, #8
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	46c0      	nop			@ (mov r8, r8)
 800a8e4:	20000df0 	.word	0x20000df0

0800a8e8 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	af00      	add	r7, sp, #0
  counter = 0;
 800a8ec:	4b05      	ldr	r3, [pc, #20]	@ (800a904 <ResetDBACalculator+0x1c>)
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800a8f2:	4b05      	ldr	r3, [pc, #20]	@ (800a908 <ResetDBACalculator+0x20>)
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800a8f8:	4b04      	ldr	r3, [pc, #16]	@ (800a90c <ResetDBACalculator+0x24>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	701a      	strb	r2, [r3, #0]
}
 800a8fe:	46c0      	nop			@ (mov r8, r8)
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	20000dec 	.word	0x20000dec
 800a908:	20000098 	.word	0x20000098
 800a90c:	20000ded 	.word	0x20000ded

0800a910 <MIC_Print>:

void MIC_Print(void) {
 800a910:	b5b0      	push	{r4, r5, r7, lr}
 800a912:	b08a      	sub	sp, #40	@ 0x28
 800a914:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800a916:	4b9f      	ldr	r3, [pc, #636]	@ (800ab94 <MIC_Print+0x284>)
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	4b9f      	ldr	r3, [pc, #636]	@ (800ab98 <MIC_Print+0x288>)
 800a91c:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800a91e:	4b9f      	ldr	r3, [pc, #636]	@ (800ab9c <MIC_Print+0x28c>)
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	001a      	movs	r2, r3
 800a924:	4b9c      	ldr	r3, [pc, #624]	@ (800ab98 <MIC_Print+0x288>)
 800a926:	6819      	ldr	r1, [r3, #0]
 800a928:	4b9d      	ldr	r3, [pc, #628]	@ (800aba0 <MIC_Print+0x290>)
 800a92a:	0092      	lsls	r2, r2, #2
 800a92c:	50d1      	str	r1, [r2, r3]
  counter++;
 800a92e:	4b9b      	ldr	r3, [pc, #620]	@ (800ab9c <MIC_Print+0x28c>)
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	3301      	adds	r3, #1
 800a934:	b2da      	uxtb	r2, r3
 800a936:	4b99      	ldr	r3, [pc, #612]	@ (800ab9c <MIC_Print+0x28c>)
 800a938:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800a93a:	4b98      	ldr	r3, [pc, #608]	@ (800ab9c <MIC_Print+0x28c>)
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	2b09      	cmp	r3, #9
 800a940:	d80b      	bhi.n	800a95a <MIC_Print+0x4a>
 800a942:	4b98      	ldr	r3, [pc, #608]	@ (800aba4 <MIC_Print+0x294>)
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	2201      	movs	r2, #1
 800a948:	4053      	eors	r3, r2
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d004      	beq.n	800a95a <MIC_Print+0x4a>
    denominator = counter;
 800a950:	4b92      	ldr	r3, [pc, #584]	@ (800ab9c <MIC_Print+0x28c>)
 800a952:	781a      	ldrb	r2, [r3, #0]
 800a954:	4b94      	ldr	r3, [pc, #592]	@ (800aba8 <MIC_Print+0x298>)
 800a956:	701a      	strb	r2, [r3, #0]
 800a958:	e005      	b.n	800a966 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800a95a:	4b93      	ldr	r3, [pc, #588]	@ (800aba8 <MIC_Print+0x298>)
 800a95c:	220a      	movs	r2, #10
 800a95e:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800a960:	4b90      	ldr	r3, [pc, #576]	@ (800aba4 <MIC_Print+0x294>)
 800a962:	2201      	movs	r2, #1
 800a964:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800a966:	4b91      	ldr	r3, [pc, #580]	@ (800abac <MIC_Print+0x29c>)
 800a968:	2200      	movs	r2, #0
 800a96a:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800a96c:	230f      	movs	r3, #15
 800a96e:	18fb      	adds	r3, r7, r3
 800a970:	2200      	movs	r2, #0
 800a972:	701a      	strb	r2, [r3, #0]
 800a974:	e042      	b.n	800a9fc <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800a976:	240f      	movs	r4, #15
 800a978:	193b      	adds	r3, r7, r4
 800a97a:	781a      	ldrb	r2, [r3, #0]
 800a97c:	4b88      	ldr	r3, [pc, #544]	@ (800aba0 <MIC_Print+0x290>)
 800a97e:	0092      	lsls	r2, r2, #2
 800a980:	58d2      	ldr	r2, [r2, r3]
 800a982:	4b8a      	ldr	r3, [pc, #552]	@ (800abac <MIC_Print+0x29c>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	1c19      	adds	r1, r3, #0
 800a988:	1c10      	adds	r0, r2, #0
 800a98a:	f7f5 ff99 	bl	80008c0 <__aeabi_fadd>
 800a98e:	1c03      	adds	r3, r0, #0
 800a990:	1c1a      	adds	r2, r3, #0
 800a992:	4b86      	ldr	r3, [pc, #536]	@ (800abac <MIC_Print+0x29c>)
 800a994:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800a996:	193b      	adds	r3, r7, r4
 800a998:	781a      	ldrb	r2, [r3, #0]
 800a99a:	4b81      	ldr	r3, [pc, #516]	@ (800aba0 <MIC_Print+0x290>)
 800a99c:	0092      	lsls	r2, r2, #2
 800a99e:	58d2      	ldr	r2, [r2, r3]
 800a9a0:	4b83      	ldr	r3, [pc, #524]	@ (800abb0 <MIC_Print+0x2a0>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	1c19      	adds	r1, r3, #0
 800a9a6:	1c10      	adds	r0, r2, #0
 800a9a8:	f7f5 fdd6 	bl	8000558 <__aeabi_fcmpgt>
 800a9ac:	1e03      	subs	r3, r0, #0
 800a9ae:	d006      	beq.n	800a9be <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800a9b0:	193b      	adds	r3, r7, r4
 800a9b2:	781a      	ldrb	r2, [r3, #0]
 800a9b4:	4b7a      	ldr	r3, [pc, #488]	@ (800aba0 <MIC_Print+0x290>)
 800a9b6:	0092      	lsls	r2, r2, #2
 800a9b8:	58d2      	ldr	r2, [r2, r3]
 800a9ba:	4b7d      	ldr	r3, [pc, #500]	@ (800abb0 <MIC_Print+0x2a0>)
 800a9bc:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800a9be:	4b7b      	ldr	r3, [pc, #492]	@ (800abac <MIC_Print+0x29c>)
 800a9c0:	681c      	ldr	r4, [r3, #0]
 800a9c2:	4b79      	ldr	r3, [pc, #484]	@ (800aba8 <MIC_Print+0x298>)
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	0018      	movs	r0, r3
 800a9c8:	f7f6 fe4e 	bl	8001668 <__aeabi_ui2f>
 800a9cc:	1c03      	adds	r3, r0, #0
 800a9ce:	1c19      	adds	r1, r3, #0
 800a9d0:	1c20      	adds	r0, r4, #0
 800a9d2:	f7f6 f8ff 	bl	8000bd4 <__aeabi_fdiv>
 800a9d6:	1c03      	adds	r3, r0, #0
 800a9d8:	1c1a      	adds	r2, r3, #0
 800a9da:	4b76      	ldr	r3, [pc, #472]	@ (800abb4 <MIC_Print+0x2a4>)
 800a9dc:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800a9de:	4b6e      	ldr	r3, [pc, #440]	@ (800ab98 <MIC_Print+0x288>)
 800a9e0:	6818      	ldr	r0, [r3, #0]
 800a9e2:	4b73      	ldr	r3, [pc, #460]	@ (800abb0 <MIC_Print+0x2a0>)
 800a9e4:	6819      	ldr	r1, [r3, #0]
 800a9e6:	4b73      	ldr	r3, [pc, #460]	@ (800abb4 <MIC_Print+0x2a4>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	1c1a      	adds	r2, r3, #0
 800a9ec:	f7f8 ff08 	bl	8003800 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800a9f0:	210f      	movs	r1, #15
 800a9f2:	187b      	adds	r3, r7, r1
 800a9f4:	781a      	ldrb	r2, [r3, #0]
 800a9f6:	187b      	adds	r3, r7, r1
 800a9f8:	3201      	adds	r2, #1
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	4b6a      	ldr	r3, [pc, #424]	@ (800aba8 <MIC_Print+0x298>)
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	220f      	movs	r2, #15
 800aa02:	18ba      	adds	r2, r7, r2
 800aa04:	7812      	ldrb	r2, [r2, #0]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d3b5      	bcc.n	800a976 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800aa0a:	4b63      	ldr	r3, [pc, #396]	@ (800ab98 <MIC_Print+0x288>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	1c18      	adds	r0, r3, #0
 800aa10:	f7f8 fd28 	bl	8003464 <__aeabi_f2d>
 800aa14:	6038      	str	r0, [r7, #0]
 800aa16:	6079      	str	r1, [r7, #4]
 800aa18:	4b65      	ldr	r3, [pc, #404]	@ (800abb0 <MIC_Print+0x2a0>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	1c18      	adds	r0, r3, #0
 800aa1e:	f7f8 fd21 	bl	8003464 <__aeabi_f2d>
 800aa22:	0004      	movs	r4, r0
 800aa24:	000d      	movs	r5, r1
 800aa26:	4b63      	ldr	r3, [pc, #396]	@ (800abb4 <MIC_Print+0x2a4>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	1c18      	adds	r0, r3, #0
 800aa2c:	f7f8 fd1a 	bl	8003464 <__aeabi_f2d>
 800aa30:	0002      	movs	r2, r0
 800aa32:	000b      	movs	r3, r1
 800aa34:	4960      	ldr	r1, [pc, #384]	@ (800abb8 <MIC_Print+0x2a8>)
 800aa36:	9204      	str	r2, [sp, #16]
 800aa38:	9305      	str	r3, [sp, #20]
 800aa3a:	9402      	str	r4, [sp, #8]
 800aa3c:	9503      	str	r5, [sp, #12]
 800aa3e:	4b5f      	ldr	r3, [pc, #380]	@ (800abbc <MIC_Print+0x2ac>)
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	0008      	movs	r0, r1
 800aa48:	f017 fd00 	bl	802244c <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800aa4c:	4b53      	ldr	r3, [pc, #332]	@ (800ab9c <MIC_Print+0x28c>)
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	2b0a      	cmp	r3, #10
 800aa52:	d902      	bls.n	800aa5a <MIC_Print+0x14a>
    counter = 0;
 800aa54:	4b51      	ldr	r3, [pc, #324]	@ (800ab9c <MIC_Print+0x28c>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800aa5a:	4b4f      	ldr	r3, [pc, #316]	@ (800ab98 <MIC_Print+0x288>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4958      	ldr	r1, [pc, #352]	@ (800abc0 <MIC_Print+0x2b0>)
 800aa60:	1c18      	adds	r0, r3, #0
 800aa62:	f7f5 fd83 	bl	800056c <__aeabi_fcmpge>
 800aa66:	1e03      	subs	r3, r0, #0
 800aa68:	d004      	beq.n	800aa74 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	2101      	movs	r1, #1
 800aa6e:	2001      	movs	r0, #1
 800aa70:	f004 fb30 	bl	800f0d4 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800aa74:	4b48      	ldr	r3, [pc, #288]	@ (800ab98 <MIC_Print+0x288>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4952      	ldr	r1, [pc, #328]	@ (800abc4 <MIC_Print+0x2b4>)
 800aa7a:	1c18      	adds	r0, r3, #0
 800aa7c:	f7f5 fd76 	bl	800056c <__aeabi_fcmpge>
 800aa80:	1e03      	subs	r3, r0, #0
 800aa82:	d00c      	beq.n	800aa9e <MIC_Print+0x18e>
 800aa84:	4b44      	ldr	r3, [pc, #272]	@ (800ab98 <MIC_Print+0x288>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	494d      	ldr	r1, [pc, #308]	@ (800abc0 <MIC_Print+0x2b0>)
 800aa8a:	1c18      	adds	r0, r3, #0
 800aa8c:	f7f5 fd50 	bl	8000530 <__aeabi_fcmplt>
 800aa90:	1e03      	subs	r3, r0, #0
 800aa92:	d004      	beq.n	800aa9e <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800aa94:	2200      	movs	r2, #0
 800aa96:	2100      	movs	r1, #0
 800aa98:	2001      	movs	r0, #1
 800aa9a:	f004 fb1b 	bl	800f0d4 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800aa9e:	4b3e      	ldr	r3, [pc, #248]	@ (800ab98 <MIC_Print+0x288>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4949      	ldr	r1, [pc, #292]	@ (800abc8 <MIC_Print+0x2b8>)
 800aaa4:	1c18      	adds	r0, r3, #0
 800aaa6:	f7f5 fd61 	bl	800056c <__aeabi_fcmpge>
 800aaaa:	1e03      	subs	r3, r0, #0
 800aaac:	d00c      	beq.n	800aac8 <MIC_Print+0x1b8>
 800aaae:	4b3a      	ldr	r3, [pc, #232]	@ (800ab98 <MIC_Print+0x288>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4944      	ldr	r1, [pc, #272]	@ (800abc4 <MIC_Print+0x2b4>)
 800aab4:	1c18      	adds	r0, r3, #0
 800aab6:	f7f5 fd3b 	bl	8000530 <__aeabi_fcmplt>
 800aaba:	1e03      	subs	r3, r0, #0
 800aabc:	d004      	beq.n	800aac8 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800aabe:	2200      	movs	r2, #0
 800aac0:	2101      	movs	r1, #1
 800aac2:	2001      	movs	r0, #1
 800aac4:	f004 fb06 	bl	800f0d4 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800aac8:	4b33      	ldr	r3, [pc, #204]	@ (800ab98 <MIC_Print+0x288>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	493f      	ldr	r1, [pc, #252]	@ (800abcc <MIC_Print+0x2bc>)
 800aace:	1c18      	adds	r0, r3, #0
 800aad0:	f7f5 fd4c 	bl	800056c <__aeabi_fcmpge>
 800aad4:	1e03      	subs	r3, r0, #0
 800aad6:	d00c      	beq.n	800aaf2 <MIC_Print+0x1e2>
 800aad8:	4b2f      	ldr	r3, [pc, #188]	@ (800ab98 <MIC_Print+0x288>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	493a      	ldr	r1, [pc, #232]	@ (800abc8 <MIC_Print+0x2b8>)
 800aade:	1c18      	adds	r0, r3, #0
 800aae0:	f7f5 fd26 	bl	8000530 <__aeabi_fcmplt>
 800aae4:	1e03      	subs	r3, r0, #0
 800aae6:	d004      	beq.n	800aaf2 <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800aae8:	2200      	movs	r2, #0
 800aaea:	2101      	movs	r1, #1
 800aaec:	2000      	movs	r0, #0
 800aaee:	f004 faf1 	bl	800f0d4 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800aaf2:	4b29      	ldr	r3, [pc, #164]	@ (800ab98 <MIC_Print+0x288>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4936      	ldr	r1, [pc, #216]	@ (800abd0 <MIC_Print+0x2c0>)
 800aaf8:	1c18      	adds	r0, r3, #0
 800aafa:	f7f5 fd37 	bl	800056c <__aeabi_fcmpge>
 800aafe:	1e03      	subs	r3, r0, #0
 800ab00:	d00c      	beq.n	800ab1c <MIC_Print+0x20c>
 800ab02:	4b25      	ldr	r3, [pc, #148]	@ (800ab98 <MIC_Print+0x288>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4931      	ldr	r1, [pc, #196]	@ (800abcc <MIC_Print+0x2bc>)
 800ab08:	1c18      	adds	r0, r3, #0
 800ab0a:	f7f5 fd11 	bl	8000530 <__aeabi_fcmplt>
 800ab0e:	1e03      	subs	r3, r0, #0
 800ab10:	d004      	beq.n	800ab1c <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800ab12:	2201      	movs	r2, #1
 800ab14:	2101      	movs	r1, #1
 800ab16:	2000      	movs	r0, #0
 800ab18:	f004 fadc 	bl	800f0d4 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800ab1c:	4b1e      	ldr	r3, [pc, #120]	@ (800ab98 <MIC_Print+0x288>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	492c      	ldr	r1, [pc, #176]	@ (800abd4 <MIC_Print+0x2c4>)
 800ab22:	1c18      	adds	r0, r3, #0
 800ab24:	f7f5 fd22 	bl	800056c <__aeabi_fcmpge>
 800ab28:	1e03      	subs	r3, r0, #0
 800ab2a:	d00c      	beq.n	800ab46 <MIC_Print+0x236>
 800ab2c:	4b1a      	ldr	r3, [pc, #104]	@ (800ab98 <MIC_Print+0x288>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4927      	ldr	r1, [pc, #156]	@ (800abd0 <MIC_Print+0x2c0>)
 800ab32:	1c18      	adds	r0, r3, #0
 800ab34:	f7f5 fcfc 	bl	8000530 <__aeabi_fcmplt>
 800ab38:	1e03      	subs	r3, r0, #0
 800ab3a:	d004      	beq.n	800ab46 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	2100      	movs	r1, #0
 800ab40:	2000      	movs	r0, #0
 800ab42:	f004 fac7 	bl	800f0d4 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800ab46:	4b14      	ldr	r3, [pc, #80]	@ (800ab98 <MIC_Print+0x288>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4923      	ldr	r1, [pc, #140]	@ (800abd8 <MIC_Print+0x2c8>)
 800ab4c:	1c18      	adds	r0, r3, #0
 800ab4e:	f7f5 fd0d 	bl	800056c <__aeabi_fcmpge>
 800ab52:	1e03      	subs	r3, r0, #0
 800ab54:	d00c      	beq.n	800ab70 <MIC_Print+0x260>
 800ab56:	4b10      	ldr	r3, [pc, #64]	@ (800ab98 <MIC_Print+0x288>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	491e      	ldr	r1, [pc, #120]	@ (800abd4 <MIC_Print+0x2c4>)
 800ab5c:	1c18      	adds	r0, r3, #0
 800ab5e:	f7f5 fce7 	bl	8000530 <__aeabi_fcmplt>
 800ab62:	1e03      	subs	r3, r0, #0
 800ab64:	d004      	beq.n	800ab70 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800ab66:	2201      	movs	r2, #1
 800ab68:	2100      	movs	r1, #0
 800ab6a:	2001      	movs	r0, #1
 800ab6c:	f004 fab2 	bl	800f0d4 <SetDBLED>
  }
  if(dBA < 35){//off
 800ab70:	4b09      	ldr	r3, [pc, #36]	@ (800ab98 <MIC_Print+0x288>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4918      	ldr	r1, [pc, #96]	@ (800abd8 <MIC_Print+0x2c8>)
 800ab76:	1c18      	adds	r0, r3, #0
 800ab78:	f7f5 fcda 	bl	8000530 <__aeabi_fcmplt>
 800ab7c:	1e03      	subs	r3, r0, #0
 800ab7e:	d100      	bne.n	800ab82 <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800ab80:	e004      	b.n	800ab8c <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800ab82:	2200      	movs	r2, #0
 800ab84:	2100      	movs	r1, #0
 800ab86:	2000      	movs	r0, #0
 800ab88:	f004 faa4 	bl	800f0d4 <SetDBLED>
}
 800ab8c:	46c0      	nop			@ (mov r8, r8)
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	b004      	add	sp, #16
 800ab92:	bdb0      	pop	{r4, r5, r7, pc}
 800ab94:	20000de4 	.word	0x20000de4
 800ab98:	20000db0 	.word	0x20000db0
 800ab9c:	20000dec 	.word	0x20000dec
 800aba0:	20000db4 	.word	0x20000db4
 800aba4:	20000ded 	.word	0x20000ded
 800aba8:	20000098 	.word	0x20000098
 800abac:	20000de0 	.word	0x20000de0
 800abb0:	20000de8 	.word	0x20000de8
 800abb4:	20000ddc 	.word	0x20000ddc
 800abb8:	080277fc 	.word	0x080277fc
 800abbc:	20000da4 	.word	0x20000da4
 800abc0:	42b40000 	.word	0x42b40000
 800abc4:	42a00000 	.word	0x42a00000
 800abc8:	428c0000 	.word	0x428c0000
 800abcc:	42700000 	.word	0x42700000
 800abd0:	42480000 	.word	0x42480000
 800abd4:	42200000 	.word	0x42200000
 800abd8:	420c0000 	.word	0x420c0000

0800abdc <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800abe2:	4b11      	ldr	r3, [pc, #68]	@ (800ac28 <MIC_TestMeasurementDone+0x4c>)
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	4a10      	ldr	r2, [pc, #64]	@ (800ac2c <MIC_TestMeasurementDone+0x50>)
 800abea:	4911      	ldr	r1, [pc, #68]	@ (800ac30 <MIC_TestMeasurementDone+0x54>)
 800abec:	2002      	movs	r0, #2
 800abee:	f005 fca5 	bl	801053c <CreateLine>
  if(DataReady) {
 800abf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ac28 <MIC_TestMeasurementDone+0x4c>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d010      	beq.n	800ac1e <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800abfc:	1dfb      	adds	r3, r7, #7
 800abfe:	4a0d      	ldr	r2, [pc, #52]	@ (800ac34 <MIC_TestMeasurementDone+0x58>)
 800ac00:	7812      	ldrb	r2, [r2, #0]
 800ac02:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800ac04:	4b0b      	ldr	r3, [pc, #44]	@ (800ac34 <MIC_TestMeasurementDone+0x58>)
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	4a0b      	ldr	r2, [pc, #44]	@ (800ac38 <MIC_TestMeasurementDone+0x5c>)
 800ac0c:	4908      	ldr	r1, [pc, #32]	@ (800ac30 <MIC_TestMeasurementDone+0x54>)
 800ac0e:	2002      	movs	r0, #2
 800ac10:	f005 fc94 	bl	801053c <CreateLine>
    ResetMICIndicator();
 800ac14:	f004 fb4c 	bl	800f2b0 <ResetMICIndicator>
    return Check;
 800ac18:	1dfb      	adds	r3, r7, #7
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	e000      	b.n	800ac20 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	0018      	movs	r0, r3
 800ac22:	46bd      	mov	sp, r7
 800ac24:	b002      	add	sp, #8
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	20000f21 	.word	0x20000f21
 800ac2c:	08027844 	.word	0x08027844
 800ac30:	08027870 	.word	0x08027870
 800ac34:	20000f22 	.word	0x20000f22
 800ac38:	08027874 	.word	0x08027874

0800ac3c <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800ac42:	4b78      	ldr	r3, [pc, #480]	@ (800ae24 <Mic_Upkeep+0x1e8>)
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d100      	bne.n	800ac4c <Mic_Upkeep+0x10>
 800ac4a:	e0b8      	b.n	800adbe <Mic_Upkeep+0x182>
 800ac4c:	dd00      	ble.n	800ac50 <Mic_Upkeep+0x14>
 800ac4e:	e0d3      	b.n	800adf8 <Mic_Upkeep+0x1bc>
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d037      	beq.n	800acc4 <Mic_Upkeep+0x88>
 800ac54:	dd00      	ble.n	800ac58 <Mic_Upkeep+0x1c>
 800ac56:	e0cf      	b.n	800adf8 <Mic_Upkeep+0x1bc>
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <Mic_Upkeep+0x26>
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d014      	beq.n	800ac8a <Mic_Upkeep+0x4e>
 800ac60:	e0ca      	b.n	800adf8 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800ac62:	2001      	movs	r0, #1
 800ac64:	f003 fb34 	bl	800e2d0 <enableMicrophone>
 800ac68:	0003      	movs	r3, r0
 800ac6a:	001a      	movs	r2, r3
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	4053      	eors	r3, r2
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d005      	beq.n	800ac82 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800ac76:	4a6c      	ldr	r2, [pc, #432]	@ (800ae28 <Mic_Upkeep+0x1ec>)
 800ac78:	4b6c      	ldr	r3, [pc, #432]	@ (800ae2c <Mic_Upkeep+0x1f0>)
 800ac7a:	217f      	movs	r1, #127	@ 0x7f
 800ac7c:	0018      	movs	r0, r3
 800ac7e:	f005 fd15 	bl	80106ac <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800ac82:	4b68      	ldr	r3, [pc, #416]	@ (800ae24 <Mic_Upkeep+0x1e8>)
 800ac84:	2201      	movs	r2, #1
 800ac86:	701a      	strb	r2, [r3, #0]
    break;
 800ac88:	e0c5      	b.n	800ae16 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800ac8a:	f003 fafd 	bl	800e288 <micSettlingComplete>
 800ac8e:	1e03      	subs	r3, r0, #0
 800ac90:	d105      	bne.n	800ac9e <Mic_Upkeep+0x62>
 800ac92:	4b67      	ldr	r3, [pc, #412]	@ (800ae30 <Mic_Upkeep+0x1f4>)
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d100      	bne.n	800ac9e <Mic_Upkeep+0x62>
 800ac9c:	e0b6      	b.n	800ae0c <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800ac9e:	f003 fb81 	bl	800e3a4 <startSPLcalculation>
 800aca2:	0003      	movs	r3, r0
 800aca4:	001a      	movs	r2, r3
 800aca6:	2301      	movs	r3, #1
 800aca8:	4053      	eors	r3, r2
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	2b00      	cmp	r3, #0
 800acae:	d005      	beq.n	800acbc <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800acb0:	4a5d      	ldr	r2, [pc, #372]	@ (800ae28 <Mic_Upkeep+0x1ec>)
 800acb2:	4b5e      	ldr	r3, [pc, #376]	@ (800ae2c <Mic_Upkeep+0x1f0>)
 800acb4:	2188      	movs	r1, #136	@ 0x88
 800acb6:	0018      	movs	r0, r3
 800acb8:	f005 fcf8 	bl	80106ac <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800acbc:	4b59      	ldr	r3, [pc, #356]	@ (800ae24 <Mic_Upkeep+0x1e8>)
 800acbe:	2202      	movs	r2, #2
 800acc0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800acc2:	e0a3      	b.n	800ae0c <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800acc4:	4b5b      	ldr	r3, [pc, #364]	@ (800ae34 <Mic_Upkeep+0x1f8>)
 800acc6:	2201      	movs	r2, #1
 800acc8:	2101      	movs	r1, #1
 800acca:	0018      	movs	r0, r3
 800accc:	f003 f9be 	bl	800e04c <getSoundData>
 800acd0:	1e03      	subs	r3, r0, #0
 800acd2:	d100      	bne.n	800acd6 <Mic_Upkeep+0x9a>
 800acd4:	e09c      	b.n	800ae10 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800acd6:	f003 fab7 	bl	800e248 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800acda:	4b56      	ldr	r3, [pc, #344]	@ (800ae34 <Mic_Upkeep+0x1f8>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	001a      	movs	r2, r3
 800ace0:	4b54      	ldr	r3, [pc, #336]	@ (800ae34 <Mic_Upkeep+0x1f8>)
 800ace2:	785b      	ldrb	r3, [r3, #1]
 800ace4:	4954      	ldr	r1, [pc, #336]	@ (800ae38 <Mic_Upkeep+0x1fc>)
 800ace6:	0038      	movs	r0, r7
 800ace8:	f017 fc20 	bl	802252c <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800acec:	4b51      	ldr	r3, [pc, #324]	@ (800ae34 <Mic_Upkeep+0x1f8>)
 800acee:	89db      	ldrh	r3, [r3, #14]
 800acf0:	001a      	movs	r2, r3
 800acf2:	4b50      	ldr	r3, [pc, #320]	@ (800ae34 <Mic_Upkeep+0x1f8>)
 800acf4:	7c1b      	ldrb	r3, [r3, #16]
 800acf6:	4951      	ldr	r1, [pc, #324]	@ (800ae3c <Mic_Upkeep+0x200>)
 800acf8:	4851      	ldr	r0, [pc, #324]	@ (800ae40 <Mic_Upkeep+0x204>)
 800acfa:	f017 fc17 	bl	802252c <siprintf>
      dBValue = atof(dBbuffer);
 800acfe:	003b      	movs	r3, r7
 800ad00:	0018      	movs	r0, r3
 800ad02:	f015 ffc3 	bl	8020c8c <atof>
 800ad06:	0002      	movs	r2, r0
 800ad08:	000b      	movs	r3, r1
 800ad0a:	0010      	movs	r0, r2
 800ad0c:	0019      	movs	r1, r3
 800ad0e:	f7f8 fbf1 	bl	80034f4 <__aeabi_d2f>
 800ad12:	1c02      	adds	r2, r0, #0
 800ad14:	4b4b      	ldr	r3, [pc, #300]	@ (800ae44 <Mic_Upkeep+0x208>)
 800ad16:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800ad18:	4b4a      	ldr	r3, [pc, #296]	@ (800ae44 <Mic_Upkeep+0x208>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	494a      	ldr	r1, [pc, #296]	@ (800ae48 <Mic_Upkeep+0x20c>)
 800ad1e:	1c18      	adds	r0, r3, #0
 800ad20:	f7f6 f93e 	bl	8000fa0 <__aeabi_fmul>
 800ad24:	1c03      	adds	r3, r0, #0
 800ad26:	1c18      	adds	r0, r3, #0
 800ad28:	f7f8 fb9c 	bl	8003464 <__aeabi_f2d>
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	4b47      	ldr	r3, [pc, #284]	@ (800ae4c <Mic_Upkeep+0x210>)
 800ad30:	f7f6 fcdc 	bl	80016ec <__aeabi_dadd>
 800ad34:	0002      	movs	r2, r0
 800ad36:	000b      	movs	r3, r1
 800ad38:	0010      	movs	r0, r2
 800ad3a:	0019      	movs	r1, r3
 800ad3c:	f7f8 fb04 	bl	8003348 <__aeabi_d2iz>
 800ad40:	0003      	movs	r3, r0
 800ad42:	0018      	movs	r0, r3
 800ad44:	f7f8 fb3c 	bl	80033c0 <__aeabi_i2d>
 800ad48:	2200      	movs	r2, #0
 800ad4a:	4b41      	ldr	r3, [pc, #260]	@ (800ae50 <Mic_Upkeep+0x214>)
 800ad4c:	f7f7 f832 	bl	8001db4 <__aeabi_ddiv>
 800ad50:	0002      	movs	r2, r0
 800ad52:	000b      	movs	r3, r1
 800ad54:	0010      	movs	r0, r2
 800ad56:	0019      	movs	r1, r3
 800ad58:	f7f8 fbcc 	bl	80034f4 <__aeabi_d2f>
 800ad5c:	1c02      	adds	r2, r0, #0
 800ad5e:	4b39      	ldr	r3, [pc, #228]	@ (800ae44 <Mic_Upkeep+0x208>)
 800ad60:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800ad62:	f7ff fdd5 	bl	800a910 <MIC_Print>
      if (!startSPLcalculation()) {
 800ad66:	f003 fb1d 	bl	800e3a4 <startSPLcalculation>
 800ad6a:	0003      	movs	r3, r0
 800ad6c:	001a      	movs	r2, r3
 800ad6e:	2301      	movs	r3, #1
 800ad70:	4053      	eors	r3, r2
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d005      	beq.n	800ad84 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800ad78:	4a2b      	ldr	r2, [pc, #172]	@ (800ae28 <Mic_Upkeep+0x1ec>)
 800ad7a:	4b2c      	ldr	r3, [pc, #176]	@ (800ae2c <Mic_Upkeep+0x1f0>)
 800ad7c:	2198      	movs	r1, #152	@ 0x98
 800ad7e:	0018      	movs	r0, r3
 800ad80:	f005 fc94 	bl	80106ac <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800ad84:	2000      	movs	r0, #0
 800ad86:	f003 faa3 	bl	800e2d0 <enableMicrophone>
 800ad8a:	0003      	movs	r3, r0
 800ad8c:	001a      	movs	r2, r3
 800ad8e:	2301      	movs	r3, #1
 800ad90:	4053      	eors	r3, r2
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d005      	beq.n	800ada4 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800ad98:	4a23      	ldr	r2, [pc, #140]	@ (800ae28 <Mic_Upkeep+0x1ec>)
 800ad9a:	4b24      	ldr	r3, [pc, #144]	@ (800ae2c <Mic_Upkeep+0x1f0>)
 800ad9c:	219b      	movs	r1, #155	@ 0x9b
 800ad9e:	0018      	movs	r0, r3
 800ada0:	f005 fc84 	bl	80106ac <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800ada4:	f006 f816 	bl	8010dd4 <HAL_GetTick>
 800ada8:	0003      	movs	r3, r0
 800adaa:	4a2a      	ldr	r2, [pc, #168]	@ (800ae54 <Mic_Upkeep+0x218>)
 800adac:	189a      	adds	r2, r3, r2
 800adae:	4b2a      	ldr	r3, [pc, #168]	@ (800ae58 <Mic_Upkeep+0x21c>)
 800adb0:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800adb2:	4b1c      	ldr	r3, [pc, #112]	@ (800ae24 <Mic_Upkeep+0x1e8>)
 800adb4:	2203      	movs	r2, #3
 800adb6:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800adb8:	f004 fa7a 	bl	800f2b0 <ResetMICIndicator>
    }
    break;
 800adbc:	e028      	b.n	800ae10 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800adbe:	4b26      	ldr	r3, [pc, #152]	@ (800ae58 <Mic_Upkeep+0x21c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	0018      	movs	r0, r3
 800adc4:	f005 fb64 	bl	8010490 <TimestampIsReached>
 800adc8:	1e03      	subs	r3, r0, #0
 800adca:	d023      	beq.n	800ae14 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800adcc:	2001      	movs	r0, #1
 800adce:	f003 fa7f 	bl	800e2d0 <enableMicrophone>
 800add2:	0003      	movs	r3, r0
 800add4:	001a      	movs	r2, r3
 800add6:	2301      	movs	r3, #1
 800add8:	4053      	eors	r3, r2
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b00      	cmp	r3, #0
 800adde:	d005      	beq.n	800adec <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800ade0:	4a11      	ldr	r2, [pc, #68]	@ (800ae28 <Mic_Upkeep+0x1ec>)
 800ade2:	4b12      	ldr	r3, [pc, #72]	@ (800ae2c <Mic_Upkeep+0x1f0>)
 800ade4:	21a6      	movs	r1, #166	@ 0xa6
 800ade6:	0018      	movs	r0, r3
 800ade8:	f005 fc60 	bl	80106ac <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800adec:	4b0d      	ldr	r3, [pc, #52]	@ (800ae24 <Mic_Upkeep+0x1e8>)
 800adee:	2201      	movs	r2, #1
 800adf0:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800adf2:	f004 fa1b 	bl	800f22c <SetMICIndicator>
    }
    break;
 800adf6:	e00d      	b.n	800ae14 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800adf8:	4a18      	ldr	r2, [pc, #96]	@ (800ae5c <Mic_Upkeep+0x220>)
 800adfa:	4b19      	ldr	r3, [pc, #100]	@ (800ae60 <Mic_Upkeep+0x224>)
 800adfc:	0019      	movs	r1, r3
 800adfe:	2003      	movs	r0, #3
 800ae00:	f005 fb9c 	bl	801053c <CreateLine>
    MicState = MIC_STATE_INIT;
 800ae04:	4b07      	ldr	r3, [pc, #28]	@ (800ae24 <Mic_Upkeep+0x1e8>)
 800ae06:	2200      	movs	r2, #0
 800ae08:	701a      	strb	r2, [r3, #0]
    break;
 800ae0a:	e004      	b.n	800ae16 <Mic_Upkeep+0x1da>
    break;
 800ae0c:	46c0      	nop			@ (mov r8, r8)
 800ae0e:	e002      	b.n	800ae16 <Mic_Upkeep+0x1da>
    break;
 800ae10:	46c0      	nop			@ (mov r8, r8)
 800ae12:	e000      	b.n	800ae16 <Mic_Upkeep+0x1da>
    break;
 800ae14:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800ae16:	4b03      	ldr	r3, [pc, #12]	@ (800ae24 <Mic_Upkeep+0x1e8>)
 800ae18:	781b      	ldrb	r3, [r3, #0]
}
 800ae1a:	0018      	movs	r0, r3
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	b002      	add	sp, #8
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	46c0      	nop			@ (mov r8, r8)
 800ae24:	20000e06 	.word	0x20000e06
 800ae28:	0802788c 	.word	0x0802788c
 800ae2c:	08028980 	.word	0x08028980
 800ae30:	20000f21 	.word	0x20000f21
 800ae34:	20000df4 	.word	0x20000df4
 800ae38:	080278a8 	.word	0x080278a8
 800ae3c:	080278b0 	.word	0x080278b0
 800ae40:	20000da4 	.word	0x20000da4
 800ae44:	20000de4 	.word	0x20000de4
 800ae48:	42c80000 	.word	0x42c80000
 800ae4c:	3fe00000 	.word	0x3fe00000
 800ae50:	40590000 	.word	0x40590000
 800ae54:	000002f3 	.word	0x000002f3
 800ae58:	20000df0 	.word	0x20000df0
 800ae5c:	080278b8 	.word	0x080278b8
 800ae60:	080278d8 	.word	0x080278d8

0800ae64 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800ae6a:	1d3b      	adds	r3, r7, #4
 800ae6c:	0018      	movs	r0, r3
 800ae6e:	2314      	movs	r3, #20
 800ae70:	001a      	movs	r2, r3
 800ae72:	2100      	movs	r1, #0
 800ae74:	f017 fcc0 	bl	80227f8 <memset>
  RTC_DateTypeDef sDate = {0};
 800ae78:	003b      	movs	r3, r7
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800ae7e:	4b2e      	ldr	r3, [pc, #184]	@ (800af38 <MX_RTC_Init+0xd4>)
 800ae80:	4a2e      	ldr	r2, [pc, #184]	@ (800af3c <MX_RTC_Init+0xd8>)
 800ae82:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800ae84:	4b2c      	ldr	r3, [pc, #176]	@ (800af38 <MX_RTC_Init+0xd4>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800ae8a:	4b2b      	ldr	r3, [pc, #172]	@ (800af38 <MX_RTC_Init+0xd4>)
 800ae8c:	227f      	movs	r2, #127	@ 0x7f
 800ae8e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800ae90:	4b29      	ldr	r3, [pc, #164]	@ (800af38 <MX_RTC_Init+0xd4>)
 800ae92:	22ff      	movs	r2, #255	@ 0xff
 800ae94:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800ae96:	4b28      	ldr	r3, [pc, #160]	@ (800af38 <MX_RTC_Init+0xd4>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800ae9c:	4b26      	ldr	r3, [pc, #152]	@ (800af38 <MX_RTC_Init+0xd4>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800aea2:	4b25      	ldr	r3, [pc, #148]	@ (800af38 <MX_RTC_Init+0xd4>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800aea8:	4b23      	ldr	r3, [pc, #140]	@ (800af38 <MX_RTC_Init+0xd4>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800aeae:	4b22      	ldr	r3, [pc, #136]	@ (800af38 <MX_RTC_Init+0xd4>)
 800aeb0:	0018      	movs	r0, r3
 800aeb2:	f00d faab 	bl	801840c <HAL_RTC_Init>
 800aeb6:	1e03      	subs	r3, r0, #0
 800aeb8:	d001      	beq.n	800aebe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800aeba:	f7ff f8e3 	bl	800a084 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800aebe:	1d3b      	adds	r3, r7, #4
 800aec0:	220d      	movs	r2, #13
 800aec2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800aec4:	1d3b      	adds	r3, r7, #4
 800aec6:	2200      	movs	r2, #0
 800aec8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800aeca:	1d3b      	adds	r3, r7, #4
 800aecc:	2200      	movs	r2, #0
 800aece:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800aed0:	1d3b      	adds	r3, r7, #4
 800aed2:	2200      	movs	r2, #0
 800aed4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800aed6:	1d3b      	adds	r3, r7, #4
 800aed8:	2200      	movs	r2, #0
 800aeda:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800aedc:	1d39      	adds	r1, r7, #4
 800aede:	4b16      	ldr	r3, [pc, #88]	@ (800af38 <MX_RTC_Init+0xd4>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	0018      	movs	r0, r3
 800aee4:	f00d fb2e 	bl	8018544 <HAL_RTC_SetTime>
 800aee8:	1e03      	subs	r3, r0, #0
 800aeea:	d001      	beq.n	800aef0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800aeec:	f7ff f8ca 	bl	800a084 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800aef0:	003b      	movs	r3, r7
 800aef2:	2206      	movs	r2, #6
 800aef4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800aef6:	003b      	movs	r3, r7
 800aef8:	2211      	movs	r2, #17
 800aefa:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800aefc:	003b      	movs	r3, r7
 800aefe:	2217      	movs	r2, #23
 800af00:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800af02:	003b      	movs	r3, r7
 800af04:	2218      	movs	r2, #24
 800af06:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800af08:	0039      	movs	r1, r7
 800af0a:	4b0b      	ldr	r3, [pc, #44]	@ (800af38 <MX_RTC_Init+0xd4>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	0018      	movs	r0, r3
 800af10:	f00d fc20 	bl	8018754 <HAL_RTC_SetDate>
 800af14:	1e03      	subs	r3, r0, #0
 800af16:	d001      	beq.n	800af1c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800af18:	f7ff f8b4 	bl	800a084 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800af1c:	4b06      	ldr	r3, [pc, #24]	@ (800af38 <MX_RTC_Init+0xd4>)
 800af1e:	2200      	movs	r2, #0
 800af20:	2100      	movs	r1, #0
 800af22:	0018      	movs	r0, r3
 800af24:	f00d fdd0 	bl	8018ac8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800af28:	1e03      	subs	r3, r0, #0
 800af2a:	d001      	beq.n	800af30 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800af2c:	f7ff f8aa 	bl	800a084 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800af30:	46c0      	nop			@ (mov r8, r8)
 800af32:	46bd      	mov	sp, r7
 800af34:	b006      	add	sp, #24
 800af36:	bd80      	pop	{r7, pc}
 800af38:	20000e08 	.word	0x20000e08
 800af3c:	40002800 	.word	0x40002800

0800af40 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a0a      	ldr	r2, [pc, #40]	@ (800af78 <HAL_RTC_MspInit+0x38>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d10e      	bne.n	800af70 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800af52:	4b0a      	ldr	r3, [pc, #40]	@ (800af7c <HAL_RTC_MspInit+0x3c>)
 800af54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800af56:	4b09      	ldr	r3, [pc, #36]	@ (800af7c <HAL_RTC_MspInit+0x3c>)
 800af58:	2180      	movs	r1, #128	@ 0x80
 800af5a:	02c9      	lsls	r1, r1, #11
 800af5c:	430a      	orrs	r2, r1
 800af5e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800af60:	2200      	movs	r2, #0
 800af62:	2100      	movs	r1, #0
 800af64:	2002      	movs	r0, #2
 800af66:	f006 fbd9 	bl	801171c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800af6a:	2002      	movs	r0, #2
 800af6c:	f006 fbeb 	bl	8011746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800af70:	46c0      	nop			@ (mov r8, r8)
 800af72:	46bd      	mov	sp, r7
 800af74:	b002      	add	sp, #8
 800af76:	bd80      	pop	{r7, pc}
 800af78:	40002800 	.word	0x40002800
 800af7c:	40021000 	.word	0x40021000

0800af80 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800af80:	b580      	push	{r7, lr}
 800af82:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800af84:	4b02      	ldr	r3, [pc, #8]	@ (800af90 <sen5x_Get_sen5x_enable_state+0x10>)
 800af86:	781b      	ldrb	r3, [r3, #0]
}
 800af88:	0018      	movs	r0, r3
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	46c0      	nop			@ (mov r8, r8)
 800af90:	20000e2f 	.word	0x20000e2f

0800af94 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	0002      	movs	r2, r0
 800af9c:	1dfb      	adds	r3, r7, #7
 800af9e:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800afa0:	4b03      	ldr	r3, [pc, #12]	@ (800afb0 <sen5x_Set_sen5x_state+0x1c>)
 800afa2:	1dfa      	adds	r2, r7, #7
 800afa4:	7812      	ldrb	r2, [r2, #0]
 800afa6:	701a      	strb	r2, [r3, #0]
}
 800afa8:	46c0      	nop			@ (mov r8, r8)
 800afaa:	46bd      	mov	sp, r7
 800afac:	b002      	add	sp, #8
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	20000e2f 	.word	0x20000e2f

0800afb4 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800afbc:	f005 ff0a 	bl	8010dd4 <HAL_GetTick>
 800afc0:	0002      	movs	r2, r0
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	18d2      	adds	r2, r2, r3
 800afc6:	4b03      	ldr	r3, [pc, #12]	@ (800afd4 <setsen5xReadTimer+0x20>)
 800afc8:	601a      	str	r2, [r3, #0]
}
 800afca:	46c0      	nop			@ (mov r8, r8)
 800afcc:	46bd      	mov	sp, r7
 800afce:	b002      	add	sp, #8
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	46c0      	nop			@ (mov r8, r8)
 800afd4:	20000e3c 	.word	0x20000e3c

0800afd8 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	0002      	movs	r2, r0
 800afe0:	1dfb      	adds	r3, r7, #7
 800afe2:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800afe4:	4b03      	ldr	r3, [pc, #12]	@ (800aff4 <setsen5xSamplecounter+0x1c>)
 800afe6:	2200      	movs	r2, #0
 800afe8:	701a      	strb	r2, [r3, #0]
}
 800afea:	46c0      	nop			@ (mov r8, r8)
 800afec:	46bd      	mov	sp, r7
 800afee:	b002      	add	sp, #8
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	46c0      	nop			@ (mov r8, r8)
 800aff4:	20000e38 	.word	0x20000e38

0800aff8 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800b000:	f7ff f8ce 	bl	800a1a0 <IsPMSensorEnabled>
 800b004:	1e03      	subs	r3, r0, #0
 800b006:	d035      	beq.n	800b074 <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800b008:	f003 ff8e 	bl	800ef28 <batteryChargeCheck>
 800b00c:	0003      	movs	r3, r0
 800b00e:	2b03      	cmp	r3, #3
 800b010:	d103      	bne.n	800b01a <sen5x_enable+0x22>
      sen5x_Enable = true;
 800b012:	4b20      	ldr	r3, [pc, #128]	@ (800b094 <sen5x_enable+0x9c>)
 800b014:	2201      	movs	r2, #1
 800b016:	701a      	strb	r2, [r3, #0]
 800b018:	e00d      	b.n	800b036 <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800b01a:	4b1e      	ldr	r3, [pc, #120]	@ (800b094 <sen5x_enable+0x9c>)
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	1e5a      	subs	r2, r3, #1
 800b020:	4193      	sbcs	r3, r2
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2201      	movs	r2, #1
 800b026:	4053      	eors	r3, r2
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	1c1a      	adds	r2, r3, #0
 800b02c:	2301      	movs	r3, #1
 800b02e:	4013      	ands	r3, r2
 800b030:	b2da      	uxtb	r2, r3
 800b032:	4b18      	ldr	r3, [pc, #96]	@ (800b094 <sen5x_enable+0x9c>)
 800b034:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800b036:	4b17      	ldr	r3, [pc, #92]	@ (800b094 <sen5x_enable+0x9c>)
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d003      	beq.n	800b046 <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800b03e:	2000      	movs	r0, #0
 800b040:	f7ff ffb8 	bl	800afb4 <setsen5xReadTimer>
 800b044:	e009      	b.n	800b05a <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800b046:	f005 fec5 	bl	8010dd4 <HAL_GetTick>
 800b04a:	0002      	movs	r2, r0
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2164      	movs	r1, #100	@ 0x64
 800b050:	434b      	muls	r3, r1
 800b052:	18d3      	adds	r3, r2, r3
 800b054:	0018      	movs	r0, r3
 800b056:	f7ff ffad 	bl	800afb4 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800b05a:	4b0e      	ldr	r3, [pc, #56]	@ (800b094 <sen5x_enable+0x9c>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <sen5x_enable+0x6e>
 800b062:	4b0d      	ldr	r3, [pc, #52]	@ (800b098 <sen5x_enable+0xa0>)
 800b064:	e000      	b.n	800b068 <sen5x_enable+0x70>
 800b066:	4b0d      	ldr	r3, [pc, #52]	@ (800b09c <sen5x_enable+0xa4>)
 800b068:	4a0d      	ldr	r2, [pc, #52]	@ (800b0a0 <sen5x_enable+0xa8>)
 800b06a:	490e      	ldr	r1, [pc, #56]	@ (800b0a4 <sen5x_enable+0xac>)
 800b06c:	2002      	movs	r0, #2
 800b06e:	f005 fa65 	bl	801053c <CreateLine>
 800b072:	e005      	b.n	800b080 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800b074:	4a0c      	ldr	r2, [pc, #48]	@ (800b0a8 <sen5x_enable+0xb0>)
 800b076:	4b0b      	ldr	r3, [pc, #44]	@ (800b0a4 <sen5x_enable+0xac>)
 800b078:	0019      	movs	r1, r3
 800b07a:	2002      	movs	r0, #2
 800b07c:	f005 fa5e 	bl	801053c <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800b080:	4b0a      	ldr	r3, [pc, #40]	@ (800b0ac <sen5x_enable+0xb4>)
 800b082:	2201      	movs	r2, #1
 800b084:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800b086:	4b03      	ldr	r3, [pc, #12]	@ (800b094 <sen5x_enable+0x9c>)
 800b088:	781b      	ldrb	r3, [r3, #0]
}
 800b08a:	0018      	movs	r0, r3
 800b08c:	46bd      	mov	sp, r7
 800b08e:	b002      	add	sp, #8
 800b090:	bd80      	pop	{r7, pc}
 800b092:	46c0      	nop			@ (mov r8, r8)
 800b094:	20000e2f 	.word	0x20000e2f
 800b098:	080278dc 	.word	0x080278dc
 800b09c:	080278e4 	.word	0x080278e4
 800b0a0:	080278f0 	.word	0x080278f0
 800b0a4:	0802790c 	.word	0x0802790c
 800b0a8:	08027910 	.word	0x08027910
 800b0ac:	20000099 	.word	0x20000099

0800b0b0 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800b0b4:	2380      	movs	r3, #128	@ 0x80
 800b0b6:	015b      	lsls	r3, r3, #5
 800b0b8:	480f      	ldr	r0, [pc, #60]	@ (800b0f8 <sen5x_Power_On+0x48>)
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	0019      	movs	r1, r3
 800b0be:	f007 f91a 	bl	80122f6 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800b0c2:	4a0e      	ldr	r2, [pc, #56]	@ (800b0fc <sen5x_Power_On+0x4c>)
 800b0c4:	4b0e      	ldr	r3, [pc, #56]	@ (800b100 <sen5x_Power_On+0x50>)
 800b0c6:	0019      	movs	r1, r3
 800b0c8:	2003      	movs	r0, #3
 800b0ca:	f005 fa37 	bl	801053c <CreateLine>
  HAL_Delay(150);
 800b0ce:	2096      	movs	r0, #150	@ 0x96
 800b0d0:	f005 fe8a 	bl	8010de8 <HAL_Delay>
  if (sen5x_device_reset()) {
 800b0d4:	f001 f98c 	bl	800c3f0 <sen5x_device_reset>
 800b0d8:	1e03      	subs	r3, r0, #0
 800b0da:	d006      	beq.n	800b0ea <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800b0dc:	4a09      	ldr	r2, [pc, #36]	@ (800b104 <sen5x_Power_On+0x54>)
 800b0de:	4b0a      	ldr	r3, [pc, #40]	@ (800b108 <sen5x_Power_On+0x58>)
 800b0e0:	0019      	movs	r1, r3
 800b0e2:	2001      	movs	r0, #1
 800b0e4:	f005 fa2a 	bl	801053c <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800b0e8:	e002      	b.n	800b0f0 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800b0ea:	4b08      	ldr	r3, [pc, #32]	@ (800b10c <sen5x_Power_On+0x5c>)
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	701a      	strb	r2, [r3, #0]
}
 800b0f0:	46c0      	nop			@ (mov r8, r8)
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	46c0      	nop			@ (mov r8, r8)
 800b0f8:	50000800 	.word	0x50000800
 800b0fc:	08027930 	.word	0x08027930
 800b100:	0802794c 	.word	0x0802794c
 800b104:	08027950 	.word	0x08027950
 800b108:	08027978 	.word	0x08027978
 800b10c:	20000e2d 	.word	0x20000e2d

0800b110 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800b110:	b580      	push	{r7, lr}
 800b112:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800b114:	4b0e      	ldr	r3, [pc, #56]	@ (800b150 <sen5x_Power_Off+0x40>)
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d006      	beq.n	800b12a <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800b11c:	4a0d      	ldr	r2, [pc, #52]	@ (800b154 <sen5x_Power_Off+0x44>)
 800b11e:	4b0e      	ldr	r3, [pc, #56]	@ (800b158 <sen5x_Power_Off+0x48>)
 800b120:	0019      	movs	r1, r3
 800b122:	2003      	movs	r0, #3
 800b124:	f005 fa0a 	bl	801053c <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800b128:	e00f      	b.n	800b14a <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800b12a:	4a0c      	ldr	r2, [pc, #48]	@ (800b15c <sen5x_Power_Off+0x4c>)
 800b12c:	4b0a      	ldr	r3, [pc, #40]	@ (800b158 <sen5x_Power_Off+0x48>)
 800b12e:	0019      	movs	r1, r3
 800b130:	2003      	movs	r0, #3
 800b132:	f005 fa03 	bl	801053c <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800b136:	2380      	movs	r3, #128	@ 0x80
 800b138:	015b      	lsls	r3, r3, #5
 800b13a:	4809      	ldr	r0, [pc, #36]	@ (800b160 <sen5x_Power_Off+0x50>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	0019      	movs	r1, r3
 800b140:	f007 f8d9 	bl	80122f6 <HAL_GPIO_WritePin>
      sen5x_On = false;
 800b144:	4b07      	ldr	r3, [pc, #28]	@ (800b164 <sen5x_Power_Off+0x54>)
 800b146:	2200      	movs	r2, #0
 800b148:	701a      	strb	r2, [r3, #0]
}
 800b14a:	46c0      	nop			@ (mov r8, r8)
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	20000e2e 	.word	0x20000e2e
 800b154:	0802797c 	.word	0x0802797c
 800b158:	0802794c 	.word	0x0802794c
 800b15c:	080279ac 	.word	0x080279ac
 800b160:	50000800 	.word	0x50000800
 800b164:	20000e2d 	.word	0x20000e2d

0800b168 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800b16c:	4b02      	ldr	r3, [pc, #8]	@ (800b178 <reset_fanCleaningDone+0x10>)
 800b16e:	2200      	movs	r2, #0
 800b170:	701a      	strb	r2, [r3, #0]
}
 800b172:	46c0      	nop			@ (mov r8, r8)
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	20000e2c 	.word	0x20000e2c

0800b17c <probe_sen5x>:

int16_t probe_sen5x(void) {
 800b17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b17e:	b093      	sub	sp, #76	@ 0x4c
 800b180:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800b182:	2436      	movs	r4, #54	@ 0x36
 800b184:	193b      	adds	r3, r7, r4
 800b186:	2200      	movs	r2, #0
 800b188:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800b18a:	2335      	movs	r3, #53	@ 0x35
 800b18c:	18fb      	adds	r3, r7, r3
 800b18e:	2220      	movs	r2, #32
 800b190:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800b192:	2334      	movs	r3, #52	@ 0x34
 800b194:	18fb      	adds	r3, r7, r3
 800b196:	2220      	movs	r2, #32
 800b198:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800b19a:	f7ff ff89 	bl	800b0b0 <sen5x_Power_On>
  error = sen5x_device_reset();
 800b19e:	0025      	movs	r5, r4
 800b1a0:	193c      	adds	r4, r7, r4
 800b1a2:	f001 f925 	bl	800c3f0 <sen5x_device_reset>
 800b1a6:	0003      	movs	r3, r0
 800b1a8:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b1aa:	002c      	movs	r4, r5
 800b1ac:	193b      	adds	r3, r7, r4
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	5e9b      	ldrsh	r3, [r3, r2]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00b      	beq.n	800b1ce <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800b1b6:	193b      	adds	r3, r7, r4
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	5e9b      	ldrsh	r3, [r3, r2]
 800b1bc:	4a75      	ldr	r2, [pc, #468]	@ (800b394 <probe_sen5x+0x218>)
 800b1be:	4976      	ldr	r1, [pc, #472]	@ (800b398 <probe_sen5x+0x21c>)
 800b1c0:	2001      	movs	r0, #1
 800b1c2:	f005 f9bb 	bl	801053c <CreateLine>
      return error;
 800b1c6:	193b      	adds	r3, r7, r4
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	5e9b      	ldrsh	r3, [r3, r2]
 800b1cc:	e0de      	b.n	800b38c <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800b1ce:	2536      	movs	r5, #54	@ 0x36
 800b1d0:	197c      	adds	r4, r7, r5
 800b1d2:	2335      	movs	r3, #53	@ 0x35
 800b1d4:	18fb      	adds	r3, r7, r3
 800b1d6:	781a      	ldrb	r2, [r3, #0]
 800b1d8:	230c      	movs	r3, #12
 800b1da:	18fb      	adds	r3, r7, r3
 800b1dc:	0011      	movs	r1, r2
 800b1de:	0018      	movs	r0, r3
 800b1e0:	f000 fff2 	bl	800c1c8 <sen5x_get_serial_number>
 800b1e4:	0003      	movs	r3, r0
 800b1e6:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b1e8:	197b      	adds	r3, r7, r5
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	5e9b      	ldrsh	r3, [r3, r2]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00b      	beq.n	800b20a <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800b1f2:	197b      	adds	r3, r7, r5
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	5e9a      	ldrsh	r2, [r3, r2]
 800b1f8:	4b68      	ldr	r3, [pc, #416]	@ (800b39c <probe_sen5x+0x220>)
 800b1fa:	0011      	movs	r1, r2
 800b1fc:	0018      	movs	r0, r3
 800b1fe:	f017 f925 	bl	802244c <iprintf>
      return error;
 800b202:	197b      	adds	r3, r7, r5
 800b204:	2200      	movs	r2, #0
 800b206:	5e9b      	ldrsh	r3, [r3, r2]
 800b208:	e0c0      	b.n	800b38c <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800b20a:	230c      	movs	r3, #12
 800b20c:	18fa      	adds	r2, r7, r3
 800b20e:	4b64      	ldr	r3, [pc, #400]	@ (800b3a0 <probe_sen5x+0x224>)
 800b210:	0011      	movs	r1, r2
 800b212:	0018      	movs	r0, r3
 800b214:	f017 f91a 	bl	802244c <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800b218:	2536      	movs	r5, #54	@ 0x36
 800b21a:	197c      	adds	r4, r7, r5
 800b21c:	2334      	movs	r3, #52	@ 0x34
 800b21e:	18fb      	adds	r3, r7, r3
 800b220:	781a      	ldrb	r2, [r3, #0]
 800b222:	4b60      	ldr	r3, [pc, #384]	@ (800b3a4 <probe_sen5x+0x228>)
 800b224:	0011      	movs	r1, r2
 800b226:	0018      	movs	r0, r3
 800b228:	f000 ff78 	bl	800c11c <sen5x_get_product_name>
 800b22c:	0003      	movs	r3, r0
 800b22e:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b230:	197b      	adds	r3, r7, r5
 800b232:	2200      	movs	r2, #0
 800b234:	5e9b      	ldrsh	r3, [r3, r2]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00b      	beq.n	800b252 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800b23a:	197b      	adds	r3, r7, r5
 800b23c:	2200      	movs	r2, #0
 800b23e:	5e9a      	ldrsh	r2, [r3, r2]
 800b240:	4b59      	ldr	r3, [pc, #356]	@ (800b3a8 <probe_sen5x+0x22c>)
 800b242:	0011      	movs	r1, r2
 800b244:	0018      	movs	r0, r3
 800b246:	f017 f901 	bl	802244c <iprintf>
      return error;
 800b24a:	197b      	adds	r3, r7, r5
 800b24c:	2200      	movs	r2, #0
 800b24e:	5e9b      	ldrsh	r3, [r3, r2]
 800b250:	e09c      	b.n	800b38c <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800b252:	4a54      	ldr	r2, [pc, #336]	@ (800b3a4 <probe_sen5x+0x228>)
 800b254:	4b55      	ldr	r3, [pc, #340]	@ (800b3ac <probe_sen5x+0x230>)
 800b256:	0011      	movs	r1, r2
 800b258:	0018      	movs	r0, r3
 800b25a:	f017 f8f7 	bl	802244c <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800b25e:	2636      	movs	r6, #54	@ 0x36
 800b260:	19bc      	adds	r4, r7, r6
 800b262:	2308      	movs	r3, #8
 800b264:	18fd      	adds	r5, r7, r3
 800b266:	2309      	movs	r3, #9
 800b268:	18fa      	adds	r2, r7, r3
 800b26a:	230a      	movs	r3, #10
 800b26c:	18f9      	adds	r1, r7, r3
 800b26e:	230b      	movs	r3, #11
 800b270:	18f8      	adds	r0, r7, r3
 800b272:	1d7b      	adds	r3, r7, #5
 800b274:	9302      	str	r3, [sp, #8]
 800b276:	1dbb      	adds	r3, r7, #6
 800b278:	9301      	str	r3, [sp, #4]
 800b27a:	1dfb      	adds	r3, r7, #7
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	002b      	movs	r3, r5
 800b280:	f000 fff8 	bl	800c274 <sen5x_get_version>
 800b284:	0003      	movs	r3, r0
 800b286:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800b288:	19bb      	adds	r3, r7, r6
 800b28a:	2200      	movs	r2, #0
 800b28c:	5e9b      	ldrsh	r3, [r3, r2]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00b      	beq.n	800b2aa <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800b292:	19bb      	adds	r3, r7, r6
 800b294:	2200      	movs	r2, #0
 800b296:	5e9a      	ldrsh	r2, [r3, r2]
 800b298:	4b45      	ldr	r3, [pc, #276]	@ (800b3b0 <probe_sen5x+0x234>)
 800b29a:	0011      	movs	r1, r2
 800b29c:	0018      	movs	r0, r3
 800b29e:	f017 f8d5 	bl	802244c <iprintf>
      return error;
 800b2a2:	19bb      	adds	r3, r7, r6
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	5e9b      	ldrsh	r3, [r3, r2]
 800b2a8:	e070      	b.n	800b38c <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800b2aa:	230b      	movs	r3, #11
 800b2ac:	18fb      	adds	r3, r7, r3
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	0019      	movs	r1, r3
 800b2b2:	230a      	movs	r3, #10
 800b2b4:	18fb      	adds	r3, r7, r3
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	001a      	movs	r2, r3
 800b2ba:	2308      	movs	r3, #8
 800b2bc:	18fb      	adds	r3, r7, r3
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	001c      	movs	r4, r3
 800b2c2:	1dfb      	adds	r3, r7, #7
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	483b      	ldr	r0, [pc, #236]	@ (800b3b4 <probe_sen5x+0x238>)
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	0023      	movs	r3, r4
 800b2cc:	f017 f8be 	bl	802244c <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800b2d4:	262e      	movs	r6, #46	@ 0x2e
 800b2d6:	19bb      	adds	r3, r7, r6
 800b2d8:	2200      	movs	r2, #0
 800b2da:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800b2dc:	232c      	movs	r3, #44	@ 0x2c
 800b2de:	18fb      	adds	r3, r7, r3
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800b2e4:	4934      	ldr	r1, [pc, #208]	@ (800b3b8 <probe_sen5x+0x23c>)
 800b2e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2e8:	f7f5 fe5a 	bl	8000fa0 <__aeabi_fmul>
 800b2ec:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800b2ee:	1c18      	adds	r0, r3, #0
 800b2f0:	f7f6 f94e 	bl	8001590 <__aeabi_f2iz>
 800b2f4:	0003      	movs	r3, r0
 800b2f6:	b218      	sxth	r0, r3
 800b2f8:	2536      	movs	r5, #54	@ 0x36
 800b2fa:	197c      	adds	r4, r7, r5
 800b2fc:	232c      	movs	r3, #44	@ 0x2c
 800b2fe:	18fb      	adds	r3, r7, r3
 800b300:	881a      	ldrh	r2, [r3, #0]
 800b302:	19bb      	adds	r3, r7, r6
 800b304:	2100      	movs	r1, #0
 800b306:	5e5b      	ldrsh	r3, [r3, r1]
 800b308:	0019      	movs	r1, r3
 800b30a:	f000 fea3 	bl	800c054 <sen5x_set_temperature_offset_parameters>
 800b30e:	0003      	movs	r3, r0
 800b310:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b312:	197b      	adds	r3, r7, r5
 800b314:	2200      	movs	r2, #0
 800b316:	5e9b      	ldrsh	r3, [r3, r2]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00b      	beq.n	800b334 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800b31c:	197b      	adds	r3, r7, r5
 800b31e:	2200      	movs	r2, #0
 800b320:	5e9b      	ldrsh	r3, [r3, r2]
 800b322:	4a26      	ldr	r2, [pc, #152]	@ (800b3bc <probe_sen5x+0x240>)
 800b324:	491c      	ldr	r1, [pc, #112]	@ (800b398 <probe_sen5x+0x21c>)
 800b326:	2001      	movs	r0, #1
 800b328:	f005 f908 	bl	801053c <CreateLine>
      return error;
 800b32c:	197b      	adds	r3, r7, r5
 800b32e:	2200      	movs	r2, #0
 800b330:	5e9b      	ldrsh	r3, [r3, r2]
 800b332:	e02b      	b.n	800b38c <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800b334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b336:	f7f8 f895 	bl	8003464 <__aeabi_f2d>
 800b33a:	0002      	movs	r2, r0
 800b33c:	000b      	movs	r3, r1
 800b33e:	4820      	ldr	r0, [pc, #128]	@ (800b3c0 <probe_sen5x+0x244>)
 800b340:	4920      	ldr	r1, [pc, #128]	@ (800b3c4 <probe_sen5x+0x248>)
 800b342:	9200      	str	r2, [sp, #0]
 800b344:	9301      	str	r3, [sp, #4]
 800b346:	0002      	movs	r2, r0
 800b348:	2002      	movs	r0, #2
 800b34a:	f005 f8f7 	bl	801053c <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800b34e:	f7fb fd69 	bl	8006e24 <Check_USB_PowerOn>
 800b352:	0003      	movs	r3, r0
 800b354:	001a      	movs	r2, r3
 800b356:	2301      	movs	r3, #1
 800b358:	4053      	eors	r3, r2
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00a      	beq.n	800b376 <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800b360:	f7ff fed6 	bl	800b110 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800b364:	f005 fd36 	bl	8010dd4 <HAL_GetTick>
 800b368:	0003      	movs	r3, r0
 800b36a:	22fa      	movs	r2, #250	@ 0xfa
 800b36c:	00d2      	lsls	r2, r2, #3
 800b36e:	189a      	adds	r2, r3, r2
 800b370:	4b15      	ldr	r3, [pc, #84]	@ (800b3c8 <probe_sen5x+0x24c>)
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	e006      	b.n	800b384 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800b376:	f005 fd2d 	bl	8010dd4 <HAL_GetTick>
 800b37a:	0003      	movs	r3, r0
 800b37c:	4a13      	ldr	r2, [pc, #76]	@ (800b3cc <probe_sen5x+0x250>)
 800b37e:	189a      	adds	r2, r3, r2
 800b380:	4b11      	ldr	r3, [pc, #68]	@ (800b3c8 <probe_sen5x+0x24c>)
 800b382:	601a      	str	r2, [r3, #0]
  }
  return error;
 800b384:	2336      	movs	r3, #54	@ 0x36
 800b386:	18fb      	adds	r3, r7, r3
 800b388:	2200      	movs	r2, #0
 800b38a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800b38c:	0018      	movs	r0, r3
 800b38e:	46bd      	mov	sp, r7
 800b390:	b00f      	add	sp, #60	@ 0x3c
 800b392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b394:	080279c8 	.word	0x080279c8
 800b398:	08027978 	.word	0x08027978
 800b39c:	080279f4 	.word	0x080279f4
 800b3a0:	08027a24 	.word	0x08027a24
 800b3a4:	20000e30 	.word	0x20000e30
 800b3a8:	08027a38 	.word	0x08027a38
 800b3ac:	08027a68 	.word	0x08027a68
 800b3b0:	08027a7c 	.word	0x08027a7c
 800b3b4:	08027aa8 	.word	0x08027aa8
 800b3b8:	43480000 	.word	0x43480000
 800b3bc:	08027acc 	.word	0x08027acc
 800b3c0:	08027b0c 	.word	0x08027b0c
 800b3c4:	0802790c 	.word	0x0802790c
 800b3c8:	20000e3c 	.word	0x20000e3c
 800b3cc:	00006d60 	.word	0x00006d60

0800b3d0 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800b3d0:	b590      	push	{r4, r7, lr}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800b3d6:	1dbb      	adds	r3, r7, #6
 800b3d8:	2200      	movs	r2, #0
 800b3da:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800b3dc:	4b1b      	ldr	r3, [pc, #108]	@ (800b44c <sen5x_lightup_measurement+0x7c>)
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00b      	beq.n	800b3fc <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800b3e4:	4a1a      	ldr	r2, [pc, #104]	@ (800b450 <sen5x_lightup_measurement+0x80>)
 800b3e6:	4b1b      	ldr	r3, [pc, #108]	@ (800b454 <sen5x_lightup_measurement+0x84>)
 800b3e8:	0019      	movs	r1, r3
 800b3ea:	2002      	movs	r0, #2
 800b3ec:	f005 f8a6 	bl	801053c <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800b3f0:	1dbc      	adds	r4, r7, #6
 800b3f2:	f000 fcbb 	bl	800bd6c <sen5x_start_measurement_without_pm>
 800b3f6:	0003      	movs	r3, r0
 800b3f8:	8023      	strh	r3, [r4, #0]
 800b3fa:	e00a      	b.n	800b412 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800b3fc:	4a16      	ldr	r2, [pc, #88]	@ (800b458 <sen5x_lightup_measurement+0x88>)
 800b3fe:	4b15      	ldr	r3, [pc, #84]	@ (800b454 <sen5x_lightup_measurement+0x84>)
 800b400:	0019      	movs	r1, r3
 800b402:	2002      	movs	r0, #2
 800b404:	f005 f89a 	bl	801053c <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800b408:	1dbc      	adds	r4, r7, #6
 800b40a:	f000 fc81 	bl	800bd10 <sen5x_start_measurement>
 800b40e:	0003      	movs	r3, r0
 800b410:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800b412:	1dbb      	adds	r3, r7, #6
 800b414:	2200      	movs	r2, #0
 800b416:	5e9b      	ldrsh	r3, [r3, r2]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d008      	beq.n	800b42e <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800b41c:	1dbb      	adds	r3, r7, #6
 800b41e:	2200      	movs	r2, #0
 800b420:	5e9b      	ldrsh	r3, [r3, r2]
 800b422:	4a0e      	ldr	r2, [pc, #56]	@ (800b45c <sen5x_lightup_measurement+0x8c>)
 800b424:	490e      	ldr	r1, [pc, #56]	@ (800b460 <sen5x_lightup_measurement+0x90>)
 800b426:	2001      	movs	r0, #1
 800b428:	f005 f888 	bl	801053c <CreateLine>
 800b42c:	e007      	b.n	800b43e <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800b42e:	f7fb fd29 	bl	8006e84 <showTime>
    Info("sen5x_start_measurement executed");
 800b432:	4a0c      	ldr	r2, [pc, #48]	@ (800b464 <sen5x_lightup_measurement+0x94>)
 800b434:	4b07      	ldr	r3, [pc, #28]	@ (800b454 <sen5x_lightup_measurement+0x84>)
 800b436:	0019      	movs	r1, r3
 800b438:	2002      	movs	r0, #2
 800b43a:	f005 f87f 	bl	801053c <CreateLine>
  }
  return error;
 800b43e:	1dbb      	adds	r3, r7, #6
 800b440:	2200      	movs	r2, #0
 800b442:	5e9b      	ldrsh	r3, [r3, r2]
}
 800b444:	0018      	movs	r0, r3
 800b446:	46bd      	mov	sp, r7
 800b448:	b003      	add	sp, #12
 800b44a:	bd90      	pop	{r4, r7, pc}
 800b44c:	20000e2e 	.word	0x20000e2e
 800b450:	08027b44 	.word	0x08027b44
 800b454:	0802790c 	.word	0x0802790c
 800b458:	08027b70 	.word	0x08027b70
 800b45c:	08027b90 	.word	0x08027b90
 800b460:	08027978 	.word	0x08027978
 800b464:	08027bc0 	.word	0x08027bc0

0800b468 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800b468:	b590      	push	{r4, r7, lr}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800b46e:	1dbb      	adds	r3, r7, #6
 800b470:	2200      	movs	r2, #0
 800b472:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800b474:	4b21      	ldr	r3, [pc, #132]	@ (800b4fc <sen5x_extinguish_measurement+0x94>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d01e      	beq.n	800b4ba <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800b47c:	4a20      	ldr	r2, [pc, #128]	@ (800b500 <sen5x_extinguish_measurement+0x98>)
 800b47e:	4b21      	ldr	r3, [pc, #132]	@ (800b504 <sen5x_extinguish_measurement+0x9c>)
 800b480:	0019      	movs	r1, r3
 800b482:	2002      	movs	r0, #2
 800b484:	f005 f85a 	bl	801053c <CreateLine>
    Info("PM measurement is disabled");
 800b488:	4a1f      	ldr	r2, [pc, #124]	@ (800b508 <sen5x_extinguish_measurement+0xa0>)
 800b48a:	4b1e      	ldr	r3, [pc, #120]	@ (800b504 <sen5x_extinguish_measurement+0x9c>)
 800b48c:	0019      	movs	r1, r3
 800b48e:	2002      	movs	r0, #2
 800b490:	f005 f854 	bl	801053c <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800b494:	1dbc      	adds	r4, r7, #6
 800b496:	f000 fc69 	bl	800bd6c <sen5x_start_measurement_without_pm>
 800b49a:	0003      	movs	r3, r0
 800b49c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800b49e:	1dbb      	adds	r3, r7, #6
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	5e9b      	ldrsh	r3, [r3, r2]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d022      	beq.n	800b4ee <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800b4a8:	1dbb      	adds	r3, r7, #6
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	5e9b      	ldrsh	r3, [r3, r2]
 800b4ae:	4a17      	ldr	r2, [pc, #92]	@ (800b50c <sen5x_extinguish_measurement+0xa4>)
 800b4b0:	4917      	ldr	r1, [pc, #92]	@ (800b510 <sen5x_extinguish_measurement+0xa8>)
 800b4b2:	2001      	movs	r0, #1
 800b4b4:	f005 f842 	bl	801053c <CreateLine>
 800b4b8:	e019      	b.n	800b4ee <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800b4ba:	1dbc      	adds	r4, r7, #6
 800b4bc:	f000 fc84 	bl	800bdc8 <sen5x_stop_measurement>
 800b4c0:	0003      	movs	r3, r0
 800b4c2:	8023      	strh	r3, [r4, #0]
    showTime();
 800b4c4:	f7fb fcde 	bl	8006e84 <showTime>
    Info("sen5x_stop_measurement executed");
 800b4c8:	4a12      	ldr	r2, [pc, #72]	@ (800b514 <sen5x_extinguish_measurement+0xac>)
 800b4ca:	4b0e      	ldr	r3, [pc, #56]	@ (800b504 <sen5x_extinguish_measurement+0x9c>)
 800b4cc:	0019      	movs	r1, r3
 800b4ce:	2002      	movs	r0, #2
 800b4d0:	f005 f834 	bl	801053c <CreateLine>
    if (error) {
 800b4d4:	1dbb      	adds	r3, r7, #6
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	5e9b      	ldrsh	r3, [r3, r2]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d007      	beq.n	800b4ee <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800b4de:	1dbb      	adds	r3, r7, #6
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	5e9b      	ldrsh	r3, [r3, r2]
 800b4e4:	4a0c      	ldr	r2, [pc, #48]	@ (800b518 <sen5x_extinguish_measurement+0xb0>)
 800b4e6:	490a      	ldr	r1, [pc, #40]	@ (800b510 <sen5x_extinguish_measurement+0xa8>)
 800b4e8:	2001      	movs	r0, #1
 800b4ea:	f005 f827 	bl	801053c <CreateLine>
    }
  }
  return error;
 800b4ee:	1dbb      	adds	r3, r7, #6
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	5e9b      	ldrsh	r3, [r3, r2]
}
 800b4f4:	0018      	movs	r0, r3
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	b003      	add	sp, #12
 800b4fa:	bd90      	pop	{r4, r7, pc}
 800b4fc:	20000e2e 	.word	0x20000e2e
 800b500:	08027be4 	.word	0x08027be4
 800b504:	0802790c 	.word	0x0802790c
 800b508:	08027c1c 	.word	0x08027c1c
 800b50c:	08027c38 	.word	0x08027c38
 800b510:	08027978 	.word	0x08027978
 800b514:	08027c78 	.word	0x08027c78
 800b518:	08027c98 	.word	0x08027c98

0800b51c <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800b51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b51e:	b08d      	sub	sp, #52	@ 0x34
 800b520:	af04      	add	r7, sp, #16
 800b522:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800b524:	261e      	movs	r6, #30
 800b526:	19bb      	adds	r3, r7, r6
 800b528:	2200      	movs	r2, #0
 800b52a:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800b52c:	19bc      	adds	r4, r7, r6
 800b52e:	2316      	movs	r3, #22
 800b530:	18fd      	adds	r5, r7, r3
 800b532:	2318      	movs	r3, #24
 800b534:	18fa      	adds	r2, r7, r3
 800b536:	231a      	movs	r3, #26
 800b538:	18f9      	adds	r1, r7, r3
 800b53a:	231c      	movs	r3, #28
 800b53c:	18f8      	adds	r0, r7, r3
 800b53e:	230e      	movs	r3, #14
 800b540:	18fb      	adds	r3, r7, r3
 800b542:	9303      	str	r3, [sp, #12]
 800b544:	2310      	movs	r3, #16
 800b546:	18fb      	adds	r3, r7, r3
 800b548:	9302      	str	r3, [sp, #8]
 800b54a:	2312      	movs	r3, #18
 800b54c:	18fb      	adds	r3, r7, r3
 800b54e:	9301      	str	r3, [sp, #4]
 800b550:	2314      	movs	r3, #20
 800b552:	18fb      	adds	r3, r7, r3
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	002b      	movs	r3, r5
 800b558:	f000 fcb8 	bl	800becc <sen5x_read_measured_values>
 800b55c:	0003      	movs	r3, r0
 800b55e:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800b560:	19bb      	adds	r3, r7, r6
 800b562:	2200      	movs	r2, #0
 800b564:	5e9b      	ldrsh	r3, [r3, r2]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d003      	beq.n	800b572 <sen5x_read_measurement+0x56>
    return error;
 800b56a:	19bb      	adds	r3, r7, r6
 800b56c:	2200      	movs	r2, #0
 800b56e:	5e9b      	ldrsh	r3, [r3, r2]
 800b570:	e02c      	b.n	800b5cc <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800b572:	231c      	movs	r3, #28
 800b574:	18fb      	adds	r3, r7, r3
 800b576:	881a      	ldrh	r2, [r3, #0]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800b57c:	231a      	movs	r3, #26
 800b57e:	18fb      	adds	r3, r7, r3
 800b580:	881a      	ldrh	r2, [r3, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800b586:	2318      	movs	r3, #24
 800b588:	18fb      	adds	r3, r7, r3
 800b58a:	881a      	ldrh	r2, [r3, #0]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800b590:	2316      	movs	r3, #22
 800b592:	18fb      	adds	r3, r7, r3
 800b594:	881a      	ldrh	r2, [r3, #0]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800b59a:	2314      	movs	r3, #20
 800b59c:	18fb      	adds	r3, r7, r3
 800b59e:	2200      	movs	r2, #0
 800b5a0:	5e9a      	ldrsh	r2, [r3, r2]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800b5a6:	2312      	movs	r3, #18
 800b5a8:	18fb      	adds	r3, r7, r3
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	5e9a      	ldrsh	r2, [r3, r2]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800b5b2:	2310      	movs	r3, #16
 800b5b4:	18fb      	adds	r3, r7, r3
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	5e9a      	ldrsh	r2, [r3, r2]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800b5be:	230e      	movs	r3, #14
 800b5c0:	18fb      	adds	r3, r7, r3
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	5e9a      	ldrsh	r2, [r3, r2]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	81da      	strh	r2, [r3, #14]
  return 0;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	0018      	movs	r0, r3
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	b009      	add	sp, #36	@ 0x24
 800b5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5d4 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800b5d8:	4b63      	ldr	r3, [pc, #396]	@ (800b768 <sen5x_printvalues+0x194>)
 800b5da:	881b      	ldrh	r3, [r3, #0]
 800b5dc:	4a63      	ldr	r2, [pc, #396]	@ (800b76c <sen5x_printvalues+0x198>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d013      	beq.n	800b60a <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800b5e2:	4b61      	ldr	r3, [pc, #388]	@ (800b768 <sen5x_printvalues+0x194>)
 800b5e4:	881b      	ldrh	r3, [r3, #0]
 800b5e6:	0018      	movs	r0, r3
 800b5e8:	f7f5 fff2 	bl	80015d0 <__aeabi_i2f>
 800b5ec:	1c03      	adds	r3, r0, #0
 800b5ee:	4960      	ldr	r1, [pc, #384]	@ (800b770 <sen5x_printvalues+0x19c>)
 800b5f0:	1c18      	adds	r0, r3, #0
 800b5f2:	f7f5 faef 	bl	8000bd4 <__aeabi_fdiv>
 800b5f6:	1c03      	adds	r3, r0, #0
 800b5f8:	1c18      	adds	r0, r3, #0
 800b5fa:	f7f7 ff33 	bl	8003464 <__aeabi_f2d>
 800b5fe:	0002      	movs	r2, r0
 800b600:	000b      	movs	r3, r1
 800b602:	495c      	ldr	r1, [pc, #368]	@ (800b774 <sen5x_printvalues+0x1a0>)
 800b604:	0008      	movs	r0, r1
 800b606:	f016 ff21 	bl	802244c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800b60a:	4b57      	ldr	r3, [pc, #348]	@ (800b768 <sen5x_printvalues+0x194>)
 800b60c:	885b      	ldrh	r3, [r3, #2]
 800b60e:	4a57      	ldr	r2, [pc, #348]	@ (800b76c <sen5x_printvalues+0x198>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d013      	beq.n	800b63c <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800b614:	4b54      	ldr	r3, [pc, #336]	@ (800b768 <sen5x_printvalues+0x194>)
 800b616:	885b      	ldrh	r3, [r3, #2]
 800b618:	0018      	movs	r0, r3
 800b61a:	f7f5 ffd9 	bl	80015d0 <__aeabi_i2f>
 800b61e:	1c03      	adds	r3, r0, #0
 800b620:	4953      	ldr	r1, [pc, #332]	@ (800b770 <sen5x_printvalues+0x19c>)
 800b622:	1c18      	adds	r0, r3, #0
 800b624:	f7f5 fad6 	bl	8000bd4 <__aeabi_fdiv>
 800b628:	1c03      	adds	r3, r0, #0
 800b62a:	1c18      	adds	r0, r3, #0
 800b62c:	f7f7 ff1a 	bl	8003464 <__aeabi_f2d>
 800b630:	0002      	movs	r2, r0
 800b632:	000b      	movs	r3, r1
 800b634:	4950      	ldr	r1, [pc, #320]	@ (800b778 <sen5x_printvalues+0x1a4>)
 800b636:	0008      	movs	r0, r1
 800b638:	f016 ff08 	bl	802244c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800b63c:	4b4a      	ldr	r3, [pc, #296]	@ (800b768 <sen5x_printvalues+0x194>)
 800b63e:	889b      	ldrh	r3, [r3, #4]
 800b640:	4a4a      	ldr	r2, [pc, #296]	@ (800b76c <sen5x_printvalues+0x198>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d013      	beq.n	800b66e <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800b646:	4b48      	ldr	r3, [pc, #288]	@ (800b768 <sen5x_printvalues+0x194>)
 800b648:	889b      	ldrh	r3, [r3, #4]
 800b64a:	0018      	movs	r0, r3
 800b64c:	f7f5 ffc0 	bl	80015d0 <__aeabi_i2f>
 800b650:	1c03      	adds	r3, r0, #0
 800b652:	4947      	ldr	r1, [pc, #284]	@ (800b770 <sen5x_printvalues+0x19c>)
 800b654:	1c18      	adds	r0, r3, #0
 800b656:	f7f5 fabd 	bl	8000bd4 <__aeabi_fdiv>
 800b65a:	1c03      	adds	r3, r0, #0
 800b65c:	1c18      	adds	r0, r3, #0
 800b65e:	f7f7 ff01 	bl	8003464 <__aeabi_f2d>
 800b662:	0002      	movs	r2, r0
 800b664:	000b      	movs	r3, r1
 800b666:	4945      	ldr	r1, [pc, #276]	@ (800b77c <sen5x_printvalues+0x1a8>)
 800b668:	0008      	movs	r0, r1
 800b66a:	f016 feef 	bl	802244c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800b66e:	4b3e      	ldr	r3, [pc, #248]	@ (800b768 <sen5x_printvalues+0x194>)
 800b670:	88db      	ldrh	r3, [r3, #6]
 800b672:	4a3e      	ldr	r2, [pc, #248]	@ (800b76c <sen5x_printvalues+0x198>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d013      	beq.n	800b6a0 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800b678:	4b3b      	ldr	r3, [pc, #236]	@ (800b768 <sen5x_printvalues+0x194>)
 800b67a:	88db      	ldrh	r3, [r3, #6]
 800b67c:	0018      	movs	r0, r3
 800b67e:	f7f5 ffa7 	bl	80015d0 <__aeabi_i2f>
 800b682:	1c03      	adds	r3, r0, #0
 800b684:	493a      	ldr	r1, [pc, #232]	@ (800b770 <sen5x_printvalues+0x19c>)
 800b686:	1c18      	adds	r0, r3, #0
 800b688:	f7f5 faa4 	bl	8000bd4 <__aeabi_fdiv>
 800b68c:	1c03      	adds	r3, r0, #0
 800b68e:	1c18      	adds	r0, r3, #0
 800b690:	f7f7 fee8 	bl	8003464 <__aeabi_f2d>
 800b694:	0002      	movs	r2, r0
 800b696:	000b      	movs	r3, r1
 800b698:	4939      	ldr	r1, [pc, #228]	@ (800b780 <sen5x_printvalues+0x1ac>)
 800b69a:	0008      	movs	r0, r1
 800b69c:	f016 fed6 	bl	802244c <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800b6a0:	4b31      	ldr	r3, [pc, #196]	@ (800b768 <sen5x_printvalues+0x194>)
 800b6a2:	2208      	movs	r2, #8
 800b6a4:	5e9b      	ldrsh	r3, [r3, r2]
 800b6a6:	4a37      	ldr	r2, [pc, #220]	@ (800b784 <sen5x_printvalues+0x1b0>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d014      	beq.n	800b6d6 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800b6ac:	4b2e      	ldr	r3, [pc, #184]	@ (800b768 <sen5x_printvalues+0x194>)
 800b6ae:	2208      	movs	r2, #8
 800b6b0:	5e9b      	ldrsh	r3, [r3, r2]
 800b6b2:	0018      	movs	r0, r3
 800b6b4:	f7f5 ff8c 	bl	80015d0 <__aeabi_i2f>
 800b6b8:	1c03      	adds	r3, r0, #0
 800b6ba:	4933      	ldr	r1, [pc, #204]	@ (800b788 <sen5x_printvalues+0x1b4>)
 800b6bc:	1c18      	adds	r0, r3, #0
 800b6be:	f7f5 fa89 	bl	8000bd4 <__aeabi_fdiv>
 800b6c2:	1c03      	adds	r3, r0, #0
 800b6c4:	1c18      	adds	r0, r3, #0
 800b6c6:	f7f7 fecd 	bl	8003464 <__aeabi_f2d>
 800b6ca:	0002      	movs	r2, r0
 800b6cc:	000b      	movs	r3, r1
 800b6ce:	492f      	ldr	r1, [pc, #188]	@ (800b78c <sen5x_printvalues+0x1b8>)
 800b6d0:	0008      	movs	r0, r1
 800b6d2:	f016 febb 	bl	802244c <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800b6d6:	4b24      	ldr	r3, [pc, #144]	@ (800b768 <sen5x_printvalues+0x194>)
 800b6d8:	220a      	movs	r2, #10
 800b6da:	5e9b      	ldrsh	r3, [r3, r2]
 800b6dc:	4a29      	ldr	r2, [pc, #164]	@ (800b784 <sen5x_printvalues+0x1b0>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d014      	beq.n	800b70c <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800b6e2:	4b21      	ldr	r3, [pc, #132]	@ (800b768 <sen5x_printvalues+0x194>)
 800b6e4:	220a      	movs	r2, #10
 800b6e6:	5e9b      	ldrsh	r3, [r3, r2]
 800b6e8:	0018      	movs	r0, r3
 800b6ea:	f7f5 ff71 	bl	80015d0 <__aeabi_i2f>
 800b6ee:	1c03      	adds	r3, r0, #0
 800b6f0:	4927      	ldr	r1, [pc, #156]	@ (800b790 <sen5x_printvalues+0x1bc>)
 800b6f2:	1c18      	adds	r0, r3, #0
 800b6f4:	f7f5 fa6e 	bl	8000bd4 <__aeabi_fdiv>
 800b6f8:	1c03      	adds	r3, r0, #0
 800b6fa:	1c18      	adds	r0, r3, #0
 800b6fc:	f7f7 feb2 	bl	8003464 <__aeabi_f2d>
 800b700:	0002      	movs	r2, r0
 800b702:	000b      	movs	r3, r1
 800b704:	4923      	ldr	r1, [pc, #140]	@ (800b794 <sen5x_printvalues+0x1c0>)
 800b706:	0008      	movs	r0, r1
 800b708:	f016 fea0 	bl	802244c <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800b70c:	4b16      	ldr	r3, [pc, #88]	@ (800b768 <sen5x_printvalues+0x194>)
 800b70e:	220c      	movs	r2, #12
 800b710:	5e9b      	ldrsh	r3, [r3, r2]
 800b712:	4a1c      	ldr	r2, [pc, #112]	@ (800b784 <sen5x_printvalues+0x1b0>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d00e      	beq.n	800b736 <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800b718:	4b13      	ldr	r3, [pc, #76]	@ (800b768 <sen5x_printvalues+0x194>)
 800b71a:	220c      	movs	r2, #12
 800b71c:	5e9b      	ldrsh	r3, [r3, r2]
 800b71e:	210a      	movs	r1, #10
 800b720:	0018      	movs	r0, r3
 800b722:	f7f4 fdc9 	bl	80002b8 <__divsi3>
 800b726:	0003      	movs	r3, r0
 800b728:	b21b      	sxth	r3, r3
 800b72a:	001a      	movs	r2, r3
 800b72c:	4b1a      	ldr	r3, [pc, #104]	@ (800b798 <sen5x_printvalues+0x1c4>)
 800b72e:	0011      	movs	r1, r2
 800b730:	0018      	movs	r0, r3
 800b732:	f016 fe8b 	bl	802244c <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800b736:	4b0c      	ldr	r3, [pc, #48]	@ (800b768 <sen5x_printvalues+0x194>)
 800b738:	220e      	movs	r2, #14
 800b73a:	5e9b      	ldrsh	r3, [r3, r2]
 800b73c:	4a11      	ldr	r2, [pc, #68]	@ (800b784 <sen5x_printvalues+0x1b0>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d00e      	beq.n	800b760 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800b742:	4b09      	ldr	r3, [pc, #36]	@ (800b768 <sen5x_printvalues+0x194>)
 800b744:	220e      	movs	r2, #14
 800b746:	5e9b      	ldrsh	r3, [r3, r2]
 800b748:	210a      	movs	r1, #10
 800b74a:	0018      	movs	r0, r3
 800b74c:	f7f4 fdb4 	bl	80002b8 <__divsi3>
 800b750:	0003      	movs	r3, r0
 800b752:	b21b      	sxth	r3, r3
 800b754:	001a      	movs	r2, r3
 800b756:	4b11      	ldr	r3, [pc, #68]	@ (800b79c <sen5x_printvalues+0x1c8>)
 800b758:	0011      	movs	r1, r2
 800b75a:	0018      	movs	r0, r3
 800b75c:	f016 fe76 	bl	802244c <iprintf>
  }
}
 800b760:	46c0      	nop			@ (mov r8, r8)
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	46c0      	nop			@ (mov r8, r8)
 800b768:	20000e40 	.word	0x20000e40
 800b76c:	0000ffff 	.word	0x0000ffff
 800b770:	41200000 	.word	0x41200000
 800b774:	08027cc8 	.word	0x08027cc8
 800b778:	08027cf4 	.word	0x08027cf4
 800b77c:	08027d20 	.word	0x08027d20
 800b780:	08027d4c 	.word	0x08027d4c
 800b784:	00007fff 	.word	0x00007fff
 800b788:	42c80000 	.word	0x42c80000
 800b78c:	08027d78 	.word	0x08027d78
 800b790:	43480000 	.word	0x43480000
 800b794:	08027d9c 	.word	0x08027d9c
 800b798:	08027dc4 	.word	0x08027dc4
 800b79c:	08027ddc 	.word	0x08027ddc

0800b7a0 <sen5xStore>:

void sen5xStore() {
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800b7a4:	4b2e      	ldr	r3, [pc, #184]	@ (800b860 <sen5xStore+0xc0>)
 800b7a6:	885b      	ldrh	r3, [r3, #2]
 800b7a8:	4a2e      	ldr	r2, [pc, #184]	@ (800b864 <sen5xStore+0xc4>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d004      	beq.n	800b7b8 <sen5xStore+0x18>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800b7ae:	4b2c      	ldr	r3, [pc, #176]	@ (800b860 <sen5xStore+0xc0>)
 800b7b0:	885b      	ldrh	r3, [r3, #2]
 800b7b2:	0018      	movs	r0, r3
 800b7b4:	f7f8 f83a 	bl	800382c <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800b7b8:	4b29      	ldr	r3, [pc, #164]	@ (800b860 <sen5xStore+0xc0>)
 800b7ba:	88db      	ldrh	r3, [r3, #6]
 800b7bc:	4a29      	ldr	r2, [pc, #164]	@ (800b864 <sen5xStore+0xc4>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d004      	beq.n	800b7cc <sen5xStore+0x2c>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800b7c2:	4b27      	ldr	r3, [pc, #156]	@ (800b860 <sen5xStore+0xc0>)
 800b7c4:	88db      	ldrh	r3, [r3, #6]
 800b7c6:	0018      	movs	r0, r3
 800b7c8:	f7f8 f85c 	bl	8003884 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800b7cc:	4b26      	ldr	r3, [pc, #152]	@ (800b868 <sen5xStore+0xc8>)
 800b7ce:	791b      	ldrb	r3, [r3, #4]
 800b7d0:	2b34      	cmp	r3, #52	@ 0x34
 800b7d2:	d003      	beq.n	800b7dc <sen5xStore+0x3c>
 800b7d4:	4b24      	ldr	r3, [pc, #144]	@ (800b868 <sen5xStore+0xc8>)
 800b7d6:	791b      	ldrb	r3, [r3, #4]
 800b7d8:	2b35      	cmp	r3, #53	@ 0x35
 800b7da:	d13d      	bne.n	800b858 <sen5xStore+0xb8>
    if (!VOCNOx || usbPluggedIn) {
 800b7dc:	4b23      	ldr	r3, [pc, #140]	@ (800b86c <sen5xStore+0xcc>)
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	4053      	eors	r3, r2
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d103      	bne.n	800b7f2 <sen5xStore+0x52>
 800b7ea:	4b21      	ldr	r3, [pc, #132]	@ (800b870 <sen5xStore+0xd0>)
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d032      	beq.n	800b858 <sen5xStore+0xb8>
      if (sen5x_data.voc_index != 0x7fff) {
 800b7f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b860 <sen5xStore+0xc0>)
 800b7f4:	220c      	movs	r2, #12
 800b7f6:	5e9b      	ldrsh	r3, [r3, r2]
 800b7f8:	4a1e      	ldr	r2, [pc, #120]	@ (800b874 <sen5xStore+0xd4>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d019      	beq.n	800b832 <sen5xStore+0x92>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800b7fe:	4b18      	ldr	r3, [pc, #96]	@ (800b860 <sen5xStore+0xc0>)
 800b800:	220c      	movs	r2, #12
 800b802:	5e9b      	ldrsh	r3, [r3, r2]
 800b804:	210a      	movs	r1, #10
 800b806:	0018      	movs	r0, r3
 800b808:	f7f4 fd56 	bl	80002b8 <__divsi3>
 800b80c:	0003      	movs	r3, r0
 800b80e:	b21b      	sxth	r3, r3
 800b810:	b29b      	uxth	r3, r3
 800b812:	0018      	movs	r0, r3
 800b814:	f003 fe42 	bl	800f49c <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800b818:	4b11      	ldr	r3, [pc, #68]	@ (800b860 <sen5xStore+0xc0>)
 800b81a:	220c      	movs	r2, #12
 800b81c:	5e9b      	ldrsh	r3, [r3, r2]
 800b81e:	210a      	movs	r1, #10
 800b820:	0018      	movs	r0, r3
 800b822:	f7f4 fd49 	bl	80002b8 <__divsi3>
 800b826:	0003      	movs	r3, r0
 800b828:	b21b      	sxth	r3, r3
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	0018      	movs	r0, r3
 800b82e:	f7f7 ffcd 	bl	80037cc <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800b832:	4b0b      	ldr	r3, [pc, #44]	@ (800b860 <sen5xStore+0xc0>)
 800b834:	220e      	movs	r2, #14
 800b836:	5e9b      	ldrsh	r3, [r3, r2]
 800b838:	4a0e      	ldr	r2, [pc, #56]	@ (800b874 <sen5xStore+0xd4>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d00c      	beq.n	800b858 <sen5xStore+0xb8>
        setNOx(sen5x_data.nox_index / 10);
 800b83e:	4b08      	ldr	r3, [pc, #32]	@ (800b860 <sen5xStore+0xc0>)
 800b840:	220e      	movs	r2, #14
 800b842:	5e9b      	ldrsh	r3, [r3, r2]
 800b844:	210a      	movs	r1, #10
 800b846:	0018      	movs	r0, r3
 800b848:	f7f4 fd36 	bl	80002b8 <__divsi3>
 800b84c:	0003      	movs	r3, r0
 800b84e:	b21b      	sxth	r3, r3
 800b850:	b29b      	uxth	r3, r3
 800b852:	0018      	movs	r0, r3
 800b854:	f7f8 f842 	bl	80038dc <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800b858:	46c0      	nop			@ (mov r8, r8)
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	46c0      	nop			@ (mov r8, r8)
 800b860:	20000e40 	.word	0x20000e40
 800b864:	0000ffff 	.word	0x0000ffff
 800b868:	20000e30 	.word	0x20000e30
 800b86c:	20000e2e 	.word	0x20000e2e
 800b870:	20001dbd 	.word	0x20001dbd
 800b874:	00007fff 	.word	0x00007fff

0800b878 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800b878:	b590      	push	{r4, r7, lr}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af02      	add	r7, sp, #8
 800b87e:	6039      	str	r1, [r7, #0]
 800b880:	0011      	movs	r1, r2
 800b882:	1dfb      	adds	r3, r7, #7
 800b884:	1c02      	adds	r2, r0, #0
 800b886:	701a      	strb	r2, [r3, #0]
 800b888:	1d3b      	adds	r3, r7, #4
 800b88a:	1c0a      	adds	r2, r1, #0
 800b88c:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800b88e:	1dfb      	adds	r3, r7, #7
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	b29b      	uxth	r3, r3
 800b894:	18db      	adds	r3, r3, r3
 800b896:	b299      	uxth	r1, r3
 800b898:	1d3b      	adds	r3, r7, #4
 800b89a:	881b      	ldrh	r3, [r3, #0]
 800b89c:	683a      	ldr	r2, [r7, #0]
 800b89e:	4805      	ldr	r0, [pc, #20]	@ (800b8b4 <sensirion_i2c_hal_read+0x3c>)
 800b8a0:	2464      	movs	r4, #100	@ 0x64
 800b8a2:	9400      	str	r4, [sp, #0]
 800b8a4:	f006 fefe 	bl	80126a4 <HAL_I2C_Master_Receive>
 800b8a8:	0003      	movs	r3, r0
 800b8aa:	b25b      	sxtb	r3, r3
}
 800b8ac:	0018      	movs	r0, r3
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	b003      	add	sp, #12
 800b8b2:	bd90      	pop	{r4, r7, pc}
 800b8b4:	20000c04 	.word	0x20000c04

0800b8b8 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800b8b8:	b590      	push	{r4, r7, lr}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af02      	add	r7, sp, #8
 800b8be:	6039      	str	r1, [r7, #0]
 800b8c0:	0011      	movs	r1, r2
 800b8c2:	1dfb      	adds	r3, r7, #7
 800b8c4:	1c02      	adds	r2, r0, #0
 800b8c6:	701a      	strb	r2, [r3, #0]
 800b8c8:	1d3b      	adds	r3, r7, #4
 800b8ca:	1c0a      	adds	r2, r1, #0
 800b8cc:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800b8ce:	1dfb      	adds	r3, r7, #7
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	18db      	adds	r3, r3, r3
 800b8d6:	b299      	uxth	r1, r3
 800b8d8:	1d3b      	adds	r3, r7, #4
 800b8da:	881b      	ldrh	r3, [r3, #0]
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	4805      	ldr	r0, [pc, #20]	@ (800b8f4 <sensirion_i2c_hal_write+0x3c>)
 800b8e0:	2464      	movs	r4, #100	@ 0x64
 800b8e2:	9400      	str	r4, [sp, #0]
 800b8e4:	f006 fdd6 	bl	8012494 <HAL_I2C_Master_Transmit>
 800b8e8:	0003      	movs	r3, r0
 800b8ea:	b25b      	sxtb	r3, r3
}
 800b8ec:	0018      	movs	r0, r3
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	b003      	add	sp, #12
 800b8f2:	bd90      	pop	{r4, r7, pc}
 800b8f4:	20000c04 	.word	0x20000c04

0800b8f8 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	22fa      	movs	r2, #250	@ 0xfa
 800b904:	0091      	lsls	r1, r2, #2
 800b906:	0018      	movs	r0, r3
 800b908:	f7f4 fc4c 	bl	80001a4 <__udivsi3>
 800b90c:	0003      	movs	r3, r0
 800b90e:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	22fa      	movs	r2, #250	@ 0xfa
 800b914:	0091      	lsls	r1, r2, #2
 800b916:	0018      	movs	r0, r3
 800b918:	f7f4 fcca 	bl	80002b0 <__aeabi_uidivmod>
 800b91c:	1e0b      	subs	r3, r1, #0
 800b91e:	d002      	beq.n	800b926 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3301      	adds	r3, #1
 800b924:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	0018      	movs	r0, r3
 800b92a:	f005 fa5d 	bl	8010de8 <HAL_Delay>
}
 800b92e:	46c0      	nop			@ (mov r8, r8)
 800b930:	46bd      	mov	sp, r7
 800b932:	b004      	add	sp, #16
 800b934:	bd80      	pop	{r7, pc}
	...

0800b938 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800b93e:	2300      	movs	r3, #0
 800b940:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800b942:	1d3b      	adds	r3, r7, #4
 800b944:	0018      	movs	r0, r3
 800b946:	f000 fd01 	bl	800c34c <sen5x_read_device_status>
 800b94a:	1e03      	subs	r3, r0, #0
 800b94c:	d007      	beq.n	800b95e <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800b94e:	4a28      	ldr	r2, [pc, #160]	@ (800b9f0 <sen5x_check_for_errors+0xb8>)
 800b950:	4b28      	ldr	r3, [pc, #160]	@ (800b9f4 <sen5x_check_for_errors+0xbc>)
 800b952:	0019      	movs	r1, r3
 800b954:	2001      	movs	r0, #1
 800b956:	f004 fdf1 	bl	801053c <CreateLine>
    return true;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e043      	b.n	800b9e6 <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d101      	bne.n	800b968 <sen5x_check_for_errors+0x30>
    return false;
 800b964:	2300      	movs	r3, #0
 800b966:	e03e      	b.n	800b9e6 <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	2380      	movs	r3, #128	@ 0x80
 800b96c:	039b      	lsls	r3, r3, #14
 800b96e:	4013      	ands	r3, r2
 800b970:	d005      	beq.n	800b97e <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800b972:	4a21      	ldr	r2, [pc, #132]	@ (800b9f8 <sen5x_check_for_errors+0xc0>)
 800b974:	4b21      	ldr	r3, [pc, #132]	@ (800b9fc <sen5x_check_for_errors+0xc4>)
 800b976:	0019      	movs	r1, r3
 800b978:	2003      	movs	r0, #3
 800b97a:	f004 fddf 	bl	801053c <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	2380      	movs	r3, #128	@ 0x80
 800b982:	031b      	lsls	r3, r3, #12
 800b984:	4013      	ands	r3, r2
 800b986:	d005      	beq.n	800b994 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 800b988:	4a1d      	ldr	r2, [pc, #116]	@ (800ba00 <sen5x_check_for_errors+0xc8>)
 800b98a:	4b1c      	ldr	r3, [pc, #112]	@ (800b9fc <sen5x_check_for_errors+0xc4>)
 800b98c:	0019      	movs	r1, r3
 800b98e:	2003      	movs	r0, #3
 800b990:	f004 fdd4 	bl	801053c <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2280      	movs	r2, #128	@ 0x80
 800b998:	4013      	ands	r3, r2
 800b99a:	d005      	beq.n	800b9a8 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800b99c:	4a19      	ldr	r2, [pc, #100]	@ (800ba04 <sen5x_check_for_errors+0xcc>)
 800b99e:	4b17      	ldr	r3, [pc, #92]	@ (800b9fc <sen5x_check_for_errors+0xc4>)
 800b9a0:	0019      	movs	r1, r3
 800b9a2:	2003      	movs	r0, #3
 800b9a4:	f004 fdca 	bl	801053c <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2240      	movs	r2, #64	@ 0x40
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	d005      	beq.n	800b9bc <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 800b9b0:	4a15      	ldr	r2, [pc, #84]	@ (800ba08 <sen5x_check_for_errors+0xd0>)
 800b9b2:	4b12      	ldr	r3, [pc, #72]	@ (800b9fc <sen5x_check_for_errors+0xc4>)
 800b9b4:	0019      	movs	r1, r3
 800b9b6:	2003      	movs	r0, #3
 800b9b8:	f004 fdc0 	bl	801053c <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2220      	movs	r2, #32
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	d005      	beq.n	800b9d0 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800b9c4:	4a11      	ldr	r2, [pc, #68]	@ (800ba0c <sen5x_check_for_errors+0xd4>)
 800b9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b9fc <sen5x_check_for_errors+0xc4>)
 800b9c8:	0019      	movs	r1, r3
 800b9ca:	2003      	movs	r0, #3
 800b9cc:	f004 fdb6 	bl	801053c <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2210      	movs	r2, #16
 800b9d4:	4013      	ands	r3, r2
 800b9d6:	d005      	beq.n	800b9e4 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800b9d8:	4a0d      	ldr	r2, [pc, #52]	@ (800ba10 <sen5x_check_for_errors+0xd8>)
 800b9da:	4b08      	ldr	r3, [pc, #32]	@ (800b9fc <sen5x_check_for_errors+0xc4>)
 800b9dc:	0019      	movs	r1, r3
 800b9de:	2003      	movs	r0, #3
 800b9e0:	f004 fdac 	bl	801053c <CreateLine>
  }
  return 1;
 800b9e4:	2301      	movs	r3, #1
}
 800b9e6:	0018      	movs	r0, r3
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	b002      	add	sp, #8
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	46c0      	nop			@ (mov r8, r8)
 800b9f0:	08027df4 	.word	0x08027df4
 800b9f4:	08027978 	.word	0x08027978
 800b9f8:	08027e20 	.word	0x08027e20
 800b9fc:	0802794c 	.word	0x0802794c
 800ba00:	08027e40 	.word	0x08027e40
 800ba04:	08027e5c 	.word	0x08027e5c
 800ba08:	08027e80 	.word	0x08027e80
 800ba0c:	08027ea0 	.word	0x08027ea0
 800ba10:	08027eb4 	.word	0x08027eb4

0800ba14 <set_light_on_state>:

void set_light_on_state(void) {
 800ba14:	b580      	push	{r7, lr}
 800ba16:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800ba18:	4b15      	ldr	r3, [pc, #84]	@ (800ba70 <set_light_on_state+0x5c>)
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	4053      	eors	r3, r2
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d008      	beq.n	800ba38 <set_light_on_state+0x24>
    sen5x_Power_On();
 800ba26:	f7ff fb43 	bl	800b0b0 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 800ba2a:	4a12      	ldr	r2, [pc, #72]	@ (800ba74 <set_light_on_state+0x60>)
 800ba2c:	4b12      	ldr	r3, [pc, #72]	@ (800ba78 <set_light_on_state+0x64>)
 800ba2e:	0019      	movs	r1, r3
 800ba30:	2003      	movs	r0, #3
 800ba32:	f004 fd83 	bl	801053c <CreateLine>
 800ba36:	e00a      	b.n	800ba4e <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800ba38:	f005 f9cc 	bl	8010dd4 <HAL_GetTick>
 800ba3c:	0002      	movs	r2, r0
 800ba3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ba7c <set_light_on_state+0x68>)
 800ba40:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800ba42:	4a0f      	ldr	r2, [pc, #60]	@ (800ba80 <set_light_on_state+0x6c>)
 800ba44:	4b0c      	ldr	r3, [pc, #48]	@ (800ba78 <set_light_on_state+0x64>)
 800ba46:	0019      	movs	r1, r3
 800ba48:	2003      	movs	r0, #3
 800ba4a:	f004 fd77 	bl	801053c <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800ba4e:	f7ff fcbf 	bl	800b3d0 <sen5x_lightup_measurement>
 800ba52:	1e03      	subs	r3, r0, #0
 800ba54:	d005      	beq.n	800ba62 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800ba56:	4a0b      	ldr	r2, [pc, #44]	@ (800ba84 <set_light_on_state+0x70>)
 800ba58:	4b0b      	ldr	r3, [pc, #44]	@ (800ba88 <set_light_on_state+0x74>)
 800ba5a:	0019      	movs	r1, r3
 800ba5c:	2001      	movs	r0, #1
 800ba5e:	f004 fd6d 	bl	801053c <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800ba62:	4b0a      	ldr	r3, [pc, #40]	@ (800ba8c <set_light_on_state+0x78>)
 800ba64:	2203      	movs	r2, #3
 800ba66:	701a      	strb	r2, [r3, #0]
}
 800ba68:	46c0      	nop			@ (mov r8, r8)
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	46c0      	nop			@ (mov r8, r8)
 800ba70:	20000e2d 	.word	0x20000e2d
 800ba74:	08027ef0 	.word	0x08027ef0
 800ba78:	0802794c 	.word	0x0802794c
 800ba7c:	20000e3c 	.word	0x20000e3c
 800ba80:	08027f1c 	.word	0x08027f1c
 800ba84:	08027f34 	.word	0x08027f34
 800ba88:	08027978 	.word	0x08027978
 800ba8c:	20000099 	.word	0x20000099

0800ba90 <sen5x_statemachine>:

void sen5x_statemachine() {
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800ba96:	1dfb      	adds	r3, r7, #7
 800ba98:	2200      	movs	r2, #0
 800ba9a:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800ba9c:	4b86      	ldr	r3, [pc, #536]	@ (800bcb8 <sen5x_statemachine+0x228>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	0018      	movs	r0, r3
 800baa2:	f004 fcf5 	bl	8010490 <TimestampIsReached>
 800baa6:	1e03      	subs	r3, r0, #0
 800baa8:	d100      	bne.n	800baac <sen5x_statemachine+0x1c>
 800baaa:	e100      	b.n	800bcae <sen5x_statemachine+0x21e>
    switch (PMsamplesState) {
 800baac:	4b83      	ldr	r3, [pc, #524]	@ (800bcbc <sen5x_statemachine+0x22c>)
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2b05      	cmp	r3, #5
 800bab2:	d900      	bls.n	800bab6 <sen5x_statemachine+0x26>
 800bab4:	e0fb      	b.n	800bcae <sen5x_statemachine+0x21e>
 800bab6:	009a      	lsls	r2, r3, #2
 800bab8:	4b81      	ldr	r3, [pc, #516]	@ (800bcc0 <sen5x_statemachine+0x230>)
 800baba:	18d3      	adds	r3, r2, r3
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800bac0:	4a80      	ldr	r2, [pc, #512]	@ (800bcc4 <sen5x_statemachine+0x234>)
 800bac2:	4b81      	ldr	r3, [pc, #516]	@ (800bcc8 <sen5x_statemachine+0x238>)
 800bac4:	0019      	movs	r1, r3
 800bac6:	2001      	movs	r0, #1
 800bac8:	f004 fd38 	bl	801053c <CreateLine>
      SetPMSensorStatus(false);
 800bacc:	2000      	movs	r0, #0
 800bace:	f7fe fb87 	bl	800a1e0 <SetPMSensorStatus>
      DisablePMSensor();
 800bad2:	f7fe fb27 	bl	800a124 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800bad6:	f005 f97d 	bl	8010dd4 <HAL_GetTick>
 800bada:	0003      	movs	r3, r0
 800badc:	4a7b      	ldr	r2, [pc, #492]	@ (800bccc <sen5x_statemachine+0x23c>)
 800bade:	189a      	adds	r2, r3, r2
 800bae0:	4b75      	ldr	r3, [pc, #468]	@ (800bcb8 <sen5x_statemachine+0x228>)
 800bae2:	601a      	str	r2, [r3, #0]
      break;
 800bae4:	e0e3      	b.n	800bcae <sen5x_statemachine+0x21e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800bae6:	f005 f975 	bl	8010dd4 <HAL_GetTick>
 800baea:	0003      	movs	r3, r0
 800baec:	4a78      	ldr	r2, [pc, #480]	@ (800bcd0 <sen5x_statemachine+0x240>)
 800baee:	189a      	adds	r2, r3, r2
 800baf0:	4b71      	ldr	r3, [pc, #452]	@ (800bcb8 <sen5x_statemachine+0x228>)
 800baf2:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800baf4:	f7ff ff8e 	bl	800ba14 <set_light_on_state>
      break;
 800baf8:	e0d9      	b.n	800bcae <sen5x_statemachine+0x21e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800bafa:	4b70      	ldr	r3, [pc, #448]	@ (800bcbc <sen5x_statemachine+0x22c>)
 800bafc:	2202      	movs	r2, #2
 800bafe:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800bb00:	4b74      	ldr	r3, [pc, #464]	@ (800bcd4 <sen5x_statemachine+0x244>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b05      	cmp	r3, #5
 800bb06:	d905      	bls.n	800bb14 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800bb08:	4b6c      	ldr	r3, [pc, #432]	@ (800bcbc <sen5x_statemachine+0x22c>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800bb0e:	f7ff faff 	bl	800b110 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800bb12:	e0c9      	b.n	800bca8 <sen5x_statemachine+0x218>
        if (sen5x_check_for_errors()) {
 800bb14:	f7ff ff10 	bl	800b938 <sen5x_check_for_errors>
 800bb18:	1e03      	subs	r3, r0, #0
 800bb1a:	d01f      	beq.n	800bb5c <sen5x_statemachine+0xcc>
          if (sen5x_device_reset()) {
 800bb1c:	f000 fc68 	bl	800c3f0 <sen5x_device_reset>
 800bb20:	1e03      	subs	r3, r0, #0
 800bb22:	d00f      	beq.n	800bb44 <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 800bb24:	4a6c      	ldr	r2, [pc, #432]	@ (800bcd8 <sen5x_statemachine+0x248>)
 800bb26:	4b68      	ldr	r3, [pc, #416]	@ (800bcc8 <sen5x_statemachine+0x238>)
 800bb28:	0019      	movs	r1, r3
 800bb2a:	2001      	movs	r0, #1
 800bb2c:	f004 fd06 	bl	801053c <CreateLine>
            sen5xErrors++;
 800bb30:	4b68      	ldr	r3, [pc, #416]	@ (800bcd4 <sen5x_statemachine+0x244>)
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	3301      	adds	r3, #1
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	4b66      	ldr	r3, [pc, #408]	@ (800bcd4 <sen5x_statemachine+0x244>)
 800bb3a:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 800bb3c:	4b5f      	ldr	r3, [pc, #380]	@ (800bcbc <sen5x_statemachine+0x22c>)
 800bb3e:	2203      	movs	r2, #3
 800bb40:	701a      	strb	r2, [r3, #0]
 800bb42:	e005      	b.n	800bb50 <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 800bb44:	4a65      	ldr	r2, [pc, #404]	@ (800bcdc <sen5x_statemachine+0x24c>)
 800bb46:	4b66      	ldr	r3, [pc, #408]	@ (800bce0 <sen5x_statemachine+0x250>)
 800bb48:	0019      	movs	r1, r3
 800bb4a:	2002      	movs	r0, #2
 800bb4c:	f004 fcf6 	bl	801053c <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800bb50:	f005 f940 	bl	8010dd4 <HAL_GetTick>
 800bb54:	0002      	movs	r2, r0
 800bb56:	4b58      	ldr	r3, [pc, #352]	@ (800bcb8 <sen5x_statemachine+0x228>)
 800bb58:	601a      	str	r2, [r3, #0]
      break;
 800bb5a:	e0a5      	b.n	800bca8 <sen5x_statemachine+0x218>
          if (sen5xErrors != 0) {
 800bb5c:	4b5d      	ldr	r3, [pc, #372]	@ (800bcd4 <sen5x_statemachine+0x244>)
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d100      	bne.n	800bb66 <sen5x_statemachine+0xd6>
 800bb64:	e0a0      	b.n	800bca8 <sen5x_statemachine+0x218>
            sen5xErrors = 0;
 800bb66:	4b5b      	ldr	r3, [pc, #364]	@ (800bcd4 <sen5x_statemachine+0x244>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800bb6c:	4a5d      	ldr	r2, [pc, #372]	@ (800bce4 <sen5x_statemachine+0x254>)
 800bb6e:	4b5e      	ldr	r3, [pc, #376]	@ (800bce8 <sen5x_statemachine+0x258>)
 800bb70:	0019      	movs	r1, r3
 800bb72:	2003      	movs	r0, #3
 800bb74:	f004 fce2 	bl	801053c <CreateLine>
      break;
 800bb78:	e096      	b.n	800bca8 <sen5x_statemachine+0x218>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800bb7a:	1dfb      	adds	r3, r7, #7
 800bb7c:	0018      	movs	r0, r3
 800bb7e:	f000 f953 	bl	800be28 <sen5x_read_data_ready>
      if (data_ready) {
 800bb82:	1dfb      	adds	r3, r7, #7
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d02c      	beq.n	800bbe4 <sen5x_statemachine+0x154>
        SetPMIndicator();
 800bb8a:	f003 fbe7 	bl	800f35c <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800bb8e:	4b57      	ldr	r3, [pc, #348]	@ (800bcec <sen5x_statemachine+0x25c>)
 800bb90:	0018      	movs	r0, r3
 800bb92:	f7ff fcc3 	bl	800b51c <sen5x_read_measurement>
 800bb96:	1e03      	subs	r3, r0, #0
 800bb98:	d00b      	beq.n	800bbb2 <sen5x_statemachine+0x122>
          Error("Error executing sen5x_read_measured_values()");
 800bb9a:	4a55      	ldr	r2, [pc, #340]	@ (800bcf0 <sen5x_statemachine+0x260>)
 800bb9c:	4b4a      	ldr	r3, [pc, #296]	@ (800bcc8 <sen5x_statemachine+0x238>)
 800bb9e:	0019      	movs	r1, r3
 800bba0:	2001      	movs	r0, #1
 800bba2:	f004 fccb 	bl	801053c <CreateLine>
          sen5xErrors++;
 800bba6:	4b4b      	ldr	r3, [pc, #300]	@ (800bcd4 <sen5x_statemachine+0x244>)
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	4b49      	ldr	r3, [pc, #292]	@ (800bcd4 <sen5x_statemachine+0x244>)
 800bbb0:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800bbb2:	4b50      	ldr	r3, [pc, #320]	@ (800bcf4 <sen5x_statemachine+0x264>)
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	4b4e      	ldr	r3, [pc, #312]	@ (800bcf4 <sen5x_statemachine+0x264>)
 800bbbc:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800bbbe:	4b4d      	ldr	r3, [pc, #308]	@ (800bcf4 <sen5x_statemachine+0x264>)
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	2b1f      	cmp	r3, #31
 800bbc4:	d102      	bne.n	800bbcc <sen5x_statemachine+0x13c>
          sen5xSamples = 0;  // enable display on serial
 800bbc6:	4b4b      	ldr	r3, [pc, #300]	@ (800bcf4 <sen5x_statemachine+0x264>)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800bbcc:	4b49      	ldr	r3, [pc, #292]	@ (800bcf4 <sen5x_statemachine+0x264>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d901      	bls.n	800bbd8 <sen5x_statemachine+0x148>
          sen5xStore();
 800bbd4:	f7ff fde4 	bl	800b7a0 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800bbd8:	4b46      	ldr	r3, [pc, #280]	@ (800bcf4 <sen5x_statemachine+0x264>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d101      	bne.n	800bbe4 <sen5x_statemachine+0x154>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800bbe0:	f7ff fcf8 	bl	800b5d4 <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800bbe4:	4b44      	ldr	r3, [pc, #272]	@ (800bcf8 <sen5x_statemachine+0x268>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d103      	bne.n	800bbf4 <sen5x_statemachine+0x164>
 800bbec:	4b41      	ldr	r3, [pc, #260]	@ (800bcf4 <sen5x_statemachine+0x264>)
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d95b      	bls.n	800bcac <sen5x_statemachine+0x21c>
        PMsamplesState = CLEAN_FAN;
 800bbf4:	4b31      	ldr	r3, [pc, #196]	@ (800bcbc <sen5x_statemachine+0x22c>)
 800bbf6:	2204      	movs	r2, #4
 800bbf8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800bbfa:	e057      	b.n	800bcac <sen5x_statemachine+0x21c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == MONDAY ) && !fanCleaningDone) {
 800bbfc:	f7fb fbee 	bl	80073dc <RTC_GetWeekday>
 800bc00:	0003      	movs	r3, r0
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d11a      	bne.n	800bc3c <sen5x_statemachine+0x1ac>
 800bc06:	4b3d      	ldr	r3, [pc, #244]	@ (800bcfc <sen5x_statemachine+0x26c>)
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	4053      	eors	r3, r2
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d013      	beq.n	800bc3c <sen5x_statemachine+0x1ac>
        sen5x_start_fan_cleaning();
 800bc14:	f000 f9ee 	bl	800bff4 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800bc18:	4a39      	ldr	r2, [pc, #228]	@ (800bd00 <sen5x_statemachine+0x270>)
 800bc1a:	4b31      	ldr	r3, [pc, #196]	@ (800bce0 <sen5x_statemachine+0x250>)
 800bc1c:	0019      	movs	r1, r3
 800bc1e:	2002      	movs	r0, #2
 800bc20:	f004 fc8c 	bl	801053c <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800bc24:	f005 f8d6 	bl	8010dd4 <HAL_GetTick>
 800bc28:	0003      	movs	r3, r0
 800bc2a:	4a36      	ldr	r2, [pc, #216]	@ (800bd04 <sen5x_statemachine+0x274>)
 800bc2c:	189a      	adds	r2, r3, r2
 800bc2e:	4b22      	ldr	r3, [pc, #136]	@ (800bcb8 <sen5x_statemachine+0x228>)
 800bc30:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800bc32:	4b32      	ldr	r3, [pc, #200]	@ (800bcfc <sen5x_statemachine+0x26c>)
 800bc34:	2201      	movs	r2, #1
 800bc36:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800bc38:	f7ff fbca 	bl	800b3d0 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800bc3c:	4b1f      	ldr	r3, [pc, #124]	@ (800bcbc <sen5x_statemachine+0x22c>)
 800bc3e:	2205      	movs	r2, #5
 800bc40:	701a      	strb	r2, [r3, #0]
      break;
 800bc42:	e034      	b.n	800bcae <sen5x_statemachine+0x21e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800bc44:	4b2c      	ldr	r3, [pc, #176]	@ (800bcf8 <sen5x_statemachine+0x268>)
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	4053      	eors	r3, r2
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d01c      	beq.n	800bc8c <sen5x_statemachine+0x1fc>
 800bc52:	4b2d      	ldr	r3, [pc, #180]	@ (800bd08 <sen5x_statemachine+0x278>)
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	2201      	movs	r2, #1
 800bc58:	4053      	eors	r3, r2
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d015      	beq.n	800bc8c <sen5x_statemachine+0x1fc>
        if (sen5x_extinguish_measurement()) {
 800bc60:	f7ff fc02 	bl	800b468 <sen5x_extinguish_measurement>
 800bc64:	1e03      	subs	r3, r0, #0
 800bc66:	d005      	beq.n	800bc74 <sen5x_statemachine+0x1e4>
          Error("Error executing sen5x_extinguish_measurement()");
 800bc68:	4a28      	ldr	r2, [pc, #160]	@ (800bd0c <sen5x_statemachine+0x27c>)
 800bc6a:	4b17      	ldr	r3, [pc, #92]	@ (800bcc8 <sen5x_statemachine+0x238>)
 800bc6c:	0019      	movs	r1, r3
 800bc6e:	2001      	movs	r0, #1
 800bc70:	f004 fc64 	bl	801053c <CreateLine>
        }
        sen5xSamples = 0;
 800bc74:	4b1f      	ldr	r3, [pc, #124]	@ (800bcf4 <sen5x_statemachine+0x264>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800bc7a:	f7ff fa49 	bl	800b110 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800bc7e:	2000      	movs	r0, #0
 800bc80:	f7fe faae 	bl	800a1e0 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800bc84:	4b0d      	ldr	r3, [pc, #52]	@ (800bcbc <sen5x_statemachine+0x22c>)
 800bc86:	2201      	movs	r2, #1
 800bc88:	701a      	strb	r2, [r3, #0]
 800bc8a:	e002      	b.n	800bc92 <sen5x_statemachine+0x202>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800bc8c:	4b0b      	ldr	r3, [pc, #44]	@ (800bcbc <sen5x_statemachine+0x22c>)
 800bc8e:	2203      	movs	r2, #3
 800bc90:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800bc92:	f003 fb89 	bl	800f3a8 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800bc96:	f005 f89d 	bl	8010dd4 <HAL_GetTick>
 800bc9a:	0003      	movs	r3, r0
 800bc9c:	22fa      	movs	r2, #250	@ 0xfa
 800bc9e:	0092      	lsls	r2, r2, #2
 800bca0:	189a      	adds	r2, r3, r2
 800bca2:	4b05      	ldr	r3, [pc, #20]	@ (800bcb8 <sen5x_statemachine+0x228>)
 800bca4:	601a      	str	r2, [r3, #0]
    }
  }
}
 800bca6:	e002      	b.n	800bcae <sen5x_statemachine+0x21e>
      break;
 800bca8:	46c0      	nop			@ (mov r8, r8)
 800bcaa:	e000      	b.n	800bcae <sen5x_statemachine+0x21e>
      break;
 800bcac:	46c0      	nop			@ (mov r8, r8)
}
 800bcae:	46c0      	nop			@ (mov r8, r8)
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	b002      	add	sp, #8
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	46c0      	nop			@ (mov r8, r8)
 800bcb8:	20000e3c 	.word	0x20000e3c
 800bcbc:	20000099 	.word	0x20000099
 800bcc0:	0802898c 	.word	0x0802898c
 800bcc4:	08027f60 	.word	0x08027f60
 800bcc8:	08027978 	.word	0x08027978
 800bccc:	002fefd8 	.word	0x002fefd8
 800bcd0:	00005910 	.word	0x00005910
 800bcd4:	20000e39 	.word	0x20000e39
 800bcd8:	08027f90 	.word	0x08027f90
 800bcdc:	08027fa8 	.word	0x08027fa8
 800bce0:	0802790c 	.word	0x0802790c
 800bce4:	08027fc0 	.word	0x08027fc0
 800bce8:	0802794c 	.word	0x0802794c
 800bcec:	20000e40 	.word	0x20000e40
 800bcf0:	08027fd4 	.word	0x08027fd4
 800bcf4:	20000e38 	.word	0x20000e38
 800bcf8:	20001dbd 	.word	0x20001dbd
 800bcfc:	20000e2c 	.word	0x20000e2c
 800bd00:	08028004 	.word	0x08028004
 800bd04:	00002710 	.word	0x00002710
 800bd08:	20001dbe 	.word	0x20001dbe
 800bd0c:	0802801c 	.word	0x0802801c

0800bd10 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800bd10:	b590      	push	{r4, r7, lr}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800bd16:	1dbb      	adds	r3, r7, #6
 800bd18:	2200      	movs	r2, #0
 800bd1a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800bd1c:	1dbc      	adds	r4, r7, #6
 800bd1e:	1dbb      	adds	r3, r7, #6
 800bd20:	8819      	ldrh	r1, [r3, #0]
 800bd22:	003b      	movs	r3, r7
 800bd24:	2221      	movs	r2, #33	@ 0x21
 800bd26:	0018      	movs	r0, r3
 800bd28:	f001 fb56 	bl	800d3d8 <sensirion_i2c_add_command_to_buffer>
 800bd2c:	0003      	movs	r3, r0
 800bd2e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800bd30:	1d3c      	adds	r4, r7, #4
 800bd32:	1dbb      	adds	r3, r7, #6
 800bd34:	881a      	ldrh	r2, [r3, #0]
 800bd36:	003b      	movs	r3, r7
 800bd38:	0019      	movs	r1, r3
 800bd3a:	2069      	movs	r0, #105	@ 0x69
 800bd3c:	f001 fbd0 	bl	800d4e0 <sensirion_i2c_write_data>
 800bd40:	0003      	movs	r3, r0
 800bd42:	8023      	strh	r3, [r4, #0]
    if (error) {
 800bd44:	1d3b      	adds	r3, r7, #4
 800bd46:	2200      	movs	r2, #0
 800bd48:	5e9b      	ldrsh	r3, [r3, r2]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d003      	beq.n	800bd56 <sen5x_start_measurement+0x46>
        return error;
 800bd4e:	1d3b      	adds	r3, r7, #4
 800bd50:	2200      	movs	r2, #0
 800bd52:	5e9b      	ldrsh	r3, [r3, r2]
 800bd54:	e004      	b.n	800bd60 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800bd56:	4b04      	ldr	r3, [pc, #16]	@ (800bd68 <sen5x_start_measurement+0x58>)
 800bd58:	0018      	movs	r0, r3
 800bd5a:	f7ff fdcd 	bl	800b8f8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	0018      	movs	r0, r3
 800bd62:	46bd      	mov	sp, r7
 800bd64:	b003      	add	sp, #12
 800bd66:	bd90      	pop	{r4, r7, pc}
 800bd68:	0000c350 	.word	0x0000c350

0800bd6c <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800bd6c:	b590      	push	{r4, r7, lr}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800bd72:	1dbb      	adds	r3, r7, #6
 800bd74:	2200      	movs	r2, #0
 800bd76:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800bd78:	1dbc      	adds	r4, r7, #6
 800bd7a:	1dbb      	adds	r3, r7, #6
 800bd7c:	8819      	ldrh	r1, [r3, #0]
 800bd7e:	003b      	movs	r3, r7
 800bd80:	2237      	movs	r2, #55	@ 0x37
 800bd82:	0018      	movs	r0, r3
 800bd84:	f001 fb28 	bl	800d3d8 <sensirion_i2c_add_command_to_buffer>
 800bd88:	0003      	movs	r3, r0
 800bd8a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800bd8c:	1d3c      	adds	r4, r7, #4
 800bd8e:	1dbb      	adds	r3, r7, #6
 800bd90:	881a      	ldrh	r2, [r3, #0]
 800bd92:	003b      	movs	r3, r7
 800bd94:	0019      	movs	r1, r3
 800bd96:	2069      	movs	r0, #105	@ 0x69
 800bd98:	f001 fba2 	bl	800d4e0 <sensirion_i2c_write_data>
 800bd9c:	0003      	movs	r3, r0
 800bd9e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800bda0:	1d3b      	adds	r3, r7, #4
 800bda2:	2200      	movs	r2, #0
 800bda4:	5e9b      	ldrsh	r3, [r3, r2]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d003      	beq.n	800bdb2 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800bdaa:	1d3b      	adds	r3, r7, #4
 800bdac:	2200      	movs	r2, #0
 800bdae:	5e9b      	ldrsh	r3, [r3, r2]
 800bdb0:	e004      	b.n	800bdbc <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800bdb2:	4b04      	ldr	r3, [pc, #16]	@ (800bdc4 <sen5x_start_measurement_without_pm+0x58>)
 800bdb4:	0018      	movs	r0, r3
 800bdb6:	f7ff fd9f 	bl	800b8f8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	0018      	movs	r0, r3
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	b003      	add	sp, #12
 800bdc2:	bd90      	pop	{r4, r7, pc}
 800bdc4:	0000c350 	.word	0x0000c350

0800bdc8 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800bdc8:	b590      	push	{r4, r7, lr}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800bdce:	1dbb      	adds	r3, r7, #6
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800bdd4:	1dbc      	adds	r4, r7, #6
 800bdd6:	2382      	movs	r3, #130	@ 0x82
 800bdd8:	005a      	lsls	r2, r3, #1
 800bdda:	1dbb      	adds	r3, r7, #6
 800bddc:	8819      	ldrh	r1, [r3, #0]
 800bdde:	003b      	movs	r3, r7
 800bde0:	0018      	movs	r0, r3
 800bde2:	f001 faf9 	bl	800d3d8 <sensirion_i2c_add_command_to_buffer>
 800bde6:	0003      	movs	r3, r0
 800bde8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800bdea:	1d3c      	adds	r4, r7, #4
 800bdec:	1dbb      	adds	r3, r7, #6
 800bdee:	881a      	ldrh	r2, [r3, #0]
 800bdf0:	003b      	movs	r3, r7
 800bdf2:	0019      	movs	r1, r3
 800bdf4:	2069      	movs	r0, #105	@ 0x69
 800bdf6:	f001 fb73 	bl	800d4e0 <sensirion_i2c_write_data>
 800bdfa:	0003      	movs	r3, r0
 800bdfc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800bdfe:	1d3b      	adds	r3, r7, #4
 800be00:	2200      	movs	r2, #0
 800be02:	5e9b      	ldrsh	r3, [r3, r2]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d003      	beq.n	800be10 <sen5x_stop_measurement+0x48>
        return error;
 800be08:	1d3b      	adds	r3, r7, #4
 800be0a:	2200      	movs	r2, #0
 800be0c:	5e9b      	ldrsh	r3, [r3, r2]
 800be0e:	e004      	b.n	800be1a <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800be10:	4b04      	ldr	r3, [pc, #16]	@ (800be24 <sen5x_stop_measurement+0x5c>)
 800be12:	0018      	movs	r0, r3
 800be14:	f7ff fd70 	bl	800b8f8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	0018      	movs	r0, r3
 800be1c:	46bd      	mov	sp, r7
 800be1e:	b003      	add	sp, #12
 800be20:	bd90      	pop	{r4, r7, pc}
 800be22:	46c0      	nop			@ (mov r8, r8)
 800be24:	00030d40 	.word	0x00030d40

0800be28 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800be28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800be30:	250e      	movs	r5, #14
 800be32:	197b      	adds	r3, r7, r5
 800be34:	2200      	movs	r2, #0
 800be36:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800be38:	197c      	adds	r4, r7, r5
 800be3a:	4a22      	ldr	r2, [pc, #136]	@ (800bec4 <sen5x_read_data_ready+0x9c>)
 800be3c:	197b      	adds	r3, r7, r5
 800be3e:	8819      	ldrh	r1, [r3, #0]
 800be40:	2308      	movs	r3, #8
 800be42:	18fb      	adds	r3, r7, r3
 800be44:	0018      	movs	r0, r3
 800be46:	f001 fac7 	bl	800d3d8 <sensirion_i2c_add_command_to_buffer>
 800be4a:	0003      	movs	r3, r0
 800be4c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800be4e:	260c      	movs	r6, #12
 800be50:	19bc      	adds	r4, r7, r6
 800be52:	197b      	adds	r3, r7, r5
 800be54:	881a      	ldrh	r2, [r3, #0]
 800be56:	2308      	movs	r3, #8
 800be58:	18fb      	adds	r3, r7, r3
 800be5a:	0019      	movs	r1, r3
 800be5c:	2069      	movs	r0, #105	@ 0x69
 800be5e:	f001 fb3f 	bl	800d4e0 <sensirion_i2c_write_data>
 800be62:	0003      	movs	r3, r0
 800be64:	8023      	strh	r3, [r4, #0]
    if (error) {
 800be66:	19bb      	adds	r3, r7, r6
 800be68:	2200      	movs	r2, #0
 800be6a:	5e9b      	ldrsh	r3, [r3, r2]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d003      	beq.n	800be78 <sen5x_read_data_ready+0x50>
        return error;
 800be70:	19bb      	adds	r3, r7, r6
 800be72:	2200      	movs	r2, #0
 800be74:	5e9b      	ldrsh	r3, [r3, r2]
 800be76:	e020      	b.n	800beba <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800be78:	4b13      	ldr	r3, [pc, #76]	@ (800bec8 <sen5x_read_data_ready+0xa0>)
 800be7a:	0018      	movs	r0, r3
 800be7c:	f7ff fd3c 	bl	800b8f8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800be80:	250c      	movs	r5, #12
 800be82:	197c      	adds	r4, r7, r5
 800be84:	2308      	movs	r3, #8
 800be86:	18fb      	adds	r3, r7, r3
 800be88:	2202      	movs	r2, #2
 800be8a:	0019      	movs	r1, r3
 800be8c:	2069      	movs	r0, #105	@ 0x69
 800be8e:	f001 fb3f 	bl	800d510 <sensirion_i2c_read_data_inplace>
 800be92:	0003      	movs	r3, r0
 800be94:	8023      	strh	r3, [r4, #0]
    if (error) {
 800be96:	197b      	adds	r3, r7, r5
 800be98:	2200      	movs	r2, #0
 800be9a:	5e9b      	ldrsh	r3, [r3, r2]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d003      	beq.n	800bea8 <sen5x_read_data_ready+0x80>
        return error;
 800bea0:	197b      	adds	r3, r7, r5
 800bea2:	2200      	movs	r2, #0
 800bea4:	5e9b      	ldrsh	r3, [r3, r2]
 800bea6:	e008      	b.n	800beba <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800bea8:	2308      	movs	r3, #8
 800beaa:	18fb      	adds	r3, r7, r3
 800beac:	785b      	ldrb	r3, [r3, #1]
 800beae:	1e5a      	subs	r2, r3, #1
 800beb0:	4193      	sbcs	r3, r2
 800beb2:	b2da      	uxtb	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	0018      	movs	r0, r3
 800bebc:	46bd      	mov	sp, r7
 800bebe:	b005      	add	sp, #20
 800bec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bec2:	46c0      	nop			@ (mov r8, r8)
 800bec4:	00000202 	.word	0x00000202
 800bec8:	00004e20 	.word	0x00004e20

0800becc <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800becc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bece:	b08d      	sub	sp, #52	@ 0x34
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800beda:	252e      	movs	r5, #46	@ 0x2e
 800bedc:	197b      	adds	r3, r7, r5
 800bede:	2200      	movs	r2, #0
 800bee0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800bee2:	197c      	adds	r4, r7, r5
 800bee4:	23f1      	movs	r3, #241	@ 0xf1
 800bee6:	009a      	lsls	r2, r3, #2
 800bee8:	197b      	adds	r3, r7, r5
 800beea:	8819      	ldrh	r1, [r3, #0]
 800beec:	2314      	movs	r3, #20
 800beee:	18fb      	adds	r3, r7, r3
 800bef0:	0018      	movs	r0, r3
 800bef2:	f001 fa71 	bl	800d3d8 <sensirion_i2c_add_command_to_buffer>
 800bef6:	0003      	movs	r3, r0
 800bef8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800befa:	262c      	movs	r6, #44	@ 0x2c
 800befc:	19bc      	adds	r4, r7, r6
 800befe:	197b      	adds	r3, r7, r5
 800bf00:	881a      	ldrh	r2, [r3, #0]
 800bf02:	2314      	movs	r3, #20
 800bf04:	18fb      	adds	r3, r7, r3
 800bf06:	0019      	movs	r1, r3
 800bf08:	2069      	movs	r0, #105	@ 0x69
 800bf0a:	f001 fae9 	bl	800d4e0 <sensirion_i2c_write_data>
 800bf0e:	0003      	movs	r3, r0
 800bf10:	8023      	strh	r3, [r4, #0]
    if (error) {
 800bf12:	19bb      	adds	r3, r7, r6
 800bf14:	2200      	movs	r2, #0
 800bf16:	5e9b      	ldrsh	r3, [r3, r2]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d003      	beq.n	800bf24 <sen5x_read_measured_values+0x58>
        return error;
 800bf1c:	19bb      	adds	r3, r7, r6
 800bf1e:	2200      	movs	r2, #0
 800bf20:	5e9b      	ldrsh	r3, [r3, r2]
 800bf22:	e060      	b.n	800bfe6 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800bf24:	4b32      	ldr	r3, [pc, #200]	@ (800bff0 <sen5x_read_measured_values+0x124>)
 800bf26:	0018      	movs	r0, r3
 800bf28:	f7ff fce6 	bl	800b8f8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800bf2c:	252c      	movs	r5, #44	@ 0x2c
 800bf2e:	197c      	adds	r4, r7, r5
 800bf30:	2314      	movs	r3, #20
 800bf32:	18fb      	adds	r3, r7, r3
 800bf34:	2210      	movs	r2, #16
 800bf36:	0019      	movs	r1, r3
 800bf38:	2069      	movs	r0, #105	@ 0x69
 800bf3a:	f001 fae9 	bl	800d510 <sensirion_i2c_read_data_inplace>
 800bf3e:	0003      	movs	r3, r0
 800bf40:	8023      	strh	r3, [r4, #0]
    if (error) {
 800bf42:	197b      	adds	r3, r7, r5
 800bf44:	2200      	movs	r2, #0
 800bf46:	5e9b      	ldrsh	r3, [r3, r2]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d003      	beq.n	800bf54 <sen5x_read_measured_values+0x88>
        return error;
 800bf4c:	197b      	adds	r3, r7, r5
 800bf4e:	2200      	movs	r2, #0
 800bf50:	5e9b      	ldrsh	r3, [r3, r2]
 800bf52:	e048      	b.n	800bfe6 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800bf54:	2414      	movs	r4, #20
 800bf56:	193b      	adds	r3, r7, r4
 800bf58:	0018      	movs	r0, r3
 800bf5a:	f000 fa79 	bl	800c450 <sensirion_common_bytes_to_uint16_t>
 800bf5e:	0003      	movs	r3, r0
 800bf60:	001a      	movs	r2, r3
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800bf66:	193b      	adds	r3, r7, r4
 800bf68:	3302      	adds	r3, #2
 800bf6a:	0018      	movs	r0, r3
 800bf6c:	f000 fa70 	bl	800c450 <sensirion_common_bytes_to_uint16_t>
 800bf70:	0003      	movs	r3, r0
 800bf72:	001a      	movs	r2, r3
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800bf78:	193b      	adds	r3, r7, r4
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	0018      	movs	r0, r3
 800bf7e:	f000 fa67 	bl	800c450 <sensirion_common_bytes_to_uint16_t>
 800bf82:	0003      	movs	r3, r0
 800bf84:	001a      	movs	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800bf8a:	193b      	adds	r3, r7, r4
 800bf8c:	3306      	adds	r3, #6
 800bf8e:	0018      	movs	r0, r3
 800bf90:	f000 fa5e 	bl	800c450 <sensirion_common_bytes_to_uint16_t>
 800bf94:	0003      	movs	r3, r0
 800bf96:	001a      	movs	r2, r3
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800bf9c:	193b      	adds	r3, r7, r4
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	0018      	movs	r0, r3
 800bfa2:	f000 fa81 	bl	800c4a8 <sensirion_common_bytes_to_int16_t>
 800bfa6:	0003      	movs	r3, r0
 800bfa8:	001a      	movs	r2, r3
 800bfaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfac:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800bfae:	193b      	adds	r3, r7, r4
 800bfb0:	330a      	adds	r3, #10
 800bfb2:	0018      	movs	r0, r3
 800bfb4:	f000 fa78 	bl	800c4a8 <sensirion_common_bytes_to_int16_t>
 800bfb8:	0003      	movs	r3, r0
 800bfba:	001a      	movs	r2, r3
 800bfbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfbe:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800bfc0:	193b      	adds	r3, r7, r4
 800bfc2:	330c      	adds	r3, #12
 800bfc4:	0018      	movs	r0, r3
 800bfc6:	f000 fa6f 	bl	800c4a8 <sensirion_common_bytes_to_int16_t>
 800bfca:	0003      	movs	r3, r0
 800bfcc:	001a      	movs	r2, r3
 800bfce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfd0:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800bfd2:	193b      	adds	r3, r7, r4
 800bfd4:	330e      	adds	r3, #14
 800bfd6:	0018      	movs	r0, r3
 800bfd8:	f000 fa66 	bl	800c4a8 <sensirion_common_bytes_to_int16_t>
 800bfdc:	0003      	movs	r3, r0
 800bfde:	001a      	movs	r2, r3
 800bfe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfe2:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	0018      	movs	r0, r3
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	b00d      	add	sp, #52	@ 0x34
 800bfec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfee:	46c0      	nop			@ (mov r8, r8)
 800bff0:	00004e20 	.word	0x00004e20

0800bff4 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800bff4:	b590      	push	{r4, r7, lr}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800bffa:	1dbb      	adds	r3, r7, #6
 800bffc:	2200      	movs	r2, #0
 800bffe:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800c000:	1dbc      	adds	r4, r7, #6
 800c002:	4a12      	ldr	r2, [pc, #72]	@ (800c04c <sen5x_start_fan_cleaning+0x58>)
 800c004:	1dbb      	adds	r3, r7, #6
 800c006:	8819      	ldrh	r1, [r3, #0]
 800c008:	003b      	movs	r3, r7
 800c00a:	0018      	movs	r0, r3
 800c00c:	f001 f9e4 	bl	800d3d8 <sensirion_i2c_add_command_to_buffer>
 800c010:	0003      	movs	r3, r0
 800c012:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c014:	1d3c      	adds	r4, r7, #4
 800c016:	1dbb      	adds	r3, r7, #6
 800c018:	881a      	ldrh	r2, [r3, #0]
 800c01a:	003b      	movs	r3, r7
 800c01c:	0019      	movs	r1, r3
 800c01e:	2069      	movs	r0, #105	@ 0x69
 800c020:	f001 fa5e 	bl	800d4e0 <sensirion_i2c_write_data>
 800c024:	0003      	movs	r3, r0
 800c026:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c028:	1d3b      	adds	r3, r7, #4
 800c02a:	2200      	movs	r2, #0
 800c02c:	5e9b      	ldrsh	r3, [r3, r2]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d003      	beq.n	800c03a <sen5x_start_fan_cleaning+0x46>
        return error;
 800c032:	1d3b      	adds	r3, r7, #4
 800c034:	2200      	movs	r2, #0
 800c036:	5e9b      	ldrsh	r3, [r3, r2]
 800c038:	e004      	b.n	800c044 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800c03a:	4b05      	ldr	r3, [pc, #20]	@ (800c050 <sen5x_start_fan_cleaning+0x5c>)
 800c03c:	0018      	movs	r0, r3
 800c03e:	f7ff fc5b 	bl	800b8f8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c042:	2300      	movs	r3, #0
}
 800c044:	0018      	movs	r0, r3
 800c046:	46bd      	mov	sp, r7
 800c048:	b003      	add	sp, #12
 800c04a:	bd90      	pop	{r4, r7, pc}
 800c04c:	00005607 	.word	0x00005607
 800c050:	00004e20 	.word	0x00004e20

0800c054 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800c054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c056:	b087      	sub	sp, #28
 800c058:	af00      	add	r7, sp, #0
 800c05a:	0004      	movs	r4, r0
 800c05c:	0008      	movs	r0, r1
 800c05e:	0011      	movs	r1, r2
 800c060:	1dbb      	adds	r3, r7, #6
 800c062:	1c22      	adds	r2, r4, #0
 800c064:	801a      	strh	r2, [r3, #0]
 800c066:	1d3b      	adds	r3, r7, #4
 800c068:	1c02      	adds	r2, r0, #0
 800c06a:	801a      	strh	r2, [r3, #0]
 800c06c:	1cbb      	adds	r3, r7, #2
 800c06e:	1c0a      	adds	r2, r1, #0
 800c070:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800c072:	2516      	movs	r5, #22
 800c074:	197b      	adds	r3, r7, r5
 800c076:	2200      	movs	r2, #0
 800c078:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800c07a:	197c      	adds	r4, r7, r5
 800c07c:	4a25      	ldr	r2, [pc, #148]	@ (800c114 <sen5x_set_temperature_offset_parameters+0xc0>)
 800c07e:	197b      	adds	r3, r7, r5
 800c080:	8819      	ldrh	r1, [r3, #0]
 800c082:	2608      	movs	r6, #8
 800c084:	19bb      	adds	r3, r7, r6
 800c086:	0018      	movs	r0, r3
 800c088:	f001 f9a6 	bl	800d3d8 <sensirion_i2c_add_command_to_buffer>
 800c08c:	0003      	movs	r3, r0
 800c08e:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800c090:	197c      	adds	r4, r7, r5
 800c092:	1dbb      	adds	r3, r7, #6
 800c094:	2200      	movs	r2, #0
 800c096:	5e9a      	ldrsh	r2, [r3, r2]
 800c098:	197b      	adds	r3, r7, r5
 800c09a:	8819      	ldrh	r1, [r3, #0]
 800c09c:	19bb      	adds	r3, r7, r6
 800c09e:	0018      	movs	r0, r3
 800c0a0:	f001 fa05 	bl	800d4ae <sensirion_i2c_add_int16_t_to_buffer>
 800c0a4:	0003      	movs	r3, r0
 800c0a6:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800c0a8:	197c      	adds	r4, r7, r5
 800c0aa:	1d3b      	adds	r3, r7, #4
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	5e9a      	ldrsh	r2, [r3, r2]
 800c0b0:	197b      	adds	r3, r7, r5
 800c0b2:	8819      	ldrh	r1, [r3, #0]
 800c0b4:	19bb      	adds	r3, r7, r6
 800c0b6:	0018      	movs	r0, r3
 800c0b8:	f001 f9f9 	bl	800d4ae <sensirion_i2c_add_int16_t_to_buffer>
 800c0bc:	0003      	movs	r3, r0
 800c0be:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800c0c0:	197c      	adds	r4, r7, r5
 800c0c2:	1cbb      	adds	r3, r7, #2
 800c0c4:	881a      	ldrh	r2, [r3, #0]
 800c0c6:	197b      	adds	r3, r7, r5
 800c0c8:	8819      	ldrh	r1, [r3, #0]
 800c0ca:	19bb      	adds	r3, r7, r6
 800c0cc:	0018      	movs	r0, r3
 800c0ce:	f001 f9af 	bl	800d430 <sensirion_i2c_add_uint16_t_to_buffer>
 800c0d2:	0003      	movs	r3, r0
 800c0d4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c0d6:	2214      	movs	r2, #20
 800c0d8:	18bc      	adds	r4, r7, r2
 800c0da:	197b      	adds	r3, r7, r5
 800c0dc:	881a      	ldrh	r2, [r3, #0]
 800c0de:	19bb      	adds	r3, r7, r6
 800c0e0:	0019      	movs	r1, r3
 800c0e2:	2069      	movs	r0, #105	@ 0x69
 800c0e4:	f001 f9fc 	bl	800d4e0 <sensirion_i2c_write_data>
 800c0e8:	0003      	movs	r3, r0
 800c0ea:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c0ec:	2214      	movs	r2, #20
 800c0ee:	18bb      	adds	r3, r7, r2
 800c0f0:	2100      	movs	r1, #0
 800c0f2:	5e5b      	ldrsh	r3, [r3, r1]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d003      	beq.n	800c100 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800c0f8:	18bb      	adds	r3, r7, r2
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	5e9b      	ldrsh	r3, [r3, r2]
 800c0fe:	e004      	b.n	800c10a <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800c100:	4b05      	ldr	r3, [pc, #20]	@ (800c118 <sen5x_set_temperature_offset_parameters+0xc4>)
 800c102:	0018      	movs	r0, r3
 800c104:	f7ff fbf8 	bl	800b8f8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	0018      	movs	r0, r3
 800c10c:	46bd      	mov	sp, r7
 800c10e:	b007      	add	sp, #28
 800c110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c112:	46c0      	nop			@ (mov r8, r8)
 800c114:	000060b2 	.word	0x000060b2
 800c118:	00004e20 	.word	0x00004e20

0800c11c <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800c11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c11e:	b091      	sub	sp, #68	@ 0x44
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	000a      	movs	r2, r1
 800c126:	1cfb      	adds	r3, r7, #3
 800c128:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800c12a:	253e      	movs	r5, #62	@ 0x3e
 800c12c:	197b      	adds	r3, r7, r5
 800c12e:	2200      	movs	r2, #0
 800c130:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800c132:	197c      	adds	r4, r7, r5
 800c134:	4a22      	ldr	r2, [pc, #136]	@ (800c1c0 <sen5x_get_product_name+0xa4>)
 800c136:	197b      	adds	r3, r7, r5
 800c138:	8819      	ldrh	r1, [r3, #0]
 800c13a:	230c      	movs	r3, #12
 800c13c:	18fb      	adds	r3, r7, r3
 800c13e:	0018      	movs	r0, r3
 800c140:	f001 f94a 	bl	800d3d8 <sensirion_i2c_add_command_to_buffer>
 800c144:	0003      	movs	r3, r0
 800c146:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c148:	263c      	movs	r6, #60	@ 0x3c
 800c14a:	19bc      	adds	r4, r7, r6
 800c14c:	197b      	adds	r3, r7, r5
 800c14e:	881a      	ldrh	r2, [r3, #0]
 800c150:	230c      	movs	r3, #12
 800c152:	18fb      	adds	r3, r7, r3
 800c154:	0019      	movs	r1, r3
 800c156:	2069      	movs	r0, #105	@ 0x69
 800c158:	f001 f9c2 	bl	800d4e0 <sensirion_i2c_write_data>
 800c15c:	0003      	movs	r3, r0
 800c15e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c160:	19bb      	adds	r3, r7, r6
 800c162:	2200      	movs	r2, #0
 800c164:	5e9b      	ldrsh	r3, [r3, r2]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d003      	beq.n	800c172 <sen5x_get_product_name+0x56>
        return error;
 800c16a:	19bb      	adds	r3, r7, r6
 800c16c:	2200      	movs	r2, #0
 800c16e:	5e9b      	ldrsh	r3, [r3, r2]
 800c170:	e021      	b.n	800c1b6 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800c172:	4b14      	ldr	r3, [pc, #80]	@ (800c1c4 <sen5x_get_product_name+0xa8>)
 800c174:	0018      	movs	r0, r3
 800c176:	f7ff fbbf 	bl	800b8f8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800c17a:	253c      	movs	r5, #60	@ 0x3c
 800c17c:	197c      	adds	r4, r7, r5
 800c17e:	230c      	movs	r3, #12
 800c180:	18fb      	adds	r3, r7, r3
 800c182:	2220      	movs	r2, #32
 800c184:	0019      	movs	r1, r3
 800c186:	2069      	movs	r0, #105	@ 0x69
 800c188:	f001 f9c2 	bl	800d510 <sensirion_i2c_read_data_inplace>
 800c18c:	0003      	movs	r3, r0
 800c18e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c190:	197b      	adds	r3, r7, r5
 800c192:	2200      	movs	r2, #0
 800c194:	5e9b      	ldrsh	r3, [r3, r2]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d003      	beq.n	800c1a2 <sen5x_get_product_name+0x86>
        return error;
 800c19a:	197b      	adds	r3, r7, r5
 800c19c:	2200      	movs	r2, #0
 800c19e:	5e9b      	ldrsh	r3, [r3, r2]
 800c1a0:	e009      	b.n	800c1b6 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800c1a2:	1cfb      	adds	r3, r7, #3
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	6879      	ldr	r1, [r7, #4]
 800c1aa:	230c      	movs	r3, #12
 800c1ac:	18fb      	adds	r3, r7, r3
 800c1ae:	0018      	movs	r0, r3
 800c1b0:	f000 f988 	bl	800c4c4 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	0018      	movs	r0, r3
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	b011      	add	sp, #68	@ 0x44
 800c1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1be:	46c0      	nop			@ (mov r8, r8)
 800c1c0:	0000d014 	.word	0x0000d014
 800c1c4:	0000c350 	.word	0x0000c350

0800c1c8 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800c1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ca:	b091      	sub	sp, #68	@ 0x44
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	000a      	movs	r2, r1
 800c1d2:	1cfb      	adds	r3, r7, #3
 800c1d4:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800c1d6:	253e      	movs	r5, #62	@ 0x3e
 800c1d8:	197b      	adds	r3, r7, r5
 800c1da:	2200      	movs	r2, #0
 800c1dc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800c1de:	197c      	adds	r4, r7, r5
 800c1e0:	4a22      	ldr	r2, [pc, #136]	@ (800c26c <sen5x_get_serial_number+0xa4>)
 800c1e2:	197b      	adds	r3, r7, r5
 800c1e4:	8819      	ldrh	r1, [r3, #0]
 800c1e6:	230c      	movs	r3, #12
 800c1e8:	18fb      	adds	r3, r7, r3
 800c1ea:	0018      	movs	r0, r3
 800c1ec:	f001 f8f4 	bl	800d3d8 <sensirion_i2c_add_command_to_buffer>
 800c1f0:	0003      	movs	r3, r0
 800c1f2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c1f4:	263c      	movs	r6, #60	@ 0x3c
 800c1f6:	19bc      	adds	r4, r7, r6
 800c1f8:	197b      	adds	r3, r7, r5
 800c1fa:	881a      	ldrh	r2, [r3, #0]
 800c1fc:	230c      	movs	r3, #12
 800c1fe:	18fb      	adds	r3, r7, r3
 800c200:	0019      	movs	r1, r3
 800c202:	2069      	movs	r0, #105	@ 0x69
 800c204:	f001 f96c 	bl	800d4e0 <sensirion_i2c_write_data>
 800c208:	0003      	movs	r3, r0
 800c20a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c20c:	19bb      	adds	r3, r7, r6
 800c20e:	2200      	movs	r2, #0
 800c210:	5e9b      	ldrsh	r3, [r3, r2]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d003      	beq.n	800c21e <sen5x_get_serial_number+0x56>
        return error;
 800c216:	19bb      	adds	r3, r7, r6
 800c218:	2200      	movs	r2, #0
 800c21a:	5e9b      	ldrsh	r3, [r3, r2]
 800c21c:	e021      	b.n	800c262 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800c21e:	4b14      	ldr	r3, [pc, #80]	@ (800c270 <sen5x_get_serial_number+0xa8>)
 800c220:	0018      	movs	r0, r3
 800c222:	f7ff fb69 	bl	800b8f8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800c226:	253c      	movs	r5, #60	@ 0x3c
 800c228:	197c      	adds	r4, r7, r5
 800c22a:	230c      	movs	r3, #12
 800c22c:	18fb      	adds	r3, r7, r3
 800c22e:	2220      	movs	r2, #32
 800c230:	0019      	movs	r1, r3
 800c232:	2069      	movs	r0, #105	@ 0x69
 800c234:	f001 f96c 	bl	800d510 <sensirion_i2c_read_data_inplace>
 800c238:	0003      	movs	r3, r0
 800c23a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c23c:	197b      	adds	r3, r7, r5
 800c23e:	2200      	movs	r2, #0
 800c240:	5e9b      	ldrsh	r3, [r3, r2]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <sen5x_get_serial_number+0x86>
        return error;
 800c246:	197b      	adds	r3, r7, r5
 800c248:	2200      	movs	r2, #0
 800c24a:	5e9b      	ldrsh	r3, [r3, r2]
 800c24c:	e009      	b.n	800c262 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800c24e:	1cfb      	adds	r3, r7, #3
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	b29a      	uxth	r2, r3
 800c254:	6879      	ldr	r1, [r7, #4]
 800c256:	230c      	movs	r3, #12
 800c258:	18fb      	adds	r3, r7, r3
 800c25a:	0018      	movs	r0, r3
 800c25c:	f000 f932 	bl	800c4c4 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800c260:	2300      	movs	r3, #0
}
 800c262:	0018      	movs	r0, r3
 800c264:	46bd      	mov	sp, r7
 800c266:	b011      	add	sp, #68	@ 0x44
 800c268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c26a:	46c0      	nop			@ (mov r8, r8)
 800c26c:	0000d033 	.word	0x0000d033
 800c270:	0000c350 	.word	0x0000c350

0800c274 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800c274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c276:	b089      	sub	sp, #36	@ 0x24
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
 800c280:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800c282:	251e      	movs	r5, #30
 800c284:	197b      	adds	r3, r7, r5
 800c286:	2200      	movs	r2, #0
 800c288:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800c28a:	197c      	adds	r4, r7, r5
 800c28c:	23d1      	movs	r3, #209	@ 0xd1
 800c28e:	021a      	lsls	r2, r3, #8
 800c290:	197b      	adds	r3, r7, r5
 800c292:	8819      	ldrh	r1, [r3, #0]
 800c294:	2310      	movs	r3, #16
 800c296:	18fb      	adds	r3, r7, r3
 800c298:	0018      	movs	r0, r3
 800c29a:	f001 f89d 	bl	800d3d8 <sensirion_i2c_add_command_to_buffer>
 800c29e:	0003      	movs	r3, r0
 800c2a0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c2a2:	261c      	movs	r6, #28
 800c2a4:	19bc      	adds	r4, r7, r6
 800c2a6:	197b      	adds	r3, r7, r5
 800c2a8:	881a      	ldrh	r2, [r3, #0]
 800c2aa:	2310      	movs	r3, #16
 800c2ac:	18fb      	adds	r3, r7, r3
 800c2ae:	0019      	movs	r1, r3
 800c2b0:	2069      	movs	r0, #105	@ 0x69
 800c2b2:	f001 f915 	bl	800d4e0 <sensirion_i2c_write_data>
 800c2b6:	0003      	movs	r3, r0
 800c2b8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c2ba:	19bb      	adds	r3, r7, r6
 800c2bc:	2200      	movs	r2, #0
 800c2be:	5e9b      	ldrsh	r3, [r3, r2]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d003      	beq.n	800c2cc <sen5x_get_version+0x58>
        return error;
 800c2c4:	19bb      	adds	r3, r7, r6
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	5e9b      	ldrsh	r3, [r3, r2]
 800c2ca:	e038      	b.n	800c33e <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800c2cc:	4b1e      	ldr	r3, [pc, #120]	@ (800c348 <sen5x_get_version+0xd4>)
 800c2ce:	0018      	movs	r0, r3
 800c2d0:	f7ff fb12 	bl	800b8f8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800c2d4:	251c      	movs	r5, #28
 800c2d6:	197c      	adds	r4, r7, r5
 800c2d8:	2310      	movs	r3, #16
 800c2da:	18fb      	adds	r3, r7, r3
 800c2dc:	2208      	movs	r2, #8
 800c2de:	0019      	movs	r1, r3
 800c2e0:	2069      	movs	r0, #105	@ 0x69
 800c2e2:	f001 f915 	bl	800d510 <sensirion_i2c_read_data_inplace>
 800c2e6:	0003      	movs	r3, r0
 800c2e8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c2ea:	197b      	adds	r3, r7, r5
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	5e9b      	ldrsh	r3, [r3, r2]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d003      	beq.n	800c2fc <sen5x_get_version+0x88>
        return error;
 800c2f4:	197b      	adds	r3, r7, r5
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	5e9b      	ldrsh	r3, [r3, r2]
 800c2fa:	e020      	b.n	800c33e <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800c2fc:	2110      	movs	r1, #16
 800c2fe:	187b      	adds	r3, r7, r1
 800c300:	781a      	ldrb	r2, [r3, #0]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800c306:	187b      	adds	r3, r7, r1
 800c308:	785a      	ldrb	r2, [r3, #1]
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800c30e:	187b      	adds	r3, r7, r1
 800c310:	789b      	ldrb	r3, [r3, #2]
 800c312:	1e5a      	subs	r2, r3, #1
 800c314:	4193      	sbcs	r3, r2
 800c316:	b2da      	uxtb	r2, r3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800c31c:	187b      	adds	r3, r7, r1
 800c31e:	78da      	ldrb	r2, [r3, #3]
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800c324:	187b      	adds	r3, r7, r1
 800c326:	791a      	ldrb	r2, [r3, #4]
 800c328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c32a:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800c32c:	187b      	adds	r3, r7, r1
 800c32e:	795a      	ldrb	r2, [r3, #5]
 800c330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c332:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800c334:	187b      	adds	r3, r7, r1
 800c336:	799a      	ldrb	r2, [r3, #6]
 800c338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c33a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	0018      	movs	r0, r3
 800c340:	46bd      	mov	sp, r7
 800c342:	b009      	add	sp, #36	@ 0x24
 800c344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c346:	46c0      	nop			@ (mov r8, r8)
 800c348:	00004e20 	.word	0x00004e20

0800c34c <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800c34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c34e:	b087      	sub	sp, #28
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800c354:	2516      	movs	r5, #22
 800c356:	197b      	adds	r3, r7, r5
 800c358:	2200      	movs	r2, #0
 800c35a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800c35c:	197c      	adds	r4, r7, r5
 800c35e:	4a22      	ldr	r2, [pc, #136]	@ (800c3e8 <sen5x_read_device_status+0x9c>)
 800c360:	197b      	adds	r3, r7, r5
 800c362:	8819      	ldrh	r1, [r3, #0]
 800c364:	230c      	movs	r3, #12
 800c366:	18fb      	adds	r3, r7, r3
 800c368:	0018      	movs	r0, r3
 800c36a:	f001 f835 	bl	800d3d8 <sensirion_i2c_add_command_to_buffer>
 800c36e:	0003      	movs	r3, r0
 800c370:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c372:	2614      	movs	r6, #20
 800c374:	19bc      	adds	r4, r7, r6
 800c376:	197b      	adds	r3, r7, r5
 800c378:	881a      	ldrh	r2, [r3, #0]
 800c37a:	230c      	movs	r3, #12
 800c37c:	18fb      	adds	r3, r7, r3
 800c37e:	0019      	movs	r1, r3
 800c380:	2069      	movs	r0, #105	@ 0x69
 800c382:	f001 f8ad 	bl	800d4e0 <sensirion_i2c_write_data>
 800c386:	0003      	movs	r3, r0
 800c388:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c38a:	19bb      	adds	r3, r7, r6
 800c38c:	2200      	movs	r2, #0
 800c38e:	5e9b      	ldrsh	r3, [r3, r2]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d003      	beq.n	800c39c <sen5x_read_device_status+0x50>
        return error;
 800c394:	19bb      	adds	r3, r7, r6
 800c396:	2200      	movs	r2, #0
 800c398:	5e9b      	ldrsh	r3, [r3, r2]
 800c39a:	e020      	b.n	800c3de <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800c39c:	4b13      	ldr	r3, [pc, #76]	@ (800c3ec <sen5x_read_device_status+0xa0>)
 800c39e:	0018      	movs	r0, r3
 800c3a0:	f7ff faaa 	bl	800b8f8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800c3a4:	2514      	movs	r5, #20
 800c3a6:	197c      	adds	r4, r7, r5
 800c3a8:	230c      	movs	r3, #12
 800c3aa:	18fb      	adds	r3, r7, r3
 800c3ac:	2204      	movs	r2, #4
 800c3ae:	0019      	movs	r1, r3
 800c3b0:	2069      	movs	r0, #105	@ 0x69
 800c3b2:	f001 f8ad 	bl	800d510 <sensirion_i2c_read_data_inplace>
 800c3b6:	0003      	movs	r3, r0
 800c3b8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c3ba:	197b      	adds	r3, r7, r5
 800c3bc:	2200      	movs	r2, #0
 800c3be:	5e9b      	ldrsh	r3, [r3, r2]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d003      	beq.n	800c3cc <sen5x_read_device_status+0x80>
        return error;
 800c3c4:	197b      	adds	r3, r7, r5
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	5e9b      	ldrsh	r3, [r3, r2]
 800c3ca:	e008      	b.n	800c3de <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800c3cc:	230c      	movs	r3, #12
 800c3ce:	18fb      	adds	r3, r7, r3
 800c3d0:	0018      	movs	r0, r3
 800c3d2:	f000 f850 	bl	800c476 <sensirion_common_bytes_to_uint32_t>
 800c3d6:	0002      	movs	r2, r0
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	0018      	movs	r0, r3
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	b007      	add	sp, #28
 800c3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3e6:	46c0      	nop			@ (mov r8, r8)
 800c3e8:	0000d206 	.word	0x0000d206
 800c3ec:	00004e20 	.word	0x00004e20

0800c3f0 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800c3f0:	b590      	push	{r4, r7, lr}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800c3f6:	1dbb      	adds	r3, r7, #6
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800c3fc:	1dbc      	adds	r4, r7, #6
 800c3fe:	4a12      	ldr	r2, [pc, #72]	@ (800c448 <sen5x_device_reset+0x58>)
 800c400:	1dbb      	adds	r3, r7, #6
 800c402:	8819      	ldrh	r1, [r3, #0]
 800c404:	003b      	movs	r3, r7
 800c406:	0018      	movs	r0, r3
 800c408:	f000 ffe6 	bl	800d3d8 <sensirion_i2c_add_command_to_buffer>
 800c40c:	0003      	movs	r3, r0
 800c40e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c410:	1d3c      	adds	r4, r7, #4
 800c412:	1dbb      	adds	r3, r7, #6
 800c414:	881a      	ldrh	r2, [r3, #0]
 800c416:	003b      	movs	r3, r7
 800c418:	0019      	movs	r1, r3
 800c41a:	2069      	movs	r0, #105	@ 0x69
 800c41c:	f001 f860 	bl	800d4e0 <sensirion_i2c_write_data>
 800c420:	0003      	movs	r3, r0
 800c422:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c424:	1d3b      	adds	r3, r7, #4
 800c426:	2200      	movs	r2, #0
 800c428:	5e9b      	ldrsh	r3, [r3, r2]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d003      	beq.n	800c436 <sen5x_device_reset+0x46>
        return error;
 800c42e:	1d3b      	adds	r3, r7, #4
 800c430:	2200      	movs	r2, #0
 800c432:	5e9b      	ldrsh	r3, [r3, r2]
 800c434:	e004      	b.n	800c440 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800c436:	4b05      	ldr	r3, [pc, #20]	@ (800c44c <sen5x_device_reset+0x5c>)
 800c438:	0018      	movs	r0, r3
 800c43a:	f7ff fa5d 	bl	800b8f8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	0018      	movs	r0, r3
 800c442:	46bd      	mov	sp, r7
 800c444:	b003      	add	sp, #12
 800c446:	bd90      	pop	{r4, r7, pc}
 800c448:	0000d304 	.word	0x0000d304
 800c44c:	00030d40 	.word	0x00030d40

0800c450 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	021b      	lsls	r3, r3, #8
 800c45e:	b21a      	sxth	r2, r3
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3301      	adds	r3, #1
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	b21b      	sxth	r3, r3
 800c468:	4313      	orrs	r3, r2
 800c46a:	b21b      	sxth	r3, r3
 800c46c:	b29b      	uxth	r3, r3
}
 800c46e:	0018      	movs	r0, r3
 800c470:	46bd      	mov	sp, r7
 800c472:	b002      	add	sp, #8
 800c474:	bd80      	pop	{r7, pc}

0800c476 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800c476:	b580      	push	{r7, lr}
 800c478:	b082      	sub	sp, #8
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	061a      	lsls	r2, r3, #24
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	3301      	adds	r3, #1
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	041b      	lsls	r3, r3, #16
 800c48c:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	3302      	adds	r3, #2
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800c496:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	3203      	adds	r2, #3
 800c49c:	7812      	ldrb	r2, [r2, #0]
 800c49e:	4313      	orrs	r3, r2
}
 800c4a0:	0018      	movs	r0, r3
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	b002      	add	sp, #8
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	0018      	movs	r0, r3
 800c4b4:	f7ff ffcc 	bl	800c450 <sensirion_common_bytes_to_uint16_t>
 800c4b8:	0003      	movs	r3, r0
 800c4ba:	b21b      	sxth	r3, r3
}
 800c4bc:	0018      	movs	r0, r3
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	b002      	add	sp, #8
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	1dbb      	adds	r3, r7, #6
 800c4d0:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800c4d2:	2316      	movs	r3, #22
 800c4d4:	18fb      	adds	r3, r7, r3
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	801a      	strh	r2, [r3, #0]
 800c4da:	e00f      	b.n	800c4fc <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800c4dc:	2016      	movs	r0, #22
 800c4de:	183b      	adds	r3, r7, r0
 800c4e0:	881b      	ldrh	r3, [r3, #0]
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	18d2      	adds	r2, r2, r3
 800c4e6:	183b      	adds	r3, r7, r0
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	68b9      	ldr	r1, [r7, #8]
 800c4ec:	18cb      	adds	r3, r1, r3
 800c4ee:	7812      	ldrb	r2, [r2, #0]
 800c4f0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800c4f2:	183b      	adds	r3, r7, r0
 800c4f4:	881a      	ldrh	r2, [r3, #0]
 800c4f6:	183b      	adds	r3, r7, r0
 800c4f8:	3201      	adds	r2, #1
 800c4fa:	801a      	strh	r2, [r3, #0]
 800c4fc:	2316      	movs	r3, #22
 800c4fe:	18fa      	adds	r2, r7, r3
 800c500:	1dbb      	adds	r3, r7, #6
 800c502:	8812      	ldrh	r2, [r2, #0]
 800c504:	881b      	ldrh	r3, [r3, #0]
 800c506:	429a      	cmp	r2, r3
 800c508:	d3e8      	bcc.n	800c4dc <sensirion_common_copy_bytes+0x18>
    }
}
 800c50a:	46c0      	nop			@ (mov r8, r8)
 800c50c:	46c0      	nop			@ (mov r8, r8)
 800c50e:	46bd      	mov	sp, r7
 800c510:	b006      	add	sp, #24
 800c512:	bd80      	pop	{r7, pc}

0800c514 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	68ba      	ldr	r2, [r7, #8]
 800c524:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d113      	bne.n	800c55a <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	22fe      	movs	r2, #254	@ 0xfe
 800c536:	0592      	lsls	r2, r2, #22
 800c538:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	4a1a      	ldr	r2, [pc, #104]	@ (800c5a8 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800c53e:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	4a1a      	ldr	r2, [pc, #104]	@ (800c5ac <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800c544:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	4a19      	ldr	r2, [pc, #100]	@ (800c5b0 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800c54a:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4a19      	ldr	r2, [pc, #100]	@ (800c5b4 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800c550:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	4a18      	ldr	r2, [pc, #96]	@ (800c5b8 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800c556:	61da      	str	r2, [r3, #28]
 800c558:	e011      	b.n	800c57e <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	4a17      	ldr	r2, [pc, #92]	@ (800c5bc <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800c55e:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	4a17      	ldr	r2, [pc, #92]	@ (800c5c0 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800c564:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	4a16      	ldr	r2, [pc, #88]	@ (800c5c4 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800c56a:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	4a16      	ldr	r2, [pc, #88]	@ (800c5c8 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800c570:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	4a15      	ldr	r2, [pc, #84]	@ (800c5cc <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800c576:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	4a15      	ldr	r2, [pc, #84]	@ (800c5d0 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800c57c:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	4a14      	ldr	r2, [pc, #80]	@ (800c5d4 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800c582:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	4a14      	ldr	r2, [pc, #80]	@ (800c5d8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800c588:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	4a12      	ldr	r2, [pc, #72]	@ (800c5d8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800c58e:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	4a12      	ldr	r2, [pc, #72]	@ (800c5dc <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800c594:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	0018      	movs	r0, r3
 800c59a:	f000 f833 	bl	800c604 <GasIndexAlgorithm_reset>
}
 800c59e:	46c0      	nop			@ (mov r8, r8)
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	b004      	add	sp, #16
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	46c0      	nop			@ (mov r8, r8)
 800c5a8:	00002710 	.word	0x00002710
 800c5ac:	44340000 	.word	0x44340000
 800c5b0:	46859800 	.word	0x46859800
 800c5b4:	46a05000 	.word	0x46a05000
 800c5b8:	41f00000 	.word	0x41f00000
 800c5bc:	42c80000 	.word	0x42c80000
 800c5c0:	00004e20 	.word	0x00004e20
 800c5c4:	43340000 	.word	0x43340000
 800c5c8:	4528c000 	.word	0x4528c000
 800c5cc:	45a32000 	.word	0x45a32000
 800c5d0:	43aa0000 	.word	0x43aa0000
 800c5d4:	43660000 	.word	0x43660000
 800c5d8:	41400000 	.word	0x41400000
 800c5dc:	42480000 	.word	0x42480000

0800c5e0 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800c5ea:	4a05      	ldr	r2, [pc, #20]	@ (800c600 <GasIndexAlgorithm_init+0x20>)
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	0018      	movs	r0, r3
 800c5f2:	f7ff ff8f 	bl	800c514 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800c5f6:	46c0      	nop			@ (mov r8, r8)
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	b002      	add	sp, #8
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	46c0      	nop			@ (mov r8, r8)
 800c600:	44610000 	.word	0x44610000

0800c604 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	0018      	movs	r0, r3
 800c622:	f000 f805 	bl	800c630 <GasIndexAlgorithm__init_instances>
}
 800c626:	46c0      	nop			@ (mov r8, r8)
 800c628:	46bd      	mov	sp, r7
 800c62a:	b002      	add	sp, #8
 800c62c:	bd80      	pop	{r7, pc}
	...

0800c630 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800c630:	b590      	push	{r4, r7, lr}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	0018      	movs	r0, r3
 800c63c:	f000 f8e8 	bl	800c810 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	0018      	movs	r0, r3
 800c644:	f000 f9a6 	bl	800c994 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800c648:	1c04      	adds	r4, r0, #0
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	0018      	movs	r0, r3
 800c64e:	f000 f9ab 	bl	800c9a8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800c652:	1c02      	adds	r2, r0, #0
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	1c21      	adds	r1, r4, #0
 800c658:	0018      	movs	r0, r3
 800c65a:	f000 fc3b 	bl	800ced4 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b01      	cmp	r3, #1
 800c664:	d107      	bne.n	800c676 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800c666:	23fe      	movs	r3, #254	@ 0xfe
 800c668:	059b      	lsls	r3, r3, #22
 800c66a:	4a0a      	ldr	r2, [pc, #40]	@ (800c694 <GasIndexAlgorithm__init_instances+0x64>)
 800c66c:	490a      	ldr	r1, [pc, #40]	@ (800c698 <GasIndexAlgorithm__init_instances+0x68>)
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 fc86 	bl	800cf80 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800c674:	e005      	b.n	800c682 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800c676:	4b09      	ldr	r3, [pc, #36]	@ (800c69c <GasIndexAlgorithm__init_instances+0x6c>)
 800c678:	4a09      	ldr	r2, [pc, #36]	@ (800c6a0 <GasIndexAlgorithm__init_instances+0x70>)
 800c67a:	490a      	ldr	r1, [pc, #40]	@ (800c6a4 <GasIndexAlgorithm__init_instances+0x74>)
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 fc7f 	bl	800cf80 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	0018      	movs	r0, r3
 800c686:	f000 fd35 	bl	800d0f4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800c68a:	46c0      	nop			@ (mov r8, r8)
 800c68c:	46bd      	mov	sp, r7
 800c68e:	b003      	add	sp, #12
 800c690:	bd90      	pop	{r4, r7, pc}
 800c692:	46c0      	nop			@ (mov r8, r8)
 800c694:	bc257a78 	.word	0xbc257a78
 800c698:	44198000 	.word	0x44198000
 800c69c:	42c80000 	.word	0x42c80000
 800c6a0:	bbd4fdf4 	.word	0xbbd4fdf4
 800c6a4:	43550000 	.word	0x43550000

0800c6a8 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800c6a8:	b590      	push	{r4, r7, lr}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6b8:	4952      	ldr	r1, [pc, #328]	@ (800c804 <GasIndexAlgorithm_process+0x15c>)
 800c6ba:	1c18      	adds	r0, r3, #0
 800c6bc:	f7f3 ff42 	bl	8000544 <__aeabi_fcmple>
 800c6c0:	1e03      	subs	r3, r0, #0
 800c6c2:	d00c      	beq.n	800c6de <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	1c19      	adds	r1, r3, #0
 800c6ce:	1c10      	adds	r0, r2, #0
 800c6d0:	f7f4 f8f6 	bl	80008c0 <__aeabi_fadd>
 800c6d4:	1c03      	adds	r3, r0, #0
 800c6d6:	1c1a      	adds	r2, r3, #0
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	631a      	str	r2, [r3, #48]	@ 0x30
 800c6dc:	e080      	b.n	800c7e0 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	dd25      	ble.n	800c730 <GasIndexAlgorithm_process+0x88>
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	4a48      	ldr	r2, [pc, #288]	@ (800c808 <GasIndexAlgorithm_process+0x160>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	dc21      	bgt.n	800c730 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	68ba      	ldr	r2, [r7, #8]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	dc04      	bgt.n	800c700 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	60bb      	str	r3, [r7, #8]
 800c6fe:	e00d      	b.n	800c71c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	4a41      	ldr	r2, [pc, #260]	@ (800c80c <GasIndexAlgorithm_process+0x164>)
 800c706:	4694      	mov	ip, r2
 800c708:	4463      	add	r3, ip
 800c70a:	68ba      	ldr	r2, [r7, #8]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	dd05      	ble.n	800c71c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	4a3d      	ldr	r2, [pc, #244]	@ (800c80c <GasIndexAlgorithm_process+0x164>)
 800c716:	4694      	mov	ip, r2
 800c718:	4463      	add	r3, ip
 800c71a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	1ad3      	subs	r3, r2, r3
 800c724:	0018      	movs	r0, r3
 800c726:	f7f4 ff53 	bl	80015d0 <__aeabi_i2f>
 800c72a:	1c02      	adds	r2, r0, #0
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d005      	beq.n	800c744 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	0018      	movs	r0, r3
 800c73c:	f000 f945 	bl	800c9ca <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800c740:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800c742:	d014      	beq.n	800c76e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	1c11      	adds	r1, r2, #0
 800c74c:	0018      	movs	r0, r3
 800c74e:	f000 fbd1 	bl	800cef4 <GasIndexAlgorithm__mox_model__process>
 800c752:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	1c11      	adds	r1, r2, #0
 800c760:	0018      	movs	r0, r3
 800c762:	f000 fc25 	bl	800cfb0 <GasIndexAlgorithm__sigmoid_scaled__process>
 800c766:	1c02      	adds	r2, r0, #0
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	639a      	str	r2, [r3, #56]	@ 0x38
 800c76c:	e003      	b.n	800c776 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	689a      	ldr	r2, [r3, #8]
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	1c11      	adds	r1, r2, #0
 800c77e:	0018      	movs	r0, r3
 800c780:	f000 fcec 	bl	800d15c <GasIndexAlgorithm__adaptive_lowpass__process>
 800c784:	1c02      	adds	r2, r0, #0
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c78e:	21fc      	movs	r1, #252	@ 0xfc
 800c790:	0589      	lsls	r1, r1, #22
 800c792:	1c18      	adds	r0, r3, #0
 800c794:	f7f3 fecc 	bl	8000530 <__aeabi_fcmplt>
 800c798:	1e03      	subs	r3, r0, #0
 800c79a:	d003      	beq.n	800c7a4 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	22fc      	movs	r2, #252	@ 0xfc
 800c7a0:	0592      	lsls	r2, r2, #22
 800c7a2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	1c18      	adds	r0, r3, #0
 800c7ac:	f7f3 fed4 	bl	8000558 <__aeabi_fcmpgt>
 800c7b0:	1e03      	subs	r3, r0, #0
 800c7b2:	d015      	beq.n	800c7e0 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	1c11      	adds	r1, r2, #0
 800c7bc:	0018      	movs	r0, r3
 800c7be:	f000 fa4f 	bl	800cc60 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	0018      	movs	r0, r3
 800c7c6:	f000 f8e5 	bl	800c994 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800c7ca:	1c04      	adds	r4, r0, #0
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	0018      	movs	r0, r3
 800c7d0:	f000 f8ea 	bl	800c9a8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800c7d4:	1c02      	adds	r2, r0, #0
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	1c21      	adds	r1, r4, #0
 800c7da:	0018      	movs	r0, r3
 800c7dc:	f000 fb7a 	bl	800ced4 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7e4:	21fc      	movs	r1, #252	@ 0xfc
 800c7e6:	0589      	lsls	r1, r1, #22
 800c7e8:	1c18      	adds	r0, r3, #0
 800c7ea:	f7f4 f869 	bl	80008c0 <__aeabi_fadd>
 800c7ee:	1c03      	adds	r3, r0, #0
 800c7f0:	1c18      	adds	r0, r3, #0
 800c7f2:	f7f4 fecd 	bl	8001590 <__aeabi_f2iz>
 800c7f6:	0002      	movs	r2, r0
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	601a      	str	r2, [r3, #0]
    return;
 800c7fc:	46c0      	nop			@ (mov r8, r8)
}
 800c7fe:	46bd      	mov	sp, r7
 800c800:	b005      	add	sp, #20
 800c802:	bd90      	pop	{r4, r7, pc}
 800c804:	42340000 	.word	0x42340000
 800c808:	0000fde7 	.word	0x0000fde7
 800c80c:	00007fff 	.word	0x00007fff

0800c810 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800c810:	b5b0      	push	{r4, r5, r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	223c      	movs	r2, #60	@ 0x3c
 800c81c:	2100      	movs	r1, #0
 800c81e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	4952      	ldr	r1, [pc, #328]	@ (800c984 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800c83a:	1c18      	adds	r0, r3, #0
 800c83c:	f7f4 f9ca 	bl	8000bd4 <__aeabi_fdiv>
 800c840:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800c842:	2188      	movs	r1, #136	@ 0x88
 800c844:	05c9      	lsls	r1, r1, #23
 800c846:	1c18      	adds	r0, r3, #0
 800c848:	f7f4 fbaa 	bl	8000fa0 <__aeabi_fmul>
 800c84c:	1c03      	adds	r3, r0, #0
 800c84e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	494a      	ldr	r1, [pc, #296]	@ (800c984 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800c85a:	1c18      	adds	r0, r3, #0
 800c85c:	f7f4 f9ba 	bl	8000bd4 <__aeabi_fdiv>
 800c860:	1c03      	adds	r3, r0, #0
 800c862:	1c19      	adds	r1, r3, #0
 800c864:	1c20      	adds	r0, r4, #0
 800c866:	f7f4 f82b 	bl	80008c0 <__aeabi_fadd>
 800c86a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800c86c:	1c19      	adds	r1, r3, #0
 800c86e:	1c28      	adds	r0, r5, #0
 800c870:	f7f4 f9b0 	bl	8000bd4 <__aeabi_fdiv>
 800c874:	1c03      	adds	r3, r0, #0
 800c876:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	4940      	ldr	r1, [pc, #256]	@ (800c984 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800c882:	1c18      	adds	r0, r3, #0
 800c884:	f7f4 f9a6 	bl	8000bd4 <__aeabi_fdiv>
 800c888:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800c88a:	2185      	movs	r1, #133	@ 0x85
 800c88c:	05c9      	lsls	r1, r1, #23
 800c88e:	1c18      	adds	r0, r3, #0
 800c890:	f7f4 fb86 	bl	8000fa0 <__aeabi_fmul>
 800c894:	1c03      	adds	r3, r0, #0
 800c896:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	4938      	ldr	r1, [pc, #224]	@ (800c984 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800c8a2:	1c18      	adds	r0, r3, #0
 800c8a4:	f7f4 f996 	bl	8000bd4 <__aeabi_fdiv>
 800c8a8:	1c03      	adds	r3, r0, #0
 800c8aa:	1c19      	adds	r1, r3, #0
 800c8ac:	1c20      	adds	r0, r4, #0
 800c8ae:	f7f4 f807 	bl	80008c0 <__aeabi_fadd>
 800c8b2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800c8b4:	1c19      	adds	r1, r3, #0
 800c8b6:	1c28      	adds	r0, r5, #0
 800c8b8:	f7f4 f98c 	bl	8000bd4 <__aeabi_fdiv>
 800c8bc:	1c03      	adds	r3, r0, #0
 800c8be:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d118      	bne.n	800c8fe <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800c8d0:	2188      	movs	r1, #136	@ 0x88
 800c8d2:	05c9      	lsls	r1, r1, #23
 800c8d4:	1c18      	adds	r0, r3, #0
 800c8d6:	f7f4 fb63 	bl	8000fa0 <__aeabi_fmul>
 800c8da:	1c03      	adds	r3, r0, #0
 800c8dc:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800c8e2:	4929      	ldr	r1, [pc, #164]	@ (800c988 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800c8e4:	1c18      	adds	r0, r3, #0
 800c8e6:	f7f3 ffeb 	bl	80008c0 <__aeabi_fadd>
 800c8ea:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800c8ec:	1c19      	adds	r1, r3, #0
 800c8ee:	1c20      	adds	r0, r4, #0
 800c8f0:	f7f4 f970 	bl	8000bd4 <__aeabi_fdiv>
 800c8f4:	1c03      	adds	r3, r0, #0
 800c8f6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	655a      	str	r2, [r3, #84]	@ 0x54
 800c8fc:	e017      	b.n	800c92e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800c902:	2188      	movs	r1, #136	@ 0x88
 800c904:	05c9      	lsls	r1, r1, #23
 800c906:	1c18      	adds	r0, r3, #0
 800c908:	f7f4 fb4a 	bl	8000fa0 <__aeabi_fmul>
 800c90c:	1c03      	adds	r3, r0, #0
 800c90e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800c914:	491d      	ldr	r1, [pc, #116]	@ (800c98c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800c916:	1c18      	adds	r0, r3, #0
 800c918:	f7f3 ffd2 	bl	80008c0 <__aeabi_fadd>
 800c91c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800c91e:	1c19      	adds	r1, r3, #0
 800c920:	1c20      	adds	r0, r4, #0
 800c922:	f7f4 f957 	bl	8000bd4 <__aeabi_fdiv>
 800c926:	1c03      	adds	r3, r0, #0
 800c928:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800c932:	2185      	movs	r1, #133	@ 0x85
 800c934:	05c9      	lsls	r1, r1, #23
 800c936:	1c18      	adds	r0, r3, #0
 800c938:	f7f4 fb32 	bl	8000fa0 <__aeabi_fmul>
 800c93c:	1c03      	adds	r3, r0, #0
 800c93e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	4912      	ldr	r1, [pc, #72]	@ (800c990 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800c946:	1c18      	adds	r0, r3, #0
 800c948:	f7f3 ffba 	bl	80008c0 <__aeabi_fadd>
 800c94c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800c94e:	1c19      	adds	r1, r3, #0
 800c950:	1c20      	adds	r0, r4, #0
 800c952:	f7f4 f93f 	bl	8000bd4 <__aeabi_fdiv>
 800c956:	1c03      	adds	r3, r0, #0
 800c958:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2200      	movs	r2, #0
 800c962:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800c97c:	46c0      	nop			@ (mov r8, r8)
 800c97e:	46bd      	mov	sp, r7
 800c980:	b002      	add	sp, #8
 800c982:	bdb0      	pop	{r4, r5, r7, pc}
 800c984:	45610000 	.word	0x45610000
 800c988:	44960000 	.word	0x44960000
 800c98c:	41a00000 	.word	0x41a00000
 800c990:	451c4000 	.word	0x451c4000

0800c994 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800c9a0:	1c18      	adds	r0, r3, #0
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	b002      	add	sp, #8
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800c9b8:	1c19      	adds	r1, r3, #0
 800c9ba:	1c10      	adds	r0, r2, #0
 800c9bc:	f7f3 ff80 	bl	80008c0 <__aeabi_fadd>
 800c9c0:	1c03      	adds	r3, r0, #0
}
 800c9c2:	1c18      	adds	r0, r3, #0
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	b002      	add	sp, #8
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b082      	sub	sp, #8
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	223c      	movs	r2, #60	@ 0x3c
 800c9d6:	5c9b      	ldrb	r3, [r3, r2]
}
 800c9d8:	0018      	movs	r0, r3
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	b002      	add	sp, #8
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800c9e0:	b5b0      	push	{r4, r5, r7, lr}
 800c9e2:	b08c      	sub	sp, #48	@ 0x30
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800c9ec:	1c19      	adds	r1, r3, #0
 800c9ee:	4895      	ldr	r0, [pc, #596]	@ (800cc44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800c9f0:	f7f4 fc14 	bl	800121c <__aeabi_fsub>
 800c9f4:	1c03      	adds	r3, r0, #0
 800c9f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9fc:	1c19      	adds	r1, r3, #0
 800c9fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca00:	f7f3 fdaa 	bl	8000558 <__aeabi_fcmpgt>
 800ca04:	1e03      	subs	r3, r0, #0
 800ca06:	d00b      	beq.n	800ca20 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ca10:	1c19      	adds	r1, r3, #0
 800ca12:	1c10      	adds	r0, r2, #0
 800ca14:	f7f3 ff54 	bl	80008c0 <__aeabi_fadd>
 800ca18:	1c03      	adds	r3, r0, #0
 800ca1a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca24:	1c19      	adds	r1, r3, #0
 800ca26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca28:	f7f3 fd96 	bl	8000558 <__aeabi_fcmpgt>
 800ca2c:	1e03      	subs	r3, r0, #0
 800ca2e:	d00b      	beq.n	800ca48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800ca38:	1c19      	adds	r1, r3, #0
 800ca3a:	1c10      	adds	r0, r2, #0
 800ca3c:	f7f3 ff40 	bl	80008c0 <__aeabi_fadd>
 800ca40:	1c03      	adds	r3, r0, #0
 800ca42:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6959      	ldr	r1, [r3, #20]
 800ca4c:	4a7e      	ldr	r2, [pc, #504]	@ (800cc48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	0018      	movs	r0, r3
 800ca52:	f000 f9f1 	bl	800ce38 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	1c11      	adds	r1, r2, #0
 800ca5e:	0018      	movs	r0, r3
 800ca60:	f000 f9fa 	bl	800ce58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ca64:	1c03      	adds	r3, r0, #0
 800ca66:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800ca74:	1c19      	adds	r1, r3, #0
 800ca76:	1c10      	adds	r0, r2, #0
 800ca78:	f7f4 fbd0 	bl	800121c <__aeabi_fsub>
 800ca7c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800ca7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca80:	1c18      	adds	r0, r3, #0
 800ca82:	f7f4 fa8d 	bl	8000fa0 <__aeabi_fmul>
 800ca86:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800ca88:	1c19      	adds	r1, r3, #0
 800ca8a:	1c20      	adds	r0, r4, #0
 800ca8c:	f7f3 ff18 	bl	80008c0 <__aeabi_fadd>
 800ca90:	1c03      	adds	r3, r0, #0
 800ca92:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ca9c:	1c19      	adds	r1, r3, #0
 800ca9e:	486b      	ldr	r0, [pc, #428]	@ (800cc4c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800caa0:	f7f4 fbbc 	bl	800121c <__aeabi_fsub>
 800caa4:	1c03      	adds	r3, r0, #0
 800caa6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	1c11      	adds	r1, r2, #0
 800cab0:	0018      	movs	r0, r3
 800cab2:	f000 f9d1 	bl	800ce58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cab6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800cab8:	1c19      	adds	r1, r3, #0
 800caba:	1c28      	adds	r0, r5, #0
 800cabc:	f7f4 fa70 	bl	8000fa0 <__aeabi_fmul>
 800cac0:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800cac2:	1c19      	adds	r1, r3, #0
 800cac4:	1c20      	adds	r0, r4, #0
 800cac6:	f7f3 fefb 	bl	80008c0 <__aeabi_fadd>
 800caca:	1c03      	adds	r3, r0, #0
 800cacc:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800cace:	4a60      	ldr	r2, [pc, #384]	@ (800cc50 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800cad0:	6a39      	ldr	r1, [r7, #32]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	0018      	movs	r0, r3
 800cad6:	f000 f9af 	bl	800ce38 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	1c11      	adds	r1, r2, #0
 800cae2:	0018      	movs	r0, r3
 800cae4:	f000 f9b8 	bl	800ce58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cae8:	1c03      	adds	r3, r0, #0
 800caea:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800caec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800caee:	69f8      	ldr	r0, [r7, #28]
 800caf0:	f7f4 fa56 	bl	8000fa0 <__aeabi_fmul>
 800caf4:	1c03      	adds	r3, r0, #0
 800caf6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6999      	ldr	r1, [r3, #24]
 800cb00:	4a51      	ldr	r2, [pc, #324]	@ (800cc48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	0018      	movs	r0, r3
 800cb06:	f000 f997 	bl	800ce38 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	1c11      	adds	r1, r2, #0
 800cb12:	0018      	movs	r0, r3
 800cb14:	f000 f9a0 	bl	800ce58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cb18:	1c03      	adds	r3, r0, #0
 800cb1a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800cb28:	1c19      	adds	r1, r3, #0
 800cb2a:	1c10      	adds	r0, r2, #0
 800cb2c:	f7f4 fb76 	bl	800121c <__aeabi_fsub>
 800cb30:	1c03      	adds	r3, r0, #0
 800cb32:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800cb34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb36:	69b8      	ldr	r0, [r7, #24]
 800cb38:	f7f4 fb70 	bl	800121c <__aeabi_fsub>
 800cb3c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800cb3e:	1c19      	adds	r1, r3, #0
 800cb40:	1c28      	adds	r0, r5, #0
 800cb42:	f7f4 fa2d 	bl	8000fa0 <__aeabi_fmul>
 800cb46:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800cb48:	1c19      	adds	r1, r3, #0
 800cb4a:	1c20      	adds	r0, r4, #0
 800cb4c:	f7f3 feb8 	bl	80008c0 <__aeabi_fadd>
 800cb50:	1c03      	adds	r3, r0, #0
 800cb52:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800cb5c:	1c19      	adds	r1, r3, #0
 800cb5e:	483b      	ldr	r0, [pc, #236]	@ (800cc4c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800cb60:	f7f4 fb5c 	bl	800121c <__aeabi_fsub>
 800cb64:	1c03      	adds	r3, r0, #0
 800cb66:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	1c11      	adds	r1, r2, #0
 800cb70:	0018      	movs	r0, r3
 800cb72:	f000 f971 	bl	800ce58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cb76:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800cb78:	1c19      	adds	r1, r3, #0
 800cb7a:	1c28      	adds	r0, r5, #0
 800cb7c:	f7f4 fa10 	bl	8000fa0 <__aeabi_fmul>
 800cb80:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800cb82:	1c19      	adds	r1, r3, #0
 800cb84:	1c20      	adds	r0, r4, #0
 800cb86:	f7f3 fe9b 	bl	80008c0 <__aeabi_fadd>
 800cb8a:	1c03      	adds	r3, r0, #0
 800cb8c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800cb8e:	4a30      	ldr	r2, [pc, #192]	@ (800cc50 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800cb90:	6939      	ldr	r1, [r7, #16]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	0018      	movs	r0, r3
 800cb96:	f000 f94f 	bl	800ce38 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	1c11      	adds	r1, r2, #0
 800cba2:	0018      	movs	r0, r3
 800cba4:	f000 f958 	bl	800ce58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cba8:	1c03      	adds	r3, r0, #0
 800cbaa:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800cbac:	6979      	ldr	r1, [r7, #20]
 800cbae:	68f8      	ldr	r0, [r7, #12]
 800cbb0:	f7f4 f9f6 	bl	8000fa0 <__aeabi_fmul>
 800cbb4:	1c03      	adds	r3, r0, #0
 800cbb6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	4923      	ldr	r1, [pc, #140]	@ (800cc54 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800cbc6:	1c18      	adds	r0, r3, #0
 800cbc8:	f7f4 f804 	bl	8000bd4 <__aeabi_fdiv>
 800cbcc:	1c03      	adds	r3, r0, #0
 800cbce:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800cbd0:	69f9      	ldr	r1, [r7, #28]
 800cbd2:	20fe      	movs	r0, #254	@ 0xfe
 800cbd4:	0580      	lsls	r0, r0, #22
 800cbd6:	f7f4 fb21 	bl	800121c <__aeabi_fsub>
 800cbda:	1c03      	adds	r3, r0, #0
 800cbdc:	491e      	ldr	r1, [pc, #120]	@ (800cc58 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800cbde:	1c18      	adds	r0, r3, #0
 800cbe0:	f7f4 f9de 	bl	8000fa0 <__aeabi_fmul>
 800cbe4:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800cbe6:	491d      	ldr	r1, [pc, #116]	@ (800cc5c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800cbe8:	1c18      	adds	r0, r3, #0
 800cbea:	f7f4 fb17 	bl	800121c <__aeabi_fsub>
 800cbee:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800cbf0:	1c19      	adds	r1, r3, #0
 800cbf2:	1c28      	adds	r0, r5, #0
 800cbf4:	f7f4 f9d4 	bl	8000fa0 <__aeabi_fmul>
 800cbf8:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800cbfa:	1c19      	adds	r1, r3, #0
 800cbfc:	1c20      	adds	r0, r4, #0
 800cbfe:	f7f3 fe5f 	bl	80008c0 <__aeabi_fadd>
 800cc02:	1c03      	adds	r3, r0, #0
 800cc04:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc0e:	2100      	movs	r1, #0
 800cc10:	1c18      	adds	r0, r3, #0
 800cc12:	f7f3 fc8d 	bl	8000530 <__aeabi_fcmplt>
 800cc16:	1e03      	subs	r3, r0, #0
 800cc18:	d002      	beq.n	800cc20 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800cc28:	1c19      	adds	r1, r3, #0
 800cc2a:	1c10      	adds	r0, r2, #0
 800cc2c:	f7f3 fc94 	bl	8000558 <__aeabi_fcmpgt>
 800cc30:	1e03      	subs	r3, r0, #0
 800cc32:	d100      	bne.n	800cc36 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800cc34:	e002      	b.n	800cc3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800cc3c:	46c0      	nop			@ (mov r8, r8)
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	b00c      	add	sp, #48	@ 0x30
 800cc42:	bdb0      	pop	{r4, r5, r7, pc}
 800cc44:	46fffe00 	.word	0x46fffe00
 800cc48:	3c23d70a 	.word	0x3c23d70a
 800cc4c:	43ff0000 	.word	0x43ff0000
 800cc50:	3db851ec 	.word	0x3db851ec
 800cc54:	42700000 	.word	0x42700000
 800cc58:	3fa66666 	.word	0x3fa66666
 800cc5c:	3e99999a 	.word	0x3e99999a

0800cc60 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800cc60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc62:	b087      	sub	sp, #28
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	223c      	movs	r2, #60	@ 0x3c
 800cc6e:	5c9b      	ldrb	r3, [r3, r2]
 800cc70:	2201      	movs	r2, #1
 800cc72:	4053      	eors	r3, r2
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00a      	beq.n	800cc90 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	223c      	movs	r2, #60	@ 0x3c
 800cc7e:	2101      	movs	r1, #1
 800cc80:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	683a      	ldr	r2, [r7, #0]
 800cc86:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800cc8e:	e0c8      	b.n	800ce22 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc94:	4965      	ldr	r1, [pc, #404]	@ (800ce2c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800cc96:	1c18      	adds	r0, r3, #0
 800cc98:	f7f3 fc68 	bl	800056c <__aeabi_fcmpge>
 800cc9c:	1e03      	subs	r3, r0, #0
 800cc9e:	d107      	bne.n	800ccb0 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800cca4:	4962      	ldr	r1, [pc, #392]	@ (800ce30 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800cca6:	1c18      	adds	r0, r3, #0
 800cca8:	f7f3 fc4c 	bl	8000544 <__aeabi_fcmple>
 800ccac:	1e03      	subs	r3, r0, #0
 800ccae:	d00e      	beq.n	800ccce <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ccb8:	1c19      	adds	r1, r3, #0
 800ccba:	1c10      	adds	r0, r2, #0
 800ccbc:	f7f3 fe00 	bl	80008c0 <__aeabi_fadd>
 800ccc0:	1c03      	adds	r3, r0, #0
 800ccc2:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccd2:	1c19      	adds	r1, r3, #0
 800ccd4:	6838      	ldr	r0, [r7, #0]
 800ccd6:	f7f4 faa1 	bl	800121c <__aeabi_fsub>
 800ccda:	1c03      	adds	r3, r0, #0
 800ccdc:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	0018      	movs	r0, r3
 800cce2:	f7ff fe7d 	bl	800c9e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccea:	1c19      	adds	r1, r3, #0
 800ccec:	6838      	ldr	r0, [r7, #0]
 800ccee:	f7f4 fa95 	bl	800121c <__aeabi_fsub>
 800ccf2:	1c03      	adds	r3, r0, #0
 800ccf4:	2185      	movs	r1, #133	@ 0x85
 800ccf6:	05c9      	lsls	r1, r1, #23
 800ccf8:	1c18      	adds	r0, r3, #0
 800ccfa:	f7f3 ff6b 	bl	8000bd4 <__aeabi_fdiv>
 800ccfe:	1c03      	adds	r3, r0, #0
 800cd00:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800cd02:	2100      	movs	r1, #0
 800cd04:	68f8      	ldr	r0, [r7, #12]
 800cd06:	f7f3 fc13 	bl	8000530 <__aeabi_fcmplt>
 800cd0a:	1e03      	subs	r3, r0, #0
 800cd0c:	d008      	beq.n	800cd20 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd12:	68f9      	ldr	r1, [r7, #12]
 800cd14:	1c18      	adds	r0, r3, #0
 800cd16:	f7f4 fa81 	bl	800121c <__aeabi_fsub>
 800cd1a:	1c03      	adds	r3, r0, #0
 800cd1c:	617b      	str	r3, [r7, #20]
 800cd1e:	e007      	b.n	800cd30 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd24:	1c19      	adds	r1, r3, #0
 800cd26:	68f8      	ldr	r0, [r7, #12]
 800cd28:	f7f3 fdca 	bl	80008c0 <__aeabi_fadd>
 800cd2c:	1c03      	adds	r3, r0, #0
 800cd2e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800cd30:	23fe      	movs	r3, #254	@ 0xfe
 800cd32:	059b      	lsls	r3, r3, #22
 800cd34:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800cd36:	493f      	ldr	r1, [pc, #252]	@ (800ce34 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800cd38:	6978      	ldr	r0, [r7, #20]
 800cd3a:	f7f3 fc0d 	bl	8000558 <__aeabi_fcmpgt>
 800cd3e:	1e03      	subs	r3, r0, #0
 800cd40:	d010      	beq.n	800cd64 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800cd42:	493c      	ldr	r1, [pc, #240]	@ (800ce34 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800cd44:	6978      	ldr	r0, [r7, #20]
 800cd46:	f7f3 ff45 	bl	8000bd4 <__aeabi_fdiv>
 800cd4a:	1c03      	adds	r3, r0, #0
 800cd4c:	1c1c      	adds	r4, r3, #0
 800cd4e:	4939      	ldr	r1, [pc, #228]	@ (800ce34 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800cd50:	6978      	ldr	r0, [r7, #20]
 800cd52:	f7f3 ff3f 	bl	8000bd4 <__aeabi_fdiv>
 800cd56:	1c03      	adds	r3, r0, #0
 800cd58:	1c19      	adds	r1, r3, #0
 800cd5a:	1c20      	adds	r0, r4, #0
 800cd5c:	f7f4 f920 	bl	8000fa0 <__aeabi_fmul>
 800cd60:	1c03      	adds	r3, r0, #0
 800cd62:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800cd68:	1c19      	adds	r1, r3, #0
 800cd6a:	2085      	movs	r0, #133	@ 0x85
 800cd6c:	05c0      	lsls	r0, r0, #23
 800cd6e:	f7f4 fa55 	bl	800121c <__aeabi_fsub>
 800cd72:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800cd74:	6939      	ldr	r1, [r7, #16]
 800cd76:	1c18      	adds	r0, r3, #0
 800cd78:	f7f4 f912 	bl	8000fa0 <__aeabi_fmul>
 800cd7c:	1c03      	adds	r3, r0, #0
 800cd7e:	1c18      	adds	r0, r3, #0
 800cd80:	f018 fb04 	bl	802538c <sqrtf>
 800cd84:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800cd8e:	2185      	movs	r1, #133	@ 0x85
 800cd90:	05c9      	lsls	r1, r1, #23
 800cd92:	6938      	ldr	r0, [r7, #16]
 800cd94:	f7f4 f904 	bl	8000fa0 <__aeabi_fmul>
 800cd98:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800cd9a:	1c19      	adds	r1, r3, #0
 800cd9c:	1c28      	adds	r0, r5, #0
 800cd9e:	f7f3 ff19 	bl	8000bd4 <__aeabi_fdiv>
 800cda2:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800cda4:	1c19      	adds	r1, r3, #0
 800cda6:	1c20      	adds	r0, r4, #0
 800cda8:	f7f4 f8fa 	bl	8000fa0 <__aeabi_fmul>
 800cdac:	1c03      	adds	r3, r0, #0
 800cdae:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdb4:	68f9      	ldr	r1, [r7, #12]
 800cdb6:	1c18      	adds	r0, r3, #0
 800cdb8:	f7f4 f8f2 	bl	8000fa0 <__aeabi_fmul>
 800cdbc:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800cdbe:	6939      	ldr	r1, [r7, #16]
 800cdc0:	1c18      	adds	r0, r3, #0
 800cdc2:	f7f3 ff07 	bl	8000bd4 <__aeabi_fdiv>
 800cdc6:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800cdc8:	68f9      	ldr	r1, [r7, #12]
 800cdca:	1c18      	adds	r0, r3, #0
 800cdcc:	f7f4 f8e8 	bl	8000fa0 <__aeabi_fmul>
 800cdd0:	1c03      	adds	r3, r0, #0
             sqrtf(
 800cdd2:	1c19      	adds	r1, r3, #0
 800cdd4:	1c20      	adds	r0, r4, #0
 800cdd6:	f7f3 fd73 	bl	80008c0 <__aeabi_fadd>
 800cdda:	1c03      	adds	r3, r0, #0
 800cddc:	1c18      	adds	r0, r3, #0
 800cdde:	f018 fad5 	bl	802538c <sqrtf>
 800cde2:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800cde4:	1c19      	adds	r1, r3, #0
 800cde6:	1c30      	adds	r0, r6, #0
 800cde8:	f7f4 f8da 	bl	8000fa0 <__aeabi_fmul>
 800cdec:	1c03      	adds	r3, r0, #0
 800cdee:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdfc:	68f9      	ldr	r1, [r7, #12]
 800cdfe:	1c18      	adds	r0, r3, #0
 800ce00:	f7f4 f8ce 	bl	8000fa0 <__aeabi_fmul>
 800ce04:	1c03      	adds	r3, r0, #0
 800ce06:	2182      	movs	r1, #130	@ 0x82
 800ce08:	05c9      	lsls	r1, r1, #23
 800ce0a:	1c18      	adds	r0, r3, #0
 800ce0c:	f7f3 fee2 	bl	8000bd4 <__aeabi_fdiv>
 800ce10:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800ce12:	1c19      	adds	r1, r3, #0
 800ce14:	1c20      	adds	r0, r4, #0
 800ce16:	f7f3 fd53 	bl	80008c0 <__aeabi_fadd>
 800ce1a:	1c03      	adds	r3, r0, #0
 800ce1c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ce22:	46c0      	nop			@ (mov r8, r8)
 800ce24:	46bd      	mov	sp, r7
 800ce26:	b007      	add	sp, #28
 800ce28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce2a:	46c0      	nop			@ (mov r8, r8)
 800ce2c:	42c80000 	.word	0x42c80000
 800ce30:	c2c80000 	.word	0xc2c80000
 800ce34:	44b40000 	.word	0x44b40000

0800ce38 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	68ba      	ldr	r2, [r7, #8]
 800ce4e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ce50:	46c0      	nop			@ (mov r8, r8)
 800ce52:	46bd      	mov	sp, r7
 800ce54:	b004      	add	sp, #16
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800ce58:	b590      	push	{r4, r7, lr}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce6a:	1c19      	adds	r1, r3, #0
 800ce6c:	6838      	ldr	r0, [r7, #0]
 800ce6e:	f7f4 f9d5 	bl	800121c <__aeabi_fsub>
 800ce72:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ce74:	1c19      	adds	r1, r3, #0
 800ce76:	1c20      	adds	r0, r4, #0
 800ce78:	f7f4 f892 	bl	8000fa0 <__aeabi_fmul>
 800ce7c:	1c03      	adds	r3, r0, #0
 800ce7e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800ce80:	4912      	ldr	r1, [pc, #72]	@ (800cecc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	f7f3 fb54 	bl	8000530 <__aeabi_fcmplt>
 800ce88:	1e03      	subs	r3, r0, #0
 800ce8a:	d002      	beq.n	800ce92 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800ce8c:	23fe      	movs	r3, #254	@ 0xfe
 800ce8e:	059b      	lsls	r3, r3, #22
 800ce90:	e018      	b.n	800cec4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800ce92:	490f      	ldr	r1, [pc, #60]	@ (800ced0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800ce94:	68f8      	ldr	r0, [r7, #12]
 800ce96:	f7f3 fb5f 	bl	8000558 <__aeabi_fcmpgt>
 800ce9a:	1e03      	subs	r3, r0, #0
 800ce9c:	d001      	beq.n	800cea2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	e010      	b.n	800cec4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	1c18      	adds	r0, r3, #0
 800cea6:	f018 fa49 	bl	802533c <expf>
 800ceaa:	1c03      	adds	r3, r0, #0
 800ceac:	21fe      	movs	r1, #254	@ 0xfe
 800ceae:	0589      	lsls	r1, r1, #22
 800ceb0:	1c18      	adds	r0, r3, #0
 800ceb2:	f7f3 fd05 	bl	80008c0 <__aeabi_fadd>
 800ceb6:	1c03      	adds	r3, r0, #0
 800ceb8:	1c19      	adds	r1, r3, #0
 800ceba:	20fe      	movs	r0, #254	@ 0xfe
 800cebc:	0580      	lsls	r0, r0, #22
 800cebe:	f7f3 fe89 	bl	8000bd4 <__aeabi_fdiv>
 800cec2:	1c03      	adds	r3, r0, #0
    }
}
 800cec4:	1c18      	adds	r0, r3, #0
 800cec6:	46bd      	mov	sp, r7
 800cec8:	b005      	add	sp, #20
 800ceca:	bd90      	pop	{r4, r7, pc}
 800cecc:	c2480000 	.word	0xc2480000
 800ced0:	42480000 	.word	0x42480000

0800ced4 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	68ba      	ldr	r2, [r7, #8]
 800cee4:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800ceec:	46c0      	nop			@ (mov r8, r8)
 800ceee:	46bd      	mov	sp, r7
 800cef0:	b004      	add	sp, #16
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800cef4:	b590      	push	{r4, r7, lr}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d114      	bne.n	800cf30 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf0a:	1c19      	adds	r1, r3, #0
 800cf0c:	6838      	ldr	r0, [r7, #0]
 800cf0e:	f7f4 f985 	bl	800121c <__aeabi_fsub>
 800cf12:	1c03      	adds	r3, r0, #0
 800cf14:	4918      	ldr	r1, [pc, #96]	@ (800cf78 <GasIndexAlgorithm__mox_model__process+0x84>)
 800cf16:	1c18      	adds	r0, r3, #0
 800cf18:	f7f3 fe5c 	bl	8000bd4 <__aeabi_fdiv>
 800cf1c:	1c03      	adds	r3, r0, #0
 800cf1e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800cf24:	1c19      	adds	r1, r3, #0
 800cf26:	1c10      	adds	r0, r2, #0
 800cf28:	f7f4 f83a 	bl	8000fa0 <__aeabi_fmul>
 800cf2c:	1c03      	adds	r3, r0, #0
 800cf2e:	e01f      	b.n	800cf70 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf34:	1c19      	adds	r1, r3, #0
 800cf36:	6838      	ldr	r0, [r7, #0]
 800cf38:	f7f4 f970 	bl	800121c <__aeabi_fsub>
 800cf3c:	1c03      	adds	r3, r0, #0
 800cf3e:	1c1a      	adds	r2, r3, #0
 800cf40:	2380      	movs	r3, #128	@ 0x80
 800cf42:	061b      	lsls	r3, r3, #24
 800cf44:	4053      	eors	r3, r2
 800cf46:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf4c:	490b      	ldr	r1, [pc, #44]	@ (800cf7c <GasIndexAlgorithm__mox_model__process+0x88>)
 800cf4e:	1c18      	adds	r0, r3, #0
 800cf50:	f7f3 fcb6 	bl	80008c0 <__aeabi_fadd>
 800cf54:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800cf56:	1c19      	adds	r1, r3, #0
 800cf58:	1c20      	adds	r0, r4, #0
 800cf5a:	f7f3 fe3b 	bl	8000bd4 <__aeabi_fdiv>
 800cf5e:	1c03      	adds	r3, r0, #0
 800cf60:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800cf66:	1c19      	adds	r1, r3, #0
 800cf68:	1c10      	adds	r0, r2, #0
 800cf6a:	f7f4 f819 	bl	8000fa0 <__aeabi_fmul>
 800cf6e:	1c03      	adds	r3, r0, #0
    }
}
 800cf70:	1c18      	adds	r0, r3, #0
 800cf72:	46bd      	mov	sp, r7
 800cf74:	b003      	add	sp, #12
 800cf76:	bd90      	pop	{r4, r7, pc}
 800cf78:	44fa0000 	.word	0x44fa0000
 800cf7c:	435c0000 	.word	0x435c0000

0800cf80 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	607a      	str	r2, [r7, #4]
 800cf8c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2180      	movs	r1, #128	@ 0x80
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2184      	movs	r1, #132	@ 0x84
 800cf9a:	68ba      	ldr	r2, [r7, #8]
 800cf9c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2188      	movs	r1, #136	@ 0x88
 800cfa2:	683a      	ldr	r2, [r7, #0]
 800cfa4:	505a      	str	r2, [r3, r1]
}
 800cfa6:	46c0      	nop			@ (mov r8, r8)
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	b004      	add	sp, #16
 800cfac:	bd80      	pop	{r7, pc}
	...

0800cfb0 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800cfb0:	b590      	push	{r4, r7, lr}
 800cfb2:	b085      	sub	sp, #20
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2280      	movs	r2, #128	@ 0x80
 800cfbe:	589c      	ldr	r4, [r3, r2]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2284      	movs	r2, #132	@ 0x84
 800cfc4:	589b      	ldr	r3, [r3, r2]
 800cfc6:	1c19      	adds	r1, r3, #0
 800cfc8:	6838      	ldr	r0, [r7, #0]
 800cfca:	f7f4 f927 	bl	800121c <__aeabi_fsub>
 800cfce:	1c03      	adds	r3, r0, #0
 800cfd0:	1c19      	adds	r1, r3, #0
 800cfd2:	1c20      	adds	r0, r4, #0
 800cfd4:	f7f3 ffe4 	bl	8000fa0 <__aeabi_fmul>
 800cfd8:	1c03      	adds	r3, r0, #0
 800cfda:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800cfdc:	4940      	ldr	r1, [pc, #256]	@ (800d0e0 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800cfde:	68b8      	ldr	r0, [r7, #8]
 800cfe0:	f7f3 faa6 	bl	8000530 <__aeabi_fcmplt>
 800cfe4:	1e03      	subs	r3, r0, #0
 800cfe6:	d001      	beq.n	800cfec <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800cfe8:	4b3e      	ldr	r3, [pc, #248]	@ (800d0e4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800cfea:	e075      	b.n	800d0d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800cfec:	493e      	ldr	r1, [pc, #248]	@ (800d0e8 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800cfee:	68b8      	ldr	r0, [r7, #8]
 800cff0:	f7f3 fab2 	bl	8000558 <__aeabi_fcmpgt>
 800cff4:	1e03      	subs	r3, r0, #0
 800cff6:	d001      	beq.n	800cffc <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800cff8:	2300      	movs	r3, #0
 800cffa:	e06d      	b.n	800d0d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800cffc:	2100      	movs	r1, #0
 800cffe:	6838      	ldr	r0, [r7, #0]
 800d000:	f7f3 fab4 	bl	800056c <__aeabi_fcmpge>
 800d004:	1e03      	subs	r3, r0, #0
 800d006:	d047      	beq.n	800d098 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2288      	movs	r2, #136	@ 0x88
 800d00c:	589b      	ldr	r3, [r3, r2]
 800d00e:	21fe      	movs	r1, #254	@ 0xfe
 800d010:	0589      	lsls	r1, r1, #22
 800d012:	1c18      	adds	r0, r3, #0
 800d014:	f7f3 fa86 	bl	8000524 <__aeabi_fcmpeq>
 800d018:	1e03      	subs	r3, r0, #0
 800d01a:	d00e      	beq.n	800d03a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	1c19      	adds	r1, r3, #0
 800d022:	20fe      	movs	r0, #254	@ 0xfe
 800d024:	0580      	lsls	r0, r0, #22
 800d026:	f7f4 f8f9 	bl	800121c <__aeabi_fsub>
 800d02a:	1c03      	adds	r3, r0, #0
 800d02c:	492f      	ldr	r1, [pc, #188]	@ (800d0ec <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800d02e:	1c18      	adds	r0, r3, #0
 800d030:	f7f3 ffb6 	bl	8000fa0 <__aeabi_fmul>
 800d034:	1c03      	adds	r3, r0, #0
 800d036:	60fb      	str	r3, [r7, #12]
 800d038:	e012      	b.n	800d060 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	492c      	ldr	r1, [pc, #176]	@ (800d0f0 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800d040:	1c18      	adds	r0, r3, #0
 800d042:	f7f3 ffad 	bl	8000fa0 <__aeabi_fmul>
 800d046:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800d048:	1c19      	adds	r1, r3, #0
 800d04a:	4826      	ldr	r0, [pc, #152]	@ (800d0e4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d04c:	f7f4 f8e6 	bl	800121c <__aeabi_fsub>
 800d050:	1c03      	adds	r3, r0, #0
 800d052:	2181      	movs	r1, #129	@ 0x81
 800d054:	05c9      	lsls	r1, r1, #23
 800d056:	1c18      	adds	r0, r3, #0
 800d058:	f7f3 fdbc 	bl	8000bd4 <__aeabi_fdiv>
 800d05c:	1c03      	adds	r3, r0, #0
 800d05e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800d060:	4920      	ldr	r1, [pc, #128]	@ (800d0e4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	f7f3 fc2c 	bl	80008c0 <__aeabi_fadd>
 800d068:	1c03      	adds	r3, r0, #0
 800d06a:	1c1c      	adds	r4, r3, #0
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	1c18      	adds	r0, r3, #0
 800d070:	f018 f964 	bl	802533c <expf>
 800d074:	1c03      	adds	r3, r0, #0
 800d076:	21fe      	movs	r1, #254	@ 0xfe
 800d078:	0589      	lsls	r1, r1, #22
 800d07a:	1c18      	adds	r0, r3, #0
 800d07c:	f7f3 fc20 	bl	80008c0 <__aeabi_fadd>
 800d080:	1c03      	adds	r3, r0, #0
 800d082:	1c19      	adds	r1, r3, #0
 800d084:	1c20      	adds	r0, r4, #0
 800d086:	f7f3 fda5 	bl	8000bd4 <__aeabi_fdiv>
 800d08a:	1c03      	adds	r3, r0, #0
 800d08c:	68f9      	ldr	r1, [r7, #12]
 800d08e:	1c18      	adds	r0, r3, #0
 800d090:	f7f4 f8c4 	bl	800121c <__aeabi_fsub>
 800d094:	1c03      	adds	r3, r0, #0
 800d096:	e01f      	b.n	800d0d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2188      	movs	r1, #136	@ 0x88
 800d0a0:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800d0a2:	1c19      	adds	r1, r3, #0
 800d0a4:	1c10      	adds	r0, r2, #0
 800d0a6:	f7f3 fd95 	bl	8000bd4 <__aeabi_fdiv>
 800d0aa:	1c03      	adds	r3, r0, #0
 800d0ac:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	1c18      	adds	r0, r3, #0
 800d0b2:	f018 f943 	bl	802533c <expf>
 800d0b6:	1c03      	adds	r3, r0, #0
 800d0b8:	21fe      	movs	r1, #254	@ 0xfe
 800d0ba:	0589      	lsls	r1, r1, #22
 800d0bc:	1c18      	adds	r0, r3, #0
 800d0be:	f7f3 fbff 	bl	80008c0 <__aeabi_fadd>
 800d0c2:	1c03      	adds	r3, r0, #0
 800d0c4:	1c19      	adds	r1, r3, #0
 800d0c6:	4807      	ldr	r0, [pc, #28]	@ (800d0e4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d0c8:	f7f3 fd84 	bl	8000bd4 <__aeabi_fdiv>
 800d0cc:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800d0ce:	1c19      	adds	r1, r3, #0
 800d0d0:	1c20      	adds	r0, r4, #0
 800d0d2:	f7f3 ff65 	bl	8000fa0 <__aeabi_fmul>
 800d0d6:	1c03      	adds	r3, r0, #0
        }
    }
}
 800d0d8:	1c18      	adds	r0, r3, #0
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	b005      	add	sp, #20
 800d0de:	bd90      	pop	{r4, r7, pc}
 800d0e0:	c2480000 	.word	0xc2480000
 800d0e4:	43fa0000 	.word	0x43fa0000
 800d0e8:	42480000 	.word	0x42480000
 800d0ec:	3f8041ab 	.word	0x3f8041ab
 800d0f0:	40a00000 	.word	0x40a00000

0800d0f4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800d0f4:	b590      	push	{r4, r7, lr}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	4913      	ldr	r1, [pc, #76]	@ (800d154 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800d106:	1c18      	adds	r0, r3, #0
 800d108:	f7f3 fbda 	bl	80008c0 <__aeabi_fadd>
 800d10c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800d10e:	1c19      	adds	r1, r3, #0
 800d110:	1c20      	adds	r0, r4, #0
 800d112:	f7f3 fd5f 	bl	8000bd4 <__aeabi_fdiv>
 800d116:	1c03      	adds	r3, r0, #0
 800d118:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	228c      	movs	r2, #140	@ 0x8c
 800d11e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	490b      	ldr	r1, [pc, #44]	@ (800d158 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800d12a:	1c18      	adds	r0, r3, #0
 800d12c:	f7f3 fbc8 	bl	80008c0 <__aeabi_fadd>
 800d130:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800d132:	1c19      	adds	r1, r3, #0
 800d134:	1c20      	adds	r0, r4, #0
 800d136:	f7f3 fd4d 	bl	8000bd4 <__aeabi_fdiv>
 800d13a:	1c03      	adds	r3, r0, #0
 800d13c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2290      	movs	r2, #144	@ 0x90
 800d142:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2294      	movs	r2, #148	@ 0x94
 800d148:	2100      	movs	r1, #0
 800d14a:	5499      	strb	r1, [r3, r2]
}
 800d14c:	46c0      	nop			@ (mov r8, r8)
 800d14e:	46bd      	mov	sp, r7
 800d150:	b003      	add	sp, #12
 800d152:	bd90      	pop	{r4, r7, pc}
 800d154:	41a00000 	.word	0x41a00000
 800d158:	43fa0000 	.word	0x43fa0000

0800d15c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800d15c:	b590      	push	{r4, r7, lr}
 800d15e:	b087      	sub	sp, #28
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2294      	movs	r2, #148	@ 0x94
 800d16a:	5c9b      	ldrb	r3, [r3, r2]
 800d16c:	2201      	movs	r2, #1
 800d16e:	4053      	eors	r3, r2
 800d170:	b2db      	uxtb	r3, r3
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00f      	beq.n	800d196 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2198      	movs	r1, #152	@ 0x98
 800d17a:	683a      	ldr	r2, [r7, #0]
 800d17c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	219c      	movs	r1, #156	@ 0x9c
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	21a0      	movs	r1, #160	@ 0xa0
 800d18a:	683a      	ldr	r2, [r7, #0]
 800d18c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2294      	movs	r2, #148	@ 0x94
 800d192:	2101      	movs	r1, #1
 800d194:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	228c      	movs	r2, #140	@ 0x8c
 800d19a:	589b      	ldr	r3, [r3, r2]
 800d19c:	1c19      	adds	r1, r3, #0
 800d19e:	20fe      	movs	r0, #254	@ 0xfe
 800d1a0:	0580      	lsls	r0, r0, #22
 800d1a2:	f7f4 f83b 	bl	800121c <__aeabi_fsub>
 800d1a6:	1c03      	adds	r3, r0, #0
 800d1a8:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2298      	movs	r2, #152	@ 0x98
 800d1ae:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800d1b0:	1c19      	adds	r1, r3, #0
 800d1b2:	f7f3 fef5 	bl	8000fa0 <__aeabi_fmul>
 800d1b6:	1c03      	adds	r3, r0, #0
 800d1b8:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	228c      	movs	r2, #140	@ 0x8c
 800d1be:	589b      	ldr	r3, [r3, r2]
 800d1c0:	6839      	ldr	r1, [r7, #0]
 800d1c2:	1c18      	adds	r0, r3, #0
 800d1c4:	f7f3 feec 	bl	8000fa0 <__aeabi_fmul>
 800d1c8:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800d1ca:	1c19      	adds	r1, r3, #0
 800d1cc:	1c20      	adds	r0, r4, #0
 800d1ce:	f7f3 fb77 	bl	80008c0 <__aeabi_fadd>
 800d1d2:	1c03      	adds	r3, r0, #0
 800d1d4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2298      	movs	r2, #152	@ 0x98
 800d1da:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2290      	movs	r2, #144	@ 0x90
 800d1e0:	589b      	ldr	r3, [r3, r2]
 800d1e2:	1c19      	adds	r1, r3, #0
 800d1e4:	20fe      	movs	r0, #254	@ 0xfe
 800d1e6:	0580      	lsls	r0, r0, #22
 800d1e8:	f7f4 f818 	bl	800121c <__aeabi_fsub>
 800d1ec:	1c03      	adds	r3, r0, #0
 800d1ee:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	229c      	movs	r2, #156	@ 0x9c
 800d1f4:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800d1f6:	1c19      	adds	r1, r3, #0
 800d1f8:	f7f3 fed2 	bl	8000fa0 <__aeabi_fmul>
 800d1fc:	1c03      	adds	r3, r0, #0
 800d1fe:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2290      	movs	r2, #144	@ 0x90
 800d204:	589b      	ldr	r3, [r3, r2]
 800d206:	6839      	ldr	r1, [r7, #0]
 800d208:	1c18      	adds	r0, r3, #0
 800d20a:	f7f3 fec9 	bl	8000fa0 <__aeabi_fmul>
 800d20e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800d210:	1c19      	adds	r1, r3, #0
 800d212:	1c20      	adds	r0, r4, #0
 800d214:	f7f3 fb54 	bl	80008c0 <__aeabi_fadd>
 800d218:	1c03      	adds	r3, r0, #0
 800d21a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	229c      	movs	r2, #156	@ 0x9c
 800d220:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2298      	movs	r2, #152	@ 0x98
 800d226:	589a      	ldr	r2, [r3, r2]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	219c      	movs	r1, #156	@ 0x9c
 800d22c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800d22e:	1c19      	adds	r1, r3, #0
 800d230:	1c10      	adds	r0, r2, #0
 800d232:	f7f3 fff3 	bl	800121c <__aeabi_fsub>
 800d236:	1c03      	adds	r3, r0, #0
 800d238:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800d23a:	2100      	movs	r1, #0
 800d23c:	6978      	ldr	r0, [r7, #20]
 800d23e:	f7f3 f977 	bl	8000530 <__aeabi_fcmplt>
 800d242:	1e03      	subs	r3, r0, #0
 800d244:	d004      	beq.n	800d250 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	2280      	movs	r2, #128	@ 0x80
 800d24a:	0612      	lsls	r2, r2, #24
 800d24c:	4053      	eors	r3, r2
 800d24e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800d250:	4923      	ldr	r1, [pc, #140]	@ (800d2e0 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800d252:	6978      	ldr	r0, [r7, #20]
 800d254:	f7f3 fea4 	bl	8000fa0 <__aeabi_fmul>
 800d258:	1c03      	adds	r3, r0, #0
 800d25a:	1c18      	adds	r0, r3, #0
 800d25c:	f018 f86e 	bl	802533c <expf>
 800d260:	1c03      	adds	r3, r0, #0
 800d262:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800d264:	491f      	ldr	r1, [pc, #124]	@ (800d2e4 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800d266:	6938      	ldr	r0, [r7, #16]
 800d268:	f7f3 fe9a 	bl	8000fa0 <__aeabi_fmul>
 800d26c:	1c03      	adds	r3, r0, #0
 800d26e:	491e      	ldr	r1, [pc, #120]	@ (800d2e8 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800d270:	1c18      	adds	r0, r3, #0
 800d272:	f7f3 fb25 	bl	80008c0 <__aeabi_fadd>
 800d276:	1c03      	adds	r3, r0, #0
 800d278:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	685c      	ldr	r4, [r3, #4]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	68f9      	ldr	r1, [r7, #12]
 800d284:	1c18      	adds	r0, r3, #0
 800d286:	f7f3 fb1b 	bl	80008c0 <__aeabi_fadd>
 800d28a:	1c03      	adds	r3, r0, #0
 800d28c:	1c19      	adds	r1, r3, #0
 800d28e:	1c20      	adds	r0, r4, #0
 800d290:	f7f3 fca0 	bl	8000bd4 <__aeabi_fdiv>
 800d294:	1c03      	adds	r3, r0, #0
 800d296:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800d298:	68b9      	ldr	r1, [r7, #8]
 800d29a:	20fe      	movs	r0, #254	@ 0xfe
 800d29c:	0580      	lsls	r0, r0, #22
 800d29e:	f7f3 ffbd 	bl	800121c <__aeabi_fsub>
 800d2a2:	1c03      	adds	r3, r0, #0
 800d2a4:	1c18      	adds	r0, r3, #0
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	22a0      	movs	r2, #160	@ 0xa0
 800d2aa:	589b      	ldr	r3, [r3, r2]
 800d2ac:	1c19      	adds	r1, r3, #0
 800d2ae:	f7f3 fe77 	bl	8000fa0 <__aeabi_fmul>
 800d2b2:	1c03      	adds	r3, r0, #0
 800d2b4:	1c1c      	adds	r4, r3, #0
 800d2b6:	6839      	ldr	r1, [r7, #0]
 800d2b8:	68b8      	ldr	r0, [r7, #8]
 800d2ba:	f7f3 fe71 	bl	8000fa0 <__aeabi_fmul>
 800d2be:	1c03      	adds	r3, r0, #0
 800d2c0:	1c19      	adds	r1, r3, #0
 800d2c2:	1c20      	adds	r0, r4, #0
 800d2c4:	f7f3 fafc 	bl	80008c0 <__aeabi_fadd>
 800d2c8:	1c03      	adds	r3, r0, #0
 800d2ca:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	22a0      	movs	r2, #160	@ 0xa0
 800d2d0:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	22a0      	movs	r2, #160	@ 0xa0
 800d2d6:	589b      	ldr	r3, [r3, r2]
}
 800d2d8:	1c18      	adds	r0, r3, #0
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	b007      	add	sp, #28
 800d2de:	bd90      	pop	{r4, r7, pc}
 800d2e0:	be4ccccd 	.word	0xbe4ccccd
 800d2e4:	43f00000 	.word	0x43f00000
 800d2e8:	41a00000 	.word	0x41a00000

0800d2ec <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	000a      	movs	r2, r1
 800d2f6:	1cbb      	adds	r3, r7, #2
 800d2f8:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800d2fa:	230d      	movs	r3, #13
 800d2fc:	18fb      	adds	r3, r7, r3
 800d2fe:	22ff      	movs	r2, #255	@ 0xff
 800d300:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800d302:	230e      	movs	r3, #14
 800d304:	18fb      	adds	r3, r7, r3
 800d306:	2200      	movs	r2, #0
 800d308:	801a      	strh	r2, [r3, #0]
 800d30a:	e037      	b.n	800d37c <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800d30c:	230e      	movs	r3, #14
 800d30e:	18fb      	adds	r3, r7, r3
 800d310:	881b      	ldrh	r3, [r3, #0]
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	18d3      	adds	r3, r2, r3
 800d316:	7819      	ldrb	r1, [r3, #0]
 800d318:	220d      	movs	r2, #13
 800d31a:	18bb      	adds	r3, r7, r2
 800d31c:	18ba      	adds	r2, r7, r2
 800d31e:	7812      	ldrb	r2, [r2, #0]
 800d320:	404a      	eors	r2, r1
 800d322:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800d324:	230c      	movs	r3, #12
 800d326:	18fb      	adds	r3, r7, r3
 800d328:	2208      	movs	r2, #8
 800d32a:	701a      	strb	r2, [r3, #0]
 800d32c:	e01b      	b.n	800d366 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800d32e:	210d      	movs	r1, #13
 800d330:	187b      	adds	r3, r7, r1
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	b25b      	sxtb	r3, r3
 800d336:	2b00      	cmp	r3, #0
 800d338:	da09      	bge.n	800d34e <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800d33a:	187b      	adds	r3, r7, r1
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	005b      	lsls	r3, r3, #1
 800d340:	b25b      	sxtb	r3, r3
 800d342:	2231      	movs	r2, #49	@ 0x31
 800d344:	4053      	eors	r3, r2
 800d346:	b25a      	sxtb	r2, r3
 800d348:	187b      	adds	r3, r7, r1
 800d34a:	701a      	strb	r2, [r3, #0]
 800d34c:	e005      	b.n	800d35a <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800d34e:	230d      	movs	r3, #13
 800d350:	18fa      	adds	r2, r7, r3
 800d352:	18fb      	adds	r3, r7, r3
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	18db      	adds	r3, r3, r3
 800d358:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800d35a:	220c      	movs	r2, #12
 800d35c:	18bb      	adds	r3, r7, r2
 800d35e:	18ba      	adds	r2, r7, r2
 800d360:	7812      	ldrb	r2, [r2, #0]
 800d362:	3a01      	subs	r2, #1
 800d364:	701a      	strb	r2, [r3, #0]
 800d366:	230c      	movs	r3, #12
 800d368:	18fb      	adds	r3, r7, r3
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1de      	bne.n	800d32e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800d370:	220e      	movs	r2, #14
 800d372:	18bb      	adds	r3, r7, r2
 800d374:	18ba      	adds	r2, r7, r2
 800d376:	8812      	ldrh	r2, [r2, #0]
 800d378:	3201      	adds	r2, #1
 800d37a:	801a      	strh	r2, [r3, #0]
 800d37c:	230e      	movs	r3, #14
 800d37e:	18fa      	adds	r2, r7, r3
 800d380:	1cbb      	adds	r3, r7, #2
 800d382:	8812      	ldrh	r2, [r2, #0]
 800d384:	881b      	ldrh	r3, [r3, #0]
 800d386:	429a      	cmp	r2, r3
 800d388:	d3c0      	bcc.n	800d30c <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800d38a:	230d      	movs	r3, #13
 800d38c:	18fb      	adds	r3, r7, r3
 800d38e:	781b      	ldrb	r3, [r3, #0]
}
 800d390:	0018      	movs	r0, r3
 800d392:	46bd      	mov	sp, r7
 800d394:	b004      	add	sp, #16
 800d396:	bd80      	pop	{r7, pc}

0800d398 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	0008      	movs	r0, r1
 800d3a2:	0011      	movs	r1, r2
 800d3a4:	1cbb      	adds	r3, r7, #2
 800d3a6:	1c02      	adds	r2, r0, #0
 800d3a8:	801a      	strh	r2, [r3, #0]
 800d3aa:	1c7b      	adds	r3, r7, #1
 800d3ac:	1c0a      	adds	r2, r1, #0
 800d3ae:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800d3b0:	1cbb      	adds	r3, r7, #2
 800d3b2:	881a      	ldrh	r2, [r3, #0]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	0011      	movs	r1, r2
 800d3b8:	0018      	movs	r0, r3
 800d3ba:	f7ff ff97 	bl	800d2ec <sensirion_i2c_generate_crc>
 800d3be:	0003      	movs	r3, r0
 800d3c0:	001a      	movs	r2, r3
 800d3c2:	1c7b      	adds	r3, r7, #1
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d001      	beq.n	800d3ce <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e000      	b.n	800d3d0 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800d3ce:	2300      	movs	r3, #0
}
 800d3d0:	0018      	movs	r0, r3
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	b002      	add	sp, #8
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	0008      	movs	r0, r1
 800d3e2:	0011      	movs	r1, r2
 800d3e4:	1cbb      	adds	r3, r7, #2
 800d3e6:	1c02      	adds	r2, r0, #0
 800d3e8:	801a      	strh	r2, [r3, #0]
 800d3ea:	003b      	movs	r3, r7
 800d3ec:	1c0a      	adds	r2, r1, #0
 800d3ee:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800d3f0:	003b      	movs	r3, r7
 800d3f2:	881b      	ldrh	r3, [r3, #0]
 800d3f4:	0a1b      	lsrs	r3, r3, #8
 800d3f6:	b299      	uxth	r1, r3
 800d3f8:	1cbb      	adds	r3, r7, #2
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	1cba      	adds	r2, r7, #2
 800d3fe:	1c58      	adds	r0, r3, #1
 800d400:	8010      	strh	r0, [r2, #0]
 800d402:	001a      	movs	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	189b      	adds	r3, r3, r2
 800d408:	b2ca      	uxtb	r2, r1
 800d40a:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800d40c:	1cbb      	adds	r3, r7, #2
 800d40e:	881b      	ldrh	r3, [r3, #0]
 800d410:	1cba      	adds	r2, r7, #2
 800d412:	1c59      	adds	r1, r3, #1
 800d414:	8011      	strh	r1, [r2, #0]
 800d416:	001a      	movs	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	189b      	adds	r3, r3, r2
 800d41c:	003a      	movs	r2, r7
 800d41e:	8812      	ldrh	r2, [r2, #0]
 800d420:	b2d2      	uxtb	r2, r2
 800d422:	701a      	strb	r2, [r3, #0]
    return offset;
 800d424:	1cbb      	adds	r3, r7, #2
 800d426:	881b      	ldrh	r3, [r3, #0]
}
 800d428:	0018      	movs	r0, r3
 800d42a:	46bd      	mov	sp, r7
 800d42c:	b002      	add	sp, #8
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800d430:	b590      	push	{r4, r7, lr}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	0008      	movs	r0, r1
 800d43a:	0011      	movs	r1, r2
 800d43c:	1cbb      	adds	r3, r7, #2
 800d43e:	1c02      	adds	r2, r0, #0
 800d440:	801a      	strh	r2, [r3, #0]
 800d442:	003b      	movs	r3, r7
 800d444:	1c0a      	adds	r2, r1, #0
 800d446:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800d448:	003b      	movs	r3, r7
 800d44a:	881b      	ldrh	r3, [r3, #0]
 800d44c:	0a1b      	lsrs	r3, r3, #8
 800d44e:	b299      	uxth	r1, r3
 800d450:	1cbb      	adds	r3, r7, #2
 800d452:	881b      	ldrh	r3, [r3, #0]
 800d454:	1cba      	adds	r2, r7, #2
 800d456:	1c58      	adds	r0, r3, #1
 800d458:	8010      	strh	r0, [r2, #0]
 800d45a:	001a      	movs	r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	189b      	adds	r3, r3, r2
 800d460:	b2ca      	uxtb	r2, r1
 800d462:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800d464:	1cbb      	adds	r3, r7, #2
 800d466:	881b      	ldrh	r3, [r3, #0]
 800d468:	1cba      	adds	r2, r7, #2
 800d46a:	1c59      	adds	r1, r3, #1
 800d46c:	8011      	strh	r1, [r2, #0]
 800d46e:	001a      	movs	r2, r3
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	189b      	adds	r3, r3, r2
 800d474:	003a      	movs	r2, r7
 800d476:	8812      	ldrh	r2, [r2, #0]
 800d478:	b2d2      	uxtb	r2, r2
 800d47a:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800d47c:	1cbb      	adds	r3, r7, #2
 800d47e:	881b      	ldrh	r3, [r3, #0]
 800d480:	3b02      	subs	r3, #2
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800d486:	1cbb      	adds	r3, r7, #2
 800d488:	881b      	ldrh	r3, [r3, #0]
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	18d4      	adds	r4, r2, r3
 800d48e:	2102      	movs	r1, #2
 800d490:	f7ff ff2c 	bl	800d2ec <sensirion_i2c_generate_crc>
 800d494:	0003      	movs	r3, r0
 800d496:	7023      	strb	r3, [r4, #0]
    offset++;
 800d498:	1cbb      	adds	r3, r7, #2
 800d49a:	881a      	ldrh	r2, [r3, #0]
 800d49c:	1cbb      	adds	r3, r7, #2
 800d49e:	3201      	adds	r2, #1
 800d4a0:	801a      	strh	r2, [r3, #0]

    return offset;
 800d4a2:	1cbb      	adds	r3, r7, #2
 800d4a4:	881b      	ldrh	r3, [r3, #0]
}
 800d4a6:	0018      	movs	r0, r3
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	b003      	add	sp, #12
 800d4ac:	bd90      	pop	{r4, r7, pc}

0800d4ae <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b082      	sub	sp, #8
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
 800d4b6:	0008      	movs	r0, r1
 800d4b8:	0011      	movs	r1, r2
 800d4ba:	1cbb      	adds	r3, r7, #2
 800d4bc:	1c02      	adds	r2, r0, #0
 800d4be:	801a      	strh	r2, [r3, #0]
 800d4c0:	003b      	movs	r3, r7
 800d4c2:	1c0a      	adds	r2, r1, #0
 800d4c4:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800d4c6:	003b      	movs	r3, r7
 800d4c8:	881a      	ldrh	r2, [r3, #0]
 800d4ca:	1cbb      	adds	r3, r7, #2
 800d4cc:	8819      	ldrh	r1, [r3, #0]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	0018      	movs	r0, r3
 800d4d2:	f7ff ffad 	bl	800d430 <sensirion_i2c_add_uint16_t_to_buffer>
 800d4d6:	0003      	movs	r3, r0
}
 800d4d8:	0018      	movs	r0, r3
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	b002      	add	sp, #8
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6039      	str	r1, [r7, #0]
 800d4e8:	0011      	movs	r1, r2
 800d4ea:	1dfb      	adds	r3, r7, #7
 800d4ec:	1c02      	adds	r2, r0, #0
 800d4ee:	701a      	strb	r2, [r3, #0]
 800d4f0:	1d3b      	adds	r3, r7, #4
 800d4f2:	1c0a      	adds	r2, r1, #0
 800d4f4:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800d4f6:	1d3b      	adds	r3, r7, #4
 800d4f8:	881a      	ldrh	r2, [r3, #0]
 800d4fa:	6839      	ldr	r1, [r7, #0]
 800d4fc:	1dfb      	adds	r3, r7, #7
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	0018      	movs	r0, r3
 800d502:	f7fe f9d9 	bl	800b8b8 <sensirion_i2c_hal_write>
 800d506:	0003      	movs	r3, r0
}
 800d508:	0018      	movs	r0, r3
 800d50a:	46bd      	mov	sp, r7
 800d50c:	b002      	add	sp, #8
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800d510:	b5b0      	push	{r4, r5, r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6039      	str	r1, [r7, #0]
 800d518:	0011      	movs	r1, r2
 800d51a:	1dfb      	adds	r3, r7, #7
 800d51c:	1c02      	adds	r2, r0, #0
 800d51e:	701a      	strb	r2, [r3, #0]
 800d520:	1d3b      	adds	r3, r7, #4
 800d522:	1c0a      	adds	r2, r1, #0
 800d524:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800d526:	1d3b      	adds	r3, r7, #4
 800d528:	881b      	ldrh	r3, [r3, #0]
 800d52a:	085b      	lsrs	r3, r3, #1
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	220a      	movs	r2, #10
 800d530:	18ba      	adds	r2, r7, r2
 800d532:	1c19      	adds	r1, r3, #0
 800d534:	1c0b      	adds	r3, r1, #0
 800d536:	18db      	adds	r3, r3, r3
 800d538:	185b      	adds	r3, r3, r1
 800d53a:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800d53c:	1d3b      	adds	r3, r7, #4
 800d53e:	881b      	ldrh	r3, [r3, #0]
 800d540:	2201      	movs	r2, #1
 800d542:	4013      	ands	r3, r2
 800d544:	b29b      	uxth	r3, r3
 800d546:	2b00      	cmp	r3, #0
 800d548:	d001      	beq.n	800d54e <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800d54a:	2304      	movs	r3, #4
 800d54c:	e06b      	b.n	800d626 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800d54e:	230a      	movs	r3, #10
 800d550:	18fb      	adds	r3, r7, r3
 800d552:	881a      	ldrh	r2, [r3, #0]
 800d554:	6839      	ldr	r1, [r7, #0]
 800d556:	1dfb      	adds	r3, r7, #7
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	0018      	movs	r0, r3
 800d55c:	f7fe f98c 	bl	800b878 <sensirion_i2c_hal_read>
 800d560:	0003      	movs	r3, r0
 800d562:	001a      	movs	r2, r3
 800d564:	2108      	movs	r1, #8
 800d566:	187b      	adds	r3, r7, r1
 800d568:	801a      	strh	r2, [r3, #0]
    if (error) {
 800d56a:	000a      	movs	r2, r1
 800d56c:	18bb      	adds	r3, r7, r2
 800d56e:	2100      	movs	r1, #0
 800d570:	5e5b      	ldrsh	r3, [r3, r1]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d003      	beq.n	800d57e <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800d576:	18bb      	adds	r3, r7, r2
 800d578:	2200      	movs	r2, #0
 800d57a:	5e9b      	ldrsh	r3, [r3, r2]
 800d57c:	e053      	b.n	800d626 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800d57e:	230e      	movs	r3, #14
 800d580:	18fb      	adds	r3, r7, r3
 800d582:	2200      	movs	r2, #0
 800d584:	801a      	strh	r2, [r3, #0]
 800d586:	230c      	movs	r3, #12
 800d588:	18fb      	adds	r3, r7, r3
 800d58a:	2200      	movs	r2, #0
 800d58c:	801a      	strh	r2, [r3, #0]
 800d58e:	e041      	b.n	800d614 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800d590:	210e      	movs	r1, #14
 800d592:	187b      	adds	r3, r7, r1
 800d594:	881b      	ldrh	r3, [r3, #0]
 800d596:	683a      	ldr	r2, [r7, #0]
 800d598:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800d59a:	187b      	adds	r3, r7, r1
 800d59c:	881b      	ldrh	r3, [r3, #0]
 800d59e:	3302      	adds	r3, #2
 800d5a0:	683a      	ldr	r2, [r7, #0]
 800d5a2:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	001a      	movs	r2, r3
 800d5a8:	2102      	movs	r1, #2
 800d5aa:	f7ff fef5 	bl	800d398 <sensirion_i2c_check_crc>
 800d5ae:	0003      	movs	r3, r0
 800d5b0:	001a      	movs	r2, r3
 800d5b2:	2108      	movs	r1, #8
 800d5b4:	187b      	adds	r3, r7, r1
 800d5b6:	801a      	strh	r2, [r3, #0]
        if (error) {
 800d5b8:	000a      	movs	r2, r1
 800d5ba:	18bb      	adds	r3, r7, r2
 800d5bc:	2100      	movs	r1, #0
 800d5be:	5e5b      	ldrsh	r3, [r3, r1]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d003      	beq.n	800d5cc <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800d5c4:	18bb      	adds	r3, r7, r2
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	5e9b      	ldrsh	r3, [r3, r2]
 800d5ca:	e02c      	b.n	800d626 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800d5cc:	240e      	movs	r4, #14
 800d5ce:	193b      	adds	r3, r7, r4
 800d5d0:	881b      	ldrh	r3, [r3, #0]
 800d5d2:	683a      	ldr	r2, [r7, #0]
 800d5d4:	18d2      	adds	r2, r2, r3
 800d5d6:	250c      	movs	r5, #12
 800d5d8:	197b      	adds	r3, r7, r5
 800d5da:	881b      	ldrh	r3, [r3, #0]
 800d5dc:	1979      	adds	r1, r7, r5
 800d5de:	1c58      	adds	r0, r3, #1
 800d5e0:	8008      	strh	r0, [r1, #0]
 800d5e2:	0019      	movs	r1, r3
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	185b      	adds	r3, r3, r1
 800d5e8:	7812      	ldrb	r2, [r2, #0]
 800d5ea:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800d5ec:	193b      	adds	r3, r7, r4
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	683a      	ldr	r2, [r7, #0]
 800d5f4:	18d2      	adds	r2, r2, r3
 800d5f6:	197b      	adds	r3, r7, r5
 800d5f8:	881b      	ldrh	r3, [r3, #0]
 800d5fa:	1979      	adds	r1, r7, r5
 800d5fc:	1c58      	adds	r0, r3, #1
 800d5fe:	8008      	strh	r0, [r1, #0]
 800d600:	0019      	movs	r1, r3
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	185b      	adds	r3, r3, r1
 800d606:	7812      	ldrb	r2, [r2, #0]
 800d608:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800d60a:	193b      	adds	r3, r7, r4
 800d60c:	193a      	adds	r2, r7, r4
 800d60e:	8812      	ldrh	r2, [r2, #0]
 800d610:	3203      	adds	r2, #3
 800d612:	801a      	strh	r2, [r3, #0]
 800d614:	230e      	movs	r3, #14
 800d616:	18fa      	adds	r2, r7, r3
 800d618:	230a      	movs	r3, #10
 800d61a:	18fb      	adds	r3, r7, r3
 800d61c:	8812      	ldrh	r2, [r2, #0]
 800d61e:	881b      	ldrh	r3, [r3, #0]
 800d620:	429a      	cmp	r2, r3
 800d622:	d3b5      	bcc.n	800d590 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800d624:	2300      	movs	r3, #0
}
 800d626:	0018      	movs	r0, r3
 800d628:	46bd      	mov	sp, r7
 800d62a:	b004      	add	sp, #16
 800d62c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d630 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800d630:	b590      	push	{r4, r7, lr}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6039      	str	r1, [r7, #0]
 800d638:	0011      	movs	r1, r2
 800d63a:	1dfb      	adds	r3, r7, #7
 800d63c:	1c02      	adds	r2, r0, #0
 800d63e:	701a      	strb	r2, [r3, #0]
 800d640:	1dbb      	adds	r3, r7, #6
 800d642:	1c0a      	adds	r2, r1, #0
 800d644:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800d646:	4b08      	ldr	r3, [pc, #32]	@ (800d668 <ReadRegister+0x38>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d008      	beq.n	800d660 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800d64e:	4b06      	ldr	r3, [pc, #24]	@ (800d668 <ReadRegister+0x38>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	1dba      	adds	r2, r7, #6
 800d654:	7814      	ldrb	r4, [r2, #0]
 800d656:	6839      	ldr	r1, [r7, #0]
 800d658:	1dfa      	adds	r2, r7, #7
 800d65a:	7810      	ldrb	r0, [r2, #0]
 800d65c:	0022      	movs	r2, r4
 800d65e:	4798      	blx	r3
  }
}
 800d660:	46c0      	nop			@ (mov r8, r8)
 800d662:	46bd      	mov	sp, r7
 800d664:	b003      	add	sp, #12
 800d666:	bd90      	pop	{r4, r7, pc}
 800d668:	20000e54 	.word	0x20000e54

0800d66c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800d66c:	b590      	push	{r4, r7, lr}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
 800d672:	6039      	str	r1, [r7, #0]
 800d674:	0011      	movs	r1, r2
 800d676:	1dfb      	adds	r3, r7, #7
 800d678:	1c02      	adds	r2, r0, #0
 800d67a:	701a      	strb	r2, [r3, #0]
 800d67c:	1dbb      	adds	r3, r7, #6
 800d67e:	1c0a      	adds	r2, r1, #0
 800d680:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800d682:	4b08      	ldr	r3, [pc, #32]	@ (800d6a4 <WriteRegister+0x38>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d008      	beq.n	800d69c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800d68a:	4b06      	ldr	r3, [pc, #24]	@ (800d6a4 <WriteRegister+0x38>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	1dba      	adds	r2, r7, #6
 800d690:	7814      	ldrb	r4, [r2, #0]
 800d692:	6839      	ldr	r1, [r7, #0]
 800d694:	1dfa      	adds	r2, r7, #7
 800d696:	7810      	ldrb	r0, [r2, #0]
 800d698:	0022      	movs	r2, r4
 800d69a:	4798      	blx	r3
  }
}
 800d69c:	46c0      	nop			@ (mov r8, r8)
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	b003      	add	sp, #12
 800d6a2:	bd90      	pop	{r4, r7, pc}
 800d6a4:	20000e58 	.word	0x20000e58

0800d6a8 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800d6b0:	f003 fb90 	bl	8010dd4 <HAL_GetTick>
 800d6b4:	0002      	movs	r2, r0
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	18d2      	adds	r2, r2, r3
 800d6ba:	4b03      	ldr	r3, [pc, #12]	@ (800d6c8 <setSGP40TimeStamp+0x20>)
 800d6bc:	601a      	str	r2, [r3, #0]
}
 800d6be:	46c0      	nop			@ (mov r8, r8)
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	b002      	add	sp, #8
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	46c0      	nop			@ (mov r8, r8)
 800d6c8:	20000e68 	.word	0x20000e68

0800d6cc <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800d6d0:	4b02      	ldr	r3, [pc, #8]	@ (800d6dc <ResetSGP40samplecounter+0x10>)
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	701a      	strb	r2, [r3, #0]
}
 800d6d6:	46c0      	nop			@ (mov r8, r8)
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	20000e66 	.word	0x20000e66

0800d6e0 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800d6ea:	4b07      	ldr	r3, [pc, #28]	@ (800d708 <SGP_Init+0x28>)
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800d6f0:	4b06      	ldr	r3, [pc, #24]	@ (800d70c <SGP_Init+0x2c>)
 800d6f2:	683a      	ldr	r2, [r7, #0]
 800d6f4:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800d6f6:	4b06      	ldr	r3, [pc, #24]	@ (800d710 <SGP_Init+0x30>)
 800d6f8:	2100      	movs	r1, #0
 800d6fa:	0018      	movs	r0, r3
 800d6fc:	f7fe ff70 	bl	800c5e0 <GasIndexAlgorithm_init>
}
 800d700:	46c0      	nop			@ (mov r8, r8)
 800d702:	46bd      	mov	sp, r7
 800d704:	b002      	add	sp, #8
 800d706:	bd80      	pop	{r7, pc}
 800d708:	20000e54 	.word	0x20000e54
 800d70c:	20000e58 	.word	0x20000e58
 800d710:	20000e70 	.word	0x20000e70

0800d714 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800d714:	b580      	push	{r7, lr}
 800d716:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800d718:	4b07      	ldr	r3, [pc, #28]	@ (800d738 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d004      	beq.n	800d72a <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800d720:	4b06      	ldr	r3, [pc, #24]	@ (800d73c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800d722:	22fe      	movs	r2, #254	@ 0xfe
 800d724:	0592      	lsls	r2, r2, #22
 800d726:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800d728:	e002      	b.n	800d730 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800d72a:	4b04      	ldr	r3, [pc, #16]	@ (800d73c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800d72c:	4a04      	ldr	r2, [pc, #16]	@ (800d740 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800d72e:	605a      	str	r2, [r3, #4]
}
 800d730:	46c0      	nop			@ (mov r8, r8)
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	46c0      	nop			@ (mov r8, r8)
 800d738:	20001dbd 	.word	0x20001dbd
 800d73c:	20000e70 	.word	0x20000e70
 800d740:	44610000 	.word	0x44610000

0800d744 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800d744:	b580      	push	{r7, lr}
 800d746:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800d748:	4b13      	ldr	r3, [pc, #76]	@ (800d798 <SGP_StartMeasurement+0x54>)
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00d      	beq.n	800d76c <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800d750:	4b12      	ldr	r3, [pc, #72]	@ (800d79c <SGP_StartMeasurement+0x58>)
 800d752:	2208      	movs	r2, #8
 800d754:	0019      	movs	r1, r3
 800d756:	2059      	movs	r0, #89	@ 0x59
 800d758:	f7ff ff88 	bl	800d66c <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800d75c:	f003 fb3a 	bl	8010dd4 <HAL_GetTick>
 800d760:	0003      	movs	r3, r0
 800d762:	331e      	adds	r3, #30
 800d764:	001a      	movs	r2, r3
 800d766:	4b0e      	ldr	r3, [pc, #56]	@ (800d7a0 <SGP_StartMeasurement+0x5c>)
 800d768:	601a      	str	r2, [r3, #0]
 800d76a:	e00c      	b.n	800d786 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800d76c:	4b0d      	ldr	r3, [pc, #52]	@ (800d7a4 <SGP_StartMeasurement+0x60>)
 800d76e:	2208      	movs	r2, #8
 800d770:	0019      	movs	r1, r3
 800d772:	2059      	movs	r0, #89	@ 0x59
 800d774:	f7ff ff7a 	bl	800d66c <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800d778:	f003 fb2c 	bl	8010dd4 <HAL_GetTick>
 800d77c:	0003      	movs	r3, r0
 800d77e:	33aa      	adds	r3, #170	@ 0xaa
 800d780:	001a      	movs	r2, r3
 800d782:	4b09      	ldr	r3, [pc, #36]	@ (800d7a8 <SGP_StartMeasurement+0x64>)
 800d784:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800d786:	4b09      	ldr	r3, [pc, #36]	@ (800d7ac <SGP_StartMeasurement+0x68>)
 800d788:	2200      	movs	r2, #0
 800d78a:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800d78c:	4b08      	ldr	r3, [pc, #32]	@ (800d7b0 <SGP_StartMeasurement+0x6c>)
 800d78e:	2200      	movs	r2, #0
 800d790:	701a      	strb	r2, [r3, #0]
}
 800d792:	46c0      	nop			@ (mov r8, r8)
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	20000f18 	.word	0x20000f18
 800d79c:	200000ac 	.word	0x200000ac
 800d7a0:	200000c0 	.word	0x200000c0
 800d7a4:	200000a4 	.word	0x200000a4
 800d7a8:	200000b8 	.word	0x200000b8
 800d7ac:	20000e6c 	.word	0x20000e6c
 800d7b0:	20000e6d 	.word	0x20000e6d

0800d7b4 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800d7b8:	4b04      	ldr	r3, [pc, #16]	@ (800d7cc <SGP_HeatedUp+0x18>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	0018      	movs	r0, r3
 800d7be:	f002 fe67 	bl	8010490 <TimestampIsReached>
 800d7c2:	0003      	movs	r3, r0
}
 800d7c4:	0018      	movs	r0, r3
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	46c0      	nop			@ (mov r8, r8)
 800d7cc:	200000b8 	.word	0x200000b8

0800d7d0 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800d7d4:	4b04      	ldr	r3, [pc, #16]	@ (800d7e8 <SGP_MeasurementReady+0x18>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	0018      	movs	r0, r3
 800d7da:	f002 fe59 	bl	8010490 <TimestampIsReached>
 800d7de:	0003      	movs	r3, r0
}
 800d7e0:	0018      	movs	r0, r3
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	46c0      	nop			@ (mov r8, r8)
 800d7e8:	200000c0 	.word	0x200000c0

0800d7ec <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800d7f0:	4b04      	ldr	r3, [pc, #16]	@ (800d804 <SGP_MeasurementDone+0x18>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	0018      	movs	r0, r3
 800d7f6:	f002 fe4b 	bl	8010490 <TimestampIsReached>
 800d7fa:	0003      	movs	r3, r0
}
 800d7fc:	0018      	movs	r0, r3
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	46c0      	nop			@ (mov r8, r8)
 800d804:	200000bc 	.word	0x200000bc

0800d808 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800d808:	b580      	push	{r7, lr}
 800d80a:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800d80c:	4b04      	ldr	r3, [pc, #16]	@ (800d820 <SGP_TurnHeaterOff+0x18>)
 800d80e:	2202      	movs	r2, #2
 800d810:	0019      	movs	r1, r3
 800d812:	2059      	movs	r0, #89	@ 0x59
 800d814:	f7ff ff2a 	bl	800d66c <WriteRegister>
}
 800d818:	46c0      	nop			@ (mov r8, r8)
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	46c0      	nop			@ (mov r8, r8)
 800d820:	2000009c 	.word	0x2000009c

0800d824 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800d824:	b590      	push	{r4, r7, lr}
 800d826:	b087      	sub	sp, #28
 800d828:	af02      	add	r7, sp, #8
 800d82a:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800d82c:	f7ff ffc2 	bl	800d7b4 <SGP_HeatedUp>
 800d830:	1e03      	subs	r3, r0, #0
 800d832:	d032      	beq.n	800d89a <SGP_GetMeasurementValues+0x76>
 800d834:	4b7f      	ldr	r3, [pc, #508]	@ (800da34 <SGP_GetMeasurementValues+0x210>)
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	2201      	movs	r2, #1
 800d83a:	4053      	eors	r3, r2
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d02b      	beq.n	800d89a <SGP_GetMeasurementValues+0x76>
 800d842:	4b7d      	ldr	r3, [pc, #500]	@ (800da38 <SGP_GetMeasurementValues+0x214>)
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	2201      	movs	r2, #1
 800d848:	4053      	eors	r3, r2
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d024      	beq.n	800d89a <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800d850:	4b78      	ldr	r3, [pc, #480]	@ (800da34 <SGP_GetMeasurementValues+0x210>)
 800d852:	2201      	movs	r2, #1
 800d854:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800d856:	4b79      	ldr	r3, [pc, #484]	@ (800da3c <SGP_GetMeasurementValues+0x218>)
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d00d      	beq.n	800d87a <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800d85e:	4b78      	ldr	r3, [pc, #480]	@ (800da40 <SGP_GetMeasurementValues+0x21c>)
 800d860:	2208      	movs	r2, #8
 800d862:	0019      	movs	r1, r3
 800d864:	2059      	movs	r0, #89	@ 0x59
 800d866:	f7ff ff01 	bl	800d66c <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800d86a:	f003 fab3 	bl	8010dd4 <HAL_GetTick>
 800d86e:	0003      	movs	r3, r0
 800d870:	331e      	adds	r3, #30
 800d872:	001a      	movs	r2, r3
 800d874:	4b73      	ldr	r3, [pc, #460]	@ (800da44 <SGP_GetMeasurementValues+0x220>)
 800d876:	601a      	str	r2, [r3, #0]
 800d878:	e00c      	b.n	800d894 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800d87a:	4b73      	ldr	r3, [pc, #460]	@ (800da48 <SGP_GetMeasurementValues+0x224>)
 800d87c:	2208      	movs	r2, #8
 800d87e:	0019      	movs	r1, r3
 800d880:	2059      	movs	r0, #89	@ 0x59
 800d882:	f7ff fef3 	bl	800d66c <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800d886:	f003 faa5 	bl	8010dd4 <HAL_GetTick>
 800d88a:	0003      	movs	r3, r0
 800d88c:	331e      	adds	r3, #30
 800d88e:	001a      	movs	r2, r3
 800d890:	4b6c      	ldr	r3, [pc, #432]	@ (800da44 <SGP_GetMeasurementValues+0x220>)
 800d892:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800d894:	4b68      	ldr	r3, [pc, #416]	@ (800da38 <SGP_GetMeasurementValues+0x214>)
 800d896:	2201      	movs	r2, #1
 800d898:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800d89a:	4b66      	ldr	r3, [pc, #408]	@ (800da34 <SGP_GetMeasurementValues+0x210>)
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d100      	bne.n	800d8a4 <SGP_GetMeasurementValues+0x80>
 800d8a2:	e0ab      	b.n	800d9fc <SGP_GetMeasurementValues+0x1d8>
 800d8a4:	f7ff ff94 	bl	800d7d0 <SGP_MeasurementReady>
 800d8a8:	1e03      	subs	r3, r0, #0
 800d8aa:	d100      	bne.n	800d8ae <SGP_GetMeasurementValues+0x8a>
 800d8ac:	e0a6      	b.n	800d9fc <SGP_GetMeasurementValues+0x1d8>
 800d8ae:	4b67      	ldr	r3, [pc, #412]	@ (800da4c <SGP_GetMeasurementValues+0x228>)
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	4053      	eors	r3, r2
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d100      	bne.n	800d8be <SGP_GetMeasurementValues+0x9a>
 800d8bc:	e09e      	b.n	800d9fc <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800d8be:	4b63      	ldr	r3, [pc, #396]	@ (800da4c <SGP_GetMeasurementValues+0x228>)
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800d8c4:	4b62      	ldr	r3, [pc, #392]	@ (800da50 <SGP_GetMeasurementValues+0x22c>)
 800d8c6:	2203      	movs	r2, #3
 800d8c8:	0019      	movs	r1, r3
 800d8ca:	2059      	movs	r0, #89	@ 0x59
 800d8cc:	f7ff feb0 	bl	800d630 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800d8d0:	4b5f      	ldr	r3, [pc, #380]	@ (800da50 <SGP_GetMeasurementValues+0x22c>)
 800d8d2:	2203      	movs	r2, #3
 800d8d4:	2103      	movs	r1, #3
 800d8d6:	0018      	movs	r0, r3
 800d8d8:	f000 f918 	bl	800db0c <CheckCRC>
 800d8dc:	0003      	movs	r3, r0
 800d8de:	001a      	movs	r2, r3
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	4053      	eors	r3, r2
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d02a      	beq.n	800d940 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800d8ea:	4a5a      	ldr	r2, [pc, #360]	@ (800da54 <SGP_GetMeasurementValues+0x230>)
 800d8ec:	4b5a      	ldr	r3, [pc, #360]	@ (800da58 <SGP_GetMeasurementValues+0x234>)
 800d8ee:	0019      	movs	r1, r3
 800d8f0:	2001      	movs	r0, #1
 800d8f2:	f002 fe23 	bl	801053c <CreateLine>
      Info("SGP_Measure buffer structure:");
 800d8f6:	4a59      	ldr	r2, [pc, #356]	@ (800da5c <SGP_GetMeasurementValues+0x238>)
 800d8f8:	4b59      	ldr	r3, [pc, #356]	@ (800da60 <SGP_GetMeasurementValues+0x23c>)
 800d8fa:	0019      	movs	r1, r3
 800d8fc:	2002      	movs	r0, #2
 800d8fe:	f002 fe1d 	bl	801053c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800d902:	230f      	movs	r3, #15
 800d904:	18fb      	adds	r3, r7, r3
 800d906:	2200      	movs	r2, #0
 800d908:	701a      	strb	r2, [r3, #0]
 800d90a:	e012      	b.n	800d932 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800d90c:	240f      	movs	r4, #15
 800d90e:	193b      	adds	r3, r7, r4
 800d910:	7818      	ldrb	r0, [r3, #0]
 800d912:	193b      	adds	r3, r7, r4
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	4a4e      	ldr	r2, [pc, #312]	@ (800da50 <SGP_GetMeasurementValues+0x22c>)
 800d918:	5cd3      	ldrb	r3, [r2, r3]
 800d91a:	4a52      	ldr	r2, [pc, #328]	@ (800da64 <SGP_GetMeasurementValues+0x240>)
 800d91c:	4952      	ldr	r1, [pc, #328]	@ (800da68 <SGP_GetMeasurementValues+0x244>)
 800d91e:	9300      	str	r3, [sp, #0]
 800d920:	0003      	movs	r3, r0
 800d922:	2003      	movs	r0, #3
 800d924:	f002 fe0a 	bl	801053c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800d928:	193b      	adds	r3, r7, r4
 800d92a:	781a      	ldrb	r2, [r3, #0]
 800d92c:	193b      	adds	r3, r7, r4
 800d92e:	3201      	adds	r2, #1
 800d930:	701a      	strb	r2, [r3, #0]
 800d932:	230f      	movs	r3, #15
 800d934:	18fb      	adds	r3, r7, r3
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	2b02      	cmp	r3, #2
 800d93a:	d9e7      	bls.n	800d90c <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800d93c:	2300      	movs	r3, #0
 800d93e:	e075      	b.n	800da2c <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800d940:	f003 fa48 	bl	8010dd4 <HAL_GetTick>
 800d944:	0003      	movs	r3, r0
 800d946:	22fa      	movs	r2, #250	@ 0xfa
 800d948:	0092      	lsls	r2, r2, #2
 800d94a:	189a      	adds	r2, r3, r2
 800d94c:	4b47      	ldr	r3, [pc, #284]	@ (800da6c <SGP_GetMeasurementValues+0x248>)
 800d94e:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800d950:	f7ff ff5a 	bl	800d808 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800d954:	4b46      	ldr	r3, [pc, #280]	@ (800da70 <SGP_GetMeasurementValues+0x24c>)
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	3301      	adds	r3, #1
 800d95a:	b2da      	uxtb	r2, r3
 800d95c:	4b44      	ldr	r3, [pc, #272]	@ (800da70 <SGP_GetMeasurementValues+0x24c>)
 800d95e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800d960:	4b43      	ldr	r3, [pc, #268]	@ (800da70 <SGP_GetMeasurementValues+0x24c>)
 800d962:	781a      	ldrb	r2, [r3, #0]
 800d964:	4b43      	ldr	r3, [pc, #268]	@ (800da74 <SGP_GetMeasurementValues+0x250>)
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d347      	bcc.n	800d9fc <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800d96c:	4b38      	ldr	r3, [pc, #224]	@ (800da50 <SGP_GetMeasurementValues+0x22c>)
 800d96e:	785b      	ldrb	r3, [r3, #1]
 800d970:	021b      	lsls	r3, r3, #8
 800d972:	b21a      	sxth	r2, r3
 800d974:	4b36      	ldr	r3, [pc, #216]	@ (800da50 <SGP_GetMeasurementValues+0x22c>)
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	b21b      	sxth	r3, r3
 800d97a:	4313      	orrs	r3, r2
 800d97c:	b21a      	sxth	r2, r3
 800d97e:	240c      	movs	r4, #12
 800d980:	193b      	adds	r3, r7, r4
 800d982:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800d984:	2300      	movs	r3, #0
 800d986:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800d988:	193b      	adds	r3, r7, r4
 800d98a:	8819      	ldrh	r1, [r3, #0]
 800d98c:	2308      	movs	r3, #8
 800d98e:	18fa      	adds	r2, r7, r3
 800d990:	4b39      	ldr	r3, [pc, #228]	@ (800da78 <SGP_GetMeasurementValues+0x254>)
 800d992:	0018      	movs	r0, r3
 800d994:	f7fe fe88 	bl	800c6a8 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800d99e:	4b37      	ldr	r3, [pc, #220]	@ (800da7c <SGP_GetMeasurementValues+0x258>)
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	b2da      	uxtb	r2, r3
 800d9a6:	4b35      	ldr	r3, [pc, #212]	@ (800da7c <SGP_GetMeasurementValues+0x258>)
 800d9a8:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800d9aa:	4b34      	ldr	r3, [pc, #208]	@ (800da7c <SGP_GetMeasurementValues+0x258>)
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d10d      	bne.n	800d9ce <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800d9b2:	193b      	adds	r3, r7, r4
 800d9b4:	881b      	ldrh	r3, [r3, #0]
 800d9b6:	4a32      	ldr	r2, [pc, #200]	@ (800da80 <SGP_GetMeasurementValues+0x25c>)
 800d9b8:	492b      	ldr	r1, [pc, #172]	@ (800da68 <SGP_GetMeasurementValues+0x244>)
 800d9ba:	2003      	movs	r0, #3
 800d9bc:	f002 fdbe 	bl	801053c <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	4a30      	ldr	r2, [pc, #192]	@ (800da84 <SGP_GetMeasurementValues+0x260>)
 800d9c4:	4928      	ldr	r1, [pc, #160]	@ (800da68 <SGP_GetMeasurementValues+0x244>)
 800d9c6:	2003      	movs	r0, #3
 800d9c8:	f002 fdb8 	bl	801053c <CreateLine>
 800d9cc:	e006      	b.n	800d9dc <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800d9ce:	4b2b      	ldr	r3, [pc, #172]	@ (800da7c <SGP_GetMeasurementValues+0x258>)
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	2b0b      	cmp	r3, #11
 800d9d4:	d102      	bne.n	800d9dc <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800d9d6:	4b29      	ldr	r3, [pc, #164]	@ (800da7c <SGP_GetMeasurementValues+0x258>)
 800d9d8:	2200      	movs	r2, #0
 800d9da:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	0018      	movs	r0, r3
 800d9e2:	f001 fd5b 	bl	800f49c <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800d9e6:	4b22      	ldr	r3, [pc, #136]	@ (800da70 <SGP_GetMeasurementValues+0x24c>)
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800d9ec:	4b13      	ldr	r3, [pc, #76]	@ (800da3c <SGP_GetMeasurementValues+0x218>)
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800d9f2:	4b11      	ldr	r3, [pc, #68]	@ (800da38 <SGP_GetMeasurementValues+0x214>)
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	701a      	strb	r2, [r3, #0]
      return true;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e017      	b.n	800da2c <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800d9fc:	f7ff fef6 	bl	800d7ec <SGP_MeasurementDone>
 800da00:	1e03      	subs	r3, r0, #0
 800da02:	d012      	beq.n	800da2a <SGP_GetMeasurementValues+0x206>
 800da04:	4b0b      	ldr	r3, [pc, #44]	@ (800da34 <SGP_GetMeasurementValues+0x210>)
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d00e      	beq.n	800da2a <SGP_GetMeasurementValues+0x206>
 800da0c:	4b0f      	ldr	r3, [pc, #60]	@ (800da4c <SGP_GetMeasurementValues+0x228>)
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00a      	beq.n	800da2a <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800da14:	4a1c      	ldr	r2, [pc, #112]	@ (800da88 <SGP_GetMeasurementValues+0x264>)
 800da16:	4b14      	ldr	r3, [pc, #80]	@ (800da68 <SGP_GetMeasurementValues+0x244>)
 800da18:	0019      	movs	r1, r3
 800da1a:	2003      	movs	r0, #3
 800da1c:	f002 fd8e 	bl	801053c <CreateLine>
    SGP_StartMeasurement();
 800da20:	f7ff fe90 	bl	800d744 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800da24:	4b04      	ldr	r3, [pc, #16]	@ (800da38 <SGP_GetMeasurementValues+0x214>)
 800da26:	2200      	movs	r2, #0
 800da28:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800da2a:	2300      	movs	r3, #0
}
 800da2c:	0018      	movs	r0, r3
 800da2e:	46bd      	mov	sp, r7
 800da30:	b005      	add	sp, #20
 800da32:	bd90      	pop	{r4, r7, pc}
 800da34:	20000e6c 	.word	0x20000e6c
 800da38:	20000f19 	.word	0x20000f19
 800da3c:	20000f18 	.word	0x20000f18
 800da40:	200000ac 	.word	0x200000ac
 800da44:	200000c0 	.word	0x200000c0
 800da48:	200000a4 	.word	0x200000a4
 800da4c:	20000e6d 	.word	0x20000e6d
 800da50:	20000e5c 	.word	0x20000e5c
 800da54:	0802804c 	.word	0x0802804c
 800da58:	08028074 	.word	0x08028074
 800da5c:	08028078 	.word	0x08028078
 800da60:	08028098 	.word	0x08028098
 800da64:	0802809c 	.word	0x0802809c
 800da68:	080280bc 	.word	0x080280bc
 800da6c:	200000bc 	.word	0x200000bc
 800da70:	20000e65 	.word	0x20000e65
 800da74:	200000b6 	.word	0x200000b6
 800da78:	20000e70 	.word	0x20000e70
 800da7c:	20000e66 	.word	0x20000e66
 800da80:	080280c0 	.word	0x080280c0
 800da84:	080280dc 	.word	0x080280dc
 800da88:	080280f8 	.word	0x080280f8

0800da8c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800da92:	4b1a      	ldr	r3, [pc, #104]	@ (800dafc <SGP_DeviceConnected+0x70>)
 800da94:	2202      	movs	r2, #2
 800da96:	0019      	movs	r1, r3
 800da98:	2059      	movs	r0, #89	@ 0x59
 800da9a:	f7ff fde7 	bl	800d66c <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800da9e:	2001      	movs	r0, #1
 800daa0:	f003 f9a2 	bl	8010de8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800daa4:	4b16      	ldr	r3, [pc, #88]	@ (800db00 <SGP_DeviceConnected+0x74>)
 800daa6:	2209      	movs	r2, #9
 800daa8:	0019      	movs	r1, r3
 800daaa:	2059      	movs	r0, #89	@ 0x59
 800daac:	f7ff fdc0 	bl	800d630 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800dab0:	1dfb      	adds	r3, r7, #7
 800dab2:	2200      	movs	r2, #0
 800dab4:	701a      	strb	r2, [r3, #0]
 800dab6:	e011      	b.n	800dadc <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800dab8:	1dfb      	adds	r3, r7, #7
 800daba:	7818      	ldrb	r0, [r3, #0]
 800dabc:	1dfb      	adds	r3, r7, #7
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	4a0f      	ldr	r2, [pc, #60]	@ (800db00 <SGP_DeviceConnected+0x74>)
 800dac2:	5cd3      	ldrb	r3, [r2, r3]
 800dac4:	4a0f      	ldr	r2, [pc, #60]	@ (800db04 <SGP_DeviceConnected+0x78>)
 800dac6:	4910      	ldr	r1, [pc, #64]	@ (800db08 <SGP_DeviceConnected+0x7c>)
 800dac8:	9300      	str	r3, [sp, #0]
 800daca:	0003      	movs	r3, r0
 800dacc:	2002      	movs	r0, #2
 800dace:	f002 fd35 	bl	801053c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800dad2:	1dfb      	adds	r3, r7, #7
 800dad4:	781a      	ldrb	r2, [r3, #0]
 800dad6:	1dfb      	adds	r3, r7, #7
 800dad8:	3201      	adds	r2, #1
 800dada:	701a      	strb	r2, [r3, #0]
 800dadc:	1dfb      	adds	r3, r7, #7
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	2b08      	cmp	r3, #8
 800dae2:	d9e9      	bls.n	800dab8 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800dae4:	4b06      	ldr	r3, [pc, #24]	@ (800db00 <SGP_DeviceConnected+0x74>)
 800dae6:	2203      	movs	r2, #3
 800dae8:	2109      	movs	r1, #9
 800daea:	0018      	movs	r0, r3
 800daec:	f000 f80e 	bl	800db0c <CheckCRC>
 800daf0:	0003      	movs	r3, r0
}
 800daf2:	0018      	movs	r0, r3
 800daf4:	46bd      	mov	sp, r7
 800daf6:	b002      	add	sp, #8
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	46c0      	nop			@ (mov r8, r8)
 800dafc:	200000a0 	.word	0x200000a0
 800db00:	20000e5c 	.word	0x20000e5c
 800db04:	08028118 	.word	0x08028118
 800db08:	08028098 	.word	0x08028098

0800db0c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800db0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db0e:	b08f      	sub	sp, #60	@ 0x3c
 800db10:	af00      	add	r7, sp, #0
 800db12:	6278      	str	r0, [r7, #36]	@ 0x24
 800db14:	0008      	movs	r0, r1
 800db16:	0011      	movs	r1, r2
 800db18:	2323      	movs	r3, #35	@ 0x23
 800db1a:	18fb      	adds	r3, r7, r3
 800db1c:	1c02      	adds	r2, r0, #0
 800db1e:	701a      	strb	r2, [r3, #0]
 800db20:	2322      	movs	r3, #34	@ 0x22
 800db22:	18fb      	adds	r3, r7, r3
 800db24:	1c0a      	adds	r2, r1, #0
 800db26:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800db28:	2317      	movs	r3, #23
 800db2a:	2220      	movs	r2, #32
 800db2c:	189b      	adds	r3, r3, r2
 800db2e:	19db      	adds	r3, r3, r7
 800db30:	2200      	movs	r2, #0
 800db32:	701a      	strb	r2, [r3, #0]
 800db34:	e09f      	b.n	800dc76 <CheckCRC+0x16a>
 800db36:	466b      	mov	r3, sp
 800db38:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800db3a:	2322      	movs	r3, #34	@ 0x22
 800db3c:	18fb      	adds	r3, r7, r3
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	001a      	movs	r2, r3
 800db42:	3a01      	subs	r2, #1
 800db44:	633a      	str	r2, [r7, #48]	@ 0x30
 800db46:	60bb      	str	r3, [r7, #8]
 800db48:	2200      	movs	r2, #0
 800db4a:	60fa      	str	r2, [r7, #12]
 800db4c:	68b8      	ldr	r0, [r7, #8]
 800db4e:	68f9      	ldr	r1, [r7, #12]
 800db50:	0002      	movs	r2, r0
 800db52:	0f52      	lsrs	r2, r2, #29
 800db54:	000c      	movs	r4, r1
 800db56:	00e4      	lsls	r4, r4, #3
 800db58:	61fc      	str	r4, [r7, #28]
 800db5a:	69fc      	ldr	r4, [r7, #28]
 800db5c:	4314      	orrs	r4, r2
 800db5e:	61fc      	str	r4, [r7, #28]
 800db60:	0002      	movs	r2, r0
 800db62:	00d2      	lsls	r2, r2, #3
 800db64:	61ba      	str	r2, [r7, #24]
 800db66:	603b      	str	r3, [r7, #0]
 800db68:	2200      	movs	r2, #0
 800db6a:	607a      	str	r2, [r7, #4]
 800db6c:	6838      	ldr	r0, [r7, #0]
 800db6e:	6879      	ldr	r1, [r7, #4]
 800db70:	0002      	movs	r2, r0
 800db72:	0f52      	lsrs	r2, r2, #29
 800db74:	000c      	movs	r4, r1
 800db76:	00e4      	lsls	r4, r4, #3
 800db78:	617c      	str	r4, [r7, #20]
 800db7a:	697c      	ldr	r4, [r7, #20]
 800db7c:	4314      	orrs	r4, r2
 800db7e:	617c      	str	r4, [r7, #20]
 800db80:	0002      	movs	r2, r0
 800db82:	00d2      	lsls	r2, r2, #3
 800db84:	613a      	str	r2, [r7, #16]
 800db86:	3307      	adds	r3, #7
 800db88:	08db      	lsrs	r3, r3, #3
 800db8a:	00db      	lsls	r3, r3, #3
 800db8c:	466a      	mov	r2, sp
 800db8e:	1ad3      	subs	r3, r2, r3
 800db90:	469d      	mov	sp, r3
 800db92:	466b      	mov	r3, sp
 800db94:	3300      	adds	r3, #0
 800db96:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800db98:	2316      	movs	r3, #22
 800db9a:	2220      	movs	r2, #32
 800db9c:	189b      	adds	r3, r3, r2
 800db9e:	19db      	adds	r3, r3, r7
 800dba0:	2200      	movs	r2, #0
 800dba2:	701a      	strb	r2, [r3, #0]
 800dba4:	e01e      	b.n	800dbe4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800dba6:	2317      	movs	r3, #23
 800dba8:	2220      	movs	r2, #32
 800dbaa:	189b      	adds	r3, r3, r2
 800dbac:	19db      	adds	r3, r3, r7
 800dbae:	781a      	ldrb	r2, [r3, #0]
 800dbb0:	2116      	movs	r1, #22
 800dbb2:	2320      	movs	r3, #32
 800dbb4:	18cb      	adds	r3, r1, r3
 800dbb6:	19db      	adds	r3, r3, r7
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	18d3      	adds	r3, r2, r3
 800dbbc:	001a      	movs	r2, r3
 800dbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbc0:	189a      	adds	r2, r3, r2
 800dbc2:	0008      	movs	r0, r1
 800dbc4:	2320      	movs	r3, #32
 800dbc6:	18cb      	adds	r3, r1, r3
 800dbc8:	19db      	adds	r3, r3, r7
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	7811      	ldrb	r1, [r2, #0]
 800dbce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbd0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800dbd2:	2320      	movs	r3, #32
 800dbd4:	18c3      	adds	r3, r0, r3
 800dbd6:	19db      	adds	r3, r3, r7
 800dbd8:	781a      	ldrb	r2, [r3, #0]
 800dbda:	2320      	movs	r3, #32
 800dbdc:	18c3      	adds	r3, r0, r3
 800dbde:	19db      	adds	r3, r3, r7
 800dbe0:	3201      	adds	r2, #1
 800dbe2:	701a      	strb	r2, [r3, #0]
 800dbe4:	2316      	movs	r3, #22
 800dbe6:	2220      	movs	r2, #32
 800dbe8:	189b      	adds	r3, r3, r2
 800dbea:	19da      	adds	r2, r3, r7
 800dbec:	2322      	movs	r3, #34	@ 0x22
 800dbee:	18fb      	adds	r3, r7, r3
 800dbf0:	7812      	ldrb	r2, [r2, #0]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d3d6      	bcc.n	800dba6 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800dbf8:	2417      	movs	r4, #23
 800dbfa:	2320      	movs	r3, #32
 800dbfc:	18e3      	adds	r3, r4, r3
 800dbfe:	19db      	adds	r3, r3, r7
 800dc00:	781a      	ldrb	r2, [r3, #0]
 800dc02:	2322      	movs	r3, #34	@ 0x22
 800dc04:	18fb      	adds	r3, r7, r3
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	18d3      	adds	r3, r2, r3
 800dc0a:	3b01      	subs	r3, #1
 800dc0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc0e:	18d2      	adds	r2, r2, r3
 800dc10:	250b      	movs	r5, #11
 800dc12:	2320      	movs	r3, #32
 800dc14:	18eb      	adds	r3, r5, r3
 800dc16:	19db      	adds	r3, r3, r7
 800dc18:	7812      	ldrb	r2, [r2, #0]
 800dc1a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800dc1c:	2322      	movs	r3, #34	@ 0x22
 800dc1e:	18fb      	adds	r3, r7, r3
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	3b01      	subs	r3, #1
 800dc24:	b2da      	uxtb	r2, r3
 800dc26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc28:	0011      	movs	r1, r2
 800dc2a:	0018      	movs	r0, r3
 800dc2c:	f000 f838 	bl	800dca0 <CalculateCRC>
 800dc30:	0003      	movs	r3, r0
 800dc32:	001a      	movs	r2, r3
 800dc34:	2320      	movs	r3, #32
 800dc36:	18eb      	adds	r3, r5, r3
 800dc38:	19db      	adds	r3, r3, r7
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d00c      	beq.n	800dc5a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800dc40:	2320      	movs	r3, #32
 800dc42:	18e3      	adds	r3, r4, r3
 800dc44:	19db      	adds	r3, r3, r7
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	3301      	adds	r3, #1
 800dc4a:	4a13      	ldr	r2, [pc, #76]	@ (800dc98 <CheckCRC+0x18c>)
 800dc4c:	4913      	ldr	r1, [pc, #76]	@ (800dc9c <CheckCRC+0x190>)
 800dc4e:	2001      	movs	r0, #1
 800dc50:	f002 fc74 	bl	801053c <CreateLine>
      return false;
 800dc54:	2300      	movs	r3, #0
 800dc56:	46b5      	mov	sp, r6
 800dc58:	e019      	b.n	800dc8e <CheckCRC+0x182>
 800dc5a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800dc5c:	2217      	movs	r2, #23
 800dc5e:	2320      	movs	r3, #32
 800dc60:	18d3      	adds	r3, r2, r3
 800dc62:	19db      	adds	r3, r3, r7
 800dc64:	2120      	movs	r1, #32
 800dc66:	1852      	adds	r2, r2, r1
 800dc68:	19d1      	adds	r1, r2, r7
 800dc6a:	2222      	movs	r2, #34	@ 0x22
 800dc6c:	18ba      	adds	r2, r7, r2
 800dc6e:	7809      	ldrb	r1, [r1, #0]
 800dc70:	7812      	ldrb	r2, [r2, #0]
 800dc72:	188a      	adds	r2, r1, r2
 800dc74:	701a      	strb	r2, [r3, #0]
 800dc76:	2317      	movs	r3, #23
 800dc78:	2220      	movs	r2, #32
 800dc7a:	189b      	adds	r3, r3, r2
 800dc7c:	19da      	adds	r2, r3, r7
 800dc7e:	2323      	movs	r3, #35	@ 0x23
 800dc80:	18fb      	adds	r3, r7, r3
 800dc82:	7812      	ldrb	r2, [r2, #0]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d200      	bcs.n	800dc8c <CheckCRC+0x180>
 800dc8a:	e754      	b.n	800db36 <CheckCRC+0x2a>
    }
  }
  return true;
 800dc8c:	2301      	movs	r3, #1
}
 800dc8e:	0018      	movs	r0, r3
 800dc90:	46bd      	mov	sp, r7
 800dc92:	b00f      	add	sp, #60	@ 0x3c
 800dc94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc96:	46c0      	nop			@ (mov r8, r8)
 800dc98:	08028138 	.word	0x08028138
 800dc9c:	08028074 	.word	0x08028074

0800dca0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	000a      	movs	r2, r1
 800dcaa:	1cfb      	adds	r3, r7, #3
 800dcac:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800dcae:	230f      	movs	r3, #15
 800dcb0:	18fb      	adds	r3, r7, r3
 800dcb2:	22ff      	movs	r2, #255	@ 0xff
 800dcb4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800dcb6:	230e      	movs	r3, #14
 800dcb8:	18fb      	adds	r3, r7, r3
 800dcba:	2200      	movs	r2, #0
 800dcbc:	701a      	strb	r2, [r3, #0]
 800dcbe:	e037      	b.n	800dd30 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800dcc0:	230e      	movs	r3, #14
 800dcc2:	18fb      	adds	r3, r7, r3
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	18d3      	adds	r3, r2, r3
 800dcca:	7819      	ldrb	r1, [r3, #0]
 800dccc:	220f      	movs	r2, #15
 800dcce:	18bb      	adds	r3, r7, r2
 800dcd0:	18ba      	adds	r2, r7, r2
 800dcd2:	7812      	ldrb	r2, [r2, #0]
 800dcd4:	404a      	eors	r2, r1
 800dcd6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800dcd8:	230d      	movs	r3, #13
 800dcda:	18fb      	adds	r3, r7, r3
 800dcdc:	2200      	movs	r2, #0
 800dcde:	701a      	strb	r2, [r3, #0]
 800dce0:	e01b      	b.n	800dd1a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800dce2:	210f      	movs	r1, #15
 800dce4:	187b      	adds	r3, r7, r1
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	b25b      	sxtb	r3, r3
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	da09      	bge.n	800dd02 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800dcee:	187b      	adds	r3, r7, r1
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	005b      	lsls	r3, r3, #1
 800dcf4:	b25b      	sxtb	r3, r3
 800dcf6:	2231      	movs	r2, #49	@ 0x31
 800dcf8:	4053      	eors	r3, r2
 800dcfa:	b25a      	sxtb	r2, r3
 800dcfc:	187b      	adds	r3, r7, r1
 800dcfe:	701a      	strb	r2, [r3, #0]
 800dd00:	e005      	b.n	800dd0e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800dd02:	230f      	movs	r3, #15
 800dd04:	18fa      	adds	r2, r7, r3
 800dd06:	18fb      	adds	r3, r7, r3
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	18db      	adds	r3, r3, r3
 800dd0c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800dd0e:	210d      	movs	r1, #13
 800dd10:	187b      	adds	r3, r7, r1
 800dd12:	781a      	ldrb	r2, [r3, #0]
 800dd14:	187b      	adds	r3, r7, r1
 800dd16:	3201      	adds	r2, #1
 800dd18:	701a      	strb	r2, [r3, #0]
 800dd1a:	230d      	movs	r3, #13
 800dd1c:	18fb      	adds	r3, r7, r3
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	2b07      	cmp	r3, #7
 800dd22:	d9de      	bls.n	800dce2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800dd24:	210e      	movs	r1, #14
 800dd26:	187b      	adds	r3, r7, r1
 800dd28:	781a      	ldrb	r2, [r3, #0]
 800dd2a:	187b      	adds	r3, r7, r1
 800dd2c:	3201      	adds	r2, #1
 800dd2e:	701a      	strb	r2, [r3, #0]
 800dd30:	230e      	movs	r3, #14
 800dd32:	18fa      	adds	r2, r7, r3
 800dd34:	1cfb      	adds	r3, r7, #3
 800dd36:	7812      	ldrb	r2, [r2, #0]
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d3c0      	bcc.n	800dcc0 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800dd3e:	230f      	movs	r3, #15
 800dd40:	18fb      	adds	r3, r7, r3
 800dd42:	781b      	ldrb	r3, [r3, #0]
}
 800dd44:	0018      	movs	r0, r3
 800dd46:	46bd      	mov	sp, r7
 800dd48:	b004      	add	sp, #16
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b084      	sub	sp, #16
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4936      	ldr	r1, [pc, #216]	@ (800de34 <SGP_SetHT+0xe8>)
 800dd5c:	1c18      	adds	r0, r3, #0
 800dd5e:	f7f2 fdaf 	bl	80008c0 <__aeabi_fadd>
 800dd62:	1c03      	adds	r3, r0, #0
 800dd64:	4934      	ldr	r1, [pc, #208]	@ (800de38 <SGP_SetHT+0xec>)
 800dd66:	1c18      	adds	r0, r3, #0
 800dd68:	f7f2 ff34 	bl	8000bd4 <__aeabi_fdiv>
 800dd6c:	1c03      	adds	r3, r0, #0
 800dd6e:	4933      	ldr	r1, [pc, #204]	@ (800de3c <SGP_SetHT+0xf0>)
 800dd70:	1c18      	adds	r0, r3, #0
 800dd72:	f7f3 f915 	bl	8000fa0 <__aeabi_fmul>
 800dd76:	1c03      	adds	r3, r0, #0
 800dd78:	1c18      	adds	r0, r3, #0
 800dd7a:	f7f2 fc4f 	bl	800061c <__aeabi_f2uiz>
 800dd7e:	0003      	movs	r3, r0
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	4b2f      	ldr	r3, [pc, #188]	@ (800de40 <SGP_SetHT+0xf4>)
 800dd84:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	492e      	ldr	r1, [pc, #184]	@ (800de44 <SGP_SetHT+0xf8>)
 800dd8c:	1c18      	adds	r0, r3, #0
 800dd8e:	f7f2 ff21 	bl	8000bd4 <__aeabi_fdiv>
 800dd92:	1c03      	adds	r3, r0, #0
 800dd94:	4929      	ldr	r1, [pc, #164]	@ (800de3c <SGP_SetHT+0xf0>)
 800dd96:	1c18      	adds	r0, r3, #0
 800dd98:	f7f3 f902 	bl	8000fa0 <__aeabi_fmul>
 800dd9c:	1c03      	adds	r3, r0, #0
 800dd9e:	1c18      	adds	r0, r3, #0
 800dda0:	f7f2 fc3c 	bl	800061c <__aeabi_f2uiz>
 800dda4:	0003      	movs	r3, r0
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	4b27      	ldr	r3, [pc, #156]	@ (800de48 <SGP_SetHT+0xfc>)
 800ddaa:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800ddac:	4b26      	ldr	r3, [pc, #152]	@ (800de48 <SGP_SetHT+0xfc>)
 800ddae:	881b      	ldrh	r3, [r3, #0]
 800ddb0:	0a1b      	lsrs	r3, r3, #8
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	b2da      	uxtb	r2, r3
 800ddb6:	4b25      	ldr	r3, [pc, #148]	@ (800de4c <SGP_SetHT+0x100>)
 800ddb8:	709a      	strb	r2, [r3, #2]
 800ddba:	4b24      	ldr	r3, [pc, #144]	@ (800de4c <SGP_SetHT+0x100>)
 800ddbc:	789a      	ldrb	r2, [r3, #2]
 800ddbe:	210c      	movs	r1, #12
 800ddc0:	187b      	adds	r3, r7, r1
 800ddc2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800ddc4:	4b20      	ldr	r3, [pc, #128]	@ (800de48 <SGP_SetHT+0xfc>)
 800ddc6:	881b      	ldrh	r3, [r3, #0]
 800ddc8:	b2da      	uxtb	r2, r3
 800ddca:	4b20      	ldr	r3, [pc, #128]	@ (800de4c <SGP_SetHT+0x100>)
 800ddcc:	70da      	strb	r2, [r3, #3]
 800ddce:	4b1f      	ldr	r3, [pc, #124]	@ (800de4c <SGP_SetHT+0x100>)
 800ddd0:	78da      	ldrb	r2, [r3, #3]
 800ddd2:	187b      	adds	r3, r7, r1
 800ddd4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800ddd6:	187b      	adds	r3, r7, r1
 800ddd8:	2102      	movs	r1, #2
 800ddda:	0018      	movs	r0, r3
 800dddc:	f7ff ff60 	bl	800dca0 <CalculateCRC>
 800dde0:	0003      	movs	r3, r0
 800dde2:	001a      	movs	r2, r3
 800dde4:	4b19      	ldr	r3, [pc, #100]	@ (800de4c <SGP_SetHT+0x100>)
 800dde6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800dde8:	4b15      	ldr	r3, [pc, #84]	@ (800de40 <SGP_SetHT+0xf4>)
 800ddea:	881b      	ldrh	r3, [r3, #0]
 800ddec:	0a1b      	lsrs	r3, r3, #8
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	4b16      	ldr	r3, [pc, #88]	@ (800de4c <SGP_SetHT+0x100>)
 800ddf4:	715a      	strb	r2, [r3, #5]
 800ddf6:	4b15      	ldr	r3, [pc, #84]	@ (800de4c <SGP_SetHT+0x100>)
 800ddf8:	795a      	ldrb	r2, [r3, #5]
 800ddfa:	2108      	movs	r1, #8
 800ddfc:	187b      	adds	r3, r7, r1
 800ddfe:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800de00:	4b0f      	ldr	r3, [pc, #60]	@ (800de40 <SGP_SetHT+0xf4>)
 800de02:	881b      	ldrh	r3, [r3, #0]
 800de04:	b2da      	uxtb	r2, r3
 800de06:	4b11      	ldr	r3, [pc, #68]	@ (800de4c <SGP_SetHT+0x100>)
 800de08:	719a      	strb	r2, [r3, #6]
 800de0a:	4b10      	ldr	r3, [pc, #64]	@ (800de4c <SGP_SetHT+0x100>)
 800de0c:	799a      	ldrb	r2, [r3, #6]
 800de0e:	187b      	adds	r3, r7, r1
 800de10:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800de12:	187b      	adds	r3, r7, r1
 800de14:	2102      	movs	r1, #2
 800de16:	0018      	movs	r0, r3
 800de18:	f7ff ff42 	bl	800dca0 <CalculateCRC>
 800de1c:	0003      	movs	r3, r0
 800de1e:	001a      	movs	r2, r3
 800de20:	4b0a      	ldr	r3, [pc, #40]	@ (800de4c <SGP_SetHT+0x100>)
 800de22:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800de24:	4b0a      	ldr	r3, [pc, #40]	@ (800de50 <SGP_SetHT+0x104>)
 800de26:	2201      	movs	r2, #1
 800de28:	701a      	strb	r2, [r3, #0]
}
 800de2a:	46c0      	nop			@ (mov r8, r8)
 800de2c:	46bd      	mov	sp, r7
 800de2e:	b004      	add	sp, #16
 800de30:	bd80      	pop	{r7, pc}
 800de32:	46c0      	nop			@ (mov r8, r8)
 800de34:	42340000 	.word	0x42340000
 800de38:	432f0000 	.word	0x432f0000
 800de3c:	477fff00 	.word	0x477fff00
 800de40:	20000f16 	.word	0x20000f16
 800de44:	42c80000 	.word	0x42c80000
 800de48:	20000f14 	.word	0x20000f14
 800de4c:	200000ac 	.word	0x200000ac
 800de50:	20000f18 	.word	0x20000f18

0800de54 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800de54:	b580      	push	{r7, lr}
 800de56:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800de58:	4a09      	ldr	r2, [pc, #36]	@ (800de80 <SGP_SoftReset+0x2c>)
 800de5a:	4b0a      	ldr	r3, [pc, #40]	@ (800de84 <SGP_SoftReset+0x30>)
 800de5c:	0019      	movs	r1, r3
 800de5e:	2003      	movs	r0, #3
 800de60:	f002 fb6c 	bl	801053c <CreateLine>
  SGP_TurnHeaterOff();
 800de64:	f7ff fcd0 	bl	800d808 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800de68:	200a      	movs	r0, #10
 800de6a:	f002 ffbd 	bl	8010de8 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800de6e:	4b06      	ldr	r3, [pc, #24]	@ (800de88 <SGP_SoftReset+0x34>)
 800de70:	2202      	movs	r2, #2
 800de72:	0019      	movs	r1, r3
 800de74:	2059      	movs	r0, #89	@ 0x59
 800de76:	f7ff fbf9 	bl	800d66c <WriteRegister>
}
 800de7a:	46c0      	nop			@ (mov r8, r8)
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	080281e0 	.word	0x080281e0
 800de84:	080280bc 	.word	0x080280bc
 800de88:	200000b4 	.word	0x200000b4

0800de8c <ResetVOCresult>:

void ResetVOCresult(void) {
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800de90:	4b02      	ldr	r3, [pc, #8]	@ (800de9c <ResetVOCresult+0x10>)
 800de92:	2200      	movs	r2, #0
 800de94:	601a      	str	r2, [r3, #0]
}
 800de96:	46c0      	nop			@ (mov r8, r8)
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	20000f1c 	.word	0x20000f1c

0800dea0 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800dea0:	b580      	push	{r7, lr}
 800dea2:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800dea4:	4b42      	ldr	r3, [pc, #264]	@ (800dfb0 <SGP_Upkeep+0x110>)
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	2b07      	cmp	r3, #7
 800deaa:	d869      	bhi.n	800df80 <SGP_Upkeep+0xe0>
 800deac:	009a      	lsls	r2, r3, #2
 800deae:	4b41      	ldr	r3, [pc, #260]	@ (800dfb4 <SGP_Upkeep+0x114>)
 800deb0:	18d3      	adds	r3, r2, r3
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800deb6:	4a40      	ldr	r2, [pc, #256]	@ (800dfb8 <SGP_Upkeep+0x118>)
 800deb8:	4b40      	ldr	r3, [pc, #256]	@ (800dfbc <SGP_Upkeep+0x11c>)
 800deba:	0019      	movs	r1, r3
 800debc:	2003      	movs	r0, #3
 800debe:	f002 fb3d 	bl	801053c <CreateLine>
    break;
 800dec2:	e070      	b.n	800dfa6 <SGP_Upkeep+0x106>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800dec4:	f7ff ffe2 	bl	800de8c <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800dec8:	4b39      	ldr	r3, [pc, #228]	@ (800dfb0 <SGP_Upkeep+0x110>)
 800deca:	2201      	movs	r2, #1
 800decc:	701a      	strb	r2, [r3, #0]
    break;
 800dece:	e06a      	b.n	800dfa6 <SGP_Upkeep+0x106>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800ded0:	f7fc fcac 	bl	800a82c <getSensorLock>
 800ded4:	1e03      	subs	r3, r0, #0
 800ded6:	d15f      	bne.n	800df98 <SGP_Upkeep+0xf8>
      break;
    }
    setSensorLock(SGP40);
 800ded8:	2002      	movs	r0, #2
 800deda:	f7fc fc97 	bl	800a80c <setSensorLock>
    SetMeasurementIndicator();
 800dede:	f001 f977 	bl	800f1d0 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 800dee2:	f7ff fc2f 	bl	800d744 <SGP_StartMeasurement>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800dee6:	4b32      	ldr	r3, [pc, #200]	@ (800dfb0 <SGP_Upkeep+0x110>)
 800dee8:	2202      	movs	r2, #2
 800deea:	701a      	strb	r2, [r3, #0]
    break;
 800deec:	e05b      	b.n	800dfa6 <SGP_Upkeep+0x106>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800deee:	4b34      	ldr	r3, [pc, #208]	@ (800dfc0 <SGP_Upkeep+0x120>)
 800def0:	0018      	movs	r0, r3
 800def2:	f7ff fc97 	bl	800d824 <SGP_GetMeasurementValues>
 800def6:	1e03      	subs	r3, r0, #0
 800def8:	d050      	beq.n	800df9c <SGP_Upkeep+0xfc>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800defa:	4b2d      	ldr	r3, [pc, #180]	@ (800dfb0 <SGP_Upkeep+0x110>)
 800defc:	2203      	movs	r2, #3
 800defe:	701a      	strb	r2, [r3, #0]
      setSensorLock(FREE);
 800df00:	2000      	movs	r0, #0
 800df02:	f7fc fc83 	bl	800a80c <setSensorLock>
    }
    break;
 800df06:	e049      	b.n	800df9c <SGP_Upkeep+0xfc>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800df08:	4b2d      	ldr	r3, [pc, #180]	@ (800dfc0 <SGP_Upkeep+0x120>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	0018      	movs	r0, r3
 800df10:	f7f5 fc5c 	bl	80037cc <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800df14:	4b26      	ldr	r3, [pc, #152]	@ (800dfb0 <SGP_Upkeep+0x110>)
 800df16:	2206      	movs	r2, #6
 800df18:	701a      	strb	r2, [r3, #0]
    break;
 800df1a:	e044      	b.n	800dfa6 <SGP_Upkeep+0x106>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800df1c:	4b24      	ldr	r3, [pc, #144]	@ (800dfb0 <SGP_Upkeep+0x110>)
 800df1e:	2207      	movs	r2, #7
 800df20:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800df22:	4b28      	ldr	r3, [pc, #160]	@ (800dfc4 <SGP_Upkeep+0x124>)
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	2b01      	cmp	r3, #1
 800df28:	d112      	bne.n	800df50 <SGP_Upkeep+0xb0>
 800df2a:	4b27      	ldr	r3, [pc, #156]	@ (800dfc8 <SGP_Upkeep+0x128>)
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	2201      	movs	r2, #1
 800df30:	4053      	eors	r3, r2
 800df32:	b2db      	uxtb	r3, r3
 800df34:	2b00      	cmp	r3, #0
 800df36:	d00b      	beq.n	800df50 <SGP_Upkeep+0xb0>
      // During startup take 12 samples
      if (sgpinitdone) {
 800df38:	4b24      	ldr	r3, [pc, #144]	@ (800dfcc <SGP_Upkeep+0x12c>)
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d004      	beq.n	800df4a <SGP_Upkeep+0xaa>
        SGP_SoftReset();
 800df40:	f7ff ff88 	bl	800de54 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800df44:	2000      	movs	r0, #0
 800df46:	f7fc f935 	bl	800a1b4 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800df4a:	4b20      	ldr	r3, [pc, #128]	@ (800dfcc <SGP_Upkeep+0x12c>)
 800df4c:	2201      	movs	r2, #1
 800df4e:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800df50:	f002 ff40 	bl	8010dd4 <HAL_GetTick>
 800df54:	0003      	movs	r3, r0
 800df56:	22c8      	movs	r2, #200	@ 0xc8
 800df58:	0092      	lsls	r2, r2, #2
 800df5a:	189a      	adds	r2, r3, r2
 800df5c:	4b1c      	ldr	r3, [pc, #112]	@ (800dfd0 <SGP_Upkeep+0x130>)
 800df5e:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800df60:	f001 f94e 	bl	800f200 <ResetMeasurementIndicator>
  break;
 800df64:	e01f      	b.n	800dfa6 <SGP_Upkeep+0x106>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800df66:	4b1a      	ldr	r3, [pc, #104]	@ (800dfd0 <SGP_Upkeep+0x130>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	0018      	movs	r0, r3
 800df6c:	f002 fa90 	bl	8010490 <TimestampIsReached>
 800df70:	1e03      	subs	r3, r0, #0
 800df72:	d015      	beq.n	800dfa0 <SGP_Upkeep+0x100>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800df74:	f7ff fbce 	bl	800d714 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800df78:	4b0d      	ldr	r3, [pc, #52]	@ (800dfb0 <SGP_Upkeep+0x110>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800df7e:	e00f      	b.n	800dfa0 <SGP_Upkeep+0x100>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800df80:	4b0b      	ldr	r3, [pc, #44]	@ (800dfb0 <SGP_Upkeep+0x110>)
 800df82:	2200      	movs	r2, #0
 800df84:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 800df86:	f7fc fc51 	bl	800a82c <getSensorLock>
 800df8a:	0003      	movs	r3, r0
 800df8c:	2b02      	cmp	r3, #2
 800df8e:	d109      	bne.n	800dfa4 <SGP_Upkeep+0x104>
      setSensorLock(FREE);
 800df90:	2000      	movs	r0, #0
 800df92:	f7fc fc3b 	bl	800a80c <setSensorLock>
    }
    break;
 800df96:	e005      	b.n	800dfa4 <SGP_Upkeep+0x104>
      break;
 800df98:	46c0      	nop			@ (mov r8, r8)
 800df9a:	e004      	b.n	800dfa6 <SGP_Upkeep+0x106>
    break;
 800df9c:	46c0      	nop			@ (mov r8, r8)
 800df9e:	e002      	b.n	800dfa6 <SGP_Upkeep+0x106>
    break;
 800dfa0:	46c0      	nop			@ (mov r8, r8)
 800dfa2:	e000      	b.n	800dfa6 <SGP_Upkeep+0x106>
    break;
 800dfa4:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800dfa6:	4b02      	ldr	r3, [pc, #8]	@ (800dfb0 <SGP_Upkeep+0x110>)
 800dfa8:	781b      	ldrb	r3, [r3, #0]
}
 800dfaa:	0018      	movs	r0, r3
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	20000f20 	.word	0x20000f20
 800dfb4:	080289a4 	.word	0x080289a4
 800dfb8:	080281f8 	.word	0x080281f8
 800dfbc:	080280bc 	.word	0x080280bc
 800dfc0:	20000f1c 	.word	0x20000f1c
 800dfc4:	20000e66 	.word	0x20000e66
 800dfc8:	20001dbd 	.word	0x20001dbd
 800dfcc:	20000e50 	.word	0x20000e50
 800dfd0:	20000e68 	.word	0x20000e68

0800dfd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	0002      	movs	r2, r0
 800dfdc:	1dfb      	adds	r3, r7, #7
 800dfde:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800dfe0:	1dfb      	adds	r3, r7, #7
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	2b7f      	cmp	r3, #127	@ 0x7f
 800dfe6:	d809      	bhi.n	800dffc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dfe8:	1dfb      	adds	r3, r7, #7
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	001a      	movs	r2, r3
 800dfee:	231f      	movs	r3, #31
 800dff0:	401a      	ands	r2, r3
 800dff2:	4b04      	ldr	r3, [pc, #16]	@ (800e004 <__NVIC_EnableIRQ+0x30>)
 800dff4:	2101      	movs	r1, #1
 800dff6:	4091      	lsls	r1, r2
 800dff8:	000a      	movs	r2, r1
 800dffa:	601a      	str	r2, [r3, #0]
  }
}
 800dffc:	46c0      	nop			@ (mov r8, r8)
 800dffe:	46bd      	mov	sp, r7
 800e000:	b002      	add	sp, #8
 800e002:	bd80      	pop	{r7, pc}
 800e004:	e000e100 	.word	0xe000e100

0800e008 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	0002      	movs	r2, r0
 800e010:	1dfb      	adds	r3, r7, #7
 800e012:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e014:	1dfb      	adds	r3, r7, #7
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	2b7f      	cmp	r3, #127	@ 0x7f
 800e01a:	d810      	bhi.n	800e03e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e01c:	1dfb      	adds	r3, r7, #7
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	001a      	movs	r2, r3
 800e022:	231f      	movs	r3, #31
 800e024:	4013      	ands	r3, r2
 800e026:	4908      	ldr	r1, [pc, #32]	@ (800e048 <__NVIC_DisableIRQ+0x40>)
 800e028:	2201      	movs	r2, #1
 800e02a:	409a      	lsls	r2, r3
 800e02c:	0013      	movs	r3, r2
 800e02e:	2280      	movs	r2, #128	@ 0x80
 800e030:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e032:	f3bf 8f4f 	dsb	sy
}
 800e036:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800e038:	f3bf 8f6f 	isb	sy
}
 800e03c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800e03e:	46c0      	nop			@ (mov r8, r8)
 800e040:	46bd      	mov	sp, r7
 800e042:	b002      	add	sp, #8
 800e044:	bd80      	pop	{r7, pc}
 800e046:	46c0      	nop			@ (mov r8, r8)
 800e048:	e000e100 	.word	0xe000e100

0800e04c <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800e04c:	b5b0      	push	{r4, r5, r7, lr}
 800e04e:	b088      	sub	sp, #32
 800e050:	af02      	add	r7, sp, #8
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	0008      	movs	r0, r1
 800e056:	0011      	movs	r1, r2
 800e058:	1cfb      	adds	r3, r7, #3
 800e05a:	1c02      	adds	r2, r0, #0
 800e05c:	701a      	strb	r2, [r3, #0]
 800e05e:	1cbb      	adds	r3, r7, #2
 800e060:	1c0a      	adds	r2, r1, #0
 800e062:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800e064:	4b5b      	ldr	r3, [pc, #364]	@ (800e1d4 <getSoundData+0x188>)
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	2201      	movs	r2, #1
 800e06c:	4053      	eors	r3, r2
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	2b00      	cmp	r3, #0
 800e072:	d107      	bne.n	800e084 <getSoundData+0x38>
 800e074:	4b58      	ldr	r3, [pc, #352]	@ (800e1d8 <getSoundData+0x18c>)
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	b2db      	uxtb	r3, r3
 800e07a:	2201      	movs	r2, #1
 800e07c:	4053      	eors	r3, r2
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	2b00      	cmp	r3, #0
 800e082:	d001      	beq.n	800e088 <getSoundData+0x3c>
    {
        return false;
 800e084:	2300      	movs	r3, #0
 800e086:	e0a0      	b.n	800e1ca <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800e088:	4b54      	ldr	r3, [pc, #336]	@ (800e1dc <getSoundData+0x190>)
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d005      	beq.n	800e09e <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800e092:	4b53      	ldr	r3, [pc, #332]	@ (800e1e0 <getSoundData+0x194>)
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	b25b      	sxtb	r3, r3
 800e098:	0018      	movs	r0, r3
 800e09a:	f7ff ffb5 	bl	800e008 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800e09e:	f3bf 8f4f 	dsb	sy
}
 800e0a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800e0a4:	f3bf 8f6f 	isb	sy
}
 800e0a8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800e0aa:	1cfb      	adds	r3, r7, #3
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d04c      	beq.n	800e14c <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800e0b2:	4b4c      	ldr	r3, [pc, #304]	@ (800e1e4 <getSoundData+0x198>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d11b      	bne.n	800e0f2 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	617b      	str	r3, [r7, #20]
 800e0ca:	e00e      	b.n	800e0ea <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	18d3      	adds	r3, r2, r3
 800e0d2:	3302      	adds	r3, #2
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	18d3      	adds	r3, r2, r3
 800e0de:	3308      	adds	r3, #8
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	617b      	str	r3, [r7, #20]
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	2b05      	cmp	r3, #5
 800e0ee:	d9ed      	bls.n	800e0cc <getSoundData+0x80>
 800e0f0:	e02c      	b.n	800e14c <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	1c59      	adds	r1, r3, #1
 800e0f8:	4b3b      	ldr	r3, [pc, #236]	@ (800e1e8 <getSoundData+0x19c>)
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	4b3b      	ldr	r3, [pc, #236]	@ (800e1ec <getSoundData+0x1a0>)
 800e0fe:	681c      	ldr	r4, [r3, #0]
 800e100:	4b38      	ldr	r3, [pc, #224]	@ (800e1e4 <getSoundData+0x198>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	0023      	movs	r3, r4
 800e108:	f000 fde8 	bl	800ecdc <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e10c:	2300      	movs	r3, #0
 800e10e:	613b      	str	r3, [r7, #16]
 800e110:	e019      	b.n	800e146 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	18d3      	adds	r3, r2, r3
 800e118:	1c98      	adds	r0, r3, #2
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	3308      	adds	r3, #8
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800e122:	4b33      	ldr	r3, [pc, #204]	@ (800e1f0 <getSoundData+0x1a4>)
 800e124:	693a      	ldr	r2, [r7, #16]
 800e126:	0092      	lsls	r2, r2, #2
 800e128:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800e12a:	4b32      	ldr	r3, [pc, #200]	@ (800e1f4 <getSoundData+0x1a8>)
 800e12c:	693a      	ldr	r2, [r7, #16]
 800e12e:	0092      	lsls	r2, r2, #2
 800e130:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800e132:	4b2c      	ldr	r3, [pc, #176]	@ (800e1e4 <getSoundData+0x198>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	0013      	movs	r3, r2
 800e13a:	0022      	movs	r2, r4
 800e13c:	f000 fdce 	bl	800ecdc <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	3301      	adds	r3, #1
 800e144:	613b      	str	r3, [r7, #16]
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	2b05      	cmp	r3, #5
 800e14a:	d9e2      	bls.n	800e112 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800e14c:	1cbb      	adds	r3, r7, #2
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d028      	beq.n	800e1a6 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800e154:	240e      	movs	r4, #14
 800e156:	193b      	adds	r3, r7, r4
 800e158:	2200      	movs	r2, #0
 800e15a:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800e15c:	250d      	movs	r5, #13
 800e15e:	197b      	adds	r3, r7, r5
 800e160:	2200      	movs	r2, #0
 800e162:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800e164:	4b24      	ldr	r3, [pc, #144]	@ (800e1f8 <getSoundData+0x1ac>)
 800e166:	6818      	ldr	r0, [r3, #0]
 800e168:	4924      	ldr	r1, [pc, #144]	@ (800e1fc <getSoundData+0x1b0>)
 800e16a:	197b      	adds	r3, r7, r5
 800e16c:	193a      	adds	r2, r7, r4
 800e16e:	f000 fe59 	bl	800ee24 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800e172:	193b      	adds	r3, r7, r4
 800e174:	881a      	ldrh	r2, [r3, #0]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	21ff      	movs	r1, #255	@ 0xff
 800e17a:	4011      	ands	r1, r2
 800e17c:	000c      	movs	r4, r1
 800e17e:	7b99      	ldrb	r1, [r3, #14]
 800e180:	2000      	movs	r0, #0
 800e182:	4001      	ands	r1, r0
 800e184:	1c08      	adds	r0, r1, #0
 800e186:	1c21      	adds	r1, r4, #0
 800e188:	4301      	orrs	r1, r0
 800e18a:	7399      	strb	r1, [r3, #14]
 800e18c:	0a12      	lsrs	r2, r2, #8
 800e18e:	b290      	uxth	r0, r2
 800e190:	7bda      	ldrb	r2, [r3, #15]
 800e192:	2100      	movs	r1, #0
 800e194:	400a      	ands	r2, r1
 800e196:	1c11      	adds	r1, r2, #0
 800e198:	1c02      	adds	r2, r0, #0
 800e19a:	430a      	orrs	r2, r1
 800e19c:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800e19e:	197b      	adds	r3, r7, r5
 800e1a0:	781a      	ldrb	r2, [r3, #0]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800e1a6:	f000 f86f 	bl	800e288 <micSettlingComplete>
 800e1aa:	0003      	movs	r3, r0
 800e1ac:	001a      	movs	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800e1b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e1dc <getSoundData+0x190>)
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d005      	beq.n	800e1c8 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800e1bc:	4b08      	ldr	r3, [pc, #32]	@ (800e1e0 <getSoundData+0x194>)
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	b25b      	sxtb	r3, r3
 800e1c2:	0018      	movs	r0, r3
 800e1c4:	f7ff ff06 	bl	800dfd4 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800e1c8:	2301      	movs	r3, #1
}
 800e1ca:	0018      	movs	r0, r3
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	b006      	add	sp, #24
 800e1d0:	bdb0      	pop	{r4, r5, r7, pc}
 800e1d2:	46c0      	nop			@ (mov r8, r8)
 800e1d4:	20000f22 	.word	0x20000f22
 800e1d8:	20000f25 	.word	0x20000f25
 800e1dc:	20000f24 	.word	0x20000f24
 800e1e0:	20001974 	.word	0x20001974
 800e1e4:	200019b0 	.word	0x200019b0
 800e1e8:	20001978 	.word	0x20001978
 800e1ec:	2000197c 	.word	0x2000197c
 800e1f0:	20001980 	.word	0x20001980
 800e1f4:	20001998 	.word	0x20001998
 800e1f8:	20000f2c 	.word	0x20000f2c
 800e1fc:	3b5c7333 	.word	0x3b5c7333

0800e200 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
 800e20c:	001a      	movs	r2, r3
 800e20e:	1cfb      	adds	r3, r7, #3
 800e210:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800e212:	4b09      	ldr	r3, [pc, #36]	@ (800e238 <soundInit+0x38>)
 800e214:	68ba      	ldr	r2, [r7, #8]
 800e216:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800e218:	4b08      	ldr	r3, [pc, #32]	@ (800e23c <soundInit+0x3c>)
 800e21a:	687a      	ldr	r2, [r7, #4]
 800e21c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800e21e:	4b08      	ldr	r3, [pc, #32]	@ (800e240 <soundInit+0x40>)
 800e220:	68fa      	ldr	r2, [r7, #12]
 800e222:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800e224:	4b07      	ldr	r3, [pc, #28]	@ (800e244 <soundInit+0x44>)
 800e226:	2200      	movs	r2, #0
 800e228:	569a      	ldrsb	r2, [r3, r2]
 800e22a:	4b06      	ldr	r3, [pc, #24]	@ (800e244 <soundInit+0x44>)
 800e22c:	701a      	strb	r2, [r3, #0]

    return true;
 800e22e:	2301      	movs	r3, #1
}
 800e230:	0018      	movs	r0, r3
 800e232:	46bd      	mov	sp, r7
 800e234:	b004      	add	sp, #16
 800e236:	bd80      	pop	{r7, pc}
 800e238:	2000196c 	.word	0x2000196c
 800e23c:	20001968 	.word	0x20001968
 800e240:	20001970 	.word	0x20001970
 800e244:	20001974 	.word	0x20001974

0800e248 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800e24c:	4b02      	ldr	r3, [pc, #8]	@ (800e258 <clearMaximumAmplitude+0x10>)
 800e24e:	2200      	movs	r2, #0
 800e250:	601a      	str	r2, [r3, #0]
}
 800e252:	46c0      	nop			@ (mov r8, r8)
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}
 800e258:	20000f2c 	.word	0x20000f2c

0800e25c <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800e260:	4b08      	ldr	r3, [pc, #32]	@ (800e284 <startMicSettlingPeriod+0x28>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2200      	movs	r2, #0
 800e268:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800e26a:	4b06      	ldr	r3, [pc, #24]	@ (800e284 <startMicSettlingPeriod+0x28>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	0018      	movs	r0, r3
 800e270:	f00a fe0c 	bl	8018e8c <HAL_TIM_Base_Start>
 800e274:	1e03      	subs	r3, r0, #0
 800e276:	d001      	beq.n	800e27c <startMicSettlingPeriod+0x20>
    {
        return false;
 800e278:	2300      	movs	r3, #0
 800e27a:	e000      	b.n	800e27e <startMicSettlingPeriod+0x22>
    }
    return true;
 800e27c:	2301      	movs	r3, #1
}
 800e27e:	0018      	movs	r0, r3
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	20001968 	.word	0x20001968

0800e288 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800e28e:	4b0e      	ldr	r3, [pc, #56]	@ (800e2c8 <micSettlingComplete+0x40>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	691b      	ldr	r3, [r3, #16]
 800e296:	2201      	movs	r2, #1
 800e298:	401a      	ands	r2, r3
 800e29a:	1dfb      	adds	r3, r7, #7
 800e29c:	3a01      	subs	r2, #1
 800e29e:	4251      	negs	r1, r2
 800e2a0:	414a      	adcs	r2, r1
 800e2a2:	701a      	strb	r2, [r3, #0]
    if (complete)
 800e2a4:	1dfb      	adds	r3, r7, #7
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d007      	beq.n	800e2bc <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800e2ac:	4b06      	ldr	r3, [pc, #24]	@ (800e2c8 <micSettlingComplete+0x40>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	0018      	movs	r0, r3
 800e2b2:	f00a fe35 	bl	8018f20 <HAL_TIM_Base_Stop>
      DataReady = true;
 800e2b6:	4b05      	ldr	r3, [pc, #20]	@ (800e2cc <micSettlingComplete+0x44>)
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800e2bc:	1dfb      	adds	r3, r7, #7
 800e2be:	781b      	ldrb	r3, [r3, #0]
}
 800e2c0:	0018      	movs	r0, r3
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	b002      	add	sp, #8
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	20001968 	.word	0x20001968
 800e2cc:	20000f21 	.word	0x20000f21

0800e2d0 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	0002      	movs	r2, r0
 800e2d8:	1dfb      	adds	r3, r7, #7
 800e2da:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800e2dc:	4b29      	ldr	r3, [pc, #164]	@ (800e384 <enableMicrophone+0xb4>)
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	1dfa      	adds	r2, r7, #7
 800e2e4:	7812      	ldrb	r2, [r2, #0]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d101      	bne.n	800e2ee <enableMicrophone+0x1e>
    {
        return true;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e045      	b.n	800e37a <enableMicrophone+0xaa>
    }
    if (bEnable)
 800e2ee:	1dfb      	adds	r3, r7, #7
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d025      	beq.n	800e342 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800e2f6:	f7ff ffb1 	bl	800e25c <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800e2fa:	4b23      	ldr	r3, [pc, #140]	@ (800e388 <enableMicrophone+0xb8>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2280      	movs	r2, #128	@ 0x80
 800e300:	0092      	lsls	r2, r2, #2
 800e302:	4922      	ldr	r1, [pc, #136]	@ (800e38c <enableMicrophone+0xbc>)
 800e304:	0018      	movs	r0, r3
 800e306:	f007 f82b 	bl	8015360 <HAL_I2S_Receive_DMA>
 800e30a:	1e03      	subs	r3, r0, #0
 800e30c:	d001      	beq.n	800e312 <enableMicrophone+0x42>
        {
            return false;
 800e30e:	2300      	movs	r3, #0
 800e310:	e033      	b.n	800e37a <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800e312:	f7ff ff99 	bl	800e248 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800e316:	4b1e      	ldr	r3, [pc, #120]	@ (800e390 <enableMicrophone+0xc0>)
 800e318:	2200      	movs	r2, #0
 800e31a:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800e31c:	4b1d      	ldr	r3, [pc, #116]	@ (800e394 <enableMicrophone+0xc4>)
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	b25b      	sxtb	r3, r3
 800e322:	0018      	movs	r0, r3
 800e324:	f7ff fe56 	bl	800dfd4 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800e328:	4b1b      	ldr	r3, [pc, #108]	@ (800e398 <enableMicrophone+0xc8>)
 800e32a:	2201      	movs	r2, #1
 800e32c:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800e32e:	4b15      	ldr	r3, [pc, #84]	@ (800e384 <enableMicrophone+0xb4>)
 800e330:	2201      	movs	r2, #1
 800e332:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800e334:	4b19      	ldr	r3, [pc, #100]	@ (800e39c <enableMicrophone+0xcc>)
 800e336:	2200      	movs	r2, #0
 800e338:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800e33a:	4b19      	ldr	r3, [pc, #100]	@ (800e3a0 <enableMicrophone+0xd0>)
 800e33c:	2200      	movs	r2, #0
 800e33e:	701a      	strb	r2, [r3, #0]
 800e340:	e01a      	b.n	800e378 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800e342:	4b14      	ldr	r3, [pc, #80]	@ (800e394 <enableMicrophone+0xc4>)
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	b25b      	sxtb	r3, r3
 800e348:	0018      	movs	r0, r3
 800e34a:	f7ff fe5d 	bl	800e008 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800e34e:	4b12      	ldr	r3, [pc, #72]	@ (800e398 <enableMicrophone+0xc8>)
 800e350:	2200      	movs	r2, #0
 800e352:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800e354:	4b11      	ldr	r3, [pc, #68]	@ (800e39c <enableMicrophone+0xcc>)
 800e356:	2200      	movs	r2, #0
 800e358:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800e35a:	4b11      	ldr	r3, [pc, #68]	@ (800e3a0 <enableMicrophone+0xd0>)
 800e35c:	2200      	movs	r2, #0
 800e35e:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800e360:	4b09      	ldr	r3, [pc, #36]	@ (800e388 <enableMicrophone+0xb8>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	0018      	movs	r0, r3
 800e366:	f007 f8bd 	bl	80154e4 <HAL_I2S_DMAStop>
 800e36a:	1e03      	subs	r3, r0, #0
 800e36c:	d001      	beq.n	800e372 <enableMicrophone+0xa2>
        {
            return false;
 800e36e:	2300      	movs	r3, #0
 800e370:	e003      	b.n	800e37a <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800e372:	4b04      	ldr	r3, [pc, #16]	@ (800e384 <enableMicrophone+0xb4>)
 800e374:	2200      	movs	r2, #0
 800e376:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800e378:	2301      	movs	r3, #1
}
 800e37a:	0018      	movs	r0, r3
 800e37c:	46bd      	mov	sp, r7
 800e37e:	b002      	add	sp, #8
 800e380:	bd80      	pop	{r7, pc}
 800e382:	46c0      	nop			@ (mov r8, r8)
 800e384:	20000f22 	.word	0x20000f22
 800e388:	2000196c 	.word	0x2000196c
 800e38c:	20000f68 	.word	0x20000f68
 800e390:	20000f28 	.word	0x20000f28
 800e394:	20001974 	.word	0x20001974
 800e398:	20000f24 	.word	0x20000f24
 800e39c:	20000f23 	.word	0x20000f23
 800e3a0:	20000f25 	.word	0x20000f25

0800e3a4 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800e3a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e3dc <startSPLcalculation+0x38>)
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	4053      	eors	r3, r2
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d001      	beq.n	800e3bc <startSPLcalculation+0x18>
    {
        return false;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	e00c      	b.n	800e3d6 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800e3bc:	4b08      	ldr	r3, [pc, #32]	@ (800e3e0 <startSPLcalculation+0x3c>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d001      	beq.n	800e3ca <startSPLcalculation+0x26>
    {
        return true;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	e005      	b.n	800e3d6 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800e3ca:	f000 fb63 	bl	800ea94 <resetSPLstate>
    SPLcalcEnabled = true;
 800e3ce:	4b04      	ldr	r3, [pc, #16]	@ (800e3e0 <startSPLcalculation+0x3c>)
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	701a      	strb	r2, [r3, #0]
    return true;
 800e3d4:	2301      	movs	r3, #1
}
 800e3d6:	0018      	movs	r0, r3
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	20000f22 	.word	0x20000f22
 800e3e0:	20000f23 	.word	0x20000f23

0800e3e4 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800e3ec:	4b05      	ldr	r3, [pc, #20]	@ (800e404 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d102      	bne.n	800e3fc <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800e3f6:	2000      	movs	r0, #0
 800e3f8:	f000 f81a 	bl	800e430 <processHalfDMAbuffer>
  }
}
 800e3fc:	46c0      	nop			@ (mov r8, r8)
 800e3fe:	46bd      	mov	sp, r7
 800e400:	b002      	add	sp, #8
 800e402:	bd80      	pop	{r7, pc}
 800e404:	2000196c 	.word	0x2000196c

0800e408 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800e410:	4b06      	ldr	r3, [pc, #24]	@ (800e42c <HAL_I2S_RxCpltCallback+0x24>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	429a      	cmp	r2, r3
 800e418:	d104      	bne.n	800e424 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800e41a:	2380      	movs	r3, #128	@ 0x80
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	0018      	movs	r0, r3
 800e420:	f000 f806 	bl	800e430 <processHalfDMAbuffer>
  }
}
 800e424:	46c0      	nop			@ (mov r8, r8)
 800e426:	46bd      	mov	sp, r7
 800e428:	b002      	add	sp, #8
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	2000196c 	.word	0x2000196c

0800e430 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	005a      	lsls	r2, r3, #1
 800e43c:	4b15      	ldr	r3, [pc, #84]	@ (800e494 <processHalfDMAbuffer+0x64>)
 800e43e:	18d3      	adds	r3, r2, r3
 800e440:	4a15      	ldr	r2, [pc, #84]	@ (800e498 <processHalfDMAbuffer+0x68>)
 800e442:	2180      	movs	r1, #128	@ 0x80
 800e444:	0089      	lsls	r1, r1, #2
 800e446:	0018      	movs	r0, r3
 800e448:	f000 fd35 	bl	800eeb6 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800e44c:	4b13      	ldr	r3, [pc, #76]	@ (800e49c <processHalfDMAbuffer+0x6c>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	425a      	negs	r2, r3
 800e452:	4153      	adcs	r3, r2
 800e454:	b2da      	uxtb	r2, r3
 800e456:	4b11      	ldr	r3, [pc, #68]	@ (800e49c <processHalfDMAbuffer+0x6c>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2109      	movs	r1, #9
 800e45c:	4299      	cmp	r1, r3
 800e45e:	419b      	sbcs	r3, r3
 800e460:	425b      	negs	r3, r3
 800e462:	b2db      	uxtb	r3, r3
 800e464:	480c      	ldr	r0, [pc, #48]	@ (800e498 <processHalfDMAbuffer+0x68>)
 800e466:	2180      	movs	r1, #128	@ 0x80
 800e468:	f000 fb46 	bl	800eaf8 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800e46c:	4b0b      	ldr	r3, [pc, #44]	@ (800e49c <processHalfDMAbuffer+0x6c>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2b09      	cmp	r3, #9
 800e472:	d804      	bhi.n	800e47e <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800e474:	4b09      	ldr	r3, [pc, #36]	@ (800e49c <processHalfDMAbuffer+0x6c>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	1c5a      	adds	r2, r3, #1
 800e47a:	4b08      	ldr	r3, [pc, #32]	@ (800e49c <processHalfDMAbuffer+0x6c>)
 800e47c:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800e47e:	4b08      	ldr	r3, [pc, #32]	@ (800e4a0 <processHalfDMAbuffer+0x70>)
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	b2db      	uxtb	r3, r3
 800e484:	2b00      	cmp	r3, #0
 800e486:	d001      	beq.n	800e48c <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800e488:	f000 f826 	bl	800e4d8 <calculateSPLQ31>
    }
}
 800e48c:	46c0      	nop			@ (mov r8, r8)
 800e48e:	46bd      	mov	sp, r7
 800e490:	b002      	add	sp, #8
 800e492:	bd80      	pop	{r7, pc}
 800e494:	20000f68 	.word	0x20000f68
 800e498:	20001768 	.word	0x20001768
 800e49c:	20000f28 	.word	0x20000f28
 800e4a0:	20000f23 	.word	0x20000f23

0800e4a4 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800e4ac:	4b07      	ldr	r3, [pc, #28]	@ (800e4cc <HAL_I2S_ErrorCallback+0x28>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d106      	bne.n	800e4c4 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800e4b6:	4a06      	ldr	r2, [pc, #24]	@ (800e4d0 <HAL_I2S_ErrorCallback+0x2c>)
 800e4b8:	239e      	movs	r3, #158	@ 0x9e
 800e4ba:	0059      	lsls	r1, r3, #1
 800e4bc:	4b05      	ldr	r3, [pc, #20]	@ (800e4d4 <HAL_I2S_ErrorCallback+0x30>)
 800e4be:	0018      	movs	r0, r3
 800e4c0:	f002 f8f4 	bl	80106ac <errorHandler>
  }
}
 800e4c4:	46c0      	nop			@ (mov r8, r8)
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	b002      	add	sp, #8
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	2000196c 	.word	0x2000196c
 800e4d0:	08028220 	.word	0x08028220
 800e4d4:	08028a94 	.word	0x08028a94

0800e4d8 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800e4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4da:	b0b3      	sub	sp, #204	@ 0xcc
 800e4dc:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800e4de:	4ae2      	ldr	r2, [pc, #904]	@ (800e868 <calculateSPLQ31+0x390>)
 800e4e0:	2338      	movs	r3, #56	@ 0x38
 800e4e2:	2030      	movs	r0, #48	@ 0x30
 800e4e4:	181b      	adds	r3, r3, r0
 800e4e6:	19d9      	adds	r1, r3, r7
 800e4e8:	2334      	movs	r3, #52	@ 0x34
 800e4ea:	181b      	adds	r3, r3, r0
 800e4ec:	19d8      	adds	r0, r3, r7
 800e4ee:	2380      	movs	r3, #128	@ 0x80
 800e4f0:	f000 fc36 	bl	800ed60 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800e4f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	da00      	bge.n	800e4fc <calculateSPLQ31+0x24>
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	105b      	asrs	r3, r3, #1
 800e4fe:	001a      	movs	r2, r3
 800e500:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e502:	2b00      	cmp	r3, #0
 800e504:	da00      	bge.n	800e508 <calculateSPLQ31+0x30>
 800e506:	3301      	adds	r3, #1
 800e508:	105b      	asrs	r3, r3, #1
 800e50a:	18d3      	adds	r3, r2, r3
 800e50c:	2188      	movs	r1, #136	@ 0x88
 800e50e:	187a      	adds	r2, r7, r1
 800e510:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800e512:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e514:	187b      	adds	r3, r7, r1
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	1ad3      	subs	r3, r2, r3
 800e51a:	3304      	adds	r3, #4
 800e51c:	2284      	movs	r2, #132	@ 0x84
 800e51e:	18b9      	adds	r1, r7, r2
 800e520:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800e522:	18bb      	adds	r3, r7, r2
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4ad1      	ldr	r2, [pc, #836]	@ (800e86c <calculateSPLQ31+0x394>)
 800e528:	0019      	movs	r1, r3
 800e52a:	0010      	movs	r0, r2
 800e52c:	f000 fc58 	bl	800ede0 <getPo2factor>
 800e530:	0003      	movs	r3, r0
 800e532:	2280      	movs	r2, #128	@ 0x80
 800e534:	18ba      	adds	r2, r7, r2
 800e536:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800e538:	2300      	movs	r3, #0
 800e53a:	2284      	movs	r2, #132	@ 0x84
 800e53c:	2130      	movs	r1, #48	@ 0x30
 800e53e:	1852      	adds	r2, r2, r1
 800e540:	19d2      	adds	r2, r2, r7
 800e542:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800e544:	2300      	movs	r3, #0
 800e546:	2280      	movs	r2, #128	@ 0x80
 800e548:	1852      	adds	r2, r2, r1
 800e54a:	19d2      	adds	r2, r2, r7
 800e54c:	6013      	str	r3, [r2, #0]
 800e54e:	e032      	b.n	800e5b6 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800e550:	4ac5      	ldr	r2, [pc, #788]	@ (800e868 <calculateSPLQ31+0x390>)
 800e552:	2680      	movs	r6, #128	@ 0x80
 800e554:	2330      	movs	r3, #48	@ 0x30
 800e556:	18f1      	adds	r1, r6, r3
 800e558:	19cb      	adds	r3, r1, r7
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	589a      	ldr	r2, [r3, r2]
 800e560:	2188      	movs	r1, #136	@ 0x88
 800e562:	1879      	adds	r1, r7, r1
 800e564:	680b      	ldr	r3, [r1, #0]
 800e566:	1ad2      	subs	r2, r2, r3
 800e568:	2180      	movs	r1, #128	@ 0x80
 800e56a:	1879      	adds	r1, r7, r1
 800e56c:	680b      	ldr	r3, [r1, #0]
 800e56e:	409a      	lsls	r2, r3
 800e570:	0011      	movs	r1, r2
 800e572:	4abf      	ldr	r2, [pc, #764]	@ (800e870 <calculateSPLQ31+0x398>)
 800e574:	2084      	movs	r0, #132	@ 0x84
 800e576:	2330      	movs	r3, #48	@ 0x30
 800e578:	18c3      	adds	r3, r0, r3
 800e57a:	19db      	adds	r3, r3, r7
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	009b      	lsls	r3, r3, #2
 800e580:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800e582:	2230      	movs	r2, #48	@ 0x30
 800e584:	1883      	adds	r3, r0, r2
 800e586:	19db      	adds	r3, r3, r7
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	3301      	adds	r3, #1
 800e58c:	49b8      	ldr	r1, [pc, #736]	@ (800e870 <calculateSPLQ31+0x398>)
 800e58e:	009a      	lsls	r2, r3, #2
 800e590:	2300      	movs	r3, #0
 800e592:	5053      	str	r3, [r2, r1]
        count += 2;
 800e594:	2230      	movs	r2, #48	@ 0x30
 800e596:	1883      	adds	r3, r0, r2
 800e598:	19db      	adds	r3, r3, r7
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	3302      	adds	r3, #2
 800e59e:	0011      	movs	r1, r2
 800e5a0:	1882      	adds	r2, r0, r2
 800e5a2:	19d2      	adds	r2, r2, r7
 800e5a4:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800e5a6:	000a      	movs	r2, r1
 800e5a8:	18b3      	adds	r3, r6, r2
 800e5aa:	19db      	adds	r3, r3, r7
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	18b2      	adds	r2, r6, r2
 800e5b2:	19d2      	adds	r2, r2, r7
 800e5b4:	6013      	str	r3, [r2, #0]
 800e5b6:	2380      	movs	r3, #128	@ 0x80
 800e5b8:	2630      	movs	r6, #48	@ 0x30
 800e5ba:	199b      	adds	r3, r3, r6
 800e5bc:	19db      	adds	r3, r3, r7
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800e5c2:	d9c5      	bls.n	800e550 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800e5c4:	4bab      	ldr	r3, [pc, #684]	@ (800e874 <calculateSPLQ31+0x39c>)
 800e5c6:	6818      	ldr	r0, [r3, #0]
 800e5c8:	49a9      	ldr	r1, [pc, #676]	@ (800e870 <calculateSPLQ31+0x398>)
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f011 fd23 	bl	8020018 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800e5d2:	4aa9      	ldr	r2, [pc, #676]	@ (800e878 <calculateSPLQ31+0x3a0>)
 800e5d4:	2338      	movs	r3, #56	@ 0x38
 800e5d6:	199b      	adds	r3, r3, r6
 800e5d8:	19d9      	adds	r1, r3, r7
 800e5da:	2334      	movs	r3, #52	@ 0x34
 800e5dc:	199b      	adds	r3, r3, r6
 800e5de:	19d8      	adds	r0, r3, r7
 800e5e0:	237e      	movs	r3, #126	@ 0x7e
 800e5e2:	f000 fbbd 	bl	800ed60 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800e5e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e5e8:	2380      	movs	r3, #128	@ 0x80
 800e5ea:	061b      	lsls	r3, r3, #24
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d101      	bne.n	800e5f4 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800e5f0:	4b9e      	ldr	r3, [pc, #632]	@ (800e86c <calculateSPLQ31+0x394>)
 800e5f2:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800e5f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e5f6:	2380      	movs	r3, #128	@ 0x80
 800e5f8:	061b      	lsls	r3, r3, #24
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d101      	bne.n	800e602 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800e5fe:	4b9b      	ldr	r3, [pc, #620]	@ (800e86c <calculateSPLQ31+0x394>)
 800e600:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800e602:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e604:	17da      	asrs	r2, r3, #31
 800e606:	189b      	adds	r3, r3, r2
 800e608:	4053      	eors	r3, r2
 800e60a:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800e60c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e60e:	17da      	asrs	r2, r3, #31
 800e610:	189b      	adds	r3, r3, r2
 800e612:	4053      	eors	r3, r2
 800e614:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800e616:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e61a:	429a      	cmp	r2, r3
 800e61c:	dd01      	ble.n	800e622 <calculateSPLQ31+0x14a>
    {
        max = min;
 800e61e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e620:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800e622:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e624:	3304      	adds	r3, #4
 800e626:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800e628:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e62a:	4a90      	ldr	r2, [pc, #576]	@ (800e86c <calculateSPLQ31+0x394>)
 800e62c:	0019      	movs	r1, r3
 800e62e:	0010      	movs	r0, r2
 800e630:	f000 fbd6 	bl	800ede0 <getPo2factor>
 800e634:	0003      	movs	r3, r0
 800e636:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800e638:	2302      	movs	r3, #2
 800e63a:	22ac      	movs	r2, #172	@ 0xac
 800e63c:	18ba      	adds	r2, r7, r2
 800e63e:	6013      	str	r3, [r2, #0]
 800e640:	e012      	b.n	800e668 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800e642:	4a8b      	ldr	r2, [pc, #556]	@ (800e870 <calculateSPLQ31+0x398>)
 800e644:	20ac      	movs	r0, #172	@ 0xac
 800e646:	183b      	adds	r3, r7, r0
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	589a      	ldr	r2, [r3, r2]
 800e64e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e650:	409a      	lsls	r2, r3
 800e652:	0011      	movs	r1, r2
 800e654:	4a86      	ldr	r2, [pc, #536]	@ (800e870 <calculateSPLQ31+0x398>)
 800e656:	183b      	adds	r3, r7, r0
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800e65e:	183b      	adds	r3, r7, r0
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	3301      	adds	r3, #1
 800e664:	183a      	adds	r2, r7, r0
 800e666:	6013      	str	r3, [r2, #0]
 800e668:	23ac      	movs	r3, #172	@ 0xac
 800e66a:	18fb      	adds	r3, r7, r3
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e670:	d9e7      	bls.n	800e642 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800e672:	4b7d      	ldr	r3, [pc, #500]	@ (800e868 <calculateSPLQ31+0x390>)
 800e674:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800e676:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800e678:	4b7d      	ldr	r3, [pc, #500]	@ (800e870 <calculateSPLQ31+0x398>)
 800e67a:	2240      	movs	r2, #64	@ 0x40
 800e67c:	0018      	movs	r0, r3
 800e67e:	f012 fa75 	bl	8020b6c <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800e682:	2330      	movs	r3, #48	@ 0x30
 800e684:	18fb      	adds	r3, r7, r3
 800e686:	0018      	movs	r0, r3
 800e688:	2330      	movs	r3, #48	@ 0x30
 800e68a:	001a      	movs	r2, r3
 800e68c:	2100      	movs	r1, #0
 800e68e:	f014 f8b3 	bl	80227f8 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800e692:	2200      	movs	r2, #0
 800e694:	2300      	movs	r3, #0
 800e696:	21a0      	movs	r1, #160	@ 0xa0
 800e698:	1879      	adds	r1, r7, r1
 800e69a:	600a      	str	r2, [r1, #0]
 800e69c:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800e69e:	2301      	movs	r3, #1
 800e6a0:	229c      	movs	r2, #156	@ 0x9c
 800e6a2:	18ba      	adds	r2, r7, r2
 800e6a4:	6013      	str	r3, [r2, #0]
 800e6a6:	e05b      	b.n	800e760 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800e6a8:	269c      	movs	r6, #156	@ 0x9c
 800e6aa:	19bb      	adds	r3, r7, r6
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	009a      	lsls	r2, r3, #2
 800e6b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e6b2:	189b      	adds	r3, r3, r2
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	613b      	str	r3, [r7, #16]
 800e6b8:	17db      	asrs	r3, r3, #31
 800e6ba:	617b      	str	r3, [r7, #20]
 800e6bc:	4b6f      	ldr	r3, [pc, #444]	@ (800e87c <calculateSPLQ31+0x3a4>)
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	19bb      	adds	r3, r7, r6
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	005b      	lsls	r3, r3, #1
 800e6c6:	18d3      	adds	r3, r2, r3
 800e6c8:	881b      	ldrh	r3, [r3, #0]
 800e6ca:	60bb      	str	r3, [r7, #8]
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	60fb      	str	r3, [r7, #12]
 800e6d0:	68ba      	ldr	r2, [r7, #8]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6938      	ldr	r0, [r7, #16]
 800e6d6:	6979      	ldr	r1, [r7, #20]
 800e6d8:	f7f1 ff72 	bl	80005c0 <__aeabi_lmul>
 800e6dc:	0002      	movs	r2, r0
 800e6de:	000b      	movs	r3, r1
 800e6e0:	0010      	movs	r0, r2
 800e6e2:	0019      	movs	r1, r3
 800e6e4:	23a0      	movs	r3, #160	@ 0xa0
 800e6e6:	18fa      	adds	r2, r7, r3
 800e6e8:	6853      	ldr	r3, [r2, #4]
 800e6ea:	6812      	ldr	r2, [r2, #0]
 800e6ec:	1812      	adds	r2, r2, r0
 800e6ee:	414b      	adcs	r3, r1
 800e6f0:	21a0      	movs	r1, #160	@ 0xa0
 800e6f2:	1879      	adds	r1, r7, r1
 800e6f4:	600a      	str	r2, [r1, #0]
 800e6f6:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800e6f8:	4b61      	ldr	r3, [pc, #388]	@ (800e880 <calculateSPLQ31+0x3a8>)
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	19bb      	adds	r3, r7, r6
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	18d3      	adds	r3, r2, r3
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	2b06      	cmp	r3, #6
 800e706:	d025      	beq.n	800e754 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800e708:	4b5d      	ldr	r3, [pc, #372]	@ (800e880 <calculateSPLQ31+0x3a8>)
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	19bb      	adds	r3, r7, r6
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	18d3      	adds	r3, r2, r3
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	2230      	movs	r2, #48	@ 0x30
 800e716:	18ba      	adds	r2, r7, r2
 800e718:	00db      	lsls	r3, r3, #3
 800e71a:	18d3      	adds	r3, r2, r3
 800e71c:	6818      	ldr	r0, [r3, #0]
 800e71e:	6859      	ldr	r1, [r3, #4]
 800e720:	19bb      	adds	r3, r7, r6
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	009a      	lsls	r2, r3, #2
 800e726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e728:	189b      	adds	r3, r3, r2
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	603b      	str	r3, [r7, #0]
 800e72e:	17db      	asrs	r3, r3, #31
 800e730:	607b      	str	r3, [r7, #4]
 800e732:	4b53      	ldr	r3, [pc, #332]	@ (800e880 <calculateSPLQ31+0x3a8>)
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	19be      	adds	r6, r7, r6
 800e738:	6833      	ldr	r3, [r6, #0]
 800e73a:	18d3      	adds	r3, r2, r3
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	001e      	movs	r6, r3
 800e740:	683a      	ldr	r2, [r7, #0]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	1880      	adds	r0, r0, r2
 800e746:	4159      	adcs	r1, r3
 800e748:	2330      	movs	r3, #48	@ 0x30
 800e74a:	18fa      	adds	r2, r7, r3
 800e74c:	00f3      	lsls	r3, r6, #3
 800e74e:	18d3      	adds	r3, r2, r3
 800e750:	6018      	str	r0, [r3, #0]
 800e752:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800e754:	229c      	movs	r2, #156	@ 0x9c
 800e756:	18bb      	adds	r3, r7, r2
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	3301      	adds	r3, #1
 800e75c:	18ba      	adds	r2, r7, r2
 800e75e:	6013      	str	r3, [r2, #0]
 800e760:	239c      	movs	r3, #156	@ 0x9c
 800e762:	18fb      	adds	r3, r7, r3
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b3f      	cmp	r3, #63	@ 0x3f
 800e768:	d99e      	bls.n	800e6a8 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800e76a:	2380      	movs	r3, #128	@ 0x80
 800e76c:	18fb      	adds	r3, r7, r3
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	005b      	lsls	r3, r3, #1
 800e772:	001a      	movs	r2, r3
 800e774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e776:	005b      	lsls	r3, r3, #1
 800e778:	18d3      	adds	r3, r2, r3
 800e77a:	3b22      	subs	r3, #34	@ 0x22
 800e77c:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800e77e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e780:	17da      	asrs	r2, r3, #31
 800e782:	189b      	adds	r3, r3, r2
 800e784:	4053      	eors	r3, r2
 800e786:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800e788:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	da62      	bge.n	800e854 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800e78e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e790:	3b20      	subs	r3, #32
 800e792:	2b00      	cmp	r3, #0
 800e794:	db05      	blt.n	800e7a2 <calculateSPLQ31+0x2ca>
 800e796:	22a0      	movs	r2, #160	@ 0xa0
 800e798:	18ba      	adds	r2, r7, r2
 800e79a:	6812      	ldr	r2, [r2, #0]
 800e79c:	409a      	lsls	r2, r3
 800e79e:	627a      	str	r2, [r7, #36]	@ 0x24
 800e7a0:	e010      	b.n	800e7c4 <calculateSPLQ31+0x2ec>
 800e7a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e7a4:	2220      	movs	r2, #32
 800e7a6:	1ad3      	subs	r3, r2, r3
 800e7a8:	22a0      	movs	r2, #160	@ 0xa0
 800e7aa:	18ba      	adds	r2, r7, r2
 800e7ac:	6812      	ldr	r2, [r2, #0]
 800e7ae:	40da      	lsrs	r2, r3
 800e7b0:	0013      	movs	r3, r2
 800e7b2:	22a4      	movs	r2, #164	@ 0xa4
 800e7b4:	18ba      	adds	r2, r7, r2
 800e7b6:	6811      	ldr	r1, [r2, #0]
 800e7b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e7ba:	4091      	lsls	r1, r2
 800e7bc:	6279      	str	r1, [r7, #36]	@ 0x24
 800e7be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7c0:	431a      	orrs	r2, r3
 800e7c2:	627a      	str	r2, [r7, #36]	@ 0x24
 800e7c4:	21a0      	movs	r1, #160	@ 0xa0
 800e7c6:	187b      	adds	r3, r7, r1
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e7cc:	409a      	lsls	r2, r3
 800e7ce:	623a      	str	r2, [r7, #32]
 800e7d0:	6a3b      	ldr	r3, [r7, #32]
 800e7d2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800e7d4:	187a      	adds	r2, r7, r1
 800e7d6:	6013      	str	r3, [r2, #0]
 800e7d8:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e7da:	2300      	movs	r3, #0
 800e7dc:	2298      	movs	r2, #152	@ 0x98
 800e7de:	18ba      	adds	r2, r7, r2
 800e7e0:	6013      	str	r3, [r2, #0]
 800e7e2:	e031      	b.n	800e848 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800e7e4:	2330      	movs	r3, #48	@ 0x30
 800e7e6:	18fa      	adds	r2, r7, r3
 800e7e8:	2398      	movs	r3, #152	@ 0x98
 800e7ea:	18fb      	adds	r3, r7, r3
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	00db      	lsls	r3, r3, #3
 800e7f0:	18d3      	adds	r3, r2, r3
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e7f8:	3920      	subs	r1, #32
 800e7fa:	2900      	cmp	r1, #0
 800e7fc:	db03      	blt.n	800e806 <calculateSPLQ31+0x32e>
 800e7fe:	0010      	movs	r0, r2
 800e800:	4088      	lsls	r0, r1
 800e802:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800e804:	e00c      	b.n	800e820 <calculateSPLQ31+0x348>
 800e806:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e808:	2020      	movs	r0, #32
 800e80a:	1a41      	subs	r1, r0, r1
 800e80c:	0010      	movs	r0, r2
 800e80e:	40c8      	lsrs	r0, r1
 800e810:	0001      	movs	r1, r0
 800e812:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e814:	001c      	movs	r4, r3
 800e816:	4084      	lsls	r4, r0
 800e818:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800e81a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e81c:	4308      	orrs	r0, r1
 800e81e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800e820:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e822:	0013      	movs	r3, r2
 800e824:	408b      	lsls	r3, r1
 800e826:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e828:	2330      	movs	r3, #48	@ 0x30
 800e82a:	18fa      	adds	r2, r7, r3
 800e82c:	2098      	movs	r0, #152	@ 0x98
 800e82e:	183b      	adds	r3, r7, r0
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	00db      	lsls	r3, r3, #3
 800e834:	18d3      	adds	r3, r2, r3
 800e836:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e83a:	6019      	str	r1, [r3, #0]
 800e83c:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e83e:	183b      	adds	r3, r7, r0
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	3301      	adds	r3, #1
 800e844:	183a      	adds	r2, r7, r0
 800e846:	6013      	str	r3, [r2, #0]
 800e848:	2398      	movs	r3, #152	@ 0x98
 800e84a:	18fb      	adds	r3, r7, r3
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2b05      	cmp	r3, #5
 800e850:	d9c8      	bls.n	800e7e4 <calculateSPLQ31+0x30c>
 800e852:	e06b      	b.n	800e92c <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800e854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e856:	3b20      	subs	r3, #32
 800e858:	2b00      	cmp	r3, #0
 800e85a:	db13      	blt.n	800e884 <calculateSPLQ31+0x3ac>
 800e85c:	22a4      	movs	r2, #164	@ 0xa4
 800e85e:	18ba      	adds	r2, r7, r2
 800e860:	6812      	ldr	r2, [r2, #0]
 800e862:	40da      	lsrs	r2, r3
 800e864:	61ba      	str	r2, [r7, #24]
 800e866:	e01e      	b.n	800e8a6 <calculateSPLQ31+0x3ce>
 800e868:	20001768 	.word	0x20001768
 800e86c:	7fffffff 	.word	0x7fffffff
 800e870:	200019b4 	.word	0x200019b4
 800e874:	200000c4 	.word	0x200000c4
 800e878:	200019bc 	.word	0x200019bc
 800e87c:	200000c8 	.word	0x200000c8
 800e880:	200000d4 	.word	0x200000d4
 800e884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e886:	2220      	movs	r2, #32
 800e888:	1ad3      	subs	r3, r2, r3
 800e88a:	22a4      	movs	r2, #164	@ 0xa4
 800e88c:	18ba      	adds	r2, r7, r2
 800e88e:	6812      	ldr	r2, [r2, #0]
 800e890:	409a      	lsls	r2, r3
 800e892:	0013      	movs	r3, r2
 800e894:	22a0      	movs	r2, #160	@ 0xa0
 800e896:	18ba      	adds	r2, r7, r2
 800e898:	6811      	ldr	r1, [r2, #0]
 800e89a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e89c:	40d1      	lsrs	r1, r2
 800e89e:	61b9      	str	r1, [r7, #24]
 800e8a0:	69ba      	ldr	r2, [r7, #24]
 800e8a2:	431a      	orrs	r2, r3
 800e8a4:	61ba      	str	r2, [r7, #24]
 800e8a6:	23a4      	movs	r3, #164	@ 0xa4
 800e8a8:	18fb      	adds	r3, r7, r3
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8ae:	40da      	lsrs	r2, r3
 800e8b0:	61fa      	str	r2, [r7, #28]
 800e8b2:	69ba      	ldr	r2, [r7, #24]
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	21a0      	movs	r1, #160	@ 0xa0
 800e8b8:	1879      	adds	r1, r7, r1
 800e8ba:	600a      	str	r2, [r1, #0]
 800e8bc:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e8be:	2300      	movs	r3, #0
 800e8c0:	2294      	movs	r2, #148	@ 0x94
 800e8c2:	18ba      	adds	r2, r7, r2
 800e8c4:	6013      	str	r3, [r2, #0]
 800e8c6:	e02c      	b.n	800e922 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800e8c8:	2330      	movs	r3, #48	@ 0x30
 800e8ca:	18fa      	adds	r2, r7, r3
 800e8cc:	2394      	movs	r3, #148	@ 0x94
 800e8ce:	18fb      	adds	r3, r7, r3
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	00db      	lsls	r3, r3, #3
 800e8d4:	18d3      	adds	r3, r2, r3
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e8dc:	3920      	subs	r1, #32
 800e8de:	2900      	cmp	r1, #0
 800e8e0:	db03      	blt.n	800e8ea <calculateSPLQ31+0x412>
 800e8e2:	0018      	movs	r0, r3
 800e8e4:	40c8      	lsrs	r0, r1
 800e8e6:	0004      	movs	r4, r0
 800e8e8:	e00a      	b.n	800e900 <calculateSPLQ31+0x428>
 800e8ea:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e8ec:	2020      	movs	r0, #32
 800e8ee:	1a41      	subs	r1, r0, r1
 800e8f0:	0018      	movs	r0, r3
 800e8f2:	4088      	lsls	r0, r1
 800e8f4:	0001      	movs	r1, r0
 800e8f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e8f8:	0016      	movs	r6, r2
 800e8fa:	40c6      	lsrs	r6, r0
 800e8fc:	0034      	movs	r4, r6
 800e8fe:	430c      	orrs	r4, r1
 800e900:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e902:	40cb      	lsrs	r3, r1
 800e904:	001d      	movs	r5, r3
 800e906:	2330      	movs	r3, #48	@ 0x30
 800e908:	18fa      	adds	r2, r7, r3
 800e90a:	2194      	movs	r1, #148	@ 0x94
 800e90c:	187b      	adds	r3, r7, r1
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	00db      	lsls	r3, r3, #3
 800e912:	18d3      	adds	r3, r2, r3
 800e914:	601c      	str	r4, [r3, #0]
 800e916:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e918:	187b      	adds	r3, r7, r1
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	3301      	adds	r3, #1
 800e91e:	187a      	adds	r2, r7, r1
 800e920:	6013      	str	r3, [r2, #0]
 800e922:	2394      	movs	r3, #148	@ 0x94
 800e924:	18fb      	adds	r3, r7, r3
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b05      	cmp	r3, #5
 800e92a:	d9cd      	bls.n	800e8c8 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800e92c:	230f      	movs	r3, #15
 800e92e:	425d      	negs	r5, r3
 800e930:	2305      	movs	r3, #5
 800e932:	425e      	negs	r6, r3
 800e934:	4b4a      	ldr	r3, [pc, #296]	@ (800ea60 <calculateSPLQ31+0x588>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	4b4a      	ldr	r3, [pc, #296]	@ (800ea64 <calculateSPLQ31+0x58c>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	21a0      	movs	r1, #160	@ 0xa0
 800e942:	1879      	adds	r1, r7, r1
 800e944:	6808      	ldr	r0, [r1, #0]
 800e946:	6849      	ldr	r1, [r1, #4]
 800e948:	4c47      	ldr	r4, [pc, #284]	@ (800ea68 <calculateSPLQ31+0x590>)
 800e94a:	9403      	str	r4, [sp, #12]
 800e94c:	4c47      	ldr	r4, [pc, #284]	@ (800ea6c <calculateSPLQ31+0x594>)
 800e94e:	9402      	str	r4, [sp, #8]
 800e950:	9301      	str	r3, [sp, #4]
 800e952:	9200      	str	r2, [sp, #0]
 800e954:	0033      	movs	r3, r6
 800e956:	002a      	movs	r2, r5
 800e958:	f000 fa86 	bl	800ee68 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800e95c:	2300      	movs	r3, #0
 800e95e:	2290      	movs	r2, #144	@ 0x90
 800e960:	18ba      	adds	r2, r7, r2
 800e962:	6013      	str	r3, [r2, #0]
 800e964:	e026      	b.n	800e9b4 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800e966:	2330      	movs	r3, #48	@ 0x30
 800e968:	18fa      	adds	r2, r7, r3
 800e96a:	2490      	movs	r4, #144	@ 0x90
 800e96c:	193b      	adds	r3, r7, r4
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	00db      	lsls	r3, r3, #3
 800e972:	18d3      	adds	r3, r2, r3
 800e974:	6818      	ldr	r0, [r3, #0]
 800e976:	6859      	ldr	r1, [r3, #4]
 800e978:	230f      	movs	r3, #15
 800e97a:	425d      	negs	r5, r3
 800e97c:	2305      	movs	r3, #5
 800e97e:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800e980:	193b      	adds	r3, r7, r4
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	009a      	lsls	r2, r3, #2
 800e986:	4b3a      	ldr	r3, [pc, #232]	@ (800ea70 <calculateSPLQ31+0x598>)
 800e988:	18d3      	adds	r3, r2, r3
 800e98a:	193a      	adds	r2, r7, r4
 800e98c:	6812      	ldr	r2, [r2, #0]
 800e98e:	0094      	lsls	r4, r2, #2
 800e990:	4a38      	ldr	r2, [pc, #224]	@ (800ea74 <calculateSPLQ31+0x59c>)
 800e992:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800e994:	9203      	str	r2, [sp, #12]
 800e996:	9302      	str	r3, [sp, #8]
 800e998:	2300      	movs	r3, #0
 800e99a:	9301      	str	r3, [sp, #4]
 800e99c:	2300      	movs	r3, #0
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	0033      	movs	r3, r6
 800e9a2:	002a      	movs	r2, r5
 800e9a4:	f000 fa60 	bl	800ee68 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800e9a8:	2490      	movs	r4, #144	@ 0x90
 800e9aa:	193b      	adds	r3, r7, r4
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	193a      	adds	r2, r7, r4
 800e9b2:	6013      	str	r3, [r2, #0]
 800e9b4:	2390      	movs	r3, #144	@ 0x90
 800e9b6:	18fb      	adds	r3, r7, r3
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2b05      	cmp	r3, #5
 800e9bc:	d9d3      	bls.n	800e966 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800e9be:	4b2b      	ldr	r3, [pc, #172]	@ (800ea6c <calculateSPLQ31+0x594>)
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	4b2d      	ldr	r3, [pc, #180]	@ (800ea78 <calculateSPLQ31+0x5a0>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	18d2      	adds	r2, r2, r3
 800e9c8:	4b2b      	ldr	r3, [pc, #172]	@ (800ea78 <calculateSPLQ31+0x5a0>)
 800e9ca:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800e9cc:	4b26      	ldr	r3, [pc, #152]	@ (800ea68 <calculateSPLQ31+0x590>)
 800e9ce:	681a      	ldr	r2, [r3, #0]
 800e9d0:	4b2a      	ldr	r3, [pc, #168]	@ (800ea7c <calculateSPLQ31+0x5a4>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	18d2      	adds	r2, r2, r3
 800e9d6:	4b29      	ldr	r3, [pc, #164]	@ (800ea7c <calculateSPLQ31+0x5a4>)
 800e9d8:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e9da:	2300      	movs	r3, #0
 800e9dc:	228c      	movs	r2, #140	@ 0x8c
 800e9de:	18ba      	adds	r2, r7, r2
 800e9e0:	6013      	str	r3, [r2, #0]
 800e9e2:	e025      	b.n	800ea30 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800e9e4:	4b22      	ldr	r3, [pc, #136]	@ (800ea70 <calculateSPLQ31+0x598>)
 800e9e6:	208c      	movs	r0, #140	@ 0x8c
 800e9e8:	183a      	adds	r2, r7, r0
 800e9ea:	6812      	ldr	r2, [r2, #0]
 800e9ec:	0092      	lsls	r2, r2, #2
 800e9ee:	58d2      	ldr	r2, [r2, r3]
 800e9f0:	4b23      	ldr	r3, [pc, #140]	@ (800ea80 <calculateSPLQ31+0x5a8>)
 800e9f2:	1839      	adds	r1, r7, r0
 800e9f4:	6809      	ldr	r1, [r1, #0]
 800e9f6:	0089      	lsls	r1, r1, #2
 800e9f8:	58cb      	ldr	r3, [r1, r3]
 800e9fa:	18d1      	adds	r1, r2, r3
 800e9fc:	4b20      	ldr	r3, [pc, #128]	@ (800ea80 <calculateSPLQ31+0x5a8>)
 800e9fe:	183a      	adds	r2, r7, r0
 800ea00:	6812      	ldr	r2, [r2, #0]
 800ea02:	0092      	lsls	r2, r2, #2
 800ea04:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800ea06:	4b1b      	ldr	r3, [pc, #108]	@ (800ea74 <calculateSPLQ31+0x59c>)
 800ea08:	183a      	adds	r2, r7, r0
 800ea0a:	6812      	ldr	r2, [r2, #0]
 800ea0c:	0092      	lsls	r2, r2, #2
 800ea0e:	58d2      	ldr	r2, [r2, r3]
 800ea10:	4b1c      	ldr	r3, [pc, #112]	@ (800ea84 <calculateSPLQ31+0x5ac>)
 800ea12:	1839      	adds	r1, r7, r0
 800ea14:	6809      	ldr	r1, [r1, #0]
 800ea16:	0089      	lsls	r1, r1, #2
 800ea18:	58cb      	ldr	r3, [r1, r3]
 800ea1a:	18d1      	adds	r1, r2, r3
 800ea1c:	4b19      	ldr	r3, [pc, #100]	@ (800ea84 <calculateSPLQ31+0x5ac>)
 800ea1e:	183a      	adds	r2, r7, r0
 800ea20:	6812      	ldr	r2, [r2, #0]
 800ea22:	0092      	lsls	r2, r2, #2
 800ea24:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ea26:	183b      	adds	r3, r7, r0
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	183a      	adds	r2, r7, r0
 800ea2e:	6013      	str	r3, [r2, #0]
 800ea30:	238c      	movs	r3, #140	@ 0x8c
 800ea32:	18fb      	adds	r3, r7, r3
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	2b05      	cmp	r3, #5
 800ea38:	d9d4      	bls.n	800e9e4 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800ea3a:	4b13      	ldr	r3, [pc, #76]	@ (800ea88 <calculateSPLQ31+0x5b0>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	1c5a      	adds	r2, r3, #1
 800ea40:	4b11      	ldr	r3, [pc, #68]	@ (800ea88 <calculateSPLQ31+0x5b0>)
 800ea42:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800ea44:	4b10      	ldr	r3, [pc, #64]	@ (800ea88 <calculateSPLQ31+0x5b0>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	2b0f      	cmp	r3, #15
 800ea4a:	d905      	bls.n	800ea58 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800ea4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ea8c <calculateSPLQ31+0x5b4>)
 800ea4e:	2201      	movs	r2, #1
 800ea50:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800ea52:	4b0f      	ldr	r3, [pc, #60]	@ (800ea90 <calculateSPLQ31+0x5b8>)
 800ea54:	2200      	movs	r2, #0
 800ea56:	701a      	strb	r2, [r3, #0]
    }
}
 800ea58:	46c0      	nop			@ (mov r8, r8)
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	b02f      	add	sp, #188	@ 0xbc
 800ea5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea60:	200000cc 	.word	0x200000cc
 800ea64:	200000d0 	.word	0x200000d0
 800ea68:	20000f34 	.word	0x20000f34
 800ea6c:	20000f30 	.word	0x20000f30
 800ea70:	20000f38 	.word	0x20000f38
 800ea74:	20000f50 	.word	0x20000f50
 800ea78:	20001978 	.word	0x20001978
 800ea7c:	2000197c 	.word	0x2000197c
 800ea80:	20001980 	.word	0x20001980
 800ea84:	20001998 	.word	0x20001998
 800ea88:	200019b0 	.word	0x200019b0
 800ea8c:	20000f25 	.word	0x20000f25
 800ea90:	20000f23 	.word	0x20000f23

0800ea94 <resetSPLstate>:

static void resetSPLstate(void)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b082      	sub	sp, #8
 800ea98:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800ea9a:	4b11      	ldr	r3, [pc, #68]	@ (800eae0 <resetSPLstate+0x4c>)
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800eaa0:	4b10      	ldr	r3, [pc, #64]	@ (800eae4 <resetSPLstate+0x50>)
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800eaa6:	4b10      	ldr	r3, [pc, #64]	@ (800eae8 <resetSPLstate+0x54>)
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800eaac:	2300      	movs	r3, #0
 800eaae:	607b      	str	r3, [r7, #4]
 800eab0:	e00c      	b.n	800eacc <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800eab2:	4b0e      	ldr	r3, [pc, #56]	@ (800eaec <resetSPLstate+0x58>)
 800eab4:	687a      	ldr	r2, [r7, #4]
 800eab6:	0092      	lsls	r2, r2, #2
 800eab8:	2100      	movs	r1, #0
 800eaba:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800eabc:	4b0c      	ldr	r3, [pc, #48]	@ (800eaf0 <resetSPLstate+0x5c>)
 800eabe:	687a      	ldr	r2, [r7, #4]
 800eac0:	0092      	lsls	r2, r2, #2
 800eac2:	2100      	movs	r1, #0
 800eac4:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	3301      	adds	r3, #1
 800eaca:	607b      	str	r3, [r7, #4]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b05      	cmp	r3, #5
 800ead0:	d9ef      	bls.n	800eab2 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800ead2:	4b08      	ldr	r3, [pc, #32]	@ (800eaf4 <resetSPLstate+0x60>)
 800ead4:	2200      	movs	r2, #0
 800ead6:	701a      	strb	r2, [r3, #0]
}
 800ead8:	46c0      	nop			@ (mov r8, r8)
 800eada:	46bd      	mov	sp, r7
 800eadc:	b002      	add	sp, #8
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	20001978 	.word	0x20001978
 800eae4:	2000197c 	.word	0x2000197c
 800eae8:	200019b0 	.word	0x200019b0
 800eaec:	20001980 	.word	0x20001980
 800eaf0:	20001998 	.word	0x20001998
 800eaf4:	20000f25 	.word	0x20000f25

0800eaf8 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800eaf8:	b5b0      	push	{r4, r5, r7, lr}
 800eafa:	b090      	sub	sp, #64	@ 0x40
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	0019      	movs	r1, r3
 800eb04:	1dfb      	adds	r3, r7, #7
 800eb06:	701a      	strb	r2, [r3, #0]
 800eb08:	1dbb      	adds	r3, r7, #6
 800eb0a:	1c0a      	adds	r2, r1, #0
 800eb0c:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800eb0e:	1dfb      	adds	r3, r7, #7
 800eb10:	781b      	ldrb	r3, [r3, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d005      	beq.n	800eb22 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800eb16:	4b3b      	ldr	r3, [pc, #236]	@ (800ec04 <getFilteredMaxAmplitudeQ31+0x10c>)
 800eb18:	2200      	movs	r2, #0
 800eb1a:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800eb1c:	4b3a      	ldr	r3, [pc, #232]	@ (800ec08 <getFilteredMaxAmplitudeQ31+0x110>)
 800eb1e:	2200      	movs	r2, #0
 800eb20:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800eb22:	2300      	movs	r3, #0
 800eb24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800eb26:	2300      	movs	r3, #0
 800eb28:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800eb2a:	2305      	movs	r3, #5
 800eb2c:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800eb2e:	2300      	movs	r3, #0
 800eb30:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb32:	e040      	b.n	800ebb6 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800eb34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	68fa      	ldr	r2, [r7, #12]
 800eb3a:	18d3      	adds	r3, r2, r3
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb40:	409a      	lsls	r2, r3
 800eb42:	0013      	movs	r3, r2
 800eb44:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800eb46:	4b30      	ldr	r3, [pc, #192]	@ (800ec08 <getFilteredMaxAmplitudeQ31+0x110>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	425a      	negs	r2, r3
 800eb4c:	4b2e      	ldr	r3, [pc, #184]	@ (800ec08 <getFilteredMaxAmplitudeQ31+0x110>)
 800eb4e:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800eb50:	2418      	movs	r4, #24
 800eb52:	193a      	adds	r2, r7, r4
 800eb54:	492c      	ldr	r1, [pc, #176]	@ (800ec08 <getFilteredMaxAmplitudeQ31+0x110>)
 800eb56:	231c      	movs	r3, #28
 800eb58:	18f8      	adds	r0, r7, r3
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	f012 f85e 	bl	8020c1c <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800eb60:	2514      	movs	r5, #20
 800eb62:	197a      	adds	r2, r7, r5
 800eb64:	1939      	adds	r1, r7, r4
 800eb66:	4829      	ldr	r0, [pc, #164]	@ (800ec0c <getFilteredMaxAmplitudeQ31+0x114>)
 800eb68:	2301      	movs	r3, #1
 800eb6a:	f012 f825 	bl	8020bb8 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800eb6e:	2410      	movs	r4, #16
 800eb70:	193a      	adds	r2, r7, r4
 800eb72:	4924      	ldr	r1, [pc, #144]	@ (800ec04 <getFilteredMaxAmplitudeQ31+0x10c>)
 800eb74:	4826      	ldr	r0, [pc, #152]	@ (800ec10 <getFilteredMaxAmplitudeQ31+0x118>)
 800eb76:	2301      	movs	r3, #1
 800eb78:	f012 f81e 	bl	8020bb8 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800eb7c:	4a21      	ldr	r2, [pc, #132]	@ (800ec04 <getFilteredMaxAmplitudeQ31+0x10c>)
 800eb7e:	1939      	adds	r1, r7, r4
 800eb80:	1978      	adds	r0, r7, r5
 800eb82:	2301      	movs	r3, #1
 800eb84:	f012 f84a 	bl	8020c1c <arm_add_q31>

        lastData = fx;
 800eb88:	69fa      	ldr	r2, [r7, #28]
 800eb8a:	4b1f      	ldr	r3, [pc, #124]	@ (800ec08 <getFilteredMaxAmplitudeQ31+0x110>)
 800eb8c:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800eb8e:	4b1d      	ldr	r3, [pc, #116]	@ (800ec04 <getFilteredMaxAmplitudeQ31+0x10c>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eb94:	429a      	cmp	r2, r3
 800eb96:	da03      	bge.n	800eba0 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800eb98:	4b1a      	ldr	r3, [pc, #104]	@ (800ec04 <getFilteredMaxAmplitudeQ31+0x10c>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb9e:	e007      	b.n	800ebb0 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800eba0:	4b18      	ldr	r3, [pc, #96]	@ (800ec04 <getFilteredMaxAmplitudeQ31+0x10c>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eba6:	429a      	cmp	r2, r3
 800eba8:	dd02      	ble.n	800ebb0 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800ebaa:	4b16      	ldr	r3, [pc, #88]	@ (800ec04 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800ebb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ebb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d3ba      	bcc.n	800eb34 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800ebbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebc0:	17da      	asrs	r2, r3, #31
 800ebc2:	189b      	adds	r3, r3, r2
 800ebc4:	4053      	eors	r3, r2
 800ebc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800ebc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebca:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800ebcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ebce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d200      	bcs.n	800ebd6 <getFilteredMaxAmplitudeQ31+0xde>
 800ebd4:	0013      	movs	r3, r2
 800ebd6:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800ebd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebdc:	40da      	lsrs	r2, r3
 800ebde:	0013      	movs	r3, r2
 800ebe0:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800ebe2:	1dbb      	adds	r3, r7, #6
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d007      	beq.n	800ebfa <getFilteredMaxAmplitudeQ31+0x102>
 800ebea:	4b0a      	ldr	r3, [pc, #40]	@ (800ec14 <getFilteredMaxAmplitudeQ31+0x11c>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	6a3a      	ldr	r2, [r7, #32]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d902      	bls.n	800ebfa <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800ebf4:	4b07      	ldr	r3, [pc, #28]	@ (800ec14 <getFilteredMaxAmplitudeQ31+0x11c>)
 800ebf6:	6a3a      	ldr	r2, [r7, #32]
 800ebf8:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800ebfa:	6a3b      	ldr	r3, [r7, #32]
}
 800ebfc:	0018      	movs	r0, r3
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	b010      	add	sp, #64	@ 0x40
 800ec02:	bdb0      	pop	{r4, r5, r7, pc}
 800ec04:	20001db4 	.word	0x20001db4
 800ec08:	20001db8 	.word	0x20001db8
 800ec0c:	08028a8c 	.word	0x08028a8c
 800ec10:	08028a90 	.word	0x08028a90
 800ec14:	20000f2c 	.word	0x20000f2c

0800ec18 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b086      	sub	sp, #24
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800ec24:	4913      	ldr	r1, [pc, #76]	@ (800ec74 <floatToIntAndFrac2dp+0x5c>)
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	f7f2 f9ba 	bl	8000fa0 <__aeabi_fmul>
 800ec2c:	1c03      	adds	r3, r0, #0
 800ec2e:	1c18      	adds	r0, r3, #0
 800ec30:	f016 fc4a 	bl	80254c8 <roundf>
 800ec34:	1c03      	adds	r3, r0, #0
 800ec36:	1c18      	adds	r0, r3, #0
 800ec38:	f7f1 fcf0 	bl	800061c <__aeabi_f2uiz>
 800ec3c:	0003      	movs	r3, r0
 800ec3e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	2164      	movs	r1, #100	@ 0x64
 800ec44:	0018      	movs	r0, r3
 800ec46:	f7f1 faad 	bl	80001a4 <__udivsi3>
 800ec4a:	0003      	movs	r3, r0
 800ec4c:	001a      	movs	r2, r3
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	b2da      	uxtb	r2, r3
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	2164      	movs	r1, #100	@ 0x64
 800ec5e:	434b      	muls	r3, r1
 800ec60:	b2db      	uxtb	r3, r3
 800ec62:	1ad3      	subs	r3, r2, r3
 800ec64:	b2da      	uxtb	r2, r3
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	701a      	strb	r2, [r3, #0]
}
 800ec6a:	46c0      	nop			@ (mov r8, r8)
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	b006      	add	sp, #24
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	46c0      	nop			@ (mov r8, r8)
 800ec74:	42c80000 	.word	0x42c80000

0800ec78 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b086      	sub	sp, #24
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800ec84:	4914      	ldr	r1, [pc, #80]	@ (800ecd8 <floatToIntAndFrac1dp+0x60>)
 800ec86:	68f8      	ldr	r0, [r7, #12]
 800ec88:	f7f2 f98a 	bl	8000fa0 <__aeabi_fmul>
 800ec8c:	1c03      	adds	r3, r0, #0
 800ec8e:	1c18      	adds	r0, r3, #0
 800ec90:	f016 fc1a 	bl	80254c8 <roundf>
 800ec94:	1c03      	adds	r3, r0, #0
 800ec96:	1c18      	adds	r0, r3, #0
 800ec98:	f7f1 fcc0 	bl	800061c <__aeabi_f2uiz>
 800ec9c:	0003      	movs	r3, r0
 800ec9e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	210a      	movs	r1, #10
 800eca4:	0018      	movs	r0, r3
 800eca6:	f7f1 fa7d 	bl	80001a4 <__udivsi3>
 800ecaa:	0003      	movs	r3, r0
 800ecac:	001a      	movs	r2, r3
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	b2da      	uxtb	r2, r3
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	1c19      	adds	r1, r3, #0
 800ecbe:	0089      	lsls	r1, r1, #2
 800ecc0:	18cb      	adds	r3, r1, r3
 800ecc2:	18db      	adds	r3, r3, r3
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	1ad3      	subs	r3, r2, r3
 800ecc8:	b2da      	uxtb	r2, r3
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	701a      	strb	r2, [r3, #0]
}
 800ecce:	46c0      	nop			@ (mov r8, r8)
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	b006      	add	sp, #24
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	46c0      	nop			@ (mov r8, r8)
 800ecd8:	41200000 	.word	0x41200000

0800ecdc <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800ecdc:	b590      	push	{r4, r7, lr}
 800ecde:	b087      	sub	sp, #28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	607a      	str	r2, [r7, #4]
 800ece8:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f7f2 fc70 	bl	80015d0 <__aeabi_i2f>
 800ecf0:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ecf2:	6838      	ldr	r0, [r7, #0]
 800ecf4:	f7f2 fc6c 	bl	80015d0 <__aeabi_i2f>
 800ecf8:	1c03      	adds	r3, r0, #0
 800ecfa:	4918      	ldr	r1, [pc, #96]	@ (800ed5c <sumToIntAverage+0x80>)
 800ecfc:	1c18      	adds	r0, r3, #0
 800ecfe:	f7f1 ff69 	bl	8000bd4 <__aeabi_fdiv>
 800ed02:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ed04:	1c19      	adds	r1, r3, #0
 800ed06:	1c20      	adds	r0, r4, #0
 800ed08:	f7f1 fdda 	bl	80008c0 <__aeabi_fadd>
 800ed0c:	1c03      	adds	r3, r0, #0
 800ed0e:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ed10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed12:	f7f2 fca9 	bl	8001668 <__aeabi_ui2f>
 800ed16:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ed18:	1c19      	adds	r1, r3, #0
 800ed1a:	1c20      	adds	r0, r4, #0
 800ed1c:	f7f1 ff5a 	bl	8000bd4 <__aeabi_fdiv>
 800ed20:	1c03      	adds	r3, r0, #0
 800ed22:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800ed24:	2300      	movs	r3, #0
 800ed26:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800ed28:	68ba      	ldr	r2, [r7, #8]
 800ed2a:	2310      	movs	r3, #16
 800ed2c:	18f9      	adds	r1, r7, r3
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	1c18      	adds	r0, r3, #0
 800ed32:	f7ff ffa1 	bl	800ec78 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	2bff      	cmp	r3, #255	@ 0xff
 800ed3a:	d906      	bls.n	800ed4a <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	22ff      	movs	r2, #255	@ 0xff
 800ed40:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	2209      	movs	r2, #9
 800ed46:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800ed48:	e003      	b.n	800ed52 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	b2da      	uxtb	r2, r3
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	701a      	strb	r2, [r3, #0]
}
 800ed52:	46c0      	nop			@ (mov r8, r8)
 800ed54:	46bd      	mov	sp, r7
 800ed56:	b007      	add	sp, #28
 800ed58:	bd90      	pop	{r4, r7, pc}
 800ed5a:	46c0      	nop			@ (mov r8, r8)
 800ed5c:	41200000 	.word	0x41200000

0800ed60 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b086      	sub	sp, #24
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	607a      	str	r2, [r7, #4]
 800ed6c:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	2280      	movs	r2, #128	@ 0x80
 800ed72:	0612      	lsls	r2, r2, #24
 800ed74:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	4a18      	ldr	r2, [pc, #96]	@ (800eddc <findMinMax+0x7c>)
 800ed7a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	617b      	str	r3, [r7, #20]
 800ed80:	e022      	b.n	800edc8 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	18d3      	adds	r3, r2, r3
 800ed8a:	681a      	ldr	r2, [r3, #0]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	da06      	bge.n	800eda2 <findMinMax+0x42>
        {
            min[0] = array[i];
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	009b      	lsls	r3, r3, #2
 800ed98:	687a      	ldr	r2, [r7, #4]
 800ed9a:	18d3      	adds	r3, r2, r3
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	009b      	lsls	r3, r3, #2
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	18d3      	adds	r3, r2, r3
 800edaa:	681a      	ldr	r2, [r3, #0]
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	dd06      	ble.n	800edc2 <findMinMax+0x62>
        {
            max[0] = array[i];
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	18d3      	adds	r3, r2, r3
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	3301      	adds	r3, #1
 800edc6:	617b      	str	r3, [r7, #20]
 800edc8:	697a      	ldr	r2, [r7, #20]
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d3d8      	bcc.n	800ed82 <findMinMax+0x22>
        }
    }
}
 800edd0:	46c0      	nop			@ (mov r8, r8)
 800edd2:	46c0      	nop			@ (mov r8, r8)
 800edd4:	46bd      	mov	sp, r7
 800edd6:	b006      	add	sp, #24
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	46c0      	nop			@ (mov r8, r8)
 800eddc:	7fffffff 	.word	0x7fffffff

0800ede0 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800edea:	2300      	movs	r3, #0
 800edec:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d302      	bcc.n	800edfc <getPo2factor+0x1c>
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d107      	bne.n	800ee0c <getPo2factor+0x2c>
    {
        return 0;
 800edfc:	2300      	movs	r3, #0
 800edfe:	e00d      	b.n	800ee1c <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	085b      	lsrs	r3, r3, #1
 800ee04:	607b      	str	r3, [r7, #4]
        bitShift++;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d2f5      	bcs.n	800ee00 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	3b01      	subs	r3, #1
 800ee18:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
}
 800ee1c:	0018      	movs	r0, r3
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	b004      	add	sp, #16
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b086      	sub	sp, #24
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	60b9      	str	r1, [r7, #8]
 800ee2e:	607a      	str	r2, [r7, #4]
 800ee30:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800ee32:	68f8      	ldr	r0, [r7, #12]
 800ee34:	f7f2 fc18 	bl	8001668 <__aeabi_ui2f>
 800ee38:	1c03      	adds	r3, r0, #0
 800ee3a:	1c19      	adds	r1, r3, #0
 800ee3c:	68b8      	ldr	r0, [r7, #8]
 800ee3e:	f7f2 f8af 	bl	8000fa0 <__aeabi_fmul>
 800ee42:	1c03      	adds	r3, r0, #0
 800ee44:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800ee46:	2300      	movs	r3, #0
 800ee48:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800ee4a:	683a      	ldr	r2, [r7, #0]
 800ee4c:	2310      	movs	r3, #16
 800ee4e:	18f9      	adds	r1, r7, r3
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	1c18      	adds	r0, r3, #0
 800ee54:	f7ff fee0 	bl	800ec18 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	b29a      	uxth	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	801a      	strh	r2, [r3, #0]
}
 800ee60:	46c0      	nop			@ (mov r8, r8)
 800ee62:	46bd      	mov	sp, r7
 800ee64:	b006      	add	sp, #24
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60b8      	str	r0, [r7, #8]
 800ee70:	60f9      	str	r1, [r7, #12]
 800ee72:	607a      	str	r2, [r7, #4]
 800ee74:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800ee76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee78:	6a3a      	ldr	r2, [r7, #32]
 800ee7a:	68b8      	ldr	r0, [r7, #8]
 800ee7c:	68f9      	ldr	r1, [r7, #12]
 800ee7e:	f7fa f8dd 	bl	800903c <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800ee82:	6a3b      	ldr	r3, [r7, #32]
 800ee84:	681a      	ldr	r2, [r3, #0]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	18d2      	adds	r2, r2, r3
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	18d2      	adds	r2, r2, r3
 800ee8e:	6a3b      	ldr	r3, [r7, #32]
 800ee90:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800ee92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	18d2      	adds	r2, r2, r3
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	18d2      	adds	r2, r2, r3
 800ee9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eea0:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800eea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eea4:	6a3b      	ldr	r3, [r7, #32]
 800eea6:	0011      	movs	r1, r2
 800eea8:	0018      	movs	r0, r3
 800eeaa:	f7fa f957 	bl	800915c <correctIntFracNumber>
}
 800eeae:	46c0      	nop			@ (mov r8, r8)
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	b004      	add	sp, #16
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b086      	sub	sp, #24
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	60f8      	str	r0, [r7, #12]
 800eebe:	60b9      	str	r1, [r7, #8]
 800eec0:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800eec2:	2300      	movs	r3, #0
 800eec4:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800eec6:	2300      	movs	r3, #0
 800eec8:	613b      	str	r3, [r7, #16]
 800eeca:	e019      	b.n	800ef00 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	005b      	lsls	r3, r3, #1
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	18d3      	adds	r3, r2, r3
 800eed4:	881b      	ldrh	r3, [r3, #0]
 800eed6:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800eed8:	693a      	ldr	r2, [r7, #16]
 800eeda:	3201      	adds	r2, #1
 800eedc:	0052      	lsls	r2, r2, #1
 800eede:	68f9      	ldr	r1, [r7, #12]
 800eee0:	188a      	adds	r2, r1, r2
 800eee2:	8812      	ldrh	r2, [r2, #0]
 800eee4:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800eee6:	0019      	movs	r1, r3
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	009b      	lsls	r3, r3, #2
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800eef0:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800eef2:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	3301      	adds	r3, #1
 800eef8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	3304      	adds	r3, #4
 800eefe:	613b      	str	r3, [r7, #16]
 800ef00:	693a      	ldr	r2, [r7, #16]
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d3e1      	bcc.n	800eecc <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800ef08:	46c0      	nop			@ (mov r8, r8)
 800ef0a:	46c0      	nop			@ (mov r8, r8)
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	b006      	add	sp, #24
 800ef10:	bd80      	pop	{r7, pc}
	...

0800ef14 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800ef14:	b580      	push	{r7, lr}
 800ef16:	af00      	add	r7, sp, #0
  init = false;
 800ef18:	4b02      	ldr	r3, [pc, #8]	@ (800ef24 <InitDone+0x10>)
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	701a      	strb	r2, [r3, #0]
}
 800ef1e:	46c0      	nop			@ (mov r8, r8)
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}
 800ef24:	200000d8 	.word	0x200000d8

0800ef28 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800ef2e:	f7f7 fec3 	bl	8006cb8 <ReadBatteryVoltage>
 800ef32:	1c02      	adds	r2, r0, #0
 800ef34:	4b25      	ldr	r3, [pc, #148]	@ (800efcc <batteryChargeCheck+0xa4>)
 800ef36:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 800ef38:	4b24      	ldr	r3, [pc, #144]	@ (800efcc <batteryChargeCheck+0xa4>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4924      	ldr	r1, [pc, #144]	@ (800efd0 <batteryChargeCheck+0xa8>)
 800ef3e:	1c18      	adds	r0, r3, #0
 800ef40:	f7f1 faf6 	bl	8000530 <__aeabi_fcmplt>
 800ef44:	1e03      	subs	r3, r0, #0
 800ef46:	d002      	beq.n	800ef4e <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800ef48:	1dfb      	adds	r3, r7, #7
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 800ef4e:	4b1f      	ldr	r3, [pc, #124]	@ (800efcc <batteryChargeCheck+0xa4>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	491f      	ldr	r1, [pc, #124]	@ (800efd0 <batteryChargeCheck+0xa8>)
 800ef54:	1c18      	adds	r0, r3, #0
 800ef56:	f7f1 fb09 	bl	800056c <__aeabi_fcmpge>
 800ef5a:	1e03      	subs	r3, r0, #0
 800ef5c:	d00d      	beq.n	800ef7a <batteryChargeCheck+0x52>
 800ef5e:	4b1b      	ldr	r3, [pc, #108]	@ (800efcc <batteryChargeCheck+0xa4>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	1c18      	adds	r0, r3, #0
 800ef64:	f7f4 fa7e 	bl	8003464 <__aeabi_f2d>
 800ef68:	4a1a      	ldr	r2, [pc, #104]	@ (800efd4 <batteryChargeCheck+0xac>)
 800ef6a:	4b1b      	ldr	r3, [pc, #108]	@ (800efd8 <batteryChargeCheck+0xb0>)
 800ef6c:	f7f1 faa6 	bl	80004bc <__aeabi_dcmplt>
 800ef70:	1e03      	subs	r3, r0, #0
 800ef72:	d002      	beq.n	800ef7a <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800ef74:	1dfb      	adds	r3, r7, #7
 800ef76:	2201      	movs	r2, #1
 800ef78:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 800ef7a:	4b14      	ldr	r3, [pc, #80]	@ (800efcc <batteryChargeCheck+0xa4>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	1c18      	adds	r0, r3, #0
 800ef80:	f7f4 fa70 	bl	8003464 <__aeabi_f2d>
 800ef84:	4a13      	ldr	r2, [pc, #76]	@ (800efd4 <batteryChargeCheck+0xac>)
 800ef86:	4b14      	ldr	r3, [pc, #80]	@ (800efd8 <batteryChargeCheck+0xb0>)
 800ef88:	f7f1 fab6 	bl	80004f8 <__aeabi_dcmpge>
 800ef8c:	1e03      	subs	r3, r0, #0
 800ef8e:	d00b      	beq.n	800efa8 <batteryChargeCheck+0x80>
 800ef90:	4b0e      	ldr	r3, [pc, #56]	@ (800efcc <batteryChargeCheck+0xa4>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2181      	movs	r1, #129	@ 0x81
 800ef96:	05c9      	lsls	r1, r1, #23
 800ef98:	1c18      	adds	r0, r3, #0
 800ef9a:	f7f1 fac9 	bl	8000530 <__aeabi_fcmplt>
 800ef9e:	1e03      	subs	r3, r0, #0
 800efa0:	d002      	beq.n	800efa8 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800efa2:	1dfb      	adds	r3, r7, #7
 800efa4:	2202      	movs	r2, #2
 800efa6:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 800efa8:	4b08      	ldr	r3, [pc, #32]	@ (800efcc <batteryChargeCheck+0xa4>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2181      	movs	r1, #129	@ 0x81
 800efae:	05c9      	lsls	r1, r1, #23
 800efb0:	1c18      	adds	r0, r3, #0
 800efb2:	f7f1 fadb 	bl	800056c <__aeabi_fcmpge>
 800efb6:	1e03      	subs	r3, r0, #0
 800efb8:	d002      	beq.n	800efc0 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800efba:	1dfb      	adds	r3, r7, #7
 800efbc:	2203      	movs	r2, #3
 800efbe:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800efc0:	1dfb      	adds	r3, r7, #7
 800efc2:	781b      	ldrb	r3, [r3, #0]
}
 800efc4:	0018      	movs	r0, r3
 800efc6:	46bd      	mov	sp, r7
 800efc8:	b002      	add	sp, #8
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	20001dcc 	.word	0x20001dcc
 800efd0:	40600000 	.word	0x40600000
 800efd4:	9999999a 	.word	0x9999999a
 800efd8:	400d9999 	.word	0x400d9999

0800efdc <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800efdc:	b5b0      	push	{r4, r5, r7, lr}
 800efde:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800efe0:	f7f7 fecc 	bl	8006d7c <ReadSolarVoltage>
 800efe4:	0003      	movs	r3, r0
 800efe6:	001a      	movs	r2, r3
 800efe8:	4b1a      	ldr	r3, [pc, #104]	@ (800f054 <Calculate_LED_ON+0x78>)
 800efea:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800efec:	4b19      	ldr	r3, [pc, #100]	@ (800f054 <Calculate_LED_ON+0x78>)
 800efee:	881b      	ldrh	r3, [r3, #0]
 800eff0:	4a19      	ldr	r2, [pc, #100]	@ (800f058 <Calculate_LED_ON+0x7c>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d802      	bhi.n	800effc <Calculate_LED_ON+0x20>
    solmV = 2900;
 800eff6:	4b17      	ldr	r3, [pc, #92]	@ (800f054 <Calculate_LED_ON+0x78>)
 800eff8:	4a18      	ldr	r2, [pc, #96]	@ (800f05c <Calculate_LED_ON+0x80>)
 800effa:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800effc:	4b15      	ldr	r3, [pc, #84]	@ (800f054 <Calculate_LED_ON+0x78>)
 800effe:	881b      	ldrh	r3, [r3, #0]
 800f000:	4a17      	ldr	r2, [pc, #92]	@ (800f060 <Calculate_LED_ON+0x84>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d902      	bls.n	800f00c <Calculate_LED_ON+0x30>
    solmV = 4700;
 800f006:	4b13      	ldr	r3, [pc, #76]	@ (800f054 <Calculate_LED_ON+0x78>)
 800f008:	4a15      	ldr	r2, [pc, #84]	@ (800f060 <Calculate_LED_ON+0x84>)
 800f00a:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800f00c:	4b11      	ldr	r3, [pc, #68]	@ (800f054 <Calculate_LED_ON+0x78>)
 800f00e:	881b      	ldrh	r3, [r3, #0]
 800f010:	0018      	movs	r0, r3
 800f012:	f7f4 f9d5 	bl	80033c0 <__aeabi_i2d>
 800f016:	0004      	movs	r4, r0
 800f018:	000d      	movs	r5, r1
 800f01a:	4b0e      	ldr	r3, [pc, #56]	@ (800f054 <Calculate_LED_ON+0x78>)
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	001a      	movs	r2, r3
 800f020:	4b10      	ldr	r3, [pc, #64]	@ (800f064 <Calculate_LED_ON+0x88>)
 800f022:	1a9b      	subs	r3, r3, r2
 800f024:	0018      	movs	r0, r3
 800f026:	f7f4 f9cb 	bl	80033c0 <__aeabi_i2d>
 800f02a:	2200      	movs	r2, #0
 800f02c:	4b0e      	ldr	r3, [pc, #56]	@ (800f068 <Calculate_LED_ON+0x8c>)
 800f02e:	f7f3 fb05 	bl	800263c <__aeabi_dmul>
 800f032:	0002      	movs	r2, r0
 800f034:	000b      	movs	r3, r1
 800f036:	0020      	movs	r0, r4
 800f038:	0029      	movs	r1, r5
 800f03a:	f7f2 fb57 	bl	80016ec <__aeabi_dadd>
 800f03e:	0002      	movs	r2, r0
 800f040:	000b      	movs	r3, r1
 800f042:	0010      	movs	r0, r2
 800f044:	0019      	movs	r1, r3
 800f046:	f7f1 fb01 	bl	800064c <__aeabi_d2uiz>
 800f04a:	0003      	movs	r3, r0
 800f04c:	b29b      	uxth	r3, r3
}
 800f04e:	0018      	movs	r0, r3
 800f050:	46bd      	mov	sp, r7
 800f052:	bdb0      	pop	{r4, r5, r7, pc}
 800f054:	20001dd0 	.word	0x20001dd0
 800f058:	00000b53 	.word	0x00000b53
 800f05c:	00000b54 	.word	0x00000b54
 800f060:	0000125c 	.word	0x0000125c
 800f064:	00000dee 	.word	0x00000dee
 800f068:	3ff80000 	.word	0x3ff80000

0800f06c <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800f06c:	b590      	push	{r4, r7, lr}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	0004      	movs	r4, r0
 800f074:	0008      	movs	r0, r1
 800f076:	0011      	movs	r1, r2
 800f078:	1dbb      	adds	r3, r7, #6
 800f07a:	1c22      	adds	r2, r4, #0
 800f07c:	801a      	strh	r2, [r3, #0]
 800f07e:	1d3b      	adds	r3, r7, #4
 800f080:	1c02      	adds	r2, r0, #0
 800f082:	801a      	strh	r2, [r3, #0]
 800f084:	1cbb      	adds	r3, r7, #2
 800f086:	1c0a      	adds	r2, r1, #0
 800f088:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800f08a:	4b0f      	ldr	r3, [pc, #60]	@ (800f0c8 <SetStatusLED+0x5c>)
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d107      	bne.n	800f0a2 <SetStatusLED+0x36>
 800f092:	4b0e      	ldr	r3, [pc, #56]	@ (800f0cc <SetStatusLED+0x60>)
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d103      	bne.n	800f0a2 <SetStatusLED+0x36>
 800f09a:	4b0d      	ldr	r3, [pc, #52]	@ (800f0d0 <SetStatusLED+0x64>)
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d00e      	beq.n	800f0c0 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800f0a2:	2380      	movs	r3, #128	@ 0x80
 800f0a4:	05db      	lsls	r3, r3, #23
 800f0a6:	1dba      	adds	r2, r7, #6
 800f0a8:	8812      	ldrh	r2, [r2, #0]
 800f0aa:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800f0ac:	2380      	movs	r3, #128	@ 0x80
 800f0ae:	05db      	lsls	r3, r3, #23
 800f0b0:	1d3a      	adds	r2, r7, #4
 800f0b2:	8812      	ldrh	r2, [r2, #0]
 800f0b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800f0b6:	2380      	movs	r3, #128	@ 0x80
 800f0b8:	05db      	lsls	r3, r3, #23
 800f0ba:	1cba      	adds	r2, r7, #2
 800f0bc:	8812      	ldrh	r2, [r2, #0]
 800f0be:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800f0c0:	46c0      	nop			@ (mov r8, r8)
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	b003      	add	sp, #12
 800f0c6:	bd90      	pop	{r4, r7, pc}
 800f0c8:	20001dbd 	.word	0x20001dbd
 800f0cc:	200000d8 	.word	0x200000d8
 800f0d0:	20001dbe 	.word	0x20001dbe

0800f0d4 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800f0d4:	b590      	push	{r4, r7, lr}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	0004      	movs	r4, r0
 800f0dc:	0008      	movs	r0, r1
 800f0de:	0011      	movs	r1, r2
 800f0e0:	1dfb      	adds	r3, r7, #7
 800f0e2:	1c22      	adds	r2, r4, #0
 800f0e4:	701a      	strb	r2, [r3, #0]
 800f0e6:	1dbb      	adds	r3, r7, #6
 800f0e8:	1c02      	adds	r2, r0, #0
 800f0ea:	701a      	strb	r2, [r3, #0]
 800f0ec:	1d7b      	adds	r3, r7, #5
 800f0ee:	1c0a      	adds	r2, r1, #0
 800f0f0:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800f0f2:	4b19      	ldr	r3, [pc, #100]	@ (800f158 <SetDBLED+0x84>)
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d107      	bne.n	800f10a <SetDBLED+0x36>
 800f0fa:	4b18      	ldr	r3, [pc, #96]	@ (800f15c <SetDBLED+0x88>)
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d103      	bne.n	800f10a <SetDBLED+0x36>
 800f102:	4b17      	ldr	r3, [pc, #92]	@ (800f160 <SetDBLED+0x8c>)
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d022      	beq.n	800f150 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800f10a:	1dfb      	adds	r3, r7, #7
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	2201      	movs	r2, #1
 800f110:	4053      	eors	r3, r2
 800f112:	b2db      	uxtb	r3, r3
 800f114:	001a      	movs	r2, r3
 800f116:	4b13      	ldr	r3, [pc, #76]	@ (800f164 <SetDBLED+0x90>)
 800f118:	2101      	movs	r1, #1
 800f11a:	0018      	movs	r0, r3
 800f11c:	f003 f8eb 	bl	80122f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800f120:	1dbb      	adds	r3, r7, #6
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	2201      	movs	r2, #1
 800f126:	4053      	eors	r3, r2
 800f128:	b2db      	uxtb	r3, r3
 800f12a:	001a      	movs	r2, r3
 800f12c:	2380      	movs	r3, #128	@ 0x80
 800f12e:	005b      	lsls	r3, r3, #1
 800f130:	480c      	ldr	r0, [pc, #48]	@ (800f164 <SetDBLED+0x90>)
 800f132:	0019      	movs	r1, r3
 800f134:	f003 f8df 	bl	80122f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800f138:	1d7b      	adds	r3, r7, #5
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	2201      	movs	r2, #1
 800f13e:	4053      	eors	r3, r2
 800f140:	b2db      	uxtb	r3, r3
 800f142:	001a      	movs	r2, r3
 800f144:	2380      	movs	r3, #128	@ 0x80
 800f146:	009b      	lsls	r3, r3, #2
 800f148:	4806      	ldr	r0, [pc, #24]	@ (800f164 <SetDBLED+0x90>)
 800f14a:	0019      	movs	r1, r3
 800f14c:	f003 f8d3 	bl	80122f6 <HAL_GPIO_WritePin>
  }
}
 800f150:	46c0      	nop			@ (mov r8, r8)
 800f152:	46bd      	mov	sp, r7
 800f154:	b003      	add	sp, #12
 800f156:	bd90      	pop	{r4, r7, pc}
 800f158:	20001dbd 	.word	0x20001dbd
 800f15c:	200000d8 	.word	0x200000d8
 800f160:	20001dbe 	.word	0x20001dbe
 800f164:	50000400 	.word	0x50000400

0800f168 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800f168:	b590      	push	{r4, r7, lr}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	0004      	movs	r4, r0
 800f170:	0008      	movs	r0, r1
 800f172:	0011      	movs	r1, r2
 800f174:	1dbb      	adds	r3, r7, #6
 800f176:	1c22      	adds	r2, r4, #0
 800f178:	801a      	strh	r2, [r3, #0]
 800f17a:	1d3b      	adds	r3, r7, #4
 800f17c:	1c02      	adds	r2, r0, #0
 800f17e:	801a      	strh	r2, [r3, #0]
 800f180:	1cbb      	adds	r3, r7, #2
 800f182:	1c0a      	adds	r2, r1, #0
 800f184:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800f186:	4b0e      	ldr	r3, [pc, #56]	@ (800f1c0 <SetVocLED+0x58>)
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d107      	bne.n	800f19e <SetVocLED+0x36>
 800f18e:	4b0d      	ldr	r3, [pc, #52]	@ (800f1c4 <SetVocLED+0x5c>)
 800f190:	781b      	ldrb	r3, [r3, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d103      	bne.n	800f19e <SetVocLED+0x36>
 800f196:	4b0c      	ldr	r3, [pc, #48]	@ (800f1c8 <SetVocLED+0x60>)
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d00b      	beq.n	800f1b6 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800f19e:	4b0b      	ldr	r3, [pc, #44]	@ (800f1cc <SetVocLED+0x64>)
 800f1a0:	1dba      	adds	r2, r7, #6
 800f1a2:	8812      	ldrh	r2, [r2, #0]
 800f1a4:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800f1a6:	4b09      	ldr	r3, [pc, #36]	@ (800f1cc <SetVocLED+0x64>)
 800f1a8:	1d3a      	adds	r2, r7, #4
 800f1aa:	8812      	ldrh	r2, [r2, #0]
 800f1ac:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800f1ae:	4b07      	ldr	r3, [pc, #28]	@ (800f1cc <SetVocLED+0x64>)
 800f1b0:	1cba      	adds	r2, r7, #2
 800f1b2:	8812      	ldrh	r2, [r2, #0]
 800f1b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f1b6:	46c0      	nop			@ (mov r8, r8)
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	b003      	add	sp, #12
 800f1bc:	bd90      	pop	{r4, r7, pc}
 800f1be:	46c0      	nop			@ (mov r8, r8)
 800f1c0:	20001dbd 	.word	0x20001dbd
 800f1c4:	200000d8 	.word	0x200000d8
 800f1c8:	20001dbe 	.word	0x20001dbe
 800f1cc:	40000400 	.word	0x40000400

0800f1d0 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f1d4:	4b08      	ldr	r3, [pc, #32]	@ (800f1f8 <SetMeasurementIndicator+0x28>)
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d103      	bne.n	800f1e4 <SetMeasurementIndicator+0x14>
 800f1dc:	4b07      	ldr	r3, [pc, #28]	@ (800f1fc <SetMeasurementIndicator+0x2c>)
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d006      	beq.n	800f1f2 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800f1e4:	f7ff fefa 	bl	800efdc <Calculate_LED_ON>
 800f1e8:	0003      	movs	r3, r0
 800f1ea:	001a      	movs	r2, r3
 800f1ec:	2380      	movs	r3, #128	@ 0x80
 800f1ee:	05db      	lsls	r3, r3, #23
 800f1f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f1f2:	46c0      	nop			@ (mov r8, r8)
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}
 800f1f8:	20001dbd 	.word	0x20001dbd
 800f1fc:	20001dbe 	.word	0x20001dbe

0800f200 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800f200:	b580      	push	{r7, lr}
 800f202:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f204:	4b07      	ldr	r3, [pc, #28]	@ (800f224 <ResetMeasurementIndicator+0x24>)
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d103      	bne.n	800f214 <ResetMeasurementIndicator+0x14>
 800f20c:	4b06      	ldr	r3, [pc, #24]	@ (800f228 <ResetMeasurementIndicator+0x28>)
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d004      	beq.n	800f21e <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800f214:	2380      	movs	r3, #128	@ 0x80
 800f216:	05db      	lsls	r3, r3, #23
 800f218:	22fa      	movs	r2, #250	@ 0xfa
 800f21a:	0112      	lsls	r2, r2, #4
 800f21c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f21e:	46c0      	nop			@ (mov r8, r8)
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}
 800f224:	20001dbd 	.word	0x20001dbd
 800f228:	20001dbe 	.word	0x20001dbe

0800f22c <SetMICIndicator>:
void SetMICIndicator(){
 800f22c:	b580      	push	{r7, lr}
 800f22e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f230:	4b19      	ldr	r3, [pc, #100]	@ (800f298 <SetMICIndicator+0x6c>)
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d103      	bne.n	800f240 <SetMICIndicator+0x14>
 800f238:	4b18      	ldr	r3, [pc, #96]	@ (800f29c <SetMICIndicator+0x70>)
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d007      	beq.n	800f250 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800f240:	f7ff fecc 	bl	800efdc <Calculate_LED_ON>
 800f244:	0003      	movs	r3, r0
 800f246:	001a      	movs	r2, r3
 800f248:	2380      	movs	r3, #128	@ 0x80
 800f24a:	05db      	lsls	r3, r3, #23
 800f24c:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 800f24e:	e01f      	b.n	800f290 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 800f250:	4b13      	ldr	r3, [pc, #76]	@ (800f2a0 <SetMICIndicator+0x74>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	1c18      	adds	r0, r3, #0
 800f256:	f7f4 f905 	bl	8003464 <__aeabi_f2d>
 800f25a:	4a12      	ldr	r2, [pc, #72]	@ (800f2a4 <SetMICIndicator+0x78>)
 800f25c:	4b12      	ldr	r3, [pc, #72]	@ (800f2a8 <SetMICIndicator+0x7c>)
 800f25e:	f7f1 f941 	bl	80004e4 <__aeabi_dcmpgt>
 800f262:	1e03      	subs	r3, r0, #0
 800f264:	d00a      	beq.n	800f27c <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800f266:	f7ff feb9 	bl	800efdc <Calculate_LED_ON>
 800f26a:	0003      	movs	r3, r0
 800f26c:	001a      	movs	r2, r3
 800f26e:	2380      	movs	r3, #128	@ 0x80
 800f270:	05db      	lsls	r3, r3, #23
 800f272:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 800f274:	4b0d      	ldr	r3, [pc, #52]	@ (800f2ac <SetMICIndicator+0x80>)
 800f276:	2202      	movs	r2, #2
 800f278:	701a      	strb	r2, [r3, #0]
}
 800f27a:	e009      	b.n	800f290 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800f27c:	f7ff feae 	bl	800efdc <Calculate_LED_ON>
 800f280:	0003      	movs	r3, r0
 800f282:	001a      	movs	r2, r3
 800f284:	2380      	movs	r3, #128	@ 0x80
 800f286:	05db      	lsls	r3, r3, #23
 800f288:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 800f28a:	4b08      	ldr	r3, [pc, #32]	@ (800f2ac <SetMICIndicator+0x80>)
 800f28c:	2201      	movs	r2, #1
 800f28e:	701a      	strb	r2, [r3, #0]
}
 800f290:	46c0      	nop			@ (mov r8, r8)
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	46c0      	nop			@ (mov r8, r8)
 800f298:	20001dbd 	.word	0x20001dbd
 800f29c:	20001dbe 	.word	0x20001dbe
 800f2a0:	20001dcc 	.word	0x20001dcc
 800f2a4:	9999999a 	.word	0x9999999a
 800f2a8:	400d9999 	.word	0x400d9999
 800f2ac:	20001dc0 	.word	0x20001dc0

0800f2b0 <ResetMICIndicator>:
void ResetMICIndicator(){
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f2b4:	4b0f      	ldr	r3, [pc, #60]	@ (800f2f4 <ResetMICIndicator+0x44>)
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d103      	bne.n	800f2c4 <ResetMICIndicator+0x14>
 800f2bc:	4b0e      	ldr	r3, [pc, #56]	@ (800f2f8 <ResetMICIndicator+0x48>)
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d005      	beq.n	800f2d0 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800f2c4:	2380      	movs	r3, #128	@ 0x80
 800f2c6:	05db      	lsls	r3, r3, #23
 800f2c8:	22fa      	movs	r2, #250	@ 0xfa
 800f2ca:	0112      	lsls	r2, r2, #4
 800f2cc:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800f2ce:	e00e      	b.n	800f2ee <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 800f2d0:	4b0a      	ldr	r3, [pc, #40]	@ (800f2fc <ResetMICIndicator+0x4c>)
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	2b02      	cmp	r3, #2
 800f2d6:	d105      	bne.n	800f2e4 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 800f2d8:	2380      	movs	r3, #128	@ 0x80
 800f2da:	05db      	lsls	r3, r3, #23
 800f2dc:	22fa      	movs	r2, #250	@ 0xfa
 800f2de:	0112      	lsls	r2, r2, #4
 800f2e0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800f2e2:	e004      	b.n	800f2ee <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 800f2e4:	2380      	movs	r3, #128	@ 0x80
 800f2e6:	05db      	lsls	r3, r3, #23
 800f2e8:	22fa      	movs	r2, #250	@ 0xfa
 800f2ea:	0112      	lsls	r2, r2, #4
 800f2ec:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800f2ee:	46c0      	nop			@ (mov r8, r8)
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	20001dbd 	.word	0x20001dbd
 800f2f8:	20001dbe 	.word	0x20001dbe
 800f2fc:	20001dc0 	.word	0x20001dc0

0800f300 <SetESPIndicator>:
void SetESPIndicator(){
 800f300:	b580      	push	{r7, lr}
 800f302:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f304:	4b08      	ldr	r3, [pc, #32]	@ (800f328 <SetESPIndicator+0x28>)
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d103      	bne.n	800f314 <SetESPIndicator+0x14>
 800f30c:	4b07      	ldr	r3, [pc, #28]	@ (800f32c <SetESPIndicator+0x2c>)
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d006      	beq.n	800f322 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800f314:	f7ff fe62 	bl	800efdc <Calculate_LED_ON>
 800f318:	0003      	movs	r3, r0
 800f31a:	001a      	movs	r2, r3
 800f31c:	2380      	movs	r3, #128	@ 0x80
 800f31e:	05db      	lsls	r3, r3, #23
 800f320:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800f322:	46c0      	nop			@ (mov r8, r8)
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	20001dbd 	.word	0x20001dbd
 800f32c:	20001dbe 	.word	0x20001dbe

0800f330 <ResetESPIndicator>:
void ResetESPIndicator(){
 800f330:	b580      	push	{r7, lr}
 800f332:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f334:	4b07      	ldr	r3, [pc, #28]	@ (800f354 <ResetESPIndicator+0x24>)
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d103      	bne.n	800f344 <ResetESPIndicator+0x14>
 800f33c:	4b06      	ldr	r3, [pc, #24]	@ (800f358 <ResetESPIndicator+0x28>)
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d004      	beq.n	800f34e <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800f344:	2380      	movs	r3, #128	@ 0x80
 800f346:	05db      	lsls	r3, r3, #23
 800f348:	22fa      	movs	r2, #250	@ 0xfa
 800f34a:	0112      	lsls	r2, r2, #4
 800f34c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800f34e:	46c0      	nop			@ (mov r8, r8)
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	20001dbd 	.word	0x20001dbd
 800f358:	20001dbe 	.word	0x20001dbe

0800f35c <SetPMIndicator>:

void SetPMIndicator() {
 800f35c:	b580      	push	{r7, lr}
 800f35e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f360:	4b0f      	ldr	r3, [pc, #60]	@ (800f3a0 <SetPMIndicator+0x44>)
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d103      	bne.n	800f370 <SetPMIndicator+0x14>
 800f368:	4b0e      	ldr	r3, [pc, #56]	@ (800f3a4 <SetPMIndicator+0x48>)
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d014      	beq.n	800f39a <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800f370:	f7ff fe34 	bl	800efdc <Calculate_LED_ON>
 800f374:	0003      	movs	r3, r0
 800f376:	001a      	movs	r2, r3
 800f378:	2380      	movs	r3, #128	@ 0x80
 800f37a:	05db      	lsls	r3, r3, #23
 800f37c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800f37e:	f7ff fe2d 	bl	800efdc <Calculate_LED_ON>
 800f382:	0003      	movs	r3, r0
 800f384:	001a      	movs	r2, r3
 800f386:	2380      	movs	r3, #128	@ 0x80
 800f388:	05db      	lsls	r3, r3, #23
 800f38a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800f38c:	f7ff fe26 	bl	800efdc <Calculate_LED_ON>
 800f390:	0003      	movs	r3, r0
 800f392:	001a      	movs	r2, r3
 800f394:	2380      	movs	r3, #128	@ 0x80
 800f396:	05db      	lsls	r3, r3, #23
 800f398:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f39a:	46c0      	nop			@ (mov r8, r8)
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}
 800f3a0:	20001dbd 	.word	0x20001dbd
 800f3a4:	20001dbe 	.word	0x20001dbe

0800f3a8 <ResetPMIndicator>:

void ResetPMIndicator() {
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f3ac:	4b0c      	ldr	r3, [pc, #48]	@ (800f3e0 <ResetPMIndicator+0x38>)
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d103      	bne.n	800f3bc <ResetPMIndicator+0x14>
 800f3b4:	4b0b      	ldr	r3, [pc, #44]	@ (800f3e4 <ResetPMIndicator+0x3c>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d00e      	beq.n	800f3da <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800f3bc:	2380      	movs	r3, #128	@ 0x80
 800f3be:	05db      	lsls	r3, r3, #23
 800f3c0:	22fa      	movs	r2, #250	@ 0xfa
 800f3c2:	0112      	lsls	r2, r2, #4
 800f3c4:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800f3c6:	2380      	movs	r3, #128	@ 0x80
 800f3c8:	05db      	lsls	r3, r3, #23
 800f3ca:	22fa      	movs	r2, #250	@ 0xfa
 800f3cc:	0112      	lsls	r2, r2, #4
 800f3ce:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800f3d0:	2380      	movs	r3, #128	@ 0x80
 800f3d2:	05db      	lsls	r3, r3, #23
 800f3d4:	22fa      	movs	r2, #250	@ 0xfa
 800f3d6:	0112      	lsls	r2, r2, #4
 800f3d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f3da:	46c0      	nop			@ (mov r8, r8)
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	20001dbd 	.word	0x20001dbd
 800f3e4:	20001dbe 	.word	0x20001dbe

0800f3e8 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800f3ec:	23fa      	movs	r3, #250	@ 0xfa
 800f3ee:	011a      	lsls	r2, r3, #4
 800f3f0:	23fa      	movs	r3, #250	@ 0xfa
 800f3f2:	0119      	lsls	r1, r3, #4
 800f3f4:	23fa      	movs	r3, #250	@ 0xfa
 800f3f6:	011b      	lsls	r3, r3, #4
 800f3f8:	0018      	movs	r0, r3
 800f3fa:	f7ff fe37 	bl	800f06c <SetStatusLED>
  SetDBLED(false,false,false);
 800f3fe:	2200      	movs	r2, #0
 800f400:	2100      	movs	r1, #0
 800f402:	2000      	movs	r0, #0
 800f404:	f7ff fe66 	bl	800f0d4 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800f408:	23fa      	movs	r3, #250	@ 0xfa
 800f40a:	011a      	lsls	r2, r3, #4
 800f40c:	23fa      	movs	r3, #250	@ 0xfa
 800f40e:	0119      	lsls	r1, r3, #4
 800f410:	23fa      	movs	r3, #250	@ 0xfa
 800f412:	011b      	lsls	r3, r3, #4
 800f414:	0018      	movs	r0, r3
 800f416:	f7ff fea7 	bl	800f168 <SetVocLED>
return;
 800f41a:	46c0      	nop			@ (mov r8, r8)
}
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <SetAllREDLED>:

void SetAllREDLED() {
 800f420:	b580      	push	{r7, lr}
 800f422:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 800f424:	2380      	movs	r3, #128	@ 0x80
 800f426:	05db      	lsls	r3, r3, #23
 800f428:	4a19      	ldr	r2, [pc, #100]	@ (800f490 <SetAllREDLED+0x70>)
 800f42a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 800f42c:	2380      	movs	r3, #128	@ 0x80
 800f42e:	05db      	lsls	r3, r3, #23
 800f430:	22fa      	movs	r2, #250	@ 0xfa
 800f432:	0112      	lsls	r2, r2, #4
 800f434:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 800f436:	2380      	movs	r3, #128	@ 0x80
 800f438:	05db      	lsls	r3, r3, #23
 800f43a:	22fa      	movs	r2, #250	@ 0xfa
 800f43c:	0112      	lsls	r2, r2, #4
 800f43e:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 800f440:	4b14      	ldr	r3, [pc, #80]	@ (800f494 <SetAllREDLED+0x74>)
 800f442:	4a13      	ldr	r2, [pc, #76]	@ (800f490 <SetAllREDLED+0x70>)
 800f444:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 800f446:	4b13      	ldr	r3, [pc, #76]	@ (800f494 <SetAllREDLED+0x74>)
 800f448:	22fa      	movs	r2, #250	@ 0xfa
 800f44a:	0112      	lsls	r2, r2, #4
 800f44c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 800f44e:	4b11      	ldr	r3, [pc, #68]	@ (800f494 <SetAllREDLED+0x74>)
 800f450:	22fa      	movs	r2, #250	@ 0xfa
 800f452:	0112      	lsls	r2, r2, #4
 800f454:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 800f456:	4b10      	ldr	r3, [pc, #64]	@ (800f498 <SetAllREDLED+0x78>)
 800f458:	2200      	movs	r2, #0
 800f45a:	2101      	movs	r1, #1
 800f45c:	0018      	movs	r0, r3
 800f45e:	f002 ff4a 	bl	80122f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 800f462:	2380      	movs	r3, #128	@ 0x80
 800f464:	005b      	lsls	r3, r3, #1
 800f466:	480c      	ldr	r0, [pc, #48]	@ (800f498 <SetAllREDLED+0x78>)
 800f468:	2201      	movs	r2, #1
 800f46a:	0019      	movs	r1, r3
 800f46c:	f002 ff43 	bl	80122f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 800f470:	2380      	movs	r3, #128	@ 0x80
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	4808      	ldr	r0, [pc, #32]	@ (800f498 <SetAllREDLED+0x78>)
 800f476:	2201      	movs	r2, #1
 800f478:	0019      	movs	r1, r3
 800f47a:	f002 ff3c 	bl	80122f6 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800f47e:	23fa      	movs	r3, #250	@ 0xfa
 800f480:	009b      	lsls	r3, r3, #2
 800f482:	0018      	movs	r0, r3
 800f484:	f001 fcb0 	bl	8010de8 <HAL_Delay>
}
 800f488:	46c0      	nop			@ (mov r8, r8)
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	46c0      	nop			@ (mov r8, r8)
 800f490:	00000bb8 	.word	0x00000bb8
 800f494:	40000400 	.word	0x40000400
 800f498:	50000400 	.word	0x50000400

0800f49c <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 800f49c:	b5b0      	push	{r4, r5, r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	0002      	movs	r2, r0
 800f4a4:	1dbb      	adds	r3, r7, #6
 800f4a6:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 800f4a8:	1dbb      	adds	r3, r7, #6
 800f4aa:	881b      	ldrh	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d05a      	beq.n	800f566 <SetVOCindicator+0xca>
 800f4b0:	1dbb      	adds	r3, r7, #6
 800f4b2:	881b      	ldrh	r3, [r3, #0]
 800f4b4:	2b64      	cmp	r3, #100	@ 0x64
 800f4b6:	d856      	bhi.n	800f566 <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 800f4b8:	1dbb      	adds	r3, r7, #6
 800f4ba:	881b      	ldrh	r3, [r3, #0]
 800f4bc:	0018      	movs	r0, r3
 800f4be:	f7f3 ff7f 	bl	80033c0 <__aeabi_i2d>
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	4b5f      	ldr	r3, [pc, #380]	@ (800f644 <SetVOCindicator+0x1a8>)
 800f4c6:	f7f2 fc75 	bl	8001db4 <__aeabi_ddiv>
 800f4ca:	0002      	movs	r2, r0
 800f4cc:	000b      	movs	r3, r1
 800f4ce:	2000      	movs	r0, #0
 800f4d0:	495d      	ldr	r1, [pc, #372]	@ (800f648 <SetVOCindicator+0x1ac>)
 800f4d2:	f7f3 fb7b 	bl	8002bcc <__aeabi_dsub>
 800f4d6:	0002      	movs	r2, r0
 800f4d8:	000b      	movs	r3, r1
 800f4da:	0014      	movs	r4, r2
 800f4dc:	001d      	movs	r5, r3
 800f4de:	4b5b      	ldr	r3, [pc, #364]	@ (800f64c <SetVOCindicator+0x1b0>)
 800f4e0:	881b      	ldrh	r3, [r3, #0]
 800f4e2:	0018      	movs	r0, r3
 800f4e4:	f7f3 ff6c 	bl	80033c0 <__aeabi_i2d>
 800f4e8:	0002      	movs	r2, r0
 800f4ea:	000b      	movs	r3, r1
 800f4ec:	0020      	movs	r0, r4
 800f4ee:	0029      	movs	r1, r5
 800f4f0:	f7f3 f8a4 	bl	800263c <__aeabi_dmul>
 800f4f4:	0002      	movs	r2, r0
 800f4f6:	000b      	movs	r3, r1
 800f4f8:	0010      	movs	r0, r2
 800f4fa:	0019      	movs	r1, r3
 800f4fc:	f7f1 f8a6 	bl	800064c <__aeabi_d2uiz>
 800f500:	0003      	movs	r3, r0
 800f502:	b29a      	uxth	r2, r3
 800f504:	4b52      	ldr	r3, [pc, #328]	@ (800f650 <SetVOCindicator+0x1b4>)
 800f506:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 800f508:	1dbb      	adds	r3, r7, #6
 800f50a:	881b      	ldrh	r3, [r3, #0]
 800f50c:	0018      	movs	r0, r3
 800f50e:	f7f3 ff57 	bl	80033c0 <__aeabi_i2d>
 800f512:	2200      	movs	r2, #0
 800f514:	4b4b      	ldr	r3, [pc, #300]	@ (800f644 <SetVOCindicator+0x1a8>)
 800f516:	f7f2 fc4d 	bl	8001db4 <__aeabi_ddiv>
 800f51a:	0002      	movs	r2, r0
 800f51c:	000b      	movs	r3, r1
 800f51e:	0014      	movs	r4, r2
 800f520:	001d      	movs	r5, r3
 800f522:	4b4a      	ldr	r3, [pc, #296]	@ (800f64c <SetVOCindicator+0x1b0>)
 800f524:	881b      	ldrh	r3, [r3, #0]
 800f526:	0018      	movs	r0, r3
 800f528:	f7f3 ff4a 	bl	80033c0 <__aeabi_i2d>
 800f52c:	0002      	movs	r2, r0
 800f52e:	000b      	movs	r3, r1
 800f530:	0020      	movs	r0, r4
 800f532:	0029      	movs	r1, r5
 800f534:	f7f3 f882 	bl	800263c <__aeabi_dmul>
 800f538:	0002      	movs	r2, r0
 800f53a:	000b      	movs	r3, r1
 800f53c:	0010      	movs	r0, r2
 800f53e:	0019      	movs	r1, r3
 800f540:	f7f1 f884 	bl	800064c <__aeabi_d2uiz>
 800f544:	0003      	movs	r3, r0
 800f546:	b29a      	uxth	r2, r3
 800f548:	4b42      	ldr	r3, [pc, #264]	@ (800f654 <SetVOCindicator+0x1b8>)
 800f54a:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 800f54c:	4b3f      	ldr	r3, [pc, #252]	@ (800f64c <SetVOCindicator+0x1b0>)
 800f54e:	881a      	ldrh	r2, [r3, #0]
 800f550:	4b41      	ldr	r3, [pc, #260]	@ (800f658 <SetVOCindicator+0x1bc>)
 800f552:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800f554:	4b40      	ldr	r3, [pc, #256]	@ (800f658 <SetVOCindicator+0x1bc>)
 800f556:	8818      	ldrh	r0, [r3, #0]
 800f558:	4b3d      	ldr	r3, [pc, #244]	@ (800f650 <SetVOCindicator+0x1b4>)
 800f55a:	8819      	ldrh	r1, [r3, #0]
 800f55c:	4b3d      	ldr	r3, [pc, #244]	@ (800f654 <SetVOCindicator+0x1b8>)
 800f55e:	881b      	ldrh	r3, [r3, #0]
 800f560:	001a      	movs	r2, r3
 800f562:	f7ff fe01 	bl	800f168 <SetVocLED>
  }
  if(VOCi > 100){
 800f566:	1dbb      	adds	r3, r7, #6
 800f568:	881b      	ldrh	r3, [r3, #0]
 800f56a:	2b64      	cmp	r3, #100	@ 0x64
 800f56c:	d966      	bls.n	800f63c <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 800f56e:	1dbb      	adds	r3, r7, #6
 800f570:	881b      	ldrh	r3, [r3, #0]
 800f572:	0018      	movs	r0, r3
 800f574:	f7f3 ff24 	bl	80033c0 <__aeabi_i2d>
 800f578:	2200      	movs	r2, #0
 800f57a:	4b32      	ldr	r3, [pc, #200]	@ (800f644 <SetVOCindicator+0x1a8>)
 800f57c:	f7f3 fb26 	bl	8002bcc <__aeabi_dsub>
 800f580:	0002      	movs	r2, r0
 800f582:	000b      	movs	r3, r1
 800f584:	0010      	movs	r0, r2
 800f586:	0019      	movs	r1, r3
 800f588:	2200      	movs	r2, #0
 800f58a:	4b34      	ldr	r3, [pc, #208]	@ (800f65c <SetVOCindicator+0x1c0>)
 800f58c:	f7f2 fc12 	bl	8001db4 <__aeabi_ddiv>
 800f590:	0002      	movs	r2, r0
 800f592:	000b      	movs	r3, r1
 800f594:	0014      	movs	r4, r2
 800f596:	001d      	movs	r5, r3
 800f598:	4b2c      	ldr	r3, [pc, #176]	@ (800f64c <SetVOCindicator+0x1b0>)
 800f59a:	881b      	ldrh	r3, [r3, #0]
 800f59c:	0018      	movs	r0, r3
 800f59e:	f7f3 ff0f 	bl	80033c0 <__aeabi_i2d>
 800f5a2:	0002      	movs	r2, r0
 800f5a4:	000b      	movs	r3, r1
 800f5a6:	0020      	movs	r0, r4
 800f5a8:	0029      	movs	r1, r5
 800f5aa:	f7f3 f847 	bl	800263c <__aeabi_dmul>
 800f5ae:	0002      	movs	r2, r0
 800f5b0:	000b      	movs	r3, r1
 800f5b2:	0010      	movs	r0, r2
 800f5b4:	0019      	movs	r1, r3
 800f5b6:	f7f1 f849 	bl	800064c <__aeabi_d2uiz>
 800f5ba:	0003      	movs	r3, r0
 800f5bc:	b29a      	uxth	r2, r3
 800f5be:	4b24      	ldr	r3, [pc, #144]	@ (800f650 <SetVOCindicator+0x1b4>)
 800f5c0:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 800f5c2:	1dbb      	adds	r3, r7, #6
 800f5c4:	881b      	ldrh	r3, [r3, #0]
 800f5c6:	0018      	movs	r0, r3
 800f5c8:	f7f3 fefa 	bl	80033c0 <__aeabi_i2d>
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	4b1d      	ldr	r3, [pc, #116]	@ (800f644 <SetVOCindicator+0x1a8>)
 800f5d0:	f7f3 fafc 	bl	8002bcc <__aeabi_dsub>
 800f5d4:	0002      	movs	r2, r0
 800f5d6:	000b      	movs	r3, r1
 800f5d8:	0010      	movs	r0, r2
 800f5da:	0019      	movs	r1, r3
 800f5dc:	2200      	movs	r2, #0
 800f5de:	4b1f      	ldr	r3, [pc, #124]	@ (800f65c <SetVOCindicator+0x1c0>)
 800f5e0:	f7f2 fbe8 	bl	8001db4 <__aeabi_ddiv>
 800f5e4:	0002      	movs	r2, r0
 800f5e6:	000b      	movs	r3, r1
 800f5e8:	2000      	movs	r0, #0
 800f5ea:	4917      	ldr	r1, [pc, #92]	@ (800f648 <SetVOCindicator+0x1ac>)
 800f5ec:	f7f3 faee 	bl	8002bcc <__aeabi_dsub>
 800f5f0:	0002      	movs	r2, r0
 800f5f2:	000b      	movs	r3, r1
 800f5f4:	0014      	movs	r4, r2
 800f5f6:	001d      	movs	r5, r3
 800f5f8:	4b14      	ldr	r3, [pc, #80]	@ (800f64c <SetVOCindicator+0x1b0>)
 800f5fa:	881b      	ldrh	r3, [r3, #0]
 800f5fc:	0018      	movs	r0, r3
 800f5fe:	f7f3 fedf 	bl	80033c0 <__aeabi_i2d>
 800f602:	0002      	movs	r2, r0
 800f604:	000b      	movs	r3, r1
 800f606:	0020      	movs	r0, r4
 800f608:	0029      	movs	r1, r5
 800f60a:	f7f3 f817 	bl	800263c <__aeabi_dmul>
 800f60e:	0002      	movs	r2, r0
 800f610:	000b      	movs	r3, r1
 800f612:	0010      	movs	r0, r2
 800f614:	0019      	movs	r1, r3
 800f616:	f7f1 f819 	bl	800064c <__aeabi_d2uiz>
 800f61a:	0003      	movs	r3, r0
 800f61c:	b29a      	uxth	r2, r3
 800f61e:	4b0e      	ldr	r3, [pc, #56]	@ (800f658 <SetVOCindicator+0x1bc>)
 800f620:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 800f622:	4b0a      	ldr	r3, [pc, #40]	@ (800f64c <SetVOCindicator+0x1b0>)
 800f624:	881a      	ldrh	r2, [r3, #0]
 800f626:	4b0b      	ldr	r3, [pc, #44]	@ (800f654 <SetVOCindicator+0x1b8>)
 800f628:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800f62a:	4b0b      	ldr	r3, [pc, #44]	@ (800f658 <SetVOCindicator+0x1bc>)
 800f62c:	8818      	ldrh	r0, [r3, #0]
 800f62e:	4b08      	ldr	r3, [pc, #32]	@ (800f650 <SetVOCindicator+0x1b4>)
 800f630:	8819      	ldrh	r1, [r3, #0]
 800f632:	4b08      	ldr	r3, [pc, #32]	@ (800f654 <SetVOCindicator+0x1b8>)
 800f634:	881b      	ldrh	r3, [r3, #0]
 800f636:	001a      	movs	r2, r3
 800f638:	f7ff fd96 	bl	800f168 <SetVocLED>
  }

}
 800f63c:	46c0      	nop			@ (mov r8, r8)
 800f63e:	46bd      	mov	sp, r7
 800f640:	b002      	add	sp, #8
 800f642:	bdb0      	pop	{r4, r5, r7, pc}
 800f644:	40590000 	.word	0x40590000
 800f648:	3ff00000 	.word	0x3ff00000
 800f64c:	200000da 	.word	0x200000da
 800f650:	20001dd2 	.word	0x20001dd2
 800f654:	20001dd4 	.word	0x20001dd4
 800f658:	20001dd6 	.word	0x20001dd6
 800f65c:	40790000 	.word	0x40790000

0800f660 <powerCheck>:

Battery_Status powerCheck(){
 800f660:	b590      	push	{r4, r7, lr}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800f666:	f7f7 fbdd 	bl	8006e24 <Check_USB_PowerOn>
 800f66a:	0003      	movs	r3, r0
 800f66c:	001a      	movs	r2, r3
 800f66e:	2301      	movs	r3, #1
 800f670:	4053      	eors	r3, r2
 800f672:	b2db      	uxtb	r3, r3
 800f674:	2b00      	cmp	r3, #0
 800f676:	d005      	beq.n	800f684 <powerCheck+0x24>
    status = batteryChargeCheck();
 800f678:	1dfc      	adds	r4, r7, #7
 800f67a:	f7ff fc55 	bl	800ef28 <batteryChargeCheck>
 800f67e:	0003      	movs	r3, r0
 800f680:	7023      	strb	r3, [r4, #0]
 800f682:	e002      	b.n	800f68a <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800f684:	1dfb      	adds	r3, r7, #7
 800f686:	2204      	movs	r2, #4
 800f688:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800f68a:	1dfb      	adds	r3, r7, #7
 800f68c:	781b      	ldrb	r3, [r3, #0]
}
 800f68e:	0018      	movs	r0, r3
 800f690:	46bd      	mov	sp, r7
 800f692:	b003      	add	sp, #12
 800f694:	bd90      	pop	{r4, r7, pc}
	...

0800f698 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	0002      	movs	r2, r0
 800f6a0:	1dfb      	adds	r3, r7, #7
 800f6a2:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800f6a4:	1dfb      	adds	r3, r7, #7
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	2b04      	cmp	r3, #4
 800f6aa:	d105      	bne.n	800f6b8 <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 800f6ac:	4a18      	ldr	r2, [pc, #96]	@ (800f710 <powerDisplay+0x78>)
 800f6ae:	4b19      	ldr	r3, [pc, #100]	@ (800f714 <powerDisplay+0x7c>)
 800f6b0:	0019      	movs	r1, r3
 800f6b2:	2003      	movs	r0, #3
 800f6b4:	f000 ff42 	bl	801053c <CreateLine>

  }
  if(status == BATTERY_FULL){
 800f6b8:	1dfb      	adds	r3, r7, #7
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	2b03      	cmp	r3, #3
 800f6be:	d105      	bne.n	800f6cc <powerDisplay+0x34>
    Debug("Battery fully charged");
 800f6c0:	4a15      	ldr	r2, [pc, #84]	@ (800f718 <powerDisplay+0x80>)
 800f6c2:	4b14      	ldr	r3, [pc, #80]	@ (800f714 <powerDisplay+0x7c>)
 800f6c4:	0019      	movs	r1, r3
 800f6c6:	2003      	movs	r0, #3
 800f6c8:	f000 ff38 	bl	801053c <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800f6cc:	1dfb      	adds	r3, r7, #7
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	2b02      	cmp	r3, #2
 800f6d2:	d105      	bne.n	800f6e0 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800f6d4:	4a11      	ldr	r2, [pc, #68]	@ (800f71c <powerDisplay+0x84>)
 800f6d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f714 <powerDisplay+0x7c>)
 800f6d8:	0019      	movs	r1, r3
 800f6da:	2003      	movs	r0, #3
 800f6dc:	f000 ff2e 	bl	801053c <CreateLine>
  }
  if(status == BATTERY_LOW){
 800f6e0:	1dfb      	adds	r3, r7, #7
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	d105      	bne.n	800f6f4 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800f6e8:	4a0d      	ldr	r2, [pc, #52]	@ (800f720 <powerDisplay+0x88>)
 800f6ea:	4b0a      	ldr	r3, [pc, #40]	@ (800f714 <powerDisplay+0x7c>)
 800f6ec:	0019      	movs	r1, r3
 800f6ee:	2003      	movs	r0, #3
 800f6f0:	f000 ff24 	bl	801053c <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800f6f4:	1dfb      	adds	r3, r7, #7
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d105      	bne.n	800f708 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800f6fc:	4a09      	ldr	r2, [pc, #36]	@ (800f724 <powerDisplay+0x8c>)
 800f6fe:	4b05      	ldr	r3, [pc, #20]	@ (800f714 <powerDisplay+0x7c>)
 800f700:	0019      	movs	r1, r3
 800f702:	2003      	movs	r0, #3
 800f704:	f000 ff1a 	bl	801053c <CreateLine>
  }
}
 800f708:	46c0      	nop			@ (mov r8, r8)
 800f70a:	46bd      	mov	sp, r7
 800f70c:	b002      	add	sp, #8
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	08028240 	.word	0x08028240
 800f714:	08028264 	.word	0x08028264
 800f718:	08028268 	.word	0x08028268
 800f71c:	08028280 	.word	0x08028280
 800f720:	080282a0 	.word	0x080282a0
 800f724:	080282b8 	.word	0x080282b8

0800f728 <configCheck>:

void configCheck(){
 800f728:	b590      	push	{r4, r7, lr}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800f72e:	f7f7 fb88 	bl	8006e42 <BootButton_Pressed>
 800f732:	1e03      	subs	r3, r0, #0
 800f734:	d007      	beq.n	800f746 <configCheck+0x1e>
 800f736:	f7f7 fb95 	bl	8006e64 <UserButton_Pressed>
 800f73a:	1e03      	subs	r3, r0, #0
 800f73c:	d003      	beq.n	800f746 <configCheck+0x1e>
    configSet = true;
 800f73e:	4bb2      	ldr	r3, [pc, #712]	@ (800fa08 <configCheck+0x2e0>)
 800f740:	2201      	movs	r2, #1
 800f742:	701a      	strb	r2, [r3, #0]
 800f744:	e00a      	b.n	800f75c <configCheck+0x34>
  }
  else{
    configSet = false;
 800f746:	4bb0      	ldr	r3, [pc, #704]	@ (800fa08 <configCheck+0x2e0>)
 800f748:	2200      	movs	r2, #0
 800f74a:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800f74c:	f001 fb42 	bl	8010dd4 <HAL_GetTick>
 800f750:	0003      	movs	r3, r0
 800f752:	22fa      	movs	r2, #250	@ 0xfa
 800f754:	00d2      	lsls	r2, r2, #3
 800f756:	189a      	adds	r2, r3, r2
 800f758:	4bac      	ldr	r3, [pc, #688]	@ (800fa0c <configCheck+0x2e4>)
 800f75a:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800f75c:	4baa      	ldr	r3, [pc, #680]	@ (800fa08 <configCheck+0x2e0>)
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d00d      	beq.n	800f780 <configCheck+0x58>
 800f764:	4ba9      	ldr	r3, [pc, #676]	@ (800fa0c <configCheck+0x2e4>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	0018      	movs	r0, r3
 800f76a:	f000 fe91 	bl	8010490 <TimestampIsReached>
 800f76e:	1e03      	subs	r3, r0, #0
 800f770:	d006      	beq.n	800f780 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800f772:	f7f4 f8e5 	bl	8003940 <SetConfigMode>
    SetDBLED(true, true, true);
 800f776:	2201      	movs	r2, #1
 800f778:	2101      	movs	r1, #1
 800f77a:	2001      	movs	r0, #1
 800f77c:	f7ff fcaa 	bl	800f0d4 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 800f780:	f7f7 fb5f 	bl	8006e42 <BootButton_Pressed>
 800f784:	0003      	movs	r3, r0
 800f786:	001a      	movs	r2, r3
 800f788:	2301      	movs	r3, #1
 800f78a:	4053      	eors	r3, r2
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d054      	beq.n	800f83c <configCheck+0x114>
 800f792:	f7f7 fb67 	bl	8006e64 <UserButton_Pressed>
 800f796:	1e03      	subs	r3, r0, #0
 800f798:	d050      	beq.n	800f83c <configCheck+0x114>
 800f79a:	4b9d      	ldr	r3, [pc, #628]	@ (800fa10 <configCheck+0x2e8>)
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	2201      	movs	r2, #1
 800f7a0:	4053      	eors	r3, r2
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d049      	beq.n	800f83c <configCheck+0x114>
 800f7a8:	f7f4 f8ea 	bl	8003980 <GetReconfigMode>
 800f7ac:	0003      	movs	r3, r0
 800f7ae:	001a      	movs	r2, r3
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	4053      	eors	r3, r2
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d040      	beq.n	800f83c <configCheck+0x114>
    SetLEDsOff();
 800f7ba:	f7ff fe15 	bl	800f3e8 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 800f7be:	4a95      	ldr	r2, [pc, #596]	@ (800fa14 <configCheck+0x2ec>)
 800f7c0:	4994      	ldr	r1, [pc, #592]	@ (800fa14 <configCheck+0x2ec>)
 800f7c2:	4b94      	ldr	r3, [pc, #592]	@ (800fa14 <configCheck+0x2ec>)
 800f7c4:	0018      	movs	r0, r3
 800f7c6:	f7ff fccf 	bl	800f168 <SetVocLED>
    HAL_Delay(1500);
 800f7ca:	4b93      	ldr	r3, [pc, #588]	@ (800fa18 <configCheck+0x2f0>)
 800f7cc:	0018      	movs	r0, r3
 800f7ce:	f001 fb0b 	bl	8010de8 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 800f7d2:	23fa      	movs	r3, #250	@ 0xfa
 800f7d4:	011a      	lsls	r2, r3, #4
 800f7d6:	23fa      	movs	r3, #250	@ 0xfa
 800f7d8:	0119      	lsls	r1, r3, #4
 800f7da:	23fa      	movs	r3, #250	@ 0xfa
 800f7dc:	011b      	lsls	r3, r3, #4
 800f7de:	0018      	movs	r0, r3
 800f7e0:	f7ff fcc2 	bl	800f168 <SetVocLED>
    userToggle = !userToggle;
 800f7e4:	4b8d      	ldr	r3, [pc, #564]	@ (800fa1c <configCheck+0x2f4>)
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	1e5a      	subs	r2, r3, #1
 800f7ea:	4193      	sbcs	r3, r2
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	4053      	eors	r3, r2
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	1c1a      	adds	r2, r3, #0
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	4013      	ands	r3, r2
 800f7fa:	b2da      	uxtb	r2, r3
 800f7fc:	4b87      	ldr	r3, [pc, #540]	@ (800fa1c <configCheck+0x2f4>)
 800f7fe:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800f800:	4b86      	ldr	r3, [pc, #536]	@ (800fa1c <configCheck+0x2f4>)
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d001      	beq.n	800f80c <configCheck+0xe4>
      EnabledConnectedDevices();
 800f808:	f7fa ffa4 	bl	800a754 <EnabledConnectedDevices>
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 800f80c:	4b83      	ldr	r3, [pc, #524]	@ (800fa1c <configCheck+0x2f4>)
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d001      	beq.n	800f818 <configCheck+0xf0>
 800f814:	4b82      	ldr	r3, [pc, #520]	@ (800fa20 <configCheck+0x2f8>)
 800f816:	e000      	b.n	800f81a <configCheck+0xf2>
 800f818:	4b82      	ldr	r3, [pc, #520]	@ (800fa24 <configCheck+0x2fc>)
 800f81a:	4a83      	ldr	r2, [pc, #524]	@ (800fa28 <configCheck+0x300>)
 800f81c:	4983      	ldr	r1, [pc, #524]	@ (800fa2c <configCheck+0x304>)
 800f81e:	2003      	movs	r0, #3
 800f820:	f000 fe8c 	bl	801053c <CreateLine>
    userbuttonHeld = true;
 800f824:	4b7a      	ldr	r3, [pc, #488]	@ (800fa10 <configCheck+0x2e8>)
 800f826:	2201      	movs	r2, #1
 800f828:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800f82a:	f001 fad3 	bl	8010dd4 <HAL_GetTick>
 800f82e:	0003      	movs	r3, r0
 800f830:	22fa      	movs	r2, #250	@ 0xfa
 800f832:	00d2      	lsls	r2, r2, #3
 800f834:	189a      	adds	r2, r3, r2
 800f836:	4b7e      	ldr	r3, [pc, #504]	@ (800fa30 <configCheck+0x308>)
 800f838:	601a      	str	r2, [r3, #0]
 800f83a:	e002      	b.n	800f842 <configCheck+0x11a>
  }
  else {
    userbuttonHeld = false;
 800f83c:	4b74      	ldr	r3, [pc, #464]	@ (800fa10 <configCheck+0x2e8>)
 800f83e:	2200      	movs	r2, #0
 800f840:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 800f842:	f7f7 fafe 	bl	8006e42 <BootButton_Pressed>
 800f846:	0003      	movs	r3, r0
 800f848:	001a      	movs	r2, r3
 800f84a:	2301      	movs	r3, #1
 800f84c:	4053      	eors	r3, r2
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	2b00      	cmp	r3, #0
 800f852:	d100      	bne.n	800f856 <configCheck+0x12e>
 800f854:	e0a4      	b.n	800f9a0 <configCheck+0x278>
 800f856:	4b6e      	ldr	r3, [pc, #440]	@ (800fa10 <configCheck+0x2e8>)
 800f858:	781b      	ldrb	r3, [r3, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d100      	bne.n	800f860 <configCheck+0x138>
 800f85e:	e09f      	b.n	800f9a0 <configCheck+0x278>
 800f860:	4b73      	ldr	r3, [pc, #460]	@ (800fa30 <configCheck+0x308>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	0018      	movs	r0, r3
 800f866:	f000 fe13 	bl	8010490 <TimestampIsReached>
 800f86a:	1e03      	subs	r3, r0, #0
 800f86c:	d100      	bne.n	800f870 <configCheck+0x148>
 800f86e:	e097      	b.n	800f9a0 <configCheck+0x278>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800f870:	f7fa fc4e 	bl	800a110 <GetPMSensorPresence>
 800f874:	1e03      	subs	r3, r0, #0
 800f876:	d100      	bne.n	800f87a <configCheck+0x152>
 800f878:	e082      	b.n	800f980 <configCheck+0x258>
 800f87a:	4b6e      	ldr	r3, [pc, #440]	@ (800fa34 <configCheck+0x30c>)
 800f87c:	791b      	ldrb	r3, [r3, #4]
 800f87e:	2b34      	cmp	r3, #52	@ 0x34
 800f880:	d004      	beq.n	800f88c <configCheck+0x164>
 800f882:	4b6c      	ldr	r3, [pc, #432]	@ (800fa34 <configCheck+0x30c>)
 800f884:	791b      	ldrb	r3, [r3, #4]
 800f886:	2b35      	cmp	r3, #53	@ 0x35
 800f888:	d000      	beq.n	800f88c <configCheck+0x164>
 800f88a:	e079      	b.n	800f980 <configCheck+0x258>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800f88c:	4b6a      	ldr	r3, [pc, #424]	@ (800fa38 <configCheck+0x310>)
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	1e5a      	subs	r2, r3, #1
 800f892:	4193      	sbcs	r3, r2
 800f894:	b2db      	uxtb	r3, r3
 800f896:	2201      	movs	r2, #1
 800f898:	4053      	eors	r3, r2
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	1c1a      	adds	r2, r3, #0
 800f89e:	2301      	movs	r3, #1
 800f8a0:	4013      	ands	r3, r2
 800f8a2:	b2da      	uxtb	r2, r3
 800f8a4:	4b64      	ldr	r3, [pc, #400]	@ (800fa38 <configCheck+0x310>)
 800f8a6:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800f8a8:	4b63      	ldr	r3, [pc, #396]	@ (800fa38 <configCheck+0x310>)
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d005      	beq.n	800f8bc <configCheck+0x194>
 800f8b0:	1dbc      	adds	r4, r7, #6
 800f8b2:	f7ff fb93 	bl	800efdc <Calculate_LED_ON>
 800f8b6:	0003      	movs	r3, r0
 800f8b8:	8023      	strh	r3, [r4, #0]
 800f8ba:	e003      	b.n	800f8c4 <configCheck+0x19c>
        else color = 4000;
 800f8bc:	1dbb      	adds	r3, r7, #6
 800f8be:	22fa      	movs	r2, #250	@ 0xfa
 800f8c0:	0112      	lsls	r2, r2, #4
 800f8c2:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800f8c4:	4b5c      	ldr	r3, [pc, #368]	@ (800fa38 <configCheck+0x310>)
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d001      	beq.n	800f8d0 <configCheck+0x1a8>
 800f8cc:	4b5b      	ldr	r3, [pc, #364]	@ (800fa3c <configCheck+0x314>)
 800f8ce:	e000      	b.n	800f8d2 <configCheck+0x1aa>
 800f8d0:	4b5b      	ldr	r3, [pc, #364]	@ (800fa40 <configCheck+0x318>)
 800f8d2:	4a5c      	ldr	r2, [pc, #368]	@ (800fa44 <configCheck+0x31c>)
 800f8d4:	495c      	ldr	r1, [pc, #368]	@ (800fa48 <configCheck+0x320>)
 800f8d6:	2002      	movs	r0, #2
 800f8d8:	f000 fe30 	bl	801053c <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800f8dc:	1d7b      	adds	r3, r7, #5
 800f8de:	2200      	movs	r2, #0
 800f8e0:	701a      	strb	r2, [r3, #0]
 800f8e2:	e028      	b.n	800f936 <configCheck+0x20e>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800f8e4:	f7ff fb7a 	bl	800efdc <Calculate_LED_ON>
 800f8e8:	0003      	movs	r3, r0
 800f8ea:	001a      	movs	r2, r3
 800f8ec:	4b57      	ldr	r3, [pc, #348]	@ (800fa4c <configCheck+0x324>)
 800f8ee:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800f8f0:	4b56      	ldr	r3, [pc, #344]	@ (800fa4c <configCheck+0x324>)
 800f8f2:	1dba      	adds	r2, r7, #6
 800f8f4:	8812      	ldrh	r2, [r2, #0]
 800f8f6:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800f8f8:	4b54      	ldr	r3, [pc, #336]	@ (800fa4c <configCheck+0x324>)
 800f8fa:	1dba      	adds	r2, r7, #6
 800f8fc:	8812      	ldrh	r2, [r2, #0]
 800f8fe:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800f900:	23c8      	movs	r3, #200	@ 0xc8
 800f902:	005b      	lsls	r3, r3, #1
 800f904:	0018      	movs	r0, r3
 800f906:	f001 fa6f 	bl	8010de8 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800f90a:	4b50      	ldr	r3, [pc, #320]	@ (800fa4c <configCheck+0x324>)
 800f90c:	22fa      	movs	r2, #250	@ 0xfa
 800f90e:	0112      	lsls	r2, r2, #4
 800f910:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800f912:	4b4e      	ldr	r3, [pc, #312]	@ (800fa4c <configCheck+0x324>)
 800f914:	22fa      	movs	r2, #250	@ 0xfa
 800f916:	0112      	lsls	r2, r2, #4
 800f918:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800f91a:	4b4c      	ldr	r3, [pc, #304]	@ (800fa4c <configCheck+0x324>)
 800f91c:	22fa      	movs	r2, #250	@ 0xfa
 800f91e:	0112      	lsls	r2, r2, #4
 800f920:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800f922:	23c8      	movs	r3, #200	@ 0xc8
 800f924:	005b      	lsls	r3, r3, #1
 800f926:	0018      	movs	r0, r3
 800f928:	f001 fa5e 	bl	8010de8 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800f92c:	1d7b      	adds	r3, r7, #5
 800f92e:	781a      	ldrb	r2, [r3, #0]
 800f930:	1d7b      	adds	r3, r7, #5
 800f932:	3201      	adds	r2, #1
 800f934:	701a      	strb	r2, [r3, #0]
 800f936:	1d7b      	adds	r3, r7, #5
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	2b01      	cmp	r3, #1
 800f93c:	d9d2      	bls.n	800f8e4 <configCheck+0x1bc>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 800f93e:	4b37      	ldr	r3, [pc, #220]	@ (800fa1c <configCheck+0x2f4>)
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	1e5a      	subs	r2, r3, #1
 800f944:	4193      	sbcs	r3, r2
 800f946:	b2db      	uxtb	r3, r3
 800f948:	2201      	movs	r2, #1
 800f94a:	4053      	eors	r3, r2
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	1c1a      	adds	r2, r3, #0
 800f950:	2301      	movs	r3, #1
 800f952:	4013      	ands	r3, r2
 800f954:	b2da      	uxtb	r2, r3
 800f956:	4b31      	ldr	r3, [pc, #196]	@ (800fa1c <configCheck+0x2f4>)
 800f958:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800f95a:	4b30      	ldr	r3, [pc, #192]	@ (800fa1c <configCheck+0x2f4>)
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d001      	beq.n	800f966 <configCheck+0x23e>
 800f962:	4b36      	ldr	r3, [pc, #216]	@ (800fa3c <configCheck+0x314>)
 800f964:	e000      	b.n	800f968 <configCheck+0x240>
 800f966:	4b36      	ldr	r3, [pc, #216]	@ (800fa40 <configCheck+0x318>)
 800f968:	4a39      	ldr	r2, [pc, #228]	@ (800fa50 <configCheck+0x328>)
 800f96a:	4937      	ldr	r1, [pc, #220]	@ (800fa48 <configCheck+0x320>)
 800f96c:	2002      	movs	r0, #2
 800f96e:	f000 fde5 	bl	801053c <CreateLine>
      if (usbPluggedIn) {
 800f972:	4b38      	ldr	r3, [pc, #224]	@ (800fa54 <configCheck+0x32c>)
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d009      	beq.n	800f98e <configCheck+0x266>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800f97a:	f7fc f84b 	bl	800ba14 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800f97e:	e006      	b.n	800f98e <configCheck+0x266>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800f980:	4a35      	ldr	r2, [pc, #212]	@ (800fa58 <configCheck+0x330>)
 800f982:	4b31      	ldr	r3, [pc, #196]	@ (800fa48 <configCheck+0x320>)
 800f984:	0019      	movs	r1, r3
 800f986:	2002      	movs	r0, #2
 800f988:	f000 fdd8 	bl	801053c <CreateLine>
 800f98c:	e000      	b.n	800f990 <configCheck+0x268>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800f98e:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800f990:	46c0      	nop			@ (mov r8, r8)
 800f992:	f7f7 fa67 	bl	8006e64 <UserButton_Pressed>
 800f996:	1e03      	subs	r3, r0, #0
 800f998:	d1fb      	bne.n	800f992 <configCheck+0x26a>
    }
    userbuttonHeld = false;
 800f99a:	4b1d      	ldr	r3, [pc, #116]	@ (800fa10 <configCheck+0x2e8>)
 800f99c:	2200      	movs	r2, #0
 800f99e:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800f9a0:	f7f7 fa4f 	bl	8006e42 <BootButton_Pressed>
 800f9a4:	0003      	movs	r3, r0
 800f9a6:	001a      	movs	r2, r3
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	4053      	eors	r3, r2
 800f9ac:	b2db      	uxtb	r3, r3
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d00b      	beq.n	800f9ca <configCheck+0x2a2>
 800f9b2:	f7f7 fa57 	bl	8006e64 <UserButton_Pressed>
 800f9b6:	0003      	movs	r3, r0
 800f9b8:	001a      	movs	r2, r3
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	4053      	eors	r3, r2
 800f9be:	b2db      	uxtb	r3, r3
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d002      	beq.n	800f9ca <configCheck+0x2a2>
    userbuttonHeld = false;
 800f9c4:	4b12      	ldr	r3, [pc, #72]	@ (800fa10 <configCheck+0x2e8>)
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 800f9ca:	f7f7 fa2b 	bl	8006e24 <Check_USB_PowerOn>
 800f9ce:	1e03      	subs	r3, r0, #0
 800f9d0:	d003      	beq.n	800f9da <configCheck+0x2b2>
    usbPluggedIn = true;
 800f9d2:	4b20      	ldr	r3, [pc, #128]	@ (800fa54 <configCheck+0x32c>)
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 800f9d8:	e012      	b.n	800fa00 <configCheck+0x2d8>
    if(!userToggle && !init){
 800f9da:	4b10      	ldr	r3, [pc, #64]	@ (800fa1c <configCheck+0x2f4>)
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	4053      	eors	r3, r2
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d008      	beq.n	800f9fa <configCheck+0x2d2>
 800f9e8:	4b1c      	ldr	r3, [pc, #112]	@ (800fa5c <configCheck+0x334>)
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	2201      	movs	r2, #1
 800f9ee:	4053      	eors	r3, r2
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d001      	beq.n	800f9fa <configCheck+0x2d2>
      SetLEDsOff();
 800f9f6:	f7ff fcf7 	bl	800f3e8 <SetLEDsOff>
    usbPluggedIn = false;
 800f9fa:	4b16      	ldr	r3, [pc, #88]	@ (800fa54 <configCheck+0x32c>)
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	701a      	strb	r2, [r3, #0]
}
 800fa00:	46c0      	nop			@ (mov r8, r8)
 800fa02:	46bd      	mov	sp, r7
 800fa04:	b003      	add	sp, #12
 800fa06:	bd90      	pop	{r4, r7, pc}
 800fa08:	20001dbc 	.word	0x20001dbc
 800fa0c:	20001dc4 	.word	0x20001dc4
 800fa10:	20001dbf 	.word	0x20001dbf
 800fa14:	00000bb8 	.word	0x00000bb8
 800fa18:	000005dc 	.word	0x000005dc
 800fa1c:	20001dbe 	.word	0x20001dbe
 800fa20:	080282dc 	.word	0x080282dc
 800fa24:	080282e0 	.word	0x080282e0
 800fa28:	080282e4 	.word	0x080282e4
 800fa2c:	08028264 	.word	0x08028264
 800fa30:	20001dc8 	.word	0x20001dc8
 800fa34:	20000e30 	.word	0x20000e30
 800fa38:	20000e2e 	.word	0x20000e2e
 800fa3c:	08028304 	.word	0x08028304
 800fa40:	0802830c 	.word	0x0802830c
 800fa44:	08028318 	.word	0x08028318
 800fa48:	08028338 	.word	0x08028338
 800fa4c:	40000400 	.word	0x40000400
 800fa50:	0802833c 	.word	0x0802833c
 800fa54:	20001dbd 	.word	0x20001dbd
 800fa58:	08028354 	.word	0x08028354
 800fa5c:	200000d8 	.word	0x200000d8

0800fa60 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800fa60:	b590      	push	{r4, r7, lr}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800fa66:	1dfc      	adds	r4, r7, #7
 800fa68:	f7ff fdfa 	bl	800f660 <powerCheck>
 800fa6c:	0003      	movs	r3, r0
 800fa6e:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800fa70:	1dfb      	adds	r3, r7, #7
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	0018      	movs	r0, r3
 800fa76:	f7ff fe0f 	bl	800f698 <powerDisplay>
  return status;
 800fa7a:	1dfb      	adds	r3, r7, #7
 800fa7c:	781b      	ldrb	r3, [r3, #0]
}
 800fa7e:	0018      	movs	r0, r3
 800fa80:	46bd      	mov	sp, r7
 800fa82:	b003      	add	sp, #12
 800fa84:	bd90      	pop	{r4, r7, pc}
	...

0800fa88 <setuserToggle>:

void setuserToggle(void) {
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800fa8c:	f7ff fde8 	bl	800f660 <powerCheck>
 800fa90:	0003      	movs	r3, r0
 800fa92:	2b04      	cmp	r3, #4
 800fa94:	d004      	beq.n	800faa0 <setuserToggle+0x18>
    userToggle = true;
 800fa96:	4b04      	ldr	r3, [pc, #16]	@ (800faa8 <setuserToggle+0x20>)
 800fa98:	2201      	movs	r2, #1
 800fa9a:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800fa9c:	f7fa fe5a 	bl	800a754 <EnabledConnectedDevices>
  }
}
 800faa0:	46c0      	nop			@ (mov r8, r8)
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	46c0      	nop			@ (mov r8, r8)
 800faa8:	20001dbe 	.word	0x20001dbe

0800faac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fab0:	4b07      	ldr	r3, [pc, #28]	@ (800fad0 <HAL_MspInit+0x24>)
 800fab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fab4:	4b06      	ldr	r3, [pc, #24]	@ (800fad0 <HAL_MspInit+0x24>)
 800fab6:	2101      	movs	r1, #1
 800fab8:	430a      	orrs	r2, r1
 800faba:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800fabc:	4b04      	ldr	r3, [pc, #16]	@ (800fad0 <HAL_MspInit+0x24>)
 800fabe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fac0:	4b03      	ldr	r3, [pc, #12]	@ (800fad0 <HAL_MspInit+0x24>)
 800fac2:	2180      	movs	r1, #128	@ 0x80
 800fac4:	0549      	lsls	r1, r1, #21
 800fac6:	430a      	orrs	r2, r1
 800fac8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800faca:	46c0      	nop			@ (mov r8, r8)
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}
 800fad0:	40021000 	.word	0x40021000

0800fad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800fad8:	46c0      	nop			@ (mov r8, r8)
 800fada:	e7fd      	b.n	800fad8 <NMI_Handler+0x4>

0800fadc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800fae0:	46c0      	nop			@ (mov r8, r8)
 800fae2:	e7fd      	b.n	800fae0 <HardFault_Handler+0x4>

0800fae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800fae8:	46c0      	nop			@ (mov r8, r8)
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}

0800faee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800faee:	b580      	push	{r7, lr}
 800faf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800faf2:	46c0      	nop			@ (mov r8, r8)
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800fafc:	f001 f958 	bl	8010db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800fb00:	46c0      	nop			@ (mov r8, r8)
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
	...

0800fb08 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800fb0c:	4b03      	ldr	r3, [pc, #12]	@ (800fb1c <RTC_IRQHandler+0x14>)
 800fb0e:	0018      	movs	r0, r3
 800fb10:	f009 f916 	bl	8018d40 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800fb14:	46c0      	nop			@ (mov r8, r8)
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	46c0      	nop			@ (mov r8, r8)
 800fb1c:	20000e08 	.word	0x20000e08

0800fb20 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800fb24:	2380      	movs	r3, #128	@ 0x80
 800fb26:	021b      	lsls	r3, r3, #8
 800fb28:	0018      	movs	r0, r3
 800fb2a:	f002 fc01 	bl	8012330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800fb2e:	46c0      	nop			@ (mov r8, r8)
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800fb38:	4b05      	ldr	r3, [pc, #20]	@ (800fb50 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800fb3a:	0018      	movs	r0, r3
 800fb3c:	f001 ff89 	bl	8011a52 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800fb40:	4b04      	ldr	r3, [pc, #16]	@ (800fb54 <DMA1_Channel2_3_IRQHandler+0x20>)
 800fb42:	0018      	movs	r0, r3
 800fb44:	f001 ff85 	bl	8011a52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800fb48:	46c0      	nop			@ (mov r8, r8)
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	46c0      	nop			@ (mov r8, r8)
 800fb50:	20000ca0 	.word	0x20000ca0
 800fb54:	20000c58 	.word	0x20000c58

0800fb58 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800fb5c:	4b07      	ldr	r3, [pc, #28]	@ (800fb7c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800fb5e:	0018      	movs	r0, r3
 800fb60:	f001 ff77 	bl	8011a52 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800fb64:	4b06      	ldr	r3, [pc, #24]	@ (800fb80 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800fb66:	0018      	movs	r0, r3
 800fb68:	f001 ff73 	bl	8011a52 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800fb6c:	4b05      	ldr	r3, [pc, #20]	@ (800fb84 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800fb6e:	0018      	movs	r0, r3
 800fb70:	f001 ff6f 	bl	8011a52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800fb74:	46c0      	nop			@ (mov r8, r8)
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	46c0      	nop			@ (mov r8, r8)
 800fb7c:	20000d24 	.word	0x20000d24
 800fb80:	200020c4 	.word	0x200020c4
 800fb84:	2000210c 	.word	0x2000210c

0800fb88 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800fb8c:	4b03      	ldr	r3, [pc, #12]	@ (800fb9c <USART4_5_IRQHandler+0x14>)
 800fb8e:	0018      	movs	r0, r3
 800fb90:	f009 ffd0 	bl	8019b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800fb94:	46c0      	nop			@ (mov r8, r8)
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	46c0      	nop			@ (mov r8, r8)
 800fb9c:	2000200c 	.word	0x2000200c

0800fba0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800fba4:	4b09      	ldr	r3, [pc, #36]	@ (800fbcc <I2C1_IRQHandler+0x2c>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	699a      	ldr	r2, [r3, #24]
 800fbaa:	23e0      	movs	r3, #224	@ 0xe0
 800fbac:	00db      	lsls	r3, r3, #3
 800fbae:	4013      	ands	r3, r2
 800fbb0:	d004      	beq.n	800fbbc <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800fbb2:	4b06      	ldr	r3, [pc, #24]	@ (800fbcc <I2C1_IRQHandler+0x2c>)
 800fbb4:	0018      	movs	r0, r3
 800fbb6:	f003 fad9 	bl	801316c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800fbba:	e003      	b.n	800fbc4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800fbbc:	4b03      	ldr	r3, [pc, #12]	@ (800fbcc <I2C1_IRQHandler+0x2c>)
 800fbbe:	0018      	movs	r0, r3
 800fbc0:	f003 faba 	bl	8013138 <HAL_I2C_EV_IRQHandler>
}
 800fbc4:	46c0      	nop			@ (mov r8, r8)
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}
 800fbca:	46c0      	nop			@ (mov r8, r8)
 800fbcc:	20000bb0 	.word	0x20000bb0

0800fbd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800fbd4:	4b03      	ldr	r3, [pc, #12]	@ (800fbe4 <USART1_IRQHandler+0x14>)
 800fbd6:	0018      	movs	r0, r3
 800fbd8:	f009 ffac 	bl	8019b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800fbdc:	46c0      	nop			@ (mov r8, r8)
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	46c0      	nop			@ (mov r8, r8)
 800fbe4:	20001f54 	.word	0x20001f54

0800fbe8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800fbec:	4b03      	ldr	r3, [pc, #12]	@ (800fbfc <USB_IRQHandler+0x14>)
 800fbee:	0018      	movs	r0, r3
 800fbf0:	f005 fefc 	bl	80159ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800fbf4:	46c0      	nop			@ (mov r8, r8)
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}
 800fbfa:	46c0      	nop			@ (mov r8, r8)
 800fbfc:	20002f20 	.word	0x20002f20

0800fc00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	af00      	add	r7, sp, #0
  return 1;
 800fc04:	2301      	movs	r3, #1
}
 800fc06:	0018      	movs	r0, r3
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <_kill>:

int _kill(int pid, int sig)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800fc16:	f012 fe93 	bl	8022940 <__errno>
 800fc1a:	0003      	movs	r3, r0
 800fc1c:	2216      	movs	r2, #22
 800fc1e:	601a      	str	r2, [r3, #0]
  return -1;
 800fc20:	2301      	movs	r3, #1
 800fc22:	425b      	negs	r3, r3
}
 800fc24:	0018      	movs	r0, r3
 800fc26:	46bd      	mov	sp, r7
 800fc28:	b002      	add	sp, #8
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <_exit>:

void _exit (int status)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b082      	sub	sp, #8
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800fc34:	2301      	movs	r3, #1
 800fc36:	425a      	negs	r2, r3
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	0011      	movs	r1, r2
 800fc3c:	0018      	movs	r0, r3
 800fc3e:	f7ff ffe5 	bl	800fc0c <_kill>
  while (1) {}    /* Make sure we hang here */
 800fc42:	46c0      	nop			@ (mov r8, r8)
 800fc44:	e7fd      	b.n	800fc42 <_exit+0x16>

0800fc46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800fc46:	b580      	push	{r7, lr}
 800fc48:	b086      	sub	sp, #24
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	60f8      	str	r0, [r7, #12]
 800fc4e:	60b9      	str	r1, [r7, #8]
 800fc50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fc52:	2300      	movs	r3, #0
 800fc54:	617b      	str	r3, [r7, #20]
 800fc56:	e00a      	b.n	800fc6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800fc58:	e000      	b.n	800fc5c <_read+0x16>
 800fc5a:	bf00      	nop
 800fc5c:	0001      	movs	r1, r0
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	1c5a      	adds	r2, r3, #1
 800fc62:	60ba      	str	r2, [r7, #8]
 800fc64:	b2ca      	uxtb	r2, r1
 800fc66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	617b      	str	r3, [r7, #20]
 800fc6e:	697a      	ldr	r2, [r7, #20]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	429a      	cmp	r2, r3
 800fc74:	dbf0      	blt.n	800fc58 <_read+0x12>
  }

  return len;
 800fc76:	687b      	ldr	r3, [r7, #4]
}
 800fc78:	0018      	movs	r0, r3
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	b006      	add	sp, #24
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <_close>:
  }
  return len;
}

int _close(int file)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800fc88:	2301      	movs	r3, #1
 800fc8a:	425b      	negs	r3, r3
}
 800fc8c:	0018      	movs	r0, r3
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	b002      	add	sp, #8
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	2280      	movs	r2, #128	@ 0x80
 800fca2:	0192      	lsls	r2, r2, #6
 800fca4:	605a      	str	r2, [r3, #4]
  return 0;
 800fca6:	2300      	movs	r3, #0
}
 800fca8:	0018      	movs	r0, r3
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	b002      	add	sp, #8
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <_isatty>:

int _isatty(int file)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b082      	sub	sp, #8
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800fcb8:	2301      	movs	r3, #1
}
 800fcba:	0018      	movs	r0, r3
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	b002      	add	sp, #8
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b084      	sub	sp, #16
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	60f8      	str	r0, [r7, #12]
 800fcca:	60b9      	str	r1, [r7, #8]
 800fccc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800fcce:	2300      	movs	r3, #0
}
 800fcd0:	0018      	movs	r0, r3
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	b004      	add	sp, #16
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b086      	sub	sp, #24
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800fce0:	4a14      	ldr	r2, [pc, #80]	@ (800fd34 <_sbrk+0x5c>)
 800fce2:	4b15      	ldr	r3, [pc, #84]	@ (800fd38 <_sbrk+0x60>)
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800fcec:	4b13      	ldr	r3, [pc, #76]	@ (800fd3c <_sbrk+0x64>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d102      	bne.n	800fcfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800fcf4:	4b11      	ldr	r3, [pc, #68]	@ (800fd3c <_sbrk+0x64>)
 800fcf6:	4a12      	ldr	r2, [pc, #72]	@ (800fd40 <_sbrk+0x68>)
 800fcf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800fcfa:	4b10      	ldr	r3, [pc, #64]	@ (800fd3c <_sbrk+0x64>)
 800fcfc:	681a      	ldr	r2, [r3, #0]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	18d3      	adds	r3, r2, r3
 800fd02:	693a      	ldr	r2, [r7, #16]
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d207      	bcs.n	800fd18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800fd08:	f012 fe1a 	bl	8022940 <__errno>
 800fd0c:	0003      	movs	r3, r0
 800fd0e:	220c      	movs	r2, #12
 800fd10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800fd12:	2301      	movs	r3, #1
 800fd14:	425b      	negs	r3, r3
 800fd16:	e009      	b.n	800fd2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800fd18:	4b08      	ldr	r3, [pc, #32]	@ (800fd3c <_sbrk+0x64>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800fd1e:	4b07      	ldr	r3, [pc, #28]	@ (800fd3c <_sbrk+0x64>)
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	18d2      	adds	r2, r2, r3
 800fd26:	4b05      	ldr	r3, [pc, #20]	@ (800fd3c <_sbrk+0x64>)
 800fd28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
}
 800fd2c:	0018      	movs	r0, r3
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	b006      	add	sp, #24
 800fd32:	bd80      	pop	{r7, pc}
 800fd34:	20005000 	.word	0x20005000
 800fd38:	00000400 	.word	0x00000400
 800fd3c:	20001dd8 	.word	0x20001dd8
 800fd40:	20003580 	.word	0x20003580

0800fd44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800fd48:	46c0      	nop			@ (mov r8, r8)
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
	...

0800fd50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fd56:	2310      	movs	r3, #16
 800fd58:	18fb      	adds	r3, r7, r3
 800fd5a:	0018      	movs	r0, r3
 800fd5c:	2308      	movs	r3, #8
 800fd5e:	001a      	movs	r2, r3
 800fd60:	2100      	movs	r1, #0
 800fd62:	f012 fd49 	bl	80227f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fd66:	003b      	movs	r3, r7
 800fd68:	0018      	movs	r0, r3
 800fd6a:	2310      	movs	r3, #16
 800fd6c:	001a      	movs	r2, r3
 800fd6e:	2100      	movs	r1, #0
 800fd70:	f012 fd42 	bl	80227f8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800fd74:	4b2e      	ldr	r3, [pc, #184]	@ (800fe30 <MX_TIM2_Init+0xe0>)
 800fd76:	2280      	movs	r2, #128	@ 0x80
 800fd78:	05d2      	lsls	r2, r2, #23
 800fd7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800fd7c:	4b2c      	ldr	r3, [pc, #176]	@ (800fe30 <MX_TIM2_Init+0xe0>)
 800fd7e:	2200      	movs	r2, #0
 800fd80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fd82:	4b2b      	ldr	r3, [pc, #172]	@ (800fe30 <MX_TIM2_Init+0xe0>)
 800fd84:	2200      	movs	r2, #0
 800fd86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800fd88:	4b29      	ldr	r3, [pc, #164]	@ (800fe30 <MX_TIM2_Init+0xe0>)
 800fd8a:	4a2a      	ldr	r2, [pc, #168]	@ (800fe34 <MX_TIM2_Init+0xe4>)
 800fd8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fd8e:	4b28      	ldr	r3, [pc, #160]	@ (800fe30 <MX_TIM2_Init+0xe0>)
 800fd90:	2200      	movs	r2, #0
 800fd92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fd94:	4b26      	ldr	r3, [pc, #152]	@ (800fe30 <MX_TIM2_Init+0xe0>)
 800fd96:	2200      	movs	r2, #0
 800fd98:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800fd9a:	4b25      	ldr	r3, [pc, #148]	@ (800fe30 <MX_TIM2_Init+0xe0>)
 800fd9c:	0018      	movs	r0, r3
 800fd9e:	f009 f8dd 	bl	8018f5c <HAL_TIM_PWM_Init>
 800fda2:	1e03      	subs	r3, r0, #0
 800fda4:	d001      	beq.n	800fdaa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800fda6:	f7fa f96d 	bl	800a084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fdaa:	2110      	movs	r1, #16
 800fdac:	187b      	adds	r3, r7, r1
 800fdae:	2200      	movs	r2, #0
 800fdb0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fdb2:	187b      	adds	r3, r7, r1
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800fdb8:	187a      	adds	r2, r7, r1
 800fdba:	4b1d      	ldr	r3, [pc, #116]	@ (800fe30 <MX_TIM2_Init+0xe0>)
 800fdbc:	0011      	movs	r1, r2
 800fdbe:	0018      	movs	r0, r3
 800fdc0:	f009 fbea 	bl	8019598 <HAL_TIMEx_MasterConfigSynchronization>
 800fdc4:	1e03      	subs	r3, r0, #0
 800fdc6:	d001      	beq.n	800fdcc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800fdc8:	f7fa f95c 	bl	800a084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fdcc:	003b      	movs	r3, r7
 800fdce:	2260      	movs	r2, #96	@ 0x60
 800fdd0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800fdd2:	003b      	movs	r3, r7
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fdd8:	003b      	movs	r3, r7
 800fdda:	2200      	movs	r2, #0
 800fddc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fdde:	003b      	movs	r3, r7
 800fde0:	2200      	movs	r2, #0
 800fde2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fde4:	0039      	movs	r1, r7
 800fde6:	4b12      	ldr	r3, [pc, #72]	@ (800fe30 <MX_TIM2_Init+0xe0>)
 800fde8:	2200      	movs	r2, #0
 800fdea:	0018      	movs	r0, r3
 800fdec:	f009 f988 	bl	8019100 <HAL_TIM_PWM_ConfigChannel>
 800fdf0:	1e03      	subs	r3, r0, #0
 800fdf2:	d001      	beq.n	800fdf8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800fdf4:	f7fa f946 	bl	800a084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800fdf8:	0039      	movs	r1, r7
 800fdfa:	4b0d      	ldr	r3, [pc, #52]	@ (800fe30 <MX_TIM2_Init+0xe0>)
 800fdfc:	2208      	movs	r2, #8
 800fdfe:	0018      	movs	r0, r3
 800fe00:	f009 f97e 	bl	8019100 <HAL_TIM_PWM_ConfigChannel>
 800fe04:	1e03      	subs	r3, r0, #0
 800fe06:	d001      	beq.n	800fe0c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800fe08:	f7fa f93c 	bl	800a084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800fe0c:	0039      	movs	r1, r7
 800fe0e:	4b08      	ldr	r3, [pc, #32]	@ (800fe30 <MX_TIM2_Init+0xe0>)
 800fe10:	220c      	movs	r2, #12
 800fe12:	0018      	movs	r0, r3
 800fe14:	f009 f974 	bl	8019100 <HAL_TIM_PWM_ConfigChannel>
 800fe18:	1e03      	subs	r3, r0, #0
 800fe1a:	d001      	beq.n	800fe20 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800fe1c:	f7fa f932 	bl	800a084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800fe20:	4b03      	ldr	r3, [pc, #12]	@ (800fe30 <MX_TIM2_Init+0xe0>)
 800fe22:	0018      	movs	r0, r3
 800fe24:	f000 f8fe 	bl	8010024 <HAL_TIM_MspPostInit>

}
 800fe28:	46c0      	nop			@ (mov r8, r8)
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	b006      	add	sp, #24
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	20001ddc 	.word	0x20001ddc
 800fe34:	0000ffff 	.word	0x0000ffff

0800fe38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b086      	sub	sp, #24
 800fe3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fe3e:	2310      	movs	r3, #16
 800fe40:	18fb      	adds	r3, r7, r3
 800fe42:	0018      	movs	r0, r3
 800fe44:	2308      	movs	r3, #8
 800fe46:	001a      	movs	r2, r3
 800fe48:	2100      	movs	r1, #0
 800fe4a:	f012 fcd5 	bl	80227f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fe4e:	003b      	movs	r3, r7
 800fe50:	0018      	movs	r0, r3
 800fe52:	2310      	movs	r3, #16
 800fe54:	001a      	movs	r2, r3
 800fe56:	2100      	movs	r1, #0
 800fe58:	f012 fcce 	bl	80227f8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800fe5c:	4b32      	ldr	r3, [pc, #200]	@ (800ff28 <MX_TIM3_Init+0xf0>)
 800fe5e:	4a33      	ldr	r2, [pc, #204]	@ (800ff2c <MX_TIM3_Init+0xf4>)
 800fe60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800fe62:	4b31      	ldr	r3, [pc, #196]	@ (800ff28 <MX_TIM3_Init+0xf0>)
 800fe64:	2200      	movs	r2, #0
 800fe66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fe68:	4b2f      	ldr	r3, [pc, #188]	@ (800ff28 <MX_TIM3_Init+0xf0>)
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800fe6e:	4b2e      	ldr	r3, [pc, #184]	@ (800ff28 <MX_TIM3_Init+0xf0>)
 800fe70:	4a2f      	ldr	r2, [pc, #188]	@ (800ff30 <MX_TIM3_Init+0xf8>)
 800fe72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fe74:	4b2c      	ldr	r3, [pc, #176]	@ (800ff28 <MX_TIM3_Init+0xf0>)
 800fe76:	2200      	movs	r2, #0
 800fe78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fe7a:	4b2b      	ldr	r3, [pc, #172]	@ (800ff28 <MX_TIM3_Init+0xf0>)
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800fe80:	4b29      	ldr	r3, [pc, #164]	@ (800ff28 <MX_TIM3_Init+0xf0>)
 800fe82:	0018      	movs	r0, r3
 800fe84:	f009 f86a 	bl	8018f5c <HAL_TIM_PWM_Init>
 800fe88:	1e03      	subs	r3, r0, #0
 800fe8a:	d001      	beq.n	800fe90 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800fe8c:	f7fa f8fa 	bl	800a084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fe90:	2110      	movs	r1, #16
 800fe92:	187b      	adds	r3, r7, r1
 800fe94:	2200      	movs	r2, #0
 800fe96:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fe98:	187b      	adds	r3, r7, r1
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800fe9e:	187a      	adds	r2, r7, r1
 800fea0:	4b21      	ldr	r3, [pc, #132]	@ (800ff28 <MX_TIM3_Init+0xf0>)
 800fea2:	0011      	movs	r1, r2
 800fea4:	0018      	movs	r0, r3
 800fea6:	f009 fb77 	bl	8019598 <HAL_TIMEx_MasterConfigSynchronization>
 800feaa:	1e03      	subs	r3, r0, #0
 800feac:	d001      	beq.n	800feb2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800feae:	f7fa f8e9 	bl	800a084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800feb2:	003b      	movs	r3, r7
 800feb4:	2260      	movs	r2, #96	@ 0x60
 800feb6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800feb8:	003b      	movs	r3, r7
 800feba:	2200      	movs	r2, #0
 800febc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800febe:	003b      	movs	r3, r7
 800fec0:	2200      	movs	r2, #0
 800fec2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fec4:	003b      	movs	r3, r7
 800fec6:	2200      	movs	r2, #0
 800fec8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800feca:	0039      	movs	r1, r7
 800fecc:	4b16      	ldr	r3, [pc, #88]	@ (800ff28 <MX_TIM3_Init+0xf0>)
 800fece:	2200      	movs	r2, #0
 800fed0:	0018      	movs	r0, r3
 800fed2:	f009 f915 	bl	8019100 <HAL_TIM_PWM_ConfigChannel>
 800fed6:	1e03      	subs	r3, r0, #0
 800fed8:	d001      	beq.n	800fede <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800feda:	f7fa f8d3 	bl	800a084 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800fede:	4b12      	ldr	r3, [pc, #72]	@ (800ff28 <MX_TIM3_Init+0xf0>)
 800fee0:	2104      	movs	r1, #4
 800fee2:	0018      	movs	r0, r3
 800fee4:	f009 fbb6 	bl	8019654 <HAL_TIMEx_RemapConfig>
 800fee8:	1e03      	subs	r3, r0, #0
 800feea:	d001      	beq.n	800fef0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800feec:	f7fa f8ca 	bl	800a084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800fef0:	0039      	movs	r1, r7
 800fef2:	4b0d      	ldr	r3, [pc, #52]	@ (800ff28 <MX_TIM3_Init+0xf0>)
 800fef4:	2204      	movs	r2, #4
 800fef6:	0018      	movs	r0, r3
 800fef8:	f009 f902 	bl	8019100 <HAL_TIM_PWM_ConfigChannel>
 800fefc:	1e03      	subs	r3, r0, #0
 800fefe:	d001      	beq.n	800ff04 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800ff00:	f7fa f8c0 	bl	800a084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ff04:	0039      	movs	r1, r7
 800ff06:	4b08      	ldr	r3, [pc, #32]	@ (800ff28 <MX_TIM3_Init+0xf0>)
 800ff08:	2208      	movs	r2, #8
 800ff0a:	0018      	movs	r0, r3
 800ff0c:	f009 f8f8 	bl	8019100 <HAL_TIM_PWM_ConfigChannel>
 800ff10:	1e03      	subs	r3, r0, #0
 800ff12:	d001      	beq.n	800ff18 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800ff14:	f7fa f8b6 	bl	800a084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800ff18:	4b03      	ldr	r3, [pc, #12]	@ (800ff28 <MX_TIM3_Init+0xf0>)
 800ff1a:	0018      	movs	r0, r3
 800ff1c:	f000 f882 	bl	8010024 <HAL_TIM_MspPostInit>

}
 800ff20:	46c0      	nop			@ (mov r8, r8)
 800ff22:	46bd      	mov	sp, r7
 800ff24:	b006      	add	sp, #24
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	20001e1c 	.word	0x20001e1c
 800ff2c:	40000400 	.word	0x40000400
 800ff30:	0000ffff 	.word	0x0000ffff

0800ff34 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ff3a:	003b      	movs	r3, r7
 800ff3c:	0018      	movs	r0, r3
 800ff3e:	2308      	movs	r3, #8
 800ff40:	001a      	movs	r2, r3
 800ff42:	2100      	movs	r1, #0
 800ff44:	f012 fc58 	bl	80227f8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800ff48:	4b15      	ldr	r3, [pc, #84]	@ (800ffa0 <MX_TIM6_Init+0x6c>)
 800ff4a:	4a16      	ldr	r2, [pc, #88]	@ (800ffa4 <MX_TIM6_Init+0x70>)
 800ff4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800ff4e:	4b14      	ldr	r3, [pc, #80]	@ (800ffa0 <MX_TIM6_Init+0x6c>)
 800ff50:	220a      	movs	r2, #10
 800ff52:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ff54:	4b12      	ldr	r3, [pc, #72]	@ (800ffa0 <MX_TIM6_Init+0x6c>)
 800ff56:	2200      	movs	r2, #0
 800ff58:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800ff5a:	4b11      	ldr	r3, [pc, #68]	@ (800ffa0 <MX_TIM6_Init+0x6c>)
 800ff5c:	4a12      	ldr	r2, [pc, #72]	@ (800ffa8 <MX_TIM6_Init+0x74>)
 800ff5e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ff60:	4b0f      	ldr	r3, [pc, #60]	@ (800ffa0 <MX_TIM6_Init+0x6c>)
 800ff62:	2200      	movs	r2, #0
 800ff64:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800ff66:	4b0e      	ldr	r3, [pc, #56]	@ (800ffa0 <MX_TIM6_Init+0x6c>)
 800ff68:	0018      	movs	r0, r3
 800ff6a:	f008 ff4f 	bl	8018e0c <HAL_TIM_Base_Init>
 800ff6e:	1e03      	subs	r3, r0, #0
 800ff70:	d001      	beq.n	800ff76 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800ff72:	f7fa f887 	bl	800a084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ff76:	003b      	movs	r3, r7
 800ff78:	2200      	movs	r2, #0
 800ff7a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ff7c:	003b      	movs	r3, r7
 800ff7e:	2200      	movs	r2, #0
 800ff80:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800ff82:	003a      	movs	r2, r7
 800ff84:	4b06      	ldr	r3, [pc, #24]	@ (800ffa0 <MX_TIM6_Init+0x6c>)
 800ff86:	0011      	movs	r1, r2
 800ff88:	0018      	movs	r0, r3
 800ff8a:	f009 fb05 	bl	8019598 <HAL_TIMEx_MasterConfigSynchronization>
 800ff8e:	1e03      	subs	r3, r0, #0
 800ff90:	d001      	beq.n	800ff96 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800ff92:	f7fa f877 	bl	800a084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800ff96:	46c0      	nop			@ (mov r8, r8)
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	b002      	add	sp, #8
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	46c0      	nop			@ (mov r8, r8)
 800ffa0:	20001e5c 	.word	0x20001e5c
 800ffa4:	40001000 	.word	0x40001000
 800ffa8:	0000ffff 	.word	0x0000ffff

0800ffac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681a      	ldr	r2, [r3, #0]
 800ffb8:	2380      	movs	r3, #128	@ 0x80
 800ffba:	05db      	lsls	r3, r3, #23
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d106      	bne.n	800ffce <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ffc0:	4b0a      	ldr	r3, [pc, #40]	@ (800ffec <HAL_TIM_PWM_MspInit+0x40>)
 800ffc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffc4:	4b09      	ldr	r3, [pc, #36]	@ (800ffec <HAL_TIM_PWM_MspInit+0x40>)
 800ffc6:	2101      	movs	r1, #1
 800ffc8:	430a      	orrs	r2, r1
 800ffca:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800ffcc:	e00a      	b.n	800ffe4 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	4a07      	ldr	r2, [pc, #28]	@ (800fff0 <HAL_TIM_PWM_MspInit+0x44>)
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	d105      	bne.n	800ffe4 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ffd8:	4b04      	ldr	r3, [pc, #16]	@ (800ffec <HAL_TIM_PWM_MspInit+0x40>)
 800ffda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffdc:	4b03      	ldr	r3, [pc, #12]	@ (800ffec <HAL_TIM_PWM_MspInit+0x40>)
 800ffde:	2102      	movs	r1, #2
 800ffe0:	430a      	orrs	r2, r1
 800ffe2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800ffe4:	46c0      	nop			@ (mov r8, r8)
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	b002      	add	sp, #8
 800ffea:	bd80      	pop	{r7, pc}
 800ffec:	40021000 	.word	0x40021000
 800fff0:	40000400 	.word	0x40000400

0800fff4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4a06      	ldr	r2, [pc, #24]	@ (801001c <HAL_TIM_Base_MspInit+0x28>)
 8010002:	4293      	cmp	r3, r2
 8010004:	d105      	bne.n	8010012 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8010006:	4b06      	ldr	r3, [pc, #24]	@ (8010020 <HAL_TIM_Base_MspInit+0x2c>)
 8010008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801000a:	4b05      	ldr	r3, [pc, #20]	@ (8010020 <HAL_TIM_Base_MspInit+0x2c>)
 801000c:	2110      	movs	r1, #16
 801000e:	430a      	orrs	r2, r1
 8010010:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8010012:	46c0      	nop			@ (mov r8, r8)
 8010014:	46bd      	mov	sp, r7
 8010016:	b002      	add	sp, #8
 8010018:	bd80      	pop	{r7, pc}
 801001a:	46c0      	nop			@ (mov r8, r8)
 801001c:	40001000 	.word	0x40001000
 8010020:	40021000 	.word	0x40021000

08010024 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8010024:	b590      	push	{r4, r7, lr}
 8010026:	b08b      	sub	sp, #44	@ 0x2c
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801002c:	2414      	movs	r4, #20
 801002e:	193b      	adds	r3, r7, r4
 8010030:	0018      	movs	r0, r3
 8010032:	2314      	movs	r3, #20
 8010034:	001a      	movs	r2, r3
 8010036:	2100      	movs	r1, #0
 8010038:	f012 fbde 	bl	80227f8 <memset>
  if(timHandle->Instance==TIM2)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	2380      	movs	r3, #128	@ 0x80
 8010042:	05db      	lsls	r3, r3, #23
 8010044:	429a      	cmp	r2, r3
 8010046:	d123      	bne.n	8010090 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010048:	4b27      	ldr	r3, [pc, #156]	@ (80100e8 <HAL_TIM_MspPostInit+0xc4>)
 801004a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801004c:	4b26      	ldr	r3, [pc, #152]	@ (80100e8 <HAL_TIM_MspPostInit+0xc4>)
 801004e:	2101      	movs	r1, #1
 8010050:	430a      	orrs	r2, r1
 8010052:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010054:	4b24      	ldr	r3, [pc, #144]	@ (80100e8 <HAL_TIM_MspPostInit+0xc4>)
 8010056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010058:	2201      	movs	r2, #1
 801005a:	4013      	ands	r3, r2
 801005c:	613b      	str	r3, [r7, #16]
 801005e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8010060:	0021      	movs	r1, r4
 8010062:	187b      	adds	r3, r7, r1
 8010064:	220d      	movs	r2, #13
 8010066:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010068:	187b      	adds	r3, r7, r1
 801006a:	2202      	movs	r2, #2
 801006c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801006e:	187b      	adds	r3, r7, r1
 8010070:	2200      	movs	r2, #0
 8010072:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010074:	187b      	adds	r3, r7, r1
 8010076:	2200      	movs	r2, #0
 8010078:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801007a:	187b      	adds	r3, r7, r1
 801007c:	2202      	movs	r2, #2
 801007e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010080:	187a      	adds	r2, r7, r1
 8010082:	23a0      	movs	r3, #160	@ 0xa0
 8010084:	05db      	lsls	r3, r3, #23
 8010086:	0011      	movs	r1, r2
 8010088:	0018      	movs	r0, r3
 801008a:	f001 ff99 	bl	8011fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 801008e:	e027      	b.n	80100e0 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	4a15      	ldr	r2, [pc, #84]	@ (80100ec <HAL_TIM_MspPostInit+0xc8>)
 8010096:	4293      	cmp	r3, r2
 8010098:	d122      	bne.n	80100e0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801009a:	4b13      	ldr	r3, [pc, #76]	@ (80100e8 <HAL_TIM_MspPostInit+0xc4>)
 801009c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801009e:	4b12      	ldr	r3, [pc, #72]	@ (80100e8 <HAL_TIM_MspPostInit+0xc4>)
 80100a0:	2104      	movs	r1, #4
 80100a2:	430a      	orrs	r2, r1
 80100a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80100a6:	4b10      	ldr	r3, [pc, #64]	@ (80100e8 <HAL_TIM_MspPostInit+0xc4>)
 80100a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100aa:	2204      	movs	r2, #4
 80100ac:	4013      	ands	r3, r2
 80100ae:	60fb      	str	r3, [r7, #12]
 80100b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80100b2:	2114      	movs	r1, #20
 80100b4:	187b      	adds	r3, r7, r1
 80100b6:	22e0      	movs	r2, #224	@ 0xe0
 80100b8:	0052      	lsls	r2, r2, #1
 80100ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80100bc:	187b      	adds	r3, r7, r1
 80100be:	2202      	movs	r2, #2
 80100c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100c2:	187b      	adds	r3, r7, r1
 80100c4:	2200      	movs	r2, #0
 80100c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80100c8:	187b      	adds	r3, r7, r1
 80100ca:	2200      	movs	r2, #0
 80100cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80100ce:	187b      	adds	r3, r7, r1
 80100d0:	2202      	movs	r2, #2
 80100d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80100d4:	187b      	adds	r3, r7, r1
 80100d6:	4a06      	ldr	r2, [pc, #24]	@ (80100f0 <HAL_TIM_MspPostInit+0xcc>)
 80100d8:	0019      	movs	r1, r3
 80100da:	0010      	movs	r0, r2
 80100dc:	f001 ff70 	bl	8011fc0 <HAL_GPIO_Init>
}
 80100e0:	46c0      	nop			@ (mov r8, r8)
 80100e2:	46bd      	mov	sp, r7
 80100e4:	b00b      	add	sp, #44	@ 0x2c
 80100e6:	bd90      	pop	{r4, r7, pc}
 80100e8:	40021000 	.word	0x40021000
 80100ec:	40000400 	.word	0x40000400
 80100f0:	50000800 	.word	0x50000800

080100f4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80100f8:	4b17      	ldr	r3, [pc, #92]	@ (8010158 <MX_LPUART1_UART_Init+0x64>)
 80100fa:	4a18      	ldr	r2, [pc, #96]	@ (801015c <MX_LPUART1_UART_Init+0x68>)
 80100fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80100fe:	4b16      	ldr	r3, [pc, #88]	@ (8010158 <MX_LPUART1_UART_Init+0x64>)
 8010100:	22e1      	movs	r2, #225	@ 0xe1
 8010102:	0252      	lsls	r2, r2, #9
 8010104:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010106:	4b14      	ldr	r3, [pc, #80]	@ (8010158 <MX_LPUART1_UART_Init+0x64>)
 8010108:	2200      	movs	r2, #0
 801010a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 801010c:	4b12      	ldr	r3, [pc, #72]	@ (8010158 <MX_LPUART1_UART_Init+0x64>)
 801010e:	2200      	movs	r2, #0
 8010110:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8010112:	4b11      	ldr	r3, [pc, #68]	@ (8010158 <MX_LPUART1_UART_Init+0x64>)
 8010114:	2200      	movs	r2, #0
 8010116:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8010118:	4b0f      	ldr	r3, [pc, #60]	@ (8010158 <MX_LPUART1_UART_Init+0x64>)
 801011a:	220c      	movs	r2, #12
 801011c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801011e:	4b0e      	ldr	r3, [pc, #56]	@ (8010158 <MX_LPUART1_UART_Init+0x64>)
 8010120:	2200      	movs	r2, #0
 8010122:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010124:	4b0c      	ldr	r3, [pc, #48]	@ (8010158 <MX_LPUART1_UART_Init+0x64>)
 8010126:	2200      	movs	r2, #0
 8010128:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 801012a:	4b0b      	ldr	r3, [pc, #44]	@ (8010158 <MX_LPUART1_UART_Init+0x64>)
 801012c:	2218      	movs	r2, #24
 801012e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8010130:	4b09      	ldr	r3, [pc, #36]	@ (8010158 <MX_LPUART1_UART_Init+0x64>)
 8010132:	2280      	movs	r2, #128	@ 0x80
 8010134:	0212      	lsls	r2, r2, #8
 8010136:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8010138:	4b07      	ldr	r3, [pc, #28]	@ (8010158 <MX_LPUART1_UART_Init+0x64>)
 801013a:	2280      	movs	r2, #128	@ 0x80
 801013c:	0152      	lsls	r2, r2, #5
 801013e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8010140:	4b05      	ldr	r3, [pc, #20]	@ (8010158 <MX_LPUART1_UART_Init+0x64>)
 8010142:	0018      	movs	r0, r3
 8010144:	f009 faa4 	bl	8019690 <HAL_UART_Init>
 8010148:	1e03      	subs	r3, r0, #0
 801014a:	d001      	beq.n	8010150 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 801014c:	f7f9 ff9a 	bl	800a084 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8010150:	46c0      	nop			@ (mov r8, r8)
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	46c0      	nop			@ (mov r8, r8)
 8010158:	20001e9c 	.word	0x20001e9c
 801015c:	40004800 	.word	0x40004800

08010160 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8010164:	4b14      	ldr	r3, [pc, #80]	@ (80101b8 <MX_USART1_UART_Init+0x58>)
 8010166:	4a15      	ldr	r2, [pc, #84]	@ (80101bc <MX_USART1_UART_Init+0x5c>)
 8010168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801016a:	4b13      	ldr	r3, [pc, #76]	@ (80101b8 <MX_USART1_UART_Init+0x58>)
 801016c:	22e1      	movs	r2, #225	@ 0xe1
 801016e:	0252      	lsls	r2, r2, #9
 8010170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010172:	4b11      	ldr	r3, [pc, #68]	@ (80101b8 <MX_USART1_UART_Init+0x58>)
 8010174:	2200      	movs	r2, #0
 8010176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8010178:	4b0f      	ldr	r3, [pc, #60]	@ (80101b8 <MX_USART1_UART_Init+0x58>)
 801017a:	2200      	movs	r2, #0
 801017c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801017e:	4b0e      	ldr	r3, [pc, #56]	@ (80101b8 <MX_USART1_UART_Init+0x58>)
 8010180:	2200      	movs	r2, #0
 8010182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8010184:	4b0c      	ldr	r3, [pc, #48]	@ (80101b8 <MX_USART1_UART_Init+0x58>)
 8010186:	220c      	movs	r2, #12
 8010188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801018a:	4b0b      	ldr	r3, [pc, #44]	@ (80101b8 <MX_USART1_UART_Init+0x58>)
 801018c:	2200      	movs	r2, #0
 801018e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010190:	4b09      	ldr	r3, [pc, #36]	@ (80101b8 <MX_USART1_UART_Init+0x58>)
 8010192:	2200      	movs	r2, #0
 8010194:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010196:	4b08      	ldr	r3, [pc, #32]	@ (80101b8 <MX_USART1_UART_Init+0x58>)
 8010198:	2200      	movs	r2, #0
 801019a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801019c:	4b06      	ldr	r3, [pc, #24]	@ (80101b8 <MX_USART1_UART_Init+0x58>)
 801019e:	2200      	movs	r2, #0
 80101a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80101a2:	4b05      	ldr	r3, [pc, #20]	@ (80101b8 <MX_USART1_UART_Init+0x58>)
 80101a4:	0018      	movs	r0, r3
 80101a6:	f009 fa73 	bl	8019690 <HAL_UART_Init>
 80101aa:	1e03      	subs	r3, r0, #0
 80101ac:	d001      	beq.n	80101b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80101ae:	f7f9 ff69 	bl	800a084 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80101b2:	46c0      	nop			@ (mov r8, r8)
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}
 80101b8:	20001f54 	.word	0x20001f54
 80101bc:	40013800 	.word	0x40013800

080101c0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80101c4:	4b14      	ldr	r3, [pc, #80]	@ (8010218 <MX_USART4_UART_Init+0x58>)
 80101c6:	4a15      	ldr	r2, [pc, #84]	@ (801021c <MX_USART4_UART_Init+0x5c>)
 80101c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80101ca:	4b13      	ldr	r3, [pc, #76]	@ (8010218 <MX_USART4_UART_Init+0x58>)
 80101cc:	22e1      	movs	r2, #225	@ 0xe1
 80101ce:	0252      	lsls	r2, r2, #9
 80101d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80101d2:	4b11      	ldr	r3, [pc, #68]	@ (8010218 <MX_USART4_UART_Init+0x58>)
 80101d4:	2200      	movs	r2, #0
 80101d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80101d8:	4b0f      	ldr	r3, [pc, #60]	@ (8010218 <MX_USART4_UART_Init+0x58>)
 80101da:	2200      	movs	r2, #0
 80101dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80101de:	4b0e      	ldr	r3, [pc, #56]	@ (8010218 <MX_USART4_UART_Init+0x58>)
 80101e0:	2200      	movs	r2, #0
 80101e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80101e4:	4b0c      	ldr	r3, [pc, #48]	@ (8010218 <MX_USART4_UART_Init+0x58>)
 80101e6:	220c      	movs	r2, #12
 80101e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80101ea:	4b0b      	ldr	r3, [pc, #44]	@ (8010218 <MX_USART4_UART_Init+0x58>)
 80101ec:	2200      	movs	r2, #0
 80101ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80101f0:	4b09      	ldr	r3, [pc, #36]	@ (8010218 <MX_USART4_UART_Init+0x58>)
 80101f2:	2200      	movs	r2, #0
 80101f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80101f6:	4b08      	ldr	r3, [pc, #32]	@ (8010218 <MX_USART4_UART_Init+0x58>)
 80101f8:	2200      	movs	r2, #0
 80101fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80101fc:	4b06      	ldr	r3, [pc, #24]	@ (8010218 <MX_USART4_UART_Init+0x58>)
 80101fe:	2200      	movs	r2, #0
 8010200:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8010202:	4b05      	ldr	r3, [pc, #20]	@ (8010218 <MX_USART4_UART_Init+0x58>)
 8010204:	0018      	movs	r0, r3
 8010206:	f009 fa43 	bl	8019690 <HAL_UART_Init>
 801020a:	1e03      	subs	r3, r0, #0
 801020c:	d001      	beq.n	8010212 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 801020e:	f7f9 ff39 	bl	800a084 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8010212:	46c0      	nop			@ (mov r8, r8)
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	2000200c 	.word	0x2000200c
 801021c:	40004c00 	.word	0x40004c00

08010220 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8010220:	b590      	push	{r4, r7, lr}
 8010222:	b08d      	sub	sp, #52	@ 0x34
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010228:	241c      	movs	r4, #28
 801022a:	193b      	adds	r3, r7, r4
 801022c:	0018      	movs	r0, r3
 801022e:	2314      	movs	r3, #20
 8010230:	001a      	movs	r2, r3
 8010232:	2100      	movs	r1, #0
 8010234:	f012 fae0 	bl	80227f8 <memset>
  if(uartHandle->Instance==LPUART1)
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	4a8b      	ldr	r2, [pc, #556]	@ (801046c <HAL_UART_MspInit+0x24c>)
 801023e:	4293      	cmp	r3, r2
 8010240:	d129      	bne.n	8010296 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8010242:	4b8b      	ldr	r3, [pc, #556]	@ (8010470 <HAL_UART_MspInit+0x250>)
 8010244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010246:	4b8a      	ldr	r3, [pc, #552]	@ (8010470 <HAL_UART_MspInit+0x250>)
 8010248:	2180      	movs	r1, #128	@ 0x80
 801024a:	02c9      	lsls	r1, r1, #11
 801024c:	430a      	orrs	r2, r1
 801024e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010250:	4b87      	ldr	r3, [pc, #540]	@ (8010470 <HAL_UART_MspInit+0x250>)
 8010252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010254:	4b86      	ldr	r3, [pc, #536]	@ (8010470 <HAL_UART_MspInit+0x250>)
 8010256:	2104      	movs	r1, #4
 8010258:	430a      	orrs	r2, r1
 801025a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801025c:	4b84      	ldr	r3, [pc, #528]	@ (8010470 <HAL_UART_MspInit+0x250>)
 801025e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010260:	2204      	movs	r2, #4
 8010262:	4013      	ands	r3, r2
 8010264:	61bb      	str	r3, [r7, #24]
 8010266:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8010268:	0021      	movs	r1, r4
 801026a:	187b      	adds	r3, r7, r1
 801026c:	2203      	movs	r2, #3
 801026e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010270:	187b      	adds	r3, r7, r1
 8010272:	2202      	movs	r2, #2
 8010274:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010276:	187b      	adds	r3, r7, r1
 8010278:	2200      	movs	r2, #0
 801027a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801027c:	187b      	adds	r3, r7, r1
 801027e:	2203      	movs	r2, #3
 8010280:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8010282:	187b      	adds	r3, r7, r1
 8010284:	2206      	movs	r2, #6
 8010286:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010288:	187b      	adds	r3, r7, r1
 801028a:	4a7a      	ldr	r2, [pc, #488]	@ (8010474 <HAL_UART_MspInit+0x254>)
 801028c:	0019      	movs	r1, r3
 801028e:	0010      	movs	r0, r2
 8010290:	f001 fe96 	bl	8011fc0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8010294:	e0e5      	b.n	8010462 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4a77      	ldr	r2, [pc, #476]	@ (8010478 <HAL_UART_MspInit+0x258>)
 801029c:	4293      	cmp	r3, r2
 801029e:	d133      	bne.n	8010308 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80102a0:	4b73      	ldr	r3, [pc, #460]	@ (8010470 <HAL_UART_MspInit+0x250>)
 80102a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80102a4:	4b72      	ldr	r3, [pc, #456]	@ (8010470 <HAL_UART_MspInit+0x250>)
 80102a6:	2180      	movs	r1, #128	@ 0x80
 80102a8:	01c9      	lsls	r1, r1, #7
 80102aa:	430a      	orrs	r2, r1
 80102ac:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80102ae:	4b70      	ldr	r3, [pc, #448]	@ (8010470 <HAL_UART_MspInit+0x250>)
 80102b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102b2:	4b6f      	ldr	r3, [pc, #444]	@ (8010470 <HAL_UART_MspInit+0x250>)
 80102b4:	2101      	movs	r1, #1
 80102b6:	430a      	orrs	r2, r1
 80102b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80102ba:	4b6d      	ldr	r3, [pc, #436]	@ (8010470 <HAL_UART_MspInit+0x250>)
 80102bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102be:	2201      	movs	r2, #1
 80102c0:	4013      	ands	r3, r2
 80102c2:	617b      	str	r3, [r7, #20]
 80102c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80102c6:	211c      	movs	r1, #28
 80102c8:	187b      	adds	r3, r7, r1
 80102ca:	22c0      	movs	r2, #192	@ 0xc0
 80102cc:	00d2      	lsls	r2, r2, #3
 80102ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80102d0:	187b      	adds	r3, r7, r1
 80102d2:	2202      	movs	r2, #2
 80102d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102d6:	187b      	adds	r3, r7, r1
 80102d8:	2200      	movs	r2, #0
 80102da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80102dc:	187b      	adds	r3, r7, r1
 80102de:	2203      	movs	r2, #3
 80102e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80102e2:	187b      	adds	r3, r7, r1
 80102e4:	2204      	movs	r2, #4
 80102e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80102e8:	187a      	adds	r2, r7, r1
 80102ea:	23a0      	movs	r3, #160	@ 0xa0
 80102ec:	05db      	lsls	r3, r3, #23
 80102ee:	0011      	movs	r1, r2
 80102f0:	0018      	movs	r0, r3
 80102f2:	f001 fe65 	bl	8011fc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80102f6:	2200      	movs	r2, #0
 80102f8:	2100      	movs	r1, #0
 80102fa:	201b      	movs	r0, #27
 80102fc:	f001 fa0e 	bl	801171c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8010300:	201b      	movs	r0, #27
 8010302:	f001 fa20 	bl	8011746 <HAL_NVIC_EnableIRQ>
}
 8010306:	e0ac      	b.n	8010462 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	4a5b      	ldr	r2, [pc, #364]	@ (801047c <HAL_UART_MspInit+0x25c>)
 801030e:	4293      	cmp	r3, r2
 8010310:	d000      	beq.n	8010314 <HAL_UART_MspInit+0xf4>
 8010312:	e0a6      	b.n	8010462 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8010314:	4b56      	ldr	r3, [pc, #344]	@ (8010470 <HAL_UART_MspInit+0x250>)
 8010316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010318:	4b55      	ldr	r3, [pc, #340]	@ (8010470 <HAL_UART_MspInit+0x250>)
 801031a:	2180      	movs	r1, #128	@ 0x80
 801031c:	0309      	lsls	r1, r1, #12
 801031e:	430a      	orrs	r2, r1
 8010320:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010322:	4b53      	ldr	r3, [pc, #332]	@ (8010470 <HAL_UART_MspInit+0x250>)
 8010324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010326:	4b52      	ldr	r3, [pc, #328]	@ (8010470 <HAL_UART_MspInit+0x250>)
 8010328:	2101      	movs	r1, #1
 801032a:	430a      	orrs	r2, r1
 801032c:	62da      	str	r2, [r3, #44]	@ 0x2c
 801032e:	4b50      	ldr	r3, [pc, #320]	@ (8010470 <HAL_UART_MspInit+0x250>)
 8010330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010332:	2201      	movs	r2, #1
 8010334:	4013      	ands	r3, r2
 8010336:	613b      	str	r3, [r7, #16]
 8010338:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801033a:	4b4d      	ldr	r3, [pc, #308]	@ (8010470 <HAL_UART_MspInit+0x250>)
 801033c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801033e:	4b4c      	ldr	r3, [pc, #304]	@ (8010470 <HAL_UART_MspInit+0x250>)
 8010340:	2104      	movs	r1, #4
 8010342:	430a      	orrs	r2, r1
 8010344:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010346:	4b4a      	ldr	r3, [pc, #296]	@ (8010470 <HAL_UART_MspInit+0x250>)
 8010348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801034a:	2204      	movs	r2, #4
 801034c:	4013      	ands	r3, r2
 801034e:	60fb      	str	r3, [r7, #12]
 8010350:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8010352:	241c      	movs	r4, #28
 8010354:	193b      	adds	r3, r7, r4
 8010356:	2202      	movs	r2, #2
 8010358:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801035a:	193b      	adds	r3, r7, r4
 801035c:	2202      	movs	r2, #2
 801035e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010360:	193b      	adds	r3, r7, r4
 8010362:	2200      	movs	r2, #0
 8010364:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010366:	193b      	adds	r3, r7, r4
 8010368:	2203      	movs	r2, #3
 801036a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 801036c:	193b      	adds	r3, r7, r4
 801036e:	2206      	movs	r2, #6
 8010370:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010372:	193a      	adds	r2, r7, r4
 8010374:	23a0      	movs	r3, #160	@ 0xa0
 8010376:	05db      	lsls	r3, r3, #23
 8010378:	0011      	movs	r1, r2
 801037a:	0018      	movs	r0, r3
 801037c:	f001 fe20 	bl	8011fc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8010380:	0021      	movs	r1, r4
 8010382:	187b      	adds	r3, r7, r1
 8010384:	2280      	movs	r2, #128	@ 0x80
 8010386:	00d2      	lsls	r2, r2, #3
 8010388:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801038a:	187b      	adds	r3, r7, r1
 801038c:	2202      	movs	r2, #2
 801038e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010390:	187b      	adds	r3, r7, r1
 8010392:	2200      	movs	r2, #0
 8010394:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010396:	187b      	adds	r3, r7, r1
 8010398:	2203      	movs	r2, #3
 801039a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 801039c:	187b      	adds	r3, r7, r1
 801039e:	2206      	movs	r2, #6
 80103a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80103a2:	187b      	adds	r3, r7, r1
 80103a4:	4a33      	ldr	r2, [pc, #204]	@ (8010474 <HAL_UART_MspInit+0x254>)
 80103a6:	0019      	movs	r1, r3
 80103a8:	0010      	movs	r0, r2
 80103aa:	f001 fe09 	bl	8011fc0 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80103ae:	4b34      	ldr	r3, [pc, #208]	@ (8010480 <HAL_UART_MspInit+0x260>)
 80103b0:	4a34      	ldr	r2, [pc, #208]	@ (8010484 <HAL_UART_MspInit+0x264>)
 80103b2:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80103b4:	4b32      	ldr	r3, [pc, #200]	@ (8010480 <HAL_UART_MspInit+0x260>)
 80103b6:	220c      	movs	r2, #12
 80103b8:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80103ba:	4b31      	ldr	r3, [pc, #196]	@ (8010480 <HAL_UART_MspInit+0x260>)
 80103bc:	2200      	movs	r2, #0
 80103be:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80103c0:	4b2f      	ldr	r3, [pc, #188]	@ (8010480 <HAL_UART_MspInit+0x260>)
 80103c2:	2200      	movs	r2, #0
 80103c4:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80103c6:	4b2e      	ldr	r3, [pc, #184]	@ (8010480 <HAL_UART_MspInit+0x260>)
 80103c8:	2280      	movs	r2, #128	@ 0x80
 80103ca:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80103cc:	4b2c      	ldr	r3, [pc, #176]	@ (8010480 <HAL_UART_MspInit+0x260>)
 80103ce:	2200      	movs	r2, #0
 80103d0:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80103d2:	4b2b      	ldr	r3, [pc, #172]	@ (8010480 <HAL_UART_MspInit+0x260>)
 80103d4:	2200      	movs	r2, #0
 80103d6:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 80103d8:	4b29      	ldr	r3, [pc, #164]	@ (8010480 <HAL_UART_MspInit+0x260>)
 80103da:	2220      	movs	r2, #32
 80103dc:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80103de:	4b28      	ldr	r3, [pc, #160]	@ (8010480 <HAL_UART_MspInit+0x260>)
 80103e0:	2200      	movs	r2, #0
 80103e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80103e4:	4b26      	ldr	r3, [pc, #152]	@ (8010480 <HAL_UART_MspInit+0x260>)
 80103e6:	0018      	movs	r0, r3
 80103e8:	f001 f9ce 	bl	8011788 <HAL_DMA_Init>
 80103ec:	1e03      	subs	r3, r0, #0
 80103ee:	d001      	beq.n	80103f4 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80103f0:	f7f9 fe48 	bl	800a084 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	4a22      	ldr	r2, [pc, #136]	@ (8010480 <HAL_UART_MspInit+0x260>)
 80103f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80103fa:	4b21      	ldr	r3, [pc, #132]	@ (8010480 <HAL_UART_MspInit+0x260>)
 80103fc:	687a      	ldr	r2, [r7, #4]
 80103fe:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8010400:	4b21      	ldr	r3, [pc, #132]	@ (8010488 <HAL_UART_MspInit+0x268>)
 8010402:	4a22      	ldr	r2, [pc, #136]	@ (801048c <HAL_UART_MspInit+0x26c>)
 8010404:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8010406:	4b20      	ldr	r3, [pc, #128]	@ (8010488 <HAL_UART_MspInit+0x268>)
 8010408:	220c      	movs	r2, #12
 801040a:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801040c:	4b1e      	ldr	r3, [pc, #120]	@ (8010488 <HAL_UART_MspInit+0x268>)
 801040e:	2210      	movs	r2, #16
 8010410:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010412:	4b1d      	ldr	r3, [pc, #116]	@ (8010488 <HAL_UART_MspInit+0x268>)
 8010414:	2200      	movs	r2, #0
 8010416:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8010418:	4b1b      	ldr	r3, [pc, #108]	@ (8010488 <HAL_UART_MspInit+0x268>)
 801041a:	2280      	movs	r2, #128	@ 0x80
 801041c:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801041e:	4b1a      	ldr	r3, [pc, #104]	@ (8010488 <HAL_UART_MspInit+0x268>)
 8010420:	2200      	movs	r2, #0
 8010422:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010424:	4b18      	ldr	r3, [pc, #96]	@ (8010488 <HAL_UART_MspInit+0x268>)
 8010426:	2200      	movs	r2, #0
 8010428:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 801042a:	4b17      	ldr	r3, [pc, #92]	@ (8010488 <HAL_UART_MspInit+0x268>)
 801042c:	2200      	movs	r2, #0
 801042e:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8010430:	4b15      	ldr	r3, [pc, #84]	@ (8010488 <HAL_UART_MspInit+0x268>)
 8010432:	2200      	movs	r2, #0
 8010434:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8010436:	4b14      	ldr	r3, [pc, #80]	@ (8010488 <HAL_UART_MspInit+0x268>)
 8010438:	0018      	movs	r0, r3
 801043a:	f001 f9a5 	bl	8011788 <HAL_DMA_Init>
 801043e:	1e03      	subs	r3, r0, #0
 8010440:	d001      	beq.n	8010446 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8010442:	f7f9 fe1f 	bl	800a084 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	4a0f      	ldr	r2, [pc, #60]	@ (8010488 <HAL_UART_MspInit+0x268>)
 801044a:	671a      	str	r2, [r3, #112]	@ 0x70
 801044c:	4b0e      	ldr	r3, [pc, #56]	@ (8010488 <HAL_UART_MspInit+0x268>)
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8010452:	2200      	movs	r2, #0
 8010454:	2100      	movs	r1, #0
 8010456:	200e      	movs	r0, #14
 8010458:	f001 f960 	bl	801171c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 801045c:	200e      	movs	r0, #14
 801045e:	f001 f972 	bl	8011746 <HAL_NVIC_EnableIRQ>
}
 8010462:	46c0      	nop			@ (mov r8, r8)
 8010464:	46bd      	mov	sp, r7
 8010466:	b00d      	add	sp, #52	@ 0x34
 8010468:	bd90      	pop	{r4, r7, pc}
 801046a:	46c0      	nop			@ (mov r8, r8)
 801046c:	40004800 	.word	0x40004800
 8010470:	40021000 	.word	0x40021000
 8010474:	50000800 	.word	0x50000800
 8010478:	40013800 	.word	0x40013800
 801047c:	40004c00 	.word	0x40004c00
 8010480:	200020c4 	.word	0x200020c4
 8010484:	4002006c 	.word	0x4002006c
 8010488:	2000210c 	.word	0x2000210c
 801048c:	40020080 	.word	0x40020080

08010490 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8010490:	b580      	push	{r7, lr}
 8010492:	b086      	sub	sp, #24
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8010498:	f000 fc9c 	bl	8010dd4 <HAL_GetTick>
 801049c:	0003      	movs	r3, r0
 801049e:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 80104a0:	4b1c      	ldr	r3, [pc, #112]	@ (8010514 <TimestampIsReached+0x84>)
 80104a2:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 80104a4:	697a      	ldr	r2, [r7, #20]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d307      	bcc.n	80104bc <TimestampIsReached+0x2c>
 80104ac:	697a      	ldr	r2, [r7, #20]
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	1ad3      	subs	r3, r2, r3
 80104b2:	693a      	ldr	r2, [r7, #16]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d901      	bls.n	80104bc <TimestampIsReached+0x2c>
 80104b8:	2201      	movs	r2, #1
 80104ba:	e000      	b.n	80104be <TimestampIsReached+0x2e>
 80104bc:	2200      	movs	r2, #0
 80104be:	230f      	movs	r3, #15
 80104c0:	18fb      	adds	r3, r7, r3
 80104c2:	701a      	strb	r2, [r3, #0]
 80104c4:	781a      	ldrb	r2, [r3, #0]
 80104c6:	2101      	movs	r1, #1
 80104c8:	400a      	ands	r2, r1
 80104ca:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 80104cc:	697a      	ldr	r2, [r7, #20]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	429a      	cmp	r2, r3
 80104d2:	d207      	bcs.n	80104e4 <TimestampIsReached+0x54>
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	1ad3      	subs	r3, r2, r3
 80104da:	693a      	ldr	r2, [r7, #16]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d201      	bcs.n	80104e4 <TimestampIsReached+0x54>
 80104e0:	2201      	movs	r2, #1
 80104e2:	e000      	b.n	80104e6 <TimestampIsReached+0x56>
 80104e4:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 80104e6:	200e      	movs	r0, #14
 80104e8:	183b      	adds	r3, r7, r0
 80104ea:	701a      	strb	r2, [r3, #0]
 80104ec:	781a      	ldrb	r2, [r3, #0]
 80104ee:	2101      	movs	r1, #1
 80104f0:	400a      	ands	r2, r1
 80104f2:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 80104f4:	230f      	movs	r3, #15
 80104f6:	18fb      	adds	r3, r7, r3
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d103      	bne.n	8010506 <TimestampIsReached+0x76>
 80104fe:	183b      	adds	r3, r7, r0
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d001      	beq.n	801050a <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8010506:	2301      	movs	r3, #1
 8010508:	e000      	b.n	801050c <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 801050a:	2300      	movs	r3, #0
}
 801050c:	0018      	movs	r0, r3
 801050e:	46bd      	mov	sp, r7
 8010510:	b006      	add	sp, #24
 8010512:	bd80      	pop	{r7, pc}
 8010514:	7fffffff 	.word	0x7fffffff

08010518 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8010520:	f000 fc58 	bl	8010dd4 <HAL_GetTick>
 8010524:	0002      	movs	r2, r0
 8010526:	4904      	ldr	r1, [pc, #16]	@ (8010538 <AddTimestamp+0x20>)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	0018      	movs	r0, r3
 801052c:	f011 fffe 	bl	802252c <siprintf>
}
 8010530:	46c0      	nop			@ (mov r8, r8)
 8010532:	46bd      	mov	sp, r7
 8010534:	b002      	add	sp, #8
 8010536:	bd80      	pop	{r7, pc}
 8010538:	08028388 	.word	0x08028388

0801053c <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 801053c:	b40c      	push	{r2, r3}
 801053e:	b5b0      	push	{r4, r5, r7, lr}
 8010540:	b0a4      	sub	sp, #144	@ 0x90
 8010542:	af00      	add	r7, sp, #0
 8010544:	0002      	movs	r2, r0
 8010546:	6039      	str	r1, [r7, #0]
 8010548:	1dfb      	adds	r3, r7, #7
 801054a:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 801054c:	4b23      	ldr	r3, [pc, #140]	@ (80105dc <CreateLine+0xa0>)
 801054e:	781b      	ldrb	r3, [r3, #0]
 8010550:	1dfa      	adds	r2, r7, #7
 8010552:	7812      	ldrb	r2, [r2, #0]
 8010554:	429a      	cmp	r2, r3
 8010556:	d839      	bhi.n	80105cc <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8010558:	683a      	ldr	r2, [r7, #0]
 801055a:	4921      	ldr	r1, [pc, #132]	@ (80105e0 <CreateLine+0xa4>)
 801055c:	240c      	movs	r4, #12
 801055e:	193b      	adds	r3, r7, r4
 8010560:	0018      	movs	r0, r3
 8010562:	f011 ffe3 	bl	802252c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8010566:	4b1d      	ldr	r3, [pc, #116]	@ (80105dc <CreateLine+0xa0>)
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	2b01      	cmp	r3, #1
 801056c:	d909      	bls.n	8010582 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 801056e:	193b      	adds	r3, r7, r4
 8010570:	0018      	movs	r0, r3
 8010572:	f7ef fdfb 	bl	800016c <strlen>
 8010576:	0002      	movs	r2, r0
 8010578:	193b      	adds	r3, r7, r4
 801057a:	189b      	adds	r3, r3, r2
 801057c:	0018      	movs	r0, r3
 801057e:	f7ff ffcb 	bl	8010518 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8010582:	240c      	movs	r4, #12
 8010584:	193b      	adds	r3, r7, r4
 8010586:	0018      	movs	r0, r3
 8010588:	f7ef fdf0 	bl	800016c <strlen>
 801058c:	0003      	movs	r3, r0
 801058e:	218c      	movs	r1, #140	@ 0x8c
 8010590:	187a      	adds	r2, r7, r1
 8010592:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8010594:	239c      	movs	r3, #156	@ 0x9c
 8010596:	2508      	movs	r5, #8
 8010598:	195b      	adds	r3, r3, r5
 801059a:	19db      	adds	r3, r3, r7
 801059c:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 801059e:	193a      	adds	r2, r7, r4
 80105a0:	187b      	adds	r3, r7, r1
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	18d0      	adds	r0, r2, r3
 80105a6:	187b      	adds	r3, r7, r1
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	2280      	movs	r2, #128	@ 0x80
 80105ac:	1ad3      	subs	r3, r2, r3
 80105ae:	0019      	movs	r1, r3
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	2298      	movs	r2, #152	@ 0x98
 80105b4:	1952      	adds	r2, r2, r5
 80105b6:	19d2      	adds	r2, r2, r7
 80105b8:	6812      	ldr	r2, [r2, #0]
 80105ba:	f012 f84f 	bl	802265c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 80105be:	193a      	adds	r2, r7, r4
 80105c0:	4b08      	ldr	r3, [pc, #32]	@ (80105e4 <CreateLine+0xa8>)
 80105c2:	0011      	movs	r1, r2
 80105c4:	0018      	movs	r0, r3
 80105c6:	f011 ff41 	bl	802244c <iprintf>
 80105ca:	e000      	b.n	80105ce <CreateLine+0x92>
    return;
 80105cc:	46c0      	nop			@ (mov r8, r8)
}
 80105ce:	46bd      	mov	sp, r7
 80105d0:	b024      	add	sp, #144	@ 0x90
 80105d2:	bcb0      	pop	{r4, r5, r7}
 80105d4:	bc08      	pop	{r3}
 80105d6:	b002      	add	sp, #8
 80105d8:	4718      	bx	r3
 80105da:	46c0      	nop			@ (mov r8, r8)
 80105dc:	200000e0 	.word	0x200000e0
 80105e0:	08028394 	.word	0x08028394
 80105e4:	08028398 	.word	0x08028398

080105e8 <_write>:

int _write(int fd, void *buf, size_t count) {
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b084      	sub	sp, #16
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	60f8      	str	r0, [r7, #12]
 80105f0:	60b9      	str	r1, [r7, #8]
 80105f2:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	b29a      	uxth	r2, r3
 80105f8:	68b9      	ldr	r1, [r7, #8]
 80105fa:	4804      	ldr	r0, [pc, #16]	@ (801060c <_write+0x24>)
 80105fc:	2364      	movs	r3, #100	@ 0x64
 80105fe:	f009 f8ad 	bl	801975c <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 8010602:	687b      	ldr	r3, [r7, #4]
}
 8010604:	0018      	movs	r0, r3
 8010606:	46bd      	mov	sp, r7
 8010608:	b004      	add	sp, #16
 801060a:	bd80      	pop	{r7, pc}
 801060c:	20001f54 	.word	0x20001f54

08010610 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	0002      	movs	r2, r0
 8010618:	1dfb      	adds	r3, r7, #7
 801061a:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 801061c:	4b03      	ldr	r3, [pc, #12]	@ (801062c <SetVerboseLevel+0x1c>)
 801061e:	1dfa      	adds	r2, r7, #7
 8010620:	7812      	ldrb	r2, [r2, #0]
 8010622:	701a      	strb	r2, [r3, #0]
}
 8010624:	46c0      	nop			@ (mov r8, r8)
 8010626:	46bd      	mov	sp, r7
 8010628:	b002      	add	sp, #8
 801062a:	bd80      	pop	{r7, pc}
 801062c:	200000e0 	.word	0x200000e0

08010630 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8010630:	b580      	push	{r7, lr}
 8010632:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8010634:	4b02      	ldr	r3, [pc, #8]	@ (8010640 <GetVerboseLevel+0x10>)
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	0018      	movs	r0, r3
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}
 801063e:	46c0      	nop			@ (mov r8, r8)
 8010640:	200000e0 	.word	0x200000e0

08010644 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 801064a:	4a0f      	ldr	r2, [pc, #60]	@ (8010688 <BinaryReleaseInfo+0x44>)
 801064c:	4b0f      	ldr	r3, [pc, #60]	@ (801068c <BinaryReleaseInfo+0x48>)
 801064e:	0019      	movs	r1, r3
 8010650:	2002      	movs	r0, #2
 8010652:	f7ff ff73 	bl	801053c <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8010656:	480e      	ldr	r0, [pc, #56]	@ (8010690 <BinaryReleaseInfo+0x4c>)
 8010658:	4a0e      	ldr	r2, [pc, #56]	@ (8010694 <BinaryReleaseInfo+0x50>)
 801065a:	490c      	ldr	r1, [pc, #48]	@ (801068c <BinaryReleaseInfo+0x48>)
 801065c:	4b0e      	ldr	r3, [pc, #56]	@ (8010698 <BinaryReleaseInfo+0x54>)
 801065e:	9300      	str	r3, [sp, #0]
 8010660:	0003      	movs	r3, r0
 8010662:	2002      	movs	r0, #2
 8010664:	f7ff ff6a 	bl	801053c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8010668:	4b0c      	ldr	r3, [pc, #48]	@ (801069c <BinaryReleaseInfo+0x58>)
 801066a:	4a0d      	ldr	r2, [pc, #52]	@ (80106a0 <BinaryReleaseInfo+0x5c>)
 801066c:	4907      	ldr	r1, [pc, #28]	@ (801068c <BinaryReleaseInfo+0x48>)
 801066e:	2002      	movs	r0, #2
 8010670:	f7ff ff64 	bl	801053c <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8010674:	4b0b      	ldr	r3, [pc, #44]	@ (80106a4 <BinaryReleaseInfo+0x60>)
 8010676:	4a0c      	ldr	r2, [pc, #48]	@ (80106a8 <BinaryReleaseInfo+0x64>)
 8010678:	4904      	ldr	r1, [pc, #16]	@ (801068c <BinaryReleaseInfo+0x48>)
 801067a:	2002      	movs	r0, #2
 801067c:	f7ff ff5e 	bl	801053c <CreateLine>
}
 8010680:	46c0      	nop			@ (mov r8, r8)
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	46c0      	nop			@ (mov r8, r8)
 8010688:	080283a0 	.word	0x080283a0
 801068c:	080283cc 	.word	0x080283cc
 8010690:	080283d0 	.word	0x080283d0
 8010694:	080283dc 	.word	0x080283dc
 8010698:	080283f0 	.word	0x080283f0
 801069c:	080283fc 	.word	0x080283fc
 80106a0:	08028408 	.word	0x08028408
 80106a4:	08028410 	.word	0x08028410
 80106a8:	08028418 	.word	0x08028418

080106ac <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b084      	sub	sp, #16
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	68ba      	ldr	r2, [r7, #8]
 80106bc:	68f9      	ldr	r1, [r7, #12]
 80106be:	4803      	ldr	r0, [pc, #12]	@ (80106cc <errorHandler+0x20>)
 80106c0:	f011 fec4 	bl	802244c <iprintf>
//    while (true)
//    {
//    }
}
 80106c4:	46c0      	nop			@ (mov r8, r8)
 80106c6:	46bd      	mov	sp, r7
 80106c8:	b004      	add	sp, #16
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	08028430 	.word	0x08028430

080106d0 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80106d0:	b590      	push	{r4, r7, lr}
 80106d2:	b083      	sub	sp, #12
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6039      	str	r1, [r7, #0]
 80106d8:	0011      	movs	r1, r2
 80106da:	1dfb      	adds	r3, r7, #7
 80106dc:	1c02      	adds	r2, r0, #0
 80106de:	701a      	strb	r2, [r3, #0]
 80106e0:	1dbb      	adds	r3, r7, #6
 80106e2:	1c0a      	adds	r2, r1, #0
 80106e4:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 80106e6:	4b0a      	ldr	r3, [pc, #40]	@ (8010710 <ReadRegister+0x40>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d00a      	beq.n	8010704 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 80106ee:	4b08      	ldr	r3, [pc, #32]	@ (8010710 <ReadRegister+0x40>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	1dba      	adds	r2, r7, #6
 80106f4:	7814      	ldrb	r4, [r2, #0]
 80106f6:	6839      	ldr	r1, [r7, #0]
 80106f8:	1dfa      	adds	r2, r7, #7
 80106fa:	7810      	ldrb	r0, [r2, #0]
 80106fc:	0022      	movs	r2, r4
 80106fe:	4798      	blx	r3
 8010700:	0003      	movs	r3, r0
 8010702:	e000      	b.n	8010706 <ReadRegister+0x36>
	}
	return false;
 8010704:	2300      	movs	r3, #0
}
 8010706:	0018      	movs	r0, r3
 8010708:	46bd      	mov	sp, r7
 801070a:	b003      	add	sp, #12
 801070c:	bd90      	pop	{r4, r7, pc}
 801070e:	46c0      	nop			@ (mov r8, r8)
 8010710:	2000215c 	.word	0x2000215c

08010714 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8010714:	b590      	push	{r4, r7, lr}
 8010716:	b083      	sub	sp, #12
 8010718:	af00      	add	r7, sp, #0
 801071a:	6039      	str	r1, [r7, #0]
 801071c:	0011      	movs	r1, r2
 801071e:	1dfb      	adds	r3, r7, #7
 8010720:	1c02      	adds	r2, r0, #0
 8010722:	701a      	strb	r2, [r3, #0]
 8010724:	1dbb      	adds	r3, r7, #6
 8010726:	1c0a      	adds	r2, r1, #0
 8010728:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 801072a:	4b0a      	ldr	r3, [pc, #40]	@ (8010754 <WriteRegister+0x40>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d00a      	beq.n	8010748 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8010732:	4b08      	ldr	r3, [pc, #32]	@ (8010754 <WriteRegister+0x40>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	1dba      	adds	r2, r7, #6
 8010738:	7814      	ldrb	r4, [r2, #0]
 801073a:	6839      	ldr	r1, [r7, #0]
 801073c:	1dfa      	adds	r2, r7, #7
 801073e:	7810      	ldrb	r0, [r2, #0]
 8010740:	0022      	movs	r2, r4
 8010742:	4798      	blx	r3
 8010744:	0003      	movs	r3, r0
 8010746:	e000      	b.n	801074a <WriteRegister+0x36>
  }
  return false;
 8010748:	2300      	movs	r3, #0
}
 801074a:	0018      	movs	r0, r3
 801074c:	46bd      	mov	sp, r7
 801074e:	b003      	add	sp, #12
 8010750:	bd90      	pop	{r4, r7, pc}
 8010752:	46c0      	nop			@ (mov r8, r8)
 8010754:	20002160 	.word	0x20002160

08010758 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	000a      	movs	r2, r1
 8010762:	1cfb      	adds	r3, r7, #3
 8010764:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8010766:	230f      	movs	r3, #15
 8010768:	18fb      	adds	r3, r7, r3
 801076a:	22ff      	movs	r2, #255	@ 0xff
 801076c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 801076e:	230e      	movs	r3, #14
 8010770:	18fb      	adds	r3, r7, r3
 8010772:	2200      	movs	r2, #0
 8010774:	701a      	strb	r2, [r3, #0]
 8010776:	e037      	b.n	80107e8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8010778:	230e      	movs	r3, #14
 801077a:	18fb      	adds	r3, r7, r3
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	687a      	ldr	r2, [r7, #4]
 8010780:	18d3      	adds	r3, r2, r3
 8010782:	7819      	ldrb	r1, [r3, #0]
 8010784:	220f      	movs	r2, #15
 8010786:	18bb      	adds	r3, r7, r2
 8010788:	18ba      	adds	r2, r7, r2
 801078a:	7812      	ldrb	r2, [r2, #0]
 801078c:	404a      	eors	r2, r1
 801078e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8010790:	230d      	movs	r3, #13
 8010792:	18fb      	adds	r3, r7, r3
 8010794:	2200      	movs	r2, #0
 8010796:	701a      	strb	r2, [r3, #0]
 8010798:	e01b      	b.n	80107d2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 801079a:	210f      	movs	r1, #15
 801079c:	187b      	adds	r3, r7, r1
 801079e:	781b      	ldrb	r3, [r3, #0]
 80107a0:	b25b      	sxtb	r3, r3
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	da09      	bge.n	80107ba <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80107a6:	187b      	adds	r3, r7, r1
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	005b      	lsls	r3, r3, #1
 80107ac:	b25b      	sxtb	r3, r3
 80107ae:	2231      	movs	r2, #49	@ 0x31
 80107b0:	4053      	eors	r3, r2
 80107b2:	b25a      	sxtb	r2, r3
 80107b4:	187b      	adds	r3, r7, r1
 80107b6:	701a      	strb	r2, [r3, #0]
 80107b8:	e005      	b.n	80107c6 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 80107ba:	230f      	movs	r3, #15
 80107bc:	18fa      	adds	r2, r7, r3
 80107be:	18fb      	adds	r3, r7, r3
 80107c0:	781b      	ldrb	r3, [r3, #0]
 80107c2:	18db      	adds	r3, r3, r3
 80107c4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80107c6:	210d      	movs	r1, #13
 80107c8:	187b      	adds	r3, r7, r1
 80107ca:	781a      	ldrb	r2, [r3, #0]
 80107cc:	187b      	adds	r3, r7, r1
 80107ce:	3201      	adds	r2, #1
 80107d0:	701a      	strb	r2, [r3, #0]
 80107d2:	230d      	movs	r3, #13
 80107d4:	18fb      	adds	r3, r7, r3
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	2b07      	cmp	r3, #7
 80107da:	d9de      	bls.n	801079a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80107dc:	210e      	movs	r1, #14
 80107de:	187b      	adds	r3, r7, r1
 80107e0:	781a      	ldrb	r2, [r3, #0]
 80107e2:	187b      	adds	r3, r7, r1
 80107e4:	3201      	adds	r2, #1
 80107e6:	701a      	strb	r2, [r3, #0]
 80107e8:	230e      	movs	r3, #14
 80107ea:	18fa      	adds	r2, r7, r3
 80107ec:	1cfb      	adds	r3, r7, #3
 80107ee:	7812      	ldrb	r2, [r2, #0]
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d3c0      	bcc.n	8010778 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 80107f6:	230f      	movs	r3, #15
 80107f8:	18fb      	adds	r3, r7, r3
 80107fa:	781b      	ldrb	r3, [r3, #0]
}
 80107fc:	0018      	movs	r0, r3
 80107fe:	46bd      	mov	sp, r7
 8010800:	b004      	add	sp, #16
 8010802:	bd80      	pop	{r7, pc}

08010804 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
 801080c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 801080e:	4b0a      	ldr	r3, [pc, #40]	@ (8010838 <HIDS_Init+0x34>)
 8010810:	687a      	ldr	r2, [r7, #4]
 8010812:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8010814:	4b09      	ldr	r3, [pc, #36]	@ (801083c <HIDS_Init+0x38>)
 8010816:	683a      	ldr	r2, [r7, #0]
 8010818:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 801081a:	4b09      	ldr	r3, [pc, #36]	@ (8010840 <HIDS_Init+0x3c>)
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	0018      	movs	r0, r3
 8010820:	f000 f840 	bl	80108a4 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8010824:	4b07      	ldr	r3, [pc, #28]	@ (8010844 <HIDS_Init+0x40>)
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	0018      	movs	r0, r3
 801082a:	f000 f82b 	bl	8010884 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 801082e:	46c0      	nop			@ (mov r8, r8)
 8010830:	46bd      	mov	sp, r7
 8010832:	b002      	add	sp, #8
 8010834:	bd80      	pop	{r7, pc}
 8010836:	46c0      	nop			@ (mov r8, r8)
 8010838:	2000215c 	.word	0x2000215c
 801083c:	20002160 	.word	0x20002160
 8010840:	200000e2 	.word	0x200000e2
 8010844:	200000e1 	.word	0x200000e1

08010848 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8010848:	b580      	push	{r7, lr}
 801084a:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 801084c:	f000 fac2 	bl	8010dd4 <HAL_GetTick>
 8010850:	0002      	movs	r2, r0
 8010852:	4b08      	ldr	r3, [pc, #32]	@ (8010874 <HIDS_StartMeasurement+0x2c>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	18d2      	adds	r2, r2, r3
 8010858:	4b07      	ldr	r3, [pc, #28]	@ (8010878 <HIDS_StartMeasurement+0x30>)
 801085a:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 801085c:	4b07      	ldr	r3, [pc, #28]	@ (801087c <HIDS_StartMeasurement+0x34>)
 801085e:	2201      	movs	r2, #1
 8010860:	0019      	movs	r1, r3
 8010862:	2044      	movs	r0, #68	@ 0x44
 8010864:	f7ff ff56 	bl	8010714 <WriteRegister>
  MeasurementDone = false;
 8010868:	4b05      	ldr	r3, [pc, #20]	@ (8010880 <HIDS_StartMeasurement+0x38>)
 801086a:	2200      	movs	r2, #0
 801086c:	701a      	strb	r2, [r3, #0]
}
 801086e:	46c0      	nop			@ (mov r8, r8)
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	200000e8 	.word	0x200000e8
 8010878:	200000e4 	.word	0x200000e4
 801087c:	200000e2 	.word	0x200000e2
 8010880:	20002172 	.word	0x20002172

08010884 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	0002      	movs	r2, r0
 801088c:	1dfb      	adds	r3, r7, #7
 801088e:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8010890:	4b03      	ldr	r3, [pc, #12]	@ (80108a0 <HIDS_SetHeaterMode+0x1c>)
 8010892:	1dfa      	adds	r2, r7, #7
 8010894:	7812      	ldrb	r2, [r2, #0]
 8010896:	701a      	strb	r2, [r3, #0]
}
 8010898:	46c0      	nop			@ (mov r8, r8)
 801089a:	46bd      	mov	sp, r7
 801089c:	b002      	add	sp, #8
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	200000e1 	.word	0x200000e1

080108a4 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	0002      	movs	r2, r0
 80108ac:	1dfb      	adds	r3, r7, #7
 80108ae:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 80108b0:	4b03      	ldr	r3, [pc, #12]	@ (80108c0 <HIDS_SetMeasurementMode+0x1c>)
 80108b2:	1dfa      	adds	r2, r7, #7
 80108b4:	7812      	ldrb	r2, [r2, #0]
 80108b6:	701a      	strb	r2, [r3, #0]
}
 80108b8:	46c0      	nop			@ (mov r8, r8)
 80108ba:	46bd      	mov	sp, r7
 80108bc:	b002      	add	sp, #8
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	200000e2 	.word	0x200000e2

080108c4 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 80108cc:	f000 fa82 	bl	8010dd4 <HAL_GetTick>
 80108d0:	0002      	movs	r2, r0
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	18d2      	adds	r2, r2, r3
 80108d6:	4b03      	ldr	r3, [pc, #12]	@ (80108e4 <setHIDSTimeStamp+0x20>)
 80108d8:	601a      	str	r2, [r3, #0]
}
 80108da:	46c0      	nop			@ (mov r8, r8)
 80108dc:	46bd      	mov	sp, r7
 80108de:	b002      	add	sp, #8
 80108e0:	bd80      	pop	{r7, pc}
 80108e2:	46c0      	nop			@ (mov r8, r8)
 80108e4:	20002174 	.word	0x20002174

080108e8 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 80108e8:	b590      	push	{r4, r7, lr}
 80108ea:	b085      	sub	sp, #20
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	781a      	ldrb	r2, [r3, #0]
 80108f4:	210c      	movs	r1, #12
 80108f6:	187b      	adds	r3, r7, r1
 80108f8:	701a      	strb	r2, [r3, #0]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	785a      	ldrb	r2, [r3, #1]
 80108fe:	187b      	adds	r3, r7, r1
 8010900:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8010902:	240f      	movs	r4, #15
 8010904:	193b      	adds	r3, r7, r4
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	7892      	ldrb	r2, [r2, #2]
 801090a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 801090c:	187b      	adds	r3, r7, r1
 801090e:	2102      	movs	r1, #2
 8010910:	0018      	movs	r0, r3
 8010912:	f7ff ff21 	bl	8010758 <CalculateCRC>
 8010916:	0003      	movs	r3, r0
 8010918:	001a      	movs	r2, r3
 801091a:	193b      	adds	r3, r7, r4
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	4293      	cmp	r3, r2
 8010920:	d007      	beq.n	8010932 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8010922:	4a1a      	ldr	r2, [pc, #104]	@ (801098c <CheckCRC+0xa4>)
 8010924:	4b1a      	ldr	r3, [pc, #104]	@ (8010990 <CheckCRC+0xa8>)
 8010926:	0019      	movs	r1, r3
 8010928:	2001      	movs	r0, #1
 801092a:	f7ff fe07 	bl	801053c <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 801092e:	2300      	movs	r3, #0
 8010930:	e027      	b.n	8010982 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	78da      	ldrb	r2, [r3, #3]
 8010936:	2108      	movs	r1, #8
 8010938:	187b      	adds	r3, r7, r1
 801093a:	701a      	strb	r2, [r3, #0]
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	791a      	ldrb	r2, [r3, #4]
 8010940:	187b      	adds	r3, r7, r1
 8010942:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8010944:	240e      	movs	r4, #14
 8010946:	193b      	adds	r3, r7, r4
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	7952      	ldrb	r2, [r2, #5]
 801094c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 801094e:	187b      	adds	r3, r7, r1
 8010950:	2102      	movs	r1, #2
 8010952:	0018      	movs	r0, r3
 8010954:	f7ff ff00 	bl	8010758 <CalculateCRC>
 8010958:	0003      	movs	r3, r0
 801095a:	001a      	movs	r2, r3
 801095c:	193b      	adds	r3, r7, r4
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	4293      	cmp	r3, r2
 8010962:	d00d      	beq.n	8010980 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8010964:	4a0b      	ldr	r2, [pc, #44]	@ (8010994 <CheckCRC+0xac>)
 8010966:	4b0a      	ldr	r3, [pc, #40]	@ (8010990 <CheckCRC+0xa8>)
 8010968:	0019      	movs	r1, r3
 801096a:	2001      	movs	r0, #1
 801096c:	f7ff fde6 	bl	801053c <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 8010970:	4a09      	ldr	r2, [pc, #36]	@ (8010998 <CheckCRC+0xb0>)
 8010972:	4b0a      	ldr	r3, [pc, #40]	@ (801099c <CheckCRC+0xb4>)
 8010974:	217d      	movs	r1, #125	@ 0x7d
 8010976:	0018      	movs	r0, r3
 8010978:	f7ff fe98 	bl	80106ac <errorHandler>
		return false;
 801097c:	2300      	movs	r3, #0
 801097e:	e000      	b.n	8010982 <CheckCRC+0x9a>
	}
	return true;
 8010980:	2301      	movs	r3, #1
}
 8010982:	0018      	movs	r0, r3
 8010984:	46bd      	mov	sp, r7
 8010986:	b005      	add	sp, #20
 8010988:	bd90      	pop	{r4, r7, pc}
 801098a:	46c0      	nop			@ (mov r8, r8)
 801098c:	0802847c 	.word	0x0802847c
 8010990:	080284a4 	.word	0x080284a4
 8010994:	080284a8 	.word	0x080284a8
 8010998:	080284d4 	.word	0x080284d4
 801099c:	08028aec 	.word	0x08028aec

080109a0 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b084      	sub	sp, #16
 80109a4:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 80109a6:	1dbb      	adds	r3, r7, #6
 80109a8:	2289      	movs	r2, #137	@ 0x89
 80109aa:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 80109ac:	1dbb      	adds	r3, r7, #6
 80109ae:	2201      	movs	r2, #1
 80109b0:	0019      	movs	r1, r3
 80109b2:	2044      	movs	r0, #68	@ 0x44
 80109b4:	f7ff feae 	bl	8010714 <WriteRegister>
	HAL_Delay(30);
 80109b8:	201e      	movs	r0, #30
 80109ba:	f000 fa15 	bl	8010de8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 80109be:	4b14      	ldr	r3, [pc, #80]	@ (8010a10 <HIDS_DeviceConnected+0x70>)
 80109c0:	2206      	movs	r2, #6
 80109c2:	0019      	movs	r1, r3
 80109c4:	2044      	movs	r0, #68	@ 0x44
 80109c6:	f7ff fe83 	bl	80106d0 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80109ca:	1dfb      	adds	r3, r7, #7
 80109cc:	2200      	movs	r2, #0
 80109ce:	701a      	strb	r2, [r3, #0]
 80109d0:	e011      	b.n	80109f6 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 80109d2:	1dfb      	adds	r3, r7, #7
 80109d4:	7818      	ldrb	r0, [r3, #0]
 80109d6:	1dfb      	adds	r3, r7, #7
 80109d8:	781b      	ldrb	r3, [r3, #0]
 80109da:	4a0d      	ldr	r2, [pc, #52]	@ (8010a10 <HIDS_DeviceConnected+0x70>)
 80109dc:	5cd3      	ldrb	r3, [r2, r3]
 80109de:	4a0d      	ldr	r2, [pc, #52]	@ (8010a14 <HIDS_DeviceConnected+0x74>)
 80109e0:	490d      	ldr	r1, [pc, #52]	@ (8010a18 <HIDS_DeviceConnected+0x78>)
 80109e2:	9300      	str	r3, [sp, #0]
 80109e4:	0003      	movs	r3, r0
 80109e6:	2002      	movs	r0, #2
 80109e8:	f7ff fda8 	bl	801053c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80109ec:	1dfb      	adds	r3, r7, #7
 80109ee:	781a      	ldrb	r2, [r3, #0]
 80109f0:	1dfb      	adds	r3, r7, #7
 80109f2:	3201      	adds	r2, #1
 80109f4:	701a      	strb	r2, [r3, #0]
 80109f6:	1dfb      	adds	r3, r7, #7
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	2b05      	cmp	r3, #5
 80109fc:	d9e9      	bls.n	80109d2 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 80109fe:	4b04      	ldr	r3, [pc, #16]	@ (8010a10 <HIDS_DeviceConnected+0x70>)
 8010a00:	0018      	movs	r0, r3
 8010a02:	f7ff ff71 	bl	80108e8 <CheckCRC>
 8010a06:	0003      	movs	r3, r0
}
 8010a08:	0018      	movs	r0, r3
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	b002      	add	sp, #8
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	20002164 	.word	0x20002164
 8010a14:	080284ec 	.word	0x080284ec
 8010a18:	08028478 	.word	0x08028478

08010a1c <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8010a20:	4b04      	ldr	r3, [pc, #16]	@ (8010a34 <HIDS_MeasurementReady+0x18>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	0018      	movs	r0, r3
 8010a26:	f7ff fd33 	bl	8010490 <TimestampIsReached>
 8010a2a:	0003      	movs	r3, r0
}
 8010a2c:	0018      	movs	r0, r3
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}
 8010a32:	46c0      	nop			@ (mov r8, r8)
 8010a34:	200000e4 	.word	0x200000e4

08010a38 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b084      	sub	sp, #16
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 8010a42:	4b41      	ldr	r3, [pc, #260]	@ (8010b48 <HIDS_GetMeasurementValues+0x110>)
 8010a44:	781b      	ldrb	r3, [r3, #0]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d001      	beq.n	8010a4e <HIDS_GetMeasurementValues+0x16>
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	e077      	b.n	8010b3e <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 8010a4e:	f7ff ffe5 	bl	8010a1c <HIDS_MeasurementReady>
 8010a52:	0003      	movs	r3, r0
 8010a54:	001a      	movs	r2, r3
 8010a56:	2301      	movs	r3, #1
 8010a58:	4053      	eors	r3, r2
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d001      	beq.n	8010a64 <HIDS_GetMeasurementValues+0x2c>
 8010a60:	2300      	movs	r3, #0
 8010a62:	e06c      	b.n	8010b3e <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8010a64:	4b39      	ldr	r3, [pc, #228]	@ (8010b4c <HIDS_GetMeasurementValues+0x114>)
 8010a66:	2206      	movs	r2, #6
 8010a68:	0019      	movs	r1, r3
 8010a6a:	2044      	movs	r0, #68	@ 0x44
 8010a6c:	f7ff fe30 	bl	80106d0 <ReadRegister>
 8010a70:	0003      	movs	r3, r0
 8010a72:	001a      	movs	r2, r3
 8010a74:	2301      	movs	r3, #1
 8010a76:	4053      	eors	r3, r2
 8010a78:	b2db      	uxtb	r3, r3
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d005      	beq.n	8010a8a <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 8010a7e:	4a34      	ldr	r2, [pc, #208]	@ (8010b50 <HIDS_GetMeasurementValues+0x118>)
 8010a80:	4b34      	ldr	r3, [pc, #208]	@ (8010b54 <HIDS_GetMeasurementValues+0x11c>)
 8010a82:	0019      	movs	r1, r3
 8010a84:	2001      	movs	r0, #1
 8010a86:	f7ff fd59 	bl	801053c <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 8010a8a:	4b30      	ldr	r3, [pc, #192]	@ (8010b4c <HIDS_GetMeasurementValues+0x114>)
 8010a8c:	0018      	movs	r0, r3
 8010a8e:	f7ff ff2b 	bl	80108e8 <CheckCRC>
 8010a92:	0003      	movs	r3, r0
 8010a94:	001a      	movs	r2, r3
 8010a96:	2301      	movs	r3, #1
 8010a98:	4053      	eors	r3, r2
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d001      	beq.n	8010aa4 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	e04c      	b.n	8010b3e <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8010aa4:	4b29      	ldr	r3, [pc, #164]	@ (8010b4c <HIDS_GetMeasurementValues+0x114>)
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	021b      	lsls	r3, r3, #8
 8010aaa:	4a28      	ldr	r2, [pc, #160]	@ (8010b4c <HIDS_GetMeasurementValues+0x114>)
 8010aac:	7852      	ldrb	r2, [r2, #1]
 8010aae:	4313      	orrs	r3, r2
 8010ab0:	22af      	movs	r2, #175	@ 0xaf
 8010ab2:	4353      	muls	r3, r2
 8010ab4:	0018      	movs	r0, r3
 8010ab6:	f7f2 fc83 	bl	80033c0 <__aeabi_i2d>
 8010aba:	2200      	movs	r2, #0
 8010abc:	4b26      	ldr	r3, [pc, #152]	@ (8010b58 <HIDS_GetMeasurementValues+0x120>)
 8010abe:	f7f1 f979 	bl	8001db4 <__aeabi_ddiv>
 8010ac2:	0002      	movs	r2, r0
 8010ac4:	000b      	movs	r3, r1
 8010ac6:	0010      	movs	r0, r2
 8010ac8:	0019      	movs	r1, r3
 8010aca:	f7f2 fd13 	bl	80034f4 <__aeabi_d2f>
 8010ace:	1c03      	adds	r3, r0, #0
 8010ad0:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8010ad2:	4922      	ldr	r1, [pc, #136]	@ (8010b5c <HIDS_GetMeasurementValues+0x124>)
 8010ad4:	68f8      	ldr	r0, [r7, #12]
 8010ad6:	f7f0 fba1 	bl	800121c <__aeabi_fsub>
 8010ada:	1c03      	adds	r3, r0, #0
 8010adc:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8010ade:	4b1b      	ldr	r3, [pc, #108]	@ (8010b4c <HIDS_GetMeasurementValues+0x114>)
 8010ae0:	78db      	ldrb	r3, [r3, #3]
 8010ae2:	021b      	lsls	r3, r3, #8
 8010ae4:	4a19      	ldr	r2, [pc, #100]	@ (8010b4c <HIDS_GetMeasurementValues+0x114>)
 8010ae6:	7912      	ldrb	r2, [r2, #4]
 8010ae8:	431a      	orrs	r2, r3
 8010aea:	0013      	movs	r3, r2
 8010aec:	015b      	lsls	r3, r3, #5
 8010aee:	1a9b      	subs	r3, r3, r2
 8010af0:	009b      	lsls	r3, r3, #2
 8010af2:	189b      	adds	r3, r3, r2
 8010af4:	0018      	movs	r0, r3
 8010af6:	f7f2 fc63 	bl	80033c0 <__aeabi_i2d>
 8010afa:	2200      	movs	r2, #0
 8010afc:	4b16      	ldr	r3, [pc, #88]	@ (8010b58 <HIDS_GetMeasurementValues+0x120>)
 8010afe:	f7f1 f959 	bl	8001db4 <__aeabi_ddiv>
 8010b02:	0002      	movs	r2, r0
 8010b04:	000b      	movs	r3, r1
 8010b06:	0010      	movs	r0, r2
 8010b08:	0019      	movs	r1, r3
 8010b0a:	f7f2 fcf3 	bl	80034f4 <__aeabi_d2f>
 8010b0e:	1c03      	adds	r3, r0, #0
 8010b10:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 8010b12:	4913      	ldr	r1, [pc, #76]	@ (8010b60 <HIDS_GetMeasurementValues+0x128>)
 8010b14:	68b8      	ldr	r0, [r7, #8]
 8010b16:	f7f0 fb81 	bl	800121c <__aeabi_fsub>
 8010b1a:	1c03      	adds	r3, r0, #0
 8010b1c:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	68fa      	ldr	r2, [r7, #12]
 8010b22:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	68ba      	ldr	r2, [r7, #8]
 8010b28:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8010b2a:	687a      	ldr	r2, [r7, #4]
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	0011      	movs	r1, r2
 8010b30:	0018      	movs	r0, r3
 8010b32:	f7fd f90b 	bl	800dd4c <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8010b36:	4b04      	ldr	r3, [pc, #16]	@ (8010b48 <HIDS_GetMeasurementValues+0x110>)
 8010b38:	2201      	movs	r2, #1
 8010b3a:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8010b3c:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 8010b3e:	0018      	movs	r0, r3
 8010b40:	46bd      	mov	sp, r7
 8010b42:	b004      	add	sp, #16
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	46c0      	nop			@ (mov r8, r8)
 8010b48:	20002172 	.word	0x20002172
 8010b4c:	2000216c 	.word	0x2000216c
 8010b50:	0802850c 	.word	0x0802850c
 8010b54:	080284a4 	.word	0x080284a4
 8010b58:	40efffe0 	.word	0x40efffe0
 8010b5c:	42340000 	.word	0x42340000
 8010b60:	40c00000 	.word	0x40c00000

08010b64 <ResetHIDSresults>:

void ResetHIDSresults() {
 8010b64:	b580      	push	{r7, lr}
 8010b66:	af00      	add	r7, sp, #0
  humid = 0.0;
 8010b68:	4b04      	ldr	r3, [pc, #16]	@ (8010b7c <ResetHIDSresults+0x18>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 8010b6e:	4b04      	ldr	r3, [pc, #16]	@ (8010b80 <ResetHIDSresults+0x1c>)
 8010b70:	2200      	movs	r2, #0
 8010b72:	601a      	str	r2, [r3, #0]
}
 8010b74:	46c0      	nop			@ (mov r8, r8)
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}
 8010b7a:	46c0      	nop			@ (mov r8, r8)
 8010b7c:	20002154 	.word	0x20002154
 8010b80:	20002158 	.word	0x20002158

08010b84 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8010b84:	b5b0      	push	{r4, r5, r7, lr}
 8010b86:	b084      	sub	sp, #16
 8010b88:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8010b8a:	4b40      	ldr	r3, [pc, #256]	@ (8010c8c <HIDS_Upkeep+0x108>)
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	2b06      	cmp	r3, #6
 8010b90:	d900      	bls.n	8010b94 <HIDS_Upkeep+0x10>
 8010b92:	e06e      	b.n	8010c72 <HIDS_Upkeep+0xee>
 8010b94:	009a      	lsls	r2, r3, #2
 8010b96:	4b3e      	ldr	r3, [pc, #248]	@ (8010c90 <HIDS_Upkeep+0x10c>)
 8010b98:	18d3      	adds	r3, r2, r3
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 8010b9e:	4a3d      	ldr	r2, [pc, #244]	@ (8010c94 <HIDS_Upkeep+0x110>)
 8010ba0:	4b3d      	ldr	r3, [pc, #244]	@ (8010c98 <HIDS_Upkeep+0x114>)
 8010ba2:	0019      	movs	r1, r3
 8010ba4:	2003      	movs	r0, #3
 8010ba6:	f7ff fcc9 	bl	801053c <CreateLine>
      break;
 8010baa:	e069      	b.n	8010c80 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8010bac:	f7ff ffda 	bl	8010b64 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8010bb0:	4b36      	ldr	r3, [pc, #216]	@ (8010c8c <HIDS_Upkeep+0x108>)
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	701a      	strb	r2, [r3, #0]
      break;
 8010bb6:	e063      	b.n	8010c80 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 8010bb8:	f7fe fb0a 	bl	800f1d0 <SetMeasurementIndicator>
      setSensorLock(HIDS);
 8010bbc:	2001      	movs	r0, #1
 8010bbe:	f7f9 fe25 	bl	800a80c <setSensorLock>
      HIDS_StartMeasurement();
 8010bc2:	f7ff fe41 	bl	8010848 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8010bc6:	4b31      	ldr	r3, [pc, #196]	@ (8010c8c <HIDS_Upkeep+0x108>)
 8010bc8:	2202      	movs	r2, #2
 8010bca:	701a      	strb	r2, [r3, #0]
      break;
 8010bcc:	e058      	b.n	8010c80 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8010bce:	4a33      	ldr	r2, [pc, #204]	@ (8010c9c <HIDS_Upkeep+0x118>)
 8010bd0:	4b33      	ldr	r3, [pc, #204]	@ (8010ca0 <HIDS_Upkeep+0x11c>)
 8010bd2:	0011      	movs	r1, r2
 8010bd4:	0018      	movs	r0, r3
 8010bd6:	f7ff ff2f 	bl	8010a38 <HIDS_GetMeasurementValues>
 8010bda:	1e03      	subs	r3, r0, #0
 8010bdc:	d04d      	beq.n	8010c7a <HIDS_Upkeep+0xf6>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8010bde:	4b2b      	ldr	r3, [pc, #172]	@ (8010c8c <HIDS_Upkeep+0x108>)
 8010be0:	2203      	movs	r2, #3
 8010be2:	701a      	strb	r2, [r3, #0]
        setSensorLock(FREE);
 8010be4:	2000      	movs	r0, #0
 8010be6:	f7f9 fe11 	bl	800a80c <setSensorLock>
      }
      break;
 8010bea:	e046      	b.n	8010c7a <HIDS_Upkeep+0xf6>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8010bec:	4b2c      	ldr	r3, [pc, #176]	@ (8010ca0 <HIDS_Upkeep+0x11c>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	1c18      	adds	r0, r3, #0
 8010bf2:	f7f2 fc37 	bl	8003464 <__aeabi_f2d>
 8010bf6:	0004      	movs	r4, r0
 8010bf8:	000d      	movs	r5, r1
 8010bfa:	4b28      	ldr	r3, [pc, #160]	@ (8010c9c <HIDS_Upkeep+0x118>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	1c18      	adds	r0, r3, #0
 8010c00:	f7f2 fc30 	bl	8003464 <__aeabi_f2d>
 8010c04:	0002      	movs	r2, r0
 8010c06:	000b      	movs	r3, r1
 8010c08:	4826      	ldr	r0, [pc, #152]	@ (8010ca4 <HIDS_Upkeep+0x120>)
 8010c0a:	4923      	ldr	r1, [pc, #140]	@ (8010c98 <HIDS_Upkeep+0x114>)
 8010c0c:	9202      	str	r2, [sp, #8]
 8010c0e:	9303      	str	r3, [sp, #12]
 8010c10:	9400      	str	r4, [sp, #0]
 8010c12:	9501      	str	r5, [sp, #4]
 8010c14:	0002      	movs	r2, r0
 8010c16:	2003      	movs	r0, #3
 8010c18:	f7ff fc90 	bl	801053c <CreateLine>
      setHIDS(temp, humid);
 8010c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8010c9c <HIDS_Upkeep+0x118>)
 8010c1e:	681a      	ldr	r2, [r3, #0]
 8010c20:	4b1f      	ldr	r3, [pc, #124]	@ (8010ca0 <HIDS_Upkeep+0x11c>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	1c19      	adds	r1, r3, #0
 8010c26:	1c10      	adds	r0, r2, #0
 8010c28:	f7f2 fdbe 	bl	80037a8 <setHIDS>
      ResetMeasurementIndicator();
 8010c2c:	f7fe fae8 	bl	800f200 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8010c30:	f000 f8d0 	bl	8010dd4 <HAL_GetTick>
 8010c34:	0004      	movs	r4, r0
 8010c36:	f7f6 f8f5 	bl	8006e24 <Check_USB_PowerOn>
 8010c3a:	1e03      	subs	r3, r0, #0
 8010c3c:	d103      	bne.n	8010c46 <HIDS_Upkeep+0xc2>
 8010c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8010ca8 <HIDS_Upkeep+0x124>)
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d001      	beq.n	8010c4a <HIDS_Upkeep+0xc6>
 8010c46:	4b19      	ldr	r3, [pc, #100]	@ (8010cac <HIDS_Upkeep+0x128>)
 8010c48:	e001      	b.n	8010c4e <HIDS_Upkeep+0xca>
 8010c4a:	23fa      	movs	r3, #250	@ 0xfa
 8010c4c:	009b      	lsls	r3, r3, #2
 8010c4e:	191a      	adds	r2, r3, r4
 8010c50:	4b17      	ldr	r3, [pc, #92]	@ (8010cb0 <HIDS_Upkeep+0x12c>)
 8010c52:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 8010c54:	4b0d      	ldr	r3, [pc, #52]	@ (8010c8c <HIDS_Upkeep+0x108>)
 8010c56:	2206      	movs	r2, #6
 8010c58:	701a      	strb	r2, [r3, #0]
      break;
 8010c5a:	e011      	b.n	8010c80 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8010c5c:	4b14      	ldr	r3, [pc, #80]	@ (8010cb0 <HIDS_Upkeep+0x12c>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	0018      	movs	r0, r3
 8010c62:	f7ff fc15 	bl	8010490 <TimestampIsReached>
 8010c66:	1e03      	subs	r3, r0, #0
 8010c68:	d009      	beq.n	8010c7e <HIDS_Upkeep+0xfa>
        HIDSState = HIDS_STATE_INIT;
 8010c6a:	4b08      	ldr	r3, [pc, #32]	@ (8010c8c <HIDS_Upkeep+0x108>)
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010c70:	e005      	b.n	8010c7e <HIDS_Upkeep+0xfa>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8010c72:	4b06      	ldr	r3, [pc, #24]	@ (8010c8c <HIDS_Upkeep+0x108>)
 8010c74:	2200      	movs	r2, #0
 8010c76:	701a      	strb	r2, [r3, #0]
      break;
 8010c78:	e002      	b.n	8010c80 <HIDS_Upkeep+0xfc>
      break;
 8010c7a:	46c0      	nop			@ (mov r8, r8)
 8010c7c:	e000      	b.n	8010c80 <HIDS_Upkeep+0xfc>
      break;
 8010c7e:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8010c80:	4b02      	ldr	r3, [pc, #8]	@ (8010c8c <HIDS_Upkeep+0x108>)
 8010c82:	781b      	ldrb	r3, [r3, #0]
}
 8010c84:	0018      	movs	r0, r3
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bdb0      	pop	{r4, r5, r7, pc}
 8010c8a:	46c0      	nop			@ (mov r8, r8)
 8010c8c:	20002178 	.word	0x20002178
 8010c90:	08028ad0 	.word	0x08028ad0
 8010c94:	08028540 	.word	0x08028540
 8010c98:	08028574 	.word	0x08028574
 8010c9c:	20002158 	.word	0x20002158
 8010ca0:	20002154 	.word	0x20002154
 8010ca4:	08028578 	.word	0x08028578
 8010ca8:	20001dbe 	.word	0x20001dbe
 8010cac:	00002710 	.word	0x00002710
 8010cb0:	20002174 	.word	0x20002174

08010cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8010cb4:	480d      	ldr	r0, [pc, #52]	@ (8010cec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8010cb6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8010cb8:	f7ff f844 	bl	800fd44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010cbc:	480c      	ldr	r0, [pc, #48]	@ (8010cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8010cbe:	490d      	ldr	r1, [pc, #52]	@ (8010cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8010cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8010cf8 <LoopForever+0xe>)
  movs r3, #0
 8010cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010cc4:	e002      	b.n	8010ccc <LoopCopyDataInit>

08010cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010cca:	3304      	adds	r3, #4

08010ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010cd0:	d3f9      	bcc.n	8010cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8010cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8010cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8010d00 <LoopForever+0x16>)
  movs r3, #0
 8010cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010cd8:	e001      	b.n	8010cde <LoopFillZerobss>

08010cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010cdc:	3204      	adds	r2, #4

08010cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010ce0:	d3fb      	bcc.n	8010cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8010ce2:	f011 fe33 	bl	802294c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010ce6:	f7f8 fe7f 	bl	80099e8 <main>

08010cea <LoopForever>:

LoopForever:
    b LoopForever
 8010cea:	e7fe      	b.n	8010cea <LoopForever>
   ldr   r0, =_estack
 8010cec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8010cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010cf4:	20000434 	.word	0x20000434
  ldr r2, =_sidata
 8010cf8:	08029470 	.word	0x08029470
  ldr r2, =_sbss
 8010cfc:	20000434 	.word	0x20000434
  ldr r4, =_ebss
 8010d00:	20003580 	.word	0x20003580

08010d04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010d04:	e7fe      	b.n	8010d04 <ADC1_COMP_IRQHandler>
	...

08010d08 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8010d0e:	1dfb      	adds	r3, r7, #7
 8010d10:	2200      	movs	r2, #0
 8010d12:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8010d14:	4b0b      	ldr	r3, [pc, #44]	@ (8010d44 <HAL_Init+0x3c>)
 8010d16:	681a      	ldr	r2, [r3, #0]
 8010d18:	4b0a      	ldr	r3, [pc, #40]	@ (8010d44 <HAL_Init+0x3c>)
 8010d1a:	2140      	movs	r1, #64	@ 0x40
 8010d1c:	430a      	orrs	r2, r1
 8010d1e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010d20:	2003      	movs	r0, #3
 8010d22:	f000 f811 	bl	8010d48 <HAL_InitTick>
 8010d26:	1e03      	subs	r3, r0, #0
 8010d28:	d003      	beq.n	8010d32 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8010d2a:	1dfb      	adds	r3, r7, #7
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	701a      	strb	r2, [r3, #0]
 8010d30:	e001      	b.n	8010d36 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8010d32:	f7fe febb 	bl	800faac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8010d36:	1dfb      	adds	r3, r7, #7
 8010d38:	781b      	ldrb	r3, [r3, #0]
}
 8010d3a:	0018      	movs	r0, r3
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	b002      	add	sp, #8
 8010d40:	bd80      	pop	{r7, pc}
 8010d42:	46c0      	nop			@ (mov r8, r8)
 8010d44:	40022000 	.word	0x40022000

08010d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010d48:	b590      	push	{r4, r7, lr}
 8010d4a:	b083      	sub	sp, #12
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010d50:	4b14      	ldr	r3, [pc, #80]	@ (8010da4 <HAL_InitTick+0x5c>)
 8010d52:	681c      	ldr	r4, [r3, #0]
 8010d54:	4b14      	ldr	r3, [pc, #80]	@ (8010da8 <HAL_InitTick+0x60>)
 8010d56:	781b      	ldrb	r3, [r3, #0]
 8010d58:	0019      	movs	r1, r3
 8010d5a:	23fa      	movs	r3, #250	@ 0xfa
 8010d5c:	0098      	lsls	r0, r3, #2
 8010d5e:	f7ef fa21 	bl	80001a4 <__udivsi3>
 8010d62:	0003      	movs	r3, r0
 8010d64:	0019      	movs	r1, r3
 8010d66:	0020      	movs	r0, r4
 8010d68:	f7ef fa1c 	bl	80001a4 <__udivsi3>
 8010d6c:	0003      	movs	r3, r0
 8010d6e:	0018      	movs	r0, r3
 8010d70:	f000 fcfd 	bl	801176e <HAL_SYSTICK_Config>
 8010d74:	1e03      	subs	r3, r0, #0
 8010d76:	d001      	beq.n	8010d7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8010d78:	2301      	movs	r3, #1
 8010d7a:	e00f      	b.n	8010d9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2b03      	cmp	r3, #3
 8010d80:	d80b      	bhi.n	8010d9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010d82:	6879      	ldr	r1, [r7, #4]
 8010d84:	2301      	movs	r3, #1
 8010d86:	425b      	negs	r3, r3
 8010d88:	2200      	movs	r2, #0
 8010d8a:	0018      	movs	r0, r3
 8010d8c:	f000 fcc6 	bl	801171c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010d90:	4b06      	ldr	r3, [pc, #24]	@ (8010dac <HAL_InitTick+0x64>)
 8010d92:	687a      	ldr	r2, [r7, #4]
 8010d94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010d96:	2300      	movs	r3, #0
 8010d98:	e000      	b.n	8010d9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8010d9a:	2301      	movs	r3, #1
}
 8010d9c:	0018      	movs	r0, r3
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	b003      	add	sp, #12
 8010da2:	bd90      	pop	{r4, r7, pc}
 8010da4:	200000dc 	.word	0x200000dc
 8010da8:	200000f0 	.word	0x200000f0
 8010dac:	200000ec 	.word	0x200000ec

08010db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010db4:	4b05      	ldr	r3, [pc, #20]	@ (8010dcc <HAL_IncTick+0x1c>)
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	001a      	movs	r2, r3
 8010dba:	4b05      	ldr	r3, [pc, #20]	@ (8010dd0 <HAL_IncTick+0x20>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	18d2      	adds	r2, r2, r3
 8010dc0:	4b03      	ldr	r3, [pc, #12]	@ (8010dd0 <HAL_IncTick+0x20>)
 8010dc2:	601a      	str	r2, [r3, #0]
}
 8010dc4:	46c0      	nop			@ (mov r8, r8)
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	46c0      	nop			@ (mov r8, r8)
 8010dcc:	200000f0 	.word	0x200000f0
 8010dd0:	2000217c 	.word	0x2000217c

08010dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8010dd8:	4b02      	ldr	r3, [pc, #8]	@ (8010de4 <HAL_GetTick+0x10>)
 8010dda:	681b      	ldr	r3, [r3, #0]
}
 8010ddc:	0018      	movs	r0, r3
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
 8010de2:	46c0      	nop			@ (mov r8, r8)
 8010de4:	2000217c 	.word	0x2000217c

08010de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b084      	sub	sp, #16
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010df0:	f7ff fff0 	bl	8010dd4 <HAL_GetTick>
 8010df4:	0003      	movs	r3, r0
 8010df6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	3301      	adds	r3, #1
 8010e00:	d005      	beq.n	8010e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010e02:	4b0a      	ldr	r3, [pc, #40]	@ (8010e2c <HAL_Delay+0x44>)
 8010e04:	781b      	ldrb	r3, [r3, #0]
 8010e06:	001a      	movs	r2, r3
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	189b      	adds	r3, r3, r2
 8010e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010e0e:	46c0      	nop			@ (mov r8, r8)
 8010e10:	f7ff ffe0 	bl	8010dd4 <HAL_GetTick>
 8010e14:	0002      	movs	r2, r0
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	1ad3      	subs	r3, r2, r3
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d8f7      	bhi.n	8010e10 <HAL_Delay+0x28>
  {
  }
}
 8010e20:	46c0      	nop			@ (mov r8, r8)
 8010e22:	46c0      	nop			@ (mov r8, r8)
 8010e24:	46bd      	mov	sp, r7
 8010e26:	b004      	add	sp, #16
 8010e28:	bd80      	pop	{r7, pc}
 8010e2a:	46c0      	nop			@ (mov r8, r8)
 8010e2c:	200000f0 	.word	0x200000f0

08010e30 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8010e34:	4b04      	ldr	r3, [pc, #16]	@ (8010e48 <HAL_SuspendTick+0x18>)
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	4b03      	ldr	r3, [pc, #12]	@ (8010e48 <HAL_SuspendTick+0x18>)
 8010e3a:	2102      	movs	r1, #2
 8010e3c:	438a      	bics	r2, r1
 8010e3e:	601a      	str	r2, [r3, #0]
}
 8010e40:	46c0      	nop			@ (mov r8, r8)
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}
 8010e46:	46c0      	nop			@ (mov r8, r8)
 8010e48:	e000e010 	.word	0xe000e010

08010e4c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8010e50:	4b04      	ldr	r3, [pc, #16]	@ (8010e64 <HAL_ResumeTick+0x18>)
 8010e52:	681a      	ldr	r2, [r3, #0]
 8010e54:	4b03      	ldr	r3, [pc, #12]	@ (8010e64 <HAL_ResumeTick+0x18>)
 8010e56:	2102      	movs	r1, #2
 8010e58:	430a      	orrs	r2, r1
 8010e5a:	601a      	str	r2, [r3, #0]
}
 8010e5c:	46c0      	nop			@ (mov r8, r8)
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	46c0      	nop			@ (mov r8, r8)
 8010e64:	e000e010 	.word	0xe000e010

08010e68 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8010e6c:	4b02      	ldr	r3, [pc, #8]	@ (8010e78 <HAL_GetUIDw0+0x10>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
}
 8010e70:	0018      	movs	r0, r3
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	46c0      	nop			@ (mov r8, r8)
 8010e78:	1ff80050 	.word	0x1ff80050

08010e7c <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8010e80:	4b02      	ldr	r3, [pc, #8]	@ (8010e8c <HAL_GetUIDw1+0x10>)
 8010e82:	681b      	ldr	r3, [r3, #0]
}
 8010e84:	0018      	movs	r0, r3
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	46c0      	nop			@ (mov r8, r8)
 8010e8c:	1ff80054 	.word	0x1ff80054

08010e90 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8010e94:	4b02      	ldr	r3, [pc, #8]	@ (8010ea0 <HAL_GetUIDw2+0x10>)
 8010e96:	681b      	ldr	r3, [r3, #0]
}
 8010e98:	0018      	movs	r0, r3
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
 8010e9e:	46c0      	nop			@ (mov r8, r8)
 8010ea0:	1ff80064 	.word	0x1ff80064

08010ea4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d101      	bne.n	8010eb6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	e159      	b.n	801116a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d10a      	bne.n	8010ed4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2250      	movs	r2, #80	@ 0x50
 8010ec8:	2100      	movs	r1, #0
 8010eca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	0018      	movs	r0, r3
 8010ed0:	f7f6 fe40 	bl	8007b54 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ed8:	2210      	movs	r2, #16
 8010eda:	4013      	ands	r3, r2
 8010edc:	2b10      	cmp	r3, #16
 8010ede:	d005      	beq.n	8010eec <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	689b      	ldr	r3, [r3, #8]
 8010ee6:	2204      	movs	r2, #4
 8010ee8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8010eea:	d00b      	beq.n	8010f04 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ef0:	2210      	movs	r2, #16
 8010ef2:	431a      	orrs	r2, r3
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2250      	movs	r2, #80	@ 0x50
 8010efc:	2100      	movs	r1, #0
 8010efe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8010f00:	2301      	movs	r3, #1
 8010f02:	e132      	b.n	801116a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f08:	4a9a      	ldr	r2, [pc, #616]	@ (8011174 <HAL_ADC_Init+0x2d0>)
 8010f0a:	4013      	ands	r3, r2
 8010f0c:	2202      	movs	r2, #2
 8010f0e:	431a      	orrs	r2, r3
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	689b      	ldr	r3, [r3, #8]
 8010f1a:	2203      	movs	r2, #3
 8010f1c:	4013      	ands	r3, r2
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	d108      	bne.n	8010f34 <HAL_ADC_Init+0x90>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2201      	movs	r2, #1
 8010f2a:	4013      	ands	r3, r2
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	d101      	bne.n	8010f34 <HAL_ADC_Init+0x90>
 8010f30:	2301      	movs	r3, #1
 8010f32:	e000      	b.n	8010f36 <HAL_ADC_Init+0x92>
 8010f34:	2300      	movs	r3, #0
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d149      	bne.n	8010fce <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	685a      	ldr	r2, [r3, #4]
 8010f3e:	23c0      	movs	r3, #192	@ 0xc0
 8010f40:	061b      	lsls	r3, r3, #24
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d00b      	beq.n	8010f5e <HAL_ADC_Init+0xba>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	685a      	ldr	r2, [r3, #4]
 8010f4a:	2380      	movs	r3, #128	@ 0x80
 8010f4c:	05db      	lsls	r3, r3, #23
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	d005      	beq.n	8010f5e <HAL_ADC_Init+0xba>
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	685a      	ldr	r2, [r3, #4]
 8010f56:	2380      	movs	r3, #128	@ 0x80
 8010f58:	061b      	lsls	r3, r3, #24
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d111      	bne.n	8010f82 <HAL_ADC_Init+0xde>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	691a      	ldr	r2, [r3, #16]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	0092      	lsls	r2, r2, #2
 8010f6a:	0892      	lsrs	r2, r2, #2
 8010f6c:	611a      	str	r2, [r3, #16]
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	6919      	ldr	r1, [r3, #16]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	685a      	ldr	r2, [r3, #4]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	430a      	orrs	r2, r1
 8010f7e:	611a      	str	r2, [r3, #16]
 8010f80:	e014      	b.n	8010fac <HAL_ADC_Init+0x108>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	691a      	ldr	r2, [r3, #16]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	0092      	lsls	r2, r2, #2
 8010f8e:	0892      	lsrs	r2, r2, #2
 8010f90:	611a      	str	r2, [r3, #16]
 8010f92:	4b79      	ldr	r3, [pc, #484]	@ (8011178 <HAL_ADC_Init+0x2d4>)
 8010f94:	681a      	ldr	r2, [r3, #0]
 8010f96:	4b78      	ldr	r3, [pc, #480]	@ (8011178 <HAL_ADC_Init+0x2d4>)
 8010f98:	4978      	ldr	r1, [pc, #480]	@ (801117c <HAL_ADC_Init+0x2d8>)
 8010f9a:	400a      	ands	r2, r1
 8010f9c:	601a      	str	r2, [r3, #0]
 8010f9e:	4b76      	ldr	r3, [pc, #472]	@ (8011178 <HAL_ADC_Init+0x2d4>)
 8010fa0:	6819      	ldr	r1, [r3, #0]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	685a      	ldr	r2, [r3, #4]
 8010fa6:	4b74      	ldr	r3, [pc, #464]	@ (8011178 <HAL_ADC_Init+0x2d4>)
 8010fa8:	430a      	orrs	r2, r1
 8010faa:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	68da      	ldr	r2, [r3, #12]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	2118      	movs	r1, #24
 8010fb8:	438a      	bics	r2, r1
 8010fba:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	68d9      	ldr	r1, [r3, #12]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	689a      	ldr	r2, [r3, #8]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	430a      	orrs	r2, r1
 8010fcc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8010fce:	4b6a      	ldr	r3, [pc, #424]	@ (8011178 <HAL_ADC_Init+0x2d4>)
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	4b69      	ldr	r3, [pc, #420]	@ (8011178 <HAL_ADC_Init+0x2d4>)
 8010fd4:	496a      	ldr	r1, [pc, #424]	@ (8011180 <HAL_ADC_Init+0x2dc>)
 8010fd6:	400a      	ands	r2, r1
 8010fd8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8010fda:	4b67      	ldr	r3, [pc, #412]	@ (8011178 <HAL_ADC_Init+0x2d4>)
 8010fdc:	6819      	ldr	r1, [r3, #0]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fe2:	065a      	lsls	r2, r3, #25
 8010fe4:	4b64      	ldr	r3, [pc, #400]	@ (8011178 <HAL_ADC_Init+0x2d4>)
 8010fe6:	430a      	orrs	r2, r1
 8010fe8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	689a      	ldr	r2, [r3, #8]
 8010ff0:	2380      	movs	r3, #128	@ 0x80
 8010ff2:	055b      	lsls	r3, r3, #21
 8010ff4:	4013      	ands	r3, r2
 8010ff6:	d108      	bne.n	801100a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	689a      	ldr	r2, [r3, #8]
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	2180      	movs	r1, #128	@ 0x80
 8011004:	0549      	lsls	r1, r1, #21
 8011006:	430a      	orrs	r2, r1
 8011008:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	68da      	ldr	r2, [r3, #12]
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	495b      	ldr	r1, [pc, #364]	@ (8011184 <HAL_ADC_Init+0x2e0>)
 8011016:	400a      	ands	r2, r1
 8011018:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	68d9      	ldr	r1, [r3, #12]
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	691b      	ldr	r3, [r3, #16]
 8011028:	2b02      	cmp	r3, #2
 801102a:	d101      	bne.n	8011030 <HAL_ADC_Init+0x18c>
 801102c:	2304      	movs	r3, #4
 801102e:	e000      	b.n	8011032 <HAL_ADC_Init+0x18e>
 8011030:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8011032:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2020      	movs	r0, #32
 8011038:	5c1b      	ldrb	r3, [r3, r0]
 801103a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 801103c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	202c      	movs	r0, #44	@ 0x2c
 8011042:	5c1b      	ldrb	r3, [r3, r0]
 8011044:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8011046:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 801104c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	699b      	ldr	r3, [r3, #24]
 8011052:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8011054:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	69db      	ldr	r3, [r3, #28]
 801105a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 801105c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	430a      	orrs	r2, r1
 8011064:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801106a:	23c2      	movs	r3, #194	@ 0xc2
 801106c:	33ff      	adds	r3, #255	@ 0xff
 801106e:	429a      	cmp	r2, r3
 8011070:	d00b      	beq.n	801108a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	68d9      	ldr	r1, [r3, #12]
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8011080:	431a      	orrs	r2, r3
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	430a      	orrs	r2, r1
 8011088:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2221      	movs	r2, #33	@ 0x21
 801108e:	5c9b      	ldrb	r3, [r3, r2]
 8011090:	2b01      	cmp	r3, #1
 8011092:	d11a      	bne.n	80110ca <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2220      	movs	r2, #32
 8011098:	5c9b      	ldrb	r3, [r3, r2]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d109      	bne.n	80110b2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	68da      	ldr	r2, [r3, #12]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	2180      	movs	r1, #128	@ 0x80
 80110aa:	0249      	lsls	r1, r1, #9
 80110ac:	430a      	orrs	r2, r1
 80110ae:	60da      	str	r2, [r3, #12]
 80110b0:	e00b      	b.n	80110ca <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80110b6:	2220      	movs	r2, #32
 80110b8:	431a      	orrs	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80110c2:	2201      	movs	r2, #1
 80110c4:	431a      	orrs	r2, r3
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110ce:	2b01      	cmp	r3, #1
 80110d0:	d11f      	bne.n	8011112 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	691a      	ldr	r2, [r3, #16]
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	492a      	ldr	r1, [pc, #168]	@ (8011188 <HAL_ADC_Init+0x2e4>)
 80110de:	400a      	ands	r2, r1
 80110e0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	6919      	ldr	r1, [r3, #16]
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80110f0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80110f6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	430a      	orrs	r2, r1
 80110fe:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	691a      	ldr	r2, [r3, #16]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	2101      	movs	r1, #1
 801110c:	430a      	orrs	r2, r1
 801110e:	611a      	str	r2, [r3, #16]
 8011110:	e00e      	b.n	8011130 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	691b      	ldr	r3, [r3, #16]
 8011118:	2201      	movs	r2, #1
 801111a:	4013      	ands	r3, r2
 801111c:	2b01      	cmp	r3, #1
 801111e:	d107      	bne.n	8011130 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	691a      	ldr	r2, [r3, #16]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	2101      	movs	r1, #1
 801112c:	438a      	bics	r2, r1
 801112e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	695a      	ldr	r2, [r3, #20]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	2107      	movs	r1, #7
 801113c:	438a      	bics	r2, r1
 801113e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	6959      	ldr	r1, [r3, #20]
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	430a      	orrs	r2, r1
 8011150:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2200      	movs	r2, #0
 8011156:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801115c:	2203      	movs	r2, #3
 801115e:	4393      	bics	r3, r2
 8011160:	2201      	movs	r2, #1
 8011162:	431a      	orrs	r2, r3
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8011168:	2300      	movs	r3, #0
}
 801116a:	0018      	movs	r0, r3
 801116c:	46bd      	mov	sp, r7
 801116e:	b002      	add	sp, #8
 8011170:	bd80      	pop	{r7, pc}
 8011172:	46c0      	nop			@ (mov r8, r8)
 8011174:	fffffefd 	.word	0xfffffefd
 8011178:	40012708 	.word	0x40012708
 801117c:	ffc3ffff 	.word	0xffc3ffff
 8011180:	fdffffff 	.word	0xfdffffff
 8011184:	fffe0219 	.word	0xfffe0219
 8011188:	fffffc03 	.word	0xfffffc03

0801118c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 801118c:	b590      	push	{r4, r7, lr}
 801118e:	b085      	sub	sp, #20
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011194:	230f      	movs	r3, #15
 8011196:	18fb      	adds	r3, r7, r3
 8011198:	2200      	movs	r2, #0
 801119a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	689b      	ldr	r3, [r3, #8]
 80111a2:	2204      	movs	r2, #4
 80111a4:	4013      	ands	r3, r2
 80111a6:	d138      	bne.n	801121a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2250      	movs	r2, #80	@ 0x50
 80111ac:	5c9b      	ldrb	r3, [r3, r2]
 80111ae:	2b01      	cmp	r3, #1
 80111b0:	d101      	bne.n	80111b6 <HAL_ADC_Start+0x2a>
 80111b2:	2302      	movs	r3, #2
 80111b4:	e038      	b.n	8011228 <HAL_ADC_Start+0x9c>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2250      	movs	r2, #80	@ 0x50
 80111ba:	2101      	movs	r1, #1
 80111bc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	69db      	ldr	r3, [r3, #28]
 80111c2:	2b01      	cmp	r3, #1
 80111c4:	d007      	beq.n	80111d6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80111c6:	230f      	movs	r3, #15
 80111c8:	18fc      	adds	r4, r7, r3
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	0018      	movs	r0, r3
 80111ce:	f000 f95f 	bl	8011490 <ADC_Enable>
 80111d2:	0003      	movs	r3, r0
 80111d4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80111d6:	230f      	movs	r3, #15
 80111d8:	18fb      	adds	r3, r7, r3
 80111da:	781b      	ldrb	r3, [r3, #0]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d120      	bne.n	8011222 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80111e4:	4a12      	ldr	r2, [pc, #72]	@ (8011230 <HAL_ADC_Start+0xa4>)
 80111e6:	4013      	ands	r3, r2
 80111e8:	2280      	movs	r2, #128	@ 0x80
 80111ea:	0052      	lsls	r2, r2, #1
 80111ec:	431a      	orrs	r2, r3
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2200      	movs	r2, #0
 80111f6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2250      	movs	r2, #80	@ 0x50
 80111fc:	2100      	movs	r1, #0
 80111fe:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	221c      	movs	r2, #28
 8011206:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	689a      	ldr	r2, [r3, #8]
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	2104      	movs	r1, #4
 8011214:	430a      	orrs	r2, r1
 8011216:	609a      	str	r2, [r3, #8]
 8011218:	e003      	b.n	8011222 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801121a:	230f      	movs	r3, #15
 801121c:	18fb      	adds	r3, r7, r3
 801121e:	2202      	movs	r2, #2
 8011220:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8011222:	230f      	movs	r3, #15
 8011224:	18fb      	adds	r3, r7, r3
 8011226:	781b      	ldrb	r3, [r3, #0]
}
 8011228:	0018      	movs	r0, r3
 801122a:	46bd      	mov	sp, r7
 801122c:	b005      	add	sp, #20
 801122e:	bd90      	pop	{r4, r7, pc}
 8011230:	fffff0fe 	.word	0xfffff0fe

08011234 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b084      	sub	sp, #16
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
 801123c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801123e:	2300      	movs	r3, #0
 8011240:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8011242:	2300      	movs	r3, #0
 8011244:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	695b      	ldr	r3, [r3, #20]
 801124a:	2b08      	cmp	r3, #8
 801124c:	d102      	bne.n	8011254 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 801124e:	2308      	movs	r3, #8
 8011250:	60fb      	str	r3, [r7, #12]
 8011252:	e014      	b.n	801127e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	68db      	ldr	r3, [r3, #12]
 801125a:	2201      	movs	r2, #1
 801125c:	4013      	ands	r3, r2
 801125e:	2b01      	cmp	r3, #1
 8011260:	d10b      	bne.n	801127a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011266:	2220      	movs	r2, #32
 8011268:	431a      	orrs	r2, r3
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2250      	movs	r2, #80	@ 0x50
 8011272:	2100      	movs	r1, #0
 8011274:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8011276:	2301      	movs	r3, #1
 8011278:	e072      	b.n	8011360 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 801127a:	230c      	movs	r3, #12
 801127c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801127e:	f7ff fda9 	bl	8010dd4 <HAL_GetTick>
 8011282:	0003      	movs	r3, r0
 8011284:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8011286:	e01f      	b.n	80112c8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	3301      	adds	r3, #1
 801128c:	d01c      	beq.n	80112c8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d007      	beq.n	80112a4 <HAL_ADC_PollForConversion+0x70>
 8011294:	f7ff fd9e 	bl	8010dd4 <HAL_GetTick>
 8011298:	0002      	movs	r2, r0
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	1ad3      	subs	r3, r2, r3
 801129e:	683a      	ldr	r2, [r7, #0]
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d211      	bcs.n	80112c8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	68fa      	ldr	r2, [r7, #12]
 80112ac:	4013      	ands	r3, r2
 80112ae:	d10b      	bne.n	80112c8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80112b4:	2204      	movs	r2, #4
 80112b6:	431a      	orrs	r2, r3
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2250      	movs	r2, #80	@ 0x50
 80112c0:	2100      	movs	r1, #0
 80112c2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80112c4:	2303      	movs	r3, #3
 80112c6:	e04b      	b.n	8011360 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	68fa      	ldr	r2, [r7, #12]
 80112d0:	4013      	ands	r3, r2
 80112d2:	d0d9      	beq.n	8011288 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80112d8:	2280      	movs	r2, #128	@ 0x80
 80112da:	0092      	lsls	r2, r2, #2
 80112dc:	431a      	orrs	r2, r3
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	68da      	ldr	r2, [r3, #12]
 80112e8:	23c0      	movs	r3, #192	@ 0xc0
 80112ea:	011b      	lsls	r3, r3, #4
 80112ec:	4013      	ands	r3, r2
 80112ee:	d12e      	bne.n	801134e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2220      	movs	r2, #32
 80112f4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d129      	bne.n	801134e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	2208      	movs	r2, #8
 8011302:	4013      	ands	r3, r2
 8011304:	2b08      	cmp	r3, #8
 8011306:	d122      	bne.n	801134e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	689b      	ldr	r3, [r3, #8]
 801130e:	2204      	movs	r2, #4
 8011310:	4013      	ands	r3, r2
 8011312:	d110      	bne.n	8011336 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	685a      	ldr	r2, [r3, #4]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	210c      	movs	r1, #12
 8011320:	438a      	bics	r2, r1
 8011322:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011328:	4a0f      	ldr	r2, [pc, #60]	@ (8011368 <HAL_ADC_PollForConversion+0x134>)
 801132a:	4013      	ands	r3, r2
 801132c:	2201      	movs	r2, #1
 801132e:	431a      	orrs	r2, r3
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	655a      	str	r2, [r3, #84]	@ 0x54
 8011334:	e00b      	b.n	801134e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801133a:	2220      	movs	r2, #32
 801133c:	431a      	orrs	r2, r3
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011346:	2201      	movs	r2, #1
 8011348:	431a      	orrs	r2, r3
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	699b      	ldr	r3, [r3, #24]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d103      	bne.n	801135e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	220c      	movs	r2, #12
 801135c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801135e:	2300      	movs	r3, #0
}
 8011360:	0018      	movs	r0, r3
 8011362:	46bd      	mov	sp, r7
 8011364:	b004      	add	sp, #16
 8011366:	bd80      	pop	{r7, pc}
 8011368:	fffffefe 	.word	0xfffffefe

0801136c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 801137a:	0018      	movs	r0, r3
 801137c:	46bd      	mov	sp, r7
 801137e:	b002      	add	sp, #8
 8011380:	bd80      	pop	{r7, pc}
	...

08011384 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b082      	sub	sp, #8
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2250      	movs	r2, #80	@ 0x50
 8011392:	5c9b      	ldrb	r3, [r3, r2]
 8011394:	2b01      	cmp	r3, #1
 8011396:	d101      	bne.n	801139c <HAL_ADC_ConfigChannel+0x18>
 8011398:	2302      	movs	r3, #2
 801139a:	e06c      	b.n	8011476 <HAL_ADC_ConfigChannel+0xf2>
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2250      	movs	r2, #80	@ 0x50
 80113a0:	2101      	movs	r1, #1
 80113a2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	689b      	ldr	r3, [r3, #8]
 80113aa:	2204      	movs	r2, #4
 80113ac:	4013      	ands	r3, r2
 80113ae:	d00b      	beq.n	80113c8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113b4:	2220      	movs	r2, #32
 80113b6:	431a      	orrs	r2, r3
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2250      	movs	r2, #80	@ 0x50
 80113c0:	2100      	movs	r1, #0
 80113c2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80113c4:	2301      	movs	r3, #1
 80113c6:	e056      	b.n	8011476 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	685b      	ldr	r3, [r3, #4]
 80113cc:	4a2c      	ldr	r2, [pc, #176]	@ (8011480 <HAL_ADC_ConfigChannel+0xfc>)
 80113ce:	4293      	cmp	r3, r2
 80113d0:	d028      	beq.n	8011424 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	035b      	lsls	r3, r3, #13
 80113de:	0b5a      	lsrs	r2, r3, #13
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	430a      	orrs	r2, r1
 80113e6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	681a      	ldr	r2, [r3, #0]
 80113ec:	2380      	movs	r3, #128	@ 0x80
 80113ee:	02db      	lsls	r3, r3, #11
 80113f0:	4013      	ands	r3, r2
 80113f2:	d009      	beq.n	8011408 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80113f4:	4b23      	ldr	r3, [pc, #140]	@ (8011484 <HAL_ADC_ConfigChannel+0x100>)
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	4b22      	ldr	r3, [pc, #136]	@ (8011484 <HAL_ADC_ConfigChannel+0x100>)
 80113fa:	2180      	movs	r1, #128	@ 0x80
 80113fc:	0409      	lsls	r1, r1, #16
 80113fe:	430a      	orrs	r2, r1
 8011400:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8011402:	200a      	movs	r0, #10
 8011404:	f000 f8ac 	bl	8011560 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	681a      	ldr	r2, [r3, #0]
 801140c:	2380      	movs	r3, #128	@ 0x80
 801140e:	029b      	lsls	r3, r3, #10
 8011410:	4013      	ands	r3, r2
 8011412:	d02b      	beq.n	801146c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8011414:	4b1b      	ldr	r3, [pc, #108]	@ (8011484 <HAL_ADC_ConfigChannel+0x100>)
 8011416:	681a      	ldr	r2, [r3, #0]
 8011418:	4b1a      	ldr	r3, [pc, #104]	@ (8011484 <HAL_ADC_ConfigChannel+0x100>)
 801141a:	2180      	movs	r1, #128	@ 0x80
 801141c:	03c9      	lsls	r1, r1, #15
 801141e:	430a      	orrs	r2, r1
 8011420:	601a      	str	r2, [r3, #0]
 8011422:	e023      	b.n	801146c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	035b      	lsls	r3, r3, #13
 8011430:	0b5b      	lsrs	r3, r3, #13
 8011432:	43d9      	mvns	r1, r3
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	400a      	ands	r2, r1
 801143a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	681a      	ldr	r2, [r3, #0]
 8011440:	2380      	movs	r3, #128	@ 0x80
 8011442:	02db      	lsls	r3, r3, #11
 8011444:	4013      	ands	r3, r2
 8011446:	d005      	beq.n	8011454 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8011448:	4b0e      	ldr	r3, [pc, #56]	@ (8011484 <HAL_ADC_ConfigChannel+0x100>)
 801144a:	681a      	ldr	r2, [r3, #0]
 801144c:	4b0d      	ldr	r3, [pc, #52]	@ (8011484 <HAL_ADC_ConfigChannel+0x100>)
 801144e:	490e      	ldr	r1, [pc, #56]	@ (8011488 <HAL_ADC_ConfigChannel+0x104>)
 8011450:	400a      	ands	r2, r1
 8011452:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	681a      	ldr	r2, [r3, #0]
 8011458:	2380      	movs	r3, #128	@ 0x80
 801145a:	029b      	lsls	r3, r3, #10
 801145c:	4013      	ands	r3, r2
 801145e:	d005      	beq.n	801146c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8011460:	4b08      	ldr	r3, [pc, #32]	@ (8011484 <HAL_ADC_ConfigChannel+0x100>)
 8011462:	681a      	ldr	r2, [r3, #0]
 8011464:	4b07      	ldr	r3, [pc, #28]	@ (8011484 <HAL_ADC_ConfigChannel+0x100>)
 8011466:	4909      	ldr	r1, [pc, #36]	@ (801148c <HAL_ADC_ConfigChannel+0x108>)
 8011468:	400a      	ands	r2, r1
 801146a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2250      	movs	r2, #80	@ 0x50
 8011470:	2100      	movs	r1, #0
 8011472:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8011474:	2300      	movs	r3, #0
}
 8011476:	0018      	movs	r0, r3
 8011478:	46bd      	mov	sp, r7
 801147a:	b002      	add	sp, #8
 801147c:	bd80      	pop	{r7, pc}
 801147e:	46c0      	nop			@ (mov r8, r8)
 8011480:	00001001 	.word	0x00001001
 8011484:	40012708 	.word	0x40012708
 8011488:	ff7fffff 	.word	0xff7fffff
 801148c:	ffbfffff 	.word	0xffbfffff

08011490 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011498:	2300      	movs	r3, #0
 801149a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	689b      	ldr	r3, [r3, #8]
 80114a2:	2203      	movs	r2, #3
 80114a4:	4013      	ands	r3, r2
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	d108      	bne.n	80114bc <ADC_Enable+0x2c>
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	2201      	movs	r2, #1
 80114b2:	4013      	ands	r3, r2
 80114b4:	2b01      	cmp	r3, #1
 80114b6:	d101      	bne.n	80114bc <ADC_Enable+0x2c>
 80114b8:	2301      	movs	r3, #1
 80114ba:	e000      	b.n	80114be <ADC_Enable+0x2e>
 80114bc:	2300      	movs	r3, #0
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d146      	bne.n	8011550 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	689b      	ldr	r3, [r3, #8]
 80114c8:	4a24      	ldr	r2, [pc, #144]	@ (801155c <ADC_Enable+0xcc>)
 80114ca:	4013      	ands	r3, r2
 80114cc:	d00d      	beq.n	80114ea <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114d2:	2210      	movs	r2, #16
 80114d4:	431a      	orrs	r2, r3
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80114de:	2201      	movs	r2, #1
 80114e0:	431a      	orrs	r2, r3
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80114e6:	2301      	movs	r3, #1
 80114e8:	e033      	b.n	8011552 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	689a      	ldr	r2, [r3, #8]
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	2101      	movs	r1, #1
 80114f6:	430a      	orrs	r2, r1
 80114f8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80114fa:	2001      	movs	r0, #1
 80114fc:	f000 f830 	bl	8011560 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8011500:	f7ff fc68 	bl	8010dd4 <HAL_GetTick>
 8011504:	0003      	movs	r3, r0
 8011506:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8011508:	e01b      	b.n	8011542 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801150a:	f7ff fc63 	bl	8010dd4 <HAL_GetTick>
 801150e:	0002      	movs	r2, r0
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	1ad3      	subs	r3, r2, r3
 8011514:	2b0a      	cmp	r3, #10
 8011516:	d914      	bls.n	8011542 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2201      	movs	r2, #1
 8011520:	4013      	ands	r3, r2
 8011522:	2b01      	cmp	r3, #1
 8011524:	d00d      	beq.n	8011542 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801152a:	2210      	movs	r2, #16
 801152c:	431a      	orrs	r2, r3
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011536:	2201      	movs	r2, #1
 8011538:	431a      	orrs	r2, r3
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 801153e:	2301      	movs	r3, #1
 8011540:	e007      	b.n	8011552 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	2201      	movs	r2, #1
 801154a:	4013      	ands	r3, r2
 801154c:	2b01      	cmp	r3, #1
 801154e:	d1dc      	bne.n	801150a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8011550:	2300      	movs	r3, #0
}
 8011552:	0018      	movs	r0, r3
 8011554:	46bd      	mov	sp, r7
 8011556:	b004      	add	sp, #16
 8011558:	bd80      	pop	{r7, pc}
 801155a:	46c0      	nop			@ (mov r8, r8)
 801155c:	80000017 	.word	0x80000017

08011560 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b084      	sub	sp, #16
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8011568:	4b0b      	ldr	r3, [pc, #44]	@ (8011598 <ADC_DelayMicroSecond+0x38>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	490b      	ldr	r1, [pc, #44]	@ (801159c <ADC_DelayMicroSecond+0x3c>)
 801156e:	0018      	movs	r0, r3
 8011570:	f7ee fe18 	bl	80001a4 <__udivsi3>
 8011574:	0003      	movs	r3, r0
 8011576:	001a      	movs	r2, r3
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	4353      	muls	r3, r2
 801157c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 801157e:	e002      	b.n	8011586 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	3b01      	subs	r3, #1
 8011584:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d1f9      	bne.n	8011580 <ADC_DelayMicroSecond+0x20>
  }
}
 801158c:	46c0      	nop			@ (mov r8, r8)
 801158e:	46c0      	nop			@ (mov r8, r8)
 8011590:	46bd      	mov	sp, r7
 8011592:	b004      	add	sp, #16
 8011594:	bd80      	pop	{r7, pc}
 8011596:	46c0      	nop			@ (mov r8, r8)
 8011598:	200000dc 	.word	0x200000dc
 801159c:	000f4240 	.word	0x000f4240

080115a0 <__NVIC_EnableIRQ>:
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b082      	sub	sp, #8
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	0002      	movs	r2, r0
 80115a8:	1dfb      	adds	r3, r7, #7
 80115aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80115ac:	1dfb      	adds	r3, r7, #7
 80115ae:	781b      	ldrb	r3, [r3, #0]
 80115b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80115b2:	d809      	bhi.n	80115c8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80115b4:	1dfb      	adds	r3, r7, #7
 80115b6:	781b      	ldrb	r3, [r3, #0]
 80115b8:	001a      	movs	r2, r3
 80115ba:	231f      	movs	r3, #31
 80115bc:	401a      	ands	r2, r3
 80115be:	4b04      	ldr	r3, [pc, #16]	@ (80115d0 <__NVIC_EnableIRQ+0x30>)
 80115c0:	2101      	movs	r1, #1
 80115c2:	4091      	lsls	r1, r2
 80115c4:	000a      	movs	r2, r1
 80115c6:	601a      	str	r2, [r3, #0]
}
 80115c8:	46c0      	nop			@ (mov r8, r8)
 80115ca:	46bd      	mov	sp, r7
 80115cc:	b002      	add	sp, #8
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	e000e100 	.word	0xe000e100

080115d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80115d4:	b590      	push	{r4, r7, lr}
 80115d6:	b083      	sub	sp, #12
 80115d8:	af00      	add	r7, sp, #0
 80115da:	0002      	movs	r2, r0
 80115dc:	6039      	str	r1, [r7, #0]
 80115de:	1dfb      	adds	r3, r7, #7
 80115e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80115e2:	1dfb      	adds	r3, r7, #7
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80115e8:	d828      	bhi.n	801163c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80115ea:	4a2f      	ldr	r2, [pc, #188]	@ (80116a8 <__NVIC_SetPriority+0xd4>)
 80115ec:	1dfb      	adds	r3, r7, #7
 80115ee:	781b      	ldrb	r3, [r3, #0]
 80115f0:	b25b      	sxtb	r3, r3
 80115f2:	089b      	lsrs	r3, r3, #2
 80115f4:	33c0      	adds	r3, #192	@ 0xc0
 80115f6:	009b      	lsls	r3, r3, #2
 80115f8:	589b      	ldr	r3, [r3, r2]
 80115fa:	1dfa      	adds	r2, r7, #7
 80115fc:	7812      	ldrb	r2, [r2, #0]
 80115fe:	0011      	movs	r1, r2
 8011600:	2203      	movs	r2, #3
 8011602:	400a      	ands	r2, r1
 8011604:	00d2      	lsls	r2, r2, #3
 8011606:	21ff      	movs	r1, #255	@ 0xff
 8011608:	4091      	lsls	r1, r2
 801160a:	000a      	movs	r2, r1
 801160c:	43d2      	mvns	r2, r2
 801160e:	401a      	ands	r2, r3
 8011610:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	019b      	lsls	r3, r3, #6
 8011616:	22ff      	movs	r2, #255	@ 0xff
 8011618:	401a      	ands	r2, r3
 801161a:	1dfb      	adds	r3, r7, #7
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	0018      	movs	r0, r3
 8011620:	2303      	movs	r3, #3
 8011622:	4003      	ands	r3, r0
 8011624:	00db      	lsls	r3, r3, #3
 8011626:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011628:	481f      	ldr	r0, [pc, #124]	@ (80116a8 <__NVIC_SetPriority+0xd4>)
 801162a:	1dfb      	adds	r3, r7, #7
 801162c:	781b      	ldrb	r3, [r3, #0]
 801162e:	b25b      	sxtb	r3, r3
 8011630:	089b      	lsrs	r3, r3, #2
 8011632:	430a      	orrs	r2, r1
 8011634:	33c0      	adds	r3, #192	@ 0xc0
 8011636:	009b      	lsls	r3, r3, #2
 8011638:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 801163a:	e031      	b.n	80116a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801163c:	4a1b      	ldr	r2, [pc, #108]	@ (80116ac <__NVIC_SetPriority+0xd8>)
 801163e:	1dfb      	adds	r3, r7, #7
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	0019      	movs	r1, r3
 8011644:	230f      	movs	r3, #15
 8011646:	400b      	ands	r3, r1
 8011648:	3b08      	subs	r3, #8
 801164a:	089b      	lsrs	r3, r3, #2
 801164c:	3306      	adds	r3, #6
 801164e:	009b      	lsls	r3, r3, #2
 8011650:	18d3      	adds	r3, r2, r3
 8011652:	3304      	adds	r3, #4
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	1dfa      	adds	r2, r7, #7
 8011658:	7812      	ldrb	r2, [r2, #0]
 801165a:	0011      	movs	r1, r2
 801165c:	2203      	movs	r2, #3
 801165e:	400a      	ands	r2, r1
 8011660:	00d2      	lsls	r2, r2, #3
 8011662:	21ff      	movs	r1, #255	@ 0xff
 8011664:	4091      	lsls	r1, r2
 8011666:	000a      	movs	r2, r1
 8011668:	43d2      	mvns	r2, r2
 801166a:	401a      	ands	r2, r3
 801166c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	019b      	lsls	r3, r3, #6
 8011672:	22ff      	movs	r2, #255	@ 0xff
 8011674:	401a      	ands	r2, r3
 8011676:	1dfb      	adds	r3, r7, #7
 8011678:	781b      	ldrb	r3, [r3, #0]
 801167a:	0018      	movs	r0, r3
 801167c:	2303      	movs	r3, #3
 801167e:	4003      	ands	r3, r0
 8011680:	00db      	lsls	r3, r3, #3
 8011682:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011684:	4809      	ldr	r0, [pc, #36]	@ (80116ac <__NVIC_SetPriority+0xd8>)
 8011686:	1dfb      	adds	r3, r7, #7
 8011688:	781b      	ldrb	r3, [r3, #0]
 801168a:	001c      	movs	r4, r3
 801168c:	230f      	movs	r3, #15
 801168e:	4023      	ands	r3, r4
 8011690:	3b08      	subs	r3, #8
 8011692:	089b      	lsrs	r3, r3, #2
 8011694:	430a      	orrs	r2, r1
 8011696:	3306      	adds	r3, #6
 8011698:	009b      	lsls	r3, r3, #2
 801169a:	18c3      	adds	r3, r0, r3
 801169c:	3304      	adds	r3, #4
 801169e:	601a      	str	r2, [r3, #0]
}
 80116a0:	46c0      	nop			@ (mov r8, r8)
 80116a2:	46bd      	mov	sp, r7
 80116a4:	b003      	add	sp, #12
 80116a6:	bd90      	pop	{r4, r7, pc}
 80116a8:	e000e100 	.word	0xe000e100
 80116ac:	e000ed00 	.word	0xe000ed00

080116b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80116b4:	f3bf 8f4f 	dsb	sy
}
 80116b8:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80116ba:	4b04      	ldr	r3, [pc, #16]	@ (80116cc <__NVIC_SystemReset+0x1c>)
 80116bc:	4a04      	ldr	r2, [pc, #16]	@ (80116d0 <__NVIC_SystemReset+0x20>)
 80116be:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80116c0:	f3bf 8f4f 	dsb	sy
}
 80116c4:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80116c6:	46c0      	nop			@ (mov r8, r8)
 80116c8:	e7fd      	b.n	80116c6 <__NVIC_SystemReset+0x16>
 80116ca:	46c0      	nop			@ (mov r8, r8)
 80116cc:	e000ed00 	.word	0xe000ed00
 80116d0:	05fa0004 	.word	0x05fa0004

080116d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b082      	sub	sp, #8
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	1e5a      	subs	r2, r3, #1
 80116e0:	2380      	movs	r3, #128	@ 0x80
 80116e2:	045b      	lsls	r3, r3, #17
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d301      	bcc.n	80116ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80116e8:	2301      	movs	r3, #1
 80116ea:	e010      	b.n	801170e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80116ec:	4b0a      	ldr	r3, [pc, #40]	@ (8011718 <SysTick_Config+0x44>)
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	3a01      	subs	r2, #1
 80116f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80116f4:	2301      	movs	r3, #1
 80116f6:	425b      	negs	r3, r3
 80116f8:	2103      	movs	r1, #3
 80116fa:	0018      	movs	r0, r3
 80116fc:	f7ff ff6a 	bl	80115d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011700:	4b05      	ldr	r3, [pc, #20]	@ (8011718 <SysTick_Config+0x44>)
 8011702:	2200      	movs	r2, #0
 8011704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011706:	4b04      	ldr	r3, [pc, #16]	@ (8011718 <SysTick_Config+0x44>)
 8011708:	2207      	movs	r2, #7
 801170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801170c:	2300      	movs	r3, #0
}
 801170e:	0018      	movs	r0, r3
 8011710:	46bd      	mov	sp, r7
 8011712:	b002      	add	sp, #8
 8011714:	bd80      	pop	{r7, pc}
 8011716:	46c0      	nop			@ (mov r8, r8)
 8011718:	e000e010 	.word	0xe000e010

0801171c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801171c:	b580      	push	{r7, lr}
 801171e:	b084      	sub	sp, #16
 8011720:	af00      	add	r7, sp, #0
 8011722:	60b9      	str	r1, [r7, #8]
 8011724:	607a      	str	r2, [r7, #4]
 8011726:	210f      	movs	r1, #15
 8011728:	187b      	adds	r3, r7, r1
 801172a:	1c02      	adds	r2, r0, #0
 801172c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 801172e:	68ba      	ldr	r2, [r7, #8]
 8011730:	187b      	adds	r3, r7, r1
 8011732:	781b      	ldrb	r3, [r3, #0]
 8011734:	b25b      	sxtb	r3, r3
 8011736:	0011      	movs	r1, r2
 8011738:	0018      	movs	r0, r3
 801173a:	f7ff ff4b 	bl	80115d4 <__NVIC_SetPriority>
}
 801173e:	46c0      	nop			@ (mov r8, r8)
 8011740:	46bd      	mov	sp, r7
 8011742:	b004      	add	sp, #16
 8011744:	bd80      	pop	{r7, pc}

08011746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011746:	b580      	push	{r7, lr}
 8011748:	b082      	sub	sp, #8
 801174a:	af00      	add	r7, sp, #0
 801174c:	0002      	movs	r2, r0
 801174e:	1dfb      	adds	r3, r7, #7
 8011750:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011752:	1dfb      	adds	r3, r7, #7
 8011754:	781b      	ldrb	r3, [r3, #0]
 8011756:	b25b      	sxtb	r3, r3
 8011758:	0018      	movs	r0, r3
 801175a:	f7ff ff21 	bl	80115a0 <__NVIC_EnableIRQ>
}
 801175e:	46c0      	nop			@ (mov r8, r8)
 8011760:	46bd      	mov	sp, r7
 8011762:	b002      	add	sp, #8
 8011764:	bd80      	pop	{r7, pc}

08011766 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8011766:	b580      	push	{r7, lr}
 8011768:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801176a:	f7ff ffa1 	bl	80116b0 <__NVIC_SystemReset>

0801176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801176e:	b580      	push	{r7, lr}
 8011770:	b082      	sub	sp, #8
 8011772:	af00      	add	r7, sp, #0
 8011774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	0018      	movs	r0, r3
 801177a:	f7ff ffab 	bl	80116d4 <SysTick_Config>
 801177e:	0003      	movs	r3, r0
}
 8011780:	0018      	movs	r0, r3
 8011782:	46bd      	mov	sp, r7
 8011784:	b002      	add	sp, #8
 8011786:	bd80      	pop	{r7, pc}

08011788 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d101      	bne.n	801179a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8011796:	2301      	movs	r3, #1
 8011798:	e061      	b.n	801185e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	4a32      	ldr	r2, [pc, #200]	@ (8011868 <HAL_DMA_Init+0xe0>)
 80117a0:	4694      	mov	ip, r2
 80117a2:	4463      	add	r3, ip
 80117a4:	2114      	movs	r1, #20
 80117a6:	0018      	movs	r0, r3
 80117a8:	f7ee fcfc 	bl	80001a4 <__udivsi3>
 80117ac:	0003      	movs	r3, r0
 80117ae:	009a      	lsls	r2, r3, #2
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	4a2d      	ldr	r2, [pc, #180]	@ (801186c <HAL_DMA_Init+0xe4>)
 80117b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2225      	movs	r2, #37	@ 0x25
 80117be:	2102      	movs	r1, #2
 80117c0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	4a28      	ldr	r2, [pc, #160]	@ (8011870 <HAL_DMA_Init+0xe8>)
 80117ce:	4013      	ands	r3, r2
 80117d0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80117da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	691b      	ldr	r3, [r3, #16]
 80117e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80117e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	699b      	ldr	r3, [r3, #24]
 80117ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80117f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6a1b      	ldr	r3, [r3, #32]
 80117f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80117fa:	68fa      	ldr	r2, [r7, #12]
 80117fc:	4313      	orrs	r3, r2
 80117fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	68fa      	ldr	r2, [r7, #12]
 8011806:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	689a      	ldr	r2, [r3, #8]
 801180c:	2380      	movs	r3, #128	@ 0x80
 801180e:	01db      	lsls	r3, r3, #7
 8011810:	429a      	cmp	r2, r3
 8011812:	d018      	beq.n	8011846 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8011814:	4b17      	ldr	r3, [pc, #92]	@ (8011874 <HAL_DMA_Init+0xec>)
 8011816:	681a      	ldr	r2, [r3, #0]
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801181c:	211c      	movs	r1, #28
 801181e:	400b      	ands	r3, r1
 8011820:	210f      	movs	r1, #15
 8011822:	4099      	lsls	r1, r3
 8011824:	000b      	movs	r3, r1
 8011826:	43d9      	mvns	r1, r3
 8011828:	4b12      	ldr	r3, [pc, #72]	@ (8011874 <HAL_DMA_Init+0xec>)
 801182a:	400a      	ands	r2, r1
 801182c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 801182e:	4b11      	ldr	r3, [pc, #68]	@ (8011874 <HAL_DMA_Init+0xec>)
 8011830:	6819      	ldr	r1, [r3, #0]
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	685a      	ldr	r2, [r3, #4]
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801183a:	201c      	movs	r0, #28
 801183c:	4003      	ands	r3, r0
 801183e:	409a      	lsls	r2, r3
 8011840:	4b0c      	ldr	r3, [pc, #48]	@ (8011874 <HAL_DMA_Init+0xec>)
 8011842:	430a      	orrs	r2, r1
 8011844:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2200      	movs	r2, #0
 801184a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2225      	movs	r2, #37	@ 0x25
 8011850:	2101      	movs	r1, #1
 8011852:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2224      	movs	r2, #36	@ 0x24
 8011858:	2100      	movs	r1, #0
 801185a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801185c:	2300      	movs	r3, #0
}
 801185e:	0018      	movs	r0, r3
 8011860:	46bd      	mov	sp, r7
 8011862:	b004      	add	sp, #16
 8011864:	bd80      	pop	{r7, pc}
 8011866:	46c0      	nop			@ (mov r8, r8)
 8011868:	bffdfff8 	.word	0xbffdfff8
 801186c:	40020000 	.word	0x40020000
 8011870:	ffff800f 	.word	0xffff800f
 8011874:	400200a8 	.word	0x400200a8

08011878 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b086      	sub	sp, #24
 801187c:	af00      	add	r7, sp, #0
 801187e:	60f8      	str	r0, [r7, #12]
 8011880:	60b9      	str	r1, [r7, #8]
 8011882:	607a      	str	r2, [r7, #4]
 8011884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011886:	2317      	movs	r3, #23
 8011888:	18fb      	adds	r3, r7, r3
 801188a:	2200      	movs	r2, #0
 801188c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	2224      	movs	r2, #36	@ 0x24
 8011892:	5c9b      	ldrb	r3, [r3, r2]
 8011894:	2b01      	cmp	r3, #1
 8011896:	d101      	bne.n	801189c <HAL_DMA_Start_IT+0x24>
 8011898:	2302      	movs	r3, #2
 801189a:	e04f      	b.n	801193c <HAL_DMA_Start_IT+0xc4>
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	2224      	movs	r2, #36	@ 0x24
 80118a0:	2101      	movs	r1, #1
 80118a2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	2225      	movs	r2, #37	@ 0x25
 80118a8:	5c9b      	ldrb	r3, [r3, r2]
 80118aa:	b2db      	uxtb	r3, r3
 80118ac:	2b01      	cmp	r3, #1
 80118ae:	d13a      	bne.n	8011926 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2225      	movs	r2, #37	@ 0x25
 80118b4:	2102      	movs	r1, #2
 80118b6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	2200      	movs	r2, #0
 80118bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	681a      	ldr	r2, [r3, #0]
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2101      	movs	r1, #1
 80118ca:	438a      	bics	r2, r1
 80118cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	687a      	ldr	r2, [r7, #4]
 80118d2:	68b9      	ldr	r1, [r7, #8]
 80118d4:	68f8      	ldr	r0, [r7, #12]
 80118d6:	f000 f976 	bl	8011bc6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d008      	beq.n	80118f4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	681a      	ldr	r2, [r3, #0]
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	210e      	movs	r1, #14
 80118ee:	430a      	orrs	r2, r1
 80118f0:	601a      	str	r2, [r3, #0]
 80118f2:	e00f      	b.n	8011914 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	2104      	movs	r1, #4
 8011900:	438a      	bics	r2, r1
 8011902:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	681a      	ldr	r2, [r3, #0]
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	210a      	movs	r1, #10
 8011910:	430a      	orrs	r2, r1
 8011912:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	681a      	ldr	r2, [r3, #0]
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	2101      	movs	r1, #1
 8011920:	430a      	orrs	r2, r1
 8011922:	601a      	str	r2, [r3, #0]
 8011924:	e007      	b.n	8011936 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	2224      	movs	r2, #36	@ 0x24
 801192a:	2100      	movs	r1, #0
 801192c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 801192e:	2317      	movs	r3, #23
 8011930:	18fb      	adds	r3, r7, r3
 8011932:	2202      	movs	r2, #2
 8011934:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8011936:	2317      	movs	r3, #23
 8011938:	18fb      	adds	r3, r7, r3
 801193a:	781b      	ldrb	r3, [r3, #0]
}
 801193c:	0018      	movs	r0, r3
 801193e:	46bd      	mov	sp, r7
 8011940:	b006      	add	sp, #24
 8011942:	bd80      	pop	{r7, pc}

08011944 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b084      	sub	sp, #16
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801194c:	230f      	movs	r3, #15
 801194e:	18fb      	adds	r3, r7, r3
 8011950:	2200      	movs	r2, #0
 8011952:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2225      	movs	r2, #37	@ 0x25
 8011958:	5c9b      	ldrb	r3, [r3, r2]
 801195a:	b2db      	uxtb	r3, r3
 801195c:	2b02      	cmp	r3, #2
 801195e:	d008      	beq.n	8011972 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2204      	movs	r2, #4
 8011964:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2224      	movs	r2, #36	@ 0x24
 801196a:	2100      	movs	r1, #0
 801196c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 801196e:	2301      	movs	r3, #1
 8011970:	e024      	b.n	80119bc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	681a      	ldr	r2, [r3, #0]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	210e      	movs	r1, #14
 801197e:	438a      	bics	r2, r1
 8011980:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	681a      	ldr	r2, [r3, #0]
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2101      	movs	r1, #1
 801198e:	438a      	bics	r2, r1
 8011990:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011996:	221c      	movs	r2, #28
 8011998:	401a      	ands	r2, r3
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801199e:	2101      	movs	r1, #1
 80119a0:	4091      	lsls	r1, r2
 80119a2:	000a      	movs	r2, r1
 80119a4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2225      	movs	r2, #37	@ 0x25
 80119aa:	2101      	movs	r1, #1
 80119ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2224      	movs	r2, #36	@ 0x24
 80119b2:	2100      	movs	r1, #0
 80119b4:	5499      	strb	r1, [r3, r2]

    return status;
 80119b6:	230f      	movs	r3, #15
 80119b8:	18fb      	adds	r3, r7, r3
 80119ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80119bc:	0018      	movs	r0, r3
 80119be:	46bd      	mov	sp, r7
 80119c0:	b004      	add	sp, #16
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80119cc:	210f      	movs	r1, #15
 80119ce:	187b      	adds	r3, r7, r1
 80119d0:	2200      	movs	r2, #0
 80119d2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2225      	movs	r2, #37	@ 0x25
 80119d8:	5c9b      	ldrb	r3, [r3, r2]
 80119da:	b2db      	uxtb	r3, r3
 80119dc:	2b02      	cmp	r3, #2
 80119de:	d006      	beq.n	80119ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2204      	movs	r2, #4
 80119e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80119e6:	187b      	adds	r3, r7, r1
 80119e8:	2201      	movs	r2, #1
 80119ea:	701a      	strb	r2, [r3, #0]
 80119ec:	e02a      	b.n	8011a44 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	681a      	ldr	r2, [r3, #0]
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	210e      	movs	r1, #14
 80119fa:	438a      	bics	r2, r1
 80119fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	681a      	ldr	r2, [r3, #0]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	2101      	movs	r1, #1
 8011a0a:	438a      	bics	r2, r1
 8011a0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a12:	221c      	movs	r2, #28
 8011a14:	401a      	ands	r2, r3
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a1a:	2101      	movs	r1, #1
 8011a1c:	4091      	lsls	r1, r2
 8011a1e:	000a      	movs	r2, r1
 8011a20:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2225      	movs	r2, #37	@ 0x25
 8011a26:	2101      	movs	r1, #1
 8011a28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2224      	movs	r2, #36	@ 0x24
 8011a2e:	2100      	movs	r1, #0
 8011a30:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d004      	beq.n	8011a44 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a3e:	687a      	ldr	r2, [r7, #4]
 8011a40:	0010      	movs	r0, r2
 8011a42:	4798      	blx	r3
    }
  }
  return status;
 8011a44:	230f      	movs	r3, #15
 8011a46:	18fb      	adds	r3, r7, r3
 8011a48:	781b      	ldrb	r3, [r3, #0]
}
 8011a4a:	0018      	movs	r0, r3
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	b004      	add	sp, #16
 8011a50:	bd80      	pop	{r7, pc}

08011a52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011a52:	b580      	push	{r7, lr}
 8011a54:	b084      	sub	sp, #16
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a6e:	221c      	movs	r2, #28
 8011a70:	4013      	ands	r3, r2
 8011a72:	2204      	movs	r2, #4
 8011a74:	409a      	lsls	r2, r3
 8011a76:	0013      	movs	r3, r2
 8011a78:	68fa      	ldr	r2, [r7, #12]
 8011a7a:	4013      	ands	r3, r2
 8011a7c:	d026      	beq.n	8011acc <HAL_DMA_IRQHandler+0x7a>
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	2204      	movs	r2, #4
 8011a82:	4013      	ands	r3, r2
 8011a84:	d022      	beq.n	8011acc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	2220      	movs	r2, #32
 8011a8e:	4013      	ands	r3, r2
 8011a90:	d107      	bne.n	8011aa2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	681a      	ldr	r2, [r3, #0]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	2104      	movs	r1, #4
 8011a9e:	438a      	bics	r2, r1
 8011aa0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011aa6:	221c      	movs	r2, #28
 8011aa8:	401a      	ands	r2, r3
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011aae:	2104      	movs	r1, #4
 8011ab0:	4091      	lsls	r1, r2
 8011ab2:	000a      	movs	r2, r1
 8011ab4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d100      	bne.n	8011ac0 <HAL_DMA_IRQHandler+0x6e>
 8011abe:	e071      	b.n	8011ba4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ac4:	687a      	ldr	r2, [r7, #4]
 8011ac6:	0010      	movs	r0, r2
 8011ac8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8011aca:	e06b      	b.n	8011ba4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ad0:	221c      	movs	r2, #28
 8011ad2:	4013      	ands	r3, r2
 8011ad4:	2202      	movs	r2, #2
 8011ad6:	409a      	lsls	r2, r3
 8011ad8:	0013      	movs	r3, r2
 8011ada:	68fa      	ldr	r2, [r7, #12]
 8011adc:	4013      	ands	r3, r2
 8011ade:	d02d      	beq.n	8011b3c <HAL_DMA_IRQHandler+0xea>
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	2202      	movs	r2, #2
 8011ae4:	4013      	ands	r3, r2
 8011ae6:	d029      	beq.n	8011b3c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	2220      	movs	r2, #32
 8011af0:	4013      	ands	r3, r2
 8011af2:	d10b      	bne.n	8011b0c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	681a      	ldr	r2, [r3, #0]
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	210a      	movs	r1, #10
 8011b00:	438a      	bics	r2, r1
 8011b02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2225      	movs	r2, #37	@ 0x25
 8011b08:	2101      	movs	r1, #1
 8011b0a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b10:	221c      	movs	r2, #28
 8011b12:	401a      	ands	r2, r3
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b18:	2102      	movs	r1, #2
 8011b1a:	4091      	lsls	r1, r2
 8011b1c:	000a      	movs	r2, r1
 8011b1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2224      	movs	r2, #36	@ 0x24
 8011b24:	2100      	movs	r1, #0
 8011b26:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d039      	beq.n	8011ba4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b34:	687a      	ldr	r2, [r7, #4]
 8011b36:	0010      	movs	r0, r2
 8011b38:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8011b3a:	e033      	b.n	8011ba4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b40:	221c      	movs	r2, #28
 8011b42:	4013      	ands	r3, r2
 8011b44:	2208      	movs	r2, #8
 8011b46:	409a      	lsls	r2, r3
 8011b48:	0013      	movs	r3, r2
 8011b4a:	68fa      	ldr	r2, [r7, #12]
 8011b4c:	4013      	ands	r3, r2
 8011b4e:	d02a      	beq.n	8011ba6 <HAL_DMA_IRQHandler+0x154>
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	2208      	movs	r2, #8
 8011b54:	4013      	ands	r3, r2
 8011b56:	d026      	beq.n	8011ba6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	681a      	ldr	r2, [r3, #0]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	210e      	movs	r1, #14
 8011b64:	438a      	bics	r2, r1
 8011b66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b6c:	221c      	movs	r2, #28
 8011b6e:	401a      	ands	r2, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b74:	2101      	movs	r1, #1
 8011b76:	4091      	lsls	r1, r2
 8011b78:	000a      	movs	r2, r1
 8011b7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	2201      	movs	r2, #1
 8011b80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2225      	movs	r2, #37	@ 0x25
 8011b86:	2101      	movs	r1, #1
 8011b88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2224      	movs	r2, #36	@ 0x24
 8011b8e:	2100      	movs	r1, #0
 8011b90:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d005      	beq.n	8011ba6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b9e:	687a      	ldr	r2, [r7, #4]
 8011ba0:	0010      	movs	r0, r2
 8011ba2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8011ba4:	46c0      	nop			@ (mov r8, r8)
 8011ba6:	46c0      	nop			@ (mov r8, r8)
}
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	b004      	add	sp, #16
 8011bac:	bd80      	pop	{r7, pc}

08011bae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8011bae:	b580      	push	{r7, lr}
 8011bb0:	b082      	sub	sp, #8
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	2225      	movs	r2, #37	@ 0x25
 8011bba:	5c9b      	ldrb	r3, [r3, r2]
 8011bbc:	b2db      	uxtb	r3, r3
}
 8011bbe:	0018      	movs	r0, r3
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	b002      	add	sp, #8
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011bc6:	b580      	push	{r7, lr}
 8011bc8:	b084      	sub	sp, #16
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	60f8      	str	r0, [r7, #12]
 8011bce:	60b9      	str	r1, [r7, #8]
 8011bd0:	607a      	str	r2, [r7, #4]
 8011bd2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011bd8:	221c      	movs	r2, #28
 8011bda:	401a      	ands	r2, r3
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011be0:	2101      	movs	r1, #1
 8011be2:	4091      	lsls	r1, r2
 8011be4:	000a      	movs	r2, r1
 8011be6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	683a      	ldr	r2, [r7, #0]
 8011bee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	689b      	ldr	r3, [r3, #8]
 8011bf4:	2b10      	cmp	r3, #16
 8011bf6:	d108      	bne.n	8011c0a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	68ba      	ldr	r2, [r7, #8]
 8011c06:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8011c08:	e007      	b.n	8011c1a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	68ba      	ldr	r2, [r7, #8]
 8011c10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	687a      	ldr	r2, [r7, #4]
 8011c18:	60da      	str	r2, [r3, #12]
}
 8011c1a:	46c0      	nop			@ (mov r8, r8)
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	b004      	add	sp, #16
 8011c20:	bd80      	pop	{r7, pc}
	...

08011c24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8011c2c:	f7ff f8d2 	bl	8010dd4 <HAL_GetTick>
 8011c30:	0003      	movs	r3, r0
 8011c32:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011c34:	e00f      	b.n	8011c56 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	3301      	adds	r3, #1
 8011c3a:	d00c      	beq.n	8011c56 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d007      	beq.n	8011c52 <FLASH_WaitForLastOperation+0x2e>
 8011c42:	f7ff f8c7 	bl	8010dd4 <HAL_GetTick>
 8011c46:	0002      	movs	r2, r0
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	1ad3      	subs	r3, r2, r3
 8011c4c:	687a      	ldr	r2, [r7, #4]
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d201      	bcs.n	8011c56 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8011c52:	2303      	movs	r3, #3
 8011c54:	e052      	b.n	8011cfc <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011c56:	4b2b      	ldr	r3, [pc, #172]	@ (8011d04 <FLASH_WaitForLastOperation+0xe0>)
 8011c58:	699b      	ldr	r3, [r3, #24]
 8011c5a:	2201      	movs	r2, #1
 8011c5c:	4013      	ands	r3, r2
 8011c5e:	2b01      	cmp	r3, #1
 8011c60:	d0e9      	beq.n	8011c36 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011c62:	4b28      	ldr	r3, [pc, #160]	@ (8011d04 <FLASH_WaitForLastOperation+0xe0>)
 8011c64:	699b      	ldr	r3, [r3, #24]
 8011c66:	2202      	movs	r2, #2
 8011c68:	4013      	ands	r3, r2
 8011c6a:	2b02      	cmp	r3, #2
 8011c6c:	d102      	bne.n	8011c74 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011c6e:	4b25      	ldr	r3, [pc, #148]	@ (8011d04 <FLASH_WaitForLastOperation+0xe0>)
 8011c70:	2202      	movs	r2, #2
 8011c72:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8011c74:	4b23      	ldr	r3, [pc, #140]	@ (8011d04 <FLASH_WaitForLastOperation+0xe0>)
 8011c76:	699a      	ldr	r2, [r3, #24]
 8011c78:	2380      	movs	r3, #128	@ 0x80
 8011c7a:	005b      	lsls	r3, r3, #1
 8011c7c:	401a      	ands	r2, r3
 8011c7e:	2380      	movs	r3, #128	@ 0x80
 8011c80:	005b      	lsls	r3, r3, #1
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d035      	beq.n	8011cf2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8011c86:	4b1f      	ldr	r3, [pc, #124]	@ (8011d04 <FLASH_WaitForLastOperation+0xe0>)
 8011c88:	699a      	ldr	r2, [r3, #24]
 8011c8a:	2380      	movs	r3, #128	@ 0x80
 8011c8c:	009b      	lsls	r3, r3, #2
 8011c8e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8011c90:	2380      	movs	r3, #128	@ 0x80
 8011c92:	009b      	lsls	r3, r3, #2
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d02c      	beq.n	8011cf2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8011c98:	4b1a      	ldr	r3, [pc, #104]	@ (8011d04 <FLASH_WaitForLastOperation+0xe0>)
 8011c9a:	699a      	ldr	r2, [r3, #24]
 8011c9c:	2380      	movs	r3, #128	@ 0x80
 8011c9e:	00db      	lsls	r3, r3, #3
 8011ca0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8011ca2:	2380      	movs	r3, #128	@ 0x80
 8011ca4:	00db      	lsls	r3, r3, #3
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d023      	beq.n	8011cf2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8011caa:	4b16      	ldr	r3, [pc, #88]	@ (8011d04 <FLASH_WaitForLastOperation+0xe0>)
 8011cac:	699a      	ldr	r2, [r3, #24]
 8011cae:	2380      	movs	r3, #128	@ 0x80
 8011cb0:	011b      	lsls	r3, r3, #4
 8011cb2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8011cb4:	2380      	movs	r3, #128	@ 0x80
 8011cb6:	011b      	lsls	r3, r3, #4
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d01a      	beq.n	8011cf2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8011cbc:	4b11      	ldr	r3, [pc, #68]	@ (8011d04 <FLASH_WaitForLastOperation+0xe0>)
 8011cbe:	699a      	ldr	r2, [r3, #24]
 8011cc0:	2380      	movs	r3, #128	@ 0x80
 8011cc2:	019b      	lsls	r3, r3, #6
 8011cc4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8011cc6:	2380      	movs	r3, #128	@ 0x80
 8011cc8:	019b      	lsls	r3, r3, #6
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d011      	beq.n	8011cf2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8011cce:	4b0d      	ldr	r3, [pc, #52]	@ (8011d04 <FLASH_WaitForLastOperation+0xe0>)
 8011cd0:	699a      	ldr	r2, [r3, #24]
 8011cd2:	2380      	movs	r3, #128	@ 0x80
 8011cd4:	029b      	lsls	r3, r3, #10
 8011cd6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8011cd8:	2380      	movs	r3, #128	@ 0x80
 8011cda:	029b      	lsls	r3, r3, #10
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	d008      	beq.n	8011cf2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8011ce0:	4b08      	ldr	r3, [pc, #32]	@ (8011d04 <FLASH_WaitForLastOperation+0xe0>)
 8011ce2:	699a      	ldr	r2, [r3, #24]
 8011ce4:	2380      	movs	r3, #128	@ 0x80
 8011ce6:	025b      	lsls	r3, r3, #9
 8011ce8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8011cea:	2380      	movs	r3, #128	@ 0x80
 8011cec:	025b      	lsls	r3, r3, #9
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	d103      	bne.n	8011cfa <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8011cf2:	f000 f809 	bl	8011d08 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	e000      	b.n	8011cfc <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8011cfa:	2300      	movs	r3, #0
}
 8011cfc:	0018      	movs	r0, r3
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	b004      	add	sp, #16
 8011d02:	bd80      	pop	{r7, pc}
 8011d04:	40022000 	.word	0x40022000

08011d08 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011d12:	4b49      	ldr	r3, [pc, #292]	@ (8011e38 <FLASH_SetErrorCode+0x130>)
 8011d14:	699a      	ldr	r2, [r3, #24]
 8011d16:	2380      	movs	r3, #128	@ 0x80
 8011d18:	005b      	lsls	r3, r3, #1
 8011d1a:	401a      	ands	r2, r3
 8011d1c:	2380      	movs	r3, #128	@ 0x80
 8011d1e:	005b      	lsls	r3, r3, #1
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d10a      	bne.n	8011d3a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011d24:	4b45      	ldr	r3, [pc, #276]	@ (8011e3c <FLASH_SetErrorCode+0x134>)
 8011d26:	695b      	ldr	r3, [r3, #20]
 8011d28:	2202      	movs	r2, #2
 8011d2a:	431a      	orrs	r2, r3
 8011d2c:	4b43      	ldr	r3, [pc, #268]	@ (8011e3c <FLASH_SetErrorCode+0x134>)
 8011d2e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2280      	movs	r2, #128	@ 0x80
 8011d34:	0052      	lsls	r2, r2, #1
 8011d36:	4313      	orrs	r3, r2
 8011d38:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8011d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8011e38 <FLASH_SetErrorCode+0x130>)
 8011d3c:	699a      	ldr	r2, [r3, #24]
 8011d3e:	2380      	movs	r3, #128	@ 0x80
 8011d40:	009b      	lsls	r3, r3, #2
 8011d42:	401a      	ands	r2, r3
 8011d44:	2380      	movs	r3, #128	@ 0x80
 8011d46:	009b      	lsls	r3, r3, #2
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d10a      	bne.n	8011d62 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8011d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8011e3c <FLASH_SetErrorCode+0x134>)
 8011d4e:	695b      	ldr	r3, [r3, #20]
 8011d50:	2201      	movs	r2, #1
 8011d52:	431a      	orrs	r2, r3
 8011d54:	4b39      	ldr	r3, [pc, #228]	@ (8011e3c <FLASH_SetErrorCode+0x134>)
 8011d56:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	2280      	movs	r2, #128	@ 0x80
 8011d5c:	0092      	lsls	r2, r2, #2
 8011d5e:	4313      	orrs	r3, r2
 8011d60:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8011d62:	4b35      	ldr	r3, [pc, #212]	@ (8011e38 <FLASH_SetErrorCode+0x130>)
 8011d64:	699a      	ldr	r2, [r3, #24]
 8011d66:	2380      	movs	r3, #128	@ 0x80
 8011d68:	00db      	lsls	r3, r3, #3
 8011d6a:	401a      	ands	r2, r3
 8011d6c:	2380      	movs	r3, #128	@ 0x80
 8011d6e:	00db      	lsls	r3, r3, #3
 8011d70:	429a      	cmp	r2, r3
 8011d72:	d10a      	bne.n	8011d8a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8011d74:	4b31      	ldr	r3, [pc, #196]	@ (8011e3c <FLASH_SetErrorCode+0x134>)
 8011d76:	695b      	ldr	r3, [r3, #20]
 8011d78:	2208      	movs	r2, #8
 8011d7a:	431a      	orrs	r2, r3
 8011d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8011e3c <FLASH_SetErrorCode+0x134>)
 8011d7e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2280      	movs	r2, #128	@ 0x80
 8011d84:	00d2      	lsls	r2, r2, #3
 8011d86:	4313      	orrs	r3, r2
 8011d88:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8011d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8011e38 <FLASH_SetErrorCode+0x130>)
 8011d8c:	699a      	ldr	r2, [r3, #24]
 8011d8e:	2380      	movs	r3, #128	@ 0x80
 8011d90:	011b      	lsls	r3, r3, #4
 8011d92:	401a      	ands	r2, r3
 8011d94:	2380      	movs	r3, #128	@ 0x80
 8011d96:	011b      	lsls	r3, r3, #4
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d10a      	bne.n	8011db2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8011d9c:	4b27      	ldr	r3, [pc, #156]	@ (8011e3c <FLASH_SetErrorCode+0x134>)
 8011d9e:	695b      	ldr	r3, [r3, #20]
 8011da0:	2204      	movs	r2, #4
 8011da2:	431a      	orrs	r2, r3
 8011da4:	4b25      	ldr	r3, [pc, #148]	@ (8011e3c <FLASH_SetErrorCode+0x134>)
 8011da6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2280      	movs	r2, #128	@ 0x80
 8011dac:	0112      	lsls	r2, r2, #4
 8011dae:	4313      	orrs	r3, r2
 8011db0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8011db2:	4b21      	ldr	r3, [pc, #132]	@ (8011e38 <FLASH_SetErrorCode+0x130>)
 8011db4:	699a      	ldr	r2, [r3, #24]
 8011db6:	2380      	movs	r3, #128	@ 0x80
 8011db8:	019b      	lsls	r3, r3, #6
 8011dba:	401a      	ands	r2, r3
 8011dbc:	2380      	movs	r3, #128	@ 0x80
 8011dbe:	019b      	lsls	r3, r3, #6
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d10a      	bne.n	8011dda <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8011dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8011e3c <FLASH_SetErrorCode+0x134>)
 8011dc6:	695b      	ldr	r3, [r3, #20]
 8011dc8:	2210      	movs	r2, #16
 8011dca:	431a      	orrs	r2, r3
 8011dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8011e3c <FLASH_SetErrorCode+0x134>)
 8011dce:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2280      	movs	r2, #128	@ 0x80
 8011dd4:	0192      	lsls	r2, r2, #6
 8011dd6:	4313      	orrs	r3, r2
 8011dd8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8011dda:	4b17      	ldr	r3, [pc, #92]	@ (8011e38 <FLASH_SetErrorCode+0x130>)
 8011ddc:	699a      	ldr	r2, [r3, #24]
 8011dde:	2380      	movs	r3, #128	@ 0x80
 8011de0:	029b      	lsls	r3, r3, #10
 8011de2:	401a      	ands	r2, r3
 8011de4:	2380      	movs	r3, #128	@ 0x80
 8011de6:	029b      	lsls	r3, r3, #10
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d109      	bne.n	8011e00 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8011dec:	4b13      	ldr	r3, [pc, #76]	@ (8011e3c <FLASH_SetErrorCode+0x134>)
 8011dee:	695b      	ldr	r3, [r3, #20]
 8011df0:	2220      	movs	r2, #32
 8011df2:	431a      	orrs	r2, r3
 8011df4:	4b11      	ldr	r3, [pc, #68]	@ (8011e3c <FLASH_SetErrorCode+0x134>)
 8011df6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2220      	movs	r2, #32
 8011dfc:	4313      	orrs	r3, r2
 8011dfe:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8011e00:	4b0d      	ldr	r3, [pc, #52]	@ (8011e38 <FLASH_SetErrorCode+0x130>)
 8011e02:	699a      	ldr	r2, [r3, #24]
 8011e04:	2380      	movs	r3, #128	@ 0x80
 8011e06:	025b      	lsls	r3, r3, #9
 8011e08:	401a      	ands	r2, r3
 8011e0a:	2380      	movs	r3, #128	@ 0x80
 8011e0c:	025b      	lsls	r3, r3, #9
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d10a      	bne.n	8011e28 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8011e12:	4b0a      	ldr	r3, [pc, #40]	@ (8011e3c <FLASH_SetErrorCode+0x134>)
 8011e14:	695b      	ldr	r3, [r3, #20]
 8011e16:	2240      	movs	r2, #64	@ 0x40
 8011e18:	431a      	orrs	r2, r3
 8011e1a:	4b08      	ldr	r3, [pc, #32]	@ (8011e3c <FLASH_SetErrorCode+0x134>)
 8011e1c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2280      	movs	r2, #128	@ 0x80
 8011e22:	0252      	lsls	r2, r2, #9
 8011e24:	4313      	orrs	r3, r2
 8011e26:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8011e28:	4b03      	ldr	r3, [pc, #12]	@ (8011e38 <FLASH_SetErrorCode+0x130>)
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	619a      	str	r2, [r3, #24]
}  
 8011e2e:	46c0      	nop			@ (mov r8, r8)
 8011e30:	46bd      	mov	sp, r7
 8011e32:	b002      	add	sp, #8
 8011e34:	bd80      	pop	{r7, pc}
 8011e36:	46c0      	nop			@ (mov r8, r8)
 8011e38:	40022000 	.word	0x40022000
 8011e3c:	20002180 	.word	0x20002180

08011e40 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8011e46:	4b12      	ldr	r3, [pc, #72]	@ (8011e90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8011e48:	685b      	ldr	r3, [r3, #4]
 8011e4a:	2201      	movs	r2, #1
 8011e4c:	4013      	ands	r3, r2
 8011e4e:	d019      	beq.n	8011e84 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e50:	f3ef 8310 	mrs	r3, PRIMASK
 8011e54:	607b      	str	r3, [r7, #4]
  return(result);
 8011e56:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8011e58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011e5a:	b672      	cpsid	i
}
 8011e5c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8011e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8011e90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8011e60:	4a0c      	ldr	r2, [pc, #48]	@ (8011e94 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8011e62:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8011e64:	4b0a      	ldr	r3, [pc, #40]	@ (8011e90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8011e66:	4a0c      	ldr	r2, [pc, #48]	@ (8011e98 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8011e68:	60da      	str	r2, [r3, #12]
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	f383 8810 	msr	PRIMASK, r3
}
 8011e74:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8011e76:	4b06      	ldr	r3, [pc, #24]	@ (8011e90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	2201      	movs	r2, #1
 8011e7c:	4013      	ands	r3, r2
 8011e7e:	d001      	beq.n	8011e84 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8011e80:	2301      	movs	r3, #1
 8011e82:	e000      	b.n	8011e86 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8011e84:	2300      	movs	r3, #0
}
 8011e86:	0018      	movs	r0, r3
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	b004      	add	sp, #16
 8011e8c:	bd80      	pop	{r7, pc}
 8011e8e:	46c0      	nop			@ (mov r8, r8)
 8011e90:	40022000 	.word	0x40022000
 8011e94:	89abcdef 	.word	0x89abcdef
 8011e98:	02030405 	.word	0x02030405

08011e9c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8011ea0:	4b04      	ldr	r3, [pc, #16]	@ (8011eb4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8011ea2:	685a      	ldr	r2, [r3, #4]
 8011ea4:	4b03      	ldr	r3, [pc, #12]	@ (8011eb4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8011ea6:	2101      	movs	r1, #1
 8011ea8:	430a      	orrs	r2, r1
 8011eaa:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8011eac:	2300      	movs	r3, #0
}
 8011eae:	0018      	movs	r0, r3
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}
 8011eb4:	40022000 	.word	0x40022000

08011eb8 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8011eb8:	b5b0      	push	{r4, r5, r7, lr}
 8011eba:	b084      	sub	sp, #16
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011ec0:	250f      	movs	r5, #15
 8011ec2:	197b      	adds	r3, r7, r5
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8011ec8:	197c      	adds	r4, r7, r5
 8011eca:	4b0f      	ldr	r3, [pc, #60]	@ (8011f08 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8011ecc:	0018      	movs	r0, r3
 8011ece:	f7ff fea9 	bl	8011c24 <FLASH_WaitForLastOperation>
 8011ed2:	0003      	movs	r3, r0
 8011ed4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8011ed6:	0029      	movs	r1, r5
 8011ed8:	187b      	adds	r3, r7, r1
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d10c      	bne.n	8011efa <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8011f0c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8011eec:	187c      	adds	r4, r7, r1
 8011eee:	4b06      	ldr	r3, [pc, #24]	@ (8011f08 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8011ef0:	0018      	movs	r0, r3
 8011ef2:	f7ff fe97 	bl	8011c24 <FLASH_WaitForLastOperation>
 8011ef6:	0003      	movs	r3, r0
 8011ef8:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8011efa:	230f      	movs	r3, #15
 8011efc:	18fb      	adds	r3, r7, r3
 8011efe:	781b      	ldrb	r3, [r3, #0]
}  
 8011f00:	0018      	movs	r0, r3
 8011f02:	46bd      	mov	sp, r7
 8011f04:	b004      	add	sp, #16
 8011f06:	bdb0      	pop	{r4, r5, r7, pc}
 8011f08:	0000c350 	.word	0x0000c350
 8011f0c:	20002180 	.word	0x20002180

08011f10 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8011f10:	b5b0      	push	{r4, r5, r7, lr}
 8011f12:	b086      	sub	sp, #24
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	60f8      	str	r0, [r7, #12]
 8011f18:	60b9      	str	r1, [r7, #8]
 8011f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011f1c:	2317      	movs	r3, #23
 8011f1e:	18fb      	adds	r3, r7, r3
 8011f20:	2201      	movs	r2, #1
 8011f22:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8011f24:	4b24      	ldr	r3, [pc, #144]	@ (8011fb8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8011f26:	7c1b      	ldrb	r3, [r3, #16]
 8011f28:	2b01      	cmp	r3, #1
 8011f2a:	d101      	bne.n	8011f30 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8011f2c:	2302      	movs	r3, #2
 8011f2e:	e03e      	b.n	8011fae <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8011f30:	4b21      	ldr	r3, [pc, #132]	@ (8011fb8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8011f32:	2201      	movs	r2, #1
 8011f34:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8011f36:	2517      	movs	r5, #23
 8011f38:	197c      	adds	r4, r7, r5
 8011f3a:	4b20      	ldr	r3, [pc, #128]	@ (8011fbc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8011f3c:	0018      	movs	r0, r3
 8011f3e:	f7ff fe71 	bl	8011c24 <FLASH_WaitForLastOperation>
 8011f42:	0003      	movs	r3, r0
 8011f44:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8011f46:	197b      	adds	r3, r7, r5
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d129      	bne.n	8011fa2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8011fb8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8011f50:	2200      	movs	r2, #0
 8011f52:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	2b02      	cmp	r3, #2
 8011f58:	d103      	bne.n	8011f62 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	687a      	ldr	r2, [r7, #4]
 8011f5e:	601a      	str	r2, [r3, #0]
 8011f60:	e013      	b.n	8011f8a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	2b01      	cmp	r3, #1
 8011f66:	d104      	bne.n	8011f72 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	687a      	ldr	r2, [r7, #4]
 8011f6c:	b292      	uxth	r2, r2
 8011f6e:	801a      	strh	r2, [r3, #0]
 8011f70:	e00b      	b.n	8011f8a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d104      	bne.n	8011f82 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	687a      	ldr	r2, [r7, #4]
 8011f7c:	b2d2      	uxtb	r2, r2
 8011f7e:	701a      	strb	r2, [r3, #0]
 8011f80:	e003      	b.n	8011f8a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8011f82:	2317      	movs	r3, #23
 8011f84:	18fb      	adds	r3, r7, r3
 8011f86:	2201      	movs	r2, #1
 8011f88:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8011f8a:	2217      	movs	r2, #23
 8011f8c:	18bb      	adds	r3, r7, r2
 8011f8e:	781b      	ldrb	r3, [r3, #0]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d106      	bne.n	8011fa2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8011f94:	18bc      	adds	r4, r7, r2
 8011f96:	4b09      	ldr	r3, [pc, #36]	@ (8011fbc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8011f98:	0018      	movs	r0, r3
 8011f9a:	f7ff fe43 	bl	8011c24 <FLASH_WaitForLastOperation>
 8011f9e:	0003      	movs	r3, r0
 8011fa0:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8011fa2:	4b05      	ldr	r3, [pc, #20]	@ (8011fb8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	741a      	strb	r2, [r3, #16]

  return status;
 8011fa8:	2317      	movs	r3, #23
 8011faa:	18fb      	adds	r3, r7, r3
 8011fac:	781b      	ldrb	r3, [r3, #0]
}
 8011fae:	0018      	movs	r0, r3
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	b006      	add	sp, #24
 8011fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8011fb6:	46c0      	nop			@ (mov r8, r8)
 8011fb8:	20002180 	.word	0x20002180
 8011fbc:	0000c350 	.word	0x0000c350

08011fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b086      	sub	sp, #24
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8011fd6:	e155      	b.n	8012284 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	2101      	movs	r1, #1
 8011fde:	697a      	ldr	r2, [r7, #20]
 8011fe0:	4091      	lsls	r1, r2
 8011fe2:	000a      	movs	r2, r1
 8011fe4:	4013      	ands	r3, r2
 8011fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d100      	bne.n	8011ff0 <HAL_GPIO_Init+0x30>
 8011fee:	e146      	b.n	801227e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	2203      	movs	r2, #3
 8011ff6:	4013      	ands	r3, r2
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d005      	beq.n	8012008 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	685b      	ldr	r3, [r3, #4]
 8012000:	2203      	movs	r2, #3
 8012002:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8012004:	2b02      	cmp	r3, #2
 8012006:	d130      	bne.n	801206a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	005b      	lsls	r3, r3, #1
 8012012:	2203      	movs	r2, #3
 8012014:	409a      	lsls	r2, r3
 8012016:	0013      	movs	r3, r2
 8012018:	43da      	mvns	r2, r3
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	4013      	ands	r3, r2
 801201e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	68da      	ldr	r2, [r3, #12]
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	005b      	lsls	r3, r3, #1
 8012028:	409a      	lsls	r2, r3
 801202a:	0013      	movs	r3, r2
 801202c:	693a      	ldr	r2, [r7, #16]
 801202e:	4313      	orrs	r3, r2
 8012030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	693a      	ldr	r2, [r7, #16]
 8012036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801203e:	2201      	movs	r2, #1
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	409a      	lsls	r2, r3
 8012044:	0013      	movs	r3, r2
 8012046:	43da      	mvns	r2, r3
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	4013      	ands	r3, r2
 801204c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	091b      	lsrs	r3, r3, #4
 8012054:	2201      	movs	r2, #1
 8012056:	401a      	ands	r2, r3
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	409a      	lsls	r2, r3
 801205c:	0013      	movs	r3, r2
 801205e:	693a      	ldr	r2, [r7, #16]
 8012060:	4313      	orrs	r3, r2
 8012062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	693a      	ldr	r2, [r7, #16]
 8012068:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	685b      	ldr	r3, [r3, #4]
 801206e:	2203      	movs	r2, #3
 8012070:	4013      	ands	r3, r2
 8012072:	2b03      	cmp	r3, #3
 8012074:	d017      	beq.n	80120a6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	68db      	ldr	r3, [r3, #12]
 801207a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	005b      	lsls	r3, r3, #1
 8012080:	2203      	movs	r2, #3
 8012082:	409a      	lsls	r2, r3
 8012084:	0013      	movs	r3, r2
 8012086:	43da      	mvns	r2, r3
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	4013      	ands	r3, r2
 801208c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	689a      	ldr	r2, [r3, #8]
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	005b      	lsls	r3, r3, #1
 8012096:	409a      	lsls	r2, r3
 8012098:	0013      	movs	r3, r2
 801209a:	693a      	ldr	r2, [r7, #16]
 801209c:	4313      	orrs	r3, r2
 801209e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	693a      	ldr	r2, [r7, #16]
 80120a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	685b      	ldr	r3, [r3, #4]
 80120aa:	2203      	movs	r2, #3
 80120ac:	4013      	ands	r3, r2
 80120ae:	2b02      	cmp	r3, #2
 80120b0:	d123      	bne.n	80120fa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	08da      	lsrs	r2, r3, #3
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	3208      	adds	r2, #8
 80120ba:	0092      	lsls	r2, r2, #2
 80120bc:	58d3      	ldr	r3, [r2, r3]
 80120be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	2207      	movs	r2, #7
 80120c4:	4013      	ands	r3, r2
 80120c6:	009b      	lsls	r3, r3, #2
 80120c8:	220f      	movs	r2, #15
 80120ca:	409a      	lsls	r2, r3
 80120cc:	0013      	movs	r3, r2
 80120ce:	43da      	mvns	r2, r3
 80120d0:	693b      	ldr	r3, [r7, #16]
 80120d2:	4013      	ands	r3, r2
 80120d4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	691a      	ldr	r2, [r3, #16]
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	2107      	movs	r1, #7
 80120de:	400b      	ands	r3, r1
 80120e0:	009b      	lsls	r3, r3, #2
 80120e2:	409a      	lsls	r2, r3
 80120e4:	0013      	movs	r3, r2
 80120e6:	693a      	ldr	r2, [r7, #16]
 80120e8:	4313      	orrs	r3, r2
 80120ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80120ec:	697b      	ldr	r3, [r7, #20]
 80120ee:	08da      	lsrs	r2, r3, #3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	3208      	adds	r2, #8
 80120f4:	0092      	lsls	r2, r2, #2
 80120f6:	6939      	ldr	r1, [r7, #16]
 80120f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8012100:	697b      	ldr	r3, [r7, #20]
 8012102:	005b      	lsls	r3, r3, #1
 8012104:	2203      	movs	r2, #3
 8012106:	409a      	lsls	r2, r3
 8012108:	0013      	movs	r3, r2
 801210a:	43da      	mvns	r2, r3
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	4013      	ands	r3, r2
 8012110:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	685b      	ldr	r3, [r3, #4]
 8012116:	2203      	movs	r2, #3
 8012118:	401a      	ands	r2, r3
 801211a:	697b      	ldr	r3, [r7, #20]
 801211c:	005b      	lsls	r3, r3, #1
 801211e:	409a      	lsls	r2, r3
 8012120:	0013      	movs	r3, r2
 8012122:	693a      	ldr	r2, [r7, #16]
 8012124:	4313      	orrs	r3, r2
 8012126:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	693a      	ldr	r2, [r7, #16]
 801212c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	685a      	ldr	r2, [r3, #4]
 8012132:	23c0      	movs	r3, #192	@ 0xc0
 8012134:	029b      	lsls	r3, r3, #10
 8012136:	4013      	ands	r3, r2
 8012138:	d100      	bne.n	801213c <HAL_GPIO_Init+0x17c>
 801213a:	e0a0      	b.n	801227e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801213c:	4b57      	ldr	r3, [pc, #348]	@ (801229c <HAL_GPIO_Init+0x2dc>)
 801213e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012140:	4b56      	ldr	r3, [pc, #344]	@ (801229c <HAL_GPIO_Init+0x2dc>)
 8012142:	2101      	movs	r1, #1
 8012144:	430a      	orrs	r2, r1
 8012146:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8012148:	4a55      	ldr	r2, [pc, #340]	@ (80122a0 <HAL_GPIO_Init+0x2e0>)
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	089b      	lsrs	r3, r3, #2
 801214e:	3302      	adds	r3, #2
 8012150:	009b      	lsls	r3, r3, #2
 8012152:	589b      	ldr	r3, [r3, r2]
 8012154:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8012156:	697b      	ldr	r3, [r7, #20]
 8012158:	2203      	movs	r2, #3
 801215a:	4013      	ands	r3, r2
 801215c:	009b      	lsls	r3, r3, #2
 801215e:	220f      	movs	r2, #15
 8012160:	409a      	lsls	r2, r3
 8012162:	0013      	movs	r3, r2
 8012164:	43da      	mvns	r2, r3
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	4013      	ands	r3, r2
 801216a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 801216c:	687a      	ldr	r2, [r7, #4]
 801216e:	23a0      	movs	r3, #160	@ 0xa0
 8012170:	05db      	lsls	r3, r3, #23
 8012172:	429a      	cmp	r2, r3
 8012174:	d01f      	beq.n	80121b6 <HAL_GPIO_Init+0x1f6>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	4a4a      	ldr	r2, [pc, #296]	@ (80122a4 <HAL_GPIO_Init+0x2e4>)
 801217a:	4293      	cmp	r3, r2
 801217c:	d019      	beq.n	80121b2 <HAL_GPIO_Init+0x1f2>
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	4a49      	ldr	r2, [pc, #292]	@ (80122a8 <HAL_GPIO_Init+0x2e8>)
 8012182:	4293      	cmp	r3, r2
 8012184:	d013      	beq.n	80121ae <HAL_GPIO_Init+0x1ee>
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	4a48      	ldr	r2, [pc, #288]	@ (80122ac <HAL_GPIO_Init+0x2ec>)
 801218a:	4293      	cmp	r3, r2
 801218c:	d00d      	beq.n	80121aa <HAL_GPIO_Init+0x1ea>
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	4a47      	ldr	r2, [pc, #284]	@ (80122b0 <HAL_GPIO_Init+0x2f0>)
 8012192:	4293      	cmp	r3, r2
 8012194:	d007      	beq.n	80121a6 <HAL_GPIO_Init+0x1e6>
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	4a46      	ldr	r2, [pc, #280]	@ (80122b4 <HAL_GPIO_Init+0x2f4>)
 801219a:	4293      	cmp	r3, r2
 801219c:	d101      	bne.n	80121a2 <HAL_GPIO_Init+0x1e2>
 801219e:	2305      	movs	r3, #5
 80121a0:	e00a      	b.n	80121b8 <HAL_GPIO_Init+0x1f8>
 80121a2:	2306      	movs	r3, #6
 80121a4:	e008      	b.n	80121b8 <HAL_GPIO_Init+0x1f8>
 80121a6:	2304      	movs	r3, #4
 80121a8:	e006      	b.n	80121b8 <HAL_GPIO_Init+0x1f8>
 80121aa:	2303      	movs	r3, #3
 80121ac:	e004      	b.n	80121b8 <HAL_GPIO_Init+0x1f8>
 80121ae:	2302      	movs	r3, #2
 80121b0:	e002      	b.n	80121b8 <HAL_GPIO_Init+0x1f8>
 80121b2:	2301      	movs	r3, #1
 80121b4:	e000      	b.n	80121b8 <HAL_GPIO_Init+0x1f8>
 80121b6:	2300      	movs	r3, #0
 80121b8:	697a      	ldr	r2, [r7, #20]
 80121ba:	2103      	movs	r1, #3
 80121bc:	400a      	ands	r2, r1
 80121be:	0092      	lsls	r2, r2, #2
 80121c0:	4093      	lsls	r3, r2
 80121c2:	693a      	ldr	r2, [r7, #16]
 80121c4:	4313      	orrs	r3, r2
 80121c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80121c8:	4935      	ldr	r1, [pc, #212]	@ (80122a0 <HAL_GPIO_Init+0x2e0>)
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	089b      	lsrs	r3, r3, #2
 80121ce:	3302      	adds	r3, #2
 80121d0:	009b      	lsls	r3, r3, #2
 80121d2:	693a      	ldr	r2, [r7, #16]
 80121d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80121d6:	4b38      	ldr	r3, [pc, #224]	@ (80122b8 <HAL_GPIO_Init+0x2f8>)
 80121d8:	689b      	ldr	r3, [r3, #8]
 80121da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	43da      	mvns	r2, r3
 80121e0:	693b      	ldr	r3, [r7, #16]
 80121e2:	4013      	ands	r3, r2
 80121e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	685a      	ldr	r2, [r3, #4]
 80121ea:	2380      	movs	r3, #128	@ 0x80
 80121ec:	035b      	lsls	r3, r3, #13
 80121ee:	4013      	ands	r3, r2
 80121f0:	d003      	beq.n	80121fa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80121f2:	693a      	ldr	r2, [r7, #16]
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	4313      	orrs	r3, r2
 80121f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80121fa:	4b2f      	ldr	r3, [pc, #188]	@ (80122b8 <HAL_GPIO_Init+0x2f8>)
 80121fc:	693a      	ldr	r2, [r7, #16]
 80121fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8012200:	4b2d      	ldr	r3, [pc, #180]	@ (80122b8 <HAL_GPIO_Init+0x2f8>)
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	43da      	mvns	r2, r3
 801220a:	693b      	ldr	r3, [r7, #16]
 801220c:	4013      	ands	r3, r2
 801220e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	685a      	ldr	r2, [r3, #4]
 8012214:	2380      	movs	r3, #128	@ 0x80
 8012216:	039b      	lsls	r3, r3, #14
 8012218:	4013      	ands	r3, r2
 801221a:	d003      	beq.n	8012224 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 801221c:	693a      	ldr	r2, [r7, #16]
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	4313      	orrs	r3, r2
 8012222:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8012224:	4b24      	ldr	r3, [pc, #144]	@ (80122b8 <HAL_GPIO_Init+0x2f8>)
 8012226:	693a      	ldr	r2, [r7, #16]
 8012228:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 801222a:	4b23      	ldr	r3, [pc, #140]	@ (80122b8 <HAL_GPIO_Init+0x2f8>)
 801222c:	685b      	ldr	r3, [r3, #4]
 801222e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	43da      	mvns	r2, r3
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	4013      	ands	r3, r2
 8012238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	685a      	ldr	r2, [r3, #4]
 801223e:	2380      	movs	r3, #128	@ 0x80
 8012240:	029b      	lsls	r3, r3, #10
 8012242:	4013      	ands	r3, r2
 8012244:	d003      	beq.n	801224e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8012246:	693a      	ldr	r2, [r7, #16]
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	4313      	orrs	r3, r2
 801224c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 801224e:	4b1a      	ldr	r3, [pc, #104]	@ (80122b8 <HAL_GPIO_Init+0x2f8>)
 8012250:	693a      	ldr	r2, [r7, #16]
 8012252:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012254:	4b18      	ldr	r3, [pc, #96]	@ (80122b8 <HAL_GPIO_Init+0x2f8>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	43da      	mvns	r2, r3
 801225e:	693b      	ldr	r3, [r7, #16]
 8012260:	4013      	ands	r3, r2
 8012262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	685a      	ldr	r2, [r3, #4]
 8012268:	2380      	movs	r3, #128	@ 0x80
 801226a:	025b      	lsls	r3, r3, #9
 801226c:	4013      	ands	r3, r2
 801226e:	d003      	beq.n	8012278 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8012270:	693a      	ldr	r2, [r7, #16]
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	4313      	orrs	r3, r2
 8012276:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8012278:	4b0f      	ldr	r3, [pc, #60]	@ (80122b8 <HAL_GPIO_Init+0x2f8>)
 801227a:	693a      	ldr	r2, [r7, #16]
 801227c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	3301      	adds	r3, #1
 8012282:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	681a      	ldr	r2, [r3, #0]
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	40da      	lsrs	r2, r3
 801228c:	1e13      	subs	r3, r2, #0
 801228e:	d000      	beq.n	8012292 <HAL_GPIO_Init+0x2d2>
 8012290:	e6a2      	b.n	8011fd8 <HAL_GPIO_Init+0x18>
  }
}
 8012292:	46c0      	nop			@ (mov r8, r8)
 8012294:	46c0      	nop			@ (mov r8, r8)
 8012296:	46bd      	mov	sp, r7
 8012298:	b006      	add	sp, #24
 801229a:	bd80      	pop	{r7, pc}
 801229c:	40021000 	.word	0x40021000
 80122a0:	40010000 	.word	0x40010000
 80122a4:	50000400 	.word	0x50000400
 80122a8:	50000800 	.word	0x50000800
 80122ac:	50000c00 	.word	0x50000c00
 80122b0:	50001000 	.word	0x50001000
 80122b4:	50001c00 	.word	0x50001c00
 80122b8:	40010400 	.word	0x40010400

080122bc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b084      	sub	sp, #16
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
 80122c4:	000a      	movs	r2, r1
 80122c6:	1cbb      	adds	r3, r7, #2
 80122c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	691b      	ldr	r3, [r3, #16]
 80122ce:	1cba      	adds	r2, r7, #2
 80122d0:	8812      	ldrh	r2, [r2, #0]
 80122d2:	4013      	ands	r3, r2
 80122d4:	d004      	beq.n	80122e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80122d6:	230f      	movs	r3, #15
 80122d8:	18fb      	adds	r3, r7, r3
 80122da:	2201      	movs	r2, #1
 80122dc:	701a      	strb	r2, [r3, #0]
 80122de:	e003      	b.n	80122e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80122e0:	230f      	movs	r3, #15
 80122e2:	18fb      	adds	r3, r7, r3
 80122e4:	2200      	movs	r2, #0
 80122e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80122e8:	230f      	movs	r3, #15
 80122ea:	18fb      	adds	r3, r7, r3
 80122ec:	781b      	ldrb	r3, [r3, #0]
}
 80122ee:	0018      	movs	r0, r3
 80122f0:	46bd      	mov	sp, r7
 80122f2:	b004      	add	sp, #16
 80122f4:	bd80      	pop	{r7, pc}

080122f6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80122f6:	b580      	push	{r7, lr}
 80122f8:	b082      	sub	sp, #8
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
 80122fe:	0008      	movs	r0, r1
 8012300:	0011      	movs	r1, r2
 8012302:	1cbb      	adds	r3, r7, #2
 8012304:	1c02      	adds	r2, r0, #0
 8012306:	801a      	strh	r2, [r3, #0]
 8012308:	1c7b      	adds	r3, r7, #1
 801230a:	1c0a      	adds	r2, r1, #0
 801230c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801230e:	1c7b      	adds	r3, r7, #1
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d004      	beq.n	8012320 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012316:	1cbb      	adds	r3, r7, #2
 8012318:	881a      	ldrh	r2, [r3, #0]
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 801231e:	e003      	b.n	8012328 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8012320:	1cbb      	adds	r3, r7, #2
 8012322:	881a      	ldrh	r2, [r3, #0]
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8012328:	46c0      	nop			@ (mov r8, r8)
 801232a:	46bd      	mov	sp, r7
 801232c:	b002      	add	sp, #8
 801232e:	bd80      	pop	{r7, pc}

08012330 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b082      	sub	sp, #8
 8012334:	af00      	add	r7, sp, #0
 8012336:	0002      	movs	r2, r0
 8012338:	1dbb      	adds	r3, r7, #6
 801233a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801233c:	4b09      	ldr	r3, [pc, #36]	@ (8012364 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801233e:	695b      	ldr	r3, [r3, #20]
 8012340:	1dba      	adds	r2, r7, #6
 8012342:	8812      	ldrh	r2, [r2, #0]
 8012344:	4013      	ands	r3, r2
 8012346:	d008      	beq.n	801235a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8012348:	4b06      	ldr	r3, [pc, #24]	@ (8012364 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801234a:	1dba      	adds	r2, r7, #6
 801234c:	8812      	ldrh	r2, [r2, #0]
 801234e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8012350:	1dbb      	adds	r3, r7, #6
 8012352:	881b      	ldrh	r3, [r3, #0]
 8012354:	0018      	movs	r0, r3
 8012356:	f7f7 fe77 	bl	800a048 <HAL_GPIO_EXTI_Callback>
  }
}
 801235a:	46c0      	nop			@ (mov r8, r8)
 801235c:	46bd      	mov	sp, r7
 801235e:	b002      	add	sp, #8
 8012360:	bd80      	pop	{r7, pc}
 8012362:	46c0      	nop			@ (mov r8, r8)
 8012364:	40010400 	.word	0x40010400

08012368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d101      	bne.n	801237a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012376:	2301      	movs	r3, #1
 8012378:	e082      	b.n	8012480 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2241      	movs	r2, #65	@ 0x41
 801237e:	5c9b      	ldrb	r3, [r3, r2]
 8012380:	b2db      	uxtb	r3, r3
 8012382:	2b00      	cmp	r3, #0
 8012384:	d107      	bne.n	8012396 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2240      	movs	r2, #64	@ 0x40
 801238a:	2100      	movs	r1, #0
 801238c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	0018      	movs	r0, r3
 8012392:	f7f7 f94f 	bl	8009634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2241      	movs	r2, #65	@ 0x41
 801239a:	2124      	movs	r1, #36	@ 0x24
 801239c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	2101      	movs	r1, #1
 80123aa:	438a      	bics	r2, r1
 80123ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	685a      	ldr	r2, [r3, #4]
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	4934      	ldr	r1, [pc, #208]	@ (8012488 <HAL_I2C_Init+0x120>)
 80123b8:	400a      	ands	r2, r1
 80123ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	689a      	ldr	r2, [r3, #8]
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	4931      	ldr	r1, [pc, #196]	@ (801248c <HAL_I2C_Init+0x124>)
 80123c8:	400a      	ands	r2, r1
 80123ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	68db      	ldr	r3, [r3, #12]
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d108      	bne.n	80123e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	689a      	ldr	r2, [r3, #8]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	2180      	movs	r1, #128	@ 0x80
 80123de:	0209      	lsls	r1, r1, #8
 80123e0:	430a      	orrs	r2, r1
 80123e2:	609a      	str	r2, [r3, #8]
 80123e4:	e007      	b.n	80123f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	689a      	ldr	r2, [r3, #8]
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	2184      	movs	r1, #132	@ 0x84
 80123f0:	0209      	lsls	r1, r1, #8
 80123f2:	430a      	orrs	r2, r1
 80123f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	68db      	ldr	r3, [r3, #12]
 80123fa:	2b02      	cmp	r3, #2
 80123fc:	d104      	bne.n	8012408 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	2280      	movs	r2, #128	@ 0x80
 8012404:	0112      	lsls	r2, r2, #4
 8012406:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	685a      	ldr	r2, [r3, #4]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	491f      	ldr	r1, [pc, #124]	@ (8012490 <HAL_I2C_Init+0x128>)
 8012414:	430a      	orrs	r2, r1
 8012416:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	68da      	ldr	r2, [r3, #12]
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	491a      	ldr	r1, [pc, #104]	@ (801248c <HAL_I2C_Init+0x124>)
 8012424:	400a      	ands	r2, r1
 8012426:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	691a      	ldr	r2, [r3, #16]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	695b      	ldr	r3, [r3, #20]
 8012430:	431a      	orrs	r2, r3
 8012432:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	699b      	ldr	r3, [r3, #24]
 8012438:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	430a      	orrs	r2, r1
 8012440:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	69d9      	ldr	r1, [r3, #28]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6a1a      	ldr	r2, [r3, #32]
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	430a      	orrs	r2, r1
 8012450:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	681a      	ldr	r2, [r3, #0]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	2101      	movs	r1, #1
 801245e:	430a      	orrs	r2, r1
 8012460:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2200      	movs	r2, #0
 8012466:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2241      	movs	r2, #65	@ 0x41
 801246c:	2120      	movs	r1, #32
 801246e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2242      	movs	r2, #66	@ 0x42
 801247a:	2100      	movs	r1, #0
 801247c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801247e:	2300      	movs	r3, #0
}
 8012480:	0018      	movs	r0, r3
 8012482:	46bd      	mov	sp, r7
 8012484:	b002      	add	sp, #8
 8012486:	bd80      	pop	{r7, pc}
 8012488:	f0ffffff 	.word	0xf0ffffff
 801248c:	ffff7fff 	.word	0xffff7fff
 8012490:	02008000 	.word	0x02008000

08012494 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8012494:	b590      	push	{r4, r7, lr}
 8012496:	b089      	sub	sp, #36	@ 0x24
 8012498:	af02      	add	r7, sp, #8
 801249a:	60f8      	str	r0, [r7, #12]
 801249c:	0008      	movs	r0, r1
 801249e:	607a      	str	r2, [r7, #4]
 80124a0:	0019      	movs	r1, r3
 80124a2:	230a      	movs	r3, #10
 80124a4:	18fb      	adds	r3, r7, r3
 80124a6:	1c02      	adds	r2, r0, #0
 80124a8:	801a      	strh	r2, [r3, #0]
 80124aa:	2308      	movs	r3, #8
 80124ac:	18fb      	adds	r3, r7, r3
 80124ae:	1c0a      	adds	r2, r1, #0
 80124b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	2241      	movs	r2, #65	@ 0x41
 80124b6:	5c9b      	ldrb	r3, [r3, r2]
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	2b20      	cmp	r3, #32
 80124bc:	d000      	beq.n	80124c0 <HAL_I2C_Master_Transmit+0x2c>
 80124be:	e0e7      	b.n	8012690 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	2240      	movs	r2, #64	@ 0x40
 80124c4:	5c9b      	ldrb	r3, [r3, r2]
 80124c6:	2b01      	cmp	r3, #1
 80124c8:	d101      	bne.n	80124ce <HAL_I2C_Master_Transmit+0x3a>
 80124ca:	2302      	movs	r3, #2
 80124cc:	e0e1      	b.n	8012692 <HAL_I2C_Master_Transmit+0x1fe>
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	2240      	movs	r2, #64	@ 0x40
 80124d2:	2101      	movs	r1, #1
 80124d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80124d6:	f7fe fc7d 	bl	8010dd4 <HAL_GetTick>
 80124da:	0003      	movs	r3, r0
 80124dc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80124de:	2380      	movs	r3, #128	@ 0x80
 80124e0:	0219      	lsls	r1, r3, #8
 80124e2:	68f8      	ldr	r0, [r7, #12]
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	9300      	str	r3, [sp, #0]
 80124e8:	2319      	movs	r3, #25
 80124ea:	2201      	movs	r2, #1
 80124ec:	f002 fa30 	bl	8014950 <I2C_WaitOnFlagUntilTimeout>
 80124f0:	1e03      	subs	r3, r0, #0
 80124f2:	d001      	beq.n	80124f8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80124f4:	2301      	movs	r3, #1
 80124f6:	e0cc      	b.n	8012692 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	2241      	movs	r2, #65	@ 0x41
 80124fc:	2121      	movs	r1, #33	@ 0x21
 80124fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	2242      	movs	r2, #66	@ 0x42
 8012504:	2110      	movs	r1, #16
 8012506:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	2200      	movs	r2, #0
 801250c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	687a      	ldr	r2, [r7, #4]
 8012512:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	2208      	movs	r2, #8
 8012518:	18ba      	adds	r2, r7, r2
 801251a:	8812      	ldrh	r2, [r2, #0]
 801251c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	2200      	movs	r2, #0
 8012522:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012528:	b29b      	uxth	r3, r3
 801252a:	2bff      	cmp	r3, #255	@ 0xff
 801252c:	d911      	bls.n	8012552 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	22ff      	movs	r2, #255	@ 0xff
 8012532:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012538:	b2da      	uxtb	r2, r3
 801253a:	2380      	movs	r3, #128	@ 0x80
 801253c:	045c      	lsls	r4, r3, #17
 801253e:	230a      	movs	r3, #10
 8012540:	18fb      	adds	r3, r7, r3
 8012542:	8819      	ldrh	r1, [r3, #0]
 8012544:	68f8      	ldr	r0, [r7, #12]
 8012546:	4b55      	ldr	r3, [pc, #340]	@ (801269c <HAL_I2C_Master_Transmit+0x208>)
 8012548:	9300      	str	r3, [sp, #0]
 801254a:	0023      	movs	r3, r4
 801254c:	f002 fc52 	bl	8014df4 <I2C_TransferConfig>
 8012550:	e075      	b.n	801263e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012556:	b29a      	uxth	r2, r3
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012560:	b2da      	uxtb	r2, r3
 8012562:	2380      	movs	r3, #128	@ 0x80
 8012564:	049c      	lsls	r4, r3, #18
 8012566:	230a      	movs	r3, #10
 8012568:	18fb      	adds	r3, r7, r3
 801256a:	8819      	ldrh	r1, [r3, #0]
 801256c:	68f8      	ldr	r0, [r7, #12]
 801256e:	4b4b      	ldr	r3, [pc, #300]	@ (801269c <HAL_I2C_Master_Transmit+0x208>)
 8012570:	9300      	str	r3, [sp, #0]
 8012572:	0023      	movs	r3, r4
 8012574:	f002 fc3e 	bl	8014df4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8012578:	e061      	b.n	801263e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801257a:	697a      	ldr	r2, [r7, #20]
 801257c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	0018      	movs	r0, r3
 8012582:	f002 fa33 	bl	80149ec <I2C_WaitOnTXISFlagUntilTimeout>
 8012586:	1e03      	subs	r3, r0, #0
 8012588:	d001      	beq.n	801258e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 801258a:	2301      	movs	r3, #1
 801258c:	e081      	b.n	8012692 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012592:	781a      	ldrb	r2, [r3, #0]
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801259e:	1c5a      	adds	r2, r3, #1
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80125a8:	b29b      	uxth	r3, r3
 80125aa:	3b01      	subs	r3, #1
 80125ac:	b29a      	uxth	r2, r3
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80125b6:	3b01      	subs	r3, #1
 80125b8:	b29a      	uxth	r2, r3
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80125c2:	b29b      	uxth	r3, r3
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d03a      	beq.n	801263e <HAL_I2C_Master_Transmit+0x1aa>
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d136      	bne.n	801263e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80125d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80125d2:	68f8      	ldr	r0, [r7, #12]
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	9300      	str	r3, [sp, #0]
 80125d8:	0013      	movs	r3, r2
 80125da:	2200      	movs	r2, #0
 80125dc:	2180      	movs	r1, #128	@ 0x80
 80125de:	f002 f9b7 	bl	8014950 <I2C_WaitOnFlagUntilTimeout>
 80125e2:	1e03      	subs	r3, r0, #0
 80125e4:	d001      	beq.n	80125ea <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80125e6:	2301      	movs	r3, #1
 80125e8:	e053      	b.n	8012692 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80125ee:	b29b      	uxth	r3, r3
 80125f0:	2bff      	cmp	r3, #255	@ 0xff
 80125f2:	d911      	bls.n	8012618 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	22ff      	movs	r2, #255	@ 0xff
 80125f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80125fe:	b2da      	uxtb	r2, r3
 8012600:	2380      	movs	r3, #128	@ 0x80
 8012602:	045c      	lsls	r4, r3, #17
 8012604:	230a      	movs	r3, #10
 8012606:	18fb      	adds	r3, r7, r3
 8012608:	8819      	ldrh	r1, [r3, #0]
 801260a:	68f8      	ldr	r0, [r7, #12]
 801260c:	2300      	movs	r3, #0
 801260e:	9300      	str	r3, [sp, #0]
 8012610:	0023      	movs	r3, r4
 8012612:	f002 fbef 	bl	8014df4 <I2C_TransferConfig>
 8012616:	e012      	b.n	801263e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801261c:	b29a      	uxth	r2, r3
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012626:	b2da      	uxtb	r2, r3
 8012628:	2380      	movs	r3, #128	@ 0x80
 801262a:	049c      	lsls	r4, r3, #18
 801262c:	230a      	movs	r3, #10
 801262e:	18fb      	adds	r3, r7, r3
 8012630:	8819      	ldrh	r1, [r3, #0]
 8012632:	68f8      	ldr	r0, [r7, #12]
 8012634:	2300      	movs	r3, #0
 8012636:	9300      	str	r3, [sp, #0]
 8012638:	0023      	movs	r3, r4
 801263a:	f002 fbdb 	bl	8014df4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012642:	b29b      	uxth	r3, r3
 8012644:	2b00      	cmp	r3, #0
 8012646:	d198      	bne.n	801257a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012648:	697a      	ldr	r2, [r7, #20]
 801264a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	0018      	movs	r0, r3
 8012650:	f002 fa12 	bl	8014a78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012654:	1e03      	subs	r3, r0, #0
 8012656:	d001      	beq.n	801265c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8012658:	2301      	movs	r3, #1
 801265a:	e01a      	b.n	8012692 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	2220      	movs	r2, #32
 8012662:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	685a      	ldr	r2, [r3, #4]
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	490c      	ldr	r1, [pc, #48]	@ (80126a0 <HAL_I2C_Master_Transmit+0x20c>)
 8012670:	400a      	ands	r2, r1
 8012672:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2241      	movs	r2, #65	@ 0x41
 8012678:	2120      	movs	r1, #32
 801267a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	2242      	movs	r2, #66	@ 0x42
 8012680:	2100      	movs	r1, #0
 8012682:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2240      	movs	r2, #64	@ 0x40
 8012688:	2100      	movs	r1, #0
 801268a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801268c:	2300      	movs	r3, #0
 801268e:	e000      	b.n	8012692 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8012690:	2302      	movs	r3, #2
  }
}
 8012692:	0018      	movs	r0, r3
 8012694:	46bd      	mov	sp, r7
 8012696:	b007      	add	sp, #28
 8012698:	bd90      	pop	{r4, r7, pc}
 801269a:	46c0      	nop			@ (mov r8, r8)
 801269c:	80002000 	.word	0x80002000
 80126a0:	fe00e800 	.word	0xfe00e800

080126a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80126a4:	b590      	push	{r4, r7, lr}
 80126a6:	b089      	sub	sp, #36	@ 0x24
 80126a8:	af02      	add	r7, sp, #8
 80126aa:	60f8      	str	r0, [r7, #12]
 80126ac:	0008      	movs	r0, r1
 80126ae:	607a      	str	r2, [r7, #4]
 80126b0:	0019      	movs	r1, r3
 80126b2:	230a      	movs	r3, #10
 80126b4:	18fb      	adds	r3, r7, r3
 80126b6:	1c02      	adds	r2, r0, #0
 80126b8:	801a      	strh	r2, [r3, #0]
 80126ba:	2308      	movs	r3, #8
 80126bc:	18fb      	adds	r3, r7, r3
 80126be:	1c0a      	adds	r2, r1, #0
 80126c0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2241      	movs	r2, #65	@ 0x41
 80126c6:	5c9b      	ldrb	r3, [r3, r2]
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	2b20      	cmp	r3, #32
 80126cc:	d000      	beq.n	80126d0 <HAL_I2C_Master_Receive+0x2c>
 80126ce:	e0e8      	b.n	80128a2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	2240      	movs	r2, #64	@ 0x40
 80126d4:	5c9b      	ldrb	r3, [r3, r2]
 80126d6:	2b01      	cmp	r3, #1
 80126d8:	d101      	bne.n	80126de <HAL_I2C_Master_Receive+0x3a>
 80126da:	2302      	movs	r3, #2
 80126dc:	e0e2      	b.n	80128a4 <HAL_I2C_Master_Receive+0x200>
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	2240      	movs	r2, #64	@ 0x40
 80126e2:	2101      	movs	r1, #1
 80126e4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80126e6:	f7fe fb75 	bl	8010dd4 <HAL_GetTick>
 80126ea:	0003      	movs	r3, r0
 80126ec:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80126ee:	2380      	movs	r3, #128	@ 0x80
 80126f0:	0219      	lsls	r1, r3, #8
 80126f2:	68f8      	ldr	r0, [r7, #12]
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	9300      	str	r3, [sp, #0]
 80126f8:	2319      	movs	r3, #25
 80126fa:	2201      	movs	r2, #1
 80126fc:	f002 f928 	bl	8014950 <I2C_WaitOnFlagUntilTimeout>
 8012700:	1e03      	subs	r3, r0, #0
 8012702:	d001      	beq.n	8012708 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8012704:	2301      	movs	r3, #1
 8012706:	e0cd      	b.n	80128a4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	2241      	movs	r2, #65	@ 0x41
 801270c:	2122      	movs	r1, #34	@ 0x22
 801270e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	2242      	movs	r2, #66	@ 0x42
 8012714:	2110      	movs	r1, #16
 8012716:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	2200      	movs	r2, #0
 801271c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	687a      	ldr	r2, [r7, #4]
 8012722:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2208      	movs	r2, #8
 8012728:	18ba      	adds	r2, r7, r2
 801272a:	8812      	ldrh	r2, [r2, #0]
 801272c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2200      	movs	r2, #0
 8012732:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012738:	b29b      	uxth	r3, r3
 801273a:	2bff      	cmp	r3, #255	@ 0xff
 801273c:	d911      	bls.n	8012762 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	22ff      	movs	r2, #255	@ 0xff
 8012742:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012748:	b2da      	uxtb	r2, r3
 801274a:	2380      	movs	r3, #128	@ 0x80
 801274c:	045c      	lsls	r4, r3, #17
 801274e:	230a      	movs	r3, #10
 8012750:	18fb      	adds	r3, r7, r3
 8012752:	8819      	ldrh	r1, [r3, #0]
 8012754:	68f8      	ldr	r0, [r7, #12]
 8012756:	4b55      	ldr	r3, [pc, #340]	@ (80128ac <HAL_I2C_Master_Receive+0x208>)
 8012758:	9300      	str	r3, [sp, #0]
 801275a:	0023      	movs	r3, r4
 801275c:	f002 fb4a 	bl	8014df4 <I2C_TransferConfig>
 8012760:	e076      	b.n	8012850 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012766:	b29a      	uxth	r2, r3
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012770:	b2da      	uxtb	r2, r3
 8012772:	2380      	movs	r3, #128	@ 0x80
 8012774:	049c      	lsls	r4, r3, #18
 8012776:	230a      	movs	r3, #10
 8012778:	18fb      	adds	r3, r7, r3
 801277a:	8819      	ldrh	r1, [r3, #0]
 801277c:	68f8      	ldr	r0, [r7, #12]
 801277e:	4b4b      	ldr	r3, [pc, #300]	@ (80128ac <HAL_I2C_Master_Receive+0x208>)
 8012780:	9300      	str	r3, [sp, #0]
 8012782:	0023      	movs	r3, r4
 8012784:	f002 fb36 	bl	8014df4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8012788:	e062      	b.n	8012850 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801278a:	697a      	ldr	r2, [r7, #20]
 801278c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	0018      	movs	r0, r3
 8012792:	f002 f9b5 	bl	8014b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012796:	1e03      	subs	r3, r0, #0
 8012798:	d001      	beq.n	801279e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801279a:	2301      	movs	r3, #1
 801279c:	e082      	b.n	80128a4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127a8:	b2d2      	uxtb	r2, r2
 80127aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127b0:	1c5a      	adds	r2, r3, #1
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80127ba:	3b01      	subs	r3, #1
 80127bc:	b29a      	uxth	r2, r3
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80127c6:	b29b      	uxth	r3, r3
 80127c8:	3b01      	subs	r3, #1
 80127ca:	b29a      	uxth	r2, r3
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80127d4:	b29b      	uxth	r3, r3
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d03a      	beq.n	8012850 <HAL_I2C_Master_Receive+0x1ac>
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d136      	bne.n	8012850 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80127e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127e4:	68f8      	ldr	r0, [r7, #12]
 80127e6:	697b      	ldr	r3, [r7, #20]
 80127e8:	9300      	str	r3, [sp, #0]
 80127ea:	0013      	movs	r3, r2
 80127ec:	2200      	movs	r2, #0
 80127ee:	2180      	movs	r1, #128	@ 0x80
 80127f0:	f002 f8ae 	bl	8014950 <I2C_WaitOnFlagUntilTimeout>
 80127f4:	1e03      	subs	r3, r0, #0
 80127f6:	d001      	beq.n	80127fc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80127f8:	2301      	movs	r3, #1
 80127fa:	e053      	b.n	80128a4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012800:	b29b      	uxth	r3, r3
 8012802:	2bff      	cmp	r3, #255	@ 0xff
 8012804:	d911      	bls.n	801282a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	22ff      	movs	r2, #255	@ 0xff
 801280a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012810:	b2da      	uxtb	r2, r3
 8012812:	2380      	movs	r3, #128	@ 0x80
 8012814:	045c      	lsls	r4, r3, #17
 8012816:	230a      	movs	r3, #10
 8012818:	18fb      	adds	r3, r7, r3
 801281a:	8819      	ldrh	r1, [r3, #0]
 801281c:	68f8      	ldr	r0, [r7, #12]
 801281e:	2300      	movs	r3, #0
 8012820:	9300      	str	r3, [sp, #0]
 8012822:	0023      	movs	r3, r4
 8012824:	f002 fae6 	bl	8014df4 <I2C_TransferConfig>
 8012828:	e012      	b.n	8012850 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801282e:	b29a      	uxth	r2, r3
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012838:	b2da      	uxtb	r2, r3
 801283a:	2380      	movs	r3, #128	@ 0x80
 801283c:	049c      	lsls	r4, r3, #18
 801283e:	230a      	movs	r3, #10
 8012840:	18fb      	adds	r3, r7, r3
 8012842:	8819      	ldrh	r1, [r3, #0]
 8012844:	68f8      	ldr	r0, [r7, #12]
 8012846:	2300      	movs	r3, #0
 8012848:	9300      	str	r3, [sp, #0]
 801284a:	0023      	movs	r3, r4
 801284c:	f002 fad2 	bl	8014df4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012854:	b29b      	uxth	r3, r3
 8012856:	2b00      	cmp	r3, #0
 8012858:	d197      	bne.n	801278a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801285a:	697a      	ldr	r2, [r7, #20]
 801285c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	0018      	movs	r0, r3
 8012862:	f002 f909 	bl	8014a78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012866:	1e03      	subs	r3, r0, #0
 8012868:	d001      	beq.n	801286e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 801286a:	2301      	movs	r3, #1
 801286c:	e01a      	b.n	80128a4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	2220      	movs	r2, #32
 8012874:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	685a      	ldr	r2, [r3, #4]
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	490b      	ldr	r1, [pc, #44]	@ (80128b0 <HAL_I2C_Master_Receive+0x20c>)
 8012882:	400a      	ands	r2, r1
 8012884:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2241      	movs	r2, #65	@ 0x41
 801288a:	2120      	movs	r1, #32
 801288c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	2242      	movs	r2, #66	@ 0x42
 8012892:	2100      	movs	r1, #0
 8012894:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	2240      	movs	r2, #64	@ 0x40
 801289a:	2100      	movs	r1, #0
 801289c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801289e:	2300      	movs	r3, #0
 80128a0:	e000      	b.n	80128a4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80128a2:	2302      	movs	r3, #2
  }
}
 80128a4:	0018      	movs	r0, r3
 80128a6:	46bd      	mov	sp, r7
 80128a8:	b007      	add	sp, #28
 80128aa:	bd90      	pop	{r4, r7, pc}
 80128ac:	80002400 	.word	0x80002400
 80128b0:	fe00e800 	.word	0xfe00e800

080128b4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80128b4:	b5b0      	push	{r4, r5, r7, lr}
 80128b6:	b088      	sub	sp, #32
 80128b8:	af02      	add	r7, sp, #8
 80128ba:	60f8      	str	r0, [r7, #12]
 80128bc:	0008      	movs	r0, r1
 80128be:	607a      	str	r2, [r7, #4]
 80128c0:	0019      	movs	r1, r3
 80128c2:	230a      	movs	r3, #10
 80128c4:	18fb      	adds	r3, r7, r3
 80128c6:	1c02      	adds	r2, r0, #0
 80128c8:	801a      	strh	r2, [r3, #0]
 80128ca:	2308      	movs	r3, #8
 80128cc:	18fb      	adds	r3, r7, r3
 80128ce:	1c0a      	adds	r2, r1, #0
 80128d0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	2241      	movs	r2, #65	@ 0x41
 80128d6:	5c9b      	ldrb	r3, [r3, r2]
 80128d8:	b2db      	uxtb	r3, r3
 80128da:	2b20      	cmp	r3, #32
 80128dc:	d000      	beq.n	80128e0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 80128de:	e0dd      	b.n	8012a9c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	699a      	ldr	r2, [r3, #24]
 80128e6:	2380      	movs	r3, #128	@ 0x80
 80128e8:	021b      	lsls	r3, r3, #8
 80128ea:	401a      	ands	r2, r3
 80128ec:	2380      	movs	r3, #128	@ 0x80
 80128ee:	021b      	lsls	r3, r3, #8
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d101      	bne.n	80128f8 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80128f4:	2302      	movs	r3, #2
 80128f6:	e0d2      	b.n	8012a9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	2240      	movs	r2, #64	@ 0x40
 80128fc:	5c9b      	ldrb	r3, [r3, r2]
 80128fe:	2b01      	cmp	r3, #1
 8012900:	d101      	bne.n	8012906 <HAL_I2C_Master_Transmit_DMA+0x52>
 8012902:	2302      	movs	r3, #2
 8012904:	e0cb      	b.n	8012a9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	2240      	movs	r2, #64	@ 0x40
 801290a:	2101      	movs	r1, #1
 801290c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	2241      	movs	r2, #65	@ 0x41
 8012912:	2121      	movs	r1, #33	@ 0x21
 8012914:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	2242      	movs	r2, #66	@ 0x42
 801291a:	2110      	movs	r1, #16
 801291c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	2200      	movs	r2, #0
 8012922:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	2208      	movs	r2, #8
 801292e:	18ba      	adds	r2, r7, r2
 8012930:	8812      	ldrh	r2, [r2, #0]
 8012932:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	4a5c      	ldr	r2, [pc, #368]	@ (8012aa8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8012938:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	4a5b      	ldr	r2, [pc, #364]	@ (8012aac <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 801293e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012944:	b29b      	uxth	r3, r3
 8012946:	2bff      	cmp	r3, #255	@ 0xff
 8012948:	d906      	bls.n	8012958 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	22ff      	movs	r2, #255	@ 0xff
 801294e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8012950:	2380      	movs	r3, #128	@ 0x80
 8012952:	045b      	lsls	r3, r3, #17
 8012954:	617b      	str	r3, [r7, #20]
 8012956:	e007      	b.n	8012968 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801295c:	b29a      	uxth	r2, r3
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8012962:	2380      	movs	r3, #128	@ 0x80
 8012964:	049b      	lsls	r3, r3, #18
 8012966:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801296c:	2b00      	cmp	r3, #0
 801296e:	d100      	bne.n	8012972 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8012970:	e078      	b.n	8012a64 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012976:	2b00      	cmp	r3, #0
 8012978:	d023      	beq.n	80129c2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801297e:	4a4c      	ldr	r2, [pc, #304]	@ (8012ab0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8012980:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012986:	4a4b      	ldr	r2, [pc, #300]	@ (8012ab4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8012988:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801298e:	2200      	movs	r2, #0
 8012990:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012996:	2200      	movs	r2, #0
 8012998:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801299e:	6879      	ldr	r1, [r7, #4]
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	3328      	adds	r3, #40	@ 0x28
 80129a6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80129ac:	2513      	movs	r5, #19
 80129ae:	197c      	adds	r4, r7, r5
 80129b0:	f7fe ff62 	bl	8011878 <HAL_DMA_Start_IT>
 80129b4:	0003      	movs	r3, r0
 80129b6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80129b8:	197b      	adds	r3, r7, r5
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d13d      	bne.n	8012a3c <HAL_I2C_Master_Transmit_DMA+0x188>
 80129c0:	e013      	b.n	80129ea <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	2241      	movs	r2, #65	@ 0x41
 80129c6:	2120      	movs	r1, #32
 80129c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	2242      	movs	r2, #66	@ 0x42
 80129ce:	2100      	movs	r1, #0
 80129d0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129d6:	2280      	movs	r2, #128	@ 0x80
 80129d8:	431a      	orrs	r2, r3
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	2240      	movs	r2, #64	@ 0x40
 80129e2:	2100      	movs	r1, #0
 80129e4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80129e6:	2301      	movs	r3, #1
 80129e8:	e059      	b.n	8012a9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80129ee:	b2da      	uxtb	r2, r3
 80129f0:	697c      	ldr	r4, [r7, #20]
 80129f2:	230a      	movs	r3, #10
 80129f4:	18fb      	adds	r3, r7, r3
 80129f6:	8819      	ldrh	r1, [r3, #0]
 80129f8:	68f8      	ldr	r0, [r7, #12]
 80129fa:	4b2f      	ldr	r3, [pc, #188]	@ (8012ab8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80129fc:	9300      	str	r3, [sp, #0]
 80129fe:	0023      	movs	r3, r4
 8012a00:	f002 f9f8 	bl	8014df4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012a08:	b29a      	uxth	r2, r3
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a0e:	1ad3      	subs	r3, r2, r3
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	2240      	movs	r2, #64	@ 0x40
 8012a1a:	2100      	movs	r1, #0
 8012a1c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	2110      	movs	r1, #16
 8012a22:	0018      	movs	r0, r3
 8012a24:	f002 fa20 	bl	8014e68 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	681a      	ldr	r2, [r3, #0]
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	2180      	movs	r1, #128	@ 0x80
 8012a34:	01c9      	lsls	r1, r1, #7
 8012a36:	430a      	orrs	r2, r1
 8012a38:	601a      	str	r2, [r3, #0]
 8012a3a:	e02d      	b.n	8012a98 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	2241      	movs	r2, #65	@ 0x41
 8012a40:	2120      	movs	r1, #32
 8012a42:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	2242      	movs	r2, #66	@ 0x42
 8012a48:	2100      	movs	r1, #0
 8012a4a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a50:	2210      	movs	r2, #16
 8012a52:	431a      	orrs	r2, r3
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2240      	movs	r2, #64	@ 0x40
 8012a5c:	2100      	movs	r1, #0
 8012a5e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012a60:	2301      	movs	r3, #1
 8012a62:	e01c      	b.n	8012a9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	4a15      	ldr	r2, [pc, #84]	@ (8012abc <HAL_I2C_Master_Transmit_DMA+0x208>)
 8012a68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a6e:	b2da      	uxtb	r2, r3
 8012a70:	2380      	movs	r3, #128	@ 0x80
 8012a72:	049c      	lsls	r4, r3, #18
 8012a74:	230a      	movs	r3, #10
 8012a76:	18fb      	adds	r3, r7, r3
 8012a78:	8819      	ldrh	r1, [r3, #0]
 8012a7a:	68f8      	ldr	r0, [r7, #12]
 8012a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8012ab8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8012a7e:	9300      	str	r3, [sp, #0]
 8012a80:	0023      	movs	r3, r4
 8012a82:	f002 f9b7 	bl	8014df4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	2240      	movs	r2, #64	@ 0x40
 8012a8a:	2100      	movs	r1, #0
 8012a8c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	2101      	movs	r1, #1
 8012a92:	0018      	movs	r0, r3
 8012a94:	f002 f9e8 	bl	8014e68 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	e000      	b.n	8012a9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8012a9c:	2302      	movs	r3, #2
  }
}
 8012a9e:	0018      	movs	r0, r3
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	b006      	add	sp, #24
 8012aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8012aa6:	46c0      	nop			@ (mov r8, r8)
 8012aa8:	ffff0000 	.word	0xffff0000
 8012aac:	08013725 	.word	0x08013725
 8012ab0:	080147a1 	.word	0x080147a1
 8012ab4:	080148e1 	.word	0x080148e1
 8012ab8:	80002000 	.word	0x80002000
 8012abc:	080132d1 	.word	0x080132d1

08012ac0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8012ac0:	b5b0      	push	{r4, r5, r7, lr}
 8012ac2:	b088      	sub	sp, #32
 8012ac4:	af02      	add	r7, sp, #8
 8012ac6:	60f8      	str	r0, [r7, #12]
 8012ac8:	0008      	movs	r0, r1
 8012aca:	607a      	str	r2, [r7, #4]
 8012acc:	0019      	movs	r1, r3
 8012ace:	230a      	movs	r3, #10
 8012ad0:	18fb      	adds	r3, r7, r3
 8012ad2:	1c02      	adds	r2, r0, #0
 8012ad4:	801a      	strh	r2, [r3, #0]
 8012ad6:	2308      	movs	r3, #8
 8012ad8:	18fb      	adds	r3, r7, r3
 8012ada:	1c0a      	adds	r2, r1, #0
 8012adc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	2241      	movs	r2, #65	@ 0x41
 8012ae2:	5c9b      	ldrb	r3, [r3, r2]
 8012ae4:	b2db      	uxtb	r3, r3
 8012ae6:	2b20      	cmp	r3, #32
 8012ae8:	d000      	beq.n	8012aec <HAL_I2C_Master_Receive_DMA+0x2c>
 8012aea:	e0dd      	b.n	8012ca8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	699a      	ldr	r2, [r3, #24]
 8012af2:	2380      	movs	r3, #128	@ 0x80
 8012af4:	021b      	lsls	r3, r3, #8
 8012af6:	401a      	ands	r2, r3
 8012af8:	2380      	movs	r3, #128	@ 0x80
 8012afa:	021b      	lsls	r3, r3, #8
 8012afc:	429a      	cmp	r2, r3
 8012afe:	d101      	bne.n	8012b04 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8012b00:	2302      	movs	r3, #2
 8012b02:	e0d2      	b.n	8012caa <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	2240      	movs	r2, #64	@ 0x40
 8012b08:	5c9b      	ldrb	r3, [r3, r2]
 8012b0a:	2b01      	cmp	r3, #1
 8012b0c:	d101      	bne.n	8012b12 <HAL_I2C_Master_Receive_DMA+0x52>
 8012b0e:	2302      	movs	r3, #2
 8012b10:	e0cb      	b.n	8012caa <HAL_I2C_Master_Receive_DMA+0x1ea>
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	2240      	movs	r2, #64	@ 0x40
 8012b16:	2101      	movs	r1, #1
 8012b18:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	2241      	movs	r2, #65	@ 0x41
 8012b1e:	2122      	movs	r1, #34	@ 0x22
 8012b20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	2242      	movs	r2, #66	@ 0x42
 8012b26:	2110      	movs	r1, #16
 8012b28:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	687a      	ldr	r2, [r7, #4]
 8012b34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	2208      	movs	r2, #8
 8012b3a:	18ba      	adds	r2, r7, r2
 8012b3c:	8812      	ldrh	r2, [r2, #0]
 8012b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	4a5c      	ldr	r2, [pc, #368]	@ (8012cb4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8012b44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	4a5b      	ldr	r2, [pc, #364]	@ (8012cb8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8012b4a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012b50:	b29b      	uxth	r3, r3
 8012b52:	2bff      	cmp	r3, #255	@ 0xff
 8012b54:	d906      	bls.n	8012b64 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	22ff      	movs	r2, #255	@ 0xff
 8012b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8012b5c:	2380      	movs	r3, #128	@ 0x80
 8012b5e:	045b      	lsls	r3, r3, #17
 8012b60:	617b      	str	r3, [r7, #20]
 8012b62:	e007      	b.n	8012b74 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012b68:	b29a      	uxth	r2, r3
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8012b6e:	2380      	movs	r3, #128	@ 0x80
 8012b70:	049b      	lsls	r3, r3, #18
 8012b72:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d100      	bne.n	8012b7e <HAL_I2C_Master_Receive_DMA+0xbe>
 8012b7c:	e078      	b.n	8012c70 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d023      	beq.n	8012bce <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b8a:	4a4c      	ldr	r2, [pc, #304]	@ (8012cbc <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8012b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b92:	4a4b      	ldr	r2, [pc, #300]	@ (8012cc0 <HAL_I2C_Master_Receive_DMA+0x200>)
 8012b94:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	3324      	adds	r3, #36	@ 0x24
 8012bb0:	0019      	movs	r1, r3
 8012bb2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8012bb8:	2513      	movs	r5, #19
 8012bba:	197c      	adds	r4, r7, r5
 8012bbc:	f7fe fe5c 	bl	8011878 <HAL_DMA_Start_IT>
 8012bc0:	0003      	movs	r3, r0
 8012bc2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8012bc4:	197b      	adds	r3, r7, r5
 8012bc6:	781b      	ldrb	r3, [r3, #0]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d13d      	bne.n	8012c48 <HAL_I2C_Master_Receive_DMA+0x188>
 8012bcc:	e013      	b.n	8012bf6 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2241      	movs	r2, #65	@ 0x41
 8012bd2:	2120      	movs	r1, #32
 8012bd4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2242      	movs	r2, #66	@ 0x42
 8012bda:	2100      	movs	r1, #0
 8012bdc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012be2:	2280      	movs	r2, #128	@ 0x80
 8012be4:	431a      	orrs	r2, r3
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	2240      	movs	r2, #64	@ 0x40
 8012bee:	2100      	movs	r1, #0
 8012bf0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	e059      	b.n	8012caa <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012bfa:	b2da      	uxtb	r2, r3
 8012bfc:	697c      	ldr	r4, [r7, #20]
 8012bfe:	230a      	movs	r3, #10
 8012c00:	18fb      	adds	r3, r7, r3
 8012c02:	8819      	ldrh	r1, [r3, #0]
 8012c04:	68f8      	ldr	r0, [r7, #12]
 8012c06:	4b2f      	ldr	r3, [pc, #188]	@ (8012cc4 <HAL_I2C_Master_Receive_DMA+0x204>)
 8012c08:	9300      	str	r3, [sp, #0]
 8012c0a:	0023      	movs	r3, r4
 8012c0c:	f002 f8f2 	bl	8014df4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c14:	b29a      	uxth	r2, r3
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c1a:	1ad3      	subs	r3, r2, r3
 8012c1c:	b29a      	uxth	r2, r3
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	2240      	movs	r2, #64	@ 0x40
 8012c26:	2100      	movs	r1, #0
 8012c28:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	2110      	movs	r1, #16
 8012c2e:	0018      	movs	r0, r3
 8012c30:	f002 f91a 	bl	8014e68 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	681a      	ldr	r2, [r3, #0]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	2180      	movs	r1, #128	@ 0x80
 8012c40:	0209      	lsls	r1, r1, #8
 8012c42:	430a      	orrs	r2, r1
 8012c44:	601a      	str	r2, [r3, #0]
 8012c46:	e02d      	b.n	8012ca4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	2241      	movs	r2, #65	@ 0x41
 8012c4c:	2120      	movs	r1, #32
 8012c4e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	2242      	movs	r2, #66	@ 0x42
 8012c54:	2100      	movs	r1, #0
 8012c56:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c5c:	2210      	movs	r2, #16
 8012c5e:	431a      	orrs	r2, r3
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2240      	movs	r2, #64	@ 0x40
 8012c68:	2100      	movs	r1, #0
 8012c6a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	e01c      	b.n	8012caa <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	4a15      	ldr	r2, [pc, #84]	@ (8012cc8 <HAL_I2C_Master_Receive_DMA+0x208>)
 8012c74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c7a:	b2da      	uxtb	r2, r3
 8012c7c:	2380      	movs	r3, #128	@ 0x80
 8012c7e:	049c      	lsls	r4, r3, #18
 8012c80:	230a      	movs	r3, #10
 8012c82:	18fb      	adds	r3, r7, r3
 8012c84:	8819      	ldrh	r1, [r3, #0]
 8012c86:	68f8      	ldr	r0, [r7, #12]
 8012c88:	4b0e      	ldr	r3, [pc, #56]	@ (8012cc4 <HAL_I2C_Master_Receive_DMA+0x204>)
 8012c8a:	9300      	str	r3, [sp, #0]
 8012c8c:	0023      	movs	r3, r4
 8012c8e:	f002 f8b1 	bl	8014df4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	2240      	movs	r2, #64	@ 0x40
 8012c96:	2100      	movs	r1, #0
 8012c98:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	2101      	movs	r1, #1
 8012c9e:	0018      	movs	r0, r3
 8012ca0:	f002 f8e2 	bl	8014e68 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	e000      	b.n	8012caa <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8012ca8:	2302      	movs	r3, #2
  }
}
 8012caa:	0018      	movs	r0, r3
 8012cac:	46bd      	mov	sp, r7
 8012cae:	b006      	add	sp, #24
 8012cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8012cb2:	46c0      	nop			@ (mov r8, r8)
 8012cb4:	ffff0000 	.word	0xffff0000
 8012cb8:	08013725 	.word	0x08013725
 8012cbc:	08014841 	.word	0x08014841
 8012cc0:	080148e1 	.word	0x080148e1
 8012cc4:	80002400 	.word	0x80002400
 8012cc8:	080132d1 	.word	0x080132d1

08012ccc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012ccc:	b590      	push	{r4, r7, lr}
 8012cce:	b089      	sub	sp, #36	@ 0x24
 8012cd0:	af02      	add	r7, sp, #8
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	000c      	movs	r4, r1
 8012cd6:	0010      	movs	r0, r2
 8012cd8:	0019      	movs	r1, r3
 8012cda:	230a      	movs	r3, #10
 8012cdc:	18fb      	adds	r3, r7, r3
 8012cde:	1c22      	adds	r2, r4, #0
 8012ce0:	801a      	strh	r2, [r3, #0]
 8012ce2:	2308      	movs	r3, #8
 8012ce4:	18fb      	adds	r3, r7, r3
 8012ce6:	1c02      	adds	r2, r0, #0
 8012ce8:	801a      	strh	r2, [r3, #0]
 8012cea:	1dbb      	adds	r3, r7, #6
 8012cec:	1c0a      	adds	r2, r1, #0
 8012cee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	2241      	movs	r2, #65	@ 0x41
 8012cf4:	5c9b      	ldrb	r3, [r3, r2]
 8012cf6:	b2db      	uxtb	r3, r3
 8012cf8:	2b20      	cmp	r3, #32
 8012cfa:	d000      	beq.n	8012cfe <HAL_I2C_Mem_Read+0x32>
 8012cfc:	e110      	b.n	8012f20 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8012cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d004      	beq.n	8012d0e <HAL_I2C_Mem_Read+0x42>
 8012d04:	232c      	movs	r3, #44	@ 0x2c
 8012d06:	18fb      	adds	r3, r7, r3
 8012d08:	881b      	ldrh	r3, [r3, #0]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d105      	bne.n	8012d1a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	2280      	movs	r2, #128	@ 0x80
 8012d12:	0092      	lsls	r2, r2, #2
 8012d14:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8012d16:	2301      	movs	r3, #1
 8012d18:	e103      	b.n	8012f22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	2240      	movs	r2, #64	@ 0x40
 8012d1e:	5c9b      	ldrb	r3, [r3, r2]
 8012d20:	2b01      	cmp	r3, #1
 8012d22:	d101      	bne.n	8012d28 <HAL_I2C_Mem_Read+0x5c>
 8012d24:	2302      	movs	r3, #2
 8012d26:	e0fc      	b.n	8012f22 <HAL_I2C_Mem_Read+0x256>
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	2240      	movs	r2, #64	@ 0x40
 8012d2c:	2101      	movs	r1, #1
 8012d2e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8012d30:	f7fe f850 	bl	8010dd4 <HAL_GetTick>
 8012d34:	0003      	movs	r3, r0
 8012d36:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012d38:	2380      	movs	r3, #128	@ 0x80
 8012d3a:	0219      	lsls	r1, r3, #8
 8012d3c:	68f8      	ldr	r0, [r7, #12]
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	9300      	str	r3, [sp, #0]
 8012d42:	2319      	movs	r3, #25
 8012d44:	2201      	movs	r2, #1
 8012d46:	f001 fe03 	bl	8014950 <I2C_WaitOnFlagUntilTimeout>
 8012d4a:	1e03      	subs	r3, r0, #0
 8012d4c:	d001      	beq.n	8012d52 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8012d4e:	2301      	movs	r3, #1
 8012d50:	e0e7      	b.n	8012f22 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	2241      	movs	r2, #65	@ 0x41
 8012d56:	2122      	movs	r1, #34	@ 0x22
 8012d58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	2242      	movs	r2, #66	@ 0x42
 8012d5e:	2140      	movs	r1, #64	@ 0x40
 8012d60:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	2200      	movs	r2, #0
 8012d66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012d6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	222c      	movs	r2, #44	@ 0x2c
 8012d72:	18ba      	adds	r2, r7, r2
 8012d74:	8812      	ldrh	r2, [r2, #0]
 8012d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8012d7e:	1dbb      	adds	r3, r7, #6
 8012d80:	881c      	ldrh	r4, [r3, #0]
 8012d82:	2308      	movs	r3, #8
 8012d84:	18fb      	adds	r3, r7, r3
 8012d86:	881a      	ldrh	r2, [r3, #0]
 8012d88:	230a      	movs	r3, #10
 8012d8a:	18fb      	adds	r3, r7, r3
 8012d8c:	8819      	ldrh	r1, [r3, #0]
 8012d8e:	68f8      	ldr	r0, [r7, #12]
 8012d90:	697b      	ldr	r3, [r7, #20]
 8012d92:	9301      	str	r3, [sp, #4]
 8012d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d96:	9300      	str	r3, [sp, #0]
 8012d98:	0023      	movs	r3, r4
 8012d9a:	f000 ffc1 	bl	8013d20 <I2C_RequestMemoryRead>
 8012d9e:	1e03      	subs	r3, r0, #0
 8012da0:	d005      	beq.n	8012dae <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	2240      	movs	r2, #64	@ 0x40
 8012da6:	2100      	movs	r1, #0
 8012da8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8012daa:	2301      	movs	r3, #1
 8012dac:	e0b9      	b.n	8012f22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012db2:	b29b      	uxth	r3, r3
 8012db4:	2bff      	cmp	r3, #255	@ 0xff
 8012db6:	d911      	bls.n	8012ddc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	22ff      	movs	r2, #255	@ 0xff
 8012dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012dc2:	b2da      	uxtb	r2, r3
 8012dc4:	2380      	movs	r3, #128	@ 0x80
 8012dc6:	045c      	lsls	r4, r3, #17
 8012dc8:	230a      	movs	r3, #10
 8012dca:	18fb      	adds	r3, r7, r3
 8012dcc:	8819      	ldrh	r1, [r3, #0]
 8012dce:	68f8      	ldr	r0, [r7, #12]
 8012dd0:	4b56      	ldr	r3, [pc, #344]	@ (8012f2c <HAL_I2C_Mem_Read+0x260>)
 8012dd2:	9300      	str	r3, [sp, #0]
 8012dd4:	0023      	movs	r3, r4
 8012dd6:	f002 f80d 	bl	8014df4 <I2C_TransferConfig>
 8012dda:	e012      	b.n	8012e02 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012de0:	b29a      	uxth	r2, r3
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012dea:	b2da      	uxtb	r2, r3
 8012dec:	2380      	movs	r3, #128	@ 0x80
 8012dee:	049c      	lsls	r4, r3, #18
 8012df0:	230a      	movs	r3, #10
 8012df2:	18fb      	adds	r3, r7, r3
 8012df4:	8819      	ldrh	r1, [r3, #0]
 8012df6:	68f8      	ldr	r0, [r7, #12]
 8012df8:	4b4c      	ldr	r3, [pc, #304]	@ (8012f2c <HAL_I2C_Mem_Read+0x260>)
 8012dfa:	9300      	str	r3, [sp, #0]
 8012dfc:	0023      	movs	r3, r4
 8012dfe:	f001 fff9 	bl	8014df4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8012e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012e04:	68f8      	ldr	r0, [r7, #12]
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	9300      	str	r3, [sp, #0]
 8012e0a:	0013      	movs	r3, r2
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	2104      	movs	r1, #4
 8012e10:	f001 fd9e 	bl	8014950 <I2C_WaitOnFlagUntilTimeout>
 8012e14:	1e03      	subs	r3, r0, #0
 8012e16:	d001      	beq.n	8012e1c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8012e18:	2301      	movs	r3, #1
 8012e1a:	e082      	b.n	8012f22 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e26:	b2d2      	uxtb	r2, r2
 8012e28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e2e:	1c5a      	adds	r2, r3, #1
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012e38:	3b01      	subs	r3, #1
 8012e3a:	b29a      	uxth	r2, r3
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012e44:	b29b      	uxth	r3, r3
 8012e46:	3b01      	subs	r3, #1
 8012e48:	b29a      	uxth	r2, r3
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012e52:	b29b      	uxth	r3, r3
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d03a      	beq.n	8012ece <HAL_I2C_Mem_Read+0x202>
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d136      	bne.n	8012ece <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8012e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012e62:	68f8      	ldr	r0, [r7, #12]
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	9300      	str	r3, [sp, #0]
 8012e68:	0013      	movs	r3, r2
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	2180      	movs	r1, #128	@ 0x80
 8012e6e:	f001 fd6f 	bl	8014950 <I2C_WaitOnFlagUntilTimeout>
 8012e72:	1e03      	subs	r3, r0, #0
 8012e74:	d001      	beq.n	8012e7a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8012e76:	2301      	movs	r3, #1
 8012e78:	e053      	b.n	8012f22 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012e7e:	b29b      	uxth	r3, r3
 8012e80:	2bff      	cmp	r3, #255	@ 0xff
 8012e82:	d911      	bls.n	8012ea8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	22ff      	movs	r2, #255	@ 0xff
 8012e88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012e8e:	b2da      	uxtb	r2, r3
 8012e90:	2380      	movs	r3, #128	@ 0x80
 8012e92:	045c      	lsls	r4, r3, #17
 8012e94:	230a      	movs	r3, #10
 8012e96:	18fb      	adds	r3, r7, r3
 8012e98:	8819      	ldrh	r1, [r3, #0]
 8012e9a:	68f8      	ldr	r0, [r7, #12]
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	9300      	str	r3, [sp, #0]
 8012ea0:	0023      	movs	r3, r4
 8012ea2:	f001 ffa7 	bl	8014df4 <I2C_TransferConfig>
 8012ea6:	e012      	b.n	8012ece <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012eac:	b29a      	uxth	r2, r3
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012eb6:	b2da      	uxtb	r2, r3
 8012eb8:	2380      	movs	r3, #128	@ 0x80
 8012eba:	049c      	lsls	r4, r3, #18
 8012ebc:	230a      	movs	r3, #10
 8012ebe:	18fb      	adds	r3, r7, r3
 8012ec0:	8819      	ldrh	r1, [r3, #0]
 8012ec2:	68f8      	ldr	r0, [r7, #12]
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	9300      	str	r3, [sp, #0]
 8012ec8:	0023      	movs	r3, r4
 8012eca:	f001 ff93 	bl	8014df4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ed2:	b29b      	uxth	r3, r3
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d194      	bne.n	8012e02 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012ed8:	697a      	ldr	r2, [r7, #20]
 8012eda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	0018      	movs	r0, r3
 8012ee0:	f001 fdca 	bl	8014a78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012ee4:	1e03      	subs	r3, r0, #0
 8012ee6:	d001      	beq.n	8012eec <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8012ee8:	2301      	movs	r3, #1
 8012eea:	e01a      	b.n	8012f22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2220      	movs	r2, #32
 8012ef2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	685a      	ldr	r2, [r3, #4]
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	490c      	ldr	r1, [pc, #48]	@ (8012f30 <HAL_I2C_Mem_Read+0x264>)
 8012f00:	400a      	ands	r2, r1
 8012f02:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	2241      	movs	r2, #65	@ 0x41
 8012f08:	2120      	movs	r1, #32
 8012f0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2242      	movs	r2, #66	@ 0x42
 8012f10:	2100      	movs	r1, #0
 8012f12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	2240      	movs	r2, #64	@ 0x40
 8012f18:	2100      	movs	r1, #0
 8012f1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	e000      	b.n	8012f22 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8012f20:	2302      	movs	r3, #2
  }
}
 8012f22:	0018      	movs	r0, r3
 8012f24:	46bd      	mov	sp, r7
 8012f26:	b007      	add	sp, #28
 8012f28:	bd90      	pop	{r4, r7, pc}
 8012f2a:	46c0      	nop			@ (mov r8, r8)
 8012f2c:	80002400 	.word	0x80002400
 8012f30:	fe00e800 	.word	0xfe00e800

08012f34 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8012f34:	b5b0      	push	{r4, r5, r7, lr}
 8012f36:	b088      	sub	sp, #32
 8012f38:	af02      	add	r7, sp, #8
 8012f3a:	60f8      	str	r0, [r7, #12]
 8012f3c:	000c      	movs	r4, r1
 8012f3e:	0010      	movs	r0, r2
 8012f40:	0019      	movs	r1, r3
 8012f42:	230a      	movs	r3, #10
 8012f44:	18fb      	adds	r3, r7, r3
 8012f46:	1c22      	adds	r2, r4, #0
 8012f48:	801a      	strh	r2, [r3, #0]
 8012f4a:	2308      	movs	r3, #8
 8012f4c:	18fb      	adds	r3, r7, r3
 8012f4e:	1c02      	adds	r2, r0, #0
 8012f50:	801a      	strh	r2, [r3, #0]
 8012f52:	1dbb      	adds	r3, r7, #6
 8012f54:	1c0a      	adds	r2, r1, #0
 8012f56:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	2241      	movs	r2, #65	@ 0x41
 8012f5c:	5c9b      	ldrb	r3, [r3, r2]
 8012f5e:	b2db      	uxtb	r3, r3
 8012f60:	2b20      	cmp	r3, #32
 8012f62:	d000      	beq.n	8012f66 <HAL_I2C_Mem_Write_DMA+0x32>
 8012f64:	e0d8      	b.n	8013118 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8012f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d004      	beq.n	8012f76 <HAL_I2C_Mem_Write_DMA+0x42>
 8012f6c:	232c      	movs	r3, #44	@ 0x2c
 8012f6e:	18fb      	adds	r3, r7, r3
 8012f70:	881b      	ldrh	r3, [r3, #0]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d105      	bne.n	8012f82 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2280      	movs	r2, #128	@ 0x80
 8012f7a:	0092      	lsls	r2, r2, #2
 8012f7c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8012f7e:	2301      	movs	r3, #1
 8012f80:	e0cb      	b.n	801311a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	699a      	ldr	r2, [r3, #24]
 8012f88:	2380      	movs	r3, #128	@ 0x80
 8012f8a:	021b      	lsls	r3, r3, #8
 8012f8c:	401a      	ands	r2, r3
 8012f8e:	2380      	movs	r3, #128	@ 0x80
 8012f90:	021b      	lsls	r3, r3, #8
 8012f92:	429a      	cmp	r2, r3
 8012f94:	d101      	bne.n	8012f9a <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 8012f96:	2302      	movs	r3, #2
 8012f98:	e0bf      	b.n	801311a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	2240      	movs	r2, #64	@ 0x40
 8012f9e:	5c9b      	ldrb	r3, [r3, r2]
 8012fa0:	2b01      	cmp	r3, #1
 8012fa2:	d101      	bne.n	8012fa8 <HAL_I2C_Mem_Write_DMA+0x74>
 8012fa4:	2302      	movs	r3, #2
 8012fa6:	e0b8      	b.n	801311a <HAL_I2C_Mem_Write_DMA+0x1e6>
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	2240      	movs	r2, #64	@ 0x40
 8012fac:	2101      	movs	r1, #1
 8012fae:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2241      	movs	r2, #65	@ 0x41
 8012fb4:	2121      	movs	r1, #33	@ 0x21
 8012fb6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	2242      	movs	r2, #66	@ 0x42
 8012fbc:	2140      	movs	r1, #64	@ 0x40
 8012fbe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012fca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	222c      	movs	r2, #44	@ 0x2c
 8012fd0:	18ba      	adds	r2, r7, r2
 8012fd2:	8812      	ldrh	r2, [r2, #0]
 8012fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	4a52      	ldr	r2, [pc, #328]	@ (8013124 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8012fda:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	4a52      	ldr	r2, [pc, #328]	@ (8013128 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8012fe0:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8012fe2:	230a      	movs	r3, #10
 8012fe4:	18fb      	adds	r3, r7, r3
 8012fe6:	881a      	ldrh	r2, [r3, #0]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ff0:	b29b      	uxth	r3, r3
 8012ff2:	2bff      	cmp	r3, #255	@ 0xff
 8012ff4:	d903      	bls.n	8012ffe <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	22ff      	movs	r2, #255	@ 0xff
 8012ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012ffc:	e004      	b.n	8013008 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013002:	b29a      	uxth	r2, r3
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8013008:	1dbb      	adds	r3, r7, #6
 801300a:	881b      	ldrh	r3, [r3, #0]
 801300c:	2b01      	cmp	r3, #1
 801300e:	d10b      	bne.n	8013028 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8013010:	2308      	movs	r3, #8
 8013012:	18fb      	adds	r3, r7, r3
 8013014:	881b      	ldrh	r3, [r3, #0]
 8013016:	b2da      	uxtb	r2, r3
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2201      	movs	r2, #1
 8013022:	4252      	negs	r2, r2
 8013024:	651a      	str	r2, [r3, #80]	@ 0x50
 8013026:	e00e      	b.n	8013046 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8013028:	2108      	movs	r1, #8
 801302a:	187b      	adds	r3, r7, r1
 801302c:	881b      	ldrh	r3, [r3, #0]
 801302e:	0a1b      	lsrs	r3, r3, #8
 8013030:	b29b      	uxth	r3, r3
 8013032:	b2da      	uxtb	r2, r3
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 801303a:	187b      	adds	r3, r7, r1
 801303c:	881b      	ldrh	r3, [r3, #0]
 801303e:	b2db      	uxtb	r3, r3
 8013040:	001a      	movs	r2, r3
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801304a:	2b00      	cmp	r3, #0
 801304c:	d023      	beq.n	8013096 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013052:	4a36      	ldr	r2, [pc, #216]	@ (801312c <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8013054:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801305a:	4a35      	ldr	r2, [pc, #212]	@ (8013130 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 801305c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013062:	2200      	movs	r2, #0
 8013064:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801306a:	2200      	movs	r2, #0
 801306c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013072:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	3328      	adds	r3, #40	@ 0x28
 801307a:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013080:	2517      	movs	r5, #23
 8013082:	197c      	adds	r4, r7, r5
 8013084:	f7fe fbf8 	bl	8011878 <HAL_DMA_Start_IT>
 8013088:	0003      	movs	r3, r0
 801308a:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 801308c:	197b      	adds	r3, r7, r5
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d12d      	bne.n	80130f0 <HAL_I2C_Mem_Write_DMA+0x1bc>
 8013094:	e013      	b.n	80130be <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	2241      	movs	r2, #65	@ 0x41
 801309a:	2120      	movs	r1, #32
 801309c:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	2242      	movs	r2, #66	@ 0x42
 80130a2:	2100      	movs	r1, #0
 80130a4:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80130aa:	2280      	movs	r2, #128	@ 0x80
 80130ac:	431a      	orrs	r2, r3
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	2240      	movs	r2, #64	@ 0x40
 80130b6:	2100      	movs	r1, #0
 80130b8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80130ba:	2301      	movs	r3, #1
 80130bc:	e02d      	b.n	801311a <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80130be:	1dbb      	adds	r3, r7, #6
 80130c0:	881b      	ldrh	r3, [r3, #0]
 80130c2:	b2da      	uxtb	r2, r3
 80130c4:	2380      	movs	r3, #128	@ 0x80
 80130c6:	045c      	lsls	r4, r3, #17
 80130c8:	230a      	movs	r3, #10
 80130ca:	18fb      	adds	r3, r7, r3
 80130cc:	8819      	ldrh	r1, [r3, #0]
 80130ce:	68f8      	ldr	r0, [r7, #12]
 80130d0:	4b18      	ldr	r3, [pc, #96]	@ (8013134 <HAL_I2C_Mem_Write_DMA+0x200>)
 80130d2:	9300      	str	r3, [sp, #0]
 80130d4:	0023      	movs	r3, r4
 80130d6:	f001 fe8d 	bl	8014df4 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	2240      	movs	r2, #64	@ 0x40
 80130de:	2100      	movs	r1, #0
 80130e0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	2101      	movs	r1, #1
 80130e6:	0018      	movs	r0, r3
 80130e8:	f001 febe 	bl	8014e68 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80130ec:	2300      	movs	r3, #0
 80130ee:	e014      	b.n	801311a <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	2241      	movs	r2, #65	@ 0x41
 80130f4:	2120      	movs	r1, #32
 80130f6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2242      	movs	r2, #66	@ 0x42
 80130fc:	2100      	movs	r1, #0
 80130fe:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013104:	2210      	movs	r2, #16
 8013106:	431a      	orrs	r2, r3
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	2240      	movs	r2, #64	@ 0x40
 8013110:	2100      	movs	r1, #0
 8013112:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8013114:	2301      	movs	r3, #1
 8013116:	e000      	b.n	801311a <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8013118:	2302      	movs	r3, #2
  }
}
 801311a:	0018      	movs	r0, r3
 801311c:	46bd      	mov	sp, r7
 801311e:	b006      	add	sp, #24
 8013120:	bdb0      	pop	{r4, r5, r7, pc}
 8013122:	46c0      	nop			@ (mov r8, r8)
 8013124:	ffff0000 	.word	0xffff0000
 8013128:	0801391d 	.word	0x0801391d
 801312c:	080147a1 	.word	0x080147a1
 8013130:	080148e1 	.word	0x080148e1
 8013134:	80002000 	.word	0x80002000

08013138 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b084      	sub	sp, #16
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	699b      	ldr	r3, [r3, #24]
 8013146:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013154:	2b00      	cmp	r3, #0
 8013156:	d005      	beq.n	8013164 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801315c:	68ba      	ldr	r2, [r7, #8]
 801315e:	68f9      	ldr	r1, [r7, #12]
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	4798      	blx	r3
  }
}
 8013164:	46c0      	nop			@ (mov r8, r8)
 8013166:	46bd      	mov	sp, r7
 8013168:	b004      	add	sp, #16
 801316a:	bd80      	pop	{r7, pc}

0801316c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b086      	sub	sp, #24
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	699b      	ldr	r3, [r3, #24]
 801317a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8013184:	697a      	ldr	r2, [r7, #20]
 8013186:	2380      	movs	r3, #128	@ 0x80
 8013188:	005b      	lsls	r3, r3, #1
 801318a:	4013      	ands	r3, r2
 801318c:	d00e      	beq.n	80131ac <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	2280      	movs	r2, #128	@ 0x80
 8013192:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8013194:	d00a      	beq.n	80131ac <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801319a:	2201      	movs	r2, #1
 801319c:	431a      	orrs	r2, r3
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	2280      	movs	r2, #128	@ 0x80
 80131a8:	0052      	lsls	r2, r2, #1
 80131aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80131ac:	697a      	ldr	r2, [r7, #20]
 80131ae:	2380      	movs	r3, #128	@ 0x80
 80131b0:	00db      	lsls	r3, r3, #3
 80131b2:	4013      	ands	r3, r2
 80131b4:	d00e      	beq.n	80131d4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80131b6:	693b      	ldr	r3, [r7, #16]
 80131b8:	2280      	movs	r2, #128	@ 0x80
 80131ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80131bc:	d00a      	beq.n	80131d4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80131c2:	2208      	movs	r2, #8
 80131c4:	431a      	orrs	r2, r3
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	2280      	movs	r2, #128	@ 0x80
 80131d0:	00d2      	lsls	r2, r2, #3
 80131d2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80131d4:	697a      	ldr	r2, [r7, #20]
 80131d6:	2380      	movs	r3, #128	@ 0x80
 80131d8:	009b      	lsls	r3, r3, #2
 80131da:	4013      	ands	r3, r2
 80131dc:	d00e      	beq.n	80131fc <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80131de:	693b      	ldr	r3, [r7, #16]
 80131e0:	2280      	movs	r2, #128	@ 0x80
 80131e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80131e4:	d00a      	beq.n	80131fc <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80131ea:	2202      	movs	r2, #2
 80131ec:	431a      	orrs	r2, r3
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	2280      	movs	r2, #128	@ 0x80
 80131f8:	0092      	lsls	r2, r2, #2
 80131fa:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013200:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	220b      	movs	r2, #11
 8013206:	4013      	ands	r3, r2
 8013208:	d005      	beq.n	8013216 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 801320a:	68fa      	ldr	r2, [r7, #12]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	0011      	movs	r1, r2
 8013210:	0018      	movs	r0, r3
 8013212:	f001 f977 	bl	8014504 <I2C_ITError>
  }
}
 8013216:	46c0      	nop			@ (mov r8, r8)
 8013218:	46bd      	mov	sp, r7
 801321a:	b006      	add	sp, #24
 801321c:	bd80      	pop	{r7, pc}

0801321e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801321e:	b580      	push	{r7, lr}
 8013220:	b082      	sub	sp, #8
 8013222:	af00      	add	r7, sp, #0
 8013224:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8013226:	46c0      	nop			@ (mov r8, r8)
 8013228:	46bd      	mov	sp, r7
 801322a:	b002      	add	sp, #8
 801322c:	bd80      	pop	{r7, pc}

0801322e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801322e:	b580      	push	{r7, lr}
 8013230:	b082      	sub	sp, #8
 8013232:	af00      	add	r7, sp, #0
 8013234:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8013236:	46c0      	nop			@ (mov r8, r8)
 8013238:	46bd      	mov	sp, r7
 801323a:	b002      	add	sp, #8
 801323c:	bd80      	pop	{r7, pc}

0801323e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801323e:	b580      	push	{r7, lr}
 8013240:	b082      	sub	sp, #8
 8013242:	af00      	add	r7, sp, #0
 8013244:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8013246:	46c0      	nop			@ (mov r8, r8)
 8013248:	46bd      	mov	sp, r7
 801324a:	b002      	add	sp, #8
 801324c:	bd80      	pop	{r7, pc}

0801324e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801324e:	b580      	push	{r7, lr}
 8013250:	b082      	sub	sp, #8
 8013252:	af00      	add	r7, sp, #0
 8013254:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8013256:	46c0      	nop			@ (mov r8, r8)
 8013258:	46bd      	mov	sp, r7
 801325a:	b002      	add	sp, #8
 801325c:	bd80      	pop	{r7, pc}

0801325e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801325e:	b580      	push	{r7, lr}
 8013260:	b082      	sub	sp, #8
 8013262:	af00      	add	r7, sp, #0
 8013264:	6078      	str	r0, [r7, #4]
 8013266:	0008      	movs	r0, r1
 8013268:	0011      	movs	r1, r2
 801326a:	1cfb      	adds	r3, r7, #3
 801326c:	1c02      	adds	r2, r0, #0
 801326e:	701a      	strb	r2, [r3, #0]
 8013270:	003b      	movs	r3, r7
 8013272:	1c0a      	adds	r2, r1, #0
 8013274:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8013276:	46c0      	nop			@ (mov r8, r8)
 8013278:	46bd      	mov	sp, r7
 801327a:	b002      	add	sp, #8
 801327c:	bd80      	pop	{r7, pc}

0801327e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801327e:	b580      	push	{r7, lr}
 8013280:	b082      	sub	sp, #8
 8013282:	af00      	add	r7, sp, #0
 8013284:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8013286:	46c0      	nop			@ (mov r8, r8)
 8013288:	46bd      	mov	sp, r7
 801328a:	b002      	add	sp, #8
 801328c:	bd80      	pop	{r7, pc}

0801328e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801328e:	b580      	push	{r7, lr}
 8013290:	b082      	sub	sp, #8
 8013292:	af00      	add	r7, sp, #0
 8013294:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8013296:	46c0      	nop			@ (mov r8, r8)
 8013298:	46bd      	mov	sp, r7
 801329a:	b002      	add	sp, #8
 801329c:	bd80      	pop	{r7, pc}

0801329e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801329e:	b580      	push	{r7, lr}
 80132a0:	b082      	sub	sp, #8
 80132a2:	af00      	add	r7, sp, #0
 80132a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80132a6:	46c0      	nop			@ (mov r8, r8)
 80132a8:	46bd      	mov	sp, r7
 80132aa:	b002      	add	sp, #8
 80132ac:	bd80      	pop	{r7, pc}

080132ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80132ae:	b580      	push	{r7, lr}
 80132b0:	b082      	sub	sp, #8
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80132b6:	46c0      	nop			@ (mov r8, r8)
 80132b8:	46bd      	mov	sp, r7
 80132ba:	b002      	add	sp, #8
 80132bc:	bd80      	pop	{r7, pc}

080132be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80132be:	b580      	push	{r7, lr}
 80132c0:	b082      	sub	sp, #8
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80132c6:	46c0      	nop			@ (mov r8, r8)
 80132c8:	46bd      	mov	sp, r7
 80132ca:	b002      	add	sp, #8
 80132cc:	bd80      	pop	{r7, pc}
	...

080132d0 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80132d0:	b590      	push	{r4, r7, lr}
 80132d2:	b089      	sub	sp, #36	@ 0x24
 80132d4:	af02      	add	r7, sp, #8
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	2240      	movs	r2, #64	@ 0x40
 80132e4:	5c9b      	ldrb	r3, [r3, r2]
 80132e6:	2b01      	cmp	r3, #1
 80132e8:	d101      	bne.n	80132ee <I2C_Master_ISR_IT+0x1e>
 80132ea:	2302      	movs	r3, #2
 80132ec:	e113      	b.n	8013516 <I2C_Master_ISR_IT+0x246>
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2240      	movs	r2, #64	@ 0x40
 80132f2:	2101      	movs	r1, #1
 80132f4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80132f6:	697b      	ldr	r3, [r7, #20]
 80132f8:	2210      	movs	r2, #16
 80132fa:	4013      	ands	r3, r2
 80132fc:	d012      	beq.n	8013324 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2210      	movs	r2, #16
 8013302:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8013304:	d00e      	beq.n	8013324 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	2210      	movs	r2, #16
 801330c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013312:	2204      	movs	r2, #4
 8013314:	431a      	orrs	r2, r3
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	0018      	movs	r0, r3
 801331e:	f001 fa1c 	bl	801475a <I2C_Flush_TXDR>
 8013322:	e0e5      	b.n	80134f0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	2204      	movs	r2, #4
 8013328:	4013      	ands	r3, r2
 801332a:	d021      	beq.n	8013370 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2204      	movs	r2, #4
 8013330:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013332:	d01d      	beq.n	8013370 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	2204      	movs	r2, #4
 8013338:	4393      	bics	r3, r2
 801333a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013346:	b2d2      	uxtb	r2, r2
 8013348:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801334e:	1c5a      	adds	r2, r3, #1
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013358:	3b01      	subs	r3, #1
 801335a:	b29a      	uxth	r2, r3
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013364:	b29b      	uxth	r3, r3
 8013366:	3b01      	subs	r3, #1
 8013368:	b29a      	uxth	r2, r3
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801336e:	e0bf      	b.n	80134f0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	2202      	movs	r2, #2
 8013374:	4013      	ands	r3, r2
 8013376:	d01c      	beq.n	80133b2 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	2202      	movs	r2, #2
 801337c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801337e:	d018      	beq.n	80133b2 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013384:	781a      	ldrb	r2, [r3, #0]
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013390:	1c5a      	adds	r2, r3, #1
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801339a:	3b01      	subs	r3, #1
 801339c:	b29a      	uxth	r2, r3
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	3b01      	subs	r3, #1
 80133aa:	b29a      	uxth	r2, r3
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80133b0:	e09e      	b.n	80134f0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80133b2:	697b      	ldr	r3, [r7, #20]
 80133b4:	2280      	movs	r2, #128	@ 0x80
 80133b6:	4013      	ands	r3, r2
 80133b8:	d100      	bne.n	80133bc <I2C_Master_ISR_IT+0xec>
 80133ba:	e069      	b.n	8013490 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2240      	movs	r2, #64	@ 0x40
 80133c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80133c2:	d065      	beq.n	8013490 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d04a      	beq.n	8013464 <I2C_Master_ISR_IT+0x194>
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d146      	bne.n	8013464 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	685b      	ldr	r3, [r3, #4]
 80133dc:	b29a      	uxth	r2, r3
 80133de:	2112      	movs	r1, #18
 80133e0:	187b      	adds	r3, r7, r1
 80133e2:	0592      	lsls	r2, r2, #22
 80133e4:	0d92      	lsrs	r2, r2, #22
 80133e6:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	2bff      	cmp	r3, #255	@ 0xff
 80133f0:	d910      	bls.n	8013414 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	22ff      	movs	r2, #255	@ 0xff
 80133f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80133fc:	b2da      	uxtb	r2, r3
 80133fe:	2380      	movs	r3, #128	@ 0x80
 8013400:	045c      	lsls	r4, r3, #17
 8013402:	187b      	adds	r3, r7, r1
 8013404:	8819      	ldrh	r1, [r3, #0]
 8013406:	68f8      	ldr	r0, [r7, #12]
 8013408:	2300      	movs	r3, #0
 801340a:	9300      	str	r3, [sp, #0]
 801340c:	0023      	movs	r3, r4
 801340e:	f001 fcf1 	bl	8014df4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013412:	e03c      	b.n	801348e <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013418:	b29a      	uxth	r2, r3
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013422:	4a3f      	ldr	r2, [pc, #252]	@ (8013520 <I2C_Master_ISR_IT+0x250>)
 8013424:	4293      	cmp	r3, r2
 8013426:	d00e      	beq.n	8013446 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801342c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8013432:	2312      	movs	r3, #18
 8013434:	18fb      	adds	r3, r7, r3
 8013436:	8819      	ldrh	r1, [r3, #0]
 8013438:	68f8      	ldr	r0, [r7, #12]
 801343a:	2300      	movs	r3, #0
 801343c:	9300      	str	r3, [sp, #0]
 801343e:	0023      	movs	r3, r4
 8013440:	f001 fcd8 	bl	8014df4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013444:	e023      	b.n	801348e <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801344a:	b2da      	uxtb	r2, r3
 801344c:	2380      	movs	r3, #128	@ 0x80
 801344e:	049c      	lsls	r4, r3, #18
 8013450:	2312      	movs	r3, #18
 8013452:	18fb      	adds	r3, r7, r3
 8013454:	8819      	ldrh	r1, [r3, #0]
 8013456:	68f8      	ldr	r0, [r7, #12]
 8013458:	2300      	movs	r3, #0
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	0023      	movs	r3, r4
 801345e:	f001 fcc9 	bl	8014df4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013462:	e014      	b.n	801348e <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	685a      	ldr	r2, [r3, #4]
 801346a:	2380      	movs	r3, #128	@ 0x80
 801346c:	049b      	lsls	r3, r3, #18
 801346e:	401a      	ands	r2, r3
 8013470:	2380      	movs	r3, #128	@ 0x80
 8013472:	049b      	lsls	r3, r3, #18
 8013474:	429a      	cmp	r2, r3
 8013476:	d004      	beq.n	8013482 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	0018      	movs	r0, r3
 801347c:	f000 fd56 	bl	8013f2c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013480:	e036      	b.n	80134f0 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	2140      	movs	r1, #64	@ 0x40
 8013486:	0018      	movs	r0, r3
 8013488:	f001 f83c 	bl	8014504 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801348c:	e030      	b.n	80134f0 <I2C_Master_ISR_IT+0x220>
 801348e:	e02f      	b.n	80134f0 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	2240      	movs	r2, #64	@ 0x40
 8013494:	4013      	ands	r3, r2
 8013496:	d02b      	beq.n	80134f0 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2240      	movs	r2, #64	@ 0x40
 801349c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 801349e:	d027      	beq.n	80134f0 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80134a4:	b29b      	uxth	r3, r3
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d11d      	bne.n	80134e6 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	685a      	ldr	r2, [r3, #4]
 80134b0:	2380      	movs	r3, #128	@ 0x80
 80134b2:	049b      	lsls	r3, r3, #18
 80134b4:	401a      	ands	r2, r3
 80134b6:	2380      	movs	r3, #128	@ 0x80
 80134b8:	049b      	lsls	r3, r3, #18
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d018      	beq.n	80134f0 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134c2:	4a17      	ldr	r2, [pc, #92]	@ (8013520 <I2C_Master_ISR_IT+0x250>)
 80134c4:	4293      	cmp	r3, r2
 80134c6:	d109      	bne.n	80134dc <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	685a      	ldr	r2, [r3, #4]
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	2180      	movs	r1, #128	@ 0x80
 80134d4:	01c9      	lsls	r1, r1, #7
 80134d6:	430a      	orrs	r2, r1
 80134d8:	605a      	str	r2, [r3, #4]
 80134da:	e009      	b.n	80134f0 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	0018      	movs	r0, r3
 80134e0:	f000 fd24 	bl	8013f2c <I2C_ITMasterSeqCplt>
 80134e4:	e004      	b.n	80134f0 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	2140      	movs	r1, #64	@ 0x40
 80134ea:	0018      	movs	r0, r3
 80134ec:	f001 f80a 	bl	8014504 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	2220      	movs	r2, #32
 80134f4:	4013      	ands	r3, r2
 80134f6:	d009      	beq.n	801350c <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	2220      	movs	r2, #32
 80134fc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80134fe:	d005      	beq.n	801350c <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8013500:	697a      	ldr	r2, [r7, #20]
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	0011      	movs	r1, r2
 8013506:	0018      	movs	r0, r3
 8013508:	f000 fdb6 	bl	8014078 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	2240      	movs	r2, #64	@ 0x40
 8013510:	2100      	movs	r1, #0
 8013512:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013514:	2300      	movs	r3, #0
}
 8013516:	0018      	movs	r0, r3
 8013518:	46bd      	mov	sp, r7
 801351a:	b007      	add	sp, #28
 801351c:	bd90      	pop	{r4, r7, pc}
 801351e:	46c0      	nop			@ (mov r8, r8)
 8013520:	ffff0000 	.word	0xffff0000

08013524 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b086      	sub	sp, #24
 8013528:	af00      	add	r7, sp, #0
 801352a:	60f8      	str	r0, [r7, #12]
 801352c:	60b9      	str	r1, [r7, #8]
 801352e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013534:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	2240      	movs	r2, #64	@ 0x40
 801353e:	5c9b      	ldrb	r3, [r3, r2]
 8013540:	2b01      	cmp	r3, #1
 8013542:	d101      	bne.n	8013548 <I2C_Slave_ISR_IT+0x24>
 8013544:	2302      	movs	r3, #2
 8013546:	e0e6      	b.n	8013716 <I2C_Slave_ISR_IT+0x1f2>
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	2240      	movs	r2, #64	@ 0x40
 801354c:	2101      	movs	r1, #1
 801354e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013550:	693b      	ldr	r3, [r7, #16]
 8013552:	2220      	movs	r2, #32
 8013554:	4013      	ands	r3, r2
 8013556:	d009      	beq.n	801356c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2220      	movs	r2, #32
 801355c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801355e:	d005      	beq.n	801356c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8013560:	693a      	ldr	r2, [r7, #16]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	0011      	movs	r1, r2
 8013566:	0018      	movs	r0, r3
 8013568:	f000 fe54 	bl	8014214 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801356c:	693b      	ldr	r3, [r7, #16]
 801356e:	2210      	movs	r2, #16
 8013570:	4013      	ands	r3, r2
 8013572:	d052      	beq.n	801361a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2210      	movs	r2, #16
 8013578:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801357a:	d04e      	beq.n	801361a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013580:	b29b      	uxth	r3, r3
 8013582:	2b00      	cmp	r3, #0
 8013584:	d12d      	bne.n	80135e2 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	2241      	movs	r2, #65	@ 0x41
 801358a:	5c9b      	ldrb	r3, [r3, r2]
 801358c:	b2db      	uxtb	r3, r3
 801358e:	2b28      	cmp	r3, #40	@ 0x28
 8013590:	d10b      	bne.n	80135aa <I2C_Slave_ISR_IT+0x86>
 8013592:	697a      	ldr	r2, [r7, #20]
 8013594:	2380      	movs	r3, #128	@ 0x80
 8013596:	049b      	lsls	r3, r3, #18
 8013598:	429a      	cmp	r2, r3
 801359a:	d106      	bne.n	80135aa <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 801359c:	693a      	ldr	r2, [r7, #16]
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	0011      	movs	r1, r2
 80135a2:	0018      	movs	r0, r3
 80135a4:	f000 ff56 	bl	8014454 <I2C_ITListenCplt>
 80135a8:	e036      	b.n	8013618 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	2241      	movs	r2, #65	@ 0x41
 80135ae:	5c9b      	ldrb	r3, [r3, r2]
 80135b0:	b2db      	uxtb	r3, r3
 80135b2:	2b29      	cmp	r3, #41	@ 0x29
 80135b4:	d110      	bne.n	80135d8 <I2C_Slave_ISR_IT+0xb4>
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	4a59      	ldr	r2, [pc, #356]	@ (8013720 <I2C_Slave_ISR_IT+0x1fc>)
 80135ba:	4293      	cmp	r3, r2
 80135bc:	d00c      	beq.n	80135d8 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	2210      	movs	r2, #16
 80135c4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	0018      	movs	r0, r3
 80135ca:	f001 f8c6 	bl	801475a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	0018      	movs	r0, r3
 80135d2:	f000 fced 	bl	8013fb0 <I2C_ITSlaveSeqCplt>
 80135d6:	e01f      	b.n	8013618 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2210      	movs	r2, #16
 80135de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80135e0:	e091      	b.n	8013706 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	2210      	movs	r2, #16
 80135e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135ee:	2204      	movs	r2, #4
 80135f0:	431a      	orrs	r2, r3
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80135f6:	697b      	ldr	r3, [r7, #20]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d005      	beq.n	8013608 <I2C_Slave_ISR_IT+0xe4>
 80135fc:	697a      	ldr	r2, [r7, #20]
 80135fe:	2380      	movs	r3, #128	@ 0x80
 8013600:	045b      	lsls	r3, r3, #17
 8013602:	429a      	cmp	r2, r3
 8013604:	d000      	beq.n	8013608 <I2C_Slave_ISR_IT+0xe4>
 8013606:	e07e      	b.n	8013706 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	0011      	movs	r1, r2
 8013610:	0018      	movs	r0, r3
 8013612:	f000 ff77 	bl	8014504 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8013616:	e076      	b.n	8013706 <I2C_Slave_ISR_IT+0x1e2>
 8013618:	e075      	b.n	8013706 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	2204      	movs	r2, #4
 801361e:	4013      	ands	r3, r2
 8013620:	d02f      	beq.n	8013682 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	2204      	movs	r2, #4
 8013626:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013628:	d02b      	beq.n	8013682 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801362e:	b29b      	uxth	r3, r3
 8013630:	2b00      	cmp	r3, #0
 8013632:	d018      	beq.n	8013666 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801363e:	b2d2      	uxtb	r2, r2
 8013640:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013646:	1c5a      	adds	r2, r3, #1
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013650:	3b01      	subs	r3, #1
 8013652:	b29a      	uxth	r2, r3
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801365c:	b29b      	uxth	r3, r3
 801365e:	3b01      	subs	r3, #1
 8013660:	b29a      	uxth	r2, r3
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801366a:	b29b      	uxth	r3, r3
 801366c:	2b00      	cmp	r3, #0
 801366e:	d14c      	bne.n	801370a <I2C_Slave_ISR_IT+0x1e6>
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	4a2b      	ldr	r2, [pc, #172]	@ (8013720 <I2C_Slave_ISR_IT+0x1fc>)
 8013674:	4293      	cmp	r3, r2
 8013676:	d048      	beq.n	801370a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	0018      	movs	r0, r3
 801367c:	f000 fc98 	bl	8013fb0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8013680:	e043      	b.n	801370a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	2208      	movs	r2, #8
 8013686:	4013      	ands	r3, r2
 8013688:	d00a      	beq.n	80136a0 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	2208      	movs	r2, #8
 801368e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013690:	d006      	beq.n	80136a0 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8013692:	693a      	ldr	r2, [r7, #16]
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	0011      	movs	r1, r2
 8013698:	0018      	movs	r0, r3
 801369a:	f000 fba3 	bl	8013de4 <I2C_ITAddrCplt>
 801369e:	e035      	b.n	801370c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80136a0:	693b      	ldr	r3, [r7, #16]
 80136a2:	2202      	movs	r2, #2
 80136a4:	4013      	ands	r3, r2
 80136a6:	d031      	beq.n	801370c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2202      	movs	r2, #2
 80136ac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80136ae:	d02d      	beq.n	801370c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80136b4:	b29b      	uxth	r3, r3
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d018      	beq.n	80136ec <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136be:	781a      	ldrb	r2, [r3, #0]
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136ca:	1c5a      	adds	r2, r3, #1
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80136d4:	b29b      	uxth	r3, r3
 80136d6:	3b01      	subs	r3, #1
 80136d8:	b29a      	uxth	r2, r3
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80136e2:	3b01      	subs	r3, #1
 80136e4:	b29a      	uxth	r2, r3
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80136ea:	e00f      	b.n	801370c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80136ec:	697a      	ldr	r2, [r7, #20]
 80136ee:	2380      	movs	r3, #128	@ 0x80
 80136f0:	045b      	lsls	r3, r3, #17
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d002      	beq.n	80136fc <I2C_Slave_ISR_IT+0x1d8>
 80136f6:	697b      	ldr	r3, [r7, #20]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d107      	bne.n	801370c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	0018      	movs	r0, r3
 8013700:	f000 fc56 	bl	8013fb0 <I2C_ITSlaveSeqCplt>
 8013704:	e002      	b.n	801370c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8013706:	46c0      	nop			@ (mov r8, r8)
 8013708:	e000      	b.n	801370c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 801370a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	2240      	movs	r2, #64	@ 0x40
 8013710:	2100      	movs	r1, #0
 8013712:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013714:	2300      	movs	r3, #0
}
 8013716:	0018      	movs	r0, r3
 8013718:	46bd      	mov	sp, r7
 801371a:	b006      	add	sp, #24
 801371c:	bd80      	pop	{r7, pc}
 801371e:	46c0      	nop			@ (mov r8, r8)
 8013720:	ffff0000 	.word	0xffff0000

08013724 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8013724:	b590      	push	{r4, r7, lr}
 8013726:	b089      	sub	sp, #36	@ 0x24
 8013728:	af02      	add	r7, sp, #8
 801372a:	60f8      	str	r0, [r7, #12]
 801372c:	60b9      	str	r1, [r7, #8]
 801372e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	2240      	movs	r2, #64	@ 0x40
 8013734:	5c9b      	ldrb	r3, [r3, r2]
 8013736:	2b01      	cmp	r3, #1
 8013738:	d101      	bne.n	801373e <I2C_Master_ISR_DMA+0x1a>
 801373a:	2302      	movs	r3, #2
 801373c:	e0e7      	b.n	801390e <I2C_Master_ISR_DMA+0x1ea>
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	2240      	movs	r2, #64	@ 0x40
 8013742:	2101      	movs	r1, #1
 8013744:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	2210      	movs	r2, #16
 801374a:	4013      	ands	r3, r2
 801374c:	d017      	beq.n	801377e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2210      	movs	r2, #16
 8013752:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013754:	d013      	beq.n	801377e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	2210      	movs	r2, #16
 801375c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013762:	2204      	movs	r2, #4
 8013764:	431a      	orrs	r2, r3
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	2120      	movs	r1, #32
 801376e:	0018      	movs	r0, r3
 8013770:	f001 fb7a 	bl	8014e68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	0018      	movs	r0, r3
 8013778:	f000 ffef 	bl	801475a <I2C_Flush_TXDR>
 801377c:	e0c2      	b.n	8013904 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	2280      	movs	r2, #128	@ 0x80
 8013782:	4013      	ands	r3, r2
 8013784:	d100      	bne.n	8013788 <I2C_Master_ISR_DMA+0x64>
 8013786:	e07c      	b.n	8013882 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	2240      	movs	r2, #64	@ 0x40
 801378c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801378e:	d100      	bne.n	8013792 <I2C_Master_ISR_DMA+0x6e>
 8013790:	e077      	b.n	8013882 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	681a      	ldr	r2, [r3, #0]
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	2140      	movs	r1, #64	@ 0x40
 801379e:	438a      	bics	r2, r1
 80137a0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80137a6:	b29b      	uxth	r3, r3
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d055      	beq.n	8013858 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	685b      	ldr	r3, [r3, #4]
 80137b2:	b29a      	uxth	r2, r3
 80137b4:	2312      	movs	r3, #18
 80137b6:	18fb      	adds	r3, r7, r3
 80137b8:	0592      	lsls	r2, r2, #22
 80137ba:	0d92      	lsrs	r2, r2, #22
 80137bc:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80137c2:	b29b      	uxth	r3, r3
 80137c4:	2bff      	cmp	r3, #255	@ 0xff
 80137c6:	d906      	bls.n	80137d6 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	22ff      	movs	r2, #255	@ 0xff
 80137cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80137ce:	2380      	movs	r3, #128	@ 0x80
 80137d0:	045b      	lsls	r3, r3, #17
 80137d2:	617b      	str	r3, [r7, #20]
 80137d4:	e010      	b.n	80137f8 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80137da:	b29a      	uxth	r2, r3
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137e4:	4a4c      	ldr	r2, [pc, #304]	@ (8013918 <I2C_Master_ISR_DMA+0x1f4>)
 80137e6:	4293      	cmp	r3, r2
 80137e8:	d003      	beq.n	80137f2 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137ee:	617b      	str	r3, [r7, #20]
 80137f0:	e002      	b.n	80137f8 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80137f2:	2380      	movs	r3, #128	@ 0x80
 80137f4:	049b      	lsls	r3, r3, #18
 80137f6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80137fc:	b2da      	uxtb	r2, r3
 80137fe:	697c      	ldr	r4, [r7, #20]
 8013800:	2312      	movs	r3, #18
 8013802:	18fb      	adds	r3, r7, r3
 8013804:	8819      	ldrh	r1, [r3, #0]
 8013806:	68f8      	ldr	r0, [r7, #12]
 8013808:	2300      	movs	r3, #0
 801380a:	9300      	str	r3, [sp, #0]
 801380c:	0023      	movs	r3, r4
 801380e:	f001 faf1 	bl	8014df4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013816:	b29a      	uxth	r2, r3
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801381c:	1ad3      	subs	r3, r2, r3
 801381e:	b29a      	uxth	r2, r3
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2241      	movs	r2, #65	@ 0x41
 8013828:	5c9b      	ldrb	r3, [r3, r2]
 801382a:	b2db      	uxtb	r3, r3
 801382c:	2b22      	cmp	r3, #34	@ 0x22
 801382e:	d109      	bne.n	8013844 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	681a      	ldr	r2, [r3, #0]
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	2180      	movs	r1, #128	@ 0x80
 801383c:	0209      	lsls	r1, r1, #8
 801383e:	430a      	orrs	r2, r1
 8013840:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013842:	e05f      	b.n	8013904 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	681a      	ldr	r2, [r3, #0]
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	2180      	movs	r1, #128	@ 0x80
 8013850:	01c9      	lsls	r1, r1, #7
 8013852:	430a      	orrs	r2, r1
 8013854:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013856:	e055      	b.n	8013904 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	685a      	ldr	r2, [r3, #4]
 801385e:	2380      	movs	r3, #128	@ 0x80
 8013860:	049b      	lsls	r3, r3, #18
 8013862:	401a      	ands	r2, r3
 8013864:	2380      	movs	r3, #128	@ 0x80
 8013866:	049b      	lsls	r3, r3, #18
 8013868:	429a      	cmp	r2, r3
 801386a:	d004      	beq.n	8013876 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	0018      	movs	r0, r3
 8013870:	f000 fb5c 	bl	8013f2c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8013874:	e046      	b.n	8013904 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	2140      	movs	r1, #64	@ 0x40
 801387a:	0018      	movs	r0, r3
 801387c:	f000 fe42 	bl	8014504 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8013880:	e040      	b.n	8013904 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	2240      	movs	r2, #64	@ 0x40
 8013886:	4013      	ands	r3, r2
 8013888:	d02c      	beq.n	80138e4 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	2240      	movs	r2, #64	@ 0x40
 801388e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013890:	d028      	beq.n	80138e4 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013896:	b29b      	uxth	r3, r3
 8013898:	2b00      	cmp	r3, #0
 801389a:	d11d      	bne.n	80138d8 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	685a      	ldr	r2, [r3, #4]
 80138a2:	2380      	movs	r3, #128	@ 0x80
 80138a4:	049b      	lsls	r3, r3, #18
 80138a6:	401a      	ands	r2, r3
 80138a8:	2380      	movs	r3, #128	@ 0x80
 80138aa:	049b      	lsls	r3, r3, #18
 80138ac:	429a      	cmp	r2, r3
 80138ae:	d028      	beq.n	8013902 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138b4:	4a18      	ldr	r2, [pc, #96]	@ (8013918 <I2C_Master_ISR_DMA+0x1f4>)
 80138b6:	4293      	cmp	r3, r2
 80138b8:	d109      	bne.n	80138ce <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	685a      	ldr	r2, [r3, #4]
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	2180      	movs	r1, #128	@ 0x80
 80138c6:	01c9      	lsls	r1, r1, #7
 80138c8:	430a      	orrs	r2, r1
 80138ca:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80138cc:	e019      	b.n	8013902 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	0018      	movs	r0, r3
 80138d2:	f000 fb2b 	bl	8013f2c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80138d6:	e014      	b.n	8013902 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	2140      	movs	r1, #64	@ 0x40
 80138dc:	0018      	movs	r0, r3
 80138de:	f000 fe11 	bl	8014504 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80138e2:	e00e      	b.n	8013902 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	2220      	movs	r2, #32
 80138e8:	4013      	ands	r3, r2
 80138ea:	d00b      	beq.n	8013904 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2220      	movs	r2, #32
 80138f0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80138f2:	d007      	beq.n	8013904 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80138f4:	68ba      	ldr	r2, [r7, #8]
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	0011      	movs	r1, r2
 80138fa:	0018      	movs	r0, r3
 80138fc:	f000 fbbc 	bl	8014078 <I2C_ITMasterCplt>
 8013900:	e000      	b.n	8013904 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8013902:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	2240      	movs	r2, #64	@ 0x40
 8013908:	2100      	movs	r1, #0
 801390a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801390c:	2300      	movs	r3, #0
}
 801390e:	0018      	movs	r0, r3
 8013910:	46bd      	mov	sp, r7
 8013912:	b007      	add	sp, #28
 8013914:	bd90      	pop	{r4, r7, pc}
 8013916:	46c0      	nop			@ (mov r8, r8)
 8013918:	ffff0000 	.word	0xffff0000

0801391c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 801391c:	b590      	push	{r4, r7, lr}
 801391e:	b089      	sub	sp, #36	@ 0x24
 8013920:	af02      	add	r7, sp, #8
 8013922:	60f8      	str	r0, [r7, #12]
 8013924:	60b9      	str	r1, [r7, #8]
 8013926:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8013928:	4b88      	ldr	r3, [pc, #544]	@ (8013b4c <I2C_Mem_ISR_DMA+0x230>)
 801392a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	2240      	movs	r2, #64	@ 0x40
 8013930:	5c9b      	ldrb	r3, [r3, r2]
 8013932:	2b01      	cmp	r3, #1
 8013934:	d101      	bne.n	801393a <I2C_Mem_ISR_DMA+0x1e>
 8013936:	2302      	movs	r3, #2
 8013938:	e104      	b.n	8013b44 <I2C_Mem_ISR_DMA+0x228>
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	2240      	movs	r2, #64	@ 0x40
 801393e:	2101      	movs	r1, #1
 8013940:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	2210      	movs	r2, #16
 8013946:	4013      	ands	r3, r2
 8013948:	d017      	beq.n	801397a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	2210      	movs	r2, #16
 801394e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013950:	d013      	beq.n	801397a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	2210      	movs	r2, #16
 8013958:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801395e:	2204      	movs	r2, #4
 8013960:	431a      	orrs	r2, r3
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	2120      	movs	r1, #32
 801396a:	0018      	movs	r0, r3
 801396c:	f001 fa7c 	bl	8014e68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	0018      	movs	r0, r3
 8013974:	f000 fef1 	bl	801475a <I2C_Flush_TXDR>
 8013978:	e0df      	b.n	8013b3a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801397a:	68bb      	ldr	r3, [r7, #8]
 801397c:	2202      	movs	r2, #2
 801397e:	4013      	ands	r3, r2
 8013980:	d00d      	beq.n	801399e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	2202      	movs	r2, #2
 8013986:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013988:	d009      	beq.n	801399e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	68fa      	ldr	r2, [r7, #12]
 8013990:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013992:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	2201      	movs	r2, #1
 8013998:	4252      	negs	r2, r2
 801399a:	651a      	str	r2, [r3, #80]	@ 0x50
 801399c:	e0cd      	b.n	8013b3a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801399e:	68bb      	ldr	r3, [r7, #8]
 80139a0:	2280      	movs	r2, #128	@ 0x80
 80139a2:	4013      	ands	r3, r2
 80139a4:	d05e      	beq.n	8013a64 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2240      	movs	r2, #64	@ 0x40
 80139aa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80139ac:	d05a      	beq.n	8013a64 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	2110      	movs	r1, #16
 80139b2:	0018      	movs	r0, r3
 80139b4:	f001 fa58 	bl	8014e68 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80139bc:	b29b      	uxth	r3, r3
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d04a      	beq.n	8013a58 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80139c6:	b29b      	uxth	r3, r3
 80139c8:	2bff      	cmp	r3, #255	@ 0xff
 80139ca:	d910      	bls.n	80139ee <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	22ff      	movs	r2, #255	@ 0xff
 80139d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80139d6:	b299      	uxth	r1, r3
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80139dc:	b2da      	uxtb	r2, r3
 80139de:	2380      	movs	r3, #128	@ 0x80
 80139e0:	045b      	lsls	r3, r3, #17
 80139e2:	68f8      	ldr	r0, [r7, #12]
 80139e4:	2400      	movs	r4, #0
 80139e6:	9400      	str	r4, [sp, #0]
 80139e8:	f001 fa04 	bl	8014df4 <I2C_TransferConfig>
 80139ec:	e011      	b.n	8013a12 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80139f2:	b29a      	uxth	r2, r3
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80139fc:	b299      	uxth	r1, r3
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a02:	b2da      	uxtb	r2, r3
 8013a04:	2380      	movs	r3, #128	@ 0x80
 8013a06:	049b      	lsls	r3, r3, #18
 8013a08:	68f8      	ldr	r0, [r7, #12]
 8013a0a:	2400      	movs	r4, #0
 8013a0c:	9400      	str	r4, [sp, #0]
 8013a0e:	f001 f9f1 	bl	8014df4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013a16:	b29a      	uxth	r2, r3
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a1c:	1ad3      	subs	r3, r2, r3
 8013a1e:	b29a      	uxth	r2, r3
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	2241      	movs	r2, #65	@ 0x41
 8013a28:	5c9b      	ldrb	r3, [r3, r2]
 8013a2a:	b2db      	uxtb	r3, r3
 8013a2c:	2b22      	cmp	r3, #34	@ 0x22
 8013a2e:	d109      	bne.n	8013a44 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	681a      	ldr	r2, [r3, #0]
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	2180      	movs	r1, #128	@ 0x80
 8013a3c:	0209      	lsls	r1, r1, #8
 8013a3e:	430a      	orrs	r2, r1
 8013a40:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013a42:	e07a      	b.n	8013b3a <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	2180      	movs	r1, #128	@ 0x80
 8013a50:	01c9      	lsls	r1, r1, #7
 8013a52:	430a      	orrs	r2, r1
 8013a54:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013a56:	e070      	b.n	8013b3a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	2140      	movs	r1, #64	@ 0x40
 8013a5c:	0018      	movs	r0, r3
 8013a5e:	f000 fd51 	bl	8014504 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8013a62:	e06a      	b.n	8013b3a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	2240      	movs	r2, #64	@ 0x40
 8013a68:	4013      	ands	r3, r2
 8013a6a:	d058      	beq.n	8013b1e <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2240      	movs	r2, #64	@ 0x40
 8013a70:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013a72:	d054      	beq.n	8013b1e <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	2241      	movs	r2, #65	@ 0x41
 8013a78:	5c9b      	ldrb	r3, [r3, r2]
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	2b22      	cmp	r3, #34	@ 0x22
 8013a7e:	d101      	bne.n	8013a84 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8013a80:	4b33      	ldr	r3, [pc, #204]	@ (8013b50 <I2C_Mem_ISR_DMA+0x234>)
 8013a82:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013a88:	b29b      	uxth	r3, r3
 8013a8a:	2bff      	cmp	r3, #255	@ 0xff
 8013a8c:	d911      	bls.n	8013ab2 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	22ff      	movs	r2, #255	@ 0xff
 8013a92:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013a98:	b299      	uxth	r1, r3
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a9e:	b2da      	uxtb	r2, r3
 8013aa0:	2380      	movs	r3, #128	@ 0x80
 8013aa2:	045c      	lsls	r4, r3, #17
 8013aa4:	68f8      	ldr	r0, [r7, #12]
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	9300      	str	r3, [sp, #0]
 8013aaa:	0023      	movs	r3, r4
 8013aac:	f001 f9a2 	bl	8014df4 <I2C_TransferConfig>
 8013ab0:	e012      	b.n	8013ad8 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013ab6:	b29a      	uxth	r2, r3
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ac0:	b299      	uxth	r1, r3
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ac6:	b2da      	uxtb	r2, r3
 8013ac8:	2380      	movs	r3, #128	@ 0x80
 8013aca:	049c      	lsls	r4, r3, #18
 8013acc:	68f8      	ldr	r0, [r7, #12]
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	9300      	str	r3, [sp, #0]
 8013ad2:	0023      	movs	r3, r4
 8013ad4:	f001 f98e 	bl	8014df4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013adc:	b29a      	uxth	r2, r3
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ae2:	1ad3      	subs	r3, r2, r3
 8013ae4:	b29a      	uxth	r2, r3
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	2241      	movs	r2, #65	@ 0x41
 8013aee:	5c9b      	ldrb	r3, [r3, r2]
 8013af0:	b2db      	uxtb	r3, r3
 8013af2:	2b22      	cmp	r3, #34	@ 0x22
 8013af4:	d109      	bne.n	8013b0a <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	681a      	ldr	r2, [r3, #0]
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	2180      	movs	r1, #128	@ 0x80
 8013b02:	0209      	lsls	r1, r1, #8
 8013b04:	430a      	orrs	r2, r1
 8013b06:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013b08:	e017      	b.n	8013b3a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	681a      	ldr	r2, [r3, #0]
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	2180      	movs	r1, #128	@ 0x80
 8013b16:	01c9      	lsls	r1, r1, #7
 8013b18:	430a      	orrs	r2, r1
 8013b1a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013b1c:	e00d      	b.n	8013b3a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013b1e:	68bb      	ldr	r3, [r7, #8]
 8013b20:	2220      	movs	r2, #32
 8013b22:	4013      	ands	r3, r2
 8013b24:	d009      	beq.n	8013b3a <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	2220      	movs	r2, #32
 8013b2a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013b2c:	d005      	beq.n	8013b3a <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8013b2e:	68ba      	ldr	r2, [r7, #8]
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	0011      	movs	r1, r2
 8013b34:	0018      	movs	r0, r3
 8013b36:	f000 fa9f 	bl	8014078 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	2240      	movs	r2, #64	@ 0x40
 8013b3e:	2100      	movs	r1, #0
 8013b40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013b42:	2300      	movs	r3, #0
}
 8013b44:	0018      	movs	r0, r3
 8013b46:	46bd      	mov	sp, r7
 8013b48:	b007      	add	sp, #28
 8013b4a:	bd90      	pop	{r4, r7, pc}
 8013b4c:	80002000 	.word	0x80002000
 8013b50:	80002400 	.word	0x80002400

08013b54 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b088      	sub	sp, #32
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	60f8      	str	r0, [r7, #12]
 8013b5c:	60b9      	str	r1, [r7, #8]
 8013b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b64:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8013b66:	2300      	movs	r3, #0
 8013b68:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	2240      	movs	r2, #64	@ 0x40
 8013b6e:	5c9b      	ldrb	r3, [r3, r2]
 8013b70:	2b01      	cmp	r3, #1
 8013b72:	d101      	bne.n	8013b78 <I2C_Slave_ISR_DMA+0x24>
 8013b74:	2302      	movs	r3, #2
 8013b76:	e0cd      	b.n	8013d14 <I2C_Slave_ISR_DMA+0x1c0>
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	2240      	movs	r2, #64	@ 0x40
 8013b7c:	2101      	movs	r1, #1
 8013b7e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013b80:	68bb      	ldr	r3, [r7, #8]
 8013b82:	2220      	movs	r2, #32
 8013b84:	4013      	ands	r3, r2
 8013b86:	d009      	beq.n	8013b9c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	2220      	movs	r2, #32
 8013b8c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013b8e:	d005      	beq.n	8013b9c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8013b90:	68ba      	ldr	r2, [r7, #8]
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	0011      	movs	r1, r2
 8013b96:	0018      	movs	r0, r3
 8013b98:	f000 fb3c 	bl	8014214 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	2210      	movs	r2, #16
 8013ba0:	4013      	ands	r3, r2
 8013ba2:	d100      	bne.n	8013ba6 <I2C_Slave_ISR_DMA+0x52>
 8013ba4:	e0a3      	b.n	8013cee <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	2210      	movs	r2, #16
 8013baa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013bac:	d100      	bne.n	8013bb0 <I2C_Slave_ISR_DMA+0x5c>
 8013bae:	e09e      	b.n	8013cee <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8013bb0:	687a      	ldr	r2, [r7, #4]
 8013bb2:	2380      	movs	r3, #128	@ 0x80
 8013bb4:	01db      	lsls	r3, r3, #7
 8013bb6:	4013      	ands	r3, r2
 8013bb8:	d105      	bne.n	8013bc6 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8013bba:	687a      	ldr	r2, [r7, #4]
 8013bbc:	2380      	movs	r3, #128	@ 0x80
 8013bbe:	021b      	lsls	r3, r3, #8
 8013bc0:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8013bc2:	d100      	bne.n	8013bc6 <I2C_Slave_ISR_DMA+0x72>
 8013bc4:	e08c      	b.n	8013ce0 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d00c      	beq.n	8013be8 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8013bce:	687a      	ldr	r2, [r7, #4]
 8013bd0:	2380      	movs	r3, #128	@ 0x80
 8013bd2:	021b      	lsls	r3, r3, #8
 8013bd4:	4013      	ands	r3, r2
 8013bd6:	d007      	beq.n	8013be8 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	685b      	ldr	r3, [r3, #4]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d101      	bne.n	8013be8 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8013be4:	2301      	movs	r3, #1
 8013be6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d00c      	beq.n	8013c0a <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8013bf0:	687a      	ldr	r2, [r7, #4]
 8013bf2:	2380      	movs	r3, #128	@ 0x80
 8013bf4:	01db      	lsls	r3, r3, #7
 8013bf6:	4013      	ands	r3, r2
 8013bf8:	d007      	beq.n	8013c0a <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	685b      	ldr	r3, [r3, #4]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d101      	bne.n	8013c0a <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8013c06:	2301      	movs	r3, #1
 8013c08:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8013c0a:	69fb      	ldr	r3, [r7, #28]
 8013c0c:	2b01      	cmp	r3, #1
 8013c0e:	d12d      	bne.n	8013c6c <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	2241      	movs	r2, #65	@ 0x41
 8013c14:	5c9b      	ldrb	r3, [r3, r2]
 8013c16:	b2db      	uxtb	r3, r3
 8013c18:	2b28      	cmp	r3, #40	@ 0x28
 8013c1a:	d10b      	bne.n	8013c34 <I2C_Slave_ISR_DMA+0xe0>
 8013c1c:	69ba      	ldr	r2, [r7, #24]
 8013c1e:	2380      	movs	r3, #128	@ 0x80
 8013c20:	049b      	lsls	r3, r3, #18
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d106      	bne.n	8013c34 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8013c26:	68ba      	ldr	r2, [r7, #8]
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	0011      	movs	r1, r2
 8013c2c:	0018      	movs	r0, r3
 8013c2e:	f000 fc11 	bl	8014454 <I2C_ITListenCplt>
 8013c32:	e054      	b.n	8013cde <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	2241      	movs	r2, #65	@ 0x41
 8013c38:	5c9b      	ldrb	r3, [r3, r2]
 8013c3a:	b2db      	uxtb	r3, r3
 8013c3c:	2b29      	cmp	r3, #41	@ 0x29
 8013c3e:	d110      	bne.n	8013c62 <I2C_Slave_ISR_DMA+0x10e>
 8013c40:	69bb      	ldr	r3, [r7, #24]
 8013c42:	4a36      	ldr	r2, [pc, #216]	@ (8013d1c <I2C_Slave_ISR_DMA+0x1c8>)
 8013c44:	4293      	cmp	r3, r2
 8013c46:	d00c      	beq.n	8013c62 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	2210      	movs	r2, #16
 8013c4e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	0018      	movs	r0, r3
 8013c54:	f000 fd81 	bl	801475a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	0018      	movs	r0, r3
 8013c5c:	f000 f9a8 	bl	8013fb0 <I2C_ITSlaveSeqCplt>
 8013c60:	e03d      	b.n	8013cde <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	2210      	movs	r2, #16
 8013c68:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8013c6a:	e03e      	b.n	8013cea <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	2210      	movs	r2, #16
 8013c72:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c78:	2204      	movs	r2, #4
 8013c7a:	431a      	orrs	r2, r3
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8013c80:	2317      	movs	r3, #23
 8013c82:	18fb      	adds	r3, r7, r3
 8013c84:	68fa      	ldr	r2, [r7, #12]
 8013c86:	2141      	movs	r1, #65	@ 0x41
 8013c88:	5c52      	ldrb	r2, [r2, r1]
 8013c8a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8013c8c:	69bb      	ldr	r3, [r7, #24]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d004      	beq.n	8013c9c <I2C_Slave_ISR_DMA+0x148>
 8013c92:	69ba      	ldr	r2, [r7, #24]
 8013c94:	2380      	movs	r3, #128	@ 0x80
 8013c96:	045b      	lsls	r3, r3, #17
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	d126      	bne.n	8013cea <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8013c9c:	2217      	movs	r2, #23
 8013c9e:	18bb      	adds	r3, r7, r2
 8013ca0:	781b      	ldrb	r3, [r3, #0]
 8013ca2:	2b21      	cmp	r3, #33	@ 0x21
 8013ca4:	d003      	beq.n	8013cae <I2C_Slave_ISR_DMA+0x15a>
 8013ca6:	18bb      	adds	r3, r7, r2
 8013ca8:	781b      	ldrb	r3, [r3, #0]
 8013caa:	2b29      	cmp	r3, #41	@ 0x29
 8013cac:	d103      	bne.n	8013cb6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	2221      	movs	r2, #33	@ 0x21
 8013cb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8013cb4:	e00b      	b.n	8013cce <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8013cb6:	2217      	movs	r2, #23
 8013cb8:	18bb      	adds	r3, r7, r2
 8013cba:	781b      	ldrb	r3, [r3, #0]
 8013cbc:	2b22      	cmp	r3, #34	@ 0x22
 8013cbe:	d003      	beq.n	8013cc8 <I2C_Slave_ISR_DMA+0x174>
 8013cc0:	18bb      	adds	r3, r7, r2
 8013cc2:	781b      	ldrb	r3, [r3, #0]
 8013cc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8013cc6:	d102      	bne.n	8013cce <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	2222      	movs	r2, #34	@ 0x22
 8013ccc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	0011      	movs	r1, r2
 8013cd6:	0018      	movs	r0, r3
 8013cd8:	f000 fc14 	bl	8014504 <I2C_ITError>
      if (treatdmanack == 1U)
 8013cdc:	e005      	b.n	8013cea <I2C_Slave_ISR_DMA+0x196>
 8013cde:	e004      	b.n	8013cea <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	2210      	movs	r2, #16
 8013ce6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8013ce8:	e00f      	b.n	8013d0a <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8013cea:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8013cec:	e00d      	b.n	8013d0a <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013cee:	68bb      	ldr	r3, [r7, #8]
 8013cf0:	2208      	movs	r2, #8
 8013cf2:	4013      	ands	r3, r2
 8013cf4:	d009      	beq.n	8013d0a <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	2208      	movs	r2, #8
 8013cfa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013cfc:	d005      	beq.n	8013d0a <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8013cfe:	68ba      	ldr	r2, [r7, #8]
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	0011      	movs	r1, r2
 8013d04:	0018      	movs	r0, r3
 8013d06:	f000 f86d 	bl	8013de4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	2240      	movs	r2, #64	@ 0x40
 8013d0e:	2100      	movs	r1, #0
 8013d10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013d12:	2300      	movs	r3, #0
}
 8013d14:	0018      	movs	r0, r3
 8013d16:	46bd      	mov	sp, r7
 8013d18:	b008      	add	sp, #32
 8013d1a:	bd80      	pop	{r7, pc}
 8013d1c:	ffff0000 	.word	0xffff0000

08013d20 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8013d20:	b5b0      	push	{r4, r5, r7, lr}
 8013d22:	b086      	sub	sp, #24
 8013d24:	af02      	add	r7, sp, #8
 8013d26:	60f8      	str	r0, [r7, #12]
 8013d28:	000c      	movs	r4, r1
 8013d2a:	0010      	movs	r0, r2
 8013d2c:	0019      	movs	r1, r3
 8013d2e:	250a      	movs	r5, #10
 8013d30:	197b      	adds	r3, r7, r5
 8013d32:	1c22      	adds	r2, r4, #0
 8013d34:	801a      	strh	r2, [r3, #0]
 8013d36:	2308      	movs	r3, #8
 8013d38:	18fb      	adds	r3, r7, r3
 8013d3a:	1c02      	adds	r2, r0, #0
 8013d3c:	801a      	strh	r2, [r3, #0]
 8013d3e:	1dbb      	adds	r3, r7, #6
 8013d40:	1c0a      	adds	r2, r1, #0
 8013d42:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8013d44:	1dbb      	adds	r3, r7, #6
 8013d46:	881b      	ldrh	r3, [r3, #0]
 8013d48:	b2da      	uxtb	r2, r3
 8013d4a:	197b      	adds	r3, r7, r5
 8013d4c:	8819      	ldrh	r1, [r3, #0]
 8013d4e:	68f8      	ldr	r0, [r7, #12]
 8013d50:	4b23      	ldr	r3, [pc, #140]	@ (8013de0 <I2C_RequestMemoryRead+0xc0>)
 8013d52:	9300      	str	r3, [sp, #0]
 8013d54:	2300      	movs	r3, #0
 8013d56:	f001 f84d 	bl	8014df4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d5c:	6a39      	ldr	r1, [r7, #32]
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	0018      	movs	r0, r3
 8013d62:	f000 fe43 	bl	80149ec <I2C_WaitOnTXISFlagUntilTimeout>
 8013d66:	1e03      	subs	r3, r0, #0
 8013d68:	d001      	beq.n	8013d6e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	e033      	b.n	8013dd6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8013d6e:	1dbb      	adds	r3, r7, #6
 8013d70:	881b      	ldrh	r3, [r3, #0]
 8013d72:	2b01      	cmp	r3, #1
 8013d74:	d107      	bne.n	8013d86 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8013d76:	2308      	movs	r3, #8
 8013d78:	18fb      	adds	r3, r7, r3
 8013d7a:	881b      	ldrh	r3, [r3, #0]
 8013d7c:	b2da      	uxtb	r2, r3
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	629a      	str	r2, [r3, #40]	@ 0x28
 8013d84:	e019      	b.n	8013dba <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8013d86:	2308      	movs	r3, #8
 8013d88:	18fb      	adds	r3, r7, r3
 8013d8a:	881b      	ldrh	r3, [r3, #0]
 8013d8c:	0a1b      	lsrs	r3, r3, #8
 8013d8e:	b29b      	uxth	r3, r3
 8013d90:	b2da      	uxtb	r2, r3
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d9a:	6a39      	ldr	r1, [r7, #32]
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	0018      	movs	r0, r3
 8013da0:	f000 fe24 	bl	80149ec <I2C_WaitOnTXISFlagUntilTimeout>
 8013da4:	1e03      	subs	r3, r0, #0
 8013da6:	d001      	beq.n	8013dac <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8013da8:	2301      	movs	r3, #1
 8013daa:	e014      	b.n	8013dd6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8013dac:	2308      	movs	r3, #8
 8013dae:	18fb      	adds	r3, r7, r3
 8013db0:	881b      	ldrh	r3, [r3, #0]
 8013db2:	b2da      	uxtb	r2, r3
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8013dba:	6a3a      	ldr	r2, [r7, #32]
 8013dbc:	68f8      	ldr	r0, [r7, #12]
 8013dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dc0:	9300      	str	r3, [sp, #0]
 8013dc2:	0013      	movs	r3, r2
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	2140      	movs	r1, #64	@ 0x40
 8013dc8:	f000 fdc2 	bl	8014950 <I2C_WaitOnFlagUntilTimeout>
 8013dcc:	1e03      	subs	r3, r0, #0
 8013dce:	d001      	beq.n	8013dd4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	e000      	b.n	8013dd6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8013dd4:	2300      	movs	r3, #0
}
 8013dd6:	0018      	movs	r0, r3
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	b004      	add	sp, #16
 8013ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8013dde:	46c0      	nop			@ (mov r8, r8)
 8013de0:	80002000 	.word	0x80002000

08013de4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8013de4:	b5b0      	push	{r4, r5, r7, lr}
 8013de6:	b084      	sub	sp, #16
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	2241      	movs	r2, #65	@ 0x41
 8013df2:	5c9b      	ldrb	r3, [r3, r2]
 8013df4:	b2db      	uxtb	r3, r3
 8013df6:	001a      	movs	r2, r3
 8013df8:	2328      	movs	r3, #40	@ 0x28
 8013dfa:	4013      	ands	r3, r2
 8013dfc:	2b28      	cmp	r3, #40	@ 0x28
 8013dfe:	d000      	beq.n	8013e02 <I2C_ITAddrCplt+0x1e>
 8013e00:	e088      	b.n	8013f14 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	699b      	ldr	r3, [r3, #24]
 8013e08:	0c1b      	lsrs	r3, r3, #16
 8013e0a:	b2da      	uxtb	r2, r3
 8013e0c:	250f      	movs	r5, #15
 8013e0e:	197b      	adds	r3, r7, r5
 8013e10:	2101      	movs	r1, #1
 8013e12:	400a      	ands	r2, r1
 8013e14:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	699b      	ldr	r3, [r3, #24]
 8013e1c:	0c1b      	lsrs	r3, r3, #16
 8013e1e:	b29a      	uxth	r2, r3
 8013e20:	200c      	movs	r0, #12
 8013e22:	183b      	adds	r3, r7, r0
 8013e24:	21fe      	movs	r1, #254	@ 0xfe
 8013e26:	400a      	ands	r2, r1
 8013e28:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	689b      	ldr	r3, [r3, #8]
 8013e30:	b29a      	uxth	r2, r3
 8013e32:	240a      	movs	r4, #10
 8013e34:	193b      	adds	r3, r7, r4
 8013e36:	0592      	lsls	r2, r2, #22
 8013e38:	0d92      	lsrs	r2, r2, #22
 8013e3a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	68db      	ldr	r3, [r3, #12]
 8013e42:	b29a      	uxth	r2, r3
 8013e44:	2308      	movs	r3, #8
 8013e46:	18fb      	adds	r3, r7, r3
 8013e48:	21fe      	movs	r1, #254	@ 0xfe
 8013e4a:	400a      	ands	r2, r1
 8013e4c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	68db      	ldr	r3, [r3, #12]
 8013e52:	2b02      	cmp	r3, #2
 8013e54:	d148      	bne.n	8013ee8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8013e56:	0021      	movs	r1, r4
 8013e58:	187b      	adds	r3, r7, r1
 8013e5a:	881b      	ldrh	r3, [r3, #0]
 8013e5c:	09db      	lsrs	r3, r3, #7
 8013e5e:	b29a      	uxth	r2, r3
 8013e60:	183b      	adds	r3, r7, r0
 8013e62:	881b      	ldrh	r3, [r3, #0]
 8013e64:	4053      	eors	r3, r2
 8013e66:	b29b      	uxth	r3, r3
 8013e68:	001a      	movs	r2, r3
 8013e6a:	2306      	movs	r3, #6
 8013e6c:	4013      	ands	r3, r2
 8013e6e:	d120      	bne.n	8013eb2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8013e70:	183b      	adds	r3, r7, r0
 8013e72:	187a      	adds	r2, r7, r1
 8013e74:	8812      	ldrh	r2, [r2, #0]
 8013e76:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013e7c:	1c5a      	adds	r2, r3, #1
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013e86:	2b02      	cmp	r3, #2
 8013e88:	d14c      	bne.n	8013f24 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	2208      	movs	r2, #8
 8013e96:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2240      	movs	r2, #64	@ 0x40
 8013e9c:	2100      	movs	r1, #0
 8013e9e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8013ea0:	183b      	adds	r3, r7, r0
 8013ea2:	881a      	ldrh	r2, [r3, #0]
 8013ea4:	197b      	adds	r3, r7, r5
 8013ea6:	7819      	ldrb	r1, [r3, #0]
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	0018      	movs	r0, r3
 8013eac:	f7ff f9d7 	bl	801325e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8013eb0:	e038      	b.n	8013f24 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8013eb2:	240c      	movs	r4, #12
 8013eb4:	193b      	adds	r3, r7, r4
 8013eb6:	2208      	movs	r2, #8
 8013eb8:	18ba      	adds	r2, r7, r2
 8013eba:	8812      	ldrh	r2, [r2, #0]
 8013ebc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8013ebe:	2380      	movs	r3, #128	@ 0x80
 8013ec0:	021a      	lsls	r2, r3, #8
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	0011      	movs	r1, r2
 8013ec6:	0018      	movs	r0, r3
 8013ec8:	f001 f85c 	bl	8014f84 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2240      	movs	r2, #64	@ 0x40
 8013ed0:	2100      	movs	r1, #0
 8013ed2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8013ed4:	193b      	adds	r3, r7, r4
 8013ed6:	881a      	ldrh	r2, [r3, #0]
 8013ed8:	230f      	movs	r3, #15
 8013eda:	18fb      	adds	r3, r7, r3
 8013edc:	7819      	ldrb	r1, [r3, #0]
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	0018      	movs	r0, r3
 8013ee2:	f7ff f9bc 	bl	801325e <HAL_I2C_AddrCallback>
}
 8013ee6:	e01d      	b.n	8013f24 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8013ee8:	2380      	movs	r3, #128	@ 0x80
 8013eea:	021a      	lsls	r2, r3, #8
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	0011      	movs	r1, r2
 8013ef0:	0018      	movs	r0, r3
 8013ef2:	f001 f847 	bl	8014f84 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2240      	movs	r2, #64	@ 0x40
 8013efa:	2100      	movs	r1, #0
 8013efc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8013efe:	230c      	movs	r3, #12
 8013f00:	18fb      	adds	r3, r7, r3
 8013f02:	881a      	ldrh	r2, [r3, #0]
 8013f04:	230f      	movs	r3, #15
 8013f06:	18fb      	adds	r3, r7, r3
 8013f08:	7819      	ldrb	r1, [r3, #0]
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	0018      	movs	r0, r3
 8013f0e:	f7ff f9a6 	bl	801325e <HAL_I2C_AddrCallback>
}
 8013f12:	e007      	b.n	8013f24 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	2208      	movs	r2, #8
 8013f1a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2240      	movs	r2, #64	@ 0x40
 8013f20:	2100      	movs	r1, #0
 8013f22:	5499      	strb	r1, [r3, r2]
}
 8013f24:	46c0      	nop			@ (mov r8, r8)
 8013f26:	46bd      	mov	sp, r7
 8013f28:	b004      	add	sp, #16
 8013f2a:	bdb0      	pop	{r4, r5, r7, pc}

08013f2c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b082      	sub	sp, #8
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	2242      	movs	r2, #66	@ 0x42
 8013f38:	2100      	movs	r1, #0
 8013f3a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2241      	movs	r2, #65	@ 0x41
 8013f40:	5c9b      	ldrb	r3, [r3, r2]
 8013f42:	b2db      	uxtb	r3, r3
 8013f44:	2b21      	cmp	r3, #33	@ 0x21
 8013f46:	d117      	bne.n	8013f78 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	2241      	movs	r2, #65	@ 0x41
 8013f4c:	2120      	movs	r1, #32
 8013f4e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2211      	movs	r2, #17
 8013f54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	2200      	movs	r2, #0
 8013f5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	2101      	movs	r1, #1
 8013f60:	0018      	movs	r0, r3
 8013f62:	f001 f80f 	bl	8014f84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	2240      	movs	r2, #64	@ 0x40
 8013f6a:	2100      	movs	r1, #0
 8013f6c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	0018      	movs	r0, r3
 8013f72:	f7ff f954 	bl	801321e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8013f76:	e016      	b.n	8013fa6 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2241      	movs	r2, #65	@ 0x41
 8013f7c:	2120      	movs	r1, #32
 8013f7e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2212      	movs	r2, #18
 8013f84:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2200      	movs	r2, #0
 8013f8a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2102      	movs	r1, #2
 8013f90:	0018      	movs	r0, r3
 8013f92:	f000 fff7 	bl	8014f84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2240      	movs	r2, #64	@ 0x40
 8013f9a:	2100      	movs	r1, #0
 8013f9c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	0018      	movs	r0, r3
 8013fa2:	f7ff f944 	bl	801322e <HAL_I2C_MasterRxCpltCallback>
}
 8013fa6:	46c0      	nop			@ (mov r8, r8)
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	b002      	add	sp, #8
 8013fac:	bd80      	pop	{r7, pc}
	...

08013fb0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b084      	sub	sp, #16
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	2242      	movs	r2, #66	@ 0x42
 8013fc4:	2100      	movs	r1, #0
 8013fc6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8013fc8:	68fa      	ldr	r2, [r7, #12]
 8013fca:	2380      	movs	r3, #128	@ 0x80
 8013fcc:	01db      	lsls	r3, r3, #7
 8013fce:	4013      	ands	r3, r2
 8013fd0:	d008      	beq.n	8013fe4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	681a      	ldr	r2, [r3, #0]
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	4924      	ldr	r1, [pc, #144]	@ (8014070 <I2C_ITSlaveSeqCplt+0xc0>)
 8013fde:	400a      	ands	r2, r1
 8013fe0:	601a      	str	r2, [r3, #0]
 8013fe2:	e00c      	b.n	8013ffe <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8013fe4:	68fa      	ldr	r2, [r7, #12]
 8013fe6:	2380      	movs	r3, #128	@ 0x80
 8013fe8:	021b      	lsls	r3, r3, #8
 8013fea:	4013      	ands	r3, r2
 8013fec:	d007      	beq.n	8013ffe <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	681a      	ldr	r2, [r3, #0]
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	491e      	ldr	r1, [pc, #120]	@ (8014074 <I2C_ITSlaveSeqCplt+0xc4>)
 8013ffa:	400a      	ands	r2, r1
 8013ffc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	2241      	movs	r2, #65	@ 0x41
 8014002:	5c9b      	ldrb	r3, [r3, r2]
 8014004:	b2db      	uxtb	r3, r3
 8014006:	2b29      	cmp	r3, #41	@ 0x29
 8014008:	d114      	bne.n	8014034 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	2241      	movs	r2, #65	@ 0x41
 801400e:	2128      	movs	r1, #40	@ 0x28
 8014010:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2221      	movs	r2, #33	@ 0x21
 8014016:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2101      	movs	r1, #1
 801401c:	0018      	movs	r0, r3
 801401e:	f000 ffb1 	bl	8014f84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	2240      	movs	r2, #64	@ 0x40
 8014026:	2100      	movs	r1, #0
 8014028:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	0018      	movs	r0, r3
 801402e:	f7ff f906 	bl	801323e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8014032:	e019      	b.n	8014068 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2241      	movs	r2, #65	@ 0x41
 8014038:	5c9b      	ldrb	r3, [r3, r2]
 801403a:	b2db      	uxtb	r3, r3
 801403c:	2b2a      	cmp	r3, #42	@ 0x2a
 801403e:	d113      	bne.n	8014068 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2241      	movs	r2, #65	@ 0x41
 8014044:	2128      	movs	r1, #40	@ 0x28
 8014046:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2222      	movs	r2, #34	@ 0x22
 801404c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2102      	movs	r1, #2
 8014052:	0018      	movs	r0, r3
 8014054:	f000 ff96 	bl	8014f84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2240      	movs	r2, #64	@ 0x40
 801405c:	2100      	movs	r1, #0
 801405e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	0018      	movs	r0, r3
 8014064:	f7ff f8f3 	bl	801324e <HAL_I2C_SlaveRxCpltCallback>
}
 8014068:	46c0      	nop			@ (mov r8, r8)
 801406a:	46bd      	mov	sp, r7
 801406c:	b004      	add	sp, #16
 801406e:	bd80      	pop	{r7, pc}
 8014070:	ffffbfff 	.word	0xffffbfff
 8014074:	ffff7fff 	.word	0xffff7fff

08014078 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b086      	sub	sp, #24
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
 8014080:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	2220      	movs	r2, #32
 801408c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	2241      	movs	r2, #65	@ 0x41
 8014092:	5c9b      	ldrb	r3, [r3, r2]
 8014094:	b2db      	uxtb	r3, r3
 8014096:	2b21      	cmp	r3, #33	@ 0x21
 8014098:	d108      	bne.n	80140ac <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	2101      	movs	r1, #1
 801409e:	0018      	movs	r0, r3
 80140a0:	f000 ff70 	bl	8014f84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2211      	movs	r2, #17
 80140a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80140aa:	e00d      	b.n	80140c8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2241      	movs	r2, #65	@ 0x41
 80140b0:	5c9b      	ldrb	r3, [r3, r2]
 80140b2:	b2db      	uxtb	r3, r3
 80140b4:	2b22      	cmp	r3, #34	@ 0x22
 80140b6:	d107      	bne.n	80140c8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	2102      	movs	r1, #2
 80140bc:	0018      	movs	r0, r3
 80140be:	f000 ff61 	bl	8014f84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	2212      	movs	r2, #18
 80140c6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	685a      	ldr	r2, [r3, #4]
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	494e      	ldr	r1, [pc, #312]	@ (801420c <I2C_ITMasterCplt+0x194>)
 80140d4:	400a      	ands	r2, r1
 80140d6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2200      	movs	r2, #0
 80140dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	4a4b      	ldr	r2, [pc, #300]	@ (8014210 <I2C_ITMasterCplt+0x198>)
 80140e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	2210      	movs	r2, #16
 80140e8:	4013      	ands	r3, r2
 80140ea:	d009      	beq.n	8014100 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	2210      	movs	r2, #16
 80140f2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80140f8:	2204      	movs	r2, #4
 80140fa:	431a      	orrs	r2, r3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2241      	movs	r2, #65	@ 0x41
 8014104:	5c9b      	ldrb	r3, [r3, r2]
 8014106:	b2db      	uxtb	r3, r3
 8014108:	2b60      	cmp	r3, #96	@ 0x60
 801410a:	d109      	bne.n	8014120 <I2C_ITMasterCplt+0xa8>
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	2204      	movs	r2, #4
 8014110:	4013      	ands	r3, r2
 8014112:	d005      	beq.n	8014120 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801411a:	b2db      	uxtb	r3, r3
 801411c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 801411e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	0018      	movs	r0, r3
 8014124:	f000 fb19 	bl	801475a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801412c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	2241      	movs	r2, #65	@ 0x41
 8014132:	5c9b      	ldrb	r3, [r3, r2]
 8014134:	b2db      	uxtb	r3, r3
 8014136:	2b60      	cmp	r3, #96	@ 0x60
 8014138:	d002      	beq.n	8014140 <I2C_ITMasterCplt+0xc8>
 801413a:	693b      	ldr	r3, [r7, #16]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d007      	beq.n	8014150 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	0011      	movs	r1, r2
 8014148:	0018      	movs	r0, r3
 801414a:	f000 f9db 	bl	8014504 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 801414e:	e058      	b.n	8014202 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2241      	movs	r2, #65	@ 0x41
 8014154:	5c9b      	ldrb	r3, [r3, r2]
 8014156:	b2db      	uxtb	r3, r3
 8014158:	2b21      	cmp	r3, #33	@ 0x21
 801415a:	d126      	bne.n	80141aa <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2241      	movs	r2, #65	@ 0x41
 8014160:	2120      	movs	r1, #32
 8014162:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2200      	movs	r2, #0
 8014168:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	2242      	movs	r2, #66	@ 0x42
 801416e:	5c9b      	ldrb	r3, [r3, r2]
 8014170:	b2db      	uxtb	r3, r3
 8014172:	2b40      	cmp	r3, #64	@ 0x40
 8014174:	d10c      	bne.n	8014190 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	2242      	movs	r2, #66	@ 0x42
 801417a:	2100      	movs	r1, #0
 801417c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	2240      	movs	r2, #64	@ 0x40
 8014182:	2100      	movs	r1, #0
 8014184:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	0018      	movs	r0, r3
 801418a:	f7ff f880 	bl	801328e <HAL_I2C_MemTxCpltCallback>
}
 801418e:	e038      	b.n	8014202 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2242      	movs	r2, #66	@ 0x42
 8014194:	2100      	movs	r1, #0
 8014196:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2240      	movs	r2, #64	@ 0x40
 801419c:	2100      	movs	r1, #0
 801419e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	0018      	movs	r0, r3
 80141a4:	f7ff f83b 	bl	801321e <HAL_I2C_MasterTxCpltCallback>
}
 80141a8:	e02b      	b.n	8014202 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	2241      	movs	r2, #65	@ 0x41
 80141ae:	5c9b      	ldrb	r3, [r3, r2]
 80141b0:	b2db      	uxtb	r3, r3
 80141b2:	2b22      	cmp	r3, #34	@ 0x22
 80141b4:	d125      	bne.n	8014202 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	2241      	movs	r2, #65	@ 0x41
 80141ba:	2120      	movs	r1, #32
 80141bc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2200      	movs	r2, #0
 80141c2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2242      	movs	r2, #66	@ 0x42
 80141c8:	5c9b      	ldrb	r3, [r3, r2]
 80141ca:	b2db      	uxtb	r3, r3
 80141cc:	2b40      	cmp	r3, #64	@ 0x40
 80141ce:	d10c      	bne.n	80141ea <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	2242      	movs	r2, #66	@ 0x42
 80141d4:	2100      	movs	r1, #0
 80141d6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	2240      	movs	r2, #64	@ 0x40
 80141dc:	2100      	movs	r1, #0
 80141de:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	0018      	movs	r0, r3
 80141e4:	f7ff f85b 	bl	801329e <HAL_I2C_MemRxCpltCallback>
}
 80141e8:	e00b      	b.n	8014202 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2242      	movs	r2, #66	@ 0x42
 80141ee:	2100      	movs	r1, #0
 80141f0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	2240      	movs	r2, #64	@ 0x40
 80141f6:	2100      	movs	r1, #0
 80141f8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	0018      	movs	r0, r3
 80141fe:	f7ff f816 	bl	801322e <HAL_I2C_MasterRxCpltCallback>
}
 8014202:	46c0      	nop			@ (mov r8, r8)
 8014204:	46bd      	mov	sp, r7
 8014206:	b006      	add	sp, #24
 8014208:	bd80      	pop	{r7, pc}
 801420a:	46c0      	nop			@ (mov r8, r8)
 801420c:	fe00e800 	.word	0xfe00e800
 8014210:	ffff0000 	.word	0xffff0000

08014214 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b086      	sub	sp, #24
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
 801421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801422a:	200f      	movs	r0, #15
 801422c:	183b      	adds	r3, r7, r0
 801422e:	687a      	ldr	r2, [r7, #4]
 8014230:	2141      	movs	r1, #65	@ 0x41
 8014232:	5c52      	ldrb	r2, [r2, r1]
 8014234:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	2220      	movs	r2, #32
 801423c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801423e:	183b      	adds	r3, r7, r0
 8014240:	781b      	ldrb	r3, [r3, #0]
 8014242:	2b21      	cmp	r3, #33	@ 0x21
 8014244:	d003      	beq.n	801424e <I2C_ITSlaveCplt+0x3a>
 8014246:	183b      	adds	r3, r7, r0
 8014248:	781b      	ldrb	r3, [r3, #0]
 801424a:	2b29      	cmp	r3, #41	@ 0x29
 801424c:	d109      	bne.n	8014262 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 801424e:	4a7b      	ldr	r2, [pc, #492]	@ (801443c <I2C_ITSlaveCplt+0x228>)
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	0011      	movs	r1, r2
 8014254:	0018      	movs	r0, r3
 8014256:	f000 fe95 	bl	8014f84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	2221      	movs	r2, #33	@ 0x21
 801425e:	631a      	str	r2, [r3, #48]	@ 0x30
 8014260:	e011      	b.n	8014286 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8014262:	220f      	movs	r2, #15
 8014264:	18bb      	adds	r3, r7, r2
 8014266:	781b      	ldrb	r3, [r3, #0]
 8014268:	2b22      	cmp	r3, #34	@ 0x22
 801426a:	d003      	beq.n	8014274 <I2C_ITSlaveCplt+0x60>
 801426c:	18bb      	adds	r3, r7, r2
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	2b2a      	cmp	r3, #42	@ 0x2a
 8014272:	d108      	bne.n	8014286 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8014274:	4a72      	ldr	r2, [pc, #456]	@ (8014440 <I2C_ITSlaveCplt+0x22c>)
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	0011      	movs	r1, r2
 801427a:	0018      	movs	r0, r3
 801427c:	f000 fe82 	bl	8014f84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	2222      	movs	r2, #34	@ 0x22
 8014284:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	685a      	ldr	r2, [r3, #4]
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	2180      	movs	r1, #128	@ 0x80
 8014292:	0209      	lsls	r1, r1, #8
 8014294:	430a      	orrs	r2, r1
 8014296:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	685a      	ldr	r2, [r3, #4]
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	4968      	ldr	r1, [pc, #416]	@ (8014444 <I2C_ITSlaveCplt+0x230>)
 80142a4:	400a      	ands	r2, r1
 80142a6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	0018      	movs	r0, r3
 80142ac:	f000 fa55 	bl	801475a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80142b0:	693a      	ldr	r2, [r7, #16]
 80142b2:	2380      	movs	r3, #128	@ 0x80
 80142b4:	01db      	lsls	r3, r3, #7
 80142b6:	4013      	ands	r3, r2
 80142b8:	d013      	beq.n	80142e2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	681a      	ldr	r2, [r3, #0]
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	4960      	ldr	r1, [pc, #384]	@ (8014448 <I2C_ITSlaveCplt+0x234>)
 80142c6:	400a      	ands	r2, r1
 80142c8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d01f      	beq.n	8014312 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	685b      	ldr	r3, [r3, #4]
 80142da:	b29a      	uxth	r2, r3
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80142e0:	e017      	b.n	8014312 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80142e2:	693a      	ldr	r2, [r7, #16]
 80142e4:	2380      	movs	r3, #128	@ 0x80
 80142e6:	021b      	lsls	r3, r3, #8
 80142e8:	4013      	ands	r3, r2
 80142ea:	d012      	beq.n	8014312 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	681a      	ldr	r2, [r3, #0]
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	4955      	ldr	r1, [pc, #340]	@ (801444c <I2C_ITSlaveCplt+0x238>)
 80142f8:	400a      	ands	r2, r1
 80142fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014300:	2b00      	cmp	r3, #0
 8014302:	d006      	beq.n	8014312 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	685b      	ldr	r3, [r3, #4]
 801430c:	b29a      	uxth	r2, r3
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	2204      	movs	r2, #4
 8014316:	4013      	ands	r3, r2
 8014318:	d020      	beq.n	801435c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801431a:	697b      	ldr	r3, [r7, #20]
 801431c:	2204      	movs	r2, #4
 801431e:	4393      	bics	r3, r2
 8014320:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801432c:	b2d2      	uxtb	r2, r2
 801432e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014334:	1c5a      	adds	r2, r3, #1
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801433e:	2b00      	cmp	r3, #0
 8014340:	d00c      	beq.n	801435c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014346:	3b01      	subs	r3, #1
 8014348:	b29a      	uxth	r2, r3
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014352:	b29b      	uxth	r3, r3
 8014354:	3b01      	subs	r3, #1
 8014356:	b29a      	uxth	r2, r3
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014360:	b29b      	uxth	r3, r3
 8014362:	2b00      	cmp	r3, #0
 8014364:	d005      	beq.n	8014372 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801436a:	2204      	movs	r2, #4
 801436c:	431a      	orrs	r2, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2242      	movs	r2, #66	@ 0x42
 8014376:	2100      	movs	r1, #0
 8014378:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2200      	movs	r2, #0
 801437e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014384:	2b00      	cmp	r3, #0
 8014386:	d013      	beq.n	80143b0 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	0011      	movs	r1, r2
 8014390:	0018      	movs	r0, r3
 8014392:	f000 f8b7 	bl	8014504 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	2241      	movs	r2, #65	@ 0x41
 801439a:	5c9b      	ldrb	r3, [r3, r2]
 801439c:	b2db      	uxtb	r3, r3
 801439e:	2b28      	cmp	r3, #40	@ 0x28
 80143a0:	d147      	bne.n	8014432 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80143a2:	697a      	ldr	r2, [r7, #20]
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	0011      	movs	r1, r2
 80143a8:	0018      	movs	r0, r3
 80143aa:	f000 f853 	bl	8014454 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80143ae:	e040      	b.n	8014432 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143b4:	4a26      	ldr	r2, [pc, #152]	@ (8014450 <I2C_ITSlaveCplt+0x23c>)
 80143b6:	4293      	cmp	r3, r2
 80143b8:	d016      	beq.n	80143e8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	0018      	movs	r0, r3
 80143be:	f7ff fdf7 	bl	8013fb0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	4a22      	ldr	r2, [pc, #136]	@ (8014450 <I2C_ITSlaveCplt+0x23c>)
 80143c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2241      	movs	r2, #65	@ 0x41
 80143cc:	2120      	movs	r1, #32
 80143ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2200      	movs	r2, #0
 80143d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	2240      	movs	r2, #64	@ 0x40
 80143da:	2100      	movs	r1, #0
 80143dc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	0018      	movs	r0, r3
 80143e2:	f7fe ff4c 	bl	801327e <HAL_I2C_ListenCpltCallback>
}
 80143e6:	e024      	b.n	8014432 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2241      	movs	r2, #65	@ 0x41
 80143ec:	5c9b      	ldrb	r3, [r3, r2]
 80143ee:	b2db      	uxtb	r3, r3
 80143f0:	2b22      	cmp	r3, #34	@ 0x22
 80143f2:	d10f      	bne.n	8014414 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2241      	movs	r2, #65	@ 0x41
 80143f8:	2120      	movs	r1, #32
 80143fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2200      	movs	r2, #0
 8014400:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	2240      	movs	r2, #64	@ 0x40
 8014406:	2100      	movs	r1, #0
 8014408:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	0018      	movs	r0, r3
 801440e:	f7fe ff1e 	bl	801324e <HAL_I2C_SlaveRxCpltCallback>
}
 8014412:	e00e      	b.n	8014432 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2241      	movs	r2, #65	@ 0x41
 8014418:	2120      	movs	r1, #32
 801441a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	2200      	movs	r2, #0
 8014420:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	2240      	movs	r2, #64	@ 0x40
 8014426:	2100      	movs	r1, #0
 8014428:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	0018      	movs	r0, r3
 801442e:	f7fe ff06 	bl	801323e <HAL_I2C_SlaveTxCpltCallback>
}
 8014432:	46c0      	nop			@ (mov r8, r8)
 8014434:	46bd      	mov	sp, r7
 8014436:	b006      	add	sp, #24
 8014438:	bd80      	pop	{r7, pc}
 801443a:	46c0      	nop			@ (mov r8, r8)
 801443c:	00008001 	.word	0x00008001
 8014440:	00008002 	.word	0x00008002
 8014444:	fe00e800 	.word	0xfe00e800
 8014448:	ffffbfff 	.word	0xffffbfff
 801444c:	ffff7fff 	.word	0xffff7fff
 8014450:	ffff0000 	.word	0xffff0000

08014454 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b082      	sub	sp, #8
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	4a26      	ldr	r2, [pc, #152]	@ (80144fc <I2C_ITListenCplt+0xa8>)
 8014462:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	2200      	movs	r2, #0
 8014468:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	2241      	movs	r2, #65	@ 0x41
 801446e:	2120      	movs	r1, #32
 8014470:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	2242      	movs	r2, #66	@ 0x42
 8014476:	2100      	movs	r1, #0
 8014478:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2200      	movs	r2, #0
 801447e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8014480:	683b      	ldr	r3, [r7, #0]
 8014482:	2204      	movs	r2, #4
 8014484:	4013      	ands	r3, r2
 8014486:	d022      	beq.n	80144ce <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014492:	b2d2      	uxtb	r2, r2
 8014494:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801449a:	1c5a      	adds	r2, r3, #1
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d012      	beq.n	80144ce <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80144ac:	3b01      	subs	r3, #1
 80144ae:	b29a      	uxth	r2, r3
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80144b8:	b29b      	uxth	r3, r3
 80144ba:	3b01      	subs	r3, #1
 80144bc:	b29a      	uxth	r2, r3
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80144c6:	2204      	movs	r2, #4
 80144c8:	431a      	orrs	r2, r3
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80144ce:	4a0c      	ldr	r2, [pc, #48]	@ (8014500 <I2C_ITListenCplt+0xac>)
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	0011      	movs	r1, r2
 80144d4:	0018      	movs	r0, r3
 80144d6:	f000 fd55 	bl	8014f84 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	2210      	movs	r2, #16
 80144e0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	2240      	movs	r2, #64	@ 0x40
 80144e6:	2100      	movs	r1, #0
 80144e8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	0018      	movs	r0, r3
 80144ee:	f7fe fec6 	bl	801327e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80144f2:	46c0      	nop			@ (mov r8, r8)
 80144f4:	46bd      	mov	sp, r7
 80144f6:	b002      	add	sp, #8
 80144f8:	bd80      	pop	{r7, pc}
 80144fa:	46c0      	nop			@ (mov r8, r8)
 80144fc:	ffff0000 	.word	0xffff0000
 8014500:	00008003 	.word	0x00008003

08014504 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b084      	sub	sp, #16
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
 801450c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801450e:	200f      	movs	r0, #15
 8014510:	183b      	adds	r3, r7, r0
 8014512:	687a      	ldr	r2, [r7, #4]
 8014514:	2141      	movs	r1, #65	@ 0x41
 8014516:	5c52      	ldrb	r2, [r2, r1]
 8014518:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	2242      	movs	r2, #66	@ 0x42
 801451e:	2100      	movs	r1, #0
 8014520:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	4a72      	ldr	r2, [pc, #456]	@ (80146f0 <I2C_ITError+0x1ec>)
 8014526:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2200      	movs	r2, #0
 801452c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014532:	683b      	ldr	r3, [r7, #0]
 8014534:	431a      	orrs	r2, r3
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801453a:	183b      	adds	r3, r7, r0
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	2b28      	cmp	r3, #40	@ 0x28
 8014540:	d007      	beq.n	8014552 <I2C_ITError+0x4e>
 8014542:	183b      	adds	r3, r7, r0
 8014544:	781b      	ldrb	r3, [r3, #0]
 8014546:	2b29      	cmp	r3, #41	@ 0x29
 8014548:	d003      	beq.n	8014552 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801454a:	183b      	adds	r3, r7, r0
 801454c:	781b      	ldrb	r3, [r3, #0]
 801454e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014550:	d10c      	bne.n	801456c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	2103      	movs	r1, #3
 8014556:	0018      	movs	r0, r3
 8014558:	f000 fd14 	bl	8014f84 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2241      	movs	r2, #65	@ 0x41
 8014560:	2128      	movs	r1, #40	@ 0x28
 8014562:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	4a63      	ldr	r2, [pc, #396]	@ (80146f4 <I2C_ITError+0x1f0>)
 8014568:	635a      	str	r2, [r3, #52]	@ 0x34
 801456a:	e032      	b.n	80145d2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801456c:	4a62      	ldr	r2, [pc, #392]	@ (80146f8 <I2C_ITError+0x1f4>)
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	0011      	movs	r1, r2
 8014572:	0018      	movs	r0, r3
 8014574:	f000 fd06 	bl	8014f84 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	0018      	movs	r0, r3
 801457c:	f000 f8ed 	bl	801475a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2241      	movs	r2, #65	@ 0x41
 8014584:	5c9b      	ldrb	r3, [r3, r2]
 8014586:	b2db      	uxtb	r3, r3
 8014588:	2b60      	cmp	r3, #96	@ 0x60
 801458a:	d01f      	beq.n	80145cc <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	2241      	movs	r2, #65	@ 0x41
 8014590:	2120      	movs	r1, #32
 8014592:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	699b      	ldr	r3, [r3, #24]
 801459a:	2220      	movs	r2, #32
 801459c:	4013      	ands	r3, r2
 801459e:	2b20      	cmp	r3, #32
 80145a0:	d114      	bne.n	80145cc <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	699b      	ldr	r3, [r3, #24]
 80145a8:	2210      	movs	r2, #16
 80145aa:	4013      	ands	r3, r2
 80145ac:	2b10      	cmp	r3, #16
 80145ae:	d109      	bne.n	80145c4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	2210      	movs	r2, #16
 80145b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80145bc:	2204      	movs	r2, #4
 80145be:	431a      	orrs	r2, r3
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	2220      	movs	r2, #32
 80145ca:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	2200      	movs	r2, #0
 80145d0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d03b      	beq.n	8014658 <I2C_ITError+0x154>
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	2b11      	cmp	r3, #17
 80145e4:	d002      	beq.n	80145ec <I2C_ITError+0xe8>
 80145e6:	68bb      	ldr	r3, [r7, #8]
 80145e8:	2b21      	cmp	r3, #33	@ 0x21
 80145ea:	d135      	bne.n	8014658 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	681a      	ldr	r2, [r3, #0]
 80145f2:	2380      	movs	r3, #128	@ 0x80
 80145f4:	01db      	lsls	r3, r3, #7
 80145f6:	401a      	ands	r2, r3
 80145f8:	2380      	movs	r3, #128	@ 0x80
 80145fa:	01db      	lsls	r3, r3, #7
 80145fc:	429a      	cmp	r2, r3
 80145fe:	d107      	bne.n	8014610 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	681a      	ldr	r2, [r3, #0]
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	493c      	ldr	r1, [pc, #240]	@ (80146fc <I2C_ITError+0x1f8>)
 801460c:	400a      	ands	r2, r1
 801460e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014614:	0018      	movs	r0, r3
 8014616:	f7fd faca 	bl	8011bae <HAL_DMA_GetState>
 801461a:	0003      	movs	r3, r0
 801461c:	2b01      	cmp	r3, #1
 801461e:	d016      	beq.n	801464e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014624:	4a36      	ldr	r2, [pc, #216]	@ (8014700 <I2C_ITError+0x1fc>)
 8014626:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	2240      	movs	r2, #64	@ 0x40
 801462c:	2100      	movs	r1, #0
 801462e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014634:	0018      	movs	r0, r3
 8014636:	f7fd f9c5 	bl	80119c4 <HAL_DMA_Abort_IT>
 801463a:	1e03      	subs	r3, r0, #0
 801463c:	d051      	beq.n	80146e2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014642:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014648:	0018      	movs	r0, r3
 801464a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801464c:	e049      	b.n	80146e2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	0018      	movs	r0, r3
 8014652:	f000 f859 	bl	8014708 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8014656:	e044      	b.n	80146e2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801465c:	2b00      	cmp	r3, #0
 801465e:	d03b      	beq.n	80146d8 <I2C_ITError+0x1d4>
 8014660:	68bb      	ldr	r3, [r7, #8]
 8014662:	2b12      	cmp	r3, #18
 8014664:	d002      	beq.n	801466c <I2C_ITError+0x168>
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	2b22      	cmp	r3, #34	@ 0x22
 801466a:	d135      	bne.n	80146d8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	681a      	ldr	r2, [r3, #0]
 8014672:	2380      	movs	r3, #128	@ 0x80
 8014674:	021b      	lsls	r3, r3, #8
 8014676:	401a      	ands	r2, r3
 8014678:	2380      	movs	r3, #128	@ 0x80
 801467a:	021b      	lsls	r3, r3, #8
 801467c:	429a      	cmp	r2, r3
 801467e:	d107      	bne.n	8014690 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	681a      	ldr	r2, [r3, #0]
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	491e      	ldr	r1, [pc, #120]	@ (8014704 <I2C_ITError+0x200>)
 801468c:	400a      	ands	r2, r1
 801468e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014694:	0018      	movs	r0, r3
 8014696:	f7fd fa8a 	bl	8011bae <HAL_DMA_GetState>
 801469a:	0003      	movs	r3, r0
 801469c:	2b01      	cmp	r3, #1
 801469e:	d016      	beq.n	80146ce <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80146a4:	4a16      	ldr	r2, [pc, #88]	@ (8014700 <I2C_ITError+0x1fc>)
 80146a6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	2240      	movs	r2, #64	@ 0x40
 80146ac:	2100      	movs	r1, #0
 80146ae:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80146b4:	0018      	movs	r0, r3
 80146b6:	f7fd f985 	bl	80119c4 <HAL_DMA_Abort_IT>
 80146ba:	1e03      	subs	r3, r0, #0
 80146bc:	d013      	beq.n	80146e6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80146c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80146c8:	0018      	movs	r0, r3
 80146ca:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80146cc:	e00b      	b.n	80146e6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	0018      	movs	r0, r3
 80146d2:	f000 f819 	bl	8014708 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80146d6:	e006      	b.n	80146e6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	0018      	movs	r0, r3
 80146dc:	f000 f814 	bl	8014708 <I2C_TreatErrorCallback>
  }
}
 80146e0:	e002      	b.n	80146e8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80146e2:	46c0      	nop			@ (mov r8, r8)
 80146e4:	e000      	b.n	80146e8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80146e6:	46c0      	nop			@ (mov r8, r8)
}
 80146e8:	46c0      	nop			@ (mov r8, r8)
 80146ea:	46bd      	mov	sp, r7
 80146ec:	b004      	add	sp, #16
 80146ee:	bd80      	pop	{r7, pc}
 80146f0:	ffff0000 	.word	0xffff0000
 80146f4:	08013525 	.word	0x08013525
 80146f8:	00008003 	.word	0x00008003
 80146fc:	ffffbfff 	.word	0xffffbfff
 8014700:	08014913 	.word	0x08014913
 8014704:	ffff7fff 	.word	0xffff7fff

08014708 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b082      	sub	sp, #8
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	2241      	movs	r2, #65	@ 0x41
 8014714:	5c9b      	ldrb	r3, [r3, r2]
 8014716:	b2db      	uxtb	r3, r3
 8014718:	2b60      	cmp	r3, #96	@ 0x60
 801471a:	d10f      	bne.n	801473c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2241      	movs	r2, #65	@ 0x41
 8014720:	2120      	movs	r1, #32
 8014722:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2200      	movs	r2, #0
 8014728:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	2240      	movs	r2, #64	@ 0x40
 801472e:	2100      	movs	r1, #0
 8014730:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	0018      	movs	r0, r3
 8014736:	f7fe fdc2 	bl	80132be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801473a:	e00a      	b.n	8014752 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2200      	movs	r2, #0
 8014740:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	2240      	movs	r2, #64	@ 0x40
 8014746:	2100      	movs	r1, #0
 8014748:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	0018      	movs	r0, r3
 801474e:	f7fe fdae 	bl	80132ae <HAL_I2C_ErrorCallback>
}
 8014752:	46c0      	nop			@ (mov r8, r8)
 8014754:	46bd      	mov	sp, r7
 8014756:	b002      	add	sp, #8
 8014758:	bd80      	pop	{r7, pc}

0801475a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801475a:	b580      	push	{r7, lr}
 801475c:	b082      	sub	sp, #8
 801475e:	af00      	add	r7, sp, #0
 8014760:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	699b      	ldr	r3, [r3, #24]
 8014768:	2202      	movs	r2, #2
 801476a:	4013      	ands	r3, r2
 801476c:	2b02      	cmp	r3, #2
 801476e:	d103      	bne.n	8014778 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	2200      	movs	r2, #0
 8014776:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	699b      	ldr	r3, [r3, #24]
 801477e:	2201      	movs	r2, #1
 8014780:	4013      	ands	r3, r2
 8014782:	2b01      	cmp	r3, #1
 8014784:	d007      	beq.n	8014796 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	699a      	ldr	r2, [r3, #24]
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	2101      	movs	r1, #1
 8014792:	430a      	orrs	r2, r1
 8014794:	619a      	str	r2, [r3, #24]
  }
}
 8014796:	46c0      	nop			@ (mov r8, r8)
 8014798:	46bd      	mov	sp, r7
 801479a:	b002      	add	sp, #8
 801479c:	bd80      	pop	{r7, pc}
	...

080147a0 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b084      	sub	sp, #16
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147ac:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	681a      	ldr	r2, [r3, #0]
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	4920      	ldr	r1, [pc, #128]	@ (801483c <I2C_DMAMasterTransmitCplt+0x9c>)
 80147ba:	400a      	ands	r2, r1
 80147bc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80147c2:	b29b      	uxth	r3, r3
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d105      	bne.n	80147d4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	2120      	movs	r1, #32
 80147cc:	0018      	movs	r0, r3
 80147ce:	f000 fb4b 	bl	8014e68 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80147d2:	e02e      	b.n	8014832 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147d8:	68fa      	ldr	r2, [r7, #12]
 80147da:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80147dc:	189a      	adds	r2, r3, r2
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80147e6:	b29b      	uxth	r3, r3
 80147e8:	2bff      	cmp	r3, #255	@ 0xff
 80147ea:	d903      	bls.n	80147f4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	22ff      	movs	r2, #255	@ 0xff
 80147f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80147f2:	e004      	b.n	80147fe <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80147f8:	b29a      	uxth	r2, r3
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014806:	0019      	movs	r1, r3
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	3328      	adds	r3, #40	@ 0x28
 801480e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8014814:	f7fd f830 	bl	8011878 <HAL_DMA_Start_IT>
 8014818:	1e03      	subs	r3, r0, #0
 801481a:	d005      	beq.n	8014828 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	2110      	movs	r1, #16
 8014820:	0018      	movs	r0, r3
 8014822:	f7ff fe6f 	bl	8014504 <I2C_ITError>
}
 8014826:	e004      	b.n	8014832 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	2140      	movs	r1, #64	@ 0x40
 801482c:	0018      	movs	r0, r3
 801482e:	f000 fb1b 	bl	8014e68 <I2C_Enable_IRQ>
}
 8014832:	46c0      	nop			@ (mov r8, r8)
 8014834:	46bd      	mov	sp, r7
 8014836:	b004      	add	sp, #16
 8014838:	bd80      	pop	{r7, pc}
 801483a:	46c0      	nop			@ (mov r8, r8)
 801483c:	ffffbfff 	.word	0xffffbfff

08014840 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b084      	sub	sp, #16
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801484c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	681a      	ldr	r2, [r3, #0]
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	4920      	ldr	r1, [pc, #128]	@ (80148dc <I2C_DMAMasterReceiveCplt+0x9c>)
 801485a:	400a      	ands	r2, r1
 801485c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014862:	b29b      	uxth	r3, r3
 8014864:	2b00      	cmp	r3, #0
 8014866:	d105      	bne.n	8014874 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	2120      	movs	r1, #32
 801486c:	0018      	movs	r0, r3
 801486e:	f000 fafb 	bl	8014e68 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8014872:	e02e      	b.n	80148d2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014878:	68fa      	ldr	r2, [r7, #12]
 801487a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801487c:	189a      	adds	r2, r3, r2
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014886:	b29b      	uxth	r3, r3
 8014888:	2bff      	cmp	r3, #255	@ 0xff
 801488a:	d903      	bls.n	8014894 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	22ff      	movs	r2, #255	@ 0xff
 8014890:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014892:	e004      	b.n	801489e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014898:	b29a      	uxth	r2, r3
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	3324      	adds	r3, #36	@ 0x24
 80148a8:	0019      	movs	r1, r3
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148ae:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80148b4:	f7fc ffe0 	bl	8011878 <HAL_DMA_Start_IT>
 80148b8:	1e03      	subs	r3, r0, #0
 80148ba:	d005      	beq.n	80148c8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	2110      	movs	r1, #16
 80148c0:	0018      	movs	r0, r3
 80148c2:	f7ff fe1f 	bl	8014504 <I2C_ITError>
}
 80148c6:	e004      	b.n	80148d2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	2140      	movs	r1, #64	@ 0x40
 80148cc:	0018      	movs	r0, r3
 80148ce:	f000 facb 	bl	8014e68 <I2C_Enable_IRQ>
}
 80148d2:	46c0      	nop			@ (mov r8, r8)
 80148d4:	46bd      	mov	sp, r7
 80148d6:	b004      	add	sp, #16
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	46c0      	nop			@ (mov r8, r8)
 80148dc:	ffff7fff 	.word	0xffff7fff

080148e0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b084      	sub	sp, #16
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80148ec:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	685a      	ldr	r2, [r3, #4]
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2180      	movs	r1, #128	@ 0x80
 80148fa:	0209      	lsls	r1, r1, #8
 80148fc:	430a      	orrs	r2, r1
 80148fe:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	2110      	movs	r1, #16
 8014904:	0018      	movs	r0, r3
 8014906:	f7ff fdfd 	bl	8014504 <I2C_ITError>
}
 801490a:	46c0      	nop			@ (mov r8, r8)
 801490c:	46bd      	mov	sp, r7
 801490e:	b004      	add	sp, #16
 8014910:	bd80      	pop	{r7, pc}

08014912 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8014912:	b580      	push	{r7, lr}
 8014914:	b084      	sub	sp, #16
 8014916:	af00      	add	r7, sp, #0
 8014918:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801491e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014924:	2b00      	cmp	r3, #0
 8014926:	d003      	beq.n	8014930 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801492c:	2200      	movs	r2, #0
 801492e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014934:	2b00      	cmp	r3, #0
 8014936:	d003      	beq.n	8014940 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801493c:	2200      	movs	r2, #0
 801493e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	0018      	movs	r0, r3
 8014944:	f7ff fee0 	bl	8014708 <I2C_TreatErrorCallback>
}
 8014948:	46c0      	nop			@ (mov r8, r8)
 801494a:	46bd      	mov	sp, r7
 801494c:	b004      	add	sp, #16
 801494e:	bd80      	pop	{r7, pc}

08014950 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8014950:	b580      	push	{r7, lr}
 8014952:	b084      	sub	sp, #16
 8014954:	af00      	add	r7, sp, #0
 8014956:	60f8      	str	r0, [r7, #12]
 8014958:	60b9      	str	r1, [r7, #8]
 801495a:	603b      	str	r3, [r7, #0]
 801495c:	1dfb      	adds	r3, r7, #7
 801495e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014960:	e030      	b.n	80149c4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	3301      	adds	r3, #1
 8014966:	d02d      	beq.n	80149c4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014968:	f7fc fa34 	bl	8010dd4 <HAL_GetTick>
 801496c:	0002      	movs	r2, r0
 801496e:	69bb      	ldr	r3, [r7, #24]
 8014970:	1ad3      	subs	r3, r2, r3
 8014972:	683a      	ldr	r2, [r7, #0]
 8014974:	429a      	cmp	r2, r3
 8014976:	d302      	bcc.n	801497e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8014978:	683b      	ldr	r3, [r7, #0]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d122      	bne.n	80149c4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	699b      	ldr	r3, [r3, #24]
 8014984:	68ba      	ldr	r2, [r7, #8]
 8014986:	4013      	ands	r3, r2
 8014988:	68ba      	ldr	r2, [r7, #8]
 801498a:	1ad3      	subs	r3, r2, r3
 801498c:	425a      	negs	r2, r3
 801498e:	4153      	adcs	r3, r2
 8014990:	b2db      	uxtb	r3, r3
 8014992:	001a      	movs	r2, r3
 8014994:	1dfb      	adds	r3, r7, #7
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	429a      	cmp	r2, r3
 801499a:	d113      	bne.n	80149c4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80149a0:	2220      	movs	r2, #32
 80149a2:	431a      	orrs	r2, r3
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	2241      	movs	r2, #65	@ 0x41
 80149ac:	2120      	movs	r1, #32
 80149ae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	2242      	movs	r2, #66	@ 0x42
 80149b4:	2100      	movs	r1, #0
 80149b6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	2240      	movs	r2, #64	@ 0x40
 80149bc:	2100      	movs	r1, #0
 80149be:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80149c0:	2301      	movs	r3, #1
 80149c2:	e00f      	b.n	80149e4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	699b      	ldr	r3, [r3, #24]
 80149ca:	68ba      	ldr	r2, [r7, #8]
 80149cc:	4013      	ands	r3, r2
 80149ce:	68ba      	ldr	r2, [r7, #8]
 80149d0:	1ad3      	subs	r3, r2, r3
 80149d2:	425a      	negs	r2, r3
 80149d4:	4153      	adcs	r3, r2
 80149d6:	b2db      	uxtb	r3, r3
 80149d8:	001a      	movs	r2, r3
 80149da:	1dfb      	adds	r3, r7, #7
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	429a      	cmp	r2, r3
 80149e0:	d0bf      	beq.n	8014962 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80149e2:	2300      	movs	r3, #0
}
 80149e4:	0018      	movs	r0, r3
 80149e6:	46bd      	mov	sp, r7
 80149e8:	b004      	add	sp, #16
 80149ea:	bd80      	pop	{r7, pc}

080149ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b084      	sub	sp, #16
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	60f8      	str	r0, [r7, #12]
 80149f4:	60b9      	str	r1, [r7, #8]
 80149f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80149f8:	e032      	b.n	8014a60 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80149fa:	687a      	ldr	r2, [r7, #4]
 80149fc:	68b9      	ldr	r1, [r7, #8]
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	0018      	movs	r0, r3
 8014a02:	f000 f8ff 	bl	8014c04 <I2C_IsErrorOccurred>
 8014a06:	1e03      	subs	r3, r0, #0
 8014a08:	d001      	beq.n	8014a0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014a0a:	2301      	movs	r3, #1
 8014a0c:	e030      	b.n	8014a70 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	3301      	adds	r3, #1
 8014a12:	d025      	beq.n	8014a60 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014a14:	f7fc f9de 	bl	8010dd4 <HAL_GetTick>
 8014a18:	0002      	movs	r2, r0
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	1ad3      	subs	r3, r2, r3
 8014a1e:	68ba      	ldr	r2, [r7, #8]
 8014a20:	429a      	cmp	r2, r3
 8014a22:	d302      	bcc.n	8014a2a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d11a      	bne.n	8014a60 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	699b      	ldr	r3, [r3, #24]
 8014a30:	2202      	movs	r2, #2
 8014a32:	4013      	ands	r3, r2
 8014a34:	2b02      	cmp	r3, #2
 8014a36:	d013      	beq.n	8014a60 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014a3c:	2220      	movs	r2, #32
 8014a3e:	431a      	orrs	r2, r3
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	2241      	movs	r2, #65	@ 0x41
 8014a48:	2120      	movs	r1, #32
 8014a4a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	2242      	movs	r2, #66	@ 0x42
 8014a50:	2100      	movs	r1, #0
 8014a52:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	2240      	movs	r2, #64	@ 0x40
 8014a58:	2100      	movs	r1, #0
 8014a5a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	e007      	b.n	8014a70 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	699b      	ldr	r3, [r3, #24]
 8014a66:	2202      	movs	r2, #2
 8014a68:	4013      	ands	r3, r2
 8014a6a:	2b02      	cmp	r3, #2
 8014a6c:	d1c5      	bne.n	80149fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8014a6e:	2300      	movs	r3, #0
}
 8014a70:	0018      	movs	r0, r3
 8014a72:	46bd      	mov	sp, r7
 8014a74:	b004      	add	sp, #16
 8014a76:	bd80      	pop	{r7, pc}

08014a78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b084      	sub	sp, #16
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	60f8      	str	r0, [r7, #12]
 8014a80:	60b9      	str	r1, [r7, #8]
 8014a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014a84:	e02f      	b.n	8014ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014a86:	687a      	ldr	r2, [r7, #4]
 8014a88:	68b9      	ldr	r1, [r7, #8]
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	0018      	movs	r0, r3
 8014a8e:	f000 f8b9 	bl	8014c04 <I2C_IsErrorOccurred>
 8014a92:	1e03      	subs	r3, r0, #0
 8014a94:	d001      	beq.n	8014a9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014a96:	2301      	movs	r3, #1
 8014a98:	e02d      	b.n	8014af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014a9a:	f7fc f99b 	bl	8010dd4 <HAL_GetTick>
 8014a9e:	0002      	movs	r2, r0
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	1ad3      	subs	r3, r2, r3
 8014aa4:	68ba      	ldr	r2, [r7, #8]
 8014aa6:	429a      	cmp	r2, r3
 8014aa8:	d302      	bcc.n	8014ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d11a      	bne.n	8014ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	699b      	ldr	r3, [r3, #24]
 8014ab6:	2220      	movs	r2, #32
 8014ab8:	4013      	ands	r3, r2
 8014aba:	2b20      	cmp	r3, #32
 8014abc:	d013      	beq.n	8014ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ac2:	2220      	movs	r2, #32
 8014ac4:	431a      	orrs	r2, r3
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	2241      	movs	r2, #65	@ 0x41
 8014ace:	2120      	movs	r1, #32
 8014ad0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	2242      	movs	r2, #66	@ 0x42
 8014ad6:	2100      	movs	r1, #0
 8014ad8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	2240      	movs	r2, #64	@ 0x40
 8014ade:	2100      	movs	r1, #0
 8014ae0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014ae2:	2301      	movs	r3, #1
 8014ae4:	e007      	b.n	8014af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	699b      	ldr	r3, [r3, #24]
 8014aec:	2220      	movs	r2, #32
 8014aee:	4013      	ands	r3, r2
 8014af0:	2b20      	cmp	r3, #32
 8014af2:	d1c8      	bne.n	8014a86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014af4:	2300      	movs	r3, #0
}
 8014af6:	0018      	movs	r0, r3
 8014af8:	46bd      	mov	sp, r7
 8014afa:	b004      	add	sp, #16
 8014afc:	bd80      	pop	{r7, pc}
	...

08014b00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b084      	sub	sp, #16
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	60f8      	str	r0, [r7, #12]
 8014b08:	60b9      	str	r1, [r7, #8]
 8014b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014b0c:	e06b      	b.n	8014be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014b0e:	687a      	ldr	r2, [r7, #4]
 8014b10:	68b9      	ldr	r1, [r7, #8]
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	0018      	movs	r0, r3
 8014b16:	f000 f875 	bl	8014c04 <I2C_IsErrorOccurred>
 8014b1a:	1e03      	subs	r3, r0, #0
 8014b1c:	d001      	beq.n	8014b22 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014b1e:	2301      	movs	r3, #1
 8014b20:	e069      	b.n	8014bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	699b      	ldr	r3, [r3, #24]
 8014b28:	2220      	movs	r2, #32
 8014b2a:	4013      	ands	r3, r2
 8014b2c:	2b20      	cmp	r3, #32
 8014b2e:	d138      	bne.n	8014ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	699b      	ldr	r3, [r3, #24]
 8014b36:	2204      	movs	r2, #4
 8014b38:	4013      	ands	r3, r2
 8014b3a:	2b04      	cmp	r3, #4
 8014b3c:	d105      	bne.n	8014b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d001      	beq.n	8014b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8014b46:	2300      	movs	r3, #0
 8014b48:	e055      	b.n	8014bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	699b      	ldr	r3, [r3, #24]
 8014b50:	2210      	movs	r2, #16
 8014b52:	4013      	ands	r3, r2
 8014b54:	2b10      	cmp	r3, #16
 8014b56:	d107      	bne.n	8014b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	2210      	movs	r2, #16
 8014b5e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	2204      	movs	r2, #4
 8014b64:	645a      	str	r2, [r3, #68]	@ 0x44
 8014b66:	e002      	b.n	8014b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	2220      	movs	r2, #32
 8014b74:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	685a      	ldr	r2, [r3, #4]
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	491f      	ldr	r1, [pc, #124]	@ (8014c00 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8014b82:	400a      	ands	r2, r1
 8014b84:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	2241      	movs	r2, #65	@ 0x41
 8014b8a:	2120      	movs	r1, #32
 8014b8c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	2242      	movs	r2, #66	@ 0x42
 8014b92:	2100      	movs	r1, #0
 8014b94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	2240      	movs	r2, #64	@ 0x40
 8014b9a:	2100      	movs	r1, #0
 8014b9c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014b9e:	2301      	movs	r3, #1
 8014ba0:	e029      	b.n	8014bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014ba2:	f7fc f917 	bl	8010dd4 <HAL_GetTick>
 8014ba6:	0002      	movs	r2, r0
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	1ad3      	subs	r3, r2, r3
 8014bac:	68ba      	ldr	r2, [r7, #8]
 8014bae:	429a      	cmp	r2, r3
 8014bb0:	d302      	bcc.n	8014bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d116      	bne.n	8014be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	699b      	ldr	r3, [r3, #24]
 8014bbe:	2204      	movs	r2, #4
 8014bc0:	4013      	ands	r3, r2
 8014bc2:	2b04      	cmp	r3, #4
 8014bc4:	d00f      	beq.n	8014be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014bca:	2220      	movs	r2, #32
 8014bcc:	431a      	orrs	r2, r3
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	2241      	movs	r2, #65	@ 0x41
 8014bd6:	2120      	movs	r1, #32
 8014bd8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	2240      	movs	r2, #64	@ 0x40
 8014bde:	2100      	movs	r1, #0
 8014be0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014be2:	2301      	movs	r3, #1
 8014be4:	e007      	b.n	8014bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	699b      	ldr	r3, [r3, #24]
 8014bec:	2204      	movs	r2, #4
 8014bee:	4013      	ands	r3, r2
 8014bf0:	2b04      	cmp	r3, #4
 8014bf2:	d18c      	bne.n	8014b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014bf4:	2300      	movs	r3, #0
}
 8014bf6:	0018      	movs	r0, r3
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	b004      	add	sp, #16
 8014bfc:	bd80      	pop	{r7, pc}
 8014bfe:	46c0      	nop			@ (mov r8, r8)
 8014c00:	fe00e800 	.word	0xfe00e800

08014c04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b08a      	sub	sp, #40	@ 0x28
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	60f8      	str	r0, [r7, #12]
 8014c0c:	60b9      	str	r1, [r7, #8]
 8014c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014c10:	2327      	movs	r3, #39	@ 0x27
 8014c12:	18fb      	adds	r3, r7, r3
 8014c14:	2200      	movs	r2, #0
 8014c16:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	699b      	ldr	r3, [r3, #24]
 8014c1e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8014c20:	2300      	movs	r3, #0
 8014c22:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8014c28:	69bb      	ldr	r3, [r7, #24]
 8014c2a:	2210      	movs	r2, #16
 8014c2c:	4013      	ands	r3, r2
 8014c2e:	d100      	bne.n	8014c32 <I2C_IsErrorOccurred+0x2e>
 8014c30:	e079      	b.n	8014d26 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	2210      	movs	r2, #16
 8014c38:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014c3a:	e057      	b.n	8014cec <I2C_IsErrorOccurred+0xe8>
 8014c3c:	2227      	movs	r2, #39	@ 0x27
 8014c3e:	18bb      	adds	r3, r7, r2
 8014c40:	18ba      	adds	r2, r7, r2
 8014c42:	7812      	ldrb	r2, [r2, #0]
 8014c44:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	3301      	adds	r3, #1
 8014c4a:	d04f      	beq.n	8014cec <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8014c4c:	f7fc f8c2 	bl	8010dd4 <HAL_GetTick>
 8014c50:	0002      	movs	r2, r0
 8014c52:	69fb      	ldr	r3, [r7, #28]
 8014c54:	1ad3      	subs	r3, r2, r3
 8014c56:	68ba      	ldr	r2, [r7, #8]
 8014c58:	429a      	cmp	r2, r3
 8014c5a:	d302      	bcc.n	8014c62 <I2C_IsErrorOccurred+0x5e>
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d144      	bne.n	8014cec <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	685a      	ldr	r2, [r3, #4]
 8014c68:	2380      	movs	r3, #128	@ 0x80
 8014c6a:	01db      	lsls	r3, r3, #7
 8014c6c:	4013      	ands	r3, r2
 8014c6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8014c70:	2013      	movs	r0, #19
 8014c72:	183b      	adds	r3, r7, r0
 8014c74:	68fa      	ldr	r2, [r7, #12]
 8014c76:	2142      	movs	r1, #66	@ 0x42
 8014c78:	5c52      	ldrb	r2, [r2, r1]
 8014c7a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	699a      	ldr	r2, [r3, #24]
 8014c82:	2380      	movs	r3, #128	@ 0x80
 8014c84:	021b      	lsls	r3, r3, #8
 8014c86:	401a      	ands	r2, r3
 8014c88:	2380      	movs	r3, #128	@ 0x80
 8014c8a:	021b      	lsls	r3, r3, #8
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d126      	bne.n	8014cde <I2C_IsErrorOccurred+0xda>
 8014c90:	697a      	ldr	r2, [r7, #20]
 8014c92:	2380      	movs	r3, #128	@ 0x80
 8014c94:	01db      	lsls	r3, r3, #7
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d021      	beq.n	8014cde <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8014c9a:	183b      	adds	r3, r7, r0
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	2b20      	cmp	r3, #32
 8014ca0:	d01d      	beq.n	8014cde <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	685a      	ldr	r2, [r3, #4]
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	2180      	movs	r1, #128	@ 0x80
 8014cae:	01c9      	lsls	r1, r1, #7
 8014cb0:	430a      	orrs	r2, r1
 8014cb2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8014cb4:	f7fc f88e 	bl	8010dd4 <HAL_GetTick>
 8014cb8:	0003      	movs	r3, r0
 8014cba:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014cbc:	e00f      	b.n	8014cde <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8014cbe:	f7fc f889 	bl	8010dd4 <HAL_GetTick>
 8014cc2:	0002      	movs	r2, r0
 8014cc4:	69fb      	ldr	r3, [r7, #28]
 8014cc6:	1ad3      	subs	r3, r2, r3
 8014cc8:	2b19      	cmp	r3, #25
 8014cca:	d908      	bls.n	8014cde <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8014ccc:	6a3b      	ldr	r3, [r7, #32]
 8014cce:	2220      	movs	r2, #32
 8014cd0:	4313      	orrs	r3, r2
 8014cd2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8014cd4:	2327      	movs	r3, #39	@ 0x27
 8014cd6:	18fb      	adds	r3, r7, r3
 8014cd8:	2201      	movs	r2, #1
 8014cda:	701a      	strb	r2, [r3, #0]

              break;
 8014cdc:	e006      	b.n	8014cec <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	699b      	ldr	r3, [r3, #24]
 8014ce4:	2220      	movs	r2, #32
 8014ce6:	4013      	ands	r3, r2
 8014ce8:	2b20      	cmp	r3, #32
 8014cea:	d1e8      	bne.n	8014cbe <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	699b      	ldr	r3, [r3, #24]
 8014cf2:	2220      	movs	r2, #32
 8014cf4:	4013      	ands	r3, r2
 8014cf6:	2b20      	cmp	r3, #32
 8014cf8:	d004      	beq.n	8014d04 <I2C_IsErrorOccurred+0x100>
 8014cfa:	2327      	movs	r3, #39	@ 0x27
 8014cfc:	18fb      	adds	r3, r7, r3
 8014cfe:	781b      	ldrb	r3, [r3, #0]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d09b      	beq.n	8014c3c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8014d04:	2327      	movs	r3, #39	@ 0x27
 8014d06:	18fb      	adds	r3, r7, r3
 8014d08:	781b      	ldrb	r3, [r3, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d103      	bne.n	8014d16 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	2220      	movs	r2, #32
 8014d14:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8014d16:	6a3b      	ldr	r3, [r7, #32]
 8014d18:	2204      	movs	r2, #4
 8014d1a:	4313      	orrs	r3, r2
 8014d1c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8014d1e:	2327      	movs	r3, #39	@ 0x27
 8014d20:	18fb      	adds	r3, r7, r3
 8014d22:	2201      	movs	r2, #1
 8014d24:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	699b      	ldr	r3, [r3, #24]
 8014d2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8014d2e:	69ba      	ldr	r2, [r7, #24]
 8014d30:	2380      	movs	r3, #128	@ 0x80
 8014d32:	005b      	lsls	r3, r3, #1
 8014d34:	4013      	ands	r3, r2
 8014d36:	d00c      	beq.n	8014d52 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8014d38:	6a3b      	ldr	r3, [r7, #32]
 8014d3a:	2201      	movs	r2, #1
 8014d3c:	4313      	orrs	r3, r2
 8014d3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	2280      	movs	r2, #128	@ 0x80
 8014d46:	0052      	lsls	r2, r2, #1
 8014d48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8014d4a:	2327      	movs	r3, #39	@ 0x27
 8014d4c:	18fb      	adds	r3, r7, r3
 8014d4e:	2201      	movs	r2, #1
 8014d50:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8014d52:	69ba      	ldr	r2, [r7, #24]
 8014d54:	2380      	movs	r3, #128	@ 0x80
 8014d56:	00db      	lsls	r3, r3, #3
 8014d58:	4013      	ands	r3, r2
 8014d5a:	d00c      	beq.n	8014d76 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8014d5c:	6a3b      	ldr	r3, [r7, #32]
 8014d5e:	2208      	movs	r2, #8
 8014d60:	4313      	orrs	r3, r2
 8014d62:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2280      	movs	r2, #128	@ 0x80
 8014d6a:	00d2      	lsls	r2, r2, #3
 8014d6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8014d6e:	2327      	movs	r3, #39	@ 0x27
 8014d70:	18fb      	adds	r3, r7, r3
 8014d72:	2201      	movs	r2, #1
 8014d74:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8014d76:	69ba      	ldr	r2, [r7, #24]
 8014d78:	2380      	movs	r3, #128	@ 0x80
 8014d7a:	009b      	lsls	r3, r3, #2
 8014d7c:	4013      	ands	r3, r2
 8014d7e:	d00c      	beq.n	8014d9a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8014d80:	6a3b      	ldr	r3, [r7, #32]
 8014d82:	2202      	movs	r2, #2
 8014d84:	4313      	orrs	r3, r2
 8014d86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	2280      	movs	r2, #128	@ 0x80
 8014d8e:	0092      	lsls	r2, r2, #2
 8014d90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8014d92:	2327      	movs	r3, #39	@ 0x27
 8014d94:	18fb      	adds	r3, r7, r3
 8014d96:	2201      	movs	r2, #1
 8014d98:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8014d9a:	2327      	movs	r3, #39	@ 0x27
 8014d9c:	18fb      	adds	r3, r7, r3
 8014d9e:	781b      	ldrb	r3, [r3, #0]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d01d      	beq.n	8014de0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	0018      	movs	r0, r3
 8014da8:	f7ff fcd7 	bl	801475a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	685a      	ldr	r2, [r3, #4]
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	490e      	ldr	r1, [pc, #56]	@ (8014df0 <I2C_IsErrorOccurred+0x1ec>)
 8014db8:	400a      	ands	r2, r1
 8014dba:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014dc0:	6a3b      	ldr	r3, [r7, #32]
 8014dc2:	431a      	orrs	r2, r3
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	2241      	movs	r2, #65	@ 0x41
 8014dcc:	2120      	movs	r1, #32
 8014dce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	2242      	movs	r2, #66	@ 0x42
 8014dd4:	2100      	movs	r1, #0
 8014dd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	2240      	movs	r2, #64	@ 0x40
 8014ddc:	2100      	movs	r1, #0
 8014dde:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8014de0:	2327      	movs	r3, #39	@ 0x27
 8014de2:	18fb      	adds	r3, r7, r3
 8014de4:	781b      	ldrb	r3, [r3, #0]
}
 8014de6:	0018      	movs	r0, r3
 8014de8:	46bd      	mov	sp, r7
 8014dea:	b00a      	add	sp, #40	@ 0x28
 8014dec:	bd80      	pop	{r7, pc}
 8014dee:	46c0      	nop			@ (mov r8, r8)
 8014df0:	fe00e800 	.word	0xfe00e800

08014df4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8014df4:	b590      	push	{r4, r7, lr}
 8014df6:	b087      	sub	sp, #28
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	0008      	movs	r0, r1
 8014dfe:	0011      	movs	r1, r2
 8014e00:	607b      	str	r3, [r7, #4]
 8014e02:	240a      	movs	r4, #10
 8014e04:	193b      	adds	r3, r7, r4
 8014e06:	1c02      	adds	r2, r0, #0
 8014e08:	801a      	strh	r2, [r3, #0]
 8014e0a:	2009      	movs	r0, #9
 8014e0c:	183b      	adds	r3, r7, r0
 8014e0e:	1c0a      	adds	r2, r1, #0
 8014e10:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8014e12:	193b      	adds	r3, r7, r4
 8014e14:	881b      	ldrh	r3, [r3, #0]
 8014e16:	059b      	lsls	r3, r3, #22
 8014e18:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8014e1a:	183b      	adds	r3, r7, r0
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	0419      	lsls	r1, r3, #16
 8014e20:	23ff      	movs	r3, #255	@ 0xff
 8014e22:	041b      	lsls	r3, r3, #16
 8014e24:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8014e26:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8014e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e2e:	4313      	orrs	r3, r2
 8014e30:	005b      	lsls	r3, r3, #1
 8014e32:	085b      	lsrs	r3, r3, #1
 8014e34:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	685b      	ldr	r3, [r3, #4]
 8014e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014e3e:	0d51      	lsrs	r1, r2, #21
 8014e40:	2280      	movs	r2, #128	@ 0x80
 8014e42:	00d2      	lsls	r2, r2, #3
 8014e44:	400a      	ands	r2, r1
 8014e46:	4907      	ldr	r1, [pc, #28]	@ (8014e64 <I2C_TransferConfig+0x70>)
 8014e48:	430a      	orrs	r2, r1
 8014e4a:	43d2      	mvns	r2, r2
 8014e4c:	401a      	ands	r2, r3
 8014e4e:	0011      	movs	r1, r2
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	697a      	ldr	r2, [r7, #20]
 8014e56:	430a      	orrs	r2, r1
 8014e58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8014e5a:	46c0      	nop			@ (mov r8, r8)
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	b007      	add	sp, #28
 8014e60:	bd90      	pop	{r4, r7, pc}
 8014e62:	46c0      	nop			@ (mov r8, r8)
 8014e64:	03ff63ff 	.word	0x03ff63ff

08014e68 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b084      	sub	sp, #16
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	000a      	movs	r2, r1
 8014e72:	1cbb      	adds	r3, r7, #2
 8014e74:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8014e76:	2300      	movs	r3, #0
 8014e78:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8014f78 <I2C_Enable_IRQ+0x110>)
 8014e80:	429a      	cmp	r2, r3
 8014e82:	d035      	beq.n	8014ef0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8014e88:	4b3c      	ldr	r3, [pc, #240]	@ (8014f7c <I2C_Enable_IRQ+0x114>)
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d030      	beq.n	8014ef0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8014e92:	4b3b      	ldr	r3, [pc, #236]	@ (8014f80 <I2C_Enable_IRQ+0x118>)
 8014e94:	429a      	cmp	r2, r3
 8014e96:	d02b      	beq.n	8014ef0 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8014e98:	1cbb      	adds	r3, r7, #2
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	5e9b      	ldrsh	r3, [r3, r2]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	da03      	bge.n	8014eaa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	22b8      	movs	r2, #184	@ 0xb8
 8014ea6:	4313      	orrs	r3, r2
 8014ea8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8014eaa:	1cbb      	adds	r3, r7, #2
 8014eac:	881b      	ldrh	r3, [r3, #0]
 8014eae:	2201      	movs	r2, #1
 8014eb0:	4013      	ands	r3, r2
 8014eb2:	d003      	beq.n	8014ebc <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	22f2      	movs	r2, #242	@ 0xf2
 8014eb8:	4313      	orrs	r3, r2
 8014eba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8014ebc:	1cbb      	adds	r3, r7, #2
 8014ebe:	881b      	ldrh	r3, [r3, #0]
 8014ec0:	2202      	movs	r2, #2
 8014ec2:	4013      	ands	r3, r2
 8014ec4:	d003      	beq.n	8014ece <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	22f4      	movs	r2, #244	@ 0xf4
 8014eca:	4313      	orrs	r3, r2
 8014ecc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8014ece:	1cbb      	adds	r3, r7, #2
 8014ed0:	881b      	ldrh	r3, [r3, #0]
 8014ed2:	2b10      	cmp	r3, #16
 8014ed4:	d103      	bne.n	8014ede <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	2290      	movs	r2, #144	@ 0x90
 8014eda:	4313      	orrs	r3, r2
 8014edc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8014ede:	1cbb      	adds	r3, r7, #2
 8014ee0:	881b      	ldrh	r3, [r3, #0]
 8014ee2:	2b20      	cmp	r3, #32
 8014ee4:	d13c      	bne.n	8014f60 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	2220      	movs	r2, #32
 8014eea:	4313      	orrs	r3, r2
 8014eec:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8014eee:	e037      	b.n	8014f60 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8014ef0:	1cbb      	adds	r3, r7, #2
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	5e9b      	ldrsh	r3, [r3, r2]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	da03      	bge.n	8014f02 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	22b8      	movs	r2, #184	@ 0xb8
 8014efe:	4313      	orrs	r3, r2
 8014f00:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8014f02:	1cbb      	adds	r3, r7, #2
 8014f04:	881b      	ldrh	r3, [r3, #0]
 8014f06:	2201      	movs	r2, #1
 8014f08:	4013      	ands	r3, r2
 8014f0a:	d003      	beq.n	8014f14 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	22f2      	movs	r2, #242	@ 0xf2
 8014f10:	4313      	orrs	r3, r2
 8014f12:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8014f14:	1cbb      	adds	r3, r7, #2
 8014f16:	881b      	ldrh	r3, [r3, #0]
 8014f18:	2202      	movs	r2, #2
 8014f1a:	4013      	ands	r3, r2
 8014f1c:	d003      	beq.n	8014f26 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	22f4      	movs	r2, #244	@ 0xf4
 8014f22:	4313      	orrs	r3, r2
 8014f24:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8014f26:	1cbb      	adds	r3, r7, #2
 8014f28:	881b      	ldrh	r3, [r3, #0]
 8014f2a:	2b10      	cmp	r3, #16
 8014f2c:	d103      	bne.n	8014f36 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	2290      	movs	r2, #144	@ 0x90
 8014f32:	4313      	orrs	r3, r2
 8014f34:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8014f36:	1cbb      	adds	r3, r7, #2
 8014f38:	881b      	ldrh	r3, [r3, #0]
 8014f3a:	2b20      	cmp	r3, #32
 8014f3c:	d103      	bne.n	8014f46 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	2260      	movs	r2, #96	@ 0x60
 8014f42:	4313      	orrs	r3, r2
 8014f44:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8014f80 <I2C_Enable_IRQ+0x118>)
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d007      	beq.n	8014f60 <I2C_Enable_IRQ+0xf8>
 8014f50:	1cbb      	adds	r3, r7, #2
 8014f52:	881b      	ldrh	r3, [r3, #0]
 8014f54:	2b40      	cmp	r3, #64	@ 0x40
 8014f56:	d103      	bne.n	8014f60 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	2240      	movs	r2, #64	@ 0x40
 8014f5c:	4313      	orrs	r3, r2
 8014f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	6819      	ldr	r1, [r3, #0]
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	68fa      	ldr	r2, [r7, #12]
 8014f6c:	430a      	orrs	r2, r1
 8014f6e:	601a      	str	r2, [r3, #0]
}
 8014f70:	46c0      	nop			@ (mov r8, r8)
 8014f72:	46bd      	mov	sp, r7
 8014f74:	b004      	add	sp, #16
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	08013725 	.word	0x08013725
 8014f7c:	08013b55 	.word	0x08013b55
 8014f80:	0801391d 	.word	0x0801391d

08014f84 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b084      	sub	sp, #16
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	000a      	movs	r2, r1
 8014f8e:	1cbb      	adds	r3, r7, #2
 8014f90:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8014f92:	2300      	movs	r3, #0
 8014f94:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8014f96:	1cbb      	adds	r3, r7, #2
 8014f98:	881b      	ldrh	r3, [r3, #0]
 8014f9a:	2201      	movs	r2, #1
 8014f9c:	4013      	ands	r3, r2
 8014f9e:	d010      	beq.n	8014fc2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	2242      	movs	r2, #66	@ 0x42
 8014fa4:	4313      	orrs	r3, r2
 8014fa6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	2241      	movs	r2, #65	@ 0x41
 8014fac:	5c9b      	ldrb	r3, [r3, r2]
 8014fae:	b2db      	uxtb	r3, r3
 8014fb0:	001a      	movs	r2, r3
 8014fb2:	2328      	movs	r3, #40	@ 0x28
 8014fb4:	4013      	ands	r3, r2
 8014fb6:	2b28      	cmp	r3, #40	@ 0x28
 8014fb8:	d003      	beq.n	8014fc2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	22b0      	movs	r2, #176	@ 0xb0
 8014fbe:	4313      	orrs	r3, r2
 8014fc0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8014fc2:	1cbb      	adds	r3, r7, #2
 8014fc4:	881b      	ldrh	r3, [r3, #0]
 8014fc6:	2202      	movs	r2, #2
 8014fc8:	4013      	ands	r3, r2
 8014fca:	d010      	beq.n	8014fee <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	2244      	movs	r2, #68	@ 0x44
 8014fd0:	4313      	orrs	r3, r2
 8014fd2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	2241      	movs	r2, #65	@ 0x41
 8014fd8:	5c9b      	ldrb	r3, [r3, r2]
 8014fda:	b2db      	uxtb	r3, r3
 8014fdc:	001a      	movs	r2, r3
 8014fde:	2328      	movs	r3, #40	@ 0x28
 8014fe0:	4013      	ands	r3, r2
 8014fe2:	2b28      	cmp	r3, #40	@ 0x28
 8014fe4:	d003      	beq.n	8014fee <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	22b0      	movs	r2, #176	@ 0xb0
 8014fea:	4313      	orrs	r3, r2
 8014fec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8014fee:	1cbb      	adds	r3, r7, #2
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	5e9b      	ldrsh	r3, [r3, r2]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	da03      	bge.n	8015000 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	22b8      	movs	r2, #184	@ 0xb8
 8014ffc:	4313      	orrs	r3, r2
 8014ffe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8015000:	1cbb      	adds	r3, r7, #2
 8015002:	881b      	ldrh	r3, [r3, #0]
 8015004:	2b10      	cmp	r3, #16
 8015006:	d103      	bne.n	8015010 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	2290      	movs	r2, #144	@ 0x90
 801500c:	4313      	orrs	r3, r2
 801500e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8015010:	1cbb      	adds	r3, r7, #2
 8015012:	881b      	ldrh	r3, [r3, #0]
 8015014:	2b20      	cmp	r3, #32
 8015016:	d103      	bne.n	8015020 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	2220      	movs	r2, #32
 801501c:	4313      	orrs	r3, r2
 801501e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8015020:	1cbb      	adds	r3, r7, #2
 8015022:	881b      	ldrh	r3, [r3, #0]
 8015024:	2b40      	cmp	r3, #64	@ 0x40
 8015026:	d103      	bne.n	8015030 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	2240      	movs	r2, #64	@ 0x40
 801502c:	4313      	orrs	r3, r2
 801502e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	681a      	ldr	r2, [r3, #0]
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	43d9      	mvns	r1, r3
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	400a      	ands	r2, r1
 8015040:	601a      	str	r2, [r3, #0]
}
 8015042:	46c0      	nop			@ (mov r8, r8)
 8015044:	46bd      	mov	sp, r7
 8015046:	b004      	add	sp, #16
 8015048:	bd80      	pop	{r7, pc}
	...

0801504c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b082      	sub	sp, #8
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2241      	movs	r2, #65	@ 0x41
 801505a:	5c9b      	ldrb	r3, [r3, r2]
 801505c:	b2db      	uxtb	r3, r3
 801505e:	2b20      	cmp	r3, #32
 8015060:	d138      	bne.n	80150d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	2240      	movs	r2, #64	@ 0x40
 8015066:	5c9b      	ldrb	r3, [r3, r2]
 8015068:	2b01      	cmp	r3, #1
 801506a:	d101      	bne.n	8015070 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801506c:	2302      	movs	r3, #2
 801506e:	e032      	b.n	80150d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2240      	movs	r2, #64	@ 0x40
 8015074:	2101      	movs	r1, #1
 8015076:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	2241      	movs	r2, #65	@ 0x41
 801507c:	2124      	movs	r1, #36	@ 0x24
 801507e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	681a      	ldr	r2, [r3, #0]
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	2101      	movs	r1, #1
 801508c:	438a      	bics	r2, r1
 801508e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	681a      	ldr	r2, [r3, #0]
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	4911      	ldr	r1, [pc, #68]	@ (80150e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 801509c:	400a      	ands	r2, r1
 801509e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	6819      	ldr	r1, [r3, #0]
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	683a      	ldr	r2, [r7, #0]
 80150ac:	430a      	orrs	r2, r1
 80150ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	681a      	ldr	r2, [r3, #0]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	2101      	movs	r1, #1
 80150bc:	430a      	orrs	r2, r1
 80150be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	2241      	movs	r2, #65	@ 0x41
 80150c4:	2120      	movs	r1, #32
 80150c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	2240      	movs	r2, #64	@ 0x40
 80150cc:	2100      	movs	r1, #0
 80150ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80150d0:	2300      	movs	r3, #0
 80150d2:	e000      	b.n	80150d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80150d4:	2302      	movs	r3, #2
  }
}
 80150d6:	0018      	movs	r0, r3
 80150d8:	46bd      	mov	sp, r7
 80150da:	b002      	add	sp, #8
 80150dc:	bd80      	pop	{r7, pc}
 80150de:	46c0      	nop			@ (mov r8, r8)
 80150e0:	ffffefff 	.word	0xffffefff

080150e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b084      	sub	sp, #16
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	2241      	movs	r2, #65	@ 0x41
 80150f2:	5c9b      	ldrb	r3, [r3, r2]
 80150f4:	b2db      	uxtb	r3, r3
 80150f6:	2b20      	cmp	r3, #32
 80150f8:	d139      	bne.n	801516e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	2240      	movs	r2, #64	@ 0x40
 80150fe:	5c9b      	ldrb	r3, [r3, r2]
 8015100:	2b01      	cmp	r3, #1
 8015102:	d101      	bne.n	8015108 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8015104:	2302      	movs	r3, #2
 8015106:	e033      	b.n	8015170 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	2240      	movs	r2, #64	@ 0x40
 801510c:	2101      	movs	r1, #1
 801510e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	2241      	movs	r2, #65	@ 0x41
 8015114:	2124      	movs	r1, #36	@ 0x24
 8015116:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	681a      	ldr	r2, [r3, #0]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	2101      	movs	r1, #1
 8015124:	438a      	bics	r2, r1
 8015126:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	4a11      	ldr	r2, [pc, #68]	@ (8015178 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8015134:	4013      	ands	r3, r2
 8015136:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8015138:	683b      	ldr	r3, [r7, #0]
 801513a:	021b      	lsls	r3, r3, #8
 801513c:	68fa      	ldr	r2, [r7, #12]
 801513e:	4313      	orrs	r3, r2
 8015140:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	68fa      	ldr	r2, [r7, #12]
 8015148:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	681a      	ldr	r2, [r3, #0]
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	2101      	movs	r1, #1
 8015156:	430a      	orrs	r2, r1
 8015158:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	2241      	movs	r2, #65	@ 0x41
 801515e:	2120      	movs	r1, #32
 8015160:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	2240      	movs	r2, #64	@ 0x40
 8015166:	2100      	movs	r1, #0
 8015168:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801516a:	2300      	movs	r3, #0
 801516c:	e000      	b.n	8015170 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801516e:	2302      	movs	r3, #2
  }
}
 8015170:	0018      	movs	r0, r3
 8015172:	46bd      	mov	sp, r7
 8015174:	b004      	add	sp, #16
 8015176:	bd80      	pop	{r7, pc}
 8015178:	fffff0ff 	.word	0xfffff0ff

0801517c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b088      	sub	sp, #32
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d101      	bne.n	801518e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 801518a:	2301      	movs	r3, #1
 801518c:	e0e1      	b.n	8015352 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	2235      	movs	r2, #53	@ 0x35
 8015192:	5c9b      	ldrb	r3, [r3, r2]
 8015194:	b2db      	uxtb	r3, r3
 8015196:	2b00      	cmp	r3, #0
 8015198:	d107      	bne.n	80151aa <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	2234      	movs	r2, #52	@ 0x34
 801519e:	2100      	movs	r1, #0
 80151a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	0018      	movs	r0, r3
 80151a6:	f7f4 fb47 	bl	8009838 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	2235      	movs	r2, #53	@ 0x35
 80151ae:	2102      	movs	r1, #2
 80151b0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	69da      	ldr	r2, [r3, #28]
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	4967      	ldr	r1, [pc, #412]	@ (801535c <HAL_I2S_Init+0x1e0>)
 80151be:	400a      	ands	r2, r1
 80151c0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	2202      	movs	r2, #2
 80151c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	695b      	ldr	r3, [r3, #20]
 80151ce:	2b02      	cmp	r3, #2
 80151d0:	d073      	beq.n	80152ba <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	68db      	ldr	r3, [r3, #12]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d102      	bne.n	80151e0 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80151da:	2310      	movs	r3, #16
 80151dc:	617b      	str	r3, [r7, #20]
 80151de:	e001      	b.n	80151e4 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80151e0:	2320      	movs	r3, #32
 80151e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	689b      	ldr	r3, [r3, #8]
 80151e8:	2b20      	cmp	r3, #32
 80151ea:	d802      	bhi.n	80151f2 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80151ec:	697b      	ldr	r3, [r7, #20]
 80151ee:	005b      	lsls	r3, r3, #1
 80151f0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 80151f2:	f002 fed3 	bl	8017f9c <HAL_RCC_GetSysClockFreq>
 80151f6:	0003      	movs	r3, r0
 80151f8:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	691a      	ldr	r2, [r3, #16]
 80151fe:	2380      	movs	r3, #128	@ 0x80
 8015200:	009b      	lsls	r3, r3, #2
 8015202:	429a      	cmp	r2, r3
 8015204:	d131      	bne.n	801526a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	68db      	ldr	r3, [r3, #12]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d016      	beq.n	801523c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801520e:	697b      	ldr	r3, [r7, #20]
 8015210:	009b      	lsls	r3, r3, #2
 8015212:	0019      	movs	r1, r3
 8015214:	68f8      	ldr	r0, [r7, #12]
 8015216:	f7ea ffc5 	bl	80001a4 <__udivsi3>
 801521a:	0003      	movs	r3, r0
 801521c:	001a      	movs	r2, r3
 801521e:	0013      	movs	r3, r2
 8015220:	009b      	lsls	r3, r3, #2
 8015222:	189b      	adds	r3, r3, r2
 8015224:	005b      	lsls	r3, r3, #1
 8015226:	001a      	movs	r2, r3
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	695b      	ldr	r3, [r3, #20]
 801522c:	0019      	movs	r1, r3
 801522e:	0010      	movs	r0, r2
 8015230:	f7ea ffb8 	bl	80001a4 <__udivsi3>
 8015234:	0003      	movs	r3, r0
 8015236:	3305      	adds	r3, #5
 8015238:	613b      	str	r3, [r7, #16]
 801523a:	e02a      	b.n	8015292 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801523c:	697b      	ldr	r3, [r7, #20]
 801523e:	00db      	lsls	r3, r3, #3
 8015240:	0019      	movs	r1, r3
 8015242:	68f8      	ldr	r0, [r7, #12]
 8015244:	f7ea ffae 	bl	80001a4 <__udivsi3>
 8015248:	0003      	movs	r3, r0
 801524a:	001a      	movs	r2, r3
 801524c:	0013      	movs	r3, r2
 801524e:	009b      	lsls	r3, r3, #2
 8015250:	189b      	adds	r3, r3, r2
 8015252:	005b      	lsls	r3, r3, #1
 8015254:	001a      	movs	r2, r3
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	695b      	ldr	r3, [r3, #20]
 801525a:	0019      	movs	r1, r3
 801525c:	0010      	movs	r0, r2
 801525e:	f7ea ffa1 	bl	80001a4 <__udivsi3>
 8015262:	0003      	movs	r3, r0
 8015264:	3305      	adds	r3, #5
 8015266:	613b      	str	r3, [r7, #16]
 8015268:	e013      	b.n	8015292 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801526a:	6979      	ldr	r1, [r7, #20]
 801526c:	68f8      	ldr	r0, [r7, #12]
 801526e:	f7ea ff99 	bl	80001a4 <__udivsi3>
 8015272:	0003      	movs	r3, r0
 8015274:	001a      	movs	r2, r3
 8015276:	0013      	movs	r3, r2
 8015278:	009b      	lsls	r3, r3, #2
 801527a:	189b      	adds	r3, r3, r2
 801527c:	005b      	lsls	r3, r3, #1
 801527e:	001a      	movs	r2, r3
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	695b      	ldr	r3, [r3, #20]
 8015284:	0019      	movs	r1, r3
 8015286:	0010      	movs	r0, r2
 8015288:	f7ea ff8c 	bl	80001a4 <__udivsi3>
 801528c:	0003      	movs	r3, r0
 801528e:	3305      	adds	r3, #5
 8015290:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8015292:	693b      	ldr	r3, [r7, #16]
 8015294:	210a      	movs	r1, #10
 8015296:	0018      	movs	r0, r3
 8015298:	f7ea ff84 	bl	80001a4 <__udivsi3>
 801529c:	0003      	movs	r3, r0
 801529e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80152a0:	693b      	ldr	r3, [r7, #16]
 80152a2:	2201      	movs	r2, #1
 80152a4:	4013      	ands	r3, r2
 80152a6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80152a8:	693a      	ldr	r2, [r7, #16]
 80152aa:	69bb      	ldr	r3, [r7, #24]
 80152ac:	1ad3      	subs	r3, r2, r3
 80152ae:	085b      	lsrs	r3, r3, #1
 80152b0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80152b2:	69bb      	ldr	r3, [r7, #24]
 80152b4:	021b      	lsls	r3, r3, #8
 80152b6:	61bb      	str	r3, [r7, #24]
 80152b8:	e003      	b.n	80152c2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80152ba:	2302      	movs	r3, #2
 80152bc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80152be:	2300      	movs	r3, #0
 80152c0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80152c2:	69fb      	ldr	r3, [r7, #28]
 80152c4:	2b01      	cmp	r3, #1
 80152c6:	d902      	bls.n	80152ce <HAL_I2S_Init+0x152>
 80152c8:	69fb      	ldr	r3, [r7, #28]
 80152ca:	2bff      	cmp	r3, #255	@ 0xff
 80152cc:	d907      	bls.n	80152de <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152d2:	2210      	movs	r2, #16
 80152d4:	431a      	orrs	r2, r3
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80152da:	2301      	movs	r3, #1
 80152dc:	e039      	b.n	8015352 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	691a      	ldr	r2, [r3, #16]
 80152e2:	69bb      	ldr	r3, [r7, #24]
 80152e4:	431a      	orrs	r2, r3
 80152e6:	0011      	movs	r1, r2
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	69fa      	ldr	r2, [r7, #28]
 80152ee:	430a      	orrs	r2, r1
 80152f0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	69db      	ldr	r3, [r3, #28]
 80152f8:	4a18      	ldr	r2, [pc, #96]	@ (801535c <HAL_I2S_Init+0x1e0>)
 80152fa:	401a      	ands	r2, r3
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	6859      	ldr	r1, [r3, #4]
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	689b      	ldr	r3, [r3, #8]
 8015304:	4319      	orrs	r1, r3
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	68db      	ldr	r3, [r3, #12]
 801530a:	4319      	orrs	r1, r3
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	699b      	ldr	r3, [r3, #24]
 8015310:	430b      	orrs	r3, r1
 8015312:	431a      	orrs	r2, r3
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	2180      	movs	r1, #128	@ 0x80
 801531a:	0109      	lsls	r1, r1, #4
 801531c:	430a      	orrs	r2, r1
 801531e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	689b      	ldr	r3, [r3, #8]
 8015324:	2b30      	cmp	r3, #48	@ 0x30
 8015326:	d003      	beq.n	8015330 <HAL_I2S_Init+0x1b4>
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	689b      	ldr	r3, [r3, #8]
 801532c:	2bb0      	cmp	r3, #176	@ 0xb0
 801532e:	d108      	bne.n	8015342 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	69da      	ldr	r2, [r3, #28]
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	2180      	movs	r1, #128	@ 0x80
 801533c:	0149      	lsls	r1, r1, #5
 801533e:	430a      	orrs	r2, r1
 8015340:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	2200      	movs	r2, #0
 8015346:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2235      	movs	r2, #53	@ 0x35
 801534c:	2101      	movs	r1, #1
 801534e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015350:	2300      	movs	r3, #0
}
 8015352:	0018      	movs	r0, r3
 8015354:	46bd      	mov	sp, r7
 8015356:	b008      	add	sp, #32
 8015358:	bd80      	pop	{r7, pc}
 801535a:	46c0      	nop			@ (mov r8, r8)
 801535c:	fffff040 	.word	0xfffff040

08015360 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b086      	sub	sp, #24
 8015364:	af00      	add	r7, sp, #0
 8015366:	60f8      	str	r0, [r7, #12]
 8015368:	60b9      	str	r1, [r7, #8]
 801536a:	1dbb      	adds	r3, r7, #6
 801536c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 801536e:	68bb      	ldr	r3, [r7, #8]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d003      	beq.n	801537c <HAL_I2S_Receive_DMA+0x1c>
 8015374:	1dbb      	adds	r3, r7, #6
 8015376:	881b      	ldrh	r3, [r3, #0]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d101      	bne.n	8015380 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 801537c:	2301      	movs	r3, #1
 801537e:	e0a6      	b.n	80154ce <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	2234      	movs	r2, #52	@ 0x34
 8015384:	5c9b      	ldrb	r3, [r3, r2]
 8015386:	b2db      	uxtb	r3, r3
 8015388:	2b01      	cmp	r3, #1
 801538a:	d101      	bne.n	8015390 <HAL_I2S_Receive_DMA+0x30>
 801538c:	2302      	movs	r3, #2
 801538e:	e09e      	b.n	80154ce <HAL_I2S_Receive_DMA+0x16e>
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	2234      	movs	r2, #52	@ 0x34
 8015394:	2101      	movs	r1, #1
 8015396:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	2235      	movs	r2, #53	@ 0x35
 801539c:	5c9b      	ldrb	r3, [r3, r2]
 801539e:	b2db      	uxtb	r3, r3
 80153a0:	2b01      	cmp	r3, #1
 80153a2:	d005      	beq.n	80153b0 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	2234      	movs	r2, #52	@ 0x34
 80153a8:	2100      	movs	r1, #0
 80153aa:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80153ac:	2302      	movs	r3, #2
 80153ae:	e08e      	b.n	80154ce <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	2235      	movs	r2, #53	@ 0x35
 80153b4:	2104      	movs	r1, #4
 80153b6:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	2200      	movs	r2, #0
 80153bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	68ba      	ldr	r2, [r7, #8]
 80153c2:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	69db      	ldr	r3, [r3, #28]
 80153ca:	2207      	movs	r2, #7
 80153cc:	4013      	ands	r3, r2
 80153ce:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80153d0:	697b      	ldr	r3, [r7, #20]
 80153d2:	2b03      	cmp	r3, #3
 80153d4:	d002      	beq.n	80153dc <HAL_I2S_Receive_DMA+0x7c>
 80153d6:	697b      	ldr	r3, [r7, #20]
 80153d8:	2b05      	cmp	r3, #5
 80153da:	d10c      	bne.n	80153f6 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 80153dc:	1dbb      	adds	r3, r7, #6
 80153de:	881b      	ldrh	r3, [r3, #0]
 80153e0:	18db      	adds	r3, r3, r3
 80153e2:	b29a      	uxth	r2, r3
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 80153e8:	1dbb      	adds	r3, r7, #6
 80153ea:	881b      	ldrh	r3, [r3, #0]
 80153ec:	18db      	adds	r3, r3, r3
 80153ee:	b29a      	uxth	r2, r3
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80153f4:	e007      	b.n	8015406 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	1dba      	adds	r2, r7, #6
 80153fa:	8812      	ldrh	r2, [r2, #0]
 80153fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	1dba      	adds	r2, r7, #6
 8015402:	8812      	ldrh	r2, [r2, #0]
 8015404:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801540a:	4a33      	ldr	r2, [pc, #204]	@ (80154d8 <HAL_I2S_Receive_DMA+0x178>)
 801540c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015412:	4a32      	ldr	r2, [pc, #200]	@ (80154dc <HAL_I2S_Receive_DMA+0x17c>)
 8015414:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801541a:	4a31      	ldr	r2, [pc, #196]	@ (80154e0 <HAL_I2S_Receive_DMA+0x180>)
 801541c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	69da      	ldr	r2, [r3, #28]
 8015424:	23c0      	movs	r3, #192	@ 0xc0
 8015426:	009b      	lsls	r3, r3, #2
 8015428:	401a      	ands	r2, r3
 801542a:	23c0      	movs	r3, #192	@ 0xc0
 801542c:	009b      	lsls	r3, r3, #2
 801542e:	429a      	cmp	r2, r3
 8015430:	d10a      	bne.n	8015448 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8015432:	2300      	movs	r3, #0
 8015434:	613b      	str	r3, [r7, #16]
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	68db      	ldr	r3, [r3, #12]
 801543c:	613b      	str	r3, [r7, #16]
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	689b      	ldr	r3, [r3, #8]
 8015444:	613b      	str	r3, [r7, #16]
 8015446:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	330c      	adds	r3, #12
 8015452:	0019      	movs	r1, r3
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015458:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801545e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8015460:	f7fc fa0a 	bl	8011878 <HAL_DMA_Start_IT>
 8015464:	1e03      	subs	r3, r0, #0
 8015466:	d00f      	beq.n	8015488 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801546c:	2208      	movs	r2, #8
 801546e:	431a      	orrs	r2, r3
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	2235      	movs	r2, #53	@ 0x35
 8015478:	2101      	movs	r1, #1
 801547a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	2234      	movs	r2, #52	@ 0x34
 8015480:	2100      	movs	r1, #0
 8015482:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8015484:	2301      	movs	r3, #1
 8015486:	e022      	b.n	80154ce <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	69da      	ldr	r2, [r3, #28]
 801548e:	2380      	movs	r3, #128	@ 0x80
 8015490:	00db      	lsls	r3, r3, #3
 8015492:	4013      	ands	r3, r2
 8015494:	d108      	bne.n	80154a8 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	69da      	ldr	r2, [r3, #28]
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	2180      	movs	r1, #128	@ 0x80
 80154a2:	00c9      	lsls	r1, r1, #3
 80154a4:	430a      	orrs	r2, r1
 80154a6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	685b      	ldr	r3, [r3, #4]
 80154ae:	2201      	movs	r2, #1
 80154b0:	4013      	ands	r3, r2
 80154b2:	d107      	bne.n	80154c4 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	685a      	ldr	r2, [r3, #4]
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	2101      	movs	r1, #1
 80154c0:	430a      	orrs	r2, r1
 80154c2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	2234      	movs	r2, #52	@ 0x34
 80154c8:	2100      	movs	r1, #0
 80154ca:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80154cc:	2300      	movs	r3, #0
}
 80154ce:	0018      	movs	r0, r3
 80154d0:	46bd      	mov	sp, r7
 80154d2:	b006      	add	sp, #24
 80154d4:	bd80      	pop	{r7, pc}
 80154d6:	46c0      	nop			@ (mov r8, r8)
 80154d8:	080156c1 	.word	0x080156c1
 80154dc:	0801567d 	.word	0x0801567d
 80154e0:	080156df 	.word	0x080156df

080154e4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b086      	sub	sp, #24
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80154ec:	2317      	movs	r3, #23
 80154ee:	18fb      	adds	r3, r7, r3
 80154f0:	2200      	movs	r2, #0
 80154f2:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	685a      	ldr	r2, [r3, #4]
 80154f8:	2380      	movs	r3, #128	@ 0x80
 80154fa:	009b      	lsls	r3, r3, #2
 80154fc:	429a      	cmp	r2, r3
 80154fe:	d003      	beq.n	8015508 <HAL_I2S_DMAStop+0x24>
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	685b      	ldr	r3, [r3, #4]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d158      	bne.n	80155ba <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801550c:	2b00      	cmp	r3, #0
 801550e:	d010      	beq.n	8015532 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015514:	0018      	movs	r0, r3
 8015516:	f7fc fa15 	bl	8011944 <HAL_DMA_Abort>
 801551a:	1e03      	subs	r3, r0, #0
 801551c:	d009      	beq.n	8015532 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015522:	2208      	movs	r2, #8
 8015524:	431a      	orrs	r2, r3
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801552a:	2317      	movs	r3, #23
 801552c:	18fb      	adds	r3, r7, r3
 801552e:	2201      	movs	r2, #1
 8015530:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8015532:	6878      	ldr	r0, [r7, #4]
 8015534:	2364      	movs	r3, #100	@ 0x64
 8015536:	2201      	movs	r2, #1
 8015538:	2102      	movs	r1, #2
 801553a:	f000 f8f7 	bl	801572c <I2S_WaitFlagStateUntilTimeout>
 801553e:	1e03      	subs	r3, r0, #0
 8015540:	d00d      	beq.n	801555e <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015546:	2201      	movs	r2, #1
 8015548:	431a      	orrs	r2, r3
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	2235      	movs	r2, #53	@ 0x35
 8015552:	2101      	movs	r1, #1
 8015554:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8015556:	2317      	movs	r3, #23
 8015558:	18fb      	adds	r3, r7, r3
 801555a:	2201      	movs	r2, #1
 801555c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	2364      	movs	r3, #100	@ 0x64
 8015562:	2200      	movs	r2, #0
 8015564:	2180      	movs	r1, #128	@ 0x80
 8015566:	f000 f8e1 	bl	801572c <I2S_WaitFlagStateUntilTimeout>
 801556a:	1e03      	subs	r3, r0, #0
 801556c:	d00d      	beq.n	801558a <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015572:	2201      	movs	r2, #1
 8015574:	431a      	orrs	r2, r3
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2235      	movs	r2, #53	@ 0x35
 801557e:	2101      	movs	r1, #1
 8015580:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8015582:	2317      	movs	r3, #23
 8015584:	18fb      	adds	r3, r7, r3
 8015586:	2201      	movs	r2, #1
 8015588:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	69da      	ldr	r2, [r3, #28]
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	4938      	ldr	r1, [pc, #224]	@ (8015678 <HAL_I2S_DMAStop+0x194>)
 8015596:	400a      	ands	r2, r1
 8015598:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 801559a:	2300      	movs	r3, #0
 801559c:	613b      	str	r3, [r7, #16]
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	689b      	ldr	r3, [r3, #8]
 80155a4:	613b      	str	r3, [r7, #16]
 80155a6:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	685a      	ldr	r2, [r3, #4]
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	2102      	movs	r1, #2
 80155b4:	438a      	bics	r2, r1
 80155b6:	605a      	str	r2, [r3, #4]
 80155b8:	e053      	b.n	8015662 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	685a      	ldr	r2, [r3, #4]
 80155be:	23c0      	movs	r3, #192	@ 0xc0
 80155c0:	009b      	lsls	r3, r3, #2
 80155c2:	429a      	cmp	r2, r3
 80155c4:	d005      	beq.n	80155d2 <HAL_I2S_DMAStop+0xee>
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	685a      	ldr	r2, [r3, #4]
 80155ca:	2380      	movs	r3, #128	@ 0x80
 80155cc:	005b      	lsls	r3, r3, #1
 80155ce:	429a      	cmp	r2, r3
 80155d0:	d147      	bne.n	8015662 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d010      	beq.n	80155fc <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155de:	0018      	movs	r0, r3
 80155e0:	f7fc f9b0 	bl	8011944 <HAL_DMA_Abort>
 80155e4:	1e03      	subs	r3, r0, #0
 80155e6:	d009      	beq.n	80155fc <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155ec:	2208      	movs	r2, #8
 80155ee:	431a      	orrs	r2, r3
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80155f4:	2317      	movs	r3, #23
 80155f6:	18fb      	adds	r3, r7, r3
 80155f8:	2201      	movs	r2, #1
 80155fa:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	69da      	ldr	r2, [r3, #28]
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	491c      	ldr	r1, [pc, #112]	@ (8015678 <HAL_I2S_DMAStop+0x194>)
 8015608:	400a      	ands	r2, r1
 801560a:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801560c:	2300      	movs	r3, #0
 801560e:	60fb      	str	r3, [r7, #12]
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	68db      	ldr	r3, [r3, #12]
 8015616:	60fb      	str	r3, [r7, #12]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	689b      	ldr	r3, [r3, #8]
 801561e:	60fb      	str	r3, [r7, #12]
 8015620:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	685a      	ldr	r2, [r3, #4]
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	2101      	movs	r1, #1
 801562e:	438a      	bics	r2, r1
 8015630:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	685a      	ldr	r2, [r3, #4]
 8015636:	2380      	movs	r3, #128	@ 0x80
 8015638:	005b      	lsls	r3, r3, #1
 801563a:	429a      	cmp	r2, r3
 801563c:	d10e      	bne.n	801565c <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015642:	2240      	movs	r2, #64	@ 0x40
 8015644:	431a      	orrs	r2, r3
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	2235      	movs	r2, #53	@ 0x35
 801564e:	2101      	movs	r1, #1
 8015650:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8015652:	2317      	movs	r3, #23
 8015654:	18fb      	adds	r3, r7, r3
 8015656:	2201      	movs	r2, #1
 8015658:	701a      	strb	r2, [r3, #0]
 801565a:	e002      	b.n	8015662 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	2235      	movs	r2, #53	@ 0x35
 8015666:	2101      	movs	r1, #1
 8015668:	5499      	strb	r1, [r3, r2]

  return errorcode;
 801566a:	2317      	movs	r3, #23
 801566c:	18fb      	adds	r3, r7, r3
 801566e:	781b      	ldrb	r3, [r3, #0]
}
 8015670:	0018      	movs	r0, r3
 8015672:	46bd      	mov	sp, r7
 8015674:	b006      	add	sp, #24
 8015676:	bd80      	pop	{r7, pc}
 8015678:	fffffbff 	.word	0xfffffbff

0801567c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b084      	sub	sp, #16
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015688:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	69db      	ldr	r3, [r3, #28]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d10e      	bne.n	80156b0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	685a      	ldr	r2, [r3, #4]
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	2101      	movs	r1, #1
 801569e:	438a      	bics	r2, r1
 80156a0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	2200      	movs	r2, #0
 80156a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	2235      	movs	r2, #53	@ 0x35
 80156ac:	2101      	movs	r1, #1
 80156ae:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	0018      	movs	r0, r3
 80156b4:	f7f8 fea8 	bl	800e408 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80156b8:	46c0      	nop			@ (mov r8, r8)
 80156ba:	46bd      	mov	sp, r7
 80156bc:	b004      	add	sp, #16
 80156be:	bd80      	pop	{r7, pc}

080156c0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b084      	sub	sp, #16
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80156cc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	0018      	movs	r0, r3
 80156d2:	f7f8 fe87 	bl	800e3e4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80156d6:	46c0      	nop			@ (mov r8, r8)
 80156d8:	46bd      	mov	sp, r7
 80156da:	b004      	add	sp, #16
 80156dc:	bd80      	pop	{r7, pc}

080156de <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80156de:	b580      	push	{r7, lr}
 80156e0:	b084      	sub	sp, #16
 80156e2:	af00      	add	r7, sp, #0
 80156e4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80156ea:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	685a      	ldr	r2, [r3, #4]
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	2103      	movs	r1, #3
 80156f8:	438a      	bics	r2, r1
 80156fa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	2200      	movs	r2, #0
 8015700:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	2200      	movs	r2, #0
 8015706:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	2235      	movs	r2, #53	@ 0x35
 801570c:	2101      	movs	r1, #1
 801570e:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015714:	2208      	movs	r2, #8
 8015716:	431a      	orrs	r2, r3
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	0018      	movs	r0, r3
 8015720:	f7f8 fec0 	bl	800e4a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8015724:	46c0      	nop			@ (mov r8, r8)
 8015726:	46bd      	mov	sp, r7
 8015728:	b004      	add	sp, #16
 801572a:	bd80      	pop	{r7, pc}

0801572c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b086      	sub	sp, #24
 8015730:	af00      	add	r7, sp, #0
 8015732:	60f8      	str	r0, [r7, #12]
 8015734:	60b9      	str	r1, [r7, #8]
 8015736:	603b      	str	r3, [r7, #0]
 8015738:	1dfb      	adds	r3, r7, #7
 801573a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 801573c:	f7fb fb4a 	bl	8010dd4 <HAL_GetTick>
 8015740:	0003      	movs	r3, r0
 8015742:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8015744:	e017      	b.n	8015776 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8015746:	683b      	ldr	r3, [r7, #0]
 8015748:	3301      	adds	r3, #1
 801574a:	d014      	beq.n	8015776 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 801574c:	f7fb fb42 	bl	8010dd4 <HAL_GetTick>
 8015750:	0002      	movs	r2, r0
 8015752:	697b      	ldr	r3, [r7, #20]
 8015754:	1ad3      	subs	r3, r2, r3
 8015756:	683a      	ldr	r2, [r7, #0]
 8015758:	429a      	cmp	r2, r3
 801575a:	d902      	bls.n	8015762 <I2S_WaitFlagStateUntilTimeout+0x36>
 801575c:	683b      	ldr	r3, [r7, #0]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d109      	bne.n	8015776 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	2235      	movs	r2, #53	@ 0x35
 8015766:	2101      	movs	r1, #1
 8015768:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	2234      	movs	r2, #52	@ 0x34
 801576e:	2100      	movs	r1, #0
 8015770:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8015772:	2303      	movs	r3, #3
 8015774:	e00f      	b.n	8015796 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	689b      	ldr	r3, [r3, #8]
 801577c:	68ba      	ldr	r2, [r7, #8]
 801577e:	4013      	ands	r3, r2
 8015780:	68ba      	ldr	r2, [r7, #8]
 8015782:	1ad3      	subs	r3, r2, r3
 8015784:	425a      	negs	r2, r3
 8015786:	4153      	adcs	r3, r2
 8015788:	b2db      	uxtb	r3, r3
 801578a:	001a      	movs	r2, r3
 801578c:	1dfb      	adds	r3, r7, #7
 801578e:	781b      	ldrb	r3, [r3, #0]
 8015790:	429a      	cmp	r2, r3
 8015792:	d1d8      	bne.n	8015746 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8015794:	2300      	movs	r3, #0
}
 8015796:	0018      	movs	r0, r3
 8015798:	46bd      	mov	sp, r7
 801579a:	b006      	add	sp, #24
 801579c:	bd80      	pop	{r7, pc}
	...

080157a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80157a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157a2:	b08b      	sub	sp, #44	@ 0x2c
 80157a4:	af06      	add	r7, sp, #24
 80157a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d101      	bne.n	80157b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80157ae:	2301      	movs	r3, #1
 80157b0:	e0f0      	b.n	8015994 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	4a79      	ldr	r2, [pc, #484]	@ (801599c <HAL_PCD_Init+0x1fc>)
 80157b6:	5c9b      	ldrb	r3, [r3, r2]
 80157b8:	b2db      	uxtb	r3, r3
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d108      	bne.n	80157d0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80157be:	687a      	ldr	r2, [r7, #4]
 80157c0:	23aa      	movs	r3, #170	@ 0xaa
 80157c2:	009b      	lsls	r3, r3, #2
 80157c4:	2100      	movs	r1, #0
 80157c6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	0018      	movs	r0, r3
 80157cc:	f009 ff4a 	bl	801f664 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	4a72      	ldr	r2, [pc, #456]	@ (801599c <HAL_PCD_Init+0x1fc>)
 80157d4:	2103      	movs	r1, #3
 80157d6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	0018      	movs	r0, r3
 80157de:	f005 fefd 	bl	801b5dc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80157e2:	230f      	movs	r3, #15
 80157e4:	18fb      	adds	r3, r7, r3
 80157e6:	2200      	movs	r2, #0
 80157e8:	701a      	strb	r2, [r3, #0]
 80157ea:	e049      	b.n	8015880 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80157ec:	200f      	movs	r0, #15
 80157ee:	183b      	adds	r3, r7, r0
 80157f0:	781b      	ldrb	r3, [r3, #0]
 80157f2:	6879      	ldr	r1, [r7, #4]
 80157f4:	1c5a      	adds	r2, r3, #1
 80157f6:	0013      	movs	r3, r2
 80157f8:	009b      	lsls	r3, r3, #2
 80157fa:	189b      	adds	r3, r3, r2
 80157fc:	00db      	lsls	r3, r3, #3
 80157fe:	18cb      	adds	r3, r1, r3
 8015800:	3301      	adds	r3, #1
 8015802:	2201      	movs	r2, #1
 8015804:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8015806:	183b      	adds	r3, r7, r0
 8015808:	781b      	ldrb	r3, [r3, #0]
 801580a:	6879      	ldr	r1, [r7, #4]
 801580c:	1c5a      	adds	r2, r3, #1
 801580e:	0013      	movs	r3, r2
 8015810:	009b      	lsls	r3, r3, #2
 8015812:	189b      	adds	r3, r3, r2
 8015814:	00db      	lsls	r3, r3, #3
 8015816:	183a      	adds	r2, r7, r0
 8015818:	7812      	ldrb	r2, [r2, #0]
 801581a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801581c:	183b      	adds	r3, r7, r0
 801581e:	781b      	ldrb	r3, [r3, #0]
 8015820:	6879      	ldr	r1, [r7, #4]
 8015822:	1c5a      	adds	r2, r3, #1
 8015824:	0013      	movs	r3, r2
 8015826:	009b      	lsls	r3, r3, #2
 8015828:	189b      	adds	r3, r3, r2
 801582a:	00db      	lsls	r3, r3, #3
 801582c:	18cb      	adds	r3, r1, r3
 801582e:	3303      	adds	r3, #3
 8015830:	2200      	movs	r2, #0
 8015832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8015834:	183b      	adds	r3, r7, r0
 8015836:	781a      	ldrb	r2, [r3, #0]
 8015838:	6879      	ldr	r1, [r7, #4]
 801583a:	0013      	movs	r3, r2
 801583c:	009b      	lsls	r3, r3, #2
 801583e:	189b      	adds	r3, r3, r2
 8015840:	00db      	lsls	r3, r3, #3
 8015842:	18cb      	adds	r3, r1, r3
 8015844:	3338      	adds	r3, #56	@ 0x38
 8015846:	2200      	movs	r2, #0
 8015848:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801584a:	183b      	adds	r3, r7, r0
 801584c:	781a      	ldrb	r2, [r3, #0]
 801584e:	6879      	ldr	r1, [r7, #4]
 8015850:	0013      	movs	r3, r2
 8015852:	009b      	lsls	r3, r3, #2
 8015854:	189b      	adds	r3, r3, r2
 8015856:	00db      	lsls	r3, r3, #3
 8015858:	18cb      	adds	r3, r1, r3
 801585a:	333c      	adds	r3, #60	@ 0x3c
 801585c:	2200      	movs	r2, #0
 801585e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8015860:	183b      	adds	r3, r7, r0
 8015862:	781a      	ldrb	r2, [r3, #0]
 8015864:	6879      	ldr	r1, [r7, #4]
 8015866:	0013      	movs	r3, r2
 8015868:	009b      	lsls	r3, r3, #2
 801586a:	189b      	adds	r3, r3, r2
 801586c:	00db      	lsls	r3, r3, #3
 801586e:	18cb      	adds	r3, r1, r3
 8015870:	3340      	adds	r3, #64	@ 0x40
 8015872:	2200      	movs	r2, #0
 8015874:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015876:	183b      	adds	r3, r7, r0
 8015878:	781a      	ldrb	r2, [r3, #0]
 801587a:	183b      	adds	r3, r7, r0
 801587c:	3201      	adds	r2, #1
 801587e:	701a      	strb	r2, [r3, #0]
 8015880:	210f      	movs	r1, #15
 8015882:	187b      	adds	r3, r7, r1
 8015884:	781a      	ldrb	r2, [r3, #0]
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	685b      	ldr	r3, [r3, #4]
 801588a:	429a      	cmp	r2, r3
 801588c:	d3ae      	bcc.n	80157ec <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801588e:	187b      	adds	r3, r7, r1
 8015890:	2200      	movs	r2, #0
 8015892:	701a      	strb	r2, [r3, #0]
 8015894:	e056      	b.n	8015944 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8015896:	240f      	movs	r4, #15
 8015898:	193b      	adds	r3, r7, r4
 801589a:	781a      	ldrb	r2, [r3, #0]
 801589c:	6878      	ldr	r0, [r7, #4]
 801589e:	236a      	movs	r3, #106	@ 0x6a
 80158a0:	33ff      	adds	r3, #255	@ 0xff
 80158a2:	0019      	movs	r1, r3
 80158a4:	0013      	movs	r3, r2
 80158a6:	009b      	lsls	r3, r3, #2
 80158a8:	189b      	adds	r3, r3, r2
 80158aa:	00db      	lsls	r3, r3, #3
 80158ac:	18c3      	adds	r3, r0, r3
 80158ae:	185b      	adds	r3, r3, r1
 80158b0:	2200      	movs	r2, #0
 80158b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80158b4:	193b      	adds	r3, r7, r4
 80158b6:	781a      	ldrb	r2, [r3, #0]
 80158b8:	6878      	ldr	r0, [r7, #4]
 80158ba:	23b4      	movs	r3, #180	@ 0xb4
 80158bc:	0059      	lsls	r1, r3, #1
 80158be:	0013      	movs	r3, r2
 80158c0:	009b      	lsls	r3, r3, #2
 80158c2:	189b      	adds	r3, r3, r2
 80158c4:	00db      	lsls	r3, r3, #3
 80158c6:	18c3      	adds	r3, r0, r3
 80158c8:	185b      	adds	r3, r3, r1
 80158ca:	193a      	adds	r2, r7, r4
 80158cc:	7812      	ldrb	r2, [r2, #0]
 80158ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80158d0:	193b      	adds	r3, r7, r4
 80158d2:	781a      	ldrb	r2, [r3, #0]
 80158d4:	6878      	ldr	r0, [r7, #4]
 80158d6:	236c      	movs	r3, #108	@ 0x6c
 80158d8:	33ff      	adds	r3, #255	@ 0xff
 80158da:	0019      	movs	r1, r3
 80158dc:	0013      	movs	r3, r2
 80158de:	009b      	lsls	r3, r3, #2
 80158e0:	189b      	adds	r3, r3, r2
 80158e2:	00db      	lsls	r3, r3, #3
 80158e4:	18c3      	adds	r3, r0, r3
 80158e6:	185b      	adds	r3, r3, r1
 80158e8:	2200      	movs	r2, #0
 80158ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80158ec:	193b      	adds	r3, r7, r4
 80158ee:	781a      	ldrb	r2, [r3, #0]
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	23bc      	movs	r3, #188	@ 0xbc
 80158f4:	0059      	lsls	r1, r3, #1
 80158f6:	0013      	movs	r3, r2
 80158f8:	009b      	lsls	r3, r3, #2
 80158fa:	189b      	adds	r3, r3, r2
 80158fc:	00db      	lsls	r3, r3, #3
 80158fe:	18c3      	adds	r3, r0, r3
 8015900:	185b      	adds	r3, r3, r1
 8015902:	2200      	movs	r2, #0
 8015904:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8015906:	193b      	adds	r3, r7, r4
 8015908:	781a      	ldrb	r2, [r3, #0]
 801590a:	6878      	ldr	r0, [r7, #4]
 801590c:	23be      	movs	r3, #190	@ 0xbe
 801590e:	0059      	lsls	r1, r3, #1
 8015910:	0013      	movs	r3, r2
 8015912:	009b      	lsls	r3, r3, #2
 8015914:	189b      	adds	r3, r3, r2
 8015916:	00db      	lsls	r3, r3, #3
 8015918:	18c3      	adds	r3, r0, r3
 801591a:	185b      	adds	r3, r3, r1
 801591c:	2200      	movs	r2, #0
 801591e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8015920:	193b      	adds	r3, r7, r4
 8015922:	781a      	ldrb	r2, [r3, #0]
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	23c0      	movs	r3, #192	@ 0xc0
 8015928:	0059      	lsls	r1, r3, #1
 801592a:	0013      	movs	r3, r2
 801592c:	009b      	lsls	r3, r3, #2
 801592e:	189b      	adds	r3, r3, r2
 8015930:	00db      	lsls	r3, r3, #3
 8015932:	18c3      	adds	r3, r0, r3
 8015934:	185b      	adds	r3, r3, r1
 8015936:	2200      	movs	r2, #0
 8015938:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801593a:	193b      	adds	r3, r7, r4
 801593c:	781a      	ldrb	r2, [r3, #0]
 801593e:	193b      	adds	r3, r7, r4
 8015940:	3201      	adds	r2, #1
 8015942:	701a      	strb	r2, [r3, #0]
 8015944:	230f      	movs	r3, #15
 8015946:	18fb      	adds	r3, r7, r3
 8015948:	781a      	ldrb	r2, [r3, #0]
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	685b      	ldr	r3, [r3, #4]
 801594e:	429a      	cmp	r2, r3
 8015950:	d3a1      	bcc.n	8015896 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	6818      	ldr	r0, [r3, #0]
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	466a      	mov	r2, sp
 801595a:	0011      	movs	r1, r2
 801595c:	001a      	movs	r2, r3
 801595e:	3210      	adds	r2, #16
 8015960:	ca70      	ldmia	r2!, {r4, r5, r6}
 8015962:	c170      	stmia	r1!, {r4, r5, r6}
 8015964:	ca30      	ldmia	r2!, {r4, r5}
 8015966:	c130      	stmia	r1!, {r4, r5}
 8015968:	6859      	ldr	r1, [r3, #4]
 801596a:	689a      	ldr	r2, [r3, #8]
 801596c:	68db      	ldr	r3, [r3, #12]
 801596e:	f005 fe4f 	bl	801b610 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	2224      	movs	r2, #36	@ 0x24
 8015976:	2100      	movs	r1, #0
 8015978:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	4a07      	ldr	r2, [pc, #28]	@ (801599c <HAL_PCD_Init+0x1fc>)
 801597e:	2101      	movs	r1, #1
 8015980:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	69db      	ldr	r3, [r3, #28]
 8015986:	2b01      	cmp	r3, #1
 8015988:	d103      	bne.n	8015992 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	0018      	movs	r0, r3
 801598e:	f001 fd23 	bl	80173d8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8015992:	2300      	movs	r3, #0
}
 8015994:	0018      	movs	r0, r3
 8015996:	46bd      	mov	sp, r7
 8015998:	b005      	add	sp, #20
 801599a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801599c:	000002a9 	.word	0x000002a9

080159a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80159a8:	687a      	ldr	r2, [r7, #4]
 80159aa:	23aa      	movs	r3, #170	@ 0xaa
 80159ac:	009b      	lsls	r3, r3, #2
 80159ae:	5cd3      	ldrb	r3, [r2, r3]
 80159b0:	2b01      	cmp	r3, #1
 80159b2:	d101      	bne.n	80159b8 <HAL_PCD_Start+0x18>
 80159b4:	2302      	movs	r3, #2
 80159b6:	e014      	b.n	80159e2 <HAL_PCD_Start+0x42>
 80159b8:	687a      	ldr	r2, [r7, #4]
 80159ba:	23aa      	movs	r3, #170	@ 0xaa
 80159bc:	009b      	lsls	r3, r3, #2
 80159be:	2101      	movs	r1, #1
 80159c0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	0018      	movs	r0, r3
 80159c8:	f005 fdf2 	bl	801b5b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	0018      	movs	r0, r3
 80159d2:	f007 fdf5 	bl	801d5c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80159d6:	687a      	ldr	r2, [r7, #4]
 80159d8:	23aa      	movs	r3, #170	@ 0xaa
 80159da:	009b      	lsls	r3, r3, #2
 80159dc:	2100      	movs	r1, #0
 80159de:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80159e0:	2300      	movs	r3, #0
}
 80159e2:	0018      	movs	r0, r3
 80159e4:	46bd      	mov	sp, r7
 80159e6:	b002      	add	sp, #8
 80159e8:	bd80      	pop	{r7, pc}
	...

080159ec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b084      	sub	sp, #16
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	0018      	movs	r0, r3
 80159fa:	f007 fdf7 	bl	801d5ec <USB_ReadInterrupts>
 80159fe:	0003      	movs	r3, r0
 8015a00:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8015a02:	68fa      	ldr	r2, [r7, #12]
 8015a04:	2380      	movs	r3, #128	@ 0x80
 8015a06:	021b      	lsls	r3, r3, #8
 8015a08:	4013      	ands	r3, r2
 8015a0a:	d004      	beq.n	8015a16 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	0018      	movs	r0, r3
 8015a10:	f000 fb62 	bl	80160d8 <PCD_EP_ISR_Handler>

    return;
 8015a14:	e11d      	b.n	8015c52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8015a16:	68fa      	ldr	r2, [r7, #12]
 8015a18:	2380      	movs	r3, #128	@ 0x80
 8015a1a:	00db      	lsls	r3, r3, #3
 8015a1c:	4013      	ands	r3, r2
 8015a1e:	d015      	beq.n	8015a4c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	2244      	movs	r2, #68	@ 0x44
 8015a26:	5a9b      	ldrh	r3, [r3, r2]
 8015a28:	b29a      	uxth	r2, r3
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	498a      	ldr	r1, [pc, #552]	@ (8015c58 <HAL_PCD_IRQHandler+0x26c>)
 8015a30:	400a      	ands	r2, r1
 8015a32:	b291      	uxth	r1, r2
 8015a34:	2244      	movs	r2, #68	@ 0x44
 8015a36:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	0018      	movs	r0, r3
 8015a3c:	f009 fe95 	bl	801f76a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	2100      	movs	r1, #0
 8015a44:	0018      	movs	r0, r3
 8015a46:	f000 f915 	bl	8015c74 <HAL_PCD_SetAddress>

    return;
 8015a4a:	e102      	b.n	8015c52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8015a4c:	68fa      	ldr	r2, [r7, #12]
 8015a4e:	2380      	movs	r3, #128	@ 0x80
 8015a50:	01db      	lsls	r3, r3, #7
 8015a52:	4013      	ands	r3, r2
 8015a54:	d00c      	beq.n	8015a70 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	2244      	movs	r2, #68	@ 0x44
 8015a5c:	5a9b      	ldrh	r3, [r3, r2]
 8015a5e:	b29a      	uxth	r2, r3
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	497d      	ldr	r1, [pc, #500]	@ (8015c5c <HAL_PCD_IRQHandler+0x270>)
 8015a66:	400a      	ands	r2, r1
 8015a68:	b291      	uxth	r1, r2
 8015a6a:	2244      	movs	r2, #68	@ 0x44
 8015a6c:	5299      	strh	r1, [r3, r2]

    return;
 8015a6e:	e0f0      	b.n	8015c52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8015a70:	68fa      	ldr	r2, [r7, #12]
 8015a72:	2380      	movs	r3, #128	@ 0x80
 8015a74:	019b      	lsls	r3, r3, #6
 8015a76:	4013      	ands	r3, r2
 8015a78:	d00c      	beq.n	8015a94 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	2244      	movs	r2, #68	@ 0x44
 8015a80:	5a9b      	ldrh	r3, [r3, r2]
 8015a82:	b29a      	uxth	r2, r3
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	4975      	ldr	r1, [pc, #468]	@ (8015c60 <HAL_PCD_IRQHandler+0x274>)
 8015a8a:	400a      	ands	r2, r1
 8015a8c:	b291      	uxth	r1, r2
 8015a8e:	2244      	movs	r2, #68	@ 0x44
 8015a90:	5299      	strh	r1, [r3, r2]

    return;
 8015a92:	e0de      	b.n	8015c52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8015a94:	68fa      	ldr	r2, [r7, #12]
 8015a96:	2380      	movs	r3, #128	@ 0x80
 8015a98:	015b      	lsls	r3, r3, #5
 8015a9a:	4013      	ands	r3, r2
 8015a9c:	d038      	beq.n	8015b10 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	2240      	movs	r2, #64	@ 0x40
 8015aa4:	5a9b      	ldrh	r3, [r3, r2]
 8015aa6:	b29a      	uxth	r2, r3
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	2104      	movs	r1, #4
 8015aae:	438a      	bics	r2, r1
 8015ab0:	b291      	uxth	r1, r2
 8015ab2:	2240      	movs	r2, #64	@ 0x40
 8015ab4:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	2240      	movs	r2, #64	@ 0x40
 8015abc:	5a9b      	ldrh	r3, [r3, r2]
 8015abe:	b29a      	uxth	r2, r3
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	2108      	movs	r1, #8
 8015ac6:	438a      	bics	r2, r1
 8015ac8:	b291      	uxth	r1, r2
 8015aca:	2240      	movs	r2, #64	@ 0x40
 8015acc:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8015ace:	687a      	ldr	r2, [r7, #4]
 8015ad0:	23b8      	movs	r3, #184	@ 0xb8
 8015ad2:	009b      	lsls	r3, r3, #2
 8015ad4:	5cd3      	ldrb	r3, [r2, r3]
 8015ad6:	2b01      	cmp	r3, #1
 8015ad8:	d109      	bne.n	8015aee <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	23b8      	movs	r3, #184	@ 0xb8
 8015ade:	009b      	lsls	r3, r3, #2
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	2100      	movs	r1, #0
 8015ae8:	0018      	movs	r0, r3
 8015aea:	f001 fc9f 	bl	801742c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	0018      	movs	r0, r3
 8015af2:	f009 fe7b 	bl	801f7ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	2244      	movs	r2, #68	@ 0x44
 8015afc:	5a9b      	ldrh	r3, [r3, r2]
 8015afe:	b29a      	uxth	r2, r3
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	4957      	ldr	r1, [pc, #348]	@ (8015c64 <HAL_PCD_IRQHandler+0x278>)
 8015b06:	400a      	ands	r2, r1
 8015b08:	b291      	uxth	r1, r2
 8015b0a:	2244      	movs	r2, #68	@ 0x44
 8015b0c:	5299      	strh	r1, [r3, r2]

    return;
 8015b0e:	e0a0      	b.n	8015c52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8015b10:	68fa      	ldr	r2, [r7, #12]
 8015b12:	2380      	movs	r3, #128	@ 0x80
 8015b14:	011b      	lsls	r3, r3, #4
 8015b16:	4013      	ands	r3, r2
 8015b18:	d028      	beq.n	8015b6c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	2240      	movs	r2, #64	@ 0x40
 8015b20:	5a9b      	ldrh	r3, [r3, r2]
 8015b22:	b29a      	uxth	r2, r3
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	2108      	movs	r1, #8
 8015b2a:	430a      	orrs	r2, r1
 8015b2c:	b291      	uxth	r1, r2
 8015b2e:	2240      	movs	r2, #64	@ 0x40
 8015b30:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	2244      	movs	r2, #68	@ 0x44
 8015b38:	5a9b      	ldrh	r3, [r3, r2]
 8015b3a:	b29a      	uxth	r2, r3
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	4949      	ldr	r1, [pc, #292]	@ (8015c68 <HAL_PCD_IRQHandler+0x27c>)
 8015b42:	400a      	ands	r2, r1
 8015b44:	b291      	uxth	r1, r2
 8015b46:	2244      	movs	r2, #68	@ 0x44
 8015b48:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	2240      	movs	r2, #64	@ 0x40
 8015b50:	5a9b      	ldrh	r3, [r3, r2]
 8015b52:	b29a      	uxth	r2, r3
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	2104      	movs	r1, #4
 8015b5a:	430a      	orrs	r2, r1
 8015b5c:	b291      	uxth	r1, r2
 8015b5e:	2240      	movs	r2, #64	@ 0x40
 8015b60:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	0018      	movs	r0, r3
 8015b66:	f009 fe25 	bl	801f7b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8015b6a:	e072      	b.n	8015c52 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	2280      	movs	r2, #128	@ 0x80
 8015b70:	4013      	ands	r3, r2
 8015b72:	d046      	beq.n	8015c02 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	2244      	movs	r2, #68	@ 0x44
 8015b7a:	5a9b      	ldrh	r3, [r3, r2]
 8015b7c:	b29a      	uxth	r2, r3
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	2180      	movs	r1, #128	@ 0x80
 8015b84:	438a      	bics	r2, r1
 8015b86:	b291      	uxth	r1, r2
 8015b88:	2244      	movs	r2, #68	@ 0x44
 8015b8a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8015b8c:	687a      	ldr	r2, [r7, #4]
 8015b8e:	23b8      	movs	r3, #184	@ 0xb8
 8015b90:	009b      	lsls	r3, r3, #2
 8015b92:	5cd3      	ldrb	r3, [r2, r3]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d12f      	bne.n	8015bf8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	2240      	movs	r2, #64	@ 0x40
 8015b9e:	5a9b      	ldrh	r3, [r3, r2]
 8015ba0:	b29a      	uxth	r2, r3
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	2104      	movs	r1, #4
 8015ba8:	430a      	orrs	r2, r1
 8015baa:	b291      	uxth	r1, r2
 8015bac:	2240      	movs	r2, #64	@ 0x40
 8015bae:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	2240      	movs	r2, #64	@ 0x40
 8015bb6:	5a9b      	ldrh	r3, [r3, r2]
 8015bb8:	b29a      	uxth	r2, r3
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	2108      	movs	r1, #8
 8015bc0:	430a      	orrs	r2, r1
 8015bc2:	b291      	uxth	r1, r2
 8015bc4:	2240      	movs	r2, #64	@ 0x40
 8015bc6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8015bc8:	687a      	ldr	r2, [r7, #4]
 8015bca:	23b8      	movs	r3, #184	@ 0xb8
 8015bcc:	009b      	lsls	r3, r3, #2
 8015bce:	2101      	movs	r1, #1
 8015bd0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	2254      	movs	r2, #84	@ 0x54
 8015bd8:	5a9b      	ldrh	r3, [r3, r2]
 8015bda:	b29b      	uxth	r3, r3
 8015bdc:	089b      	lsrs	r3, r3, #2
 8015bde:	223c      	movs	r2, #60	@ 0x3c
 8015be0:	4013      	ands	r3, r2
 8015be2:	0019      	movs	r1, r3
 8015be4:	687a      	ldr	r2, [r7, #4]
 8015be6:	23b9      	movs	r3, #185	@ 0xb9
 8015be8:	009b      	lsls	r3, r3, #2
 8015bea:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	2101      	movs	r1, #1
 8015bf0:	0018      	movs	r0, r3
 8015bf2:	f001 fc1b 	bl	801742c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8015bf6:	e02c      	b.n	8015c52 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	0018      	movs	r0, r3
 8015bfc:	f009 fdda 	bl	801f7b4 <HAL_PCD_SuspendCallback>
    return;
 8015c00:	e027      	b.n	8015c52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8015c02:	68fa      	ldr	r2, [r7, #12]
 8015c04:	2380      	movs	r3, #128	@ 0x80
 8015c06:	009b      	lsls	r3, r3, #2
 8015c08:	4013      	ands	r3, r2
 8015c0a:	d010      	beq.n	8015c2e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	2244      	movs	r2, #68	@ 0x44
 8015c12:	5a9b      	ldrh	r3, [r3, r2]
 8015c14:	b29a      	uxth	r2, r3
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	4914      	ldr	r1, [pc, #80]	@ (8015c6c <HAL_PCD_IRQHandler+0x280>)
 8015c1c:	400a      	ands	r2, r1
 8015c1e:	b291      	uxth	r1, r2
 8015c20:	2244      	movs	r2, #68	@ 0x44
 8015c22:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	0018      	movs	r0, r3
 8015c28:	f009 fd90 	bl	801f74c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8015c2c:	e011      	b.n	8015c52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8015c2e:	68fa      	ldr	r2, [r7, #12]
 8015c30:	2380      	movs	r3, #128	@ 0x80
 8015c32:	005b      	lsls	r3, r3, #1
 8015c34:	4013      	ands	r3, r2
 8015c36:	d00c      	beq.n	8015c52 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	2244      	movs	r2, #68	@ 0x44
 8015c3e:	5a9b      	ldrh	r3, [r3, r2]
 8015c40:	b29a      	uxth	r2, r3
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	490a      	ldr	r1, [pc, #40]	@ (8015c70 <HAL_PCD_IRQHandler+0x284>)
 8015c48:	400a      	ands	r2, r1
 8015c4a:	b291      	uxth	r1, r2
 8015c4c:	2244      	movs	r2, #68	@ 0x44
 8015c4e:	5299      	strh	r1, [r3, r2]

    return;
 8015c50:	46c0      	nop			@ (mov r8, r8)
  }
}
 8015c52:	46bd      	mov	sp, r7
 8015c54:	b004      	add	sp, #16
 8015c56:	bd80      	pop	{r7, pc}
 8015c58:	fffffbff 	.word	0xfffffbff
 8015c5c:	ffffbfff 	.word	0xffffbfff
 8015c60:	ffffdfff 	.word	0xffffdfff
 8015c64:	ffffefff 	.word	0xffffefff
 8015c68:	fffff7ff 	.word	0xfffff7ff
 8015c6c:	fffffdff 	.word	0xfffffdff
 8015c70:	fffffeff 	.word	0xfffffeff

08015c74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b082      	sub	sp, #8
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
 8015c7c:	000a      	movs	r2, r1
 8015c7e:	1cfb      	adds	r3, r7, #3
 8015c80:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8015c82:	687a      	ldr	r2, [r7, #4]
 8015c84:	23aa      	movs	r3, #170	@ 0xaa
 8015c86:	009b      	lsls	r3, r3, #2
 8015c88:	5cd3      	ldrb	r3, [r2, r3]
 8015c8a:	2b01      	cmp	r3, #1
 8015c8c:	d101      	bne.n	8015c92 <HAL_PCD_SetAddress+0x1e>
 8015c8e:	2302      	movs	r3, #2
 8015c90:	e017      	b.n	8015cc2 <HAL_PCD_SetAddress+0x4e>
 8015c92:	687a      	ldr	r2, [r7, #4]
 8015c94:	23aa      	movs	r3, #170	@ 0xaa
 8015c96:	009b      	lsls	r3, r3, #2
 8015c98:	2101      	movs	r1, #1
 8015c9a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	1cfa      	adds	r2, r7, #3
 8015ca0:	2124      	movs	r1, #36	@ 0x24
 8015ca2:	7812      	ldrb	r2, [r2, #0]
 8015ca4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	681a      	ldr	r2, [r3, #0]
 8015caa:	1cfb      	adds	r3, r7, #3
 8015cac:	781b      	ldrb	r3, [r3, #0]
 8015cae:	0019      	movs	r1, r3
 8015cb0:	0010      	movs	r0, r2
 8015cb2:	f007 fc71 	bl	801d598 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8015cb6:	687a      	ldr	r2, [r7, #4]
 8015cb8:	23aa      	movs	r3, #170	@ 0xaa
 8015cba:	009b      	lsls	r3, r3, #2
 8015cbc:	2100      	movs	r1, #0
 8015cbe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8015cc0:	2300      	movs	r3, #0
}
 8015cc2:	0018      	movs	r0, r3
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	b002      	add	sp, #8
 8015cc8:	bd80      	pop	{r7, pc}

08015cca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8015cca:	b590      	push	{r4, r7, lr}
 8015ccc:	b085      	sub	sp, #20
 8015cce:	af00      	add	r7, sp, #0
 8015cd0:	6078      	str	r0, [r7, #4]
 8015cd2:	000c      	movs	r4, r1
 8015cd4:	0010      	movs	r0, r2
 8015cd6:	0019      	movs	r1, r3
 8015cd8:	1cfb      	adds	r3, r7, #3
 8015cda:	1c22      	adds	r2, r4, #0
 8015cdc:	701a      	strb	r2, [r3, #0]
 8015cde:	003b      	movs	r3, r7
 8015ce0:	1c02      	adds	r2, r0, #0
 8015ce2:	801a      	strh	r2, [r3, #0]
 8015ce4:	1cbb      	adds	r3, r7, #2
 8015ce6:	1c0a      	adds	r2, r1, #0
 8015ce8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8015cea:	230b      	movs	r3, #11
 8015cec:	18fb      	adds	r3, r7, r3
 8015cee:	2200      	movs	r2, #0
 8015cf0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8015cf2:	1cfb      	adds	r3, r7, #3
 8015cf4:	781b      	ldrb	r3, [r3, #0]
 8015cf6:	b25b      	sxtb	r3, r3
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	da0f      	bge.n	8015d1c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8015cfc:	1cfb      	adds	r3, r7, #3
 8015cfe:	781b      	ldrb	r3, [r3, #0]
 8015d00:	2207      	movs	r2, #7
 8015d02:	4013      	ands	r3, r2
 8015d04:	1c5a      	adds	r2, r3, #1
 8015d06:	0013      	movs	r3, r2
 8015d08:	009b      	lsls	r3, r3, #2
 8015d0a:	189b      	adds	r3, r3, r2
 8015d0c:	00db      	lsls	r3, r3, #3
 8015d0e:	687a      	ldr	r2, [r7, #4]
 8015d10:	18d3      	adds	r3, r2, r3
 8015d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	2201      	movs	r2, #1
 8015d18:	705a      	strb	r2, [r3, #1]
 8015d1a:	e00f      	b.n	8015d3c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8015d1c:	1cfb      	adds	r3, r7, #3
 8015d1e:	781b      	ldrb	r3, [r3, #0]
 8015d20:	2207      	movs	r2, #7
 8015d22:	401a      	ands	r2, r3
 8015d24:	0013      	movs	r3, r2
 8015d26:	009b      	lsls	r3, r3, #2
 8015d28:	189b      	adds	r3, r3, r2
 8015d2a:	00db      	lsls	r3, r3, #3
 8015d2c:	3369      	adds	r3, #105	@ 0x69
 8015d2e:	33ff      	adds	r3, #255	@ 0xff
 8015d30:	687a      	ldr	r2, [r7, #4]
 8015d32:	18d3      	adds	r3, r2, r3
 8015d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	2200      	movs	r2, #0
 8015d3a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8015d3c:	1cfb      	adds	r3, r7, #3
 8015d3e:	781b      	ldrb	r3, [r3, #0]
 8015d40:	2207      	movs	r2, #7
 8015d42:	4013      	ands	r3, r2
 8015d44:	b2da      	uxtb	r2, r3
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8015d4a:	003b      	movs	r3, r7
 8015d4c:	881a      	ldrh	r2, [r3, #0]
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	1cba      	adds	r2, r7, #2
 8015d56:	7812      	ldrb	r2, [r2, #0]
 8015d58:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8015d5a:	1cbb      	adds	r3, r7, #2
 8015d5c:	781b      	ldrb	r3, [r3, #0]
 8015d5e:	2b02      	cmp	r3, #2
 8015d60:	d102      	bne.n	8015d68 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	2200      	movs	r2, #0
 8015d66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8015d68:	687a      	ldr	r2, [r7, #4]
 8015d6a:	23aa      	movs	r3, #170	@ 0xaa
 8015d6c:	009b      	lsls	r3, r3, #2
 8015d6e:	5cd3      	ldrb	r3, [r2, r3]
 8015d70:	2b01      	cmp	r3, #1
 8015d72:	d101      	bne.n	8015d78 <HAL_PCD_EP_Open+0xae>
 8015d74:	2302      	movs	r3, #2
 8015d76:	e013      	b.n	8015da0 <HAL_PCD_EP_Open+0xd6>
 8015d78:	687a      	ldr	r2, [r7, #4]
 8015d7a:	23aa      	movs	r3, #170	@ 0xaa
 8015d7c:	009b      	lsls	r3, r3, #2
 8015d7e:	2101      	movs	r1, #1
 8015d80:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	68fa      	ldr	r2, [r7, #12]
 8015d88:	0011      	movs	r1, r2
 8015d8a:	0018      	movs	r0, r3
 8015d8c:	f005 fc68 	bl	801b660 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8015d90:	687a      	ldr	r2, [r7, #4]
 8015d92:	23aa      	movs	r3, #170	@ 0xaa
 8015d94:	009b      	lsls	r3, r3, #2
 8015d96:	2100      	movs	r1, #0
 8015d98:	54d1      	strb	r1, [r2, r3]

  return ret;
 8015d9a:	230b      	movs	r3, #11
 8015d9c:	18fb      	adds	r3, r7, r3
 8015d9e:	781b      	ldrb	r3, [r3, #0]
}
 8015da0:	0018      	movs	r0, r3
 8015da2:	46bd      	mov	sp, r7
 8015da4:	b005      	add	sp, #20
 8015da6:	bd90      	pop	{r4, r7, pc}

08015da8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b084      	sub	sp, #16
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
 8015db0:	000a      	movs	r2, r1
 8015db2:	1cfb      	adds	r3, r7, #3
 8015db4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8015db6:	1cfb      	adds	r3, r7, #3
 8015db8:	781b      	ldrb	r3, [r3, #0]
 8015dba:	b25b      	sxtb	r3, r3
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	da0f      	bge.n	8015de0 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8015dc0:	1cfb      	adds	r3, r7, #3
 8015dc2:	781b      	ldrb	r3, [r3, #0]
 8015dc4:	2207      	movs	r2, #7
 8015dc6:	4013      	ands	r3, r2
 8015dc8:	1c5a      	adds	r2, r3, #1
 8015dca:	0013      	movs	r3, r2
 8015dcc:	009b      	lsls	r3, r3, #2
 8015dce:	189b      	adds	r3, r3, r2
 8015dd0:	00db      	lsls	r3, r3, #3
 8015dd2:	687a      	ldr	r2, [r7, #4]
 8015dd4:	18d3      	adds	r3, r2, r3
 8015dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	2201      	movs	r2, #1
 8015ddc:	705a      	strb	r2, [r3, #1]
 8015dde:	e00f      	b.n	8015e00 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8015de0:	1cfb      	adds	r3, r7, #3
 8015de2:	781b      	ldrb	r3, [r3, #0]
 8015de4:	2207      	movs	r2, #7
 8015de6:	401a      	ands	r2, r3
 8015de8:	0013      	movs	r3, r2
 8015dea:	009b      	lsls	r3, r3, #2
 8015dec:	189b      	adds	r3, r3, r2
 8015dee:	00db      	lsls	r3, r3, #3
 8015df0:	3369      	adds	r3, #105	@ 0x69
 8015df2:	33ff      	adds	r3, #255	@ 0xff
 8015df4:	687a      	ldr	r2, [r7, #4]
 8015df6:	18d3      	adds	r3, r2, r3
 8015df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8015e00:	1cfb      	adds	r3, r7, #3
 8015e02:	781b      	ldrb	r3, [r3, #0]
 8015e04:	2207      	movs	r2, #7
 8015e06:	4013      	ands	r3, r2
 8015e08:	b2da      	uxtb	r2, r3
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8015e0e:	687a      	ldr	r2, [r7, #4]
 8015e10:	23aa      	movs	r3, #170	@ 0xaa
 8015e12:	009b      	lsls	r3, r3, #2
 8015e14:	5cd3      	ldrb	r3, [r2, r3]
 8015e16:	2b01      	cmp	r3, #1
 8015e18:	d101      	bne.n	8015e1e <HAL_PCD_EP_Close+0x76>
 8015e1a:	2302      	movs	r3, #2
 8015e1c:	e011      	b.n	8015e42 <HAL_PCD_EP_Close+0x9a>
 8015e1e:	687a      	ldr	r2, [r7, #4]
 8015e20:	23aa      	movs	r3, #170	@ 0xaa
 8015e22:	009b      	lsls	r3, r3, #2
 8015e24:	2101      	movs	r1, #1
 8015e26:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	68fa      	ldr	r2, [r7, #12]
 8015e2e:	0011      	movs	r1, r2
 8015e30:	0018      	movs	r0, r3
 8015e32:	f005 ffb7 	bl	801bda4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8015e36:	687a      	ldr	r2, [r7, #4]
 8015e38:	23aa      	movs	r3, #170	@ 0xaa
 8015e3a:	009b      	lsls	r3, r3, #2
 8015e3c:	2100      	movs	r1, #0
 8015e3e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8015e40:	2300      	movs	r3, #0
}
 8015e42:	0018      	movs	r0, r3
 8015e44:	46bd      	mov	sp, r7
 8015e46:	b004      	add	sp, #16
 8015e48:	bd80      	pop	{r7, pc}

08015e4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8015e4a:	b580      	push	{r7, lr}
 8015e4c:	b086      	sub	sp, #24
 8015e4e:	af00      	add	r7, sp, #0
 8015e50:	60f8      	str	r0, [r7, #12]
 8015e52:	607a      	str	r2, [r7, #4]
 8015e54:	603b      	str	r3, [r7, #0]
 8015e56:	200b      	movs	r0, #11
 8015e58:	183b      	adds	r3, r7, r0
 8015e5a:	1c0a      	adds	r2, r1, #0
 8015e5c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8015e5e:	0001      	movs	r1, r0
 8015e60:	187b      	adds	r3, r7, r1
 8015e62:	781b      	ldrb	r3, [r3, #0]
 8015e64:	2207      	movs	r2, #7
 8015e66:	401a      	ands	r2, r3
 8015e68:	0013      	movs	r3, r2
 8015e6a:	009b      	lsls	r3, r3, #2
 8015e6c:	189b      	adds	r3, r3, r2
 8015e6e:	00db      	lsls	r3, r3, #3
 8015e70:	3369      	adds	r3, #105	@ 0x69
 8015e72:	33ff      	adds	r3, #255	@ 0xff
 8015e74:	68fa      	ldr	r2, [r7, #12]
 8015e76:	18d3      	adds	r3, r2, r3
 8015e78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8015e7a:	697b      	ldr	r3, [r7, #20]
 8015e7c:	687a      	ldr	r2, [r7, #4]
 8015e7e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8015e80:	697b      	ldr	r3, [r7, #20]
 8015e82:	683a      	ldr	r2, [r7, #0]
 8015e84:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8015e86:	697b      	ldr	r3, [r7, #20]
 8015e88:	2200      	movs	r2, #0
 8015e8a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	2200      	movs	r2, #0
 8015e90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8015e92:	187b      	adds	r3, r7, r1
 8015e94:	781b      	ldrb	r3, [r3, #0]
 8015e96:	2207      	movs	r2, #7
 8015e98:	4013      	ands	r3, r2
 8015e9a:	b2da      	uxtb	r2, r3
 8015e9c:	697b      	ldr	r3, [r7, #20]
 8015e9e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	697a      	ldr	r2, [r7, #20]
 8015ea6:	0011      	movs	r1, r2
 8015ea8:	0018      	movs	r0, r3
 8015eaa:	f006 f93b 	bl	801c124 <USB_EPStartXfer>

  return HAL_OK;
 8015eae:	2300      	movs	r3, #0
}
 8015eb0:	0018      	movs	r0, r3
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	b006      	add	sp, #24
 8015eb6:	bd80      	pop	{r7, pc}

08015eb8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b082      	sub	sp, #8
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
 8015ec0:	000a      	movs	r2, r1
 8015ec2:	1cfb      	adds	r3, r7, #3
 8015ec4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8015ec6:	1cfb      	adds	r3, r7, #3
 8015ec8:	781b      	ldrb	r3, [r3, #0]
 8015eca:	2207      	movs	r2, #7
 8015ecc:	401a      	ands	r2, r3
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	23c2      	movs	r3, #194	@ 0xc2
 8015ed2:	0059      	lsls	r1, r3, #1
 8015ed4:	0013      	movs	r3, r2
 8015ed6:	009b      	lsls	r3, r3, #2
 8015ed8:	189b      	adds	r3, r3, r2
 8015eda:	00db      	lsls	r3, r3, #3
 8015edc:	18c3      	adds	r3, r0, r3
 8015ede:	185b      	adds	r3, r3, r1
 8015ee0:	681b      	ldr	r3, [r3, #0]
}
 8015ee2:	0018      	movs	r0, r3
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	b002      	add	sp, #8
 8015ee8:	bd80      	pop	{r7, pc}

08015eea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8015eea:	b580      	push	{r7, lr}
 8015eec:	b086      	sub	sp, #24
 8015eee:	af00      	add	r7, sp, #0
 8015ef0:	60f8      	str	r0, [r7, #12]
 8015ef2:	607a      	str	r2, [r7, #4]
 8015ef4:	603b      	str	r3, [r7, #0]
 8015ef6:	200b      	movs	r0, #11
 8015ef8:	183b      	adds	r3, r7, r0
 8015efa:	1c0a      	adds	r2, r1, #0
 8015efc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8015efe:	183b      	adds	r3, r7, r0
 8015f00:	781b      	ldrb	r3, [r3, #0]
 8015f02:	2207      	movs	r2, #7
 8015f04:	4013      	ands	r3, r2
 8015f06:	1c5a      	adds	r2, r3, #1
 8015f08:	0013      	movs	r3, r2
 8015f0a:	009b      	lsls	r3, r3, #2
 8015f0c:	189b      	adds	r3, r3, r2
 8015f0e:	00db      	lsls	r3, r3, #3
 8015f10:	68fa      	ldr	r2, [r7, #12]
 8015f12:	18d3      	adds	r3, r2, r3
 8015f14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8015f16:	697b      	ldr	r3, [r7, #20]
 8015f18:	687a      	ldr	r2, [r7, #4]
 8015f1a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8015f1c:	697b      	ldr	r3, [r7, #20]
 8015f1e:	683a      	ldr	r2, [r7, #0]
 8015f20:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8015f22:	697b      	ldr	r3, [r7, #20]
 8015f24:	2224      	movs	r2, #36	@ 0x24
 8015f26:	2101      	movs	r1, #1
 8015f28:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8015f2a:	697b      	ldr	r3, [r7, #20]
 8015f2c:	683a      	ldr	r2, [r7, #0]
 8015f2e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8015f30:	697b      	ldr	r3, [r7, #20]
 8015f32:	2200      	movs	r2, #0
 8015f34:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8015f36:	697b      	ldr	r3, [r7, #20]
 8015f38:	2201      	movs	r2, #1
 8015f3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8015f3c:	183b      	adds	r3, r7, r0
 8015f3e:	781b      	ldrb	r3, [r3, #0]
 8015f40:	2207      	movs	r2, #7
 8015f42:	4013      	ands	r3, r2
 8015f44:	b2da      	uxtb	r2, r3
 8015f46:	697b      	ldr	r3, [r7, #20]
 8015f48:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	697a      	ldr	r2, [r7, #20]
 8015f50:	0011      	movs	r1, r2
 8015f52:	0018      	movs	r0, r3
 8015f54:	f006 f8e6 	bl	801c124 <USB_EPStartXfer>

  return HAL_OK;
 8015f58:	2300      	movs	r3, #0
}
 8015f5a:	0018      	movs	r0, r3
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	b006      	add	sp, #24
 8015f60:	bd80      	pop	{r7, pc}

08015f62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8015f62:	b580      	push	{r7, lr}
 8015f64:	b084      	sub	sp, #16
 8015f66:	af00      	add	r7, sp, #0
 8015f68:	6078      	str	r0, [r7, #4]
 8015f6a:	000a      	movs	r2, r1
 8015f6c:	1cfb      	adds	r3, r7, #3
 8015f6e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8015f70:	1cfb      	adds	r3, r7, #3
 8015f72:	781b      	ldrb	r3, [r3, #0]
 8015f74:	2207      	movs	r2, #7
 8015f76:	401a      	ands	r2, r3
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	685b      	ldr	r3, [r3, #4]
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	d901      	bls.n	8015f84 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8015f80:	2301      	movs	r3, #1
 8015f82:	e046      	b.n	8016012 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8015f84:	1cfb      	adds	r3, r7, #3
 8015f86:	781b      	ldrb	r3, [r3, #0]
 8015f88:	b25b      	sxtb	r3, r3
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	da0f      	bge.n	8015fae <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8015f8e:	1cfb      	adds	r3, r7, #3
 8015f90:	781b      	ldrb	r3, [r3, #0]
 8015f92:	2207      	movs	r2, #7
 8015f94:	4013      	ands	r3, r2
 8015f96:	1c5a      	adds	r2, r3, #1
 8015f98:	0013      	movs	r3, r2
 8015f9a:	009b      	lsls	r3, r3, #2
 8015f9c:	189b      	adds	r3, r3, r2
 8015f9e:	00db      	lsls	r3, r3, #3
 8015fa0:	687a      	ldr	r2, [r7, #4]
 8015fa2:	18d3      	adds	r3, r2, r3
 8015fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	2201      	movs	r2, #1
 8015faa:	705a      	strb	r2, [r3, #1]
 8015fac:	e00d      	b.n	8015fca <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8015fae:	1cfb      	adds	r3, r7, #3
 8015fb0:	781a      	ldrb	r2, [r3, #0]
 8015fb2:	0013      	movs	r3, r2
 8015fb4:	009b      	lsls	r3, r3, #2
 8015fb6:	189b      	adds	r3, r3, r2
 8015fb8:	00db      	lsls	r3, r3, #3
 8015fba:	3369      	adds	r3, #105	@ 0x69
 8015fbc:	33ff      	adds	r3, #255	@ 0xff
 8015fbe:	687a      	ldr	r2, [r7, #4]
 8015fc0:	18d3      	adds	r3, r2, r3
 8015fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	2201      	movs	r2, #1
 8015fce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8015fd0:	1cfb      	adds	r3, r7, #3
 8015fd2:	781b      	ldrb	r3, [r3, #0]
 8015fd4:	2207      	movs	r2, #7
 8015fd6:	4013      	ands	r3, r2
 8015fd8:	b2da      	uxtb	r2, r3
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8015fde:	687a      	ldr	r2, [r7, #4]
 8015fe0:	23aa      	movs	r3, #170	@ 0xaa
 8015fe2:	009b      	lsls	r3, r3, #2
 8015fe4:	5cd3      	ldrb	r3, [r2, r3]
 8015fe6:	2b01      	cmp	r3, #1
 8015fe8:	d101      	bne.n	8015fee <HAL_PCD_EP_SetStall+0x8c>
 8015fea:	2302      	movs	r3, #2
 8015fec:	e011      	b.n	8016012 <HAL_PCD_EP_SetStall+0xb0>
 8015fee:	687a      	ldr	r2, [r7, #4]
 8015ff0:	23aa      	movs	r3, #170	@ 0xaa
 8015ff2:	009b      	lsls	r3, r3, #2
 8015ff4:	2101      	movs	r1, #1
 8015ff6:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	68fa      	ldr	r2, [r7, #12]
 8015ffe:	0011      	movs	r1, r2
 8016000:	0018      	movs	r0, r3
 8016002:	f007 f9c7 	bl	801d394 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8016006:	687a      	ldr	r2, [r7, #4]
 8016008:	23aa      	movs	r3, #170	@ 0xaa
 801600a:	009b      	lsls	r3, r3, #2
 801600c:	2100      	movs	r1, #0
 801600e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8016010:	2300      	movs	r3, #0
}
 8016012:	0018      	movs	r0, r3
 8016014:	46bd      	mov	sp, r7
 8016016:	b004      	add	sp, #16
 8016018:	bd80      	pop	{r7, pc}

0801601a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801601a:	b580      	push	{r7, lr}
 801601c:	b084      	sub	sp, #16
 801601e:	af00      	add	r7, sp, #0
 8016020:	6078      	str	r0, [r7, #4]
 8016022:	000a      	movs	r2, r1
 8016024:	1cfb      	adds	r3, r7, #3
 8016026:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8016028:	1cfb      	adds	r3, r7, #3
 801602a:	781b      	ldrb	r3, [r3, #0]
 801602c:	220f      	movs	r2, #15
 801602e:	401a      	ands	r2, r3
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	685b      	ldr	r3, [r3, #4]
 8016034:	429a      	cmp	r2, r3
 8016036:	d901      	bls.n	801603c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8016038:	2301      	movs	r3, #1
 801603a:	e048      	b.n	80160ce <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801603c:	1cfb      	adds	r3, r7, #3
 801603e:	781b      	ldrb	r3, [r3, #0]
 8016040:	b25b      	sxtb	r3, r3
 8016042:	2b00      	cmp	r3, #0
 8016044:	da0f      	bge.n	8016066 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016046:	1cfb      	adds	r3, r7, #3
 8016048:	781b      	ldrb	r3, [r3, #0]
 801604a:	2207      	movs	r2, #7
 801604c:	4013      	ands	r3, r2
 801604e:	1c5a      	adds	r2, r3, #1
 8016050:	0013      	movs	r3, r2
 8016052:	009b      	lsls	r3, r3, #2
 8016054:	189b      	adds	r3, r3, r2
 8016056:	00db      	lsls	r3, r3, #3
 8016058:	687a      	ldr	r2, [r7, #4]
 801605a:	18d3      	adds	r3, r2, r3
 801605c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	2201      	movs	r2, #1
 8016062:	705a      	strb	r2, [r3, #1]
 8016064:	e00f      	b.n	8016086 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016066:	1cfb      	adds	r3, r7, #3
 8016068:	781b      	ldrb	r3, [r3, #0]
 801606a:	2207      	movs	r2, #7
 801606c:	401a      	ands	r2, r3
 801606e:	0013      	movs	r3, r2
 8016070:	009b      	lsls	r3, r3, #2
 8016072:	189b      	adds	r3, r3, r2
 8016074:	00db      	lsls	r3, r3, #3
 8016076:	3369      	adds	r3, #105	@ 0x69
 8016078:	33ff      	adds	r3, #255	@ 0xff
 801607a:	687a      	ldr	r2, [r7, #4]
 801607c:	18d3      	adds	r3, r2, r3
 801607e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	2200      	movs	r2, #0
 8016084:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	2200      	movs	r2, #0
 801608a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801608c:	1cfb      	adds	r3, r7, #3
 801608e:	781b      	ldrb	r3, [r3, #0]
 8016090:	2207      	movs	r2, #7
 8016092:	4013      	ands	r3, r2
 8016094:	b2da      	uxtb	r2, r3
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801609a:	687a      	ldr	r2, [r7, #4]
 801609c:	23aa      	movs	r3, #170	@ 0xaa
 801609e:	009b      	lsls	r3, r3, #2
 80160a0:	5cd3      	ldrb	r3, [r2, r3]
 80160a2:	2b01      	cmp	r3, #1
 80160a4:	d101      	bne.n	80160aa <HAL_PCD_EP_ClrStall+0x90>
 80160a6:	2302      	movs	r3, #2
 80160a8:	e011      	b.n	80160ce <HAL_PCD_EP_ClrStall+0xb4>
 80160aa:	687a      	ldr	r2, [r7, #4]
 80160ac:	23aa      	movs	r3, #170	@ 0xaa
 80160ae:	009b      	lsls	r3, r3, #2
 80160b0:	2101      	movs	r1, #1
 80160b2:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	68fa      	ldr	r2, [r7, #12]
 80160ba:	0011      	movs	r1, r2
 80160bc:	0018      	movs	r0, r3
 80160be:	f007 f9b9 	bl	801d434 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80160c2:	687a      	ldr	r2, [r7, #4]
 80160c4:	23aa      	movs	r3, #170	@ 0xaa
 80160c6:	009b      	lsls	r3, r3, #2
 80160c8:	2100      	movs	r1, #0
 80160ca:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80160cc:	2300      	movs	r3, #0
}
 80160ce:	0018      	movs	r0, r3
 80160d0:	46bd      	mov	sp, r7
 80160d2:	b004      	add	sp, #16
 80160d4:	bd80      	pop	{r7, pc}
	...

080160d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80160d8:	b5b0      	push	{r4, r5, r7, lr}
 80160da:	b096      	sub	sp, #88	@ 0x58
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80160e0:	f000 fbec 	bl	80168bc <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681a      	ldr	r2, [r3, #0]
 80160e8:	204e      	movs	r0, #78	@ 0x4e
 80160ea:	183b      	adds	r3, r7, r0
 80160ec:	2144      	movs	r1, #68	@ 0x44
 80160ee:	5a52      	ldrh	r2, [r2, r1]
 80160f0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80160f2:	183b      	adds	r3, r7, r0
 80160f4:	881b      	ldrh	r3, [r3, #0]
 80160f6:	b2da      	uxtb	r2, r3
 80160f8:	244d      	movs	r4, #77	@ 0x4d
 80160fa:	193b      	adds	r3, r7, r4
 80160fc:	210f      	movs	r1, #15
 80160fe:	400a      	ands	r2, r1
 8016100:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8016102:	193b      	adds	r3, r7, r4
 8016104:	781b      	ldrb	r3, [r3, #0]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d000      	beq.n	801610c <PCD_EP_ISR_Handler+0x34>
 801610a:	e18f      	b.n	801642c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 801610c:	183b      	adds	r3, r7, r0
 801610e:	881b      	ldrh	r3, [r3, #0]
 8016110:	2210      	movs	r2, #16
 8016112:	4013      	ands	r3, r2
 8016114:	d155      	bne.n	80161c2 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	881b      	ldrh	r3, [r3, #0]
 801611c:	b29a      	uxth	r2, r3
 801611e:	200e      	movs	r0, #14
 8016120:	183b      	adds	r3, r7, r0
 8016122:	49bb      	ldr	r1, [pc, #748]	@ (8016410 <PCD_EP_ISR_Handler+0x338>)
 8016124:	400a      	ands	r2, r1
 8016126:	801a      	strh	r2, [r3, #0]
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	183a      	adds	r2, r7, r0
 801612e:	8812      	ldrh	r2, [r2, #0]
 8016130:	49b8      	ldr	r1, [pc, #736]	@ (8016414 <PCD_EP_ISR_Handler+0x33c>)
 8016132:	430a      	orrs	r2, r1
 8016134:	b292      	uxth	r2, r2
 8016136:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	3328      	adds	r3, #40	@ 0x28
 801613c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	2250      	movs	r2, #80	@ 0x50
 8016144:	5a9b      	ldrh	r3, [r3, r2]
 8016146:	b29b      	uxth	r3, r3
 8016148:	001a      	movs	r2, r3
 801614a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	00db      	lsls	r3, r3, #3
 8016150:	18d2      	adds	r2, r2, r3
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	18d3      	adds	r3, r2, r3
 8016158:	4aaf      	ldr	r2, [pc, #700]	@ (8016418 <PCD_EP_ISR_Handler+0x340>)
 801615a:	4694      	mov	ip, r2
 801615c:	4463      	add	r3, ip
 801615e:	881b      	ldrh	r3, [r3, #0]
 8016160:	059b      	lsls	r3, r3, #22
 8016162:	0d9a      	lsrs	r2, r3, #22
 8016164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016166:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8016168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801616a:	695a      	ldr	r2, [r3, #20]
 801616c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801616e:	69db      	ldr	r3, [r3, #28]
 8016170:	18d2      	adds	r2, r2, r3
 8016172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016174:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	2100      	movs	r1, #0
 801617a:	0018      	movs	r0, r3
 801617c:	f009 fac8 	bl	801f710 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	2224      	movs	r2, #36	@ 0x24
 8016184:	5c9b      	ldrb	r3, [r3, r2]
 8016186:	b2db      	uxtb	r3, r3
 8016188:	2b00      	cmp	r3, #0
 801618a:	d101      	bne.n	8016190 <PCD_EP_ISR_Handler+0xb8>
 801618c:	f000 fb96 	bl	80168bc <PCD_EP_ISR_Handler+0x7e4>
 8016190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016192:	699b      	ldr	r3, [r3, #24]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d001      	beq.n	801619c <PCD_EP_ISR_Handler+0xc4>
 8016198:	f000 fb90 	bl	80168bc <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	2224      	movs	r2, #36	@ 0x24
 80161a0:	5c9b      	ldrb	r3, [r3, r2]
 80161a2:	b2db      	uxtb	r3, r3
 80161a4:	2280      	movs	r2, #128	@ 0x80
 80161a6:	4252      	negs	r2, r2
 80161a8:	4313      	orrs	r3, r2
 80161aa:	b2da      	uxtb	r2, r3
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	0011      	movs	r1, r2
 80161b2:	224c      	movs	r2, #76	@ 0x4c
 80161b4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	2224      	movs	r2, #36	@ 0x24
 80161ba:	2100      	movs	r1, #0
 80161bc:	5499      	strb	r1, [r3, r2]
 80161be:	f000 fb7d 	bl	80168bc <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	3369      	adds	r3, #105	@ 0x69
 80161c6:	33ff      	adds	r3, #255	@ 0xff
 80161c8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	681a      	ldr	r2, [r3, #0]
 80161ce:	214a      	movs	r1, #74	@ 0x4a
 80161d0:	187b      	adds	r3, r7, r1
 80161d2:	8812      	ldrh	r2, [r2, #0]
 80161d4:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80161d6:	187b      	adds	r3, r7, r1
 80161d8:	881a      	ldrh	r2, [r3, #0]
 80161da:	2380      	movs	r3, #128	@ 0x80
 80161dc:	011b      	lsls	r3, r3, #4
 80161de:	4013      	ands	r3, r2
 80161e0:	d037      	beq.n	8016252 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	2250      	movs	r2, #80	@ 0x50
 80161e8:	5a9b      	ldrh	r3, [r3, r2]
 80161ea:	b29b      	uxth	r3, r3
 80161ec:	001a      	movs	r2, r3
 80161ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80161f0:	781b      	ldrb	r3, [r3, #0]
 80161f2:	00db      	lsls	r3, r3, #3
 80161f4:	18d2      	adds	r2, r2, r3
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	18d3      	adds	r3, r2, r3
 80161fc:	4a87      	ldr	r2, [pc, #540]	@ (801641c <PCD_EP_ISR_Handler+0x344>)
 80161fe:	4694      	mov	ip, r2
 8016200:	4463      	add	r3, ip
 8016202:	881b      	ldrh	r3, [r3, #0]
 8016204:	059b      	lsls	r3, r3, #22
 8016206:	0d9a      	lsrs	r2, r3, #22
 8016208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801620a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	6818      	ldr	r0, [r3, #0]
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	22ac      	movs	r2, #172	@ 0xac
 8016214:	0092      	lsls	r2, r2, #2
 8016216:	1899      	adds	r1, r3, r2
 8016218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801621a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 801621c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801621e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8016220:	b29b      	uxth	r3, r3
 8016222:	f007 fa3a 	bl	801d69a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	881b      	ldrh	r3, [r3, #0]
 801622c:	b29a      	uxth	r2, r3
 801622e:	2010      	movs	r0, #16
 8016230:	183b      	adds	r3, r7, r0
 8016232:	497b      	ldr	r1, [pc, #492]	@ (8016420 <PCD_EP_ISR_Handler+0x348>)
 8016234:	400a      	ands	r2, r1
 8016236:	801a      	strh	r2, [r3, #0]
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	183a      	adds	r2, r7, r0
 801623e:	8812      	ldrh	r2, [r2, #0]
 8016240:	2180      	movs	r1, #128	@ 0x80
 8016242:	430a      	orrs	r2, r1
 8016244:	b292      	uxth	r2, r2
 8016246:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	0018      	movs	r0, r3
 801624c:	f009 fa2a 	bl	801f6a4 <HAL_PCD_SetupStageCallback>
 8016250:	e334      	b.n	80168bc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8016252:	234a      	movs	r3, #74	@ 0x4a
 8016254:	18fb      	adds	r3, r7, r3
 8016256:	2200      	movs	r2, #0
 8016258:	5e9b      	ldrsh	r3, [r3, r2]
 801625a:	2b00      	cmp	r3, #0
 801625c:	db00      	blt.n	8016260 <PCD_EP_ISR_Handler+0x188>
 801625e:	e32d      	b.n	80168bc <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	881b      	ldrh	r3, [r3, #0]
 8016266:	b29a      	uxth	r2, r3
 8016268:	201e      	movs	r0, #30
 801626a:	183b      	adds	r3, r7, r0
 801626c:	496c      	ldr	r1, [pc, #432]	@ (8016420 <PCD_EP_ISR_Handler+0x348>)
 801626e:	400a      	ands	r2, r1
 8016270:	801a      	strh	r2, [r3, #0]
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	183a      	adds	r2, r7, r0
 8016278:	8812      	ldrh	r2, [r2, #0]
 801627a:	2180      	movs	r1, #128	@ 0x80
 801627c:	430a      	orrs	r2, r1
 801627e:	b292      	uxth	r2, r2
 8016280:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	2250      	movs	r2, #80	@ 0x50
 8016288:	5a9b      	ldrh	r3, [r3, r2]
 801628a:	b29b      	uxth	r3, r3
 801628c:	001a      	movs	r2, r3
 801628e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016290:	781b      	ldrb	r3, [r3, #0]
 8016292:	00db      	lsls	r3, r3, #3
 8016294:	18d2      	adds	r2, r2, r3
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	18d3      	adds	r3, r2, r3
 801629c:	4a5f      	ldr	r2, [pc, #380]	@ (801641c <PCD_EP_ISR_Handler+0x344>)
 801629e:	4694      	mov	ip, r2
 80162a0:	4463      	add	r3, ip
 80162a2:	881b      	ldrh	r3, [r3, #0]
 80162a4:	059b      	lsls	r3, r3, #22
 80162a6:	0d9a      	lsrs	r2, r3, #22
 80162a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80162aa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80162ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80162ae:	69db      	ldr	r3, [r3, #28]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d01a      	beq.n	80162ea <PCD_EP_ISR_Handler+0x212>
 80162b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80162b6:	695b      	ldr	r3, [r3, #20]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d016      	beq.n	80162ea <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	6818      	ldr	r0, [r3, #0]
 80162c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80162c2:	6959      	ldr	r1, [r3, #20]
 80162c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80162c6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80162c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80162ca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80162cc:	b29b      	uxth	r3, r3
 80162ce:	f007 f9e4 	bl	801d69a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80162d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80162d4:	695a      	ldr	r2, [r3, #20]
 80162d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80162d8:	69db      	ldr	r3, [r3, #28]
 80162da:	18d2      	adds	r2, r2, r3
 80162dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80162de:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	2100      	movs	r1, #0
 80162e4:	0018      	movs	r0, r3
 80162e6:	f009 f9f2 	bl	801f6ce <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	681a      	ldr	r2, [r3, #0]
 80162ee:	214a      	movs	r1, #74	@ 0x4a
 80162f0:	187b      	adds	r3, r7, r1
 80162f2:	8812      	ldrh	r2, [r2, #0]
 80162f4:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80162f6:	187b      	adds	r3, r7, r1
 80162f8:	881a      	ldrh	r2, [r3, #0]
 80162fa:	2380      	movs	r3, #128	@ 0x80
 80162fc:	011b      	lsls	r3, r3, #4
 80162fe:	4013      	ands	r3, r2
 8016300:	d000      	beq.n	8016304 <PCD_EP_ISR_Handler+0x22c>
 8016302:	e2db      	b.n	80168bc <PCD_EP_ISR_Handler+0x7e4>
 8016304:	187b      	adds	r3, r7, r1
 8016306:	881a      	ldrh	r2, [r3, #0]
 8016308:	23c0      	movs	r3, #192	@ 0xc0
 801630a:	019b      	lsls	r3, r3, #6
 801630c:	401a      	ands	r2, r3
 801630e:	23c0      	movs	r3, #192	@ 0xc0
 8016310:	019b      	lsls	r3, r3, #6
 8016312:	429a      	cmp	r2, r3
 8016314:	d100      	bne.n	8016318 <PCD_EP_ISR_Handler+0x240>
 8016316:	e2d1      	b.n	80168bc <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	61bb      	str	r3, [r7, #24]
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	2250      	movs	r2, #80	@ 0x50
 8016324:	5a9b      	ldrh	r3, [r3, r2]
 8016326:	b29b      	uxth	r3, r3
 8016328:	001a      	movs	r2, r3
 801632a:	69bb      	ldr	r3, [r7, #24]
 801632c:	189b      	adds	r3, r3, r2
 801632e:	61bb      	str	r3, [r7, #24]
 8016330:	69bb      	ldr	r3, [r7, #24]
 8016332:	4a3a      	ldr	r2, [pc, #232]	@ (801641c <PCD_EP_ISR_Handler+0x344>)
 8016334:	4694      	mov	ip, r2
 8016336:	4463      	add	r3, ip
 8016338:	617b      	str	r3, [r7, #20]
 801633a:	697b      	ldr	r3, [r7, #20]
 801633c:	881b      	ldrh	r3, [r3, #0]
 801633e:	b29b      	uxth	r3, r3
 8016340:	059b      	lsls	r3, r3, #22
 8016342:	0d9b      	lsrs	r3, r3, #22
 8016344:	b29a      	uxth	r2, r3
 8016346:	697b      	ldr	r3, [r7, #20]
 8016348:	801a      	strh	r2, [r3, #0]
 801634a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801634c:	691b      	ldr	r3, [r3, #16]
 801634e:	2b3e      	cmp	r3, #62	@ 0x3e
 8016350:	d91a      	bls.n	8016388 <PCD_EP_ISR_Handler+0x2b0>
 8016352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016354:	691b      	ldr	r3, [r3, #16]
 8016356:	095b      	lsrs	r3, r3, #5
 8016358:	647b      	str	r3, [r7, #68]	@ 0x44
 801635a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801635c:	691b      	ldr	r3, [r3, #16]
 801635e:	221f      	movs	r2, #31
 8016360:	4013      	ands	r3, r2
 8016362:	d102      	bne.n	801636a <PCD_EP_ISR_Handler+0x292>
 8016364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016366:	3b01      	subs	r3, #1
 8016368:	647b      	str	r3, [r7, #68]	@ 0x44
 801636a:	697b      	ldr	r3, [r7, #20]
 801636c:	881b      	ldrh	r3, [r3, #0]
 801636e:	b29a      	uxth	r2, r3
 8016370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016372:	b29b      	uxth	r3, r3
 8016374:	029b      	lsls	r3, r3, #10
 8016376:	b29b      	uxth	r3, r3
 8016378:	4313      	orrs	r3, r2
 801637a:	b29b      	uxth	r3, r3
 801637c:	4a25      	ldr	r2, [pc, #148]	@ (8016414 <PCD_EP_ISR_Handler+0x33c>)
 801637e:	4313      	orrs	r3, r2
 8016380:	b29a      	uxth	r2, r3
 8016382:	697b      	ldr	r3, [r7, #20]
 8016384:	801a      	strh	r2, [r3, #0]
 8016386:	e023      	b.n	80163d0 <PCD_EP_ISR_Handler+0x2f8>
 8016388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801638a:	691b      	ldr	r3, [r3, #16]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d108      	bne.n	80163a2 <PCD_EP_ISR_Handler+0x2ca>
 8016390:	697b      	ldr	r3, [r7, #20]
 8016392:	881b      	ldrh	r3, [r3, #0]
 8016394:	b29b      	uxth	r3, r3
 8016396:	4a1f      	ldr	r2, [pc, #124]	@ (8016414 <PCD_EP_ISR_Handler+0x33c>)
 8016398:	4313      	orrs	r3, r2
 801639a:	b29a      	uxth	r2, r3
 801639c:	697b      	ldr	r3, [r7, #20]
 801639e:	801a      	strh	r2, [r3, #0]
 80163a0:	e016      	b.n	80163d0 <PCD_EP_ISR_Handler+0x2f8>
 80163a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80163a4:	691b      	ldr	r3, [r3, #16]
 80163a6:	085b      	lsrs	r3, r3, #1
 80163a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80163aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80163ac:	691b      	ldr	r3, [r3, #16]
 80163ae:	2201      	movs	r2, #1
 80163b0:	4013      	ands	r3, r2
 80163b2:	d002      	beq.n	80163ba <PCD_EP_ISR_Handler+0x2e2>
 80163b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80163b6:	3301      	adds	r3, #1
 80163b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80163ba:	697b      	ldr	r3, [r7, #20]
 80163bc:	881b      	ldrh	r3, [r3, #0]
 80163be:	b29a      	uxth	r2, r3
 80163c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80163c2:	b29b      	uxth	r3, r3
 80163c4:	029b      	lsls	r3, r3, #10
 80163c6:	b29b      	uxth	r3, r3
 80163c8:	4313      	orrs	r3, r2
 80163ca:	b29a      	uxth	r2, r3
 80163cc:	697b      	ldr	r3, [r7, #20]
 80163ce:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	881b      	ldrh	r3, [r3, #0]
 80163d6:	b29a      	uxth	r2, r3
 80163d8:	2012      	movs	r0, #18
 80163da:	183b      	adds	r3, r7, r0
 80163dc:	4911      	ldr	r1, [pc, #68]	@ (8016424 <PCD_EP_ISR_Handler+0x34c>)
 80163de:	400a      	ands	r2, r1
 80163e0:	801a      	strh	r2, [r3, #0]
 80163e2:	183b      	adds	r3, r7, r0
 80163e4:	183a      	adds	r2, r7, r0
 80163e6:	8812      	ldrh	r2, [r2, #0]
 80163e8:	2180      	movs	r1, #128	@ 0x80
 80163ea:	0149      	lsls	r1, r1, #5
 80163ec:	404a      	eors	r2, r1
 80163ee:	801a      	strh	r2, [r3, #0]
 80163f0:	183b      	adds	r3, r7, r0
 80163f2:	183a      	adds	r2, r7, r0
 80163f4:	8812      	ldrh	r2, [r2, #0]
 80163f6:	2180      	movs	r1, #128	@ 0x80
 80163f8:	0189      	lsls	r1, r1, #6
 80163fa:	404a      	eors	r2, r1
 80163fc:	801a      	strh	r2, [r3, #0]
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	183a      	adds	r2, r7, r0
 8016404:	8812      	ldrh	r2, [r2, #0]
 8016406:	4908      	ldr	r1, [pc, #32]	@ (8016428 <PCD_EP_ISR_Handler+0x350>)
 8016408:	430a      	orrs	r2, r1
 801640a:	b292      	uxth	r2, r2
 801640c:	801a      	strh	r2, [r3, #0]
 801640e:	e255      	b.n	80168bc <PCD_EP_ISR_Handler+0x7e4>
 8016410:	ffff8f0f 	.word	0xffff8f0f
 8016414:	ffff8000 	.word	0xffff8000
 8016418:	00000402 	.word	0x00000402
 801641c:	00000406 	.word	0x00000406
 8016420:	00000f8f 	.word	0x00000f8f
 8016424:	ffffbf8f 	.word	0xffffbf8f
 8016428:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	001a      	movs	r2, r3
 8016432:	204d      	movs	r0, #77	@ 0x4d
 8016434:	183b      	adds	r3, r7, r0
 8016436:	781b      	ldrb	r3, [r3, #0]
 8016438:	009b      	lsls	r3, r3, #2
 801643a:	18d2      	adds	r2, r2, r3
 801643c:	214a      	movs	r1, #74	@ 0x4a
 801643e:	187b      	adds	r3, r7, r1
 8016440:	8812      	ldrh	r2, [r2, #0]
 8016442:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8016444:	187b      	adds	r3, r7, r1
 8016446:	2200      	movs	r2, #0
 8016448:	5e9b      	ldrsh	r3, [r3, r2]
 801644a:	2b00      	cmp	r3, #0
 801644c:	db00      	blt.n	8016450 <PCD_EP_ISR_Handler+0x378>
 801644e:	e0fa      	b.n	8016646 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	001a      	movs	r2, r3
 8016456:	183b      	adds	r3, r7, r0
 8016458:	781b      	ldrb	r3, [r3, #0]
 801645a:	009b      	lsls	r3, r3, #2
 801645c:	18d3      	adds	r3, r2, r3
 801645e:	881b      	ldrh	r3, [r3, #0]
 8016460:	b29a      	uxth	r2, r3
 8016462:	2448      	movs	r4, #72	@ 0x48
 8016464:	193b      	adds	r3, r7, r4
 8016466:	49d1      	ldr	r1, [pc, #836]	@ (80167ac <PCD_EP_ISR_Handler+0x6d4>)
 8016468:	400a      	ands	r2, r1
 801646a:	801a      	strh	r2, [r3, #0]
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	001a      	movs	r2, r3
 8016472:	183b      	adds	r3, r7, r0
 8016474:	781b      	ldrb	r3, [r3, #0]
 8016476:	009b      	lsls	r3, r3, #2
 8016478:	18d3      	adds	r3, r2, r3
 801647a:	193a      	adds	r2, r7, r4
 801647c:	8812      	ldrh	r2, [r2, #0]
 801647e:	2180      	movs	r1, #128	@ 0x80
 8016480:	430a      	orrs	r2, r1
 8016482:	b292      	uxth	r2, r2
 8016484:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8016486:	183b      	adds	r3, r7, r0
 8016488:	781a      	ldrb	r2, [r3, #0]
 801648a:	0013      	movs	r3, r2
 801648c:	009b      	lsls	r3, r3, #2
 801648e:	189b      	adds	r3, r3, r2
 8016490:	00db      	lsls	r3, r3, #3
 8016492:	3369      	adds	r3, #105	@ 0x69
 8016494:	33ff      	adds	r3, #255	@ 0xff
 8016496:	687a      	ldr	r2, [r7, #4]
 8016498:	18d3      	adds	r3, r2, r3
 801649a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801649c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801649e:	7b1b      	ldrb	r3, [r3, #12]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d125      	bne.n	80164f0 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	2250      	movs	r2, #80	@ 0x50
 80164aa:	5a9b      	ldrh	r3, [r3, r2]
 80164ac:	b29b      	uxth	r3, r3
 80164ae:	001a      	movs	r2, r3
 80164b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164b2:	781b      	ldrb	r3, [r3, #0]
 80164b4:	00db      	lsls	r3, r3, #3
 80164b6:	18d2      	adds	r2, r2, r3
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	18d3      	adds	r3, r2, r3
 80164be:	4abc      	ldr	r2, [pc, #752]	@ (80167b0 <PCD_EP_ISR_Handler+0x6d8>)
 80164c0:	4694      	mov	ip, r2
 80164c2:	4463      	add	r3, ip
 80164c4:	881a      	ldrh	r2, [r3, #0]
 80164c6:	2450      	movs	r4, #80	@ 0x50
 80164c8:	193b      	adds	r3, r7, r4
 80164ca:	0592      	lsls	r2, r2, #22
 80164cc:	0d92      	lsrs	r2, r2, #22
 80164ce:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80164d0:	193b      	adds	r3, r7, r4
 80164d2:	881b      	ldrh	r3, [r3, #0]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d100      	bne.n	80164da <PCD_EP_ISR_Handler+0x402>
 80164d8:	e08d      	b.n	80165f6 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	6818      	ldr	r0, [r3, #0]
 80164de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164e0:	6959      	ldr	r1, [r3, #20]
 80164e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164e4:	88da      	ldrh	r2, [r3, #6]
 80164e6:	193b      	adds	r3, r7, r4
 80164e8:	881b      	ldrh	r3, [r3, #0]
 80164ea:	f007 f8d6 	bl	801d69a <USB_ReadPMA>
 80164ee:	e082      	b.n	80165f6 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80164f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164f2:	78db      	ldrb	r3, [r3, #3]
 80164f4:	2b02      	cmp	r3, #2
 80164f6:	d10c      	bne.n	8016512 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80164f8:	2350      	movs	r3, #80	@ 0x50
 80164fa:	18fc      	adds	r4, r7, r3
 80164fc:	234a      	movs	r3, #74	@ 0x4a
 80164fe:	18fb      	adds	r3, r7, r3
 8016500:	881a      	ldrh	r2, [r3, #0]
 8016502:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	0018      	movs	r0, r3
 8016508:	f000 f9ec 	bl	80168e4 <HAL_PCD_EP_DB_Receive>
 801650c:	0003      	movs	r3, r0
 801650e:	8023      	strh	r3, [r4, #0]
 8016510:	e071      	b.n	80165f6 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	001a      	movs	r2, r3
 8016518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801651a:	781b      	ldrb	r3, [r3, #0]
 801651c:	009b      	lsls	r3, r3, #2
 801651e:	18d3      	adds	r3, r2, r3
 8016520:	881b      	ldrh	r3, [r3, #0]
 8016522:	b29a      	uxth	r2, r3
 8016524:	2052      	movs	r0, #82	@ 0x52
 8016526:	183b      	adds	r3, r7, r0
 8016528:	49a2      	ldr	r1, [pc, #648]	@ (80167b4 <PCD_EP_ISR_Handler+0x6dc>)
 801652a:	400a      	ands	r2, r1
 801652c:	801a      	strh	r2, [r3, #0]
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	001a      	movs	r2, r3
 8016534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	009b      	lsls	r3, r3, #2
 801653a:	18d3      	adds	r3, r2, r3
 801653c:	183a      	adds	r2, r7, r0
 801653e:	8812      	ldrh	r2, [r2, #0]
 8016540:	499d      	ldr	r1, [pc, #628]	@ (80167b8 <PCD_EP_ISR_Handler+0x6e0>)
 8016542:	430a      	orrs	r2, r1
 8016544:	b292      	uxth	r2, r2
 8016546:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	001a      	movs	r2, r3
 801654e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016550:	781b      	ldrb	r3, [r3, #0]
 8016552:	009b      	lsls	r3, r3, #2
 8016554:	18d3      	adds	r3, r2, r3
 8016556:	881b      	ldrh	r3, [r3, #0]
 8016558:	b29b      	uxth	r3, r3
 801655a:	001a      	movs	r2, r3
 801655c:	2380      	movs	r3, #128	@ 0x80
 801655e:	01db      	lsls	r3, r3, #7
 8016560:	4013      	ands	r3, r2
 8016562:	d024      	beq.n	80165ae <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	2250      	movs	r2, #80	@ 0x50
 801656a:	5a9b      	ldrh	r3, [r3, r2]
 801656c:	b29b      	uxth	r3, r3
 801656e:	001a      	movs	r2, r3
 8016570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016572:	781b      	ldrb	r3, [r3, #0]
 8016574:	00db      	lsls	r3, r3, #3
 8016576:	18d2      	adds	r2, r2, r3
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	18d3      	adds	r3, r2, r3
 801657e:	4a8f      	ldr	r2, [pc, #572]	@ (80167bc <PCD_EP_ISR_Handler+0x6e4>)
 8016580:	4694      	mov	ip, r2
 8016582:	4463      	add	r3, ip
 8016584:	881a      	ldrh	r2, [r3, #0]
 8016586:	2450      	movs	r4, #80	@ 0x50
 8016588:	193b      	adds	r3, r7, r4
 801658a:	0592      	lsls	r2, r2, #22
 801658c:	0d92      	lsrs	r2, r2, #22
 801658e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8016590:	193b      	adds	r3, r7, r4
 8016592:	881b      	ldrh	r3, [r3, #0]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d02e      	beq.n	80165f6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	6818      	ldr	r0, [r3, #0]
 801659c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801659e:	6959      	ldr	r1, [r3, #20]
 80165a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165a2:	891a      	ldrh	r2, [r3, #8]
 80165a4:	193b      	adds	r3, r7, r4
 80165a6:	881b      	ldrh	r3, [r3, #0]
 80165a8:	f007 f877 	bl	801d69a <USB_ReadPMA>
 80165ac:	e023      	b.n	80165f6 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	2250      	movs	r2, #80	@ 0x50
 80165b4:	5a9b      	ldrh	r3, [r3, r2]
 80165b6:	b29b      	uxth	r3, r3
 80165b8:	001a      	movs	r2, r3
 80165ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165bc:	781b      	ldrb	r3, [r3, #0]
 80165be:	00db      	lsls	r3, r3, #3
 80165c0:	18d2      	adds	r2, r2, r3
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	18d3      	adds	r3, r2, r3
 80165c8:	4a79      	ldr	r2, [pc, #484]	@ (80167b0 <PCD_EP_ISR_Handler+0x6d8>)
 80165ca:	4694      	mov	ip, r2
 80165cc:	4463      	add	r3, ip
 80165ce:	881a      	ldrh	r2, [r3, #0]
 80165d0:	2450      	movs	r4, #80	@ 0x50
 80165d2:	193b      	adds	r3, r7, r4
 80165d4:	0592      	lsls	r2, r2, #22
 80165d6:	0d92      	lsrs	r2, r2, #22
 80165d8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80165da:	193b      	adds	r3, r7, r4
 80165dc:	881b      	ldrh	r3, [r3, #0]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d009      	beq.n	80165f6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	6818      	ldr	r0, [r3, #0]
 80165e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165e8:	6959      	ldr	r1, [r3, #20]
 80165ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165ec:	895a      	ldrh	r2, [r3, #10]
 80165ee:	193b      	adds	r3, r7, r4
 80165f0:	881b      	ldrh	r3, [r3, #0]
 80165f2:	f007 f852 	bl	801d69a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80165f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165f8:	69da      	ldr	r2, [r3, #28]
 80165fa:	2150      	movs	r1, #80	@ 0x50
 80165fc:	187b      	adds	r3, r7, r1
 80165fe:	881b      	ldrh	r3, [r3, #0]
 8016600:	18d2      	adds	r2, r2, r3
 8016602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016604:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8016606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016608:	695a      	ldr	r2, [r3, #20]
 801660a:	187b      	adds	r3, r7, r1
 801660c:	881b      	ldrh	r3, [r3, #0]
 801660e:	18d2      	adds	r2, r2, r3
 8016610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016612:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8016614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016616:	699b      	ldr	r3, [r3, #24]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d005      	beq.n	8016628 <PCD_EP_ISR_Handler+0x550>
 801661c:	187b      	adds	r3, r7, r1
 801661e:	881a      	ldrh	r2, [r3, #0]
 8016620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016622:	691b      	ldr	r3, [r3, #16]
 8016624:	429a      	cmp	r2, r3
 8016626:	d207      	bcs.n	8016638 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8016628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801662a:	781a      	ldrb	r2, [r3, #0]
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	0011      	movs	r1, r2
 8016630:	0018      	movs	r0, r3
 8016632:	f009 f84c 	bl	801f6ce <HAL_PCD_DataOutStageCallback>
 8016636:	e006      	b.n	8016646 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801663e:	0011      	movs	r1, r2
 8016640:	0018      	movs	r0, r3
 8016642:	f005 fd6f 	bl	801c124 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8016646:	244a      	movs	r4, #74	@ 0x4a
 8016648:	193b      	adds	r3, r7, r4
 801664a:	881b      	ldrh	r3, [r3, #0]
 801664c:	2280      	movs	r2, #128	@ 0x80
 801664e:	4013      	ands	r3, r2
 8016650:	d100      	bne.n	8016654 <PCD_EP_ISR_Handler+0x57c>
 8016652:	e133      	b.n	80168bc <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8016654:	204d      	movs	r0, #77	@ 0x4d
 8016656:	183b      	adds	r3, r7, r0
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	1c5a      	adds	r2, r3, #1
 801665c:	0013      	movs	r3, r2
 801665e:	009b      	lsls	r3, r3, #2
 8016660:	189b      	adds	r3, r3, r2
 8016662:	00db      	lsls	r3, r3, #3
 8016664:	687a      	ldr	r2, [r7, #4]
 8016666:	18d3      	adds	r3, r2, r3
 8016668:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	001a      	movs	r2, r3
 8016670:	183b      	adds	r3, r7, r0
 8016672:	781b      	ldrb	r3, [r3, #0]
 8016674:	009b      	lsls	r3, r3, #2
 8016676:	18d3      	adds	r3, r2, r3
 8016678:	881b      	ldrh	r3, [r3, #0]
 801667a:	b29a      	uxth	r2, r3
 801667c:	2542      	movs	r5, #66	@ 0x42
 801667e:	197b      	adds	r3, r7, r5
 8016680:	494f      	ldr	r1, [pc, #316]	@ (80167c0 <PCD_EP_ISR_Handler+0x6e8>)
 8016682:	400a      	ands	r2, r1
 8016684:	801a      	strh	r2, [r3, #0]
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	001a      	movs	r2, r3
 801668c:	183b      	adds	r3, r7, r0
 801668e:	781b      	ldrb	r3, [r3, #0]
 8016690:	009b      	lsls	r3, r3, #2
 8016692:	18d3      	adds	r3, r2, r3
 8016694:	197a      	adds	r2, r7, r5
 8016696:	8812      	ldrh	r2, [r2, #0]
 8016698:	494a      	ldr	r1, [pc, #296]	@ (80167c4 <PCD_EP_ISR_Handler+0x6ec>)
 801669a:	430a      	orrs	r2, r1
 801669c:	b292      	uxth	r2, r2
 801669e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80166a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80166a2:	78db      	ldrb	r3, [r3, #3]
 80166a4:	2b01      	cmp	r3, #1
 80166a6:	d000      	beq.n	80166aa <PCD_EP_ISR_Handler+0x5d2>
 80166a8:	e0af      	b.n	801680a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80166aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80166ac:	2200      	movs	r2, #0
 80166ae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80166b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80166b2:	7b1b      	ldrb	r3, [r3, #12]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d100      	bne.n	80166ba <PCD_EP_ISR_Handler+0x5e2>
 80166b8:	e09f      	b.n	80167fa <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80166ba:	193b      	adds	r3, r7, r4
 80166bc:	881b      	ldrh	r3, [r3, #0]
 80166be:	2240      	movs	r2, #64	@ 0x40
 80166c0:	4013      	ands	r3, r2
 80166c2:	d046      	beq.n	8016752 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80166c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80166c6:	785b      	ldrb	r3, [r3, #1]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d125      	bne.n	8016718 <PCD_EP_ISR_Handler+0x640>
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	2250      	movs	r2, #80	@ 0x50
 80166d8:	5a9b      	ldrh	r3, [r3, r2]
 80166da:	b29b      	uxth	r3, r3
 80166dc:	001a      	movs	r2, r3
 80166de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166e0:	189b      	adds	r3, r3, r2
 80166e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80166e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80166e6:	781b      	ldrb	r3, [r3, #0]
 80166e8:	00da      	lsls	r2, r3, #3
 80166ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166ec:	18d3      	adds	r3, r2, r3
 80166ee:	4a33      	ldr	r2, [pc, #204]	@ (80167bc <PCD_EP_ISR_Handler+0x6e4>)
 80166f0:	4694      	mov	ip, r2
 80166f2:	4463      	add	r3, ip
 80166f4:	623b      	str	r3, [r7, #32]
 80166f6:	6a3b      	ldr	r3, [r7, #32]
 80166f8:	881b      	ldrh	r3, [r3, #0]
 80166fa:	b29b      	uxth	r3, r3
 80166fc:	059b      	lsls	r3, r3, #22
 80166fe:	0d9b      	lsrs	r3, r3, #22
 8016700:	b29a      	uxth	r2, r3
 8016702:	6a3b      	ldr	r3, [r7, #32]
 8016704:	801a      	strh	r2, [r3, #0]
 8016706:	6a3b      	ldr	r3, [r7, #32]
 8016708:	881b      	ldrh	r3, [r3, #0]
 801670a:	b29b      	uxth	r3, r3
 801670c:	4a2d      	ldr	r2, [pc, #180]	@ (80167c4 <PCD_EP_ISR_Handler+0x6ec>)
 801670e:	4313      	orrs	r3, r2
 8016710:	b29a      	uxth	r2, r3
 8016712:	6a3b      	ldr	r3, [r7, #32]
 8016714:	801a      	strh	r2, [r3, #0]
 8016716:	e070      	b.n	80167fa <PCD_EP_ISR_Handler+0x722>
 8016718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801671a:	785b      	ldrb	r3, [r3, #1]
 801671c:	2b01      	cmp	r3, #1
 801671e:	d16c      	bne.n	80167fa <PCD_EP_ISR_Handler+0x722>
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	2250      	movs	r2, #80	@ 0x50
 801672c:	5a9b      	ldrh	r3, [r3, r2]
 801672e:	b29b      	uxth	r3, r3
 8016730:	001a      	movs	r2, r3
 8016732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016734:	189b      	adds	r3, r3, r2
 8016736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801673a:	781b      	ldrb	r3, [r3, #0]
 801673c:	00da      	lsls	r2, r3, #3
 801673e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016740:	18d3      	adds	r3, r2, r3
 8016742:	4a1e      	ldr	r2, [pc, #120]	@ (80167bc <PCD_EP_ISR_Handler+0x6e4>)
 8016744:	4694      	mov	ip, r2
 8016746:	4463      	add	r3, ip
 8016748:	62bb      	str	r3, [r7, #40]	@ 0x28
 801674a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801674c:	2200      	movs	r2, #0
 801674e:	801a      	strh	r2, [r3, #0]
 8016750:	e053      	b.n	80167fa <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801675a:	785b      	ldrb	r3, [r3, #1]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d133      	bne.n	80167c8 <PCD_EP_ISR_Handler+0x6f0>
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	637b      	str	r3, [r7, #52]	@ 0x34
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	2250      	movs	r2, #80	@ 0x50
 801676c:	5a9b      	ldrh	r3, [r3, r2]
 801676e:	b29b      	uxth	r3, r3
 8016770:	001a      	movs	r2, r3
 8016772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016774:	189b      	adds	r3, r3, r2
 8016776:	637b      	str	r3, [r7, #52]	@ 0x34
 8016778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801677a:	781b      	ldrb	r3, [r3, #0]
 801677c:	00da      	lsls	r2, r3, #3
 801677e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016780:	18d3      	adds	r3, r2, r3
 8016782:	4a0b      	ldr	r2, [pc, #44]	@ (80167b0 <PCD_EP_ISR_Handler+0x6d8>)
 8016784:	4694      	mov	ip, r2
 8016786:	4463      	add	r3, ip
 8016788:	633b      	str	r3, [r7, #48]	@ 0x30
 801678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801678c:	881b      	ldrh	r3, [r3, #0]
 801678e:	b29b      	uxth	r3, r3
 8016790:	059b      	lsls	r3, r3, #22
 8016792:	0d9b      	lsrs	r3, r3, #22
 8016794:	b29a      	uxth	r2, r3
 8016796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016798:	801a      	strh	r2, [r3, #0]
 801679a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801679c:	881b      	ldrh	r3, [r3, #0]
 801679e:	b29b      	uxth	r3, r3
 80167a0:	4a08      	ldr	r2, [pc, #32]	@ (80167c4 <PCD_EP_ISR_Handler+0x6ec>)
 80167a2:	4313      	orrs	r3, r2
 80167a4:	b29a      	uxth	r2, r3
 80167a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167a8:	801a      	strh	r2, [r3, #0]
 80167aa:	e026      	b.n	80167fa <PCD_EP_ISR_Handler+0x722>
 80167ac:	00000f8f 	.word	0x00000f8f
 80167b0:	00000406 	.word	0x00000406
 80167b4:	ffff8f8f 	.word	0xffff8f8f
 80167b8:	ffff80c0 	.word	0xffff80c0
 80167bc:	00000402 	.word	0x00000402
 80167c0:	ffff8f0f 	.word	0xffff8f0f
 80167c4:	ffff8000 	.word	0xffff8000
 80167c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167ca:	785b      	ldrb	r3, [r3, #1]
 80167cc:	2b01      	cmp	r3, #1
 80167ce:	d114      	bne.n	80167fa <PCD_EP_ISR_Handler+0x722>
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	2250      	movs	r2, #80	@ 0x50
 80167d6:	5a9b      	ldrh	r3, [r3, r2]
 80167d8:	b29b      	uxth	r3, r3
 80167da:	001a      	movs	r2, r3
 80167dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80167de:	189b      	adds	r3, r3, r2
 80167e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80167e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167e4:	781b      	ldrb	r3, [r3, #0]
 80167e6:	00da      	lsls	r2, r3, #3
 80167e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80167ea:	18d3      	adds	r3, r2, r3
 80167ec:	4a3b      	ldr	r2, [pc, #236]	@ (80168dc <PCD_EP_ISR_Handler+0x804>)
 80167ee:	4694      	mov	ip, r2
 80167f0:	4463      	add	r3, ip
 80167f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80167f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167f6:	2200      	movs	r2, #0
 80167f8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80167fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167fc:	781a      	ldrb	r2, [r3, #0]
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	0011      	movs	r1, r2
 8016802:	0018      	movs	r0, r3
 8016804:	f008 ff84 	bl	801f710 <HAL_PCD_DataInStageCallback>
 8016808:	e058      	b.n	80168bc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801680a:	234a      	movs	r3, #74	@ 0x4a
 801680c:	18fb      	adds	r3, r7, r3
 801680e:	881a      	ldrh	r2, [r3, #0]
 8016810:	2380      	movs	r3, #128	@ 0x80
 8016812:	005b      	lsls	r3, r3, #1
 8016814:	4013      	ands	r3, r2
 8016816:	d149      	bne.n	80168ac <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	2250      	movs	r2, #80	@ 0x50
 801681e:	5a9b      	ldrh	r3, [r3, r2]
 8016820:	b29b      	uxth	r3, r3
 8016822:	001a      	movs	r2, r3
 8016824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016826:	781b      	ldrb	r3, [r3, #0]
 8016828:	00db      	lsls	r3, r3, #3
 801682a:	18d2      	adds	r2, r2, r3
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	18d3      	adds	r3, r2, r3
 8016832:	4a2b      	ldr	r2, [pc, #172]	@ (80168e0 <PCD_EP_ISR_Handler+0x808>)
 8016834:	4694      	mov	ip, r2
 8016836:	4463      	add	r3, ip
 8016838:	881a      	ldrh	r2, [r3, #0]
 801683a:	2140      	movs	r1, #64	@ 0x40
 801683c:	187b      	adds	r3, r7, r1
 801683e:	0592      	lsls	r2, r2, #22
 8016840:	0d92      	lsrs	r2, r2, #22
 8016842:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8016844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016846:	699a      	ldr	r2, [r3, #24]
 8016848:	187b      	adds	r3, r7, r1
 801684a:	881b      	ldrh	r3, [r3, #0]
 801684c:	429a      	cmp	r2, r3
 801684e:	d907      	bls.n	8016860 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8016850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016852:	699a      	ldr	r2, [r3, #24]
 8016854:	187b      	adds	r3, r7, r1
 8016856:	881b      	ldrh	r3, [r3, #0]
 8016858:	1ad2      	subs	r2, r2, r3
 801685a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801685c:	619a      	str	r2, [r3, #24]
 801685e:	e002      	b.n	8016866 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8016860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016862:	2200      	movs	r2, #0
 8016864:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8016866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016868:	699b      	ldr	r3, [r3, #24]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d107      	bne.n	801687e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801686e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016870:	781a      	ldrb	r2, [r3, #0]
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	0011      	movs	r1, r2
 8016876:	0018      	movs	r0, r3
 8016878:	f008 ff4a 	bl	801f710 <HAL_PCD_DataInStageCallback>
 801687c:	e01e      	b.n	80168bc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801687e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016880:	695a      	ldr	r2, [r3, #20]
 8016882:	2140      	movs	r1, #64	@ 0x40
 8016884:	187b      	adds	r3, r7, r1
 8016886:	881b      	ldrh	r3, [r3, #0]
 8016888:	18d2      	adds	r2, r2, r3
 801688a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801688c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801688e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016890:	69da      	ldr	r2, [r3, #28]
 8016892:	187b      	adds	r3, r7, r1
 8016894:	881b      	ldrh	r3, [r3, #0]
 8016896:	18d2      	adds	r2, r2, r3
 8016898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801689a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80168a2:	0011      	movs	r1, r2
 80168a4:	0018      	movs	r0, r3
 80168a6:	f005 fc3d 	bl	801c124 <USB_EPStartXfer>
 80168aa:	e007      	b.n	80168bc <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80168ac:	234a      	movs	r3, #74	@ 0x4a
 80168ae:	18fb      	adds	r3, r7, r3
 80168b0:	881a      	ldrh	r2, [r3, #0]
 80168b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	0018      	movs	r0, r3
 80168b8:	f000 f930 	bl	8016b1c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	2244      	movs	r2, #68	@ 0x44
 80168c2:	5a9b      	ldrh	r3, [r3, r2]
 80168c4:	b29b      	uxth	r3, r3
 80168c6:	b21b      	sxth	r3, r3
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	da01      	bge.n	80168d0 <PCD_EP_ISR_Handler+0x7f8>
 80168cc:	f7ff fc0a 	bl	80160e4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80168d0:	2300      	movs	r3, #0
}
 80168d2:	0018      	movs	r0, r3
 80168d4:	46bd      	mov	sp, r7
 80168d6:	b016      	add	sp, #88	@ 0x58
 80168d8:	bdb0      	pop	{r4, r5, r7, pc}
 80168da:	46c0      	nop			@ (mov r8, r8)
 80168dc:	00000406 	.word	0x00000406
 80168e0:	00000402 	.word	0x00000402

080168e4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80168e4:	b590      	push	{r4, r7, lr}
 80168e6:	b089      	sub	sp, #36	@ 0x24
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	60f8      	str	r0, [r7, #12]
 80168ec:	60b9      	str	r1, [r7, #8]
 80168ee:	1dbb      	adds	r3, r7, #6
 80168f0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80168f2:	1dbb      	adds	r3, r7, #6
 80168f4:	881a      	ldrh	r2, [r3, #0]
 80168f6:	2380      	movs	r3, #128	@ 0x80
 80168f8:	01db      	lsls	r3, r3, #7
 80168fa:	4013      	ands	r3, r2
 80168fc:	d100      	bne.n	8016900 <HAL_PCD_EP_DB_Receive+0x1c>
 80168fe:	e07d      	b.n	80169fc <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	2250      	movs	r2, #80	@ 0x50
 8016906:	5a9b      	ldrh	r3, [r3, r2]
 8016908:	b29b      	uxth	r3, r3
 801690a:	001a      	movs	r2, r3
 801690c:	68bb      	ldr	r3, [r7, #8]
 801690e:	781b      	ldrb	r3, [r3, #0]
 8016910:	00db      	lsls	r3, r3, #3
 8016912:	18d2      	adds	r2, r2, r3
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	18d3      	adds	r3, r2, r3
 801691a:	4a7a      	ldr	r2, [pc, #488]	@ (8016b04 <HAL_PCD_EP_DB_Receive+0x220>)
 801691c:	4694      	mov	ip, r2
 801691e:	4463      	add	r3, ip
 8016920:	881a      	ldrh	r2, [r3, #0]
 8016922:	211a      	movs	r1, #26
 8016924:	187b      	adds	r3, r7, r1
 8016926:	0592      	lsls	r2, r2, #22
 8016928:	0d92      	lsrs	r2, r2, #22
 801692a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801692c:	68bb      	ldr	r3, [r7, #8]
 801692e:	699a      	ldr	r2, [r3, #24]
 8016930:	187b      	adds	r3, r7, r1
 8016932:	881b      	ldrh	r3, [r3, #0]
 8016934:	429a      	cmp	r2, r3
 8016936:	d307      	bcc.n	8016948 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8016938:	68bb      	ldr	r3, [r7, #8]
 801693a:	699a      	ldr	r2, [r3, #24]
 801693c:	187b      	adds	r3, r7, r1
 801693e:	881b      	ldrh	r3, [r3, #0]
 8016940:	1ad2      	subs	r2, r2, r3
 8016942:	68bb      	ldr	r3, [r7, #8]
 8016944:	619a      	str	r2, [r3, #24]
 8016946:	e002      	b.n	801694e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8016948:	68bb      	ldr	r3, [r7, #8]
 801694a:	2200      	movs	r2, #0
 801694c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801694e:	68bb      	ldr	r3, [r7, #8]
 8016950:	699b      	ldr	r3, [r3, #24]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d121      	bne.n	801699a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	001a      	movs	r2, r3
 801695c:	68bb      	ldr	r3, [r7, #8]
 801695e:	781b      	ldrb	r3, [r3, #0]
 8016960:	009b      	lsls	r3, r3, #2
 8016962:	18d3      	adds	r3, r2, r3
 8016964:	881b      	ldrh	r3, [r3, #0]
 8016966:	b29a      	uxth	r2, r3
 8016968:	2018      	movs	r0, #24
 801696a:	183b      	adds	r3, r7, r0
 801696c:	4966      	ldr	r1, [pc, #408]	@ (8016b08 <HAL_PCD_EP_DB_Receive+0x224>)
 801696e:	400a      	ands	r2, r1
 8016970:	801a      	strh	r2, [r3, #0]
 8016972:	183b      	adds	r3, r7, r0
 8016974:	183a      	adds	r2, r7, r0
 8016976:	8812      	ldrh	r2, [r2, #0]
 8016978:	2180      	movs	r1, #128	@ 0x80
 801697a:	0189      	lsls	r1, r1, #6
 801697c:	404a      	eors	r2, r1
 801697e:	801a      	strh	r2, [r3, #0]
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	001a      	movs	r2, r3
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	781b      	ldrb	r3, [r3, #0]
 801698a:	009b      	lsls	r3, r3, #2
 801698c:	18d3      	adds	r3, r2, r3
 801698e:	183a      	adds	r2, r7, r0
 8016990:	8812      	ldrh	r2, [r2, #0]
 8016992:	495e      	ldr	r1, [pc, #376]	@ (8016b0c <HAL_PCD_EP_DB_Receive+0x228>)
 8016994:	430a      	orrs	r2, r1
 8016996:	b292      	uxth	r2, r2
 8016998:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801699a:	1dbb      	adds	r3, r7, #6
 801699c:	881b      	ldrh	r3, [r3, #0]
 801699e:	2240      	movs	r2, #64	@ 0x40
 80169a0:	4013      	ands	r3, r2
 80169a2:	d01a      	beq.n	80169da <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	001a      	movs	r2, r3
 80169aa:	68bb      	ldr	r3, [r7, #8]
 80169ac:	781b      	ldrb	r3, [r3, #0]
 80169ae:	009b      	lsls	r3, r3, #2
 80169b0:	18d3      	adds	r3, r2, r3
 80169b2:	881b      	ldrh	r3, [r3, #0]
 80169b4:	b29a      	uxth	r2, r3
 80169b6:	2016      	movs	r0, #22
 80169b8:	183b      	adds	r3, r7, r0
 80169ba:	4955      	ldr	r1, [pc, #340]	@ (8016b10 <HAL_PCD_EP_DB_Receive+0x22c>)
 80169bc:	400a      	ands	r2, r1
 80169be:	801a      	strh	r2, [r3, #0]
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	001a      	movs	r2, r3
 80169c6:	68bb      	ldr	r3, [r7, #8]
 80169c8:	781b      	ldrb	r3, [r3, #0]
 80169ca:	009b      	lsls	r3, r3, #2
 80169cc:	18d3      	adds	r3, r2, r3
 80169ce:	183a      	adds	r2, r7, r0
 80169d0:	8812      	ldrh	r2, [r2, #0]
 80169d2:	4950      	ldr	r1, [pc, #320]	@ (8016b14 <HAL_PCD_EP_DB_Receive+0x230>)
 80169d4:	430a      	orrs	r2, r1
 80169d6:	b292      	uxth	r2, r2
 80169d8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80169da:	241a      	movs	r4, #26
 80169dc:	193b      	adds	r3, r7, r4
 80169de:	881b      	ldrh	r3, [r3, #0]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d100      	bne.n	80169e6 <HAL_PCD_EP_DB_Receive+0x102>
 80169e4:	e086      	b.n	8016af4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	6818      	ldr	r0, [r3, #0]
 80169ea:	68bb      	ldr	r3, [r7, #8]
 80169ec:	6959      	ldr	r1, [r3, #20]
 80169ee:	68bb      	ldr	r3, [r7, #8]
 80169f0:	891a      	ldrh	r2, [r3, #8]
 80169f2:	193b      	adds	r3, r7, r4
 80169f4:	881b      	ldrh	r3, [r3, #0]
 80169f6:	f006 fe50 	bl	801d69a <USB_ReadPMA>
 80169fa:	e07b      	b.n	8016af4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	2250      	movs	r2, #80	@ 0x50
 8016a02:	5a9b      	ldrh	r3, [r3, r2]
 8016a04:	b29b      	uxth	r3, r3
 8016a06:	001a      	movs	r2, r3
 8016a08:	68bb      	ldr	r3, [r7, #8]
 8016a0a:	781b      	ldrb	r3, [r3, #0]
 8016a0c:	00db      	lsls	r3, r3, #3
 8016a0e:	18d2      	adds	r2, r2, r3
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	18d3      	adds	r3, r2, r3
 8016a16:	4a40      	ldr	r2, [pc, #256]	@ (8016b18 <HAL_PCD_EP_DB_Receive+0x234>)
 8016a18:	4694      	mov	ip, r2
 8016a1a:	4463      	add	r3, ip
 8016a1c:	881a      	ldrh	r2, [r3, #0]
 8016a1e:	211a      	movs	r1, #26
 8016a20:	187b      	adds	r3, r7, r1
 8016a22:	0592      	lsls	r2, r2, #22
 8016a24:	0d92      	lsrs	r2, r2, #22
 8016a26:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8016a28:	68bb      	ldr	r3, [r7, #8]
 8016a2a:	699a      	ldr	r2, [r3, #24]
 8016a2c:	187b      	adds	r3, r7, r1
 8016a2e:	881b      	ldrh	r3, [r3, #0]
 8016a30:	429a      	cmp	r2, r3
 8016a32:	d307      	bcc.n	8016a44 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8016a34:	68bb      	ldr	r3, [r7, #8]
 8016a36:	699a      	ldr	r2, [r3, #24]
 8016a38:	187b      	adds	r3, r7, r1
 8016a3a:	881b      	ldrh	r3, [r3, #0]
 8016a3c:	1ad2      	subs	r2, r2, r3
 8016a3e:	68bb      	ldr	r3, [r7, #8]
 8016a40:	619a      	str	r2, [r3, #24]
 8016a42:	e002      	b.n	8016a4a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8016a44:	68bb      	ldr	r3, [r7, #8]
 8016a46:	2200      	movs	r2, #0
 8016a48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8016a4a:	68bb      	ldr	r3, [r7, #8]
 8016a4c:	699b      	ldr	r3, [r3, #24]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d121      	bne.n	8016a96 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	001a      	movs	r2, r3
 8016a58:	68bb      	ldr	r3, [r7, #8]
 8016a5a:	781b      	ldrb	r3, [r3, #0]
 8016a5c:	009b      	lsls	r3, r3, #2
 8016a5e:	18d3      	adds	r3, r2, r3
 8016a60:	881b      	ldrh	r3, [r3, #0]
 8016a62:	b29a      	uxth	r2, r3
 8016a64:	201e      	movs	r0, #30
 8016a66:	183b      	adds	r3, r7, r0
 8016a68:	4927      	ldr	r1, [pc, #156]	@ (8016b08 <HAL_PCD_EP_DB_Receive+0x224>)
 8016a6a:	400a      	ands	r2, r1
 8016a6c:	801a      	strh	r2, [r3, #0]
 8016a6e:	183b      	adds	r3, r7, r0
 8016a70:	183a      	adds	r2, r7, r0
 8016a72:	8812      	ldrh	r2, [r2, #0]
 8016a74:	2180      	movs	r1, #128	@ 0x80
 8016a76:	0189      	lsls	r1, r1, #6
 8016a78:	404a      	eors	r2, r1
 8016a7a:	801a      	strh	r2, [r3, #0]
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	001a      	movs	r2, r3
 8016a82:	68bb      	ldr	r3, [r7, #8]
 8016a84:	781b      	ldrb	r3, [r3, #0]
 8016a86:	009b      	lsls	r3, r3, #2
 8016a88:	18d3      	adds	r3, r2, r3
 8016a8a:	183a      	adds	r2, r7, r0
 8016a8c:	8812      	ldrh	r2, [r2, #0]
 8016a8e:	491f      	ldr	r1, [pc, #124]	@ (8016b0c <HAL_PCD_EP_DB_Receive+0x228>)
 8016a90:	430a      	orrs	r2, r1
 8016a92:	b292      	uxth	r2, r2
 8016a94:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8016a96:	1dbb      	adds	r3, r7, #6
 8016a98:	881b      	ldrh	r3, [r3, #0]
 8016a9a:	2240      	movs	r2, #64	@ 0x40
 8016a9c:	4013      	ands	r3, r2
 8016a9e:	d11a      	bne.n	8016ad6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	001a      	movs	r2, r3
 8016aa6:	68bb      	ldr	r3, [r7, #8]
 8016aa8:	781b      	ldrb	r3, [r3, #0]
 8016aaa:	009b      	lsls	r3, r3, #2
 8016aac:	18d3      	adds	r3, r2, r3
 8016aae:	881b      	ldrh	r3, [r3, #0]
 8016ab0:	b29a      	uxth	r2, r3
 8016ab2:	201c      	movs	r0, #28
 8016ab4:	183b      	adds	r3, r7, r0
 8016ab6:	4916      	ldr	r1, [pc, #88]	@ (8016b10 <HAL_PCD_EP_DB_Receive+0x22c>)
 8016ab8:	400a      	ands	r2, r1
 8016aba:	801a      	strh	r2, [r3, #0]
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	001a      	movs	r2, r3
 8016ac2:	68bb      	ldr	r3, [r7, #8]
 8016ac4:	781b      	ldrb	r3, [r3, #0]
 8016ac6:	009b      	lsls	r3, r3, #2
 8016ac8:	18d3      	adds	r3, r2, r3
 8016aca:	183a      	adds	r2, r7, r0
 8016acc:	8812      	ldrh	r2, [r2, #0]
 8016ace:	4911      	ldr	r1, [pc, #68]	@ (8016b14 <HAL_PCD_EP_DB_Receive+0x230>)
 8016ad0:	430a      	orrs	r2, r1
 8016ad2:	b292      	uxth	r2, r2
 8016ad4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8016ad6:	241a      	movs	r4, #26
 8016ad8:	193b      	adds	r3, r7, r4
 8016ada:	881b      	ldrh	r3, [r3, #0]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d009      	beq.n	8016af4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	6818      	ldr	r0, [r3, #0]
 8016ae4:	68bb      	ldr	r3, [r7, #8]
 8016ae6:	6959      	ldr	r1, [r3, #20]
 8016ae8:	68bb      	ldr	r3, [r7, #8]
 8016aea:	895a      	ldrh	r2, [r3, #10]
 8016aec:	193b      	adds	r3, r7, r4
 8016aee:	881b      	ldrh	r3, [r3, #0]
 8016af0:	f006 fdd3 	bl	801d69a <USB_ReadPMA>
    }
  }

  return count;
 8016af4:	231a      	movs	r3, #26
 8016af6:	18fb      	adds	r3, r7, r3
 8016af8:	881b      	ldrh	r3, [r3, #0]
}
 8016afa:	0018      	movs	r0, r3
 8016afc:	46bd      	mov	sp, r7
 8016afe:	b009      	add	sp, #36	@ 0x24
 8016b00:	bd90      	pop	{r4, r7, pc}
 8016b02:	46c0      	nop			@ (mov r8, r8)
 8016b04:	00000402 	.word	0x00000402
 8016b08:	ffffbf8f 	.word	0xffffbf8f
 8016b0c:	ffff8080 	.word	0xffff8080
 8016b10:	ffff8f8f 	.word	0xffff8f8f
 8016b14:	ffff80c0 	.word	0xffff80c0
 8016b18:	00000406 	.word	0x00000406

08016b1c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b0a4      	sub	sp, #144	@ 0x90
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	60f8      	str	r0, [r7, #12]
 8016b24:	60b9      	str	r1, [r7, #8]
 8016b26:	1dbb      	adds	r3, r7, #6
 8016b28:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8016b2a:	1dbb      	adds	r3, r7, #6
 8016b2c:	881b      	ldrh	r3, [r3, #0]
 8016b2e:	2240      	movs	r2, #64	@ 0x40
 8016b30:	4013      	ands	r3, r2
 8016b32:	d100      	bne.n	8016b36 <HAL_PCD_EP_DB_Transmit+0x1a>
 8016b34:	e1e4      	b.n	8016f00 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	2250      	movs	r2, #80	@ 0x50
 8016b3c:	5a9b      	ldrh	r3, [r3, r2]
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	001a      	movs	r2, r3
 8016b42:	68bb      	ldr	r3, [r7, #8]
 8016b44:	781b      	ldrb	r3, [r3, #0]
 8016b46:	00db      	lsls	r3, r3, #3
 8016b48:	18d2      	adds	r2, r2, r3
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	18d3      	adds	r3, r2, r3
 8016b50:	4ad0      	ldr	r2, [pc, #832]	@ (8016e94 <HAL_PCD_EP_DB_Transmit+0x378>)
 8016b52:	4694      	mov	ip, r2
 8016b54:	4463      	add	r3, ip
 8016b56:	881a      	ldrh	r2, [r3, #0]
 8016b58:	2186      	movs	r1, #134	@ 0x86
 8016b5a:	187b      	adds	r3, r7, r1
 8016b5c:	0592      	lsls	r2, r2, #22
 8016b5e:	0d92      	lsrs	r2, r2, #22
 8016b60:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8016b62:	68bb      	ldr	r3, [r7, #8]
 8016b64:	699a      	ldr	r2, [r3, #24]
 8016b66:	187b      	adds	r3, r7, r1
 8016b68:	881b      	ldrh	r3, [r3, #0]
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d907      	bls.n	8016b7e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	699a      	ldr	r2, [r3, #24]
 8016b72:	187b      	adds	r3, r7, r1
 8016b74:	881b      	ldrh	r3, [r3, #0]
 8016b76:	1ad2      	subs	r2, r2, r3
 8016b78:	68bb      	ldr	r3, [r7, #8]
 8016b7a:	619a      	str	r2, [r3, #24]
 8016b7c:	e002      	b.n	8016b84 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8016b7e:	68bb      	ldr	r3, [r7, #8]
 8016b80:	2200      	movs	r2, #0
 8016b82:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8016b84:	68bb      	ldr	r3, [r7, #8]
 8016b86:	699b      	ldr	r3, [r3, #24]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d000      	beq.n	8016b8e <HAL_PCD_EP_DB_Transmit+0x72>
 8016b8c:	e0b5      	b.n	8016cfa <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8016b8e:	68bb      	ldr	r3, [r7, #8]
 8016b90:	785b      	ldrb	r3, [r3, #1]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d125      	bne.n	8016be2 <HAL_PCD_EP_DB_Transmit+0xc6>
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	2250      	movs	r2, #80	@ 0x50
 8016ba2:	5a9b      	ldrh	r3, [r3, r2]
 8016ba4:	b29b      	uxth	r3, r3
 8016ba6:	001a      	movs	r2, r3
 8016ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016baa:	189b      	adds	r3, r3, r2
 8016bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016bae:	68bb      	ldr	r3, [r7, #8]
 8016bb0:	781b      	ldrb	r3, [r3, #0]
 8016bb2:	00da      	lsls	r2, r3, #3
 8016bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bb6:	18d3      	adds	r3, r2, r3
 8016bb8:	4ab6      	ldr	r2, [pc, #728]	@ (8016e94 <HAL_PCD_EP_DB_Transmit+0x378>)
 8016bba:	4694      	mov	ip, r2
 8016bbc:	4463      	add	r3, ip
 8016bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bc2:	881b      	ldrh	r3, [r3, #0]
 8016bc4:	b29b      	uxth	r3, r3
 8016bc6:	059b      	lsls	r3, r3, #22
 8016bc8:	0d9b      	lsrs	r3, r3, #22
 8016bca:	b29a      	uxth	r2, r3
 8016bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bce:	801a      	strh	r2, [r3, #0]
 8016bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bd2:	881b      	ldrh	r3, [r3, #0]
 8016bd4:	b29b      	uxth	r3, r3
 8016bd6:	4ab0      	ldr	r2, [pc, #704]	@ (8016e98 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8016bd8:	4313      	orrs	r3, r2
 8016bda:	b29a      	uxth	r2, r3
 8016bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bde:	801a      	strh	r2, [r3, #0]
 8016be0:	e01b      	b.n	8016c1a <HAL_PCD_EP_DB_Transmit+0xfe>
 8016be2:	68bb      	ldr	r3, [r7, #8]
 8016be4:	785b      	ldrb	r3, [r3, #1]
 8016be6:	2b01      	cmp	r3, #1
 8016be8:	d117      	bne.n	8016c1a <HAL_PCD_EP_DB_Transmit+0xfe>
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	2250      	movs	r2, #80	@ 0x50
 8016bf6:	5a9b      	ldrh	r3, [r3, r2]
 8016bf8:	b29b      	uxth	r3, r3
 8016bfa:	001a      	movs	r2, r3
 8016bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016bfe:	189b      	adds	r3, r3, r2
 8016c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	781b      	ldrb	r3, [r3, #0]
 8016c06:	00da      	lsls	r2, r3, #3
 8016c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016c0a:	18d3      	adds	r3, r2, r3
 8016c0c:	4aa1      	ldr	r2, [pc, #644]	@ (8016e94 <HAL_PCD_EP_DB_Transmit+0x378>)
 8016c0e:	4694      	mov	ip, r2
 8016c10:	4463      	add	r3, ip
 8016c12:	633b      	str	r3, [r7, #48]	@ 0x30
 8016c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c16:	2200      	movs	r2, #0
 8016c18:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016c20:	68bb      	ldr	r3, [r7, #8]
 8016c22:	785b      	ldrb	r3, [r3, #1]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d125      	bne.n	8016c74 <HAL_PCD_EP_DB_Transmit+0x158>
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	61fb      	str	r3, [r7, #28]
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	2250      	movs	r2, #80	@ 0x50
 8016c34:	5a9b      	ldrh	r3, [r3, r2]
 8016c36:	b29b      	uxth	r3, r3
 8016c38:	001a      	movs	r2, r3
 8016c3a:	69fb      	ldr	r3, [r7, #28]
 8016c3c:	189b      	adds	r3, r3, r2
 8016c3e:	61fb      	str	r3, [r7, #28]
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	781b      	ldrb	r3, [r3, #0]
 8016c44:	00da      	lsls	r2, r3, #3
 8016c46:	69fb      	ldr	r3, [r7, #28]
 8016c48:	18d3      	adds	r3, r2, r3
 8016c4a:	4a94      	ldr	r2, [pc, #592]	@ (8016e9c <HAL_PCD_EP_DB_Transmit+0x380>)
 8016c4c:	4694      	mov	ip, r2
 8016c4e:	4463      	add	r3, ip
 8016c50:	61bb      	str	r3, [r7, #24]
 8016c52:	69bb      	ldr	r3, [r7, #24]
 8016c54:	881b      	ldrh	r3, [r3, #0]
 8016c56:	b29b      	uxth	r3, r3
 8016c58:	059b      	lsls	r3, r3, #22
 8016c5a:	0d9b      	lsrs	r3, r3, #22
 8016c5c:	b29a      	uxth	r2, r3
 8016c5e:	69bb      	ldr	r3, [r7, #24]
 8016c60:	801a      	strh	r2, [r3, #0]
 8016c62:	69bb      	ldr	r3, [r7, #24]
 8016c64:	881b      	ldrh	r3, [r3, #0]
 8016c66:	b29b      	uxth	r3, r3
 8016c68:	4a8b      	ldr	r2, [pc, #556]	@ (8016e98 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8016c6a:	4313      	orrs	r3, r2
 8016c6c:	b29a      	uxth	r2, r3
 8016c6e:	69bb      	ldr	r3, [r7, #24]
 8016c70:	801a      	strh	r2, [r3, #0]
 8016c72:	e018      	b.n	8016ca6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8016c74:	68bb      	ldr	r3, [r7, #8]
 8016c76:	785b      	ldrb	r3, [r3, #1]
 8016c78:	2b01      	cmp	r3, #1
 8016c7a:	d114      	bne.n	8016ca6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	2250      	movs	r2, #80	@ 0x50
 8016c82:	5a9b      	ldrh	r3, [r3, r2]
 8016c84:	b29b      	uxth	r3, r3
 8016c86:	001a      	movs	r2, r3
 8016c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c8a:	189b      	adds	r3, r3, r2
 8016c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8016c8e:	68bb      	ldr	r3, [r7, #8]
 8016c90:	781b      	ldrb	r3, [r3, #0]
 8016c92:	00da      	lsls	r2, r3, #3
 8016c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c96:	18d3      	adds	r3, r2, r3
 8016c98:	4a80      	ldr	r2, [pc, #512]	@ (8016e9c <HAL_PCD_EP_DB_Transmit+0x380>)
 8016c9a:	4694      	mov	ip, r2
 8016c9c:	4463      	add	r3, ip
 8016c9e:	623b      	str	r3, [r7, #32]
 8016ca0:	6a3b      	ldr	r3, [r7, #32]
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8016ca6:	68bb      	ldr	r3, [r7, #8]
 8016ca8:	781a      	ldrb	r2, [r3, #0]
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	0011      	movs	r1, r2
 8016cae:	0018      	movs	r0, r3
 8016cb0:	f008 fd2e 	bl	801f710 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8016cb4:	1dbb      	adds	r3, r7, #6
 8016cb6:	881a      	ldrh	r2, [r3, #0]
 8016cb8:	2380      	movs	r3, #128	@ 0x80
 8016cba:	01db      	lsls	r3, r3, #7
 8016cbc:	4013      	ands	r3, r2
 8016cbe:	d100      	bne.n	8016cc2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8016cc0:	e309      	b.n	80172d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	001a      	movs	r2, r3
 8016cc8:	68bb      	ldr	r3, [r7, #8]
 8016cca:	781b      	ldrb	r3, [r3, #0]
 8016ccc:	009b      	lsls	r3, r3, #2
 8016cce:	18d3      	adds	r3, r2, r3
 8016cd0:	881b      	ldrh	r3, [r3, #0]
 8016cd2:	b29a      	uxth	r2, r3
 8016cd4:	2016      	movs	r0, #22
 8016cd6:	183b      	adds	r3, r7, r0
 8016cd8:	4971      	ldr	r1, [pc, #452]	@ (8016ea0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8016cda:	400a      	ands	r2, r1
 8016cdc:	801a      	strh	r2, [r3, #0]
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	001a      	movs	r2, r3
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	781b      	ldrb	r3, [r3, #0]
 8016ce8:	009b      	lsls	r3, r3, #2
 8016cea:	18d3      	adds	r3, r2, r3
 8016cec:	183a      	adds	r2, r7, r0
 8016cee:	8812      	ldrh	r2, [r2, #0]
 8016cf0:	496c      	ldr	r1, [pc, #432]	@ (8016ea4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8016cf2:	430a      	orrs	r2, r1
 8016cf4:	b292      	uxth	r2, r2
 8016cf6:	801a      	strh	r2, [r3, #0]
 8016cf8:	e2ed      	b.n	80172d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8016cfa:	1dbb      	adds	r3, r7, #6
 8016cfc:	881a      	ldrh	r2, [r3, #0]
 8016cfe:	2380      	movs	r3, #128	@ 0x80
 8016d00:	01db      	lsls	r3, r3, #7
 8016d02:	4013      	ands	r3, r2
 8016d04:	d01a      	beq.n	8016d3c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	001a      	movs	r2, r3
 8016d0c:	68bb      	ldr	r3, [r7, #8]
 8016d0e:	781b      	ldrb	r3, [r3, #0]
 8016d10:	009b      	lsls	r3, r3, #2
 8016d12:	18d3      	adds	r3, r2, r3
 8016d14:	881b      	ldrh	r3, [r3, #0]
 8016d16:	b29a      	uxth	r2, r3
 8016d18:	208a      	movs	r0, #138	@ 0x8a
 8016d1a:	183b      	adds	r3, r7, r0
 8016d1c:	4960      	ldr	r1, [pc, #384]	@ (8016ea0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8016d1e:	400a      	ands	r2, r1
 8016d20:	801a      	strh	r2, [r3, #0]
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	001a      	movs	r2, r3
 8016d28:	68bb      	ldr	r3, [r7, #8]
 8016d2a:	781b      	ldrb	r3, [r3, #0]
 8016d2c:	009b      	lsls	r3, r3, #2
 8016d2e:	18d3      	adds	r3, r2, r3
 8016d30:	183a      	adds	r2, r7, r0
 8016d32:	8812      	ldrh	r2, [r2, #0]
 8016d34:	495b      	ldr	r1, [pc, #364]	@ (8016ea4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8016d36:	430a      	orrs	r2, r1
 8016d38:	b292      	uxth	r2, r2
 8016d3a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8016d3c:	68bb      	ldr	r3, [r7, #8]
 8016d3e:	2224      	movs	r2, #36	@ 0x24
 8016d40:	5c9b      	ldrb	r3, [r3, r2]
 8016d42:	2b01      	cmp	r3, #1
 8016d44:	d000      	beq.n	8016d48 <HAL_PCD_EP_DB_Transmit+0x22c>
 8016d46:	e2c6      	b.n	80172d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8016d48:	68bb      	ldr	r3, [r7, #8]
 8016d4a:	695a      	ldr	r2, [r3, #20]
 8016d4c:	2186      	movs	r1, #134	@ 0x86
 8016d4e:	187b      	adds	r3, r7, r1
 8016d50:	881b      	ldrh	r3, [r3, #0]
 8016d52:	18d2      	adds	r2, r2, r3
 8016d54:	68bb      	ldr	r3, [r7, #8]
 8016d56:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8016d58:	68bb      	ldr	r3, [r7, #8]
 8016d5a:	69da      	ldr	r2, [r3, #28]
 8016d5c:	187b      	adds	r3, r7, r1
 8016d5e:	881b      	ldrh	r3, [r3, #0]
 8016d60:	18d2      	adds	r2, r2, r3
 8016d62:	68bb      	ldr	r3, [r7, #8]
 8016d64:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8016d66:	68bb      	ldr	r3, [r7, #8]
 8016d68:	6a1a      	ldr	r2, [r3, #32]
 8016d6a:	68bb      	ldr	r3, [r7, #8]
 8016d6c:	691b      	ldr	r3, [r3, #16]
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	d30c      	bcc.n	8016d8c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8016d72:	68bb      	ldr	r3, [r7, #8]
 8016d74:	691b      	ldr	r3, [r3, #16]
 8016d76:	218c      	movs	r1, #140	@ 0x8c
 8016d78:	187a      	adds	r2, r7, r1
 8016d7a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8016d7c:	68bb      	ldr	r3, [r7, #8]
 8016d7e:	6a1a      	ldr	r2, [r3, #32]
 8016d80:	187b      	adds	r3, r7, r1
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	1ad2      	subs	r2, r2, r3
 8016d86:	68bb      	ldr	r3, [r7, #8]
 8016d88:	621a      	str	r2, [r3, #32]
 8016d8a:	e01a      	b.n	8016dc2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8016d8c:	68bb      	ldr	r3, [r7, #8]
 8016d8e:	6a1b      	ldr	r3, [r3, #32]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d10a      	bne.n	8016daa <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8016d94:	2386      	movs	r3, #134	@ 0x86
 8016d96:	18fb      	adds	r3, r7, r3
 8016d98:	881b      	ldrh	r3, [r3, #0]
 8016d9a:	228c      	movs	r2, #140	@ 0x8c
 8016d9c:	18ba      	adds	r2, r7, r2
 8016d9e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8016da0:	68bb      	ldr	r3, [r7, #8]
 8016da2:	2224      	movs	r2, #36	@ 0x24
 8016da4:	2100      	movs	r1, #0
 8016da6:	5499      	strb	r1, [r3, r2]
 8016da8:	e00b      	b.n	8016dc2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8016daa:	68bb      	ldr	r3, [r7, #8]
 8016dac:	2224      	movs	r2, #36	@ 0x24
 8016dae:	2100      	movs	r1, #0
 8016db0:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8016db2:	68bb      	ldr	r3, [r7, #8]
 8016db4:	6a1b      	ldr	r3, [r3, #32]
 8016db6:	228c      	movs	r2, #140	@ 0x8c
 8016db8:	18ba      	adds	r2, r7, r2
 8016dba:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8016dbc:	68bb      	ldr	r3, [r7, #8]
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8016dc2:	68bb      	ldr	r3, [r7, #8]
 8016dc4:	785b      	ldrb	r3, [r3, #1]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d000      	beq.n	8016dcc <HAL_PCD_EP_DB_Transmit+0x2b0>
 8016dca:	e06d      	b.n	8016ea8 <HAL_PCD_EP_DB_Transmit+0x38c>
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	2250      	movs	r2, #80	@ 0x50
 8016dd8:	5a9b      	ldrh	r3, [r3, r2]
 8016dda:	b29b      	uxth	r3, r3
 8016ddc:	001a      	movs	r2, r3
 8016dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016de0:	189b      	adds	r3, r3, r2
 8016de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	781b      	ldrb	r3, [r3, #0]
 8016de8:	00da      	lsls	r2, r3, #3
 8016dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016dec:	18d3      	adds	r3, r2, r3
 8016dee:	4a29      	ldr	r2, [pc, #164]	@ (8016e94 <HAL_PCD_EP_DB_Transmit+0x378>)
 8016df0:	4694      	mov	ip, r2
 8016df2:	4463      	add	r3, ip
 8016df4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016df8:	881b      	ldrh	r3, [r3, #0]
 8016dfa:	b29b      	uxth	r3, r3
 8016dfc:	059b      	lsls	r3, r3, #22
 8016dfe:	0d9b      	lsrs	r3, r3, #22
 8016e00:	b29a      	uxth	r2, r3
 8016e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e04:	801a      	strh	r2, [r3, #0]
 8016e06:	228c      	movs	r2, #140	@ 0x8c
 8016e08:	18bb      	adds	r3, r7, r2
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8016e0e:	d91a      	bls.n	8016e46 <HAL_PCD_EP_DB_Transmit+0x32a>
 8016e10:	18bb      	adds	r3, r7, r2
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	095b      	lsrs	r3, r3, #5
 8016e16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016e18:	18bb      	adds	r3, r7, r2
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	221f      	movs	r2, #31
 8016e1e:	4013      	ands	r3, r2
 8016e20:	d102      	bne.n	8016e28 <HAL_PCD_EP_DB_Transmit+0x30c>
 8016e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016e24:	3b01      	subs	r3, #1
 8016e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e2a:	881b      	ldrh	r3, [r3, #0]
 8016e2c:	b29a      	uxth	r2, r3
 8016e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016e30:	b29b      	uxth	r3, r3
 8016e32:	029b      	lsls	r3, r3, #10
 8016e34:	b29b      	uxth	r3, r3
 8016e36:	4313      	orrs	r3, r2
 8016e38:	b29b      	uxth	r3, r3
 8016e3a:	4a17      	ldr	r2, [pc, #92]	@ (8016e98 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8016e3c:	4313      	orrs	r3, r2
 8016e3e:	b29a      	uxth	r2, r3
 8016e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e42:	801a      	strh	r2, [r3, #0]
 8016e44:	e04f      	b.n	8016ee6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8016e46:	238c      	movs	r3, #140	@ 0x8c
 8016e48:	18fb      	adds	r3, r7, r3
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d108      	bne.n	8016e62 <HAL_PCD_EP_DB_Transmit+0x346>
 8016e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e52:	881b      	ldrh	r3, [r3, #0]
 8016e54:	b29b      	uxth	r3, r3
 8016e56:	4a10      	ldr	r2, [pc, #64]	@ (8016e98 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8016e58:	4313      	orrs	r3, r2
 8016e5a:	b29a      	uxth	r2, r3
 8016e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e5e:	801a      	strh	r2, [r3, #0]
 8016e60:	e041      	b.n	8016ee6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8016e62:	228c      	movs	r2, #140	@ 0x8c
 8016e64:	18bb      	adds	r3, r7, r2
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	085b      	lsrs	r3, r3, #1
 8016e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016e6c:	18bb      	adds	r3, r7, r2
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	2201      	movs	r2, #1
 8016e72:	4013      	ands	r3, r2
 8016e74:	d002      	beq.n	8016e7c <HAL_PCD_EP_DB_Transmit+0x360>
 8016e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016e78:	3301      	adds	r3, #1
 8016e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e7e:	881b      	ldrh	r3, [r3, #0]
 8016e80:	b29a      	uxth	r2, r3
 8016e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016e84:	b29b      	uxth	r3, r3
 8016e86:	029b      	lsls	r3, r3, #10
 8016e88:	b29b      	uxth	r3, r3
 8016e8a:	4313      	orrs	r3, r2
 8016e8c:	b29a      	uxth	r2, r3
 8016e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e90:	801a      	strh	r2, [r3, #0]
 8016e92:	e028      	b.n	8016ee6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8016e94:	00000402 	.word	0x00000402
 8016e98:	ffff8000 	.word	0xffff8000
 8016e9c:	00000406 	.word	0x00000406
 8016ea0:	ffff8f8f 	.word	0xffff8f8f
 8016ea4:	ffffc080 	.word	0xffffc080
 8016ea8:	68bb      	ldr	r3, [r7, #8]
 8016eaa:	785b      	ldrb	r3, [r3, #1]
 8016eac:	2b01      	cmp	r3, #1
 8016eae:	d11a      	bne.n	8016ee6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	2250      	movs	r2, #80	@ 0x50
 8016ebc:	5a9b      	ldrh	r3, [r3, r2]
 8016ebe:	b29b      	uxth	r3, r3
 8016ec0:	001a      	movs	r2, r3
 8016ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ec4:	189b      	adds	r3, r3, r2
 8016ec6:	647b      	str	r3, [r7, #68]	@ 0x44
 8016ec8:	68bb      	ldr	r3, [r7, #8]
 8016eca:	781b      	ldrb	r3, [r3, #0]
 8016ecc:	00da      	lsls	r2, r3, #3
 8016ece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ed0:	18d3      	adds	r3, r2, r3
 8016ed2:	4adb      	ldr	r2, [pc, #876]	@ (8017240 <HAL_PCD_EP_DB_Transmit+0x724>)
 8016ed4:	4694      	mov	ip, r2
 8016ed6:	4463      	add	r3, ip
 8016ed8:	643b      	str	r3, [r7, #64]	@ 0x40
 8016eda:	238c      	movs	r3, #140	@ 0x8c
 8016edc:	18fb      	adds	r3, r7, r3
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	b29a      	uxth	r2, r3
 8016ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016ee4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	6818      	ldr	r0, [r3, #0]
 8016eea:	68bb      	ldr	r3, [r7, #8]
 8016eec:	6959      	ldr	r1, [r3, #20]
 8016eee:	68bb      	ldr	r3, [r7, #8]
 8016ef0:	891a      	ldrh	r2, [r3, #8]
 8016ef2:	238c      	movs	r3, #140	@ 0x8c
 8016ef4:	18fb      	adds	r3, r7, r3
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	b29b      	uxth	r3, r3
 8016efa:	f006 fb85 	bl	801d608 <USB_WritePMA>
 8016efe:	e1ea      	b.n	80172d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	2250      	movs	r2, #80	@ 0x50
 8016f06:	5a9b      	ldrh	r3, [r3, r2]
 8016f08:	b29b      	uxth	r3, r3
 8016f0a:	001a      	movs	r2, r3
 8016f0c:	68bb      	ldr	r3, [r7, #8]
 8016f0e:	781b      	ldrb	r3, [r3, #0]
 8016f10:	00db      	lsls	r3, r3, #3
 8016f12:	18d2      	adds	r2, r2, r3
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	18d3      	adds	r3, r2, r3
 8016f1a:	4aca      	ldr	r2, [pc, #808]	@ (8017244 <HAL_PCD_EP_DB_Transmit+0x728>)
 8016f1c:	4694      	mov	ip, r2
 8016f1e:	4463      	add	r3, ip
 8016f20:	881a      	ldrh	r2, [r3, #0]
 8016f22:	2186      	movs	r1, #134	@ 0x86
 8016f24:	187b      	adds	r3, r7, r1
 8016f26:	0592      	lsls	r2, r2, #22
 8016f28:	0d92      	lsrs	r2, r2, #22
 8016f2a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8016f2c:	68bb      	ldr	r3, [r7, #8]
 8016f2e:	699a      	ldr	r2, [r3, #24]
 8016f30:	187b      	adds	r3, r7, r1
 8016f32:	881b      	ldrh	r3, [r3, #0]
 8016f34:	429a      	cmp	r2, r3
 8016f36:	d307      	bcc.n	8016f48 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8016f38:	68bb      	ldr	r3, [r7, #8]
 8016f3a:	699a      	ldr	r2, [r3, #24]
 8016f3c:	187b      	adds	r3, r7, r1
 8016f3e:	881b      	ldrh	r3, [r3, #0]
 8016f40:	1ad2      	subs	r2, r2, r3
 8016f42:	68bb      	ldr	r3, [r7, #8]
 8016f44:	619a      	str	r2, [r3, #24]
 8016f46:	e002      	b.n	8016f4e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8016f48:	68bb      	ldr	r3, [r7, #8]
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8016f4e:	68bb      	ldr	r3, [r7, #8]
 8016f50:	699b      	ldr	r3, [r3, #24]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d000      	beq.n	8016f58 <HAL_PCD_EP_DB_Transmit+0x43c>
 8016f56:	e0bb      	b.n	80170d0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	785b      	ldrb	r3, [r3, #1]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d125      	bne.n	8016fac <HAL_PCD_EP_DB_Transmit+0x490>
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	2250      	movs	r2, #80	@ 0x50
 8016f6c:	5a9b      	ldrh	r3, [r3, r2]
 8016f6e:	b29b      	uxth	r3, r3
 8016f70:	001a      	movs	r2, r3
 8016f72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016f74:	189b      	adds	r3, r3, r2
 8016f76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016f78:	68bb      	ldr	r3, [r7, #8]
 8016f7a:	781b      	ldrb	r3, [r3, #0]
 8016f7c:	00da      	lsls	r2, r3, #3
 8016f7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016f80:	18d3      	adds	r3, r2, r3
 8016f82:	4aaf      	ldr	r2, [pc, #700]	@ (8017240 <HAL_PCD_EP_DB_Transmit+0x724>)
 8016f84:	4694      	mov	ip, r2
 8016f86:	4463      	add	r3, ip
 8016f88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016f8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016f8c:	881b      	ldrh	r3, [r3, #0]
 8016f8e:	b29b      	uxth	r3, r3
 8016f90:	059b      	lsls	r3, r3, #22
 8016f92:	0d9b      	lsrs	r3, r3, #22
 8016f94:	b29a      	uxth	r2, r3
 8016f96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016f98:	801a      	strh	r2, [r3, #0]
 8016f9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016f9c:	881b      	ldrh	r3, [r3, #0]
 8016f9e:	b29b      	uxth	r3, r3
 8016fa0:	4aa9      	ldr	r2, [pc, #676]	@ (8017248 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8016fa2:	4313      	orrs	r3, r2
 8016fa4:	b29a      	uxth	r2, r3
 8016fa6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016fa8:	801a      	strh	r2, [r3, #0]
 8016faa:	e01b      	b.n	8016fe4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8016fac:	68bb      	ldr	r3, [r7, #8]
 8016fae:	785b      	ldrb	r3, [r3, #1]
 8016fb0:	2b01      	cmp	r3, #1
 8016fb2:	d117      	bne.n	8016fe4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	2250      	movs	r2, #80	@ 0x50
 8016fc0:	5a9b      	ldrh	r3, [r3, r2]
 8016fc2:	b29b      	uxth	r3, r3
 8016fc4:	001a      	movs	r2, r3
 8016fc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016fc8:	189b      	adds	r3, r3, r2
 8016fca:	667b      	str	r3, [r7, #100]	@ 0x64
 8016fcc:	68bb      	ldr	r3, [r7, #8]
 8016fce:	781b      	ldrb	r3, [r3, #0]
 8016fd0:	00da      	lsls	r2, r3, #3
 8016fd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016fd4:	18d3      	adds	r3, r2, r3
 8016fd6:	4a9a      	ldr	r2, [pc, #616]	@ (8017240 <HAL_PCD_EP_DB_Transmit+0x724>)
 8016fd8:	4694      	mov	ip, r2
 8016fda:	4463      	add	r3, ip
 8016fdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8016fde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016fe0:	2200      	movs	r2, #0
 8016fe2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	677b      	str	r3, [r7, #116]	@ 0x74
 8016fea:	68bb      	ldr	r3, [r7, #8]
 8016fec:	785b      	ldrb	r3, [r3, #1]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d12b      	bne.n	801704a <HAL_PCD_EP_DB_Transmit+0x52e>
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	2250      	movs	r2, #80	@ 0x50
 8016ffe:	5a9b      	ldrh	r3, [r3, r2]
 8017000:	b29b      	uxth	r3, r3
 8017002:	001a      	movs	r2, r3
 8017004:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017006:	189b      	adds	r3, r3, r2
 8017008:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801700a:	68bb      	ldr	r3, [r7, #8]
 801700c:	781b      	ldrb	r3, [r3, #0]
 801700e:	00da      	lsls	r2, r3, #3
 8017010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017012:	18d3      	adds	r3, r2, r3
 8017014:	4a8b      	ldr	r2, [pc, #556]	@ (8017244 <HAL_PCD_EP_DB_Transmit+0x728>)
 8017016:	4694      	mov	ip, r2
 8017018:	4463      	add	r3, ip
 801701a:	2180      	movs	r1, #128	@ 0x80
 801701c:	187a      	adds	r2, r7, r1
 801701e:	6013      	str	r3, [r2, #0]
 8017020:	187b      	adds	r3, r7, r1
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	881b      	ldrh	r3, [r3, #0]
 8017026:	b29b      	uxth	r3, r3
 8017028:	059b      	lsls	r3, r3, #22
 801702a:	0d9b      	lsrs	r3, r3, #22
 801702c:	b29a      	uxth	r2, r3
 801702e:	187b      	adds	r3, r7, r1
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	801a      	strh	r2, [r3, #0]
 8017034:	187b      	adds	r3, r7, r1
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	881b      	ldrh	r3, [r3, #0]
 801703a:	b29b      	uxth	r3, r3
 801703c:	4a82      	ldr	r2, [pc, #520]	@ (8017248 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801703e:	4313      	orrs	r3, r2
 8017040:	b29a      	uxth	r2, r3
 8017042:	187b      	adds	r3, r7, r1
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	801a      	strh	r2, [r3, #0]
 8017048:	e018      	b.n	801707c <HAL_PCD_EP_DB_Transmit+0x560>
 801704a:	68bb      	ldr	r3, [r7, #8]
 801704c:	785b      	ldrb	r3, [r3, #1]
 801704e:	2b01      	cmp	r3, #1
 8017050:	d114      	bne.n	801707c <HAL_PCD_EP_DB_Transmit+0x560>
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	2250      	movs	r2, #80	@ 0x50
 8017058:	5a9b      	ldrh	r3, [r3, r2]
 801705a:	b29b      	uxth	r3, r3
 801705c:	001a      	movs	r2, r3
 801705e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017060:	189b      	adds	r3, r3, r2
 8017062:	677b      	str	r3, [r7, #116]	@ 0x74
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	781b      	ldrb	r3, [r3, #0]
 8017068:	00da      	lsls	r2, r3, #3
 801706a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801706c:	18d3      	adds	r3, r2, r3
 801706e:	4a75      	ldr	r2, [pc, #468]	@ (8017244 <HAL_PCD_EP_DB_Transmit+0x728>)
 8017070:	4694      	mov	ip, r2
 8017072:	4463      	add	r3, ip
 8017074:	673b      	str	r3, [r7, #112]	@ 0x70
 8017076:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017078:	2200      	movs	r2, #0
 801707a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801707c:	68bb      	ldr	r3, [r7, #8]
 801707e:	781a      	ldrb	r2, [r3, #0]
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	0011      	movs	r1, r2
 8017084:	0018      	movs	r0, r3
 8017086:	f008 fb43 	bl	801f710 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801708a:	1dbb      	adds	r3, r7, #6
 801708c:	881a      	ldrh	r2, [r3, #0]
 801708e:	2380      	movs	r3, #128	@ 0x80
 8017090:	01db      	lsls	r3, r3, #7
 8017092:	4013      	ands	r3, r2
 8017094:	d000      	beq.n	8017098 <HAL_PCD_EP_DB_Transmit+0x57c>
 8017096:	e11e      	b.n	80172d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	001a      	movs	r2, r3
 801709e:	68bb      	ldr	r3, [r7, #8]
 80170a0:	781b      	ldrb	r3, [r3, #0]
 80170a2:	009b      	lsls	r3, r3, #2
 80170a4:	18d3      	adds	r3, r2, r3
 80170a6:	881b      	ldrh	r3, [r3, #0]
 80170a8:	b29a      	uxth	r2, r3
 80170aa:	2088      	movs	r0, #136	@ 0x88
 80170ac:	183b      	adds	r3, r7, r0
 80170ae:	4967      	ldr	r1, [pc, #412]	@ (801724c <HAL_PCD_EP_DB_Transmit+0x730>)
 80170b0:	400a      	ands	r2, r1
 80170b2:	801a      	strh	r2, [r3, #0]
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	001a      	movs	r2, r3
 80170ba:	68bb      	ldr	r3, [r7, #8]
 80170bc:	781b      	ldrb	r3, [r3, #0]
 80170be:	009b      	lsls	r3, r3, #2
 80170c0:	18d3      	adds	r3, r2, r3
 80170c2:	183a      	adds	r2, r7, r0
 80170c4:	8812      	ldrh	r2, [r2, #0]
 80170c6:	4962      	ldr	r1, [pc, #392]	@ (8017250 <HAL_PCD_EP_DB_Transmit+0x734>)
 80170c8:	430a      	orrs	r2, r1
 80170ca:	b292      	uxth	r2, r2
 80170cc:	801a      	strh	r2, [r3, #0]
 80170ce:	e102      	b.n	80172d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80170d0:	1dbb      	adds	r3, r7, #6
 80170d2:	881a      	ldrh	r2, [r3, #0]
 80170d4:	2380      	movs	r3, #128	@ 0x80
 80170d6:	01db      	lsls	r3, r3, #7
 80170d8:	4013      	ands	r3, r2
 80170da:	d11a      	bne.n	8017112 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	001a      	movs	r2, r3
 80170e2:	68bb      	ldr	r3, [r7, #8]
 80170e4:	781b      	ldrb	r3, [r3, #0]
 80170e6:	009b      	lsls	r3, r3, #2
 80170e8:	18d3      	adds	r3, r2, r3
 80170ea:	881b      	ldrh	r3, [r3, #0]
 80170ec:	b29a      	uxth	r2, r3
 80170ee:	204e      	movs	r0, #78	@ 0x4e
 80170f0:	183b      	adds	r3, r7, r0
 80170f2:	4956      	ldr	r1, [pc, #344]	@ (801724c <HAL_PCD_EP_DB_Transmit+0x730>)
 80170f4:	400a      	ands	r2, r1
 80170f6:	801a      	strh	r2, [r3, #0]
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	001a      	movs	r2, r3
 80170fe:	68bb      	ldr	r3, [r7, #8]
 8017100:	781b      	ldrb	r3, [r3, #0]
 8017102:	009b      	lsls	r3, r3, #2
 8017104:	18d3      	adds	r3, r2, r3
 8017106:	183a      	adds	r2, r7, r0
 8017108:	8812      	ldrh	r2, [r2, #0]
 801710a:	4951      	ldr	r1, [pc, #324]	@ (8017250 <HAL_PCD_EP_DB_Transmit+0x734>)
 801710c:	430a      	orrs	r2, r1
 801710e:	b292      	uxth	r2, r2
 8017110:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8017112:	68bb      	ldr	r3, [r7, #8]
 8017114:	2224      	movs	r2, #36	@ 0x24
 8017116:	5c9b      	ldrb	r3, [r3, r2]
 8017118:	2b01      	cmp	r3, #1
 801711a:	d000      	beq.n	801711e <HAL_PCD_EP_DB_Transmit+0x602>
 801711c:	e0db      	b.n	80172d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801711e:	68bb      	ldr	r3, [r7, #8]
 8017120:	695a      	ldr	r2, [r3, #20]
 8017122:	2186      	movs	r1, #134	@ 0x86
 8017124:	187b      	adds	r3, r7, r1
 8017126:	881b      	ldrh	r3, [r3, #0]
 8017128:	18d2      	adds	r2, r2, r3
 801712a:	68bb      	ldr	r3, [r7, #8]
 801712c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801712e:	68bb      	ldr	r3, [r7, #8]
 8017130:	69da      	ldr	r2, [r3, #28]
 8017132:	187b      	adds	r3, r7, r1
 8017134:	881b      	ldrh	r3, [r3, #0]
 8017136:	18d2      	adds	r2, r2, r3
 8017138:	68bb      	ldr	r3, [r7, #8]
 801713a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801713c:	68bb      	ldr	r3, [r7, #8]
 801713e:	6a1a      	ldr	r2, [r3, #32]
 8017140:	68bb      	ldr	r3, [r7, #8]
 8017142:	691b      	ldr	r3, [r3, #16]
 8017144:	429a      	cmp	r2, r3
 8017146:	d30c      	bcc.n	8017162 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8017148:	68bb      	ldr	r3, [r7, #8]
 801714a:	691b      	ldr	r3, [r3, #16]
 801714c:	218c      	movs	r1, #140	@ 0x8c
 801714e:	187a      	adds	r2, r7, r1
 8017150:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8017152:	68bb      	ldr	r3, [r7, #8]
 8017154:	6a1a      	ldr	r2, [r3, #32]
 8017156:	187b      	adds	r3, r7, r1
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	1ad2      	subs	r2, r2, r3
 801715c:	68bb      	ldr	r3, [r7, #8]
 801715e:	621a      	str	r2, [r3, #32]
 8017160:	e01a      	b.n	8017198 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8017162:	68bb      	ldr	r3, [r7, #8]
 8017164:	6a1b      	ldr	r3, [r3, #32]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d10a      	bne.n	8017180 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801716a:	2386      	movs	r3, #134	@ 0x86
 801716c:	18fb      	adds	r3, r7, r3
 801716e:	881b      	ldrh	r3, [r3, #0]
 8017170:	228c      	movs	r2, #140	@ 0x8c
 8017172:	18ba      	adds	r2, r7, r2
 8017174:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8017176:	68bb      	ldr	r3, [r7, #8]
 8017178:	2224      	movs	r2, #36	@ 0x24
 801717a:	2100      	movs	r1, #0
 801717c:	5499      	strb	r1, [r3, r2]
 801717e:	e00b      	b.n	8017198 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8017180:	68bb      	ldr	r3, [r7, #8]
 8017182:	6a1b      	ldr	r3, [r3, #32]
 8017184:	228c      	movs	r2, #140	@ 0x8c
 8017186:	18ba      	adds	r2, r7, r2
 8017188:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801718a:	68bb      	ldr	r3, [r7, #8]
 801718c:	2200      	movs	r2, #0
 801718e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8017190:	68bb      	ldr	r3, [r7, #8]
 8017192:	2224      	movs	r2, #36	@ 0x24
 8017194:	2100      	movs	r1, #0
 8017196:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	657b      	str	r3, [r7, #84]	@ 0x54
 801719e:	68bb      	ldr	r3, [r7, #8]
 80171a0:	785b      	ldrb	r3, [r3, #1]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d000      	beq.n	80171a8 <HAL_PCD_EP_DB_Transmit+0x68c>
 80171a6:	e06e      	b.n	8017286 <HAL_PCD_EP_DB_Transmit+0x76a>
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	2250      	movs	r2, #80	@ 0x50
 80171b4:	5a9b      	ldrh	r3, [r3, r2]
 80171b6:	b29b      	uxth	r3, r3
 80171b8:	001a      	movs	r2, r3
 80171ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80171bc:	189b      	adds	r3, r3, r2
 80171be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80171c0:	68bb      	ldr	r3, [r7, #8]
 80171c2:	781b      	ldrb	r3, [r3, #0]
 80171c4:	00da      	lsls	r2, r3, #3
 80171c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80171c8:	18d3      	adds	r3, r2, r3
 80171ca:	4a1e      	ldr	r2, [pc, #120]	@ (8017244 <HAL_PCD_EP_DB_Transmit+0x728>)
 80171cc:	4694      	mov	ip, r2
 80171ce:	4463      	add	r3, ip
 80171d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80171d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80171d4:	881b      	ldrh	r3, [r3, #0]
 80171d6:	b29b      	uxth	r3, r3
 80171d8:	059b      	lsls	r3, r3, #22
 80171da:	0d9b      	lsrs	r3, r3, #22
 80171dc:	b29a      	uxth	r2, r3
 80171de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80171e0:	801a      	strh	r2, [r3, #0]
 80171e2:	228c      	movs	r2, #140	@ 0x8c
 80171e4:	18bb      	adds	r3, r7, r2
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80171ea:	d91a      	bls.n	8017222 <HAL_PCD_EP_DB_Transmit+0x706>
 80171ec:	18bb      	adds	r3, r7, r2
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	095b      	lsrs	r3, r3, #5
 80171f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80171f4:	18bb      	adds	r3, r7, r2
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	221f      	movs	r2, #31
 80171fa:	4013      	ands	r3, r2
 80171fc:	d102      	bne.n	8017204 <HAL_PCD_EP_DB_Transmit+0x6e8>
 80171fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017200:	3b01      	subs	r3, #1
 8017202:	66bb      	str	r3, [r7, #104]	@ 0x68
 8017204:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017206:	881b      	ldrh	r3, [r3, #0]
 8017208:	b29a      	uxth	r2, r3
 801720a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801720c:	b29b      	uxth	r3, r3
 801720e:	029b      	lsls	r3, r3, #10
 8017210:	b29b      	uxth	r3, r3
 8017212:	4313      	orrs	r3, r2
 8017214:	b29b      	uxth	r3, r3
 8017216:	4a0c      	ldr	r2, [pc, #48]	@ (8017248 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8017218:	4313      	orrs	r3, r2
 801721a:	b29a      	uxth	r2, r3
 801721c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801721e:	801a      	strh	r2, [r3, #0]
 8017220:	e04d      	b.n	80172be <HAL_PCD_EP_DB_Transmit+0x7a2>
 8017222:	238c      	movs	r3, #140	@ 0x8c
 8017224:	18fb      	adds	r3, r7, r3
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d113      	bne.n	8017254 <HAL_PCD_EP_DB_Transmit+0x738>
 801722c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801722e:	881b      	ldrh	r3, [r3, #0]
 8017230:	b29b      	uxth	r3, r3
 8017232:	4a05      	ldr	r2, [pc, #20]	@ (8017248 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8017234:	4313      	orrs	r3, r2
 8017236:	b29a      	uxth	r2, r3
 8017238:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801723a:	801a      	strh	r2, [r3, #0]
 801723c:	e03f      	b.n	80172be <HAL_PCD_EP_DB_Transmit+0x7a2>
 801723e:	46c0      	nop			@ (mov r8, r8)
 8017240:	00000402 	.word	0x00000402
 8017244:	00000406 	.word	0x00000406
 8017248:	ffff8000 	.word	0xffff8000
 801724c:	ffff8f8f 	.word	0xffff8f8f
 8017250:	ffffc080 	.word	0xffffc080
 8017254:	228c      	movs	r2, #140	@ 0x8c
 8017256:	18bb      	adds	r3, r7, r2
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	085b      	lsrs	r3, r3, #1
 801725c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801725e:	18bb      	adds	r3, r7, r2
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	2201      	movs	r2, #1
 8017264:	4013      	ands	r3, r2
 8017266:	d002      	beq.n	801726e <HAL_PCD_EP_DB_Transmit+0x752>
 8017268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801726a:	3301      	adds	r3, #1
 801726c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801726e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017270:	881b      	ldrh	r3, [r3, #0]
 8017272:	b29a      	uxth	r2, r3
 8017274:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017276:	b29b      	uxth	r3, r3
 8017278:	029b      	lsls	r3, r3, #10
 801727a:	b29b      	uxth	r3, r3
 801727c:	4313      	orrs	r3, r2
 801727e:	b29a      	uxth	r2, r3
 8017280:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017282:	801a      	strh	r2, [r3, #0]
 8017284:	e01b      	b.n	80172be <HAL_PCD_EP_DB_Transmit+0x7a2>
 8017286:	68bb      	ldr	r3, [r7, #8]
 8017288:	785b      	ldrb	r3, [r3, #1]
 801728a:	2b01      	cmp	r3, #1
 801728c:	d117      	bne.n	80172be <HAL_PCD_EP_DB_Transmit+0x7a2>
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	2250      	movs	r2, #80	@ 0x50
 8017294:	5a9b      	ldrh	r3, [r3, r2]
 8017296:	b29b      	uxth	r3, r3
 8017298:	001a      	movs	r2, r3
 801729a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801729c:	189b      	adds	r3, r3, r2
 801729e:	657b      	str	r3, [r7, #84]	@ 0x54
 80172a0:	68bb      	ldr	r3, [r7, #8]
 80172a2:	781b      	ldrb	r3, [r3, #0]
 80172a4:	00da      	lsls	r2, r3, #3
 80172a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80172a8:	18d3      	adds	r3, r2, r3
 80172aa:	4a21      	ldr	r2, [pc, #132]	@ (8017330 <HAL_PCD_EP_DB_Transmit+0x814>)
 80172ac:	4694      	mov	ip, r2
 80172ae:	4463      	add	r3, ip
 80172b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80172b2:	238c      	movs	r3, #140	@ 0x8c
 80172b4:	18fb      	adds	r3, r7, r3
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	b29a      	uxth	r2, r3
 80172ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172bc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	6818      	ldr	r0, [r3, #0]
 80172c2:	68bb      	ldr	r3, [r7, #8]
 80172c4:	6959      	ldr	r1, [r3, #20]
 80172c6:	68bb      	ldr	r3, [r7, #8]
 80172c8:	895a      	ldrh	r2, [r3, #10]
 80172ca:	238c      	movs	r3, #140	@ 0x8c
 80172cc:	18fb      	adds	r3, r7, r3
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	b29b      	uxth	r3, r3
 80172d2:	f006 f999 	bl	801d608 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	001a      	movs	r2, r3
 80172dc:	68bb      	ldr	r3, [r7, #8]
 80172de:	781b      	ldrb	r3, [r3, #0]
 80172e0:	009b      	lsls	r3, r3, #2
 80172e2:	18d3      	adds	r3, r2, r3
 80172e4:	881b      	ldrh	r3, [r3, #0]
 80172e6:	b29a      	uxth	r2, r3
 80172e8:	2014      	movs	r0, #20
 80172ea:	183b      	adds	r3, r7, r0
 80172ec:	4911      	ldr	r1, [pc, #68]	@ (8017334 <HAL_PCD_EP_DB_Transmit+0x818>)
 80172ee:	400a      	ands	r2, r1
 80172f0:	801a      	strh	r2, [r3, #0]
 80172f2:	183b      	adds	r3, r7, r0
 80172f4:	183a      	adds	r2, r7, r0
 80172f6:	8812      	ldrh	r2, [r2, #0]
 80172f8:	2110      	movs	r1, #16
 80172fa:	404a      	eors	r2, r1
 80172fc:	801a      	strh	r2, [r3, #0]
 80172fe:	183b      	adds	r3, r7, r0
 8017300:	183a      	adds	r2, r7, r0
 8017302:	8812      	ldrh	r2, [r2, #0]
 8017304:	2120      	movs	r1, #32
 8017306:	404a      	eors	r2, r1
 8017308:	801a      	strh	r2, [r3, #0]
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	001a      	movs	r2, r3
 8017310:	68bb      	ldr	r3, [r7, #8]
 8017312:	781b      	ldrb	r3, [r3, #0]
 8017314:	009b      	lsls	r3, r3, #2
 8017316:	18d3      	adds	r3, r2, r3
 8017318:	183a      	adds	r2, r7, r0
 801731a:	8812      	ldrh	r2, [r2, #0]
 801731c:	4906      	ldr	r1, [pc, #24]	@ (8017338 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801731e:	430a      	orrs	r2, r1
 8017320:	b292      	uxth	r2, r2
 8017322:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8017324:	2300      	movs	r3, #0
}
 8017326:	0018      	movs	r0, r3
 8017328:	46bd      	mov	sp, r7
 801732a:	b024      	add	sp, #144	@ 0x90
 801732c:	bd80      	pop	{r7, pc}
 801732e:	46c0      	nop			@ (mov r8, r8)
 8017330:	00000406 	.word	0x00000406
 8017334:	ffff8fbf 	.word	0xffff8fbf
 8017338:	ffff8080 	.word	0xffff8080

0801733c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801733c:	b590      	push	{r4, r7, lr}
 801733e:	b087      	sub	sp, #28
 8017340:	af00      	add	r7, sp, #0
 8017342:	60f8      	str	r0, [r7, #12]
 8017344:	0008      	movs	r0, r1
 8017346:	0011      	movs	r1, r2
 8017348:	607b      	str	r3, [r7, #4]
 801734a:	240a      	movs	r4, #10
 801734c:	193b      	adds	r3, r7, r4
 801734e:	1c02      	adds	r2, r0, #0
 8017350:	801a      	strh	r2, [r3, #0]
 8017352:	2308      	movs	r3, #8
 8017354:	18fb      	adds	r3, r7, r3
 8017356:	1c0a      	adds	r2, r1, #0
 8017358:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801735a:	0021      	movs	r1, r4
 801735c:	187b      	adds	r3, r7, r1
 801735e:	881b      	ldrh	r3, [r3, #0]
 8017360:	2280      	movs	r2, #128	@ 0x80
 8017362:	4013      	ands	r3, r2
 8017364:	b29b      	uxth	r3, r3
 8017366:	2b00      	cmp	r3, #0
 8017368:	d00c      	beq.n	8017384 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801736a:	187b      	adds	r3, r7, r1
 801736c:	881b      	ldrh	r3, [r3, #0]
 801736e:	2207      	movs	r2, #7
 8017370:	4013      	ands	r3, r2
 8017372:	1c5a      	adds	r2, r3, #1
 8017374:	0013      	movs	r3, r2
 8017376:	009b      	lsls	r3, r3, #2
 8017378:	189b      	adds	r3, r3, r2
 801737a:	00db      	lsls	r3, r3, #3
 801737c:	68fa      	ldr	r2, [r7, #12]
 801737e:	18d3      	adds	r3, r2, r3
 8017380:	617b      	str	r3, [r7, #20]
 8017382:	e00b      	b.n	801739c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8017384:	230a      	movs	r3, #10
 8017386:	18fb      	adds	r3, r7, r3
 8017388:	881a      	ldrh	r2, [r3, #0]
 801738a:	0013      	movs	r3, r2
 801738c:	009b      	lsls	r3, r3, #2
 801738e:	189b      	adds	r3, r3, r2
 8017390:	00db      	lsls	r3, r3, #3
 8017392:	3369      	adds	r3, #105	@ 0x69
 8017394:	33ff      	adds	r3, #255	@ 0xff
 8017396:	68fa      	ldr	r2, [r7, #12]
 8017398:	18d3      	adds	r3, r2, r3
 801739a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801739c:	2308      	movs	r3, #8
 801739e:	18fb      	adds	r3, r7, r3
 80173a0:	881b      	ldrh	r3, [r3, #0]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d107      	bne.n	80173b6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80173a6:	697b      	ldr	r3, [r7, #20]
 80173a8:	2200      	movs	r2, #0
 80173aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	b29a      	uxth	r2, r3
 80173b0:	697b      	ldr	r3, [r7, #20]
 80173b2:	80da      	strh	r2, [r3, #6]
 80173b4:	e00b      	b.n	80173ce <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80173b6:	697b      	ldr	r3, [r7, #20]
 80173b8:	2201      	movs	r2, #1
 80173ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	b29a      	uxth	r2, r3
 80173c0:	697b      	ldr	r3, [r7, #20]
 80173c2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	0c1b      	lsrs	r3, r3, #16
 80173c8:	b29a      	uxth	r2, r3
 80173ca:	697b      	ldr	r3, [r7, #20]
 80173cc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80173ce:	2300      	movs	r3, #0
}
 80173d0:	0018      	movs	r0, r3
 80173d2:	46bd      	mov	sp, r7
 80173d4:	b007      	add	sp, #28
 80173d6:	bd90      	pop	{r4, r7, pc}

080173d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80173d8:	b580      	push	{r7, lr}
 80173da:	b084      	sub	sp, #16
 80173dc:	af00      	add	r7, sp, #0
 80173de:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80173e6:	687a      	ldr	r2, [r7, #4]
 80173e8:	23ba      	movs	r3, #186	@ 0xba
 80173ea:	009b      	lsls	r3, r3, #2
 80173ec:	2101      	movs	r1, #1
 80173ee:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80173f0:	687a      	ldr	r2, [r7, #4]
 80173f2:	23b8      	movs	r3, #184	@ 0xb8
 80173f4:	009b      	lsls	r3, r3, #2
 80173f6:	2100      	movs	r1, #0
 80173f8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	2254      	movs	r2, #84	@ 0x54
 80173fe:	5a9b      	ldrh	r3, [r3, r2]
 8017400:	b29b      	uxth	r3, r3
 8017402:	2201      	movs	r2, #1
 8017404:	4313      	orrs	r3, r2
 8017406:	b299      	uxth	r1, r3
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	2254      	movs	r2, #84	@ 0x54
 801740c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	2254      	movs	r2, #84	@ 0x54
 8017412:	5a9b      	ldrh	r3, [r3, r2]
 8017414:	b29b      	uxth	r3, r3
 8017416:	2202      	movs	r2, #2
 8017418:	4313      	orrs	r3, r2
 801741a:	b299      	uxth	r1, r3
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	2254      	movs	r2, #84	@ 0x54
 8017420:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8017422:	2300      	movs	r3, #0
}
 8017424:	0018      	movs	r0, r3
 8017426:	46bd      	mov	sp, r7
 8017428:	b004      	add	sp, #16
 801742a:	bd80      	pop	{r7, pc}

0801742c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b082      	sub	sp, #8
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
 8017434:	000a      	movs	r2, r1
 8017436:	1cfb      	adds	r3, r7, #3
 8017438:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801743a:	46c0      	nop			@ (mov r8, r8)
 801743c:	46bd      	mov	sp, r7
 801743e:	b002      	add	sp, #8
 8017440:	bd80      	pop	{r7, pc}
	...

08017444 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8017448:	4b04      	ldr	r3, [pc, #16]	@ (801745c <HAL_PWR_EnableBkUpAccess+0x18>)
 801744a:	681a      	ldr	r2, [r3, #0]
 801744c:	4b03      	ldr	r3, [pc, #12]	@ (801745c <HAL_PWR_EnableBkUpAccess+0x18>)
 801744e:	2180      	movs	r1, #128	@ 0x80
 8017450:	0049      	lsls	r1, r1, #1
 8017452:	430a      	orrs	r2, r1
 8017454:	601a      	str	r2, [r3, #0]
}
 8017456:	46c0      	nop			@ (mov r8, r8)
 8017458:	46bd      	mov	sp, r7
 801745a:	bd80      	pop	{r7, pc}
 801745c:	40007000 	.word	0x40007000

08017460 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8017460:	b580      	push	{r7, lr}
 8017462:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8017464:	4b04      	ldr	r3, [pc, #16]	@ (8017478 <HAL_PWR_DisableBkUpAccess+0x18>)
 8017466:	681a      	ldr	r2, [r3, #0]
 8017468:	4b03      	ldr	r3, [pc, #12]	@ (8017478 <HAL_PWR_DisableBkUpAccess+0x18>)
 801746a:	4904      	ldr	r1, [pc, #16]	@ (801747c <HAL_PWR_DisableBkUpAccess+0x1c>)
 801746c:	400a      	ands	r2, r1
 801746e:	601a      	str	r2, [r3, #0]
}
 8017470:	46c0      	nop			@ (mov r8, r8)
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}
 8017476:	46c0      	nop			@ (mov r8, r8)
 8017478:	40007000 	.word	0x40007000
 801747c:	fffffeff 	.word	0xfffffeff

08017480 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8017480:	b580      	push	{r7, lr}
 8017482:	b086      	sub	sp, #24
 8017484:	af00      	add	r7, sp, #0
 8017486:	6078      	str	r0, [r7, #4]
 8017488:	000a      	movs	r2, r1
 801748a:	1cfb      	adds	r3, r7, #3
 801748c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801748e:	2300      	movs	r3, #0
 8017490:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8017492:	4b25      	ldr	r3, [pc, #148]	@ (8017528 <HAL_PWR_EnterSTOPMode+0xa8>)
 8017494:	681a      	ldr	r2, [r3, #0]
 8017496:	2380      	movs	r3, #128	@ 0x80
 8017498:	009b      	lsls	r3, r3, #2
 801749a:	4013      	ands	r3, r2
 801749c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801749e:	4b23      	ldr	r3, [pc, #140]	@ (801752c <HAL_PWR_EnterSTOPMode+0xac>)
 80174a0:	6a1b      	ldr	r3, [r3, #32]
 80174a2:	2201      	movs	r2, #1
 80174a4:	4013      	ands	r3, r2
 80174a6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80174a8:	693b      	ldr	r3, [r7, #16]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d008      	beq.n	80174c0 <HAL_PWR_EnterSTOPMode+0x40>
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d005      	beq.n	80174c0 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80174b4:	4b1c      	ldr	r3, [pc, #112]	@ (8017528 <HAL_PWR_EnterSTOPMode+0xa8>)
 80174b6:	681a      	ldr	r2, [r3, #0]
 80174b8:	4b1b      	ldr	r3, [pc, #108]	@ (8017528 <HAL_PWR_EnterSTOPMode+0xa8>)
 80174ba:	491d      	ldr	r1, [pc, #116]	@ (8017530 <HAL_PWR_EnterSTOPMode+0xb0>)
 80174bc:	400a      	ands	r2, r1
 80174be:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80174c0:	4b19      	ldr	r3, [pc, #100]	@ (8017528 <HAL_PWR_EnterSTOPMode+0xa8>)
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80174c6:	697b      	ldr	r3, [r7, #20]
 80174c8:	2203      	movs	r2, #3
 80174ca:	4393      	bics	r3, r2
 80174cc:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80174ce:	697a      	ldr	r2, [r7, #20]
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	4313      	orrs	r3, r2
 80174d4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80174d6:	4b14      	ldr	r3, [pc, #80]	@ (8017528 <HAL_PWR_EnterSTOPMode+0xa8>)
 80174d8:	697a      	ldr	r2, [r7, #20]
 80174da:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80174dc:	4b15      	ldr	r3, [pc, #84]	@ (8017534 <HAL_PWR_EnterSTOPMode+0xb4>)
 80174de:	691a      	ldr	r2, [r3, #16]
 80174e0:	4b14      	ldr	r3, [pc, #80]	@ (8017534 <HAL_PWR_EnterSTOPMode+0xb4>)
 80174e2:	2104      	movs	r1, #4
 80174e4:	430a      	orrs	r2, r1
 80174e6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80174e8:	1cfb      	adds	r3, r7, #3
 80174ea:	781b      	ldrb	r3, [r3, #0]
 80174ec:	2b01      	cmp	r3, #1
 80174ee:	d101      	bne.n	80174f4 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80174f0:	bf30      	wfi
 80174f2:	e002      	b.n	80174fa <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80174f4:	bf40      	sev
    __WFE();
 80174f6:	bf20      	wfe
    __WFE();
 80174f8:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80174fa:	4b0e      	ldr	r3, [pc, #56]	@ (8017534 <HAL_PWR_EnterSTOPMode+0xb4>)
 80174fc:	691a      	ldr	r2, [r3, #16]
 80174fe:	4b0d      	ldr	r3, [pc, #52]	@ (8017534 <HAL_PWR_EnterSTOPMode+0xb4>)
 8017500:	2104      	movs	r1, #4
 8017502:	438a      	bics	r2, r1
 8017504:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8017506:	693b      	ldr	r3, [r7, #16]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d009      	beq.n	8017520 <HAL_PWR_EnterSTOPMode+0xa0>
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d006      	beq.n	8017520 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8017512:	4b05      	ldr	r3, [pc, #20]	@ (8017528 <HAL_PWR_EnterSTOPMode+0xa8>)
 8017514:	681a      	ldr	r2, [r3, #0]
 8017516:	4b04      	ldr	r3, [pc, #16]	@ (8017528 <HAL_PWR_EnterSTOPMode+0xa8>)
 8017518:	2180      	movs	r1, #128	@ 0x80
 801751a:	0089      	lsls	r1, r1, #2
 801751c:	430a      	orrs	r2, r1
 801751e:	601a      	str	r2, [r3, #0]
  }
}
 8017520:	46c0      	nop			@ (mov r8, r8)
 8017522:	46bd      	mov	sp, r7
 8017524:	b006      	add	sp, #24
 8017526:	bd80      	pop	{r7, pc}
 8017528:	40007000 	.word	0x40007000
 801752c:	40010000 	.word	0x40010000
 8017530:	fffffdff 	.word	0xfffffdff
 8017534:	e000ed00 	.word	0xe000ed00

08017538 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8017538:	b580      	push	{r7, lr}
 801753a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 801753c:	4b07      	ldr	r3, [pc, #28]	@ (801755c <HAL_PWR_EnterSTANDBYMode+0x24>)
 801753e:	681a      	ldr	r2, [r3, #0]
 8017540:	4b06      	ldr	r3, [pc, #24]	@ (801755c <HAL_PWR_EnterSTANDBYMode+0x24>)
 8017542:	2102      	movs	r1, #2
 8017544:	430a      	orrs	r2, r1
 8017546:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8017548:	4b05      	ldr	r3, [pc, #20]	@ (8017560 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801754a:	691a      	ldr	r2, [r3, #16]
 801754c:	4b04      	ldr	r3, [pc, #16]	@ (8017560 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801754e:	2104      	movs	r1, #4
 8017550:	430a      	orrs	r2, r1
 8017552:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8017554:	bf30      	wfi
}
 8017556:	46c0      	nop			@ (mov r8, r8)
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}
 801755c:	40007000 	.word	0x40007000
 8017560:	e000ed00 	.word	0xe000ed00

08017564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017564:	b5b0      	push	{r4, r5, r7, lr}
 8017566:	b08a      	sub	sp, #40	@ 0x28
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d102      	bne.n	8017578 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8017572:	2301      	movs	r3, #1
 8017574:	f000 fbbf 	bl	8017cf6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017578:	4bc9      	ldr	r3, [pc, #804]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 801757a:	68db      	ldr	r3, [r3, #12]
 801757c:	220c      	movs	r2, #12
 801757e:	4013      	ands	r3, r2
 8017580:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017582:	4bc7      	ldr	r3, [pc, #796]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017584:	68da      	ldr	r2, [r3, #12]
 8017586:	2380      	movs	r3, #128	@ 0x80
 8017588:	025b      	lsls	r3, r3, #9
 801758a:	4013      	ands	r3, r2
 801758c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	2201      	movs	r2, #1
 8017594:	4013      	ands	r3, r2
 8017596:	d100      	bne.n	801759a <HAL_RCC_OscConfig+0x36>
 8017598:	e07e      	b.n	8017698 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801759a:	69fb      	ldr	r3, [r7, #28]
 801759c:	2b08      	cmp	r3, #8
 801759e:	d007      	beq.n	80175b0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80175a0:	69fb      	ldr	r3, [r7, #28]
 80175a2:	2b0c      	cmp	r3, #12
 80175a4:	d112      	bne.n	80175cc <HAL_RCC_OscConfig+0x68>
 80175a6:	69ba      	ldr	r2, [r7, #24]
 80175a8:	2380      	movs	r3, #128	@ 0x80
 80175aa:	025b      	lsls	r3, r3, #9
 80175ac:	429a      	cmp	r2, r3
 80175ae:	d10d      	bne.n	80175cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80175b0:	4bbb      	ldr	r3, [pc, #748]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80175b2:	681a      	ldr	r2, [r3, #0]
 80175b4:	2380      	movs	r3, #128	@ 0x80
 80175b6:	029b      	lsls	r3, r3, #10
 80175b8:	4013      	ands	r3, r2
 80175ba:	d100      	bne.n	80175be <HAL_RCC_OscConfig+0x5a>
 80175bc:	e06b      	b.n	8017696 <HAL_RCC_OscConfig+0x132>
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	685b      	ldr	r3, [r3, #4]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d167      	bne.n	8017696 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80175c6:	2301      	movs	r3, #1
 80175c8:	f000 fb95 	bl	8017cf6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	685a      	ldr	r2, [r3, #4]
 80175d0:	2380      	movs	r3, #128	@ 0x80
 80175d2:	025b      	lsls	r3, r3, #9
 80175d4:	429a      	cmp	r2, r3
 80175d6:	d107      	bne.n	80175e8 <HAL_RCC_OscConfig+0x84>
 80175d8:	4bb1      	ldr	r3, [pc, #708]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80175da:	681a      	ldr	r2, [r3, #0]
 80175dc:	4bb0      	ldr	r3, [pc, #704]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80175de:	2180      	movs	r1, #128	@ 0x80
 80175e0:	0249      	lsls	r1, r1, #9
 80175e2:	430a      	orrs	r2, r1
 80175e4:	601a      	str	r2, [r3, #0]
 80175e6:	e027      	b.n	8017638 <HAL_RCC_OscConfig+0xd4>
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	685a      	ldr	r2, [r3, #4]
 80175ec:	23a0      	movs	r3, #160	@ 0xa0
 80175ee:	02db      	lsls	r3, r3, #11
 80175f0:	429a      	cmp	r2, r3
 80175f2:	d10e      	bne.n	8017612 <HAL_RCC_OscConfig+0xae>
 80175f4:	4baa      	ldr	r3, [pc, #680]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80175f6:	681a      	ldr	r2, [r3, #0]
 80175f8:	4ba9      	ldr	r3, [pc, #676]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80175fa:	2180      	movs	r1, #128	@ 0x80
 80175fc:	02c9      	lsls	r1, r1, #11
 80175fe:	430a      	orrs	r2, r1
 8017600:	601a      	str	r2, [r3, #0]
 8017602:	4ba7      	ldr	r3, [pc, #668]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017604:	681a      	ldr	r2, [r3, #0]
 8017606:	4ba6      	ldr	r3, [pc, #664]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017608:	2180      	movs	r1, #128	@ 0x80
 801760a:	0249      	lsls	r1, r1, #9
 801760c:	430a      	orrs	r2, r1
 801760e:	601a      	str	r2, [r3, #0]
 8017610:	e012      	b.n	8017638 <HAL_RCC_OscConfig+0xd4>
 8017612:	4ba3      	ldr	r3, [pc, #652]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017614:	681a      	ldr	r2, [r3, #0]
 8017616:	4ba2      	ldr	r3, [pc, #648]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017618:	49a2      	ldr	r1, [pc, #648]	@ (80178a4 <HAL_RCC_OscConfig+0x340>)
 801761a:	400a      	ands	r2, r1
 801761c:	601a      	str	r2, [r3, #0]
 801761e:	4ba0      	ldr	r3, [pc, #640]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017620:	681a      	ldr	r2, [r3, #0]
 8017622:	2380      	movs	r3, #128	@ 0x80
 8017624:	025b      	lsls	r3, r3, #9
 8017626:	4013      	ands	r3, r2
 8017628:	60fb      	str	r3, [r7, #12]
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	4b9c      	ldr	r3, [pc, #624]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 801762e:	681a      	ldr	r2, [r3, #0]
 8017630:	4b9b      	ldr	r3, [pc, #620]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017632:	499d      	ldr	r1, [pc, #628]	@ (80178a8 <HAL_RCC_OscConfig+0x344>)
 8017634:	400a      	ands	r2, r1
 8017636:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	685b      	ldr	r3, [r3, #4]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d015      	beq.n	801766c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017640:	f7f9 fbc8 	bl	8010dd4 <HAL_GetTick>
 8017644:	0003      	movs	r3, r0
 8017646:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8017648:	e009      	b.n	801765e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801764a:	f7f9 fbc3 	bl	8010dd4 <HAL_GetTick>
 801764e:	0002      	movs	r2, r0
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	1ad3      	subs	r3, r2, r3
 8017654:	2b64      	cmp	r3, #100	@ 0x64
 8017656:	d902      	bls.n	801765e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8017658:	2303      	movs	r3, #3
 801765a:	f000 fb4c 	bl	8017cf6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801765e:	4b90      	ldr	r3, [pc, #576]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017660:	681a      	ldr	r2, [r3, #0]
 8017662:	2380      	movs	r3, #128	@ 0x80
 8017664:	029b      	lsls	r3, r3, #10
 8017666:	4013      	ands	r3, r2
 8017668:	d0ef      	beq.n	801764a <HAL_RCC_OscConfig+0xe6>
 801766a:	e015      	b.n	8017698 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801766c:	f7f9 fbb2 	bl	8010dd4 <HAL_GetTick>
 8017670:	0003      	movs	r3, r0
 8017672:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8017674:	e008      	b.n	8017688 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8017676:	f7f9 fbad 	bl	8010dd4 <HAL_GetTick>
 801767a:	0002      	movs	r2, r0
 801767c:	697b      	ldr	r3, [r7, #20]
 801767e:	1ad3      	subs	r3, r2, r3
 8017680:	2b64      	cmp	r3, #100	@ 0x64
 8017682:	d901      	bls.n	8017688 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8017684:	2303      	movs	r3, #3
 8017686:	e336      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8017688:	4b85      	ldr	r3, [pc, #532]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 801768a:	681a      	ldr	r2, [r3, #0]
 801768c:	2380      	movs	r3, #128	@ 0x80
 801768e:	029b      	lsls	r3, r3, #10
 8017690:	4013      	ands	r3, r2
 8017692:	d1f0      	bne.n	8017676 <HAL_RCC_OscConfig+0x112>
 8017694:	e000      	b.n	8017698 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017696:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	2202      	movs	r2, #2
 801769e:	4013      	ands	r3, r2
 80176a0:	d100      	bne.n	80176a4 <HAL_RCC_OscConfig+0x140>
 80176a2:	e099      	b.n	80177d8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	68db      	ldr	r3, [r3, #12]
 80176a8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80176aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176ac:	2220      	movs	r2, #32
 80176ae:	4013      	ands	r3, r2
 80176b0:	d009      	beq.n	80176c6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80176b2:	4b7b      	ldr	r3, [pc, #492]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80176b4:	681a      	ldr	r2, [r3, #0]
 80176b6:	4b7a      	ldr	r3, [pc, #488]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80176b8:	2120      	movs	r1, #32
 80176ba:	430a      	orrs	r2, r1
 80176bc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80176be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176c0:	2220      	movs	r2, #32
 80176c2:	4393      	bics	r3, r2
 80176c4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80176c6:	69fb      	ldr	r3, [r7, #28]
 80176c8:	2b04      	cmp	r3, #4
 80176ca:	d005      	beq.n	80176d8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80176cc:	69fb      	ldr	r3, [r7, #28]
 80176ce:	2b0c      	cmp	r3, #12
 80176d0:	d13e      	bne.n	8017750 <HAL_RCC_OscConfig+0x1ec>
 80176d2:	69bb      	ldr	r3, [r7, #24]
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d13b      	bne.n	8017750 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80176d8:	4b71      	ldr	r3, [pc, #452]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	2204      	movs	r2, #4
 80176de:	4013      	ands	r3, r2
 80176e0:	d004      	beq.n	80176ec <HAL_RCC_OscConfig+0x188>
 80176e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d101      	bne.n	80176ec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80176e8:	2301      	movs	r3, #1
 80176ea:	e304      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80176ec:	4b6c      	ldr	r3, [pc, #432]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80176ee:	685b      	ldr	r3, [r3, #4]
 80176f0:	4a6e      	ldr	r2, [pc, #440]	@ (80178ac <HAL_RCC_OscConfig+0x348>)
 80176f2:	4013      	ands	r3, r2
 80176f4:	0019      	movs	r1, r3
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	691b      	ldr	r3, [r3, #16]
 80176fa:	021a      	lsls	r2, r3, #8
 80176fc:	4b68      	ldr	r3, [pc, #416]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80176fe:	430a      	orrs	r2, r1
 8017700:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8017702:	4b67      	ldr	r3, [pc, #412]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	2209      	movs	r2, #9
 8017708:	4393      	bics	r3, r2
 801770a:	0019      	movs	r1, r3
 801770c:	4b64      	ldr	r3, [pc, #400]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 801770e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017710:	430a      	orrs	r2, r1
 8017712:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8017714:	f000 fc42 	bl	8017f9c <HAL_RCC_GetSysClockFreq>
 8017718:	0001      	movs	r1, r0
 801771a:	4b61      	ldr	r3, [pc, #388]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 801771c:	68db      	ldr	r3, [r3, #12]
 801771e:	091b      	lsrs	r3, r3, #4
 8017720:	220f      	movs	r2, #15
 8017722:	4013      	ands	r3, r2
 8017724:	4a62      	ldr	r2, [pc, #392]	@ (80178b0 <HAL_RCC_OscConfig+0x34c>)
 8017726:	5cd3      	ldrb	r3, [r2, r3]
 8017728:	000a      	movs	r2, r1
 801772a:	40da      	lsrs	r2, r3
 801772c:	4b61      	ldr	r3, [pc, #388]	@ (80178b4 <HAL_RCC_OscConfig+0x350>)
 801772e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8017730:	4b61      	ldr	r3, [pc, #388]	@ (80178b8 <HAL_RCC_OscConfig+0x354>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	2513      	movs	r5, #19
 8017736:	197c      	adds	r4, r7, r5
 8017738:	0018      	movs	r0, r3
 801773a:	f7f9 fb05 	bl	8010d48 <HAL_InitTick>
 801773e:	0003      	movs	r3, r0
 8017740:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8017742:	197b      	adds	r3, r7, r5
 8017744:	781b      	ldrb	r3, [r3, #0]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d046      	beq.n	80177d8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801774a:	197b      	adds	r3, r7, r5
 801774c:	781b      	ldrb	r3, [r3, #0]
 801774e:	e2d2      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8017750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017752:	2b00      	cmp	r3, #0
 8017754:	d027      	beq.n	80177a6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8017756:	4b52      	ldr	r3, [pc, #328]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	2209      	movs	r2, #9
 801775c:	4393      	bics	r3, r2
 801775e:	0019      	movs	r1, r3
 8017760:	4b4f      	ldr	r3, [pc, #316]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017764:	430a      	orrs	r2, r1
 8017766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017768:	f7f9 fb34 	bl	8010dd4 <HAL_GetTick>
 801776c:	0003      	movs	r3, r0
 801776e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8017770:	e008      	b.n	8017784 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8017772:	f7f9 fb2f 	bl	8010dd4 <HAL_GetTick>
 8017776:	0002      	movs	r2, r0
 8017778:	697b      	ldr	r3, [r7, #20]
 801777a:	1ad3      	subs	r3, r2, r3
 801777c:	2b02      	cmp	r3, #2
 801777e:	d901      	bls.n	8017784 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8017780:	2303      	movs	r3, #3
 8017782:	e2b8      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8017784:	4b46      	ldr	r3, [pc, #280]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	2204      	movs	r2, #4
 801778a:	4013      	ands	r3, r2
 801778c:	d0f1      	beq.n	8017772 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801778e:	4b44      	ldr	r3, [pc, #272]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017790:	685b      	ldr	r3, [r3, #4]
 8017792:	4a46      	ldr	r2, [pc, #280]	@ (80178ac <HAL_RCC_OscConfig+0x348>)
 8017794:	4013      	ands	r3, r2
 8017796:	0019      	movs	r1, r3
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	691b      	ldr	r3, [r3, #16]
 801779c:	021a      	lsls	r2, r3, #8
 801779e:	4b40      	ldr	r3, [pc, #256]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80177a0:	430a      	orrs	r2, r1
 80177a2:	605a      	str	r2, [r3, #4]
 80177a4:	e018      	b.n	80177d8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80177a6:	4b3e      	ldr	r3, [pc, #248]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80177a8:	681a      	ldr	r2, [r3, #0]
 80177aa:	4b3d      	ldr	r3, [pc, #244]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80177ac:	2101      	movs	r1, #1
 80177ae:	438a      	bics	r2, r1
 80177b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80177b2:	f7f9 fb0f 	bl	8010dd4 <HAL_GetTick>
 80177b6:	0003      	movs	r3, r0
 80177b8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80177ba:	e008      	b.n	80177ce <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80177bc:	f7f9 fb0a 	bl	8010dd4 <HAL_GetTick>
 80177c0:	0002      	movs	r2, r0
 80177c2:	697b      	ldr	r3, [r7, #20]
 80177c4:	1ad3      	subs	r3, r2, r3
 80177c6:	2b02      	cmp	r3, #2
 80177c8:	d901      	bls.n	80177ce <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80177ca:	2303      	movs	r3, #3
 80177cc:	e293      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80177ce:	4b34      	ldr	r3, [pc, #208]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	2204      	movs	r2, #4
 80177d4:	4013      	ands	r3, r2
 80177d6:	d1f1      	bne.n	80177bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	2210      	movs	r2, #16
 80177de:	4013      	ands	r3, r2
 80177e0:	d100      	bne.n	80177e4 <HAL_RCC_OscConfig+0x280>
 80177e2:	e0a2      	b.n	801792a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80177e4:	69fb      	ldr	r3, [r7, #28]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d140      	bne.n	801786c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80177ea:	4b2d      	ldr	r3, [pc, #180]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 80177ec:	681a      	ldr	r2, [r3, #0]
 80177ee:	2380      	movs	r3, #128	@ 0x80
 80177f0:	009b      	lsls	r3, r3, #2
 80177f2:	4013      	ands	r3, r2
 80177f4:	d005      	beq.n	8017802 <HAL_RCC_OscConfig+0x29e>
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	69db      	ldr	r3, [r3, #28]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d101      	bne.n	8017802 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80177fe:	2301      	movs	r3, #1
 8017800:	e279      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017802:	4b27      	ldr	r3, [pc, #156]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017804:	685b      	ldr	r3, [r3, #4]
 8017806:	4a2d      	ldr	r2, [pc, #180]	@ (80178bc <HAL_RCC_OscConfig+0x358>)
 8017808:	4013      	ands	r3, r2
 801780a:	0019      	movs	r1, r3
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017810:	4b23      	ldr	r3, [pc, #140]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017812:	430a      	orrs	r2, r1
 8017814:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017816:	4b22      	ldr	r3, [pc, #136]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017818:	685b      	ldr	r3, [r3, #4]
 801781a:	021b      	lsls	r3, r3, #8
 801781c:	0a19      	lsrs	r1, r3, #8
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	6a1b      	ldr	r3, [r3, #32]
 8017822:	061a      	lsls	r2, r3, #24
 8017824:	4b1e      	ldr	r3, [pc, #120]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017826:	430a      	orrs	r2, r1
 8017828:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801782e:	0b5b      	lsrs	r3, r3, #13
 8017830:	3301      	adds	r3, #1
 8017832:	2280      	movs	r2, #128	@ 0x80
 8017834:	0212      	lsls	r2, r2, #8
 8017836:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8017838:	4b19      	ldr	r3, [pc, #100]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 801783a:	68db      	ldr	r3, [r3, #12]
 801783c:	091b      	lsrs	r3, r3, #4
 801783e:	210f      	movs	r1, #15
 8017840:	400b      	ands	r3, r1
 8017842:	491b      	ldr	r1, [pc, #108]	@ (80178b0 <HAL_RCC_OscConfig+0x34c>)
 8017844:	5ccb      	ldrb	r3, [r1, r3]
 8017846:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8017848:	4b1a      	ldr	r3, [pc, #104]	@ (80178b4 <HAL_RCC_OscConfig+0x350>)
 801784a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801784c:	4b1a      	ldr	r3, [pc, #104]	@ (80178b8 <HAL_RCC_OscConfig+0x354>)
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	2513      	movs	r5, #19
 8017852:	197c      	adds	r4, r7, r5
 8017854:	0018      	movs	r0, r3
 8017856:	f7f9 fa77 	bl	8010d48 <HAL_InitTick>
 801785a:	0003      	movs	r3, r0
 801785c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801785e:	197b      	adds	r3, r7, r5
 8017860:	781b      	ldrb	r3, [r3, #0]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d061      	beq.n	801792a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8017866:	197b      	adds	r3, r7, r5
 8017868:	781b      	ldrb	r3, [r3, #0]
 801786a:	e244      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	69db      	ldr	r3, [r3, #28]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d040      	beq.n	80178f6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8017874:	4b0a      	ldr	r3, [pc, #40]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 8017876:	681a      	ldr	r2, [r3, #0]
 8017878:	4b09      	ldr	r3, [pc, #36]	@ (80178a0 <HAL_RCC_OscConfig+0x33c>)
 801787a:	2180      	movs	r1, #128	@ 0x80
 801787c:	0049      	lsls	r1, r1, #1
 801787e:	430a      	orrs	r2, r1
 8017880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017882:	f7f9 faa7 	bl	8010dd4 <HAL_GetTick>
 8017886:	0003      	movs	r3, r0
 8017888:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801788a:	e019      	b.n	80178c0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801788c:	f7f9 faa2 	bl	8010dd4 <HAL_GetTick>
 8017890:	0002      	movs	r2, r0
 8017892:	697b      	ldr	r3, [r7, #20]
 8017894:	1ad3      	subs	r3, r2, r3
 8017896:	2b02      	cmp	r3, #2
 8017898:	d912      	bls.n	80178c0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801789a:	2303      	movs	r3, #3
 801789c:	e22b      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
 801789e:	46c0      	nop			@ (mov r8, r8)
 80178a0:	40021000 	.word	0x40021000
 80178a4:	fffeffff 	.word	0xfffeffff
 80178a8:	fffbffff 	.word	0xfffbffff
 80178ac:	ffffe0ff 	.word	0xffffe0ff
 80178b0:	08028aac 	.word	0x08028aac
 80178b4:	200000dc 	.word	0x200000dc
 80178b8:	200000ec 	.word	0x200000ec
 80178bc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80178c0:	4bca      	ldr	r3, [pc, #808]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 80178c2:	681a      	ldr	r2, [r3, #0]
 80178c4:	2380      	movs	r3, #128	@ 0x80
 80178c6:	009b      	lsls	r3, r3, #2
 80178c8:	4013      	ands	r3, r2
 80178ca:	d0df      	beq.n	801788c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80178cc:	4bc7      	ldr	r3, [pc, #796]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 80178ce:	685b      	ldr	r3, [r3, #4]
 80178d0:	4ac7      	ldr	r2, [pc, #796]	@ (8017bf0 <HAL_RCC_OscConfig+0x68c>)
 80178d2:	4013      	ands	r3, r2
 80178d4:	0019      	movs	r1, r3
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80178da:	4bc4      	ldr	r3, [pc, #784]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 80178dc:	430a      	orrs	r2, r1
 80178de:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80178e0:	4bc2      	ldr	r3, [pc, #776]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 80178e2:	685b      	ldr	r3, [r3, #4]
 80178e4:	021b      	lsls	r3, r3, #8
 80178e6:	0a19      	lsrs	r1, r3, #8
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	6a1b      	ldr	r3, [r3, #32]
 80178ec:	061a      	lsls	r2, r3, #24
 80178ee:	4bbf      	ldr	r3, [pc, #764]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 80178f0:	430a      	orrs	r2, r1
 80178f2:	605a      	str	r2, [r3, #4]
 80178f4:	e019      	b.n	801792a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80178f6:	4bbd      	ldr	r3, [pc, #756]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 80178f8:	681a      	ldr	r2, [r3, #0]
 80178fa:	4bbc      	ldr	r3, [pc, #752]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 80178fc:	49bd      	ldr	r1, [pc, #756]	@ (8017bf4 <HAL_RCC_OscConfig+0x690>)
 80178fe:	400a      	ands	r2, r1
 8017900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017902:	f7f9 fa67 	bl	8010dd4 <HAL_GetTick>
 8017906:	0003      	movs	r3, r0
 8017908:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801790a:	e008      	b.n	801791e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801790c:	f7f9 fa62 	bl	8010dd4 <HAL_GetTick>
 8017910:	0002      	movs	r2, r0
 8017912:	697b      	ldr	r3, [r7, #20]
 8017914:	1ad3      	subs	r3, r2, r3
 8017916:	2b02      	cmp	r3, #2
 8017918:	d901      	bls.n	801791e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801791a:	2303      	movs	r3, #3
 801791c:	e1eb      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801791e:	4bb3      	ldr	r3, [pc, #716]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017920:	681a      	ldr	r2, [r3, #0]
 8017922:	2380      	movs	r3, #128	@ 0x80
 8017924:	009b      	lsls	r3, r3, #2
 8017926:	4013      	ands	r3, r2
 8017928:	d1f0      	bne.n	801790c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	2208      	movs	r2, #8
 8017930:	4013      	ands	r3, r2
 8017932:	d036      	beq.n	80179a2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	695b      	ldr	r3, [r3, #20]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d019      	beq.n	8017970 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801793c:	4bab      	ldr	r3, [pc, #684]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 801793e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017940:	4baa      	ldr	r3, [pc, #680]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017942:	2101      	movs	r1, #1
 8017944:	430a      	orrs	r2, r1
 8017946:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017948:	f7f9 fa44 	bl	8010dd4 <HAL_GetTick>
 801794c:	0003      	movs	r3, r0
 801794e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8017950:	e008      	b.n	8017964 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8017952:	f7f9 fa3f 	bl	8010dd4 <HAL_GetTick>
 8017956:	0002      	movs	r2, r0
 8017958:	697b      	ldr	r3, [r7, #20]
 801795a:	1ad3      	subs	r3, r2, r3
 801795c:	2b02      	cmp	r3, #2
 801795e:	d901      	bls.n	8017964 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8017960:	2303      	movs	r3, #3
 8017962:	e1c8      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8017964:	4ba1      	ldr	r3, [pc, #644]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017968:	2202      	movs	r2, #2
 801796a:	4013      	ands	r3, r2
 801796c:	d0f1      	beq.n	8017952 <HAL_RCC_OscConfig+0x3ee>
 801796e:	e018      	b.n	80179a2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017970:	4b9e      	ldr	r3, [pc, #632]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017972:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017974:	4b9d      	ldr	r3, [pc, #628]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017976:	2101      	movs	r1, #1
 8017978:	438a      	bics	r2, r1
 801797a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801797c:	f7f9 fa2a 	bl	8010dd4 <HAL_GetTick>
 8017980:	0003      	movs	r3, r0
 8017982:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8017984:	e008      	b.n	8017998 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8017986:	f7f9 fa25 	bl	8010dd4 <HAL_GetTick>
 801798a:	0002      	movs	r2, r0
 801798c:	697b      	ldr	r3, [r7, #20]
 801798e:	1ad3      	subs	r3, r2, r3
 8017990:	2b02      	cmp	r3, #2
 8017992:	d901      	bls.n	8017998 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8017994:	2303      	movs	r3, #3
 8017996:	e1ae      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8017998:	4b94      	ldr	r3, [pc, #592]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 801799a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801799c:	2202      	movs	r2, #2
 801799e:	4013      	ands	r3, r2
 80179a0:	d1f1      	bne.n	8017986 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	2204      	movs	r2, #4
 80179a8:	4013      	ands	r3, r2
 80179aa:	d100      	bne.n	80179ae <HAL_RCC_OscConfig+0x44a>
 80179ac:	e0ae      	b.n	8017b0c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80179ae:	2023      	movs	r0, #35	@ 0x23
 80179b0:	183b      	adds	r3, r7, r0
 80179b2:	2200      	movs	r2, #0
 80179b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80179b6:	4b8d      	ldr	r3, [pc, #564]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 80179b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80179ba:	2380      	movs	r3, #128	@ 0x80
 80179bc:	055b      	lsls	r3, r3, #21
 80179be:	4013      	ands	r3, r2
 80179c0:	d109      	bne.n	80179d6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80179c2:	4b8a      	ldr	r3, [pc, #552]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 80179c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80179c6:	4b89      	ldr	r3, [pc, #548]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 80179c8:	2180      	movs	r1, #128	@ 0x80
 80179ca:	0549      	lsls	r1, r1, #21
 80179cc:	430a      	orrs	r2, r1
 80179ce:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80179d0:	183b      	adds	r3, r7, r0
 80179d2:	2201      	movs	r2, #1
 80179d4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80179d6:	4b88      	ldr	r3, [pc, #544]	@ (8017bf8 <HAL_RCC_OscConfig+0x694>)
 80179d8:	681a      	ldr	r2, [r3, #0]
 80179da:	2380      	movs	r3, #128	@ 0x80
 80179dc:	005b      	lsls	r3, r3, #1
 80179de:	4013      	ands	r3, r2
 80179e0:	d11a      	bne.n	8017a18 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80179e2:	4b85      	ldr	r3, [pc, #532]	@ (8017bf8 <HAL_RCC_OscConfig+0x694>)
 80179e4:	681a      	ldr	r2, [r3, #0]
 80179e6:	4b84      	ldr	r3, [pc, #528]	@ (8017bf8 <HAL_RCC_OscConfig+0x694>)
 80179e8:	2180      	movs	r1, #128	@ 0x80
 80179ea:	0049      	lsls	r1, r1, #1
 80179ec:	430a      	orrs	r2, r1
 80179ee:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80179f0:	f7f9 f9f0 	bl	8010dd4 <HAL_GetTick>
 80179f4:	0003      	movs	r3, r0
 80179f6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80179f8:	e008      	b.n	8017a0c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80179fa:	f7f9 f9eb 	bl	8010dd4 <HAL_GetTick>
 80179fe:	0002      	movs	r2, r0
 8017a00:	697b      	ldr	r3, [r7, #20]
 8017a02:	1ad3      	subs	r3, r2, r3
 8017a04:	2b64      	cmp	r3, #100	@ 0x64
 8017a06:	d901      	bls.n	8017a0c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8017a08:	2303      	movs	r3, #3
 8017a0a:	e174      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017a0c:	4b7a      	ldr	r3, [pc, #488]	@ (8017bf8 <HAL_RCC_OscConfig+0x694>)
 8017a0e:	681a      	ldr	r2, [r3, #0]
 8017a10:	2380      	movs	r3, #128	@ 0x80
 8017a12:	005b      	lsls	r3, r3, #1
 8017a14:	4013      	ands	r3, r2
 8017a16:	d0f0      	beq.n	80179fa <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	689a      	ldr	r2, [r3, #8]
 8017a1c:	2380      	movs	r3, #128	@ 0x80
 8017a1e:	005b      	lsls	r3, r3, #1
 8017a20:	429a      	cmp	r2, r3
 8017a22:	d107      	bne.n	8017a34 <HAL_RCC_OscConfig+0x4d0>
 8017a24:	4b71      	ldr	r3, [pc, #452]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017a26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017a28:	4b70      	ldr	r3, [pc, #448]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017a2a:	2180      	movs	r1, #128	@ 0x80
 8017a2c:	0049      	lsls	r1, r1, #1
 8017a2e:	430a      	orrs	r2, r1
 8017a30:	651a      	str	r2, [r3, #80]	@ 0x50
 8017a32:	e031      	b.n	8017a98 <HAL_RCC_OscConfig+0x534>
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	689b      	ldr	r3, [r3, #8]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d10c      	bne.n	8017a56 <HAL_RCC_OscConfig+0x4f2>
 8017a3c:	4b6b      	ldr	r3, [pc, #428]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017a3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017a40:	4b6a      	ldr	r3, [pc, #424]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017a42:	496c      	ldr	r1, [pc, #432]	@ (8017bf4 <HAL_RCC_OscConfig+0x690>)
 8017a44:	400a      	ands	r2, r1
 8017a46:	651a      	str	r2, [r3, #80]	@ 0x50
 8017a48:	4b68      	ldr	r3, [pc, #416]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017a4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017a4c:	4b67      	ldr	r3, [pc, #412]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017a4e:	496b      	ldr	r1, [pc, #428]	@ (8017bfc <HAL_RCC_OscConfig+0x698>)
 8017a50:	400a      	ands	r2, r1
 8017a52:	651a      	str	r2, [r3, #80]	@ 0x50
 8017a54:	e020      	b.n	8017a98 <HAL_RCC_OscConfig+0x534>
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	689a      	ldr	r2, [r3, #8]
 8017a5a:	23a0      	movs	r3, #160	@ 0xa0
 8017a5c:	00db      	lsls	r3, r3, #3
 8017a5e:	429a      	cmp	r2, r3
 8017a60:	d10e      	bne.n	8017a80 <HAL_RCC_OscConfig+0x51c>
 8017a62:	4b62      	ldr	r3, [pc, #392]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017a64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017a66:	4b61      	ldr	r3, [pc, #388]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017a68:	2180      	movs	r1, #128	@ 0x80
 8017a6a:	00c9      	lsls	r1, r1, #3
 8017a6c:	430a      	orrs	r2, r1
 8017a6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8017a70:	4b5e      	ldr	r3, [pc, #376]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017a72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017a74:	4b5d      	ldr	r3, [pc, #372]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017a76:	2180      	movs	r1, #128	@ 0x80
 8017a78:	0049      	lsls	r1, r1, #1
 8017a7a:	430a      	orrs	r2, r1
 8017a7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8017a7e:	e00b      	b.n	8017a98 <HAL_RCC_OscConfig+0x534>
 8017a80:	4b5a      	ldr	r3, [pc, #360]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017a82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017a84:	4b59      	ldr	r3, [pc, #356]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017a86:	495b      	ldr	r1, [pc, #364]	@ (8017bf4 <HAL_RCC_OscConfig+0x690>)
 8017a88:	400a      	ands	r2, r1
 8017a8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8017a8c:	4b57      	ldr	r3, [pc, #348]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017a8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017a90:	4b56      	ldr	r3, [pc, #344]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017a92:	495a      	ldr	r1, [pc, #360]	@ (8017bfc <HAL_RCC_OscConfig+0x698>)
 8017a94:	400a      	ands	r2, r1
 8017a96:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	689b      	ldr	r3, [r3, #8]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d015      	beq.n	8017acc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017aa0:	f7f9 f998 	bl	8010dd4 <HAL_GetTick>
 8017aa4:	0003      	movs	r3, r0
 8017aa6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8017aa8:	e009      	b.n	8017abe <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017aaa:	f7f9 f993 	bl	8010dd4 <HAL_GetTick>
 8017aae:	0002      	movs	r2, r0
 8017ab0:	697b      	ldr	r3, [r7, #20]
 8017ab2:	1ad3      	subs	r3, r2, r3
 8017ab4:	4a52      	ldr	r2, [pc, #328]	@ (8017c00 <HAL_RCC_OscConfig+0x69c>)
 8017ab6:	4293      	cmp	r3, r2
 8017ab8:	d901      	bls.n	8017abe <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8017aba:	2303      	movs	r3, #3
 8017abc:	e11b      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8017abe:	4b4b      	ldr	r3, [pc, #300]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017ac0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017ac2:	2380      	movs	r3, #128	@ 0x80
 8017ac4:	009b      	lsls	r3, r3, #2
 8017ac6:	4013      	ands	r3, r2
 8017ac8:	d0ef      	beq.n	8017aaa <HAL_RCC_OscConfig+0x546>
 8017aca:	e014      	b.n	8017af6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017acc:	f7f9 f982 	bl	8010dd4 <HAL_GetTick>
 8017ad0:	0003      	movs	r3, r0
 8017ad2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8017ad4:	e009      	b.n	8017aea <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017ad6:	f7f9 f97d 	bl	8010dd4 <HAL_GetTick>
 8017ada:	0002      	movs	r2, r0
 8017adc:	697b      	ldr	r3, [r7, #20]
 8017ade:	1ad3      	subs	r3, r2, r3
 8017ae0:	4a47      	ldr	r2, [pc, #284]	@ (8017c00 <HAL_RCC_OscConfig+0x69c>)
 8017ae2:	4293      	cmp	r3, r2
 8017ae4:	d901      	bls.n	8017aea <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8017ae6:	2303      	movs	r3, #3
 8017ae8:	e105      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8017aea:	4b40      	ldr	r3, [pc, #256]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017aec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017aee:	2380      	movs	r3, #128	@ 0x80
 8017af0:	009b      	lsls	r3, r3, #2
 8017af2:	4013      	ands	r3, r2
 8017af4:	d1ef      	bne.n	8017ad6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8017af6:	2323      	movs	r3, #35	@ 0x23
 8017af8:	18fb      	adds	r3, r7, r3
 8017afa:	781b      	ldrb	r3, [r3, #0]
 8017afc:	2b01      	cmp	r3, #1
 8017afe:	d105      	bne.n	8017b0c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017b00:	4b3a      	ldr	r3, [pc, #232]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017b02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017b04:	4b39      	ldr	r3, [pc, #228]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017b06:	493f      	ldr	r1, [pc, #252]	@ (8017c04 <HAL_RCC_OscConfig+0x6a0>)
 8017b08:	400a      	ands	r2, r1
 8017b0a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	2220      	movs	r2, #32
 8017b12:	4013      	ands	r3, r2
 8017b14:	d049      	beq.n	8017baa <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	699b      	ldr	r3, [r3, #24]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d026      	beq.n	8017b6c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8017b1e:	4b33      	ldr	r3, [pc, #204]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017b20:	689a      	ldr	r2, [r3, #8]
 8017b22:	4b32      	ldr	r3, [pc, #200]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017b24:	2101      	movs	r1, #1
 8017b26:	430a      	orrs	r2, r1
 8017b28:	609a      	str	r2, [r3, #8]
 8017b2a:	4b30      	ldr	r3, [pc, #192]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017b30:	2101      	movs	r1, #1
 8017b32:	430a      	orrs	r2, r1
 8017b34:	635a      	str	r2, [r3, #52]	@ 0x34
 8017b36:	4b34      	ldr	r3, [pc, #208]	@ (8017c08 <HAL_RCC_OscConfig+0x6a4>)
 8017b38:	6a1a      	ldr	r2, [r3, #32]
 8017b3a:	4b33      	ldr	r3, [pc, #204]	@ (8017c08 <HAL_RCC_OscConfig+0x6a4>)
 8017b3c:	2180      	movs	r1, #128	@ 0x80
 8017b3e:	0189      	lsls	r1, r1, #6
 8017b40:	430a      	orrs	r2, r1
 8017b42:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017b44:	f7f9 f946 	bl	8010dd4 <HAL_GetTick>
 8017b48:	0003      	movs	r3, r0
 8017b4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8017b4c:	e008      	b.n	8017b60 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017b4e:	f7f9 f941 	bl	8010dd4 <HAL_GetTick>
 8017b52:	0002      	movs	r2, r0
 8017b54:	697b      	ldr	r3, [r7, #20]
 8017b56:	1ad3      	subs	r3, r2, r3
 8017b58:	2b02      	cmp	r3, #2
 8017b5a:	d901      	bls.n	8017b60 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8017b5c:	2303      	movs	r3, #3
 8017b5e:	e0ca      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8017b60:	4b22      	ldr	r3, [pc, #136]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017b62:	689b      	ldr	r3, [r3, #8]
 8017b64:	2202      	movs	r2, #2
 8017b66:	4013      	ands	r3, r2
 8017b68:	d0f1      	beq.n	8017b4e <HAL_RCC_OscConfig+0x5ea>
 8017b6a:	e01e      	b.n	8017baa <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8017b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017b6e:	689a      	ldr	r2, [r3, #8]
 8017b70:	4b1e      	ldr	r3, [pc, #120]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017b72:	2101      	movs	r1, #1
 8017b74:	438a      	bics	r2, r1
 8017b76:	609a      	str	r2, [r3, #8]
 8017b78:	4b23      	ldr	r3, [pc, #140]	@ (8017c08 <HAL_RCC_OscConfig+0x6a4>)
 8017b7a:	6a1a      	ldr	r2, [r3, #32]
 8017b7c:	4b22      	ldr	r3, [pc, #136]	@ (8017c08 <HAL_RCC_OscConfig+0x6a4>)
 8017b7e:	4923      	ldr	r1, [pc, #140]	@ (8017c0c <HAL_RCC_OscConfig+0x6a8>)
 8017b80:	400a      	ands	r2, r1
 8017b82:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017b84:	f7f9 f926 	bl	8010dd4 <HAL_GetTick>
 8017b88:	0003      	movs	r3, r0
 8017b8a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8017b8c:	e008      	b.n	8017ba0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017b8e:	f7f9 f921 	bl	8010dd4 <HAL_GetTick>
 8017b92:	0002      	movs	r2, r0
 8017b94:	697b      	ldr	r3, [r7, #20]
 8017b96:	1ad3      	subs	r3, r2, r3
 8017b98:	2b02      	cmp	r3, #2
 8017b9a:	d901      	bls.n	8017ba0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8017b9c:	2303      	movs	r3, #3
 8017b9e:	e0aa      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8017ba0:	4b12      	ldr	r3, [pc, #72]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017ba2:	689b      	ldr	r3, [r3, #8]
 8017ba4:	2202      	movs	r2, #2
 8017ba6:	4013      	ands	r3, r2
 8017ba8:	d1f1      	bne.n	8017b8e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d100      	bne.n	8017bb4 <HAL_RCC_OscConfig+0x650>
 8017bb2:	e09f      	b.n	8017cf4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017bb4:	69fb      	ldr	r3, [r7, #28]
 8017bb6:	2b0c      	cmp	r3, #12
 8017bb8:	d100      	bne.n	8017bbc <HAL_RCC_OscConfig+0x658>
 8017bba:	e078      	b.n	8017cae <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017bc0:	2b02      	cmp	r3, #2
 8017bc2:	d159      	bne.n	8017c78 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017bc4:	4b09      	ldr	r3, [pc, #36]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017bc6:	681a      	ldr	r2, [r3, #0]
 8017bc8:	4b08      	ldr	r3, [pc, #32]	@ (8017bec <HAL_RCC_OscConfig+0x688>)
 8017bca:	4911      	ldr	r1, [pc, #68]	@ (8017c10 <HAL_RCC_OscConfig+0x6ac>)
 8017bcc:	400a      	ands	r2, r1
 8017bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017bd0:	f7f9 f900 	bl	8010dd4 <HAL_GetTick>
 8017bd4:	0003      	movs	r3, r0
 8017bd6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8017bd8:	e01c      	b.n	8017c14 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017bda:	f7f9 f8fb 	bl	8010dd4 <HAL_GetTick>
 8017bde:	0002      	movs	r2, r0
 8017be0:	697b      	ldr	r3, [r7, #20]
 8017be2:	1ad3      	subs	r3, r2, r3
 8017be4:	2b02      	cmp	r3, #2
 8017be6:	d915      	bls.n	8017c14 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8017be8:	2303      	movs	r3, #3
 8017bea:	e084      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
 8017bec:	40021000 	.word	0x40021000
 8017bf0:	ffff1fff 	.word	0xffff1fff
 8017bf4:	fffffeff 	.word	0xfffffeff
 8017bf8:	40007000 	.word	0x40007000
 8017bfc:	fffffbff 	.word	0xfffffbff
 8017c00:	00001388 	.word	0x00001388
 8017c04:	efffffff 	.word	0xefffffff
 8017c08:	40010000 	.word	0x40010000
 8017c0c:	ffffdfff 	.word	0xffffdfff
 8017c10:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8017c14:	4b3a      	ldr	r3, [pc, #232]	@ (8017d00 <HAL_RCC_OscConfig+0x79c>)
 8017c16:	681a      	ldr	r2, [r3, #0]
 8017c18:	2380      	movs	r3, #128	@ 0x80
 8017c1a:	049b      	lsls	r3, r3, #18
 8017c1c:	4013      	ands	r3, r2
 8017c1e:	d1dc      	bne.n	8017bda <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8017c20:	4b37      	ldr	r3, [pc, #220]	@ (8017d00 <HAL_RCC_OscConfig+0x79c>)
 8017c22:	68db      	ldr	r3, [r3, #12]
 8017c24:	4a37      	ldr	r2, [pc, #220]	@ (8017d04 <HAL_RCC_OscConfig+0x7a0>)
 8017c26:	4013      	ands	r3, r2
 8017c28:	0019      	movs	r1, r3
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017c32:	431a      	orrs	r2, r3
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017c38:	431a      	orrs	r2, r3
 8017c3a:	4b31      	ldr	r3, [pc, #196]	@ (8017d00 <HAL_RCC_OscConfig+0x79c>)
 8017c3c:	430a      	orrs	r2, r1
 8017c3e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8017c40:	4b2f      	ldr	r3, [pc, #188]	@ (8017d00 <HAL_RCC_OscConfig+0x79c>)
 8017c42:	681a      	ldr	r2, [r3, #0]
 8017c44:	4b2e      	ldr	r3, [pc, #184]	@ (8017d00 <HAL_RCC_OscConfig+0x79c>)
 8017c46:	2180      	movs	r1, #128	@ 0x80
 8017c48:	0449      	lsls	r1, r1, #17
 8017c4a:	430a      	orrs	r2, r1
 8017c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017c4e:	f7f9 f8c1 	bl	8010dd4 <HAL_GetTick>
 8017c52:	0003      	movs	r3, r0
 8017c54:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8017c56:	e008      	b.n	8017c6a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017c58:	f7f9 f8bc 	bl	8010dd4 <HAL_GetTick>
 8017c5c:	0002      	movs	r2, r0
 8017c5e:	697b      	ldr	r3, [r7, #20]
 8017c60:	1ad3      	subs	r3, r2, r3
 8017c62:	2b02      	cmp	r3, #2
 8017c64:	d901      	bls.n	8017c6a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8017c66:	2303      	movs	r3, #3
 8017c68:	e045      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8017c6a:	4b25      	ldr	r3, [pc, #148]	@ (8017d00 <HAL_RCC_OscConfig+0x79c>)
 8017c6c:	681a      	ldr	r2, [r3, #0]
 8017c6e:	2380      	movs	r3, #128	@ 0x80
 8017c70:	049b      	lsls	r3, r3, #18
 8017c72:	4013      	ands	r3, r2
 8017c74:	d0f0      	beq.n	8017c58 <HAL_RCC_OscConfig+0x6f4>
 8017c76:	e03d      	b.n	8017cf4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017c78:	4b21      	ldr	r3, [pc, #132]	@ (8017d00 <HAL_RCC_OscConfig+0x79c>)
 8017c7a:	681a      	ldr	r2, [r3, #0]
 8017c7c:	4b20      	ldr	r3, [pc, #128]	@ (8017d00 <HAL_RCC_OscConfig+0x79c>)
 8017c7e:	4922      	ldr	r1, [pc, #136]	@ (8017d08 <HAL_RCC_OscConfig+0x7a4>)
 8017c80:	400a      	ands	r2, r1
 8017c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017c84:	f7f9 f8a6 	bl	8010dd4 <HAL_GetTick>
 8017c88:	0003      	movs	r3, r0
 8017c8a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8017c8c:	e008      	b.n	8017ca0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017c8e:	f7f9 f8a1 	bl	8010dd4 <HAL_GetTick>
 8017c92:	0002      	movs	r2, r0
 8017c94:	697b      	ldr	r3, [r7, #20]
 8017c96:	1ad3      	subs	r3, r2, r3
 8017c98:	2b02      	cmp	r3, #2
 8017c9a:	d901      	bls.n	8017ca0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8017c9c:	2303      	movs	r3, #3
 8017c9e:	e02a      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8017ca0:	4b17      	ldr	r3, [pc, #92]	@ (8017d00 <HAL_RCC_OscConfig+0x79c>)
 8017ca2:	681a      	ldr	r2, [r3, #0]
 8017ca4:	2380      	movs	r3, #128	@ 0x80
 8017ca6:	049b      	lsls	r3, r3, #18
 8017ca8:	4013      	ands	r3, r2
 8017caa:	d1f0      	bne.n	8017c8e <HAL_RCC_OscConfig+0x72a>
 8017cac:	e022      	b.n	8017cf4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017cb2:	2b01      	cmp	r3, #1
 8017cb4:	d101      	bne.n	8017cba <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8017cb6:	2301      	movs	r3, #1
 8017cb8:	e01d      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8017cba:	4b11      	ldr	r3, [pc, #68]	@ (8017d00 <HAL_RCC_OscConfig+0x79c>)
 8017cbc:	68db      	ldr	r3, [r3, #12]
 8017cbe:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017cc0:	69ba      	ldr	r2, [r7, #24]
 8017cc2:	2380      	movs	r3, #128	@ 0x80
 8017cc4:	025b      	lsls	r3, r3, #9
 8017cc6:	401a      	ands	r2, r3
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ccc:	429a      	cmp	r2, r3
 8017cce:	d10f      	bne.n	8017cf0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8017cd0:	69ba      	ldr	r2, [r7, #24]
 8017cd2:	23f0      	movs	r3, #240	@ 0xf0
 8017cd4:	039b      	lsls	r3, r3, #14
 8017cd6:	401a      	ands	r2, r3
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017cdc:	429a      	cmp	r2, r3
 8017cde:	d107      	bne.n	8017cf0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8017ce0:	69ba      	ldr	r2, [r7, #24]
 8017ce2:	23c0      	movs	r3, #192	@ 0xc0
 8017ce4:	041b      	lsls	r3, r3, #16
 8017ce6:	401a      	ands	r2, r3
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8017cec:	429a      	cmp	r2, r3
 8017cee:	d001      	beq.n	8017cf4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8017cf0:	2301      	movs	r3, #1
 8017cf2:	e000      	b.n	8017cf6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8017cf4:	2300      	movs	r3, #0
}
 8017cf6:	0018      	movs	r0, r3
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	b00a      	add	sp, #40	@ 0x28
 8017cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8017cfe:	46c0      	nop			@ (mov r8, r8)
 8017d00:	40021000 	.word	0x40021000
 8017d04:	ff02ffff 	.word	0xff02ffff
 8017d08:	feffffff 	.word	0xfeffffff

08017d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017d0c:	b5b0      	push	{r4, r5, r7, lr}
 8017d0e:	b084      	sub	sp, #16
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
 8017d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d101      	bne.n	8017d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017d1c:	2301      	movs	r3, #1
 8017d1e:	e128      	b.n	8017f72 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8017d20:	4b96      	ldr	r3, [pc, #600]	@ (8017f7c <HAL_RCC_ClockConfig+0x270>)
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	2201      	movs	r2, #1
 8017d26:	4013      	ands	r3, r2
 8017d28:	683a      	ldr	r2, [r7, #0]
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d91e      	bls.n	8017d6c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017d2e:	4b93      	ldr	r3, [pc, #588]	@ (8017f7c <HAL_RCC_ClockConfig+0x270>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	2201      	movs	r2, #1
 8017d34:	4393      	bics	r3, r2
 8017d36:	0019      	movs	r1, r3
 8017d38:	4b90      	ldr	r3, [pc, #576]	@ (8017f7c <HAL_RCC_ClockConfig+0x270>)
 8017d3a:	683a      	ldr	r2, [r7, #0]
 8017d3c:	430a      	orrs	r2, r1
 8017d3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8017d40:	f7f9 f848 	bl	8010dd4 <HAL_GetTick>
 8017d44:	0003      	movs	r3, r0
 8017d46:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017d48:	e009      	b.n	8017d5e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017d4a:	f7f9 f843 	bl	8010dd4 <HAL_GetTick>
 8017d4e:	0002      	movs	r2, r0
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	1ad3      	subs	r3, r2, r3
 8017d54:	4a8a      	ldr	r2, [pc, #552]	@ (8017f80 <HAL_RCC_ClockConfig+0x274>)
 8017d56:	4293      	cmp	r3, r2
 8017d58:	d901      	bls.n	8017d5e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8017d5a:	2303      	movs	r3, #3
 8017d5c:	e109      	b.n	8017f72 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017d5e:	4b87      	ldr	r3, [pc, #540]	@ (8017f7c <HAL_RCC_ClockConfig+0x270>)
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	2201      	movs	r2, #1
 8017d64:	4013      	ands	r3, r2
 8017d66:	683a      	ldr	r2, [r7, #0]
 8017d68:	429a      	cmp	r2, r3
 8017d6a:	d1ee      	bne.n	8017d4a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	2202      	movs	r2, #2
 8017d72:	4013      	ands	r3, r2
 8017d74:	d009      	beq.n	8017d8a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017d76:	4b83      	ldr	r3, [pc, #524]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017d78:	68db      	ldr	r3, [r3, #12]
 8017d7a:	22f0      	movs	r2, #240	@ 0xf0
 8017d7c:	4393      	bics	r3, r2
 8017d7e:	0019      	movs	r1, r3
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	689a      	ldr	r2, [r3, #8]
 8017d84:	4b7f      	ldr	r3, [pc, #508]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017d86:	430a      	orrs	r2, r1
 8017d88:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	2201      	movs	r2, #1
 8017d90:	4013      	ands	r3, r2
 8017d92:	d100      	bne.n	8017d96 <HAL_RCC_ClockConfig+0x8a>
 8017d94:	e089      	b.n	8017eaa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	685b      	ldr	r3, [r3, #4]
 8017d9a:	2b02      	cmp	r3, #2
 8017d9c:	d107      	bne.n	8017dae <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8017d9e:	4b79      	ldr	r3, [pc, #484]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017da0:	681a      	ldr	r2, [r3, #0]
 8017da2:	2380      	movs	r3, #128	@ 0x80
 8017da4:	029b      	lsls	r3, r3, #10
 8017da6:	4013      	ands	r3, r2
 8017da8:	d120      	bne.n	8017dec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8017daa:	2301      	movs	r3, #1
 8017dac:	e0e1      	b.n	8017f72 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	685b      	ldr	r3, [r3, #4]
 8017db2:	2b03      	cmp	r3, #3
 8017db4:	d107      	bne.n	8017dc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8017db6:	4b73      	ldr	r3, [pc, #460]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017db8:	681a      	ldr	r2, [r3, #0]
 8017dba:	2380      	movs	r3, #128	@ 0x80
 8017dbc:	049b      	lsls	r3, r3, #18
 8017dbe:	4013      	ands	r3, r2
 8017dc0:	d114      	bne.n	8017dec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8017dc2:	2301      	movs	r3, #1
 8017dc4:	e0d5      	b.n	8017f72 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	685b      	ldr	r3, [r3, #4]
 8017dca:	2b01      	cmp	r3, #1
 8017dcc:	d106      	bne.n	8017ddc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8017dce:	4b6d      	ldr	r3, [pc, #436]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	2204      	movs	r2, #4
 8017dd4:	4013      	ands	r3, r2
 8017dd6:	d109      	bne.n	8017dec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8017dd8:	2301      	movs	r3, #1
 8017dda:	e0ca      	b.n	8017f72 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8017ddc:	4b69      	ldr	r3, [pc, #420]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017dde:	681a      	ldr	r2, [r3, #0]
 8017de0:	2380      	movs	r3, #128	@ 0x80
 8017de2:	009b      	lsls	r3, r3, #2
 8017de4:	4013      	ands	r3, r2
 8017de6:	d101      	bne.n	8017dec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8017de8:	2301      	movs	r3, #1
 8017dea:	e0c2      	b.n	8017f72 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8017dec:	4b65      	ldr	r3, [pc, #404]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017dee:	68db      	ldr	r3, [r3, #12]
 8017df0:	2203      	movs	r2, #3
 8017df2:	4393      	bics	r3, r2
 8017df4:	0019      	movs	r1, r3
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	685a      	ldr	r2, [r3, #4]
 8017dfa:	4b62      	ldr	r3, [pc, #392]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017dfc:	430a      	orrs	r2, r1
 8017dfe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8017e00:	f7f8 ffe8 	bl	8010dd4 <HAL_GetTick>
 8017e04:	0003      	movs	r3, r0
 8017e06:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	685b      	ldr	r3, [r3, #4]
 8017e0c:	2b02      	cmp	r3, #2
 8017e0e:	d111      	bne.n	8017e34 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8017e10:	e009      	b.n	8017e26 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017e12:	f7f8 ffdf 	bl	8010dd4 <HAL_GetTick>
 8017e16:	0002      	movs	r2, r0
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	1ad3      	subs	r3, r2, r3
 8017e1c:	4a58      	ldr	r2, [pc, #352]	@ (8017f80 <HAL_RCC_ClockConfig+0x274>)
 8017e1e:	4293      	cmp	r3, r2
 8017e20:	d901      	bls.n	8017e26 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8017e22:	2303      	movs	r3, #3
 8017e24:	e0a5      	b.n	8017f72 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8017e26:	4b57      	ldr	r3, [pc, #348]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017e28:	68db      	ldr	r3, [r3, #12]
 8017e2a:	220c      	movs	r2, #12
 8017e2c:	4013      	ands	r3, r2
 8017e2e:	2b08      	cmp	r3, #8
 8017e30:	d1ef      	bne.n	8017e12 <HAL_RCC_ClockConfig+0x106>
 8017e32:	e03a      	b.n	8017eaa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	685b      	ldr	r3, [r3, #4]
 8017e38:	2b03      	cmp	r3, #3
 8017e3a:	d111      	bne.n	8017e60 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017e3c:	e009      	b.n	8017e52 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017e3e:	f7f8 ffc9 	bl	8010dd4 <HAL_GetTick>
 8017e42:	0002      	movs	r2, r0
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	1ad3      	subs	r3, r2, r3
 8017e48:	4a4d      	ldr	r2, [pc, #308]	@ (8017f80 <HAL_RCC_ClockConfig+0x274>)
 8017e4a:	4293      	cmp	r3, r2
 8017e4c:	d901      	bls.n	8017e52 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8017e4e:	2303      	movs	r3, #3
 8017e50:	e08f      	b.n	8017f72 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017e52:	4b4c      	ldr	r3, [pc, #304]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017e54:	68db      	ldr	r3, [r3, #12]
 8017e56:	220c      	movs	r2, #12
 8017e58:	4013      	ands	r3, r2
 8017e5a:	2b0c      	cmp	r3, #12
 8017e5c:	d1ef      	bne.n	8017e3e <HAL_RCC_ClockConfig+0x132>
 8017e5e:	e024      	b.n	8017eaa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	685b      	ldr	r3, [r3, #4]
 8017e64:	2b01      	cmp	r3, #1
 8017e66:	d11b      	bne.n	8017ea0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8017e68:	e009      	b.n	8017e7e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017e6a:	f7f8 ffb3 	bl	8010dd4 <HAL_GetTick>
 8017e6e:	0002      	movs	r2, r0
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	1ad3      	subs	r3, r2, r3
 8017e74:	4a42      	ldr	r2, [pc, #264]	@ (8017f80 <HAL_RCC_ClockConfig+0x274>)
 8017e76:	4293      	cmp	r3, r2
 8017e78:	d901      	bls.n	8017e7e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8017e7a:	2303      	movs	r3, #3
 8017e7c:	e079      	b.n	8017f72 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8017e7e:	4b41      	ldr	r3, [pc, #260]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017e80:	68db      	ldr	r3, [r3, #12]
 8017e82:	220c      	movs	r2, #12
 8017e84:	4013      	ands	r3, r2
 8017e86:	2b04      	cmp	r3, #4
 8017e88:	d1ef      	bne.n	8017e6a <HAL_RCC_ClockConfig+0x15e>
 8017e8a:	e00e      	b.n	8017eaa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017e8c:	f7f8 ffa2 	bl	8010dd4 <HAL_GetTick>
 8017e90:	0002      	movs	r2, r0
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	1ad3      	subs	r3, r2, r3
 8017e96:	4a3a      	ldr	r2, [pc, #232]	@ (8017f80 <HAL_RCC_ClockConfig+0x274>)
 8017e98:	4293      	cmp	r3, r2
 8017e9a:	d901      	bls.n	8017ea0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8017e9c:	2303      	movs	r3, #3
 8017e9e:	e068      	b.n	8017f72 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8017ea0:	4b38      	ldr	r3, [pc, #224]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017ea2:	68db      	ldr	r3, [r3, #12]
 8017ea4:	220c      	movs	r2, #12
 8017ea6:	4013      	ands	r3, r2
 8017ea8:	d1f0      	bne.n	8017e8c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8017eaa:	4b34      	ldr	r3, [pc, #208]	@ (8017f7c <HAL_RCC_ClockConfig+0x270>)
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	2201      	movs	r2, #1
 8017eb0:	4013      	ands	r3, r2
 8017eb2:	683a      	ldr	r2, [r7, #0]
 8017eb4:	429a      	cmp	r2, r3
 8017eb6:	d21e      	bcs.n	8017ef6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017eb8:	4b30      	ldr	r3, [pc, #192]	@ (8017f7c <HAL_RCC_ClockConfig+0x270>)
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	2201      	movs	r2, #1
 8017ebe:	4393      	bics	r3, r2
 8017ec0:	0019      	movs	r1, r3
 8017ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8017f7c <HAL_RCC_ClockConfig+0x270>)
 8017ec4:	683a      	ldr	r2, [r7, #0]
 8017ec6:	430a      	orrs	r2, r1
 8017ec8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8017eca:	f7f8 ff83 	bl	8010dd4 <HAL_GetTick>
 8017ece:	0003      	movs	r3, r0
 8017ed0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017ed2:	e009      	b.n	8017ee8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017ed4:	f7f8 ff7e 	bl	8010dd4 <HAL_GetTick>
 8017ed8:	0002      	movs	r2, r0
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	1ad3      	subs	r3, r2, r3
 8017ede:	4a28      	ldr	r2, [pc, #160]	@ (8017f80 <HAL_RCC_ClockConfig+0x274>)
 8017ee0:	4293      	cmp	r3, r2
 8017ee2:	d901      	bls.n	8017ee8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8017ee4:	2303      	movs	r3, #3
 8017ee6:	e044      	b.n	8017f72 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017ee8:	4b24      	ldr	r3, [pc, #144]	@ (8017f7c <HAL_RCC_ClockConfig+0x270>)
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	2201      	movs	r2, #1
 8017eee:	4013      	ands	r3, r2
 8017ef0:	683a      	ldr	r2, [r7, #0]
 8017ef2:	429a      	cmp	r2, r3
 8017ef4:	d1ee      	bne.n	8017ed4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	2204      	movs	r2, #4
 8017efc:	4013      	ands	r3, r2
 8017efe:	d009      	beq.n	8017f14 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8017f00:	4b20      	ldr	r3, [pc, #128]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017f02:	68db      	ldr	r3, [r3, #12]
 8017f04:	4a20      	ldr	r2, [pc, #128]	@ (8017f88 <HAL_RCC_ClockConfig+0x27c>)
 8017f06:	4013      	ands	r3, r2
 8017f08:	0019      	movs	r1, r3
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	68da      	ldr	r2, [r3, #12]
 8017f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017f10:	430a      	orrs	r2, r1
 8017f12:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	2208      	movs	r2, #8
 8017f1a:	4013      	ands	r3, r2
 8017f1c:	d00a      	beq.n	8017f34 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8017f1e:	4b19      	ldr	r3, [pc, #100]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017f20:	68db      	ldr	r3, [r3, #12]
 8017f22:	4a1a      	ldr	r2, [pc, #104]	@ (8017f8c <HAL_RCC_ClockConfig+0x280>)
 8017f24:	4013      	ands	r3, r2
 8017f26:	0019      	movs	r1, r3
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	691b      	ldr	r3, [r3, #16]
 8017f2c:	00da      	lsls	r2, r3, #3
 8017f2e:	4b15      	ldr	r3, [pc, #84]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017f30:	430a      	orrs	r2, r1
 8017f32:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8017f34:	f000 f832 	bl	8017f9c <HAL_RCC_GetSysClockFreq>
 8017f38:	0001      	movs	r1, r0
 8017f3a:	4b12      	ldr	r3, [pc, #72]	@ (8017f84 <HAL_RCC_ClockConfig+0x278>)
 8017f3c:	68db      	ldr	r3, [r3, #12]
 8017f3e:	091b      	lsrs	r3, r3, #4
 8017f40:	220f      	movs	r2, #15
 8017f42:	4013      	ands	r3, r2
 8017f44:	4a12      	ldr	r2, [pc, #72]	@ (8017f90 <HAL_RCC_ClockConfig+0x284>)
 8017f46:	5cd3      	ldrb	r3, [r2, r3]
 8017f48:	000a      	movs	r2, r1
 8017f4a:	40da      	lsrs	r2, r3
 8017f4c:	4b11      	ldr	r3, [pc, #68]	@ (8017f94 <HAL_RCC_ClockConfig+0x288>)
 8017f4e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8017f50:	4b11      	ldr	r3, [pc, #68]	@ (8017f98 <HAL_RCC_ClockConfig+0x28c>)
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	250b      	movs	r5, #11
 8017f56:	197c      	adds	r4, r7, r5
 8017f58:	0018      	movs	r0, r3
 8017f5a:	f7f8 fef5 	bl	8010d48 <HAL_InitTick>
 8017f5e:	0003      	movs	r3, r0
 8017f60:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8017f62:	197b      	adds	r3, r7, r5
 8017f64:	781b      	ldrb	r3, [r3, #0]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d002      	beq.n	8017f70 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8017f6a:	197b      	adds	r3, r7, r5
 8017f6c:	781b      	ldrb	r3, [r3, #0]
 8017f6e:	e000      	b.n	8017f72 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8017f70:	2300      	movs	r3, #0
}
 8017f72:	0018      	movs	r0, r3
 8017f74:	46bd      	mov	sp, r7
 8017f76:	b004      	add	sp, #16
 8017f78:	bdb0      	pop	{r4, r5, r7, pc}
 8017f7a:	46c0      	nop			@ (mov r8, r8)
 8017f7c:	40022000 	.word	0x40022000
 8017f80:	00001388 	.word	0x00001388
 8017f84:	40021000 	.word	0x40021000
 8017f88:	fffff8ff 	.word	0xfffff8ff
 8017f8c:	ffffc7ff 	.word	0xffffc7ff
 8017f90:	08028aac 	.word	0x08028aac
 8017f94:	200000dc 	.word	0x200000dc
 8017f98:	200000ec 	.word	0x200000ec

08017f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017f9c:	b5b0      	push	{r4, r5, r7, lr}
 8017f9e:	b08e      	sub	sp, #56	@ 0x38
 8017fa0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8017fa2:	4b4c      	ldr	r3, [pc, #304]	@ (80180d4 <HAL_RCC_GetSysClockFreq+0x138>)
 8017fa4:	68db      	ldr	r3, [r3, #12]
 8017fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8017fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017faa:	230c      	movs	r3, #12
 8017fac:	4013      	ands	r3, r2
 8017fae:	2b0c      	cmp	r3, #12
 8017fb0:	d014      	beq.n	8017fdc <HAL_RCC_GetSysClockFreq+0x40>
 8017fb2:	d900      	bls.n	8017fb6 <HAL_RCC_GetSysClockFreq+0x1a>
 8017fb4:	e07b      	b.n	80180ae <HAL_RCC_GetSysClockFreq+0x112>
 8017fb6:	2b04      	cmp	r3, #4
 8017fb8:	d002      	beq.n	8017fc0 <HAL_RCC_GetSysClockFreq+0x24>
 8017fba:	2b08      	cmp	r3, #8
 8017fbc:	d00b      	beq.n	8017fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8017fbe:	e076      	b.n	80180ae <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8017fc0:	4b44      	ldr	r3, [pc, #272]	@ (80180d4 <HAL_RCC_GetSysClockFreq+0x138>)
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	2210      	movs	r2, #16
 8017fc6:	4013      	ands	r3, r2
 8017fc8:	d002      	beq.n	8017fd0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8017fca:	4b43      	ldr	r3, [pc, #268]	@ (80180d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8017fcc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8017fce:	e07c      	b.n	80180ca <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8017fd0:	4b42      	ldr	r3, [pc, #264]	@ (80180dc <HAL_RCC_GetSysClockFreq+0x140>)
 8017fd2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8017fd4:	e079      	b.n	80180ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8017fd6:	4b42      	ldr	r3, [pc, #264]	@ (80180e0 <HAL_RCC_GetSysClockFreq+0x144>)
 8017fd8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8017fda:	e076      	b.n	80180ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8017fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fde:	0c9a      	lsrs	r2, r3, #18
 8017fe0:	230f      	movs	r3, #15
 8017fe2:	401a      	ands	r2, r3
 8017fe4:	4b3f      	ldr	r3, [pc, #252]	@ (80180e4 <HAL_RCC_GetSysClockFreq+0x148>)
 8017fe6:	5c9b      	ldrb	r3, [r3, r2]
 8017fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8017fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fec:	0d9a      	lsrs	r2, r3, #22
 8017fee:	2303      	movs	r3, #3
 8017ff0:	4013      	ands	r3, r2
 8017ff2:	3301      	adds	r3, #1
 8017ff4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8017ff6:	4b37      	ldr	r3, [pc, #220]	@ (80180d4 <HAL_RCC_GetSysClockFreq+0x138>)
 8017ff8:	68da      	ldr	r2, [r3, #12]
 8017ffa:	2380      	movs	r3, #128	@ 0x80
 8017ffc:	025b      	lsls	r3, r3, #9
 8017ffe:	4013      	ands	r3, r2
 8018000:	d01a      	beq.n	8018038 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8018002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018004:	61bb      	str	r3, [r7, #24]
 8018006:	2300      	movs	r3, #0
 8018008:	61fb      	str	r3, [r7, #28]
 801800a:	4a35      	ldr	r2, [pc, #212]	@ (80180e0 <HAL_RCC_GetSysClockFreq+0x144>)
 801800c:	2300      	movs	r3, #0
 801800e:	69b8      	ldr	r0, [r7, #24]
 8018010:	69f9      	ldr	r1, [r7, #28]
 8018012:	f7e8 fad5 	bl	80005c0 <__aeabi_lmul>
 8018016:	0002      	movs	r2, r0
 8018018:	000b      	movs	r3, r1
 801801a:	0010      	movs	r0, r2
 801801c:	0019      	movs	r1, r3
 801801e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018020:	613b      	str	r3, [r7, #16]
 8018022:	2300      	movs	r3, #0
 8018024:	617b      	str	r3, [r7, #20]
 8018026:	693a      	ldr	r2, [r7, #16]
 8018028:	697b      	ldr	r3, [r7, #20]
 801802a:	f7e8 faa9 	bl	8000580 <__aeabi_uldivmod>
 801802e:	0002      	movs	r2, r0
 8018030:	000b      	movs	r3, r1
 8018032:	0013      	movs	r3, r2
 8018034:	637b      	str	r3, [r7, #52]	@ 0x34
 8018036:	e037      	b.n	80180a8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8018038:	4b26      	ldr	r3, [pc, #152]	@ (80180d4 <HAL_RCC_GetSysClockFreq+0x138>)
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	2210      	movs	r2, #16
 801803e:	4013      	ands	r3, r2
 8018040:	d01a      	beq.n	8018078 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8018042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018044:	60bb      	str	r3, [r7, #8]
 8018046:	2300      	movs	r3, #0
 8018048:	60fb      	str	r3, [r7, #12]
 801804a:	4a23      	ldr	r2, [pc, #140]	@ (80180d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 801804c:	2300      	movs	r3, #0
 801804e:	68b8      	ldr	r0, [r7, #8]
 8018050:	68f9      	ldr	r1, [r7, #12]
 8018052:	f7e8 fab5 	bl	80005c0 <__aeabi_lmul>
 8018056:	0002      	movs	r2, r0
 8018058:	000b      	movs	r3, r1
 801805a:	0010      	movs	r0, r2
 801805c:	0019      	movs	r1, r3
 801805e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018060:	603b      	str	r3, [r7, #0]
 8018062:	2300      	movs	r3, #0
 8018064:	607b      	str	r3, [r7, #4]
 8018066:	683a      	ldr	r2, [r7, #0]
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	f7e8 fa89 	bl	8000580 <__aeabi_uldivmod>
 801806e:	0002      	movs	r2, r0
 8018070:	000b      	movs	r3, r1
 8018072:	0013      	movs	r3, r2
 8018074:	637b      	str	r3, [r7, #52]	@ 0x34
 8018076:	e017      	b.n	80180a8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8018078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801807a:	0018      	movs	r0, r3
 801807c:	2300      	movs	r3, #0
 801807e:	0019      	movs	r1, r3
 8018080:	4a16      	ldr	r2, [pc, #88]	@ (80180dc <HAL_RCC_GetSysClockFreq+0x140>)
 8018082:	2300      	movs	r3, #0
 8018084:	f7e8 fa9c 	bl	80005c0 <__aeabi_lmul>
 8018088:	0002      	movs	r2, r0
 801808a:	000b      	movs	r3, r1
 801808c:	0010      	movs	r0, r2
 801808e:	0019      	movs	r1, r3
 8018090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018092:	001c      	movs	r4, r3
 8018094:	2300      	movs	r3, #0
 8018096:	001d      	movs	r5, r3
 8018098:	0022      	movs	r2, r4
 801809a:	002b      	movs	r3, r5
 801809c:	f7e8 fa70 	bl	8000580 <__aeabi_uldivmod>
 80180a0:	0002      	movs	r2, r0
 80180a2:	000b      	movs	r3, r1
 80180a4:	0013      	movs	r3, r2
 80180a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80180a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80180aa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80180ac:	e00d      	b.n	80180ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80180ae:	4b09      	ldr	r3, [pc, #36]	@ (80180d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80180b0:	685b      	ldr	r3, [r3, #4]
 80180b2:	0b5b      	lsrs	r3, r3, #13
 80180b4:	2207      	movs	r2, #7
 80180b6:	4013      	ands	r3, r2
 80180b8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80180ba:	6a3b      	ldr	r3, [r7, #32]
 80180bc:	3301      	adds	r3, #1
 80180be:	2280      	movs	r2, #128	@ 0x80
 80180c0:	0212      	lsls	r2, r2, #8
 80180c2:	409a      	lsls	r2, r3
 80180c4:	0013      	movs	r3, r2
 80180c6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80180c8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80180ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80180cc:	0018      	movs	r0, r3
 80180ce:	46bd      	mov	sp, r7
 80180d0:	b00e      	add	sp, #56	@ 0x38
 80180d2:	bdb0      	pop	{r4, r5, r7, pc}
 80180d4:	40021000 	.word	0x40021000
 80180d8:	003d0900 	.word	0x003d0900
 80180dc:	00f42400 	.word	0x00f42400
 80180e0:	007a1200 	.word	0x007a1200
 80180e4:	08028ac4 	.word	0x08028ac4

080180e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80180ec:	4b02      	ldr	r3, [pc, #8]	@ (80180f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80180ee:	681b      	ldr	r3, [r3, #0]
}
 80180f0:	0018      	movs	r0, r3
 80180f2:	46bd      	mov	sp, r7
 80180f4:	bd80      	pop	{r7, pc}
 80180f6:	46c0      	nop			@ (mov r8, r8)
 80180f8:	200000dc 	.word	0x200000dc

080180fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80180fc:	b580      	push	{r7, lr}
 80180fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8018100:	f7ff fff2 	bl	80180e8 <HAL_RCC_GetHCLKFreq>
 8018104:	0001      	movs	r1, r0
 8018106:	4b06      	ldr	r3, [pc, #24]	@ (8018120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8018108:	68db      	ldr	r3, [r3, #12]
 801810a:	0a1b      	lsrs	r3, r3, #8
 801810c:	2207      	movs	r2, #7
 801810e:	4013      	ands	r3, r2
 8018110:	4a04      	ldr	r2, [pc, #16]	@ (8018124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8018112:	5cd3      	ldrb	r3, [r2, r3]
 8018114:	40d9      	lsrs	r1, r3
 8018116:	000b      	movs	r3, r1
}
 8018118:	0018      	movs	r0, r3
 801811a:	46bd      	mov	sp, r7
 801811c:	bd80      	pop	{r7, pc}
 801811e:	46c0      	nop			@ (mov r8, r8)
 8018120:	40021000 	.word	0x40021000
 8018124:	08028abc 	.word	0x08028abc

08018128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8018128:	b580      	push	{r7, lr}
 801812a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801812c:	f7ff ffdc 	bl	80180e8 <HAL_RCC_GetHCLKFreq>
 8018130:	0001      	movs	r1, r0
 8018132:	4b06      	ldr	r3, [pc, #24]	@ (801814c <HAL_RCC_GetPCLK2Freq+0x24>)
 8018134:	68db      	ldr	r3, [r3, #12]
 8018136:	0adb      	lsrs	r3, r3, #11
 8018138:	2207      	movs	r2, #7
 801813a:	4013      	ands	r3, r2
 801813c:	4a04      	ldr	r2, [pc, #16]	@ (8018150 <HAL_RCC_GetPCLK2Freq+0x28>)
 801813e:	5cd3      	ldrb	r3, [r2, r3]
 8018140:	40d9      	lsrs	r1, r3
 8018142:	000b      	movs	r3, r1
}
 8018144:	0018      	movs	r0, r3
 8018146:	46bd      	mov	sp, r7
 8018148:	bd80      	pop	{r7, pc}
 801814a:	46c0      	nop			@ (mov r8, r8)
 801814c:	40021000 	.word	0x40021000
 8018150:	08028abc 	.word	0x08028abc

08018154 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b086      	sub	sp, #24
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801815c:	2017      	movs	r0, #23
 801815e:	183b      	adds	r3, r7, r0
 8018160:	2200      	movs	r2, #0
 8018162:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	2220      	movs	r2, #32
 801816a:	4013      	ands	r3, r2
 801816c:	d100      	bne.n	8018170 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801816e:	e0c7      	b.n	8018300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018170:	4b9b      	ldr	r3, [pc, #620]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018172:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018174:	2380      	movs	r3, #128	@ 0x80
 8018176:	055b      	lsls	r3, r3, #21
 8018178:	4013      	ands	r3, r2
 801817a:	d109      	bne.n	8018190 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801817c:	4b98      	ldr	r3, [pc, #608]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801817e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018180:	4b97      	ldr	r3, [pc, #604]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018182:	2180      	movs	r1, #128	@ 0x80
 8018184:	0549      	lsls	r1, r1, #21
 8018186:	430a      	orrs	r2, r1
 8018188:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801818a:	183b      	adds	r3, r7, r0
 801818c:	2201      	movs	r2, #1
 801818e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018190:	4b94      	ldr	r3, [pc, #592]	@ (80183e4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8018192:	681a      	ldr	r2, [r3, #0]
 8018194:	2380      	movs	r3, #128	@ 0x80
 8018196:	005b      	lsls	r3, r3, #1
 8018198:	4013      	ands	r3, r2
 801819a:	d11a      	bne.n	80181d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801819c:	4b91      	ldr	r3, [pc, #580]	@ (80183e4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801819e:	681a      	ldr	r2, [r3, #0]
 80181a0:	4b90      	ldr	r3, [pc, #576]	@ (80183e4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80181a2:	2180      	movs	r1, #128	@ 0x80
 80181a4:	0049      	lsls	r1, r1, #1
 80181a6:	430a      	orrs	r2, r1
 80181a8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80181aa:	f7f8 fe13 	bl	8010dd4 <HAL_GetTick>
 80181ae:	0003      	movs	r3, r0
 80181b0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80181b2:	e008      	b.n	80181c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80181b4:	f7f8 fe0e 	bl	8010dd4 <HAL_GetTick>
 80181b8:	0002      	movs	r2, r0
 80181ba:	693b      	ldr	r3, [r7, #16]
 80181bc:	1ad3      	subs	r3, r2, r3
 80181be:	2b64      	cmp	r3, #100	@ 0x64
 80181c0:	d901      	bls.n	80181c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80181c2:	2303      	movs	r3, #3
 80181c4:	e107      	b.n	80183d6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80181c6:	4b87      	ldr	r3, [pc, #540]	@ (80183e4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80181c8:	681a      	ldr	r2, [r3, #0]
 80181ca:	2380      	movs	r3, #128	@ 0x80
 80181cc:	005b      	lsls	r3, r3, #1
 80181ce:	4013      	ands	r3, r2
 80181d0:	d0f0      	beq.n	80181b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80181d2:	4b83      	ldr	r3, [pc, #524]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80181d4:	681a      	ldr	r2, [r3, #0]
 80181d6:	23c0      	movs	r3, #192	@ 0xc0
 80181d8:	039b      	lsls	r3, r3, #14
 80181da:	4013      	ands	r3, r2
 80181dc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	685a      	ldr	r2, [r3, #4]
 80181e2:	23c0      	movs	r3, #192	@ 0xc0
 80181e4:	039b      	lsls	r3, r3, #14
 80181e6:	4013      	ands	r3, r2
 80181e8:	68fa      	ldr	r2, [r7, #12]
 80181ea:	429a      	cmp	r2, r3
 80181ec:	d013      	beq.n	8018216 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	685a      	ldr	r2, [r3, #4]
 80181f2:	23c0      	movs	r3, #192	@ 0xc0
 80181f4:	029b      	lsls	r3, r3, #10
 80181f6:	401a      	ands	r2, r3
 80181f8:	23c0      	movs	r3, #192	@ 0xc0
 80181fa:	029b      	lsls	r3, r3, #10
 80181fc:	429a      	cmp	r2, r3
 80181fe:	d10a      	bne.n	8018216 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8018200:	4b77      	ldr	r3, [pc, #476]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018202:	681a      	ldr	r2, [r3, #0]
 8018204:	2380      	movs	r3, #128	@ 0x80
 8018206:	029b      	lsls	r3, r3, #10
 8018208:	401a      	ands	r2, r3
 801820a:	2380      	movs	r3, #128	@ 0x80
 801820c:	029b      	lsls	r3, r3, #10
 801820e:	429a      	cmp	r2, r3
 8018210:	d101      	bne.n	8018216 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8018212:	2301      	movs	r3, #1
 8018214:	e0df      	b.n	80183d6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8018216:	4b72      	ldr	r3, [pc, #456]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018218:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801821a:	23c0      	movs	r3, #192	@ 0xc0
 801821c:	029b      	lsls	r3, r3, #10
 801821e:	4013      	ands	r3, r2
 8018220:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d03b      	beq.n	80182a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	685a      	ldr	r2, [r3, #4]
 801822c:	23c0      	movs	r3, #192	@ 0xc0
 801822e:	029b      	lsls	r3, r3, #10
 8018230:	4013      	ands	r3, r2
 8018232:	68fa      	ldr	r2, [r7, #12]
 8018234:	429a      	cmp	r2, r3
 8018236:	d033      	beq.n	80182a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	2220      	movs	r2, #32
 801823e:	4013      	ands	r3, r2
 8018240:	d02e      	beq.n	80182a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8018242:	4b67      	ldr	r3, [pc, #412]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018246:	4a68      	ldr	r2, [pc, #416]	@ (80183e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8018248:	4013      	ands	r3, r2
 801824a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801824c:	4b64      	ldr	r3, [pc, #400]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801824e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018250:	4b63      	ldr	r3, [pc, #396]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018252:	2180      	movs	r1, #128	@ 0x80
 8018254:	0309      	lsls	r1, r1, #12
 8018256:	430a      	orrs	r2, r1
 8018258:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801825a:	4b61      	ldr	r3, [pc, #388]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801825c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801825e:	4b60      	ldr	r3, [pc, #384]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018260:	4962      	ldr	r1, [pc, #392]	@ (80183ec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8018262:	400a      	ands	r2, r1
 8018264:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8018266:	4b5e      	ldr	r3, [pc, #376]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018268:	68fa      	ldr	r2, [r7, #12]
 801826a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801826c:	68fa      	ldr	r2, [r7, #12]
 801826e:	2380      	movs	r3, #128	@ 0x80
 8018270:	005b      	lsls	r3, r3, #1
 8018272:	4013      	ands	r3, r2
 8018274:	d014      	beq.n	80182a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018276:	f7f8 fdad 	bl	8010dd4 <HAL_GetTick>
 801827a:	0003      	movs	r3, r0
 801827c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801827e:	e009      	b.n	8018294 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018280:	f7f8 fda8 	bl	8010dd4 <HAL_GetTick>
 8018284:	0002      	movs	r2, r0
 8018286:	693b      	ldr	r3, [r7, #16]
 8018288:	1ad3      	subs	r3, r2, r3
 801828a:	4a59      	ldr	r2, [pc, #356]	@ (80183f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801828c:	4293      	cmp	r3, r2
 801828e:	d901      	bls.n	8018294 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8018290:	2303      	movs	r3, #3
 8018292:	e0a0      	b.n	80183d6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8018294:	4b52      	ldr	r3, [pc, #328]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018296:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018298:	2380      	movs	r3, #128	@ 0x80
 801829a:	009b      	lsls	r3, r3, #2
 801829c:	4013      	ands	r3, r2
 801829e:	d0ef      	beq.n	8018280 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	2220      	movs	r2, #32
 80182a6:	4013      	ands	r3, r2
 80182a8:	d01f      	beq.n	80182ea <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	685a      	ldr	r2, [r3, #4]
 80182ae:	23c0      	movs	r3, #192	@ 0xc0
 80182b0:	029b      	lsls	r3, r3, #10
 80182b2:	401a      	ands	r2, r3
 80182b4:	23c0      	movs	r3, #192	@ 0xc0
 80182b6:	029b      	lsls	r3, r3, #10
 80182b8:	429a      	cmp	r2, r3
 80182ba:	d10c      	bne.n	80182d6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80182bc:	4b48      	ldr	r3, [pc, #288]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	4a4c      	ldr	r2, [pc, #304]	@ (80183f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80182c2:	4013      	ands	r3, r2
 80182c4:	0019      	movs	r1, r3
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	685a      	ldr	r2, [r3, #4]
 80182ca:	23c0      	movs	r3, #192	@ 0xc0
 80182cc:	039b      	lsls	r3, r3, #14
 80182ce:	401a      	ands	r2, r3
 80182d0:	4b43      	ldr	r3, [pc, #268]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80182d2:	430a      	orrs	r2, r1
 80182d4:	601a      	str	r2, [r3, #0]
 80182d6:	4b42      	ldr	r3, [pc, #264]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80182d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	685a      	ldr	r2, [r3, #4]
 80182de:	23c0      	movs	r3, #192	@ 0xc0
 80182e0:	029b      	lsls	r3, r3, #10
 80182e2:	401a      	ands	r2, r3
 80182e4:	4b3e      	ldr	r3, [pc, #248]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80182e6:	430a      	orrs	r2, r1
 80182e8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80182ea:	2317      	movs	r3, #23
 80182ec:	18fb      	adds	r3, r7, r3
 80182ee:	781b      	ldrb	r3, [r3, #0]
 80182f0:	2b01      	cmp	r3, #1
 80182f2:	d105      	bne.n	8018300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80182f4:	4b3a      	ldr	r3, [pc, #232]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80182f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80182f8:	4b39      	ldr	r3, [pc, #228]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80182fa:	493f      	ldr	r1, [pc, #252]	@ (80183f8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80182fc:	400a      	ands	r2, r1
 80182fe:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	2201      	movs	r2, #1
 8018306:	4013      	ands	r3, r2
 8018308:	d009      	beq.n	801831e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801830a:	4b35      	ldr	r3, [pc, #212]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801830c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801830e:	2203      	movs	r2, #3
 8018310:	4393      	bics	r3, r2
 8018312:	0019      	movs	r1, r3
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	689a      	ldr	r2, [r3, #8]
 8018318:	4b31      	ldr	r3, [pc, #196]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801831a:	430a      	orrs	r2, r1
 801831c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	2202      	movs	r2, #2
 8018324:	4013      	ands	r3, r2
 8018326:	d009      	beq.n	801833c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8018328:	4b2d      	ldr	r3, [pc, #180]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801832a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801832c:	220c      	movs	r2, #12
 801832e:	4393      	bics	r3, r2
 8018330:	0019      	movs	r1, r3
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	68da      	ldr	r2, [r3, #12]
 8018336:	4b2a      	ldr	r3, [pc, #168]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018338:	430a      	orrs	r2, r1
 801833a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	2204      	movs	r2, #4
 8018342:	4013      	ands	r3, r2
 8018344:	d009      	beq.n	801835a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8018346:	4b26      	ldr	r3, [pc, #152]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801834a:	4a2c      	ldr	r2, [pc, #176]	@ (80183fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801834c:	4013      	ands	r3, r2
 801834e:	0019      	movs	r1, r3
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	691a      	ldr	r2, [r3, #16]
 8018354:	4b22      	ldr	r3, [pc, #136]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018356:	430a      	orrs	r2, r1
 8018358:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	2208      	movs	r2, #8
 8018360:	4013      	ands	r3, r2
 8018362:	d009      	beq.n	8018378 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8018364:	4b1e      	ldr	r3, [pc, #120]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018368:	4a25      	ldr	r2, [pc, #148]	@ (8018400 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801836a:	4013      	ands	r3, r2
 801836c:	0019      	movs	r1, r3
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	695a      	ldr	r2, [r3, #20]
 8018372:	4b1b      	ldr	r3, [pc, #108]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018374:	430a      	orrs	r2, r1
 8018376:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681a      	ldr	r2, [r3, #0]
 801837c:	2380      	movs	r3, #128	@ 0x80
 801837e:	005b      	lsls	r3, r3, #1
 8018380:	4013      	ands	r3, r2
 8018382:	d009      	beq.n	8018398 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8018384:	4b16      	ldr	r3, [pc, #88]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018388:	4a17      	ldr	r2, [pc, #92]	@ (80183e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801838a:	4013      	ands	r3, r2
 801838c:	0019      	movs	r1, r3
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	699a      	ldr	r2, [r3, #24]
 8018392:	4b13      	ldr	r3, [pc, #76]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018394:	430a      	orrs	r2, r1
 8018396:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	2240      	movs	r2, #64	@ 0x40
 801839e:	4013      	ands	r3, r2
 80183a0:	d009      	beq.n	80183b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80183a2:	4b0f      	ldr	r3, [pc, #60]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80183a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80183a6:	4a17      	ldr	r2, [pc, #92]	@ (8018404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80183a8:	4013      	ands	r3, r2
 80183aa:	0019      	movs	r1, r3
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	6a1a      	ldr	r2, [r3, #32]
 80183b0:	4b0b      	ldr	r3, [pc, #44]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80183b2:	430a      	orrs	r2, r1
 80183b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	2280      	movs	r2, #128	@ 0x80
 80183bc:	4013      	ands	r3, r2
 80183be:	d009      	beq.n	80183d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80183c0:	4b07      	ldr	r3, [pc, #28]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80183c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80183c4:	4a10      	ldr	r2, [pc, #64]	@ (8018408 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80183c6:	4013      	ands	r3, r2
 80183c8:	0019      	movs	r1, r3
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	69da      	ldr	r2, [r3, #28]
 80183ce:	4b04      	ldr	r3, [pc, #16]	@ (80183e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80183d0:	430a      	orrs	r2, r1
 80183d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80183d4:	2300      	movs	r3, #0
}
 80183d6:	0018      	movs	r0, r3
 80183d8:	46bd      	mov	sp, r7
 80183da:	b006      	add	sp, #24
 80183dc:	bd80      	pop	{r7, pc}
 80183de:	46c0      	nop			@ (mov r8, r8)
 80183e0:	40021000 	.word	0x40021000
 80183e4:	40007000 	.word	0x40007000
 80183e8:	fffcffff 	.word	0xfffcffff
 80183ec:	fff7ffff 	.word	0xfff7ffff
 80183f0:	00001388 	.word	0x00001388
 80183f4:	ffcfffff 	.word	0xffcfffff
 80183f8:	efffffff 	.word	0xefffffff
 80183fc:	fffff3ff 	.word	0xfffff3ff
 8018400:	ffffcfff 	.word	0xffffcfff
 8018404:	fbffffff 	.word	0xfbffffff
 8018408:	fff3ffff 	.word	0xfff3ffff

0801840c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801840c:	b5b0      	push	{r4, r5, r7, lr}
 801840e:	b084      	sub	sp, #16
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8018414:	230f      	movs	r3, #15
 8018416:	18fb      	adds	r3, r7, r3
 8018418:	2201      	movs	r2, #1
 801841a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d101      	bne.n	8018426 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8018422:	2301      	movs	r3, #1
 8018424:	e088      	b.n	8018538 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	2221      	movs	r2, #33	@ 0x21
 801842a:	5c9b      	ldrb	r3, [r3, r2]
 801842c:	b2db      	uxtb	r3, r3
 801842e:	2b00      	cmp	r3, #0
 8018430:	d107      	bne.n	8018442 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	2220      	movs	r2, #32
 8018436:	2100      	movs	r1, #0
 8018438:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	0018      	movs	r0, r3
 801843e:	f7f2 fd7f 	bl	800af40 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	2221      	movs	r2, #33	@ 0x21
 8018446:	2102      	movs	r1, #2
 8018448:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	68db      	ldr	r3, [r3, #12]
 8018450:	2210      	movs	r2, #16
 8018452:	4013      	ands	r3, r2
 8018454:	2b10      	cmp	r3, #16
 8018456:	d05f      	beq.n	8018518 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	22ca      	movs	r2, #202	@ 0xca
 801845e:	625a      	str	r2, [r3, #36]	@ 0x24
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	2253      	movs	r2, #83	@ 0x53
 8018466:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8018468:	250f      	movs	r5, #15
 801846a:	197c      	adds	r4, r7, r5
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	0018      	movs	r0, r3
 8018470:	f000 fa7c 	bl	801896c <RTC_EnterInitMode>
 8018474:	0003      	movs	r3, r0
 8018476:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8018478:	0028      	movs	r0, r5
 801847a:	183b      	adds	r3, r7, r0
 801847c:	781b      	ldrb	r3, [r3, #0]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d12c      	bne.n	80184dc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	689a      	ldr	r2, [r3, #8]
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	492c      	ldr	r1, [pc, #176]	@ (8018540 <HAL_RTC_Init+0x134>)
 801848e:	400a      	ands	r2, r1
 8018490:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	6899      	ldr	r1, [r3, #8]
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	685a      	ldr	r2, [r3, #4]
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	691b      	ldr	r3, [r3, #16]
 80184a0:	431a      	orrs	r2, r3
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	699b      	ldr	r3, [r3, #24]
 80184a6:	431a      	orrs	r2, r3
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	430a      	orrs	r2, r1
 80184ae:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	687a      	ldr	r2, [r7, #4]
 80184b6:	68d2      	ldr	r2, [r2, #12]
 80184b8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	6919      	ldr	r1, [r3, #16]
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	689b      	ldr	r3, [r3, #8]
 80184c4:	041a      	lsls	r2, r3, #16
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	430a      	orrs	r2, r1
 80184cc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80184ce:	183c      	adds	r4, r7, r0
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	0018      	movs	r0, r3
 80184d4:	f000 fa8e 	bl	80189f4 <RTC_ExitInitMode>
 80184d8:	0003      	movs	r3, r0
 80184da:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80184dc:	230f      	movs	r3, #15
 80184de:	18fb      	adds	r3, r7, r3
 80184e0:	781b      	ldrb	r3, [r3, #0]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d113      	bne.n	801850e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	2103      	movs	r1, #3
 80184f2:	438a      	bics	r2, r1
 80184f4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	69da      	ldr	r2, [r3, #28]
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	695b      	ldr	r3, [r3, #20]
 8018504:	431a      	orrs	r2, r3
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	430a      	orrs	r2, r1
 801850c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	22ff      	movs	r2, #255	@ 0xff
 8018514:	625a      	str	r2, [r3, #36]	@ 0x24
 8018516:	e003      	b.n	8018520 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8018518:	230f      	movs	r3, #15
 801851a:	18fb      	adds	r3, r7, r3
 801851c:	2200      	movs	r2, #0
 801851e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8018520:	230f      	movs	r3, #15
 8018522:	18fb      	adds	r3, r7, r3
 8018524:	781b      	ldrb	r3, [r3, #0]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d103      	bne.n	8018532 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	2221      	movs	r2, #33	@ 0x21
 801852e:	2101      	movs	r1, #1
 8018530:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8018532:	230f      	movs	r3, #15
 8018534:	18fb      	adds	r3, r7, r3
 8018536:	781b      	ldrb	r3, [r3, #0]
}
 8018538:	0018      	movs	r0, r3
 801853a:	46bd      	mov	sp, r7
 801853c:	b004      	add	sp, #16
 801853e:	bdb0      	pop	{r4, r5, r7, pc}
 8018540:	ff8fffbf 	.word	0xff8fffbf

08018544 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8018544:	b5b0      	push	{r4, r5, r7, lr}
 8018546:	b086      	sub	sp, #24
 8018548:	af00      	add	r7, sp, #0
 801854a:	60f8      	str	r0, [r7, #12]
 801854c:	60b9      	str	r1, [r7, #8]
 801854e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8018550:	2300      	movs	r3, #0
 8018552:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	2220      	movs	r2, #32
 8018558:	5c9b      	ldrb	r3, [r3, r2]
 801855a:	2b01      	cmp	r3, #1
 801855c:	d101      	bne.n	8018562 <HAL_RTC_SetTime+0x1e>
 801855e:	2302      	movs	r3, #2
 8018560:	e092      	b.n	8018688 <HAL_RTC_SetTime+0x144>
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	2220      	movs	r2, #32
 8018566:	2101      	movs	r1, #1
 8018568:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	2221      	movs	r2, #33	@ 0x21
 801856e:	2102      	movs	r1, #2
 8018570:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d125      	bne.n	80185c4 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	689b      	ldr	r3, [r3, #8]
 801857e:	2240      	movs	r2, #64	@ 0x40
 8018580:	4013      	ands	r3, r2
 8018582:	d102      	bne.n	801858a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8018584:	68bb      	ldr	r3, [r7, #8]
 8018586:	2200      	movs	r2, #0
 8018588:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801858a:	68bb      	ldr	r3, [r7, #8]
 801858c:	781b      	ldrb	r3, [r3, #0]
 801858e:	0018      	movs	r0, r3
 8018590:	f000 fa5a 	bl	8018a48 <RTC_ByteToBcd2>
 8018594:	0003      	movs	r3, r0
 8018596:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018598:	68bb      	ldr	r3, [r7, #8]
 801859a:	785b      	ldrb	r3, [r3, #1]
 801859c:	0018      	movs	r0, r3
 801859e:	f000 fa53 	bl	8018a48 <RTC_ByteToBcd2>
 80185a2:	0003      	movs	r3, r0
 80185a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80185a6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80185a8:	68bb      	ldr	r3, [r7, #8]
 80185aa:	789b      	ldrb	r3, [r3, #2]
 80185ac:	0018      	movs	r0, r3
 80185ae:	f000 fa4b 	bl	8018a48 <RTC_ByteToBcd2>
 80185b2:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80185b4:	0022      	movs	r2, r4
 80185b6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80185b8:	68bb      	ldr	r3, [r7, #8]
 80185ba:	78db      	ldrb	r3, [r3, #3]
 80185bc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80185be:	4313      	orrs	r3, r2
 80185c0:	617b      	str	r3, [r7, #20]
 80185c2:	e017      	b.n	80185f4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	689b      	ldr	r3, [r3, #8]
 80185ca:	2240      	movs	r2, #64	@ 0x40
 80185cc:	4013      	ands	r3, r2
 80185ce:	d102      	bne.n	80185d6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80185d0:	68bb      	ldr	r3, [r7, #8]
 80185d2:	2200      	movs	r2, #0
 80185d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80185d6:	68bb      	ldr	r3, [r7, #8]
 80185d8:	781b      	ldrb	r3, [r3, #0]
 80185da:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80185dc:	68bb      	ldr	r3, [r7, #8]
 80185de:	785b      	ldrb	r3, [r3, #1]
 80185e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80185e2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80185e4:	68ba      	ldr	r2, [r7, #8]
 80185e6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80185e8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80185ea:	68bb      	ldr	r3, [r7, #8]
 80185ec:	78db      	ldrb	r3, [r3, #3]
 80185ee:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80185f0:	4313      	orrs	r3, r2
 80185f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	22ca      	movs	r2, #202	@ 0xca
 80185fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	2253      	movs	r2, #83	@ 0x53
 8018602:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8018604:	2513      	movs	r5, #19
 8018606:	197c      	adds	r4, r7, r5
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	0018      	movs	r0, r3
 801860c:	f000 f9ae 	bl	801896c <RTC_EnterInitMode>
 8018610:	0003      	movs	r3, r0
 8018612:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8018614:	0028      	movs	r0, r5
 8018616:	183b      	adds	r3, r7, r0
 8018618:	781b      	ldrb	r3, [r3, #0]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d120      	bne.n	8018660 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	697a      	ldr	r2, [r7, #20]
 8018624:	491a      	ldr	r1, [pc, #104]	@ (8018690 <HAL_RTC_SetTime+0x14c>)
 8018626:	400a      	ands	r2, r1
 8018628:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	689a      	ldr	r2, [r3, #8]
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	4917      	ldr	r1, [pc, #92]	@ (8018694 <HAL_RTC_SetTime+0x150>)
 8018636:	400a      	ands	r2, r1
 8018638:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	6899      	ldr	r1, [r3, #8]
 8018640:	68bb      	ldr	r3, [r7, #8]
 8018642:	68da      	ldr	r2, [r3, #12]
 8018644:	68bb      	ldr	r3, [r7, #8]
 8018646:	691b      	ldr	r3, [r3, #16]
 8018648:	431a      	orrs	r2, r3
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	430a      	orrs	r2, r1
 8018650:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8018652:	183c      	adds	r4, r7, r0
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	0018      	movs	r0, r3
 8018658:	f000 f9cc 	bl	80189f4 <RTC_ExitInitMode>
 801865c:	0003      	movs	r3, r0
 801865e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8018660:	2313      	movs	r3, #19
 8018662:	18fb      	adds	r3, r7, r3
 8018664:	781b      	ldrb	r3, [r3, #0]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d103      	bne.n	8018672 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	2221      	movs	r2, #33	@ 0x21
 801866e:	2101      	movs	r1, #1
 8018670:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	22ff      	movs	r2, #255	@ 0xff
 8018678:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	2220      	movs	r2, #32
 801867e:	2100      	movs	r1, #0
 8018680:	5499      	strb	r1, [r3, r2]

  return status;
 8018682:	2313      	movs	r3, #19
 8018684:	18fb      	adds	r3, r7, r3
 8018686:	781b      	ldrb	r3, [r3, #0]
}
 8018688:	0018      	movs	r0, r3
 801868a:	46bd      	mov	sp, r7
 801868c:	b006      	add	sp, #24
 801868e:	bdb0      	pop	{r4, r5, r7, pc}
 8018690:	007f7f7f 	.word	0x007f7f7f
 8018694:	fffbffff 	.word	0xfffbffff

08018698 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8018698:	b580      	push	{r7, lr}
 801869a:	b086      	sub	sp, #24
 801869c:	af00      	add	r7, sp, #0
 801869e:	60f8      	str	r0, [r7, #12]
 80186a0:	60b9      	str	r1, [r7, #8]
 80186a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80186a4:	2300      	movs	r3, #0
 80186a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80186ae:	68bb      	ldr	r3, [r7, #8]
 80186b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	691b      	ldr	r3, [r3, #16]
 80186b8:	045b      	lsls	r3, r3, #17
 80186ba:	0c5a      	lsrs	r2, r3, #17
 80186bc:	68bb      	ldr	r3, [r7, #8]
 80186be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	4a22      	ldr	r2, [pc, #136]	@ (8018750 <HAL_RTC_GetTime+0xb8>)
 80186c8:	4013      	ands	r3, r2
 80186ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80186cc:	697b      	ldr	r3, [r7, #20]
 80186ce:	0c1b      	lsrs	r3, r3, #16
 80186d0:	b2db      	uxtb	r3, r3
 80186d2:	223f      	movs	r2, #63	@ 0x3f
 80186d4:	4013      	ands	r3, r2
 80186d6:	b2da      	uxtb	r2, r3
 80186d8:	68bb      	ldr	r3, [r7, #8]
 80186da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80186dc:	697b      	ldr	r3, [r7, #20]
 80186de:	0a1b      	lsrs	r3, r3, #8
 80186e0:	b2db      	uxtb	r3, r3
 80186e2:	227f      	movs	r2, #127	@ 0x7f
 80186e4:	4013      	ands	r3, r2
 80186e6:	b2da      	uxtb	r2, r3
 80186e8:	68bb      	ldr	r3, [r7, #8]
 80186ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80186ec:	697b      	ldr	r3, [r7, #20]
 80186ee:	b2db      	uxtb	r3, r3
 80186f0:	227f      	movs	r2, #127	@ 0x7f
 80186f2:	4013      	ands	r3, r2
 80186f4:	b2da      	uxtb	r2, r3
 80186f6:	68bb      	ldr	r3, [r7, #8]
 80186f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80186fa:	697b      	ldr	r3, [r7, #20]
 80186fc:	0d9b      	lsrs	r3, r3, #22
 80186fe:	b2db      	uxtb	r3, r3
 8018700:	2201      	movs	r2, #1
 8018702:	4013      	ands	r3, r2
 8018704:	b2da      	uxtb	r2, r3
 8018706:	68bb      	ldr	r3, [r7, #8]
 8018708:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	2b00      	cmp	r3, #0
 801870e:	d11a      	bne.n	8018746 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8018710:	68bb      	ldr	r3, [r7, #8]
 8018712:	781b      	ldrb	r3, [r3, #0]
 8018714:	0018      	movs	r0, r3
 8018716:	f000 f9b8 	bl	8018a8a <RTC_Bcd2ToByte>
 801871a:	0003      	movs	r3, r0
 801871c:	001a      	movs	r2, r3
 801871e:	68bb      	ldr	r3, [r7, #8]
 8018720:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8018722:	68bb      	ldr	r3, [r7, #8]
 8018724:	785b      	ldrb	r3, [r3, #1]
 8018726:	0018      	movs	r0, r3
 8018728:	f000 f9af 	bl	8018a8a <RTC_Bcd2ToByte>
 801872c:	0003      	movs	r3, r0
 801872e:	001a      	movs	r2, r3
 8018730:	68bb      	ldr	r3, [r7, #8]
 8018732:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8018734:	68bb      	ldr	r3, [r7, #8]
 8018736:	789b      	ldrb	r3, [r3, #2]
 8018738:	0018      	movs	r0, r3
 801873a:	f000 f9a6 	bl	8018a8a <RTC_Bcd2ToByte>
 801873e:	0003      	movs	r3, r0
 8018740:	001a      	movs	r2, r3
 8018742:	68bb      	ldr	r3, [r7, #8]
 8018744:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8018746:	2300      	movs	r3, #0
}
 8018748:	0018      	movs	r0, r3
 801874a:	46bd      	mov	sp, r7
 801874c:	b006      	add	sp, #24
 801874e:	bd80      	pop	{r7, pc}
 8018750:	007f7f7f 	.word	0x007f7f7f

08018754 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018754:	b5b0      	push	{r4, r5, r7, lr}
 8018756:	b086      	sub	sp, #24
 8018758:	af00      	add	r7, sp, #0
 801875a:	60f8      	str	r0, [r7, #12]
 801875c:	60b9      	str	r1, [r7, #8]
 801875e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8018760:	2300      	movs	r3, #0
 8018762:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	2220      	movs	r2, #32
 8018768:	5c9b      	ldrb	r3, [r3, r2]
 801876a:	2b01      	cmp	r3, #1
 801876c:	d101      	bne.n	8018772 <HAL_RTC_SetDate+0x1e>
 801876e:	2302      	movs	r3, #2
 8018770:	e07e      	b.n	8018870 <HAL_RTC_SetDate+0x11c>
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	2220      	movs	r2, #32
 8018776:	2101      	movs	r1, #1
 8018778:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	2221      	movs	r2, #33	@ 0x21
 801877e:	2102      	movs	r1, #2
 8018780:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d10e      	bne.n	80187a6 <HAL_RTC_SetDate+0x52>
 8018788:	68bb      	ldr	r3, [r7, #8]
 801878a:	785b      	ldrb	r3, [r3, #1]
 801878c:	001a      	movs	r2, r3
 801878e:	2310      	movs	r3, #16
 8018790:	4013      	ands	r3, r2
 8018792:	d008      	beq.n	80187a6 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8018794:	68bb      	ldr	r3, [r7, #8]
 8018796:	785b      	ldrb	r3, [r3, #1]
 8018798:	2210      	movs	r2, #16
 801879a:	4393      	bics	r3, r2
 801879c:	b2db      	uxtb	r3, r3
 801879e:	330a      	adds	r3, #10
 80187a0:	b2da      	uxtb	r2, r3
 80187a2:	68bb      	ldr	r3, [r7, #8]
 80187a4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d11c      	bne.n	80187e6 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80187ac:	68bb      	ldr	r3, [r7, #8]
 80187ae:	78db      	ldrb	r3, [r3, #3]
 80187b0:	0018      	movs	r0, r3
 80187b2:	f000 f949 	bl	8018a48 <RTC_ByteToBcd2>
 80187b6:	0003      	movs	r3, r0
 80187b8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80187ba:	68bb      	ldr	r3, [r7, #8]
 80187bc:	785b      	ldrb	r3, [r3, #1]
 80187be:	0018      	movs	r0, r3
 80187c0:	f000 f942 	bl	8018a48 <RTC_ByteToBcd2>
 80187c4:	0003      	movs	r3, r0
 80187c6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80187c8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80187ca:	68bb      	ldr	r3, [r7, #8]
 80187cc:	789b      	ldrb	r3, [r3, #2]
 80187ce:	0018      	movs	r0, r3
 80187d0:	f000 f93a 	bl	8018a48 <RTC_ByteToBcd2>
 80187d4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80187d6:	0022      	movs	r2, r4
 80187d8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80187da:	68bb      	ldr	r3, [r7, #8]
 80187dc:	781b      	ldrb	r3, [r3, #0]
 80187de:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80187e0:	4313      	orrs	r3, r2
 80187e2:	617b      	str	r3, [r7, #20]
 80187e4:	e00e      	b.n	8018804 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80187e6:	68bb      	ldr	r3, [r7, #8]
 80187e8:	78db      	ldrb	r3, [r3, #3]
 80187ea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80187ec:	68bb      	ldr	r3, [r7, #8]
 80187ee:	785b      	ldrb	r3, [r3, #1]
 80187f0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80187f2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80187f4:	68ba      	ldr	r2, [r7, #8]
 80187f6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80187f8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80187fa:	68bb      	ldr	r3, [r7, #8]
 80187fc:	781b      	ldrb	r3, [r3, #0]
 80187fe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8018800:	4313      	orrs	r3, r2
 8018802:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	22ca      	movs	r2, #202	@ 0xca
 801880a:	625a      	str	r2, [r3, #36]	@ 0x24
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	2253      	movs	r2, #83	@ 0x53
 8018812:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8018814:	2513      	movs	r5, #19
 8018816:	197c      	adds	r4, r7, r5
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	0018      	movs	r0, r3
 801881c:	f000 f8a6 	bl	801896c <RTC_EnterInitMode>
 8018820:	0003      	movs	r3, r0
 8018822:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8018824:	0028      	movs	r0, r5
 8018826:	183b      	adds	r3, r7, r0
 8018828:	781b      	ldrb	r3, [r3, #0]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d10c      	bne.n	8018848 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	697a      	ldr	r2, [r7, #20]
 8018834:	4910      	ldr	r1, [pc, #64]	@ (8018878 <HAL_RTC_SetDate+0x124>)
 8018836:	400a      	ands	r2, r1
 8018838:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801883a:	183c      	adds	r4, r7, r0
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	0018      	movs	r0, r3
 8018840:	f000 f8d8 	bl	80189f4 <RTC_ExitInitMode>
 8018844:	0003      	movs	r3, r0
 8018846:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8018848:	2313      	movs	r3, #19
 801884a:	18fb      	adds	r3, r7, r3
 801884c:	781b      	ldrb	r3, [r3, #0]
 801884e:	2b00      	cmp	r3, #0
 8018850:	d103      	bne.n	801885a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	2221      	movs	r2, #33	@ 0x21
 8018856:	2101      	movs	r1, #1
 8018858:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	22ff      	movs	r2, #255	@ 0xff
 8018860:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	2220      	movs	r2, #32
 8018866:	2100      	movs	r1, #0
 8018868:	5499      	strb	r1, [r3, r2]

  return status;
 801886a:	2313      	movs	r3, #19
 801886c:	18fb      	adds	r3, r7, r3
 801886e:	781b      	ldrb	r3, [r3, #0]
}
 8018870:	0018      	movs	r0, r3
 8018872:	46bd      	mov	sp, r7
 8018874:	b006      	add	sp, #24
 8018876:	bdb0      	pop	{r4, r5, r7, pc}
 8018878:	00ffff3f 	.word	0x00ffff3f

0801887c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801887c:	b580      	push	{r7, lr}
 801887e:	b086      	sub	sp, #24
 8018880:	af00      	add	r7, sp, #0
 8018882:	60f8      	str	r0, [r7, #12]
 8018884:	60b9      	str	r1, [r7, #8]
 8018886:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8018888:	2300      	movs	r3, #0
 801888a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	685b      	ldr	r3, [r3, #4]
 8018892:	4a21      	ldr	r2, [pc, #132]	@ (8018918 <HAL_RTC_GetDate+0x9c>)
 8018894:	4013      	ands	r3, r2
 8018896:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8018898:	697b      	ldr	r3, [r7, #20]
 801889a:	0c1b      	lsrs	r3, r3, #16
 801889c:	b2da      	uxtb	r2, r3
 801889e:	68bb      	ldr	r3, [r7, #8]
 80188a0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80188a2:	697b      	ldr	r3, [r7, #20]
 80188a4:	0a1b      	lsrs	r3, r3, #8
 80188a6:	b2db      	uxtb	r3, r3
 80188a8:	221f      	movs	r2, #31
 80188aa:	4013      	ands	r3, r2
 80188ac:	b2da      	uxtb	r2, r3
 80188ae:	68bb      	ldr	r3, [r7, #8]
 80188b0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80188b2:	697b      	ldr	r3, [r7, #20]
 80188b4:	b2db      	uxtb	r3, r3
 80188b6:	223f      	movs	r2, #63	@ 0x3f
 80188b8:	4013      	ands	r3, r2
 80188ba:	b2da      	uxtb	r2, r3
 80188bc:	68bb      	ldr	r3, [r7, #8]
 80188be:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80188c0:	697b      	ldr	r3, [r7, #20]
 80188c2:	0b5b      	lsrs	r3, r3, #13
 80188c4:	b2db      	uxtb	r3, r3
 80188c6:	2207      	movs	r2, #7
 80188c8:	4013      	ands	r3, r2
 80188ca:	b2da      	uxtb	r2, r3
 80188cc:	68bb      	ldr	r3, [r7, #8]
 80188ce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d11a      	bne.n	801890c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80188d6:	68bb      	ldr	r3, [r7, #8]
 80188d8:	78db      	ldrb	r3, [r3, #3]
 80188da:	0018      	movs	r0, r3
 80188dc:	f000 f8d5 	bl	8018a8a <RTC_Bcd2ToByte>
 80188e0:	0003      	movs	r3, r0
 80188e2:	001a      	movs	r2, r3
 80188e4:	68bb      	ldr	r3, [r7, #8]
 80188e6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80188e8:	68bb      	ldr	r3, [r7, #8]
 80188ea:	785b      	ldrb	r3, [r3, #1]
 80188ec:	0018      	movs	r0, r3
 80188ee:	f000 f8cc 	bl	8018a8a <RTC_Bcd2ToByte>
 80188f2:	0003      	movs	r3, r0
 80188f4:	001a      	movs	r2, r3
 80188f6:	68bb      	ldr	r3, [r7, #8]
 80188f8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80188fa:	68bb      	ldr	r3, [r7, #8]
 80188fc:	789b      	ldrb	r3, [r3, #2]
 80188fe:	0018      	movs	r0, r3
 8018900:	f000 f8c3 	bl	8018a8a <RTC_Bcd2ToByte>
 8018904:	0003      	movs	r3, r0
 8018906:	001a      	movs	r2, r3
 8018908:	68bb      	ldr	r3, [r7, #8]
 801890a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801890c:	2300      	movs	r3, #0
}
 801890e:	0018      	movs	r0, r3
 8018910:	46bd      	mov	sp, r7
 8018912:	b006      	add	sp, #24
 8018914:	bd80      	pop	{r7, pc}
 8018916:	46c0      	nop			@ (mov r8, r8)
 8018918:	00ffff3f 	.word	0x00ffff3f

0801891c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801891c:	b580      	push	{r7, lr}
 801891e:	b084      	sub	sp, #16
 8018920:	af00      	add	r7, sp, #0
 8018922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8018924:	2300      	movs	r3, #0
 8018926:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	4a0e      	ldr	r2, [pc, #56]	@ (8018968 <HAL_RTC_WaitForSynchro+0x4c>)
 801892e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8018930:	f7f8 fa50 	bl	8010dd4 <HAL_GetTick>
 8018934:	0003      	movs	r3, r0
 8018936:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8018938:	e00a      	b.n	8018950 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801893a:	f7f8 fa4b 	bl	8010dd4 <HAL_GetTick>
 801893e:	0002      	movs	r2, r0
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	1ad2      	subs	r2, r2, r3
 8018944:	23fa      	movs	r3, #250	@ 0xfa
 8018946:	009b      	lsls	r3, r3, #2
 8018948:	429a      	cmp	r2, r3
 801894a:	d901      	bls.n	8018950 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801894c:	2303      	movs	r3, #3
 801894e:	e006      	b.n	801895e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	68db      	ldr	r3, [r3, #12]
 8018956:	2220      	movs	r2, #32
 8018958:	4013      	ands	r3, r2
 801895a:	d0ee      	beq.n	801893a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801895c:	2300      	movs	r3, #0
}
 801895e:	0018      	movs	r0, r3
 8018960:	46bd      	mov	sp, r7
 8018962:	b004      	add	sp, #16
 8018964:	bd80      	pop	{r7, pc}
 8018966:	46c0      	nop			@ (mov r8, r8)
 8018968:	0001ff5f 	.word	0x0001ff5f

0801896c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b084      	sub	sp, #16
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8018974:	2300      	movs	r3, #0
 8018976:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8018978:	230f      	movs	r3, #15
 801897a:	18fb      	adds	r3, r7, r3
 801897c:	2200      	movs	r2, #0
 801897e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	68db      	ldr	r3, [r3, #12]
 8018986:	2240      	movs	r2, #64	@ 0x40
 8018988:	4013      	ands	r3, r2
 801898a:	d12c      	bne.n	80189e6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	68da      	ldr	r2, [r3, #12]
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	2180      	movs	r1, #128	@ 0x80
 8018998:	430a      	orrs	r2, r1
 801899a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801899c:	f7f8 fa1a 	bl	8010dd4 <HAL_GetTick>
 80189a0:	0003      	movs	r3, r0
 80189a2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80189a4:	e014      	b.n	80189d0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80189a6:	f7f8 fa15 	bl	8010dd4 <HAL_GetTick>
 80189aa:	0002      	movs	r2, r0
 80189ac:	68bb      	ldr	r3, [r7, #8]
 80189ae:	1ad2      	subs	r2, r2, r3
 80189b0:	200f      	movs	r0, #15
 80189b2:	183b      	adds	r3, r7, r0
 80189b4:	1839      	adds	r1, r7, r0
 80189b6:	7809      	ldrb	r1, [r1, #0]
 80189b8:	7019      	strb	r1, [r3, #0]
 80189ba:	23fa      	movs	r3, #250	@ 0xfa
 80189bc:	009b      	lsls	r3, r3, #2
 80189be:	429a      	cmp	r2, r3
 80189c0:	d906      	bls.n	80189d0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	2221      	movs	r2, #33	@ 0x21
 80189c6:	2104      	movs	r1, #4
 80189c8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80189ca:	183b      	adds	r3, r7, r0
 80189cc:	2201      	movs	r2, #1
 80189ce:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	68db      	ldr	r3, [r3, #12]
 80189d6:	2240      	movs	r2, #64	@ 0x40
 80189d8:	4013      	ands	r3, r2
 80189da:	d104      	bne.n	80189e6 <RTC_EnterInitMode+0x7a>
 80189dc:	230f      	movs	r3, #15
 80189de:	18fb      	adds	r3, r7, r3
 80189e0:	781b      	ldrb	r3, [r3, #0]
 80189e2:	2b01      	cmp	r3, #1
 80189e4:	d1df      	bne.n	80189a6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80189e6:	230f      	movs	r3, #15
 80189e8:	18fb      	adds	r3, r7, r3
 80189ea:	781b      	ldrb	r3, [r3, #0]
}
 80189ec:	0018      	movs	r0, r3
 80189ee:	46bd      	mov	sp, r7
 80189f0:	b004      	add	sp, #16
 80189f2:	bd80      	pop	{r7, pc}

080189f4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80189f4:	b590      	push	{r4, r7, lr}
 80189f6:	b085      	sub	sp, #20
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80189fc:	240f      	movs	r4, #15
 80189fe:	193b      	adds	r3, r7, r4
 8018a00:	2200      	movs	r2, #0
 8018a02:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	68da      	ldr	r2, [r3, #12]
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	2180      	movs	r1, #128	@ 0x80
 8018a10:	438a      	bics	r2, r1
 8018a12:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	689b      	ldr	r3, [r3, #8]
 8018a1a:	2220      	movs	r2, #32
 8018a1c:	4013      	ands	r3, r2
 8018a1e:	d10c      	bne.n	8018a3a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	0018      	movs	r0, r3
 8018a24:	f7ff ff7a 	bl	801891c <HAL_RTC_WaitForSynchro>
 8018a28:	1e03      	subs	r3, r0, #0
 8018a2a:	d006      	beq.n	8018a3a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	2221      	movs	r2, #33	@ 0x21
 8018a30:	2104      	movs	r1, #4
 8018a32:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8018a34:	193b      	adds	r3, r7, r4
 8018a36:	2201      	movs	r2, #1
 8018a38:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8018a3a:	230f      	movs	r3, #15
 8018a3c:	18fb      	adds	r3, r7, r3
 8018a3e:	781b      	ldrb	r3, [r3, #0]
}
 8018a40:	0018      	movs	r0, r3
 8018a42:	46bd      	mov	sp, r7
 8018a44:	b005      	add	sp, #20
 8018a46:	bd90      	pop	{r4, r7, pc}

08018a48 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b084      	sub	sp, #16
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	0002      	movs	r2, r0
 8018a50:	1dfb      	adds	r3, r7, #7
 8018a52:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8018a54:	2300      	movs	r3, #0
 8018a56:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8018a58:	e007      	b.n	8018a6a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	3301      	adds	r3, #1
 8018a5e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8018a60:	1dfb      	adds	r3, r7, #7
 8018a62:	1dfa      	adds	r2, r7, #7
 8018a64:	7812      	ldrb	r2, [r2, #0]
 8018a66:	3a0a      	subs	r2, #10
 8018a68:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8018a6a:	1dfb      	adds	r3, r7, #7
 8018a6c:	781b      	ldrb	r3, [r3, #0]
 8018a6e:	2b09      	cmp	r3, #9
 8018a70:	d8f3      	bhi.n	8018a5a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	b2db      	uxtb	r3, r3
 8018a76:	011b      	lsls	r3, r3, #4
 8018a78:	b2da      	uxtb	r2, r3
 8018a7a:	1dfb      	adds	r3, r7, #7
 8018a7c:	781b      	ldrb	r3, [r3, #0]
 8018a7e:	4313      	orrs	r3, r2
 8018a80:	b2db      	uxtb	r3, r3
}
 8018a82:	0018      	movs	r0, r3
 8018a84:	46bd      	mov	sp, r7
 8018a86:	b004      	add	sp, #16
 8018a88:	bd80      	pop	{r7, pc}

08018a8a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8018a8a:	b580      	push	{r7, lr}
 8018a8c:	b084      	sub	sp, #16
 8018a8e:	af00      	add	r7, sp, #0
 8018a90:	0002      	movs	r2, r0
 8018a92:	1dfb      	adds	r3, r7, #7
 8018a94:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8018a96:	2300      	movs	r3, #0
 8018a98:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8018a9a:	1dfb      	adds	r3, r7, #7
 8018a9c:	781b      	ldrb	r3, [r3, #0]
 8018a9e:	091b      	lsrs	r3, r3, #4
 8018aa0:	b2db      	uxtb	r3, r3
 8018aa2:	001a      	movs	r2, r3
 8018aa4:	0013      	movs	r3, r2
 8018aa6:	009b      	lsls	r3, r3, #2
 8018aa8:	189b      	adds	r3, r3, r2
 8018aaa:	005b      	lsls	r3, r3, #1
 8018aac:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	b2da      	uxtb	r2, r3
 8018ab2:	1dfb      	adds	r3, r7, #7
 8018ab4:	781b      	ldrb	r3, [r3, #0]
 8018ab6:	210f      	movs	r1, #15
 8018ab8:	400b      	ands	r3, r1
 8018aba:	b2db      	uxtb	r3, r3
 8018abc:	18d3      	adds	r3, r2, r3
 8018abe:	b2db      	uxtb	r3, r3
}
 8018ac0:	0018      	movs	r0, r3
 8018ac2:	46bd      	mov	sp, r7
 8018ac4:	b004      	add	sp, #16
 8018ac6:	bd80      	pop	{r7, pc}

08018ac8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	b086      	sub	sp, #24
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	60f8      	str	r0, [r7, #12]
 8018ad0:	60b9      	str	r1, [r7, #8]
 8018ad2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8018ad4:	4b64      	ldr	r3, [pc, #400]	@ (8018c68 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	22fa      	movs	r2, #250	@ 0xfa
 8018ada:	01d1      	lsls	r1, r2, #7
 8018adc:	0018      	movs	r0, r3
 8018ade:	f7e7 fb61 	bl	80001a4 <__udivsi3>
 8018ae2:	0003      	movs	r3, r0
 8018ae4:	001a      	movs	r2, r3
 8018ae6:	0013      	movs	r3, r2
 8018ae8:	015b      	lsls	r3, r3, #5
 8018aea:	1a9b      	subs	r3, r3, r2
 8018aec:	009b      	lsls	r3, r3, #2
 8018aee:	189b      	adds	r3, r3, r2
 8018af0:	00db      	lsls	r3, r3, #3
 8018af2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018af4:	68fb      	ldr	r3, [r7, #12]
 8018af6:	2220      	movs	r2, #32
 8018af8:	5c9b      	ldrb	r3, [r3, r2]
 8018afa:	2b01      	cmp	r3, #1
 8018afc:	d101      	bne.n	8018b02 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8018afe:	2302      	movs	r3, #2
 8018b00:	e0ad      	b.n	8018c5e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	2220      	movs	r2, #32
 8018b06:	2101      	movs	r1, #1
 8018b08:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	2221      	movs	r2, #33	@ 0x21
 8018b0e:	2102      	movs	r1, #2
 8018b10:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	22ca      	movs	r2, #202	@ 0xca
 8018b18:	625a      	str	r2, [r3, #36]	@ 0x24
 8018b1a:	68fb      	ldr	r3, [r7, #12]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	2253      	movs	r2, #83	@ 0x53
 8018b20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	689a      	ldr	r2, [r3, #8]
 8018b28:	2380      	movs	r3, #128	@ 0x80
 8018b2a:	00db      	lsls	r3, r3, #3
 8018b2c:	4013      	ands	r3, r2
 8018b2e:	d019      	beq.n	8018b64 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8018b30:	697b      	ldr	r3, [r7, #20]
 8018b32:	3b01      	subs	r3, #1
 8018b34:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8018b36:	697b      	ldr	r3, [r7, #20]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d10d      	bne.n	8018b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	22ff      	movs	r2, #255	@ 0xff
 8018b42:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	2221      	movs	r2, #33	@ 0x21
 8018b48:	2103      	movs	r1, #3
 8018b4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	2220      	movs	r2, #32
 8018b50:	2100      	movs	r1, #0
 8018b52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8018b54:	2303      	movs	r3, #3
 8018b56:	e082      	b.n	8018c5e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	68db      	ldr	r3, [r3, #12]
 8018b5e:	2204      	movs	r2, #4
 8018b60:	4013      	ands	r3, r2
 8018b62:	d1e5      	bne.n	8018b30 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	689a      	ldr	r2, [r3, #8]
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	493f      	ldr	r1, [pc, #252]	@ (8018c6c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8018b70:	400a      	ands	r2, r1
 8018b72:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	68db      	ldr	r3, [r3, #12]
 8018b7a:	22ff      	movs	r2, #255	@ 0xff
 8018b7c:	401a      	ands	r2, r3
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	493b      	ldr	r1, [pc, #236]	@ (8018c70 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8018b84:	430a      	orrs	r2, r1
 8018b86:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8018b88:	4b37      	ldr	r3, [pc, #220]	@ (8018c68 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	22fa      	movs	r2, #250	@ 0xfa
 8018b8e:	01d1      	lsls	r1, r2, #7
 8018b90:	0018      	movs	r0, r3
 8018b92:	f7e7 fb07 	bl	80001a4 <__udivsi3>
 8018b96:	0003      	movs	r3, r0
 8018b98:	001a      	movs	r2, r3
 8018b9a:	0013      	movs	r3, r2
 8018b9c:	015b      	lsls	r3, r3, #5
 8018b9e:	1a9b      	subs	r3, r3, r2
 8018ba0:	009b      	lsls	r3, r3, #2
 8018ba2:	189b      	adds	r3, r3, r2
 8018ba4:	00db      	lsls	r3, r3, #3
 8018ba6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8018ba8:	697b      	ldr	r3, [r7, #20]
 8018baa:	3b01      	subs	r3, #1
 8018bac:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8018bae:	697b      	ldr	r3, [r7, #20]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d10d      	bne.n	8018bd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	22ff      	movs	r2, #255	@ 0xff
 8018bba:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	2221      	movs	r2, #33	@ 0x21
 8018bc0:	2103      	movs	r1, #3
 8018bc2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	2220      	movs	r2, #32
 8018bc8:	2100      	movs	r1, #0
 8018bca:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8018bcc:	2303      	movs	r3, #3
 8018bce:	e046      	b.n	8018c5e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	68db      	ldr	r3, [r3, #12]
 8018bd6:	2204      	movs	r2, #4
 8018bd8:	4013      	ands	r3, r2
 8018bda:	d0e5      	beq.n	8018ba8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	689a      	ldr	r2, [r3, #8]
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	2107      	movs	r1, #7
 8018be8:	438a      	bics	r2, r1
 8018bea:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	6899      	ldr	r1, [r3, #8]
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	687a      	ldr	r2, [r7, #4]
 8018bf8:	430a      	orrs	r2, r1
 8018bfa:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	68ba      	ldr	r2, [r7, #8]
 8018c02:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8018c04:	4b1b      	ldr	r3, [pc, #108]	@ (8018c74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8018c06:	681a      	ldr	r2, [r3, #0]
 8018c08:	4b1a      	ldr	r3, [pc, #104]	@ (8018c74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8018c0a:	2180      	movs	r1, #128	@ 0x80
 8018c0c:	0349      	lsls	r1, r1, #13
 8018c0e:	430a      	orrs	r2, r1
 8018c10:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8018c12:	4b18      	ldr	r3, [pc, #96]	@ (8018c74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8018c14:	689a      	ldr	r2, [r3, #8]
 8018c16:	4b17      	ldr	r3, [pc, #92]	@ (8018c74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8018c18:	2180      	movs	r1, #128	@ 0x80
 8018c1a:	0349      	lsls	r1, r1, #13
 8018c1c:	430a      	orrs	r2, r1
 8018c1e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	689a      	ldr	r2, [r3, #8]
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	2180      	movs	r1, #128	@ 0x80
 8018c2c:	01c9      	lsls	r1, r1, #7
 8018c2e:	430a      	orrs	r2, r1
 8018c30:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	689a      	ldr	r2, [r3, #8]
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	2180      	movs	r1, #128	@ 0x80
 8018c3e:	00c9      	lsls	r1, r1, #3
 8018c40:	430a      	orrs	r2, r1
 8018c42:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	22ff      	movs	r2, #255	@ 0xff
 8018c4a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	2221      	movs	r2, #33	@ 0x21
 8018c50:	2101      	movs	r1, #1
 8018c52:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	2220      	movs	r2, #32
 8018c58:	2100      	movs	r1, #0
 8018c5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018c5c:	2300      	movs	r3, #0
}
 8018c5e:	0018      	movs	r0, r3
 8018c60:	46bd      	mov	sp, r7
 8018c62:	b006      	add	sp, #24
 8018c64:	bd80      	pop	{r7, pc}
 8018c66:	46c0      	nop			@ (mov r8, r8)
 8018c68:	200000dc 	.word	0x200000dc
 8018c6c:	fffffbff 	.word	0xfffffbff
 8018c70:	fffffb7f 	.word	0xfffffb7f
 8018c74:	40010400 	.word	0x40010400

08018c78 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8018c78:	b580      	push	{r7, lr}
 8018c7a:	b084      	sub	sp, #16
 8018c7c:	af00      	add	r7, sp, #0
 8018c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8018c80:	2300      	movs	r3, #0
 8018c82:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	2220      	movs	r2, #32
 8018c88:	5c9b      	ldrb	r3, [r3, r2]
 8018c8a:	2b01      	cmp	r3, #1
 8018c8c:	d101      	bne.n	8018c92 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8018c8e:	2302      	movs	r3, #2
 8018c90:	e04e      	b.n	8018d30 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	2220      	movs	r2, #32
 8018c96:	2101      	movs	r1, #1
 8018c98:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	2221      	movs	r2, #33	@ 0x21
 8018c9e:	2102      	movs	r1, #2
 8018ca0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	22ca      	movs	r2, #202	@ 0xca
 8018ca8:	625a      	str	r2, [r3, #36]	@ 0x24
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	2253      	movs	r2, #83	@ 0x53
 8018cb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	689a      	ldr	r2, [r3, #8]
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	491e      	ldr	r1, [pc, #120]	@ (8018d38 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8018cbe:	400a      	ands	r2, r1
 8018cc0:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	689a      	ldr	r2, [r3, #8]
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	491b      	ldr	r1, [pc, #108]	@ (8018d3c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8018cce:	400a      	ands	r2, r1
 8018cd0:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8018cd2:	f7f8 f87f 	bl	8010dd4 <HAL_GetTick>
 8018cd6:	0003      	movs	r3, r0
 8018cd8:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8018cda:	e016      	b.n	8018d0a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018cdc:	f7f8 f87a 	bl	8010dd4 <HAL_GetTick>
 8018ce0:	0002      	movs	r2, r0
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	1ad2      	subs	r2, r2, r3
 8018ce6:	23fa      	movs	r3, #250	@ 0xfa
 8018ce8:	009b      	lsls	r3, r3, #2
 8018cea:	429a      	cmp	r2, r3
 8018cec:	d90d      	bls.n	8018d0a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	22ff      	movs	r2, #255	@ 0xff
 8018cf4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	2221      	movs	r2, #33	@ 0x21
 8018cfa:	2103      	movs	r1, #3
 8018cfc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	2220      	movs	r2, #32
 8018d02:	2100      	movs	r1, #0
 8018d04:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8018d06:	2303      	movs	r3, #3
 8018d08:	e012      	b.n	8018d30 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	68db      	ldr	r3, [r3, #12]
 8018d10:	2204      	movs	r2, #4
 8018d12:	4013      	ands	r3, r2
 8018d14:	d0e2      	beq.n	8018cdc <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	22ff      	movs	r2, #255	@ 0xff
 8018d1c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	2221      	movs	r2, #33	@ 0x21
 8018d22:	2101      	movs	r1, #1
 8018d24:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	2220      	movs	r2, #32
 8018d2a:	2100      	movs	r1, #0
 8018d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018d2e:	2300      	movs	r3, #0
}
 8018d30:	0018      	movs	r0, r3
 8018d32:	46bd      	mov	sp, r7
 8018d34:	b004      	add	sp, #16
 8018d36:	bd80      	pop	{r7, pc}
 8018d38:	fffffbff 	.word	0xfffffbff
 8018d3c:	ffffbfff 	.word	0xffffbfff

08018d40 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b082      	sub	sp, #8
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8018d48:	4b13      	ldr	r3, [pc, #76]	@ (8018d98 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8018d4a:	2280      	movs	r2, #128	@ 0x80
 8018d4c:	0352      	lsls	r2, r2, #13
 8018d4e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	689a      	ldr	r2, [r3, #8]
 8018d56:	2380      	movs	r3, #128	@ 0x80
 8018d58:	01db      	lsls	r3, r3, #7
 8018d5a:	4013      	ands	r3, r2
 8018d5c:	d014      	beq.n	8018d88 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	68da      	ldr	r2, [r3, #12]
 8018d64:	2380      	movs	r3, #128	@ 0x80
 8018d66:	00db      	lsls	r3, r3, #3
 8018d68:	4013      	ands	r3, r2
 8018d6a:	d00d      	beq.n	8018d88 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	68db      	ldr	r3, [r3, #12]
 8018d72:	22ff      	movs	r2, #255	@ 0xff
 8018d74:	401a      	ands	r2, r3
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	4908      	ldr	r1, [pc, #32]	@ (8018d9c <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8018d7c:	430a      	orrs	r2, r1
 8018d7e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	0018      	movs	r0, r3
 8018d84:	f000 f80c 	bl	8018da0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	2221      	movs	r2, #33	@ 0x21
 8018d8c:	2101      	movs	r1, #1
 8018d8e:	5499      	strb	r1, [r3, r2]
}
 8018d90:	46c0      	nop			@ (mov r8, r8)
 8018d92:	46bd      	mov	sp, r7
 8018d94:	b002      	add	sp, #8
 8018d96:	bd80      	pop	{r7, pc}
 8018d98:	40010400 	.word	0x40010400
 8018d9c:	fffffb7f 	.word	0xfffffb7f

08018da0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8018da0:	b580      	push	{r7, lr}
 8018da2:	b082      	sub	sp, #8
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8018da8:	46c0      	nop			@ (mov r8, r8)
 8018daa:	46bd      	mov	sp, r7
 8018dac:	b002      	add	sp, #8
 8018dae:	bd80      	pop	{r7, pc}

08018db0 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b086      	sub	sp, #24
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	60f8      	str	r0, [r7, #12]
 8018db8:	60b9      	str	r1, [r7, #8]
 8018dba:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	3350      	adds	r3, #80	@ 0x50
 8018dc6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8018dc8:	68bb      	ldr	r3, [r7, #8]
 8018dca:	009b      	lsls	r3, r3, #2
 8018dcc:	697a      	ldr	r2, [r7, #20]
 8018dce:	18d3      	adds	r3, r2, r3
 8018dd0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8018dd2:	697b      	ldr	r3, [r7, #20]
 8018dd4:	687a      	ldr	r2, [r7, #4]
 8018dd6:	601a      	str	r2, [r3, #0]
}
 8018dd8:	46c0      	nop			@ (mov r8, r8)
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	b006      	add	sp, #24
 8018dde:	bd80      	pop	{r7, pc}

08018de0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8018de0:	b580      	push	{r7, lr}
 8018de2:	b084      	sub	sp, #16
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	6078      	str	r0, [r7, #4]
 8018de8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8018dea:	2300      	movs	r3, #0
 8018dec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	3350      	adds	r3, #80	@ 0x50
 8018df4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8018df6:	683b      	ldr	r3, [r7, #0]
 8018df8:	009b      	lsls	r3, r3, #2
 8018dfa:	68fa      	ldr	r2, [r7, #12]
 8018dfc:	18d3      	adds	r3, r2, r3
 8018dfe:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	681b      	ldr	r3, [r3, #0]
}
 8018e04:	0018      	movs	r0, r3
 8018e06:	46bd      	mov	sp, r7
 8018e08:	b004      	add	sp, #16
 8018e0a:	bd80      	pop	{r7, pc}

08018e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b082      	sub	sp, #8
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d101      	bne.n	8018e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8018e1a:	2301      	movs	r3, #1
 8018e1c:	e032      	b.n	8018e84 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	2239      	movs	r2, #57	@ 0x39
 8018e22:	5c9b      	ldrb	r3, [r3, r2]
 8018e24:	b2db      	uxtb	r3, r3
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d107      	bne.n	8018e3a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	2238      	movs	r2, #56	@ 0x38
 8018e2e:	2100      	movs	r1, #0
 8018e30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	0018      	movs	r0, r3
 8018e36:	f7f7 f8dd 	bl	800fff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	2239      	movs	r2, #57	@ 0x39
 8018e3e:	2102      	movs	r1, #2
 8018e40:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	681a      	ldr	r2, [r3, #0]
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	3304      	adds	r3, #4
 8018e4a:	0019      	movs	r1, r3
 8018e4c:	0010      	movs	r0, r2
 8018e4e:	f000 fa1d 	bl	801928c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	223e      	movs	r2, #62	@ 0x3e
 8018e56:	2101      	movs	r1, #1
 8018e58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	223a      	movs	r2, #58	@ 0x3a
 8018e5e:	2101      	movs	r1, #1
 8018e60:	5499      	strb	r1, [r3, r2]
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	223b      	movs	r2, #59	@ 0x3b
 8018e66:	2101      	movs	r1, #1
 8018e68:	5499      	strb	r1, [r3, r2]
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	223c      	movs	r2, #60	@ 0x3c
 8018e6e:	2101      	movs	r1, #1
 8018e70:	5499      	strb	r1, [r3, r2]
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	223d      	movs	r2, #61	@ 0x3d
 8018e76:	2101      	movs	r1, #1
 8018e78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	2239      	movs	r2, #57	@ 0x39
 8018e7e:	2101      	movs	r1, #1
 8018e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018e82:	2300      	movs	r3, #0
}
 8018e84:	0018      	movs	r0, r3
 8018e86:	46bd      	mov	sp, r7
 8018e88:	b002      	add	sp, #8
 8018e8a:	bd80      	pop	{r7, pc}

08018e8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b084      	sub	sp, #16
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	2239      	movs	r2, #57	@ 0x39
 8018e98:	5c9b      	ldrb	r3, [r3, r2]
 8018e9a:	b2db      	uxtb	r3, r3
 8018e9c:	2b01      	cmp	r3, #1
 8018e9e:	d001      	beq.n	8018ea4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8018ea0:	2301      	movs	r3, #1
 8018ea2:	e033      	b.n	8018f0c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	2239      	movs	r2, #57	@ 0x39
 8018ea8:	2102      	movs	r1, #2
 8018eaa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	681a      	ldr	r2, [r3, #0]
 8018eb0:	2380      	movs	r3, #128	@ 0x80
 8018eb2:	05db      	lsls	r3, r3, #23
 8018eb4:	429a      	cmp	r2, r3
 8018eb6:	d00e      	beq.n	8018ed6 <HAL_TIM_Base_Start+0x4a>
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	4a15      	ldr	r2, [pc, #84]	@ (8018f14 <HAL_TIM_Base_Start+0x88>)
 8018ebe:	4293      	cmp	r3, r2
 8018ec0:	d009      	beq.n	8018ed6 <HAL_TIM_Base_Start+0x4a>
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	4a14      	ldr	r2, [pc, #80]	@ (8018f18 <HAL_TIM_Base_Start+0x8c>)
 8018ec8:	4293      	cmp	r3, r2
 8018eca:	d004      	beq.n	8018ed6 <HAL_TIM_Base_Start+0x4a>
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	4a12      	ldr	r2, [pc, #72]	@ (8018f1c <HAL_TIM_Base_Start+0x90>)
 8018ed2:	4293      	cmp	r3, r2
 8018ed4:	d111      	bne.n	8018efa <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	689b      	ldr	r3, [r3, #8]
 8018edc:	2207      	movs	r2, #7
 8018ede:	4013      	ands	r3, r2
 8018ee0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	2b06      	cmp	r3, #6
 8018ee6:	d010      	beq.n	8018f0a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	681a      	ldr	r2, [r3, #0]
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	2101      	movs	r1, #1
 8018ef4:	430a      	orrs	r2, r1
 8018ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018ef8:	e007      	b.n	8018f0a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	681a      	ldr	r2, [r3, #0]
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	2101      	movs	r1, #1
 8018f06:	430a      	orrs	r2, r1
 8018f08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8018f0a:	2300      	movs	r3, #0
}
 8018f0c:	0018      	movs	r0, r3
 8018f0e:	46bd      	mov	sp, r7
 8018f10:	b004      	add	sp, #16
 8018f12:	bd80      	pop	{r7, pc}
 8018f14:	40000400 	.word	0x40000400
 8018f18:	40010800 	.word	0x40010800
 8018f1c:	40011400 	.word	0x40011400

08018f20 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8018f20:	b580      	push	{r7, lr}
 8018f22:	b082      	sub	sp, #8
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	6a1b      	ldr	r3, [r3, #32]
 8018f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8018f58 <HAL_TIM_Base_Stop+0x38>)
 8018f30:	4013      	ands	r3, r2
 8018f32:	d107      	bne.n	8018f44 <HAL_TIM_Base_Stop+0x24>
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	681a      	ldr	r2, [r3, #0]
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	2101      	movs	r1, #1
 8018f40:	438a      	bics	r2, r1
 8018f42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	2239      	movs	r2, #57	@ 0x39
 8018f48:	2101      	movs	r1, #1
 8018f4a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8018f4c:	2300      	movs	r3, #0
}
 8018f4e:	0018      	movs	r0, r3
 8018f50:	46bd      	mov	sp, r7
 8018f52:	b002      	add	sp, #8
 8018f54:	bd80      	pop	{r7, pc}
 8018f56:	46c0      	nop			@ (mov r8, r8)
 8018f58:	00001111 	.word	0x00001111

08018f5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8018f5c:	b580      	push	{r7, lr}
 8018f5e:	b082      	sub	sp, #8
 8018f60:	af00      	add	r7, sp, #0
 8018f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d101      	bne.n	8018f6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8018f6a:	2301      	movs	r3, #1
 8018f6c:	e032      	b.n	8018fd4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	2239      	movs	r2, #57	@ 0x39
 8018f72:	5c9b      	ldrb	r3, [r3, r2]
 8018f74:	b2db      	uxtb	r3, r3
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d107      	bne.n	8018f8a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	2238      	movs	r2, #56	@ 0x38
 8018f7e:	2100      	movs	r1, #0
 8018f80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	0018      	movs	r0, r3
 8018f86:	f7f7 f811 	bl	800ffac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	2239      	movs	r2, #57	@ 0x39
 8018f8e:	2102      	movs	r1, #2
 8018f90:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	681a      	ldr	r2, [r3, #0]
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	3304      	adds	r3, #4
 8018f9a:	0019      	movs	r1, r3
 8018f9c:	0010      	movs	r0, r2
 8018f9e:	f000 f975 	bl	801928c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	223e      	movs	r2, #62	@ 0x3e
 8018fa6:	2101      	movs	r1, #1
 8018fa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	223a      	movs	r2, #58	@ 0x3a
 8018fae:	2101      	movs	r1, #1
 8018fb0:	5499      	strb	r1, [r3, r2]
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	223b      	movs	r2, #59	@ 0x3b
 8018fb6:	2101      	movs	r1, #1
 8018fb8:	5499      	strb	r1, [r3, r2]
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	223c      	movs	r2, #60	@ 0x3c
 8018fbe:	2101      	movs	r1, #1
 8018fc0:	5499      	strb	r1, [r3, r2]
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	223d      	movs	r2, #61	@ 0x3d
 8018fc6:	2101      	movs	r1, #1
 8018fc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	2239      	movs	r2, #57	@ 0x39
 8018fce:	2101      	movs	r1, #1
 8018fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018fd2:	2300      	movs	r3, #0
}
 8018fd4:	0018      	movs	r0, r3
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	b002      	add	sp, #8
 8018fda:	bd80      	pop	{r7, pc}

08018fdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8018fdc:	b580      	push	{r7, lr}
 8018fde:	b084      	sub	sp, #16
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	6078      	str	r0, [r7, #4]
 8018fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8018fe6:	683b      	ldr	r3, [r7, #0]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d108      	bne.n	8018ffe <HAL_TIM_PWM_Start+0x22>
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	223a      	movs	r2, #58	@ 0x3a
 8018ff0:	5c9b      	ldrb	r3, [r3, r2]
 8018ff2:	b2db      	uxtb	r3, r3
 8018ff4:	3b01      	subs	r3, #1
 8018ff6:	1e5a      	subs	r2, r3, #1
 8018ff8:	4193      	sbcs	r3, r2
 8018ffa:	b2db      	uxtb	r3, r3
 8018ffc:	e01f      	b.n	801903e <HAL_TIM_PWM_Start+0x62>
 8018ffe:	683b      	ldr	r3, [r7, #0]
 8019000:	2b04      	cmp	r3, #4
 8019002:	d108      	bne.n	8019016 <HAL_TIM_PWM_Start+0x3a>
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	223b      	movs	r2, #59	@ 0x3b
 8019008:	5c9b      	ldrb	r3, [r3, r2]
 801900a:	b2db      	uxtb	r3, r3
 801900c:	3b01      	subs	r3, #1
 801900e:	1e5a      	subs	r2, r3, #1
 8019010:	4193      	sbcs	r3, r2
 8019012:	b2db      	uxtb	r3, r3
 8019014:	e013      	b.n	801903e <HAL_TIM_PWM_Start+0x62>
 8019016:	683b      	ldr	r3, [r7, #0]
 8019018:	2b08      	cmp	r3, #8
 801901a:	d108      	bne.n	801902e <HAL_TIM_PWM_Start+0x52>
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	223c      	movs	r2, #60	@ 0x3c
 8019020:	5c9b      	ldrb	r3, [r3, r2]
 8019022:	b2db      	uxtb	r3, r3
 8019024:	3b01      	subs	r3, #1
 8019026:	1e5a      	subs	r2, r3, #1
 8019028:	4193      	sbcs	r3, r2
 801902a:	b2db      	uxtb	r3, r3
 801902c:	e007      	b.n	801903e <HAL_TIM_PWM_Start+0x62>
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	223d      	movs	r2, #61	@ 0x3d
 8019032:	5c9b      	ldrb	r3, [r3, r2]
 8019034:	b2db      	uxtb	r3, r3
 8019036:	3b01      	subs	r3, #1
 8019038:	1e5a      	subs	r2, r3, #1
 801903a:	4193      	sbcs	r3, r2
 801903c:	b2db      	uxtb	r3, r3
 801903e:	2b00      	cmp	r3, #0
 8019040:	d001      	beq.n	8019046 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8019042:	2301      	movs	r3, #1
 8019044:	e052      	b.n	80190ec <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8019046:	683b      	ldr	r3, [r7, #0]
 8019048:	2b00      	cmp	r3, #0
 801904a:	d104      	bne.n	8019056 <HAL_TIM_PWM_Start+0x7a>
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	223a      	movs	r2, #58	@ 0x3a
 8019050:	2102      	movs	r1, #2
 8019052:	5499      	strb	r1, [r3, r2]
 8019054:	e013      	b.n	801907e <HAL_TIM_PWM_Start+0xa2>
 8019056:	683b      	ldr	r3, [r7, #0]
 8019058:	2b04      	cmp	r3, #4
 801905a:	d104      	bne.n	8019066 <HAL_TIM_PWM_Start+0x8a>
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	223b      	movs	r2, #59	@ 0x3b
 8019060:	2102      	movs	r1, #2
 8019062:	5499      	strb	r1, [r3, r2]
 8019064:	e00b      	b.n	801907e <HAL_TIM_PWM_Start+0xa2>
 8019066:	683b      	ldr	r3, [r7, #0]
 8019068:	2b08      	cmp	r3, #8
 801906a:	d104      	bne.n	8019076 <HAL_TIM_PWM_Start+0x9a>
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	223c      	movs	r2, #60	@ 0x3c
 8019070:	2102      	movs	r1, #2
 8019072:	5499      	strb	r1, [r3, r2]
 8019074:	e003      	b.n	801907e <HAL_TIM_PWM_Start+0xa2>
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	223d      	movs	r2, #61	@ 0x3d
 801907a:	2102      	movs	r1, #2
 801907c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	6839      	ldr	r1, [r7, #0]
 8019084:	2201      	movs	r2, #1
 8019086:	0018      	movs	r0, r3
 8019088:	f000 fa62 	bl	8019550 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	681a      	ldr	r2, [r3, #0]
 8019090:	2380      	movs	r3, #128	@ 0x80
 8019092:	05db      	lsls	r3, r3, #23
 8019094:	429a      	cmp	r2, r3
 8019096:	d00e      	beq.n	80190b6 <HAL_TIM_PWM_Start+0xda>
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	4a15      	ldr	r2, [pc, #84]	@ (80190f4 <HAL_TIM_PWM_Start+0x118>)
 801909e:	4293      	cmp	r3, r2
 80190a0:	d009      	beq.n	80190b6 <HAL_TIM_PWM_Start+0xda>
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	4a14      	ldr	r2, [pc, #80]	@ (80190f8 <HAL_TIM_PWM_Start+0x11c>)
 80190a8:	4293      	cmp	r3, r2
 80190aa:	d004      	beq.n	80190b6 <HAL_TIM_PWM_Start+0xda>
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	4a12      	ldr	r2, [pc, #72]	@ (80190fc <HAL_TIM_PWM_Start+0x120>)
 80190b2:	4293      	cmp	r3, r2
 80190b4:	d111      	bne.n	80190da <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	689b      	ldr	r3, [r3, #8]
 80190bc:	2207      	movs	r2, #7
 80190be:	4013      	ands	r3, r2
 80190c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	2b06      	cmp	r3, #6
 80190c6:	d010      	beq.n	80190ea <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	681a      	ldr	r2, [r3, #0]
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	681b      	ldr	r3, [r3, #0]
 80190d2:	2101      	movs	r1, #1
 80190d4:	430a      	orrs	r2, r1
 80190d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80190d8:	e007      	b.n	80190ea <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	681a      	ldr	r2, [r3, #0]
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	2101      	movs	r1, #1
 80190e6:	430a      	orrs	r2, r1
 80190e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80190ea:	2300      	movs	r3, #0
}
 80190ec:	0018      	movs	r0, r3
 80190ee:	46bd      	mov	sp, r7
 80190f0:	b004      	add	sp, #16
 80190f2:	bd80      	pop	{r7, pc}
 80190f4:	40000400 	.word	0x40000400
 80190f8:	40010800 	.word	0x40010800
 80190fc:	40011400 	.word	0x40011400

08019100 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8019100:	b580      	push	{r7, lr}
 8019102:	b086      	sub	sp, #24
 8019104:	af00      	add	r7, sp, #0
 8019106:	60f8      	str	r0, [r7, #12]
 8019108:	60b9      	str	r1, [r7, #8]
 801910a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801910c:	2317      	movs	r3, #23
 801910e:	18fb      	adds	r3, r7, r3
 8019110:	2200      	movs	r2, #0
 8019112:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	2238      	movs	r2, #56	@ 0x38
 8019118:	5c9b      	ldrb	r3, [r3, r2]
 801911a:	2b01      	cmp	r3, #1
 801911c:	d101      	bne.n	8019122 <HAL_TIM_PWM_ConfigChannel+0x22>
 801911e:	2302      	movs	r3, #2
 8019120:	e0ad      	b.n	801927e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	2238      	movs	r2, #56	@ 0x38
 8019126:	2101      	movs	r1, #1
 8019128:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	2b0c      	cmp	r3, #12
 801912e:	d100      	bne.n	8019132 <HAL_TIM_PWM_ConfigChannel+0x32>
 8019130:	e076      	b.n	8019220 <HAL_TIM_PWM_ConfigChannel+0x120>
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	2b0c      	cmp	r3, #12
 8019136:	d900      	bls.n	801913a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8019138:	e095      	b.n	8019266 <HAL_TIM_PWM_ConfigChannel+0x166>
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	2b08      	cmp	r3, #8
 801913e:	d04e      	beq.n	80191de <HAL_TIM_PWM_ConfigChannel+0xde>
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	2b08      	cmp	r3, #8
 8019144:	d900      	bls.n	8019148 <HAL_TIM_PWM_ConfigChannel+0x48>
 8019146:	e08e      	b.n	8019266 <HAL_TIM_PWM_ConfigChannel+0x166>
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	2b00      	cmp	r3, #0
 801914c:	d003      	beq.n	8019156 <HAL_TIM_PWM_ConfigChannel+0x56>
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	2b04      	cmp	r3, #4
 8019152:	d021      	beq.n	8019198 <HAL_TIM_PWM_ConfigChannel+0x98>
 8019154:	e087      	b.n	8019266 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	68ba      	ldr	r2, [r7, #8]
 801915c:	0011      	movs	r1, r2
 801915e:	0018      	movs	r0, r3
 8019160:	f000 f8f2 	bl	8019348 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	699a      	ldr	r2, [r3, #24]
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	2108      	movs	r1, #8
 8019170:	430a      	orrs	r2, r1
 8019172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	699a      	ldr	r2, [r3, #24]
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	2104      	movs	r1, #4
 8019180:	438a      	bics	r2, r1
 8019182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	6999      	ldr	r1, [r3, #24]
 801918a:	68bb      	ldr	r3, [r7, #8]
 801918c:	68da      	ldr	r2, [r3, #12]
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	430a      	orrs	r2, r1
 8019194:	619a      	str	r2, [r3, #24]
      break;
 8019196:	e06b      	b.n	8019270 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	68ba      	ldr	r2, [r7, #8]
 801919e:	0011      	movs	r1, r2
 80191a0:	0018      	movs	r0, r3
 80191a2:	f000 f90d 	bl	80193c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	699a      	ldr	r2, [r3, #24]
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	2180      	movs	r1, #128	@ 0x80
 80191b2:	0109      	lsls	r1, r1, #4
 80191b4:	430a      	orrs	r2, r1
 80191b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	699a      	ldr	r2, [r3, #24]
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	4931      	ldr	r1, [pc, #196]	@ (8019288 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80191c4:	400a      	ands	r2, r1
 80191c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	6999      	ldr	r1, [r3, #24]
 80191ce:	68bb      	ldr	r3, [r7, #8]
 80191d0:	68db      	ldr	r3, [r3, #12]
 80191d2:	021a      	lsls	r2, r3, #8
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	430a      	orrs	r2, r1
 80191da:	619a      	str	r2, [r3, #24]
      break;
 80191dc:	e048      	b.n	8019270 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80191de:	68fb      	ldr	r3, [r7, #12]
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	68ba      	ldr	r2, [r7, #8]
 80191e4:	0011      	movs	r1, r2
 80191e6:	0018      	movs	r0, r3
 80191e8:	f000 f92c 	bl	8019444 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	69da      	ldr	r2, [r3, #28]
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	2108      	movs	r1, #8
 80191f8:	430a      	orrs	r2, r1
 80191fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	69da      	ldr	r2, [r3, #28]
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	2104      	movs	r1, #4
 8019208:	438a      	bics	r2, r1
 801920a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	69d9      	ldr	r1, [r3, #28]
 8019212:	68bb      	ldr	r3, [r7, #8]
 8019214:	68da      	ldr	r2, [r3, #12]
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	430a      	orrs	r2, r1
 801921c:	61da      	str	r2, [r3, #28]
      break;
 801921e:	e027      	b.n	8019270 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	68ba      	ldr	r2, [r7, #8]
 8019226:	0011      	movs	r1, r2
 8019228:	0018      	movs	r0, r3
 801922a:	f000 f94b 	bl	80194c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	69da      	ldr	r2, [r3, #28]
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	2180      	movs	r1, #128	@ 0x80
 801923a:	0109      	lsls	r1, r1, #4
 801923c:	430a      	orrs	r2, r1
 801923e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	69da      	ldr	r2, [r3, #28]
 8019246:	68fb      	ldr	r3, [r7, #12]
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	490f      	ldr	r1, [pc, #60]	@ (8019288 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801924c:	400a      	ands	r2, r1
 801924e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	69d9      	ldr	r1, [r3, #28]
 8019256:	68bb      	ldr	r3, [r7, #8]
 8019258:	68db      	ldr	r3, [r3, #12]
 801925a:	021a      	lsls	r2, r3, #8
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	430a      	orrs	r2, r1
 8019262:	61da      	str	r2, [r3, #28]
      break;
 8019264:	e004      	b.n	8019270 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8019266:	2317      	movs	r3, #23
 8019268:	18fb      	adds	r3, r7, r3
 801926a:	2201      	movs	r2, #1
 801926c:	701a      	strb	r2, [r3, #0]
      break;
 801926e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	2238      	movs	r2, #56	@ 0x38
 8019274:	2100      	movs	r1, #0
 8019276:	5499      	strb	r1, [r3, r2]

  return status;
 8019278:	2317      	movs	r3, #23
 801927a:	18fb      	adds	r3, r7, r3
 801927c:	781b      	ldrb	r3, [r3, #0]
}
 801927e:	0018      	movs	r0, r3
 8019280:	46bd      	mov	sp, r7
 8019282:	b006      	add	sp, #24
 8019284:	bd80      	pop	{r7, pc}
 8019286:	46c0      	nop			@ (mov r8, r8)
 8019288:	fffffbff 	.word	0xfffffbff

0801928c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801928c:	b580      	push	{r7, lr}
 801928e:	b084      	sub	sp, #16
 8019290:	af00      	add	r7, sp, #0
 8019292:	6078      	str	r0, [r7, #4]
 8019294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801929c:	687a      	ldr	r2, [r7, #4]
 801929e:	2380      	movs	r3, #128	@ 0x80
 80192a0:	05db      	lsls	r3, r3, #23
 80192a2:	429a      	cmp	r2, r3
 80192a4:	d00b      	beq.n	80192be <TIM_Base_SetConfig+0x32>
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	4a23      	ldr	r2, [pc, #140]	@ (8019338 <TIM_Base_SetConfig+0xac>)
 80192aa:	4293      	cmp	r3, r2
 80192ac:	d007      	beq.n	80192be <TIM_Base_SetConfig+0x32>
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	4a22      	ldr	r2, [pc, #136]	@ (801933c <TIM_Base_SetConfig+0xb0>)
 80192b2:	4293      	cmp	r3, r2
 80192b4:	d003      	beq.n	80192be <TIM_Base_SetConfig+0x32>
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	4a21      	ldr	r2, [pc, #132]	@ (8019340 <TIM_Base_SetConfig+0xb4>)
 80192ba:	4293      	cmp	r3, r2
 80192bc:	d108      	bne.n	80192d0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	2270      	movs	r2, #112	@ 0x70
 80192c2:	4393      	bics	r3, r2
 80192c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80192c6:	683b      	ldr	r3, [r7, #0]
 80192c8:	685b      	ldr	r3, [r3, #4]
 80192ca:	68fa      	ldr	r2, [r7, #12]
 80192cc:	4313      	orrs	r3, r2
 80192ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80192d0:	687a      	ldr	r2, [r7, #4]
 80192d2:	2380      	movs	r3, #128	@ 0x80
 80192d4:	05db      	lsls	r3, r3, #23
 80192d6:	429a      	cmp	r2, r3
 80192d8:	d00b      	beq.n	80192f2 <TIM_Base_SetConfig+0x66>
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	4a16      	ldr	r2, [pc, #88]	@ (8019338 <TIM_Base_SetConfig+0xac>)
 80192de:	4293      	cmp	r3, r2
 80192e0:	d007      	beq.n	80192f2 <TIM_Base_SetConfig+0x66>
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	4a15      	ldr	r2, [pc, #84]	@ (801933c <TIM_Base_SetConfig+0xb0>)
 80192e6:	4293      	cmp	r3, r2
 80192e8:	d003      	beq.n	80192f2 <TIM_Base_SetConfig+0x66>
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	4a14      	ldr	r2, [pc, #80]	@ (8019340 <TIM_Base_SetConfig+0xb4>)
 80192ee:	4293      	cmp	r3, r2
 80192f0:	d108      	bne.n	8019304 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	4a13      	ldr	r2, [pc, #76]	@ (8019344 <TIM_Base_SetConfig+0xb8>)
 80192f6:	4013      	ands	r3, r2
 80192f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80192fa:	683b      	ldr	r3, [r7, #0]
 80192fc:	68db      	ldr	r3, [r3, #12]
 80192fe:	68fa      	ldr	r2, [r7, #12]
 8019300:	4313      	orrs	r3, r2
 8019302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	2280      	movs	r2, #128	@ 0x80
 8019308:	4393      	bics	r3, r2
 801930a:	001a      	movs	r2, r3
 801930c:	683b      	ldr	r3, [r7, #0]
 801930e:	691b      	ldr	r3, [r3, #16]
 8019310:	4313      	orrs	r3, r2
 8019312:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	68fa      	ldr	r2, [r7, #12]
 8019318:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801931a:	683b      	ldr	r3, [r7, #0]
 801931c:	689a      	ldr	r2, [r3, #8]
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8019322:	683b      	ldr	r3, [r7, #0]
 8019324:	681a      	ldr	r2, [r3, #0]
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	2201      	movs	r2, #1
 801932e:	615a      	str	r2, [r3, #20]
}
 8019330:	46c0      	nop			@ (mov r8, r8)
 8019332:	46bd      	mov	sp, r7
 8019334:	b004      	add	sp, #16
 8019336:	bd80      	pop	{r7, pc}
 8019338:	40000400 	.word	0x40000400
 801933c:	40010800 	.word	0x40010800
 8019340:	40011400 	.word	0x40011400
 8019344:	fffffcff 	.word	0xfffffcff

08019348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b086      	sub	sp, #24
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]
 8019350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	6a1b      	ldr	r3, [r3, #32]
 8019356:	2201      	movs	r2, #1
 8019358:	4393      	bics	r3, r2
 801935a:	001a      	movs	r2, r3
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	6a1b      	ldr	r3, [r3, #32]
 8019364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	685b      	ldr	r3, [r3, #4]
 801936a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	699b      	ldr	r3, [r3, #24]
 8019370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	2270      	movs	r2, #112	@ 0x70
 8019376:	4393      	bics	r3, r2
 8019378:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801937a:	68fb      	ldr	r3, [r7, #12]
 801937c:	2203      	movs	r2, #3
 801937e:	4393      	bics	r3, r2
 8019380:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019382:	683b      	ldr	r3, [r7, #0]
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	68fa      	ldr	r2, [r7, #12]
 8019388:	4313      	orrs	r3, r2
 801938a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801938c:	697b      	ldr	r3, [r7, #20]
 801938e:	2202      	movs	r2, #2
 8019390:	4393      	bics	r3, r2
 8019392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8019394:	683b      	ldr	r3, [r7, #0]
 8019396:	689b      	ldr	r3, [r3, #8]
 8019398:	697a      	ldr	r2, [r7, #20]
 801939a:	4313      	orrs	r3, r2
 801939c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	693a      	ldr	r2, [r7, #16]
 80193a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	68fa      	ldr	r2, [r7, #12]
 80193a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80193aa:	683b      	ldr	r3, [r7, #0]
 80193ac:	685a      	ldr	r2, [r3, #4]
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	697a      	ldr	r2, [r7, #20]
 80193b6:	621a      	str	r2, [r3, #32]
}
 80193b8:	46c0      	nop			@ (mov r8, r8)
 80193ba:	46bd      	mov	sp, r7
 80193bc:	b006      	add	sp, #24
 80193be:	bd80      	pop	{r7, pc}

080193c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	b086      	sub	sp, #24
 80193c4:	af00      	add	r7, sp, #0
 80193c6:	6078      	str	r0, [r7, #4]
 80193c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	6a1b      	ldr	r3, [r3, #32]
 80193ce:	2210      	movs	r2, #16
 80193d0:	4393      	bics	r3, r2
 80193d2:	001a      	movs	r2, r3
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	6a1b      	ldr	r3, [r3, #32]
 80193dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	685b      	ldr	r3, [r3, #4]
 80193e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	699b      	ldr	r3, [r3, #24]
 80193e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	4a13      	ldr	r2, [pc, #76]	@ (801943c <TIM_OC2_SetConfig+0x7c>)
 80193ee:	4013      	ands	r3, r2
 80193f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	4a12      	ldr	r2, [pc, #72]	@ (8019440 <TIM_OC2_SetConfig+0x80>)
 80193f6:	4013      	ands	r3, r2
 80193f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	021b      	lsls	r3, r3, #8
 8019400:	68fa      	ldr	r2, [r7, #12]
 8019402:	4313      	orrs	r3, r2
 8019404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8019406:	697b      	ldr	r3, [r7, #20]
 8019408:	2220      	movs	r2, #32
 801940a:	4393      	bics	r3, r2
 801940c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801940e:	683b      	ldr	r3, [r7, #0]
 8019410:	689b      	ldr	r3, [r3, #8]
 8019412:	011b      	lsls	r3, r3, #4
 8019414:	697a      	ldr	r2, [r7, #20]
 8019416:	4313      	orrs	r3, r2
 8019418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	693a      	ldr	r2, [r7, #16]
 801941e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	68fa      	ldr	r2, [r7, #12]
 8019424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8019426:	683b      	ldr	r3, [r7, #0]
 8019428:	685a      	ldr	r2, [r3, #4]
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	697a      	ldr	r2, [r7, #20]
 8019432:	621a      	str	r2, [r3, #32]
}
 8019434:	46c0      	nop			@ (mov r8, r8)
 8019436:	46bd      	mov	sp, r7
 8019438:	b006      	add	sp, #24
 801943a:	bd80      	pop	{r7, pc}
 801943c:	ffff8fff 	.word	0xffff8fff
 8019440:	fffffcff 	.word	0xfffffcff

08019444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019444:	b580      	push	{r7, lr}
 8019446:	b086      	sub	sp, #24
 8019448:	af00      	add	r7, sp, #0
 801944a:	6078      	str	r0, [r7, #4]
 801944c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	6a1b      	ldr	r3, [r3, #32]
 8019452:	4a1a      	ldr	r2, [pc, #104]	@ (80194bc <TIM_OC3_SetConfig+0x78>)
 8019454:	401a      	ands	r2, r3
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	6a1b      	ldr	r3, [r3, #32]
 801945e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	685b      	ldr	r3, [r3, #4]
 8019464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	69db      	ldr	r3, [r3, #28]
 801946a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	2270      	movs	r2, #112	@ 0x70
 8019470:	4393      	bics	r3, r2
 8019472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	2203      	movs	r2, #3
 8019478:	4393      	bics	r3, r2
 801947a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801947c:	683b      	ldr	r3, [r7, #0]
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	68fa      	ldr	r2, [r7, #12]
 8019482:	4313      	orrs	r3, r2
 8019484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8019486:	697b      	ldr	r3, [r7, #20]
 8019488:	4a0d      	ldr	r2, [pc, #52]	@ (80194c0 <TIM_OC3_SetConfig+0x7c>)
 801948a:	4013      	ands	r3, r2
 801948c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801948e:	683b      	ldr	r3, [r7, #0]
 8019490:	689b      	ldr	r3, [r3, #8]
 8019492:	021b      	lsls	r3, r3, #8
 8019494:	697a      	ldr	r2, [r7, #20]
 8019496:	4313      	orrs	r3, r2
 8019498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	693a      	ldr	r2, [r7, #16]
 801949e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	68fa      	ldr	r2, [r7, #12]
 80194a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80194a6:	683b      	ldr	r3, [r7, #0]
 80194a8:	685a      	ldr	r2, [r3, #4]
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	697a      	ldr	r2, [r7, #20]
 80194b2:	621a      	str	r2, [r3, #32]
}
 80194b4:	46c0      	nop			@ (mov r8, r8)
 80194b6:	46bd      	mov	sp, r7
 80194b8:	b006      	add	sp, #24
 80194ba:	bd80      	pop	{r7, pc}
 80194bc:	fffffeff 	.word	0xfffffeff
 80194c0:	fffffdff 	.word	0xfffffdff

080194c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80194c4:	b580      	push	{r7, lr}
 80194c6:	b086      	sub	sp, #24
 80194c8:	af00      	add	r7, sp, #0
 80194ca:	6078      	str	r0, [r7, #4]
 80194cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	6a1b      	ldr	r3, [r3, #32]
 80194d2:	4a1b      	ldr	r2, [pc, #108]	@ (8019540 <TIM_OC4_SetConfig+0x7c>)
 80194d4:	401a      	ands	r2, r3
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	6a1b      	ldr	r3, [r3, #32]
 80194de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	685b      	ldr	r3, [r3, #4]
 80194e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	69db      	ldr	r3, [r3, #28]
 80194ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80194ec:	68fb      	ldr	r3, [r7, #12]
 80194ee:	4a15      	ldr	r2, [pc, #84]	@ (8019544 <TIM_OC4_SetConfig+0x80>)
 80194f0:	4013      	ands	r3, r2
 80194f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	4a14      	ldr	r2, [pc, #80]	@ (8019548 <TIM_OC4_SetConfig+0x84>)
 80194f8:	4013      	ands	r3, r2
 80194fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80194fc:	683b      	ldr	r3, [r7, #0]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	021b      	lsls	r3, r3, #8
 8019502:	68fa      	ldr	r2, [r7, #12]
 8019504:	4313      	orrs	r3, r2
 8019506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8019508:	697b      	ldr	r3, [r7, #20]
 801950a:	4a10      	ldr	r2, [pc, #64]	@ (801954c <TIM_OC4_SetConfig+0x88>)
 801950c:	4013      	ands	r3, r2
 801950e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8019510:	683b      	ldr	r3, [r7, #0]
 8019512:	689b      	ldr	r3, [r3, #8]
 8019514:	031b      	lsls	r3, r3, #12
 8019516:	697a      	ldr	r2, [r7, #20]
 8019518:	4313      	orrs	r3, r2
 801951a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	693a      	ldr	r2, [r7, #16]
 8019520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	68fa      	ldr	r2, [r7, #12]
 8019526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8019528:	683b      	ldr	r3, [r7, #0]
 801952a:	685a      	ldr	r2, [r3, #4]
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	697a      	ldr	r2, [r7, #20]
 8019534:	621a      	str	r2, [r3, #32]
}
 8019536:	46c0      	nop			@ (mov r8, r8)
 8019538:	46bd      	mov	sp, r7
 801953a:	b006      	add	sp, #24
 801953c:	bd80      	pop	{r7, pc}
 801953e:	46c0      	nop			@ (mov r8, r8)
 8019540:	ffffefff 	.word	0xffffefff
 8019544:	ffff8fff 	.word	0xffff8fff
 8019548:	fffffcff 	.word	0xfffffcff
 801954c:	ffffdfff 	.word	0xffffdfff

08019550 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8019550:	b580      	push	{r7, lr}
 8019552:	b086      	sub	sp, #24
 8019554:	af00      	add	r7, sp, #0
 8019556:	60f8      	str	r0, [r7, #12]
 8019558:	60b9      	str	r1, [r7, #8]
 801955a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801955c:	68bb      	ldr	r3, [r7, #8]
 801955e:	221f      	movs	r2, #31
 8019560:	4013      	ands	r3, r2
 8019562:	2201      	movs	r2, #1
 8019564:	409a      	lsls	r2, r3
 8019566:	0013      	movs	r3, r2
 8019568:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	6a1b      	ldr	r3, [r3, #32]
 801956e:	697a      	ldr	r2, [r7, #20]
 8019570:	43d2      	mvns	r2, r2
 8019572:	401a      	ands	r2, r3
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	6a1a      	ldr	r2, [r3, #32]
 801957c:	68bb      	ldr	r3, [r7, #8]
 801957e:	211f      	movs	r1, #31
 8019580:	400b      	ands	r3, r1
 8019582:	6879      	ldr	r1, [r7, #4]
 8019584:	4099      	lsls	r1, r3
 8019586:	000b      	movs	r3, r1
 8019588:	431a      	orrs	r2, r3
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	621a      	str	r2, [r3, #32]
}
 801958e:	46c0      	nop			@ (mov r8, r8)
 8019590:	46bd      	mov	sp, r7
 8019592:	b006      	add	sp, #24
 8019594:	bd80      	pop	{r7, pc}
	...

08019598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b084      	sub	sp, #16
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
 80195a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	2238      	movs	r2, #56	@ 0x38
 80195a6:	5c9b      	ldrb	r3, [r3, r2]
 80195a8:	2b01      	cmp	r3, #1
 80195aa:	d101      	bne.n	80195b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80195ac:	2302      	movs	r3, #2
 80195ae:	e047      	b.n	8019640 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	2238      	movs	r2, #56	@ 0x38
 80195b4:	2101      	movs	r1, #1
 80195b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	2239      	movs	r2, #57	@ 0x39
 80195bc:	2102      	movs	r1, #2
 80195be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	685b      	ldr	r3, [r3, #4]
 80195c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	689b      	ldr	r3, [r3, #8]
 80195ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	2270      	movs	r2, #112	@ 0x70
 80195d4:	4393      	bics	r3, r2
 80195d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	68fa      	ldr	r2, [r7, #12]
 80195de:	4313      	orrs	r3, r2
 80195e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	68fa      	ldr	r2, [r7, #12]
 80195e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	681a      	ldr	r2, [r3, #0]
 80195ee:	2380      	movs	r3, #128	@ 0x80
 80195f0:	05db      	lsls	r3, r3, #23
 80195f2:	429a      	cmp	r2, r3
 80195f4:	d00e      	beq.n	8019614 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	4a13      	ldr	r2, [pc, #76]	@ (8019648 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80195fc:	4293      	cmp	r3, r2
 80195fe:	d009      	beq.n	8019614 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	4a11      	ldr	r2, [pc, #68]	@ (801964c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8019606:	4293      	cmp	r3, r2
 8019608:	d004      	beq.n	8019614 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	4a10      	ldr	r2, [pc, #64]	@ (8019650 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8019610:	4293      	cmp	r3, r2
 8019612:	d10c      	bne.n	801962e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8019614:	68bb      	ldr	r3, [r7, #8]
 8019616:	2280      	movs	r2, #128	@ 0x80
 8019618:	4393      	bics	r3, r2
 801961a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801961c:	683b      	ldr	r3, [r7, #0]
 801961e:	685b      	ldr	r3, [r3, #4]
 8019620:	68ba      	ldr	r2, [r7, #8]
 8019622:	4313      	orrs	r3, r2
 8019624:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	68ba      	ldr	r2, [r7, #8]
 801962c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	2239      	movs	r2, #57	@ 0x39
 8019632:	2101      	movs	r1, #1
 8019634:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	2238      	movs	r2, #56	@ 0x38
 801963a:	2100      	movs	r1, #0
 801963c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801963e:	2300      	movs	r3, #0
}
 8019640:	0018      	movs	r0, r3
 8019642:	46bd      	mov	sp, r7
 8019644:	b004      	add	sp, #16
 8019646:	bd80      	pop	{r7, pc}
 8019648:	40000400 	.word	0x40000400
 801964c:	40010800 	.word	0x40010800
 8019650:	40011400 	.word	0x40011400

08019654 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8019654:	b580      	push	{r7, lr}
 8019656:	b082      	sub	sp, #8
 8019658:	af00      	add	r7, sp, #0
 801965a:	6078      	str	r0, [r7, #4]
 801965c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	2238      	movs	r2, #56	@ 0x38
 8019662:	5c9b      	ldrb	r3, [r3, r2]
 8019664:	2b01      	cmp	r3, #1
 8019666:	d101      	bne.n	801966c <HAL_TIMEx_RemapConfig+0x18>
 8019668:	2302      	movs	r3, #2
 801966a:	e00c      	b.n	8019686 <HAL_TIMEx_RemapConfig+0x32>
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	2238      	movs	r2, #56	@ 0x38
 8019670:	2101      	movs	r1, #1
 8019672:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	683a      	ldr	r2, [r7, #0]
 801967a:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	2238      	movs	r2, #56	@ 0x38
 8019680:	2100      	movs	r1, #0
 8019682:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019684:	2300      	movs	r3, #0
}
 8019686:	0018      	movs	r0, r3
 8019688:	46bd      	mov	sp, r7
 801968a:	b002      	add	sp, #8
 801968c:	bd80      	pop	{r7, pc}
	...

08019690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b082      	sub	sp, #8
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	2b00      	cmp	r3, #0
 801969c:	d101      	bne.n	80196a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801969e:	2301      	movs	r3, #1
 80196a0:	e053      	b.n	801974a <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d116      	bne.n	80196d8 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	2278      	movs	r2, #120	@ 0x78
 80196ae:	2100      	movs	r1, #0
 80196b0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	0018      	movs	r0, r3
 80196b6:	f000 fd65 	bl	801a184 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	22b0      	movs	r2, #176	@ 0xb0
 80196be:	589b      	ldr	r3, [r3, r2]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d103      	bne.n	80196cc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	21b0      	movs	r1, #176	@ 0xb0
 80196c8:	4a22      	ldr	r2, [pc, #136]	@ (8019754 <HAL_UART_Init+0xc4>)
 80196ca:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	22b0      	movs	r2, #176	@ 0xb0
 80196d0:	589b      	ldr	r3, [r3, r2]
 80196d2:	687a      	ldr	r2, [r7, #4]
 80196d4:	0010      	movs	r0, r2
 80196d6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	2224      	movs	r2, #36	@ 0x24
 80196dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	681a      	ldr	r2, [r3, #0]
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	2101      	movs	r1, #1
 80196ea:	438a      	bics	r2, r1
 80196ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	0018      	movs	r0, r3
 80196f2:	f000 fd8b 	bl	801a20c <UART_SetConfig>
 80196f6:	0003      	movs	r3, r0
 80196f8:	2b01      	cmp	r3, #1
 80196fa:	d101      	bne.n	8019700 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80196fc:	2301      	movs	r3, #1
 80196fe:	e024      	b.n	801974a <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019704:	2b00      	cmp	r3, #0
 8019706:	d003      	beq.n	8019710 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	0018      	movs	r0, r3
 801970c:	f001 f81c 	bl	801a748 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	685a      	ldr	r2, [r3, #4]
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	490f      	ldr	r1, [pc, #60]	@ (8019758 <HAL_UART_Init+0xc8>)
 801971c:	400a      	ands	r2, r1
 801971e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	689a      	ldr	r2, [r3, #8]
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	212a      	movs	r1, #42	@ 0x2a
 801972c:	438a      	bics	r2, r1
 801972e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	681a      	ldr	r2, [r3, #0]
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	2101      	movs	r1, #1
 801973c:	430a      	orrs	r2, r1
 801973e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	0018      	movs	r0, r3
 8019744:	f001 f8b4 	bl	801a8b0 <UART_CheckIdleState>
 8019748:	0003      	movs	r3, r0
}
 801974a:	0018      	movs	r0, r3
 801974c:	46bd      	mov	sp, r7
 801974e:	b002      	add	sp, #8
 8019750:	bd80      	pop	{r7, pc}
 8019752:	46c0      	nop			@ (mov r8, r8)
 8019754:	08010221 	.word	0x08010221
 8019758:	ffffb7ff 	.word	0xffffb7ff

0801975c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801975c:	b580      	push	{r7, lr}
 801975e:	b08a      	sub	sp, #40	@ 0x28
 8019760:	af02      	add	r7, sp, #8
 8019762:	60f8      	str	r0, [r7, #12]
 8019764:	60b9      	str	r1, [r7, #8]
 8019766:	603b      	str	r3, [r7, #0]
 8019768:	1dbb      	adds	r3, r7, #6
 801976a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019770:	2b20      	cmp	r3, #32
 8019772:	d000      	beq.n	8019776 <HAL_UART_Transmit+0x1a>
 8019774:	e08c      	b.n	8019890 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8019776:	68bb      	ldr	r3, [r7, #8]
 8019778:	2b00      	cmp	r3, #0
 801977a:	d003      	beq.n	8019784 <HAL_UART_Transmit+0x28>
 801977c:	1dbb      	adds	r3, r7, #6
 801977e:	881b      	ldrh	r3, [r3, #0]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d101      	bne.n	8019788 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8019784:	2301      	movs	r3, #1
 8019786:	e084      	b.n	8019892 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	689a      	ldr	r2, [r3, #8]
 801978c:	2380      	movs	r3, #128	@ 0x80
 801978e:	015b      	lsls	r3, r3, #5
 8019790:	429a      	cmp	r2, r3
 8019792:	d109      	bne.n	80197a8 <HAL_UART_Transmit+0x4c>
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	691b      	ldr	r3, [r3, #16]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d105      	bne.n	80197a8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801979c:	68bb      	ldr	r3, [r7, #8]
 801979e:	2201      	movs	r2, #1
 80197a0:	4013      	ands	r3, r2
 80197a2:	d001      	beq.n	80197a8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80197a4:	2301      	movs	r3, #1
 80197a6:	e074      	b.n	8019892 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	2284      	movs	r2, #132	@ 0x84
 80197ac:	2100      	movs	r1, #0
 80197ae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	2221      	movs	r2, #33	@ 0x21
 80197b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80197b6:	f7f7 fb0d 	bl	8010dd4 <HAL_GetTick>
 80197ba:	0003      	movs	r3, r0
 80197bc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	1dba      	adds	r2, r7, #6
 80197c2:	2150      	movs	r1, #80	@ 0x50
 80197c4:	8812      	ldrh	r2, [r2, #0]
 80197c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	1dba      	adds	r2, r7, #6
 80197cc:	2152      	movs	r1, #82	@ 0x52
 80197ce:	8812      	ldrh	r2, [r2, #0]
 80197d0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	689a      	ldr	r2, [r3, #8]
 80197d6:	2380      	movs	r3, #128	@ 0x80
 80197d8:	015b      	lsls	r3, r3, #5
 80197da:	429a      	cmp	r2, r3
 80197dc:	d108      	bne.n	80197f0 <HAL_UART_Transmit+0x94>
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	691b      	ldr	r3, [r3, #16]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d104      	bne.n	80197f0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80197e6:	2300      	movs	r3, #0
 80197e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80197ea:	68bb      	ldr	r3, [r7, #8]
 80197ec:	61bb      	str	r3, [r7, #24]
 80197ee:	e003      	b.n	80197f8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80197f0:	68bb      	ldr	r3, [r7, #8]
 80197f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80197f4:	2300      	movs	r3, #0
 80197f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80197f8:	e02f      	b.n	801985a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80197fa:	697a      	ldr	r2, [r7, #20]
 80197fc:	68f8      	ldr	r0, [r7, #12]
 80197fe:	683b      	ldr	r3, [r7, #0]
 8019800:	9300      	str	r3, [sp, #0]
 8019802:	0013      	movs	r3, r2
 8019804:	2200      	movs	r2, #0
 8019806:	2180      	movs	r1, #128	@ 0x80
 8019808:	f001 f8fa 	bl	801aa00 <UART_WaitOnFlagUntilTimeout>
 801980c:	1e03      	subs	r3, r0, #0
 801980e:	d004      	beq.n	801981a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	2220      	movs	r2, #32
 8019814:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8019816:	2303      	movs	r3, #3
 8019818:	e03b      	b.n	8019892 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801981a:	69fb      	ldr	r3, [r7, #28]
 801981c:	2b00      	cmp	r3, #0
 801981e:	d10b      	bne.n	8019838 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8019820:	69bb      	ldr	r3, [r7, #24]
 8019822:	881b      	ldrh	r3, [r3, #0]
 8019824:	001a      	movs	r2, r3
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	05d2      	lsls	r2, r2, #23
 801982c:	0dd2      	lsrs	r2, r2, #23
 801982e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8019830:	69bb      	ldr	r3, [r7, #24]
 8019832:	3302      	adds	r3, #2
 8019834:	61bb      	str	r3, [r7, #24]
 8019836:	e007      	b.n	8019848 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8019838:	69fb      	ldr	r3, [r7, #28]
 801983a:	781a      	ldrb	r2, [r3, #0]
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8019842:	69fb      	ldr	r3, [r7, #28]
 8019844:	3301      	adds	r3, #1
 8019846:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	2252      	movs	r2, #82	@ 0x52
 801984c:	5a9b      	ldrh	r3, [r3, r2]
 801984e:	b29b      	uxth	r3, r3
 8019850:	3b01      	subs	r3, #1
 8019852:	b299      	uxth	r1, r3
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	2252      	movs	r2, #82	@ 0x52
 8019858:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	2252      	movs	r2, #82	@ 0x52
 801985e:	5a9b      	ldrh	r3, [r3, r2]
 8019860:	b29b      	uxth	r3, r3
 8019862:	2b00      	cmp	r3, #0
 8019864:	d1c9      	bne.n	80197fa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8019866:	697a      	ldr	r2, [r7, #20]
 8019868:	68f8      	ldr	r0, [r7, #12]
 801986a:	683b      	ldr	r3, [r7, #0]
 801986c:	9300      	str	r3, [sp, #0]
 801986e:	0013      	movs	r3, r2
 8019870:	2200      	movs	r2, #0
 8019872:	2140      	movs	r1, #64	@ 0x40
 8019874:	f001 f8c4 	bl	801aa00 <UART_WaitOnFlagUntilTimeout>
 8019878:	1e03      	subs	r3, r0, #0
 801987a:	d004      	beq.n	8019886 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	2220      	movs	r2, #32
 8019880:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8019882:	2303      	movs	r3, #3
 8019884:	e005      	b.n	8019892 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	2220      	movs	r2, #32
 801988a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801988c:	2300      	movs	r3, #0
 801988e:	e000      	b.n	8019892 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8019890:	2302      	movs	r3, #2
  }
}
 8019892:	0018      	movs	r0, r3
 8019894:	46bd      	mov	sp, r7
 8019896:	b008      	add	sp, #32
 8019898:	bd80      	pop	{r7, pc}
	...

0801989c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801989c:	b580      	push	{r7, lr}
 801989e:	b088      	sub	sp, #32
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	60f8      	str	r0, [r7, #12]
 80198a4:	60b9      	str	r1, [r7, #8]
 80198a6:	1dbb      	adds	r3, r7, #6
 80198a8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	2280      	movs	r2, #128	@ 0x80
 80198ae:	589b      	ldr	r3, [r3, r2]
 80198b0:	2b20      	cmp	r3, #32
 80198b2:	d14a      	bne.n	801994a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80198b4:	68bb      	ldr	r3, [r7, #8]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d003      	beq.n	80198c2 <HAL_UART_Receive_IT+0x26>
 80198ba:	1dbb      	adds	r3, r7, #6
 80198bc:	881b      	ldrh	r3, [r3, #0]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d101      	bne.n	80198c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80198c2:	2301      	movs	r3, #1
 80198c4:	e042      	b.n	801994c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	689a      	ldr	r2, [r3, #8]
 80198ca:	2380      	movs	r3, #128	@ 0x80
 80198cc:	015b      	lsls	r3, r3, #5
 80198ce:	429a      	cmp	r2, r3
 80198d0:	d109      	bne.n	80198e6 <HAL_UART_Receive_IT+0x4a>
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	691b      	ldr	r3, [r3, #16]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d105      	bne.n	80198e6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80198da:	68bb      	ldr	r3, [r7, #8]
 80198dc:	2201      	movs	r2, #1
 80198de:	4013      	ands	r3, r2
 80198e0:	d001      	beq.n	80198e6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80198e2:	2301      	movs	r3, #1
 80198e4:	e032      	b.n	801994c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	2200      	movs	r2, #0
 80198ea:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	4a18      	ldr	r2, [pc, #96]	@ (8019954 <HAL_UART_Receive_IT+0xb8>)
 80198f2:	4293      	cmp	r3, r2
 80198f4:	d020      	beq.n	8019938 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	685a      	ldr	r2, [r3, #4]
 80198fc:	2380      	movs	r3, #128	@ 0x80
 80198fe:	041b      	lsls	r3, r3, #16
 8019900:	4013      	ands	r3, r2
 8019902:	d019      	beq.n	8019938 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019904:	f3ef 8310 	mrs	r3, PRIMASK
 8019908:	613b      	str	r3, [r7, #16]
  return(result);
 801990a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801990c:	61fb      	str	r3, [r7, #28]
 801990e:	2301      	movs	r3, #1
 8019910:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019912:	697b      	ldr	r3, [r7, #20]
 8019914:	f383 8810 	msr	PRIMASK, r3
}
 8019918:	46c0      	nop			@ (mov r8, r8)
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	681a      	ldr	r2, [r3, #0]
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	2180      	movs	r1, #128	@ 0x80
 8019926:	04c9      	lsls	r1, r1, #19
 8019928:	430a      	orrs	r2, r1
 801992a:	601a      	str	r2, [r3, #0]
 801992c:	69fb      	ldr	r3, [r7, #28]
 801992e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019930:	69bb      	ldr	r3, [r7, #24]
 8019932:	f383 8810 	msr	PRIMASK, r3
}
 8019936:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8019938:	1dbb      	adds	r3, r7, #6
 801993a:	881a      	ldrh	r2, [r3, #0]
 801993c:	68b9      	ldr	r1, [r7, #8]
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	0018      	movs	r0, r3
 8019942:	f001 f8c7 	bl	801aad4 <UART_Start_Receive_IT>
 8019946:	0003      	movs	r3, r0
 8019948:	e000      	b.n	801994c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801994a:	2302      	movs	r3, #2
  }
}
 801994c:	0018      	movs	r0, r3
 801994e:	46bd      	mov	sp, r7
 8019950:	b008      	add	sp, #32
 8019952:	bd80      	pop	{r7, pc}
 8019954:	40004800 	.word	0x40004800

08019958 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b088      	sub	sp, #32
 801995c:	af00      	add	r7, sp, #0
 801995e:	60f8      	str	r0, [r7, #12]
 8019960:	60b9      	str	r1, [r7, #8]
 8019962:	1dbb      	adds	r3, r7, #6
 8019964:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801996a:	2b20      	cmp	r3, #32
 801996c:	d000      	beq.n	8019970 <HAL_UART_Transmit_DMA+0x18>
 801996e:	e077      	b.n	8019a60 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8019970:	68bb      	ldr	r3, [r7, #8]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d003      	beq.n	801997e <HAL_UART_Transmit_DMA+0x26>
 8019976:	1dbb      	adds	r3, r7, #6
 8019978:	881b      	ldrh	r3, [r3, #0]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d101      	bne.n	8019982 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801997e:	2301      	movs	r3, #1
 8019980:	e06f      	b.n	8019a62 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	689a      	ldr	r2, [r3, #8]
 8019986:	2380      	movs	r3, #128	@ 0x80
 8019988:	015b      	lsls	r3, r3, #5
 801998a:	429a      	cmp	r2, r3
 801998c:	d109      	bne.n	80199a2 <HAL_UART_Transmit_DMA+0x4a>
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	691b      	ldr	r3, [r3, #16]
 8019992:	2b00      	cmp	r3, #0
 8019994:	d105      	bne.n	80199a2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019996:	68bb      	ldr	r3, [r7, #8]
 8019998:	2201      	movs	r2, #1
 801999a:	4013      	ands	r3, r2
 801999c:	d001      	beq.n	80199a2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801999e:	2301      	movs	r3, #1
 80199a0:	e05f      	b.n	8019a62 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	68ba      	ldr	r2, [r7, #8]
 80199a6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	1dba      	adds	r2, r7, #6
 80199ac:	2150      	movs	r1, #80	@ 0x50
 80199ae:	8812      	ldrh	r2, [r2, #0]
 80199b0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	1dba      	adds	r2, r7, #6
 80199b6:	2152      	movs	r1, #82	@ 0x52
 80199b8:	8812      	ldrh	r2, [r2, #0]
 80199ba:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	2284      	movs	r2, #132	@ 0x84
 80199c0:	2100      	movs	r1, #0
 80199c2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	2221      	movs	r2, #33	@ 0x21
 80199c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d027      	beq.n	8019a22 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80199d6:	4a25      	ldr	r2, [pc, #148]	@ (8019a6c <HAL_UART_Transmit_DMA+0x114>)
 80199d8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80199de:	4a24      	ldr	r2, [pc, #144]	@ (8019a70 <HAL_UART_Transmit_DMA+0x118>)
 80199e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80199e6:	4a23      	ldr	r2, [pc, #140]	@ (8019a74 <HAL_UART_Transmit_DMA+0x11c>)
 80199e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80199ee:	2200      	movs	r2, #0
 80199f0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80199fa:	0019      	movs	r1, r3
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	3328      	adds	r3, #40	@ 0x28
 8019a02:	001a      	movs	r2, r3
 8019a04:	1dbb      	adds	r3, r7, #6
 8019a06:	881b      	ldrh	r3, [r3, #0]
 8019a08:	f7f7 ff36 	bl	8011878 <HAL_DMA_Start_IT>
 8019a0c:	1e03      	subs	r3, r0, #0
 8019a0e:	d008      	beq.n	8019a22 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	2284      	movs	r2, #132	@ 0x84
 8019a14:	2110      	movs	r1, #16
 8019a16:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	2220      	movs	r2, #32
 8019a1c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8019a1e:	2301      	movs	r3, #1
 8019a20:	e01f      	b.n	8019a62 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	2240      	movs	r2, #64	@ 0x40
 8019a28:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8019a2e:	613b      	str	r3, [r7, #16]
  return(result);
 8019a30:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8019a32:	61fb      	str	r3, [r7, #28]
 8019a34:	2301      	movs	r3, #1
 8019a36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a38:	697b      	ldr	r3, [r7, #20]
 8019a3a:	f383 8810 	msr	PRIMASK, r3
}
 8019a3e:	46c0      	nop			@ (mov r8, r8)
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	689a      	ldr	r2, [r3, #8]
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	2180      	movs	r1, #128	@ 0x80
 8019a4c:	430a      	orrs	r2, r1
 8019a4e:	609a      	str	r2, [r3, #8]
 8019a50:	69fb      	ldr	r3, [r7, #28]
 8019a52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a54:	69bb      	ldr	r3, [r7, #24]
 8019a56:	f383 8810 	msr	PRIMASK, r3
}
 8019a5a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	e000      	b.n	8019a62 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8019a60:	2302      	movs	r3, #2
  }
}
 8019a62:	0018      	movs	r0, r3
 8019a64:	46bd      	mov	sp, r7
 8019a66:	b008      	add	sp, #32
 8019a68:	bd80      	pop	{r7, pc}
 8019a6a:	46c0      	nop			@ (mov r8, r8)
 8019a6c:	0801aeb9 	.word	0x0801aeb9
 8019a70:	0801af55 	.word	0x0801af55
 8019a74:	0801b0f5 	.word	0x0801b0f5

08019a78 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019a78:	b580      	push	{r7, lr}
 8019a7a:	b088      	sub	sp, #32
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	60f8      	str	r0, [r7, #12]
 8019a80:	60b9      	str	r1, [r7, #8]
 8019a82:	1dbb      	adds	r3, r7, #6
 8019a84:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	2280      	movs	r2, #128	@ 0x80
 8019a8a:	589b      	ldr	r3, [r3, r2]
 8019a8c:	2b20      	cmp	r3, #32
 8019a8e:	d14a      	bne.n	8019b26 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8019a90:	68bb      	ldr	r3, [r7, #8]
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d003      	beq.n	8019a9e <HAL_UART_Receive_DMA+0x26>
 8019a96:	1dbb      	adds	r3, r7, #6
 8019a98:	881b      	ldrh	r3, [r3, #0]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d101      	bne.n	8019aa2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8019a9e:	2301      	movs	r3, #1
 8019aa0:	e042      	b.n	8019b28 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	689a      	ldr	r2, [r3, #8]
 8019aa6:	2380      	movs	r3, #128	@ 0x80
 8019aa8:	015b      	lsls	r3, r3, #5
 8019aaa:	429a      	cmp	r2, r3
 8019aac:	d109      	bne.n	8019ac2 <HAL_UART_Receive_DMA+0x4a>
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	691b      	ldr	r3, [r3, #16]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d105      	bne.n	8019ac2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019ab6:	68bb      	ldr	r3, [r7, #8]
 8019ab8:	2201      	movs	r2, #1
 8019aba:	4013      	ands	r3, r2
 8019abc:	d001      	beq.n	8019ac2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8019abe:	2301      	movs	r3, #1
 8019ac0:	e032      	b.n	8019b28 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	2200      	movs	r2, #0
 8019ac6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	4a18      	ldr	r2, [pc, #96]	@ (8019b30 <HAL_UART_Receive_DMA+0xb8>)
 8019ace:	4293      	cmp	r3, r2
 8019ad0:	d020      	beq.n	8019b14 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	685a      	ldr	r2, [r3, #4]
 8019ad8:	2380      	movs	r3, #128	@ 0x80
 8019ada:	041b      	lsls	r3, r3, #16
 8019adc:	4013      	ands	r3, r2
 8019ade:	d019      	beq.n	8019b14 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8019ae4:	613b      	str	r3, [r7, #16]
  return(result);
 8019ae6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019ae8:	61fb      	str	r3, [r7, #28]
 8019aea:	2301      	movs	r3, #1
 8019aec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019aee:	697b      	ldr	r3, [r7, #20]
 8019af0:	f383 8810 	msr	PRIMASK, r3
}
 8019af4:	46c0      	nop			@ (mov r8, r8)
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	681a      	ldr	r2, [r3, #0]
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	2180      	movs	r1, #128	@ 0x80
 8019b02:	04c9      	lsls	r1, r1, #19
 8019b04:	430a      	orrs	r2, r1
 8019b06:	601a      	str	r2, [r3, #0]
 8019b08:	69fb      	ldr	r3, [r7, #28]
 8019b0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b0c:	69bb      	ldr	r3, [r7, #24]
 8019b0e:	f383 8810 	msr	PRIMASK, r3
}
 8019b12:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8019b14:	1dbb      	adds	r3, r7, #6
 8019b16:	881a      	ldrh	r2, [r3, #0]
 8019b18:	68b9      	ldr	r1, [r7, #8]
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	0018      	movs	r0, r3
 8019b1e:	f001 f8a3 	bl	801ac68 <UART_Start_Receive_DMA>
 8019b22:	0003      	movs	r3, r0
 8019b24:	e000      	b.n	8019b28 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8019b26:	2302      	movs	r3, #2
  }
}
 8019b28:	0018      	movs	r0, r3
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	b008      	add	sp, #32
 8019b2e:	bd80      	pop	{r7, pc}
 8019b30:	40004800 	.word	0x40004800

08019b34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8019b34:	b590      	push	{r4, r7, lr}
 8019b36:	b0ab      	sub	sp, #172	@ 0xac
 8019b38:	af00      	add	r7, sp, #0
 8019b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	69db      	ldr	r3, [r3, #28]
 8019b42:	22a4      	movs	r2, #164	@ 0xa4
 8019b44:	18b9      	adds	r1, r7, r2
 8019b46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	20a0      	movs	r0, #160	@ 0xa0
 8019b50:	1839      	adds	r1, r7, r0
 8019b52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	689b      	ldr	r3, [r3, #8]
 8019b5a:	219c      	movs	r1, #156	@ 0x9c
 8019b5c:	1879      	adds	r1, r7, r1
 8019b5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8019b60:	0011      	movs	r1, r2
 8019b62:	18bb      	adds	r3, r7, r2
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	4a9c      	ldr	r2, [pc, #624]	@ (8019dd8 <HAL_UART_IRQHandler+0x2a4>)
 8019b68:	4013      	ands	r3, r2
 8019b6a:	2298      	movs	r2, #152	@ 0x98
 8019b6c:	18bc      	adds	r4, r7, r2
 8019b6e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8019b70:	18bb      	adds	r3, r7, r2
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d114      	bne.n	8019ba2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8019b78:	187b      	adds	r3, r7, r1
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	2220      	movs	r2, #32
 8019b7e:	4013      	ands	r3, r2
 8019b80:	d00f      	beq.n	8019ba2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8019b82:	183b      	adds	r3, r7, r0
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	2220      	movs	r2, #32
 8019b88:	4013      	ands	r3, r2
 8019b8a:	d00a      	beq.n	8019ba2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d100      	bne.n	8019b96 <HAL_UART_IRQHandler+0x62>
 8019b94:	e2aa      	b.n	801a0ec <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019b9a:	687a      	ldr	r2, [r7, #4]
 8019b9c:	0010      	movs	r0, r2
 8019b9e:	4798      	blx	r3
      }
      return;
 8019ba0:	e2a4      	b.n	801a0ec <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8019ba2:	2398      	movs	r3, #152	@ 0x98
 8019ba4:	18fb      	adds	r3, r7, r3
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d100      	bne.n	8019bae <HAL_UART_IRQHandler+0x7a>
 8019bac:	e11a      	b.n	8019de4 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8019bae:	239c      	movs	r3, #156	@ 0x9c
 8019bb0:	18fb      	adds	r3, r7, r3
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	2201      	movs	r2, #1
 8019bb6:	4013      	ands	r3, r2
 8019bb8:	d106      	bne.n	8019bc8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8019bba:	23a0      	movs	r3, #160	@ 0xa0
 8019bbc:	18fb      	adds	r3, r7, r3
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	4a86      	ldr	r2, [pc, #536]	@ (8019ddc <HAL_UART_IRQHandler+0x2a8>)
 8019bc2:	4013      	ands	r3, r2
 8019bc4:	d100      	bne.n	8019bc8 <HAL_UART_IRQHandler+0x94>
 8019bc6:	e10d      	b.n	8019de4 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019bc8:	23a4      	movs	r3, #164	@ 0xa4
 8019bca:	18fb      	adds	r3, r7, r3
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	2201      	movs	r2, #1
 8019bd0:	4013      	ands	r3, r2
 8019bd2:	d012      	beq.n	8019bfa <HAL_UART_IRQHandler+0xc6>
 8019bd4:	23a0      	movs	r3, #160	@ 0xa0
 8019bd6:	18fb      	adds	r3, r7, r3
 8019bd8:	681a      	ldr	r2, [r3, #0]
 8019bda:	2380      	movs	r3, #128	@ 0x80
 8019bdc:	005b      	lsls	r3, r3, #1
 8019bde:	4013      	ands	r3, r2
 8019be0:	d00b      	beq.n	8019bfa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	2201      	movs	r2, #1
 8019be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	2284      	movs	r2, #132	@ 0x84
 8019bee:	589b      	ldr	r3, [r3, r2]
 8019bf0:	2201      	movs	r2, #1
 8019bf2:	431a      	orrs	r2, r3
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	2184      	movs	r1, #132	@ 0x84
 8019bf8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019bfa:	23a4      	movs	r3, #164	@ 0xa4
 8019bfc:	18fb      	adds	r3, r7, r3
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	2202      	movs	r2, #2
 8019c02:	4013      	ands	r3, r2
 8019c04:	d011      	beq.n	8019c2a <HAL_UART_IRQHandler+0xf6>
 8019c06:	239c      	movs	r3, #156	@ 0x9c
 8019c08:	18fb      	adds	r3, r7, r3
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	2201      	movs	r2, #1
 8019c0e:	4013      	ands	r3, r2
 8019c10:	d00b      	beq.n	8019c2a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	2202      	movs	r2, #2
 8019c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	2284      	movs	r2, #132	@ 0x84
 8019c1e:	589b      	ldr	r3, [r3, r2]
 8019c20:	2204      	movs	r2, #4
 8019c22:	431a      	orrs	r2, r3
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	2184      	movs	r1, #132	@ 0x84
 8019c28:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019c2a:	23a4      	movs	r3, #164	@ 0xa4
 8019c2c:	18fb      	adds	r3, r7, r3
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	2204      	movs	r2, #4
 8019c32:	4013      	ands	r3, r2
 8019c34:	d011      	beq.n	8019c5a <HAL_UART_IRQHandler+0x126>
 8019c36:	239c      	movs	r3, #156	@ 0x9c
 8019c38:	18fb      	adds	r3, r7, r3
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	2201      	movs	r2, #1
 8019c3e:	4013      	ands	r3, r2
 8019c40:	d00b      	beq.n	8019c5a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	2204      	movs	r2, #4
 8019c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	2284      	movs	r2, #132	@ 0x84
 8019c4e:	589b      	ldr	r3, [r3, r2]
 8019c50:	2202      	movs	r2, #2
 8019c52:	431a      	orrs	r2, r3
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	2184      	movs	r1, #132	@ 0x84
 8019c58:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8019c5a:	23a4      	movs	r3, #164	@ 0xa4
 8019c5c:	18fb      	adds	r3, r7, r3
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	2208      	movs	r2, #8
 8019c62:	4013      	ands	r3, r2
 8019c64:	d017      	beq.n	8019c96 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8019c66:	23a0      	movs	r3, #160	@ 0xa0
 8019c68:	18fb      	adds	r3, r7, r3
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	2220      	movs	r2, #32
 8019c6e:	4013      	ands	r3, r2
 8019c70:	d105      	bne.n	8019c7e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8019c72:	239c      	movs	r3, #156	@ 0x9c
 8019c74:	18fb      	adds	r3, r7, r3
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	2201      	movs	r2, #1
 8019c7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8019c7c:	d00b      	beq.n	8019c96 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	2208      	movs	r2, #8
 8019c84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	2284      	movs	r2, #132	@ 0x84
 8019c8a:	589b      	ldr	r3, [r3, r2]
 8019c8c:	2208      	movs	r2, #8
 8019c8e:	431a      	orrs	r2, r3
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	2184      	movs	r1, #132	@ 0x84
 8019c94:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8019c96:	23a4      	movs	r3, #164	@ 0xa4
 8019c98:	18fb      	adds	r3, r7, r3
 8019c9a:	681a      	ldr	r2, [r3, #0]
 8019c9c:	2380      	movs	r3, #128	@ 0x80
 8019c9e:	011b      	lsls	r3, r3, #4
 8019ca0:	4013      	ands	r3, r2
 8019ca2:	d013      	beq.n	8019ccc <HAL_UART_IRQHandler+0x198>
 8019ca4:	23a0      	movs	r3, #160	@ 0xa0
 8019ca6:	18fb      	adds	r3, r7, r3
 8019ca8:	681a      	ldr	r2, [r3, #0]
 8019caa:	2380      	movs	r3, #128	@ 0x80
 8019cac:	04db      	lsls	r3, r3, #19
 8019cae:	4013      	ands	r3, r2
 8019cb0:	d00c      	beq.n	8019ccc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	2280      	movs	r2, #128	@ 0x80
 8019cb8:	0112      	lsls	r2, r2, #4
 8019cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	2284      	movs	r2, #132	@ 0x84
 8019cc0:	589b      	ldr	r3, [r3, r2]
 8019cc2:	2220      	movs	r2, #32
 8019cc4:	431a      	orrs	r2, r3
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	2184      	movs	r1, #132	@ 0x84
 8019cca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	2284      	movs	r2, #132	@ 0x84
 8019cd0:	589b      	ldr	r3, [r3, r2]
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d100      	bne.n	8019cd8 <HAL_UART_IRQHandler+0x1a4>
 8019cd6:	e20b      	b.n	801a0f0 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8019cd8:	23a4      	movs	r3, #164	@ 0xa4
 8019cda:	18fb      	adds	r3, r7, r3
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	2220      	movs	r2, #32
 8019ce0:	4013      	ands	r3, r2
 8019ce2:	d00e      	beq.n	8019d02 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8019ce4:	23a0      	movs	r3, #160	@ 0xa0
 8019ce6:	18fb      	adds	r3, r7, r3
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	2220      	movs	r2, #32
 8019cec:	4013      	ands	r3, r2
 8019cee:	d008      	beq.n	8019d02 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d004      	beq.n	8019d02 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019cfc:	687a      	ldr	r2, [r7, #4]
 8019cfe:	0010      	movs	r0, r2
 8019d00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	2284      	movs	r2, #132	@ 0x84
 8019d06:	589b      	ldr	r3, [r3, r2]
 8019d08:	2194      	movs	r1, #148	@ 0x94
 8019d0a:	187a      	adds	r2, r7, r1
 8019d0c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	689b      	ldr	r3, [r3, #8]
 8019d14:	2240      	movs	r2, #64	@ 0x40
 8019d16:	4013      	ands	r3, r2
 8019d18:	2b40      	cmp	r3, #64	@ 0x40
 8019d1a:	d004      	beq.n	8019d26 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8019d1c:	187b      	adds	r3, r7, r1
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	2228      	movs	r2, #40	@ 0x28
 8019d22:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019d24:	d04b      	beq.n	8019dbe <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	0018      	movs	r0, r3
 8019d2a:	f001 f861 	bl	801adf0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	689b      	ldr	r3, [r3, #8]
 8019d34:	2240      	movs	r2, #64	@ 0x40
 8019d36:	4013      	ands	r3, r2
 8019d38:	2b40      	cmp	r3, #64	@ 0x40
 8019d3a:	d139      	bne.n	8019db0 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8019d40:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8019d42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019d44:	2090      	movs	r0, #144	@ 0x90
 8019d46:	183a      	adds	r2, r7, r0
 8019d48:	6013      	str	r3, [r2, #0]
 8019d4a:	2301      	movs	r3, #1
 8019d4c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019d50:	f383 8810 	msr	PRIMASK, r3
}
 8019d54:	46c0      	nop			@ (mov r8, r8)
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	689a      	ldr	r2, [r3, #8]
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	2140      	movs	r1, #64	@ 0x40
 8019d62:	438a      	bics	r2, r1
 8019d64:	609a      	str	r2, [r3, #8]
 8019d66:	183b      	adds	r3, r7, r0
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019d6e:	f383 8810 	msr	PRIMASK, r3
}
 8019d72:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d012      	beq.n	8019da2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019d80:	4a17      	ldr	r2, [pc, #92]	@ (8019de0 <HAL_UART_IRQHandler+0x2ac>)
 8019d82:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019d88:	0018      	movs	r0, r3
 8019d8a:	f7f7 fe1b 	bl	80119c4 <HAL_DMA_Abort_IT>
 8019d8e:	1e03      	subs	r3, r0, #0
 8019d90:	d020      	beq.n	8019dd4 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019d96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019d9c:	0018      	movs	r0, r3
 8019d9e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019da0:	e018      	b.n	8019dd4 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	2298      	movs	r2, #152	@ 0x98
 8019da6:	589b      	ldr	r3, [r3, r2]
 8019da8:	687a      	ldr	r2, [r7, #4]
 8019daa:	0010      	movs	r0, r2
 8019dac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019dae:	e011      	b.n	8019dd4 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	2298      	movs	r2, #152	@ 0x98
 8019db4:	589b      	ldr	r3, [r3, r2]
 8019db6:	687a      	ldr	r2, [r7, #4]
 8019db8:	0010      	movs	r0, r2
 8019dba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019dbc:	e00a      	b.n	8019dd4 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	2298      	movs	r2, #152	@ 0x98
 8019dc2:	589b      	ldr	r3, [r3, r2]
 8019dc4:	687a      	ldr	r2, [r7, #4]
 8019dc6:	0010      	movs	r0, r2
 8019dc8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	2284      	movs	r2, #132	@ 0x84
 8019dce:	2100      	movs	r1, #0
 8019dd0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8019dd2:	e18d      	b.n	801a0f0 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019dd4:	46c0      	nop			@ (mov r8, r8)
    return;
 8019dd6:	e18b      	b.n	801a0f0 <HAL_UART_IRQHandler+0x5bc>
 8019dd8:	0000080f 	.word	0x0000080f
 8019ddc:	04000120 	.word	0x04000120
 8019de0:	0801b17d 	.word	0x0801b17d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019de8:	2b01      	cmp	r3, #1
 8019dea:	d000      	beq.n	8019dee <HAL_UART_IRQHandler+0x2ba>
 8019dec:	e13d      	b.n	801a06a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8019dee:	23a4      	movs	r3, #164	@ 0xa4
 8019df0:	18fb      	adds	r3, r7, r3
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	2210      	movs	r2, #16
 8019df6:	4013      	ands	r3, r2
 8019df8:	d100      	bne.n	8019dfc <HAL_UART_IRQHandler+0x2c8>
 8019dfa:	e136      	b.n	801a06a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8019dfc:	23a0      	movs	r3, #160	@ 0xa0
 8019dfe:	18fb      	adds	r3, r7, r3
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	2210      	movs	r2, #16
 8019e04:	4013      	ands	r3, r2
 8019e06:	d100      	bne.n	8019e0a <HAL_UART_IRQHandler+0x2d6>
 8019e08:	e12f      	b.n	801a06a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	2210      	movs	r2, #16
 8019e10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	689b      	ldr	r3, [r3, #8]
 8019e18:	2240      	movs	r2, #64	@ 0x40
 8019e1a:	4013      	ands	r3, r2
 8019e1c:	2b40      	cmp	r3, #64	@ 0x40
 8019e1e:	d000      	beq.n	8019e22 <HAL_UART_IRQHandler+0x2ee>
 8019e20:	e0a2      	b.n	8019f68 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	685a      	ldr	r2, [r3, #4]
 8019e2a:	217e      	movs	r1, #126	@ 0x7e
 8019e2c:	187b      	adds	r3, r7, r1
 8019e2e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8019e30:	187b      	adds	r3, r7, r1
 8019e32:	881b      	ldrh	r3, [r3, #0]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d100      	bne.n	8019e3a <HAL_UART_IRQHandler+0x306>
 8019e38:	e15c      	b.n	801a0f4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	2258      	movs	r2, #88	@ 0x58
 8019e3e:	5a9b      	ldrh	r3, [r3, r2]
 8019e40:	187a      	adds	r2, r7, r1
 8019e42:	8812      	ldrh	r2, [r2, #0]
 8019e44:	429a      	cmp	r2, r3
 8019e46:	d300      	bcc.n	8019e4a <HAL_UART_IRQHandler+0x316>
 8019e48:	e154      	b.n	801a0f4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	187a      	adds	r2, r7, r1
 8019e4e:	215a      	movs	r1, #90	@ 0x5a
 8019e50:	8812      	ldrh	r2, [r2, #0]
 8019e52:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	2220      	movs	r2, #32
 8019e5e:	4013      	ands	r3, r2
 8019e60:	d16f      	bne.n	8019f42 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019e62:	f3ef 8310 	mrs	r3, PRIMASK
 8019e66:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8019e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019e6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019e6c:	2301      	movs	r3, #1
 8019e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e72:	f383 8810 	msr	PRIMASK, r3
}
 8019e76:	46c0      	nop			@ (mov r8, r8)
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	681a      	ldr	r2, [r3, #0]
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	49a0      	ldr	r1, [pc, #640]	@ (801a104 <HAL_UART_IRQHandler+0x5d0>)
 8019e84:	400a      	ands	r2, r1
 8019e86:	601a      	str	r2, [r3, #0]
 8019e88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e8e:	f383 8810 	msr	PRIMASK, r3
}
 8019e92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019e94:	f3ef 8310 	mrs	r3, PRIMASK
 8019e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8019e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019e9c:	677b      	str	r3, [r7, #116]	@ 0x74
 8019e9e:	2301      	movs	r3, #1
 8019ea0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019ea4:	f383 8810 	msr	PRIMASK, r3
}
 8019ea8:	46c0      	nop			@ (mov r8, r8)
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	689a      	ldr	r2, [r3, #8]
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	2101      	movs	r1, #1
 8019eb6:	438a      	bics	r2, r1
 8019eb8:	609a      	str	r2, [r3, #8]
 8019eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019ebc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019ec0:	f383 8810 	msr	PRIMASK, r3
}
 8019ec4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8019eca:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8019ecc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019ece:	673b      	str	r3, [r7, #112]	@ 0x70
 8019ed0:	2301      	movs	r3, #1
 8019ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ed6:	f383 8810 	msr	PRIMASK, r3
}
 8019eda:	46c0      	nop			@ (mov r8, r8)
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	689a      	ldr	r2, [r3, #8]
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	2140      	movs	r1, #64	@ 0x40
 8019ee8:	438a      	bics	r2, r1
 8019eea:	609a      	str	r2, [r3, #8]
 8019eec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019eee:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ef2:	f383 8810 	msr	PRIMASK, r3
}
 8019ef6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	2280      	movs	r2, #128	@ 0x80
 8019efc:	2120      	movs	r1, #32
 8019efe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	2200      	movs	r2, #0
 8019f04:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019f06:	f3ef 8310 	mrs	r3, PRIMASK
 8019f0a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8019f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019f0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019f10:	2301      	movs	r3, #1
 8019f12:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019f16:	f383 8810 	msr	PRIMASK, r3
}
 8019f1a:	46c0      	nop			@ (mov r8, r8)
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	681a      	ldr	r2, [r3, #0]
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	2110      	movs	r1, #16
 8019f28:	438a      	bics	r2, r1
 8019f2a:	601a      	str	r2, [r3, #0]
 8019f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f32:	f383 8810 	msr	PRIMASK, r3
}
 8019f36:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019f3c:	0018      	movs	r0, r3
 8019f3e:	f7f7 fd01 	bl	8011944 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	2202      	movs	r2, #2
 8019f46:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	22ac      	movs	r2, #172	@ 0xac
 8019f4c:	589b      	ldr	r3, [r3, r2]
 8019f4e:	687a      	ldr	r2, [r7, #4]
 8019f50:	2158      	movs	r1, #88	@ 0x58
 8019f52:	5a51      	ldrh	r1, [r2, r1]
 8019f54:	687a      	ldr	r2, [r7, #4]
 8019f56:	205a      	movs	r0, #90	@ 0x5a
 8019f58:	5a12      	ldrh	r2, [r2, r0]
 8019f5a:	b292      	uxth	r2, r2
 8019f5c:	1a8a      	subs	r2, r1, r2
 8019f5e:	b291      	uxth	r1, r2
 8019f60:	687a      	ldr	r2, [r7, #4]
 8019f62:	0010      	movs	r0, r2
 8019f64:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8019f66:	e0c5      	b.n	801a0f4 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	2258      	movs	r2, #88	@ 0x58
 8019f6c:	5a99      	ldrh	r1, [r3, r2]
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	225a      	movs	r2, #90	@ 0x5a
 8019f72:	5a9b      	ldrh	r3, [r3, r2]
 8019f74:	b29a      	uxth	r2, r3
 8019f76:	208e      	movs	r0, #142	@ 0x8e
 8019f78:	183b      	adds	r3, r7, r0
 8019f7a:	1a8a      	subs	r2, r1, r2
 8019f7c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	225a      	movs	r2, #90	@ 0x5a
 8019f82:	5a9b      	ldrh	r3, [r3, r2]
 8019f84:	b29b      	uxth	r3, r3
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d100      	bne.n	8019f8c <HAL_UART_IRQHandler+0x458>
 8019f8a:	e0b5      	b.n	801a0f8 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8019f8c:	183b      	adds	r3, r7, r0
 8019f8e:	881b      	ldrh	r3, [r3, #0]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d100      	bne.n	8019f96 <HAL_UART_IRQHandler+0x462>
 8019f94:	e0b0      	b.n	801a0f8 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019f96:	f3ef 8310 	mrs	r3, PRIMASK
 8019f9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8019f9c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8019f9e:	2488      	movs	r4, #136	@ 0x88
 8019fa0:	193a      	adds	r2, r7, r4
 8019fa2:	6013      	str	r3, [r2, #0]
 8019fa4:	2301      	movs	r3, #1
 8019fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019fa8:	693b      	ldr	r3, [r7, #16]
 8019faa:	f383 8810 	msr	PRIMASK, r3
}
 8019fae:	46c0      	nop			@ (mov r8, r8)
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	681a      	ldr	r2, [r3, #0]
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	4953      	ldr	r1, [pc, #332]	@ (801a108 <HAL_UART_IRQHandler+0x5d4>)
 8019fbc:	400a      	ands	r2, r1
 8019fbe:	601a      	str	r2, [r3, #0]
 8019fc0:	193b      	adds	r3, r7, r4
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019fc6:	697b      	ldr	r3, [r7, #20]
 8019fc8:	f383 8810 	msr	PRIMASK, r3
}
 8019fcc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019fce:	f3ef 8310 	mrs	r3, PRIMASK
 8019fd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8019fd4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019fd6:	2484      	movs	r4, #132	@ 0x84
 8019fd8:	193a      	adds	r2, r7, r4
 8019fda:	6013      	str	r3, [r2, #0]
 8019fdc:	2301      	movs	r3, #1
 8019fde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019fe0:	69fb      	ldr	r3, [r7, #28]
 8019fe2:	f383 8810 	msr	PRIMASK, r3
}
 8019fe6:	46c0      	nop			@ (mov r8, r8)
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	689a      	ldr	r2, [r3, #8]
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	2101      	movs	r1, #1
 8019ff4:	438a      	bics	r2, r1
 8019ff6:	609a      	str	r2, [r3, #8]
 8019ff8:	193b      	adds	r3, r7, r4
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ffe:	6a3b      	ldr	r3, [r7, #32]
 801a000:	f383 8810 	msr	PRIMASK, r3
}
 801a004:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	2280      	movs	r2, #128	@ 0x80
 801a00a:	2120      	movs	r1, #32
 801a00c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	2200      	movs	r2, #0
 801a012:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	2200      	movs	r2, #0
 801a018:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a01a:	f3ef 8310 	mrs	r3, PRIMASK
 801a01e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801a020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a022:	2480      	movs	r4, #128	@ 0x80
 801a024:	193a      	adds	r2, r7, r4
 801a026:	6013      	str	r3, [r2, #0]
 801a028:	2301      	movs	r3, #1
 801a02a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a02e:	f383 8810 	msr	PRIMASK, r3
}
 801a032:	46c0      	nop			@ (mov r8, r8)
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	681a      	ldr	r2, [r3, #0]
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	2110      	movs	r1, #16
 801a040:	438a      	bics	r2, r1
 801a042:	601a      	str	r2, [r3, #0]
 801a044:	193b      	adds	r3, r7, r4
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a04c:	f383 8810 	msr	PRIMASK, r3
}
 801a050:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	2202      	movs	r2, #2
 801a056:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	22ac      	movs	r2, #172	@ 0xac
 801a05c:	589b      	ldr	r3, [r3, r2]
 801a05e:	183a      	adds	r2, r7, r0
 801a060:	8811      	ldrh	r1, [r2, #0]
 801a062:	687a      	ldr	r2, [r7, #4]
 801a064:	0010      	movs	r0, r2
 801a066:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801a068:	e046      	b.n	801a0f8 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801a06a:	23a4      	movs	r3, #164	@ 0xa4
 801a06c:	18fb      	adds	r3, r7, r3
 801a06e:	681a      	ldr	r2, [r3, #0]
 801a070:	2380      	movs	r3, #128	@ 0x80
 801a072:	035b      	lsls	r3, r3, #13
 801a074:	4013      	ands	r3, r2
 801a076:	d012      	beq.n	801a09e <HAL_UART_IRQHandler+0x56a>
 801a078:	239c      	movs	r3, #156	@ 0x9c
 801a07a:	18fb      	adds	r3, r7, r3
 801a07c:	681a      	ldr	r2, [r3, #0]
 801a07e:	2380      	movs	r3, #128	@ 0x80
 801a080:	03db      	lsls	r3, r3, #15
 801a082:	4013      	ands	r3, r2
 801a084:	d00b      	beq.n	801a09e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	2280      	movs	r2, #128	@ 0x80
 801a08c:	0352      	lsls	r2, r2, #13
 801a08e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	22a8      	movs	r2, #168	@ 0xa8
 801a094:	589b      	ldr	r3, [r3, r2]
 801a096:	687a      	ldr	r2, [r7, #4]
 801a098:	0010      	movs	r0, r2
 801a09a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a09c:	e02f      	b.n	801a0fe <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801a09e:	23a4      	movs	r3, #164	@ 0xa4
 801a0a0:	18fb      	adds	r3, r7, r3
 801a0a2:	681b      	ldr	r3, [r3, #0]
 801a0a4:	2280      	movs	r2, #128	@ 0x80
 801a0a6:	4013      	ands	r3, r2
 801a0a8:	d00f      	beq.n	801a0ca <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801a0aa:	23a0      	movs	r3, #160	@ 0xa0
 801a0ac:	18fb      	adds	r3, r7, r3
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	2280      	movs	r2, #128	@ 0x80
 801a0b2:	4013      	ands	r3, r2
 801a0b4:	d009      	beq.n	801a0ca <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d01e      	beq.n	801a0fc <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a0c2:	687a      	ldr	r2, [r7, #4]
 801a0c4:	0010      	movs	r0, r2
 801a0c6:	4798      	blx	r3
    }
    return;
 801a0c8:	e018      	b.n	801a0fc <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801a0ca:	23a4      	movs	r3, #164	@ 0xa4
 801a0cc:	18fb      	adds	r3, r7, r3
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	2240      	movs	r2, #64	@ 0x40
 801a0d2:	4013      	ands	r3, r2
 801a0d4:	d013      	beq.n	801a0fe <HAL_UART_IRQHandler+0x5ca>
 801a0d6:	23a0      	movs	r3, #160	@ 0xa0
 801a0d8:	18fb      	adds	r3, r7, r3
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	2240      	movs	r2, #64	@ 0x40
 801a0de:	4013      	ands	r3, r2
 801a0e0:	d00d      	beq.n	801a0fe <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	0018      	movs	r0, r3
 801a0e6:	f001 f862 	bl	801b1ae <UART_EndTransmit_IT>
    return;
 801a0ea:	e008      	b.n	801a0fe <HAL_UART_IRQHandler+0x5ca>
      return;
 801a0ec:	46c0      	nop			@ (mov r8, r8)
 801a0ee:	e006      	b.n	801a0fe <HAL_UART_IRQHandler+0x5ca>
    return;
 801a0f0:	46c0      	nop			@ (mov r8, r8)
 801a0f2:	e004      	b.n	801a0fe <HAL_UART_IRQHandler+0x5ca>
      return;
 801a0f4:	46c0      	nop			@ (mov r8, r8)
 801a0f6:	e002      	b.n	801a0fe <HAL_UART_IRQHandler+0x5ca>
      return;
 801a0f8:	46c0      	nop			@ (mov r8, r8)
 801a0fa:	e000      	b.n	801a0fe <HAL_UART_IRQHandler+0x5ca>
    return;
 801a0fc:	46c0      	nop			@ (mov r8, r8)
  }

}
 801a0fe:	46bd      	mov	sp, r7
 801a100:	b02b      	add	sp, #172	@ 0xac
 801a102:	bd90      	pop	{r4, r7, pc}
 801a104:	fffffeff 	.word	0xfffffeff
 801a108:	fffffedf 	.word	0xfffffedf

0801a10c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801a10c:	b580      	push	{r7, lr}
 801a10e:	b082      	sub	sp, #8
 801a110:	af00      	add	r7, sp, #0
 801a112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801a114:	46c0      	nop			@ (mov r8, r8)
 801a116:	46bd      	mov	sp, r7
 801a118:	b002      	add	sp, #8
 801a11a:	bd80      	pop	{r7, pc}

0801a11c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801a11c:	b580      	push	{r7, lr}
 801a11e:	b082      	sub	sp, #8
 801a120:	af00      	add	r7, sp, #0
 801a122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801a124:	46c0      	nop			@ (mov r8, r8)
 801a126:	46bd      	mov	sp, r7
 801a128:	b002      	add	sp, #8
 801a12a:	bd80      	pop	{r7, pc}

0801a12c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801a12c:	b580      	push	{r7, lr}
 801a12e:	b082      	sub	sp, #8
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801a134:	46c0      	nop			@ (mov r8, r8)
 801a136:	46bd      	mov	sp, r7
 801a138:	b002      	add	sp, #8
 801a13a:	bd80      	pop	{r7, pc}

0801a13c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b082      	sub	sp, #8
 801a140:	af00      	add	r7, sp, #0
 801a142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801a144:	46c0      	nop			@ (mov r8, r8)
 801a146:	46bd      	mov	sp, r7
 801a148:	b002      	add	sp, #8
 801a14a:	bd80      	pop	{r7, pc}

0801a14c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801a14c:	b580      	push	{r7, lr}
 801a14e:	b082      	sub	sp, #8
 801a150:	af00      	add	r7, sp, #0
 801a152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801a154:	46c0      	nop			@ (mov r8, r8)
 801a156:	46bd      	mov	sp, r7
 801a158:	b002      	add	sp, #8
 801a15a:	bd80      	pop	{r7, pc}

0801a15c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801a15c:	b580      	push	{r7, lr}
 801a15e:	b082      	sub	sp, #8
 801a160:	af00      	add	r7, sp, #0
 801a162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801a164:	46c0      	nop			@ (mov r8, r8)
 801a166:	46bd      	mov	sp, r7
 801a168:	b002      	add	sp, #8
 801a16a:	bd80      	pop	{r7, pc}

0801a16c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801a16c:	b580      	push	{r7, lr}
 801a16e:	b082      	sub	sp, #8
 801a170:	af00      	add	r7, sp, #0
 801a172:	6078      	str	r0, [r7, #4]
 801a174:	000a      	movs	r2, r1
 801a176:	1cbb      	adds	r3, r7, #2
 801a178:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801a17a:	46c0      	nop			@ (mov r8, r8)
 801a17c:	46bd      	mov	sp, r7
 801a17e:	b002      	add	sp, #8
 801a180:	bd80      	pop	{r7, pc}
	...

0801a184 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801a184:	b580      	push	{r7, lr}
 801a186:	b082      	sub	sp, #8
 801a188:	af00      	add	r7, sp, #0
 801a18a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	2188      	movs	r1, #136	@ 0x88
 801a190:	4a14      	ldr	r2, [pc, #80]	@ (801a1e4 <UART_InitCallbacksToDefault+0x60>)
 801a192:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	218c      	movs	r1, #140	@ 0x8c
 801a198:	4a13      	ldr	r2, [pc, #76]	@ (801a1e8 <UART_InitCallbacksToDefault+0x64>)
 801a19a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	2190      	movs	r1, #144	@ 0x90
 801a1a0:	4a12      	ldr	r2, [pc, #72]	@ (801a1ec <UART_InitCallbacksToDefault+0x68>)
 801a1a2:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	2194      	movs	r1, #148	@ 0x94
 801a1a8:	4a11      	ldr	r2, [pc, #68]	@ (801a1f0 <UART_InitCallbacksToDefault+0x6c>)
 801a1aa:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	2198      	movs	r1, #152	@ 0x98
 801a1b0:	4a10      	ldr	r2, [pc, #64]	@ (801a1f4 <UART_InitCallbacksToDefault+0x70>)
 801a1b2:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	219c      	movs	r1, #156	@ 0x9c
 801a1b8:	4a0f      	ldr	r2, [pc, #60]	@ (801a1f8 <UART_InitCallbacksToDefault+0x74>)
 801a1ba:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	21a0      	movs	r1, #160	@ 0xa0
 801a1c0:	4a0e      	ldr	r2, [pc, #56]	@ (801a1fc <UART_InitCallbacksToDefault+0x78>)
 801a1c2:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	21a4      	movs	r1, #164	@ 0xa4
 801a1c8:	4a0d      	ldr	r2, [pc, #52]	@ (801a200 <UART_InitCallbacksToDefault+0x7c>)
 801a1ca:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	21a8      	movs	r1, #168	@ 0xa8
 801a1d0:	4a0c      	ldr	r2, [pc, #48]	@ (801a204 <UART_InitCallbacksToDefault+0x80>)
 801a1d2:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	21ac      	movs	r1, #172	@ 0xac
 801a1d8:	4a0b      	ldr	r2, [pc, #44]	@ (801a208 <UART_InitCallbacksToDefault+0x84>)
 801a1da:	505a      	str	r2, [r3, r1]

}
 801a1dc:	46c0      	nop			@ (mov r8, r8)
 801a1de:	46bd      	mov	sp, r7
 801a1e0:	b002      	add	sp, #8
 801a1e2:	bd80      	pop	{r7, pc}
 801a1e4:	0801a11d 	.word	0x0801a11d
 801a1e8:	0801a10d 	.word	0x0801a10d
 801a1ec:	0801a12d 	.word	0x0801a12d
 801a1f0:	0800a019 	.word	0x0800a019
 801a1f4:	08003be9 	.word	0x08003be9
 801a1f8:	0801a13d 	.word	0x0801a13d
 801a1fc:	0801a14d 	.word	0x0801a14d
 801a200:	0801a15d 	.word	0x0801a15d
 801a204:	0801b5a1 	.word	0x0801b5a1
 801a208:	0801a16d 	.word	0x0801a16d

0801a20c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801a20c:	b5b0      	push	{r4, r5, r7, lr}
 801a20e:	b08e      	sub	sp, #56	@ 0x38
 801a210:	af00      	add	r7, sp, #0
 801a212:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801a214:	231a      	movs	r3, #26
 801a216:	2218      	movs	r2, #24
 801a218:	189b      	adds	r3, r3, r2
 801a21a:	19db      	adds	r3, r3, r7
 801a21c:	2200      	movs	r2, #0
 801a21e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801a220:	69fb      	ldr	r3, [r7, #28]
 801a222:	689a      	ldr	r2, [r3, #8]
 801a224:	69fb      	ldr	r3, [r7, #28]
 801a226:	691b      	ldr	r3, [r3, #16]
 801a228:	431a      	orrs	r2, r3
 801a22a:	69fb      	ldr	r3, [r7, #28]
 801a22c:	695b      	ldr	r3, [r3, #20]
 801a22e:	431a      	orrs	r2, r3
 801a230:	69fb      	ldr	r3, [r7, #28]
 801a232:	69db      	ldr	r3, [r3, #28]
 801a234:	4313      	orrs	r3, r2
 801a236:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801a238:	69fb      	ldr	r3, [r7, #28]
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	4ac3      	ldr	r2, [pc, #780]	@ (801a54c <UART_SetConfig+0x340>)
 801a240:	4013      	ands	r3, r2
 801a242:	0019      	movs	r1, r3
 801a244:	69fb      	ldr	r3, [r7, #28]
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a24a:	430a      	orrs	r2, r1
 801a24c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801a24e:	69fb      	ldr	r3, [r7, #28]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	685b      	ldr	r3, [r3, #4]
 801a254:	4abe      	ldr	r2, [pc, #760]	@ (801a550 <UART_SetConfig+0x344>)
 801a256:	4013      	ands	r3, r2
 801a258:	0019      	movs	r1, r3
 801a25a:	69fb      	ldr	r3, [r7, #28]
 801a25c:	68da      	ldr	r2, [r3, #12]
 801a25e:	69fb      	ldr	r3, [r7, #28]
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	430a      	orrs	r2, r1
 801a264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801a266:	69fb      	ldr	r3, [r7, #28]
 801a268:	699b      	ldr	r3, [r3, #24]
 801a26a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801a26c:	69fb      	ldr	r3, [r7, #28]
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	4ab8      	ldr	r2, [pc, #736]	@ (801a554 <UART_SetConfig+0x348>)
 801a272:	4293      	cmp	r3, r2
 801a274:	d004      	beq.n	801a280 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801a276:	69fb      	ldr	r3, [r7, #28]
 801a278:	6a1b      	ldr	r3, [r3, #32]
 801a27a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a27c:	4313      	orrs	r3, r2
 801a27e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801a280:	69fb      	ldr	r3, [r7, #28]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	689b      	ldr	r3, [r3, #8]
 801a286:	4ab4      	ldr	r2, [pc, #720]	@ (801a558 <UART_SetConfig+0x34c>)
 801a288:	4013      	ands	r3, r2
 801a28a:	0019      	movs	r1, r3
 801a28c:	69fb      	ldr	r3, [r7, #28]
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a292:	430a      	orrs	r2, r1
 801a294:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801a296:	69fb      	ldr	r3, [r7, #28]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	4ab0      	ldr	r2, [pc, #704]	@ (801a55c <UART_SetConfig+0x350>)
 801a29c:	4293      	cmp	r3, r2
 801a29e:	d131      	bne.n	801a304 <UART_SetConfig+0xf8>
 801a2a0:	4baf      	ldr	r3, [pc, #700]	@ (801a560 <UART_SetConfig+0x354>)
 801a2a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a2a4:	2203      	movs	r2, #3
 801a2a6:	4013      	ands	r3, r2
 801a2a8:	2b03      	cmp	r3, #3
 801a2aa:	d01d      	beq.n	801a2e8 <UART_SetConfig+0xdc>
 801a2ac:	d823      	bhi.n	801a2f6 <UART_SetConfig+0xea>
 801a2ae:	2b02      	cmp	r3, #2
 801a2b0:	d00c      	beq.n	801a2cc <UART_SetConfig+0xc0>
 801a2b2:	d820      	bhi.n	801a2f6 <UART_SetConfig+0xea>
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d002      	beq.n	801a2be <UART_SetConfig+0xb2>
 801a2b8:	2b01      	cmp	r3, #1
 801a2ba:	d00e      	beq.n	801a2da <UART_SetConfig+0xce>
 801a2bc:	e01b      	b.n	801a2f6 <UART_SetConfig+0xea>
 801a2be:	231b      	movs	r3, #27
 801a2c0:	2218      	movs	r2, #24
 801a2c2:	189b      	adds	r3, r3, r2
 801a2c4:	19db      	adds	r3, r3, r7
 801a2c6:	2201      	movs	r2, #1
 801a2c8:	701a      	strb	r2, [r3, #0]
 801a2ca:	e0b4      	b.n	801a436 <UART_SetConfig+0x22a>
 801a2cc:	231b      	movs	r3, #27
 801a2ce:	2218      	movs	r2, #24
 801a2d0:	189b      	adds	r3, r3, r2
 801a2d2:	19db      	adds	r3, r3, r7
 801a2d4:	2202      	movs	r2, #2
 801a2d6:	701a      	strb	r2, [r3, #0]
 801a2d8:	e0ad      	b.n	801a436 <UART_SetConfig+0x22a>
 801a2da:	231b      	movs	r3, #27
 801a2dc:	2218      	movs	r2, #24
 801a2de:	189b      	adds	r3, r3, r2
 801a2e0:	19db      	adds	r3, r3, r7
 801a2e2:	2204      	movs	r2, #4
 801a2e4:	701a      	strb	r2, [r3, #0]
 801a2e6:	e0a6      	b.n	801a436 <UART_SetConfig+0x22a>
 801a2e8:	231b      	movs	r3, #27
 801a2ea:	2218      	movs	r2, #24
 801a2ec:	189b      	adds	r3, r3, r2
 801a2ee:	19db      	adds	r3, r3, r7
 801a2f0:	2208      	movs	r2, #8
 801a2f2:	701a      	strb	r2, [r3, #0]
 801a2f4:	e09f      	b.n	801a436 <UART_SetConfig+0x22a>
 801a2f6:	231b      	movs	r3, #27
 801a2f8:	2218      	movs	r2, #24
 801a2fa:	189b      	adds	r3, r3, r2
 801a2fc:	19db      	adds	r3, r3, r7
 801a2fe:	2210      	movs	r2, #16
 801a300:	701a      	strb	r2, [r3, #0]
 801a302:	e098      	b.n	801a436 <UART_SetConfig+0x22a>
 801a304:	69fb      	ldr	r3, [r7, #28]
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	4a96      	ldr	r2, [pc, #600]	@ (801a564 <UART_SetConfig+0x358>)
 801a30a:	4293      	cmp	r3, r2
 801a30c:	d131      	bne.n	801a372 <UART_SetConfig+0x166>
 801a30e:	4b94      	ldr	r3, [pc, #592]	@ (801a560 <UART_SetConfig+0x354>)
 801a310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a312:	220c      	movs	r2, #12
 801a314:	4013      	ands	r3, r2
 801a316:	2b0c      	cmp	r3, #12
 801a318:	d01d      	beq.n	801a356 <UART_SetConfig+0x14a>
 801a31a:	d823      	bhi.n	801a364 <UART_SetConfig+0x158>
 801a31c:	2b08      	cmp	r3, #8
 801a31e:	d00c      	beq.n	801a33a <UART_SetConfig+0x12e>
 801a320:	d820      	bhi.n	801a364 <UART_SetConfig+0x158>
 801a322:	2b00      	cmp	r3, #0
 801a324:	d002      	beq.n	801a32c <UART_SetConfig+0x120>
 801a326:	2b04      	cmp	r3, #4
 801a328:	d00e      	beq.n	801a348 <UART_SetConfig+0x13c>
 801a32a:	e01b      	b.n	801a364 <UART_SetConfig+0x158>
 801a32c:	231b      	movs	r3, #27
 801a32e:	2218      	movs	r2, #24
 801a330:	189b      	adds	r3, r3, r2
 801a332:	19db      	adds	r3, r3, r7
 801a334:	2200      	movs	r2, #0
 801a336:	701a      	strb	r2, [r3, #0]
 801a338:	e07d      	b.n	801a436 <UART_SetConfig+0x22a>
 801a33a:	231b      	movs	r3, #27
 801a33c:	2218      	movs	r2, #24
 801a33e:	189b      	adds	r3, r3, r2
 801a340:	19db      	adds	r3, r3, r7
 801a342:	2202      	movs	r2, #2
 801a344:	701a      	strb	r2, [r3, #0]
 801a346:	e076      	b.n	801a436 <UART_SetConfig+0x22a>
 801a348:	231b      	movs	r3, #27
 801a34a:	2218      	movs	r2, #24
 801a34c:	189b      	adds	r3, r3, r2
 801a34e:	19db      	adds	r3, r3, r7
 801a350:	2204      	movs	r2, #4
 801a352:	701a      	strb	r2, [r3, #0]
 801a354:	e06f      	b.n	801a436 <UART_SetConfig+0x22a>
 801a356:	231b      	movs	r3, #27
 801a358:	2218      	movs	r2, #24
 801a35a:	189b      	adds	r3, r3, r2
 801a35c:	19db      	adds	r3, r3, r7
 801a35e:	2208      	movs	r2, #8
 801a360:	701a      	strb	r2, [r3, #0]
 801a362:	e068      	b.n	801a436 <UART_SetConfig+0x22a>
 801a364:	231b      	movs	r3, #27
 801a366:	2218      	movs	r2, #24
 801a368:	189b      	adds	r3, r3, r2
 801a36a:	19db      	adds	r3, r3, r7
 801a36c:	2210      	movs	r2, #16
 801a36e:	701a      	strb	r2, [r3, #0]
 801a370:	e061      	b.n	801a436 <UART_SetConfig+0x22a>
 801a372:	69fb      	ldr	r3, [r7, #28]
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	4a7c      	ldr	r2, [pc, #496]	@ (801a568 <UART_SetConfig+0x35c>)
 801a378:	4293      	cmp	r3, r2
 801a37a:	d106      	bne.n	801a38a <UART_SetConfig+0x17e>
 801a37c:	231b      	movs	r3, #27
 801a37e:	2218      	movs	r2, #24
 801a380:	189b      	adds	r3, r3, r2
 801a382:	19db      	adds	r3, r3, r7
 801a384:	2200      	movs	r2, #0
 801a386:	701a      	strb	r2, [r3, #0]
 801a388:	e055      	b.n	801a436 <UART_SetConfig+0x22a>
 801a38a:	69fb      	ldr	r3, [r7, #28]
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	4a77      	ldr	r2, [pc, #476]	@ (801a56c <UART_SetConfig+0x360>)
 801a390:	4293      	cmp	r3, r2
 801a392:	d106      	bne.n	801a3a2 <UART_SetConfig+0x196>
 801a394:	231b      	movs	r3, #27
 801a396:	2218      	movs	r2, #24
 801a398:	189b      	adds	r3, r3, r2
 801a39a:	19db      	adds	r3, r3, r7
 801a39c:	2200      	movs	r2, #0
 801a39e:	701a      	strb	r2, [r3, #0]
 801a3a0:	e049      	b.n	801a436 <UART_SetConfig+0x22a>
 801a3a2:	69fb      	ldr	r3, [r7, #28]
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	4a6b      	ldr	r2, [pc, #428]	@ (801a554 <UART_SetConfig+0x348>)
 801a3a8:	4293      	cmp	r3, r2
 801a3aa:	d13e      	bne.n	801a42a <UART_SetConfig+0x21e>
 801a3ac:	4b6c      	ldr	r3, [pc, #432]	@ (801a560 <UART_SetConfig+0x354>)
 801a3ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a3b0:	23c0      	movs	r3, #192	@ 0xc0
 801a3b2:	011b      	lsls	r3, r3, #4
 801a3b4:	4013      	ands	r3, r2
 801a3b6:	22c0      	movs	r2, #192	@ 0xc0
 801a3b8:	0112      	lsls	r2, r2, #4
 801a3ba:	4293      	cmp	r3, r2
 801a3bc:	d027      	beq.n	801a40e <UART_SetConfig+0x202>
 801a3be:	22c0      	movs	r2, #192	@ 0xc0
 801a3c0:	0112      	lsls	r2, r2, #4
 801a3c2:	4293      	cmp	r3, r2
 801a3c4:	d82a      	bhi.n	801a41c <UART_SetConfig+0x210>
 801a3c6:	2280      	movs	r2, #128	@ 0x80
 801a3c8:	0112      	lsls	r2, r2, #4
 801a3ca:	4293      	cmp	r3, r2
 801a3cc:	d011      	beq.n	801a3f2 <UART_SetConfig+0x1e6>
 801a3ce:	2280      	movs	r2, #128	@ 0x80
 801a3d0:	0112      	lsls	r2, r2, #4
 801a3d2:	4293      	cmp	r3, r2
 801a3d4:	d822      	bhi.n	801a41c <UART_SetConfig+0x210>
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d004      	beq.n	801a3e4 <UART_SetConfig+0x1d8>
 801a3da:	2280      	movs	r2, #128	@ 0x80
 801a3dc:	00d2      	lsls	r2, r2, #3
 801a3de:	4293      	cmp	r3, r2
 801a3e0:	d00e      	beq.n	801a400 <UART_SetConfig+0x1f4>
 801a3e2:	e01b      	b.n	801a41c <UART_SetConfig+0x210>
 801a3e4:	231b      	movs	r3, #27
 801a3e6:	2218      	movs	r2, #24
 801a3e8:	189b      	adds	r3, r3, r2
 801a3ea:	19db      	adds	r3, r3, r7
 801a3ec:	2200      	movs	r2, #0
 801a3ee:	701a      	strb	r2, [r3, #0]
 801a3f0:	e021      	b.n	801a436 <UART_SetConfig+0x22a>
 801a3f2:	231b      	movs	r3, #27
 801a3f4:	2218      	movs	r2, #24
 801a3f6:	189b      	adds	r3, r3, r2
 801a3f8:	19db      	adds	r3, r3, r7
 801a3fa:	2202      	movs	r2, #2
 801a3fc:	701a      	strb	r2, [r3, #0]
 801a3fe:	e01a      	b.n	801a436 <UART_SetConfig+0x22a>
 801a400:	231b      	movs	r3, #27
 801a402:	2218      	movs	r2, #24
 801a404:	189b      	adds	r3, r3, r2
 801a406:	19db      	adds	r3, r3, r7
 801a408:	2204      	movs	r2, #4
 801a40a:	701a      	strb	r2, [r3, #0]
 801a40c:	e013      	b.n	801a436 <UART_SetConfig+0x22a>
 801a40e:	231b      	movs	r3, #27
 801a410:	2218      	movs	r2, #24
 801a412:	189b      	adds	r3, r3, r2
 801a414:	19db      	adds	r3, r3, r7
 801a416:	2208      	movs	r2, #8
 801a418:	701a      	strb	r2, [r3, #0]
 801a41a:	e00c      	b.n	801a436 <UART_SetConfig+0x22a>
 801a41c:	231b      	movs	r3, #27
 801a41e:	2218      	movs	r2, #24
 801a420:	189b      	adds	r3, r3, r2
 801a422:	19db      	adds	r3, r3, r7
 801a424:	2210      	movs	r2, #16
 801a426:	701a      	strb	r2, [r3, #0]
 801a428:	e005      	b.n	801a436 <UART_SetConfig+0x22a>
 801a42a:	231b      	movs	r3, #27
 801a42c:	2218      	movs	r2, #24
 801a42e:	189b      	adds	r3, r3, r2
 801a430:	19db      	adds	r3, r3, r7
 801a432:	2210      	movs	r2, #16
 801a434:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801a436:	69fb      	ldr	r3, [r7, #28]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	4a46      	ldr	r2, [pc, #280]	@ (801a554 <UART_SetConfig+0x348>)
 801a43c:	4293      	cmp	r3, r2
 801a43e:	d000      	beq.n	801a442 <UART_SetConfig+0x236>
 801a440:	e09a      	b.n	801a578 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801a442:	231b      	movs	r3, #27
 801a444:	2218      	movs	r2, #24
 801a446:	189b      	adds	r3, r3, r2
 801a448:	19db      	adds	r3, r3, r7
 801a44a:	781b      	ldrb	r3, [r3, #0]
 801a44c:	2b08      	cmp	r3, #8
 801a44e:	d01d      	beq.n	801a48c <UART_SetConfig+0x280>
 801a450:	dc20      	bgt.n	801a494 <UART_SetConfig+0x288>
 801a452:	2b04      	cmp	r3, #4
 801a454:	d015      	beq.n	801a482 <UART_SetConfig+0x276>
 801a456:	dc1d      	bgt.n	801a494 <UART_SetConfig+0x288>
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d002      	beq.n	801a462 <UART_SetConfig+0x256>
 801a45c:	2b02      	cmp	r3, #2
 801a45e:	d005      	beq.n	801a46c <UART_SetConfig+0x260>
 801a460:	e018      	b.n	801a494 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a462:	f7fd fe4b 	bl	80180fc <HAL_RCC_GetPCLK1Freq>
 801a466:	0003      	movs	r3, r0
 801a468:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a46a:	e01c      	b.n	801a4a6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a46c:	4b3c      	ldr	r3, [pc, #240]	@ (801a560 <UART_SetConfig+0x354>)
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	2210      	movs	r2, #16
 801a472:	4013      	ands	r3, r2
 801a474:	d002      	beq.n	801a47c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801a476:	4b3e      	ldr	r3, [pc, #248]	@ (801a570 <UART_SetConfig+0x364>)
 801a478:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a47a:	e014      	b.n	801a4a6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801a47c:	4b3d      	ldr	r3, [pc, #244]	@ (801a574 <UART_SetConfig+0x368>)
 801a47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a480:	e011      	b.n	801a4a6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a482:	f7fd fd8b 	bl	8017f9c <HAL_RCC_GetSysClockFreq>
 801a486:	0003      	movs	r3, r0
 801a488:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a48a:	e00c      	b.n	801a4a6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a48c:	2380      	movs	r3, #128	@ 0x80
 801a48e:	021b      	lsls	r3, r3, #8
 801a490:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a492:	e008      	b.n	801a4a6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801a494:	2300      	movs	r3, #0
 801a496:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801a498:	231a      	movs	r3, #26
 801a49a:	2218      	movs	r2, #24
 801a49c:	189b      	adds	r3, r3, r2
 801a49e:	19db      	adds	r3, r3, r7
 801a4a0:	2201      	movs	r2, #1
 801a4a2:	701a      	strb	r2, [r3, #0]
        break;
 801a4a4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801a4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d100      	bne.n	801a4ae <UART_SetConfig+0x2a2>
 801a4ac:	e133      	b.n	801a716 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801a4ae:	69fb      	ldr	r3, [r7, #28]
 801a4b0:	685a      	ldr	r2, [r3, #4]
 801a4b2:	0013      	movs	r3, r2
 801a4b4:	005b      	lsls	r3, r3, #1
 801a4b6:	189b      	adds	r3, r3, r2
 801a4b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a4ba:	429a      	cmp	r2, r3
 801a4bc:	d305      	bcc.n	801a4ca <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801a4be:	69fb      	ldr	r3, [r7, #28]
 801a4c0:	685b      	ldr	r3, [r3, #4]
 801a4c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801a4c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a4c6:	429a      	cmp	r2, r3
 801a4c8:	d906      	bls.n	801a4d8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801a4ca:	231a      	movs	r3, #26
 801a4cc:	2218      	movs	r2, #24
 801a4ce:	189b      	adds	r3, r3, r2
 801a4d0:	19db      	adds	r3, r3, r7
 801a4d2:	2201      	movs	r2, #1
 801a4d4:	701a      	strb	r2, [r3, #0]
 801a4d6:	e11e      	b.n	801a716 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801a4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4da:	613b      	str	r3, [r7, #16]
 801a4dc:	2300      	movs	r3, #0
 801a4de:	617b      	str	r3, [r7, #20]
 801a4e0:	6939      	ldr	r1, [r7, #16]
 801a4e2:	697a      	ldr	r2, [r7, #20]
 801a4e4:	000b      	movs	r3, r1
 801a4e6:	0e1b      	lsrs	r3, r3, #24
 801a4e8:	0010      	movs	r0, r2
 801a4ea:	0205      	lsls	r5, r0, #8
 801a4ec:	431d      	orrs	r5, r3
 801a4ee:	000b      	movs	r3, r1
 801a4f0:	021c      	lsls	r4, r3, #8
 801a4f2:	69fb      	ldr	r3, [r7, #28]
 801a4f4:	685b      	ldr	r3, [r3, #4]
 801a4f6:	085b      	lsrs	r3, r3, #1
 801a4f8:	60bb      	str	r3, [r7, #8]
 801a4fa:	2300      	movs	r3, #0
 801a4fc:	60fb      	str	r3, [r7, #12]
 801a4fe:	68b8      	ldr	r0, [r7, #8]
 801a500:	68f9      	ldr	r1, [r7, #12]
 801a502:	1900      	adds	r0, r0, r4
 801a504:	4169      	adcs	r1, r5
 801a506:	69fb      	ldr	r3, [r7, #28]
 801a508:	685b      	ldr	r3, [r3, #4]
 801a50a:	603b      	str	r3, [r7, #0]
 801a50c:	2300      	movs	r3, #0
 801a50e:	607b      	str	r3, [r7, #4]
 801a510:	683a      	ldr	r2, [r7, #0]
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	f7e6 f834 	bl	8000580 <__aeabi_uldivmod>
 801a518:	0002      	movs	r2, r0
 801a51a:	000b      	movs	r3, r1
 801a51c:	0013      	movs	r3, r2
 801a51e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801a520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a522:	23c0      	movs	r3, #192	@ 0xc0
 801a524:	009b      	lsls	r3, r3, #2
 801a526:	429a      	cmp	r2, r3
 801a528:	d309      	bcc.n	801a53e <UART_SetConfig+0x332>
 801a52a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a52c:	2380      	movs	r3, #128	@ 0x80
 801a52e:	035b      	lsls	r3, r3, #13
 801a530:	429a      	cmp	r2, r3
 801a532:	d204      	bcs.n	801a53e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801a534:	69fb      	ldr	r3, [r7, #28]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a53a:	60da      	str	r2, [r3, #12]
 801a53c:	e0eb      	b.n	801a716 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801a53e:	231a      	movs	r3, #26
 801a540:	2218      	movs	r2, #24
 801a542:	189b      	adds	r3, r3, r2
 801a544:	19db      	adds	r3, r3, r7
 801a546:	2201      	movs	r2, #1
 801a548:	701a      	strb	r2, [r3, #0]
 801a54a:	e0e4      	b.n	801a716 <UART_SetConfig+0x50a>
 801a54c:	efff69f3 	.word	0xefff69f3
 801a550:	ffffcfff 	.word	0xffffcfff
 801a554:	40004800 	.word	0x40004800
 801a558:	fffff4ff 	.word	0xfffff4ff
 801a55c:	40013800 	.word	0x40013800
 801a560:	40021000 	.word	0x40021000
 801a564:	40004400 	.word	0x40004400
 801a568:	40004c00 	.word	0x40004c00
 801a56c:	40005000 	.word	0x40005000
 801a570:	003d0900 	.word	0x003d0900
 801a574:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801a578:	69fb      	ldr	r3, [r7, #28]
 801a57a:	69da      	ldr	r2, [r3, #28]
 801a57c:	2380      	movs	r3, #128	@ 0x80
 801a57e:	021b      	lsls	r3, r3, #8
 801a580:	429a      	cmp	r2, r3
 801a582:	d000      	beq.n	801a586 <UART_SetConfig+0x37a>
 801a584:	e070      	b.n	801a668 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801a586:	231b      	movs	r3, #27
 801a588:	2218      	movs	r2, #24
 801a58a:	189b      	adds	r3, r3, r2
 801a58c:	19db      	adds	r3, r3, r7
 801a58e:	781b      	ldrb	r3, [r3, #0]
 801a590:	2b08      	cmp	r3, #8
 801a592:	d822      	bhi.n	801a5da <UART_SetConfig+0x3ce>
 801a594:	009a      	lsls	r2, r3, #2
 801a596:	4b67      	ldr	r3, [pc, #412]	@ (801a734 <UART_SetConfig+0x528>)
 801a598:	18d3      	adds	r3, r2, r3
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a59e:	f7fd fdad 	bl	80180fc <HAL_RCC_GetPCLK1Freq>
 801a5a2:	0003      	movs	r3, r0
 801a5a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a5a6:	e021      	b.n	801a5ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a5a8:	f7fd fdbe 	bl	8018128 <HAL_RCC_GetPCLK2Freq>
 801a5ac:	0003      	movs	r3, r0
 801a5ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a5b0:	e01c      	b.n	801a5ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a5b2:	4b61      	ldr	r3, [pc, #388]	@ (801a738 <UART_SetConfig+0x52c>)
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	2210      	movs	r2, #16
 801a5b8:	4013      	ands	r3, r2
 801a5ba:	d002      	beq.n	801a5c2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801a5bc:	4b5f      	ldr	r3, [pc, #380]	@ (801a73c <UART_SetConfig+0x530>)
 801a5be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a5c0:	e014      	b.n	801a5ec <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801a5c2:	4b5f      	ldr	r3, [pc, #380]	@ (801a740 <UART_SetConfig+0x534>)
 801a5c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a5c6:	e011      	b.n	801a5ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a5c8:	f7fd fce8 	bl	8017f9c <HAL_RCC_GetSysClockFreq>
 801a5cc:	0003      	movs	r3, r0
 801a5ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a5d0:	e00c      	b.n	801a5ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a5d2:	2380      	movs	r3, #128	@ 0x80
 801a5d4:	021b      	lsls	r3, r3, #8
 801a5d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a5d8:	e008      	b.n	801a5ec <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801a5da:	2300      	movs	r3, #0
 801a5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801a5de:	231a      	movs	r3, #26
 801a5e0:	2218      	movs	r2, #24
 801a5e2:	189b      	adds	r3, r3, r2
 801a5e4:	19db      	adds	r3, r3, r7
 801a5e6:	2201      	movs	r2, #1
 801a5e8:	701a      	strb	r2, [r3, #0]
        break;
 801a5ea:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801a5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d100      	bne.n	801a5f4 <UART_SetConfig+0x3e8>
 801a5f2:	e090      	b.n	801a716 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801a5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5f6:	005a      	lsls	r2, r3, #1
 801a5f8:	69fb      	ldr	r3, [r7, #28]
 801a5fa:	685b      	ldr	r3, [r3, #4]
 801a5fc:	085b      	lsrs	r3, r3, #1
 801a5fe:	18d2      	adds	r2, r2, r3
 801a600:	69fb      	ldr	r3, [r7, #28]
 801a602:	685b      	ldr	r3, [r3, #4]
 801a604:	0019      	movs	r1, r3
 801a606:	0010      	movs	r0, r2
 801a608:	f7e5 fdcc 	bl	80001a4 <__udivsi3>
 801a60c:	0003      	movs	r3, r0
 801a60e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a612:	2b0f      	cmp	r3, #15
 801a614:	d921      	bls.n	801a65a <UART_SetConfig+0x44e>
 801a616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a618:	2380      	movs	r3, #128	@ 0x80
 801a61a:	025b      	lsls	r3, r3, #9
 801a61c:	429a      	cmp	r2, r3
 801a61e:	d21c      	bcs.n	801a65a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a622:	b29a      	uxth	r2, r3
 801a624:	200e      	movs	r0, #14
 801a626:	2418      	movs	r4, #24
 801a628:	1903      	adds	r3, r0, r4
 801a62a:	19db      	adds	r3, r3, r7
 801a62c:	210f      	movs	r1, #15
 801a62e:	438a      	bics	r2, r1
 801a630:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a634:	085b      	lsrs	r3, r3, #1
 801a636:	b29b      	uxth	r3, r3
 801a638:	2207      	movs	r2, #7
 801a63a:	4013      	ands	r3, r2
 801a63c:	b299      	uxth	r1, r3
 801a63e:	1903      	adds	r3, r0, r4
 801a640:	19db      	adds	r3, r3, r7
 801a642:	1902      	adds	r2, r0, r4
 801a644:	19d2      	adds	r2, r2, r7
 801a646:	8812      	ldrh	r2, [r2, #0]
 801a648:	430a      	orrs	r2, r1
 801a64a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801a64c:	69fb      	ldr	r3, [r7, #28]
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	1902      	adds	r2, r0, r4
 801a652:	19d2      	adds	r2, r2, r7
 801a654:	8812      	ldrh	r2, [r2, #0]
 801a656:	60da      	str	r2, [r3, #12]
 801a658:	e05d      	b.n	801a716 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801a65a:	231a      	movs	r3, #26
 801a65c:	2218      	movs	r2, #24
 801a65e:	189b      	adds	r3, r3, r2
 801a660:	19db      	adds	r3, r3, r7
 801a662:	2201      	movs	r2, #1
 801a664:	701a      	strb	r2, [r3, #0]
 801a666:	e056      	b.n	801a716 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801a668:	231b      	movs	r3, #27
 801a66a:	2218      	movs	r2, #24
 801a66c:	189b      	adds	r3, r3, r2
 801a66e:	19db      	adds	r3, r3, r7
 801a670:	781b      	ldrb	r3, [r3, #0]
 801a672:	2b08      	cmp	r3, #8
 801a674:	d822      	bhi.n	801a6bc <UART_SetConfig+0x4b0>
 801a676:	009a      	lsls	r2, r3, #2
 801a678:	4b32      	ldr	r3, [pc, #200]	@ (801a744 <UART_SetConfig+0x538>)
 801a67a:	18d3      	adds	r3, r2, r3
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a680:	f7fd fd3c 	bl	80180fc <HAL_RCC_GetPCLK1Freq>
 801a684:	0003      	movs	r3, r0
 801a686:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a688:	e021      	b.n	801a6ce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a68a:	f7fd fd4d 	bl	8018128 <HAL_RCC_GetPCLK2Freq>
 801a68e:	0003      	movs	r3, r0
 801a690:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a692:	e01c      	b.n	801a6ce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a694:	4b28      	ldr	r3, [pc, #160]	@ (801a738 <UART_SetConfig+0x52c>)
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	2210      	movs	r2, #16
 801a69a:	4013      	ands	r3, r2
 801a69c:	d002      	beq.n	801a6a4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801a69e:	4b27      	ldr	r3, [pc, #156]	@ (801a73c <UART_SetConfig+0x530>)
 801a6a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a6a2:	e014      	b.n	801a6ce <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801a6a4:	4b26      	ldr	r3, [pc, #152]	@ (801a740 <UART_SetConfig+0x534>)
 801a6a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a6a8:	e011      	b.n	801a6ce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a6aa:	f7fd fc77 	bl	8017f9c <HAL_RCC_GetSysClockFreq>
 801a6ae:	0003      	movs	r3, r0
 801a6b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a6b2:	e00c      	b.n	801a6ce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a6b4:	2380      	movs	r3, #128	@ 0x80
 801a6b6:	021b      	lsls	r3, r3, #8
 801a6b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a6ba:	e008      	b.n	801a6ce <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801a6bc:	2300      	movs	r3, #0
 801a6be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801a6c0:	231a      	movs	r3, #26
 801a6c2:	2218      	movs	r2, #24
 801a6c4:	189b      	adds	r3, r3, r2
 801a6c6:	19db      	adds	r3, r3, r7
 801a6c8:	2201      	movs	r2, #1
 801a6ca:	701a      	strb	r2, [r3, #0]
        break;
 801a6cc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801a6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	d020      	beq.n	801a716 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801a6d4:	69fb      	ldr	r3, [r7, #28]
 801a6d6:	685b      	ldr	r3, [r3, #4]
 801a6d8:	085a      	lsrs	r2, r3, #1
 801a6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6dc:	18d2      	adds	r2, r2, r3
 801a6de:	69fb      	ldr	r3, [r7, #28]
 801a6e0:	685b      	ldr	r3, [r3, #4]
 801a6e2:	0019      	movs	r1, r3
 801a6e4:	0010      	movs	r0, r2
 801a6e6:	f7e5 fd5d 	bl	80001a4 <__udivsi3>
 801a6ea:	0003      	movs	r3, r0
 801a6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6f0:	2b0f      	cmp	r3, #15
 801a6f2:	d90a      	bls.n	801a70a <UART_SetConfig+0x4fe>
 801a6f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a6f6:	2380      	movs	r3, #128	@ 0x80
 801a6f8:	025b      	lsls	r3, r3, #9
 801a6fa:	429a      	cmp	r2, r3
 801a6fc:	d205      	bcs.n	801a70a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801a6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a700:	b29a      	uxth	r2, r3
 801a702:	69fb      	ldr	r3, [r7, #28]
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	60da      	str	r2, [r3, #12]
 801a708:	e005      	b.n	801a716 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801a70a:	231a      	movs	r3, #26
 801a70c:	2218      	movs	r2, #24
 801a70e:	189b      	adds	r3, r3, r2
 801a710:	19db      	adds	r3, r3, r7
 801a712:	2201      	movs	r2, #1
 801a714:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a716:	69fb      	ldr	r3, [r7, #28]
 801a718:	2200      	movs	r2, #0
 801a71a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801a71c:	69fb      	ldr	r3, [r7, #28]
 801a71e:	2200      	movs	r2, #0
 801a720:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801a722:	231a      	movs	r3, #26
 801a724:	2218      	movs	r2, #24
 801a726:	189b      	adds	r3, r3, r2
 801a728:	19db      	adds	r3, r3, r7
 801a72a:	781b      	ldrb	r3, [r3, #0]
}
 801a72c:	0018      	movs	r0, r3
 801a72e:	46bd      	mov	sp, r7
 801a730:	b00e      	add	sp, #56	@ 0x38
 801a732:	bdb0      	pop	{r4, r5, r7, pc}
 801a734:	08028af8 	.word	0x08028af8
 801a738:	40021000 	.word	0x40021000
 801a73c:	003d0900 	.word	0x003d0900
 801a740:	00f42400 	.word	0x00f42400
 801a744:	08028b1c 	.word	0x08028b1c

0801a748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a748:	b580      	push	{r7, lr}
 801a74a:	b082      	sub	sp, #8
 801a74c:	af00      	add	r7, sp, #0
 801a74e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a754:	2201      	movs	r2, #1
 801a756:	4013      	ands	r3, r2
 801a758:	d00b      	beq.n	801a772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	681b      	ldr	r3, [r3, #0]
 801a75e:	685b      	ldr	r3, [r3, #4]
 801a760:	4a4a      	ldr	r2, [pc, #296]	@ (801a88c <UART_AdvFeatureConfig+0x144>)
 801a762:	4013      	ands	r3, r2
 801a764:	0019      	movs	r1, r3
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	430a      	orrs	r2, r1
 801a770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a776:	2202      	movs	r2, #2
 801a778:	4013      	ands	r3, r2
 801a77a:	d00b      	beq.n	801a794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	685b      	ldr	r3, [r3, #4]
 801a782:	4a43      	ldr	r2, [pc, #268]	@ (801a890 <UART_AdvFeatureConfig+0x148>)
 801a784:	4013      	ands	r3, r2
 801a786:	0019      	movs	r1, r3
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	430a      	orrs	r2, r1
 801a792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a798:	2204      	movs	r2, #4
 801a79a:	4013      	ands	r3, r2
 801a79c:	d00b      	beq.n	801a7b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	685b      	ldr	r3, [r3, #4]
 801a7a4:	4a3b      	ldr	r2, [pc, #236]	@ (801a894 <UART_AdvFeatureConfig+0x14c>)
 801a7a6:	4013      	ands	r3, r2
 801a7a8:	0019      	movs	r1, r3
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	430a      	orrs	r2, r1
 801a7b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7ba:	2208      	movs	r2, #8
 801a7bc:	4013      	ands	r3, r2
 801a7be:	d00b      	beq.n	801a7d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	685b      	ldr	r3, [r3, #4]
 801a7c6:	4a34      	ldr	r2, [pc, #208]	@ (801a898 <UART_AdvFeatureConfig+0x150>)
 801a7c8:	4013      	ands	r3, r2
 801a7ca:	0019      	movs	r1, r3
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	430a      	orrs	r2, r1
 801a7d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7dc:	2210      	movs	r2, #16
 801a7de:	4013      	ands	r3, r2
 801a7e0:	d00b      	beq.n	801a7fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	689b      	ldr	r3, [r3, #8]
 801a7e8:	4a2c      	ldr	r2, [pc, #176]	@ (801a89c <UART_AdvFeatureConfig+0x154>)
 801a7ea:	4013      	ands	r3, r2
 801a7ec:	0019      	movs	r1, r3
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	430a      	orrs	r2, r1
 801a7f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7fe:	2220      	movs	r2, #32
 801a800:	4013      	ands	r3, r2
 801a802:	d00b      	beq.n	801a81c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	689b      	ldr	r3, [r3, #8]
 801a80a:	4a25      	ldr	r2, [pc, #148]	@ (801a8a0 <UART_AdvFeatureConfig+0x158>)
 801a80c:	4013      	ands	r3, r2
 801a80e:	0019      	movs	r1, r3
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	430a      	orrs	r2, r1
 801a81a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a820:	2240      	movs	r2, #64	@ 0x40
 801a822:	4013      	ands	r3, r2
 801a824:	d01d      	beq.n	801a862 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	685b      	ldr	r3, [r3, #4]
 801a82c:	4a1d      	ldr	r2, [pc, #116]	@ (801a8a4 <UART_AdvFeatureConfig+0x15c>)
 801a82e:	4013      	ands	r3, r2
 801a830:	0019      	movs	r1, r3
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	430a      	orrs	r2, r1
 801a83c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a842:	2380      	movs	r3, #128	@ 0x80
 801a844:	035b      	lsls	r3, r3, #13
 801a846:	429a      	cmp	r2, r3
 801a848:	d10b      	bne.n	801a862 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	685b      	ldr	r3, [r3, #4]
 801a850:	4a15      	ldr	r2, [pc, #84]	@ (801a8a8 <UART_AdvFeatureConfig+0x160>)
 801a852:	4013      	ands	r3, r2
 801a854:	0019      	movs	r1, r3
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	430a      	orrs	r2, r1
 801a860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a866:	2280      	movs	r2, #128	@ 0x80
 801a868:	4013      	ands	r3, r2
 801a86a:	d00b      	beq.n	801a884 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	685b      	ldr	r3, [r3, #4]
 801a872:	4a0e      	ldr	r2, [pc, #56]	@ (801a8ac <UART_AdvFeatureConfig+0x164>)
 801a874:	4013      	ands	r3, r2
 801a876:	0019      	movs	r1, r3
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	430a      	orrs	r2, r1
 801a882:	605a      	str	r2, [r3, #4]
  }
}
 801a884:	46c0      	nop			@ (mov r8, r8)
 801a886:	46bd      	mov	sp, r7
 801a888:	b002      	add	sp, #8
 801a88a:	bd80      	pop	{r7, pc}
 801a88c:	fffdffff 	.word	0xfffdffff
 801a890:	fffeffff 	.word	0xfffeffff
 801a894:	fffbffff 	.word	0xfffbffff
 801a898:	ffff7fff 	.word	0xffff7fff
 801a89c:	ffffefff 	.word	0xffffefff
 801a8a0:	ffffdfff 	.word	0xffffdfff
 801a8a4:	ffefffff 	.word	0xffefffff
 801a8a8:	ff9fffff 	.word	0xff9fffff
 801a8ac:	fff7ffff 	.word	0xfff7ffff

0801a8b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801a8b0:	b580      	push	{r7, lr}
 801a8b2:	b092      	sub	sp, #72	@ 0x48
 801a8b4:	af02      	add	r7, sp, #8
 801a8b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	2284      	movs	r2, #132	@ 0x84
 801a8bc:	2100      	movs	r1, #0
 801a8be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801a8c0:	f7f6 fa88 	bl	8010dd4 <HAL_GetTick>
 801a8c4:	0003      	movs	r3, r0
 801a8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	2208      	movs	r2, #8
 801a8d0:	4013      	ands	r3, r2
 801a8d2:	2b08      	cmp	r3, #8
 801a8d4:	d12c      	bne.n	801a930 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a8d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8d8:	2280      	movs	r2, #128	@ 0x80
 801a8da:	0391      	lsls	r1, r2, #14
 801a8dc:	6878      	ldr	r0, [r7, #4]
 801a8de:	4a46      	ldr	r2, [pc, #280]	@ (801a9f8 <UART_CheckIdleState+0x148>)
 801a8e0:	9200      	str	r2, [sp, #0]
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	f000 f88c 	bl	801aa00 <UART_WaitOnFlagUntilTimeout>
 801a8e8:	1e03      	subs	r3, r0, #0
 801a8ea:	d021      	beq.n	801a930 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a8ec:	f3ef 8310 	mrs	r3, PRIMASK
 801a8f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801a8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801a8f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a8f6:	2301      	movs	r3, #1
 801a8f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8fc:	f383 8810 	msr	PRIMASK, r3
}
 801a900:	46c0      	nop			@ (mov r8, r8)
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	681a      	ldr	r2, [r3, #0]
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	2180      	movs	r1, #128	@ 0x80
 801a90e:	438a      	bics	r2, r1
 801a910:	601a      	str	r2, [r3, #0]
 801a912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a918:	f383 8810 	msr	PRIMASK, r3
}
 801a91c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	2220      	movs	r2, #32
 801a922:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	2278      	movs	r2, #120	@ 0x78
 801a928:	2100      	movs	r1, #0
 801a92a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a92c:	2303      	movs	r3, #3
 801a92e:	e05f      	b.n	801a9f0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	2204      	movs	r2, #4
 801a938:	4013      	ands	r3, r2
 801a93a:	2b04      	cmp	r3, #4
 801a93c:	d146      	bne.n	801a9cc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a940:	2280      	movs	r2, #128	@ 0x80
 801a942:	03d1      	lsls	r1, r2, #15
 801a944:	6878      	ldr	r0, [r7, #4]
 801a946:	4a2c      	ldr	r2, [pc, #176]	@ (801a9f8 <UART_CheckIdleState+0x148>)
 801a948:	9200      	str	r2, [sp, #0]
 801a94a:	2200      	movs	r2, #0
 801a94c:	f000 f858 	bl	801aa00 <UART_WaitOnFlagUntilTimeout>
 801a950:	1e03      	subs	r3, r0, #0
 801a952:	d03b      	beq.n	801a9cc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a954:	f3ef 8310 	mrs	r3, PRIMASK
 801a958:	60fb      	str	r3, [r7, #12]
  return(result);
 801a95a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801a95c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a95e:	2301      	movs	r3, #1
 801a960:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a962:	693b      	ldr	r3, [r7, #16]
 801a964:	f383 8810 	msr	PRIMASK, r3
}
 801a968:	46c0      	nop			@ (mov r8, r8)
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	681a      	ldr	r2, [r3, #0]
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	4921      	ldr	r1, [pc, #132]	@ (801a9fc <UART_CheckIdleState+0x14c>)
 801a976:	400a      	ands	r2, r1
 801a978:	601a      	str	r2, [r3, #0]
 801a97a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a97c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a97e:	697b      	ldr	r3, [r7, #20]
 801a980:	f383 8810 	msr	PRIMASK, r3
}
 801a984:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a986:	f3ef 8310 	mrs	r3, PRIMASK
 801a98a:	61bb      	str	r3, [r7, #24]
  return(result);
 801a98c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a98e:	633b      	str	r3, [r7, #48]	@ 0x30
 801a990:	2301      	movs	r3, #1
 801a992:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a994:	69fb      	ldr	r3, [r7, #28]
 801a996:	f383 8810 	msr	PRIMASK, r3
}
 801a99a:	46c0      	nop			@ (mov r8, r8)
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	689a      	ldr	r2, [r3, #8]
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	2101      	movs	r1, #1
 801a9a8:	438a      	bics	r2, r1
 801a9aa:	609a      	str	r2, [r3, #8]
 801a9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9b0:	6a3b      	ldr	r3, [r7, #32]
 801a9b2:	f383 8810 	msr	PRIMASK, r3
}
 801a9b6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	2280      	movs	r2, #128	@ 0x80
 801a9bc:	2120      	movs	r1, #32
 801a9be:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	2278      	movs	r2, #120	@ 0x78
 801a9c4:	2100      	movs	r1, #0
 801a9c6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a9c8:	2303      	movs	r3, #3
 801a9ca:	e011      	b.n	801a9f0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	2220      	movs	r2, #32
 801a9d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	2280      	movs	r2, #128	@ 0x80
 801a9d6:	2120      	movs	r1, #32
 801a9d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	2200      	movs	r2, #0
 801a9de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	2200      	movs	r2, #0
 801a9e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	2278      	movs	r2, #120	@ 0x78
 801a9ea:	2100      	movs	r1, #0
 801a9ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a9ee:	2300      	movs	r3, #0
}
 801a9f0:	0018      	movs	r0, r3
 801a9f2:	46bd      	mov	sp, r7
 801a9f4:	b010      	add	sp, #64	@ 0x40
 801a9f6:	bd80      	pop	{r7, pc}
 801a9f8:	01ffffff 	.word	0x01ffffff
 801a9fc:	fffffedf 	.word	0xfffffedf

0801aa00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801aa00:	b580      	push	{r7, lr}
 801aa02:	b084      	sub	sp, #16
 801aa04:	af00      	add	r7, sp, #0
 801aa06:	60f8      	str	r0, [r7, #12]
 801aa08:	60b9      	str	r1, [r7, #8]
 801aa0a:	603b      	str	r3, [r7, #0]
 801aa0c:	1dfb      	adds	r3, r7, #7
 801aa0e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801aa10:	e04b      	b.n	801aaaa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801aa12:	69bb      	ldr	r3, [r7, #24]
 801aa14:	3301      	adds	r3, #1
 801aa16:	d048      	beq.n	801aaaa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801aa18:	f7f6 f9dc 	bl	8010dd4 <HAL_GetTick>
 801aa1c:	0002      	movs	r2, r0
 801aa1e:	683b      	ldr	r3, [r7, #0]
 801aa20:	1ad3      	subs	r3, r2, r3
 801aa22:	69ba      	ldr	r2, [r7, #24]
 801aa24:	429a      	cmp	r2, r3
 801aa26:	d302      	bcc.n	801aa2e <UART_WaitOnFlagUntilTimeout+0x2e>
 801aa28:	69bb      	ldr	r3, [r7, #24]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d101      	bne.n	801aa32 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801aa2e:	2303      	movs	r3, #3
 801aa30:	e04b      	b.n	801aaca <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	2204      	movs	r2, #4
 801aa3a:	4013      	ands	r3, r2
 801aa3c:	d035      	beq.n	801aaaa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	69db      	ldr	r3, [r3, #28]
 801aa44:	2208      	movs	r2, #8
 801aa46:	4013      	ands	r3, r2
 801aa48:	2b08      	cmp	r3, #8
 801aa4a:	d111      	bne.n	801aa70 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801aa4c:	68fb      	ldr	r3, [r7, #12]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	2208      	movs	r2, #8
 801aa52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801aa54:	68fb      	ldr	r3, [r7, #12]
 801aa56:	0018      	movs	r0, r3
 801aa58:	f000 f9ca 	bl	801adf0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	2284      	movs	r2, #132	@ 0x84
 801aa60:	2108      	movs	r1, #8
 801aa62:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	2278      	movs	r2, #120	@ 0x78
 801aa68:	2100      	movs	r1, #0
 801aa6a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801aa6c:	2301      	movs	r3, #1
 801aa6e:	e02c      	b.n	801aaca <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	69da      	ldr	r2, [r3, #28]
 801aa76:	2380      	movs	r3, #128	@ 0x80
 801aa78:	011b      	lsls	r3, r3, #4
 801aa7a:	401a      	ands	r2, r3
 801aa7c:	2380      	movs	r3, #128	@ 0x80
 801aa7e:	011b      	lsls	r3, r3, #4
 801aa80:	429a      	cmp	r2, r3
 801aa82:	d112      	bne.n	801aaaa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	2280      	movs	r2, #128	@ 0x80
 801aa8a:	0112      	lsls	r2, r2, #4
 801aa8c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	0018      	movs	r0, r3
 801aa92:	f000 f9ad 	bl	801adf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	2284      	movs	r2, #132	@ 0x84
 801aa9a:	2120      	movs	r1, #32
 801aa9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	2278      	movs	r2, #120	@ 0x78
 801aaa2:	2100      	movs	r1, #0
 801aaa4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801aaa6:	2303      	movs	r3, #3
 801aaa8:	e00f      	b.n	801aaca <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	69db      	ldr	r3, [r3, #28]
 801aab0:	68ba      	ldr	r2, [r7, #8]
 801aab2:	4013      	ands	r3, r2
 801aab4:	68ba      	ldr	r2, [r7, #8]
 801aab6:	1ad3      	subs	r3, r2, r3
 801aab8:	425a      	negs	r2, r3
 801aaba:	4153      	adcs	r3, r2
 801aabc:	b2db      	uxtb	r3, r3
 801aabe:	001a      	movs	r2, r3
 801aac0:	1dfb      	adds	r3, r7, #7
 801aac2:	781b      	ldrb	r3, [r3, #0]
 801aac4:	429a      	cmp	r2, r3
 801aac6:	d0a4      	beq.n	801aa12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801aac8:	2300      	movs	r3, #0
}
 801aaca:	0018      	movs	r0, r3
 801aacc:	46bd      	mov	sp, r7
 801aace:	b004      	add	sp, #16
 801aad0:	bd80      	pop	{r7, pc}
	...

0801aad4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801aad4:	b580      	push	{r7, lr}
 801aad6:	b090      	sub	sp, #64	@ 0x40
 801aad8:	af00      	add	r7, sp, #0
 801aada:	60f8      	str	r0, [r7, #12]
 801aadc:	60b9      	str	r1, [r7, #8]
 801aade:	1dbb      	adds	r3, r7, #6
 801aae0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801aae2:	68fb      	ldr	r3, [r7, #12]
 801aae4:	68ba      	ldr	r2, [r7, #8]
 801aae6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	1dba      	adds	r2, r7, #6
 801aaec:	2158      	movs	r1, #88	@ 0x58
 801aaee:	8812      	ldrh	r2, [r2, #0]
 801aaf0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801aaf2:	68fb      	ldr	r3, [r7, #12]
 801aaf4:	1dba      	adds	r2, r7, #6
 801aaf6:	215a      	movs	r1, #90	@ 0x5a
 801aaf8:	8812      	ldrh	r2, [r2, #0]
 801aafa:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801aafc:	68fb      	ldr	r3, [r7, #12]
 801aafe:	2200      	movs	r2, #0
 801ab00:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	689a      	ldr	r2, [r3, #8]
 801ab06:	2380      	movs	r3, #128	@ 0x80
 801ab08:	015b      	lsls	r3, r3, #5
 801ab0a:	429a      	cmp	r2, r3
 801ab0c:	d10d      	bne.n	801ab2a <UART_Start_Receive_IT+0x56>
 801ab0e:	68fb      	ldr	r3, [r7, #12]
 801ab10:	691b      	ldr	r3, [r3, #16]
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d104      	bne.n	801ab20 <UART_Start_Receive_IT+0x4c>
 801ab16:	68fb      	ldr	r3, [r7, #12]
 801ab18:	225c      	movs	r2, #92	@ 0x5c
 801ab1a:	4950      	ldr	r1, [pc, #320]	@ (801ac5c <UART_Start_Receive_IT+0x188>)
 801ab1c:	5299      	strh	r1, [r3, r2]
 801ab1e:	e02e      	b.n	801ab7e <UART_Start_Receive_IT+0xaa>
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	225c      	movs	r2, #92	@ 0x5c
 801ab24:	21ff      	movs	r1, #255	@ 0xff
 801ab26:	5299      	strh	r1, [r3, r2]
 801ab28:	e029      	b.n	801ab7e <UART_Start_Receive_IT+0xaa>
 801ab2a:	68fb      	ldr	r3, [r7, #12]
 801ab2c:	689b      	ldr	r3, [r3, #8]
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d10d      	bne.n	801ab4e <UART_Start_Receive_IT+0x7a>
 801ab32:	68fb      	ldr	r3, [r7, #12]
 801ab34:	691b      	ldr	r3, [r3, #16]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d104      	bne.n	801ab44 <UART_Start_Receive_IT+0x70>
 801ab3a:	68fb      	ldr	r3, [r7, #12]
 801ab3c:	225c      	movs	r2, #92	@ 0x5c
 801ab3e:	21ff      	movs	r1, #255	@ 0xff
 801ab40:	5299      	strh	r1, [r3, r2]
 801ab42:	e01c      	b.n	801ab7e <UART_Start_Receive_IT+0xaa>
 801ab44:	68fb      	ldr	r3, [r7, #12]
 801ab46:	225c      	movs	r2, #92	@ 0x5c
 801ab48:	217f      	movs	r1, #127	@ 0x7f
 801ab4a:	5299      	strh	r1, [r3, r2]
 801ab4c:	e017      	b.n	801ab7e <UART_Start_Receive_IT+0xaa>
 801ab4e:	68fb      	ldr	r3, [r7, #12]
 801ab50:	689a      	ldr	r2, [r3, #8]
 801ab52:	2380      	movs	r3, #128	@ 0x80
 801ab54:	055b      	lsls	r3, r3, #21
 801ab56:	429a      	cmp	r2, r3
 801ab58:	d10d      	bne.n	801ab76 <UART_Start_Receive_IT+0xa2>
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	691b      	ldr	r3, [r3, #16]
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d104      	bne.n	801ab6c <UART_Start_Receive_IT+0x98>
 801ab62:	68fb      	ldr	r3, [r7, #12]
 801ab64:	225c      	movs	r2, #92	@ 0x5c
 801ab66:	217f      	movs	r1, #127	@ 0x7f
 801ab68:	5299      	strh	r1, [r3, r2]
 801ab6a:	e008      	b.n	801ab7e <UART_Start_Receive_IT+0xaa>
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	225c      	movs	r2, #92	@ 0x5c
 801ab70:	213f      	movs	r1, #63	@ 0x3f
 801ab72:	5299      	strh	r1, [r3, r2]
 801ab74:	e003      	b.n	801ab7e <UART_Start_Receive_IT+0xaa>
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	225c      	movs	r2, #92	@ 0x5c
 801ab7a:	2100      	movs	r1, #0
 801ab7c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ab7e:	68fb      	ldr	r3, [r7, #12]
 801ab80:	2284      	movs	r2, #132	@ 0x84
 801ab82:	2100      	movs	r1, #0
 801ab84:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	2280      	movs	r2, #128	@ 0x80
 801ab8a:	2122      	movs	r1, #34	@ 0x22
 801ab8c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab8e:	f3ef 8310 	mrs	r3, PRIMASK
 801ab92:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801ab94:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ab96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ab98:	2301      	movs	r3, #1
 801ab9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab9e:	f383 8810 	msr	PRIMASK, r3
}
 801aba2:	46c0      	nop			@ (mov r8, r8)
 801aba4:	68fb      	ldr	r3, [r7, #12]
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	689a      	ldr	r2, [r3, #8]
 801abaa:	68fb      	ldr	r3, [r7, #12]
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	2101      	movs	r1, #1
 801abb0:	430a      	orrs	r2, r1
 801abb2:	609a      	str	r2, [r3, #8]
 801abb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801abb6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801abb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abba:	f383 8810 	msr	PRIMASK, r3
}
 801abbe:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	689a      	ldr	r2, [r3, #8]
 801abc4:	2380      	movs	r3, #128	@ 0x80
 801abc6:	015b      	lsls	r3, r3, #5
 801abc8:	429a      	cmp	r2, r3
 801abca:	d107      	bne.n	801abdc <UART_Start_Receive_IT+0x108>
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	691b      	ldr	r3, [r3, #16]
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d103      	bne.n	801abdc <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	4a22      	ldr	r2, [pc, #136]	@ (801ac60 <UART_Start_Receive_IT+0x18c>)
 801abd8:	669a      	str	r2, [r3, #104]	@ 0x68
 801abda:	e002      	b.n	801abe2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	4a21      	ldr	r2, [pc, #132]	@ (801ac64 <UART_Start_Receive_IT+0x190>)
 801abe0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	691b      	ldr	r3, [r3, #16]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d019      	beq.n	801ac1e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801abea:	f3ef 8310 	mrs	r3, PRIMASK
 801abee:	61fb      	str	r3, [r7, #28]
  return(result);
 801abf0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801abf2:	637b      	str	r3, [r7, #52]	@ 0x34
 801abf4:	2301      	movs	r3, #1
 801abf6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801abf8:	6a3b      	ldr	r3, [r7, #32]
 801abfa:	f383 8810 	msr	PRIMASK, r3
}
 801abfe:	46c0      	nop			@ (mov r8, r8)
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	681a      	ldr	r2, [r3, #0]
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	2190      	movs	r1, #144	@ 0x90
 801ac0c:	0049      	lsls	r1, r1, #1
 801ac0e:	430a      	orrs	r2, r1
 801ac10:	601a      	str	r2, [r3, #0]
 801ac12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ac14:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac18:	f383 8810 	msr	PRIMASK, r3
}
 801ac1c:	e018      	b.n	801ac50 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ac1e:	f3ef 8310 	mrs	r3, PRIMASK
 801ac22:	613b      	str	r3, [r7, #16]
  return(result);
 801ac24:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801ac26:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ac28:	2301      	movs	r3, #1
 801ac2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac2c:	697b      	ldr	r3, [r7, #20]
 801ac2e:	f383 8810 	msr	PRIMASK, r3
}
 801ac32:	46c0      	nop			@ (mov r8, r8)
 801ac34:	68fb      	ldr	r3, [r7, #12]
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	681a      	ldr	r2, [r3, #0]
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	2120      	movs	r1, #32
 801ac40:	430a      	orrs	r2, r1
 801ac42:	601a      	str	r2, [r3, #0]
 801ac44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac46:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac48:	69bb      	ldr	r3, [r7, #24]
 801ac4a:	f383 8810 	msr	PRIMASK, r3
}
 801ac4e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801ac50:	2300      	movs	r3, #0
}
 801ac52:	0018      	movs	r0, r3
 801ac54:	46bd      	mov	sp, r7
 801ac56:	b010      	add	sp, #64	@ 0x40
 801ac58:	bd80      	pop	{r7, pc}
 801ac5a:	46c0      	nop			@ (mov r8, r8)
 801ac5c:	000001ff 	.word	0x000001ff
 801ac60:	0801b3d5 	.word	0x0801b3d5
 801ac64:	0801b209 	.word	0x0801b209

0801ac68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	b090      	sub	sp, #64	@ 0x40
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	60f8      	str	r0, [r7, #12]
 801ac70:	60b9      	str	r1, [r7, #8]
 801ac72:	1dbb      	adds	r3, r7, #6
 801ac74:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	68ba      	ldr	r2, [r7, #8]
 801ac7a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801ac7c:	68fb      	ldr	r3, [r7, #12]
 801ac7e:	1dba      	adds	r2, r7, #6
 801ac80:	2158      	movs	r1, #88	@ 0x58
 801ac82:	8812      	ldrh	r2, [r2, #0]
 801ac84:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	2284      	movs	r2, #132	@ 0x84
 801ac8a:	2100      	movs	r1, #0
 801ac8c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	2280      	movs	r2, #128	@ 0x80
 801ac92:	2122      	movs	r1, #34	@ 0x22
 801ac94:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d028      	beq.n	801acf0 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801ac9e:	68fb      	ldr	r3, [r7, #12]
 801aca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801aca2:	4a3e      	ldr	r2, [pc, #248]	@ (801ad9c <UART_Start_Receive_DMA+0x134>)
 801aca4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801acaa:	4a3d      	ldr	r2, [pc, #244]	@ (801ada0 <UART_Start_Receive_DMA+0x138>)
 801acac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801acb2:	4a3c      	ldr	r2, [pc, #240]	@ (801ada4 <UART_Start_Receive_DMA+0x13c>)
 801acb4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801acb6:	68fb      	ldr	r3, [r7, #12]
 801acb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801acba:	2200      	movs	r2, #0
 801acbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	3324      	adds	r3, #36	@ 0x24
 801acc8:	0019      	movs	r1, r3
 801acca:	68fb      	ldr	r3, [r7, #12]
 801accc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801acce:	001a      	movs	r2, r3
 801acd0:	1dbb      	adds	r3, r7, #6
 801acd2:	881b      	ldrh	r3, [r3, #0]
 801acd4:	f7f6 fdd0 	bl	8011878 <HAL_DMA_Start_IT>
 801acd8:	1e03      	subs	r3, r0, #0
 801acda:	d009      	beq.n	801acf0 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	2284      	movs	r2, #132	@ 0x84
 801ace0:	2110      	movs	r1, #16
 801ace2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ace4:	68fb      	ldr	r3, [r7, #12]
 801ace6:	2280      	movs	r2, #128	@ 0x80
 801ace8:	2120      	movs	r1, #32
 801acea:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801acec:	2301      	movs	r3, #1
 801acee:	e050      	b.n	801ad92 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	691b      	ldr	r3, [r3, #16]
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d019      	beq.n	801ad2c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801acf8:	f3ef 8310 	mrs	r3, PRIMASK
 801acfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801acfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ad00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ad02:	2301      	movs	r3, #1
 801ad04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad08:	f383 8810 	msr	PRIMASK, r3
}
 801ad0c:	46c0      	nop			@ (mov r8, r8)
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	681a      	ldr	r2, [r3, #0]
 801ad14:	68fb      	ldr	r3, [r7, #12]
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	2180      	movs	r1, #128	@ 0x80
 801ad1a:	0049      	lsls	r1, r1, #1
 801ad1c:	430a      	orrs	r2, r1
 801ad1e:	601a      	str	r2, [r3, #0]
 801ad20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ad22:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad26:	f383 8810 	msr	PRIMASK, r3
}
 801ad2a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad2c:	f3ef 8310 	mrs	r3, PRIMASK
 801ad30:	613b      	str	r3, [r7, #16]
  return(result);
 801ad32:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ad34:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ad36:	2301      	movs	r3, #1
 801ad38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad3a:	697b      	ldr	r3, [r7, #20]
 801ad3c:	f383 8810 	msr	PRIMASK, r3
}
 801ad40:	46c0      	nop			@ (mov r8, r8)
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	689a      	ldr	r2, [r3, #8]
 801ad48:	68fb      	ldr	r3, [r7, #12]
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	2101      	movs	r1, #1
 801ad4e:	430a      	orrs	r2, r1
 801ad50:	609a      	str	r2, [r3, #8]
 801ad52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ad54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad56:	69bb      	ldr	r3, [r7, #24]
 801ad58:	f383 8810 	msr	PRIMASK, r3
}
 801ad5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad5e:	f3ef 8310 	mrs	r3, PRIMASK
 801ad62:	61fb      	str	r3, [r7, #28]
  return(result);
 801ad64:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ad66:	637b      	str	r3, [r7, #52]	@ 0x34
 801ad68:	2301      	movs	r3, #1
 801ad6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad6c:	6a3b      	ldr	r3, [r7, #32]
 801ad6e:	f383 8810 	msr	PRIMASK, r3
}
 801ad72:	46c0      	nop			@ (mov r8, r8)
 801ad74:	68fb      	ldr	r3, [r7, #12]
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	689a      	ldr	r2, [r3, #8]
 801ad7a:	68fb      	ldr	r3, [r7, #12]
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	2140      	movs	r1, #64	@ 0x40
 801ad80:	430a      	orrs	r2, r1
 801ad82:	609a      	str	r2, [r3, #8]
 801ad84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ad86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad8a:	f383 8810 	msr	PRIMASK, r3
}
 801ad8e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801ad90:	2300      	movs	r3, #0
}
 801ad92:	0018      	movs	r0, r3
 801ad94:	46bd      	mov	sp, r7
 801ad96:	b010      	add	sp, #64	@ 0x40
 801ad98:	bd80      	pop	{r7, pc}
 801ad9a:	46c0      	nop			@ (mov r8, r8)
 801ad9c:	0801af79 	.word	0x0801af79
 801ada0:	0801b0ad 	.word	0x0801b0ad
 801ada4:	0801b0f5 	.word	0x0801b0f5

0801ada8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801ada8:	b580      	push	{r7, lr}
 801adaa:	b086      	sub	sp, #24
 801adac:	af00      	add	r7, sp, #0
 801adae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adb0:	f3ef 8310 	mrs	r3, PRIMASK
 801adb4:	60bb      	str	r3, [r7, #8]
  return(result);
 801adb6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801adb8:	617b      	str	r3, [r7, #20]
 801adba:	2301      	movs	r3, #1
 801adbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801adbe:	68fb      	ldr	r3, [r7, #12]
 801adc0:	f383 8810 	msr	PRIMASK, r3
}
 801adc4:	46c0      	nop			@ (mov r8, r8)
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	681a      	ldr	r2, [r3, #0]
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	21c0      	movs	r1, #192	@ 0xc0
 801add2:	438a      	bics	r2, r1
 801add4:	601a      	str	r2, [r3, #0]
 801add6:	697b      	ldr	r3, [r7, #20]
 801add8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801adda:	693b      	ldr	r3, [r7, #16]
 801addc:	f383 8810 	msr	PRIMASK, r3
}
 801ade0:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	2220      	movs	r2, #32
 801ade6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801ade8:	46c0      	nop			@ (mov r8, r8)
 801adea:	46bd      	mov	sp, r7
 801adec:	b006      	add	sp, #24
 801adee:	bd80      	pop	{r7, pc}

0801adf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801adf0:	b580      	push	{r7, lr}
 801adf2:	b08e      	sub	sp, #56	@ 0x38
 801adf4:	af00      	add	r7, sp, #0
 801adf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adf8:	f3ef 8310 	mrs	r3, PRIMASK
 801adfc:	617b      	str	r3, [r7, #20]
  return(result);
 801adfe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ae00:	637b      	str	r3, [r7, #52]	@ 0x34
 801ae02:	2301      	movs	r3, #1
 801ae04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae06:	69bb      	ldr	r3, [r7, #24]
 801ae08:	f383 8810 	msr	PRIMASK, r3
}
 801ae0c:	46c0      	nop			@ (mov r8, r8)
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	681a      	ldr	r2, [r3, #0]
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	4926      	ldr	r1, [pc, #152]	@ (801aeb4 <UART_EndRxTransfer+0xc4>)
 801ae1a:	400a      	ands	r2, r1
 801ae1c:	601a      	str	r2, [r3, #0]
 801ae1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ae20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae22:	69fb      	ldr	r3, [r7, #28]
 801ae24:	f383 8810 	msr	PRIMASK, r3
}
 801ae28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae2a:	f3ef 8310 	mrs	r3, PRIMASK
 801ae2e:	623b      	str	r3, [r7, #32]
  return(result);
 801ae30:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ae32:	633b      	str	r3, [r7, #48]	@ 0x30
 801ae34:	2301      	movs	r3, #1
 801ae36:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae3a:	f383 8810 	msr	PRIMASK, r3
}
 801ae3e:	46c0      	nop			@ (mov r8, r8)
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	689a      	ldr	r2, [r3, #8]
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	2101      	movs	r1, #1
 801ae4c:	438a      	bics	r2, r1
 801ae4e:	609a      	str	r2, [r3, #8]
 801ae50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae52:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae56:	f383 8810 	msr	PRIMASK, r3
}
 801ae5a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ae60:	2b01      	cmp	r3, #1
 801ae62:	d118      	bne.n	801ae96 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae64:	f3ef 8310 	mrs	r3, PRIMASK
 801ae68:	60bb      	str	r3, [r7, #8]
  return(result);
 801ae6a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ae6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ae6e:	2301      	movs	r3, #1
 801ae70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae72:	68fb      	ldr	r3, [r7, #12]
 801ae74:	f383 8810 	msr	PRIMASK, r3
}
 801ae78:	46c0      	nop			@ (mov r8, r8)
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	681a      	ldr	r2, [r3, #0]
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	2110      	movs	r1, #16
 801ae86:	438a      	bics	r2, r1
 801ae88:	601a      	str	r2, [r3, #0]
 801ae8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae8e:	693b      	ldr	r3, [r7, #16]
 801ae90:	f383 8810 	msr	PRIMASK, r3
}
 801ae94:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	2280      	movs	r2, #128	@ 0x80
 801ae9a:	2120      	movs	r1, #32
 801ae9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	2200      	movs	r2, #0
 801aea2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	2200      	movs	r2, #0
 801aea8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801aeaa:	46c0      	nop			@ (mov r8, r8)
 801aeac:	46bd      	mov	sp, r7
 801aeae:	b00e      	add	sp, #56	@ 0x38
 801aeb0:	bd80      	pop	{r7, pc}
 801aeb2:	46c0      	nop			@ (mov r8, r8)
 801aeb4:	fffffedf 	.word	0xfffffedf

0801aeb8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801aeb8:	b580      	push	{r7, lr}
 801aeba:	b08c      	sub	sp, #48	@ 0x30
 801aebc:	af00      	add	r7, sp, #0
 801aebe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aec4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	2220      	movs	r2, #32
 801aece:	4013      	ands	r3, r2
 801aed0:	d135      	bne.n	801af3e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801aed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aed4:	2252      	movs	r2, #82	@ 0x52
 801aed6:	2100      	movs	r1, #0
 801aed8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aeda:	f3ef 8310 	mrs	r3, PRIMASK
 801aede:	60fb      	str	r3, [r7, #12]
  return(result);
 801aee0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801aee2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801aee4:	2301      	movs	r3, #1
 801aee6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aee8:	693b      	ldr	r3, [r7, #16]
 801aeea:	f383 8810 	msr	PRIMASK, r3
}
 801aeee:	46c0      	nop			@ (mov r8, r8)
 801aef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	689a      	ldr	r2, [r3, #8]
 801aef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	2180      	movs	r1, #128	@ 0x80
 801aefc:	438a      	bics	r2, r1
 801aefe:	609a      	str	r2, [r3, #8]
 801af00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af04:	697b      	ldr	r3, [r7, #20]
 801af06:	f383 8810 	msr	PRIMASK, r3
}
 801af0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af0c:	f3ef 8310 	mrs	r3, PRIMASK
 801af10:	61bb      	str	r3, [r7, #24]
  return(result);
 801af12:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801af14:	627b      	str	r3, [r7, #36]	@ 0x24
 801af16:	2301      	movs	r3, #1
 801af18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af1a:	69fb      	ldr	r3, [r7, #28]
 801af1c:	f383 8810 	msr	PRIMASK, r3
}
 801af20:	46c0      	nop			@ (mov r8, r8)
 801af22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	681a      	ldr	r2, [r3, #0]
 801af28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	2140      	movs	r1, #64	@ 0x40
 801af2e:	430a      	orrs	r2, r1
 801af30:	601a      	str	r2, [r3, #0]
 801af32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af36:	6a3b      	ldr	r3, [r7, #32]
 801af38:	f383 8810 	msr	PRIMASK, r3
}
 801af3c:	e006      	b.n	801af4c <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801af3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af40:	228c      	movs	r2, #140	@ 0x8c
 801af42:	589b      	ldr	r3, [r3, r2]
 801af44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801af46:	0010      	movs	r0, r2
 801af48:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801af4a:	46c0      	nop			@ (mov r8, r8)
 801af4c:	46c0      	nop			@ (mov r8, r8)
 801af4e:	46bd      	mov	sp, r7
 801af50:	b00c      	add	sp, #48	@ 0x30
 801af52:	bd80      	pop	{r7, pc}

0801af54 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801af54:	b580      	push	{r7, lr}
 801af56:	b084      	sub	sp, #16
 801af58:	af00      	add	r7, sp, #0
 801af5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af60:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801af62:	68fb      	ldr	r3, [r7, #12]
 801af64:	2288      	movs	r2, #136	@ 0x88
 801af66:	589b      	ldr	r3, [r3, r2]
 801af68:	68fa      	ldr	r2, [r7, #12]
 801af6a:	0010      	movs	r0, r2
 801af6c:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801af6e:	46c0      	nop			@ (mov r8, r8)
 801af70:	46bd      	mov	sp, r7
 801af72:	b004      	add	sp, #16
 801af74:	bd80      	pop	{r7, pc}
	...

0801af78 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801af78:	b580      	push	{r7, lr}
 801af7a:	b094      	sub	sp, #80	@ 0x50
 801af7c:	af00      	add	r7, sp, #0
 801af7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af84:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	2220      	movs	r2, #32
 801af8e:	4013      	ands	r3, r2
 801af90:	d16f      	bne.n	801b072 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801af92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801af94:	225a      	movs	r2, #90	@ 0x5a
 801af96:	2100      	movs	r1, #0
 801af98:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af9a:	f3ef 8310 	mrs	r3, PRIMASK
 801af9e:	61bb      	str	r3, [r7, #24]
  return(result);
 801afa0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801afa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 801afa4:	2301      	movs	r3, #1
 801afa6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afa8:	69fb      	ldr	r3, [r7, #28]
 801afaa:	f383 8810 	msr	PRIMASK, r3
}
 801afae:	46c0      	nop			@ (mov r8, r8)
 801afb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801afb2:	681b      	ldr	r3, [r3, #0]
 801afb4:	681a      	ldr	r2, [r3, #0]
 801afb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	493b      	ldr	r1, [pc, #236]	@ (801b0a8 <UART_DMAReceiveCplt+0x130>)
 801afbc:	400a      	ands	r2, r1
 801afbe:	601a      	str	r2, [r3, #0]
 801afc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801afc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afc4:	6a3b      	ldr	r3, [r7, #32]
 801afc6:	f383 8810 	msr	PRIMASK, r3
}
 801afca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801afcc:	f3ef 8310 	mrs	r3, PRIMASK
 801afd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801afd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801afd4:	647b      	str	r3, [r7, #68]	@ 0x44
 801afd6:	2301      	movs	r3, #1
 801afd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801afdc:	f383 8810 	msr	PRIMASK, r3
}
 801afe0:	46c0      	nop			@ (mov r8, r8)
 801afe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	689a      	ldr	r2, [r3, #8]
 801afe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	2101      	movs	r1, #1
 801afee:	438a      	bics	r2, r1
 801aff0:	609a      	str	r2, [r3, #8]
 801aff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aff8:	f383 8810 	msr	PRIMASK, r3
}
 801affc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801affe:	f3ef 8310 	mrs	r3, PRIMASK
 801b002:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801b004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b006:	643b      	str	r3, [r7, #64]	@ 0x40
 801b008:	2301      	movs	r3, #1
 801b00a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b00e:	f383 8810 	msr	PRIMASK, r3
}
 801b012:	46c0      	nop			@ (mov r8, r8)
 801b014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	689a      	ldr	r2, [r3, #8]
 801b01a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	2140      	movs	r1, #64	@ 0x40
 801b020:	438a      	bics	r2, r1
 801b022:	609a      	str	r2, [r3, #8]
 801b024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b026:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b02a:	f383 8810 	msr	PRIMASK, r3
}
 801b02e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801b030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b032:	2280      	movs	r2, #128	@ 0x80
 801b034:	2120      	movs	r1, #32
 801b036:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b03a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b03c:	2b01      	cmp	r3, #1
 801b03e:	d118      	bne.n	801b072 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b040:	f3ef 8310 	mrs	r3, PRIMASK
 801b044:	60fb      	str	r3, [r7, #12]
  return(result);
 801b046:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b048:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b04a:	2301      	movs	r3, #1
 801b04c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b04e:	693b      	ldr	r3, [r7, #16]
 801b050:	f383 8810 	msr	PRIMASK, r3
}
 801b054:	46c0      	nop			@ (mov r8, r8)
 801b056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	681a      	ldr	r2, [r3, #0]
 801b05c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	2110      	movs	r1, #16
 801b062:	438a      	bics	r2, r1
 801b064:	601a      	str	r2, [r3, #0]
 801b066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b068:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b06a:	697b      	ldr	r3, [r7, #20]
 801b06c:	f383 8810 	msr	PRIMASK, r3
}
 801b070:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b074:	2200      	movs	r2, #0
 801b076:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b07a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b07c:	2b01      	cmp	r3, #1
 801b07e:	d109      	bne.n	801b094 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801b080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b082:	22ac      	movs	r2, #172	@ 0xac
 801b084:	589b      	ldr	r3, [r3, r2]
 801b086:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b088:	2158      	movs	r1, #88	@ 0x58
 801b08a:	5a51      	ldrh	r1, [r2, r1]
 801b08c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b08e:	0010      	movs	r0, r2
 801b090:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b092:	e005      	b.n	801b0a0 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801b094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b096:	2294      	movs	r2, #148	@ 0x94
 801b098:	589b      	ldr	r3, [r3, r2]
 801b09a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b09c:	0010      	movs	r0, r2
 801b09e:	4798      	blx	r3
}
 801b0a0:	46c0      	nop			@ (mov r8, r8)
 801b0a2:	46bd      	mov	sp, r7
 801b0a4:	b014      	add	sp, #80	@ 0x50
 801b0a6:	bd80      	pop	{r7, pc}
 801b0a8:	fffffeff 	.word	0xfffffeff

0801b0ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b084      	sub	sp, #16
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b0b8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801b0ba:	68fb      	ldr	r3, [r7, #12]
 801b0bc:	2201      	movs	r2, #1
 801b0be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b0c4:	2b01      	cmp	r3, #1
 801b0c6:	d10b      	bne.n	801b0e0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801b0c8:	68fb      	ldr	r3, [r7, #12]
 801b0ca:	22ac      	movs	r2, #172	@ 0xac
 801b0cc:	589b      	ldr	r3, [r3, r2]
 801b0ce:	68fa      	ldr	r2, [r7, #12]
 801b0d0:	2158      	movs	r1, #88	@ 0x58
 801b0d2:	5a52      	ldrh	r2, [r2, r1]
 801b0d4:	0852      	lsrs	r2, r2, #1
 801b0d6:	b291      	uxth	r1, r2
 801b0d8:	68fa      	ldr	r2, [r7, #12]
 801b0da:	0010      	movs	r0, r2
 801b0dc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b0de:	e005      	b.n	801b0ec <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801b0e0:	68fb      	ldr	r3, [r7, #12]
 801b0e2:	2290      	movs	r2, #144	@ 0x90
 801b0e4:	589b      	ldr	r3, [r3, r2]
 801b0e6:	68fa      	ldr	r2, [r7, #12]
 801b0e8:	0010      	movs	r0, r2
 801b0ea:	4798      	blx	r3
}
 801b0ec:	46c0      	nop			@ (mov r8, r8)
 801b0ee:	46bd      	mov	sp, r7
 801b0f0:	b004      	add	sp, #16
 801b0f2:	bd80      	pop	{r7, pc}

0801b0f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801b0f4:	b580      	push	{r7, lr}
 801b0f6:	b086      	sub	sp, #24
 801b0f8:	af00      	add	r7, sp, #0
 801b0fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b100:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801b102:	697b      	ldr	r3, [r7, #20]
 801b104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801b106:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801b108:	697b      	ldr	r3, [r7, #20]
 801b10a:	2280      	movs	r2, #128	@ 0x80
 801b10c:	589b      	ldr	r3, [r3, r2]
 801b10e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801b110:	697b      	ldr	r3, [r7, #20]
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	689b      	ldr	r3, [r3, #8]
 801b116:	2280      	movs	r2, #128	@ 0x80
 801b118:	4013      	ands	r3, r2
 801b11a:	2b80      	cmp	r3, #128	@ 0x80
 801b11c:	d10a      	bne.n	801b134 <UART_DMAError+0x40>
 801b11e:	693b      	ldr	r3, [r7, #16]
 801b120:	2b21      	cmp	r3, #33	@ 0x21
 801b122:	d107      	bne.n	801b134 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801b124:	697b      	ldr	r3, [r7, #20]
 801b126:	2252      	movs	r2, #82	@ 0x52
 801b128:	2100      	movs	r1, #0
 801b12a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801b12c:	697b      	ldr	r3, [r7, #20]
 801b12e:	0018      	movs	r0, r3
 801b130:	f7ff fe3a 	bl	801ada8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801b134:	697b      	ldr	r3, [r7, #20]
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	689b      	ldr	r3, [r3, #8]
 801b13a:	2240      	movs	r2, #64	@ 0x40
 801b13c:	4013      	ands	r3, r2
 801b13e:	2b40      	cmp	r3, #64	@ 0x40
 801b140:	d10a      	bne.n	801b158 <UART_DMAError+0x64>
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	2b22      	cmp	r3, #34	@ 0x22
 801b146:	d107      	bne.n	801b158 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801b148:	697b      	ldr	r3, [r7, #20]
 801b14a:	225a      	movs	r2, #90	@ 0x5a
 801b14c:	2100      	movs	r1, #0
 801b14e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801b150:	697b      	ldr	r3, [r7, #20]
 801b152:	0018      	movs	r0, r3
 801b154:	f7ff fe4c 	bl	801adf0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801b158:	697b      	ldr	r3, [r7, #20]
 801b15a:	2284      	movs	r2, #132	@ 0x84
 801b15c:	589b      	ldr	r3, [r3, r2]
 801b15e:	2210      	movs	r2, #16
 801b160:	431a      	orrs	r2, r3
 801b162:	697b      	ldr	r3, [r7, #20]
 801b164:	2184      	movs	r1, #132	@ 0x84
 801b166:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801b168:	697b      	ldr	r3, [r7, #20]
 801b16a:	2298      	movs	r2, #152	@ 0x98
 801b16c:	589b      	ldr	r3, [r3, r2]
 801b16e:	697a      	ldr	r2, [r7, #20]
 801b170:	0010      	movs	r0, r2
 801b172:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b174:	46c0      	nop			@ (mov r8, r8)
 801b176:	46bd      	mov	sp, r7
 801b178:	b006      	add	sp, #24
 801b17a:	bd80      	pop	{r7, pc}

0801b17c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801b17c:	b580      	push	{r7, lr}
 801b17e:	b084      	sub	sp, #16
 801b180:	af00      	add	r7, sp, #0
 801b182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b188:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801b18a:	68fb      	ldr	r3, [r7, #12]
 801b18c:	225a      	movs	r2, #90	@ 0x5a
 801b18e:	2100      	movs	r1, #0
 801b190:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801b192:	68fb      	ldr	r3, [r7, #12]
 801b194:	2252      	movs	r2, #82	@ 0x52
 801b196:	2100      	movs	r1, #0
 801b198:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801b19a:	68fb      	ldr	r3, [r7, #12]
 801b19c:	2298      	movs	r2, #152	@ 0x98
 801b19e:	589b      	ldr	r3, [r3, r2]
 801b1a0:	68fa      	ldr	r2, [r7, #12]
 801b1a2:	0010      	movs	r0, r2
 801b1a4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b1a6:	46c0      	nop			@ (mov r8, r8)
 801b1a8:	46bd      	mov	sp, r7
 801b1aa:	b004      	add	sp, #16
 801b1ac:	bd80      	pop	{r7, pc}

0801b1ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801b1ae:	b580      	push	{r7, lr}
 801b1b0:	b086      	sub	sp, #24
 801b1b2:	af00      	add	r7, sp, #0
 801b1b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1b6:	f3ef 8310 	mrs	r3, PRIMASK
 801b1ba:	60bb      	str	r3, [r7, #8]
  return(result);
 801b1bc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b1be:	617b      	str	r3, [r7, #20]
 801b1c0:	2301      	movs	r3, #1
 801b1c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	f383 8810 	msr	PRIMASK, r3
}
 801b1ca:	46c0      	nop			@ (mov r8, r8)
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	681a      	ldr	r2, [r3, #0]
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	2140      	movs	r1, #64	@ 0x40
 801b1d8:	438a      	bics	r2, r1
 801b1da:	601a      	str	r2, [r3, #0]
 801b1dc:	697b      	ldr	r3, [r7, #20]
 801b1de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1e0:	693b      	ldr	r3, [r7, #16]
 801b1e2:	f383 8810 	msr	PRIMASK, r3
}
 801b1e6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	2220      	movs	r2, #32
 801b1ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	2200      	movs	r2, #0
 801b1f2:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	228c      	movs	r2, #140	@ 0x8c
 801b1f8:	589b      	ldr	r3, [r3, r2]
 801b1fa:	687a      	ldr	r2, [r7, #4]
 801b1fc:	0010      	movs	r0, r2
 801b1fe:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b200:	46c0      	nop			@ (mov r8, r8)
 801b202:	46bd      	mov	sp, r7
 801b204:	b006      	add	sp, #24
 801b206:	bd80      	pop	{r7, pc}

0801b208 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801b208:	b580      	push	{r7, lr}
 801b20a:	b094      	sub	sp, #80	@ 0x50
 801b20c:	af00      	add	r7, sp, #0
 801b20e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801b210:	204e      	movs	r0, #78	@ 0x4e
 801b212:	183b      	adds	r3, r7, r0
 801b214:	687a      	ldr	r2, [r7, #4]
 801b216:	215c      	movs	r1, #92	@ 0x5c
 801b218:	5a52      	ldrh	r2, [r2, r1]
 801b21a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	2280      	movs	r2, #128	@ 0x80
 801b220:	589b      	ldr	r3, [r3, r2]
 801b222:	2b22      	cmp	r3, #34	@ 0x22
 801b224:	d000      	beq.n	801b228 <UART_RxISR_8BIT+0x20>
 801b226:	e0c2      	b.n	801b3ae <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b22e:	214c      	movs	r1, #76	@ 0x4c
 801b230:	187b      	adds	r3, r7, r1
 801b232:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801b234:	187b      	adds	r3, r7, r1
 801b236:	881b      	ldrh	r3, [r3, #0]
 801b238:	b2da      	uxtb	r2, r3
 801b23a:	183b      	adds	r3, r7, r0
 801b23c:	881b      	ldrh	r3, [r3, #0]
 801b23e:	b2d9      	uxtb	r1, r3
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b244:	400a      	ands	r2, r1
 801b246:	b2d2      	uxtb	r2, r2
 801b248:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b24e:	1c5a      	adds	r2, r3, #1
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	225a      	movs	r2, #90	@ 0x5a
 801b258:	5a9b      	ldrh	r3, [r3, r2]
 801b25a:	b29b      	uxth	r3, r3
 801b25c:	3b01      	subs	r3, #1
 801b25e:	b299      	uxth	r1, r3
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	225a      	movs	r2, #90	@ 0x5a
 801b264:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	225a      	movs	r2, #90	@ 0x5a
 801b26a:	5a9b      	ldrh	r3, [r3, r2]
 801b26c:	b29b      	uxth	r3, r3
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d000      	beq.n	801b274 <UART_RxISR_8BIT+0x6c>
 801b272:	e0a4      	b.n	801b3be <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b274:	f3ef 8310 	mrs	r3, PRIMASK
 801b278:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b27c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b27e:	2301      	movs	r3, #1
 801b280:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b284:	f383 8810 	msr	PRIMASK, r3
}
 801b288:	46c0      	nop			@ (mov r8, r8)
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	681a      	ldr	r2, [r3, #0]
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	494c      	ldr	r1, [pc, #304]	@ (801b3c8 <UART_RxISR_8BIT+0x1c0>)
 801b296:	400a      	ands	r2, r1
 801b298:	601a      	str	r2, [r3, #0]
 801b29a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b29c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2a0:	f383 8810 	msr	PRIMASK, r3
}
 801b2a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2a6:	f3ef 8310 	mrs	r3, PRIMASK
 801b2aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801b2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b2ae:	647b      	str	r3, [r7, #68]	@ 0x44
 801b2b0:	2301      	movs	r3, #1
 801b2b2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2b6:	f383 8810 	msr	PRIMASK, r3
}
 801b2ba:	46c0      	nop			@ (mov r8, r8)
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	689a      	ldr	r2, [r3, #8]
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	2101      	movs	r1, #1
 801b2c8:	438a      	bics	r2, r1
 801b2ca:	609a      	str	r2, [r3, #8]
 801b2cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b2ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2d2:	f383 8810 	msr	PRIMASK, r3
}
 801b2d6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	2280      	movs	r2, #128	@ 0x80
 801b2dc:	2120      	movs	r1, #32
 801b2de:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	2200      	movs	r2, #0
 801b2e4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	2200      	movs	r2, #0
 801b2ea:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	4a36      	ldr	r2, [pc, #216]	@ (801b3cc <UART_RxISR_8BIT+0x1c4>)
 801b2f2:	4293      	cmp	r3, r2
 801b2f4:	d01f      	beq.n	801b336 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	685a      	ldr	r2, [r3, #4]
 801b2fc:	2380      	movs	r3, #128	@ 0x80
 801b2fe:	041b      	lsls	r3, r3, #16
 801b300:	4013      	ands	r3, r2
 801b302:	d018      	beq.n	801b336 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b304:	f3ef 8310 	mrs	r3, PRIMASK
 801b308:	61bb      	str	r3, [r7, #24]
  return(result);
 801b30a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b30c:	643b      	str	r3, [r7, #64]	@ 0x40
 801b30e:	2301      	movs	r3, #1
 801b310:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b312:	69fb      	ldr	r3, [r7, #28]
 801b314:	f383 8810 	msr	PRIMASK, r3
}
 801b318:	46c0      	nop			@ (mov r8, r8)
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	681a      	ldr	r2, [r3, #0]
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	492a      	ldr	r1, [pc, #168]	@ (801b3d0 <UART_RxISR_8BIT+0x1c8>)
 801b326:	400a      	ands	r2, r1
 801b328:	601a      	str	r2, [r3, #0]
 801b32a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b32c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b32e:	6a3b      	ldr	r3, [r7, #32]
 801b330:	f383 8810 	msr	PRIMASK, r3
}
 801b334:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b33a:	2b01      	cmp	r3, #1
 801b33c:	d130      	bne.n	801b3a0 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	2200      	movs	r2, #0
 801b342:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b344:	f3ef 8310 	mrs	r3, PRIMASK
 801b348:	60fb      	str	r3, [r7, #12]
  return(result);
 801b34a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b34e:	2301      	movs	r3, #1
 801b350:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b352:	693b      	ldr	r3, [r7, #16]
 801b354:	f383 8810 	msr	PRIMASK, r3
}
 801b358:	46c0      	nop			@ (mov r8, r8)
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	681a      	ldr	r2, [r3, #0]
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	2110      	movs	r1, #16
 801b366:	438a      	bics	r2, r1
 801b368:	601a      	str	r2, [r3, #0]
 801b36a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b36c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b36e:	697b      	ldr	r3, [r7, #20]
 801b370:	f383 8810 	msr	PRIMASK, r3
}
 801b374:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	69db      	ldr	r3, [r3, #28]
 801b37c:	2210      	movs	r2, #16
 801b37e:	4013      	ands	r3, r2
 801b380:	2b10      	cmp	r3, #16
 801b382:	d103      	bne.n	801b38c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	2210      	movs	r2, #16
 801b38a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	22ac      	movs	r2, #172	@ 0xac
 801b390:	589b      	ldr	r3, [r3, r2]
 801b392:	687a      	ldr	r2, [r7, #4]
 801b394:	2158      	movs	r1, #88	@ 0x58
 801b396:	5a51      	ldrh	r1, [r2, r1]
 801b398:	687a      	ldr	r2, [r7, #4]
 801b39a:	0010      	movs	r0, r2
 801b39c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b39e:	e00e      	b.n	801b3be <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	2294      	movs	r2, #148	@ 0x94
 801b3a4:	589b      	ldr	r3, [r3, r2]
 801b3a6:	687a      	ldr	r2, [r7, #4]
 801b3a8:	0010      	movs	r0, r2
 801b3aa:	4798      	blx	r3
}
 801b3ac:	e007      	b.n	801b3be <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	699a      	ldr	r2, [r3, #24]
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	2108      	movs	r1, #8
 801b3ba:	430a      	orrs	r2, r1
 801b3bc:	619a      	str	r2, [r3, #24]
}
 801b3be:	46c0      	nop			@ (mov r8, r8)
 801b3c0:	46bd      	mov	sp, r7
 801b3c2:	b014      	add	sp, #80	@ 0x50
 801b3c4:	bd80      	pop	{r7, pc}
 801b3c6:	46c0      	nop			@ (mov r8, r8)
 801b3c8:	fffffedf 	.word	0xfffffedf
 801b3cc:	40004800 	.word	0x40004800
 801b3d0:	fbffffff 	.word	0xfbffffff

0801b3d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801b3d4:	b580      	push	{r7, lr}
 801b3d6:	b094      	sub	sp, #80	@ 0x50
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801b3dc:	204e      	movs	r0, #78	@ 0x4e
 801b3de:	183b      	adds	r3, r7, r0
 801b3e0:	687a      	ldr	r2, [r7, #4]
 801b3e2:	215c      	movs	r1, #92	@ 0x5c
 801b3e4:	5a52      	ldrh	r2, [r2, r1]
 801b3e6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	2280      	movs	r2, #128	@ 0x80
 801b3ec:	589b      	ldr	r3, [r3, r2]
 801b3ee:	2b22      	cmp	r3, #34	@ 0x22
 801b3f0:	d000      	beq.n	801b3f4 <UART_RxISR_16BIT+0x20>
 801b3f2:	e0c2      	b.n	801b57a <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b3fa:	214c      	movs	r1, #76	@ 0x4c
 801b3fc:	187b      	adds	r3, r7, r1
 801b3fe:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b404:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801b406:	187b      	adds	r3, r7, r1
 801b408:	183a      	adds	r2, r7, r0
 801b40a:	881b      	ldrh	r3, [r3, #0]
 801b40c:	8812      	ldrh	r2, [r2, #0]
 801b40e:	4013      	ands	r3, r2
 801b410:	b29a      	uxth	r2, r3
 801b412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b414:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b41a:	1c9a      	adds	r2, r3, #2
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	225a      	movs	r2, #90	@ 0x5a
 801b424:	5a9b      	ldrh	r3, [r3, r2]
 801b426:	b29b      	uxth	r3, r3
 801b428:	3b01      	subs	r3, #1
 801b42a:	b299      	uxth	r1, r3
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	225a      	movs	r2, #90	@ 0x5a
 801b430:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	225a      	movs	r2, #90	@ 0x5a
 801b436:	5a9b      	ldrh	r3, [r3, r2]
 801b438:	b29b      	uxth	r3, r3
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d000      	beq.n	801b440 <UART_RxISR_16BIT+0x6c>
 801b43e:	e0a4      	b.n	801b58a <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b440:	f3ef 8310 	mrs	r3, PRIMASK
 801b444:	623b      	str	r3, [r7, #32]
  return(result);
 801b446:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b448:	647b      	str	r3, [r7, #68]	@ 0x44
 801b44a:	2301      	movs	r3, #1
 801b44c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b450:	f383 8810 	msr	PRIMASK, r3
}
 801b454:	46c0      	nop			@ (mov r8, r8)
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	681a      	ldr	r2, [r3, #0]
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	681b      	ldr	r3, [r3, #0]
 801b460:	494c      	ldr	r1, [pc, #304]	@ (801b594 <UART_RxISR_16BIT+0x1c0>)
 801b462:	400a      	ands	r2, r1
 801b464:	601a      	str	r2, [r3, #0]
 801b466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b468:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b46c:	f383 8810 	msr	PRIMASK, r3
}
 801b470:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b472:	f3ef 8310 	mrs	r3, PRIMASK
 801b476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801b478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b47a:	643b      	str	r3, [r7, #64]	@ 0x40
 801b47c:	2301      	movs	r3, #1
 801b47e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b482:	f383 8810 	msr	PRIMASK, r3
}
 801b486:	46c0      	nop			@ (mov r8, r8)
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	689a      	ldr	r2, [r3, #8]
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	681b      	ldr	r3, [r3, #0]
 801b492:	2101      	movs	r1, #1
 801b494:	438a      	bics	r2, r1
 801b496:	609a      	str	r2, [r3, #8]
 801b498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b49a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b49c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b49e:	f383 8810 	msr	PRIMASK, r3
}
 801b4a2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	2280      	movs	r2, #128	@ 0x80
 801b4a8:	2120      	movs	r1, #32
 801b4aa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	2200      	movs	r2, #0
 801b4b0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	2200      	movs	r2, #0
 801b4b6:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	4a36      	ldr	r2, [pc, #216]	@ (801b598 <UART_RxISR_16BIT+0x1c4>)
 801b4be:	4293      	cmp	r3, r2
 801b4c0:	d01f      	beq.n	801b502 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	685a      	ldr	r2, [r3, #4]
 801b4c8:	2380      	movs	r3, #128	@ 0x80
 801b4ca:	041b      	lsls	r3, r3, #16
 801b4cc:	4013      	ands	r3, r2
 801b4ce:	d018      	beq.n	801b502 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b4d0:	f3ef 8310 	mrs	r3, PRIMASK
 801b4d4:	617b      	str	r3, [r7, #20]
  return(result);
 801b4d6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b4d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b4da:	2301      	movs	r3, #1
 801b4dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4de:	69bb      	ldr	r3, [r7, #24]
 801b4e0:	f383 8810 	msr	PRIMASK, r3
}
 801b4e4:	46c0      	nop			@ (mov r8, r8)
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	681a      	ldr	r2, [r3, #0]
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	492a      	ldr	r1, [pc, #168]	@ (801b59c <UART_RxISR_16BIT+0x1c8>)
 801b4f2:	400a      	ands	r2, r1
 801b4f4:	601a      	str	r2, [r3, #0]
 801b4f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b4f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4fa:	69fb      	ldr	r3, [r7, #28]
 801b4fc:	f383 8810 	msr	PRIMASK, r3
}
 801b500:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b506:	2b01      	cmp	r3, #1
 801b508:	d130      	bne.n	801b56c <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	2200      	movs	r2, #0
 801b50e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b510:	f3ef 8310 	mrs	r3, PRIMASK
 801b514:	60bb      	str	r3, [r7, #8]
  return(result);
 801b516:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b518:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b51a:	2301      	movs	r3, #1
 801b51c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b51e:	68fb      	ldr	r3, [r7, #12]
 801b520:	f383 8810 	msr	PRIMASK, r3
}
 801b524:	46c0      	nop			@ (mov r8, r8)
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	681b      	ldr	r3, [r3, #0]
 801b52a:	681a      	ldr	r2, [r3, #0]
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	2110      	movs	r1, #16
 801b532:	438a      	bics	r2, r1
 801b534:	601a      	str	r2, [r3, #0]
 801b536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b538:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b53a:	693b      	ldr	r3, [r7, #16]
 801b53c:	f383 8810 	msr	PRIMASK, r3
}
 801b540:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	681b      	ldr	r3, [r3, #0]
 801b546:	69db      	ldr	r3, [r3, #28]
 801b548:	2210      	movs	r2, #16
 801b54a:	4013      	ands	r3, r2
 801b54c:	2b10      	cmp	r3, #16
 801b54e:	d103      	bne.n	801b558 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	2210      	movs	r2, #16
 801b556:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	22ac      	movs	r2, #172	@ 0xac
 801b55c:	589b      	ldr	r3, [r3, r2]
 801b55e:	687a      	ldr	r2, [r7, #4]
 801b560:	2158      	movs	r1, #88	@ 0x58
 801b562:	5a51      	ldrh	r1, [r2, r1]
 801b564:	687a      	ldr	r2, [r7, #4]
 801b566:	0010      	movs	r0, r2
 801b568:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b56a:	e00e      	b.n	801b58a <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	2294      	movs	r2, #148	@ 0x94
 801b570:	589b      	ldr	r3, [r3, r2]
 801b572:	687a      	ldr	r2, [r7, #4]
 801b574:	0010      	movs	r0, r2
 801b576:	4798      	blx	r3
}
 801b578:	e007      	b.n	801b58a <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	699a      	ldr	r2, [r3, #24]
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	2108      	movs	r1, #8
 801b586:	430a      	orrs	r2, r1
 801b588:	619a      	str	r2, [r3, #24]
}
 801b58a:	46c0      	nop			@ (mov r8, r8)
 801b58c:	46bd      	mov	sp, r7
 801b58e:	b014      	add	sp, #80	@ 0x50
 801b590:	bd80      	pop	{r7, pc}
 801b592:	46c0      	nop			@ (mov r8, r8)
 801b594:	fffffedf 	.word	0xfffffedf
 801b598:	40004800 	.word	0x40004800
 801b59c:	fbffffff 	.word	0xfbffffff

0801b5a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801b5a0:	b580      	push	{r7, lr}
 801b5a2:	b082      	sub	sp, #8
 801b5a4:	af00      	add	r7, sp, #0
 801b5a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801b5a8:	46c0      	nop			@ (mov r8, r8)
 801b5aa:	46bd      	mov	sp, r7
 801b5ac:	b002      	add	sp, #8
 801b5ae:	bd80      	pop	{r7, pc}

0801b5b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801b5b0:	b580      	push	{r7, lr}
 801b5b2:	b084      	sub	sp, #16
 801b5b4:	af00      	add	r7, sp, #0
 801b5b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	2244      	movs	r2, #68	@ 0x44
 801b5bc:	2100      	movs	r1, #0
 801b5be:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801b5c0:	4b05      	ldr	r3, [pc, #20]	@ (801b5d8 <USB_EnableGlobalInt+0x28>)
 801b5c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	b299      	uxth	r1, r3
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	2240      	movs	r2, #64	@ 0x40
 801b5cc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b5ce:	2300      	movs	r3, #0
}
 801b5d0:	0018      	movs	r0, r3
 801b5d2:	46bd      	mov	sp, r7
 801b5d4:	b004      	add	sp, #16
 801b5d6:	bd80      	pop	{r7, pc}
 801b5d8:	0000bf80 	.word	0x0000bf80

0801b5dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801b5dc:	b580      	push	{r7, lr}
 801b5de:	b084      	sub	sp, #16
 801b5e0:	af00      	add	r7, sp, #0
 801b5e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801b5e4:	4b09      	ldr	r3, [pc, #36]	@ (801b60c <USB_DisableGlobalInt+0x30>)
 801b5e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	2240      	movs	r2, #64	@ 0x40
 801b5ec:	5a9b      	ldrh	r3, [r3, r2]
 801b5ee:	b29b      	uxth	r3, r3
 801b5f0:	68fa      	ldr	r2, [r7, #12]
 801b5f2:	b292      	uxth	r2, r2
 801b5f4:	43d2      	mvns	r2, r2
 801b5f6:	b292      	uxth	r2, r2
 801b5f8:	4013      	ands	r3, r2
 801b5fa:	b299      	uxth	r1, r3
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	2240      	movs	r2, #64	@ 0x40
 801b600:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b602:	2300      	movs	r3, #0
}
 801b604:	0018      	movs	r0, r3
 801b606:	46bd      	mov	sp, r7
 801b608:	b004      	add	sp, #16
 801b60a:	bd80      	pop	{r7, pc}
 801b60c:	0000bf80 	.word	0x0000bf80

0801b610 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801b610:	b084      	sub	sp, #16
 801b612:	b590      	push	{r4, r7, lr}
 801b614:	b083      	sub	sp, #12
 801b616:	af00      	add	r7, sp, #0
 801b618:	6078      	str	r0, [r7, #4]
 801b61a:	2004      	movs	r0, #4
 801b61c:	2410      	movs	r4, #16
 801b61e:	1900      	adds	r0, r0, r4
 801b620:	2408      	movs	r4, #8
 801b622:	46a4      	mov	ip, r4
 801b624:	44bc      	add	ip, r7
 801b626:	4460      	add	r0, ip
 801b628:	6001      	str	r1, [r0, #0]
 801b62a:	6042      	str	r2, [r0, #4]
 801b62c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	2240      	movs	r2, #64	@ 0x40
 801b632:	2101      	movs	r1, #1
 801b634:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	2240      	movs	r2, #64	@ 0x40
 801b63a:	2100      	movs	r1, #0
 801b63c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	2244      	movs	r2, #68	@ 0x44
 801b642:	2100      	movs	r1, #0
 801b644:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	2250      	movs	r2, #80	@ 0x50
 801b64a:	2100      	movs	r1, #0
 801b64c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b64e:	2300      	movs	r3, #0
}
 801b650:	0018      	movs	r0, r3
 801b652:	46bd      	mov	sp, r7
 801b654:	b003      	add	sp, #12
 801b656:	bc90      	pop	{r4, r7}
 801b658:	bc08      	pop	{r3}
 801b65a:	b004      	add	sp, #16
 801b65c:	4718      	bx	r3
	...

0801b660 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801b660:	b580      	push	{r7, lr}
 801b662:	b09c      	sub	sp, #112	@ 0x70
 801b664:	af00      	add	r7, sp, #0
 801b666:	6078      	str	r0, [r7, #4]
 801b668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801b66a:	236f      	movs	r3, #111	@ 0x6f
 801b66c:	18fb      	adds	r3, r7, r3
 801b66e:	2200      	movs	r2, #0
 801b670:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801b672:	687a      	ldr	r2, [r7, #4]
 801b674:	683b      	ldr	r3, [r7, #0]
 801b676:	781b      	ldrb	r3, [r3, #0]
 801b678:	009b      	lsls	r3, r3, #2
 801b67a:	18d3      	adds	r3, r2, r3
 801b67c:	881b      	ldrh	r3, [r3, #0]
 801b67e:	b29a      	uxth	r2, r3
 801b680:	236c      	movs	r3, #108	@ 0x6c
 801b682:	18fb      	adds	r3, r7, r3
 801b684:	49a3      	ldr	r1, [pc, #652]	@ (801b914 <USB_ActivateEndpoint+0x2b4>)
 801b686:	400a      	ands	r2, r1
 801b688:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801b68a:	683b      	ldr	r3, [r7, #0]
 801b68c:	78db      	ldrb	r3, [r3, #3]
 801b68e:	2b03      	cmp	r3, #3
 801b690:	d017      	beq.n	801b6c2 <USB_ActivateEndpoint+0x62>
 801b692:	dc28      	bgt.n	801b6e6 <USB_ActivateEndpoint+0x86>
 801b694:	2b02      	cmp	r3, #2
 801b696:	d00e      	beq.n	801b6b6 <USB_ActivateEndpoint+0x56>
 801b698:	dc25      	bgt.n	801b6e6 <USB_ActivateEndpoint+0x86>
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d002      	beq.n	801b6a4 <USB_ActivateEndpoint+0x44>
 801b69e:	2b01      	cmp	r3, #1
 801b6a0:	d018      	beq.n	801b6d4 <USB_ActivateEndpoint+0x74>
 801b6a2:	e020      	b.n	801b6e6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801b6a4:	226c      	movs	r2, #108	@ 0x6c
 801b6a6:	18bb      	adds	r3, r7, r2
 801b6a8:	18ba      	adds	r2, r7, r2
 801b6aa:	8812      	ldrh	r2, [r2, #0]
 801b6ac:	2180      	movs	r1, #128	@ 0x80
 801b6ae:	0089      	lsls	r1, r1, #2
 801b6b0:	430a      	orrs	r2, r1
 801b6b2:	801a      	strh	r2, [r3, #0]
      break;
 801b6b4:	e01c      	b.n	801b6f0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801b6b6:	226c      	movs	r2, #108	@ 0x6c
 801b6b8:	18bb      	adds	r3, r7, r2
 801b6ba:	18ba      	adds	r2, r7, r2
 801b6bc:	8812      	ldrh	r2, [r2, #0]
 801b6be:	801a      	strh	r2, [r3, #0]
      break;
 801b6c0:	e016      	b.n	801b6f0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801b6c2:	226c      	movs	r2, #108	@ 0x6c
 801b6c4:	18bb      	adds	r3, r7, r2
 801b6c6:	18ba      	adds	r2, r7, r2
 801b6c8:	8812      	ldrh	r2, [r2, #0]
 801b6ca:	21c0      	movs	r1, #192	@ 0xc0
 801b6cc:	00c9      	lsls	r1, r1, #3
 801b6ce:	430a      	orrs	r2, r1
 801b6d0:	801a      	strh	r2, [r3, #0]
      break;
 801b6d2:	e00d      	b.n	801b6f0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801b6d4:	226c      	movs	r2, #108	@ 0x6c
 801b6d6:	18bb      	adds	r3, r7, r2
 801b6d8:	18ba      	adds	r2, r7, r2
 801b6da:	8812      	ldrh	r2, [r2, #0]
 801b6dc:	2180      	movs	r1, #128	@ 0x80
 801b6de:	00c9      	lsls	r1, r1, #3
 801b6e0:	430a      	orrs	r2, r1
 801b6e2:	801a      	strh	r2, [r3, #0]
      break;
 801b6e4:	e004      	b.n	801b6f0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801b6e6:	236f      	movs	r3, #111	@ 0x6f
 801b6e8:	18fb      	adds	r3, r7, r3
 801b6ea:	2201      	movs	r2, #1
 801b6ec:	701a      	strb	r2, [r3, #0]
      break;
 801b6ee:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801b6f0:	687a      	ldr	r2, [r7, #4]
 801b6f2:	683b      	ldr	r3, [r7, #0]
 801b6f4:	781b      	ldrb	r3, [r3, #0]
 801b6f6:	009b      	lsls	r3, r3, #2
 801b6f8:	18d3      	adds	r3, r2, r3
 801b6fa:	226c      	movs	r2, #108	@ 0x6c
 801b6fc:	18ba      	adds	r2, r7, r2
 801b6fe:	8812      	ldrh	r2, [r2, #0]
 801b700:	4985      	ldr	r1, [pc, #532]	@ (801b918 <USB_ActivateEndpoint+0x2b8>)
 801b702:	430a      	orrs	r2, r1
 801b704:	b292      	uxth	r2, r2
 801b706:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801b708:	687a      	ldr	r2, [r7, #4]
 801b70a:	683b      	ldr	r3, [r7, #0]
 801b70c:	781b      	ldrb	r3, [r3, #0]
 801b70e:	009b      	lsls	r3, r3, #2
 801b710:	18d3      	adds	r3, r2, r3
 801b712:	881b      	ldrh	r3, [r3, #0]
 801b714:	b29b      	uxth	r3, r3
 801b716:	b21b      	sxth	r3, r3
 801b718:	4a80      	ldr	r2, [pc, #512]	@ (801b91c <USB_ActivateEndpoint+0x2bc>)
 801b71a:	4013      	ands	r3, r2
 801b71c:	b21a      	sxth	r2, r3
 801b71e:	683b      	ldr	r3, [r7, #0]
 801b720:	781b      	ldrb	r3, [r3, #0]
 801b722:	b21b      	sxth	r3, r3
 801b724:	4313      	orrs	r3, r2
 801b726:	b21a      	sxth	r2, r3
 801b728:	2166      	movs	r1, #102	@ 0x66
 801b72a:	187b      	adds	r3, r7, r1
 801b72c:	801a      	strh	r2, [r3, #0]
 801b72e:	687a      	ldr	r2, [r7, #4]
 801b730:	683b      	ldr	r3, [r7, #0]
 801b732:	781b      	ldrb	r3, [r3, #0]
 801b734:	009b      	lsls	r3, r3, #2
 801b736:	18d3      	adds	r3, r2, r3
 801b738:	187a      	adds	r2, r7, r1
 801b73a:	8812      	ldrh	r2, [r2, #0]
 801b73c:	4976      	ldr	r1, [pc, #472]	@ (801b918 <USB_ActivateEndpoint+0x2b8>)
 801b73e:	430a      	orrs	r2, r1
 801b740:	b292      	uxth	r2, r2
 801b742:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801b744:	683b      	ldr	r3, [r7, #0]
 801b746:	7b1b      	ldrb	r3, [r3, #12]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d000      	beq.n	801b74e <USB_ActivateEndpoint+0xee>
 801b74c:	e178      	b.n	801ba40 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801b74e:	683b      	ldr	r3, [r7, #0]
 801b750:	785b      	ldrb	r3, [r3, #1]
 801b752:	2b00      	cmp	r3, #0
 801b754:	d100      	bne.n	801b758 <USB_ActivateEndpoint+0xf8>
 801b756:	e07a      	b.n	801b84e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	61bb      	str	r3, [r7, #24]
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	2250      	movs	r2, #80	@ 0x50
 801b760:	5a9b      	ldrh	r3, [r3, r2]
 801b762:	b29b      	uxth	r3, r3
 801b764:	001a      	movs	r2, r3
 801b766:	69bb      	ldr	r3, [r7, #24]
 801b768:	189b      	adds	r3, r3, r2
 801b76a:	61bb      	str	r3, [r7, #24]
 801b76c:	683b      	ldr	r3, [r7, #0]
 801b76e:	781b      	ldrb	r3, [r3, #0]
 801b770:	00da      	lsls	r2, r3, #3
 801b772:	69bb      	ldr	r3, [r7, #24]
 801b774:	18d3      	adds	r3, r2, r3
 801b776:	2280      	movs	r2, #128	@ 0x80
 801b778:	00d2      	lsls	r2, r2, #3
 801b77a:	4694      	mov	ip, r2
 801b77c:	4463      	add	r3, ip
 801b77e:	617b      	str	r3, [r7, #20]
 801b780:	683b      	ldr	r3, [r7, #0]
 801b782:	88db      	ldrh	r3, [r3, #6]
 801b784:	085b      	lsrs	r3, r3, #1
 801b786:	b29b      	uxth	r3, r3
 801b788:	18db      	adds	r3, r3, r3
 801b78a:	b29a      	uxth	r2, r3
 801b78c:	697b      	ldr	r3, [r7, #20]
 801b78e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801b790:	687a      	ldr	r2, [r7, #4]
 801b792:	683b      	ldr	r3, [r7, #0]
 801b794:	781b      	ldrb	r3, [r3, #0]
 801b796:	009b      	lsls	r3, r3, #2
 801b798:	18d2      	adds	r2, r2, r3
 801b79a:	2112      	movs	r1, #18
 801b79c:	187b      	adds	r3, r7, r1
 801b79e:	8812      	ldrh	r2, [r2, #0]
 801b7a0:	801a      	strh	r2, [r3, #0]
 801b7a2:	187b      	adds	r3, r7, r1
 801b7a4:	881b      	ldrh	r3, [r3, #0]
 801b7a6:	2240      	movs	r2, #64	@ 0x40
 801b7a8:	4013      	ands	r3, r2
 801b7aa:	d016      	beq.n	801b7da <USB_ActivateEndpoint+0x17a>
 801b7ac:	687a      	ldr	r2, [r7, #4]
 801b7ae:	683b      	ldr	r3, [r7, #0]
 801b7b0:	781b      	ldrb	r3, [r3, #0]
 801b7b2:	009b      	lsls	r3, r3, #2
 801b7b4:	18d3      	adds	r3, r2, r3
 801b7b6:	881b      	ldrh	r3, [r3, #0]
 801b7b8:	b29a      	uxth	r2, r3
 801b7ba:	2010      	movs	r0, #16
 801b7bc:	183b      	adds	r3, r7, r0
 801b7be:	4957      	ldr	r1, [pc, #348]	@ (801b91c <USB_ActivateEndpoint+0x2bc>)
 801b7c0:	400a      	ands	r2, r1
 801b7c2:	801a      	strh	r2, [r3, #0]
 801b7c4:	687a      	ldr	r2, [r7, #4]
 801b7c6:	683b      	ldr	r3, [r7, #0]
 801b7c8:	781b      	ldrb	r3, [r3, #0]
 801b7ca:	009b      	lsls	r3, r3, #2
 801b7cc:	18d3      	adds	r3, r2, r3
 801b7ce:	183a      	adds	r2, r7, r0
 801b7d0:	8812      	ldrh	r2, [r2, #0]
 801b7d2:	4953      	ldr	r1, [pc, #332]	@ (801b920 <USB_ActivateEndpoint+0x2c0>)
 801b7d4:	430a      	orrs	r2, r1
 801b7d6:	b292      	uxth	r2, r2
 801b7d8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801b7da:	683b      	ldr	r3, [r7, #0]
 801b7dc:	78db      	ldrb	r3, [r3, #3]
 801b7de:	2b01      	cmp	r3, #1
 801b7e0:	d01d      	beq.n	801b81e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801b7e2:	687a      	ldr	r2, [r7, #4]
 801b7e4:	683b      	ldr	r3, [r7, #0]
 801b7e6:	781b      	ldrb	r3, [r3, #0]
 801b7e8:	009b      	lsls	r3, r3, #2
 801b7ea:	18d3      	adds	r3, r2, r3
 801b7ec:	881b      	ldrh	r3, [r3, #0]
 801b7ee:	b29a      	uxth	r2, r3
 801b7f0:	200c      	movs	r0, #12
 801b7f2:	183b      	adds	r3, r7, r0
 801b7f4:	494b      	ldr	r1, [pc, #300]	@ (801b924 <USB_ActivateEndpoint+0x2c4>)
 801b7f6:	400a      	ands	r2, r1
 801b7f8:	801a      	strh	r2, [r3, #0]
 801b7fa:	183b      	adds	r3, r7, r0
 801b7fc:	183a      	adds	r2, r7, r0
 801b7fe:	8812      	ldrh	r2, [r2, #0]
 801b800:	2120      	movs	r1, #32
 801b802:	404a      	eors	r2, r1
 801b804:	801a      	strh	r2, [r3, #0]
 801b806:	687a      	ldr	r2, [r7, #4]
 801b808:	683b      	ldr	r3, [r7, #0]
 801b80a:	781b      	ldrb	r3, [r3, #0]
 801b80c:	009b      	lsls	r3, r3, #2
 801b80e:	18d3      	adds	r3, r2, r3
 801b810:	183a      	adds	r2, r7, r0
 801b812:	8812      	ldrh	r2, [r2, #0]
 801b814:	4940      	ldr	r1, [pc, #256]	@ (801b918 <USB_ActivateEndpoint+0x2b8>)
 801b816:	430a      	orrs	r2, r1
 801b818:	b292      	uxth	r2, r2
 801b81a:	801a      	strh	r2, [r3, #0]
 801b81c:	e2b4      	b.n	801bd88 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801b81e:	687a      	ldr	r2, [r7, #4]
 801b820:	683b      	ldr	r3, [r7, #0]
 801b822:	781b      	ldrb	r3, [r3, #0]
 801b824:	009b      	lsls	r3, r3, #2
 801b826:	18d3      	adds	r3, r2, r3
 801b828:	881b      	ldrh	r3, [r3, #0]
 801b82a:	b29a      	uxth	r2, r3
 801b82c:	200e      	movs	r0, #14
 801b82e:	183b      	adds	r3, r7, r0
 801b830:	493c      	ldr	r1, [pc, #240]	@ (801b924 <USB_ActivateEndpoint+0x2c4>)
 801b832:	400a      	ands	r2, r1
 801b834:	801a      	strh	r2, [r3, #0]
 801b836:	687a      	ldr	r2, [r7, #4]
 801b838:	683b      	ldr	r3, [r7, #0]
 801b83a:	781b      	ldrb	r3, [r3, #0]
 801b83c:	009b      	lsls	r3, r3, #2
 801b83e:	18d3      	adds	r3, r2, r3
 801b840:	183a      	adds	r2, r7, r0
 801b842:	8812      	ldrh	r2, [r2, #0]
 801b844:	4934      	ldr	r1, [pc, #208]	@ (801b918 <USB_ActivateEndpoint+0x2b8>)
 801b846:	430a      	orrs	r2, r1
 801b848:	b292      	uxth	r2, r2
 801b84a:	801a      	strh	r2, [r3, #0]
 801b84c:	e29c      	b.n	801bd88 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	633b      	str	r3, [r7, #48]	@ 0x30
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	2250      	movs	r2, #80	@ 0x50
 801b856:	5a9b      	ldrh	r3, [r3, r2]
 801b858:	b29b      	uxth	r3, r3
 801b85a:	001a      	movs	r2, r3
 801b85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b85e:	189b      	adds	r3, r3, r2
 801b860:	633b      	str	r3, [r7, #48]	@ 0x30
 801b862:	683b      	ldr	r3, [r7, #0]
 801b864:	781b      	ldrb	r3, [r3, #0]
 801b866:	00da      	lsls	r2, r3, #3
 801b868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b86a:	18d3      	adds	r3, r2, r3
 801b86c:	4a2e      	ldr	r2, [pc, #184]	@ (801b928 <USB_ActivateEndpoint+0x2c8>)
 801b86e:	4694      	mov	ip, r2
 801b870:	4463      	add	r3, ip
 801b872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b874:	683b      	ldr	r3, [r7, #0]
 801b876:	88db      	ldrh	r3, [r3, #6]
 801b878:	085b      	lsrs	r3, r3, #1
 801b87a:	b29b      	uxth	r3, r3
 801b87c:	18db      	adds	r3, r3, r3
 801b87e:	b29a      	uxth	r2, r3
 801b880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b882:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	2250      	movs	r2, #80	@ 0x50
 801b88c:	5a9b      	ldrh	r3, [r3, r2]
 801b88e:	b29b      	uxth	r3, r3
 801b890:	001a      	movs	r2, r3
 801b892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b894:	189b      	adds	r3, r3, r2
 801b896:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b898:	683b      	ldr	r3, [r7, #0]
 801b89a:	781b      	ldrb	r3, [r3, #0]
 801b89c:	00da      	lsls	r2, r3, #3
 801b89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8a0:	18d3      	adds	r3, r2, r3
 801b8a2:	4a22      	ldr	r2, [pc, #136]	@ (801b92c <USB_ActivateEndpoint+0x2cc>)
 801b8a4:	4694      	mov	ip, r2
 801b8a6:	4463      	add	r3, ip
 801b8a8:	627b      	str	r3, [r7, #36]	@ 0x24
 801b8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8ac:	881b      	ldrh	r3, [r3, #0]
 801b8ae:	b29b      	uxth	r3, r3
 801b8b0:	059b      	lsls	r3, r3, #22
 801b8b2:	0d9b      	lsrs	r3, r3, #22
 801b8b4:	b29a      	uxth	r2, r3
 801b8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8b8:	801a      	strh	r2, [r3, #0]
 801b8ba:	683b      	ldr	r3, [r7, #0]
 801b8bc:	691b      	ldr	r3, [r3, #16]
 801b8be:	2b3e      	cmp	r3, #62	@ 0x3e
 801b8c0:	d91a      	bls.n	801b8f8 <USB_ActivateEndpoint+0x298>
 801b8c2:	683b      	ldr	r3, [r7, #0]
 801b8c4:	691b      	ldr	r3, [r3, #16]
 801b8c6:	095b      	lsrs	r3, r3, #5
 801b8c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b8ca:	683b      	ldr	r3, [r7, #0]
 801b8cc:	691b      	ldr	r3, [r3, #16]
 801b8ce:	221f      	movs	r2, #31
 801b8d0:	4013      	ands	r3, r2
 801b8d2:	d102      	bne.n	801b8da <USB_ActivateEndpoint+0x27a>
 801b8d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b8d6:	3b01      	subs	r3, #1
 801b8d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8dc:	881b      	ldrh	r3, [r3, #0]
 801b8de:	b29a      	uxth	r2, r3
 801b8e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b8e2:	b29b      	uxth	r3, r3
 801b8e4:	029b      	lsls	r3, r3, #10
 801b8e6:	b29b      	uxth	r3, r3
 801b8e8:	4313      	orrs	r3, r2
 801b8ea:	b29b      	uxth	r3, r3
 801b8ec:	4a10      	ldr	r2, [pc, #64]	@ (801b930 <USB_ActivateEndpoint+0x2d0>)
 801b8ee:	4313      	orrs	r3, r2
 801b8f0:	b29a      	uxth	r2, r3
 801b8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8f4:	801a      	strh	r2, [r3, #0]
 801b8f6:	e034      	b.n	801b962 <USB_ActivateEndpoint+0x302>
 801b8f8:	683b      	ldr	r3, [r7, #0]
 801b8fa:	691b      	ldr	r3, [r3, #16]
 801b8fc:	2b00      	cmp	r3, #0
 801b8fe:	d119      	bne.n	801b934 <USB_ActivateEndpoint+0x2d4>
 801b900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b902:	881b      	ldrh	r3, [r3, #0]
 801b904:	b29b      	uxth	r3, r3
 801b906:	4a0a      	ldr	r2, [pc, #40]	@ (801b930 <USB_ActivateEndpoint+0x2d0>)
 801b908:	4313      	orrs	r3, r2
 801b90a:	b29a      	uxth	r2, r3
 801b90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b90e:	801a      	strh	r2, [r3, #0]
 801b910:	e027      	b.n	801b962 <USB_ActivateEndpoint+0x302>
 801b912:	46c0      	nop			@ (mov r8, r8)
 801b914:	ffff898f 	.word	0xffff898f
 801b918:	ffff8080 	.word	0xffff8080
 801b91c:	ffff8f8f 	.word	0xffff8f8f
 801b920:	ffff80c0 	.word	0xffff80c0
 801b924:	ffff8fbf 	.word	0xffff8fbf
 801b928:	00000404 	.word	0x00000404
 801b92c:	00000406 	.word	0x00000406
 801b930:	ffff8000 	.word	0xffff8000
 801b934:	683b      	ldr	r3, [r7, #0]
 801b936:	691b      	ldr	r3, [r3, #16]
 801b938:	085b      	lsrs	r3, r3, #1
 801b93a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b93c:	683b      	ldr	r3, [r7, #0]
 801b93e:	691b      	ldr	r3, [r3, #16]
 801b940:	2201      	movs	r2, #1
 801b942:	4013      	ands	r3, r2
 801b944:	d002      	beq.n	801b94c <USB_ActivateEndpoint+0x2ec>
 801b946:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b948:	3301      	adds	r3, #1
 801b94a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b94e:	881b      	ldrh	r3, [r3, #0]
 801b950:	b29a      	uxth	r2, r3
 801b952:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b954:	b29b      	uxth	r3, r3
 801b956:	029b      	lsls	r3, r3, #10
 801b958:	b29b      	uxth	r3, r3
 801b95a:	4313      	orrs	r3, r2
 801b95c:	b29a      	uxth	r2, r3
 801b95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b960:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801b962:	687a      	ldr	r2, [r7, #4]
 801b964:	683b      	ldr	r3, [r7, #0]
 801b966:	781b      	ldrb	r3, [r3, #0]
 801b968:	009b      	lsls	r3, r3, #2
 801b96a:	18d2      	adds	r2, r2, r3
 801b96c:	2122      	movs	r1, #34	@ 0x22
 801b96e:	187b      	adds	r3, r7, r1
 801b970:	8812      	ldrh	r2, [r2, #0]
 801b972:	801a      	strh	r2, [r3, #0]
 801b974:	187b      	adds	r3, r7, r1
 801b976:	881a      	ldrh	r2, [r3, #0]
 801b978:	2380      	movs	r3, #128	@ 0x80
 801b97a:	01db      	lsls	r3, r3, #7
 801b97c:	4013      	ands	r3, r2
 801b97e:	d016      	beq.n	801b9ae <USB_ActivateEndpoint+0x34e>
 801b980:	687a      	ldr	r2, [r7, #4]
 801b982:	683b      	ldr	r3, [r7, #0]
 801b984:	781b      	ldrb	r3, [r3, #0]
 801b986:	009b      	lsls	r3, r3, #2
 801b988:	18d3      	adds	r3, r2, r3
 801b98a:	881b      	ldrh	r3, [r3, #0]
 801b98c:	b29a      	uxth	r2, r3
 801b98e:	2020      	movs	r0, #32
 801b990:	183b      	adds	r3, r7, r0
 801b992:	49dd      	ldr	r1, [pc, #884]	@ (801bd08 <USB_ActivateEndpoint+0x6a8>)
 801b994:	400a      	ands	r2, r1
 801b996:	801a      	strh	r2, [r3, #0]
 801b998:	687a      	ldr	r2, [r7, #4]
 801b99a:	683b      	ldr	r3, [r7, #0]
 801b99c:	781b      	ldrb	r3, [r3, #0]
 801b99e:	009b      	lsls	r3, r3, #2
 801b9a0:	18d3      	adds	r3, r2, r3
 801b9a2:	183a      	adds	r2, r7, r0
 801b9a4:	8812      	ldrh	r2, [r2, #0]
 801b9a6:	49d9      	ldr	r1, [pc, #868]	@ (801bd0c <USB_ActivateEndpoint+0x6ac>)
 801b9a8:	430a      	orrs	r2, r1
 801b9aa:	b292      	uxth	r2, r2
 801b9ac:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801b9ae:	683b      	ldr	r3, [r7, #0]
 801b9b0:	781b      	ldrb	r3, [r3, #0]
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d125      	bne.n	801ba02 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801b9b6:	687a      	ldr	r2, [r7, #4]
 801b9b8:	683b      	ldr	r3, [r7, #0]
 801b9ba:	781b      	ldrb	r3, [r3, #0]
 801b9bc:	009b      	lsls	r3, r3, #2
 801b9be:	18d3      	adds	r3, r2, r3
 801b9c0:	881b      	ldrh	r3, [r3, #0]
 801b9c2:	b29a      	uxth	r2, r3
 801b9c4:	201c      	movs	r0, #28
 801b9c6:	183b      	adds	r3, r7, r0
 801b9c8:	49d1      	ldr	r1, [pc, #836]	@ (801bd10 <USB_ActivateEndpoint+0x6b0>)
 801b9ca:	400a      	ands	r2, r1
 801b9cc:	801a      	strh	r2, [r3, #0]
 801b9ce:	183b      	adds	r3, r7, r0
 801b9d0:	183a      	adds	r2, r7, r0
 801b9d2:	8812      	ldrh	r2, [r2, #0]
 801b9d4:	2180      	movs	r1, #128	@ 0x80
 801b9d6:	0149      	lsls	r1, r1, #5
 801b9d8:	404a      	eors	r2, r1
 801b9da:	801a      	strh	r2, [r3, #0]
 801b9dc:	183b      	adds	r3, r7, r0
 801b9de:	183a      	adds	r2, r7, r0
 801b9e0:	8812      	ldrh	r2, [r2, #0]
 801b9e2:	2180      	movs	r1, #128	@ 0x80
 801b9e4:	0189      	lsls	r1, r1, #6
 801b9e6:	404a      	eors	r2, r1
 801b9e8:	801a      	strh	r2, [r3, #0]
 801b9ea:	687a      	ldr	r2, [r7, #4]
 801b9ec:	683b      	ldr	r3, [r7, #0]
 801b9ee:	781b      	ldrb	r3, [r3, #0]
 801b9f0:	009b      	lsls	r3, r3, #2
 801b9f2:	18d3      	adds	r3, r2, r3
 801b9f4:	183a      	adds	r2, r7, r0
 801b9f6:	8812      	ldrh	r2, [r2, #0]
 801b9f8:	49c6      	ldr	r1, [pc, #792]	@ (801bd14 <USB_ActivateEndpoint+0x6b4>)
 801b9fa:	430a      	orrs	r2, r1
 801b9fc:	b292      	uxth	r2, r2
 801b9fe:	801a      	strh	r2, [r3, #0]
 801ba00:	e1c2      	b.n	801bd88 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801ba02:	687a      	ldr	r2, [r7, #4]
 801ba04:	683b      	ldr	r3, [r7, #0]
 801ba06:	781b      	ldrb	r3, [r3, #0]
 801ba08:	009b      	lsls	r3, r3, #2
 801ba0a:	18d3      	adds	r3, r2, r3
 801ba0c:	881b      	ldrh	r3, [r3, #0]
 801ba0e:	b29a      	uxth	r2, r3
 801ba10:	201e      	movs	r0, #30
 801ba12:	183b      	adds	r3, r7, r0
 801ba14:	49be      	ldr	r1, [pc, #760]	@ (801bd10 <USB_ActivateEndpoint+0x6b0>)
 801ba16:	400a      	ands	r2, r1
 801ba18:	801a      	strh	r2, [r3, #0]
 801ba1a:	183b      	adds	r3, r7, r0
 801ba1c:	183a      	adds	r2, r7, r0
 801ba1e:	8812      	ldrh	r2, [r2, #0]
 801ba20:	2180      	movs	r1, #128	@ 0x80
 801ba22:	0189      	lsls	r1, r1, #6
 801ba24:	404a      	eors	r2, r1
 801ba26:	801a      	strh	r2, [r3, #0]
 801ba28:	687a      	ldr	r2, [r7, #4]
 801ba2a:	683b      	ldr	r3, [r7, #0]
 801ba2c:	781b      	ldrb	r3, [r3, #0]
 801ba2e:	009b      	lsls	r3, r3, #2
 801ba30:	18d3      	adds	r3, r2, r3
 801ba32:	183a      	adds	r2, r7, r0
 801ba34:	8812      	ldrh	r2, [r2, #0]
 801ba36:	49b7      	ldr	r1, [pc, #732]	@ (801bd14 <USB_ActivateEndpoint+0x6b4>)
 801ba38:	430a      	orrs	r2, r1
 801ba3a:	b292      	uxth	r2, r2
 801ba3c:	801a      	strh	r2, [r3, #0]
 801ba3e:	e1a3      	b.n	801bd88 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801ba40:	683b      	ldr	r3, [r7, #0]
 801ba42:	78db      	ldrb	r3, [r3, #3]
 801ba44:	2b02      	cmp	r3, #2
 801ba46:	d117      	bne.n	801ba78 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801ba48:	687a      	ldr	r2, [r7, #4]
 801ba4a:	683b      	ldr	r3, [r7, #0]
 801ba4c:	781b      	ldrb	r3, [r3, #0]
 801ba4e:	009b      	lsls	r3, r3, #2
 801ba50:	18d3      	adds	r3, r2, r3
 801ba52:	881b      	ldrh	r3, [r3, #0]
 801ba54:	b29a      	uxth	r2, r3
 801ba56:	2062      	movs	r0, #98	@ 0x62
 801ba58:	183b      	adds	r3, r7, r0
 801ba5a:	49ab      	ldr	r1, [pc, #684]	@ (801bd08 <USB_ActivateEndpoint+0x6a8>)
 801ba5c:	400a      	ands	r2, r1
 801ba5e:	801a      	strh	r2, [r3, #0]
 801ba60:	687a      	ldr	r2, [r7, #4]
 801ba62:	683b      	ldr	r3, [r7, #0]
 801ba64:	781b      	ldrb	r3, [r3, #0]
 801ba66:	009b      	lsls	r3, r3, #2
 801ba68:	18d3      	adds	r3, r2, r3
 801ba6a:	183a      	adds	r2, r7, r0
 801ba6c:	8812      	ldrh	r2, [r2, #0]
 801ba6e:	49aa      	ldr	r1, [pc, #680]	@ (801bd18 <USB_ActivateEndpoint+0x6b8>)
 801ba70:	430a      	orrs	r2, r1
 801ba72:	b292      	uxth	r2, r2
 801ba74:	801a      	strh	r2, [r3, #0]
 801ba76:	e016      	b.n	801baa6 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801ba78:	687a      	ldr	r2, [r7, #4]
 801ba7a:	683b      	ldr	r3, [r7, #0]
 801ba7c:	781b      	ldrb	r3, [r3, #0]
 801ba7e:	009b      	lsls	r3, r3, #2
 801ba80:	18d3      	adds	r3, r2, r3
 801ba82:	881b      	ldrh	r3, [r3, #0]
 801ba84:	b29a      	uxth	r2, r3
 801ba86:	2064      	movs	r0, #100	@ 0x64
 801ba88:	183b      	adds	r3, r7, r0
 801ba8a:	49a4      	ldr	r1, [pc, #656]	@ (801bd1c <USB_ActivateEndpoint+0x6bc>)
 801ba8c:	400a      	ands	r2, r1
 801ba8e:	801a      	strh	r2, [r3, #0]
 801ba90:	687a      	ldr	r2, [r7, #4]
 801ba92:	683b      	ldr	r3, [r7, #0]
 801ba94:	781b      	ldrb	r3, [r3, #0]
 801ba96:	009b      	lsls	r3, r3, #2
 801ba98:	18d3      	adds	r3, r2, r3
 801ba9a:	183a      	adds	r2, r7, r0
 801ba9c:	8812      	ldrh	r2, [r2, #0]
 801ba9e:	499d      	ldr	r1, [pc, #628]	@ (801bd14 <USB_ActivateEndpoint+0x6b4>)
 801baa0:	430a      	orrs	r2, r1
 801baa2:	b292      	uxth	r2, r2
 801baa4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	2250      	movs	r2, #80	@ 0x50
 801baae:	5a9b      	ldrh	r3, [r3, r2]
 801bab0:	b29b      	uxth	r3, r3
 801bab2:	001a      	movs	r2, r3
 801bab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bab6:	189b      	adds	r3, r3, r2
 801bab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801baba:	683b      	ldr	r3, [r7, #0]
 801babc:	781b      	ldrb	r3, [r3, #0]
 801babe:	00da      	lsls	r2, r3, #3
 801bac0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bac2:	18d3      	adds	r3, r2, r3
 801bac4:	2280      	movs	r2, #128	@ 0x80
 801bac6:	00d2      	lsls	r2, r2, #3
 801bac8:	4694      	mov	ip, r2
 801baca:	4463      	add	r3, ip
 801bacc:	65bb      	str	r3, [r7, #88]	@ 0x58
 801bace:	683b      	ldr	r3, [r7, #0]
 801bad0:	891b      	ldrh	r3, [r3, #8]
 801bad2:	085b      	lsrs	r3, r3, #1
 801bad4:	b29b      	uxth	r3, r3
 801bad6:	18db      	adds	r3, r3, r3
 801bad8:	b29a      	uxth	r2, r3
 801bada:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801badc:	801a      	strh	r2, [r3, #0]
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	657b      	str	r3, [r7, #84]	@ 0x54
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	2250      	movs	r2, #80	@ 0x50
 801bae6:	5a9b      	ldrh	r3, [r3, r2]
 801bae8:	b29b      	uxth	r3, r3
 801baea:	001a      	movs	r2, r3
 801baec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801baee:	189b      	adds	r3, r3, r2
 801baf0:	657b      	str	r3, [r7, #84]	@ 0x54
 801baf2:	683b      	ldr	r3, [r7, #0]
 801baf4:	781b      	ldrb	r3, [r3, #0]
 801baf6:	00da      	lsls	r2, r3, #3
 801baf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bafa:	18d3      	adds	r3, r2, r3
 801bafc:	4a88      	ldr	r2, [pc, #544]	@ (801bd20 <USB_ActivateEndpoint+0x6c0>)
 801bafe:	4694      	mov	ip, r2
 801bb00:	4463      	add	r3, ip
 801bb02:	653b      	str	r3, [r7, #80]	@ 0x50
 801bb04:	683b      	ldr	r3, [r7, #0]
 801bb06:	895b      	ldrh	r3, [r3, #10]
 801bb08:	085b      	lsrs	r3, r3, #1
 801bb0a:	b29b      	uxth	r3, r3
 801bb0c:	18db      	adds	r3, r3, r3
 801bb0e:	b29a      	uxth	r2, r3
 801bb10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bb12:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801bb14:	683b      	ldr	r3, [r7, #0]
 801bb16:	785b      	ldrb	r3, [r3, #1]
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d000      	beq.n	801bb1e <USB_ActivateEndpoint+0x4be>
 801bb1c:	e087      	b.n	801bc2e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801bb1e:	687a      	ldr	r2, [r7, #4]
 801bb20:	683b      	ldr	r3, [r7, #0]
 801bb22:	781b      	ldrb	r3, [r3, #0]
 801bb24:	009b      	lsls	r3, r3, #2
 801bb26:	18d2      	adds	r2, r2, r3
 801bb28:	2140      	movs	r1, #64	@ 0x40
 801bb2a:	187b      	adds	r3, r7, r1
 801bb2c:	8812      	ldrh	r2, [r2, #0]
 801bb2e:	801a      	strh	r2, [r3, #0]
 801bb30:	187b      	adds	r3, r7, r1
 801bb32:	881a      	ldrh	r2, [r3, #0]
 801bb34:	2380      	movs	r3, #128	@ 0x80
 801bb36:	01db      	lsls	r3, r3, #7
 801bb38:	4013      	ands	r3, r2
 801bb3a:	d016      	beq.n	801bb6a <USB_ActivateEndpoint+0x50a>
 801bb3c:	687a      	ldr	r2, [r7, #4]
 801bb3e:	683b      	ldr	r3, [r7, #0]
 801bb40:	781b      	ldrb	r3, [r3, #0]
 801bb42:	009b      	lsls	r3, r3, #2
 801bb44:	18d3      	adds	r3, r2, r3
 801bb46:	881b      	ldrh	r3, [r3, #0]
 801bb48:	b29a      	uxth	r2, r3
 801bb4a:	203e      	movs	r0, #62	@ 0x3e
 801bb4c:	183b      	adds	r3, r7, r0
 801bb4e:	496e      	ldr	r1, [pc, #440]	@ (801bd08 <USB_ActivateEndpoint+0x6a8>)
 801bb50:	400a      	ands	r2, r1
 801bb52:	801a      	strh	r2, [r3, #0]
 801bb54:	687a      	ldr	r2, [r7, #4]
 801bb56:	683b      	ldr	r3, [r7, #0]
 801bb58:	781b      	ldrb	r3, [r3, #0]
 801bb5a:	009b      	lsls	r3, r3, #2
 801bb5c:	18d3      	adds	r3, r2, r3
 801bb5e:	183a      	adds	r2, r7, r0
 801bb60:	8812      	ldrh	r2, [r2, #0]
 801bb62:	496a      	ldr	r1, [pc, #424]	@ (801bd0c <USB_ActivateEndpoint+0x6ac>)
 801bb64:	430a      	orrs	r2, r1
 801bb66:	b292      	uxth	r2, r2
 801bb68:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801bb6a:	687a      	ldr	r2, [r7, #4]
 801bb6c:	683b      	ldr	r3, [r7, #0]
 801bb6e:	781b      	ldrb	r3, [r3, #0]
 801bb70:	009b      	lsls	r3, r3, #2
 801bb72:	18d2      	adds	r2, r2, r3
 801bb74:	213c      	movs	r1, #60	@ 0x3c
 801bb76:	187b      	adds	r3, r7, r1
 801bb78:	8812      	ldrh	r2, [r2, #0]
 801bb7a:	801a      	strh	r2, [r3, #0]
 801bb7c:	187b      	adds	r3, r7, r1
 801bb7e:	881b      	ldrh	r3, [r3, #0]
 801bb80:	2240      	movs	r2, #64	@ 0x40
 801bb82:	4013      	ands	r3, r2
 801bb84:	d016      	beq.n	801bbb4 <USB_ActivateEndpoint+0x554>
 801bb86:	687a      	ldr	r2, [r7, #4]
 801bb88:	683b      	ldr	r3, [r7, #0]
 801bb8a:	781b      	ldrb	r3, [r3, #0]
 801bb8c:	009b      	lsls	r3, r3, #2
 801bb8e:	18d3      	adds	r3, r2, r3
 801bb90:	881b      	ldrh	r3, [r3, #0]
 801bb92:	b29a      	uxth	r2, r3
 801bb94:	203a      	movs	r0, #58	@ 0x3a
 801bb96:	183b      	adds	r3, r7, r0
 801bb98:	495b      	ldr	r1, [pc, #364]	@ (801bd08 <USB_ActivateEndpoint+0x6a8>)
 801bb9a:	400a      	ands	r2, r1
 801bb9c:	801a      	strh	r2, [r3, #0]
 801bb9e:	687a      	ldr	r2, [r7, #4]
 801bba0:	683b      	ldr	r3, [r7, #0]
 801bba2:	781b      	ldrb	r3, [r3, #0]
 801bba4:	009b      	lsls	r3, r3, #2
 801bba6:	18d3      	adds	r3, r2, r3
 801bba8:	183a      	adds	r2, r7, r0
 801bbaa:	8812      	ldrh	r2, [r2, #0]
 801bbac:	495d      	ldr	r1, [pc, #372]	@ (801bd24 <USB_ActivateEndpoint+0x6c4>)
 801bbae:	430a      	orrs	r2, r1
 801bbb0:	b292      	uxth	r2, r2
 801bbb2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801bbb4:	687a      	ldr	r2, [r7, #4]
 801bbb6:	683b      	ldr	r3, [r7, #0]
 801bbb8:	781b      	ldrb	r3, [r3, #0]
 801bbba:	009b      	lsls	r3, r3, #2
 801bbbc:	18d3      	adds	r3, r2, r3
 801bbbe:	881b      	ldrh	r3, [r3, #0]
 801bbc0:	b29a      	uxth	r2, r3
 801bbc2:	2038      	movs	r0, #56	@ 0x38
 801bbc4:	183b      	adds	r3, r7, r0
 801bbc6:	4952      	ldr	r1, [pc, #328]	@ (801bd10 <USB_ActivateEndpoint+0x6b0>)
 801bbc8:	400a      	ands	r2, r1
 801bbca:	801a      	strh	r2, [r3, #0]
 801bbcc:	183b      	adds	r3, r7, r0
 801bbce:	183a      	adds	r2, r7, r0
 801bbd0:	8812      	ldrh	r2, [r2, #0]
 801bbd2:	2180      	movs	r1, #128	@ 0x80
 801bbd4:	0149      	lsls	r1, r1, #5
 801bbd6:	404a      	eors	r2, r1
 801bbd8:	801a      	strh	r2, [r3, #0]
 801bbda:	183b      	adds	r3, r7, r0
 801bbdc:	183a      	adds	r2, r7, r0
 801bbde:	8812      	ldrh	r2, [r2, #0]
 801bbe0:	2180      	movs	r1, #128	@ 0x80
 801bbe2:	0189      	lsls	r1, r1, #6
 801bbe4:	404a      	eors	r2, r1
 801bbe6:	801a      	strh	r2, [r3, #0]
 801bbe8:	687a      	ldr	r2, [r7, #4]
 801bbea:	683b      	ldr	r3, [r7, #0]
 801bbec:	781b      	ldrb	r3, [r3, #0]
 801bbee:	009b      	lsls	r3, r3, #2
 801bbf0:	18d3      	adds	r3, r2, r3
 801bbf2:	183a      	adds	r2, r7, r0
 801bbf4:	8812      	ldrh	r2, [r2, #0]
 801bbf6:	4947      	ldr	r1, [pc, #284]	@ (801bd14 <USB_ActivateEndpoint+0x6b4>)
 801bbf8:	430a      	orrs	r2, r1
 801bbfa:	b292      	uxth	r2, r2
 801bbfc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801bbfe:	687a      	ldr	r2, [r7, #4]
 801bc00:	683b      	ldr	r3, [r7, #0]
 801bc02:	781b      	ldrb	r3, [r3, #0]
 801bc04:	009b      	lsls	r3, r3, #2
 801bc06:	18d3      	adds	r3, r2, r3
 801bc08:	881b      	ldrh	r3, [r3, #0]
 801bc0a:	b29a      	uxth	r2, r3
 801bc0c:	2036      	movs	r0, #54	@ 0x36
 801bc0e:	183b      	adds	r3, r7, r0
 801bc10:	4945      	ldr	r1, [pc, #276]	@ (801bd28 <USB_ActivateEndpoint+0x6c8>)
 801bc12:	400a      	ands	r2, r1
 801bc14:	801a      	strh	r2, [r3, #0]
 801bc16:	687a      	ldr	r2, [r7, #4]
 801bc18:	683b      	ldr	r3, [r7, #0]
 801bc1a:	781b      	ldrb	r3, [r3, #0]
 801bc1c:	009b      	lsls	r3, r3, #2
 801bc1e:	18d3      	adds	r3, r2, r3
 801bc20:	183a      	adds	r2, r7, r0
 801bc22:	8812      	ldrh	r2, [r2, #0]
 801bc24:	493b      	ldr	r1, [pc, #236]	@ (801bd14 <USB_ActivateEndpoint+0x6b4>)
 801bc26:	430a      	orrs	r2, r1
 801bc28:	b292      	uxth	r2, r2
 801bc2a:	801a      	strh	r2, [r3, #0]
 801bc2c:	e0ac      	b.n	801bd88 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801bc2e:	687a      	ldr	r2, [r7, #4]
 801bc30:	683b      	ldr	r3, [r7, #0]
 801bc32:	781b      	ldrb	r3, [r3, #0]
 801bc34:	009b      	lsls	r3, r3, #2
 801bc36:	18d2      	adds	r2, r2, r3
 801bc38:	214e      	movs	r1, #78	@ 0x4e
 801bc3a:	187b      	adds	r3, r7, r1
 801bc3c:	8812      	ldrh	r2, [r2, #0]
 801bc3e:	801a      	strh	r2, [r3, #0]
 801bc40:	187b      	adds	r3, r7, r1
 801bc42:	881a      	ldrh	r2, [r3, #0]
 801bc44:	2380      	movs	r3, #128	@ 0x80
 801bc46:	01db      	lsls	r3, r3, #7
 801bc48:	4013      	ands	r3, r2
 801bc4a:	d016      	beq.n	801bc7a <USB_ActivateEndpoint+0x61a>
 801bc4c:	687a      	ldr	r2, [r7, #4]
 801bc4e:	683b      	ldr	r3, [r7, #0]
 801bc50:	781b      	ldrb	r3, [r3, #0]
 801bc52:	009b      	lsls	r3, r3, #2
 801bc54:	18d3      	adds	r3, r2, r3
 801bc56:	881b      	ldrh	r3, [r3, #0]
 801bc58:	b29a      	uxth	r2, r3
 801bc5a:	204c      	movs	r0, #76	@ 0x4c
 801bc5c:	183b      	adds	r3, r7, r0
 801bc5e:	492a      	ldr	r1, [pc, #168]	@ (801bd08 <USB_ActivateEndpoint+0x6a8>)
 801bc60:	400a      	ands	r2, r1
 801bc62:	801a      	strh	r2, [r3, #0]
 801bc64:	687a      	ldr	r2, [r7, #4]
 801bc66:	683b      	ldr	r3, [r7, #0]
 801bc68:	781b      	ldrb	r3, [r3, #0]
 801bc6a:	009b      	lsls	r3, r3, #2
 801bc6c:	18d3      	adds	r3, r2, r3
 801bc6e:	183a      	adds	r2, r7, r0
 801bc70:	8812      	ldrh	r2, [r2, #0]
 801bc72:	4926      	ldr	r1, [pc, #152]	@ (801bd0c <USB_ActivateEndpoint+0x6ac>)
 801bc74:	430a      	orrs	r2, r1
 801bc76:	b292      	uxth	r2, r2
 801bc78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801bc7a:	687a      	ldr	r2, [r7, #4]
 801bc7c:	683b      	ldr	r3, [r7, #0]
 801bc7e:	781b      	ldrb	r3, [r3, #0]
 801bc80:	009b      	lsls	r3, r3, #2
 801bc82:	18d2      	adds	r2, r2, r3
 801bc84:	214a      	movs	r1, #74	@ 0x4a
 801bc86:	187b      	adds	r3, r7, r1
 801bc88:	8812      	ldrh	r2, [r2, #0]
 801bc8a:	801a      	strh	r2, [r3, #0]
 801bc8c:	187b      	adds	r3, r7, r1
 801bc8e:	881b      	ldrh	r3, [r3, #0]
 801bc90:	2240      	movs	r2, #64	@ 0x40
 801bc92:	4013      	ands	r3, r2
 801bc94:	d016      	beq.n	801bcc4 <USB_ActivateEndpoint+0x664>
 801bc96:	687a      	ldr	r2, [r7, #4]
 801bc98:	683b      	ldr	r3, [r7, #0]
 801bc9a:	781b      	ldrb	r3, [r3, #0]
 801bc9c:	009b      	lsls	r3, r3, #2
 801bc9e:	18d3      	adds	r3, r2, r3
 801bca0:	881b      	ldrh	r3, [r3, #0]
 801bca2:	b29a      	uxth	r2, r3
 801bca4:	2048      	movs	r0, #72	@ 0x48
 801bca6:	183b      	adds	r3, r7, r0
 801bca8:	4917      	ldr	r1, [pc, #92]	@ (801bd08 <USB_ActivateEndpoint+0x6a8>)
 801bcaa:	400a      	ands	r2, r1
 801bcac:	801a      	strh	r2, [r3, #0]
 801bcae:	687a      	ldr	r2, [r7, #4]
 801bcb0:	683b      	ldr	r3, [r7, #0]
 801bcb2:	781b      	ldrb	r3, [r3, #0]
 801bcb4:	009b      	lsls	r3, r3, #2
 801bcb6:	18d3      	adds	r3, r2, r3
 801bcb8:	183a      	adds	r2, r7, r0
 801bcba:	8812      	ldrh	r2, [r2, #0]
 801bcbc:	4919      	ldr	r1, [pc, #100]	@ (801bd24 <USB_ActivateEndpoint+0x6c4>)
 801bcbe:	430a      	orrs	r2, r1
 801bcc0:	b292      	uxth	r2, r2
 801bcc2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801bcc4:	683b      	ldr	r3, [r7, #0]
 801bcc6:	78db      	ldrb	r3, [r3, #3]
 801bcc8:	2b01      	cmp	r3, #1
 801bcca:	d02f      	beq.n	801bd2c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801bccc:	687a      	ldr	r2, [r7, #4]
 801bcce:	683b      	ldr	r3, [r7, #0]
 801bcd0:	781b      	ldrb	r3, [r3, #0]
 801bcd2:	009b      	lsls	r3, r3, #2
 801bcd4:	18d3      	adds	r3, r2, r3
 801bcd6:	881b      	ldrh	r3, [r3, #0]
 801bcd8:	b29a      	uxth	r2, r3
 801bcda:	2044      	movs	r0, #68	@ 0x44
 801bcdc:	183b      	adds	r3, r7, r0
 801bcde:	4912      	ldr	r1, [pc, #72]	@ (801bd28 <USB_ActivateEndpoint+0x6c8>)
 801bce0:	400a      	ands	r2, r1
 801bce2:	801a      	strh	r2, [r3, #0]
 801bce4:	183b      	adds	r3, r7, r0
 801bce6:	183a      	adds	r2, r7, r0
 801bce8:	8812      	ldrh	r2, [r2, #0]
 801bcea:	2120      	movs	r1, #32
 801bcec:	404a      	eors	r2, r1
 801bcee:	801a      	strh	r2, [r3, #0]
 801bcf0:	687a      	ldr	r2, [r7, #4]
 801bcf2:	683b      	ldr	r3, [r7, #0]
 801bcf4:	781b      	ldrb	r3, [r3, #0]
 801bcf6:	009b      	lsls	r3, r3, #2
 801bcf8:	18d3      	adds	r3, r2, r3
 801bcfa:	183a      	adds	r2, r7, r0
 801bcfc:	8812      	ldrh	r2, [r2, #0]
 801bcfe:	4905      	ldr	r1, [pc, #20]	@ (801bd14 <USB_ActivateEndpoint+0x6b4>)
 801bd00:	430a      	orrs	r2, r1
 801bd02:	b292      	uxth	r2, r2
 801bd04:	801a      	strh	r2, [r3, #0]
 801bd06:	e028      	b.n	801bd5a <USB_ActivateEndpoint+0x6fa>
 801bd08:	ffff8f8f 	.word	0xffff8f8f
 801bd0c:	ffffc080 	.word	0xffffc080
 801bd10:	ffffbf8f 	.word	0xffffbf8f
 801bd14:	ffff8080 	.word	0xffff8080
 801bd18:	ffff8180 	.word	0xffff8180
 801bd1c:	ffff8e8f 	.word	0xffff8e8f
 801bd20:	00000404 	.word	0x00000404
 801bd24:	ffff80c0 	.word	0xffff80c0
 801bd28:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801bd2c:	687a      	ldr	r2, [r7, #4]
 801bd2e:	683b      	ldr	r3, [r7, #0]
 801bd30:	781b      	ldrb	r3, [r3, #0]
 801bd32:	009b      	lsls	r3, r3, #2
 801bd34:	18d3      	adds	r3, r2, r3
 801bd36:	881b      	ldrh	r3, [r3, #0]
 801bd38:	b29a      	uxth	r2, r3
 801bd3a:	2046      	movs	r0, #70	@ 0x46
 801bd3c:	183b      	adds	r3, r7, r0
 801bd3e:	4916      	ldr	r1, [pc, #88]	@ (801bd98 <USB_ActivateEndpoint+0x738>)
 801bd40:	400a      	ands	r2, r1
 801bd42:	801a      	strh	r2, [r3, #0]
 801bd44:	687a      	ldr	r2, [r7, #4]
 801bd46:	683b      	ldr	r3, [r7, #0]
 801bd48:	781b      	ldrb	r3, [r3, #0]
 801bd4a:	009b      	lsls	r3, r3, #2
 801bd4c:	18d3      	adds	r3, r2, r3
 801bd4e:	183a      	adds	r2, r7, r0
 801bd50:	8812      	ldrh	r2, [r2, #0]
 801bd52:	4912      	ldr	r1, [pc, #72]	@ (801bd9c <USB_ActivateEndpoint+0x73c>)
 801bd54:	430a      	orrs	r2, r1
 801bd56:	b292      	uxth	r2, r2
 801bd58:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801bd5a:	687a      	ldr	r2, [r7, #4]
 801bd5c:	683b      	ldr	r3, [r7, #0]
 801bd5e:	781b      	ldrb	r3, [r3, #0]
 801bd60:	009b      	lsls	r3, r3, #2
 801bd62:	18d3      	adds	r3, r2, r3
 801bd64:	881b      	ldrh	r3, [r3, #0]
 801bd66:	b29a      	uxth	r2, r3
 801bd68:	2042      	movs	r0, #66	@ 0x42
 801bd6a:	183b      	adds	r3, r7, r0
 801bd6c:	490c      	ldr	r1, [pc, #48]	@ (801bda0 <USB_ActivateEndpoint+0x740>)
 801bd6e:	400a      	ands	r2, r1
 801bd70:	801a      	strh	r2, [r3, #0]
 801bd72:	687a      	ldr	r2, [r7, #4]
 801bd74:	683b      	ldr	r3, [r7, #0]
 801bd76:	781b      	ldrb	r3, [r3, #0]
 801bd78:	009b      	lsls	r3, r3, #2
 801bd7a:	18d3      	adds	r3, r2, r3
 801bd7c:	183a      	adds	r2, r7, r0
 801bd7e:	8812      	ldrh	r2, [r2, #0]
 801bd80:	4906      	ldr	r1, [pc, #24]	@ (801bd9c <USB_ActivateEndpoint+0x73c>)
 801bd82:	430a      	orrs	r2, r1
 801bd84:	b292      	uxth	r2, r2
 801bd86:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801bd88:	236f      	movs	r3, #111	@ 0x6f
 801bd8a:	18fb      	adds	r3, r7, r3
 801bd8c:	781b      	ldrb	r3, [r3, #0]
}
 801bd8e:	0018      	movs	r0, r3
 801bd90:	46bd      	mov	sp, r7
 801bd92:	b01c      	add	sp, #112	@ 0x70
 801bd94:	bd80      	pop	{r7, pc}
 801bd96:	46c0      	nop			@ (mov r8, r8)
 801bd98:	ffff8fbf 	.word	0xffff8fbf
 801bd9c:	ffff8080 	.word	0xffff8080
 801bda0:	ffffbf8f 	.word	0xffffbf8f

0801bda4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801bda4:	b580      	push	{r7, lr}
 801bda6:	b08c      	sub	sp, #48	@ 0x30
 801bda8:	af00      	add	r7, sp, #0
 801bdaa:	6078      	str	r0, [r7, #4]
 801bdac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801bdae:	683b      	ldr	r3, [r7, #0]
 801bdb0:	7b1b      	ldrb	r3, [r3, #12]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d000      	beq.n	801bdb8 <USB_DeactivateEndpoint+0x14>
 801bdb6:	e07e      	b.n	801beb6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801bdb8:	683b      	ldr	r3, [r7, #0]
 801bdba:	785b      	ldrb	r3, [r3, #1]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d03c      	beq.n	801be3a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801bdc0:	687a      	ldr	r2, [r7, #4]
 801bdc2:	683b      	ldr	r3, [r7, #0]
 801bdc4:	781b      	ldrb	r3, [r3, #0]
 801bdc6:	009b      	lsls	r3, r3, #2
 801bdc8:	18d2      	adds	r2, r2, r3
 801bdca:	210c      	movs	r1, #12
 801bdcc:	187b      	adds	r3, r7, r1
 801bdce:	8812      	ldrh	r2, [r2, #0]
 801bdd0:	801a      	strh	r2, [r3, #0]
 801bdd2:	187b      	adds	r3, r7, r1
 801bdd4:	881b      	ldrh	r3, [r3, #0]
 801bdd6:	2240      	movs	r2, #64	@ 0x40
 801bdd8:	4013      	ands	r3, r2
 801bdda:	d016      	beq.n	801be0a <USB_DeactivateEndpoint+0x66>
 801bddc:	687a      	ldr	r2, [r7, #4]
 801bdde:	683b      	ldr	r3, [r7, #0]
 801bde0:	781b      	ldrb	r3, [r3, #0]
 801bde2:	009b      	lsls	r3, r3, #2
 801bde4:	18d3      	adds	r3, r2, r3
 801bde6:	881b      	ldrh	r3, [r3, #0]
 801bde8:	b29a      	uxth	r2, r3
 801bdea:	200a      	movs	r0, #10
 801bdec:	183b      	adds	r3, r7, r0
 801bdee:	49c7      	ldr	r1, [pc, #796]	@ (801c10c <USB_DeactivateEndpoint+0x368>)
 801bdf0:	400a      	ands	r2, r1
 801bdf2:	801a      	strh	r2, [r3, #0]
 801bdf4:	687a      	ldr	r2, [r7, #4]
 801bdf6:	683b      	ldr	r3, [r7, #0]
 801bdf8:	781b      	ldrb	r3, [r3, #0]
 801bdfa:	009b      	lsls	r3, r3, #2
 801bdfc:	18d3      	adds	r3, r2, r3
 801bdfe:	183a      	adds	r2, r7, r0
 801be00:	8812      	ldrh	r2, [r2, #0]
 801be02:	49c3      	ldr	r1, [pc, #780]	@ (801c110 <USB_DeactivateEndpoint+0x36c>)
 801be04:	430a      	orrs	r2, r1
 801be06:	b292      	uxth	r2, r2
 801be08:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801be0a:	687a      	ldr	r2, [r7, #4]
 801be0c:	683b      	ldr	r3, [r7, #0]
 801be0e:	781b      	ldrb	r3, [r3, #0]
 801be10:	009b      	lsls	r3, r3, #2
 801be12:	18d3      	adds	r3, r2, r3
 801be14:	881b      	ldrh	r3, [r3, #0]
 801be16:	b29a      	uxth	r2, r3
 801be18:	2008      	movs	r0, #8
 801be1a:	183b      	adds	r3, r7, r0
 801be1c:	49bd      	ldr	r1, [pc, #756]	@ (801c114 <USB_DeactivateEndpoint+0x370>)
 801be1e:	400a      	ands	r2, r1
 801be20:	801a      	strh	r2, [r3, #0]
 801be22:	687a      	ldr	r2, [r7, #4]
 801be24:	683b      	ldr	r3, [r7, #0]
 801be26:	781b      	ldrb	r3, [r3, #0]
 801be28:	009b      	lsls	r3, r3, #2
 801be2a:	18d3      	adds	r3, r2, r3
 801be2c:	183a      	adds	r2, r7, r0
 801be2e:	8812      	ldrh	r2, [r2, #0]
 801be30:	49b9      	ldr	r1, [pc, #740]	@ (801c118 <USB_DeactivateEndpoint+0x374>)
 801be32:	430a      	orrs	r2, r1
 801be34:	b292      	uxth	r2, r2
 801be36:	801a      	strh	r2, [r3, #0]
 801be38:	e163      	b.n	801c102 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801be3a:	687a      	ldr	r2, [r7, #4]
 801be3c:	683b      	ldr	r3, [r7, #0]
 801be3e:	781b      	ldrb	r3, [r3, #0]
 801be40:	009b      	lsls	r3, r3, #2
 801be42:	18d2      	adds	r2, r2, r3
 801be44:	2112      	movs	r1, #18
 801be46:	187b      	adds	r3, r7, r1
 801be48:	8812      	ldrh	r2, [r2, #0]
 801be4a:	801a      	strh	r2, [r3, #0]
 801be4c:	187b      	adds	r3, r7, r1
 801be4e:	881a      	ldrh	r2, [r3, #0]
 801be50:	2380      	movs	r3, #128	@ 0x80
 801be52:	01db      	lsls	r3, r3, #7
 801be54:	4013      	ands	r3, r2
 801be56:	d016      	beq.n	801be86 <USB_DeactivateEndpoint+0xe2>
 801be58:	687a      	ldr	r2, [r7, #4]
 801be5a:	683b      	ldr	r3, [r7, #0]
 801be5c:	781b      	ldrb	r3, [r3, #0]
 801be5e:	009b      	lsls	r3, r3, #2
 801be60:	18d3      	adds	r3, r2, r3
 801be62:	881b      	ldrh	r3, [r3, #0]
 801be64:	b29a      	uxth	r2, r3
 801be66:	2010      	movs	r0, #16
 801be68:	183b      	adds	r3, r7, r0
 801be6a:	49a8      	ldr	r1, [pc, #672]	@ (801c10c <USB_DeactivateEndpoint+0x368>)
 801be6c:	400a      	ands	r2, r1
 801be6e:	801a      	strh	r2, [r3, #0]
 801be70:	687a      	ldr	r2, [r7, #4]
 801be72:	683b      	ldr	r3, [r7, #0]
 801be74:	781b      	ldrb	r3, [r3, #0]
 801be76:	009b      	lsls	r3, r3, #2
 801be78:	18d3      	adds	r3, r2, r3
 801be7a:	183a      	adds	r2, r7, r0
 801be7c:	8812      	ldrh	r2, [r2, #0]
 801be7e:	49a7      	ldr	r1, [pc, #668]	@ (801c11c <USB_DeactivateEndpoint+0x378>)
 801be80:	430a      	orrs	r2, r1
 801be82:	b292      	uxth	r2, r2
 801be84:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801be86:	687a      	ldr	r2, [r7, #4]
 801be88:	683b      	ldr	r3, [r7, #0]
 801be8a:	781b      	ldrb	r3, [r3, #0]
 801be8c:	009b      	lsls	r3, r3, #2
 801be8e:	18d3      	adds	r3, r2, r3
 801be90:	881b      	ldrh	r3, [r3, #0]
 801be92:	b29a      	uxth	r2, r3
 801be94:	200e      	movs	r0, #14
 801be96:	183b      	adds	r3, r7, r0
 801be98:	49a1      	ldr	r1, [pc, #644]	@ (801c120 <USB_DeactivateEndpoint+0x37c>)
 801be9a:	400a      	ands	r2, r1
 801be9c:	801a      	strh	r2, [r3, #0]
 801be9e:	687a      	ldr	r2, [r7, #4]
 801bea0:	683b      	ldr	r3, [r7, #0]
 801bea2:	781b      	ldrb	r3, [r3, #0]
 801bea4:	009b      	lsls	r3, r3, #2
 801bea6:	18d3      	adds	r3, r2, r3
 801bea8:	183a      	adds	r2, r7, r0
 801beaa:	8812      	ldrh	r2, [r2, #0]
 801beac:	499a      	ldr	r1, [pc, #616]	@ (801c118 <USB_DeactivateEndpoint+0x374>)
 801beae:	430a      	orrs	r2, r1
 801beb0:	b292      	uxth	r2, r2
 801beb2:	801a      	strh	r2, [r3, #0]
 801beb4:	e125      	b.n	801c102 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801beb6:	683b      	ldr	r3, [r7, #0]
 801beb8:	785b      	ldrb	r3, [r3, #1]
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d000      	beq.n	801bec0 <USB_DeactivateEndpoint+0x11c>
 801bebe:	e090      	b.n	801bfe2 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801bec0:	687a      	ldr	r2, [r7, #4]
 801bec2:	683b      	ldr	r3, [r7, #0]
 801bec4:	781b      	ldrb	r3, [r3, #0]
 801bec6:	009b      	lsls	r3, r3, #2
 801bec8:	18d2      	adds	r2, r2, r3
 801beca:	2120      	movs	r1, #32
 801becc:	187b      	adds	r3, r7, r1
 801bece:	8812      	ldrh	r2, [r2, #0]
 801bed0:	801a      	strh	r2, [r3, #0]
 801bed2:	187b      	adds	r3, r7, r1
 801bed4:	881a      	ldrh	r2, [r3, #0]
 801bed6:	2380      	movs	r3, #128	@ 0x80
 801bed8:	01db      	lsls	r3, r3, #7
 801beda:	4013      	ands	r3, r2
 801bedc:	d016      	beq.n	801bf0c <USB_DeactivateEndpoint+0x168>
 801bede:	687a      	ldr	r2, [r7, #4]
 801bee0:	683b      	ldr	r3, [r7, #0]
 801bee2:	781b      	ldrb	r3, [r3, #0]
 801bee4:	009b      	lsls	r3, r3, #2
 801bee6:	18d3      	adds	r3, r2, r3
 801bee8:	881b      	ldrh	r3, [r3, #0]
 801beea:	b29a      	uxth	r2, r3
 801beec:	201e      	movs	r0, #30
 801beee:	183b      	adds	r3, r7, r0
 801bef0:	4986      	ldr	r1, [pc, #536]	@ (801c10c <USB_DeactivateEndpoint+0x368>)
 801bef2:	400a      	ands	r2, r1
 801bef4:	801a      	strh	r2, [r3, #0]
 801bef6:	687a      	ldr	r2, [r7, #4]
 801bef8:	683b      	ldr	r3, [r7, #0]
 801befa:	781b      	ldrb	r3, [r3, #0]
 801befc:	009b      	lsls	r3, r3, #2
 801befe:	18d3      	adds	r3, r2, r3
 801bf00:	183a      	adds	r2, r7, r0
 801bf02:	8812      	ldrh	r2, [r2, #0]
 801bf04:	4985      	ldr	r1, [pc, #532]	@ (801c11c <USB_DeactivateEndpoint+0x378>)
 801bf06:	430a      	orrs	r2, r1
 801bf08:	b292      	uxth	r2, r2
 801bf0a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801bf0c:	687a      	ldr	r2, [r7, #4]
 801bf0e:	683b      	ldr	r3, [r7, #0]
 801bf10:	781b      	ldrb	r3, [r3, #0]
 801bf12:	009b      	lsls	r3, r3, #2
 801bf14:	18d2      	adds	r2, r2, r3
 801bf16:	211c      	movs	r1, #28
 801bf18:	187b      	adds	r3, r7, r1
 801bf1a:	8812      	ldrh	r2, [r2, #0]
 801bf1c:	801a      	strh	r2, [r3, #0]
 801bf1e:	187b      	adds	r3, r7, r1
 801bf20:	881b      	ldrh	r3, [r3, #0]
 801bf22:	2240      	movs	r2, #64	@ 0x40
 801bf24:	4013      	ands	r3, r2
 801bf26:	d016      	beq.n	801bf56 <USB_DeactivateEndpoint+0x1b2>
 801bf28:	687a      	ldr	r2, [r7, #4]
 801bf2a:	683b      	ldr	r3, [r7, #0]
 801bf2c:	781b      	ldrb	r3, [r3, #0]
 801bf2e:	009b      	lsls	r3, r3, #2
 801bf30:	18d3      	adds	r3, r2, r3
 801bf32:	881b      	ldrh	r3, [r3, #0]
 801bf34:	b29a      	uxth	r2, r3
 801bf36:	201a      	movs	r0, #26
 801bf38:	183b      	adds	r3, r7, r0
 801bf3a:	4974      	ldr	r1, [pc, #464]	@ (801c10c <USB_DeactivateEndpoint+0x368>)
 801bf3c:	400a      	ands	r2, r1
 801bf3e:	801a      	strh	r2, [r3, #0]
 801bf40:	687a      	ldr	r2, [r7, #4]
 801bf42:	683b      	ldr	r3, [r7, #0]
 801bf44:	781b      	ldrb	r3, [r3, #0]
 801bf46:	009b      	lsls	r3, r3, #2
 801bf48:	18d3      	adds	r3, r2, r3
 801bf4a:	183a      	adds	r2, r7, r0
 801bf4c:	8812      	ldrh	r2, [r2, #0]
 801bf4e:	4970      	ldr	r1, [pc, #448]	@ (801c110 <USB_DeactivateEndpoint+0x36c>)
 801bf50:	430a      	orrs	r2, r1
 801bf52:	b292      	uxth	r2, r2
 801bf54:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801bf56:	687a      	ldr	r2, [r7, #4]
 801bf58:	683b      	ldr	r3, [r7, #0]
 801bf5a:	781b      	ldrb	r3, [r3, #0]
 801bf5c:	009b      	lsls	r3, r3, #2
 801bf5e:	18d3      	adds	r3, r2, r3
 801bf60:	881b      	ldrh	r3, [r3, #0]
 801bf62:	b29a      	uxth	r2, r3
 801bf64:	2018      	movs	r0, #24
 801bf66:	183b      	adds	r3, r7, r0
 801bf68:	4968      	ldr	r1, [pc, #416]	@ (801c10c <USB_DeactivateEndpoint+0x368>)
 801bf6a:	400a      	ands	r2, r1
 801bf6c:	801a      	strh	r2, [r3, #0]
 801bf6e:	687a      	ldr	r2, [r7, #4]
 801bf70:	683b      	ldr	r3, [r7, #0]
 801bf72:	781b      	ldrb	r3, [r3, #0]
 801bf74:	009b      	lsls	r3, r3, #2
 801bf76:	18d3      	adds	r3, r2, r3
 801bf78:	183a      	adds	r2, r7, r0
 801bf7a:	8812      	ldrh	r2, [r2, #0]
 801bf7c:	4964      	ldr	r1, [pc, #400]	@ (801c110 <USB_DeactivateEndpoint+0x36c>)
 801bf7e:	430a      	orrs	r2, r1
 801bf80:	b292      	uxth	r2, r2
 801bf82:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801bf84:	687a      	ldr	r2, [r7, #4]
 801bf86:	683b      	ldr	r3, [r7, #0]
 801bf88:	781b      	ldrb	r3, [r3, #0]
 801bf8a:	009b      	lsls	r3, r3, #2
 801bf8c:	18d3      	adds	r3, r2, r3
 801bf8e:	881b      	ldrh	r3, [r3, #0]
 801bf90:	b29a      	uxth	r2, r3
 801bf92:	2016      	movs	r0, #22
 801bf94:	183b      	adds	r3, r7, r0
 801bf96:	4962      	ldr	r1, [pc, #392]	@ (801c120 <USB_DeactivateEndpoint+0x37c>)
 801bf98:	400a      	ands	r2, r1
 801bf9a:	801a      	strh	r2, [r3, #0]
 801bf9c:	687a      	ldr	r2, [r7, #4]
 801bf9e:	683b      	ldr	r3, [r7, #0]
 801bfa0:	781b      	ldrb	r3, [r3, #0]
 801bfa2:	009b      	lsls	r3, r3, #2
 801bfa4:	18d3      	adds	r3, r2, r3
 801bfa6:	183a      	adds	r2, r7, r0
 801bfa8:	8812      	ldrh	r2, [r2, #0]
 801bfaa:	495b      	ldr	r1, [pc, #364]	@ (801c118 <USB_DeactivateEndpoint+0x374>)
 801bfac:	430a      	orrs	r2, r1
 801bfae:	b292      	uxth	r2, r2
 801bfb0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801bfb2:	687a      	ldr	r2, [r7, #4]
 801bfb4:	683b      	ldr	r3, [r7, #0]
 801bfb6:	781b      	ldrb	r3, [r3, #0]
 801bfb8:	009b      	lsls	r3, r3, #2
 801bfba:	18d3      	adds	r3, r2, r3
 801bfbc:	881b      	ldrh	r3, [r3, #0]
 801bfbe:	b29a      	uxth	r2, r3
 801bfc0:	2014      	movs	r0, #20
 801bfc2:	183b      	adds	r3, r7, r0
 801bfc4:	4953      	ldr	r1, [pc, #332]	@ (801c114 <USB_DeactivateEndpoint+0x370>)
 801bfc6:	400a      	ands	r2, r1
 801bfc8:	801a      	strh	r2, [r3, #0]
 801bfca:	687a      	ldr	r2, [r7, #4]
 801bfcc:	683b      	ldr	r3, [r7, #0]
 801bfce:	781b      	ldrb	r3, [r3, #0]
 801bfd0:	009b      	lsls	r3, r3, #2
 801bfd2:	18d3      	adds	r3, r2, r3
 801bfd4:	183a      	adds	r2, r7, r0
 801bfd6:	8812      	ldrh	r2, [r2, #0]
 801bfd8:	494f      	ldr	r1, [pc, #316]	@ (801c118 <USB_DeactivateEndpoint+0x374>)
 801bfda:	430a      	orrs	r2, r1
 801bfdc:	b292      	uxth	r2, r2
 801bfde:	801a      	strh	r2, [r3, #0]
 801bfe0:	e08f      	b.n	801c102 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801bfe2:	687a      	ldr	r2, [r7, #4]
 801bfe4:	683b      	ldr	r3, [r7, #0]
 801bfe6:	781b      	ldrb	r3, [r3, #0]
 801bfe8:	009b      	lsls	r3, r3, #2
 801bfea:	18d2      	adds	r2, r2, r3
 801bfec:	212e      	movs	r1, #46	@ 0x2e
 801bfee:	187b      	adds	r3, r7, r1
 801bff0:	8812      	ldrh	r2, [r2, #0]
 801bff2:	801a      	strh	r2, [r3, #0]
 801bff4:	187b      	adds	r3, r7, r1
 801bff6:	881a      	ldrh	r2, [r3, #0]
 801bff8:	2380      	movs	r3, #128	@ 0x80
 801bffa:	01db      	lsls	r3, r3, #7
 801bffc:	4013      	ands	r3, r2
 801bffe:	d016      	beq.n	801c02e <USB_DeactivateEndpoint+0x28a>
 801c000:	687a      	ldr	r2, [r7, #4]
 801c002:	683b      	ldr	r3, [r7, #0]
 801c004:	781b      	ldrb	r3, [r3, #0]
 801c006:	009b      	lsls	r3, r3, #2
 801c008:	18d3      	adds	r3, r2, r3
 801c00a:	881b      	ldrh	r3, [r3, #0]
 801c00c:	b29a      	uxth	r2, r3
 801c00e:	202c      	movs	r0, #44	@ 0x2c
 801c010:	183b      	adds	r3, r7, r0
 801c012:	493e      	ldr	r1, [pc, #248]	@ (801c10c <USB_DeactivateEndpoint+0x368>)
 801c014:	400a      	ands	r2, r1
 801c016:	801a      	strh	r2, [r3, #0]
 801c018:	687a      	ldr	r2, [r7, #4]
 801c01a:	683b      	ldr	r3, [r7, #0]
 801c01c:	781b      	ldrb	r3, [r3, #0]
 801c01e:	009b      	lsls	r3, r3, #2
 801c020:	18d3      	adds	r3, r2, r3
 801c022:	183a      	adds	r2, r7, r0
 801c024:	8812      	ldrh	r2, [r2, #0]
 801c026:	493d      	ldr	r1, [pc, #244]	@ (801c11c <USB_DeactivateEndpoint+0x378>)
 801c028:	430a      	orrs	r2, r1
 801c02a:	b292      	uxth	r2, r2
 801c02c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c02e:	687a      	ldr	r2, [r7, #4]
 801c030:	683b      	ldr	r3, [r7, #0]
 801c032:	781b      	ldrb	r3, [r3, #0]
 801c034:	009b      	lsls	r3, r3, #2
 801c036:	18d2      	adds	r2, r2, r3
 801c038:	212a      	movs	r1, #42	@ 0x2a
 801c03a:	187b      	adds	r3, r7, r1
 801c03c:	8812      	ldrh	r2, [r2, #0]
 801c03e:	801a      	strh	r2, [r3, #0]
 801c040:	187b      	adds	r3, r7, r1
 801c042:	881b      	ldrh	r3, [r3, #0]
 801c044:	2240      	movs	r2, #64	@ 0x40
 801c046:	4013      	ands	r3, r2
 801c048:	d016      	beq.n	801c078 <USB_DeactivateEndpoint+0x2d4>
 801c04a:	687a      	ldr	r2, [r7, #4]
 801c04c:	683b      	ldr	r3, [r7, #0]
 801c04e:	781b      	ldrb	r3, [r3, #0]
 801c050:	009b      	lsls	r3, r3, #2
 801c052:	18d3      	adds	r3, r2, r3
 801c054:	881b      	ldrh	r3, [r3, #0]
 801c056:	b29a      	uxth	r2, r3
 801c058:	2028      	movs	r0, #40	@ 0x28
 801c05a:	183b      	adds	r3, r7, r0
 801c05c:	492b      	ldr	r1, [pc, #172]	@ (801c10c <USB_DeactivateEndpoint+0x368>)
 801c05e:	400a      	ands	r2, r1
 801c060:	801a      	strh	r2, [r3, #0]
 801c062:	687a      	ldr	r2, [r7, #4]
 801c064:	683b      	ldr	r3, [r7, #0]
 801c066:	781b      	ldrb	r3, [r3, #0]
 801c068:	009b      	lsls	r3, r3, #2
 801c06a:	18d3      	adds	r3, r2, r3
 801c06c:	183a      	adds	r2, r7, r0
 801c06e:	8812      	ldrh	r2, [r2, #0]
 801c070:	4927      	ldr	r1, [pc, #156]	@ (801c110 <USB_DeactivateEndpoint+0x36c>)
 801c072:	430a      	orrs	r2, r1
 801c074:	b292      	uxth	r2, r2
 801c076:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801c078:	687a      	ldr	r2, [r7, #4]
 801c07a:	683b      	ldr	r3, [r7, #0]
 801c07c:	781b      	ldrb	r3, [r3, #0]
 801c07e:	009b      	lsls	r3, r3, #2
 801c080:	18d3      	adds	r3, r2, r3
 801c082:	881b      	ldrh	r3, [r3, #0]
 801c084:	b29a      	uxth	r2, r3
 801c086:	2026      	movs	r0, #38	@ 0x26
 801c088:	183b      	adds	r3, r7, r0
 801c08a:	4920      	ldr	r1, [pc, #128]	@ (801c10c <USB_DeactivateEndpoint+0x368>)
 801c08c:	400a      	ands	r2, r1
 801c08e:	801a      	strh	r2, [r3, #0]
 801c090:	687a      	ldr	r2, [r7, #4]
 801c092:	683b      	ldr	r3, [r7, #0]
 801c094:	781b      	ldrb	r3, [r3, #0]
 801c096:	009b      	lsls	r3, r3, #2
 801c098:	18d3      	adds	r3, r2, r3
 801c09a:	183a      	adds	r2, r7, r0
 801c09c:	8812      	ldrh	r2, [r2, #0]
 801c09e:	491f      	ldr	r1, [pc, #124]	@ (801c11c <USB_DeactivateEndpoint+0x378>)
 801c0a0:	430a      	orrs	r2, r1
 801c0a2:	b292      	uxth	r2, r2
 801c0a4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c0a6:	687a      	ldr	r2, [r7, #4]
 801c0a8:	683b      	ldr	r3, [r7, #0]
 801c0aa:	781b      	ldrb	r3, [r3, #0]
 801c0ac:	009b      	lsls	r3, r3, #2
 801c0ae:	18d3      	adds	r3, r2, r3
 801c0b0:	881b      	ldrh	r3, [r3, #0]
 801c0b2:	b29a      	uxth	r2, r3
 801c0b4:	2024      	movs	r0, #36	@ 0x24
 801c0b6:	183b      	adds	r3, r7, r0
 801c0b8:	4916      	ldr	r1, [pc, #88]	@ (801c114 <USB_DeactivateEndpoint+0x370>)
 801c0ba:	400a      	ands	r2, r1
 801c0bc:	801a      	strh	r2, [r3, #0]
 801c0be:	687a      	ldr	r2, [r7, #4]
 801c0c0:	683b      	ldr	r3, [r7, #0]
 801c0c2:	781b      	ldrb	r3, [r3, #0]
 801c0c4:	009b      	lsls	r3, r3, #2
 801c0c6:	18d3      	adds	r3, r2, r3
 801c0c8:	183a      	adds	r2, r7, r0
 801c0ca:	8812      	ldrh	r2, [r2, #0]
 801c0cc:	4912      	ldr	r1, [pc, #72]	@ (801c118 <USB_DeactivateEndpoint+0x374>)
 801c0ce:	430a      	orrs	r2, r1
 801c0d0:	b292      	uxth	r2, r2
 801c0d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c0d4:	687a      	ldr	r2, [r7, #4]
 801c0d6:	683b      	ldr	r3, [r7, #0]
 801c0d8:	781b      	ldrb	r3, [r3, #0]
 801c0da:	009b      	lsls	r3, r3, #2
 801c0dc:	18d3      	adds	r3, r2, r3
 801c0de:	881b      	ldrh	r3, [r3, #0]
 801c0e0:	b29a      	uxth	r2, r3
 801c0e2:	2022      	movs	r0, #34	@ 0x22
 801c0e4:	183b      	adds	r3, r7, r0
 801c0e6:	490e      	ldr	r1, [pc, #56]	@ (801c120 <USB_DeactivateEndpoint+0x37c>)
 801c0e8:	400a      	ands	r2, r1
 801c0ea:	801a      	strh	r2, [r3, #0]
 801c0ec:	687a      	ldr	r2, [r7, #4]
 801c0ee:	683b      	ldr	r3, [r7, #0]
 801c0f0:	781b      	ldrb	r3, [r3, #0]
 801c0f2:	009b      	lsls	r3, r3, #2
 801c0f4:	18d3      	adds	r3, r2, r3
 801c0f6:	183a      	adds	r2, r7, r0
 801c0f8:	8812      	ldrh	r2, [r2, #0]
 801c0fa:	4907      	ldr	r1, [pc, #28]	@ (801c118 <USB_DeactivateEndpoint+0x374>)
 801c0fc:	430a      	orrs	r2, r1
 801c0fe:	b292      	uxth	r2, r2
 801c100:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801c102:	2300      	movs	r3, #0
}
 801c104:	0018      	movs	r0, r3
 801c106:	46bd      	mov	sp, r7
 801c108:	b00c      	add	sp, #48	@ 0x30
 801c10a:	bd80      	pop	{r7, pc}
 801c10c:	ffff8f8f 	.word	0xffff8f8f
 801c110:	ffff80c0 	.word	0xffff80c0
 801c114:	ffff8fbf 	.word	0xffff8fbf
 801c118:	ffff8080 	.word	0xffff8080
 801c11c:	ffffc080 	.word	0xffffc080
 801c120:	ffffbf8f 	.word	0xffffbf8f

0801c124 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801c124:	b590      	push	{r4, r7, lr}
 801c126:	b0c3      	sub	sp, #268	@ 0x10c
 801c128:	af00      	add	r7, sp, #0
 801c12a:	6078      	str	r0, [r7, #4]
 801c12c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801c12e:	683b      	ldr	r3, [r7, #0]
 801c130:	785b      	ldrb	r3, [r3, #1]
 801c132:	2b01      	cmp	r3, #1
 801c134:	d001      	beq.n	801c13a <USB_EPStartXfer+0x16>
 801c136:	f000 fd2d 	bl	801cb94 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801c13a:	683b      	ldr	r3, [r7, #0]
 801c13c:	699a      	ldr	r2, [r3, #24]
 801c13e:	683b      	ldr	r3, [r7, #0]
 801c140:	691b      	ldr	r3, [r3, #16]
 801c142:	429a      	cmp	r2, r3
 801c144:	d905      	bls.n	801c152 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801c146:	683b      	ldr	r3, [r7, #0]
 801c148:	691b      	ldr	r3, [r3, #16]
 801c14a:	1d7a      	adds	r2, r7, #5
 801c14c:	32ff      	adds	r2, #255	@ 0xff
 801c14e:	6013      	str	r3, [r2, #0]
 801c150:	e004      	b.n	801c15c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801c152:	683b      	ldr	r3, [r7, #0]
 801c154:	699b      	ldr	r3, [r3, #24]
 801c156:	1d7a      	adds	r2, r7, #5
 801c158:	32ff      	adds	r2, #255	@ 0xff
 801c15a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801c15c:	683b      	ldr	r3, [r7, #0]
 801c15e:	7b1b      	ldrb	r3, [r3, #12]
 801c160:	2b00      	cmp	r3, #0
 801c162:	d125      	bne.n	801c1b0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801c164:	683b      	ldr	r3, [r7, #0]
 801c166:	6959      	ldr	r1, [r3, #20]
 801c168:	683b      	ldr	r3, [r7, #0]
 801c16a:	88da      	ldrh	r2, [r3, #6]
 801c16c:	1d7b      	adds	r3, r7, #5
 801c16e:	33ff      	adds	r3, #255	@ 0xff
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	b29b      	uxth	r3, r3
 801c174:	6878      	ldr	r0, [r7, #4]
 801c176:	f001 fa47 	bl	801d608 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	613b      	str	r3, [r7, #16]
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	2250      	movs	r2, #80	@ 0x50
 801c182:	5a9b      	ldrh	r3, [r3, r2]
 801c184:	b29b      	uxth	r3, r3
 801c186:	001a      	movs	r2, r3
 801c188:	693b      	ldr	r3, [r7, #16]
 801c18a:	189b      	adds	r3, r3, r2
 801c18c:	613b      	str	r3, [r7, #16]
 801c18e:	683b      	ldr	r3, [r7, #0]
 801c190:	781b      	ldrb	r3, [r3, #0]
 801c192:	00da      	lsls	r2, r3, #3
 801c194:	693b      	ldr	r3, [r7, #16]
 801c196:	18d3      	adds	r3, r2, r3
 801c198:	4ad7      	ldr	r2, [pc, #860]	@ (801c4f8 <USB_EPStartXfer+0x3d4>)
 801c19a:	4694      	mov	ip, r2
 801c19c:	4463      	add	r3, ip
 801c19e:	60fb      	str	r3, [r7, #12]
 801c1a0:	1d7b      	adds	r3, r7, #5
 801c1a2:	33ff      	adds	r3, #255	@ 0xff
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	b29a      	uxth	r2, r3
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	801a      	strh	r2, [r3, #0]
 801c1ac:	f000 fccd 	bl	801cb4a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801c1b0:	683b      	ldr	r3, [r7, #0]
 801c1b2:	78db      	ldrb	r3, [r3, #3]
 801c1b4:	2b02      	cmp	r3, #2
 801c1b6:	d000      	beq.n	801c1ba <USB_EPStartXfer+0x96>
 801c1b8:	e362      	b.n	801c880 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801c1ba:	683b      	ldr	r3, [r7, #0]
 801c1bc:	6a1a      	ldr	r2, [r3, #32]
 801c1be:	683b      	ldr	r3, [r7, #0]
 801c1c0:	691b      	ldr	r3, [r3, #16]
 801c1c2:	429a      	cmp	r2, r3
 801c1c4:	d800      	bhi.n	801c1c8 <USB_EPStartXfer+0xa4>
 801c1c6:	e309      	b.n	801c7dc <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801c1c8:	687a      	ldr	r2, [r7, #4]
 801c1ca:	683b      	ldr	r3, [r7, #0]
 801c1cc:	781b      	ldrb	r3, [r3, #0]
 801c1ce:	009b      	lsls	r3, r3, #2
 801c1d0:	18d3      	adds	r3, r2, r3
 801c1d2:	881b      	ldrh	r3, [r3, #0]
 801c1d4:	b29a      	uxth	r2, r3
 801c1d6:	2056      	movs	r0, #86	@ 0x56
 801c1d8:	183b      	adds	r3, r7, r0
 801c1da:	49c8      	ldr	r1, [pc, #800]	@ (801c4fc <USB_EPStartXfer+0x3d8>)
 801c1dc:	400a      	ands	r2, r1
 801c1de:	801a      	strh	r2, [r3, #0]
 801c1e0:	687a      	ldr	r2, [r7, #4]
 801c1e2:	683b      	ldr	r3, [r7, #0]
 801c1e4:	781b      	ldrb	r3, [r3, #0]
 801c1e6:	009b      	lsls	r3, r3, #2
 801c1e8:	18d3      	adds	r3, r2, r3
 801c1ea:	183a      	adds	r2, r7, r0
 801c1ec:	8812      	ldrh	r2, [r2, #0]
 801c1ee:	49c4      	ldr	r1, [pc, #784]	@ (801c500 <USB_EPStartXfer+0x3dc>)
 801c1f0:	430a      	orrs	r2, r1
 801c1f2:	b292      	uxth	r2, r2
 801c1f4:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801c1f6:	683b      	ldr	r3, [r7, #0]
 801c1f8:	6a1a      	ldr	r2, [r3, #32]
 801c1fa:	1d7b      	adds	r3, r7, #5
 801c1fc:	33ff      	adds	r3, #255	@ 0xff
 801c1fe:	681b      	ldr	r3, [r3, #0]
 801c200:	1ad2      	subs	r2, r2, r3
 801c202:	683b      	ldr	r3, [r7, #0]
 801c204:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801c206:	687a      	ldr	r2, [r7, #4]
 801c208:	683b      	ldr	r3, [r7, #0]
 801c20a:	781b      	ldrb	r3, [r3, #0]
 801c20c:	009b      	lsls	r3, r3, #2
 801c20e:	18d3      	adds	r3, r2, r3
 801c210:	881b      	ldrh	r3, [r3, #0]
 801c212:	b29b      	uxth	r3, r3
 801c214:	001a      	movs	r2, r3
 801c216:	2340      	movs	r3, #64	@ 0x40
 801c218:	4013      	ands	r3, r2
 801c21a:	d100      	bne.n	801c21e <USB_EPStartXfer+0xfa>
 801c21c:	e176      	b.n	801c50c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	633b      	str	r3, [r7, #48]	@ 0x30
 801c222:	683b      	ldr	r3, [r7, #0]
 801c224:	785b      	ldrb	r3, [r3, #1]
 801c226:	2b00      	cmp	r3, #0
 801c228:	d000      	beq.n	801c22c <USB_EPStartXfer+0x108>
 801c22a:	e074      	b.n	801c316 <USB_EPStartXfer+0x1f2>
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	2250      	movs	r2, #80	@ 0x50
 801c234:	5a9b      	ldrh	r3, [r3, r2]
 801c236:	b29b      	uxth	r3, r3
 801c238:	001a      	movs	r2, r3
 801c23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c23c:	189b      	adds	r3, r3, r2
 801c23e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c240:	683b      	ldr	r3, [r7, #0]
 801c242:	781b      	ldrb	r3, [r3, #0]
 801c244:	00da      	lsls	r2, r3, #3
 801c246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c248:	18d3      	adds	r3, r2, r3
 801c24a:	4aae      	ldr	r2, [pc, #696]	@ (801c504 <USB_EPStartXfer+0x3e0>)
 801c24c:	4694      	mov	ip, r2
 801c24e:	4463      	add	r3, ip
 801c250:	627b      	str	r3, [r7, #36]	@ 0x24
 801c252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c254:	881b      	ldrh	r3, [r3, #0]
 801c256:	b29b      	uxth	r3, r3
 801c258:	059b      	lsls	r3, r3, #22
 801c25a:	0d9b      	lsrs	r3, r3, #22
 801c25c:	b29a      	uxth	r2, r3
 801c25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c260:	801a      	strh	r2, [r3, #0]
 801c262:	1d7b      	adds	r3, r7, #5
 801c264:	33ff      	adds	r3, #255	@ 0xff
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	2b3e      	cmp	r3, #62	@ 0x3e
 801c26a:	d924      	bls.n	801c2b6 <USB_EPStartXfer+0x192>
 801c26c:	1d7b      	adds	r3, r7, #5
 801c26e:	33ff      	adds	r3, #255	@ 0xff
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	095b      	lsrs	r3, r3, #5
 801c274:	1c7a      	adds	r2, r7, #1
 801c276:	32ff      	adds	r2, #255	@ 0xff
 801c278:	6013      	str	r3, [r2, #0]
 801c27a:	1d7b      	adds	r3, r7, #5
 801c27c:	33ff      	adds	r3, #255	@ 0xff
 801c27e:	681b      	ldr	r3, [r3, #0]
 801c280:	221f      	movs	r2, #31
 801c282:	4013      	ands	r3, r2
 801c284:	d106      	bne.n	801c294 <USB_EPStartXfer+0x170>
 801c286:	1c7b      	adds	r3, r7, #1
 801c288:	33ff      	adds	r3, #255	@ 0xff
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	3b01      	subs	r3, #1
 801c28e:	1c7a      	adds	r2, r7, #1
 801c290:	32ff      	adds	r2, #255	@ 0xff
 801c292:	6013      	str	r3, [r2, #0]
 801c294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c296:	881b      	ldrh	r3, [r3, #0]
 801c298:	b29a      	uxth	r2, r3
 801c29a:	1c7b      	adds	r3, r7, #1
 801c29c:	33ff      	adds	r3, #255	@ 0xff
 801c29e:	681b      	ldr	r3, [r3, #0]
 801c2a0:	b29b      	uxth	r3, r3
 801c2a2:	029b      	lsls	r3, r3, #10
 801c2a4:	b29b      	uxth	r3, r3
 801c2a6:	4313      	orrs	r3, r2
 801c2a8:	b29b      	uxth	r3, r3
 801c2aa:	4a97      	ldr	r2, [pc, #604]	@ (801c508 <USB_EPStartXfer+0x3e4>)
 801c2ac:	4313      	orrs	r3, r2
 801c2ae:	b29a      	uxth	r2, r3
 801c2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2b2:	801a      	strh	r2, [r3, #0]
 801c2b4:	e04a      	b.n	801c34c <USB_EPStartXfer+0x228>
 801c2b6:	1d7b      	adds	r3, r7, #5
 801c2b8:	33ff      	adds	r3, #255	@ 0xff
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d108      	bne.n	801c2d2 <USB_EPStartXfer+0x1ae>
 801c2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2c2:	881b      	ldrh	r3, [r3, #0]
 801c2c4:	b29b      	uxth	r3, r3
 801c2c6:	4a90      	ldr	r2, [pc, #576]	@ (801c508 <USB_EPStartXfer+0x3e4>)
 801c2c8:	4313      	orrs	r3, r2
 801c2ca:	b29a      	uxth	r2, r3
 801c2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2ce:	801a      	strh	r2, [r3, #0]
 801c2d0:	e03c      	b.n	801c34c <USB_EPStartXfer+0x228>
 801c2d2:	1d7b      	adds	r3, r7, #5
 801c2d4:	33ff      	adds	r3, #255	@ 0xff
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	085b      	lsrs	r3, r3, #1
 801c2da:	1c7a      	adds	r2, r7, #1
 801c2dc:	32ff      	adds	r2, #255	@ 0xff
 801c2de:	6013      	str	r3, [r2, #0]
 801c2e0:	1d7b      	adds	r3, r7, #5
 801c2e2:	33ff      	adds	r3, #255	@ 0xff
 801c2e4:	681b      	ldr	r3, [r3, #0]
 801c2e6:	2201      	movs	r2, #1
 801c2e8:	4013      	ands	r3, r2
 801c2ea:	d006      	beq.n	801c2fa <USB_EPStartXfer+0x1d6>
 801c2ec:	1c7b      	adds	r3, r7, #1
 801c2ee:	33ff      	adds	r3, #255	@ 0xff
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	3301      	adds	r3, #1
 801c2f4:	1c7a      	adds	r2, r7, #1
 801c2f6:	32ff      	adds	r2, #255	@ 0xff
 801c2f8:	6013      	str	r3, [r2, #0]
 801c2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2fc:	881b      	ldrh	r3, [r3, #0]
 801c2fe:	b29a      	uxth	r2, r3
 801c300:	1c7b      	adds	r3, r7, #1
 801c302:	33ff      	adds	r3, #255	@ 0xff
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	b29b      	uxth	r3, r3
 801c308:	029b      	lsls	r3, r3, #10
 801c30a:	b29b      	uxth	r3, r3
 801c30c:	4313      	orrs	r3, r2
 801c30e:	b29a      	uxth	r2, r3
 801c310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c312:	801a      	strh	r2, [r3, #0]
 801c314:	e01a      	b.n	801c34c <USB_EPStartXfer+0x228>
 801c316:	683b      	ldr	r3, [r7, #0]
 801c318:	785b      	ldrb	r3, [r3, #1]
 801c31a:	2b01      	cmp	r3, #1
 801c31c:	d116      	bne.n	801c34c <USB_EPStartXfer+0x228>
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	2250      	movs	r2, #80	@ 0x50
 801c322:	5a9b      	ldrh	r3, [r3, r2]
 801c324:	b29b      	uxth	r3, r3
 801c326:	001a      	movs	r2, r3
 801c328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c32a:	189b      	adds	r3, r3, r2
 801c32c:	633b      	str	r3, [r7, #48]	@ 0x30
 801c32e:	683b      	ldr	r3, [r7, #0]
 801c330:	781b      	ldrb	r3, [r3, #0]
 801c332:	00da      	lsls	r2, r3, #3
 801c334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c336:	18d3      	adds	r3, r2, r3
 801c338:	4a72      	ldr	r2, [pc, #456]	@ (801c504 <USB_EPStartXfer+0x3e0>)
 801c33a:	4694      	mov	ip, r2
 801c33c:	4463      	add	r3, ip
 801c33e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c340:	1d7b      	adds	r3, r7, #5
 801c342:	33ff      	adds	r3, #255	@ 0xff
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	b29a      	uxth	r2, r3
 801c348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c34a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801c34c:	2076      	movs	r0, #118	@ 0x76
 801c34e:	183b      	adds	r3, r7, r0
 801c350:	683a      	ldr	r2, [r7, #0]
 801c352:	8952      	ldrh	r2, [r2, #10]
 801c354:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c356:	683b      	ldr	r3, [r7, #0]
 801c358:	6959      	ldr	r1, [r3, #20]
 801c35a:	1d7b      	adds	r3, r7, #5
 801c35c:	33ff      	adds	r3, #255	@ 0xff
 801c35e:	681b      	ldr	r3, [r3, #0]
 801c360:	b29c      	uxth	r4, r3
 801c362:	183b      	adds	r3, r7, r0
 801c364:	881a      	ldrh	r2, [r3, #0]
 801c366:	6878      	ldr	r0, [r7, #4]
 801c368:	0023      	movs	r3, r4
 801c36a:	f001 f94d 	bl	801d608 <USB_WritePMA>
            ep->xfer_buff += len;
 801c36e:	683b      	ldr	r3, [r7, #0]
 801c370:	695a      	ldr	r2, [r3, #20]
 801c372:	1d7b      	adds	r3, r7, #5
 801c374:	33ff      	adds	r3, #255	@ 0xff
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	18d2      	adds	r2, r2, r3
 801c37a:	683b      	ldr	r3, [r7, #0]
 801c37c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801c37e:	683b      	ldr	r3, [r7, #0]
 801c380:	6a1a      	ldr	r2, [r3, #32]
 801c382:	683b      	ldr	r3, [r7, #0]
 801c384:	691b      	ldr	r3, [r3, #16]
 801c386:	429a      	cmp	r2, r3
 801c388:	d908      	bls.n	801c39c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801c38a:	683b      	ldr	r3, [r7, #0]
 801c38c:	6a1a      	ldr	r2, [r3, #32]
 801c38e:	1d7b      	adds	r3, r7, #5
 801c390:	33ff      	adds	r3, #255	@ 0xff
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	1ad2      	subs	r2, r2, r3
 801c396:	683b      	ldr	r3, [r7, #0]
 801c398:	621a      	str	r2, [r3, #32]
 801c39a:	e007      	b.n	801c3ac <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801c39c:	683b      	ldr	r3, [r7, #0]
 801c39e:	6a1b      	ldr	r3, [r3, #32]
 801c3a0:	1d7a      	adds	r2, r7, #5
 801c3a2:	32ff      	adds	r2, #255	@ 0xff
 801c3a4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801c3a6:	683b      	ldr	r3, [r7, #0]
 801c3a8:	2200      	movs	r2, #0
 801c3aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801c3ac:	683b      	ldr	r3, [r7, #0]
 801c3ae:	785b      	ldrb	r3, [r3, #1]
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d000      	beq.n	801c3b6 <USB_EPStartXfer+0x292>
 801c3b4:	e070      	b.n	801c498 <USB_EPStartXfer+0x374>
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	61bb      	str	r3, [r7, #24]
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	2250      	movs	r2, #80	@ 0x50
 801c3be:	5a9b      	ldrh	r3, [r3, r2]
 801c3c0:	b29b      	uxth	r3, r3
 801c3c2:	001a      	movs	r2, r3
 801c3c4:	69bb      	ldr	r3, [r7, #24]
 801c3c6:	189b      	adds	r3, r3, r2
 801c3c8:	61bb      	str	r3, [r7, #24]
 801c3ca:	683b      	ldr	r3, [r7, #0]
 801c3cc:	781b      	ldrb	r3, [r3, #0]
 801c3ce:	00da      	lsls	r2, r3, #3
 801c3d0:	69bb      	ldr	r3, [r7, #24]
 801c3d2:	18d3      	adds	r3, r2, r3
 801c3d4:	4a48      	ldr	r2, [pc, #288]	@ (801c4f8 <USB_EPStartXfer+0x3d4>)
 801c3d6:	4694      	mov	ip, r2
 801c3d8:	4463      	add	r3, ip
 801c3da:	617b      	str	r3, [r7, #20]
 801c3dc:	697b      	ldr	r3, [r7, #20]
 801c3de:	881b      	ldrh	r3, [r3, #0]
 801c3e0:	b29b      	uxth	r3, r3
 801c3e2:	059b      	lsls	r3, r3, #22
 801c3e4:	0d9b      	lsrs	r3, r3, #22
 801c3e6:	b29a      	uxth	r2, r3
 801c3e8:	697b      	ldr	r3, [r7, #20]
 801c3ea:	801a      	strh	r2, [r3, #0]
 801c3ec:	1d7b      	adds	r3, r7, #5
 801c3ee:	33ff      	adds	r3, #255	@ 0xff
 801c3f0:	681b      	ldr	r3, [r3, #0]
 801c3f2:	2b3e      	cmp	r3, #62	@ 0x3e
 801c3f4:	d922      	bls.n	801c43c <USB_EPStartXfer+0x318>
 801c3f6:	1d7b      	adds	r3, r7, #5
 801c3f8:	33ff      	adds	r3, #255	@ 0xff
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	095b      	lsrs	r3, r3, #5
 801c3fe:	21fc      	movs	r1, #252	@ 0xfc
 801c400:	187a      	adds	r2, r7, r1
 801c402:	6013      	str	r3, [r2, #0]
 801c404:	1d7b      	adds	r3, r7, #5
 801c406:	33ff      	adds	r3, #255	@ 0xff
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	221f      	movs	r2, #31
 801c40c:	4013      	ands	r3, r2
 801c40e:	d104      	bne.n	801c41a <USB_EPStartXfer+0x2f6>
 801c410:	187b      	adds	r3, r7, r1
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	3b01      	subs	r3, #1
 801c416:	187a      	adds	r2, r7, r1
 801c418:	6013      	str	r3, [r2, #0]
 801c41a:	697b      	ldr	r3, [r7, #20]
 801c41c:	881b      	ldrh	r3, [r3, #0]
 801c41e:	b29a      	uxth	r2, r3
 801c420:	23fc      	movs	r3, #252	@ 0xfc
 801c422:	18fb      	adds	r3, r7, r3
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	b29b      	uxth	r3, r3
 801c428:	029b      	lsls	r3, r3, #10
 801c42a:	b29b      	uxth	r3, r3
 801c42c:	4313      	orrs	r3, r2
 801c42e:	b29b      	uxth	r3, r3
 801c430:	4a35      	ldr	r2, [pc, #212]	@ (801c508 <USB_EPStartXfer+0x3e4>)
 801c432:	4313      	orrs	r3, r2
 801c434:	b29a      	uxth	r2, r3
 801c436:	697b      	ldr	r3, [r7, #20]
 801c438:	801a      	strh	r2, [r3, #0]
 801c43a:	e04a      	b.n	801c4d2 <USB_EPStartXfer+0x3ae>
 801c43c:	1d7b      	adds	r3, r7, #5
 801c43e:	33ff      	adds	r3, #255	@ 0xff
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	2b00      	cmp	r3, #0
 801c444:	d108      	bne.n	801c458 <USB_EPStartXfer+0x334>
 801c446:	697b      	ldr	r3, [r7, #20]
 801c448:	881b      	ldrh	r3, [r3, #0]
 801c44a:	b29b      	uxth	r3, r3
 801c44c:	4a2e      	ldr	r2, [pc, #184]	@ (801c508 <USB_EPStartXfer+0x3e4>)
 801c44e:	4313      	orrs	r3, r2
 801c450:	b29a      	uxth	r2, r3
 801c452:	697b      	ldr	r3, [r7, #20]
 801c454:	801a      	strh	r2, [r3, #0]
 801c456:	e03c      	b.n	801c4d2 <USB_EPStartXfer+0x3ae>
 801c458:	1d7b      	adds	r3, r7, #5
 801c45a:	33ff      	adds	r3, #255	@ 0xff
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	085b      	lsrs	r3, r3, #1
 801c460:	21fc      	movs	r1, #252	@ 0xfc
 801c462:	187a      	adds	r2, r7, r1
 801c464:	6013      	str	r3, [r2, #0]
 801c466:	1d7b      	adds	r3, r7, #5
 801c468:	33ff      	adds	r3, #255	@ 0xff
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	2201      	movs	r2, #1
 801c46e:	4013      	ands	r3, r2
 801c470:	d004      	beq.n	801c47c <USB_EPStartXfer+0x358>
 801c472:	187b      	adds	r3, r7, r1
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	3301      	adds	r3, #1
 801c478:	187a      	adds	r2, r7, r1
 801c47a:	6013      	str	r3, [r2, #0]
 801c47c:	697b      	ldr	r3, [r7, #20]
 801c47e:	881b      	ldrh	r3, [r3, #0]
 801c480:	b29a      	uxth	r2, r3
 801c482:	23fc      	movs	r3, #252	@ 0xfc
 801c484:	18fb      	adds	r3, r7, r3
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	b29b      	uxth	r3, r3
 801c48a:	029b      	lsls	r3, r3, #10
 801c48c:	b29b      	uxth	r3, r3
 801c48e:	4313      	orrs	r3, r2
 801c490:	b29a      	uxth	r2, r3
 801c492:	697b      	ldr	r3, [r7, #20]
 801c494:	801a      	strh	r2, [r3, #0]
 801c496:	e01c      	b.n	801c4d2 <USB_EPStartXfer+0x3ae>
 801c498:	683b      	ldr	r3, [r7, #0]
 801c49a:	785b      	ldrb	r3, [r3, #1]
 801c49c:	2b01      	cmp	r3, #1
 801c49e:	d118      	bne.n	801c4d2 <USB_EPStartXfer+0x3ae>
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	623b      	str	r3, [r7, #32]
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	2250      	movs	r2, #80	@ 0x50
 801c4a8:	5a9b      	ldrh	r3, [r3, r2]
 801c4aa:	b29b      	uxth	r3, r3
 801c4ac:	001a      	movs	r2, r3
 801c4ae:	6a3b      	ldr	r3, [r7, #32]
 801c4b0:	189b      	adds	r3, r3, r2
 801c4b2:	623b      	str	r3, [r7, #32]
 801c4b4:	683b      	ldr	r3, [r7, #0]
 801c4b6:	781b      	ldrb	r3, [r3, #0]
 801c4b8:	00da      	lsls	r2, r3, #3
 801c4ba:	6a3b      	ldr	r3, [r7, #32]
 801c4bc:	18d3      	adds	r3, r2, r3
 801c4be:	4a0e      	ldr	r2, [pc, #56]	@ (801c4f8 <USB_EPStartXfer+0x3d4>)
 801c4c0:	4694      	mov	ip, r2
 801c4c2:	4463      	add	r3, ip
 801c4c4:	61fb      	str	r3, [r7, #28]
 801c4c6:	1d7b      	adds	r3, r7, #5
 801c4c8:	33ff      	adds	r3, #255	@ 0xff
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	b29a      	uxth	r2, r3
 801c4ce:	69fb      	ldr	r3, [r7, #28]
 801c4d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801c4d2:	2076      	movs	r0, #118	@ 0x76
 801c4d4:	183b      	adds	r3, r7, r0
 801c4d6:	683a      	ldr	r2, [r7, #0]
 801c4d8:	8912      	ldrh	r2, [r2, #8]
 801c4da:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c4dc:	683b      	ldr	r3, [r7, #0]
 801c4de:	6959      	ldr	r1, [r3, #20]
 801c4e0:	1d7b      	adds	r3, r7, #5
 801c4e2:	33ff      	adds	r3, #255	@ 0xff
 801c4e4:	681b      	ldr	r3, [r3, #0]
 801c4e6:	b29c      	uxth	r4, r3
 801c4e8:	183b      	adds	r3, r7, r0
 801c4ea:	881a      	ldrh	r2, [r3, #0]
 801c4ec:	6878      	ldr	r0, [r7, #4]
 801c4ee:	0023      	movs	r3, r4
 801c4f0:	f001 f88a 	bl	801d608 <USB_WritePMA>
 801c4f4:	e329      	b.n	801cb4a <USB_EPStartXfer+0xa26>
 801c4f6:	46c0      	nop			@ (mov r8, r8)
 801c4f8:	00000402 	.word	0x00000402
 801c4fc:	ffff8f8f 	.word	0xffff8f8f
 801c500:	ffff8180 	.word	0xffff8180
 801c504:	00000406 	.word	0x00000406
 801c508:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801c50c:	683b      	ldr	r3, [r7, #0]
 801c50e:	785b      	ldrb	r3, [r3, #1]
 801c510:	2b00      	cmp	r3, #0
 801c512:	d000      	beq.n	801c516 <USB_EPStartXfer+0x3f2>
 801c514:	e070      	b.n	801c5f8 <USB_EPStartXfer+0x4d4>
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	2250      	movs	r2, #80	@ 0x50
 801c51e:	5a9b      	ldrh	r3, [r3, r2]
 801c520:	b29b      	uxth	r3, r3
 801c522:	001a      	movs	r2, r3
 801c524:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c526:	189b      	adds	r3, r3, r2
 801c528:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c52a:	683b      	ldr	r3, [r7, #0]
 801c52c:	781b      	ldrb	r3, [r3, #0]
 801c52e:	00da      	lsls	r2, r3, #3
 801c530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c532:	18d3      	adds	r3, r2, r3
 801c534:	4acd      	ldr	r2, [pc, #820]	@ (801c86c <USB_EPStartXfer+0x748>)
 801c536:	4694      	mov	ip, r2
 801c538:	4463      	add	r3, ip
 801c53a:	647b      	str	r3, [r7, #68]	@ 0x44
 801c53c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c53e:	881b      	ldrh	r3, [r3, #0]
 801c540:	b29b      	uxth	r3, r3
 801c542:	059b      	lsls	r3, r3, #22
 801c544:	0d9b      	lsrs	r3, r3, #22
 801c546:	b29a      	uxth	r2, r3
 801c548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c54a:	801a      	strh	r2, [r3, #0]
 801c54c:	1d7b      	adds	r3, r7, #5
 801c54e:	33ff      	adds	r3, #255	@ 0xff
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	2b3e      	cmp	r3, #62	@ 0x3e
 801c554:	d922      	bls.n	801c59c <USB_EPStartXfer+0x478>
 801c556:	1d7b      	adds	r3, r7, #5
 801c558:	33ff      	adds	r3, #255	@ 0xff
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	095b      	lsrs	r3, r3, #5
 801c55e:	21f8      	movs	r1, #248	@ 0xf8
 801c560:	187a      	adds	r2, r7, r1
 801c562:	6013      	str	r3, [r2, #0]
 801c564:	1d7b      	adds	r3, r7, #5
 801c566:	33ff      	adds	r3, #255	@ 0xff
 801c568:	681b      	ldr	r3, [r3, #0]
 801c56a:	221f      	movs	r2, #31
 801c56c:	4013      	ands	r3, r2
 801c56e:	d104      	bne.n	801c57a <USB_EPStartXfer+0x456>
 801c570:	187b      	adds	r3, r7, r1
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	3b01      	subs	r3, #1
 801c576:	187a      	adds	r2, r7, r1
 801c578:	6013      	str	r3, [r2, #0]
 801c57a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c57c:	881b      	ldrh	r3, [r3, #0]
 801c57e:	b29a      	uxth	r2, r3
 801c580:	23f8      	movs	r3, #248	@ 0xf8
 801c582:	18fb      	adds	r3, r7, r3
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	b29b      	uxth	r3, r3
 801c588:	029b      	lsls	r3, r3, #10
 801c58a:	b29b      	uxth	r3, r3
 801c58c:	4313      	orrs	r3, r2
 801c58e:	b29b      	uxth	r3, r3
 801c590:	4ab7      	ldr	r2, [pc, #732]	@ (801c870 <USB_EPStartXfer+0x74c>)
 801c592:	4313      	orrs	r3, r2
 801c594:	b29a      	uxth	r2, r3
 801c596:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c598:	801a      	strh	r2, [r3, #0]
 801c59a:	e04a      	b.n	801c632 <USB_EPStartXfer+0x50e>
 801c59c:	1d7b      	adds	r3, r7, #5
 801c59e:	33ff      	adds	r3, #255	@ 0xff
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	d108      	bne.n	801c5b8 <USB_EPStartXfer+0x494>
 801c5a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c5a8:	881b      	ldrh	r3, [r3, #0]
 801c5aa:	b29b      	uxth	r3, r3
 801c5ac:	4ab0      	ldr	r2, [pc, #704]	@ (801c870 <USB_EPStartXfer+0x74c>)
 801c5ae:	4313      	orrs	r3, r2
 801c5b0:	b29a      	uxth	r2, r3
 801c5b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c5b4:	801a      	strh	r2, [r3, #0]
 801c5b6:	e03c      	b.n	801c632 <USB_EPStartXfer+0x50e>
 801c5b8:	1d7b      	adds	r3, r7, #5
 801c5ba:	33ff      	adds	r3, #255	@ 0xff
 801c5bc:	681b      	ldr	r3, [r3, #0]
 801c5be:	085b      	lsrs	r3, r3, #1
 801c5c0:	21f8      	movs	r1, #248	@ 0xf8
 801c5c2:	187a      	adds	r2, r7, r1
 801c5c4:	6013      	str	r3, [r2, #0]
 801c5c6:	1d7b      	adds	r3, r7, #5
 801c5c8:	33ff      	adds	r3, #255	@ 0xff
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	2201      	movs	r2, #1
 801c5ce:	4013      	ands	r3, r2
 801c5d0:	d004      	beq.n	801c5dc <USB_EPStartXfer+0x4b8>
 801c5d2:	187b      	adds	r3, r7, r1
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	3301      	adds	r3, #1
 801c5d8:	187a      	adds	r2, r7, r1
 801c5da:	6013      	str	r3, [r2, #0]
 801c5dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c5de:	881b      	ldrh	r3, [r3, #0]
 801c5e0:	b29a      	uxth	r2, r3
 801c5e2:	23f8      	movs	r3, #248	@ 0xf8
 801c5e4:	18fb      	adds	r3, r7, r3
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	b29b      	uxth	r3, r3
 801c5ea:	029b      	lsls	r3, r3, #10
 801c5ec:	b29b      	uxth	r3, r3
 801c5ee:	4313      	orrs	r3, r2
 801c5f0:	b29a      	uxth	r2, r3
 801c5f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c5f4:	801a      	strh	r2, [r3, #0]
 801c5f6:	e01c      	b.n	801c632 <USB_EPStartXfer+0x50e>
 801c5f8:	683b      	ldr	r3, [r7, #0]
 801c5fa:	785b      	ldrb	r3, [r3, #1]
 801c5fc:	2b01      	cmp	r3, #1
 801c5fe:	d118      	bne.n	801c632 <USB_EPStartXfer+0x50e>
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	653b      	str	r3, [r7, #80]	@ 0x50
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	2250      	movs	r2, #80	@ 0x50
 801c608:	5a9b      	ldrh	r3, [r3, r2]
 801c60a:	b29b      	uxth	r3, r3
 801c60c:	001a      	movs	r2, r3
 801c60e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c610:	189b      	adds	r3, r3, r2
 801c612:	653b      	str	r3, [r7, #80]	@ 0x50
 801c614:	683b      	ldr	r3, [r7, #0]
 801c616:	781b      	ldrb	r3, [r3, #0]
 801c618:	00da      	lsls	r2, r3, #3
 801c61a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c61c:	18d3      	adds	r3, r2, r3
 801c61e:	4a93      	ldr	r2, [pc, #588]	@ (801c86c <USB_EPStartXfer+0x748>)
 801c620:	4694      	mov	ip, r2
 801c622:	4463      	add	r3, ip
 801c624:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801c626:	1d7b      	adds	r3, r7, #5
 801c628:	33ff      	adds	r3, #255	@ 0xff
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	b29a      	uxth	r2, r3
 801c62e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c630:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801c632:	2076      	movs	r0, #118	@ 0x76
 801c634:	183b      	adds	r3, r7, r0
 801c636:	683a      	ldr	r2, [r7, #0]
 801c638:	8912      	ldrh	r2, [r2, #8]
 801c63a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c63c:	683b      	ldr	r3, [r7, #0]
 801c63e:	6959      	ldr	r1, [r3, #20]
 801c640:	1d7b      	adds	r3, r7, #5
 801c642:	33ff      	adds	r3, #255	@ 0xff
 801c644:	681b      	ldr	r3, [r3, #0]
 801c646:	b29c      	uxth	r4, r3
 801c648:	183b      	adds	r3, r7, r0
 801c64a:	881a      	ldrh	r2, [r3, #0]
 801c64c:	6878      	ldr	r0, [r7, #4]
 801c64e:	0023      	movs	r3, r4
 801c650:	f000 ffda 	bl	801d608 <USB_WritePMA>
            ep->xfer_buff += len;
 801c654:	683b      	ldr	r3, [r7, #0]
 801c656:	695a      	ldr	r2, [r3, #20]
 801c658:	1d7b      	adds	r3, r7, #5
 801c65a:	33ff      	adds	r3, #255	@ 0xff
 801c65c:	681b      	ldr	r3, [r3, #0]
 801c65e:	18d2      	adds	r2, r2, r3
 801c660:	683b      	ldr	r3, [r7, #0]
 801c662:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801c664:	683b      	ldr	r3, [r7, #0]
 801c666:	6a1a      	ldr	r2, [r3, #32]
 801c668:	683b      	ldr	r3, [r7, #0]
 801c66a:	691b      	ldr	r3, [r3, #16]
 801c66c:	429a      	cmp	r2, r3
 801c66e:	d908      	bls.n	801c682 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801c670:	683b      	ldr	r3, [r7, #0]
 801c672:	6a1a      	ldr	r2, [r3, #32]
 801c674:	1d7b      	adds	r3, r7, #5
 801c676:	33ff      	adds	r3, #255	@ 0xff
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	1ad2      	subs	r2, r2, r3
 801c67c:	683b      	ldr	r3, [r7, #0]
 801c67e:	621a      	str	r2, [r3, #32]
 801c680:	e007      	b.n	801c692 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801c682:	683b      	ldr	r3, [r7, #0]
 801c684:	6a1b      	ldr	r3, [r3, #32]
 801c686:	1d7a      	adds	r2, r7, #5
 801c688:	32ff      	adds	r2, #255	@ 0xff
 801c68a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801c68c:	683b      	ldr	r3, [r7, #0]
 801c68e:	2200      	movs	r2, #0
 801c690:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	643b      	str	r3, [r7, #64]	@ 0x40
 801c696:	683b      	ldr	r3, [r7, #0]
 801c698:	785b      	ldrb	r3, [r3, #1]
 801c69a:	2b00      	cmp	r3, #0
 801c69c:	d000      	beq.n	801c6a0 <USB_EPStartXfer+0x57c>
 801c69e:	e070      	b.n	801c782 <USB_EPStartXfer+0x65e>
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	2250      	movs	r2, #80	@ 0x50
 801c6a8:	5a9b      	ldrh	r3, [r3, r2]
 801c6aa:	b29b      	uxth	r3, r3
 801c6ac:	001a      	movs	r2, r3
 801c6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6b0:	189b      	adds	r3, r3, r2
 801c6b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c6b4:	683b      	ldr	r3, [r7, #0]
 801c6b6:	781b      	ldrb	r3, [r3, #0]
 801c6b8:	00da      	lsls	r2, r3, #3
 801c6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6bc:	18d3      	adds	r3, r2, r3
 801c6be:	4a6d      	ldr	r2, [pc, #436]	@ (801c874 <USB_EPStartXfer+0x750>)
 801c6c0:	4694      	mov	ip, r2
 801c6c2:	4463      	add	r3, ip
 801c6c4:	637b      	str	r3, [r7, #52]	@ 0x34
 801c6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c6c8:	881b      	ldrh	r3, [r3, #0]
 801c6ca:	b29b      	uxth	r3, r3
 801c6cc:	059b      	lsls	r3, r3, #22
 801c6ce:	0d9b      	lsrs	r3, r3, #22
 801c6d0:	b29a      	uxth	r2, r3
 801c6d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c6d4:	801a      	strh	r2, [r3, #0]
 801c6d6:	1d7b      	adds	r3, r7, #5
 801c6d8:	33ff      	adds	r3, #255	@ 0xff
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	2b3e      	cmp	r3, #62	@ 0x3e
 801c6de:	d922      	bls.n	801c726 <USB_EPStartXfer+0x602>
 801c6e0:	1d7b      	adds	r3, r7, #5
 801c6e2:	33ff      	adds	r3, #255	@ 0xff
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	095b      	lsrs	r3, r3, #5
 801c6e8:	21f4      	movs	r1, #244	@ 0xf4
 801c6ea:	187a      	adds	r2, r7, r1
 801c6ec:	6013      	str	r3, [r2, #0]
 801c6ee:	1d7b      	adds	r3, r7, #5
 801c6f0:	33ff      	adds	r3, #255	@ 0xff
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	221f      	movs	r2, #31
 801c6f6:	4013      	ands	r3, r2
 801c6f8:	d104      	bne.n	801c704 <USB_EPStartXfer+0x5e0>
 801c6fa:	187b      	adds	r3, r7, r1
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	3b01      	subs	r3, #1
 801c700:	187a      	adds	r2, r7, r1
 801c702:	6013      	str	r3, [r2, #0]
 801c704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c706:	881b      	ldrh	r3, [r3, #0]
 801c708:	b29a      	uxth	r2, r3
 801c70a:	23f4      	movs	r3, #244	@ 0xf4
 801c70c:	18fb      	adds	r3, r7, r3
 801c70e:	681b      	ldr	r3, [r3, #0]
 801c710:	b29b      	uxth	r3, r3
 801c712:	029b      	lsls	r3, r3, #10
 801c714:	b29b      	uxth	r3, r3
 801c716:	4313      	orrs	r3, r2
 801c718:	b29b      	uxth	r3, r3
 801c71a:	4a55      	ldr	r2, [pc, #340]	@ (801c870 <USB_EPStartXfer+0x74c>)
 801c71c:	4313      	orrs	r3, r2
 801c71e:	b29a      	uxth	r2, r3
 801c720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c722:	801a      	strh	r2, [r3, #0]
 801c724:	e048      	b.n	801c7b8 <USB_EPStartXfer+0x694>
 801c726:	1d7b      	adds	r3, r7, #5
 801c728:	33ff      	adds	r3, #255	@ 0xff
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	d108      	bne.n	801c742 <USB_EPStartXfer+0x61e>
 801c730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c732:	881b      	ldrh	r3, [r3, #0]
 801c734:	b29b      	uxth	r3, r3
 801c736:	4a4e      	ldr	r2, [pc, #312]	@ (801c870 <USB_EPStartXfer+0x74c>)
 801c738:	4313      	orrs	r3, r2
 801c73a:	b29a      	uxth	r2, r3
 801c73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c73e:	801a      	strh	r2, [r3, #0]
 801c740:	e03a      	b.n	801c7b8 <USB_EPStartXfer+0x694>
 801c742:	1d7b      	adds	r3, r7, #5
 801c744:	33ff      	adds	r3, #255	@ 0xff
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	085b      	lsrs	r3, r3, #1
 801c74a:	21f4      	movs	r1, #244	@ 0xf4
 801c74c:	187a      	adds	r2, r7, r1
 801c74e:	6013      	str	r3, [r2, #0]
 801c750:	1d7b      	adds	r3, r7, #5
 801c752:	33ff      	adds	r3, #255	@ 0xff
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	2201      	movs	r2, #1
 801c758:	4013      	ands	r3, r2
 801c75a:	d004      	beq.n	801c766 <USB_EPStartXfer+0x642>
 801c75c:	187b      	adds	r3, r7, r1
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	3301      	adds	r3, #1
 801c762:	187a      	adds	r2, r7, r1
 801c764:	6013      	str	r3, [r2, #0]
 801c766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c768:	881b      	ldrh	r3, [r3, #0]
 801c76a:	b29a      	uxth	r2, r3
 801c76c:	23f4      	movs	r3, #244	@ 0xf4
 801c76e:	18fb      	adds	r3, r7, r3
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	b29b      	uxth	r3, r3
 801c774:	029b      	lsls	r3, r3, #10
 801c776:	b29b      	uxth	r3, r3
 801c778:	4313      	orrs	r3, r2
 801c77a:	b29a      	uxth	r2, r3
 801c77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c77e:	801a      	strh	r2, [r3, #0]
 801c780:	e01a      	b.n	801c7b8 <USB_EPStartXfer+0x694>
 801c782:	683b      	ldr	r3, [r7, #0]
 801c784:	785b      	ldrb	r3, [r3, #1]
 801c786:	2b01      	cmp	r3, #1
 801c788:	d116      	bne.n	801c7b8 <USB_EPStartXfer+0x694>
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	2250      	movs	r2, #80	@ 0x50
 801c78e:	5a9b      	ldrh	r3, [r3, r2]
 801c790:	b29b      	uxth	r3, r3
 801c792:	001a      	movs	r2, r3
 801c794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c796:	189b      	adds	r3, r3, r2
 801c798:	643b      	str	r3, [r7, #64]	@ 0x40
 801c79a:	683b      	ldr	r3, [r7, #0]
 801c79c:	781b      	ldrb	r3, [r3, #0]
 801c79e:	00da      	lsls	r2, r3, #3
 801c7a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7a2:	18d3      	adds	r3, r2, r3
 801c7a4:	4a33      	ldr	r2, [pc, #204]	@ (801c874 <USB_EPStartXfer+0x750>)
 801c7a6:	4694      	mov	ip, r2
 801c7a8:	4463      	add	r3, ip
 801c7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c7ac:	1d7b      	adds	r3, r7, #5
 801c7ae:	33ff      	adds	r3, #255	@ 0xff
 801c7b0:	681b      	ldr	r3, [r3, #0]
 801c7b2:	b29a      	uxth	r2, r3
 801c7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c7b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801c7b8:	2076      	movs	r0, #118	@ 0x76
 801c7ba:	183b      	adds	r3, r7, r0
 801c7bc:	683a      	ldr	r2, [r7, #0]
 801c7be:	8952      	ldrh	r2, [r2, #10]
 801c7c0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c7c2:	683b      	ldr	r3, [r7, #0]
 801c7c4:	6959      	ldr	r1, [r3, #20]
 801c7c6:	1d7b      	adds	r3, r7, #5
 801c7c8:	33ff      	adds	r3, #255	@ 0xff
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	b29c      	uxth	r4, r3
 801c7ce:	183b      	adds	r3, r7, r0
 801c7d0:	881a      	ldrh	r2, [r3, #0]
 801c7d2:	6878      	ldr	r0, [r7, #4]
 801c7d4:	0023      	movs	r3, r4
 801c7d6:	f000 ff17 	bl	801d608 <USB_WritePMA>
 801c7da:	e1b6      	b.n	801cb4a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801c7dc:	683b      	ldr	r3, [r7, #0]
 801c7de:	6a1b      	ldr	r3, [r3, #32]
 801c7e0:	1d7a      	adds	r2, r7, #5
 801c7e2:	32ff      	adds	r2, #255	@ 0xff
 801c7e4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801c7e6:	687a      	ldr	r2, [r7, #4]
 801c7e8:	683b      	ldr	r3, [r7, #0]
 801c7ea:	781b      	ldrb	r3, [r3, #0]
 801c7ec:	009b      	lsls	r3, r3, #2
 801c7ee:	18d3      	adds	r3, r2, r3
 801c7f0:	881b      	ldrh	r3, [r3, #0]
 801c7f2:	b29a      	uxth	r2, r3
 801c7f4:	2062      	movs	r0, #98	@ 0x62
 801c7f6:	183b      	adds	r3, r7, r0
 801c7f8:	491f      	ldr	r1, [pc, #124]	@ (801c878 <USB_EPStartXfer+0x754>)
 801c7fa:	400a      	ands	r2, r1
 801c7fc:	801a      	strh	r2, [r3, #0]
 801c7fe:	687a      	ldr	r2, [r7, #4]
 801c800:	683b      	ldr	r3, [r7, #0]
 801c802:	781b      	ldrb	r3, [r3, #0]
 801c804:	009b      	lsls	r3, r3, #2
 801c806:	18d3      	adds	r3, r2, r3
 801c808:	183a      	adds	r2, r7, r0
 801c80a:	8812      	ldrh	r2, [r2, #0]
 801c80c:	491b      	ldr	r1, [pc, #108]	@ (801c87c <USB_EPStartXfer+0x758>)
 801c80e:	430a      	orrs	r2, r1
 801c810:	b292      	uxth	r2, r2
 801c812:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	2250      	movs	r2, #80	@ 0x50
 801c81c:	5a9b      	ldrh	r3, [r3, r2]
 801c81e:	b29b      	uxth	r3, r3
 801c820:	001a      	movs	r2, r3
 801c822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c824:	189b      	adds	r3, r3, r2
 801c826:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801c828:	683b      	ldr	r3, [r7, #0]
 801c82a:	781b      	ldrb	r3, [r3, #0]
 801c82c:	00da      	lsls	r2, r3, #3
 801c82e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c830:	18d3      	adds	r3, r2, r3
 801c832:	4a0e      	ldr	r2, [pc, #56]	@ (801c86c <USB_EPStartXfer+0x748>)
 801c834:	4694      	mov	ip, r2
 801c836:	4463      	add	r3, ip
 801c838:	65bb      	str	r3, [r7, #88]	@ 0x58
 801c83a:	1d7b      	adds	r3, r7, #5
 801c83c:	33ff      	adds	r3, #255	@ 0xff
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	b29a      	uxth	r2, r3
 801c842:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c844:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801c846:	2076      	movs	r0, #118	@ 0x76
 801c848:	183b      	adds	r3, r7, r0
 801c84a:	683a      	ldr	r2, [r7, #0]
 801c84c:	8912      	ldrh	r2, [r2, #8]
 801c84e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c850:	683b      	ldr	r3, [r7, #0]
 801c852:	6959      	ldr	r1, [r3, #20]
 801c854:	1d7b      	adds	r3, r7, #5
 801c856:	33ff      	adds	r3, #255	@ 0xff
 801c858:	681b      	ldr	r3, [r3, #0]
 801c85a:	b29c      	uxth	r4, r3
 801c85c:	183b      	adds	r3, r7, r0
 801c85e:	881a      	ldrh	r2, [r3, #0]
 801c860:	6878      	ldr	r0, [r7, #4]
 801c862:	0023      	movs	r3, r4
 801c864:	f000 fed0 	bl	801d608 <USB_WritePMA>
 801c868:	e16f      	b.n	801cb4a <USB_EPStartXfer+0xa26>
 801c86a:	46c0      	nop			@ (mov r8, r8)
 801c86c:	00000402 	.word	0x00000402
 801c870:	ffff8000 	.word	0xffff8000
 801c874:	00000406 	.word	0x00000406
 801c878:	ffff8e8f 	.word	0xffff8e8f
 801c87c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801c880:	683b      	ldr	r3, [r7, #0]
 801c882:	6a1a      	ldr	r2, [r3, #32]
 801c884:	1d7b      	adds	r3, r7, #5
 801c886:	33ff      	adds	r3, #255	@ 0xff
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	1ad2      	subs	r2, r2, r3
 801c88c:	683b      	ldr	r3, [r7, #0]
 801c88e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801c890:	687a      	ldr	r2, [r7, #4]
 801c892:	683b      	ldr	r3, [r7, #0]
 801c894:	781b      	ldrb	r3, [r3, #0]
 801c896:	009b      	lsls	r3, r3, #2
 801c898:	18d3      	adds	r3, r2, r3
 801c89a:	881b      	ldrh	r3, [r3, #0]
 801c89c:	b29b      	uxth	r3, r3
 801c89e:	001a      	movs	r2, r3
 801c8a0:	2340      	movs	r3, #64	@ 0x40
 801c8a2:	4013      	ands	r3, r2
 801c8a4:	d100      	bne.n	801c8a8 <USB_EPStartXfer+0x784>
 801c8a6:	e0a4      	b.n	801c9f2 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	673b      	str	r3, [r7, #112]	@ 0x70
 801c8ac:	683b      	ldr	r3, [r7, #0]
 801c8ae:	785b      	ldrb	r3, [r3, #1]
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	d000      	beq.n	801c8b6 <USB_EPStartXfer+0x792>
 801c8b4:	e070      	b.n	801c998 <USB_EPStartXfer+0x874>
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	2250      	movs	r2, #80	@ 0x50
 801c8be:	5a9b      	ldrh	r3, [r3, r2]
 801c8c0:	b29b      	uxth	r3, r3
 801c8c2:	001a      	movs	r2, r3
 801c8c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c8c6:	189b      	adds	r3, r3, r2
 801c8c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801c8ca:	683b      	ldr	r3, [r7, #0]
 801c8cc:	781b      	ldrb	r3, [r3, #0]
 801c8ce:	00da      	lsls	r2, r3, #3
 801c8d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c8d2:	18d3      	adds	r3, r2, r3
 801c8d4:	4abc      	ldr	r2, [pc, #752]	@ (801cbc8 <USB_EPStartXfer+0xaa4>)
 801c8d6:	4694      	mov	ip, r2
 801c8d8:	4463      	add	r3, ip
 801c8da:	667b      	str	r3, [r7, #100]	@ 0x64
 801c8dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c8de:	881b      	ldrh	r3, [r3, #0]
 801c8e0:	b29b      	uxth	r3, r3
 801c8e2:	059b      	lsls	r3, r3, #22
 801c8e4:	0d9b      	lsrs	r3, r3, #22
 801c8e6:	b29a      	uxth	r2, r3
 801c8e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c8ea:	801a      	strh	r2, [r3, #0]
 801c8ec:	1d7b      	adds	r3, r7, #5
 801c8ee:	33ff      	adds	r3, #255	@ 0xff
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	2b3e      	cmp	r3, #62	@ 0x3e
 801c8f4:	d922      	bls.n	801c93c <USB_EPStartXfer+0x818>
 801c8f6:	1d7b      	adds	r3, r7, #5
 801c8f8:	33ff      	adds	r3, #255	@ 0xff
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	095b      	lsrs	r3, r3, #5
 801c8fe:	21f0      	movs	r1, #240	@ 0xf0
 801c900:	187a      	adds	r2, r7, r1
 801c902:	6013      	str	r3, [r2, #0]
 801c904:	1d7b      	adds	r3, r7, #5
 801c906:	33ff      	adds	r3, #255	@ 0xff
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	221f      	movs	r2, #31
 801c90c:	4013      	ands	r3, r2
 801c90e:	d104      	bne.n	801c91a <USB_EPStartXfer+0x7f6>
 801c910:	187b      	adds	r3, r7, r1
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	3b01      	subs	r3, #1
 801c916:	187a      	adds	r2, r7, r1
 801c918:	6013      	str	r3, [r2, #0]
 801c91a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c91c:	881b      	ldrh	r3, [r3, #0]
 801c91e:	b29a      	uxth	r2, r3
 801c920:	23f0      	movs	r3, #240	@ 0xf0
 801c922:	18fb      	adds	r3, r7, r3
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	b29b      	uxth	r3, r3
 801c928:	029b      	lsls	r3, r3, #10
 801c92a:	b29b      	uxth	r3, r3
 801c92c:	4313      	orrs	r3, r2
 801c92e:	b29b      	uxth	r3, r3
 801c930:	4aa6      	ldr	r2, [pc, #664]	@ (801cbcc <USB_EPStartXfer+0xaa8>)
 801c932:	4313      	orrs	r3, r2
 801c934:	b29a      	uxth	r2, r3
 801c936:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c938:	801a      	strh	r2, [r3, #0]
 801c93a:	e048      	b.n	801c9ce <USB_EPStartXfer+0x8aa>
 801c93c:	1d7b      	adds	r3, r7, #5
 801c93e:	33ff      	adds	r3, #255	@ 0xff
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	2b00      	cmp	r3, #0
 801c944:	d108      	bne.n	801c958 <USB_EPStartXfer+0x834>
 801c946:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c948:	881b      	ldrh	r3, [r3, #0]
 801c94a:	b29b      	uxth	r3, r3
 801c94c:	4a9f      	ldr	r2, [pc, #636]	@ (801cbcc <USB_EPStartXfer+0xaa8>)
 801c94e:	4313      	orrs	r3, r2
 801c950:	b29a      	uxth	r2, r3
 801c952:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c954:	801a      	strh	r2, [r3, #0]
 801c956:	e03a      	b.n	801c9ce <USB_EPStartXfer+0x8aa>
 801c958:	1d7b      	adds	r3, r7, #5
 801c95a:	33ff      	adds	r3, #255	@ 0xff
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	085b      	lsrs	r3, r3, #1
 801c960:	21f0      	movs	r1, #240	@ 0xf0
 801c962:	187a      	adds	r2, r7, r1
 801c964:	6013      	str	r3, [r2, #0]
 801c966:	1d7b      	adds	r3, r7, #5
 801c968:	33ff      	adds	r3, #255	@ 0xff
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	2201      	movs	r2, #1
 801c96e:	4013      	ands	r3, r2
 801c970:	d004      	beq.n	801c97c <USB_EPStartXfer+0x858>
 801c972:	187b      	adds	r3, r7, r1
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	3301      	adds	r3, #1
 801c978:	187a      	adds	r2, r7, r1
 801c97a:	6013      	str	r3, [r2, #0]
 801c97c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c97e:	881b      	ldrh	r3, [r3, #0]
 801c980:	b29a      	uxth	r2, r3
 801c982:	23f0      	movs	r3, #240	@ 0xf0
 801c984:	18fb      	adds	r3, r7, r3
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	b29b      	uxth	r3, r3
 801c98a:	029b      	lsls	r3, r3, #10
 801c98c:	b29b      	uxth	r3, r3
 801c98e:	4313      	orrs	r3, r2
 801c990:	b29a      	uxth	r2, r3
 801c992:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c994:	801a      	strh	r2, [r3, #0]
 801c996:	e01a      	b.n	801c9ce <USB_EPStartXfer+0x8aa>
 801c998:	683b      	ldr	r3, [r7, #0]
 801c99a:	785b      	ldrb	r3, [r3, #1]
 801c99c:	2b01      	cmp	r3, #1
 801c99e:	d116      	bne.n	801c9ce <USB_EPStartXfer+0x8aa>
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	2250      	movs	r2, #80	@ 0x50
 801c9a4:	5a9b      	ldrh	r3, [r3, r2]
 801c9a6:	b29b      	uxth	r3, r3
 801c9a8:	001a      	movs	r2, r3
 801c9aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c9ac:	189b      	adds	r3, r3, r2
 801c9ae:	673b      	str	r3, [r7, #112]	@ 0x70
 801c9b0:	683b      	ldr	r3, [r7, #0]
 801c9b2:	781b      	ldrb	r3, [r3, #0]
 801c9b4:	00da      	lsls	r2, r3, #3
 801c9b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c9b8:	18d3      	adds	r3, r2, r3
 801c9ba:	4a83      	ldr	r2, [pc, #524]	@ (801cbc8 <USB_EPStartXfer+0xaa4>)
 801c9bc:	4694      	mov	ip, r2
 801c9be:	4463      	add	r3, ip
 801c9c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801c9c2:	1d7b      	adds	r3, r7, #5
 801c9c4:	33ff      	adds	r3, #255	@ 0xff
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	b29a      	uxth	r2, r3
 801c9ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801c9cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801c9ce:	2076      	movs	r0, #118	@ 0x76
 801c9d0:	183b      	adds	r3, r7, r0
 801c9d2:	683a      	ldr	r2, [r7, #0]
 801c9d4:	8952      	ldrh	r2, [r2, #10]
 801c9d6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c9d8:	683b      	ldr	r3, [r7, #0]
 801c9da:	6959      	ldr	r1, [r3, #20]
 801c9dc:	1d7b      	adds	r3, r7, #5
 801c9de:	33ff      	adds	r3, #255	@ 0xff
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	b29c      	uxth	r4, r3
 801c9e4:	183b      	adds	r3, r7, r0
 801c9e6:	881a      	ldrh	r2, [r3, #0]
 801c9e8:	6878      	ldr	r0, [r7, #4]
 801c9ea:	0023      	movs	r3, r4
 801c9ec:	f000 fe0c 	bl	801d608 <USB_WritePMA>
 801c9f0:	e0ab      	b.n	801cb4a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801c9f2:	683b      	ldr	r3, [r7, #0]
 801c9f4:	785b      	ldrb	r3, [r3, #1]
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d000      	beq.n	801c9fc <USB_EPStartXfer+0x8d8>
 801c9fa:	e070      	b.n	801cade <USB_EPStartXfer+0x9ba>
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	2250      	movs	r2, #80	@ 0x50
 801ca04:	5a9b      	ldrh	r3, [r3, r2]
 801ca06:	b29b      	uxth	r3, r3
 801ca08:	001a      	movs	r2, r3
 801ca0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ca0c:	189b      	adds	r3, r3, r2
 801ca0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ca10:	683b      	ldr	r3, [r7, #0]
 801ca12:	781b      	ldrb	r3, [r3, #0]
 801ca14:	00da      	lsls	r2, r3, #3
 801ca16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ca18:	18d3      	adds	r3, r2, r3
 801ca1a:	4a6d      	ldr	r2, [pc, #436]	@ (801cbd0 <USB_EPStartXfer+0xaac>)
 801ca1c:	4694      	mov	ip, r2
 801ca1e:	4463      	add	r3, ip
 801ca20:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ca22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ca24:	881b      	ldrh	r3, [r3, #0]
 801ca26:	b29b      	uxth	r3, r3
 801ca28:	059b      	lsls	r3, r3, #22
 801ca2a:	0d9b      	lsrs	r3, r3, #22
 801ca2c:	b29a      	uxth	r2, r3
 801ca2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ca30:	801a      	strh	r2, [r3, #0]
 801ca32:	1d7b      	adds	r3, r7, #5
 801ca34:	33ff      	adds	r3, #255	@ 0xff
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	2b3e      	cmp	r3, #62	@ 0x3e
 801ca3a:	d922      	bls.n	801ca82 <USB_EPStartXfer+0x95e>
 801ca3c:	1d7b      	adds	r3, r7, #5
 801ca3e:	33ff      	adds	r3, #255	@ 0xff
 801ca40:	681b      	ldr	r3, [r3, #0]
 801ca42:	095b      	lsrs	r3, r3, #5
 801ca44:	21ec      	movs	r1, #236	@ 0xec
 801ca46:	187a      	adds	r2, r7, r1
 801ca48:	6013      	str	r3, [r2, #0]
 801ca4a:	1d7b      	adds	r3, r7, #5
 801ca4c:	33ff      	adds	r3, #255	@ 0xff
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	221f      	movs	r2, #31
 801ca52:	4013      	ands	r3, r2
 801ca54:	d104      	bne.n	801ca60 <USB_EPStartXfer+0x93c>
 801ca56:	187b      	adds	r3, r7, r1
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	3b01      	subs	r3, #1
 801ca5c:	187a      	adds	r2, r7, r1
 801ca5e:	6013      	str	r3, [r2, #0]
 801ca60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ca62:	881b      	ldrh	r3, [r3, #0]
 801ca64:	b29a      	uxth	r2, r3
 801ca66:	23ec      	movs	r3, #236	@ 0xec
 801ca68:	18fb      	adds	r3, r7, r3
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	b29b      	uxth	r3, r3
 801ca6e:	029b      	lsls	r3, r3, #10
 801ca70:	b29b      	uxth	r3, r3
 801ca72:	4313      	orrs	r3, r2
 801ca74:	b29b      	uxth	r3, r3
 801ca76:	4a55      	ldr	r2, [pc, #340]	@ (801cbcc <USB_EPStartXfer+0xaa8>)
 801ca78:	4313      	orrs	r3, r2
 801ca7a:	b29a      	uxth	r2, r3
 801ca7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ca7e:	801a      	strh	r2, [r3, #0]
 801ca80:	e052      	b.n	801cb28 <USB_EPStartXfer+0xa04>
 801ca82:	1d7b      	adds	r3, r7, #5
 801ca84:	33ff      	adds	r3, #255	@ 0xff
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d108      	bne.n	801ca9e <USB_EPStartXfer+0x97a>
 801ca8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ca8e:	881b      	ldrh	r3, [r3, #0]
 801ca90:	b29b      	uxth	r3, r3
 801ca92:	4a4e      	ldr	r2, [pc, #312]	@ (801cbcc <USB_EPStartXfer+0xaa8>)
 801ca94:	4313      	orrs	r3, r2
 801ca96:	b29a      	uxth	r2, r3
 801ca98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ca9a:	801a      	strh	r2, [r3, #0]
 801ca9c:	e044      	b.n	801cb28 <USB_EPStartXfer+0xa04>
 801ca9e:	1d7b      	adds	r3, r7, #5
 801caa0:	33ff      	adds	r3, #255	@ 0xff
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	085b      	lsrs	r3, r3, #1
 801caa6:	21ec      	movs	r1, #236	@ 0xec
 801caa8:	187a      	adds	r2, r7, r1
 801caaa:	6013      	str	r3, [r2, #0]
 801caac:	1d7b      	adds	r3, r7, #5
 801caae:	33ff      	adds	r3, #255	@ 0xff
 801cab0:	681b      	ldr	r3, [r3, #0]
 801cab2:	2201      	movs	r2, #1
 801cab4:	4013      	ands	r3, r2
 801cab6:	d004      	beq.n	801cac2 <USB_EPStartXfer+0x99e>
 801cab8:	187b      	adds	r3, r7, r1
 801caba:	681b      	ldr	r3, [r3, #0]
 801cabc:	3301      	adds	r3, #1
 801cabe:	187a      	adds	r2, r7, r1
 801cac0:	6013      	str	r3, [r2, #0]
 801cac2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cac4:	881b      	ldrh	r3, [r3, #0]
 801cac6:	b29a      	uxth	r2, r3
 801cac8:	23ec      	movs	r3, #236	@ 0xec
 801caca:	18fb      	adds	r3, r7, r3
 801cacc:	681b      	ldr	r3, [r3, #0]
 801cace:	b29b      	uxth	r3, r3
 801cad0:	029b      	lsls	r3, r3, #10
 801cad2:	b29b      	uxth	r3, r3
 801cad4:	4313      	orrs	r3, r2
 801cad6:	b29a      	uxth	r2, r3
 801cad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cada:	801a      	strh	r2, [r3, #0]
 801cadc:	e024      	b.n	801cb28 <USB_EPStartXfer+0xa04>
 801cade:	683b      	ldr	r3, [r7, #0]
 801cae0:	785b      	ldrb	r3, [r3, #1]
 801cae2:	2b01      	cmp	r3, #1
 801cae4:	d120      	bne.n	801cb28 <USB_EPStartXfer+0xa04>
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	2184      	movs	r1, #132	@ 0x84
 801caea:	187a      	adds	r2, r7, r1
 801caec:	6013      	str	r3, [r2, #0]
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	2250      	movs	r2, #80	@ 0x50
 801caf2:	5a9b      	ldrh	r3, [r3, r2]
 801caf4:	b29b      	uxth	r3, r3
 801caf6:	001a      	movs	r2, r3
 801caf8:	187b      	adds	r3, r7, r1
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	189b      	adds	r3, r3, r2
 801cafe:	187a      	adds	r2, r7, r1
 801cb00:	6013      	str	r3, [r2, #0]
 801cb02:	683b      	ldr	r3, [r7, #0]
 801cb04:	781b      	ldrb	r3, [r3, #0]
 801cb06:	00da      	lsls	r2, r3, #3
 801cb08:	187b      	adds	r3, r7, r1
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	18d3      	adds	r3, r2, r3
 801cb0e:	4a30      	ldr	r2, [pc, #192]	@ (801cbd0 <USB_EPStartXfer+0xaac>)
 801cb10:	4694      	mov	ip, r2
 801cb12:	4463      	add	r3, ip
 801cb14:	2180      	movs	r1, #128	@ 0x80
 801cb16:	187a      	adds	r2, r7, r1
 801cb18:	6013      	str	r3, [r2, #0]
 801cb1a:	1d7b      	adds	r3, r7, #5
 801cb1c:	33ff      	adds	r3, #255	@ 0xff
 801cb1e:	681b      	ldr	r3, [r3, #0]
 801cb20:	b29a      	uxth	r2, r3
 801cb22:	187b      	adds	r3, r7, r1
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801cb28:	2076      	movs	r0, #118	@ 0x76
 801cb2a:	183b      	adds	r3, r7, r0
 801cb2c:	683a      	ldr	r2, [r7, #0]
 801cb2e:	8912      	ldrh	r2, [r2, #8]
 801cb30:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801cb32:	683b      	ldr	r3, [r7, #0]
 801cb34:	6959      	ldr	r1, [r3, #20]
 801cb36:	1d7b      	adds	r3, r7, #5
 801cb38:	33ff      	adds	r3, #255	@ 0xff
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	b29c      	uxth	r4, r3
 801cb3e:	183b      	adds	r3, r7, r0
 801cb40:	881a      	ldrh	r2, [r3, #0]
 801cb42:	6878      	ldr	r0, [r7, #4]
 801cb44:	0023      	movs	r3, r4
 801cb46:	f000 fd5f 	bl	801d608 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801cb4a:	687a      	ldr	r2, [r7, #4]
 801cb4c:	683b      	ldr	r3, [r7, #0]
 801cb4e:	781b      	ldrb	r3, [r3, #0]
 801cb50:	009b      	lsls	r3, r3, #2
 801cb52:	18d3      	adds	r3, r2, r3
 801cb54:	881b      	ldrh	r3, [r3, #0]
 801cb56:	b29a      	uxth	r2, r3
 801cb58:	200a      	movs	r0, #10
 801cb5a:	183b      	adds	r3, r7, r0
 801cb5c:	491d      	ldr	r1, [pc, #116]	@ (801cbd4 <USB_EPStartXfer+0xab0>)
 801cb5e:	400a      	ands	r2, r1
 801cb60:	801a      	strh	r2, [r3, #0]
 801cb62:	183b      	adds	r3, r7, r0
 801cb64:	183a      	adds	r2, r7, r0
 801cb66:	8812      	ldrh	r2, [r2, #0]
 801cb68:	2110      	movs	r1, #16
 801cb6a:	404a      	eors	r2, r1
 801cb6c:	801a      	strh	r2, [r3, #0]
 801cb6e:	183b      	adds	r3, r7, r0
 801cb70:	183a      	adds	r2, r7, r0
 801cb72:	8812      	ldrh	r2, [r2, #0]
 801cb74:	2120      	movs	r1, #32
 801cb76:	404a      	eors	r2, r1
 801cb78:	801a      	strh	r2, [r3, #0]
 801cb7a:	687a      	ldr	r2, [r7, #4]
 801cb7c:	683b      	ldr	r3, [r7, #0]
 801cb7e:	781b      	ldrb	r3, [r3, #0]
 801cb80:	009b      	lsls	r3, r3, #2
 801cb82:	18d3      	adds	r3, r2, r3
 801cb84:	183a      	adds	r2, r7, r0
 801cb86:	8812      	ldrh	r2, [r2, #0]
 801cb88:	4913      	ldr	r1, [pc, #76]	@ (801cbd8 <USB_EPStartXfer+0xab4>)
 801cb8a:	430a      	orrs	r2, r1
 801cb8c:	b292      	uxth	r2, r2
 801cb8e:	801a      	strh	r2, [r3, #0]
 801cb90:	f000 fbf4 	bl	801d37c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801cb94:	683b      	ldr	r3, [r7, #0]
 801cb96:	7b1b      	ldrb	r3, [r3, #12]
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d000      	beq.n	801cb9e <USB_EPStartXfer+0xa7a>
 801cb9c:	e0a9      	b.n	801ccf2 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801cb9e:	683b      	ldr	r3, [r7, #0]
 801cba0:	699a      	ldr	r2, [r3, #24]
 801cba2:	683b      	ldr	r3, [r7, #0]
 801cba4:	691b      	ldr	r3, [r3, #16]
 801cba6:	429a      	cmp	r2, r3
 801cba8:	d918      	bls.n	801cbdc <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801cbaa:	683b      	ldr	r3, [r7, #0]
 801cbac:	691b      	ldr	r3, [r3, #16]
 801cbae:	1d7a      	adds	r2, r7, #5
 801cbb0:	32ff      	adds	r2, #255	@ 0xff
 801cbb2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801cbb4:	683b      	ldr	r3, [r7, #0]
 801cbb6:	699a      	ldr	r2, [r3, #24]
 801cbb8:	1d7b      	adds	r3, r7, #5
 801cbba:	33ff      	adds	r3, #255	@ 0xff
 801cbbc:	681b      	ldr	r3, [r3, #0]
 801cbbe:	1ad2      	subs	r2, r2, r3
 801cbc0:	683b      	ldr	r3, [r7, #0]
 801cbc2:	619a      	str	r2, [r3, #24]
 801cbc4:	e012      	b.n	801cbec <USB_EPStartXfer+0xac8>
 801cbc6:	46c0      	nop			@ (mov r8, r8)
 801cbc8:	00000406 	.word	0x00000406
 801cbcc:	ffff8000 	.word	0xffff8000
 801cbd0:	00000402 	.word	0x00000402
 801cbd4:	ffff8fbf 	.word	0xffff8fbf
 801cbd8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801cbdc:	683b      	ldr	r3, [r7, #0]
 801cbde:	699b      	ldr	r3, [r3, #24]
 801cbe0:	1d7a      	adds	r2, r7, #5
 801cbe2:	32ff      	adds	r2, #255	@ 0xff
 801cbe4:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801cbe6:	683b      	ldr	r3, [r7, #0]
 801cbe8:	2200      	movs	r2, #0
 801cbea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	2190      	movs	r1, #144	@ 0x90
 801cbf0:	187a      	adds	r2, r7, r1
 801cbf2:	6013      	str	r3, [r2, #0]
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	2250      	movs	r2, #80	@ 0x50
 801cbf8:	5a9b      	ldrh	r3, [r3, r2]
 801cbfa:	b29b      	uxth	r3, r3
 801cbfc:	001a      	movs	r2, r3
 801cbfe:	187b      	adds	r3, r7, r1
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	189b      	adds	r3, r3, r2
 801cc04:	187a      	adds	r2, r7, r1
 801cc06:	6013      	str	r3, [r2, #0]
 801cc08:	683b      	ldr	r3, [r7, #0]
 801cc0a:	781b      	ldrb	r3, [r3, #0]
 801cc0c:	00da      	lsls	r2, r3, #3
 801cc0e:	187b      	adds	r3, r7, r1
 801cc10:	681b      	ldr	r3, [r3, #0]
 801cc12:	18d3      	adds	r3, r2, r3
 801cc14:	4acf      	ldr	r2, [pc, #828]	@ (801cf54 <USB_EPStartXfer+0xe30>)
 801cc16:	4694      	mov	ip, r2
 801cc18:	4463      	add	r3, ip
 801cc1a:	218c      	movs	r1, #140	@ 0x8c
 801cc1c:	187a      	adds	r2, r7, r1
 801cc1e:	6013      	str	r3, [r2, #0]
 801cc20:	187b      	adds	r3, r7, r1
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	881b      	ldrh	r3, [r3, #0]
 801cc26:	b29b      	uxth	r3, r3
 801cc28:	059b      	lsls	r3, r3, #22
 801cc2a:	0d9b      	lsrs	r3, r3, #22
 801cc2c:	b29a      	uxth	r2, r3
 801cc2e:	187b      	adds	r3, r7, r1
 801cc30:	681b      	ldr	r3, [r3, #0]
 801cc32:	801a      	strh	r2, [r3, #0]
 801cc34:	1d7b      	adds	r3, r7, #5
 801cc36:	33ff      	adds	r3, #255	@ 0xff
 801cc38:	681b      	ldr	r3, [r3, #0]
 801cc3a:	2b3e      	cmp	r3, #62	@ 0x3e
 801cc3c:	d925      	bls.n	801cc8a <USB_EPStartXfer+0xb66>
 801cc3e:	1d7b      	adds	r3, r7, #5
 801cc40:	33ff      	adds	r3, #255	@ 0xff
 801cc42:	681b      	ldr	r3, [r3, #0]
 801cc44:	095b      	lsrs	r3, r3, #5
 801cc46:	21e8      	movs	r1, #232	@ 0xe8
 801cc48:	187a      	adds	r2, r7, r1
 801cc4a:	6013      	str	r3, [r2, #0]
 801cc4c:	1d7b      	adds	r3, r7, #5
 801cc4e:	33ff      	adds	r3, #255	@ 0xff
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	221f      	movs	r2, #31
 801cc54:	4013      	ands	r3, r2
 801cc56:	d104      	bne.n	801cc62 <USB_EPStartXfer+0xb3e>
 801cc58:	187b      	adds	r3, r7, r1
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	3b01      	subs	r3, #1
 801cc5e:	187a      	adds	r2, r7, r1
 801cc60:	6013      	str	r3, [r2, #0]
 801cc62:	218c      	movs	r1, #140	@ 0x8c
 801cc64:	187b      	adds	r3, r7, r1
 801cc66:	681b      	ldr	r3, [r3, #0]
 801cc68:	881b      	ldrh	r3, [r3, #0]
 801cc6a:	b29a      	uxth	r2, r3
 801cc6c:	23e8      	movs	r3, #232	@ 0xe8
 801cc6e:	18fb      	adds	r3, r7, r3
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	b29b      	uxth	r3, r3
 801cc74:	029b      	lsls	r3, r3, #10
 801cc76:	b29b      	uxth	r3, r3
 801cc78:	4313      	orrs	r3, r2
 801cc7a:	b29b      	uxth	r3, r3
 801cc7c:	4ab6      	ldr	r2, [pc, #728]	@ (801cf58 <USB_EPStartXfer+0xe34>)
 801cc7e:	4313      	orrs	r3, r2
 801cc80:	b29a      	uxth	r2, r3
 801cc82:	187b      	adds	r3, r7, r1
 801cc84:	681b      	ldr	r3, [r3, #0]
 801cc86:	801a      	strh	r2, [r3, #0]
 801cc88:	e353      	b.n	801d332 <USB_EPStartXfer+0x120e>
 801cc8a:	1d7b      	adds	r3, r7, #5
 801cc8c:	33ff      	adds	r3, #255	@ 0xff
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d10b      	bne.n	801ccac <USB_EPStartXfer+0xb88>
 801cc94:	218c      	movs	r1, #140	@ 0x8c
 801cc96:	187b      	adds	r3, r7, r1
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	881b      	ldrh	r3, [r3, #0]
 801cc9c:	b29b      	uxth	r3, r3
 801cc9e:	4aae      	ldr	r2, [pc, #696]	@ (801cf58 <USB_EPStartXfer+0xe34>)
 801cca0:	4313      	orrs	r3, r2
 801cca2:	b29a      	uxth	r2, r3
 801cca4:	187b      	adds	r3, r7, r1
 801cca6:	681b      	ldr	r3, [r3, #0]
 801cca8:	801a      	strh	r2, [r3, #0]
 801ccaa:	e342      	b.n	801d332 <USB_EPStartXfer+0x120e>
 801ccac:	1d7b      	adds	r3, r7, #5
 801ccae:	33ff      	adds	r3, #255	@ 0xff
 801ccb0:	681b      	ldr	r3, [r3, #0]
 801ccb2:	085b      	lsrs	r3, r3, #1
 801ccb4:	21e8      	movs	r1, #232	@ 0xe8
 801ccb6:	187a      	adds	r2, r7, r1
 801ccb8:	6013      	str	r3, [r2, #0]
 801ccba:	1d7b      	adds	r3, r7, #5
 801ccbc:	33ff      	adds	r3, #255	@ 0xff
 801ccbe:	681b      	ldr	r3, [r3, #0]
 801ccc0:	2201      	movs	r2, #1
 801ccc2:	4013      	ands	r3, r2
 801ccc4:	d004      	beq.n	801ccd0 <USB_EPStartXfer+0xbac>
 801ccc6:	187b      	adds	r3, r7, r1
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	3301      	adds	r3, #1
 801cccc:	187a      	adds	r2, r7, r1
 801ccce:	6013      	str	r3, [r2, #0]
 801ccd0:	218c      	movs	r1, #140	@ 0x8c
 801ccd2:	187b      	adds	r3, r7, r1
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	881b      	ldrh	r3, [r3, #0]
 801ccd8:	b29a      	uxth	r2, r3
 801ccda:	23e8      	movs	r3, #232	@ 0xe8
 801ccdc:	18fb      	adds	r3, r7, r3
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	b29b      	uxth	r3, r3
 801cce2:	029b      	lsls	r3, r3, #10
 801cce4:	b29b      	uxth	r3, r3
 801cce6:	4313      	orrs	r3, r2
 801cce8:	b29a      	uxth	r2, r3
 801ccea:	187b      	adds	r3, r7, r1
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	801a      	strh	r2, [r3, #0]
 801ccf0:	e31f      	b.n	801d332 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801ccf2:	683b      	ldr	r3, [r7, #0]
 801ccf4:	78db      	ldrb	r3, [r3, #3]
 801ccf6:	2b02      	cmp	r3, #2
 801ccf8:	d000      	beq.n	801ccfc <USB_EPStartXfer+0xbd8>
 801ccfa:	e191      	b.n	801d020 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801ccfc:	683b      	ldr	r3, [r7, #0]
 801ccfe:	785b      	ldrb	r3, [r3, #1]
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d000      	beq.n	801cd06 <USB_EPStartXfer+0xbe2>
 801cd04:	e07c      	b.n	801ce00 <USB_EPStartXfer+0xcdc>
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	21ac      	movs	r1, #172	@ 0xac
 801cd0a:	187a      	adds	r2, r7, r1
 801cd0c:	6013      	str	r3, [r2, #0]
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	2250      	movs	r2, #80	@ 0x50
 801cd12:	5a9b      	ldrh	r3, [r3, r2]
 801cd14:	b29b      	uxth	r3, r3
 801cd16:	001a      	movs	r2, r3
 801cd18:	187b      	adds	r3, r7, r1
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	189b      	adds	r3, r3, r2
 801cd1e:	187a      	adds	r2, r7, r1
 801cd20:	6013      	str	r3, [r2, #0]
 801cd22:	683b      	ldr	r3, [r7, #0]
 801cd24:	781b      	ldrb	r3, [r3, #0]
 801cd26:	00da      	lsls	r2, r3, #3
 801cd28:	187b      	adds	r3, r7, r1
 801cd2a:	681b      	ldr	r3, [r3, #0]
 801cd2c:	18d3      	adds	r3, r2, r3
 801cd2e:	4a8b      	ldr	r2, [pc, #556]	@ (801cf5c <USB_EPStartXfer+0xe38>)
 801cd30:	4694      	mov	ip, r2
 801cd32:	4463      	add	r3, ip
 801cd34:	21a8      	movs	r1, #168	@ 0xa8
 801cd36:	187a      	adds	r2, r7, r1
 801cd38:	6013      	str	r3, [r2, #0]
 801cd3a:	187b      	adds	r3, r7, r1
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	881b      	ldrh	r3, [r3, #0]
 801cd40:	b29b      	uxth	r3, r3
 801cd42:	059b      	lsls	r3, r3, #22
 801cd44:	0d9b      	lsrs	r3, r3, #22
 801cd46:	b29a      	uxth	r2, r3
 801cd48:	187b      	adds	r3, r7, r1
 801cd4a:	681b      	ldr	r3, [r3, #0]
 801cd4c:	801a      	strh	r2, [r3, #0]
 801cd4e:	683b      	ldr	r3, [r7, #0]
 801cd50:	691b      	ldr	r3, [r3, #16]
 801cd52:	2b3e      	cmp	r3, #62	@ 0x3e
 801cd54:	d923      	bls.n	801cd9e <USB_EPStartXfer+0xc7a>
 801cd56:	683b      	ldr	r3, [r7, #0]
 801cd58:	691b      	ldr	r3, [r3, #16]
 801cd5a:	095b      	lsrs	r3, r3, #5
 801cd5c:	21e4      	movs	r1, #228	@ 0xe4
 801cd5e:	187a      	adds	r2, r7, r1
 801cd60:	6013      	str	r3, [r2, #0]
 801cd62:	683b      	ldr	r3, [r7, #0]
 801cd64:	691b      	ldr	r3, [r3, #16]
 801cd66:	221f      	movs	r2, #31
 801cd68:	4013      	ands	r3, r2
 801cd6a:	d104      	bne.n	801cd76 <USB_EPStartXfer+0xc52>
 801cd6c:	187b      	adds	r3, r7, r1
 801cd6e:	681b      	ldr	r3, [r3, #0]
 801cd70:	3b01      	subs	r3, #1
 801cd72:	187a      	adds	r2, r7, r1
 801cd74:	6013      	str	r3, [r2, #0]
 801cd76:	21a8      	movs	r1, #168	@ 0xa8
 801cd78:	187b      	adds	r3, r7, r1
 801cd7a:	681b      	ldr	r3, [r3, #0]
 801cd7c:	881b      	ldrh	r3, [r3, #0]
 801cd7e:	b29a      	uxth	r2, r3
 801cd80:	23e4      	movs	r3, #228	@ 0xe4
 801cd82:	18fb      	adds	r3, r7, r3
 801cd84:	681b      	ldr	r3, [r3, #0]
 801cd86:	b29b      	uxth	r3, r3
 801cd88:	029b      	lsls	r3, r3, #10
 801cd8a:	b29b      	uxth	r3, r3
 801cd8c:	4313      	orrs	r3, r2
 801cd8e:	b29b      	uxth	r3, r3
 801cd90:	4a71      	ldr	r2, [pc, #452]	@ (801cf58 <USB_EPStartXfer+0xe34>)
 801cd92:	4313      	orrs	r3, r2
 801cd94:	b29a      	uxth	r2, r3
 801cd96:	187b      	adds	r3, r7, r1
 801cd98:	681b      	ldr	r3, [r3, #0]
 801cd9a:	801a      	strh	r2, [r3, #0]
 801cd9c:	e054      	b.n	801ce48 <USB_EPStartXfer+0xd24>
 801cd9e:	683b      	ldr	r3, [r7, #0]
 801cda0:	691b      	ldr	r3, [r3, #16]
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d10b      	bne.n	801cdbe <USB_EPStartXfer+0xc9a>
 801cda6:	21a8      	movs	r1, #168	@ 0xa8
 801cda8:	187b      	adds	r3, r7, r1
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	881b      	ldrh	r3, [r3, #0]
 801cdae:	b29b      	uxth	r3, r3
 801cdb0:	4a69      	ldr	r2, [pc, #420]	@ (801cf58 <USB_EPStartXfer+0xe34>)
 801cdb2:	4313      	orrs	r3, r2
 801cdb4:	b29a      	uxth	r2, r3
 801cdb6:	187b      	adds	r3, r7, r1
 801cdb8:	681b      	ldr	r3, [r3, #0]
 801cdba:	801a      	strh	r2, [r3, #0]
 801cdbc:	e044      	b.n	801ce48 <USB_EPStartXfer+0xd24>
 801cdbe:	683b      	ldr	r3, [r7, #0]
 801cdc0:	691b      	ldr	r3, [r3, #16]
 801cdc2:	085b      	lsrs	r3, r3, #1
 801cdc4:	21e4      	movs	r1, #228	@ 0xe4
 801cdc6:	187a      	adds	r2, r7, r1
 801cdc8:	6013      	str	r3, [r2, #0]
 801cdca:	683b      	ldr	r3, [r7, #0]
 801cdcc:	691b      	ldr	r3, [r3, #16]
 801cdce:	2201      	movs	r2, #1
 801cdd0:	4013      	ands	r3, r2
 801cdd2:	d004      	beq.n	801cdde <USB_EPStartXfer+0xcba>
 801cdd4:	187b      	adds	r3, r7, r1
 801cdd6:	681b      	ldr	r3, [r3, #0]
 801cdd8:	3301      	adds	r3, #1
 801cdda:	187a      	adds	r2, r7, r1
 801cddc:	6013      	str	r3, [r2, #0]
 801cdde:	21a8      	movs	r1, #168	@ 0xa8
 801cde0:	187b      	adds	r3, r7, r1
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	881b      	ldrh	r3, [r3, #0]
 801cde6:	b29a      	uxth	r2, r3
 801cde8:	23e4      	movs	r3, #228	@ 0xe4
 801cdea:	18fb      	adds	r3, r7, r3
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	b29b      	uxth	r3, r3
 801cdf0:	029b      	lsls	r3, r3, #10
 801cdf2:	b29b      	uxth	r3, r3
 801cdf4:	4313      	orrs	r3, r2
 801cdf6:	b29a      	uxth	r2, r3
 801cdf8:	187b      	adds	r3, r7, r1
 801cdfa:	681b      	ldr	r3, [r3, #0]
 801cdfc:	801a      	strh	r2, [r3, #0]
 801cdfe:	e023      	b.n	801ce48 <USB_EPStartXfer+0xd24>
 801ce00:	683b      	ldr	r3, [r7, #0]
 801ce02:	785b      	ldrb	r3, [r3, #1]
 801ce04:	2b01      	cmp	r3, #1
 801ce06:	d11f      	bne.n	801ce48 <USB_EPStartXfer+0xd24>
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	21b4      	movs	r1, #180	@ 0xb4
 801ce0c:	187a      	adds	r2, r7, r1
 801ce0e:	6013      	str	r3, [r2, #0]
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	2250      	movs	r2, #80	@ 0x50
 801ce14:	5a9b      	ldrh	r3, [r3, r2]
 801ce16:	b29b      	uxth	r3, r3
 801ce18:	001a      	movs	r2, r3
 801ce1a:	187b      	adds	r3, r7, r1
 801ce1c:	681b      	ldr	r3, [r3, #0]
 801ce1e:	189b      	adds	r3, r3, r2
 801ce20:	187a      	adds	r2, r7, r1
 801ce22:	6013      	str	r3, [r2, #0]
 801ce24:	683b      	ldr	r3, [r7, #0]
 801ce26:	781b      	ldrb	r3, [r3, #0]
 801ce28:	00da      	lsls	r2, r3, #3
 801ce2a:	187b      	adds	r3, r7, r1
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	18d3      	adds	r3, r2, r3
 801ce30:	4a4a      	ldr	r2, [pc, #296]	@ (801cf5c <USB_EPStartXfer+0xe38>)
 801ce32:	4694      	mov	ip, r2
 801ce34:	4463      	add	r3, ip
 801ce36:	21b0      	movs	r1, #176	@ 0xb0
 801ce38:	187a      	adds	r2, r7, r1
 801ce3a:	6013      	str	r3, [r2, #0]
 801ce3c:	683b      	ldr	r3, [r7, #0]
 801ce3e:	691b      	ldr	r3, [r3, #16]
 801ce40:	b29a      	uxth	r2, r3
 801ce42:	187b      	adds	r3, r7, r1
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	801a      	strh	r2, [r3, #0]
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	22a4      	movs	r2, #164	@ 0xa4
 801ce4c:	18ba      	adds	r2, r7, r2
 801ce4e:	6013      	str	r3, [r2, #0]
 801ce50:	683b      	ldr	r3, [r7, #0]
 801ce52:	785b      	ldrb	r3, [r3, #1]
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	d000      	beq.n	801ce5a <USB_EPStartXfer+0xd36>
 801ce58:	e082      	b.n	801cf60 <USB_EPStartXfer+0xe3c>
 801ce5a:	687b      	ldr	r3, [r7, #4]
 801ce5c:	219c      	movs	r1, #156	@ 0x9c
 801ce5e:	187a      	adds	r2, r7, r1
 801ce60:	6013      	str	r3, [r2, #0]
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	2250      	movs	r2, #80	@ 0x50
 801ce66:	5a9b      	ldrh	r3, [r3, r2]
 801ce68:	b29b      	uxth	r3, r3
 801ce6a:	001a      	movs	r2, r3
 801ce6c:	187b      	adds	r3, r7, r1
 801ce6e:	681b      	ldr	r3, [r3, #0]
 801ce70:	189b      	adds	r3, r3, r2
 801ce72:	187a      	adds	r2, r7, r1
 801ce74:	6013      	str	r3, [r2, #0]
 801ce76:	683b      	ldr	r3, [r7, #0]
 801ce78:	781b      	ldrb	r3, [r3, #0]
 801ce7a:	00da      	lsls	r2, r3, #3
 801ce7c:	187b      	adds	r3, r7, r1
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	18d3      	adds	r3, r2, r3
 801ce82:	4a34      	ldr	r2, [pc, #208]	@ (801cf54 <USB_EPStartXfer+0xe30>)
 801ce84:	4694      	mov	ip, r2
 801ce86:	4463      	add	r3, ip
 801ce88:	2198      	movs	r1, #152	@ 0x98
 801ce8a:	187a      	adds	r2, r7, r1
 801ce8c:	6013      	str	r3, [r2, #0]
 801ce8e:	187b      	adds	r3, r7, r1
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	881b      	ldrh	r3, [r3, #0]
 801ce94:	b29b      	uxth	r3, r3
 801ce96:	059b      	lsls	r3, r3, #22
 801ce98:	0d9b      	lsrs	r3, r3, #22
 801ce9a:	b29a      	uxth	r2, r3
 801ce9c:	187b      	adds	r3, r7, r1
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	801a      	strh	r2, [r3, #0]
 801cea2:	683b      	ldr	r3, [r7, #0]
 801cea4:	691b      	ldr	r3, [r3, #16]
 801cea6:	2b3e      	cmp	r3, #62	@ 0x3e
 801cea8:	d923      	bls.n	801cef2 <USB_EPStartXfer+0xdce>
 801ceaa:	683b      	ldr	r3, [r7, #0]
 801ceac:	691b      	ldr	r3, [r3, #16]
 801ceae:	095b      	lsrs	r3, r3, #5
 801ceb0:	21e0      	movs	r1, #224	@ 0xe0
 801ceb2:	187a      	adds	r2, r7, r1
 801ceb4:	6013      	str	r3, [r2, #0]
 801ceb6:	683b      	ldr	r3, [r7, #0]
 801ceb8:	691b      	ldr	r3, [r3, #16]
 801ceba:	221f      	movs	r2, #31
 801cebc:	4013      	ands	r3, r2
 801cebe:	d104      	bne.n	801ceca <USB_EPStartXfer+0xda6>
 801cec0:	187b      	adds	r3, r7, r1
 801cec2:	681b      	ldr	r3, [r3, #0]
 801cec4:	3b01      	subs	r3, #1
 801cec6:	187a      	adds	r2, r7, r1
 801cec8:	6013      	str	r3, [r2, #0]
 801ceca:	2198      	movs	r1, #152	@ 0x98
 801cecc:	187b      	adds	r3, r7, r1
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	881b      	ldrh	r3, [r3, #0]
 801ced2:	b29a      	uxth	r2, r3
 801ced4:	23e0      	movs	r3, #224	@ 0xe0
 801ced6:	18fb      	adds	r3, r7, r3
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	b29b      	uxth	r3, r3
 801cedc:	029b      	lsls	r3, r3, #10
 801cede:	b29b      	uxth	r3, r3
 801cee0:	4313      	orrs	r3, r2
 801cee2:	b29b      	uxth	r3, r3
 801cee4:	4a1c      	ldr	r2, [pc, #112]	@ (801cf58 <USB_EPStartXfer+0xe34>)
 801cee6:	4313      	orrs	r3, r2
 801cee8:	b29a      	uxth	r2, r3
 801ceea:	187b      	adds	r3, r7, r1
 801ceec:	681b      	ldr	r3, [r3, #0]
 801ceee:	801a      	strh	r2, [r3, #0]
 801cef0:	e057      	b.n	801cfa2 <USB_EPStartXfer+0xe7e>
 801cef2:	683b      	ldr	r3, [r7, #0]
 801cef4:	691b      	ldr	r3, [r3, #16]
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d10b      	bne.n	801cf12 <USB_EPStartXfer+0xdee>
 801cefa:	2198      	movs	r1, #152	@ 0x98
 801cefc:	187b      	adds	r3, r7, r1
 801cefe:	681b      	ldr	r3, [r3, #0]
 801cf00:	881b      	ldrh	r3, [r3, #0]
 801cf02:	b29b      	uxth	r3, r3
 801cf04:	4a14      	ldr	r2, [pc, #80]	@ (801cf58 <USB_EPStartXfer+0xe34>)
 801cf06:	4313      	orrs	r3, r2
 801cf08:	b29a      	uxth	r2, r3
 801cf0a:	187b      	adds	r3, r7, r1
 801cf0c:	681b      	ldr	r3, [r3, #0]
 801cf0e:	801a      	strh	r2, [r3, #0]
 801cf10:	e047      	b.n	801cfa2 <USB_EPStartXfer+0xe7e>
 801cf12:	683b      	ldr	r3, [r7, #0]
 801cf14:	691b      	ldr	r3, [r3, #16]
 801cf16:	085b      	lsrs	r3, r3, #1
 801cf18:	21e0      	movs	r1, #224	@ 0xe0
 801cf1a:	187a      	adds	r2, r7, r1
 801cf1c:	6013      	str	r3, [r2, #0]
 801cf1e:	683b      	ldr	r3, [r7, #0]
 801cf20:	691b      	ldr	r3, [r3, #16]
 801cf22:	2201      	movs	r2, #1
 801cf24:	4013      	ands	r3, r2
 801cf26:	d004      	beq.n	801cf32 <USB_EPStartXfer+0xe0e>
 801cf28:	187b      	adds	r3, r7, r1
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	3301      	adds	r3, #1
 801cf2e:	187a      	adds	r2, r7, r1
 801cf30:	6013      	str	r3, [r2, #0]
 801cf32:	2198      	movs	r1, #152	@ 0x98
 801cf34:	187b      	adds	r3, r7, r1
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	881b      	ldrh	r3, [r3, #0]
 801cf3a:	b29a      	uxth	r2, r3
 801cf3c:	23e0      	movs	r3, #224	@ 0xe0
 801cf3e:	18fb      	adds	r3, r7, r3
 801cf40:	681b      	ldr	r3, [r3, #0]
 801cf42:	b29b      	uxth	r3, r3
 801cf44:	029b      	lsls	r3, r3, #10
 801cf46:	b29b      	uxth	r3, r3
 801cf48:	4313      	orrs	r3, r2
 801cf4a:	b29a      	uxth	r2, r3
 801cf4c:	187b      	adds	r3, r7, r1
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	801a      	strh	r2, [r3, #0]
 801cf52:	e026      	b.n	801cfa2 <USB_EPStartXfer+0xe7e>
 801cf54:	00000406 	.word	0x00000406
 801cf58:	ffff8000 	.word	0xffff8000
 801cf5c:	00000402 	.word	0x00000402
 801cf60:	683b      	ldr	r3, [r7, #0]
 801cf62:	785b      	ldrb	r3, [r3, #1]
 801cf64:	2b01      	cmp	r3, #1
 801cf66:	d11c      	bne.n	801cfa2 <USB_EPStartXfer+0xe7e>
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	2250      	movs	r2, #80	@ 0x50
 801cf6c:	5a9b      	ldrh	r3, [r3, r2]
 801cf6e:	b29b      	uxth	r3, r3
 801cf70:	001a      	movs	r2, r3
 801cf72:	21a4      	movs	r1, #164	@ 0xa4
 801cf74:	187b      	adds	r3, r7, r1
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	189b      	adds	r3, r3, r2
 801cf7a:	187a      	adds	r2, r7, r1
 801cf7c:	6013      	str	r3, [r2, #0]
 801cf7e:	683b      	ldr	r3, [r7, #0]
 801cf80:	781b      	ldrb	r3, [r3, #0]
 801cf82:	00da      	lsls	r2, r3, #3
 801cf84:	187b      	adds	r3, r7, r1
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	18d3      	adds	r3, r2, r3
 801cf8a:	4ad2      	ldr	r2, [pc, #840]	@ (801d2d4 <USB_EPStartXfer+0x11b0>)
 801cf8c:	4694      	mov	ip, r2
 801cf8e:	4463      	add	r3, ip
 801cf90:	21a0      	movs	r1, #160	@ 0xa0
 801cf92:	187a      	adds	r2, r7, r1
 801cf94:	6013      	str	r3, [r2, #0]
 801cf96:	683b      	ldr	r3, [r7, #0]
 801cf98:	691b      	ldr	r3, [r3, #16]
 801cf9a:	b29a      	uxth	r2, r3
 801cf9c:	187b      	adds	r3, r7, r1
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801cfa2:	683b      	ldr	r3, [r7, #0]
 801cfa4:	69db      	ldr	r3, [r3, #28]
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d100      	bne.n	801cfac <USB_EPStartXfer+0xe88>
 801cfaa:	e1c2      	b.n	801d332 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801cfac:	687a      	ldr	r2, [r7, #4]
 801cfae:	683b      	ldr	r3, [r7, #0]
 801cfb0:	781b      	ldrb	r3, [r3, #0]
 801cfb2:	009b      	lsls	r3, r3, #2
 801cfb4:	18d2      	adds	r2, r2, r3
 801cfb6:	2196      	movs	r1, #150	@ 0x96
 801cfb8:	187b      	adds	r3, r7, r1
 801cfba:	8812      	ldrh	r2, [r2, #0]
 801cfbc:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801cfbe:	187b      	adds	r3, r7, r1
 801cfc0:	881a      	ldrh	r2, [r3, #0]
 801cfc2:	2380      	movs	r3, #128	@ 0x80
 801cfc4:	01db      	lsls	r3, r3, #7
 801cfc6:	4013      	ands	r3, r2
 801cfc8:	d004      	beq.n	801cfd4 <USB_EPStartXfer+0xeb0>
 801cfca:	187b      	adds	r3, r7, r1
 801cfcc:	881b      	ldrh	r3, [r3, #0]
 801cfce:	2240      	movs	r2, #64	@ 0x40
 801cfd0:	4013      	ands	r3, r2
 801cfd2:	d10d      	bne.n	801cff0 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801cfd4:	2196      	movs	r1, #150	@ 0x96
 801cfd6:	187b      	adds	r3, r7, r1
 801cfd8:	881a      	ldrh	r2, [r3, #0]
 801cfda:	2380      	movs	r3, #128	@ 0x80
 801cfdc:	01db      	lsls	r3, r3, #7
 801cfde:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801cfe0:	d000      	beq.n	801cfe4 <USB_EPStartXfer+0xec0>
 801cfe2:	e1a6      	b.n	801d332 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801cfe4:	187b      	adds	r3, r7, r1
 801cfe6:	881b      	ldrh	r3, [r3, #0]
 801cfe8:	2240      	movs	r2, #64	@ 0x40
 801cfea:	4013      	ands	r3, r2
 801cfec:	d000      	beq.n	801cff0 <USB_EPStartXfer+0xecc>
 801cfee:	e1a0      	b.n	801d332 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801cff0:	687a      	ldr	r2, [r7, #4]
 801cff2:	683b      	ldr	r3, [r7, #0]
 801cff4:	781b      	ldrb	r3, [r3, #0]
 801cff6:	009b      	lsls	r3, r3, #2
 801cff8:	18d3      	adds	r3, r2, r3
 801cffa:	881b      	ldrh	r3, [r3, #0]
 801cffc:	b29a      	uxth	r2, r3
 801cffe:	2094      	movs	r0, #148	@ 0x94
 801d000:	183b      	adds	r3, r7, r0
 801d002:	49b5      	ldr	r1, [pc, #724]	@ (801d2d8 <USB_EPStartXfer+0x11b4>)
 801d004:	400a      	ands	r2, r1
 801d006:	801a      	strh	r2, [r3, #0]
 801d008:	687a      	ldr	r2, [r7, #4]
 801d00a:	683b      	ldr	r3, [r7, #0]
 801d00c:	781b      	ldrb	r3, [r3, #0]
 801d00e:	009b      	lsls	r3, r3, #2
 801d010:	18d3      	adds	r3, r2, r3
 801d012:	183a      	adds	r2, r7, r0
 801d014:	8812      	ldrh	r2, [r2, #0]
 801d016:	49b1      	ldr	r1, [pc, #708]	@ (801d2dc <USB_EPStartXfer+0x11b8>)
 801d018:	430a      	orrs	r2, r1
 801d01a:	b292      	uxth	r2, r2
 801d01c:	801a      	strh	r2, [r3, #0]
 801d01e:	e188      	b.n	801d332 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801d020:	683b      	ldr	r3, [r7, #0]
 801d022:	78db      	ldrb	r3, [r3, #3]
 801d024:	2b01      	cmp	r3, #1
 801d026:	d000      	beq.n	801d02a <USB_EPStartXfer+0xf06>
 801d028:	e181      	b.n	801d32e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801d02a:	683b      	ldr	r3, [r7, #0]
 801d02c:	699a      	ldr	r2, [r3, #24]
 801d02e:	683b      	ldr	r3, [r7, #0]
 801d030:	691b      	ldr	r3, [r3, #16]
 801d032:	429a      	cmp	r2, r3
 801d034:	d90d      	bls.n	801d052 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801d036:	683b      	ldr	r3, [r7, #0]
 801d038:	691b      	ldr	r3, [r3, #16]
 801d03a:	1d7a      	adds	r2, r7, #5
 801d03c:	32ff      	adds	r2, #255	@ 0xff
 801d03e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801d040:	683b      	ldr	r3, [r7, #0]
 801d042:	699a      	ldr	r2, [r3, #24]
 801d044:	1d7b      	adds	r3, r7, #5
 801d046:	33ff      	adds	r3, #255	@ 0xff
 801d048:	681b      	ldr	r3, [r3, #0]
 801d04a:	1ad2      	subs	r2, r2, r3
 801d04c:	683b      	ldr	r3, [r7, #0]
 801d04e:	619a      	str	r2, [r3, #24]
 801d050:	e007      	b.n	801d062 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801d052:	683b      	ldr	r3, [r7, #0]
 801d054:	699b      	ldr	r3, [r3, #24]
 801d056:	1d7a      	adds	r2, r7, #5
 801d058:	32ff      	adds	r2, #255	@ 0xff
 801d05a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801d05c:	683b      	ldr	r3, [r7, #0]
 801d05e:	2200      	movs	r2, #0
 801d060:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801d062:	683b      	ldr	r3, [r7, #0]
 801d064:	785b      	ldrb	r3, [r3, #1]
 801d066:	2b00      	cmp	r3, #0
 801d068:	d000      	beq.n	801d06c <USB_EPStartXfer+0xf48>
 801d06a:	e082      	b.n	801d172 <USB_EPStartXfer+0x104e>
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	21cc      	movs	r1, #204	@ 0xcc
 801d070:	187a      	adds	r2, r7, r1
 801d072:	6013      	str	r3, [r2, #0]
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	2250      	movs	r2, #80	@ 0x50
 801d078:	5a9b      	ldrh	r3, [r3, r2]
 801d07a:	b29b      	uxth	r3, r3
 801d07c:	001a      	movs	r2, r3
 801d07e:	187b      	adds	r3, r7, r1
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	189b      	adds	r3, r3, r2
 801d084:	187a      	adds	r2, r7, r1
 801d086:	6013      	str	r3, [r2, #0]
 801d088:	683b      	ldr	r3, [r7, #0]
 801d08a:	781b      	ldrb	r3, [r3, #0]
 801d08c:	00da      	lsls	r2, r3, #3
 801d08e:	187b      	adds	r3, r7, r1
 801d090:	681b      	ldr	r3, [r3, #0]
 801d092:	18d3      	adds	r3, r2, r3
 801d094:	4a92      	ldr	r2, [pc, #584]	@ (801d2e0 <USB_EPStartXfer+0x11bc>)
 801d096:	4694      	mov	ip, r2
 801d098:	4463      	add	r3, ip
 801d09a:	21c8      	movs	r1, #200	@ 0xc8
 801d09c:	187a      	adds	r2, r7, r1
 801d09e:	6013      	str	r3, [r2, #0]
 801d0a0:	187b      	adds	r3, r7, r1
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	881b      	ldrh	r3, [r3, #0]
 801d0a6:	b29b      	uxth	r3, r3
 801d0a8:	059b      	lsls	r3, r3, #22
 801d0aa:	0d9b      	lsrs	r3, r3, #22
 801d0ac:	b29a      	uxth	r2, r3
 801d0ae:	187b      	adds	r3, r7, r1
 801d0b0:	681b      	ldr	r3, [r3, #0]
 801d0b2:	801a      	strh	r2, [r3, #0]
 801d0b4:	1d7b      	adds	r3, r7, #5
 801d0b6:	33ff      	adds	r3, #255	@ 0xff
 801d0b8:	681b      	ldr	r3, [r3, #0]
 801d0ba:	2b3e      	cmp	r3, #62	@ 0x3e
 801d0bc:	d925      	bls.n	801d10a <USB_EPStartXfer+0xfe6>
 801d0be:	1d7b      	adds	r3, r7, #5
 801d0c0:	33ff      	adds	r3, #255	@ 0xff
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	095b      	lsrs	r3, r3, #5
 801d0c6:	21dc      	movs	r1, #220	@ 0xdc
 801d0c8:	187a      	adds	r2, r7, r1
 801d0ca:	6013      	str	r3, [r2, #0]
 801d0cc:	1d7b      	adds	r3, r7, #5
 801d0ce:	33ff      	adds	r3, #255	@ 0xff
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	221f      	movs	r2, #31
 801d0d4:	4013      	ands	r3, r2
 801d0d6:	d104      	bne.n	801d0e2 <USB_EPStartXfer+0xfbe>
 801d0d8:	187b      	adds	r3, r7, r1
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	3b01      	subs	r3, #1
 801d0de:	187a      	adds	r2, r7, r1
 801d0e0:	6013      	str	r3, [r2, #0]
 801d0e2:	21c8      	movs	r1, #200	@ 0xc8
 801d0e4:	187b      	adds	r3, r7, r1
 801d0e6:	681b      	ldr	r3, [r3, #0]
 801d0e8:	881b      	ldrh	r3, [r3, #0]
 801d0ea:	b29a      	uxth	r2, r3
 801d0ec:	23dc      	movs	r3, #220	@ 0xdc
 801d0ee:	18fb      	adds	r3, r7, r3
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	b29b      	uxth	r3, r3
 801d0f4:	029b      	lsls	r3, r3, #10
 801d0f6:	b29b      	uxth	r3, r3
 801d0f8:	4313      	orrs	r3, r2
 801d0fa:	b29b      	uxth	r3, r3
 801d0fc:	4a79      	ldr	r2, [pc, #484]	@ (801d2e4 <USB_EPStartXfer+0x11c0>)
 801d0fe:	4313      	orrs	r3, r2
 801d100:	b29a      	uxth	r2, r3
 801d102:	187b      	adds	r3, r7, r1
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	801a      	strh	r2, [r3, #0]
 801d108:	e058      	b.n	801d1bc <USB_EPStartXfer+0x1098>
 801d10a:	1d7b      	adds	r3, r7, #5
 801d10c:	33ff      	adds	r3, #255	@ 0xff
 801d10e:	681b      	ldr	r3, [r3, #0]
 801d110:	2b00      	cmp	r3, #0
 801d112:	d10b      	bne.n	801d12c <USB_EPStartXfer+0x1008>
 801d114:	21c8      	movs	r1, #200	@ 0xc8
 801d116:	187b      	adds	r3, r7, r1
 801d118:	681b      	ldr	r3, [r3, #0]
 801d11a:	881b      	ldrh	r3, [r3, #0]
 801d11c:	b29b      	uxth	r3, r3
 801d11e:	4a71      	ldr	r2, [pc, #452]	@ (801d2e4 <USB_EPStartXfer+0x11c0>)
 801d120:	4313      	orrs	r3, r2
 801d122:	b29a      	uxth	r2, r3
 801d124:	187b      	adds	r3, r7, r1
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	801a      	strh	r2, [r3, #0]
 801d12a:	e047      	b.n	801d1bc <USB_EPStartXfer+0x1098>
 801d12c:	1d7b      	adds	r3, r7, #5
 801d12e:	33ff      	adds	r3, #255	@ 0xff
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	085b      	lsrs	r3, r3, #1
 801d134:	21dc      	movs	r1, #220	@ 0xdc
 801d136:	187a      	adds	r2, r7, r1
 801d138:	6013      	str	r3, [r2, #0]
 801d13a:	1d7b      	adds	r3, r7, #5
 801d13c:	33ff      	adds	r3, #255	@ 0xff
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	2201      	movs	r2, #1
 801d142:	4013      	ands	r3, r2
 801d144:	d004      	beq.n	801d150 <USB_EPStartXfer+0x102c>
 801d146:	187b      	adds	r3, r7, r1
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	3301      	adds	r3, #1
 801d14c:	187a      	adds	r2, r7, r1
 801d14e:	6013      	str	r3, [r2, #0]
 801d150:	21c8      	movs	r1, #200	@ 0xc8
 801d152:	187b      	adds	r3, r7, r1
 801d154:	681b      	ldr	r3, [r3, #0]
 801d156:	881b      	ldrh	r3, [r3, #0]
 801d158:	b29a      	uxth	r2, r3
 801d15a:	23dc      	movs	r3, #220	@ 0xdc
 801d15c:	18fb      	adds	r3, r7, r3
 801d15e:	681b      	ldr	r3, [r3, #0]
 801d160:	b29b      	uxth	r3, r3
 801d162:	029b      	lsls	r3, r3, #10
 801d164:	b29b      	uxth	r3, r3
 801d166:	4313      	orrs	r3, r2
 801d168:	b29a      	uxth	r2, r3
 801d16a:	187b      	adds	r3, r7, r1
 801d16c:	681b      	ldr	r3, [r3, #0]
 801d16e:	801a      	strh	r2, [r3, #0]
 801d170:	e024      	b.n	801d1bc <USB_EPStartXfer+0x1098>
 801d172:	683b      	ldr	r3, [r7, #0]
 801d174:	785b      	ldrb	r3, [r3, #1]
 801d176:	2b01      	cmp	r3, #1
 801d178:	d120      	bne.n	801d1bc <USB_EPStartXfer+0x1098>
 801d17a:	687b      	ldr	r3, [r7, #4]
 801d17c:	21d4      	movs	r1, #212	@ 0xd4
 801d17e:	187a      	adds	r2, r7, r1
 801d180:	6013      	str	r3, [r2, #0]
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	2250      	movs	r2, #80	@ 0x50
 801d186:	5a9b      	ldrh	r3, [r3, r2]
 801d188:	b29b      	uxth	r3, r3
 801d18a:	001a      	movs	r2, r3
 801d18c:	187b      	adds	r3, r7, r1
 801d18e:	681b      	ldr	r3, [r3, #0]
 801d190:	189b      	adds	r3, r3, r2
 801d192:	187a      	adds	r2, r7, r1
 801d194:	6013      	str	r3, [r2, #0]
 801d196:	683b      	ldr	r3, [r7, #0]
 801d198:	781b      	ldrb	r3, [r3, #0]
 801d19a:	00da      	lsls	r2, r3, #3
 801d19c:	187b      	adds	r3, r7, r1
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	18d3      	adds	r3, r2, r3
 801d1a2:	4a4f      	ldr	r2, [pc, #316]	@ (801d2e0 <USB_EPStartXfer+0x11bc>)
 801d1a4:	4694      	mov	ip, r2
 801d1a6:	4463      	add	r3, ip
 801d1a8:	21d0      	movs	r1, #208	@ 0xd0
 801d1aa:	187a      	adds	r2, r7, r1
 801d1ac:	6013      	str	r3, [r2, #0]
 801d1ae:	1d7b      	adds	r3, r7, #5
 801d1b0:	33ff      	adds	r3, #255	@ 0xff
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	b29a      	uxth	r2, r3
 801d1b6:	187b      	adds	r3, r7, r1
 801d1b8:	681b      	ldr	r3, [r3, #0]
 801d1ba:	801a      	strh	r2, [r3, #0]
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	22c4      	movs	r2, #196	@ 0xc4
 801d1c0:	18ba      	adds	r2, r7, r2
 801d1c2:	6013      	str	r3, [r2, #0]
 801d1c4:	683b      	ldr	r3, [r7, #0]
 801d1c6:	785b      	ldrb	r3, [r3, #1]
 801d1c8:	2b00      	cmp	r3, #0
 801d1ca:	d000      	beq.n	801d1ce <USB_EPStartXfer+0x10aa>
 801d1cc:	e08c      	b.n	801d2e8 <USB_EPStartXfer+0x11c4>
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	21bc      	movs	r1, #188	@ 0xbc
 801d1d2:	187a      	adds	r2, r7, r1
 801d1d4:	6013      	str	r3, [r2, #0]
 801d1d6:	687b      	ldr	r3, [r7, #4]
 801d1d8:	2250      	movs	r2, #80	@ 0x50
 801d1da:	5a9b      	ldrh	r3, [r3, r2]
 801d1dc:	b29b      	uxth	r3, r3
 801d1de:	001a      	movs	r2, r3
 801d1e0:	187b      	adds	r3, r7, r1
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	189b      	adds	r3, r3, r2
 801d1e6:	187a      	adds	r2, r7, r1
 801d1e8:	6013      	str	r3, [r2, #0]
 801d1ea:	683b      	ldr	r3, [r7, #0]
 801d1ec:	781b      	ldrb	r3, [r3, #0]
 801d1ee:	00da      	lsls	r2, r3, #3
 801d1f0:	187b      	adds	r3, r7, r1
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	18d3      	adds	r3, r2, r3
 801d1f6:	4a37      	ldr	r2, [pc, #220]	@ (801d2d4 <USB_EPStartXfer+0x11b0>)
 801d1f8:	4694      	mov	ip, r2
 801d1fa:	4463      	add	r3, ip
 801d1fc:	21b8      	movs	r1, #184	@ 0xb8
 801d1fe:	187a      	adds	r2, r7, r1
 801d200:	6013      	str	r3, [r2, #0]
 801d202:	187b      	adds	r3, r7, r1
 801d204:	681b      	ldr	r3, [r3, #0]
 801d206:	881b      	ldrh	r3, [r3, #0]
 801d208:	b29b      	uxth	r3, r3
 801d20a:	059b      	lsls	r3, r3, #22
 801d20c:	0d9b      	lsrs	r3, r3, #22
 801d20e:	b29a      	uxth	r2, r3
 801d210:	187b      	adds	r3, r7, r1
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	801a      	strh	r2, [r3, #0]
 801d216:	1d7b      	adds	r3, r7, #5
 801d218:	33ff      	adds	r3, #255	@ 0xff
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	2b3e      	cmp	r3, #62	@ 0x3e
 801d21e:	d925      	bls.n	801d26c <USB_EPStartXfer+0x1148>
 801d220:	1d7b      	adds	r3, r7, #5
 801d222:	33ff      	adds	r3, #255	@ 0xff
 801d224:	681b      	ldr	r3, [r3, #0]
 801d226:	095b      	lsrs	r3, r3, #5
 801d228:	21d8      	movs	r1, #216	@ 0xd8
 801d22a:	187a      	adds	r2, r7, r1
 801d22c:	6013      	str	r3, [r2, #0]
 801d22e:	1d7b      	adds	r3, r7, #5
 801d230:	33ff      	adds	r3, #255	@ 0xff
 801d232:	681b      	ldr	r3, [r3, #0]
 801d234:	221f      	movs	r2, #31
 801d236:	4013      	ands	r3, r2
 801d238:	d104      	bne.n	801d244 <USB_EPStartXfer+0x1120>
 801d23a:	187b      	adds	r3, r7, r1
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	3b01      	subs	r3, #1
 801d240:	187a      	adds	r2, r7, r1
 801d242:	6013      	str	r3, [r2, #0]
 801d244:	21b8      	movs	r1, #184	@ 0xb8
 801d246:	187b      	adds	r3, r7, r1
 801d248:	681b      	ldr	r3, [r3, #0]
 801d24a:	881b      	ldrh	r3, [r3, #0]
 801d24c:	b29a      	uxth	r2, r3
 801d24e:	23d8      	movs	r3, #216	@ 0xd8
 801d250:	18fb      	adds	r3, r7, r3
 801d252:	681b      	ldr	r3, [r3, #0]
 801d254:	b29b      	uxth	r3, r3
 801d256:	029b      	lsls	r3, r3, #10
 801d258:	b29b      	uxth	r3, r3
 801d25a:	4313      	orrs	r3, r2
 801d25c:	b29b      	uxth	r3, r3
 801d25e:	4a21      	ldr	r2, [pc, #132]	@ (801d2e4 <USB_EPStartXfer+0x11c0>)
 801d260:	4313      	orrs	r3, r2
 801d262:	b29a      	uxth	r2, r3
 801d264:	187b      	adds	r3, r7, r1
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	801a      	strh	r2, [r3, #0]
 801d26a:	e062      	b.n	801d332 <USB_EPStartXfer+0x120e>
 801d26c:	1d7b      	adds	r3, r7, #5
 801d26e:	33ff      	adds	r3, #255	@ 0xff
 801d270:	681b      	ldr	r3, [r3, #0]
 801d272:	2b00      	cmp	r3, #0
 801d274:	d10b      	bne.n	801d28e <USB_EPStartXfer+0x116a>
 801d276:	21b8      	movs	r1, #184	@ 0xb8
 801d278:	187b      	adds	r3, r7, r1
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	881b      	ldrh	r3, [r3, #0]
 801d27e:	b29b      	uxth	r3, r3
 801d280:	4a18      	ldr	r2, [pc, #96]	@ (801d2e4 <USB_EPStartXfer+0x11c0>)
 801d282:	4313      	orrs	r3, r2
 801d284:	b29a      	uxth	r2, r3
 801d286:	187b      	adds	r3, r7, r1
 801d288:	681b      	ldr	r3, [r3, #0]
 801d28a:	801a      	strh	r2, [r3, #0]
 801d28c:	e051      	b.n	801d332 <USB_EPStartXfer+0x120e>
 801d28e:	1d7b      	adds	r3, r7, #5
 801d290:	33ff      	adds	r3, #255	@ 0xff
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	085b      	lsrs	r3, r3, #1
 801d296:	21d8      	movs	r1, #216	@ 0xd8
 801d298:	187a      	adds	r2, r7, r1
 801d29a:	6013      	str	r3, [r2, #0]
 801d29c:	1d7b      	adds	r3, r7, #5
 801d29e:	33ff      	adds	r3, #255	@ 0xff
 801d2a0:	681b      	ldr	r3, [r3, #0]
 801d2a2:	2201      	movs	r2, #1
 801d2a4:	4013      	ands	r3, r2
 801d2a6:	d004      	beq.n	801d2b2 <USB_EPStartXfer+0x118e>
 801d2a8:	187b      	adds	r3, r7, r1
 801d2aa:	681b      	ldr	r3, [r3, #0]
 801d2ac:	3301      	adds	r3, #1
 801d2ae:	187a      	adds	r2, r7, r1
 801d2b0:	6013      	str	r3, [r2, #0]
 801d2b2:	21b8      	movs	r1, #184	@ 0xb8
 801d2b4:	187b      	adds	r3, r7, r1
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	881b      	ldrh	r3, [r3, #0]
 801d2ba:	b29a      	uxth	r2, r3
 801d2bc:	23d8      	movs	r3, #216	@ 0xd8
 801d2be:	18fb      	adds	r3, r7, r3
 801d2c0:	681b      	ldr	r3, [r3, #0]
 801d2c2:	b29b      	uxth	r3, r3
 801d2c4:	029b      	lsls	r3, r3, #10
 801d2c6:	b29b      	uxth	r3, r3
 801d2c8:	4313      	orrs	r3, r2
 801d2ca:	b29a      	uxth	r2, r3
 801d2cc:	187b      	adds	r3, r7, r1
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	801a      	strh	r2, [r3, #0]
 801d2d2:	e02e      	b.n	801d332 <USB_EPStartXfer+0x120e>
 801d2d4:	00000406 	.word	0x00000406
 801d2d8:	ffff8f8f 	.word	0xffff8f8f
 801d2dc:	ffff80c0 	.word	0xffff80c0
 801d2e0:	00000402 	.word	0x00000402
 801d2e4:	ffff8000 	.word	0xffff8000
 801d2e8:	683b      	ldr	r3, [r7, #0]
 801d2ea:	785b      	ldrb	r3, [r3, #1]
 801d2ec:	2b01      	cmp	r3, #1
 801d2ee:	d120      	bne.n	801d332 <USB_EPStartXfer+0x120e>
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	2250      	movs	r2, #80	@ 0x50
 801d2f4:	5a9b      	ldrh	r3, [r3, r2]
 801d2f6:	b29b      	uxth	r3, r3
 801d2f8:	001a      	movs	r2, r3
 801d2fa:	21c4      	movs	r1, #196	@ 0xc4
 801d2fc:	187b      	adds	r3, r7, r1
 801d2fe:	681b      	ldr	r3, [r3, #0]
 801d300:	189b      	adds	r3, r3, r2
 801d302:	187a      	adds	r2, r7, r1
 801d304:	6013      	str	r3, [r2, #0]
 801d306:	683b      	ldr	r3, [r7, #0]
 801d308:	781b      	ldrb	r3, [r3, #0]
 801d30a:	00da      	lsls	r2, r3, #3
 801d30c:	187b      	adds	r3, r7, r1
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	18d3      	adds	r3, r2, r3
 801d312:	4a1d      	ldr	r2, [pc, #116]	@ (801d388 <USB_EPStartXfer+0x1264>)
 801d314:	4694      	mov	ip, r2
 801d316:	4463      	add	r3, ip
 801d318:	21c0      	movs	r1, #192	@ 0xc0
 801d31a:	187a      	adds	r2, r7, r1
 801d31c:	6013      	str	r3, [r2, #0]
 801d31e:	1d7b      	adds	r3, r7, #5
 801d320:	33ff      	adds	r3, #255	@ 0xff
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	b29a      	uxth	r2, r3
 801d326:	187b      	adds	r3, r7, r1
 801d328:	681b      	ldr	r3, [r3, #0]
 801d32a:	801a      	strh	r2, [r3, #0]
 801d32c:	e001      	b.n	801d332 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801d32e:	2301      	movs	r3, #1
 801d330:	e025      	b.n	801d37e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801d332:	687a      	ldr	r2, [r7, #4]
 801d334:	683b      	ldr	r3, [r7, #0]
 801d336:	781b      	ldrb	r3, [r3, #0]
 801d338:	009b      	lsls	r3, r3, #2
 801d33a:	18d3      	adds	r3, r2, r3
 801d33c:	881b      	ldrh	r3, [r3, #0]
 801d33e:	b29a      	uxth	r2, r3
 801d340:	208a      	movs	r0, #138	@ 0x8a
 801d342:	183b      	adds	r3, r7, r0
 801d344:	4911      	ldr	r1, [pc, #68]	@ (801d38c <USB_EPStartXfer+0x1268>)
 801d346:	400a      	ands	r2, r1
 801d348:	801a      	strh	r2, [r3, #0]
 801d34a:	183b      	adds	r3, r7, r0
 801d34c:	183a      	adds	r2, r7, r0
 801d34e:	8812      	ldrh	r2, [r2, #0]
 801d350:	2180      	movs	r1, #128	@ 0x80
 801d352:	0149      	lsls	r1, r1, #5
 801d354:	404a      	eors	r2, r1
 801d356:	801a      	strh	r2, [r3, #0]
 801d358:	183b      	adds	r3, r7, r0
 801d35a:	183a      	adds	r2, r7, r0
 801d35c:	8812      	ldrh	r2, [r2, #0]
 801d35e:	2180      	movs	r1, #128	@ 0x80
 801d360:	0189      	lsls	r1, r1, #6
 801d362:	404a      	eors	r2, r1
 801d364:	801a      	strh	r2, [r3, #0]
 801d366:	687a      	ldr	r2, [r7, #4]
 801d368:	683b      	ldr	r3, [r7, #0]
 801d36a:	781b      	ldrb	r3, [r3, #0]
 801d36c:	009b      	lsls	r3, r3, #2
 801d36e:	18d3      	adds	r3, r2, r3
 801d370:	183a      	adds	r2, r7, r0
 801d372:	8812      	ldrh	r2, [r2, #0]
 801d374:	4906      	ldr	r1, [pc, #24]	@ (801d390 <USB_EPStartXfer+0x126c>)
 801d376:	430a      	orrs	r2, r1
 801d378:	b292      	uxth	r2, r2
 801d37a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801d37c:	2300      	movs	r3, #0
}
 801d37e:	0018      	movs	r0, r3
 801d380:	46bd      	mov	sp, r7
 801d382:	b043      	add	sp, #268	@ 0x10c
 801d384:	bd90      	pop	{r4, r7, pc}
 801d386:	46c0      	nop			@ (mov r8, r8)
 801d388:	00000406 	.word	0x00000406
 801d38c:	ffffbf8f 	.word	0xffffbf8f
 801d390:	ffff8080 	.word	0xffff8080

0801d394 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d394:	b580      	push	{r7, lr}
 801d396:	b084      	sub	sp, #16
 801d398:	af00      	add	r7, sp, #0
 801d39a:	6078      	str	r0, [r7, #4]
 801d39c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801d39e:	683b      	ldr	r3, [r7, #0]
 801d3a0:	785b      	ldrb	r3, [r3, #1]
 801d3a2:	2b00      	cmp	r3, #0
 801d3a4:	d01d      	beq.n	801d3e2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801d3a6:	687a      	ldr	r2, [r7, #4]
 801d3a8:	683b      	ldr	r3, [r7, #0]
 801d3aa:	781b      	ldrb	r3, [r3, #0]
 801d3ac:	009b      	lsls	r3, r3, #2
 801d3ae:	18d3      	adds	r3, r2, r3
 801d3b0:	881b      	ldrh	r3, [r3, #0]
 801d3b2:	b29a      	uxth	r2, r3
 801d3b4:	200c      	movs	r0, #12
 801d3b6:	183b      	adds	r3, r7, r0
 801d3b8:	491b      	ldr	r1, [pc, #108]	@ (801d428 <USB_EPSetStall+0x94>)
 801d3ba:	400a      	ands	r2, r1
 801d3bc:	801a      	strh	r2, [r3, #0]
 801d3be:	183b      	adds	r3, r7, r0
 801d3c0:	183a      	adds	r2, r7, r0
 801d3c2:	8812      	ldrh	r2, [r2, #0]
 801d3c4:	2110      	movs	r1, #16
 801d3c6:	404a      	eors	r2, r1
 801d3c8:	801a      	strh	r2, [r3, #0]
 801d3ca:	687a      	ldr	r2, [r7, #4]
 801d3cc:	683b      	ldr	r3, [r7, #0]
 801d3ce:	781b      	ldrb	r3, [r3, #0]
 801d3d0:	009b      	lsls	r3, r3, #2
 801d3d2:	18d3      	adds	r3, r2, r3
 801d3d4:	183a      	adds	r2, r7, r0
 801d3d6:	8812      	ldrh	r2, [r2, #0]
 801d3d8:	4914      	ldr	r1, [pc, #80]	@ (801d42c <USB_EPSetStall+0x98>)
 801d3da:	430a      	orrs	r2, r1
 801d3dc:	b292      	uxth	r2, r2
 801d3de:	801a      	strh	r2, [r3, #0]
 801d3e0:	e01d      	b.n	801d41e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801d3e2:	687a      	ldr	r2, [r7, #4]
 801d3e4:	683b      	ldr	r3, [r7, #0]
 801d3e6:	781b      	ldrb	r3, [r3, #0]
 801d3e8:	009b      	lsls	r3, r3, #2
 801d3ea:	18d3      	adds	r3, r2, r3
 801d3ec:	881b      	ldrh	r3, [r3, #0]
 801d3ee:	b29a      	uxth	r2, r3
 801d3f0:	200e      	movs	r0, #14
 801d3f2:	183b      	adds	r3, r7, r0
 801d3f4:	490e      	ldr	r1, [pc, #56]	@ (801d430 <USB_EPSetStall+0x9c>)
 801d3f6:	400a      	ands	r2, r1
 801d3f8:	801a      	strh	r2, [r3, #0]
 801d3fa:	183b      	adds	r3, r7, r0
 801d3fc:	183a      	adds	r2, r7, r0
 801d3fe:	8812      	ldrh	r2, [r2, #0]
 801d400:	2180      	movs	r1, #128	@ 0x80
 801d402:	0149      	lsls	r1, r1, #5
 801d404:	404a      	eors	r2, r1
 801d406:	801a      	strh	r2, [r3, #0]
 801d408:	687a      	ldr	r2, [r7, #4]
 801d40a:	683b      	ldr	r3, [r7, #0]
 801d40c:	781b      	ldrb	r3, [r3, #0]
 801d40e:	009b      	lsls	r3, r3, #2
 801d410:	18d3      	adds	r3, r2, r3
 801d412:	183a      	adds	r2, r7, r0
 801d414:	8812      	ldrh	r2, [r2, #0]
 801d416:	4905      	ldr	r1, [pc, #20]	@ (801d42c <USB_EPSetStall+0x98>)
 801d418:	430a      	orrs	r2, r1
 801d41a:	b292      	uxth	r2, r2
 801d41c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801d41e:	2300      	movs	r3, #0
}
 801d420:	0018      	movs	r0, r3
 801d422:	46bd      	mov	sp, r7
 801d424:	b004      	add	sp, #16
 801d426:	bd80      	pop	{r7, pc}
 801d428:	ffff8fbf 	.word	0xffff8fbf
 801d42c:	ffff8080 	.word	0xffff8080
 801d430:	ffffbf8f 	.word	0xffffbf8f

0801d434 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d434:	b580      	push	{r7, lr}
 801d436:	b086      	sub	sp, #24
 801d438:	af00      	add	r7, sp, #0
 801d43a:	6078      	str	r0, [r7, #4]
 801d43c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801d43e:	683b      	ldr	r3, [r7, #0]
 801d440:	7b1b      	ldrb	r3, [r3, #12]
 801d442:	2b00      	cmp	r3, #0
 801d444:	d000      	beq.n	801d448 <USB_EPClearStall+0x14>
 801d446:	e095      	b.n	801d574 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801d448:	683b      	ldr	r3, [r7, #0]
 801d44a:	785b      	ldrb	r3, [r3, #1]
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d046      	beq.n	801d4de <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801d450:	687a      	ldr	r2, [r7, #4]
 801d452:	683b      	ldr	r3, [r7, #0]
 801d454:	781b      	ldrb	r3, [r3, #0]
 801d456:	009b      	lsls	r3, r3, #2
 801d458:	18d2      	adds	r2, r2, r3
 801d45a:	2110      	movs	r1, #16
 801d45c:	187b      	adds	r3, r7, r1
 801d45e:	8812      	ldrh	r2, [r2, #0]
 801d460:	801a      	strh	r2, [r3, #0]
 801d462:	187b      	adds	r3, r7, r1
 801d464:	881b      	ldrh	r3, [r3, #0]
 801d466:	2240      	movs	r2, #64	@ 0x40
 801d468:	4013      	ands	r3, r2
 801d46a:	d016      	beq.n	801d49a <USB_EPClearStall+0x66>
 801d46c:	687a      	ldr	r2, [r7, #4]
 801d46e:	683b      	ldr	r3, [r7, #0]
 801d470:	781b      	ldrb	r3, [r3, #0]
 801d472:	009b      	lsls	r3, r3, #2
 801d474:	18d3      	adds	r3, r2, r3
 801d476:	881b      	ldrh	r3, [r3, #0]
 801d478:	b29a      	uxth	r2, r3
 801d47a:	200e      	movs	r0, #14
 801d47c:	183b      	adds	r3, r7, r0
 801d47e:	4940      	ldr	r1, [pc, #256]	@ (801d580 <USB_EPClearStall+0x14c>)
 801d480:	400a      	ands	r2, r1
 801d482:	801a      	strh	r2, [r3, #0]
 801d484:	687a      	ldr	r2, [r7, #4]
 801d486:	683b      	ldr	r3, [r7, #0]
 801d488:	781b      	ldrb	r3, [r3, #0]
 801d48a:	009b      	lsls	r3, r3, #2
 801d48c:	18d3      	adds	r3, r2, r3
 801d48e:	183a      	adds	r2, r7, r0
 801d490:	8812      	ldrh	r2, [r2, #0]
 801d492:	493c      	ldr	r1, [pc, #240]	@ (801d584 <USB_EPClearStall+0x150>)
 801d494:	430a      	orrs	r2, r1
 801d496:	b292      	uxth	r2, r2
 801d498:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801d49a:	683b      	ldr	r3, [r7, #0]
 801d49c:	78db      	ldrb	r3, [r3, #3]
 801d49e:	2b01      	cmp	r3, #1
 801d4a0:	d068      	beq.n	801d574 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801d4a2:	687a      	ldr	r2, [r7, #4]
 801d4a4:	683b      	ldr	r3, [r7, #0]
 801d4a6:	781b      	ldrb	r3, [r3, #0]
 801d4a8:	009b      	lsls	r3, r3, #2
 801d4aa:	18d3      	adds	r3, r2, r3
 801d4ac:	881b      	ldrh	r3, [r3, #0]
 801d4ae:	b29a      	uxth	r2, r3
 801d4b0:	200c      	movs	r0, #12
 801d4b2:	183b      	adds	r3, r7, r0
 801d4b4:	4934      	ldr	r1, [pc, #208]	@ (801d588 <USB_EPClearStall+0x154>)
 801d4b6:	400a      	ands	r2, r1
 801d4b8:	801a      	strh	r2, [r3, #0]
 801d4ba:	183b      	adds	r3, r7, r0
 801d4bc:	183a      	adds	r2, r7, r0
 801d4be:	8812      	ldrh	r2, [r2, #0]
 801d4c0:	2120      	movs	r1, #32
 801d4c2:	404a      	eors	r2, r1
 801d4c4:	801a      	strh	r2, [r3, #0]
 801d4c6:	687a      	ldr	r2, [r7, #4]
 801d4c8:	683b      	ldr	r3, [r7, #0]
 801d4ca:	781b      	ldrb	r3, [r3, #0]
 801d4cc:	009b      	lsls	r3, r3, #2
 801d4ce:	18d3      	adds	r3, r2, r3
 801d4d0:	183a      	adds	r2, r7, r0
 801d4d2:	8812      	ldrh	r2, [r2, #0]
 801d4d4:	492d      	ldr	r1, [pc, #180]	@ (801d58c <USB_EPClearStall+0x158>)
 801d4d6:	430a      	orrs	r2, r1
 801d4d8:	b292      	uxth	r2, r2
 801d4da:	801a      	strh	r2, [r3, #0]
 801d4dc:	e04a      	b.n	801d574 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801d4de:	687a      	ldr	r2, [r7, #4]
 801d4e0:	683b      	ldr	r3, [r7, #0]
 801d4e2:	781b      	ldrb	r3, [r3, #0]
 801d4e4:	009b      	lsls	r3, r3, #2
 801d4e6:	18d2      	adds	r2, r2, r3
 801d4e8:	2116      	movs	r1, #22
 801d4ea:	187b      	adds	r3, r7, r1
 801d4ec:	8812      	ldrh	r2, [r2, #0]
 801d4ee:	801a      	strh	r2, [r3, #0]
 801d4f0:	187b      	adds	r3, r7, r1
 801d4f2:	881a      	ldrh	r2, [r3, #0]
 801d4f4:	2380      	movs	r3, #128	@ 0x80
 801d4f6:	01db      	lsls	r3, r3, #7
 801d4f8:	4013      	ands	r3, r2
 801d4fa:	d016      	beq.n	801d52a <USB_EPClearStall+0xf6>
 801d4fc:	687a      	ldr	r2, [r7, #4]
 801d4fe:	683b      	ldr	r3, [r7, #0]
 801d500:	781b      	ldrb	r3, [r3, #0]
 801d502:	009b      	lsls	r3, r3, #2
 801d504:	18d3      	adds	r3, r2, r3
 801d506:	881b      	ldrh	r3, [r3, #0]
 801d508:	b29a      	uxth	r2, r3
 801d50a:	2014      	movs	r0, #20
 801d50c:	183b      	adds	r3, r7, r0
 801d50e:	491c      	ldr	r1, [pc, #112]	@ (801d580 <USB_EPClearStall+0x14c>)
 801d510:	400a      	ands	r2, r1
 801d512:	801a      	strh	r2, [r3, #0]
 801d514:	687a      	ldr	r2, [r7, #4]
 801d516:	683b      	ldr	r3, [r7, #0]
 801d518:	781b      	ldrb	r3, [r3, #0]
 801d51a:	009b      	lsls	r3, r3, #2
 801d51c:	18d3      	adds	r3, r2, r3
 801d51e:	183a      	adds	r2, r7, r0
 801d520:	8812      	ldrh	r2, [r2, #0]
 801d522:	491b      	ldr	r1, [pc, #108]	@ (801d590 <USB_EPClearStall+0x15c>)
 801d524:	430a      	orrs	r2, r1
 801d526:	b292      	uxth	r2, r2
 801d528:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801d52a:	687a      	ldr	r2, [r7, #4]
 801d52c:	683b      	ldr	r3, [r7, #0]
 801d52e:	781b      	ldrb	r3, [r3, #0]
 801d530:	009b      	lsls	r3, r3, #2
 801d532:	18d3      	adds	r3, r2, r3
 801d534:	881b      	ldrh	r3, [r3, #0]
 801d536:	b29a      	uxth	r2, r3
 801d538:	2012      	movs	r0, #18
 801d53a:	183b      	adds	r3, r7, r0
 801d53c:	4915      	ldr	r1, [pc, #84]	@ (801d594 <USB_EPClearStall+0x160>)
 801d53e:	400a      	ands	r2, r1
 801d540:	801a      	strh	r2, [r3, #0]
 801d542:	183b      	adds	r3, r7, r0
 801d544:	183a      	adds	r2, r7, r0
 801d546:	8812      	ldrh	r2, [r2, #0]
 801d548:	2180      	movs	r1, #128	@ 0x80
 801d54a:	0149      	lsls	r1, r1, #5
 801d54c:	404a      	eors	r2, r1
 801d54e:	801a      	strh	r2, [r3, #0]
 801d550:	183b      	adds	r3, r7, r0
 801d552:	183a      	adds	r2, r7, r0
 801d554:	8812      	ldrh	r2, [r2, #0]
 801d556:	2180      	movs	r1, #128	@ 0x80
 801d558:	0189      	lsls	r1, r1, #6
 801d55a:	404a      	eors	r2, r1
 801d55c:	801a      	strh	r2, [r3, #0]
 801d55e:	687a      	ldr	r2, [r7, #4]
 801d560:	683b      	ldr	r3, [r7, #0]
 801d562:	781b      	ldrb	r3, [r3, #0]
 801d564:	009b      	lsls	r3, r3, #2
 801d566:	18d3      	adds	r3, r2, r3
 801d568:	183a      	adds	r2, r7, r0
 801d56a:	8812      	ldrh	r2, [r2, #0]
 801d56c:	4907      	ldr	r1, [pc, #28]	@ (801d58c <USB_EPClearStall+0x158>)
 801d56e:	430a      	orrs	r2, r1
 801d570:	b292      	uxth	r2, r2
 801d572:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801d574:	2300      	movs	r3, #0
}
 801d576:	0018      	movs	r0, r3
 801d578:	46bd      	mov	sp, r7
 801d57a:	b006      	add	sp, #24
 801d57c:	bd80      	pop	{r7, pc}
 801d57e:	46c0      	nop			@ (mov r8, r8)
 801d580:	ffff8f8f 	.word	0xffff8f8f
 801d584:	ffff80c0 	.word	0xffff80c0
 801d588:	ffff8fbf 	.word	0xffff8fbf
 801d58c:	ffff8080 	.word	0xffff8080
 801d590:	ffffc080 	.word	0xffffc080
 801d594:	ffffbf8f 	.word	0xffffbf8f

0801d598 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801d598:	b580      	push	{r7, lr}
 801d59a:	b082      	sub	sp, #8
 801d59c:	af00      	add	r7, sp, #0
 801d59e:	6078      	str	r0, [r7, #4]
 801d5a0:	000a      	movs	r2, r1
 801d5a2:	1cfb      	adds	r3, r7, #3
 801d5a4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801d5a6:	1cfb      	adds	r3, r7, #3
 801d5a8:	781b      	ldrb	r3, [r3, #0]
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	d103      	bne.n	801d5b6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801d5ae:	687b      	ldr	r3, [r7, #4]
 801d5b0:	224c      	movs	r2, #76	@ 0x4c
 801d5b2:	2180      	movs	r1, #128	@ 0x80
 801d5b4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801d5b6:	2300      	movs	r3, #0
}
 801d5b8:	0018      	movs	r0, r3
 801d5ba:	46bd      	mov	sp, r7
 801d5bc:	b002      	add	sp, #8
 801d5be:	bd80      	pop	{r7, pc}

0801d5c0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801d5c0:	b580      	push	{r7, lr}
 801d5c2:	b082      	sub	sp, #8
 801d5c4:	af00      	add	r7, sp, #0
 801d5c6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801d5c8:	687b      	ldr	r3, [r7, #4]
 801d5ca:	2258      	movs	r2, #88	@ 0x58
 801d5cc:	5a9b      	ldrh	r3, [r3, r2]
 801d5ce:	b29b      	uxth	r3, r3
 801d5d0:	4a05      	ldr	r2, [pc, #20]	@ (801d5e8 <USB_DevConnect+0x28>)
 801d5d2:	4313      	orrs	r3, r2
 801d5d4:	b299      	uxth	r1, r3
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	2258      	movs	r2, #88	@ 0x58
 801d5da:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801d5dc:	2300      	movs	r3, #0
}
 801d5de:	0018      	movs	r0, r3
 801d5e0:	46bd      	mov	sp, r7
 801d5e2:	b002      	add	sp, #8
 801d5e4:	bd80      	pop	{r7, pc}
 801d5e6:	46c0      	nop			@ (mov r8, r8)
 801d5e8:	ffff8000 	.word	0xffff8000

0801d5ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801d5ec:	b580      	push	{r7, lr}
 801d5ee:	b084      	sub	sp, #16
 801d5f0:	af00      	add	r7, sp, #0
 801d5f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801d5f4:	687b      	ldr	r3, [r7, #4]
 801d5f6:	2244      	movs	r2, #68	@ 0x44
 801d5f8:	5a9b      	ldrh	r3, [r3, r2]
 801d5fa:	b29b      	uxth	r3, r3
 801d5fc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801d5fe:	68fb      	ldr	r3, [r7, #12]
}
 801d600:	0018      	movs	r0, r3
 801d602:	46bd      	mov	sp, r7
 801d604:	b004      	add	sp, #16
 801d606:	bd80      	pop	{r7, pc}

0801d608 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801d608:	b580      	push	{r7, lr}
 801d60a:	b08a      	sub	sp, #40	@ 0x28
 801d60c:	af00      	add	r7, sp, #0
 801d60e:	60f8      	str	r0, [r7, #12]
 801d610:	60b9      	str	r1, [r7, #8]
 801d612:	0019      	movs	r1, r3
 801d614:	1dbb      	adds	r3, r7, #6
 801d616:	801a      	strh	r2, [r3, #0]
 801d618:	1d3b      	adds	r3, r7, #4
 801d61a:	1c0a      	adds	r2, r1, #0
 801d61c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801d61e:	1d3b      	adds	r3, r7, #4
 801d620:	881b      	ldrh	r3, [r3, #0]
 801d622:	3301      	adds	r3, #1
 801d624:	085b      	lsrs	r3, r3, #1
 801d626:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801d628:	68fb      	ldr	r3, [r7, #12]
 801d62a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801d62c:	68bb      	ldr	r3, [r7, #8]
 801d62e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801d630:	1dbb      	adds	r3, r7, #6
 801d632:	881a      	ldrh	r2, [r3, #0]
 801d634:	697b      	ldr	r3, [r7, #20]
 801d636:	18d3      	adds	r3, r2, r3
 801d638:	2280      	movs	r2, #128	@ 0x80
 801d63a:	00d2      	lsls	r2, r2, #3
 801d63c:	4694      	mov	ip, r2
 801d63e:	4463      	add	r3, ip
 801d640:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801d642:	69bb      	ldr	r3, [r7, #24]
 801d644:	627b      	str	r3, [r7, #36]	@ 0x24
 801d646:	e020      	b.n	801d68a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801d648:	69fb      	ldr	r3, [r7, #28]
 801d64a:	781a      	ldrb	r2, [r3, #0]
 801d64c:	2112      	movs	r1, #18
 801d64e:	187b      	adds	r3, r7, r1
 801d650:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801d652:	69fb      	ldr	r3, [r7, #28]
 801d654:	3301      	adds	r3, #1
 801d656:	781b      	ldrb	r3, [r3, #0]
 801d658:	021b      	lsls	r3, r3, #8
 801d65a:	b21a      	sxth	r2, r3
 801d65c:	187b      	adds	r3, r7, r1
 801d65e:	2000      	movs	r0, #0
 801d660:	5e1b      	ldrsh	r3, [r3, r0]
 801d662:	4313      	orrs	r3, r2
 801d664:	b21a      	sxth	r2, r3
 801d666:	187b      	adds	r3, r7, r1
 801d668:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801d66a:	6a3b      	ldr	r3, [r7, #32]
 801d66c:	187a      	adds	r2, r7, r1
 801d66e:	8812      	ldrh	r2, [r2, #0]
 801d670:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801d672:	6a3b      	ldr	r3, [r7, #32]
 801d674:	3302      	adds	r3, #2
 801d676:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801d678:	69fb      	ldr	r3, [r7, #28]
 801d67a:	3301      	adds	r3, #1
 801d67c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801d67e:	69fb      	ldr	r3, [r7, #28]
 801d680:	3301      	adds	r3, #1
 801d682:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801d684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d686:	3b01      	subs	r3, #1
 801d688:	627b      	str	r3, [r7, #36]	@ 0x24
 801d68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	d1db      	bne.n	801d648 <USB_WritePMA+0x40>
  }
}
 801d690:	46c0      	nop			@ (mov r8, r8)
 801d692:	46c0      	nop			@ (mov r8, r8)
 801d694:	46bd      	mov	sp, r7
 801d696:	b00a      	add	sp, #40	@ 0x28
 801d698:	bd80      	pop	{r7, pc}

0801d69a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801d69a:	b580      	push	{r7, lr}
 801d69c:	b08a      	sub	sp, #40	@ 0x28
 801d69e:	af00      	add	r7, sp, #0
 801d6a0:	60f8      	str	r0, [r7, #12]
 801d6a2:	60b9      	str	r1, [r7, #8]
 801d6a4:	0019      	movs	r1, r3
 801d6a6:	1dbb      	adds	r3, r7, #6
 801d6a8:	801a      	strh	r2, [r3, #0]
 801d6aa:	1d3b      	adds	r3, r7, #4
 801d6ac:	1c0a      	adds	r2, r1, #0
 801d6ae:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801d6b0:	1d3b      	adds	r3, r7, #4
 801d6b2:	881b      	ldrh	r3, [r3, #0]
 801d6b4:	085b      	lsrs	r3, r3, #1
 801d6b6:	b29b      	uxth	r3, r3
 801d6b8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801d6ba:	68fb      	ldr	r3, [r7, #12]
 801d6bc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801d6be:	68bb      	ldr	r3, [r7, #8]
 801d6c0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801d6c2:	1dbb      	adds	r3, r7, #6
 801d6c4:	881a      	ldrh	r2, [r3, #0]
 801d6c6:	697b      	ldr	r3, [r7, #20]
 801d6c8:	18d3      	adds	r3, r2, r3
 801d6ca:	2280      	movs	r2, #128	@ 0x80
 801d6cc:	00d2      	lsls	r2, r2, #3
 801d6ce:	4694      	mov	ip, r2
 801d6d0:	4463      	add	r3, ip
 801d6d2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801d6d4:	69bb      	ldr	r3, [r7, #24]
 801d6d6:	627b      	str	r3, [r7, #36]	@ 0x24
 801d6d8:	e018      	b.n	801d70c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801d6da:	6a3b      	ldr	r3, [r7, #32]
 801d6dc:	881b      	ldrh	r3, [r3, #0]
 801d6de:	b29b      	uxth	r3, r3
 801d6e0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801d6e2:	6a3b      	ldr	r3, [r7, #32]
 801d6e4:	3302      	adds	r3, #2
 801d6e6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801d6e8:	693b      	ldr	r3, [r7, #16]
 801d6ea:	b2da      	uxtb	r2, r3
 801d6ec:	69fb      	ldr	r3, [r7, #28]
 801d6ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801d6f0:	69fb      	ldr	r3, [r7, #28]
 801d6f2:	3301      	adds	r3, #1
 801d6f4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801d6f6:	693b      	ldr	r3, [r7, #16]
 801d6f8:	0a1b      	lsrs	r3, r3, #8
 801d6fa:	b2da      	uxtb	r2, r3
 801d6fc:	69fb      	ldr	r3, [r7, #28]
 801d6fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801d700:	69fb      	ldr	r3, [r7, #28]
 801d702:	3301      	adds	r3, #1
 801d704:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801d706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d708:	3b01      	subs	r3, #1
 801d70a:	627b      	str	r3, [r7, #36]	@ 0x24
 801d70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d70e:	2b00      	cmp	r3, #0
 801d710:	d1e3      	bne.n	801d6da <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801d712:	1d3b      	adds	r3, r7, #4
 801d714:	881b      	ldrh	r3, [r3, #0]
 801d716:	2201      	movs	r2, #1
 801d718:	4013      	ands	r3, r2
 801d71a:	b29b      	uxth	r3, r3
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d007      	beq.n	801d730 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801d720:	6a3b      	ldr	r3, [r7, #32]
 801d722:	881b      	ldrh	r3, [r3, #0]
 801d724:	b29b      	uxth	r3, r3
 801d726:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801d728:	693b      	ldr	r3, [r7, #16]
 801d72a:	b2da      	uxtb	r2, r3
 801d72c:	69fb      	ldr	r3, [r7, #28]
 801d72e:	701a      	strb	r2, [r3, #0]
  }
}
 801d730:	46c0      	nop			@ (mov r8, r8)
 801d732:	46bd      	mov	sp, r7
 801d734:	b00a      	add	sp, #40	@ 0x28
 801d736:	bd80      	pop	{r7, pc}

0801d738 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801d738:	b580      	push	{r7, lr}
 801d73a:	b084      	sub	sp, #16
 801d73c:	af00      	add	r7, sp, #0
 801d73e:	6078      	str	r0, [r7, #4]
 801d740:	000a      	movs	r2, r1
 801d742:	1cfb      	adds	r3, r7, #3
 801d744:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801d746:	230f      	movs	r3, #15
 801d748:	18fb      	adds	r3, r7, r3
 801d74a:	2200      	movs	r2, #0
 801d74c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	7c1b      	ldrb	r3, [r3, #16]
 801d752:	2b00      	cmp	r3, #0
 801d754:	d116      	bne.n	801d784 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801d756:	2380      	movs	r3, #128	@ 0x80
 801d758:	009b      	lsls	r3, r3, #2
 801d75a:	6878      	ldr	r0, [r7, #4]
 801d75c:	2202      	movs	r2, #2
 801d75e:	2181      	movs	r1, #129	@ 0x81
 801d760:	f002 f8eb 	bl	801f93a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	2201      	movs	r2, #1
 801d768:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801d76a:	2380      	movs	r3, #128	@ 0x80
 801d76c:	009b      	lsls	r3, r3, #2
 801d76e:	6878      	ldr	r0, [r7, #4]
 801d770:	2202      	movs	r2, #2
 801d772:	2101      	movs	r1, #1
 801d774:	f002 f8e1 	bl	801f93a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801d778:	687a      	ldr	r2, [r7, #4]
 801d77a:	23b6      	movs	r3, #182	@ 0xb6
 801d77c:	005b      	lsls	r3, r3, #1
 801d77e:	2101      	movs	r1, #1
 801d780:	50d1      	str	r1, [r2, r3]
 801d782:	e013      	b.n	801d7ac <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801d784:	6878      	ldr	r0, [r7, #4]
 801d786:	2340      	movs	r3, #64	@ 0x40
 801d788:	2202      	movs	r2, #2
 801d78a:	2181      	movs	r1, #129	@ 0x81
 801d78c:	f002 f8d5 	bl	801f93a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	2201      	movs	r2, #1
 801d794:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801d796:	6878      	ldr	r0, [r7, #4]
 801d798:	2340      	movs	r3, #64	@ 0x40
 801d79a:	2202      	movs	r2, #2
 801d79c:	2101      	movs	r1, #1
 801d79e:	f002 f8cc 	bl	801f93a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801d7a2:	687a      	ldr	r2, [r7, #4]
 801d7a4:	23b6      	movs	r3, #182	@ 0xb6
 801d7a6:	005b      	lsls	r3, r3, #1
 801d7a8:	2101      	movs	r1, #1
 801d7aa:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801d7ac:	6878      	ldr	r0, [r7, #4]
 801d7ae:	2308      	movs	r3, #8
 801d7b0:	2203      	movs	r2, #3
 801d7b2:	2182      	movs	r1, #130	@ 0x82
 801d7b4:	f002 f8c1 	bl	801f93a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801d7b8:	687b      	ldr	r3, [r7, #4]
 801d7ba:	2201      	movs	r2, #1
 801d7bc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801d7be:	2387      	movs	r3, #135	@ 0x87
 801d7c0:	009b      	lsls	r3, r3, #2
 801d7c2:	0018      	movs	r0, r3
 801d7c4:	f002 fa52 	bl	801fc6c <USBD_static_malloc>
 801d7c8:	0001      	movs	r1, r0
 801d7ca:	687a      	ldr	r2, [r7, #4]
 801d7cc:	23ae      	movs	r3, #174	@ 0xae
 801d7ce:	009b      	lsls	r3, r3, #2
 801d7d0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801d7d2:	687a      	ldr	r2, [r7, #4]
 801d7d4:	23ae      	movs	r3, #174	@ 0xae
 801d7d6:	009b      	lsls	r3, r3, #2
 801d7d8:	58d3      	ldr	r3, [r2, r3]
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	d104      	bne.n	801d7e8 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801d7de:	230f      	movs	r3, #15
 801d7e0:	18fb      	adds	r3, r7, r3
 801d7e2:	2201      	movs	r2, #1
 801d7e4:	701a      	strb	r2, [r3, #0]
 801d7e6:	e02c      	b.n	801d842 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801d7e8:	687a      	ldr	r2, [r7, #4]
 801d7ea:	23ae      	movs	r3, #174	@ 0xae
 801d7ec:	009b      	lsls	r3, r3, #2
 801d7ee:	58d3      	ldr	r3, [r2, r3]
 801d7f0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801d7f2:	687a      	ldr	r2, [r7, #4]
 801d7f4:	23af      	movs	r3, #175	@ 0xaf
 801d7f6:	009b      	lsls	r3, r3, #2
 801d7f8:	58d3      	ldr	r3, [r2, r3]
 801d7fa:	681b      	ldr	r3, [r3, #0]
 801d7fc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801d7fe:	68ba      	ldr	r2, [r7, #8]
 801d800:	2385      	movs	r3, #133	@ 0x85
 801d802:	009b      	lsls	r3, r3, #2
 801d804:	2100      	movs	r1, #0
 801d806:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801d808:	68ba      	ldr	r2, [r7, #8]
 801d80a:	2386      	movs	r3, #134	@ 0x86
 801d80c:	009b      	lsls	r3, r3, #2
 801d80e:	2100      	movs	r1, #0
 801d810:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	7c1b      	ldrb	r3, [r3, #16]
 801d816:	2b00      	cmp	r3, #0
 801d818:	d10a      	bne.n	801d830 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801d81a:	68ba      	ldr	r2, [r7, #8]
 801d81c:	2381      	movs	r3, #129	@ 0x81
 801d81e:	009b      	lsls	r3, r3, #2
 801d820:	58d2      	ldr	r2, [r2, r3]
 801d822:	2380      	movs	r3, #128	@ 0x80
 801d824:	009b      	lsls	r3, r3, #2
 801d826:	6878      	ldr	r0, [r7, #4]
 801d828:	2101      	movs	r1, #1
 801d82a:	f002 f9d1 	bl	801fbd0 <USBD_LL_PrepareReceive>
 801d82e:	e008      	b.n	801d842 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801d830:	68ba      	ldr	r2, [r7, #8]
 801d832:	2381      	movs	r3, #129	@ 0x81
 801d834:	009b      	lsls	r3, r3, #2
 801d836:	58d2      	ldr	r2, [r2, r3]
 801d838:	6878      	ldr	r0, [r7, #4]
 801d83a:	2340      	movs	r3, #64	@ 0x40
 801d83c:	2101      	movs	r1, #1
 801d83e:	f002 f9c7 	bl	801fbd0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801d842:	230f      	movs	r3, #15
 801d844:	18fb      	adds	r3, r7, r3
 801d846:	781b      	ldrb	r3, [r3, #0]
}
 801d848:	0018      	movs	r0, r3
 801d84a:	46bd      	mov	sp, r7
 801d84c:	b004      	add	sp, #16
 801d84e:	bd80      	pop	{r7, pc}

0801d850 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801d850:	b580      	push	{r7, lr}
 801d852:	b084      	sub	sp, #16
 801d854:	af00      	add	r7, sp, #0
 801d856:	6078      	str	r0, [r7, #4]
 801d858:	000a      	movs	r2, r1
 801d85a:	1cfb      	adds	r3, r7, #3
 801d85c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801d85e:	230f      	movs	r3, #15
 801d860:	18fb      	adds	r3, r7, r3
 801d862:	2200      	movs	r2, #0
 801d864:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	2181      	movs	r1, #129	@ 0x81
 801d86a:	0018      	movs	r0, r3
 801d86c:	f002 f89c 	bl	801f9a8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	2200      	movs	r2, #0
 801d874:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	2101      	movs	r1, #1
 801d87a:	0018      	movs	r0, r3
 801d87c:	f002 f894 	bl	801f9a8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801d880:	687a      	ldr	r2, [r7, #4]
 801d882:	23b6      	movs	r3, #182	@ 0xb6
 801d884:	005b      	lsls	r3, r3, #1
 801d886:	2100      	movs	r1, #0
 801d888:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801d88a:	687b      	ldr	r3, [r7, #4]
 801d88c:	2182      	movs	r1, #130	@ 0x82
 801d88e:	0018      	movs	r0, r3
 801d890:	f002 f88a 	bl	801f9a8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801d894:	687b      	ldr	r3, [r7, #4]
 801d896:	2200      	movs	r2, #0
 801d898:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801d89a:	687a      	ldr	r2, [r7, #4]
 801d89c:	23ae      	movs	r3, #174	@ 0xae
 801d89e:	009b      	lsls	r3, r3, #2
 801d8a0:	58d3      	ldr	r3, [r2, r3]
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d011      	beq.n	801d8ca <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801d8a6:	687a      	ldr	r2, [r7, #4]
 801d8a8:	23af      	movs	r3, #175	@ 0xaf
 801d8aa:	009b      	lsls	r3, r3, #2
 801d8ac:	58d3      	ldr	r3, [r2, r3]
 801d8ae:	685b      	ldr	r3, [r3, #4]
 801d8b0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801d8b2:	687a      	ldr	r2, [r7, #4]
 801d8b4:	23ae      	movs	r3, #174	@ 0xae
 801d8b6:	009b      	lsls	r3, r3, #2
 801d8b8:	58d3      	ldr	r3, [r2, r3]
 801d8ba:	0018      	movs	r0, r3
 801d8bc:	f002 f9e2 	bl	801fc84 <USBD_static_free>
    pdev->pClassData = NULL;
 801d8c0:	687a      	ldr	r2, [r7, #4]
 801d8c2:	23ae      	movs	r3, #174	@ 0xae
 801d8c4:	009b      	lsls	r3, r3, #2
 801d8c6:	2100      	movs	r1, #0
 801d8c8:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801d8ca:	230f      	movs	r3, #15
 801d8cc:	18fb      	adds	r3, r7, r3
 801d8ce:	781b      	ldrb	r3, [r3, #0]
}
 801d8d0:	0018      	movs	r0, r3
 801d8d2:	46bd      	mov	sp, r7
 801d8d4:	b004      	add	sp, #16
 801d8d6:	bd80      	pop	{r7, pc}

0801d8d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801d8d8:	b580      	push	{r7, lr}
 801d8da:	b086      	sub	sp, #24
 801d8dc:	af00      	add	r7, sp, #0
 801d8de:	6078      	str	r0, [r7, #4]
 801d8e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801d8e2:	687a      	ldr	r2, [r7, #4]
 801d8e4:	23ae      	movs	r3, #174	@ 0xae
 801d8e6:	009b      	lsls	r3, r3, #2
 801d8e8:	58d3      	ldr	r3, [r2, r3]
 801d8ea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801d8ec:	230f      	movs	r3, #15
 801d8ee:	18fb      	adds	r3, r7, r3
 801d8f0:	2200      	movs	r2, #0
 801d8f2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801d8f4:	230c      	movs	r3, #12
 801d8f6:	18fb      	adds	r3, r7, r3
 801d8f8:	2200      	movs	r2, #0
 801d8fa:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801d8fc:	2317      	movs	r3, #23
 801d8fe:	18fb      	adds	r3, r7, r3
 801d900:	2200      	movs	r2, #0
 801d902:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d904:	683b      	ldr	r3, [r7, #0]
 801d906:	781b      	ldrb	r3, [r3, #0]
 801d908:	001a      	movs	r2, r3
 801d90a:	2360      	movs	r3, #96	@ 0x60
 801d90c:	4013      	ands	r3, r2
 801d90e:	d03d      	beq.n	801d98c <USBD_CDC_Setup+0xb4>
 801d910:	2b20      	cmp	r3, #32
 801d912:	d000      	beq.n	801d916 <USBD_CDC_Setup+0x3e>
 801d914:	e094      	b.n	801da40 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801d916:	683b      	ldr	r3, [r7, #0]
 801d918:	88db      	ldrh	r3, [r3, #6]
 801d91a:	2b00      	cmp	r3, #0
 801d91c:	d02b      	beq.n	801d976 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801d91e:	683b      	ldr	r3, [r7, #0]
 801d920:	781b      	ldrb	r3, [r3, #0]
 801d922:	b25b      	sxtb	r3, r3
 801d924:	2b00      	cmp	r3, #0
 801d926:	da12      	bge.n	801d94e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801d928:	687a      	ldr	r2, [r7, #4]
 801d92a:	23af      	movs	r3, #175	@ 0xaf
 801d92c:	009b      	lsls	r3, r3, #2
 801d92e:	58d3      	ldr	r3, [r2, r3]
 801d930:	689b      	ldr	r3, [r3, #8]
 801d932:	683a      	ldr	r2, [r7, #0]
 801d934:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801d936:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801d938:	683a      	ldr	r2, [r7, #0]
 801d93a:	88d2      	ldrh	r2, [r2, #6]
 801d93c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801d93e:	6939      	ldr	r1, [r7, #16]
 801d940:	683b      	ldr	r3, [r7, #0]
 801d942:	88da      	ldrh	r2, [r3, #6]
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	0018      	movs	r0, r3
 801d948:	f001 fbaf 	bl	801f0aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801d94c:	e083      	b.n	801da56 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801d94e:	683b      	ldr	r3, [r7, #0]
 801d950:	7859      	ldrb	r1, [r3, #1]
 801d952:	693a      	ldr	r2, [r7, #16]
 801d954:	2380      	movs	r3, #128	@ 0x80
 801d956:	009b      	lsls	r3, r3, #2
 801d958:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801d95a:	683b      	ldr	r3, [r7, #0]
 801d95c:	88db      	ldrh	r3, [r3, #6]
 801d95e:	b2d9      	uxtb	r1, r3
 801d960:	693b      	ldr	r3, [r7, #16]
 801d962:	4a40      	ldr	r2, [pc, #256]	@ (801da64 <USBD_CDC_Setup+0x18c>)
 801d964:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801d966:	6939      	ldr	r1, [r7, #16]
 801d968:	683b      	ldr	r3, [r7, #0]
 801d96a:	88da      	ldrh	r2, [r3, #6]
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	0018      	movs	r0, r3
 801d970:	f001 fbce 	bl	801f110 <USBD_CtlPrepareRx>
      break;
 801d974:	e06f      	b.n	801da56 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801d976:	687a      	ldr	r2, [r7, #4]
 801d978:	23af      	movs	r3, #175	@ 0xaf
 801d97a:	009b      	lsls	r3, r3, #2
 801d97c:	58d3      	ldr	r3, [r2, r3]
 801d97e:	689b      	ldr	r3, [r3, #8]
 801d980:	683a      	ldr	r2, [r7, #0]
 801d982:	7850      	ldrb	r0, [r2, #1]
 801d984:	6839      	ldr	r1, [r7, #0]
 801d986:	2200      	movs	r2, #0
 801d988:	4798      	blx	r3
      break;
 801d98a:	e064      	b.n	801da56 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801d98c:	683b      	ldr	r3, [r7, #0]
 801d98e:	785b      	ldrb	r3, [r3, #1]
 801d990:	2b0b      	cmp	r3, #11
 801d992:	d037      	beq.n	801da04 <USBD_CDC_Setup+0x12c>
 801d994:	dc47      	bgt.n	801da26 <USBD_CDC_Setup+0x14e>
 801d996:	2b00      	cmp	r3, #0
 801d998:	d002      	beq.n	801d9a0 <USBD_CDC_Setup+0xc8>
 801d99a:	2b0a      	cmp	r3, #10
 801d99c:	d019      	beq.n	801d9d2 <USBD_CDC_Setup+0xfa>
 801d99e:	e042      	b.n	801da26 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d9a0:	687a      	ldr	r2, [r7, #4]
 801d9a2:	23a7      	movs	r3, #167	@ 0xa7
 801d9a4:	009b      	lsls	r3, r3, #2
 801d9a6:	5cd3      	ldrb	r3, [r2, r3]
 801d9a8:	2b03      	cmp	r3, #3
 801d9aa:	d107      	bne.n	801d9bc <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801d9ac:	230c      	movs	r3, #12
 801d9ae:	18f9      	adds	r1, r7, r3
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	2202      	movs	r2, #2
 801d9b4:	0018      	movs	r0, r3
 801d9b6:	f001 fb78 	bl	801f0aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801d9ba:	e040      	b.n	801da3e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801d9bc:	683a      	ldr	r2, [r7, #0]
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	0011      	movs	r1, r2
 801d9c2:	0018      	movs	r0, r3
 801d9c4:	f001 faf3 	bl	801efae <USBD_CtlError>
            ret = USBD_FAIL;
 801d9c8:	2317      	movs	r3, #23
 801d9ca:	18fb      	adds	r3, r7, r3
 801d9cc:	2202      	movs	r2, #2
 801d9ce:	701a      	strb	r2, [r3, #0]
          break;
 801d9d0:	e035      	b.n	801da3e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d9d2:	687a      	ldr	r2, [r7, #4]
 801d9d4:	23a7      	movs	r3, #167	@ 0xa7
 801d9d6:	009b      	lsls	r3, r3, #2
 801d9d8:	5cd3      	ldrb	r3, [r2, r3]
 801d9da:	2b03      	cmp	r3, #3
 801d9dc:	d107      	bne.n	801d9ee <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801d9de:	230f      	movs	r3, #15
 801d9e0:	18f9      	adds	r1, r7, r3
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	2201      	movs	r2, #1
 801d9e6:	0018      	movs	r0, r3
 801d9e8:	f001 fb5f 	bl	801f0aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801d9ec:	e027      	b.n	801da3e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801d9ee:	683a      	ldr	r2, [r7, #0]
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	0011      	movs	r1, r2
 801d9f4:	0018      	movs	r0, r3
 801d9f6:	f001 fada 	bl	801efae <USBD_CtlError>
            ret = USBD_FAIL;
 801d9fa:	2317      	movs	r3, #23
 801d9fc:	18fb      	adds	r3, r7, r3
 801d9fe:	2202      	movs	r2, #2
 801da00:	701a      	strb	r2, [r3, #0]
          break;
 801da02:	e01c      	b.n	801da3e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801da04:	687a      	ldr	r2, [r7, #4]
 801da06:	23a7      	movs	r3, #167	@ 0xa7
 801da08:	009b      	lsls	r3, r3, #2
 801da0a:	5cd3      	ldrb	r3, [r2, r3]
 801da0c:	2b03      	cmp	r3, #3
 801da0e:	d015      	beq.n	801da3c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801da10:	683a      	ldr	r2, [r7, #0]
 801da12:	687b      	ldr	r3, [r7, #4]
 801da14:	0011      	movs	r1, r2
 801da16:	0018      	movs	r0, r3
 801da18:	f001 fac9 	bl	801efae <USBD_CtlError>
            ret = USBD_FAIL;
 801da1c:	2317      	movs	r3, #23
 801da1e:	18fb      	adds	r3, r7, r3
 801da20:	2202      	movs	r2, #2
 801da22:	701a      	strb	r2, [r3, #0]
          }
          break;
 801da24:	e00a      	b.n	801da3c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801da26:	683a      	ldr	r2, [r7, #0]
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	0011      	movs	r1, r2
 801da2c:	0018      	movs	r0, r3
 801da2e:	f001 fabe 	bl	801efae <USBD_CtlError>
          ret = USBD_FAIL;
 801da32:	2317      	movs	r3, #23
 801da34:	18fb      	adds	r3, r7, r3
 801da36:	2202      	movs	r2, #2
 801da38:	701a      	strb	r2, [r3, #0]
          break;
 801da3a:	e000      	b.n	801da3e <USBD_CDC_Setup+0x166>
          break;
 801da3c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801da3e:	e00a      	b.n	801da56 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801da40:	683a      	ldr	r2, [r7, #0]
 801da42:	687b      	ldr	r3, [r7, #4]
 801da44:	0011      	movs	r1, r2
 801da46:	0018      	movs	r0, r3
 801da48:	f001 fab1 	bl	801efae <USBD_CtlError>
      ret = USBD_FAIL;
 801da4c:	2317      	movs	r3, #23
 801da4e:	18fb      	adds	r3, r7, r3
 801da50:	2202      	movs	r2, #2
 801da52:	701a      	strb	r2, [r3, #0]
      break;
 801da54:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801da56:	2317      	movs	r3, #23
 801da58:	18fb      	adds	r3, r7, r3
 801da5a:	781b      	ldrb	r3, [r3, #0]
}
 801da5c:	0018      	movs	r0, r3
 801da5e:	46bd      	mov	sp, r7
 801da60:	b006      	add	sp, #24
 801da62:	bd80      	pop	{r7, pc}
 801da64:	00000201 	.word	0x00000201

0801da68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801da68:	b580      	push	{r7, lr}
 801da6a:	b084      	sub	sp, #16
 801da6c:	af00      	add	r7, sp, #0
 801da6e:	6078      	str	r0, [r7, #4]
 801da70:	000a      	movs	r2, r1
 801da72:	1cfb      	adds	r3, r7, #3
 801da74:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801da76:	687a      	ldr	r2, [r7, #4]
 801da78:	23ae      	movs	r3, #174	@ 0xae
 801da7a:	009b      	lsls	r3, r3, #2
 801da7c:	58d3      	ldr	r3, [r2, r3]
 801da7e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801da80:	687a      	ldr	r2, [r7, #4]
 801da82:	23b0      	movs	r3, #176	@ 0xb0
 801da84:	009b      	lsls	r3, r3, #2
 801da86:	58d3      	ldr	r3, [r2, r3]
 801da88:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801da8a:	687a      	ldr	r2, [r7, #4]
 801da8c:	23ae      	movs	r3, #174	@ 0xae
 801da8e:	009b      	lsls	r3, r3, #2
 801da90:	58d3      	ldr	r3, [r2, r3]
 801da92:	2b00      	cmp	r3, #0
 801da94:	d03e      	beq.n	801db14 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801da96:	1cfb      	adds	r3, r7, #3
 801da98:	781a      	ldrb	r2, [r3, #0]
 801da9a:	6879      	ldr	r1, [r7, #4]
 801da9c:	0013      	movs	r3, r2
 801da9e:	009b      	lsls	r3, r3, #2
 801daa0:	189b      	adds	r3, r3, r2
 801daa2:	009b      	lsls	r3, r3, #2
 801daa4:	18cb      	adds	r3, r1, r3
 801daa6:	331c      	adds	r3, #28
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	2b00      	cmp	r3, #0
 801daac:	d02b      	beq.n	801db06 <USBD_CDC_DataIn+0x9e>
 801daae:	1cfb      	adds	r3, r7, #3
 801dab0:	781a      	ldrb	r2, [r3, #0]
 801dab2:	6879      	ldr	r1, [r7, #4]
 801dab4:	0013      	movs	r3, r2
 801dab6:	009b      	lsls	r3, r3, #2
 801dab8:	189b      	adds	r3, r3, r2
 801daba:	009b      	lsls	r3, r3, #2
 801dabc:	18cb      	adds	r3, r1, r3
 801dabe:	331c      	adds	r3, #28
 801dac0:	6818      	ldr	r0, [r3, #0]
 801dac2:	1cfb      	adds	r3, r7, #3
 801dac4:	781a      	ldrb	r2, [r3, #0]
 801dac6:	68b9      	ldr	r1, [r7, #8]
 801dac8:	0013      	movs	r3, r2
 801daca:	009b      	lsls	r3, r3, #2
 801dacc:	189b      	adds	r3, r3, r2
 801dace:	00db      	lsls	r3, r3, #3
 801dad0:	18cb      	adds	r3, r1, r3
 801dad2:	3338      	adds	r3, #56	@ 0x38
 801dad4:	681b      	ldr	r3, [r3, #0]
 801dad6:	0019      	movs	r1, r3
 801dad8:	f7e2 fbea 	bl	80002b0 <__aeabi_uidivmod>
 801dadc:	1e0b      	subs	r3, r1, #0
 801dade:	d112      	bne.n	801db06 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801dae0:	1cfb      	adds	r3, r7, #3
 801dae2:	781a      	ldrb	r2, [r3, #0]
 801dae4:	6879      	ldr	r1, [r7, #4]
 801dae6:	0013      	movs	r3, r2
 801dae8:	009b      	lsls	r3, r3, #2
 801daea:	189b      	adds	r3, r3, r2
 801daec:	009b      	lsls	r3, r3, #2
 801daee:	18cb      	adds	r3, r1, r3
 801daf0:	331c      	adds	r3, #28
 801daf2:	2200      	movs	r2, #0
 801daf4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801daf6:	1cfb      	adds	r3, r7, #3
 801daf8:	7819      	ldrb	r1, [r3, #0]
 801dafa:	6878      	ldr	r0, [r7, #4]
 801dafc:	2300      	movs	r3, #0
 801dafe:	2200      	movs	r2, #0
 801db00:	f002 f82f 	bl	801fb62 <USBD_LL_Transmit>
 801db04:	e004      	b.n	801db10 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801db06:	68fa      	ldr	r2, [r7, #12]
 801db08:	2385      	movs	r3, #133	@ 0x85
 801db0a:	009b      	lsls	r3, r3, #2
 801db0c:	2100      	movs	r1, #0
 801db0e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801db10:	2300      	movs	r3, #0
 801db12:	e000      	b.n	801db16 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801db14:	2302      	movs	r3, #2
  }
}
 801db16:	0018      	movs	r0, r3
 801db18:	46bd      	mov	sp, r7
 801db1a:	b004      	add	sp, #16
 801db1c:	bd80      	pop	{r7, pc}

0801db1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801db1e:	b580      	push	{r7, lr}
 801db20:	b084      	sub	sp, #16
 801db22:	af00      	add	r7, sp, #0
 801db24:	6078      	str	r0, [r7, #4]
 801db26:	000a      	movs	r2, r1
 801db28:	1cfb      	adds	r3, r7, #3
 801db2a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801db2c:	687a      	ldr	r2, [r7, #4]
 801db2e:	23ae      	movs	r3, #174	@ 0xae
 801db30:	009b      	lsls	r3, r3, #2
 801db32:	58d3      	ldr	r3, [r2, r3]
 801db34:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801db36:	1cfb      	adds	r3, r7, #3
 801db38:	781a      	ldrb	r2, [r3, #0]
 801db3a:	687b      	ldr	r3, [r7, #4]
 801db3c:	0011      	movs	r1, r2
 801db3e:	0018      	movs	r0, r3
 801db40:	f002 f87d 	bl	801fc3e <USBD_LL_GetRxDataSize>
 801db44:	0001      	movs	r1, r0
 801db46:	68fa      	ldr	r2, [r7, #12]
 801db48:	2383      	movs	r3, #131	@ 0x83
 801db4a:	009b      	lsls	r3, r3, #2
 801db4c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801db4e:	687a      	ldr	r2, [r7, #4]
 801db50:	23ae      	movs	r3, #174	@ 0xae
 801db52:	009b      	lsls	r3, r3, #2
 801db54:	58d3      	ldr	r3, [r2, r3]
 801db56:	2b00      	cmp	r3, #0
 801db58:	d011      	beq.n	801db7e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801db5a:	687a      	ldr	r2, [r7, #4]
 801db5c:	23af      	movs	r3, #175	@ 0xaf
 801db5e:	009b      	lsls	r3, r3, #2
 801db60:	58d3      	ldr	r3, [r2, r3]
 801db62:	68da      	ldr	r2, [r3, #12]
 801db64:	68f9      	ldr	r1, [r7, #12]
 801db66:	2381      	movs	r3, #129	@ 0x81
 801db68:	009b      	lsls	r3, r3, #2
 801db6a:	58c8      	ldr	r0, [r1, r3]
 801db6c:	68fb      	ldr	r3, [r7, #12]
 801db6e:	2183      	movs	r1, #131	@ 0x83
 801db70:	0089      	lsls	r1, r1, #2
 801db72:	468c      	mov	ip, r1
 801db74:	4463      	add	r3, ip
 801db76:	0019      	movs	r1, r3
 801db78:	4790      	blx	r2

    return USBD_OK;
 801db7a:	2300      	movs	r3, #0
 801db7c:	e000      	b.n	801db80 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801db7e:	2302      	movs	r3, #2
  }
}
 801db80:	0018      	movs	r0, r3
 801db82:	46bd      	mov	sp, r7
 801db84:	b004      	add	sp, #16
 801db86:	bd80      	pop	{r7, pc}

0801db88 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801db88:	b590      	push	{r4, r7, lr}
 801db8a:	b085      	sub	sp, #20
 801db8c:	af00      	add	r7, sp, #0
 801db8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801db90:	687a      	ldr	r2, [r7, #4]
 801db92:	23ae      	movs	r3, #174	@ 0xae
 801db94:	009b      	lsls	r3, r3, #2
 801db96:	58d3      	ldr	r3, [r2, r3]
 801db98:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801db9a:	687a      	ldr	r2, [r7, #4]
 801db9c:	23af      	movs	r3, #175	@ 0xaf
 801db9e:	009b      	lsls	r3, r3, #2
 801dba0:	58d3      	ldr	r3, [r2, r3]
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	d018      	beq.n	801dbd8 <USBD_CDC_EP0_RxReady+0x50>
 801dba6:	68fa      	ldr	r2, [r7, #12]
 801dba8:	2380      	movs	r3, #128	@ 0x80
 801dbaa:	009b      	lsls	r3, r3, #2
 801dbac:	5cd3      	ldrb	r3, [r2, r3]
 801dbae:	2bff      	cmp	r3, #255	@ 0xff
 801dbb0:	d012      	beq.n	801dbd8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801dbb2:	687a      	ldr	r2, [r7, #4]
 801dbb4:	23af      	movs	r3, #175	@ 0xaf
 801dbb6:	009b      	lsls	r3, r3, #2
 801dbb8:	58d3      	ldr	r3, [r2, r3]
 801dbba:	689b      	ldr	r3, [r3, #8]
 801dbbc:	68f9      	ldr	r1, [r7, #12]
 801dbbe:	2280      	movs	r2, #128	@ 0x80
 801dbc0:	0092      	lsls	r2, r2, #2
 801dbc2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801dbc4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801dbc6:	68fa      	ldr	r2, [r7, #12]
 801dbc8:	4c06      	ldr	r4, [pc, #24]	@ (801dbe4 <USBD_CDC_EP0_RxReady+0x5c>)
 801dbca:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801dbcc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801dbce:	68fa      	ldr	r2, [r7, #12]
 801dbd0:	2380      	movs	r3, #128	@ 0x80
 801dbd2:	009b      	lsls	r3, r3, #2
 801dbd4:	21ff      	movs	r1, #255	@ 0xff
 801dbd6:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801dbd8:	2300      	movs	r3, #0
}
 801dbda:	0018      	movs	r0, r3
 801dbdc:	46bd      	mov	sp, r7
 801dbde:	b005      	add	sp, #20
 801dbe0:	bd90      	pop	{r4, r7, pc}
 801dbe2:	46c0      	nop			@ (mov r8, r8)
 801dbe4:	00000201 	.word	0x00000201

0801dbe8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801dbe8:	b580      	push	{r7, lr}
 801dbea:	b082      	sub	sp, #8
 801dbec:	af00      	add	r7, sp, #0
 801dbee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	2243      	movs	r2, #67	@ 0x43
 801dbf4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801dbf6:	4b02      	ldr	r3, [pc, #8]	@ (801dc00 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801dbf8:	0018      	movs	r0, r3
 801dbfa:	46bd      	mov	sp, r7
 801dbfc:	b002      	add	sp, #8
 801dbfe:	bd80      	pop	{r7, pc}
 801dc00:	2000017c 	.word	0x2000017c

0801dc04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801dc04:	b580      	push	{r7, lr}
 801dc06:	b082      	sub	sp, #8
 801dc08:	af00      	add	r7, sp, #0
 801dc0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801dc0c:	687b      	ldr	r3, [r7, #4]
 801dc0e:	2243      	movs	r2, #67	@ 0x43
 801dc10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801dc12:	4b02      	ldr	r3, [pc, #8]	@ (801dc1c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801dc14:	0018      	movs	r0, r3
 801dc16:	46bd      	mov	sp, r7
 801dc18:	b002      	add	sp, #8
 801dc1a:	bd80      	pop	{r7, pc}
 801dc1c:	20000138 	.word	0x20000138

0801dc20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801dc20:	b580      	push	{r7, lr}
 801dc22:	b082      	sub	sp, #8
 801dc24:	af00      	add	r7, sp, #0
 801dc26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	2243      	movs	r2, #67	@ 0x43
 801dc2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801dc2e:	4b02      	ldr	r3, [pc, #8]	@ (801dc38 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801dc30:	0018      	movs	r0, r3
 801dc32:	46bd      	mov	sp, r7
 801dc34:	b002      	add	sp, #8
 801dc36:	bd80      	pop	{r7, pc}
 801dc38:	200001c0 	.word	0x200001c0

0801dc3c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801dc3c:	b580      	push	{r7, lr}
 801dc3e:	b082      	sub	sp, #8
 801dc40:	af00      	add	r7, sp, #0
 801dc42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	220a      	movs	r2, #10
 801dc48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801dc4a:	4b02      	ldr	r3, [pc, #8]	@ (801dc54 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801dc4c:	0018      	movs	r0, r3
 801dc4e:	46bd      	mov	sp, r7
 801dc50:	b002      	add	sp, #8
 801dc52:	bd80      	pop	{r7, pc}
 801dc54:	200000f4 	.word	0x200000f4

0801dc58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801dc58:	b580      	push	{r7, lr}
 801dc5a:	b084      	sub	sp, #16
 801dc5c:	af00      	add	r7, sp, #0
 801dc5e:	6078      	str	r0, [r7, #4]
 801dc60:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801dc62:	200f      	movs	r0, #15
 801dc64:	183b      	adds	r3, r7, r0
 801dc66:	2202      	movs	r2, #2
 801dc68:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801dc6a:	683b      	ldr	r3, [r7, #0]
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	d007      	beq.n	801dc80 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801dc70:	687a      	ldr	r2, [r7, #4]
 801dc72:	23af      	movs	r3, #175	@ 0xaf
 801dc74:	009b      	lsls	r3, r3, #2
 801dc76:	6839      	ldr	r1, [r7, #0]
 801dc78:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801dc7a:	183b      	adds	r3, r7, r0
 801dc7c:	2200      	movs	r2, #0
 801dc7e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801dc80:	230f      	movs	r3, #15
 801dc82:	18fb      	adds	r3, r7, r3
 801dc84:	781b      	ldrb	r3, [r3, #0]
}
 801dc86:	0018      	movs	r0, r3
 801dc88:	46bd      	mov	sp, r7
 801dc8a:	b004      	add	sp, #16
 801dc8c:	bd80      	pop	{r7, pc}

0801dc8e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801dc8e:	b580      	push	{r7, lr}
 801dc90:	b086      	sub	sp, #24
 801dc92:	af00      	add	r7, sp, #0
 801dc94:	60f8      	str	r0, [r7, #12]
 801dc96:	60b9      	str	r1, [r7, #8]
 801dc98:	1dbb      	adds	r3, r7, #6
 801dc9a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801dc9c:	68fa      	ldr	r2, [r7, #12]
 801dc9e:	23ae      	movs	r3, #174	@ 0xae
 801dca0:	009b      	lsls	r3, r3, #2
 801dca2:	58d3      	ldr	r3, [r2, r3]
 801dca4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801dca6:	697a      	ldr	r2, [r7, #20]
 801dca8:	2382      	movs	r3, #130	@ 0x82
 801dcaa:	009b      	lsls	r3, r3, #2
 801dcac:	68b9      	ldr	r1, [r7, #8]
 801dcae:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801dcb0:	1dbb      	adds	r3, r7, #6
 801dcb2:	8819      	ldrh	r1, [r3, #0]
 801dcb4:	697a      	ldr	r2, [r7, #20]
 801dcb6:	2384      	movs	r3, #132	@ 0x84
 801dcb8:	009b      	lsls	r3, r3, #2
 801dcba:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801dcbc:	2300      	movs	r3, #0
}
 801dcbe:	0018      	movs	r0, r3
 801dcc0:	46bd      	mov	sp, r7
 801dcc2:	b006      	add	sp, #24
 801dcc4:	bd80      	pop	{r7, pc}

0801dcc6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801dcc6:	b580      	push	{r7, lr}
 801dcc8:	b084      	sub	sp, #16
 801dcca:	af00      	add	r7, sp, #0
 801dccc:	6078      	str	r0, [r7, #4]
 801dcce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801dcd0:	687a      	ldr	r2, [r7, #4]
 801dcd2:	23ae      	movs	r3, #174	@ 0xae
 801dcd4:	009b      	lsls	r3, r3, #2
 801dcd6:	58d3      	ldr	r3, [r2, r3]
 801dcd8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801dcda:	68fa      	ldr	r2, [r7, #12]
 801dcdc:	2381      	movs	r3, #129	@ 0x81
 801dcde:	009b      	lsls	r3, r3, #2
 801dce0:	6839      	ldr	r1, [r7, #0]
 801dce2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801dce4:	2300      	movs	r3, #0
}
 801dce6:	0018      	movs	r0, r3
 801dce8:	46bd      	mov	sp, r7
 801dcea:	b004      	add	sp, #16
 801dcec:	bd80      	pop	{r7, pc}

0801dcee <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801dcee:	b580      	push	{r7, lr}
 801dcf0:	b084      	sub	sp, #16
 801dcf2:	af00      	add	r7, sp, #0
 801dcf4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801dcf6:	687a      	ldr	r2, [r7, #4]
 801dcf8:	23ae      	movs	r3, #174	@ 0xae
 801dcfa:	009b      	lsls	r3, r3, #2
 801dcfc:	58d3      	ldr	r3, [r2, r3]
 801dcfe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801dd00:	687a      	ldr	r2, [r7, #4]
 801dd02:	23ae      	movs	r3, #174	@ 0xae
 801dd04:	009b      	lsls	r3, r3, #2
 801dd06:	58d3      	ldr	r3, [r2, r3]
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	d022      	beq.n	801dd52 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801dd0c:	68fa      	ldr	r2, [r7, #12]
 801dd0e:	2385      	movs	r3, #133	@ 0x85
 801dd10:	009b      	lsls	r3, r3, #2
 801dd12:	58d3      	ldr	r3, [r2, r3]
 801dd14:	2b00      	cmp	r3, #0
 801dd16:	d11a      	bne.n	801dd4e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801dd18:	68fa      	ldr	r2, [r7, #12]
 801dd1a:	2385      	movs	r3, #133	@ 0x85
 801dd1c:	009b      	lsls	r3, r3, #2
 801dd1e:	2101      	movs	r1, #1
 801dd20:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801dd22:	68fa      	ldr	r2, [r7, #12]
 801dd24:	2384      	movs	r3, #132	@ 0x84
 801dd26:	009b      	lsls	r3, r3, #2
 801dd28:	58d2      	ldr	r2, [r2, r3]
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801dd2e:	68fa      	ldr	r2, [r7, #12]
 801dd30:	2382      	movs	r3, #130	@ 0x82
 801dd32:	009b      	lsls	r3, r3, #2
 801dd34:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801dd36:	68fa      	ldr	r2, [r7, #12]
 801dd38:	2384      	movs	r3, #132	@ 0x84
 801dd3a:	009b      	lsls	r3, r3, #2
 801dd3c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801dd3e:	b29b      	uxth	r3, r3
 801dd40:	6878      	ldr	r0, [r7, #4]
 801dd42:	000a      	movs	r2, r1
 801dd44:	2181      	movs	r1, #129	@ 0x81
 801dd46:	f001 ff0c 	bl	801fb62 <USBD_LL_Transmit>

      return USBD_OK;
 801dd4a:	2300      	movs	r3, #0
 801dd4c:	e002      	b.n	801dd54 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801dd4e:	2301      	movs	r3, #1
 801dd50:	e000      	b.n	801dd54 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801dd52:	2302      	movs	r3, #2
  }
}
 801dd54:	0018      	movs	r0, r3
 801dd56:	46bd      	mov	sp, r7
 801dd58:	b004      	add	sp, #16
 801dd5a:	bd80      	pop	{r7, pc}

0801dd5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801dd5c:	b580      	push	{r7, lr}
 801dd5e:	b084      	sub	sp, #16
 801dd60:	af00      	add	r7, sp, #0
 801dd62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801dd64:	687a      	ldr	r2, [r7, #4]
 801dd66:	23ae      	movs	r3, #174	@ 0xae
 801dd68:	009b      	lsls	r3, r3, #2
 801dd6a:	58d3      	ldr	r3, [r2, r3]
 801dd6c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801dd6e:	687a      	ldr	r2, [r7, #4]
 801dd70:	23ae      	movs	r3, #174	@ 0xae
 801dd72:	009b      	lsls	r3, r3, #2
 801dd74:	58d3      	ldr	r3, [r2, r3]
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	d019      	beq.n	801ddae <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	7c1b      	ldrb	r3, [r3, #16]
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	d10a      	bne.n	801dd98 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801dd82:	68fa      	ldr	r2, [r7, #12]
 801dd84:	2381      	movs	r3, #129	@ 0x81
 801dd86:	009b      	lsls	r3, r3, #2
 801dd88:	58d2      	ldr	r2, [r2, r3]
 801dd8a:	2380      	movs	r3, #128	@ 0x80
 801dd8c:	009b      	lsls	r3, r3, #2
 801dd8e:	6878      	ldr	r0, [r7, #4]
 801dd90:	2101      	movs	r1, #1
 801dd92:	f001 ff1d 	bl	801fbd0 <USBD_LL_PrepareReceive>
 801dd96:	e008      	b.n	801ddaa <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801dd98:	68fa      	ldr	r2, [r7, #12]
 801dd9a:	2381      	movs	r3, #129	@ 0x81
 801dd9c:	009b      	lsls	r3, r3, #2
 801dd9e:	58d2      	ldr	r2, [r2, r3]
 801dda0:	6878      	ldr	r0, [r7, #4]
 801dda2:	2340      	movs	r3, #64	@ 0x40
 801dda4:	2101      	movs	r1, #1
 801dda6:	f001 ff13 	bl	801fbd0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801ddaa:	2300      	movs	r3, #0
 801ddac:	e000      	b.n	801ddb0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801ddae:	2302      	movs	r3, #2
  }
}
 801ddb0:	0018      	movs	r0, r3
 801ddb2:	46bd      	mov	sp, r7
 801ddb4:	b004      	add	sp, #16
 801ddb6:	bd80      	pop	{r7, pc}

0801ddb8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801ddb8:	b580      	push	{r7, lr}
 801ddba:	b084      	sub	sp, #16
 801ddbc:	af00      	add	r7, sp, #0
 801ddbe:	60f8      	str	r0, [r7, #12]
 801ddc0:	60b9      	str	r1, [r7, #8]
 801ddc2:	1dfb      	adds	r3, r7, #7
 801ddc4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801ddc6:	68fb      	ldr	r3, [r7, #12]
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d101      	bne.n	801ddd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801ddcc:	2302      	movs	r3, #2
 801ddce:	e020      	b.n	801de12 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801ddd0:	68fa      	ldr	r2, [r7, #12]
 801ddd2:	23ad      	movs	r3, #173	@ 0xad
 801ddd4:	009b      	lsls	r3, r3, #2
 801ddd6:	58d3      	ldr	r3, [r2, r3]
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	d004      	beq.n	801dde6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801dddc:	68fa      	ldr	r2, [r7, #12]
 801ddde:	23ad      	movs	r3, #173	@ 0xad
 801dde0:	009b      	lsls	r3, r3, #2
 801dde2:	2100      	movs	r1, #0
 801dde4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801dde6:	68bb      	ldr	r3, [r7, #8]
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	d004      	beq.n	801ddf6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801ddec:	68fa      	ldr	r2, [r7, #12]
 801ddee:	23ac      	movs	r3, #172	@ 0xac
 801ddf0:	009b      	lsls	r3, r3, #2
 801ddf2:	68b9      	ldr	r1, [r7, #8]
 801ddf4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801ddf6:	68fa      	ldr	r2, [r7, #12]
 801ddf8:	23a7      	movs	r3, #167	@ 0xa7
 801ddfa:	009b      	lsls	r3, r3, #2
 801ddfc:	2101      	movs	r1, #1
 801ddfe:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801de00:	68fb      	ldr	r3, [r7, #12]
 801de02:	1dfa      	adds	r2, r7, #7
 801de04:	7812      	ldrb	r2, [r2, #0]
 801de06:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	0018      	movs	r0, r3
 801de0c:	f001 fd0c 	bl	801f828 <USBD_LL_Init>

  return USBD_OK;
 801de10:	2300      	movs	r3, #0
}
 801de12:	0018      	movs	r0, r3
 801de14:	46bd      	mov	sp, r7
 801de16:	b004      	add	sp, #16
 801de18:	bd80      	pop	{r7, pc}

0801de1a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801de1a:	b580      	push	{r7, lr}
 801de1c:	b084      	sub	sp, #16
 801de1e:	af00      	add	r7, sp, #0
 801de20:	6078      	str	r0, [r7, #4]
 801de22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801de24:	200f      	movs	r0, #15
 801de26:	183b      	adds	r3, r7, r0
 801de28:	2200      	movs	r2, #0
 801de2a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801de2c:	683b      	ldr	r3, [r7, #0]
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d008      	beq.n	801de44 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801de32:	687a      	ldr	r2, [r7, #4]
 801de34:	23ad      	movs	r3, #173	@ 0xad
 801de36:	009b      	lsls	r3, r3, #2
 801de38:	6839      	ldr	r1, [r7, #0]
 801de3a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801de3c:	183b      	adds	r3, r7, r0
 801de3e:	2200      	movs	r2, #0
 801de40:	701a      	strb	r2, [r3, #0]
 801de42:	e003      	b.n	801de4c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801de44:	230f      	movs	r3, #15
 801de46:	18fb      	adds	r3, r7, r3
 801de48:	2202      	movs	r2, #2
 801de4a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801de4c:	230f      	movs	r3, #15
 801de4e:	18fb      	adds	r3, r7, r3
 801de50:	781b      	ldrb	r3, [r3, #0]
}
 801de52:	0018      	movs	r0, r3
 801de54:	46bd      	mov	sp, r7
 801de56:	b004      	add	sp, #16
 801de58:	bd80      	pop	{r7, pc}

0801de5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801de5a:	b580      	push	{r7, lr}
 801de5c:	b082      	sub	sp, #8
 801de5e:	af00      	add	r7, sp, #0
 801de60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	0018      	movs	r0, r3
 801de66:	f001 fd43 	bl	801f8f0 <USBD_LL_Start>

  return USBD_OK;
 801de6a:	2300      	movs	r3, #0
}
 801de6c:	0018      	movs	r0, r3
 801de6e:	46bd      	mov	sp, r7
 801de70:	b002      	add	sp, #8
 801de72:	bd80      	pop	{r7, pc}

0801de74 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801de74:	b580      	push	{r7, lr}
 801de76:	b082      	sub	sp, #8
 801de78:	af00      	add	r7, sp, #0
 801de7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801de7c:	2300      	movs	r3, #0
}
 801de7e:	0018      	movs	r0, r3
 801de80:	46bd      	mov	sp, r7
 801de82:	b002      	add	sp, #8
 801de84:	bd80      	pop	{r7, pc}

0801de86 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801de86:	b590      	push	{r4, r7, lr}
 801de88:	b085      	sub	sp, #20
 801de8a:	af00      	add	r7, sp, #0
 801de8c:	6078      	str	r0, [r7, #4]
 801de8e:	000a      	movs	r2, r1
 801de90:	1cfb      	adds	r3, r7, #3
 801de92:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801de94:	240f      	movs	r4, #15
 801de96:	193b      	adds	r3, r7, r4
 801de98:	2202      	movs	r2, #2
 801de9a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801de9c:	687a      	ldr	r2, [r7, #4]
 801de9e:	23ad      	movs	r3, #173	@ 0xad
 801dea0:	009b      	lsls	r3, r3, #2
 801dea2:	58d3      	ldr	r3, [r2, r3]
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d00e      	beq.n	801dec6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801dea8:	687a      	ldr	r2, [r7, #4]
 801deaa:	23ad      	movs	r3, #173	@ 0xad
 801deac:	009b      	lsls	r3, r3, #2
 801deae:	58d3      	ldr	r3, [r2, r3]
 801deb0:	681b      	ldr	r3, [r3, #0]
 801deb2:	1cfa      	adds	r2, r7, #3
 801deb4:	7811      	ldrb	r1, [r2, #0]
 801deb6:	687a      	ldr	r2, [r7, #4]
 801deb8:	0010      	movs	r0, r2
 801deba:	4798      	blx	r3
 801debc:	1e03      	subs	r3, r0, #0
 801debe:	d102      	bne.n	801dec6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801dec0:	193b      	adds	r3, r7, r4
 801dec2:	2200      	movs	r2, #0
 801dec4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801dec6:	230f      	movs	r3, #15
 801dec8:	18fb      	adds	r3, r7, r3
 801deca:	781b      	ldrb	r3, [r3, #0]
}
 801decc:	0018      	movs	r0, r3
 801dece:	46bd      	mov	sp, r7
 801ded0:	b005      	add	sp, #20
 801ded2:	bd90      	pop	{r4, r7, pc}

0801ded4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801ded4:	b580      	push	{r7, lr}
 801ded6:	b082      	sub	sp, #8
 801ded8:	af00      	add	r7, sp, #0
 801deda:	6078      	str	r0, [r7, #4]
 801dedc:	000a      	movs	r2, r1
 801dede:	1cfb      	adds	r3, r7, #3
 801dee0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801dee2:	687a      	ldr	r2, [r7, #4]
 801dee4:	23ad      	movs	r3, #173	@ 0xad
 801dee6:	009b      	lsls	r3, r3, #2
 801dee8:	58d3      	ldr	r3, [r2, r3]
 801deea:	685b      	ldr	r3, [r3, #4]
 801deec:	1cfa      	adds	r2, r7, #3
 801deee:	7811      	ldrb	r1, [r2, #0]
 801def0:	687a      	ldr	r2, [r7, #4]
 801def2:	0010      	movs	r0, r2
 801def4:	4798      	blx	r3

  return USBD_OK;
 801def6:	2300      	movs	r3, #0
}
 801def8:	0018      	movs	r0, r3
 801defa:	46bd      	mov	sp, r7
 801defc:	b002      	add	sp, #8
 801defe:	bd80      	pop	{r7, pc}

0801df00 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801df00:	b580      	push	{r7, lr}
 801df02:	b082      	sub	sp, #8
 801df04:	af00      	add	r7, sp, #0
 801df06:	6078      	str	r0, [r7, #4]
 801df08:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	22aa      	movs	r2, #170	@ 0xaa
 801df0e:	0092      	lsls	r2, r2, #2
 801df10:	4694      	mov	ip, r2
 801df12:	4463      	add	r3, ip
 801df14:	683a      	ldr	r2, [r7, #0]
 801df16:	0011      	movs	r1, r2
 801df18:	0018      	movs	r0, r3
 801df1a:	f001 f810 	bl	801ef3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801df1e:	687a      	ldr	r2, [r7, #4]
 801df20:	23a5      	movs	r3, #165	@ 0xa5
 801df22:	009b      	lsls	r3, r3, #2
 801df24:	2101      	movs	r1, #1
 801df26:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	4a23      	ldr	r2, [pc, #140]	@ (801dfb8 <USBD_LL_SetupStage+0xb8>)
 801df2c:	5a9b      	ldrh	r3, [r3, r2]
 801df2e:	0019      	movs	r1, r3
 801df30:	687a      	ldr	r2, [r7, #4]
 801df32:	23a6      	movs	r3, #166	@ 0xa6
 801df34:	009b      	lsls	r3, r3, #2
 801df36:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801df38:	687a      	ldr	r2, [r7, #4]
 801df3a:	23aa      	movs	r3, #170	@ 0xaa
 801df3c:	009b      	lsls	r3, r3, #2
 801df3e:	5cd3      	ldrb	r3, [r2, r3]
 801df40:	001a      	movs	r2, r3
 801df42:	231f      	movs	r3, #31
 801df44:	4013      	ands	r3, r2
 801df46:	2b02      	cmp	r3, #2
 801df48:	d019      	beq.n	801df7e <USBD_LL_SetupStage+0x7e>
 801df4a:	d822      	bhi.n	801df92 <USBD_LL_SetupStage+0x92>
 801df4c:	2b00      	cmp	r3, #0
 801df4e:	d002      	beq.n	801df56 <USBD_LL_SetupStage+0x56>
 801df50:	2b01      	cmp	r3, #1
 801df52:	d00a      	beq.n	801df6a <USBD_LL_SetupStage+0x6a>
 801df54:	e01d      	b.n	801df92 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801df56:	687b      	ldr	r3, [r7, #4]
 801df58:	22aa      	movs	r2, #170	@ 0xaa
 801df5a:	0092      	lsls	r2, r2, #2
 801df5c:	189a      	adds	r2, r3, r2
 801df5e:	687b      	ldr	r3, [r7, #4]
 801df60:	0011      	movs	r1, r2
 801df62:	0018      	movs	r0, r3
 801df64:	f000 fa10 	bl	801e388 <USBD_StdDevReq>
      break;
 801df68:	e020      	b.n	801dfac <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	22aa      	movs	r2, #170	@ 0xaa
 801df6e:	0092      	lsls	r2, r2, #2
 801df70:	189a      	adds	r2, r3, r2
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	0011      	movs	r1, r2
 801df76:	0018      	movs	r0, r3
 801df78:	f000 fa78 	bl	801e46c <USBD_StdItfReq>
      break;
 801df7c:	e016      	b.n	801dfac <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	22aa      	movs	r2, #170	@ 0xaa
 801df82:	0092      	lsls	r2, r2, #2
 801df84:	189a      	adds	r2, r3, r2
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	0011      	movs	r1, r2
 801df8a:	0018      	movs	r0, r3
 801df8c:	f000 fac5 	bl	801e51a <USBD_StdEPReq>
      break;
 801df90:	e00c      	b.n	801dfac <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801df92:	687a      	ldr	r2, [r7, #4]
 801df94:	23aa      	movs	r3, #170	@ 0xaa
 801df96:	009b      	lsls	r3, r3, #2
 801df98:	5cd3      	ldrb	r3, [r2, r3]
 801df9a:	227f      	movs	r2, #127	@ 0x7f
 801df9c:	4393      	bics	r3, r2
 801df9e:	b2da      	uxtb	r2, r3
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	0011      	movs	r1, r2
 801dfa4:	0018      	movs	r0, r3
 801dfa6:	f001 fd2a 	bl	801f9fe <USBD_LL_StallEP>
      break;
 801dfaa:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801dfac:	2300      	movs	r3, #0
}
 801dfae:	0018      	movs	r0, r3
 801dfb0:	46bd      	mov	sp, r7
 801dfb2:	b002      	add	sp, #8
 801dfb4:	bd80      	pop	{r7, pc}
 801dfb6:	46c0      	nop			@ (mov r8, r8)
 801dfb8:	000002ae 	.word	0x000002ae

0801dfbc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801dfbc:	b580      	push	{r7, lr}
 801dfbe:	b086      	sub	sp, #24
 801dfc0:	af00      	add	r7, sp, #0
 801dfc2:	60f8      	str	r0, [r7, #12]
 801dfc4:	607a      	str	r2, [r7, #4]
 801dfc6:	200b      	movs	r0, #11
 801dfc8:	183b      	adds	r3, r7, r0
 801dfca:	1c0a      	adds	r2, r1, #0
 801dfcc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801dfce:	183b      	adds	r3, r7, r0
 801dfd0:	781b      	ldrb	r3, [r3, #0]
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d154      	bne.n	801e080 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801dfd6:	68fb      	ldr	r3, [r7, #12]
 801dfd8:	3355      	adds	r3, #85	@ 0x55
 801dfda:	33ff      	adds	r3, #255	@ 0xff
 801dfdc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801dfde:	68fa      	ldr	r2, [r7, #12]
 801dfe0:	23a5      	movs	r3, #165	@ 0xa5
 801dfe2:	009b      	lsls	r3, r3, #2
 801dfe4:	58d3      	ldr	r3, [r2, r3]
 801dfe6:	2b03      	cmp	r3, #3
 801dfe8:	d139      	bne.n	801e05e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801dfea:	697b      	ldr	r3, [r7, #20]
 801dfec:	68da      	ldr	r2, [r3, #12]
 801dfee:	697b      	ldr	r3, [r7, #20]
 801dff0:	691b      	ldr	r3, [r3, #16]
 801dff2:	429a      	cmp	r2, r3
 801dff4:	d919      	bls.n	801e02a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801dff6:	697b      	ldr	r3, [r7, #20]
 801dff8:	68da      	ldr	r2, [r3, #12]
 801dffa:	697b      	ldr	r3, [r7, #20]
 801dffc:	691b      	ldr	r3, [r3, #16]
 801dffe:	1ad2      	subs	r2, r2, r3
 801e000:	697b      	ldr	r3, [r7, #20]
 801e002:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801e004:	697b      	ldr	r3, [r7, #20]
 801e006:	68da      	ldr	r2, [r3, #12]
 801e008:	697b      	ldr	r3, [r7, #20]
 801e00a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801e00c:	429a      	cmp	r2, r3
 801e00e:	d203      	bcs.n	801e018 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801e010:	697b      	ldr	r3, [r7, #20]
 801e012:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801e014:	b29b      	uxth	r3, r3
 801e016:	e002      	b.n	801e01e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801e018:	697b      	ldr	r3, [r7, #20]
 801e01a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801e01c:	b29b      	uxth	r3, r3
 801e01e:	6879      	ldr	r1, [r7, #4]
 801e020:	68f8      	ldr	r0, [r7, #12]
 801e022:	001a      	movs	r2, r3
 801e024:	f001 f898 	bl	801f158 <USBD_CtlContinueRx>
 801e028:	e045      	b.n	801e0b6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801e02a:	68fa      	ldr	r2, [r7, #12]
 801e02c:	23ad      	movs	r3, #173	@ 0xad
 801e02e:	009b      	lsls	r3, r3, #2
 801e030:	58d3      	ldr	r3, [r2, r3]
 801e032:	691b      	ldr	r3, [r3, #16]
 801e034:	2b00      	cmp	r3, #0
 801e036:	d00d      	beq.n	801e054 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e038:	68fa      	ldr	r2, [r7, #12]
 801e03a:	23a7      	movs	r3, #167	@ 0xa7
 801e03c:	009b      	lsls	r3, r3, #2
 801e03e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801e040:	2b03      	cmp	r3, #3
 801e042:	d107      	bne.n	801e054 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801e044:	68fa      	ldr	r2, [r7, #12]
 801e046:	23ad      	movs	r3, #173	@ 0xad
 801e048:	009b      	lsls	r3, r3, #2
 801e04a:	58d3      	ldr	r3, [r2, r3]
 801e04c:	691b      	ldr	r3, [r3, #16]
 801e04e:	68fa      	ldr	r2, [r7, #12]
 801e050:	0010      	movs	r0, r2
 801e052:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801e054:	68fb      	ldr	r3, [r7, #12]
 801e056:	0018      	movs	r0, r3
 801e058:	f001 f891 	bl	801f17e <USBD_CtlSendStatus>
 801e05c:	e02b      	b.n	801e0b6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801e05e:	68fa      	ldr	r2, [r7, #12]
 801e060:	23a5      	movs	r3, #165	@ 0xa5
 801e062:	009b      	lsls	r3, r3, #2
 801e064:	58d3      	ldr	r3, [r2, r3]
 801e066:	2b05      	cmp	r3, #5
 801e068:	d125      	bne.n	801e0b6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801e06a:	68fa      	ldr	r2, [r7, #12]
 801e06c:	23a5      	movs	r3, #165	@ 0xa5
 801e06e:	009b      	lsls	r3, r3, #2
 801e070:	2100      	movs	r1, #0
 801e072:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801e074:	68fb      	ldr	r3, [r7, #12]
 801e076:	2100      	movs	r1, #0
 801e078:	0018      	movs	r0, r3
 801e07a:	f001 fcc0 	bl	801f9fe <USBD_LL_StallEP>
 801e07e:	e01a      	b.n	801e0b6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801e080:	68fa      	ldr	r2, [r7, #12]
 801e082:	23ad      	movs	r3, #173	@ 0xad
 801e084:	009b      	lsls	r3, r3, #2
 801e086:	58d3      	ldr	r3, [r2, r3]
 801e088:	699b      	ldr	r3, [r3, #24]
 801e08a:	2b00      	cmp	r3, #0
 801e08c:	d011      	beq.n	801e0b2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e08e:	68fa      	ldr	r2, [r7, #12]
 801e090:	23a7      	movs	r3, #167	@ 0xa7
 801e092:	009b      	lsls	r3, r3, #2
 801e094:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801e096:	2b03      	cmp	r3, #3
 801e098:	d10b      	bne.n	801e0b2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801e09a:	68fa      	ldr	r2, [r7, #12]
 801e09c:	23ad      	movs	r3, #173	@ 0xad
 801e09e:	009b      	lsls	r3, r3, #2
 801e0a0:	58d3      	ldr	r3, [r2, r3]
 801e0a2:	699b      	ldr	r3, [r3, #24]
 801e0a4:	220b      	movs	r2, #11
 801e0a6:	18ba      	adds	r2, r7, r2
 801e0a8:	7811      	ldrb	r1, [r2, #0]
 801e0aa:	68fa      	ldr	r2, [r7, #12]
 801e0ac:	0010      	movs	r0, r2
 801e0ae:	4798      	blx	r3
 801e0b0:	e001      	b.n	801e0b6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801e0b2:	2302      	movs	r3, #2
 801e0b4:	e000      	b.n	801e0b8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801e0b6:	2300      	movs	r3, #0
}
 801e0b8:	0018      	movs	r0, r3
 801e0ba:	46bd      	mov	sp, r7
 801e0bc:	b006      	add	sp, #24
 801e0be:	bd80      	pop	{r7, pc}

0801e0c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801e0c0:	b580      	push	{r7, lr}
 801e0c2:	b086      	sub	sp, #24
 801e0c4:	af00      	add	r7, sp, #0
 801e0c6:	60f8      	str	r0, [r7, #12]
 801e0c8:	607a      	str	r2, [r7, #4]
 801e0ca:	200b      	movs	r0, #11
 801e0cc:	183b      	adds	r3, r7, r0
 801e0ce:	1c0a      	adds	r2, r1, #0
 801e0d0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801e0d2:	183b      	adds	r3, r7, r0
 801e0d4:	781b      	ldrb	r3, [r3, #0]
 801e0d6:	2b00      	cmp	r3, #0
 801e0d8:	d000      	beq.n	801e0dc <USBD_LL_DataInStage+0x1c>
 801e0da:	e08e      	b.n	801e1fa <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801e0dc:	68fb      	ldr	r3, [r7, #12]
 801e0de:	3314      	adds	r3, #20
 801e0e0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801e0e2:	68fa      	ldr	r2, [r7, #12]
 801e0e4:	23a5      	movs	r3, #165	@ 0xa5
 801e0e6:	009b      	lsls	r3, r3, #2
 801e0e8:	58d3      	ldr	r3, [r2, r3]
 801e0ea:	2b02      	cmp	r3, #2
 801e0ec:	d164      	bne.n	801e1b8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801e0ee:	697b      	ldr	r3, [r7, #20]
 801e0f0:	68da      	ldr	r2, [r3, #12]
 801e0f2:	697b      	ldr	r3, [r7, #20]
 801e0f4:	691b      	ldr	r3, [r3, #16]
 801e0f6:	429a      	cmp	r2, r3
 801e0f8:	d915      	bls.n	801e126 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801e0fa:	697b      	ldr	r3, [r7, #20]
 801e0fc:	68da      	ldr	r2, [r3, #12]
 801e0fe:	697b      	ldr	r3, [r7, #20]
 801e100:	691b      	ldr	r3, [r3, #16]
 801e102:	1ad2      	subs	r2, r2, r3
 801e104:	697b      	ldr	r3, [r7, #20]
 801e106:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801e108:	697b      	ldr	r3, [r7, #20]
 801e10a:	68db      	ldr	r3, [r3, #12]
 801e10c:	b29a      	uxth	r2, r3
 801e10e:	6879      	ldr	r1, [r7, #4]
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	0018      	movs	r0, r3
 801e114:	f000 ffe9 	bl	801f0ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e118:	68f8      	ldr	r0, [r7, #12]
 801e11a:	2300      	movs	r3, #0
 801e11c:	2200      	movs	r2, #0
 801e11e:	2100      	movs	r1, #0
 801e120:	f001 fd56 	bl	801fbd0 <USBD_LL_PrepareReceive>
 801e124:	e059      	b.n	801e1da <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801e126:	697b      	ldr	r3, [r7, #20]
 801e128:	689a      	ldr	r2, [r3, #8]
 801e12a:	697b      	ldr	r3, [r7, #20]
 801e12c:	691b      	ldr	r3, [r3, #16]
 801e12e:	0019      	movs	r1, r3
 801e130:	0010      	movs	r0, r2
 801e132:	f7e2 f8bd 	bl	80002b0 <__aeabi_uidivmod>
 801e136:	1e0b      	subs	r3, r1, #0
 801e138:	d11f      	bne.n	801e17a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801e13a:	697b      	ldr	r3, [r7, #20]
 801e13c:	689a      	ldr	r2, [r3, #8]
 801e13e:	697b      	ldr	r3, [r7, #20]
 801e140:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801e142:	429a      	cmp	r2, r3
 801e144:	d319      	bcc.n	801e17a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801e146:	697b      	ldr	r3, [r7, #20]
 801e148:	689a      	ldr	r2, [r3, #8]
 801e14a:	68f9      	ldr	r1, [r7, #12]
 801e14c:	23a6      	movs	r3, #166	@ 0xa6
 801e14e:	009b      	lsls	r3, r3, #2
 801e150:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801e152:	429a      	cmp	r2, r3
 801e154:	d211      	bcs.n	801e17a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801e156:	68fb      	ldr	r3, [r7, #12]
 801e158:	2200      	movs	r2, #0
 801e15a:	2100      	movs	r1, #0
 801e15c:	0018      	movs	r0, r3
 801e15e:	f000 ffc4 	bl	801f0ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801e162:	68fa      	ldr	r2, [r7, #12]
 801e164:	23a6      	movs	r3, #166	@ 0xa6
 801e166:	009b      	lsls	r3, r3, #2
 801e168:	2100      	movs	r1, #0
 801e16a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e16c:	68f8      	ldr	r0, [r7, #12]
 801e16e:	2300      	movs	r3, #0
 801e170:	2200      	movs	r2, #0
 801e172:	2100      	movs	r1, #0
 801e174:	f001 fd2c 	bl	801fbd0 <USBD_LL_PrepareReceive>
 801e178:	e02f      	b.n	801e1da <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801e17a:	68fa      	ldr	r2, [r7, #12]
 801e17c:	23ad      	movs	r3, #173	@ 0xad
 801e17e:	009b      	lsls	r3, r3, #2
 801e180:	58d3      	ldr	r3, [r2, r3]
 801e182:	68db      	ldr	r3, [r3, #12]
 801e184:	2b00      	cmp	r3, #0
 801e186:	d00d      	beq.n	801e1a4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e188:	68fa      	ldr	r2, [r7, #12]
 801e18a:	23a7      	movs	r3, #167	@ 0xa7
 801e18c:	009b      	lsls	r3, r3, #2
 801e18e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801e190:	2b03      	cmp	r3, #3
 801e192:	d107      	bne.n	801e1a4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801e194:	68fa      	ldr	r2, [r7, #12]
 801e196:	23ad      	movs	r3, #173	@ 0xad
 801e198:	009b      	lsls	r3, r3, #2
 801e19a:	58d3      	ldr	r3, [r2, r3]
 801e19c:	68db      	ldr	r3, [r3, #12]
 801e19e:	68fa      	ldr	r2, [r7, #12]
 801e1a0:	0010      	movs	r0, r2
 801e1a2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801e1a4:	68fb      	ldr	r3, [r7, #12]
 801e1a6:	2180      	movs	r1, #128	@ 0x80
 801e1a8:	0018      	movs	r0, r3
 801e1aa:	f001 fc28 	bl	801f9fe <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801e1ae:	68fb      	ldr	r3, [r7, #12]
 801e1b0:	0018      	movs	r0, r3
 801e1b2:	f000 fff8 	bl	801f1a6 <USBD_CtlReceiveStatus>
 801e1b6:	e010      	b.n	801e1da <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801e1b8:	68fa      	ldr	r2, [r7, #12]
 801e1ba:	23a5      	movs	r3, #165	@ 0xa5
 801e1bc:	009b      	lsls	r3, r3, #2
 801e1be:	58d3      	ldr	r3, [r2, r3]
 801e1c0:	2b04      	cmp	r3, #4
 801e1c2:	d005      	beq.n	801e1d0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801e1c4:	68fa      	ldr	r2, [r7, #12]
 801e1c6:	23a5      	movs	r3, #165	@ 0xa5
 801e1c8:	009b      	lsls	r3, r3, #2
 801e1ca:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801e1cc:	2b00      	cmp	r3, #0
 801e1ce:	d104      	bne.n	801e1da <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801e1d0:	68fb      	ldr	r3, [r7, #12]
 801e1d2:	2180      	movs	r1, #128	@ 0x80
 801e1d4:	0018      	movs	r0, r3
 801e1d6:	f001 fc12 	bl	801f9fe <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801e1da:	68fa      	ldr	r2, [r7, #12]
 801e1dc:	23a8      	movs	r3, #168	@ 0xa8
 801e1de:	009b      	lsls	r3, r3, #2
 801e1e0:	5cd3      	ldrb	r3, [r2, r3]
 801e1e2:	2b01      	cmp	r3, #1
 801e1e4:	d124      	bne.n	801e230 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801e1e6:	68fb      	ldr	r3, [r7, #12]
 801e1e8:	0018      	movs	r0, r3
 801e1ea:	f7ff fe43 	bl	801de74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801e1ee:	68fa      	ldr	r2, [r7, #12]
 801e1f0:	23a8      	movs	r3, #168	@ 0xa8
 801e1f2:	009b      	lsls	r3, r3, #2
 801e1f4:	2100      	movs	r1, #0
 801e1f6:	54d1      	strb	r1, [r2, r3]
 801e1f8:	e01a      	b.n	801e230 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801e1fa:	68fa      	ldr	r2, [r7, #12]
 801e1fc:	23ad      	movs	r3, #173	@ 0xad
 801e1fe:	009b      	lsls	r3, r3, #2
 801e200:	58d3      	ldr	r3, [r2, r3]
 801e202:	695b      	ldr	r3, [r3, #20]
 801e204:	2b00      	cmp	r3, #0
 801e206:	d011      	beq.n	801e22c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e208:	68fa      	ldr	r2, [r7, #12]
 801e20a:	23a7      	movs	r3, #167	@ 0xa7
 801e20c:	009b      	lsls	r3, r3, #2
 801e20e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801e210:	2b03      	cmp	r3, #3
 801e212:	d10b      	bne.n	801e22c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801e214:	68fa      	ldr	r2, [r7, #12]
 801e216:	23ad      	movs	r3, #173	@ 0xad
 801e218:	009b      	lsls	r3, r3, #2
 801e21a:	58d3      	ldr	r3, [r2, r3]
 801e21c:	695b      	ldr	r3, [r3, #20]
 801e21e:	220b      	movs	r2, #11
 801e220:	18ba      	adds	r2, r7, r2
 801e222:	7811      	ldrb	r1, [r2, #0]
 801e224:	68fa      	ldr	r2, [r7, #12]
 801e226:	0010      	movs	r0, r2
 801e228:	4798      	blx	r3
 801e22a:	e001      	b.n	801e230 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801e22c:	2302      	movs	r3, #2
 801e22e:	e000      	b.n	801e232 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801e230:	2300      	movs	r3, #0
}
 801e232:	0018      	movs	r0, r3
 801e234:	46bd      	mov	sp, r7
 801e236:	b006      	add	sp, #24
 801e238:	bd80      	pop	{r7, pc}

0801e23a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801e23a:	b580      	push	{r7, lr}
 801e23c:	b082      	sub	sp, #8
 801e23e:	af00      	add	r7, sp, #0
 801e240:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801e242:	6878      	ldr	r0, [r7, #4]
 801e244:	2340      	movs	r3, #64	@ 0x40
 801e246:	2200      	movs	r2, #0
 801e248:	2100      	movs	r1, #0
 801e24a:	f001 fb76 	bl	801f93a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801e24e:	687a      	ldr	r2, [r7, #4]
 801e250:	23ac      	movs	r3, #172	@ 0xac
 801e252:	005b      	lsls	r3, r3, #1
 801e254:	2101      	movs	r1, #1
 801e256:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801e258:	687a      	ldr	r2, [r7, #4]
 801e25a:	23b2      	movs	r3, #178	@ 0xb2
 801e25c:	005b      	lsls	r3, r3, #1
 801e25e:	2140      	movs	r1, #64	@ 0x40
 801e260:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801e262:	6878      	ldr	r0, [r7, #4]
 801e264:	2340      	movs	r3, #64	@ 0x40
 801e266:	2200      	movs	r2, #0
 801e268:	2180      	movs	r1, #128	@ 0x80
 801e26a:	f001 fb66 	bl	801f93a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801e26e:	687b      	ldr	r3, [r7, #4]
 801e270:	2201      	movs	r2, #1
 801e272:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801e274:	687b      	ldr	r3, [r7, #4]
 801e276:	2240      	movs	r2, #64	@ 0x40
 801e278:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801e27a:	687a      	ldr	r2, [r7, #4]
 801e27c:	23a7      	movs	r3, #167	@ 0xa7
 801e27e:	009b      	lsls	r3, r3, #2
 801e280:	2101      	movs	r1, #1
 801e282:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801e284:	687a      	ldr	r2, [r7, #4]
 801e286:	23a5      	movs	r3, #165	@ 0xa5
 801e288:	009b      	lsls	r3, r3, #2
 801e28a:	2100      	movs	r1, #0
 801e28c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801e28e:	687b      	ldr	r3, [r7, #4]
 801e290:	2200      	movs	r2, #0
 801e292:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801e294:	687a      	ldr	r2, [r7, #4]
 801e296:	23a9      	movs	r3, #169	@ 0xa9
 801e298:	009b      	lsls	r3, r3, #2
 801e29a:	2100      	movs	r1, #0
 801e29c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801e29e:	687a      	ldr	r2, [r7, #4]
 801e2a0:	23ae      	movs	r3, #174	@ 0xae
 801e2a2:	009b      	lsls	r3, r3, #2
 801e2a4:	58d3      	ldr	r3, [r2, r3]
 801e2a6:	2b00      	cmp	r3, #0
 801e2a8:	d00a      	beq.n	801e2c0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801e2aa:	687a      	ldr	r2, [r7, #4]
 801e2ac:	23ad      	movs	r3, #173	@ 0xad
 801e2ae:	009b      	lsls	r3, r3, #2
 801e2b0:	58d3      	ldr	r3, [r2, r3]
 801e2b2:	685a      	ldr	r2, [r3, #4]
 801e2b4:	687b      	ldr	r3, [r7, #4]
 801e2b6:	685b      	ldr	r3, [r3, #4]
 801e2b8:	b2d9      	uxtb	r1, r3
 801e2ba:	687b      	ldr	r3, [r7, #4]
 801e2bc:	0018      	movs	r0, r3
 801e2be:	4790      	blx	r2
  }

  return USBD_OK;
 801e2c0:	2300      	movs	r3, #0
}
 801e2c2:	0018      	movs	r0, r3
 801e2c4:	46bd      	mov	sp, r7
 801e2c6:	b002      	add	sp, #8
 801e2c8:	bd80      	pop	{r7, pc}

0801e2ca <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801e2ca:	b580      	push	{r7, lr}
 801e2cc:	b082      	sub	sp, #8
 801e2ce:	af00      	add	r7, sp, #0
 801e2d0:	6078      	str	r0, [r7, #4]
 801e2d2:	000a      	movs	r2, r1
 801e2d4:	1cfb      	adds	r3, r7, #3
 801e2d6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	1cfa      	adds	r2, r7, #3
 801e2dc:	7812      	ldrb	r2, [r2, #0]
 801e2de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801e2e0:	2300      	movs	r3, #0
}
 801e2e2:	0018      	movs	r0, r3
 801e2e4:	46bd      	mov	sp, r7
 801e2e6:	b002      	add	sp, #8
 801e2e8:	bd80      	pop	{r7, pc}
	...

0801e2ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801e2ec:	b580      	push	{r7, lr}
 801e2ee:	b082      	sub	sp, #8
 801e2f0:	af00      	add	r7, sp, #0
 801e2f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801e2f4:	687a      	ldr	r2, [r7, #4]
 801e2f6:	23a7      	movs	r3, #167	@ 0xa7
 801e2f8:	009b      	lsls	r3, r3, #2
 801e2fa:	5cd1      	ldrb	r1, [r2, r3]
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	4a06      	ldr	r2, [pc, #24]	@ (801e318 <USBD_LL_Suspend+0x2c>)
 801e300:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801e302:	687a      	ldr	r2, [r7, #4]
 801e304:	23a7      	movs	r3, #167	@ 0xa7
 801e306:	009b      	lsls	r3, r3, #2
 801e308:	2104      	movs	r1, #4
 801e30a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801e30c:	2300      	movs	r3, #0
}
 801e30e:	0018      	movs	r0, r3
 801e310:	46bd      	mov	sp, r7
 801e312:	b002      	add	sp, #8
 801e314:	bd80      	pop	{r7, pc}
 801e316:	46c0      	nop			@ (mov r8, r8)
 801e318:	0000029d 	.word	0x0000029d

0801e31c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801e31c:	b580      	push	{r7, lr}
 801e31e:	b082      	sub	sp, #8
 801e320:	af00      	add	r7, sp, #0
 801e322:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801e324:	687a      	ldr	r2, [r7, #4]
 801e326:	23a7      	movs	r3, #167	@ 0xa7
 801e328:	009b      	lsls	r3, r3, #2
 801e32a:	5cd3      	ldrb	r3, [r2, r3]
 801e32c:	2b04      	cmp	r3, #4
 801e32e:	d106      	bne.n	801e33e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	4a05      	ldr	r2, [pc, #20]	@ (801e348 <USBD_LL_Resume+0x2c>)
 801e334:	5c99      	ldrb	r1, [r3, r2]
 801e336:	687a      	ldr	r2, [r7, #4]
 801e338:	23a7      	movs	r3, #167	@ 0xa7
 801e33a:	009b      	lsls	r3, r3, #2
 801e33c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801e33e:	2300      	movs	r3, #0
}
 801e340:	0018      	movs	r0, r3
 801e342:	46bd      	mov	sp, r7
 801e344:	b002      	add	sp, #8
 801e346:	bd80      	pop	{r7, pc}
 801e348:	0000029d 	.word	0x0000029d

0801e34c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801e34c:	b580      	push	{r7, lr}
 801e34e:	b082      	sub	sp, #8
 801e350:	af00      	add	r7, sp, #0
 801e352:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e354:	687a      	ldr	r2, [r7, #4]
 801e356:	23a7      	movs	r3, #167	@ 0xa7
 801e358:	009b      	lsls	r3, r3, #2
 801e35a:	5cd3      	ldrb	r3, [r2, r3]
 801e35c:	2b03      	cmp	r3, #3
 801e35e:	d10e      	bne.n	801e37e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801e360:	687a      	ldr	r2, [r7, #4]
 801e362:	23ad      	movs	r3, #173	@ 0xad
 801e364:	009b      	lsls	r3, r3, #2
 801e366:	58d3      	ldr	r3, [r2, r3]
 801e368:	69db      	ldr	r3, [r3, #28]
 801e36a:	2b00      	cmp	r3, #0
 801e36c:	d007      	beq.n	801e37e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801e36e:	687a      	ldr	r2, [r7, #4]
 801e370:	23ad      	movs	r3, #173	@ 0xad
 801e372:	009b      	lsls	r3, r3, #2
 801e374:	58d3      	ldr	r3, [r2, r3]
 801e376:	69db      	ldr	r3, [r3, #28]
 801e378:	687a      	ldr	r2, [r7, #4]
 801e37a:	0010      	movs	r0, r2
 801e37c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801e37e:	2300      	movs	r3, #0
}
 801e380:	0018      	movs	r0, r3
 801e382:	46bd      	mov	sp, r7
 801e384:	b002      	add	sp, #8
 801e386:	bd80      	pop	{r7, pc}

0801e388 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801e388:	b580      	push	{r7, lr}
 801e38a:	b084      	sub	sp, #16
 801e38c:	af00      	add	r7, sp, #0
 801e38e:	6078      	str	r0, [r7, #4]
 801e390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801e392:	230f      	movs	r3, #15
 801e394:	18fb      	adds	r3, r7, r3
 801e396:	2200      	movs	r2, #0
 801e398:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e39a:	683b      	ldr	r3, [r7, #0]
 801e39c:	781b      	ldrb	r3, [r3, #0]
 801e39e:	001a      	movs	r2, r3
 801e3a0:	2360      	movs	r3, #96	@ 0x60
 801e3a2:	4013      	ands	r3, r2
 801e3a4:	2b40      	cmp	r3, #64	@ 0x40
 801e3a6:	d004      	beq.n	801e3b2 <USBD_StdDevReq+0x2a>
 801e3a8:	d84f      	bhi.n	801e44a <USBD_StdDevReq+0xc2>
 801e3aa:	2b00      	cmp	r3, #0
 801e3ac:	d00b      	beq.n	801e3c6 <USBD_StdDevReq+0x3e>
 801e3ae:	2b20      	cmp	r3, #32
 801e3b0:	d14b      	bne.n	801e44a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801e3b2:	687a      	ldr	r2, [r7, #4]
 801e3b4:	23ad      	movs	r3, #173	@ 0xad
 801e3b6:	009b      	lsls	r3, r3, #2
 801e3b8:	58d3      	ldr	r3, [r2, r3]
 801e3ba:	689b      	ldr	r3, [r3, #8]
 801e3bc:	6839      	ldr	r1, [r7, #0]
 801e3be:	687a      	ldr	r2, [r7, #4]
 801e3c0:	0010      	movs	r0, r2
 801e3c2:	4798      	blx	r3
      break;
 801e3c4:	e048      	b.n	801e458 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801e3c6:	683b      	ldr	r3, [r7, #0]
 801e3c8:	785b      	ldrb	r3, [r3, #1]
 801e3ca:	2b09      	cmp	r3, #9
 801e3cc:	d835      	bhi.n	801e43a <USBD_StdDevReq+0xb2>
 801e3ce:	009a      	lsls	r2, r3, #2
 801e3d0:	4b25      	ldr	r3, [pc, #148]	@ (801e468 <USBD_StdDevReq+0xe0>)
 801e3d2:	18d3      	adds	r3, r2, r3
 801e3d4:	681b      	ldr	r3, [r3, #0]
 801e3d6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801e3d8:	683a      	ldr	r2, [r7, #0]
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	0011      	movs	r1, r2
 801e3de:	0018      	movs	r0, r3
 801e3e0:	f000 fa52 	bl	801e888 <USBD_GetDescriptor>
          break;
 801e3e4:	e030      	b.n	801e448 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801e3e6:	683a      	ldr	r2, [r7, #0]
 801e3e8:	687b      	ldr	r3, [r7, #4]
 801e3ea:	0011      	movs	r1, r2
 801e3ec:	0018      	movs	r0, r3
 801e3ee:	f000 fbfd 	bl	801ebec <USBD_SetAddress>
          break;
 801e3f2:	e029      	b.n	801e448 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801e3f4:	683a      	ldr	r2, [r7, #0]
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	0011      	movs	r1, r2
 801e3fa:	0018      	movs	r0, r3
 801e3fc:	f000 fc4a 	bl	801ec94 <USBD_SetConfig>
          break;
 801e400:	e022      	b.n	801e448 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801e402:	683a      	ldr	r2, [r7, #0]
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	0011      	movs	r1, r2
 801e408:	0018      	movs	r0, r3
 801e40a:	f000 fce7 	bl	801eddc <USBD_GetConfig>
          break;
 801e40e:	e01b      	b.n	801e448 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801e410:	683a      	ldr	r2, [r7, #0]
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	0011      	movs	r1, r2
 801e416:	0018      	movs	r0, r3
 801e418:	f000 fd1b 	bl	801ee52 <USBD_GetStatus>
          break;
 801e41c:	e014      	b.n	801e448 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801e41e:	683a      	ldr	r2, [r7, #0]
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	0011      	movs	r1, r2
 801e424:	0018      	movs	r0, r3
 801e426:	f000 fd4e 	bl	801eec6 <USBD_SetFeature>
          break;
 801e42a:	e00d      	b.n	801e448 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801e42c:	683a      	ldr	r2, [r7, #0]
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	0011      	movs	r1, r2
 801e432:	0018      	movs	r0, r3
 801e434:	f000 fd5d 	bl	801eef2 <USBD_ClrFeature>
          break;
 801e438:	e006      	b.n	801e448 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801e43a:	683a      	ldr	r2, [r7, #0]
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	0011      	movs	r1, r2
 801e440:	0018      	movs	r0, r3
 801e442:	f000 fdb4 	bl	801efae <USBD_CtlError>
          break;
 801e446:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801e448:	e006      	b.n	801e458 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801e44a:	683a      	ldr	r2, [r7, #0]
 801e44c:	687b      	ldr	r3, [r7, #4]
 801e44e:	0011      	movs	r1, r2
 801e450:	0018      	movs	r0, r3
 801e452:	f000 fdac 	bl	801efae <USBD_CtlError>
      break;
 801e456:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801e458:	230f      	movs	r3, #15
 801e45a:	18fb      	adds	r3, r7, r3
 801e45c:	781b      	ldrb	r3, [r3, #0]
}
 801e45e:	0018      	movs	r0, r3
 801e460:	46bd      	mov	sp, r7
 801e462:	b004      	add	sp, #16
 801e464:	bd80      	pop	{r7, pc}
 801e466:	46c0      	nop			@ (mov r8, r8)
 801e468:	08028b40 	.word	0x08028b40

0801e46c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801e46c:	b5b0      	push	{r4, r5, r7, lr}
 801e46e:	b084      	sub	sp, #16
 801e470:	af00      	add	r7, sp, #0
 801e472:	6078      	str	r0, [r7, #4]
 801e474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801e476:	230f      	movs	r3, #15
 801e478:	18fb      	adds	r3, r7, r3
 801e47a:	2200      	movs	r2, #0
 801e47c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e47e:	683b      	ldr	r3, [r7, #0]
 801e480:	781b      	ldrb	r3, [r3, #0]
 801e482:	001a      	movs	r2, r3
 801e484:	2360      	movs	r3, #96	@ 0x60
 801e486:	4013      	ands	r3, r2
 801e488:	2b40      	cmp	r3, #64	@ 0x40
 801e48a:	d004      	beq.n	801e496 <USBD_StdItfReq+0x2a>
 801e48c:	d839      	bhi.n	801e502 <USBD_StdItfReq+0x96>
 801e48e:	2b00      	cmp	r3, #0
 801e490:	d001      	beq.n	801e496 <USBD_StdItfReq+0x2a>
 801e492:	2b20      	cmp	r3, #32
 801e494:	d135      	bne.n	801e502 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801e496:	687a      	ldr	r2, [r7, #4]
 801e498:	23a7      	movs	r3, #167	@ 0xa7
 801e49a:	009b      	lsls	r3, r3, #2
 801e49c:	5cd3      	ldrb	r3, [r2, r3]
 801e49e:	3b01      	subs	r3, #1
 801e4a0:	2b02      	cmp	r3, #2
 801e4a2:	d825      	bhi.n	801e4f0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801e4a4:	683b      	ldr	r3, [r7, #0]
 801e4a6:	889b      	ldrh	r3, [r3, #4]
 801e4a8:	b2db      	uxtb	r3, r3
 801e4aa:	2b01      	cmp	r3, #1
 801e4ac:	d819      	bhi.n	801e4e2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801e4ae:	687a      	ldr	r2, [r7, #4]
 801e4b0:	23ad      	movs	r3, #173	@ 0xad
 801e4b2:	009b      	lsls	r3, r3, #2
 801e4b4:	58d3      	ldr	r3, [r2, r3]
 801e4b6:	689b      	ldr	r3, [r3, #8]
 801e4b8:	250f      	movs	r5, #15
 801e4ba:	197c      	adds	r4, r7, r5
 801e4bc:	6839      	ldr	r1, [r7, #0]
 801e4be:	687a      	ldr	r2, [r7, #4]
 801e4c0:	0010      	movs	r0, r2
 801e4c2:	4798      	blx	r3
 801e4c4:	0003      	movs	r3, r0
 801e4c6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801e4c8:	683b      	ldr	r3, [r7, #0]
 801e4ca:	88db      	ldrh	r3, [r3, #6]
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	d116      	bne.n	801e4fe <USBD_StdItfReq+0x92>
 801e4d0:	197b      	adds	r3, r7, r5
 801e4d2:	781b      	ldrb	r3, [r3, #0]
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d112      	bne.n	801e4fe <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	0018      	movs	r0, r3
 801e4dc:	f000 fe4f 	bl	801f17e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801e4e0:	e00d      	b.n	801e4fe <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801e4e2:	683a      	ldr	r2, [r7, #0]
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	0011      	movs	r1, r2
 801e4e8:	0018      	movs	r0, r3
 801e4ea:	f000 fd60 	bl	801efae <USBD_CtlError>
          break;
 801e4ee:	e006      	b.n	801e4fe <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801e4f0:	683a      	ldr	r2, [r7, #0]
 801e4f2:	687b      	ldr	r3, [r7, #4]
 801e4f4:	0011      	movs	r1, r2
 801e4f6:	0018      	movs	r0, r3
 801e4f8:	f000 fd59 	bl	801efae <USBD_CtlError>
          break;
 801e4fc:	e000      	b.n	801e500 <USBD_StdItfReq+0x94>
          break;
 801e4fe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801e500:	e006      	b.n	801e510 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801e502:	683a      	ldr	r2, [r7, #0]
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	0011      	movs	r1, r2
 801e508:	0018      	movs	r0, r3
 801e50a:	f000 fd50 	bl	801efae <USBD_CtlError>
      break;
 801e50e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801e510:	2300      	movs	r3, #0
}
 801e512:	0018      	movs	r0, r3
 801e514:	46bd      	mov	sp, r7
 801e516:	b004      	add	sp, #16
 801e518:	bdb0      	pop	{r4, r5, r7, pc}

0801e51a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801e51a:	b5b0      	push	{r4, r5, r7, lr}
 801e51c:	b084      	sub	sp, #16
 801e51e:	af00      	add	r7, sp, #0
 801e520:	6078      	str	r0, [r7, #4]
 801e522:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801e524:	230f      	movs	r3, #15
 801e526:	18fb      	adds	r3, r7, r3
 801e528:	2200      	movs	r2, #0
 801e52a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801e52c:	683b      	ldr	r3, [r7, #0]
 801e52e:	889a      	ldrh	r2, [r3, #4]
 801e530:	230e      	movs	r3, #14
 801e532:	18fb      	adds	r3, r7, r3
 801e534:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e536:	683b      	ldr	r3, [r7, #0]
 801e538:	781b      	ldrb	r3, [r3, #0]
 801e53a:	001a      	movs	r2, r3
 801e53c:	2360      	movs	r3, #96	@ 0x60
 801e53e:	4013      	ands	r3, r2
 801e540:	2b40      	cmp	r3, #64	@ 0x40
 801e542:	d006      	beq.n	801e552 <USBD_StdEPReq+0x38>
 801e544:	d900      	bls.n	801e548 <USBD_StdEPReq+0x2e>
 801e546:	e190      	b.n	801e86a <USBD_StdEPReq+0x350>
 801e548:	2b00      	cmp	r3, #0
 801e54a:	d00c      	beq.n	801e566 <USBD_StdEPReq+0x4c>
 801e54c:	2b20      	cmp	r3, #32
 801e54e:	d000      	beq.n	801e552 <USBD_StdEPReq+0x38>
 801e550:	e18b      	b.n	801e86a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801e552:	687a      	ldr	r2, [r7, #4]
 801e554:	23ad      	movs	r3, #173	@ 0xad
 801e556:	009b      	lsls	r3, r3, #2
 801e558:	58d3      	ldr	r3, [r2, r3]
 801e55a:	689b      	ldr	r3, [r3, #8]
 801e55c:	6839      	ldr	r1, [r7, #0]
 801e55e:	687a      	ldr	r2, [r7, #4]
 801e560:	0010      	movs	r0, r2
 801e562:	4798      	blx	r3
      break;
 801e564:	e188      	b.n	801e878 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801e566:	683b      	ldr	r3, [r7, #0]
 801e568:	781b      	ldrb	r3, [r3, #0]
 801e56a:	001a      	movs	r2, r3
 801e56c:	2360      	movs	r3, #96	@ 0x60
 801e56e:	4013      	ands	r3, r2
 801e570:	2b20      	cmp	r3, #32
 801e572:	d10f      	bne.n	801e594 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801e574:	687a      	ldr	r2, [r7, #4]
 801e576:	23ad      	movs	r3, #173	@ 0xad
 801e578:	009b      	lsls	r3, r3, #2
 801e57a:	58d3      	ldr	r3, [r2, r3]
 801e57c:	689b      	ldr	r3, [r3, #8]
 801e57e:	250f      	movs	r5, #15
 801e580:	197c      	adds	r4, r7, r5
 801e582:	6839      	ldr	r1, [r7, #0]
 801e584:	687a      	ldr	r2, [r7, #4]
 801e586:	0010      	movs	r0, r2
 801e588:	4798      	blx	r3
 801e58a:	0003      	movs	r3, r0
 801e58c:	7023      	strb	r3, [r4, #0]

        return ret;
 801e58e:	197b      	adds	r3, r7, r5
 801e590:	781b      	ldrb	r3, [r3, #0]
 801e592:	e174      	b.n	801e87e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801e594:	683b      	ldr	r3, [r7, #0]
 801e596:	785b      	ldrb	r3, [r3, #1]
 801e598:	2b03      	cmp	r3, #3
 801e59a:	d007      	beq.n	801e5ac <USBD_StdEPReq+0x92>
 801e59c:	dd00      	ble.n	801e5a0 <USBD_StdEPReq+0x86>
 801e59e:	e15c      	b.n	801e85a <USBD_StdEPReq+0x340>
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	d100      	bne.n	801e5a6 <USBD_StdEPReq+0x8c>
 801e5a4:	e092      	b.n	801e6cc <USBD_StdEPReq+0x1b2>
 801e5a6:	2b01      	cmp	r3, #1
 801e5a8:	d04b      	beq.n	801e642 <USBD_StdEPReq+0x128>
 801e5aa:	e156      	b.n	801e85a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801e5ac:	687a      	ldr	r2, [r7, #4]
 801e5ae:	23a7      	movs	r3, #167	@ 0xa7
 801e5b0:	009b      	lsls	r3, r3, #2
 801e5b2:	5cd3      	ldrb	r3, [r2, r3]
 801e5b4:	2b02      	cmp	r3, #2
 801e5b6:	d002      	beq.n	801e5be <USBD_StdEPReq+0xa4>
 801e5b8:	2b03      	cmp	r3, #3
 801e5ba:	d01d      	beq.n	801e5f8 <USBD_StdEPReq+0xde>
 801e5bc:	e039      	b.n	801e632 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801e5be:	220e      	movs	r2, #14
 801e5c0:	18bb      	adds	r3, r7, r2
 801e5c2:	781b      	ldrb	r3, [r3, #0]
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	d010      	beq.n	801e5ea <USBD_StdEPReq+0xd0>
 801e5c8:	18bb      	adds	r3, r7, r2
 801e5ca:	781b      	ldrb	r3, [r3, #0]
 801e5cc:	2b80      	cmp	r3, #128	@ 0x80
 801e5ce:	d00c      	beq.n	801e5ea <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801e5d0:	18bb      	adds	r3, r7, r2
 801e5d2:	781a      	ldrb	r2, [r3, #0]
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	0011      	movs	r1, r2
 801e5d8:	0018      	movs	r0, r3
 801e5da:	f001 fa10 	bl	801f9fe <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	2180      	movs	r1, #128	@ 0x80
 801e5e2:	0018      	movs	r0, r3
 801e5e4:	f001 fa0b 	bl	801f9fe <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801e5e8:	e02a      	b.n	801e640 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801e5ea:	683a      	ldr	r2, [r7, #0]
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	0011      	movs	r1, r2
 801e5f0:	0018      	movs	r0, r3
 801e5f2:	f000 fcdc 	bl	801efae <USBD_CtlError>
              break;
 801e5f6:	e023      	b.n	801e640 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801e5f8:	683b      	ldr	r3, [r7, #0]
 801e5fa:	885b      	ldrh	r3, [r3, #2]
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d113      	bne.n	801e628 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801e600:	220e      	movs	r2, #14
 801e602:	18bb      	adds	r3, r7, r2
 801e604:	781b      	ldrb	r3, [r3, #0]
 801e606:	2b00      	cmp	r3, #0
 801e608:	d00e      	beq.n	801e628 <USBD_StdEPReq+0x10e>
 801e60a:	18bb      	adds	r3, r7, r2
 801e60c:	781b      	ldrb	r3, [r3, #0]
 801e60e:	2b80      	cmp	r3, #128	@ 0x80
 801e610:	d00a      	beq.n	801e628 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801e612:	683b      	ldr	r3, [r7, #0]
 801e614:	88db      	ldrh	r3, [r3, #6]
 801e616:	2b00      	cmp	r3, #0
 801e618:	d106      	bne.n	801e628 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801e61a:	18bb      	adds	r3, r7, r2
 801e61c:	781a      	ldrb	r2, [r3, #0]
 801e61e:	687b      	ldr	r3, [r7, #4]
 801e620:	0011      	movs	r1, r2
 801e622:	0018      	movs	r0, r3
 801e624:	f001 f9eb 	bl	801f9fe <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	0018      	movs	r0, r3
 801e62c:	f000 fda7 	bl	801f17e <USBD_CtlSendStatus>

              break;
 801e630:	e006      	b.n	801e640 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801e632:	683a      	ldr	r2, [r7, #0]
 801e634:	687b      	ldr	r3, [r7, #4]
 801e636:	0011      	movs	r1, r2
 801e638:	0018      	movs	r0, r3
 801e63a:	f000 fcb8 	bl	801efae <USBD_CtlError>
              break;
 801e63e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801e640:	e112      	b.n	801e868 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801e642:	687a      	ldr	r2, [r7, #4]
 801e644:	23a7      	movs	r3, #167	@ 0xa7
 801e646:	009b      	lsls	r3, r3, #2
 801e648:	5cd3      	ldrb	r3, [r2, r3]
 801e64a:	2b02      	cmp	r3, #2
 801e64c:	d002      	beq.n	801e654 <USBD_StdEPReq+0x13a>
 801e64e:	2b03      	cmp	r3, #3
 801e650:	d01d      	beq.n	801e68e <USBD_StdEPReq+0x174>
 801e652:	e032      	b.n	801e6ba <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801e654:	220e      	movs	r2, #14
 801e656:	18bb      	adds	r3, r7, r2
 801e658:	781b      	ldrb	r3, [r3, #0]
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	d010      	beq.n	801e680 <USBD_StdEPReq+0x166>
 801e65e:	18bb      	adds	r3, r7, r2
 801e660:	781b      	ldrb	r3, [r3, #0]
 801e662:	2b80      	cmp	r3, #128	@ 0x80
 801e664:	d00c      	beq.n	801e680 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801e666:	18bb      	adds	r3, r7, r2
 801e668:	781a      	ldrb	r2, [r3, #0]
 801e66a:	687b      	ldr	r3, [r7, #4]
 801e66c:	0011      	movs	r1, r2
 801e66e:	0018      	movs	r0, r3
 801e670:	f001 f9c5 	bl	801f9fe <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	2180      	movs	r1, #128	@ 0x80
 801e678:	0018      	movs	r0, r3
 801e67a:	f001 f9c0 	bl	801f9fe <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801e67e:	e024      	b.n	801e6ca <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801e680:	683a      	ldr	r2, [r7, #0]
 801e682:	687b      	ldr	r3, [r7, #4]
 801e684:	0011      	movs	r1, r2
 801e686:	0018      	movs	r0, r3
 801e688:	f000 fc91 	bl	801efae <USBD_CtlError>
              break;
 801e68c:	e01d      	b.n	801e6ca <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801e68e:	683b      	ldr	r3, [r7, #0]
 801e690:	885b      	ldrh	r3, [r3, #2]
 801e692:	2b00      	cmp	r3, #0
 801e694:	d118      	bne.n	801e6c8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801e696:	210e      	movs	r1, #14
 801e698:	187b      	adds	r3, r7, r1
 801e69a:	781b      	ldrb	r3, [r3, #0]
 801e69c:	227f      	movs	r2, #127	@ 0x7f
 801e69e:	4013      	ands	r3, r2
 801e6a0:	d006      	beq.n	801e6b0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801e6a2:	187b      	adds	r3, r7, r1
 801e6a4:	781a      	ldrb	r2, [r3, #0]
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	0011      	movs	r1, r2
 801e6aa:	0018      	movs	r0, r3
 801e6ac:	f001 f9d2 	bl	801fa54 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	0018      	movs	r0, r3
 801e6b4:	f000 fd63 	bl	801f17e <USBD_CtlSendStatus>
              }
              break;
 801e6b8:	e006      	b.n	801e6c8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801e6ba:	683a      	ldr	r2, [r7, #0]
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	0011      	movs	r1, r2
 801e6c0:	0018      	movs	r0, r3
 801e6c2:	f000 fc74 	bl	801efae <USBD_CtlError>
              break;
 801e6c6:	e000      	b.n	801e6ca <USBD_StdEPReq+0x1b0>
              break;
 801e6c8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801e6ca:	e0cd      	b.n	801e868 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801e6cc:	687a      	ldr	r2, [r7, #4]
 801e6ce:	23a7      	movs	r3, #167	@ 0xa7
 801e6d0:	009b      	lsls	r3, r3, #2
 801e6d2:	5cd3      	ldrb	r3, [r2, r3]
 801e6d4:	2b02      	cmp	r3, #2
 801e6d6:	d002      	beq.n	801e6de <USBD_StdEPReq+0x1c4>
 801e6d8:	2b03      	cmp	r3, #3
 801e6da:	d03c      	beq.n	801e756 <USBD_StdEPReq+0x23c>
 801e6dc:	e0b5      	b.n	801e84a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801e6de:	220e      	movs	r2, #14
 801e6e0:	18bb      	adds	r3, r7, r2
 801e6e2:	781b      	ldrb	r3, [r3, #0]
 801e6e4:	2b00      	cmp	r3, #0
 801e6e6:	d00a      	beq.n	801e6fe <USBD_StdEPReq+0x1e4>
 801e6e8:	18bb      	adds	r3, r7, r2
 801e6ea:	781b      	ldrb	r3, [r3, #0]
 801e6ec:	2b80      	cmp	r3, #128	@ 0x80
 801e6ee:	d006      	beq.n	801e6fe <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801e6f0:	683a      	ldr	r2, [r7, #0]
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	0011      	movs	r1, r2
 801e6f6:	0018      	movs	r0, r3
 801e6f8:	f000 fc59 	bl	801efae <USBD_CtlError>
                break;
 801e6fc:	e0ac      	b.n	801e858 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801e6fe:	220e      	movs	r2, #14
 801e700:	18bb      	adds	r3, r7, r2
 801e702:	781b      	ldrb	r3, [r3, #0]
 801e704:	b25b      	sxtb	r3, r3
 801e706:	2b00      	cmp	r3, #0
 801e708:	da0c      	bge.n	801e724 <USBD_StdEPReq+0x20a>
 801e70a:	18bb      	adds	r3, r7, r2
 801e70c:	781b      	ldrb	r3, [r3, #0]
 801e70e:	227f      	movs	r2, #127	@ 0x7f
 801e710:	401a      	ands	r2, r3
 801e712:	0013      	movs	r3, r2
 801e714:	009b      	lsls	r3, r3, #2
 801e716:	189b      	adds	r3, r3, r2
 801e718:	009b      	lsls	r3, r3, #2
 801e71a:	3310      	adds	r3, #16
 801e71c:	687a      	ldr	r2, [r7, #4]
 801e71e:	18d3      	adds	r3, r2, r3
 801e720:	3304      	adds	r3, #4
 801e722:	e00d      	b.n	801e740 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801e724:	230e      	movs	r3, #14
 801e726:	18fb      	adds	r3, r7, r3
 801e728:	781b      	ldrb	r3, [r3, #0]
 801e72a:	227f      	movs	r2, #127	@ 0x7f
 801e72c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801e72e:	0013      	movs	r3, r2
 801e730:	009b      	lsls	r3, r3, #2
 801e732:	189b      	adds	r3, r3, r2
 801e734:	009b      	lsls	r3, r3, #2
 801e736:	3351      	adds	r3, #81	@ 0x51
 801e738:	33ff      	adds	r3, #255	@ 0xff
 801e73a:	687a      	ldr	r2, [r7, #4]
 801e73c:	18d3      	adds	r3, r2, r3
 801e73e:	3304      	adds	r3, #4
 801e740:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801e742:	68bb      	ldr	r3, [r7, #8]
 801e744:	2200      	movs	r2, #0
 801e746:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801e748:	68b9      	ldr	r1, [r7, #8]
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	2202      	movs	r2, #2
 801e74e:	0018      	movs	r0, r3
 801e750:	f000 fcab 	bl	801f0aa <USBD_CtlSendData>
              break;
 801e754:	e080      	b.n	801e858 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801e756:	220e      	movs	r2, #14
 801e758:	18bb      	adds	r3, r7, r2
 801e75a:	781b      	ldrb	r3, [r3, #0]
 801e75c:	b25b      	sxtb	r3, r3
 801e75e:	2b00      	cmp	r3, #0
 801e760:	da14      	bge.n	801e78c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801e762:	18bb      	adds	r3, r7, r2
 801e764:	781b      	ldrb	r3, [r3, #0]
 801e766:	220f      	movs	r2, #15
 801e768:	401a      	ands	r2, r3
 801e76a:	6879      	ldr	r1, [r7, #4]
 801e76c:	0013      	movs	r3, r2
 801e76e:	009b      	lsls	r3, r3, #2
 801e770:	189b      	adds	r3, r3, r2
 801e772:	009b      	lsls	r3, r3, #2
 801e774:	18cb      	adds	r3, r1, r3
 801e776:	3318      	adds	r3, #24
 801e778:	681b      	ldr	r3, [r3, #0]
 801e77a:	2b00      	cmp	r3, #0
 801e77c:	d11e      	bne.n	801e7bc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801e77e:	683a      	ldr	r2, [r7, #0]
 801e780:	687b      	ldr	r3, [r7, #4]
 801e782:	0011      	movs	r1, r2
 801e784:	0018      	movs	r0, r3
 801e786:	f000 fc12 	bl	801efae <USBD_CtlError>
                  break;
 801e78a:	e065      	b.n	801e858 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801e78c:	230e      	movs	r3, #14
 801e78e:	18fb      	adds	r3, r7, r3
 801e790:	781b      	ldrb	r3, [r3, #0]
 801e792:	220f      	movs	r2, #15
 801e794:	401a      	ands	r2, r3
 801e796:	6878      	ldr	r0, [r7, #4]
 801e798:	23ac      	movs	r3, #172	@ 0xac
 801e79a:	0059      	lsls	r1, r3, #1
 801e79c:	0013      	movs	r3, r2
 801e79e:	009b      	lsls	r3, r3, #2
 801e7a0:	189b      	adds	r3, r3, r2
 801e7a2:	009b      	lsls	r3, r3, #2
 801e7a4:	18c3      	adds	r3, r0, r3
 801e7a6:	185b      	adds	r3, r3, r1
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	2b00      	cmp	r3, #0
 801e7ac:	d106      	bne.n	801e7bc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801e7ae:	683a      	ldr	r2, [r7, #0]
 801e7b0:	687b      	ldr	r3, [r7, #4]
 801e7b2:	0011      	movs	r1, r2
 801e7b4:	0018      	movs	r0, r3
 801e7b6:	f000 fbfa 	bl	801efae <USBD_CtlError>
                  break;
 801e7ba:	e04d      	b.n	801e858 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801e7bc:	220e      	movs	r2, #14
 801e7be:	18bb      	adds	r3, r7, r2
 801e7c0:	781b      	ldrb	r3, [r3, #0]
 801e7c2:	b25b      	sxtb	r3, r3
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	da0c      	bge.n	801e7e2 <USBD_StdEPReq+0x2c8>
 801e7c8:	18bb      	adds	r3, r7, r2
 801e7ca:	781b      	ldrb	r3, [r3, #0]
 801e7cc:	227f      	movs	r2, #127	@ 0x7f
 801e7ce:	401a      	ands	r2, r3
 801e7d0:	0013      	movs	r3, r2
 801e7d2:	009b      	lsls	r3, r3, #2
 801e7d4:	189b      	adds	r3, r3, r2
 801e7d6:	009b      	lsls	r3, r3, #2
 801e7d8:	3310      	adds	r3, #16
 801e7da:	687a      	ldr	r2, [r7, #4]
 801e7dc:	18d3      	adds	r3, r2, r3
 801e7de:	3304      	adds	r3, #4
 801e7e0:	e00d      	b.n	801e7fe <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801e7e2:	230e      	movs	r3, #14
 801e7e4:	18fb      	adds	r3, r7, r3
 801e7e6:	781b      	ldrb	r3, [r3, #0]
 801e7e8:	227f      	movs	r2, #127	@ 0x7f
 801e7ea:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801e7ec:	0013      	movs	r3, r2
 801e7ee:	009b      	lsls	r3, r3, #2
 801e7f0:	189b      	adds	r3, r3, r2
 801e7f2:	009b      	lsls	r3, r3, #2
 801e7f4:	3351      	adds	r3, #81	@ 0x51
 801e7f6:	33ff      	adds	r3, #255	@ 0xff
 801e7f8:	687a      	ldr	r2, [r7, #4]
 801e7fa:	18d3      	adds	r3, r2, r3
 801e7fc:	3304      	adds	r3, #4
 801e7fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801e800:	220e      	movs	r2, #14
 801e802:	18bb      	adds	r3, r7, r2
 801e804:	781b      	ldrb	r3, [r3, #0]
 801e806:	2b00      	cmp	r3, #0
 801e808:	d003      	beq.n	801e812 <USBD_StdEPReq+0x2f8>
 801e80a:	18bb      	adds	r3, r7, r2
 801e80c:	781b      	ldrb	r3, [r3, #0]
 801e80e:	2b80      	cmp	r3, #128	@ 0x80
 801e810:	d103      	bne.n	801e81a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801e812:	68bb      	ldr	r3, [r7, #8]
 801e814:	2200      	movs	r2, #0
 801e816:	601a      	str	r2, [r3, #0]
 801e818:	e010      	b.n	801e83c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801e81a:	230e      	movs	r3, #14
 801e81c:	18fb      	adds	r3, r7, r3
 801e81e:	781a      	ldrb	r2, [r3, #0]
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	0011      	movs	r1, r2
 801e824:	0018      	movs	r0, r3
 801e826:	f001 f940 	bl	801faaa <USBD_LL_IsStallEP>
 801e82a:	1e03      	subs	r3, r0, #0
 801e82c:	d003      	beq.n	801e836 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801e82e:	68bb      	ldr	r3, [r7, #8]
 801e830:	2201      	movs	r2, #1
 801e832:	601a      	str	r2, [r3, #0]
 801e834:	e002      	b.n	801e83c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801e836:	68bb      	ldr	r3, [r7, #8]
 801e838:	2200      	movs	r2, #0
 801e83a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801e83c:	68b9      	ldr	r1, [r7, #8]
 801e83e:	687b      	ldr	r3, [r7, #4]
 801e840:	2202      	movs	r2, #2
 801e842:	0018      	movs	r0, r3
 801e844:	f000 fc31 	bl	801f0aa <USBD_CtlSendData>
              break;
 801e848:	e006      	b.n	801e858 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801e84a:	683a      	ldr	r2, [r7, #0]
 801e84c:	687b      	ldr	r3, [r7, #4]
 801e84e:	0011      	movs	r1, r2
 801e850:	0018      	movs	r0, r3
 801e852:	f000 fbac 	bl	801efae <USBD_CtlError>
              break;
 801e856:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801e858:	e006      	b.n	801e868 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801e85a:	683a      	ldr	r2, [r7, #0]
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	0011      	movs	r1, r2
 801e860:	0018      	movs	r0, r3
 801e862:	f000 fba4 	bl	801efae <USBD_CtlError>
          break;
 801e866:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801e868:	e006      	b.n	801e878 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801e86a:	683a      	ldr	r2, [r7, #0]
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	0011      	movs	r1, r2
 801e870:	0018      	movs	r0, r3
 801e872:	f000 fb9c 	bl	801efae <USBD_CtlError>
      break;
 801e876:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801e878:	230f      	movs	r3, #15
 801e87a:	18fb      	adds	r3, r7, r3
 801e87c:	781b      	ldrb	r3, [r3, #0]
}
 801e87e:	0018      	movs	r0, r3
 801e880:	46bd      	mov	sp, r7
 801e882:	b004      	add	sp, #16
 801e884:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801e888 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801e888:	b580      	push	{r7, lr}
 801e88a:	b084      	sub	sp, #16
 801e88c:	af00      	add	r7, sp, #0
 801e88e:	6078      	str	r0, [r7, #4]
 801e890:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801e892:	2308      	movs	r3, #8
 801e894:	18fb      	adds	r3, r7, r3
 801e896:	2200      	movs	r2, #0
 801e898:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801e89a:	2300      	movs	r3, #0
 801e89c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801e89e:	230b      	movs	r3, #11
 801e8a0:	18fb      	adds	r3, r7, r3
 801e8a2:	2200      	movs	r2, #0
 801e8a4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801e8a6:	683b      	ldr	r3, [r7, #0]
 801e8a8:	885b      	ldrh	r3, [r3, #2]
 801e8aa:	0a1b      	lsrs	r3, r3, #8
 801e8ac:	b29b      	uxth	r3, r3
 801e8ae:	2b07      	cmp	r3, #7
 801e8b0:	d900      	bls.n	801e8b4 <USBD_GetDescriptor+0x2c>
 801e8b2:	e159      	b.n	801eb68 <USBD_GetDescriptor+0x2e0>
 801e8b4:	009a      	lsls	r2, r3, #2
 801e8b6:	4bcb      	ldr	r3, [pc, #812]	@ (801ebe4 <USBD_GetDescriptor+0x35c>)
 801e8b8:	18d3      	adds	r3, r2, r3
 801e8ba:	681b      	ldr	r3, [r3, #0]
 801e8bc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801e8be:	687a      	ldr	r2, [r7, #4]
 801e8c0:	23ac      	movs	r3, #172	@ 0xac
 801e8c2:	009b      	lsls	r3, r3, #2
 801e8c4:	58d3      	ldr	r3, [r2, r3]
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	687a      	ldr	r2, [r7, #4]
 801e8ca:	7c12      	ldrb	r2, [r2, #16]
 801e8cc:	2108      	movs	r1, #8
 801e8ce:	1879      	adds	r1, r7, r1
 801e8d0:	0010      	movs	r0, r2
 801e8d2:	4798      	blx	r3
 801e8d4:	0003      	movs	r3, r0
 801e8d6:	60fb      	str	r3, [r7, #12]
      break;
 801e8d8:	e153      	b.n	801eb82 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	7c1b      	ldrb	r3, [r3, #16]
 801e8de:	2b00      	cmp	r3, #0
 801e8e0:	d10f      	bne.n	801e902 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801e8e2:	687a      	ldr	r2, [r7, #4]
 801e8e4:	23ad      	movs	r3, #173	@ 0xad
 801e8e6:	009b      	lsls	r3, r3, #2
 801e8e8:	58d3      	ldr	r3, [r2, r3]
 801e8ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e8ec:	2208      	movs	r2, #8
 801e8ee:	18ba      	adds	r2, r7, r2
 801e8f0:	0010      	movs	r0, r2
 801e8f2:	4798      	blx	r3
 801e8f4:	0003      	movs	r3, r0
 801e8f6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801e8f8:	68fb      	ldr	r3, [r7, #12]
 801e8fa:	3301      	adds	r3, #1
 801e8fc:	2202      	movs	r2, #2
 801e8fe:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801e900:	e13f      	b.n	801eb82 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801e902:	687a      	ldr	r2, [r7, #4]
 801e904:	23ad      	movs	r3, #173	@ 0xad
 801e906:	009b      	lsls	r3, r3, #2
 801e908:	58d3      	ldr	r3, [r2, r3]
 801e90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e90c:	2208      	movs	r2, #8
 801e90e:	18ba      	adds	r2, r7, r2
 801e910:	0010      	movs	r0, r2
 801e912:	4798      	blx	r3
 801e914:	0003      	movs	r3, r0
 801e916:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801e918:	68fb      	ldr	r3, [r7, #12]
 801e91a:	3301      	adds	r3, #1
 801e91c:	2202      	movs	r2, #2
 801e91e:	701a      	strb	r2, [r3, #0]
      break;
 801e920:	e12f      	b.n	801eb82 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801e922:	683b      	ldr	r3, [r7, #0]
 801e924:	885b      	ldrh	r3, [r3, #2]
 801e926:	b2db      	uxtb	r3, r3
 801e928:	2b05      	cmp	r3, #5
 801e92a:	d900      	bls.n	801e92e <USBD_GetDescriptor+0xa6>
 801e92c:	e0d0      	b.n	801ead0 <USBD_GetDescriptor+0x248>
 801e92e:	009a      	lsls	r2, r3, #2
 801e930:	4bad      	ldr	r3, [pc, #692]	@ (801ebe8 <USBD_GetDescriptor+0x360>)
 801e932:	18d3      	adds	r3, r2, r3
 801e934:	681b      	ldr	r3, [r3, #0]
 801e936:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801e938:	687a      	ldr	r2, [r7, #4]
 801e93a:	23ac      	movs	r3, #172	@ 0xac
 801e93c:	009b      	lsls	r3, r3, #2
 801e93e:	58d3      	ldr	r3, [r2, r3]
 801e940:	685b      	ldr	r3, [r3, #4]
 801e942:	2b00      	cmp	r3, #0
 801e944:	d00d      	beq.n	801e962 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801e946:	687a      	ldr	r2, [r7, #4]
 801e948:	23ac      	movs	r3, #172	@ 0xac
 801e94a:	009b      	lsls	r3, r3, #2
 801e94c:	58d3      	ldr	r3, [r2, r3]
 801e94e:	685b      	ldr	r3, [r3, #4]
 801e950:	687a      	ldr	r2, [r7, #4]
 801e952:	7c12      	ldrb	r2, [r2, #16]
 801e954:	2108      	movs	r1, #8
 801e956:	1879      	adds	r1, r7, r1
 801e958:	0010      	movs	r0, r2
 801e95a:	4798      	blx	r3
 801e95c:	0003      	movs	r3, r0
 801e95e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801e960:	e0c3      	b.n	801eaea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801e962:	683a      	ldr	r2, [r7, #0]
 801e964:	687b      	ldr	r3, [r7, #4]
 801e966:	0011      	movs	r1, r2
 801e968:	0018      	movs	r0, r3
 801e96a:	f000 fb20 	bl	801efae <USBD_CtlError>
            err++;
 801e96e:	210b      	movs	r1, #11
 801e970:	187b      	adds	r3, r7, r1
 801e972:	781a      	ldrb	r2, [r3, #0]
 801e974:	187b      	adds	r3, r7, r1
 801e976:	3201      	adds	r2, #1
 801e978:	701a      	strb	r2, [r3, #0]
          break;
 801e97a:	e0b6      	b.n	801eaea <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801e97c:	687a      	ldr	r2, [r7, #4]
 801e97e:	23ac      	movs	r3, #172	@ 0xac
 801e980:	009b      	lsls	r3, r3, #2
 801e982:	58d3      	ldr	r3, [r2, r3]
 801e984:	689b      	ldr	r3, [r3, #8]
 801e986:	2b00      	cmp	r3, #0
 801e988:	d00d      	beq.n	801e9a6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801e98a:	687a      	ldr	r2, [r7, #4]
 801e98c:	23ac      	movs	r3, #172	@ 0xac
 801e98e:	009b      	lsls	r3, r3, #2
 801e990:	58d3      	ldr	r3, [r2, r3]
 801e992:	689b      	ldr	r3, [r3, #8]
 801e994:	687a      	ldr	r2, [r7, #4]
 801e996:	7c12      	ldrb	r2, [r2, #16]
 801e998:	2108      	movs	r1, #8
 801e99a:	1879      	adds	r1, r7, r1
 801e99c:	0010      	movs	r0, r2
 801e99e:	4798      	blx	r3
 801e9a0:	0003      	movs	r3, r0
 801e9a2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801e9a4:	e0a1      	b.n	801eaea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801e9a6:	683a      	ldr	r2, [r7, #0]
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	0011      	movs	r1, r2
 801e9ac:	0018      	movs	r0, r3
 801e9ae:	f000 fafe 	bl	801efae <USBD_CtlError>
            err++;
 801e9b2:	210b      	movs	r1, #11
 801e9b4:	187b      	adds	r3, r7, r1
 801e9b6:	781a      	ldrb	r2, [r3, #0]
 801e9b8:	187b      	adds	r3, r7, r1
 801e9ba:	3201      	adds	r2, #1
 801e9bc:	701a      	strb	r2, [r3, #0]
          break;
 801e9be:	e094      	b.n	801eaea <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801e9c0:	687a      	ldr	r2, [r7, #4]
 801e9c2:	23ac      	movs	r3, #172	@ 0xac
 801e9c4:	009b      	lsls	r3, r3, #2
 801e9c6:	58d3      	ldr	r3, [r2, r3]
 801e9c8:	68db      	ldr	r3, [r3, #12]
 801e9ca:	2b00      	cmp	r3, #0
 801e9cc:	d00d      	beq.n	801e9ea <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801e9ce:	687a      	ldr	r2, [r7, #4]
 801e9d0:	23ac      	movs	r3, #172	@ 0xac
 801e9d2:	009b      	lsls	r3, r3, #2
 801e9d4:	58d3      	ldr	r3, [r2, r3]
 801e9d6:	68db      	ldr	r3, [r3, #12]
 801e9d8:	687a      	ldr	r2, [r7, #4]
 801e9da:	7c12      	ldrb	r2, [r2, #16]
 801e9dc:	2108      	movs	r1, #8
 801e9de:	1879      	adds	r1, r7, r1
 801e9e0:	0010      	movs	r0, r2
 801e9e2:	4798      	blx	r3
 801e9e4:	0003      	movs	r3, r0
 801e9e6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801e9e8:	e07f      	b.n	801eaea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801e9ea:	683a      	ldr	r2, [r7, #0]
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	0011      	movs	r1, r2
 801e9f0:	0018      	movs	r0, r3
 801e9f2:	f000 fadc 	bl	801efae <USBD_CtlError>
            err++;
 801e9f6:	210b      	movs	r1, #11
 801e9f8:	187b      	adds	r3, r7, r1
 801e9fa:	781a      	ldrb	r2, [r3, #0]
 801e9fc:	187b      	adds	r3, r7, r1
 801e9fe:	3201      	adds	r2, #1
 801ea00:	701a      	strb	r2, [r3, #0]
          break;
 801ea02:	e072      	b.n	801eaea <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801ea04:	687a      	ldr	r2, [r7, #4]
 801ea06:	23ac      	movs	r3, #172	@ 0xac
 801ea08:	009b      	lsls	r3, r3, #2
 801ea0a:	58d3      	ldr	r3, [r2, r3]
 801ea0c:	691b      	ldr	r3, [r3, #16]
 801ea0e:	2b00      	cmp	r3, #0
 801ea10:	d00d      	beq.n	801ea2e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801ea12:	687a      	ldr	r2, [r7, #4]
 801ea14:	23ac      	movs	r3, #172	@ 0xac
 801ea16:	009b      	lsls	r3, r3, #2
 801ea18:	58d3      	ldr	r3, [r2, r3]
 801ea1a:	691b      	ldr	r3, [r3, #16]
 801ea1c:	687a      	ldr	r2, [r7, #4]
 801ea1e:	7c12      	ldrb	r2, [r2, #16]
 801ea20:	2108      	movs	r1, #8
 801ea22:	1879      	adds	r1, r7, r1
 801ea24:	0010      	movs	r0, r2
 801ea26:	4798      	blx	r3
 801ea28:	0003      	movs	r3, r0
 801ea2a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ea2c:	e05d      	b.n	801eaea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ea2e:	683a      	ldr	r2, [r7, #0]
 801ea30:	687b      	ldr	r3, [r7, #4]
 801ea32:	0011      	movs	r1, r2
 801ea34:	0018      	movs	r0, r3
 801ea36:	f000 faba 	bl	801efae <USBD_CtlError>
            err++;
 801ea3a:	210b      	movs	r1, #11
 801ea3c:	187b      	adds	r3, r7, r1
 801ea3e:	781a      	ldrb	r2, [r3, #0]
 801ea40:	187b      	adds	r3, r7, r1
 801ea42:	3201      	adds	r2, #1
 801ea44:	701a      	strb	r2, [r3, #0]
          break;
 801ea46:	e050      	b.n	801eaea <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801ea48:	687a      	ldr	r2, [r7, #4]
 801ea4a:	23ac      	movs	r3, #172	@ 0xac
 801ea4c:	009b      	lsls	r3, r3, #2
 801ea4e:	58d3      	ldr	r3, [r2, r3]
 801ea50:	695b      	ldr	r3, [r3, #20]
 801ea52:	2b00      	cmp	r3, #0
 801ea54:	d00d      	beq.n	801ea72 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801ea56:	687a      	ldr	r2, [r7, #4]
 801ea58:	23ac      	movs	r3, #172	@ 0xac
 801ea5a:	009b      	lsls	r3, r3, #2
 801ea5c:	58d3      	ldr	r3, [r2, r3]
 801ea5e:	695b      	ldr	r3, [r3, #20]
 801ea60:	687a      	ldr	r2, [r7, #4]
 801ea62:	7c12      	ldrb	r2, [r2, #16]
 801ea64:	2108      	movs	r1, #8
 801ea66:	1879      	adds	r1, r7, r1
 801ea68:	0010      	movs	r0, r2
 801ea6a:	4798      	blx	r3
 801ea6c:	0003      	movs	r3, r0
 801ea6e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ea70:	e03b      	b.n	801eaea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ea72:	683a      	ldr	r2, [r7, #0]
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	0011      	movs	r1, r2
 801ea78:	0018      	movs	r0, r3
 801ea7a:	f000 fa98 	bl	801efae <USBD_CtlError>
            err++;
 801ea7e:	210b      	movs	r1, #11
 801ea80:	187b      	adds	r3, r7, r1
 801ea82:	781a      	ldrb	r2, [r3, #0]
 801ea84:	187b      	adds	r3, r7, r1
 801ea86:	3201      	adds	r2, #1
 801ea88:	701a      	strb	r2, [r3, #0]
          break;
 801ea8a:	e02e      	b.n	801eaea <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801ea8c:	687a      	ldr	r2, [r7, #4]
 801ea8e:	23ac      	movs	r3, #172	@ 0xac
 801ea90:	009b      	lsls	r3, r3, #2
 801ea92:	58d3      	ldr	r3, [r2, r3]
 801ea94:	699b      	ldr	r3, [r3, #24]
 801ea96:	2b00      	cmp	r3, #0
 801ea98:	d00d      	beq.n	801eab6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801ea9a:	687a      	ldr	r2, [r7, #4]
 801ea9c:	23ac      	movs	r3, #172	@ 0xac
 801ea9e:	009b      	lsls	r3, r3, #2
 801eaa0:	58d3      	ldr	r3, [r2, r3]
 801eaa2:	699b      	ldr	r3, [r3, #24]
 801eaa4:	687a      	ldr	r2, [r7, #4]
 801eaa6:	7c12      	ldrb	r2, [r2, #16]
 801eaa8:	2108      	movs	r1, #8
 801eaaa:	1879      	adds	r1, r7, r1
 801eaac:	0010      	movs	r0, r2
 801eaae:	4798      	blx	r3
 801eab0:	0003      	movs	r3, r0
 801eab2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801eab4:	e019      	b.n	801eaea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801eab6:	683a      	ldr	r2, [r7, #0]
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	0011      	movs	r1, r2
 801eabc:	0018      	movs	r0, r3
 801eabe:	f000 fa76 	bl	801efae <USBD_CtlError>
            err++;
 801eac2:	210b      	movs	r1, #11
 801eac4:	187b      	adds	r3, r7, r1
 801eac6:	781a      	ldrb	r2, [r3, #0]
 801eac8:	187b      	adds	r3, r7, r1
 801eaca:	3201      	adds	r2, #1
 801eacc:	701a      	strb	r2, [r3, #0]
          break;
 801eace:	e00c      	b.n	801eaea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801ead0:	683a      	ldr	r2, [r7, #0]
 801ead2:	687b      	ldr	r3, [r7, #4]
 801ead4:	0011      	movs	r1, r2
 801ead6:	0018      	movs	r0, r3
 801ead8:	f000 fa69 	bl	801efae <USBD_CtlError>
          err++;
 801eadc:	210b      	movs	r1, #11
 801eade:	187b      	adds	r3, r7, r1
 801eae0:	781a      	ldrb	r2, [r3, #0]
 801eae2:	187b      	adds	r3, r7, r1
 801eae4:	3201      	adds	r2, #1
 801eae6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801eae8:	e04b      	b.n	801eb82 <USBD_GetDescriptor+0x2fa>
 801eaea:	e04a      	b.n	801eb82 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	7c1b      	ldrb	r3, [r3, #16]
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	d10b      	bne.n	801eb0c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801eaf4:	687a      	ldr	r2, [r7, #4]
 801eaf6:	23ad      	movs	r3, #173	@ 0xad
 801eaf8:	009b      	lsls	r3, r3, #2
 801eafa:	58d3      	ldr	r3, [r2, r3]
 801eafc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801eafe:	2208      	movs	r2, #8
 801eb00:	18ba      	adds	r2, r7, r2
 801eb02:	0010      	movs	r0, r2
 801eb04:	4798      	blx	r3
 801eb06:	0003      	movs	r3, r0
 801eb08:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801eb0a:	e03a      	b.n	801eb82 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801eb0c:	683a      	ldr	r2, [r7, #0]
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	0011      	movs	r1, r2
 801eb12:	0018      	movs	r0, r3
 801eb14:	f000 fa4b 	bl	801efae <USBD_CtlError>
        err++;
 801eb18:	210b      	movs	r1, #11
 801eb1a:	187b      	adds	r3, r7, r1
 801eb1c:	781a      	ldrb	r2, [r3, #0]
 801eb1e:	187b      	adds	r3, r7, r1
 801eb20:	3201      	adds	r2, #1
 801eb22:	701a      	strb	r2, [r3, #0]
      break;
 801eb24:	e02d      	b.n	801eb82 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801eb26:	687b      	ldr	r3, [r7, #4]
 801eb28:	7c1b      	ldrb	r3, [r3, #16]
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	d10f      	bne.n	801eb4e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801eb2e:	687a      	ldr	r2, [r7, #4]
 801eb30:	23ad      	movs	r3, #173	@ 0xad
 801eb32:	009b      	lsls	r3, r3, #2
 801eb34:	58d3      	ldr	r3, [r2, r3]
 801eb36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801eb38:	2208      	movs	r2, #8
 801eb3a:	18ba      	adds	r2, r7, r2
 801eb3c:	0010      	movs	r0, r2
 801eb3e:	4798      	blx	r3
 801eb40:	0003      	movs	r3, r0
 801eb42:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801eb44:	68fb      	ldr	r3, [r7, #12]
 801eb46:	3301      	adds	r3, #1
 801eb48:	2207      	movs	r2, #7
 801eb4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801eb4c:	e019      	b.n	801eb82 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801eb4e:	683a      	ldr	r2, [r7, #0]
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	0011      	movs	r1, r2
 801eb54:	0018      	movs	r0, r3
 801eb56:	f000 fa2a 	bl	801efae <USBD_CtlError>
        err++;
 801eb5a:	210b      	movs	r1, #11
 801eb5c:	187b      	adds	r3, r7, r1
 801eb5e:	781a      	ldrb	r2, [r3, #0]
 801eb60:	187b      	adds	r3, r7, r1
 801eb62:	3201      	adds	r2, #1
 801eb64:	701a      	strb	r2, [r3, #0]
      break;
 801eb66:	e00c      	b.n	801eb82 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801eb68:	683a      	ldr	r2, [r7, #0]
 801eb6a:	687b      	ldr	r3, [r7, #4]
 801eb6c:	0011      	movs	r1, r2
 801eb6e:	0018      	movs	r0, r3
 801eb70:	f000 fa1d 	bl	801efae <USBD_CtlError>
      err++;
 801eb74:	210b      	movs	r1, #11
 801eb76:	187b      	adds	r3, r7, r1
 801eb78:	781a      	ldrb	r2, [r3, #0]
 801eb7a:	187b      	adds	r3, r7, r1
 801eb7c:	3201      	adds	r2, #1
 801eb7e:	701a      	strb	r2, [r3, #0]
      break;
 801eb80:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801eb82:	230b      	movs	r3, #11
 801eb84:	18fb      	adds	r3, r7, r3
 801eb86:	781b      	ldrb	r3, [r3, #0]
 801eb88:	2b00      	cmp	r3, #0
 801eb8a:	d127      	bne.n	801ebdc <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801eb8c:	2108      	movs	r1, #8
 801eb8e:	187b      	adds	r3, r7, r1
 801eb90:	881b      	ldrh	r3, [r3, #0]
 801eb92:	2b00      	cmp	r3, #0
 801eb94:	d019      	beq.n	801ebca <USBD_GetDescriptor+0x342>
 801eb96:	683b      	ldr	r3, [r7, #0]
 801eb98:	88db      	ldrh	r3, [r3, #6]
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	d015      	beq.n	801ebca <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801eb9e:	683b      	ldr	r3, [r7, #0]
 801eba0:	88da      	ldrh	r2, [r3, #6]
 801eba2:	187b      	adds	r3, r7, r1
 801eba4:	881b      	ldrh	r3, [r3, #0]
 801eba6:	1c18      	adds	r0, r3, #0
 801eba8:	1c11      	adds	r1, r2, #0
 801ebaa:	b28a      	uxth	r2, r1
 801ebac:	b283      	uxth	r3, r0
 801ebae:	429a      	cmp	r2, r3
 801ebb0:	d900      	bls.n	801ebb4 <USBD_GetDescriptor+0x32c>
 801ebb2:	1c01      	adds	r1, r0, #0
 801ebb4:	b28a      	uxth	r2, r1
 801ebb6:	2108      	movs	r1, #8
 801ebb8:	187b      	adds	r3, r7, r1
 801ebba:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801ebbc:	187b      	adds	r3, r7, r1
 801ebbe:	881a      	ldrh	r2, [r3, #0]
 801ebc0:	68f9      	ldr	r1, [r7, #12]
 801ebc2:	687b      	ldr	r3, [r7, #4]
 801ebc4:	0018      	movs	r0, r3
 801ebc6:	f000 fa70 	bl	801f0aa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801ebca:	683b      	ldr	r3, [r7, #0]
 801ebcc:	88db      	ldrh	r3, [r3, #6]
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	d105      	bne.n	801ebde <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801ebd2:	687b      	ldr	r3, [r7, #4]
 801ebd4:	0018      	movs	r0, r3
 801ebd6:	f000 fad2 	bl	801f17e <USBD_CtlSendStatus>
 801ebda:	e000      	b.n	801ebde <USBD_GetDescriptor+0x356>
    return;
 801ebdc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801ebde:	46bd      	mov	sp, r7
 801ebe0:	b004      	add	sp, #16
 801ebe2:	bd80      	pop	{r7, pc}
 801ebe4:	08028b68 	.word	0x08028b68
 801ebe8:	08028b88 	.word	0x08028b88

0801ebec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ebec:	b590      	push	{r4, r7, lr}
 801ebee:	b085      	sub	sp, #20
 801ebf0:	af00      	add	r7, sp, #0
 801ebf2:	6078      	str	r0, [r7, #4]
 801ebf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801ebf6:	683b      	ldr	r3, [r7, #0]
 801ebf8:	889b      	ldrh	r3, [r3, #4]
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	d13d      	bne.n	801ec7a <USBD_SetAddress+0x8e>
 801ebfe:	683b      	ldr	r3, [r7, #0]
 801ec00:	88db      	ldrh	r3, [r3, #6]
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	d139      	bne.n	801ec7a <USBD_SetAddress+0x8e>
 801ec06:	683b      	ldr	r3, [r7, #0]
 801ec08:	885b      	ldrh	r3, [r3, #2]
 801ec0a:	2b7f      	cmp	r3, #127	@ 0x7f
 801ec0c:	d835      	bhi.n	801ec7a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801ec0e:	683b      	ldr	r3, [r7, #0]
 801ec10:	885b      	ldrh	r3, [r3, #2]
 801ec12:	b2da      	uxtb	r2, r3
 801ec14:	230f      	movs	r3, #15
 801ec16:	18fb      	adds	r3, r7, r3
 801ec18:	217f      	movs	r1, #127	@ 0x7f
 801ec1a:	400a      	ands	r2, r1
 801ec1c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ec1e:	687a      	ldr	r2, [r7, #4]
 801ec20:	23a7      	movs	r3, #167	@ 0xa7
 801ec22:	009b      	lsls	r3, r3, #2
 801ec24:	5cd3      	ldrb	r3, [r2, r3]
 801ec26:	2b03      	cmp	r3, #3
 801ec28:	d106      	bne.n	801ec38 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801ec2a:	683a      	ldr	r2, [r7, #0]
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	0011      	movs	r1, r2
 801ec30:	0018      	movs	r0, r3
 801ec32:	f000 f9bc 	bl	801efae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ec36:	e027      	b.n	801ec88 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	240f      	movs	r4, #15
 801ec3c:	193a      	adds	r2, r7, r4
 801ec3e:	4914      	ldr	r1, [pc, #80]	@ (801ec90 <USBD_SetAddress+0xa4>)
 801ec40:	7812      	ldrb	r2, [r2, #0]
 801ec42:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801ec44:	193b      	adds	r3, r7, r4
 801ec46:	781a      	ldrb	r2, [r3, #0]
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	0011      	movs	r1, r2
 801ec4c:	0018      	movs	r0, r3
 801ec4e:	f000 ff5d 	bl	801fb0c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801ec52:	687b      	ldr	r3, [r7, #4]
 801ec54:	0018      	movs	r0, r3
 801ec56:	f000 fa92 	bl	801f17e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801ec5a:	193b      	adds	r3, r7, r4
 801ec5c:	781b      	ldrb	r3, [r3, #0]
 801ec5e:	2b00      	cmp	r3, #0
 801ec60:	d005      	beq.n	801ec6e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ec62:	687a      	ldr	r2, [r7, #4]
 801ec64:	23a7      	movs	r3, #167	@ 0xa7
 801ec66:	009b      	lsls	r3, r3, #2
 801ec68:	2102      	movs	r1, #2
 801ec6a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ec6c:	e00c      	b.n	801ec88 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801ec6e:	687a      	ldr	r2, [r7, #4]
 801ec70:	23a7      	movs	r3, #167	@ 0xa7
 801ec72:	009b      	lsls	r3, r3, #2
 801ec74:	2101      	movs	r1, #1
 801ec76:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ec78:	e006      	b.n	801ec88 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801ec7a:	683a      	ldr	r2, [r7, #0]
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	0011      	movs	r1, r2
 801ec80:	0018      	movs	r0, r3
 801ec82:	f000 f994 	bl	801efae <USBD_CtlError>
  }
}
 801ec86:	46c0      	nop			@ (mov r8, r8)
 801ec88:	46c0      	nop			@ (mov r8, r8)
 801ec8a:	46bd      	mov	sp, r7
 801ec8c:	b005      	add	sp, #20
 801ec8e:	bd90      	pop	{r4, r7, pc}
 801ec90:	0000029e 	.word	0x0000029e

0801ec94 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ec94:	b580      	push	{r7, lr}
 801ec96:	b082      	sub	sp, #8
 801ec98:	af00      	add	r7, sp, #0
 801ec9a:	6078      	str	r0, [r7, #4]
 801ec9c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801ec9e:	683b      	ldr	r3, [r7, #0]
 801eca0:	885b      	ldrh	r3, [r3, #2]
 801eca2:	b2da      	uxtb	r2, r3
 801eca4:	4b4c      	ldr	r3, [pc, #304]	@ (801edd8 <USBD_SetConfig+0x144>)
 801eca6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801eca8:	4b4b      	ldr	r3, [pc, #300]	@ (801edd8 <USBD_SetConfig+0x144>)
 801ecaa:	781b      	ldrb	r3, [r3, #0]
 801ecac:	2b01      	cmp	r3, #1
 801ecae:	d906      	bls.n	801ecbe <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801ecb0:	683a      	ldr	r2, [r7, #0]
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	0011      	movs	r1, r2
 801ecb6:	0018      	movs	r0, r3
 801ecb8:	f000 f979 	bl	801efae <USBD_CtlError>
 801ecbc:	e088      	b.n	801edd0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801ecbe:	687a      	ldr	r2, [r7, #4]
 801ecc0:	23a7      	movs	r3, #167	@ 0xa7
 801ecc2:	009b      	lsls	r3, r3, #2
 801ecc4:	5cd3      	ldrb	r3, [r2, r3]
 801ecc6:	2b02      	cmp	r3, #2
 801ecc8:	d002      	beq.n	801ecd0 <USBD_SetConfig+0x3c>
 801ecca:	2b03      	cmp	r3, #3
 801eccc:	d029      	beq.n	801ed22 <USBD_SetConfig+0x8e>
 801ecce:	e071      	b.n	801edb4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801ecd0:	4b41      	ldr	r3, [pc, #260]	@ (801edd8 <USBD_SetConfig+0x144>)
 801ecd2:	781b      	ldrb	r3, [r3, #0]
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	d01f      	beq.n	801ed18 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801ecd8:	4b3f      	ldr	r3, [pc, #252]	@ (801edd8 <USBD_SetConfig+0x144>)
 801ecda:	781b      	ldrb	r3, [r3, #0]
 801ecdc:	001a      	movs	r2, r3
 801ecde:	687b      	ldr	r3, [r7, #4]
 801ece0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801ece2:	687a      	ldr	r2, [r7, #4]
 801ece4:	23a7      	movs	r3, #167	@ 0xa7
 801ece6:	009b      	lsls	r3, r3, #2
 801ece8:	2103      	movs	r1, #3
 801ecea:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801ecec:	4b3a      	ldr	r3, [pc, #232]	@ (801edd8 <USBD_SetConfig+0x144>)
 801ecee:	781a      	ldrb	r2, [r3, #0]
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	0011      	movs	r1, r2
 801ecf4:	0018      	movs	r0, r3
 801ecf6:	f7ff f8c6 	bl	801de86 <USBD_SetClassConfig>
 801ecfa:	0003      	movs	r3, r0
 801ecfc:	2b02      	cmp	r3, #2
 801ecfe:	d106      	bne.n	801ed0e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801ed00:	683a      	ldr	r2, [r7, #0]
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	0011      	movs	r1, r2
 801ed06:	0018      	movs	r0, r3
 801ed08:	f000 f951 	bl	801efae <USBD_CtlError>
            return;
 801ed0c:	e060      	b.n	801edd0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	0018      	movs	r0, r3
 801ed12:	f000 fa34 	bl	801f17e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801ed16:	e05b      	b.n	801edd0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801ed18:	687b      	ldr	r3, [r7, #4]
 801ed1a:	0018      	movs	r0, r3
 801ed1c:	f000 fa2f 	bl	801f17e <USBD_CtlSendStatus>
        break;
 801ed20:	e056      	b.n	801edd0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801ed22:	4b2d      	ldr	r3, [pc, #180]	@ (801edd8 <USBD_SetConfig+0x144>)
 801ed24:	781b      	ldrb	r3, [r3, #0]
 801ed26:	2b00      	cmp	r3, #0
 801ed28:	d115      	bne.n	801ed56 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801ed2a:	687a      	ldr	r2, [r7, #4]
 801ed2c:	23a7      	movs	r3, #167	@ 0xa7
 801ed2e:	009b      	lsls	r3, r3, #2
 801ed30:	2102      	movs	r1, #2
 801ed32:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801ed34:	4b28      	ldr	r3, [pc, #160]	@ (801edd8 <USBD_SetConfig+0x144>)
 801ed36:	781b      	ldrb	r3, [r3, #0]
 801ed38:	001a      	movs	r2, r3
 801ed3a:	687b      	ldr	r3, [r7, #4]
 801ed3c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801ed3e:	4b26      	ldr	r3, [pc, #152]	@ (801edd8 <USBD_SetConfig+0x144>)
 801ed40:	781a      	ldrb	r2, [r3, #0]
 801ed42:	687b      	ldr	r3, [r7, #4]
 801ed44:	0011      	movs	r1, r2
 801ed46:	0018      	movs	r0, r3
 801ed48:	f7ff f8c4 	bl	801ded4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801ed4c:	687b      	ldr	r3, [r7, #4]
 801ed4e:	0018      	movs	r0, r3
 801ed50:	f000 fa15 	bl	801f17e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801ed54:	e03c      	b.n	801edd0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801ed56:	4b20      	ldr	r3, [pc, #128]	@ (801edd8 <USBD_SetConfig+0x144>)
 801ed58:	781b      	ldrb	r3, [r3, #0]
 801ed5a:	001a      	movs	r2, r3
 801ed5c:	687b      	ldr	r3, [r7, #4]
 801ed5e:	685b      	ldr	r3, [r3, #4]
 801ed60:	429a      	cmp	r2, r3
 801ed62:	d022      	beq.n	801edaa <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ed64:	687b      	ldr	r3, [r7, #4]
 801ed66:	685b      	ldr	r3, [r3, #4]
 801ed68:	b2da      	uxtb	r2, r3
 801ed6a:	687b      	ldr	r3, [r7, #4]
 801ed6c:	0011      	movs	r1, r2
 801ed6e:	0018      	movs	r0, r3
 801ed70:	f7ff f8b0 	bl	801ded4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801ed74:	4b18      	ldr	r3, [pc, #96]	@ (801edd8 <USBD_SetConfig+0x144>)
 801ed76:	781b      	ldrb	r3, [r3, #0]
 801ed78:	001a      	movs	r2, r3
 801ed7a:	687b      	ldr	r3, [r7, #4]
 801ed7c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801ed7e:	4b16      	ldr	r3, [pc, #88]	@ (801edd8 <USBD_SetConfig+0x144>)
 801ed80:	781a      	ldrb	r2, [r3, #0]
 801ed82:	687b      	ldr	r3, [r7, #4]
 801ed84:	0011      	movs	r1, r2
 801ed86:	0018      	movs	r0, r3
 801ed88:	f7ff f87d 	bl	801de86 <USBD_SetClassConfig>
 801ed8c:	0003      	movs	r3, r0
 801ed8e:	2b02      	cmp	r3, #2
 801ed90:	d106      	bne.n	801eda0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801ed92:	683a      	ldr	r2, [r7, #0]
 801ed94:	687b      	ldr	r3, [r7, #4]
 801ed96:	0011      	movs	r1, r2
 801ed98:	0018      	movs	r0, r3
 801ed9a:	f000 f908 	bl	801efae <USBD_CtlError>
            return;
 801ed9e:	e017      	b.n	801edd0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	0018      	movs	r0, r3
 801eda4:	f000 f9eb 	bl	801f17e <USBD_CtlSendStatus>
        break;
 801eda8:	e012      	b.n	801edd0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	0018      	movs	r0, r3
 801edae:	f000 f9e6 	bl	801f17e <USBD_CtlSendStatus>
        break;
 801edb2:	e00d      	b.n	801edd0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801edb4:	683a      	ldr	r2, [r7, #0]
 801edb6:	687b      	ldr	r3, [r7, #4]
 801edb8:	0011      	movs	r1, r2
 801edba:	0018      	movs	r0, r3
 801edbc:	f000 f8f7 	bl	801efae <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801edc0:	4b05      	ldr	r3, [pc, #20]	@ (801edd8 <USBD_SetConfig+0x144>)
 801edc2:	781a      	ldrb	r2, [r3, #0]
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	0011      	movs	r1, r2
 801edc8:	0018      	movs	r0, r3
 801edca:	f7ff f883 	bl	801ded4 <USBD_ClrClassConfig>
        break;
 801edce:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801edd0:	46bd      	mov	sp, r7
 801edd2:	b002      	add	sp, #8
 801edd4:	bd80      	pop	{r7, pc}
 801edd6:	46c0      	nop			@ (mov r8, r8)
 801edd8:	20002198 	.word	0x20002198

0801eddc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801eddc:	b580      	push	{r7, lr}
 801edde:	b082      	sub	sp, #8
 801ede0:	af00      	add	r7, sp, #0
 801ede2:	6078      	str	r0, [r7, #4]
 801ede4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801ede6:	683b      	ldr	r3, [r7, #0]
 801ede8:	88db      	ldrh	r3, [r3, #6]
 801edea:	2b01      	cmp	r3, #1
 801edec:	d006      	beq.n	801edfc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801edee:	683a      	ldr	r2, [r7, #0]
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	0011      	movs	r1, r2
 801edf4:	0018      	movs	r0, r3
 801edf6:	f000 f8da 	bl	801efae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801edfa:	e026      	b.n	801ee4a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801edfc:	687a      	ldr	r2, [r7, #4]
 801edfe:	23a7      	movs	r3, #167	@ 0xa7
 801ee00:	009b      	lsls	r3, r3, #2
 801ee02:	5cd3      	ldrb	r3, [r2, r3]
 801ee04:	2b02      	cmp	r3, #2
 801ee06:	dc02      	bgt.n	801ee0e <USBD_GetConfig+0x32>
 801ee08:	2b00      	cmp	r3, #0
 801ee0a:	dc03      	bgt.n	801ee14 <USBD_GetConfig+0x38>
 801ee0c:	e016      	b.n	801ee3c <USBD_GetConfig+0x60>
 801ee0e:	2b03      	cmp	r3, #3
 801ee10:	d00c      	beq.n	801ee2c <USBD_GetConfig+0x50>
 801ee12:	e013      	b.n	801ee3c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	2200      	movs	r2, #0
 801ee18:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	3308      	adds	r3, #8
 801ee1e:	0019      	movs	r1, r3
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	2201      	movs	r2, #1
 801ee24:	0018      	movs	r0, r3
 801ee26:	f000 f940 	bl	801f0aa <USBD_CtlSendData>
        break;
 801ee2a:	e00e      	b.n	801ee4a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	1d19      	adds	r1, r3, #4
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	2201      	movs	r2, #1
 801ee34:	0018      	movs	r0, r3
 801ee36:	f000 f938 	bl	801f0aa <USBD_CtlSendData>
        break;
 801ee3a:	e006      	b.n	801ee4a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801ee3c:	683a      	ldr	r2, [r7, #0]
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	0011      	movs	r1, r2
 801ee42:	0018      	movs	r0, r3
 801ee44:	f000 f8b3 	bl	801efae <USBD_CtlError>
        break;
 801ee48:	46c0      	nop			@ (mov r8, r8)
}
 801ee4a:	46c0      	nop			@ (mov r8, r8)
 801ee4c:	46bd      	mov	sp, r7
 801ee4e:	b002      	add	sp, #8
 801ee50:	bd80      	pop	{r7, pc}

0801ee52 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ee52:	b580      	push	{r7, lr}
 801ee54:	b082      	sub	sp, #8
 801ee56:	af00      	add	r7, sp, #0
 801ee58:	6078      	str	r0, [r7, #4]
 801ee5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ee5c:	687a      	ldr	r2, [r7, #4]
 801ee5e:	23a7      	movs	r3, #167	@ 0xa7
 801ee60:	009b      	lsls	r3, r3, #2
 801ee62:	5cd3      	ldrb	r3, [r2, r3]
 801ee64:	3b01      	subs	r3, #1
 801ee66:	2b02      	cmp	r3, #2
 801ee68:	d822      	bhi.n	801eeb0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801ee6a:	683b      	ldr	r3, [r7, #0]
 801ee6c:	88db      	ldrh	r3, [r3, #6]
 801ee6e:	2b02      	cmp	r3, #2
 801ee70:	d006      	beq.n	801ee80 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801ee72:	683a      	ldr	r2, [r7, #0]
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	0011      	movs	r1, r2
 801ee78:	0018      	movs	r0, r3
 801ee7a:	f000 f898 	bl	801efae <USBD_CtlError>
        break;
 801ee7e:	e01e      	b.n	801eebe <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	2201      	movs	r2, #1
 801ee84:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801ee86:	687a      	ldr	r2, [r7, #4]
 801ee88:	23a9      	movs	r3, #169	@ 0xa9
 801ee8a:	009b      	lsls	r3, r3, #2
 801ee8c:	58d3      	ldr	r3, [r2, r3]
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d005      	beq.n	801ee9e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801ee92:	687b      	ldr	r3, [r7, #4]
 801ee94:	68db      	ldr	r3, [r3, #12]
 801ee96:	2202      	movs	r2, #2
 801ee98:	431a      	orrs	r2, r3
 801ee9a:	687b      	ldr	r3, [r7, #4]
 801ee9c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801ee9e:	687b      	ldr	r3, [r7, #4]
 801eea0:	330c      	adds	r3, #12
 801eea2:	0019      	movs	r1, r3
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	2202      	movs	r2, #2
 801eea8:	0018      	movs	r0, r3
 801eeaa:	f000 f8fe 	bl	801f0aa <USBD_CtlSendData>
      break;
 801eeae:	e006      	b.n	801eebe <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801eeb0:	683a      	ldr	r2, [r7, #0]
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	0011      	movs	r1, r2
 801eeb6:	0018      	movs	r0, r3
 801eeb8:	f000 f879 	bl	801efae <USBD_CtlError>
      break;
 801eebc:	46c0      	nop			@ (mov r8, r8)
  }
}
 801eebe:	46c0      	nop			@ (mov r8, r8)
 801eec0:	46bd      	mov	sp, r7
 801eec2:	b002      	add	sp, #8
 801eec4:	bd80      	pop	{r7, pc}

0801eec6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801eec6:	b580      	push	{r7, lr}
 801eec8:	b082      	sub	sp, #8
 801eeca:	af00      	add	r7, sp, #0
 801eecc:	6078      	str	r0, [r7, #4]
 801eece:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801eed0:	683b      	ldr	r3, [r7, #0]
 801eed2:	885b      	ldrh	r3, [r3, #2]
 801eed4:	2b01      	cmp	r3, #1
 801eed6:	d108      	bne.n	801eeea <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801eed8:	687a      	ldr	r2, [r7, #4]
 801eeda:	23a9      	movs	r3, #169	@ 0xa9
 801eedc:	009b      	lsls	r3, r3, #2
 801eede:	2101      	movs	r1, #1
 801eee0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	0018      	movs	r0, r3
 801eee6:	f000 f94a 	bl	801f17e <USBD_CtlSendStatus>
  }
}
 801eeea:	46c0      	nop			@ (mov r8, r8)
 801eeec:	46bd      	mov	sp, r7
 801eeee:	b002      	add	sp, #8
 801eef0:	bd80      	pop	{r7, pc}

0801eef2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801eef2:	b580      	push	{r7, lr}
 801eef4:	b082      	sub	sp, #8
 801eef6:	af00      	add	r7, sp, #0
 801eef8:	6078      	str	r0, [r7, #4]
 801eefa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801eefc:	687a      	ldr	r2, [r7, #4]
 801eefe:	23a7      	movs	r3, #167	@ 0xa7
 801ef00:	009b      	lsls	r3, r3, #2
 801ef02:	5cd3      	ldrb	r3, [r2, r3]
 801ef04:	3b01      	subs	r3, #1
 801ef06:	2b02      	cmp	r3, #2
 801ef08:	d80d      	bhi.n	801ef26 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ef0a:	683b      	ldr	r3, [r7, #0]
 801ef0c:	885b      	ldrh	r3, [r3, #2]
 801ef0e:	2b01      	cmp	r3, #1
 801ef10:	d110      	bne.n	801ef34 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801ef12:	687a      	ldr	r2, [r7, #4]
 801ef14:	23a9      	movs	r3, #169	@ 0xa9
 801ef16:	009b      	lsls	r3, r3, #2
 801ef18:	2100      	movs	r1, #0
 801ef1a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	0018      	movs	r0, r3
 801ef20:	f000 f92d 	bl	801f17e <USBD_CtlSendStatus>
      }
      break;
 801ef24:	e006      	b.n	801ef34 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801ef26:	683a      	ldr	r2, [r7, #0]
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	0011      	movs	r1, r2
 801ef2c:	0018      	movs	r0, r3
 801ef2e:	f000 f83e 	bl	801efae <USBD_CtlError>
      break;
 801ef32:	e000      	b.n	801ef36 <USBD_ClrFeature+0x44>
      break;
 801ef34:	46c0      	nop			@ (mov r8, r8)
  }
}
 801ef36:	46c0      	nop			@ (mov r8, r8)
 801ef38:	46bd      	mov	sp, r7
 801ef3a:	b002      	add	sp, #8
 801ef3c:	bd80      	pop	{r7, pc}

0801ef3e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801ef3e:	b580      	push	{r7, lr}
 801ef40:	b082      	sub	sp, #8
 801ef42:	af00      	add	r7, sp, #0
 801ef44:	6078      	str	r0, [r7, #4]
 801ef46:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801ef48:	683b      	ldr	r3, [r7, #0]
 801ef4a:	781a      	ldrb	r2, [r3, #0]
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801ef50:	683b      	ldr	r3, [r7, #0]
 801ef52:	785a      	ldrb	r2, [r3, #1]
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801ef58:	683b      	ldr	r3, [r7, #0]
 801ef5a:	3302      	adds	r3, #2
 801ef5c:	781b      	ldrb	r3, [r3, #0]
 801ef5e:	001a      	movs	r2, r3
 801ef60:	683b      	ldr	r3, [r7, #0]
 801ef62:	3303      	adds	r3, #3
 801ef64:	781b      	ldrb	r3, [r3, #0]
 801ef66:	021b      	lsls	r3, r3, #8
 801ef68:	b29b      	uxth	r3, r3
 801ef6a:	18d3      	adds	r3, r2, r3
 801ef6c:	b29a      	uxth	r2, r3
 801ef6e:	687b      	ldr	r3, [r7, #4]
 801ef70:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801ef72:	683b      	ldr	r3, [r7, #0]
 801ef74:	3304      	adds	r3, #4
 801ef76:	781b      	ldrb	r3, [r3, #0]
 801ef78:	001a      	movs	r2, r3
 801ef7a:	683b      	ldr	r3, [r7, #0]
 801ef7c:	3305      	adds	r3, #5
 801ef7e:	781b      	ldrb	r3, [r3, #0]
 801ef80:	021b      	lsls	r3, r3, #8
 801ef82:	b29b      	uxth	r3, r3
 801ef84:	18d3      	adds	r3, r2, r3
 801ef86:	b29a      	uxth	r2, r3
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801ef8c:	683b      	ldr	r3, [r7, #0]
 801ef8e:	3306      	adds	r3, #6
 801ef90:	781b      	ldrb	r3, [r3, #0]
 801ef92:	001a      	movs	r2, r3
 801ef94:	683b      	ldr	r3, [r7, #0]
 801ef96:	3307      	adds	r3, #7
 801ef98:	781b      	ldrb	r3, [r3, #0]
 801ef9a:	021b      	lsls	r3, r3, #8
 801ef9c:	b29b      	uxth	r3, r3
 801ef9e:	18d3      	adds	r3, r2, r3
 801efa0:	b29a      	uxth	r2, r3
 801efa2:	687b      	ldr	r3, [r7, #4]
 801efa4:	80da      	strh	r2, [r3, #6]

}
 801efa6:	46c0      	nop			@ (mov r8, r8)
 801efa8:	46bd      	mov	sp, r7
 801efaa:	b002      	add	sp, #8
 801efac:	bd80      	pop	{r7, pc}

0801efae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801efae:	b580      	push	{r7, lr}
 801efb0:	b082      	sub	sp, #8
 801efb2:	af00      	add	r7, sp, #0
 801efb4:	6078      	str	r0, [r7, #4]
 801efb6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	2180      	movs	r1, #128	@ 0x80
 801efbc:	0018      	movs	r0, r3
 801efbe:	f000 fd1e 	bl	801f9fe <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801efc2:	687b      	ldr	r3, [r7, #4]
 801efc4:	2100      	movs	r1, #0
 801efc6:	0018      	movs	r0, r3
 801efc8:	f000 fd19 	bl	801f9fe <USBD_LL_StallEP>
}
 801efcc:	46c0      	nop			@ (mov r8, r8)
 801efce:	46bd      	mov	sp, r7
 801efd0:	b002      	add	sp, #8
 801efd2:	bd80      	pop	{r7, pc}

0801efd4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801efd4:	b590      	push	{r4, r7, lr}
 801efd6:	b087      	sub	sp, #28
 801efd8:	af00      	add	r7, sp, #0
 801efda:	60f8      	str	r0, [r7, #12]
 801efdc:	60b9      	str	r1, [r7, #8]
 801efde:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801efe0:	2417      	movs	r4, #23
 801efe2:	193b      	adds	r3, r7, r4
 801efe4:	2200      	movs	r2, #0
 801efe6:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801efe8:	68fb      	ldr	r3, [r7, #12]
 801efea:	2b00      	cmp	r3, #0
 801efec:	d03c      	beq.n	801f068 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801efee:	68fb      	ldr	r3, [r7, #12]
 801eff0:	0018      	movs	r0, r3
 801eff2:	f000 f83d 	bl	801f070 <USBD_GetLen>
 801eff6:	0003      	movs	r3, r0
 801eff8:	3301      	adds	r3, #1
 801effa:	b29b      	uxth	r3, r3
 801effc:	18db      	adds	r3, r3, r3
 801effe:	b29a      	uxth	r2, r3
 801f000:	687b      	ldr	r3, [r7, #4]
 801f002:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801f004:	193b      	adds	r3, r7, r4
 801f006:	781b      	ldrb	r3, [r3, #0]
 801f008:	193a      	adds	r2, r7, r4
 801f00a:	1c59      	adds	r1, r3, #1
 801f00c:	7011      	strb	r1, [r2, #0]
 801f00e:	001a      	movs	r2, r3
 801f010:	68bb      	ldr	r3, [r7, #8]
 801f012:	189b      	adds	r3, r3, r2
 801f014:	687a      	ldr	r2, [r7, #4]
 801f016:	7812      	ldrb	r2, [r2, #0]
 801f018:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801f01a:	193b      	adds	r3, r7, r4
 801f01c:	781b      	ldrb	r3, [r3, #0]
 801f01e:	193a      	adds	r2, r7, r4
 801f020:	1c59      	adds	r1, r3, #1
 801f022:	7011      	strb	r1, [r2, #0]
 801f024:	001a      	movs	r2, r3
 801f026:	68bb      	ldr	r3, [r7, #8]
 801f028:	189b      	adds	r3, r3, r2
 801f02a:	2203      	movs	r2, #3
 801f02c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801f02e:	e017      	b.n	801f060 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801f030:	68fb      	ldr	r3, [r7, #12]
 801f032:	1c5a      	adds	r2, r3, #1
 801f034:	60fa      	str	r2, [r7, #12]
 801f036:	2417      	movs	r4, #23
 801f038:	193a      	adds	r2, r7, r4
 801f03a:	7812      	ldrb	r2, [r2, #0]
 801f03c:	1939      	adds	r1, r7, r4
 801f03e:	1c50      	adds	r0, r2, #1
 801f040:	7008      	strb	r0, [r1, #0]
 801f042:	0011      	movs	r1, r2
 801f044:	68ba      	ldr	r2, [r7, #8]
 801f046:	1852      	adds	r2, r2, r1
 801f048:	781b      	ldrb	r3, [r3, #0]
 801f04a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801f04c:	193b      	adds	r3, r7, r4
 801f04e:	781b      	ldrb	r3, [r3, #0]
 801f050:	193a      	adds	r2, r7, r4
 801f052:	1c59      	adds	r1, r3, #1
 801f054:	7011      	strb	r1, [r2, #0]
 801f056:	001a      	movs	r2, r3
 801f058:	68bb      	ldr	r3, [r7, #8]
 801f05a:	189b      	adds	r3, r3, r2
 801f05c:	2200      	movs	r2, #0
 801f05e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801f060:	68fb      	ldr	r3, [r7, #12]
 801f062:	781b      	ldrb	r3, [r3, #0]
 801f064:	2b00      	cmp	r3, #0
 801f066:	d1e3      	bne.n	801f030 <USBD_GetString+0x5c>
    }
  }
}
 801f068:	46c0      	nop			@ (mov r8, r8)
 801f06a:	46bd      	mov	sp, r7
 801f06c:	b007      	add	sp, #28
 801f06e:	bd90      	pop	{r4, r7, pc}

0801f070 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801f070:	b580      	push	{r7, lr}
 801f072:	b084      	sub	sp, #16
 801f074:	af00      	add	r7, sp, #0
 801f076:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801f078:	230f      	movs	r3, #15
 801f07a:	18fb      	adds	r3, r7, r3
 801f07c:	2200      	movs	r2, #0
 801f07e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801f080:	e008      	b.n	801f094 <USBD_GetLen+0x24>
  {
    len++;
 801f082:	210f      	movs	r1, #15
 801f084:	187b      	adds	r3, r7, r1
 801f086:	781a      	ldrb	r2, [r3, #0]
 801f088:	187b      	adds	r3, r7, r1
 801f08a:	3201      	adds	r2, #1
 801f08c:	701a      	strb	r2, [r3, #0]
    buf++;
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	3301      	adds	r3, #1
 801f092:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	781b      	ldrb	r3, [r3, #0]
 801f098:	2b00      	cmp	r3, #0
 801f09a:	d1f2      	bne.n	801f082 <USBD_GetLen+0x12>
  }

  return len;
 801f09c:	230f      	movs	r3, #15
 801f09e:	18fb      	adds	r3, r7, r3
 801f0a0:	781b      	ldrb	r3, [r3, #0]
}
 801f0a2:	0018      	movs	r0, r3
 801f0a4:	46bd      	mov	sp, r7
 801f0a6:	b004      	add	sp, #16
 801f0a8:	bd80      	pop	{r7, pc}

0801f0aa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801f0aa:	b580      	push	{r7, lr}
 801f0ac:	b084      	sub	sp, #16
 801f0ae:	af00      	add	r7, sp, #0
 801f0b0:	60f8      	str	r0, [r7, #12]
 801f0b2:	60b9      	str	r1, [r7, #8]
 801f0b4:	1dbb      	adds	r3, r7, #6
 801f0b6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801f0b8:	68fa      	ldr	r2, [r7, #12]
 801f0ba:	23a5      	movs	r3, #165	@ 0xa5
 801f0bc:	009b      	lsls	r3, r3, #2
 801f0be:	2102      	movs	r1, #2
 801f0c0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801f0c2:	1dbb      	adds	r3, r7, #6
 801f0c4:	881a      	ldrh	r2, [r3, #0]
 801f0c6:	68fb      	ldr	r3, [r7, #12]
 801f0c8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801f0ca:	1dbb      	adds	r3, r7, #6
 801f0cc:	881a      	ldrh	r2, [r3, #0]
 801f0ce:	68fb      	ldr	r3, [r7, #12]
 801f0d0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801f0d2:	1dbb      	adds	r3, r7, #6
 801f0d4:	881b      	ldrh	r3, [r3, #0]
 801f0d6:	68ba      	ldr	r2, [r7, #8]
 801f0d8:	68f8      	ldr	r0, [r7, #12]
 801f0da:	2100      	movs	r1, #0
 801f0dc:	f000 fd41 	bl	801fb62 <USBD_LL_Transmit>

  return USBD_OK;
 801f0e0:	2300      	movs	r3, #0
}
 801f0e2:	0018      	movs	r0, r3
 801f0e4:	46bd      	mov	sp, r7
 801f0e6:	b004      	add	sp, #16
 801f0e8:	bd80      	pop	{r7, pc}

0801f0ea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801f0ea:	b580      	push	{r7, lr}
 801f0ec:	b084      	sub	sp, #16
 801f0ee:	af00      	add	r7, sp, #0
 801f0f0:	60f8      	str	r0, [r7, #12]
 801f0f2:	60b9      	str	r1, [r7, #8]
 801f0f4:	1dbb      	adds	r3, r7, #6
 801f0f6:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801f0f8:	1dbb      	adds	r3, r7, #6
 801f0fa:	881b      	ldrh	r3, [r3, #0]
 801f0fc:	68ba      	ldr	r2, [r7, #8]
 801f0fe:	68f8      	ldr	r0, [r7, #12]
 801f100:	2100      	movs	r1, #0
 801f102:	f000 fd2e 	bl	801fb62 <USBD_LL_Transmit>

  return USBD_OK;
 801f106:	2300      	movs	r3, #0
}
 801f108:	0018      	movs	r0, r3
 801f10a:	46bd      	mov	sp, r7
 801f10c:	b004      	add	sp, #16
 801f10e:	bd80      	pop	{r7, pc}

0801f110 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801f110:	b580      	push	{r7, lr}
 801f112:	b084      	sub	sp, #16
 801f114:	af00      	add	r7, sp, #0
 801f116:	60f8      	str	r0, [r7, #12]
 801f118:	60b9      	str	r1, [r7, #8]
 801f11a:	1dbb      	adds	r3, r7, #6
 801f11c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801f11e:	68fa      	ldr	r2, [r7, #12]
 801f120:	23a5      	movs	r3, #165	@ 0xa5
 801f122:	009b      	lsls	r3, r3, #2
 801f124:	2103      	movs	r1, #3
 801f126:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801f128:	1dbb      	adds	r3, r7, #6
 801f12a:	8819      	ldrh	r1, [r3, #0]
 801f12c:	68fa      	ldr	r2, [r7, #12]
 801f12e:	23ae      	movs	r3, #174	@ 0xae
 801f130:	005b      	lsls	r3, r3, #1
 801f132:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801f134:	1dbb      	adds	r3, r7, #6
 801f136:	8819      	ldrh	r1, [r3, #0]
 801f138:	68fa      	ldr	r2, [r7, #12]
 801f13a:	23b0      	movs	r3, #176	@ 0xb0
 801f13c:	005b      	lsls	r3, r3, #1
 801f13e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801f140:	1dbb      	adds	r3, r7, #6
 801f142:	881b      	ldrh	r3, [r3, #0]
 801f144:	68ba      	ldr	r2, [r7, #8]
 801f146:	68f8      	ldr	r0, [r7, #12]
 801f148:	2100      	movs	r1, #0
 801f14a:	f000 fd41 	bl	801fbd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f14e:	2300      	movs	r3, #0
}
 801f150:	0018      	movs	r0, r3
 801f152:	46bd      	mov	sp, r7
 801f154:	b004      	add	sp, #16
 801f156:	bd80      	pop	{r7, pc}

0801f158 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801f158:	b580      	push	{r7, lr}
 801f15a:	b084      	sub	sp, #16
 801f15c:	af00      	add	r7, sp, #0
 801f15e:	60f8      	str	r0, [r7, #12]
 801f160:	60b9      	str	r1, [r7, #8]
 801f162:	1dbb      	adds	r3, r7, #6
 801f164:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801f166:	1dbb      	adds	r3, r7, #6
 801f168:	881b      	ldrh	r3, [r3, #0]
 801f16a:	68ba      	ldr	r2, [r7, #8]
 801f16c:	68f8      	ldr	r0, [r7, #12]
 801f16e:	2100      	movs	r1, #0
 801f170:	f000 fd2e 	bl	801fbd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f174:	2300      	movs	r3, #0
}
 801f176:	0018      	movs	r0, r3
 801f178:	46bd      	mov	sp, r7
 801f17a:	b004      	add	sp, #16
 801f17c:	bd80      	pop	{r7, pc}

0801f17e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801f17e:	b580      	push	{r7, lr}
 801f180:	b082      	sub	sp, #8
 801f182:	af00      	add	r7, sp, #0
 801f184:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801f186:	687a      	ldr	r2, [r7, #4]
 801f188:	23a5      	movs	r3, #165	@ 0xa5
 801f18a:	009b      	lsls	r3, r3, #2
 801f18c:	2104      	movs	r1, #4
 801f18e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801f190:	6878      	ldr	r0, [r7, #4]
 801f192:	2300      	movs	r3, #0
 801f194:	2200      	movs	r2, #0
 801f196:	2100      	movs	r1, #0
 801f198:	f000 fce3 	bl	801fb62 <USBD_LL_Transmit>

  return USBD_OK;
 801f19c:	2300      	movs	r3, #0
}
 801f19e:	0018      	movs	r0, r3
 801f1a0:	46bd      	mov	sp, r7
 801f1a2:	b002      	add	sp, #8
 801f1a4:	bd80      	pop	{r7, pc}

0801f1a6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801f1a6:	b580      	push	{r7, lr}
 801f1a8:	b082      	sub	sp, #8
 801f1aa:	af00      	add	r7, sp, #0
 801f1ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801f1ae:	687a      	ldr	r2, [r7, #4]
 801f1b0:	23a5      	movs	r3, #165	@ 0xa5
 801f1b2:	009b      	lsls	r3, r3, #2
 801f1b4:	2105      	movs	r1, #5
 801f1b6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801f1b8:	6878      	ldr	r0, [r7, #4]
 801f1ba:	2300      	movs	r3, #0
 801f1bc:	2200      	movs	r2, #0
 801f1be:	2100      	movs	r1, #0
 801f1c0:	f000 fd06 	bl	801fbd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f1c4:	2300      	movs	r3, #0
}
 801f1c6:	0018      	movs	r0, r3
 801f1c8:	46bd      	mov	sp, r7
 801f1ca:	b002      	add	sp, #8
 801f1cc:	bd80      	pop	{r7, pc}
	...

0801f1d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801f1d0:	b580      	push	{r7, lr}
 801f1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801f1d4:	4914      	ldr	r1, [pc, #80]	@ (801f228 <MX_USB_DEVICE_Init+0x58>)
 801f1d6:	4b15      	ldr	r3, [pc, #84]	@ (801f22c <MX_USB_DEVICE_Init+0x5c>)
 801f1d8:	2200      	movs	r2, #0
 801f1da:	0018      	movs	r0, r3
 801f1dc:	f7fe fdec 	bl	801ddb8 <USBD_Init>
 801f1e0:	1e03      	subs	r3, r0, #0
 801f1e2:	d001      	beq.n	801f1e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801f1e4:	f7ea ff4e 	bl	800a084 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801f1e8:	4a11      	ldr	r2, [pc, #68]	@ (801f230 <MX_USB_DEVICE_Init+0x60>)
 801f1ea:	4b10      	ldr	r3, [pc, #64]	@ (801f22c <MX_USB_DEVICE_Init+0x5c>)
 801f1ec:	0011      	movs	r1, r2
 801f1ee:	0018      	movs	r0, r3
 801f1f0:	f7fe fe13 	bl	801de1a <USBD_RegisterClass>
 801f1f4:	1e03      	subs	r3, r0, #0
 801f1f6:	d001      	beq.n	801f1fc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801f1f8:	f7ea ff44 	bl	800a084 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801f1fc:	4a0d      	ldr	r2, [pc, #52]	@ (801f234 <MX_USB_DEVICE_Init+0x64>)
 801f1fe:	4b0b      	ldr	r3, [pc, #44]	@ (801f22c <MX_USB_DEVICE_Init+0x5c>)
 801f200:	0011      	movs	r1, r2
 801f202:	0018      	movs	r0, r3
 801f204:	f7fe fd28 	bl	801dc58 <USBD_CDC_RegisterInterface>
 801f208:	1e03      	subs	r3, r0, #0
 801f20a:	d001      	beq.n	801f210 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801f20c:	f7ea ff3a 	bl	800a084 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801f210:	4b06      	ldr	r3, [pc, #24]	@ (801f22c <MX_USB_DEVICE_Init+0x5c>)
 801f212:	0018      	movs	r0, r3
 801f214:	f7fe fe21 	bl	801de5a <USBD_Start>
 801f218:	1e03      	subs	r3, r0, #0
 801f21a:	d001      	beq.n	801f220 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801f21c:	f7ea ff32 	bl	800a084 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801f220:	46c0      	nop			@ (mov r8, r8)
 801f222:	46bd      	mov	sp, r7
 801f224:	bd80      	pop	{r7, pc}
 801f226:	46c0      	nop			@ (mov r8, r8)
 801f228:	20000214 	.word	0x20000214
 801f22c:	2000219c 	.word	0x2000219c
 801f230:	20000100 	.word	0x20000100
 801f234:	20000204 	.word	0x20000204

0801f238 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801f238:	b580      	push	{r7, lr}
 801f23a:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801f23c:	4907      	ldr	r1, [pc, #28]	@ (801f25c <CDC_Init_FS+0x24>)
 801f23e:	4b08      	ldr	r3, [pc, #32]	@ (801f260 <CDC_Init_FS+0x28>)
 801f240:	2200      	movs	r2, #0
 801f242:	0018      	movs	r0, r3
 801f244:	f7fe fd23 	bl	801dc8e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801f248:	4a06      	ldr	r2, [pc, #24]	@ (801f264 <CDC_Init_FS+0x2c>)
 801f24a:	4b05      	ldr	r3, [pc, #20]	@ (801f260 <CDC_Init_FS+0x28>)
 801f24c:	0011      	movs	r1, r2
 801f24e:	0018      	movs	r0, r3
 801f250:	f7fe fd39 	bl	801dcc6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801f254:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801f256:	0018      	movs	r0, r3
 801f258:	46bd      	mov	sp, r7
 801f25a:	bd80      	pop	{r7, pc}
 801f25c:	20002920 	.word	0x20002920
 801f260:	2000219c 	.word	0x2000219c
 801f264:	20002520 	.word	0x20002520

0801f268 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801f268:	b580      	push	{r7, lr}
 801f26a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801f26c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801f26e:	0018      	movs	r0, r3
 801f270:	46bd      	mov	sp, r7
 801f272:	bd80      	pop	{r7, pc}

0801f274 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801f274:	b580      	push	{r7, lr}
 801f276:	b082      	sub	sp, #8
 801f278:	af00      	add	r7, sp, #0
 801f27a:	6039      	str	r1, [r7, #0]
 801f27c:	0011      	movs	r1, r2
 801f27e:	1dfb      	adds	r3, r7, #7
 801f280:	1c02      	adds	r2, r0, #0
 801f282:	701a      	strb	r2, [r3, #0]
 801f284:	1d3b      	adds	r3, r7, #4
 801f286:	1c0a      	adds	r2, r1, #0
 801f288:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801f28a:	1dfb      	adds	r3, r7, #7
 801f28c:	781b      	ldrb	r3, [r3, #0]
 801f28e:	2b23      	cmp	r3, #35	@ 0x23
 801f290:	d804      	bhi.n	801f29c <CDC_Control_FS+0x28>
 801f292:	009a      	lsls	r2, r3, #2
 801f294:	4b04      	ldr	r3, [pc, #16]	@ (801f2a8 <CDC_Control_FS+0x34>)
 801f296:	18d3      	adds	r3, r2, r3
 801f298:	681b      	ldr	r3, [r3, #0]
 801f29a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801f29c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801f29e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801f2a0:	0018      	movs	r0, r3
 801f2a2:	46bd      	mov	sp, r7
 801f2a4:	b002      	add	sp, #8
 801f2a6:	bd80      	pop	{r7, pc}
 801f2a8:	08028ba0 	.word	0x08028ba0

0801f2ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801f2ac:	b580      	push	{r7, lr}
 801f2ae:	b082      	sub	sp, #8
 801f2b0:	af00      	add	r7, sp, #0
 801f2b2:	6078      	str	r0, [r7, #4]
 801f2b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801f2b6:	4b12      	ldr	r3, [pc, #72]	@ (801f300 <CDC_Receive_FS+0x54>)
 801f2b8:	781b      	ldrb	r3, [r3, #0]
 801f2ba:	2b00      	cmp	r3, #0
 801f2bc:	d013      	beq.n	801f2e6 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801f2be:	683b      	ldr	r3, [r7, #0]
 801f2c0:	681b      	ldr	r3, [r3, #0]
 801f2c2:	b29a      	uxth	r2, r3
 801f2c4:	2301      	movs	r3, #1
 801f2c6:	425b      	negs	r3, r3
 801f2c8:	6879      	ldr	r1, [r7, #4]
 801f2ca:	480e      	ldr	r0, [pc, #56]	@ (801f304 <CDC_Receive_FS+0x58>)
 801f2cc:	f7fa fa46 	bl	801975c <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801f2d0:	687a      	ldr	r2, [r7, #4]
 801f2d2:	4b0d      	ldr	r3, [pc, #52]	@ (801f308 <CDC_Receive_FS+0x5c>)
 801f2d4:	0011      	movs	r1, r2
 801f2d6:	0018      	movs	r0, r3
 801f2d8:	f7fe fcf5 	bl	801dcc6 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f2dc:	4b0a      	ldr	r3, [pc, #40]	@ (801f308 <CDC_Receive_FS+0x5c>)
 801f2de:	0018      	movs	r0, r3
 801f2e0:	f7fe fd3c 	bl	801dd5c <USBD_CDC_ReceivePacket>
 801f2e4:	e006      	b.n	801f2f4 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801f2e6:	683b      	ldr	r3, [r7, #0]
 801f2e8:	681a      	ldr	r2, [r3, #0]
 801f2ea:	4b08      	ldr	r3, [pc, #32]	@ (801f30c <CDC_Receive_FS+0x60>)
 801f2ec:	681b      	ldr	r3, [r3, #0]
 801f2ee:	18d2      	adds	r2, r2, r3
 801f2f0:	4b06      	ldr	r3, [pc, #24]	@ (801f30c <CDC_Receive_FS+0x60>)
 801f2f2:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801f2f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801f2f6:	0018      	movs	r0, r3
 801f2f8:	46bd      	mov	sp, r7
 801f2fa:	b002      	add	sp, #8
 801f2fc:	bd80      	pop	{r7, pc}
 801f2fe:	46c0      	nop			@ (mov r8, r8)
 801f300:	20002460 	.word	0x20002460
 801f304:	20002464 	.word	0x20002464
 801f308:	2000219c 	.word	0x2000219c
 801f30c:	2000251c 	.word	0x2000251c

0801f310 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801f310:	b5b0      	push	{r4, r5, r7, lr}
 801f312:	b084      	sub	sp, #16
 801f314:	af00      	add	r7, sp, #0
 801f316:	6078      	str	r0, [r7, #4]
 801f318:	000a      	movs	r2, r1
 801f31a:	1cbb      	adds	r3, r7, #2
 801f31c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801f31e:	230f      	movs	r3, #15
 801f320:	18fb      	adds	r3, r7, r3
 801f322:	2200      	movs	r2, #0
 801f324:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801f326:	4a11      	ldr	r2, [pc, #68]	@ (801f36c <CDC_Transmit_FS+0x5c>)
 801f328:	23ae      	movs	r3, #174	@ 0xae
 801f32a:	009b      	lsls	r3, r3, #2
 801f32c:	58d3      	ldr	r3, [r2, r3]
 801f32e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801f330:	68ba      	ldr	r2, [r7, #8]
 801f332:	2385      	movs	r3, #133	@ 0x85
 801f334:	009b      	lsls	r3, r3, #2
 801f336:	58d3      	ldr	r3, [r2, r3]
 801f338:	2b00      	cmp	r3, #0
 801f33a:	d001      	beq.n	801f340 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801f33c:	2301      	movs	r3, #1
 801f33e:	e010      	b.n	801f362 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801f340:	1cbb      	adds	r3, r7, #2
 801f342:	881a      	ldrh	r2, [r3, #0]
 801f344:	6879      	ldr	r1, [r7, #4]
 801f346:	4b09      	ldr	r3, [pc, #36]	@ (801f36c <CDC_Transmit_FS+0x5c>)
 801f348:	0018      	movs	r0, r3
 801f34a:	f7fe fca0 	bl	801dc8e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801f34e:	250f      	movs	r5, #15
 801f350:	197c      	adds	r4, r7, r5
 801f352:	4b06      	ldr	r3, [pc, #24]	@ (801f36c <CDC_Transmit_FS+0x5c>)
 801f354:	0018      	movs	r0, r3
 801f356:	f7fe fcca 	bl	801dcee <USBD_CDC_TransmitPacket>
 801f35a:	0003      	movs	r3, r0
 801f35c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801f35e:	197b      	adds	r3, r7, r5
 801f360:	781b      	ldrb	r3, [r3, #0]
}
 801f362:	0018      	movs	r0, r3
 801f364:	46bd      	mov	sp, r7
 801f366:	b004      	add	sp, #16
 801f368:	bdb0      	pop	{r4, r5, r7, pc}
 801f36a:	46c0      	nop			@ (mov r8, r8)
 801f36c:	2000219c 	.word	0x2000219c

0801f370 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801f370:	b580      	push	{r7, lr}
 801f372:	af00      	add	r7, sp, #0
  ESPProg = true;
 801f374:	4b02      	ldr	r3, [pc, #8]	@ (801f380 <EnableESPProg+0x10>)
 801f376:	2201      	movs	r2, #1
 801f378:	701a      	strb	r2, [r3, #0]
}
 801f37a:	46c0      	nop			@ (mov r8, r8)
 801f37c:	46bd      	mov	sp, r7
 801f37e:	bd80      	pop	{r7, pc}
 801f380:	20002460 	.word	0x20002460

0801f384 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801f384:	b580      	push	{r7, lr}
 801f386:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801f388:	4b01      	ldr	r3, [pc, #4]	@ (801f390 <GetUsbRxPointer+0xc>)
}
 801f38a:	0018      	movs	r0, r3
 801f38c:	46bd      	mov	sp, r7
 801f38e:	bd80      	pop	{r7, pc}
 801f390:	20002520 	.word	0x20002520

0801f394 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801f394:	b580      	push	{r7, lr}
 801f396:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801f398:	4b07      	ldr	r3, [pc, #28]	@ (801f3b8 <ResetUsbRxDataSize+0x24>)
 801f39a:	2200      	movs	r2, #0
 801f39c:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801f39e:	4a07      	ldr	r2, [pc, #28]	@ (801f3bc <ResetUsbRxDataSize+0x28>)
 801f3a0:	4b07      	ldr	r3, [pc, #28]	@ (801f3c0 <ResetUsbRxDataSize+0x2c>)
 801f3a2:	0011      	movs	r1, r2
 801f3a4:	0018      	movs	r0, r3
 801f3a6:	f7fe fc8e 	bl	801dcc6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f3aa:	4b05      	ldr	r3, [pc, #20]	@ (801f3c0 <ResetUsbRxDataSize+0x2c>)
 801f3ac:	0018      	movs	r0, r3
 801f3ae:	f7fe fcd5 	bl	801dd5c <USBD_CDC_ReceivePacket>
}
 801f3b2:	46c0      	nop			@ (mov r8, r8)
 801f3b4:	46bd      	mov	sp, r7
 801f3b6:	bd80      	pop	{r7, pc}
 801f3b8:	2000251c 	.word	0x2000251c
 801f3bc:	20002520 	.word	0x20002520
 801f3c0:	2000219c 	.word	0x2000219c

0801f3c4 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801f3c4:	b580      	push	{r7, lr}
 801f3c6:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801f3c8:	4b02      	ldr	r3, [pc, #8]	@ (801f3d4 <GetUsbRxDataSize+0x10>)
 801f3ca:	681b      	ldr	r3, [r3, #0]
}
 801f3cc:	0018      	movs	r0, r3
 801f3ce:	46bd      	mov	sp, r7
 801f3d0:	bd80      	pop	{r7, pc}
 801f3d2:	46c0      	nop			@ (mov r8, r8)
 801f3d4:	2000251c 	.word	0x2000251c

0801f3d8 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801f3d8:	b580      	push	{r7, lr}
 801f3da:	b082      	sub	sp, #8
 801f3dc:	af00      	add	r7, sp, #0
 801f3de:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801f3e0:	687a      	ldr	r2, [r7, #4]
 801f3e2:	4b07      	ldr	r3, [pc, #28]	@ (801f400 <GetUsbRxNextChunk+0x28>)
 801f3e4:	18d2      	adds	r2, r2, r3
 801f3e6:	4b07      	ldr	r3, [pc, #28]	@ (801f404 <GetUsbRxNextChunk+0x2c>)
 801f3e8:	0011      	movs	r1, r2
 801f3ea:	0018      	movs	r0, r3
 801f3ec:	f7fe fc6b 	bl	801dcc6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f3f0:	4b04      	ldr	r3, [pc, #16]	@ (801f404 <GetUsbRxNextChunk+0x2c>)
 801f3f2:	0018      	movs	r0, r3
 801f3f4:	f7fe fcb2 	bl	801dd5c <USBD_CDC_ReceivePacket>
}
 801f3f8:	46c0      	nop			@ (mov r8, r8)
 801f3fa:	46bd      	mov	sp, r7
 801f3fc:	b002      	add	sp, #8
 801f3fe:	bd80      	pop	{r7, pc}
 801f400:	20002520 	.word	0x20002520
 801f404:	2000219c 	.word	0x2000219c

0801f408 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f408:	b580      	push	{r7, lr}
 801f40a:	b082      	sub	sp, #8
 801f40c:	af00      	add	r7, sp, #0
 801f40e:	0002      	movs	r2, r0
 801f410:	6039      	str	r1, [r7, #0]
 801f412:	1dfb      	adds	r3, r7, #7
 801f414:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801f416:	683b      	ldr	r3, [r7, #0]
 801f418:	2212      	movs	r2, #18
 801f41a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801f41c:	4b02      	ldr	r3, [pc, #8]	@ (801f428 <USBD_FS_DeviceDescriptor+0x20>)
}
 801f41e:	0018      	movs	r0, r3
 801f420:	46bd      	mov	sp, r7
 801f422:	b002      	add	sp, #8
 801f424:	bd80      	pop	{r7, pc}
 801f426:	46c0      	nop			@ (mov r8, r8)
 801f428:	20000230 	.word	0x20000230

0801f42c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f42c:	b580      	push	{r7, lr}
 801f42e:	b082      	sub	sp, #8
 801f430:	af00      	add	r7, sp, #0
 801f432:	0002      	movs	r2, r0
 801f434:	6039      	str	r1, [r7, #0]
 801f436:	1dfb      	adds	r3, r7, #7
 801f438:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801f43a:	683b      	ldr	r3, [r7, #0]
 801f43c:	2204      	movs	r2, #4
 801f43e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801f440:	4b02      	ldr	r3, [pc, #8]	@ (801f44c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801f442:	0018      	movs	r0, r3
 801f444:	46bd      	mov	sp, r7
 801f446:	b002      	add	sp, #8
 801f448:	bd80      	pop	{r7, pc}
 801f44a:	46c0      	nop			@ (mov r8, r8)
 801f44c:	20000244 	.word	0x20000244

0801f450 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f450:	b580      	push	{r7, lr}
 801f452:	b082      	sub	sp, #8
 801f454:	af00      	add	r7, sp, #0
 801f456:	0002      	movs	r2, r0
 801f458:	6039      	str	r1, [r7, #0]
 801f45a:	1dfb      	adds	r3, r7, #7
 801f45c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801f45e:	1dfb      	adds	r3, r7, #7
 801f460:	781b      	ldrb	r3, [r3, #0]
 801f462:	2b00      	cmp	r3, #0
 801f464:	d106      	bne.n	801f474 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f466:	683a      	ldr	r2, [r7, #0]
 801f468:	4908      	ldr	r1, [pc, #32]	@ (801f48c <USBD_FS_ProductStrDescriptor+0x3c>)
 801f46a:	4b09      	ldr	r3, [pc, #36]	@ (801f490 <USBD_FS_ProductStrDescriptor+0x40>)
 801f46c:	0018      	movs	r0, r3
 801f46e:	f7ff fdb1 	bl	801efd4 <USBD_GetString>
 801f472:	e005      	b.n	801f480 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f474:	683a      	ldr	r2, [r7, #0]
 801f476:	4905      	ldr	r1, [pc, #20]	@ (801f48c <USBD_FS_ProductStrDescriptor+0x3c>)
 801f478:	4b05      	ldr	r3, [pc, #20]	@ (801f490 <USBD_FS_ProductStrDescriptor+0x40>)
 801f47a:	0018      	movs	r0, r3
 801f47c:	f7ff fdaa 	bl	801efd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f480:	4b02      	ldr	r3, [pc, #8]	@ (801f48c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801f482:	0018      	movs	r0, r3
 801f484:	46bd      	mov	sp, r7
 801f486:	b002      	add	sp, #8
 801f488:	bd80      	pop	{r7, pc}
 801f48a:	46c0      	nop			@ (mov r8, r8)
 801f48c:	20002d20 	.word	0x20002d20
 801f490:	080285ac 	.word	0x080285ac

0801f494 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f494:	b580      	push	{r7, lr}
 801f496:	b082      	sub	sp, #8
 801f498:	af00      	add	r7, sp, #0
 801f49a:	0002      	movs	r2, r0
 801f49c:	6039      	str	r1, [r7, #0]
 801f49e:	1dfb      	adds	r3, r7, #7
 801f4a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801f4a2:	683a      	ldr	r2, [r7, #0]
 801f4a4:	4904      	ldr	r1, [pc, #16]	@ (801f4b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801f4a6:	4b05      	ldr	r3, [pc, #20]	@ (801f4bc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801f4a8:	0018      	movs	r0, r3
 801f4aa:	f7ff fd93 	bl	801efd4 <USBD_GetString>
  return USBD_StrDesc;
 801f4ae:	4b02      	ldr	r3, [pc, #8]	@ (801f4b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801f4b0:	0018      	movs	r0, r3
 801f4b2:	46bd      	mov	sp, r7
 801f4b4:	b002      	add	sp, #8
 801f4b6:	bd80      	pop	{r7, pc}
 801f4b8:	20002d20 	.word	0x20002d20
 801f4bc:	080285c4 	.word	0x080285c4

0801f4c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f4c0:	b580      	push	{r7, lr}
 801f4c2:	b082      	sub	sp, #8
 801f4c4:	af00      	add	r7, sp, #0
 801f4c6:	0002      	movs	r2, r0
 801f4c8:	6039      	str	r1, [r7, #0]
 801f4ca:	1dfb      	adds	r3, r7, #7
 801f4cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801f4ce:	683b      	ldr	r3, [r7, #0]
 801f4d0:	221a      	movs	r2, #26
 801f4d2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801f4d4:	f000 f84c 	bl	801f570 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801f4d8:	4b02      	ldr	r3, [pc, #8]	@ (801f4e4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801f4da:	0018      	movs	r0, r3
 801f4dc:	46bd      	mov	sp, r7
 801f4de:	b002      	add	sp, #8
 801f4e0:	bd80      	pop	{r7, pc}
 801f4e2:	46c0      	nop			@ (mov r8, r8)
 801f4e4:	20000248 	.word	0x20000248

0801f4e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f4e8:	b580      	push	{r7, lr}
 801f4ea:	b082      	sub	sp, #8
 801f4ec:	af00      	add	r7, sp, #0
 801f4ee:	0002      	movs	r2, r0
 801f4f0:	6039      	str	r1, [r7, #0]
 801f4f2:	1dfb      	adds	r3, r7, #7
 801f4f4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801f4f6:	1dfb      	adds	r3, r7, #7
 801f4f8:	781b      	ldrb	r3, [r3, #0]
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d106      	bne.n	801f50c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f4fe:	683a      	ldr	r2, [r7, #0]
 801f500:	4908      	ldr	r1, [pc, #32]	@ (801f524 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801f502:	4b09      	ldr	r3, [pc, #36]	@ (801f528 <USBD_FS_ConfigStrDescriptor+0x40>)
 801f504:	0018      	movs	r0, r3
 801f506:	f7ff fd65 	bl	801efd4 <USBD_GetString>
 801f50a:	e005      	b.n	801f518 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f50c:	683a      	ldr	r2, [r7, #0]
 801f50e:	4905      	ldr	r1, [pc, #20]	@ (801f524 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801f510:	4b05      	ldr	r3, [pc, #20]	@ (801f528 <USBD_FS_ConfigStrDescriptor+0x40>)
 801f512:	0018      	movs	r0, r3
 801f514:	f7ff fd5e 	bl	801efd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f518:	4b02      	ldr	r3, [pc, #8]	@ (801f524 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801f51a:	0018      	movs	r0, r3
 801f51c:	46bd      	mov	sp, r7
 801f51e:	b002      	add	sp, #8
 801f520:	bd80      	pop	{r7, pc}
 801f522:	46c0      	nop			@ (mov r8, r8)
 801f524:	20002d20 	.word	0x20002d20
 801f528:	080285d8 	.word	0x080285d8

0801f52c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f52c:	b580      	push	{r7, lr}
 801f52e:	b082      	sub	sp, #8
 801f530:	af00      	add	r7, sp, #0
 801f532:	0002      	movs	r2, r0
 801f534:	6039      	str	r1, [r7, #0]
 801f536:	1dfb      	adds	r3, r7, #7
 801f538:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801f53a:	1dfb      	adds	r3, r7, #7
 801f53c:	781b      	ldrb	r3, [r3, #0]
 801f53e:	2b00      	cmp	r3, #0
 801f540:	d106      	bne.n	801f550 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f542:	683a      	ldr	r2, [r7, #0]
 801f544:	4908      	ldr	r1, [pc, #32]	@ (801f568 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801f546:	4b09      	ldr	r3, [pc, #36]	@ (801f56c <USBD_FS_InterfaceStrDescriptor+0x40>)
 801f548:	0018      	movs	r0, r3
 801f54a:	f7ff fd43 	bl	801efd4 <USBD_GetString>
 801f54e:	e005      	b.n	801f55c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f550:	683a      	ldr	r2, [r7, #0]
 801f552:	4905      	ldr	r1, [pc, #20]	@ (801f568 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801f554:	4b05      	ldr	r3, [pc, #20]	@ (801f56c <USBD_FS_InterfaceStrDescriptor+0x40>)
 801f556:	0018      	movs	r0, r3
 801f558:	f7ff fd3c 	bl	801efd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f55c:	4b02      	ldr	r3, [pc, #8]	@ (801f568 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801f55e:	0018      	movs	r0, r3
 801f560:	46bd      	mov	sp, r7
 801f562:	b002      	add	sp, #8
 801f564:	bd80      	pop	{r7, pc}
 801f566:	46c0      	nop			@ (mov r8, r8)
 801f568:	20002d20 	.word	0x20002d20
 801f56c:	080285e4 	.word	0x080285e4

0801f570 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801f570:	b580      	push	{r7, lr}
 801f572:	b084      	sub	sp, #16
 801f574:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801f576:	4b10      	ldr	r3, [pc, #64]	@ (801f5b8 <Get_SerialNum+0x48>)
 801f578:	681b      	ldr	r3, [r3, #0]
 801f57a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801f57c:	4b0f      	ldr	r3, [pc, #60]	@ (801f5bc <Get_SerialNum+0x4c>)
 801f57e:	681b      	ldr	r3, [r3, #0]
 801f580:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801f582:	4b0f      	ldr	r3, [pc, #60]	@ (801f5c0 <Get_SerialNum+0x50>)
 801f584:	681b      	ldr	r3, [r3, #0]
 801f586:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801f588:	68fa      	ldr	r2, [r7, #12]
 801f58a:	687b      	ldr	r3, [r7, #4]
 801f58c:	18d3      	adds	r3, r2, r3
 801f58e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801f590:	68fb      	ldr	r3, [r7, #12]
 801f592:	2b00      	cmp	r3, #0
 801f594:	d00b      	beq.n	801f5ae <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801f596:	490b      	ldr	r1, [pc, #44]	@ (801f5c4 <Get_SerialNum+0x54>)
 801f598:	68fb      	ldr	r3, [r7, #12]
 801f59a:	2208      	movs	r2, #8
 801f59c:	0018      	movs	r0, r3
 801f59e:	f000 f815 	bl	801f5cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801f5a2:	4909      	ldr	r1, [pc, #36]	@ (801f5c8 <Get_SerialNum+0x58>)
 801f5a4:	68bb      	ldr	r3, [r7, #8]
 801f5a6:	2204      	movs	r2, #4
 801f5a8:	0018      	movs	r0, r3
 801f5aa:	f000 f80f 	bl	801f5cc <IntToUnicode>
  }
}
 801f5ae:	46c0      	nop			@ (mov r8, r8)
 801f5b0:	46bd      	mov	sp, r7
 801f5b2:	b004      	add	sp, #16
 801f5b4:	bd80      	pop	{r7, pc}
 801f5b6:	46c0      	nop			@ (mov r8, r8)
 801f5b8:	1ff80050 	.word	0x1ff80050
 801f5bc:	1ff80054 	.word	0x1ff80054
 801f5c0:	1ff80058 	.word	0x1ff80058
 801f5c4:	2000024a 	.word	0x2000024a
 801f5c8:	2000025a 	.word	0x2000025a

0801f5cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801f5cc:	b580      	push	{r7, lr}
 801f5ce:	b086      	sub	sp, #24
 801f5d0:	af00      	add	r7, sp, #0
 801f5d2:	60f8      	str	r0, [r7, #12]
 801f5d4:	60b9      	str	r1, [r7, #8]
 801f5d6:	1dfb      	adds	r3, r7, #7
 801f5d8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801f5da:	2117      	movs	r1, #23
 801f5dc:	187b      	adds	r3, r7, r1
 801f5de:	2200      	movs	r2, #0
 801f5e0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801f5e2:	187b      	adds	r3, r7, r1
 801f5e4:	2200      	movs	r2, #0
 801f5e6:	701a      	strb	r2, [r3, #0]
 801f5e8:	e02f      	b.n	801f64a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801f5ea:	68fb      	ldr	r3, [r7, #12]
 801f5ec:	0f1b      	lsrs	r3, r3, #28
 801f5ee:	2b09      	cmp	r3, #9
 801f5f0:	d80d      	bhi.n	801f60e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801f5f2:	68fb      	ldr	r3, [r7, #12]
 801f5f4:	0f1b      	lsrs	r3, r3, #28
 801f5f6:	b2da      	uxtb	r2, r3
 801f5f8:	2317      	movs	r3, #23
 801f5fa:	18fb      	adds	r3, r7, r3
 801f5fc:	781b      	ldrb	r3, [r3, #0]
 801f5fe:	005b      	lsls	r3, r3, #1
 801f600:	0019      	movs	r1, r3
 801f602:	68bb      	ldr	r3, [r7, #8]
 801f604:	185b      	adds	r3, r3, r1
 801f606:	3230      	adds	r2, #48	@ 0x30
 801f608:	b2d2      	uxtb	r2, r2
 801f60a:	701a      	strb	r2, [r3, #0]
 801f60c:	e00c      	b.n	801f628 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801f60e:	68fb      	ldr	r3, [r7, #12]
 801f610:	0f1b      	lsrs	r3, r3, #28
 801f612:	b2da      	uxtb	r2, r3
 801f614:	2317      	movs	r3, #23
 801f616:	18fb      	adds	r3, r7, r3
 801f618:	781b      	ldrb	r3, [r3, #0]
 801f61a:	005b      	lsls	r3, r3, #1
 801f61c:	0019      	movs	r1, r3
 801f61e:	68bb      	ldr	r3, [r7, #8]
 801f620:	185b      	adds	r3, r3, r1
 801f622:	3237      	adds	r2, #55	@ 0x37
 801f624:	b2d2      	uxtb	r2, r2
 801f626:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801f628:	68fb      	ldr	r3, [r7, #12]
 801f62a:	011b      	lsls	r3, r3, #4
 801f62c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801f62e:	2117      	movs	r1, #23
 801f630:	187b      	adds	r3, r7, r1
 801f632:	781b      	ldrb	r3, [r3, #0]
 801f634:	005b      	lsls	r3, r3, #1
 801f636:	3301      	adds	r3, #1
 801f638:	68ba      	ldr	r2, [r7, #8]
 801f63a:	18d3      	adds	r3, r2, r3
 801f63c:	2200      	movs	r2, #0
 801f63e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801f640:	187b      	adds	r3, r7, r1
 801f642:	781a      	ldrb	r2, [r3, #0]
 801f644:	187b      	adds	r3, r7, r1
 801f646:	3201      	adds	r2, #1
 801f648:	701a      	strb	r2, [r3, #0]
 801f64a:	2317      	movs	r3, #23
 801f64c:	18fa      	adds	r2, r7, r3
 801f64e:	1dfb      	adds	r3, r7, #7
 801f650:	7812      	ldrb	r2, [r2, #0]
 801f652:	781b      	ldrb	r3, [r3, #0]
 801f654:	429a      	cmp	r2, r3
 801f656:	d3c8      	bcc.n	801f5ea <IntToUnicode+0x1e>
  }
}
 801f658:	46c0      	nop			@ (mov r8, r8)
 801f65a:	46c0      	nop			@ (mov r8, r8)
 801f65c:	46bd      	mov	sp, r7
 801f65e:	b006      	add	sp, #24
 801f660:	bd80      	pop	{r7, pc}
	...

0801f664 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801f664:	b580      	push	{r7, lr}
 801f666:	b082      	sub	sp, #8
 801f668:	af00      	add	r7, sp, #0
 801f66a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801f66c:	687b      	ldr	r3, [r7, #4]
 801f66e:	681b      	ldr	r3, [r3, #0]
 801f670:	4a0a      	ldr	r2, [pc, #40]	@ (801f69c <HAL_PCD_MspInit+0x38>)
 801f672:	4293      	cmp	r3, r2
 801f674:	d10e      	bne.n	801f694 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801f676:	4b0a      	ldr	r3, [pc, #40]	@ (801f6a0 <HAL_PCD_MspInit+0x3c>)
 801f678:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801f67a:	4b09      	ldr	r3, [pc, #36]	@ (801f6a0 <HAL_PCD_MspInit+0x3c>)
 801f67c:	2180      	movs	r1, #128	@ 0x80
 801f67e:	0409      	lsls	r1, r1, #16
 801f680:	430a      	orrs	r2, r1
 801f682:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801f684:	2200      	movs	r2, #0
 801f686:	2100      	movs	r1, #0
 801f688:	201f      	movs	r0, #31
 801f68a:	f7f2 f847 	bl	801171c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801f68e:	201f      	movs	r0, #31
 801f690:	f7f2 f859 	bl	8011746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801f694:	46c0      	nop			@ (mov r8, r8)
 801f696:	46bd      	mov	sp, r7
 801f698:	b002      	add	sp, #8
 801f69a:	bd80      	pop	{r7, pc}
 801f69c:	40005c00 	.word	0x40005c00
 801f6a0:	40021000 	.word	0x40021000

0801f6a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f6a4:	b580      	push	{r7, lr}
 801f6a6:	b082      	sub	sp, #8
 801f6a8:	af00      	add	r7, sp, #0
 801f6aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801f6ac:	687a      	ldr	r2, [r7, #4]
 801f6ae:	23bc      	movs	r3, #188	@ 0xbc
 801f6b0:	009b      	lsls	r3, r3, #2
 801f6b2:	58d2      	ldr	r2, [r2, r3]
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	21ac      	movs	r1, #172	@ 0xac
 801f6b8:	0089      	lsls	r1, r1, #2
 801f6ba:	468c      	mov	ip, r1
 801f6bc:	4463      	add	r3, ip
 801f6be:	0019      	movs	r1, r3
 801f6c0:	0010      	movs	r0, r2
 801f6c2:	f7fe fc1d 	bl	801df00 <USBD_LL_SetupStage>
}
 801f6c6:	46c0      	nop			@ (mov r8, r8)
 801f6c8:	46bd      	mov	sp, r7
 801f6ca:	b002      	add	sp, #8
 801f6cc:	bd80      	pop	{r7, pc}

0801f6ce <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f6ce:	b590      	push	{r4, r7, lr}
 801f6d0:	b083      	sub	sp, #12
 801f6d2:	af00      	add	r7, sp, #0
 801f6d4:	6078      	str	r0, [r7, #4]
 801f6d6:	000a      	movs	r2, r1
 801f6d8:	1cfb      	adds	r3, r7, #3
 801f6da:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801f6dc:	687a      	ldr	r2, [r7, #4]
 801f6de:	23bc      	movs	r3, #188	@ 0xbc
 801f6e0:	009b      	lsls	r3, r3, #2
 801f6e2:	58d4      	ldr	r4, [r2, r3]
 801f6e4:	1cfb      	adds	r3, r7, #3
 801f6e6:	781a      	ldrb	r2, [r3, #0]
 801f6e8:	6878      	ldr	r0, [r7, #4]
 801f6ea:	23be      	movs	r3, #190	@ 0xbe
 801f6ec:	0059      	lsls	r1, r3, #1
 801f6ee:	0013      	movs	r3, r2
 801f6f0:	009b      	lsls	r3, r3, #2
 801f6f2:	189b      	adds	r3, r3, r2
 801f6f4:	00db      	lsls	r3, r3, #3
 801f6f6:	18c3      	adds	r3, r0, r3
 801f6f8:	185b      	adds	r3, r3, r1
 801f6fa:	681a      	ldr	r2, [r3, #0]
 801f6fc:	1cfb      	adds	r3, r7, #3
 801f6fe:	781b      	ldrb	r3, [r3, #0]
 801f700:	0019      	movs	r1, r3
 801f702:	0020      	movs	r0, r4
 801f704:	f7fe fc5a 	bl	801dfbc <USBD_LL_DataOutStage>
}
 801f708:	46c0      	nop			@ (mov r8, r8)
 801f70a:	46bd      	mov	sp, r7
 801f70c:	b003      	add	sp, #12
 801f70e:	bd90      	pop	{r4, r7, pc}

0801f710 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f710:	b580      	push	{r7, lr}
 801f712:	b082      	sub	sp, #8
 801f714:	af00      	add	r7, sp, #0
 801f716:	6078      	str	r0, [r7, #4]
 801f718:	000a      	movs	r2, r1
 801f71a:	1cfb      	adds	r3, r7, #3
 801f71c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801f71e:	687a      	ldr	r2, [r7, #4]
 801f720:	23bc      	movs	r3, #188	@ 0xbc
 801f722:	009b      	lsls	r3, r3, #2
 801f724:	58d0      	ldr	r0, [r2, r3]
 801f726:	1cfb      	adds	r3, r7, #3
 801f728:	781a      	ldrb	r2, [r3, #0]
 801f72a:	6879      	ldr	r1, [r7, #4]
 801f72c:	0013      	movs	r3, r2
 801f72e:	009b      	lsls	r3, r3, #2
 801f730:	189b      	adds	r3, r3, r2
 801f732:	00db      	lsls	r3, r3, #3
 801f734:	18cb      	adds	r3, r1, r3
 801f736:	333c      	adds	r3, #60	@ 0x3c
 801f738:	681a      	ldr	r2, [r3, #0]
 801f73a:	1cfb      	adds	r3, r7, #3
 801f73c:	781b      	ldrb	r3, [r3, #0]
 801f73e:	0019      	movs	r1, r3
 801f740:	f7fe fcbe 	bl	801e0c0 <USBD_LL_DataInStage>
}
 801f744:	46c0      	nop			@ (mov r8, r8)
 801f746:	46bd      	mov	sp, r7
 801f748:	b002      	add	sp, #8
 801f74a:	bd80      	pop	{r7, pc}

0801f74c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f74c:	b580      	push	{r7, lr}
 801f74e:	b082      	sub	sp, #8
 801f750:	af00      	add	r7, sp, #0
 801f752:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801f754:	687a      	ldr	r2, [r7, #4]
 801f756:	23bc      	movs	r3, #188	@ 0xbc
 801f758:	009b      	lsls	r3, r3, #2
 801f75a:	58d3      	ldr	r3, [r2, r3]
 801f75c:	0018      	movs	r0, r3
 801f75e:	f7fe fdf5 	bl	801e34c <USBD_LL_SOF>
}
 801f762:	46c0      	nop			@ (mov r8, r8)
 801f764:	46bd      	mov	sp, r7
 801f766:	b002      	add	sp, #8
 801f768:	bd80      	pop	{r7, pc}

0801f76a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f76a:	b580      	push	{r7, lr}
 801f76c:	b084      	sub	sp, #16
 801f76e:	af00      	add	r7, sp, #0
 801f770:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801f772:	230f      	movs	r3, #15
 801f774:	18fb      	adds	r3, r7, r3
 801f776:	2201      	movs	r2, #1
 801f778:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	689b      	ldr	r3, [r3, #8]
 801f77e:	2b02      	cmp	r3, #2
 801f780:	d001      	beq.n	801f786 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801f782:	f7ea fc7f 	bl	800a084 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801f786:	687a      	ldr	r2, [r7, #4]
 801f788:	23bc      	movs	r3, #188	@ 0xbc
 801f78a:	009b      	lsls	r3, r3, #2
 801f78c:	58d2      	ldr	r2, [r2, r3]
 801f78e:	230f      	movs	r3, #15
 801f790:	18fb      	adds	r3, r7, r3
 801f792:	781b      	ldrb	r3, [r3, #0]
 801f794:	0019      	movs	r1, r3
 801f796:	0010      	movs	r0, r2
 801f798:	f7fe fd97 	bl	801e2ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f79c:	687a      	ldr	r2, [r7, #4]
 801f79e:	23bc      	movs	r3, #188	@ 0xbc
 801f7a0:	009b      	lsls	r3, r3, #2
 801f7a2:	58d3      	ldr	r3, [r2, r3]
 801f7a4:	0018      	movs	r0, r3
 801f7a6:	f7fe fd48 	bl	801e23a <USBD_LL_Reset>
}
 801f7aa:	46c0      	nop			@ (mov r8, r8)
 801f7ac:	46bd      	mov	sp, r7
 801f7ae:	b004      	add	sp, #16
 801f7b0:	bd80      	pop	{r7, pc}
	...

0801f7b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f7b4:	b580      	push	{r7, lr}
 801f7b6:	b082      	sub	sp, #8
 801f7b8:	af00      	add	r7, sp, #0
 801f7ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801f7bc:	687a      	ldr	r2, [r7, #4]
 801f7be:	23bc      	movs	r3, #188	@ 0xbc
 801f7c0:	009b      	lsls	r3, r3, #2
 801f7c2:	58d3      	ldr	r3, [r2, r3]
 801f7c4:	0018      	movs	r0, r3
 801f7c6:	f7fe fd91 	bl	801e2ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	699b      	ldr	r3, [r3, #24]
 801f7ce:	2b00      	cmp	r3, #0
 801f7d0:	d005      	beq.n	801f7de <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f7d2:	4b05      	ldr	r3, [pc, #20]	@ (801f7e8 <HAL_PCD_SuspendCallback+0x34>)
 801f7d4:	691a      	ldr	r2, [r3, #16]
 801f7d6:	4b04      	ldr	r3, [pc, #16]	@ (801f7e8 <HAL_PCD_SuspendCallback+0x34>)
 801f7d8:	2106      	movs	r1, #6
 801f7da:	430a      	orrs	r2, r1
 801f7dc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801f7de:	46c0      	nop			@ (mov r8, r8)
 801f7e0:	46bd      	mov	sp, r7
 801f7e2:	b002      	add	sp, #8
 801f7e4:	bd80      	pop	{r7, pc}
 801f7e6:	46c0      	nop			@ (mov r8, r8)
 801f7e8:	e000ed00 	.word	0xe000ed00

0801f7ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f7ec:	b580      	push	{r7, lr}
 801f7ee:	b082      	sub	sp, #8
 801f7f0:	af00      	add	r7, sp, #0
 801f7f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801f7f4:	687b      	ldr	r3, [r7, #4]
 801f7f6:	699b      	ldr	r3, [r3, #24]
 801f7f8:	2b00      	cmp	r3, #0
 801f7fa:	d007      	beq.n	801f80c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f7fc:	4b09      	ldr	r3, [pc, #36]	@ (801f824 <HAL_PCD_ResumeCallback+0x38>)
 801f7fe:	691a      	ldr	r2, [r3, #16]
 801f800:	4b08      	ldr	r3, [pc, #32]	@ (801f824 <HAL_PCD_ResumeCallback+0x38>)
 801f802:	2106      	movs	r1, #6
 801f804:	438a      	bics	r2, r1
 801f806:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801f808:	f000 fa44 	bl	801fc94 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801f80c:	687a      	ldr	r2, [r7, #4]
 801f80e:	23bc      	movs	r3, #188	@ 0xbc
 801f810:	009b      	lsls	r3, r3, #2
 801f812:	58d3      	ldr	r3, [r2, r3]
 801f814:	0018      	movs	r0, r3
 801f816:	f7fe fd81 	bl	801e31c <USBD_LL_Resume>
}
 801f81a:	46c0      	nop			@ (mov r8, r8)
 801f81c:	46bd      	mov	sp, r7
 801f81e:	b002      	add	sp, #8
 801f820:	bd80      	pop	{r7, pc}
 801f822:	46c0      	nop			@ (mov r8, r8)
 801f824:	e000ed00 	.word	0xe000ed00

0801f828 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801f828:	b580      	push	{r7, lr}
 801f82a:	b082      	sub	sp, #8
 801f82c:	af00      	add	r7, sp, #0
 801f82e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801f830:	4a2d      	ldr	r2, [pc, #180]	@ (801f8e8 <USBD_LL_Init+0xc0>)
 801f832:	23bc      	movs	r3, #188	@ 0xbc
 801f834:	009b      	lsls	r3, r3, #2
 801f836:	6879      	ldr	r1, [r7, #4]
 801f838:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801f83a:	687a      	ldr	r2, [r7, #4]
 801f83c:	23b0      	movs	r3, #176	@ 0xb0
 801f83e:	009b      	lsls	r3, r3, #2
 801f840:	4929      	ldr	r1, [pc, #164]	@ (801f8e8 <USBD_LL_Init+0xc0>)
 801f842:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801f844:	4b28      	ldr	r3, [pc, #160]	@ (801f8e8 <USBD_LL_Init+0xc0>)
 801f846:	4a29      	ldr	r2, [pc, #164]	@ (801f8ec <USBD_LL_Init+0xc4>)
 801f848:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801f84a:	4b27      	ldr	r3, [pc, #156]	@ (801f8e8 <USBD_LL_Init+0xc0>)
 801f84c:	2208      	movs	r2, #8
 801f84e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801f850:	4b25      	ldr	r3, [pc, #148]	@ (801f8e8 <USBD_LL_Init+0xc0>)
 801f852:	2202      	movs	r2, #2
 801f854:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801f856:	4b24      	ldr	r3, [pc, #144]	@ (801f8e8 <USBD_LL_Init+0xc0>)
 801f858:	2202      	movs	r2, #2
 801f85a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801f85c:	4b22      	ldr	r3, [pc, #136]	@ (801f8e8 <USBD_LL_Init+0xc0>)
 801f85e:	2200      	movs	r2, #0
 801f860:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801f862:	4b21      	ldr	r3, [pc, #132]	@ (801f8e8 <USBD_LL_Init+0xc0>)
 801f864:	2200      	movs	r2, #0
 801f866:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801f868:	4b1f      	ldr	r3, [pc, #124]	@ (801f8e8 <USBD_LL_Init+0xc0>)
 801f86a:	2200      	movs	r2, #0
 801f86c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801f86e:	4b1e      	ldr	r3, [pc, #120]	@ (801f8e8 <USBD_LL_Init+0xc0>)
 801f870:	0018      	movs	r0, r3
 801f872:	f7f5 ff95 	bl	80157a0 <HAL_PCD_Init>
 801f876:	1e03      	subs	r3, r0, #0
 801f878:	d001      	beq.n	801f87e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801f87a:	f7ea fc03 	bl	800a084 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801f87e:	687a      	ldr	r2, [r7, #4]
 801f880:	23b0      	movs	r3, #176	@ 0xb0
 801f882:	009b      	lsls	r3, r3, #2
 801f884:	58d0      	ldr	r0, [r2, r3]
 801f886:	2318      	movs	r3, #24
 801f888:	2200      	movs	r2, #0
 801f88a:	2100      	movs	r1, #0
 801f88c:	f7f7 fd56 	bl	801733c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801f890:	687a      	ldr	r2, [r7, #4]
 801f892:	23b0      	movs	r3, #176	@ 0xb0
 801f894:	009b      	lsls	r3, r3, #2
 801f896:	58d0      	ldr	r0, [r2, r3]
 801f898:	2358      	movs	r3, #88	@ 0x58
 801f89a:	2200      	movs	r2, #0
 801f89c:	2180      	movs	r1, #128	@ 0x80
 801f89e:	f7f7 fd4d 	bl	801733c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801f8a2:	687a      	ldr	r2, [r7, #4]
 801f8a4:	23b0      	movs	r3, #176	@ 0xb0
 801f8a6:	009b      	lsls	r3, r3, #2
 801f8a8:	58d0      	ldr	r0, [r2, r3]
 801f8aa:	23c0      	movs	r3, #192	@ 0xc0
 801f8ac:	2200      	movs	r2, #0
 801f8ae:	2181      	movs	r1, #129	@ 0x81
 801f8b0:	f7f7 fd44 	bl	801733c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801f8b4:	687a      	ldr	r2, [r7, #4]
 801f8b6:	23b0      	movs	r3, #176	@ 0xb0
 801f8b8:	009b      	lsls	r3, r3, #2
 801f8ba:	58d0      	ldr	r0, [r2, r3]
 801f8bc:	2388      	movs	r3, #136	@ 0x88
 801f8be:	005b      	lsls	r3, r3, #1
 801f8c0:	2200      	movs	r2, #0
 801f8c2:	2101      	movs	r1, #1
 801f8c4:	f7f7 fd3a 	bl	801733c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801f8c8:	687a      	ldr	r2, [r7, #4]
 801f8ca:	23b0      	movs	r3, #176	@ 0xb0
 801f8cc:	009b      	lsls	r3, r3, #2
 801f8ce:	58d0      	ldr	r0, [r2, r3]
 801f8d0:	2380      	movs	r3, #128	@ 0x80
 801f8d2:	005b      	lsls	r3, r3, #1
 801f8d4:	2200      	movs	r2, #0
 801f8d6:	2182      	movs	r1, #130	@ 0x82
 801f8d8:	f7f7 fd30 	bl	801733c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801f8dc:	2300      	movs	r3, #0
}
 801f8de:	0018      	movs	r0, r3
 801f8e0:	46bd      	mov	sp, r7
 801f8e2:	b002      	add	sp, #8
 801f8e4:	bd80      	pop	{r7, pc}
 801f8e6:	46c0      	nop			@ (mov r8, r8)
 801f8e8:	20002f20 	.word	0x20002f20
 801f8ec:	40005c00 	.word	0x40005c00

0801f8f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801f8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f8f2:	b085      	sub	sp, #20
 801f8f4:	af00      	add	r7, sp, #0
 801f8f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f8f8:	210f      	movs	r1, #15
 801f8fa:	187b      	adds	r3, r7, r1
 801f8fc:	2200      	movs	r2, #0
 801f8fe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f900:	260e      	movs	r6, #14
 801f902:	19bb      	adds	r3, r7, r6
 801f904:	2200      	movs	r2, #0
 801f906:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801f908:	687a      	ldr	r2, [r7, #4]
 801f90a:	23b0      	movs	r3, #176	@ 0xb0
 801f90c:	009b      	lsls	r3, r3, #2
 801f90e:	58d3      	ldr	r3, [r2, r3]
 801f910:	000d      	movs	r5, r1
 801f912:	187c      	adds	r4, r7, r1
 801f914:	0018      	movs	r0, r3
 801f916:	f7f6 f843 	bl	80159a0 <HAL_PCD_Start>
 801f91a:	0003      	movs	r3, r0
 801f91c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f91e:	19bc      	adds	r4, r7, r6
 801f920:	197b      	adds	r3, r7, r5
 801f922:	781b      	ldrb	r3, [r3, #0]
 801f924:	0018      	movs	r0, r3
 801f926:	f000 f9bc 	bl	801fca2 <USBD_Get_USB_Status>
 801f92a:	0003      	movs	r3, r0
 801f92c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801f92e:	19bb      	adds	r3, r7, r6
 801f930:	781b      	ldrb	r3, [r3, #0]
}
 801f932:	0018      	movs	r0, r3
 801f934:	46bd      	mov	sp, r7
 801f936:	b005      	add	sp, #20
 801f938:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f93a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801f93a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f93c:	b085      	sub	sp, #20
 801f93e:	af00      	add	r7, sp, #0
 801f940:	6078      	str	r0, [r7, #4]
 801f942:	000c      	movs	r4, r1
 801f944:	0010      	movs	r0, r2
 801f946:	0019      	movs	r1, r3
 801f948:	1cfb      	adds	r3, r7, #3
 801f94a:	1c22      	adds	r2, r4, #0
 801f94c:	701a      	strb	r2, [r3, #0]
 801f94e:	1cbb      	adds	r3, r7, #2
 801f950:	1c02      	adds	r2, r0, #0
 801f952:	701a      	strb	r2, [r3, #0]
 801f954:	003b      	movs	r3, r7
 801f956:	1c0a      	adds	r2, r1, #0
 801f958:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f95a:	260f      	movs	r6, #15
 801f95c:	19bb      	adds	r3, r7, r6
 801f95e:	2200      	movs	r2, #0
 801f960:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f962:	250e      	movs	r5, #14
 801f964:	197b      	adds	r3, r7, r5
 801f966:	2200      	movs	r2, #0
 801f968:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801f96a:	687a      	ldr	r2, [r7, #4]
 801f96c:	23b0      	movs	r3, #176	@ 0xb0
 801f96e:	009b      	lsls	r3, r3, #2
 801f970:	58d0      	ldr	r0, [r2, r3]
 801f972:	19bc      	adds	r4, r7, r6
 801f974:	1cbb      	adds	r3, r7, #2
 801f976:	781d      	ldrb	r5, [r3, #0]
 801f978:	003b      	movs	r3, r7
 801f97a:	881a      	ldrh	r2, [r3, #0]
 801f97c:	1cfb      	adds	r3, r7, #3
 801f97e:	7819      	ldrb	r1, [r3, #0]
 801f980:	002b      	movs	r3, r5
 801f982:	f7f6 f9a2 	bl	8015cca <HAL_PCD_EP_Open>
 801f986:	0003      	movs	r3, r0
 801f988:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f98a:	250e      	movs	r5, #14
 801f98c:	197c      	adds	r4, r7, r5
 801f98e:	19bb      	adds	r3, r7, r6
 801f990:	781b      	ldrb	r3, [r3, #0]
 801f992:	0018      	movs	r0, r3
 801f994:	f000 f985 	bl	801fca2 <USBD_Get_USB_Status>
 801f998:	0003      	movs	r3, r0
 801f99a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801f99c:	197b      	adds	r3, r7, r5
 801f99e:	781b      	ldrb	r3, [r3, #0]
}
 801f9a0:	0018      	movs	r0, r3
 801f9a2:	46bd      	mov	sp, r7
 801f9a4:	b005      	add	sp, #20
 801f9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f9a8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f9aa:	b085      	sub	sp, #20
 801f9ac:	af00      	add	r7, sp, #0
 801f9ae:	6078      	str	r0, [r7, #4]
 801f9b0:	000a      	movs	r2, r1
 801f9b2:	1cfb      	adds	r3, r7, #3
 801f9b4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f9b6:	210f      	movs	r1, #15
 801f9b8:	187b      	adds	r3, r7, r1
 801f9ba:	2200      	movs	r2, #0
 801f9bc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801f9be:	260e      	movs	r6, #14
 801f9c0:	19bb      	adds	r3, r7, r6
 801f9c2:	2200      	movs	r2, #0
 801f9c4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801f9c6:	687a      	ldr	r2, [r7, #4]
 801f9c8:	23b0      	movs	r3, #176	@ 0xb0
 801f9ca:	009b      	lsls	r3, r3, #2
 801f9cc:	58d2      	ldr	r2, [r2, r3]
 801f9ce:	000d      	movs	r5, r1
 801f9d0:	187c      	adds	r4, r7, r1
 801f9d2:	1cfb      	adds	r3, r7, #3
 801f9d4:	781b      	ldrb	r3, [r3, #0]
 801f9d6:	0019      	movs	r1, r3
 801f9d8:	0010      	movs	r0, r2
 801f9da:	f7f6 f9e5 	bl	8015da8 <HAL_PCD_EP_Close>
 801f9de:	0003      	movs	r3, r0
 801f9e0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801f9e2:	19bc      	adds	r4, r7, r6
 801f9e4:	197b      	adds	r3, r7, r5
 801f9e6:	781b      	ldrb	r3, [r3, #0]
 801f9e8:	0018      	movs	r0, r3
 801f9ea:	f000 f95a 	bl	801fca2 <USBD_Get_USB_Status>
 801f9ee:	0003      	movs	r3, r0
 801f9f0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801f9f2:	19bb      	adds	r3, r7, r6
 801f9f4:	781b      	ldrb	r3, [r3, #0]
}
 801f9f6:	0018      	movs	r0, r3
 801f9f8:	46bd      	mov	sp, r7
 801f9fa:	b005      	add	sp, #20
 801f9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f9fe <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f9fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa00:	b085      	sub	sp, #20
 801fa02:	af00      	add	r7, sp, #0
 801fa04:	6078      	str	r0, [r7, #4]
 801fa06:	000a      	movs	r2, r1
 801fa08:	1cfb      	adds	r3, r7, #3
 801fa0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fa0c:	210f      	movs	r1, #15
 801fa0e:	187b      	adds	r3, r7, r1
 801fa10:	2200      	movs	r2, #0
 801fa12:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fa14:	260e      	movs	r6, #14
 801fa16:	19bb      	adds	r3, r7, r6
 801fa18:	2200      	movs	r2, #0
 801fa1a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801fa1c:	687a      	ldr	r2, [r7, #4]
 801fa1e:	23b0      	movs	r3, #176	@ 0xb0
 801fa20:	009b      	lsls	r3, r3, #2
 801fa22:	58d2      	ldr	r2, [r2, r3]
 801fa24:	000d      	movs	r5, r1
 801fa26:	187c      	adds	r4, r7, r1
 801fa28:	1cfb      	adds	r3, r7, #3
 801fa2a:	781b      	ldrb	r3, [r3, #0]
 801fa2c:	0019      	movs	r1, r3
 801fa2e:	0010      	movs	r0, r2
 801fa30:	f7f6 fa97 	bl	8015f62 <HAL_PCD_EP_SetStall>
 801fa34:	0003      	movs	r3, r0
 801fa36:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fa38:	19bc      	adds	r4, r7, r6
 801fa3a:	197b      	adds	r3, r7, r5
 801fa3c:	781b      	ldrb	r3, [r3, #0]
 801fa3e:	0018      	movs	r0, r3
 801fa40:	f000 f92f 	bl	801fca2 <USBD_Get_USB_Status>
 801fa44:	0003      	movs	r3, r0
 801fa46:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fa48:	19bb      	adds	r3, r7, r6
 801fa4a:	781b      	ldrb	r3, [r3, #0]
}
 801fa4c:	0018      	movs	r0, r3
 801fa4e:	46bd      	mov	sp, r7
 801fa50:	b005      	add	sp, #20
 801fa52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fa54 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fa54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa56:	b085      	sub	sp, #20
 801fa58:	af00      	add	r7, sp, #0
 801fa5a:	6078      	str	r0, [r7, #4]
 801fa5c:	000a      	movs	r2, r1
 801fa5e:	1cfb      	adds	r3, r7, #3
 801fa60:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fa62:	210f      	movs	r1, #15
 801fa64:	187b      	adds	r3, r7, r1
 801fa66:	2200      	movs	r2, #0
 801fa68:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fa6a:	260e      	movs	r6, #14
 801fa6c:	19bb      	adds	r3, r7, r6
 801fa6e:	2200      	movs	r2, #0
 801fa70:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801fa72:	687a      	ldr	r2, [r7, #4]
 801fa74:	23b0      	movs	r3, #176	@ 0xb0
 801fa76:	009b      	lsls	r3, r3, #2
 801fa78:	58d2      	ldr	r2, [r2, r3]
 801fa7a:	000d      	movs	r5, r1
 801fa7c:	187c      	adds	r4, r7, r1
 801fa7e:	1cfb      	adds	r3, r7, #3
 801fa80:	781b      	ldrb	r3, [r3, #0]
 801fa82:	0019      	movs	r1, r3
 801fa84:	0010      	movs	r0, r2
 801fa86:	f7f6 fac8 	bl	801601a <HAL_PCD_EP_ClrStall>
 801fa8a:	0003      	movs	r3, r0
 801fa8c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fa8e:	19bc      	adds	r4, r7, r6
 801fa90:	197b      	adds	r3, r7, r5
 801fa92:	781b      	ldrb	r3, [r3, #0]
 801fa94:	0018      	movs	r0, r3
 801fa96:	f000 f904 	bl	801fca2 <USBD_Get_USB_Status>
 801fa9a:	0003      	movs	r3, r0
 801fa9c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fa9e:	19bb      	adds	r3, r7, r6
 801faa0:	781b      	ldrb	r3, [r3, #0]
}
 801faa2:	0018      	movs	r0, r3
 801faa4:	46bd      	mov	sp, r7
 801faa6:	b005      	add	sp, #20
 801faa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801faaa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801faaa:	b580      	push	{r7, lr}
 801faac:	b084      	sub	sp, #16
 801faae:	af00      	add	r7, sp, #0
 801fab0:	6078      	str	r0, [r7, #4]
 801fab2:	000a      	movs	r2, r1
 801fab4:	1cfb      	adds	r3, r7, #3
 801fab6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801fab8:	687a      	ldr	r2, [r7, #4]
 801faba:	23b0      	movs	r3, #176	@ 0xb0
 801fabc:	009b      	lsls	r3, r3, #2
 801fabe:	58d3      	ldr	r3, [r2, r3]
 801fac0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801fac2:	1cfb      	adds	r3, r7, #3
 801fac4:	781b      	ldrb	r3, [r3, #0]
 801fac6:	b25b      	sxtb	r3, r3
 801fac8:	2b00      	cmp	r3, #0
 801faca:	da0d      	bge.n	801fae8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801facc:	1cfb      	adds	r3, r7, #3
 801face:	781b      	ldrb	r3, [r3, #0]
 801fad0:	227f      	movs	r2, #127	@ 0x7f
 801fad2:	4013      	ands	r3, r2
 801fad4:	68f9      	ldr	r1, [r7, #12]
 801fad6:	1c5a      	adds	r2, r3, #1
 801fad8:	0013      	movs	r3, r2
 801fada:	009b      	lsls	r3, r3, #2
 801fadc:	189b      	adds	r3, r3, r2
 801fade:	00db      	lsls	r3, r3, #3
 801fae0:	18cb      	adds	r3, r1, r3
 801fae2:	3302      	adds	r3, #2
 801fae4:	781b      	ldrb	r3, [r3, #0]
 801fae6:	e00d      	b.n	801fb04 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801fae8:	1cfb      	adds	r3, r7, #3
 801faea:	781b      	ldrb	r3, [r3, #0]
 801faec:	227f      	movs	r2, #127	@ 0x7f
 801faee:	401a      	ands	r2, r3
 801faf0:	68f8      	ldr	r0, [r7, #12]
 801faf2:	23b5      	movs	r3, #181	@ 0xb5
 801faf4:	0059      	lsls	r1, r3, #1
 801faf6:	0013      	movs	r3, r2
 801faf8:	009b      	lsls	r3, r3, #2
 801fafa:	189b      	adds	r3, r3, r2
 801fafc:	00db      	lsls	r3, r3, #3
 801fafe:	18c3      	adds	r3, r0, r3
 801fb00:	185b      	adds	r3, r3, r1
 801fb02:	781b      	ldrb	r3, [r3, #0]
  }
}
 801fb04:	0018      	movs	r0, r3
 801fb06:	46bd      	mov	sp, r7
 801fb08:	b004      	add	sp, #16
 801fb0a:	bd80      	pop	{r7, pc}

0801fb0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801fb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fb0e:	b085      	sub	sp, #20
 801fb10:	af00      	add	r7, sp, #0
 801fb12:	6078      	str	r0, [r7, #4]
 801fb14:	000a      	movs	r2, r1
 801fb16:	1cfb      	adds	r3, r7, #3
 801fb18:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fb1a:	210f      	movs	r1, #15
 801fb1c:	187b      	adds	r3, r7, r1
 801fb1e:	2200      	movs	r2, #0
 801fb20:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fb22:	260e      	movs	r6, #14
 801fb24:	19bb      	adds	r3, r7, r6
 801fb26:	2200      	movs	r2, #0
 801fb28:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801fb2a:	687a      	ldr	r2, [r7, #4]
 801fb2c:	23b0      	movs	r3, #176	@ 0xb0
 801fb2e:	009b      	lsls	r3, r3, #2
 801fb30:	58d2      	ldr	r2, [r2, r3]
 801fb32:	000d      	movs	r5, r1
 801fb34:	187c      	adds	r4, r7, r1
 801fb36:	1cfb      	adds	r3, r7, #3
 801fb38:	781b      	ldrb	r3, [r3, #0]
 801fb3a:	0019      	movs	r1, r3
 801fb3c:	0010      	movs	r0, r2
 801fb3e:	f7f6 f899 	bl	8015c74 <HAL_PCD_SetAddress>
 801fb42:	0003      	movs	r3, r0
 801fb44:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fb46:	19bc      	adds	r4, r7, r6
 801fb48:	197b      	adds	r3, r7, r5
 801fb4a:	781b      	ldrb	r3, [r3, #0]
 801fb4c:	0018      	movs	r0, r3
 801fb4e:	f000 f8a8 	bl	801fca2 <USBD_Get_USB_Status>
 801fb52:	0003      	movs	r3, r0
 801fb54:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fb56:	19bb      	adds	r3, r7, r6
 801fb58:	781b      	ldrb	r3, [r3, #0]
}
 801fb5a:	0018      	movs	r0, r3
 801fb5c:	46bd      	mov	sp, r7
 801fb5e:	b005      	add	sp, #20
 801fb60:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fb62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801fb62:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fb64:	b087      	sub	sp, #28
 801fb66:	af00      	add	r7, sp, #0
 801fb68:	60f8      	str	r0, [r7, #12]
 801fb6a:	0008      	movs	r0, r1
 801fb6c:	607a      	str	r2, [r7, #4]
 801fb6e:	0019      	movs	r1, r3
 801fb70:	230b      	movs	r3, #11
 801fb72:	18fb      	adds	r3, r7, r3
 801fb74:	1c02      	adds	r2, r0, #0
 801fb76:	701a      	strb	r2, [r3, #0]
 801fb78:	2408      	movs	r4, #8
 801fb7a:	193b      	adds	r3, r7, r4
 801fb7c:	1c0a      	adds	r2, r1, #0
 801fb7e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fb80:	2117      	movs	r1, #23
 801fb82:	187b      	adds	r3, r7, r1
 801fb84:	2200      	movs	r2, #0
 801fb86:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fb88:	2516      	movs	r5, #22
 801fb8a:	197b      	adds	r3, r7, r5
 801fb8c:	2200      	movs	r2, #0
 801fb8e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801fb90:	68fa      	ldr	r2, [r7, #12]
 801fb92:	23b0      	movs	r3, #176	@ 0xb0
 801fb94:	009b      	lsls	r3, r3, #2
 801fb96:	58d0      	ldr	r0, [r2, r3]
 801fb98:	193b      	adds	r3, r7, r4
 801fb9a:	881d      	ldrh	r5, [r3, #0]
 801fb9c:	000e      	movs	r6, r1
 801fb9e:	187c      	adds	r4, r7, r1
 801fba0:	687a      	ldr	r2, [r7, #4]
 801fba2:	230b      	movs	r3, #11
 801fba4:	18fb      	adds	r3, r7, r3
 801fba6:	7819      	ldrb	r1, [r3, #0]
 801fba8:	002b      	movs	r3, r5
 801fbaa:	f7f6 f99e 	bl	8015eea <HAL_PCD_EP_Transmit>
 801fbae:	0003      	movs	r3, r0
 801fbb0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fbb2:	2516      	movs	r5, #22
 801fbb4:	197c      	adds	r4, r7, r5
 801fbb6:	19bb      	adds	r3, r7, r6
 801fbb8:	781b      	ldrb	r3, [r3, #0]
 801fbba:	0018      	movs	r0, r3
 801fbbc:	f000 f871 	bl	801fca2 <USBD_Get_USB_Status>
 801fbc0:	0003      	movs	r3, r0
 801fbc2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fbc4:	197b      	adds	r3, r7, r5
 801fbc6:	781b      	ldrb	r3, [r3, #0]
}
 801fbc8:	0018      	movs	r0, r3
 801fbca:	46bd      	mov	sp, r7
 801fbcc:	b007      	add	sp, #28
 801fbce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fbd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801fbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fbd2:	b087      	sub	sp, #28
 801fbd4:	af00      	add	r7, sp, #0
 801fbd6:	60f8      	str	r0, [r7, #12]
 801fbd8:	0008      	movs	r0, r1
 801fbda:	607a      	str	r2, [r7, #4]
 801fbdc:	0019      	movs	r1, r3
 801fbde:	230b      	movs	r3, #11
 801fbe0:	18fb      	adds	r3, r7, r3
 801fbe2:	1c02      	adds	r2, r0, #0
 801fbe4:	701a      	strb	r2, [r3, #0]
 801fbe6:	2408      	movs	r4, #8
 801fbe8:	193b      	adds	r3, r7, r4
 801fbea:	1c0a      	adds	r2, r1, #0
 801fbec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fbee:	2117      	movs	r1, #23
 801fbf0:	187b      	adds	r3, r7, r1
 801fbf2:	2200      	movs	r2, #0
 801fbf4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fbf6:	2516      	movs	r5, #22
 801fbf8:	197b      	adds	r3, r7, r5
 801fbfa:	2200      	movs	r2, #0
 801fbfc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801fbfe:	68fa      	ldr	r2, [r7, #12]
 801fc00:	23b0      	movs	r3, #176	@ 0xb0
 801fc02:	009b      	lsls	r3, r3, #2
 801fc04:	58d0      	ldr	r0, [r2, r3]
 801fc06:	193b      	adds	r3, r7, r4
 801fc08:	881d      	ldrh	r5, [r3, #0]
 801fc0a:	000e      	movs	r6, r1
 801fc0c:	187c      	adds	r4, r7, r1
 801fc0e:	687a      	ldr	r2, [r7, #4]
 801fc10:	230b      	movs	r3, #11
 801fc12:	18fb      	adds	r3, r7, r3
 801fc14:	7819      	ldrb	r1, [r3, #0]
 801fc16:	002b      	movs	r3, r5
 801fc18:	f7f6 f917 	bl	8015e4a <HAL_PCD_EP_Receive>
 801fc1c:	0003      	movs	r3, r0
 801fc1e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fc20:	2516      	movs	r5, #22
 801fc22:	197c      	adds	r4, r7, r5
 801fc24:	19bb      	adds	r3, r7, r6
 801fc26:	781b      	ldrb	r3, [r3, #0]
 801fc28:	0018      	movs	r0, r3
 801fc2a:	f000 f83a 	bl	801fca2 <USBD_Get_USB_Status>
 801fc2e:	0003      	movs	r3, r0
 801fc30:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fc32:	197b      	adds	r3, r7, r5
 801fc34:	781b      	ldrb	r3, [r3, #0]
}
 801fc36:	0018      	movs	r0, r3
 801fc38:	46bd      	mov	sp, r7
 801fc3a:	b007      	add	sp, #28
 801fc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fc3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fc3e:	b580      	push	{r7, lr}
 801fc40:	b082      	sub	sp, #8
 801fc42:	af00      	add	r7, sp, #0
 801fc44:	6078      	str	r0, [r7, #4]
 801fc46:	000a      	movs	r2, r1
 801fc48:	1cfb      	adds	r3, r7, #3
 801fc4a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801fc4c:	687a      	ldr	r2, [r7, #4]
 801fc4e:	23b0      	movs	r3, #176	@ 0xb0
 801fc50:	009b      	lsls	r3, r3, #2
 801fc52:	58d2      	ldr	r2, [r2, r3]
 801fc54:	1cfb      	adds	r3, r7, #3
 801fc56:	781b      	ldrb	r3, [r3, #0]
 801fc58:	0019      	movs	r1, r3
 801fc5a:	0010      	movs	r0, r2
 801fc5c:	f7f6 f92c 	bl	8015eb8 <HAL_PCD_EP_GetRxCount>
 801fc60:	0003      	movs	r3, r0
}
 801fc62:	0018      	movs	r0, r3
 801fc64:	46bd      	mov	sp, r7
 801fc66:	b002      	add	sp, #8
 801fc68:	bd80      	pop	{r7, pc}
	...

0801fc6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801fc6c:	b580      	push	{r7, lr}
 801fc6e:	b082      	sub	sp, #8
 801fc70:	af00      	add	r7, sp, #0
 801fc72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801fc74:	4b02      	ldr	r3, [pc, #8]	@ (801fc80 <USBD_static_malloc+0x14>)
}
 801fc76:	0018      	movs	r0, r3
 801fc78:	46bd      	mov	sp, r7
 801fc7a:	b002      	add	sp, #8
 801fc7c:	bd80      	pop	{r7, pc}
 801fc7e:	46c0      	nop			@ (mov r8, r8)
 801fc80:	20003214 	.word	0x20003214

0801fc84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801fc84:	b580      	push	{r7, lr}
 801fc86:	b082      	sub	sp, #8
 801fc88:	af00      	add	r7, sp, #0
 801fc8a:	6078      	str	r0, [r7, #4]

}
 801fc8c:	46c0      	nop			@ (mov r8, r8)
 801fc8e:	46bd      	mov	sp, r7
 801fc90:	b002      	add	sp, #8
 801fc92:	bd80      	pop	{r7, pc}

0801fc94 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801fc94:	b580      	push	{r7, lr}
 801fc96:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801fc98:	f7ea f8a4 	bl	8009de4 <SystemClock_Config>
}
 801fc9c:	46c0      	nop			@ (mov r8, r8)
 801fc9e:	46bd      	mov	sp, r7
 801fca0:	bd80      	pop	{r7, pc}

0801fca2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801fca2:	b580      	push	{r7, lr}
 801fca4:	b084      	sub	sp, #16
 801fca6:	af00      	add	r7, sp, #0
 801fca8:	0002      	movs	r2, r0
 801fcaa:	1dfb      	adds	r3, r7, #7
 801fcac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fcae:	230f      	movs	r3, #15
 801fcb0:	18fb      	adds	r3, r7, r3
 801fcb2:	2200      	movs	r2, #0
 801fcb4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801fcb6:	1dfb      	adds	r3, r7, #7
 801fcb8:	781b      	ldrb	r3, [r3, #0]
 801fcba:	2b03      	cmp	r3, #3
 801fcbc:	d017      	beq.n	801fcee <USBD_Get_USB_Status+0x4c>
 801fcbe:	dc1b      	bgt.n	801fcf8 <USBD_Get_USB_Status+0x56>
 801fcc0:	2b02      	cmp	r3, #2
 801fcc2:	d00f      	beq.n	801fce4 <USBD_Get_USB_Status+0x42>
 801fcc4:	dc18      	bgt.n	801fcf8 <USBD_Get_USB_Status+0x56>
 801fcc6:	2b00      	cmp	r3, #0
 801fcc8:	d002      	beq.n	801fcd0 <USBD_Get_USB_Status+0x2e>
 801fcca:	2b01      	cmp	r3, #1
 801fccc:	d005      	beq.n	801fcda <USBD_Get_USB_Status+0x38>
 801fcce:	e013      	b.n	801fcf8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801fcd0:	230f      	movs	r3, #15
 801fcd2:	18fb      	adds	r3, r7, r3
 801fcd4:	2200      	movs	r2, #0
 801fcd6:	701a      	strb	r2, [r3, #0]
    break;
 801fcd8:	e013      	b.n	801fd02 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801fcda:	230f      	movs	r3, #15
 801fcdc:	18fb      	adds	r3, r7, r3
 801fcde:	2202      	movs	r2, #2
 801fce0:	701a      	strb	r2, [r3, #0]
    break;
 801fce2:	e00e      	b.n	801fd02 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801fce4:	230f      	movs	r3, #15
 801fce6:	18fb      	adds	r3, r7, r3
 801fce8:	2201      	movs	r2, #1
 801fcea:	701a      	strb	r2, [r3, #0]
    break;
 801fcec:	e009      	b.n	801fd02 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801fcee:	230f      	movs	r3, #15
 801fcf0:	18fb      	adds	r3, r7, r3
 801fcf2:	2202      	movs	r2, #2
 801fcf4:	701a      	strb	r2, [r3, #0]
    break;
 801fcf6:	e004      	b.n	801fd02 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801fcf8:	230f      	movs	r3, #15
 801fcfa:	18fb      	adds	r3, r7, r3
 801fcfc:	2202      	movs	r2, #2
 801fcfe:	701a      	strb	r2, [r3, #0]
    break;
 801fd00:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801fd02:	230f      	movs	r3, #15
 801fd04:	18fb      	adds	r3, r7, r3
 801fd06:	781b      	ldrb	r3, [r3, #0]
}
 801fd08:	0018      	movs	r0, r3
 801fd0a:	46bd      	mov	sp, r7
 801fd0c:	b004      	add	sp, #16
 801fd0e:	bd80      	pop	{r7, pc}

0801fd10 <arm_cfft_radix4by2_q31>:
 801fd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd12:	465f      	mov	r7, fp
 801fd14:	4656      	mov	r6, sl
 801fd16:	464d      	mov	r5, r9
 801fd18:	4644      	mov	r4, r8
 801fd1a:	000b      	movs	r3, r1
 801fd1c:	b4f0      	push	{r4, r5, r6, r7}
 801fd1e:	085b      	lsrs	r3, r3, #1
 801fd20:	b08f      	sub	sp, #60	@ 0x3c
 801fd22:	910a      	str	r1, [sp, #40]	@ 0x28
 801fd24:	0007      	movs	r7, r0
 801fd26:	9009      	str	r0, [sp, #36]	@ 0x24
 801fd28:	0011      	movs	r1, r2
 801fd2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801fd2c:	930c      	str	r3, [sp, #48]	@ 0x30
 801fd2e:	2b00      	cmp	r3, #0
 801fd30:	d100      	bne.n	801fd34 <arm_cfft_radix4by2_q31+0x24>
 801fd32:	e0a0      	b.n	801fe76 <arm_cfft_radix4by2_q31+0x166>
 801fd34:	0002      	movs	r2, r0
 801fd36:	00db      	lsls	r3, r3, #3
 801fd38:	3204      	adds	r2, #4
 801fd3a:	4691      	mov	r9, r2
 801fd3c:	4698      	mov	r8, r3
 801fd3e:	000a      	movs	r2, r1
 801fd40:	464e      	mov	r6, r9
 801fd42:	4442      	add	r2, r8
 801fd44:	4699      	mov	r9, r3
 801fd46:	4688      	mov	r8, r1
 801fd48:	9208      	str	r2, [sp, #32]
 801fd4a:	900d      	str	r0, [sp, #52]	@ 0x34
 801fd4c:	4643      	mov	r3, r8
 801fd4e:	681b      	ldr	r3, [r3, #0]
 801fd50:	469b      	mov	fp, r3
 801fd52:	4643      	mov	r3, r8
 801fd54:	685b      	ldr	r3, [r3, #4]
 801fd56:	469a      	mov	sl, r3
 801fd58:	683b      	ldr	r3, [r7, #0]
 801fd5a:	109c      	asrs	r4, r3, #2
 801fd5c:	464b      	mov	r3, r9
 801fd5e:	58fb      	ldr	r3, [r7, r3]
 801fd60:	109a      	asrs	r2, r3, #2
 801fd62:	18a3      	adds	r3, r4, r2
 801fd64:	603b      	str	r3, [r7, #0]
 801fd66:	6833      	ldr	r3, [r6, #0]
 801fd68:	1aa4      	subs	r4, r4, r2
 801fd6a:	109d      	asrs	r5, r3, #2
 801fd6c:	464b      	mov	r3, r9
 801fd6e:	58f3      	ldr	r3, [r6, r3]
 801fd70:	17e2      	asrs	r2, r4, #31
 801fd72:	109b      	asrs	r3, r3, #2
 801fd74:	18e9      	adds	r1, r5, r3
 801fd76:	6031      	str	r1, [r6, #0]
 801fd78:	0011      	movs	r1, r2
 801fd7a:	465a      	mov	r2, fp
 801fd7c:	17d2      	asrs	r2, r2, #31
 801fd7e:	0010      	movs	r0, r2
 801fd80:	4652      	mov	r2, sl
 801fd82:	1aed      	subs	r5, r5, r3
 801fd84:	17eb      	asrs	r3, r5, #31
 801fd86:	17d2      	asrs	r2, r2, #31
 801fd88:	9307      	str	r3, [sp, #28]
 801fd8a:	9204      	str	r2, [sp, #16]
 801fd8c:	0003      	movs	r3, r0
 801fd8e:	465a      	mov	r2, fp
 801fd90:	9006      	str	r0, [sp, #24]
 801fd92:	0020      	movs	r0, r4
 801fd94:	9105      	str	r1, [sp, #20]
 801fd96:	f7e0 fc13 	bl	80005c0 <__aeabi_lmul>
 801fd9a:	2280      	movs	r2, #128	@ 0x80
 801fd9c:	2300      	movs	r3, #0
 801fd9e:	0612      	lsls	r2, r2, #24
 801fda0:	1880      	adds	r0, r0, r2
 801fda2:	4159      	adcs	r1, r3
 801fda4:	2300      	movs	r3, #0
 801fda6:	9101      	str	r1, [sp, #4]
 801fda8:	9300      	str	r3, [sp, #0]
 801fdaa:	4652      	mov	r2, sl
 801fdac:	9b04      	ldr	r3, [sp, #16]
 801fdae:	0028      	movs	r0, r5
 801fdb0:	17e9      	asrs	r1, r5, #31
 801fdb2:	f7e0 fc05 	bl	80005c0 <__aeabi_lmul>
 801fdb6:	9a00      	ldr	r2, [sp, #0]
 801fdb8:	9b01      	ldr	r3, [sp, #4]
 801fdba:	1880      	adds	r0, r0, r2
 801fdbc:	4159      	adcs	r1, r3
 801fdbe:	2280      	movs	r2, #128	@ 0x80
 801fdc0:	2300      	movs	r3, #0
 801fdc2:	0612      	lsls	r2, r2, #24
 801fdc4:	1880      	adds	r0, r0, r2
 801fdc6:	4159      	adcs	r1, r3
 801fdc8:	464a      	mov	r2, r9
 801fdca:	004b      	lsls	r3, r1, #1
 801fdcc:	50bb      	str	r3, [r7, r2]
 801fdce:	4658      	mov	r0, fp
 801fdd0:	002a      	movs	r2, r5
 801fdd2:	9b07      	ldr	r3, [sp, #28]
 801fdd4:	9906      	ldr	r1, [sp, #24]
 801fdd6:	f7e0 fbf3 	bl	80005c0 <__aeabi_lmul>
 801fdda:	2280      	movs	r2, #128	@ 0x80
 801fddc:	2300      	movs	r3, #0
 801fdde:	0612      	lsls	r2, r2, #24
 801fde0:	1880      	adds	r0, r0, r2
 801fde2:	4159      	adcs	r1, r3
 801fde4:	2000      	movs	r0, #0
 801fde6:	9103      	str	r1, [sp, #12]
 801fde8:	9002      	str	r0, [sp, #8]
 801fdea:	4652      	mov	r2, sl
 801fdec:	9b04      	ldr	r3, [sp, #16]
 801fdee:	0020      	movs	r0, r4
 801fdf0:	9905      	ldr	r1, [sp, #20]
 801fdf2:	f7e0 fbe5 	bl	80005c0 <__aeabi_lmul>
 801fdf6:	9a02      	ldr	r2, [sp, #8]
 801fdf8:	9b03      	ldr	r3, [sp, #12]
 801fdfa:	1a12      	subs	r2, r2, r0
 801fdfc:	418b      	sbcs	r3, r1
 801fdfe:	2080      	movs	r0, #128	@ 0x80
 801fe00:	2100      	movs	r1, #0
 801fe02:	0600      	lsls	r0, r0, #24
 801fe04:	1812      	adds	r2, r2, r0
 801fe06:	414b      	adcs	r3, r1
 801fe08:	464a      	mov	r2, r9
 801fe0a:	005b      	lsls	r3, r3, #1
 801fe0c:	50b3      	str	r3, [r6, r2]
 801fe0e:	2308      	movs	r3, #8
 801fe10:	469c      	mov	ip, r3
 801fe12:	9b08      	ldr	r3, [sp, #32]
 801fe14:	44e0      	add	r8, ip
 801fe16:	3708      	adds	r7, #8
 801fe18:	3608      	adds	r6, #8
 801fe1a:	4598      	cmp	r8, r3
 801fe1c:	d196      	bne.n	801fd4c <arm_cfft_radix4by2_q31+0x3c>
 801fe1e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801fe20:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801fe22:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fe24:	2302      	movs	r3, #2
 801fe26:	003a      	movs	r2, r7
 801fe28:	0029      	movs	r1, r5
 801fe2a:	0020      	movs	r0, r4
 801fe2c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801fe2e:	f000 f957 	bl	80200e0 <arm_radix4_butterfly_q31>
 801fe32:	46a4      	mov	ip, r4
 801fe34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fe36:	2302      	movs	r3, #2
 801fe38:	0088      	lsls	r0, r1, #2
 801fe3a:	4460      	add	r0, ip
 801fe3c:	003a      	movs	r2, r7
 801fe3e:	0029      	movs	r1, r5
 801fe40:	f000 f94e 	bl	80200e0 <arm_radix4_butterfly_q31>
 801fe44:	46a4      	mov	ip, r4
 801fe46:	0128      	lsls	r0, r5, #4
 801fe48:	4460      	add	r0, ip
 801fe4a:	6833      	ldr	r3, [r6, #0]
 801fe4c:	005b      	lsls	r3, r3, #1
 801fe4e:	6033      	str	r3, [r6, #0]
 801fe50:	6873      	ldr	r3, [r6, #4]
 801fe52:	005b      	lsls	r3, r3, #1
 801fe54:	6073      	str	r3, [r6, #4]
 801fe56:	68b3      	ldr	r3, [r6, #8]
 801fe58:	005b      	lsls	r3, r3, #1
 801fe5a:	60b3      	str	r3, [r6, #8]
 801fe5c:	68f3      	ldr	r3, [r6, #12]
 801fe5e:	005b      	lsls	r3, r3, #1
 801fe60:	60f3      	str	r3, [r6, #12]
 801fe62:	3610      	adds	r6, #16
 801fe64:	42b0      	cmp	r0, r6
 801fe66:	d1f0      	bne.n	801fe4a <arm_cfft_radix4by2_q31+0x13a>
 801fe68:	b00f      	add	sp, #60	@ 0x3c
 801fe6a:	bc3c      	pop	{r2, r3, r4, r5}
 801fe6c:	4690      	mov	r8, r2
 801fe6e:	4699      	mov	r9, r3
 801fe70:	46a2      	mov	sl, r4
 801fe72:	46ab      	mov	fp, r5
 801fe74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe76:	2302      	movs	r3, #2
 801fe78:	2100      	movs	r1, #0
 801fe7a:	0015      	movs	r5, r2
 801fe7c:	f000 f930 	bl	80200e0 <arm_radix4_butterfly_q31>
 801fe80:	46bc      	mov	ip, r7
 801fe82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fe84:	002a      	movs	r2, r5
 801fe86:	0098      	lsls	r0, r3, #2
 801fe88:	4460      	add	r0, ip
 801fe8a:	2302      	movs	r3, #2
 801fe8c:	2100      	movs	r1, #0
 801fe8e:	f000 f927 	bl	80200e0 <arm_radix4_butterfly_q31>
 801fe92:	e7e9      	b.n	801fe68 <arm_cfft_radix4by2_q31+0x158>

0801fe94 <arm_cfft_radix4by2_inverse_q31>:
 801fe94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe96:	465f      	mov	r7, fp
 801fe98:	4656      	mov	r6, sl
 801fe9a:	464d      	mov	r5, r9
 801fe9c:	4644      	mov	r4, r8
 801fe9e:	000b      	movs	r3, r1
 801fea0:	b4f0      	push	{r4, r5, r6, r7}
 801fea2:	085b      	lsrs	r3, r3, #1
 801fea4:	b08f      	sub	sp, #60	@ 0x3c
 801fea6:	910a      	str	r1, [sp, #40]	@ 0x28
 801fea8:	0007      	movs	r7, r0
 801feaa:	9009      	str	r0, [sp, #36]	@ 0x24
 801feac:	0011      	movs	r1, r2
 801feae:	920b      	str	r2, [sp, #44]	@ 0x2c
 801feb0:	930c      	str	r3, [sp, #48]	@ 0x30
 801feb2:	2b00      	cmp	r3, #0
 801feb4:	d100      	bne.n	801feb8 <arm_cfft_radix4by2_inverse_q31+0x24>
 801feb6:	e0a0      	b.n	801fffa <arm_cfft_radix4by2_inverse_q31+0x166>
 801feb8:	0002      	movs	r2, r0
 801feba:	00db      	lsls	r3, r3, #3
 801febc:	3204      	adds	r2, #4
 801febe:	4691      	mov	r9, r2
 801fec0:	4698      	mov	r8, r3
 801fec2:	000a      	movs	r2, r1
 801fec4:	464e      	mov	r6, r9
 801fec6:	4442      	add	r2, r8
 801fec8:	4699      	mov	r9, r3
 801feca:	4688      	mov	r8, r1
 801fecc:	9208      	str	r2, [sp, #32]
 801fece:	900d      	str	r0, [sp, #52]	@ 0x34
 801fed0:	4643      	mov	r3, r8
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	469b      	mov	fp, r3
 801fed6:	4643      	mov	r3, r8
 801fed8:	685b      	ldr	r3, [r3, #4]
 801feda:	469a      	mov	sl, r3
 801fedc:	683b      	ldr	r3, [r7, #0]
 801fede:	109c      	asrs	r4, r3, #2
 801fee0:	464b      	mov	r3, r9
 801fee2:	58fb      	ldr	r3, [r7, r3]
 801fee4:	109a      	asrs	r2, r3, #2
 801fee6:	18a3      	adds	r3, r4, r2
 801fee8:	603b      	str	r3, [r7, #0]
 801feea:	6833      	ldr	r3, [r6, #0]
 801feec:	1aa4      	subs	r4, r4, r2
 801feee:	109d      	asrs	r5, r3, #2
 801fef0:	464b      	mov	r3, r9
 801fef2:	58f3      	ldr	r3, [r6, r3]
 801fef4:	17e2      	asrs	r2, r4, #31
 801fef6:	109b      	asrs	r3, r3, #2
 801fef8:	18e9      	adds	r1, r5, r3
 801fefa:	6031      	str	r1, [r6, #0]
 801fefc:	0011      	movs	r1, r2
 801fefe:	465a      	mov	r2, fp
 801ff00:	17d2      	asrs	r2, r2, #31
 801ff02:	0010      	movs	r0, r2
 801ff04:	4652      	mov	r2, sl
 801ff06:	1aed      	subs	r5, r5, r3
 801ff08:	17eb      	asrs	r3, r5, #31
 801ff0a:	17d2      	asrs	r2, r2, #31
 801ff0c:	9307      	str	r3, [sp, #28]
 801ff0e:	9204      	str	r2, [sp, #16]
 801ff10:	0003      	movs	r3, r0
 801ff12:	465a      	mov	r2, fp
 801ff14:	9006      	str	r0, [sp, #24]
 801ff16:	0020      	movs	r0, r4
 801ff18:	9105      	str	r1, [sp, #20]
 801ff1a:	f7e0 fb51 	bl	80005c0 <__aeabi_lmul>
 801ff1e:	2280      	movs	r2, #128	@ 0x80
 801ff20:	2300      	movs	r3, #0
 801ff22:	0612      	lsls	r2, r2, #24
 801ff24:	1880      	adds	r0, r0, r2
 801ff26:	4159      	adcs	r1, r3
 801ff28:	2300      	movs	r3, #0
 801ff2a:	9101      	str	r1, [sp, #4]
 801ff2c:	9300      	str	r3, [sp, #0]
 801ff2e:	4652      	mov	r2, sl
 801ff30:	9b04      	ldr	r3, [sp, #16]
 801ff32:	0028      	movs	r0, r5
 801ff34:	17e9      	asrs	r1, r5, #31
 801ff36:	f7e0 fb43 	bl	80005c0 <__aeabi_lmul>
 801ff3a:	9a00      	ldr	r2, [sp, #0]
 801ff3c:	9b01      	ldr	r3, [sp, #4]
 801ff3e:	1a12      	subs	r2, r2, r0
 801ff40:	418b      	sbcs	r3, r1
 801ff42:	2080      	movs	r0, #128	@ 0x80
 801ff44:	2100      	movs	r1, #0
 801ff46:	0600      	lsls	r0, r0, #24
 801ff48:	1812      	adds	r2, r2, r0
 801ff4a:	414b      	adcs	r3, r1
 801ff4c:	464a      	mov	r2, r9
 801ff4e:	005b      	lsls	r3, r3, #1
 801ff50:	50bb      	str	r3, [r7, r2]
 801ff52:	4658      	mov	r0, fp
 801ff54:	002a      	movs	r2, r5
 801ff56:	9b07      	ldr	r3, [sp, #28]
 801ff58:	9906      	ldr	r1, [sp, #24]
 801ff5a:	f7e0 fb31 	bl	80005c0 <__aeabi_lmul>
 801ff5e:	2280      	movs	r2, #128	@ 0x80
 801ff60:	2300      	movs	r3, #0
 801ff62:	0612      	lsls	r2, r2, #24
 801ff64:	1880      	adds	r0, r0, r2
 801ff66:	4159      	adcs	r1, r3
 801ff68:	2000      	movs	r0, #0
 801ff6a:	9103      	str	r1, [sp, #12]
 801ff6c:	9002      	str	r0, [sp, #8]
 801ff6e:	4652      	mov	r2, sl
 801ff70:	9b04      	ldr	r3, [sp, #16]
 801ff72:	0020      	movs	r0, r4
 801ff74:	9905      	ldr	r1, [sp, #20]
 801ff76:	f7e0 fb23 	bl	80005c0 <__aeabi_lmul>
 801ff7a:	9b02      	ldr	r3, [sp, #8]
 801ff7c:	9c03      	ldr	r4, [sp, #12]
 801ff7e:	18c0      	adds	r0, r0, r3
 801ff80:	4161      	adcs	r1, r4
 801ff82:	2380      	movs	r3, #128	@ 0x80
 801ff84:	2400      	movs	r4, #0
 801ff86:	061b      	lsls	r3, r3, #24
 801ff88:	18c0      	adds	r0, r0, r3
 801ff8a:	4161      	adcs	r1, r4
 801ff8c:	464a      	mov	r2, r9
 801ff8e:	004b      	lsls	r3, r1, #1
 801ff90:	50b3      	str	r3, [r6, r2]
 801ff92:	2308      	movs	r3, #8
 801ff94:	469c      	mov	ip, r3
 801ff96:	9b08      	ldr	r3, [sp, #32]
 801ff98:	44e0      	add	r8, ip
 801ff9a:	3708      	adds	r7, #8
 801ff9c:	3608      	adds	r6, #8
 801ff9e:	4598      	cmp	r8, r3
 801ffa0:	d196      	bne.n	801fed0 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801ffa2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801ffa4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ffa6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ffa8:	2302      	movs	r3, #2
 801ffaa:	003a      	movs	r2, r7
 801ffac:	0029      	movs	r1, r5
 801ffae:	0020      	movs	r0, r4
 801ffb0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801ffb2:	f000 fb3b 	bl	802062c <arm_radix4_butterfly_inverse_q31>
 801ffb6:	46a4      	mov	ip, r4
 801ffb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ffba:	2302      	movs	r3, #2
 801ffbc:	0088      	lsls	r0, r1, #2
 801ffbe:	4460      	add	r0, ip
 801ffc0:	003a      	movs	r2, r7
 801ffc2:	0029      	movs	r1, r5
 801ffc4:	f000 fb32 	bl	802062c <arm_radix4_butterfly_inverse_q31>
 801ffc8:	46a4      	mov	ip, r4
 801ffca:	0128      	lsls	r0, r5, #4
 801ffcc:	4460      	add	r0, ip
 801ffce:	6833      	ldr	r3, [r6, #0]
 801ffd0:	005b      	lsls	r3, r3, #1
 801ffd2:	6033      	str	r3, [r6, #0]
 801ffd4:	6873      	ldr	r3, [r6, #4]
 801ffd6:	005b      	lsls	r3, r3, #1
 801ffd8:	6073      	str	r3, [r6, #4]
 801ffda:	68b3      	ldr	r3, [r6, #8]
 801ffdc:	005b      	lsls	r3, r3, #1
 801ffde:	60b3      	str	r3, [r6, #8]
 801ffe0:	68f3      	ldr	r3, [r6, #12]
 801ffe2:	005b      	lsls	r3, r3, #1
 801ffe4:	60f3      	str	r3, [r6, #12]
 801ffe6:	3610      	adds	r6, #16
 801ffe8:	42b0      	cmp	r0, r6
 801ffea:	d1f0      	bne.n	801ffce <arm_cfft_radix4by2_inverse_q31+0x13a>
 801ffec:	b00f      	add	sp, #60	@ 0x3c
 801ffee:	bc3c      	pop	{r2, r3, r4, r5}
 801fff0:	4690      	mov	r8, r2
 801fff2:	4699      	mov	r9, r3
 801fff4:	46a2      	mov	sl, r4
 801fff6:	46ab      	mov	fp, r5
 801fff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fffa:	2302      	movs	r3, #2
 801fffc:	2100      	movs	r1, #0
 801fffe:	0015      	movs	r5, r2
 8020000:	f000 fb14 	bl	802062c <arm_radix4_butterfly_inverse_q31>
 8020004:	46bc      	mov	ip, r7
 8020006:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020008:	002a      	movs	r2, r5
 802000a:	0098      	lsls	r0, r3, #2
 802000c:	4460      	add	r0, ip
 802000e:	2302      	movs	r3, #2
 8020010:	2100      	movs	r1, #0
 8020012:	f000 fb0b 	bl	802062c <arm_radix4_butterfly_inverse_q31>
 8020016:	e7e9      	b.n	801ffec <arm_cfft_radix4by2_inverse_q31+0x158>

08020018 <arm_cfft_q31>:
 8020018:	b570      	push	{r4, r5, r6, lr}
 802001a:	001e      	movs	r6, r3
 802001c:	2380      	movs	r3, #128	@ 0x80
 802001e:	000d      	movs	r5, r1
 8020020:	0004      	movs	r4, r0
 8020022:	8801      	ldrh	r1, [r0, #0]
 8020024:	005b      	lsls	r3, r3, #1
 8020026:	2a01      	cmp	r2, #1
 8020028:	d028      	beq.n	802007c <arm_cfft_q31+0x64>
 802002a:	4299      	cmp	r1, r3
 802002c:	d020      	beq.n	8020070 <arm_cfft_q31+0x58>
 802002e:	d812      	bhi.n	8020056 <arm_cfft_q31+0x3e>
 8020030:	2920      	cmp	r1, #32
 8020032:	d004      	beq.n	802003e <arm_cfft_q31+0x26>
 8020034:	d949      	bls.n	80200ca <arm_cfft_q31+0xb2>
 8020036:	2940      	cmp	r1, #64	@ 0x40
 8020038:	d01a      	beq.n	8020070 <arm_cfft_q31+0x58>
 802003a:	2980      	cmp	r1, #128	@ 0x80
 802003c:	d103      	bne.n	8020046 <arm_cfft_q31+0x2e>
 802003e:	6862      	ldr	r2, [r4, #4]
 8020040:	0028      	movs	r0, r5
 8020042:	f7ff fe65 	bl	801fd10 <arm_cfft_radix4by2_q31>
 8020046:	2e00      	cmp	r6, #0
 8020048:	d004      	beq.n	8020054 <arm_cfft_q31+0x3c>
 802004a:	68a2      	ldr	r2, [r4, #8]
 802004c:	89a1      	ldrh	r1, [r4, #12]
 802004e:	0028      	movs	r0, r5
 8020050:	f7e0 f85a 	bl	8000108 <arm_bitreversal_32>
 8020054:	bd70      	pop	{r4, r5, r6, pc}
 8020056:	2380      	movs	r3, #128	@ 0x80
 8020058:	00db      	lsls	r3, r3, #3
 802005a:	4299      	cmp	r1, r3
 802005c:	d008      	beq.n	8020070 <arm_cfft_q31+0x58>
 802005e:	d92f      	bls.n	80200c0 <arm_cfft_q31+0xa8>
 8020060:	2380      	movs	r3, #128	@ 0x80
 8020062:	011b      	lsls	r3, r3, #4
 8020064:	4299      	cmp	r1, r3
 8020066:	d0ea      	beq.n	802003e <arm_cfft_q31+0x26>
 8020068:	2380      	movs	r3, #128	@ 0x80
 802006a:	015b      	lsls	r3, r3, #5
 802006c:	4299      	cmp	r1, r3
 802006e:	d1ea      	bne.n	8020046 <arm_cfft_q31+0x2e>
 8020070:	2301      	movs	r3, #1
 8020072:	6862      	ldr	r2, [r4, #4]
 8020074:	0028      	movs	r0, r5
 8020076:	f000 f833 	bl	80200e0 <arm_radix4_butterfly_q31>
 802007a:	e7e4      	b.n	8020046 <arm_cfft_q31+0x2e>
 802007c:	4299      	cmp	r1, r3
 802007e:	d019      	beq.n	80200b4 <arm_cfft_q31+0x9c>
 8020080:	d80b      	bhi.n	802009a <arm_cfft_q31+0x82>
 8020082:	2920      	cmp	r1, #32
 8020084:	d004      	beq.n	8020090 <arm_cfft_q31+0x78>
 8020086:	d928      	bls.n	80200da <arm_cfft_q31+0xc2>
 8020088:	2940      	cmp	r1, #64	@ 0x40
 802008a:	d013      	beq.n	80200b4 <arm_cfft_q31+0x9c>
 802008c:	2980      	cmp	r1, #128	@ 0x80
 802008e:	d1da      	bne.n	8020046 <arm_cfft_q31+0x2e>
 8020090:	6862      	ldr	r2, [r4, #4]
 8020092:	0028      	movs	r0, r5
 8020094:	f7ff fefe 	bl	801fe94 <arm_cfft_radix4by2_inverse_q31>
 8020098:	e7d5      	b.n	8020046 <arm_cfft_q31+0x2e>
 802009a:	2380      	movs	r3, #128	@ 0x80
 802009c:	00db      	lsls	r3, r3, #3
 802009e:	4299      	cmp	r1, r3
 80200a0:	d008      	beq.n	80200b4 <arm_cfft_q31+0x9c>
 80200a2:	d915      	bls.n	80200d0 <arm_cfft_q31+0xb8>
 80200a4:	2380      	movs	r3, #128	@ 0x80
 80200a6:	011b      	lsls	r3, r3, #4
 80200a8:	4299      	cmp	r1, r3
 80200aa:	d0f1      	beq.n	8020090 <arm_cfft_q31+0x78>
 80200ac:	2380      	movs	r3, #128	@ 0x80
 80200ae:	015b      	lsls	r3, r3, #5
 80200b0:	4299      	cmp	r1, r3
 80200b2:	d1c8      	bne.n	8020046 <arm_cfft_q31+0x2e>
 80200b4:	2301      	movs	r3, #1
 80200b6:	6862      	ldr	r2, [r4, #4]
 80200b8:	0028      	movs	r0, r5
 80200ba:	f000 fab7 	bl	802062c <arm_radix4_butterfly_inverse_q31>
 80200be:	e7c2      	b.n	8020046 <arm_cfft_q31+0x2e>
 80200c0:	2380      	movs	r3, #128	@ 0x80
 80200c2:	009b      	lsls	r3, r3, #2
 80200c4:	4299      	cmp	r1, r3
 80200c6:	d0ba      	beq.n	802003e <arm_cfft_q31+0x26>
 80200c8:	e7bd      	b.n	8020046 <arm_cfft_q31+0x2e>
 80200ca:	2910      	cmp	r1, #16
 80200cc:	d1bb      	bne.n	8020046 <arm_cfft_q31+0x2e>
 80200ce:	e7cf      	b.n	8020070 <arm_cfft_q31+0x58>
 80200d0:	2380      	movs	r3, #128	@ 0x80
 80200d2:	009b      	lsls	r3, r3, #2
 80200d4:	4299      	cmp	r1, r3
 80200d6:	d0db      	beq.n	8020090 <arm_cfft_q31+0x78>
 80200d8:	e7b5      	b.n	8020046 <arm_cfft_q31+0x2e>
 80200da:	2910      	cmp	r1, #16
 80200dc:	d1b3      	bne.n	8020046 <arm_cfft_q31+0x2e>
 80200de:	e7e9      	b.n	80200b4 <arm_cfft_q31+0x9c>

080200e0 <arm_radix4_butterfly_q31>:
 80200e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80200e2:	464d      	mov	r5, r9
 80200e4:	4644      	mov	r4, r8
 80200e6:	465f      	mov	r7, fp
 80200e8:	4656      	mov	r6, sl
 80200ea:	469c      	mov	ip, r3
 80200ec:	b4f0      	push	{r4, r5, r6, r7}
 80200ee:	b0a7      	sub	sp, #156	@ 0x9c
 80200f0:	9114      	str	r1, [sp, #80]	@ 0x50
 80200f2:	0889      	lsrs	r1, r1, #2
 80200f4:	9310      	str	r3, [sp, #64]	@ 0x40
 80200f6:	00cb      	lsls	r3, r1, #3
 80200f8:	0015      	movs	r5, r2
 80200fa:	9223      	str	r2, [sp, #140]	@ 0x8c
 80200fc:	18c2      	adds	r2, r0, r3
 80200fe:	000c      	movs	r4, r1
 8020100:	469a      	mov	sl, r3
 8020102:	9124      	str	r1, [sp, #144]	@ 0x90
 8020104:	18d1      	adds	r1, r2, r3
 8020106:	4663      	mov	r3, ip
 8020108:	468b      	mov	fp, r1
 802010a:	0119      	lsls	r1, r3, #4
 802010c:	910d      	str	r1, [sp, #52]	@ 0x34
 802010e:	00d9      	lsls	r1, r3, #3
 8020110:	005b      	lsls	r3, r3, #1
 8020112:	4463      	add	r3, ip
 8020114:	910e      	str	r1, [sp, #56]	@ 0x38
 8020116:	00d9      	lsls	r1, r3, #3
 8020118:	465b      	mov	r3, fp
 802011a:	44da      	add	sl, fp
 802011c:	4690      	mov	r8, r2
 802011e:	4683      	mov	fp, r0
 8020120:	4699      	mov	r9, r3
 8020122:	9022      	str	r0, [sp, #136]	@ 0x88
 8020124:	9025      	str	r0, [sp, #148]	@ 0x94
 8020126:	910f      	str	r1, [sp, #60]	@ 0x3c
 8020128:	9502      	str	r5, [sp, #8]
 802012a:	9500      	str	r5, [sp, #0]
 802012c:	9501      	str	r5, [sp, #4]
 802012e:	9407      	str	r4, [sp, #28]
 8020130:	465b      	mov	r3, fp
 8020132:	681b      	ldr	r3, [r3, #0]
 8020134:	4642      	mov	r2, r8
 8020136:	111c      	asrs	r4, r3, #4
 8020138:	464b      	mov	r3, r9
 802013a:	4658      	mov	r0, fp
 802013c:	681b      	ldr	r3, [r3, #0]
 802013e:	6812      	ldr	r2, [r2, #0]
 8020140:	111b      	asrs	r3, r3, #4
 8020142:	18e7      	adds	r7, r4, r3
 8020144:	1ae3      	subs	r3, r4, r3
 8020146:	1114      	asrs	r4, r2, #4
 8020148:	4652      	mov	r2, sl
 802014a:	6840      	ldr	r0, [r0, #4]
 802014c:	6812      	ldr	r2, [r2, #0]
 802014e:	1105      	asrs	r5, r0, #4
 8020150:	4648      	mov	r0, r9
 8020152:	9303      	str	r3, [sp, #12]
 8020154:	1113      	asrs	r3, r2, #4
 8020156:	18e2      	adds	r2, r4, r3
 8020158:	465c      	mov	r4, fp
 802015a:	6840      	ldr	r0, [r0, #4]
 802015c:	1103      	asrs	r3, r0, #4
 802015e:	18ee      	adds	r6, r5, r3
 8020160:	1ae8      	subs	r0, r5, r3
 8020162:	18bb      	adds	r3, r7, r2
 8020164:	6023      	str	r3, [r4, #0]
 8020166:	4644      	mov	r4, r8
 8020168:	6864      	ldr	r4, [r4, #4]
 802016a:	9004      	str	r0, [sp, #16]
 802016c:	1125      	asrs	r5, r4, #4
 802016e:	4654      	mov	r4, sl
 8020170:	6864      	ldr	r4, [r4, #4]
 8020172:	1123      	asrs	r3, r4, #4
 8020174:	465c      	mov	r4, fp
 8020176:	18eb      	adds	r3, r5, r3
 8020178:	18f1      	adds	r1, r6, r3
 802017a:	6061      	str	r1, [r4, #4]
 802017c:	4655      	mov	r5, sl
 802017e:	4644      	mov	r4, r8
 8020180:	686d      	ldr	r5, [r5, #4]
 8020182:	6864      	ldr	r4, [r4, #4]
 8020184:	1129      	asrs	r1, r5, #4
 8020186:	1124      	asrs	r4, r4, #4
 8020188:	1a64      	subs	r4, r4, r1
 802018a:	4641      	mov	r1, r8
 802018c:	6809      	ldr	r1, [r1, #0]
 802018e:	9405      	str	r4, [sp, #20]
 8020190:	1108      	asrs	r0, r1, #4
 8020192:	4651      	mov	r1, sl
 8020194:	6809      	ldr	r1, [r1, #0]
 8020196:	1abc      	subs	r4, r7, r2
 8020198:	1109      	asrs	r1, r1, #4
 802019a:	1a41      	subs	r1, r0, r1
 802019c:	17e2      	asrs	r2, r4, #31
 802019e:	9106      	str	r1, [sp, #24]
 80201a0:	0011      	movs	r1, r2
 80201a2:	9a01      	ldr	r2, [sp, #4]
 80201a4:	9108      	str	r1, [sp, #32]
 80201a6:	6817      	ldr	r7, [r2, #0]
 80201a8:	17fd      	asrs	r5, r7, #31
 80201aa:	0028      	movs	r0, r5
 80201ac:	1af5      	subs	r5, r6, r3
 80201ae:	17ee      	asrs	r6, r5, #31
 80201b0:	960a      	str	r6, [sp, #40]	@ 0x28
 80201b2:	6856      	ldr	r6, [r2, #4]
 80201b4:	9009      	str	r0, [sp, #36]	@ 0x24
 80201b6:	17f3      	asrs	r3, r6, #31
 80201b8:	003a      	movs	r2, r7
 80201ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80201bc:	0003      	movs	r3, r0
 80201be:	0020      	movs	r0, r4
 80201c0:	f7e0 f9fe 	bl	80005c0 <__aeabi_lmul>
 80201c4:	0032      	movs	r2, r6
 80201c6:	17f3      	asrs	r3, r6, #31
 80201c8:	910c      	str	r1, [sp, #48]	@ 0x30
 80201ca:	0028      	movs	r0, r5
 80201cc:	17e9      	asrs	r1, r5, #31
 80201ce:	f7e0 f9f7 	bl	80005c0 <__aeabi_lmul>
 80201d2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80201d4:	002a      	movs	r2, r5
 80201d6:	4684      	mov	ip, r0
 80201d8:	4640      	mov	r0, r8
 80201da:	4461      	add	r1, ip
 80201dc:	0049      	lsls	r1, r1, #1
 80201de:	6001      	str	r1, [r0, #0]
 80201e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80201e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80201e4:	0038      	movs	r0, r7
 80201e6:	f7e0 f9eb 	bl	80005c0 <__aeabi_lmul>
 80201ea:	0032      	movs	r2, r6
 80201ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80201ee:	000d      	movs	r5, r1
 80201f0:	0020      	movs	r0, r4
 80201f2:	9908      	ldr	r1, [sp, #32]
 80201f4:	f7e0 f9e4 	bl	80005c0 <__aeabi_lmul>
 80201f8:	4646      	mov	r6, r8
 80201fa:	1a6d      	subs	r5, r5, r1
 80201fc:	006d      	lsls	r5, r5, #1
 80201fe:	6075      	str	r5, [r6, #4]
 8020200:	9903      	ldr	r1, [sp, #12]
 8020202:	9d05      	ldr	r5, [sp, #20]
 8020204:	000c      	movs	r4, r1
 8020206:	46ac      	mov	ip, r5
 8020208:	4464      	add	r4, ip
 802020a:	17e6      	asrs	r6, r4, #31
 802020c:	0031      	movs	r1, r6
 802020e:	9b00      	ldr	r3, [sp, #0]
 8020210:	9804      	ldr	r0, [sp, #16]
 8020212:	681e      	ldr	r6, [r3, #0]
 8020214:	17f7      	asrs	r7, r6, #31
 8020216:	9709      	str	r7, [sp, #36]	@ 0x24
 8020218:	9f06      	ldr	r7, [sp, #24]
 802021a:	0032      	movs	r2, r6
 802021c:	1bc7      	subs	r7, r0, r7
 802021e:	17fd      	asrs	r5, r7, #31
 8020220:	950a      	str	r5, [sp, #40]	@ 0x28
 8020222:	685d      	ldr	r5, [r3, #4]
 8020224:	17f3      	asrs	r3, r6, #31
 8020226:	17e8      	asrs	r0, r5, #31
 8020228:	900b      	str	r0, [sp, #44]	@ 0x2c
 802022a:	0020      	movs	r0, r4
 802022c:	9108      	str	r1, [sp, #32]
 802022e:	f7e0 f9c7 	bl	80005c0 <__aeabi_lmul>
 8020232:	002a      	movs	r2, r5
 8020234:	17eb      	asrs	r3, r5, #31
 8020236:	910c      	str	r1, [sp, #48]	@ 0x30
 8020238:	0038      	movs	r0, r7
 802023a:	17f9      	asrs	r1, r7, #31
 802023c:	f7e0 f9c0 	bl	80005c0 <__aeabi_lmul>
 8020240:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8020242:	003a      	movs	r2, r7
 8020244:	4684      	mov	ip, r0
 8020246:	4648      	mov	r0, r9
 8020248:	4461      	add	r1, ip
 802024a:	0049      	lsls	r1, r1, #1
 802024c:	6001      	str	r1, [r0, #0]
 802024e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020250:	0030      	movs	r0, r6
 8020252:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020254:	f7e0 f9b4 	bl	80005c0 <__aeabi_lmul>
 8020258:	002a      	movs	r2, r5
 802025a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802025c:	000e      	movs	r6, r1
 802025e:	0020      	movs	r0, r4
 8020260:	9908      	ldr	r1, [sp, #32]
 8020262:	f7e0 f9ad 	bl	80005c0 <__aeabi_lmul>
 8020266:	464c      	mov	r4, r9
 8020268:	9d05      	ldr	r5, [sp, #20]
 802026a:	1a76      	subs	r6, r6, r1
 802026c:	9903      	ldr	r1, [sp, #12]
 802026e:	0076      	lsls	r6, r6, #1
 8020270:	6066      	str	r6, [r4, #4]
 8020272:	1b4c      	subs	r4, r1, r5
 8020274:	9e06      	ldr	r6, [sp, #24]
 8020276:	17e1      	asrs	r1, r4, #31
 8020278:	9103      	str	r1, [sp, #12]
 802027a:	9902      	ldr	r1, [sp, #8]
 802027c:	46b4      	mov	ip, r6
 802027e:	680f      	ldr	r7, [r1, #0]
 8020280:	9804      	ldr	r0, [sp, #16]
 8020282:	17fd      	asrs	r5, r7, #31
 8020284:	002b      	movs	r3, r5
 8020286:	684e      	ldr	r6, [r1, #4]
 8020288:	4460      	add	r0, ip
 802028a:	0005      	movs	r5, r0
 802028c:	17c0      	asrs	r0, r0, #31
 802028e:	9005      	str	r0, [sp, #20]
 8020290:	17f0      	asrs	r0, r6, #31
 8020292:	9006      	str	r0, [sp, #24]
 8020294:	003a      	movs	r2, r7
 8020296:	0020      	movs	r0, r4
 8020298:	17e1      	asrs	r1, r4, #31
 802029a:	9304      	str	r3, [sp, #16]
 802029c:	f7e0 f990 	bl	80005c0 <__aeabi_lmul>
 80202a0:	0032      	movs	r2, r6
 80202a2:	9108      	str	r1, [sp, #32]
 80202a4:	17f3      	asrs	r3, r6, #31
 80202a6:	0028      	movs	r0, r5
 80202a8:	17e9      	asrs	r1, r5, #31
 80202aa:	f7e0 f989 	bl	80005c0 <__aeabi_lmul>
 80202ae:	9808      	ldr	r0, [sp, #32]
 80202b0:	002a      	movs	r2, r5
 80202b2:	4684      	mov	ip, r0
 80202b4:	4650      	mov	r0, sl
 80202b6:	4461      	add	r1, ip
 80202b8:	0049      	lsls	r1, r1, #1
 80202ba:	6001      	str	r1, [r0, #0]
 80202bc:	9b05      	ldr	r3, [sp, #20]
 80202be:	9904      	ldr	r1, [sp, #16]
 80202c0:	0038      	movs	r0, r7
 80202c2:	f7e0 f97d 	bl	80005c0 <__aeabi_lmul>
 80202c6:	0020      	movs	r0, r4
 80202c8:	2408      	movs	r4, #8
 80202ca:	000d      	movs	r5, r1
 80202cc:	0032      	movs	r2, r6
 80202ce:	9b06      	ldr	r3, [sp, #24]
 80202d0:	9903      	ldr	r1, [sp, #12]
 80202d2:	f7e0 f975 	bl	80005c0 <__aeabi_lmul>
 80202d6:	46a4      	mov	ip, r4
 80202d8:	4650      	mov	r0, sl
 80202da:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80202dc:	44e3      	add	fp, ip
 80202de:	44e0      	add	r8, ip
 80202e0:	44e1      	add	r9, ip
 80202e2:	44e2      	add	sl, ip
 80202e4:	46a4      	mov	ip, r4
 80202e6:	1a6d      	subs	r5, r5, r1
 80202e8:	006d      	lsls	r5, r5, #1
 80202ea:	9a01      	ldr	r2, [sp, #4]
 80202ec:	6045      	str	r5, [r0, #4]
 80202ee:	9807      	ldr	r0, [sp, #28]
 80202f0:	4462      	add	r2, ip
 80202f2:	3801      	subs	r0, #1
 80202f4:	9201      	str	r2, [sp, #4]
 80202f6:	9007      	str	r0, [sp, #28]
 80202f8:	9b00      	ldr	r3, [sp, #0]
 80202fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80202fc:	9902      	ldr	r1, [sp, #8]
 80202fe:	4694      	mov	ip, r2
 8020300:	4463      	add	r3, ip
 8020302:	9300      	str	r3, [sp, #0]
 8020304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020306:	469c      	mov	ip, r3
 8020308:	4461      	add	r1, ip
 802030a:	9102      	str	r1, [sp, #8]
 802030c:	2800      	cmp	r0, #0
 802030e:	d000      	beq.n	8020312 <arm_radix4_butterfly_q31+0x232>
 8020310:	e70e      	b.n	8020130 <arm_radix4_butterfly_q31+0x50>
 8020312:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020314:	009b      	lsls	r3, r3, #2
 8020316:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020318:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802031a:	9320      	str	r3, [sp, #128]	@ 0x80
 802031c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802031e:	2b04      	cmp	r3, #4
 8020320:	d800      	bhi.n	8020324 <arm_radix4_butterfly_q31+0x244>
 8020322:	e180      	b.n	8020626 <arm_radix4_butterfly_q31+0x546>
 8020324:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020326:	0893      	lsrs	r3, r2, #2
 8020328:	1e59      	subs	r1, r3, #1
 802032a:	9321      	str	r3, [sp, #132]	@ 0x84
 802032c:	00db      	lsls	r3, r3, #3
 802032e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8020330:	00d3      	lsls	r3, r2, #3
 8020332:	9300      	str	r3, [sp, #0]
 8020334:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020336:	911a      	str	r1, [sp, #104]	@ 0x68
 8020338:	00da      	lsls	r2, r3, #3
 802033a:	921e      	str	r2, [sp, #120]	@ 0x78
 802033c:	011a      	lsls	r2, r3, #4
 802033e:	921d      	str	r2, [sp, #116]	@ 0x74
 8020340:	001a      	movs	r2, r3
 8020342:	4694      	mov	ip, r2
 8020344:	005b      	lsls	r3, r3, #1
 8020346:	4463      	add	r3, ip
 8020348:	00db      	lsls	r3, r3, #3
 802034a:	931c      	str	r3, [sp, #112]	@ 0x70
 802034c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802034e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020350:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020352:	9318      	str	r3, [sp, #96]	@ 0x60
 8020354:	9319      	str	r3, [sp, #100]	@ 0x64
 8020356:	9316      	str	r3, [sp, #88]	@ 0x58
 8020358:	2300      	movs	r3, #0
 802035a:	9315      	str	r3, [sp, #84]	@ 0x54
 802035c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802035e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020360:	681a      	ldr	r2, [r3, #0]
 8020362:	685b      	ldr	r3, [r3, #4]
 8020364:	9205      	str	r2, [sp, #20]
 8020366:	9306      	str	r3, [sp, #24]
 8020368:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802036a:	468c      	mov	ip, r1
 802036c:	681a      	ldr	r2, [r3, #0]
 802036e:	685b      	ldr	r3, [r3, #4]
 8020370:	9207      	str	r2, [sp, #28]
 8020372:	9308      	str	r3, [sp, #32]
 8020374:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020376:	681a      	ldr	r2, [r3, #0]
 8020378:	685b      	ldr	r3, [r3, #4]
 802037a:	9209      	str	r2, [sp, #36]	@ 0x24
 802037c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802037e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020380:	0013      	movs	r3, r2
 8020382:	4463      	add	r3, ip
 8020384:	4698      	mov	r8, r3
 8020386:	0013      	movs	r3, r2
 8020388:	4442      	add	r2, r8
 802038a:	4691      	mov	r9, r2
 802038c:	001a      	movs	r2, r3
 802038e:	444a      	add	r2, r9
 8020390:	4692      	mov	sl, r2
 8020392:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020394:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8020396:	4293      	cmp	r3, r2
 8020398:	d800      	bhi.n	802039c <arm_radix4_butterfly_q31+0x2bc>
 802039a:	e0dd      	b.n	8020558 <arm_radix4_butterfly_q31+0x478>
 802039c:	4694      	mov	ip, r2
 802039e:	468b      	mov	fp, r1
 80203a0:	4644      	mov	r4, r8
 80203a2:	4655      	mov	r5, sl
 80203a4:	9b07      	ldr	r3, [sp, #28]
 80203a6:	17db      	asrs	r3, r3, #31
 80203a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80203aa:	9b08      	ldr	r3, [sp, #32]
 80203ac:	17db      	asrs	r3, r3, #31
 80203ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80203b0:	9b05      	ldr	r3, [sp, #20]
 80203b2:	17db      	asrs	r3, r3, #31
 80203b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80203b6:	9b06      	ldr	r3, [sp, #24]
 80203b8:	17db      	asrs	r3, r3, #31
 80203ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80203bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80203be:	17db      	asrs	r3, r3, #31
 80203c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80203c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80203c4:	17db      	asrs	r3, r3, #31
 80203c6:	9311      	str	r3, [sp, #68]	@ 0x44
 80203c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80203ca:	4463      	add	r3, ip
 80203cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80203ce:	465b      	mov	r3, fp
 80203d0:	4659      	mov	r1, fp
 80203d2:	681a      	ldr	r2, [r3, #0]
 80203d4:	464b      	mov	r3, r9
 80203d6:	684f      	ldr	r7, [r1, #4]
 80203d8:	4649      	mov	r1, r9
 80203da:	681b      	ldr	r3, [r3, #0]
 80203dc:	18d6      	adds	r6, r2, r3
 80203de:	1ad3      	subs	r3, r2, r3
 80203e0:	9301      	str	r3, [sp, #4]
 80203e2:	684b      	ldr	r3, [r1, #4]
 80203e4:	18f8      	adds	r0, r7, r3
 80203e6:	1af9      	subs	r1, r7, r3
 80203e8:	6827      	ldr	r7, [r4, #0]
 80203ea:	9102      	str	r1, [sp, #8]
 80203ec:	003a      	movs	r2, r7
 80203ee:	682f      	ldr	r7, [r5, #0]
 80203f0:	46bc      	mov	ip, r7
 80203f2:	465f      	mov	r7, fp
 80203f4:	4462      	add	r2, ip
 80203f6:	18b3      	adds	r3, r6, r2
 80203f8:	109b      	asrs	r3, r3, #2
 80203fa:	603b      	str	r3, [r7, #0]
 80203fc:	6867      	ldr	r7, [r4, #4]
 80203fe:	1ab6      	subs	r6, r6, r2
 8020400:	46b8      	mov	r8, r7
 8020402:	686f      	ldr	r7, [r5, #4]
 8020404:	17f2      	asrs	r2, r6, #31
 8020406:	46bc      	mov	ip, r7
 8020408:	44e0      	add	r8, ip
 802040a:	4643      	mov	r3, r8
 802040c:	465f      	mov	r7, fp
 802040e:	18c1      	adds	r1, r0, r3
 8020410:	1089      	asrs	r1, r1, #2
 8020412:	6079      	str	r1, [r7, #4]
 8020414:	9900      	ldr	r1, [sp, #0]
 8020416:	4690      	mov	r8, r2
 8020418:	468c      	mov	ip, r1
 802041a:	6867      	ldr	r7, [r4, #4]
 802041c:	6869      	ldr	r1, [r5, #4]
 802041e:	44e3      	add	fp, ip
 8020420:	1a7f      	subs	r7, r7, r1
 8020422:	9703      	str	r7, [sp, #12]
 8020424:	6829      	ldr	r1, [r5, #0]
 8020426:	6827      	ldr	r7, [r4, #0]
 8020428:	1a7f      	subs	r7, r7, r1
 802042a:	9704      	str	r7, [sp, #16]
 802042c:	1ac7      	subs	r7, r0, r3
 802042e:	17fa      	asrs	r2, r7, #31
 8020430:	4692      	mov	sl, r2
 8020432:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020434:	9a07      	ldr	r2, [sp, #28]
 8020436:	0030      	movs	r0, r6
 8020438:	4641      	mov	r1, r8
 802043a:	f7e0 f8c1 	bl	80005c0 <__aeabi_lmul>
 802043e:	9a08      	ldr	r2, [sp, #32]
 8020440:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020442:	9112      	str	r1, [sp, #72]	@ 0x48
 8020444:	0038      	movs	r0, r7
 8020446:	4651      	mov	r1, sl
 8020448:	f7e0 f8ba 	bl	80005c0 <__aeabi_lmul>
 802044c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802044e:	9a07      	ldr	r2, [sp, #28]
 8020450:	4684      	mov	ip, r0
 8020452:	4461      	add	r1, ip
 8020454:	1049      	asrs	r1, r1, #1
 8020456:	6021      	str	r1, [r4, #0]
 8020458:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802045a:	0038      	movs	r0, r7
 802045c:	4651      	mov	r1, sl
 802045e:	f7e0 f8af 	bl	80005c0 <__aeabi_lmul>
 8020462:	9a08      	ldr	r2, [sp, #32]
 8020464:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020466:	000f      	movs	r7, r1
 8020468:	0030      	movs	r0, r6
 802046a:	4641      	mov	r1, r8
 802046c:	f7e0 f8a8 	bl	80005c0 <__aeabi_lmul>
 8020470:	9b00      	ldr	r3, [sp, #0]
 8020472:	9a01      	ldr	r2, [sp, #4]
 8020474:	469c      	mov	ip, r3
 8020476:	9803      	ldr	r0, [sp, #12]
 8020478:	1a7f      	subs	r7, r7, r1
 802047a:	107f      	asrs	r7, r7, #1
 802047c:	6067      	str	r7, [r4, #4]
 802047e:	0016      	movs	r6, r2
 8020480:	4464      	add	r4, ip
 8020482:	4684      	mov	ip, r0
 8020484:	4466      	add	r6, ip
 8020486:	17f2      	asrs	r2, r6, #31
 8020488:	4690      	mov	r8, r2
 802048a:	9902      	ldr	r1, [sp, #8]
 802048c:	9f04      	ldr	r7, [sp, #16]
 802048e:	0030      	movs	r0, r6
 8020490:	1bcf      	subs	r7, r1, r7
 8020492:	17fa      	asrs	r2, r7, #31
 8020494:	4692      	mov	sl, r2
 8020496:	4641      	mov	r1, r8
 8020498:	9a05      	ldr	r2, [sp, #20]
 802049a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802049c:	f7e0 f890 	bl	80005c0 <__aeabi_lmul>
 80204a0:	9a06      	ldr	r2, [sp, #24]
 80204a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80204a4:	9112      	str	r1, [sp, #72]	@ 0x48
 80204a6:	0038      	movs	r0, r7
 80204a8:	4651      	mov	r1, sl
 80204aa:	f7e0 f889 	bl	80005c0 <__aeabi_lmul>
 80204ae:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80204b0:	9a05      	ldr	r2, [sp, #20]
 80204b2:	4684      	mov	ip, r0
 80204b4:	4648      	mov	r0, r9
 80204b6:	4461      	add	r1, ip
 80204b8:	1049      	asrs	r1, r1, #1
 80204ba:	6001      	str	r1, [r0, #0]
 80204bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80204be:	0038      	movs	r0, r7
 80204c0:	4651      	mov	r1, sl
 80204c2:	f7e0 f87d 	bl	80005c0 <__aeabi_lmul>
 80204c6:	9a06      	ldr	r2, [sp, #24]
 80204c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80204ca:	000f      	movs	r7, r1
 80204cc:	0030      	movs	r0, r6
 80204ce:	4641      	mov	r1, r8
 80204d0:	f7e0 f876 	bl	80005c0 <__aeabi_lmul>
 80204d4:	464e      	mov	r6, r9
 80204d6:	9a00      	ldr	r2, [sp, #0]
 80204d8:	9b01      	ldr	r3, [sp, #4]
 80204da:	4694      	mov	ip, r2
 80204dc:	9803      	ldr	r0, [sp, #12]
 80204de:	1a7f      	subs	r7, r7, r1
 80204e0:	107f      	asrs	r7, r7, #1
 80204e2:	6077      	str	r7, [r6, #4]
 80204e4:	1a1e      	subs	r6, r3, r0
 80204e6:	9b04      	ldr	r3, [sp, #16]
 80204e8:	44e1      	add	r9, ip
 80204ea:	469c      	mov	ip, r3
 80204ec:	17f0      	asrs	r0, r6, #31
 80204ee:	4680      	mov	r8, r0
 80204f0:	9902      	ldr	r1, [sp, #8]
 80204f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80204f4:	4461      	add	r1, ip
 80204f6:	17cb      	asrs	r3, r1, #31
 80204f8:	000f      	movs	r7, r1
 80204fa:	469a      	mov	sl, r3
 80204fc:	0030      	movs	r0, r6
 80204fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020500:	4641      	mov	r1, r8
 8020502:	f7e0 f85d 	bl	80005c0 <__aeabi_lmul>
 8020506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020508:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802050a:	9101      	str	r1, [sp, #4]
 802050c:	0038      	movs	r0, r7
 802050e:	4651      	mov	r1, sl
 8020510:	f7e0 f856 	bl	80005c0 <__aeabi_lmul>
 8020514:	9801      	ldr	r0, [sp, #4]
 8020516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020518:	4684      	mov	ip, r0
 802051a:	4461      	add	r1, ip
 802051c:	1049      	asrs	r1, r1, #1
 802051e:	6029      	str	r1, [r5, #0]
 8020520:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020522:	0038      	movs	r0, r7
 8020524:	4651      	mov	r1, sl
 8020526:	f7e0 f84b 	bl	80005c0 <__aeabi_lmul>
 802052a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802052c:	000f      	movs	r7, r1
 802052e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020530:	0030      	movs	r0, r6
 8020532:	4641      	mov	r1, r8
 8020534:	f7e0 f844 	bl	80005c0 <__aeabi_lmul>
 8020538:	1a7f      	subs	r7, r7, r1
 802053a:	107f      	asrs	r7, r7, #1
 802053c:	606f      	str	r7, [r5, #4]
 802053e:	9a00      	ldr	r2, [sp, #0]
 8020540:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020542:	4694      	mov	ip, r2
 8020544:	4465      	add	r5, ip
 8020546:	468c      	mov	ip, r1
 8020548:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802054a:	0013      	movs	r3, r2
 802054c:	4462      	add	r2, ip
 802054e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020550:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020552:	429a      	cmp	r2, r3
 8020554:	d900      	bls.n	8020558 <arm_radix4_butterfly_q31+0x478>
 8020556:	e73a      	b.n	80203ce <arm_radix4_butterfly_q31+0x2ee>
 8020558:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802055a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802055c:	468c      	mov	ip, r1
 802055e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8020560:	4462      	add	r2, ip
 8020562:	468c      	mov	ip, r1
 8020564:	9216      	str	r2, [sp, #88]	@ 0x58
 8020566:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8020568:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802056a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802056c:	4462      	add	r2, ip
 802056e:	468c      	mov	ip, r1
 8020570:	9219      	str	r2, [sp, #100]	@ 0x64
 8020572:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020574:	3301      	adds	r3, #1
 8020576:	4462      	add	r2, ip
 8020578:	9218      	str	r2, [sp, #96]	@ 0x60
 802057a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802057c:	9315      	str	r3, [sp, #84]	@ 0x54
 802057e:	3208      	adds	r2, #8
 8020580:	9217      	str	r2, [sp, #92]	@ 0x5c
 8020582:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020584:	4293      	cmp	r3, r2
 8020586:	d800      	bhi.n	802058a <arm_radix4_butterfly_q31+0x4aa>
 8020588:	e6e8      	b.n	802035c <arm_radix4_butterfly_q31+0x27c>
 802058a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802058c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802058e:	009b      	lsls	r3, r3, #2
 8020590:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020592:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020594:	9213      	str	r2, [sp, #76]	@ 0x4c
 8020596:	089b      	lsrs	r3, r3, #2
 8020598:	9320      	str	r3, [sp, #128]	@ 0x80
 802059a:	2b04      	cmp	r3, #4
 802059c:	d900      	bls.n	80205a0 <arm_radix4_butterfly_q31+0x4c0>
 802059e:	e6c1      	b.n	8020324 <arm_radix4_butterfly_q31+0x244>
 80205a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80205a2:	469a      	mov	sl, r3
 80205a4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80205a6:	691c      	ldr	r4, [r3, #16]
 80205a8:	685a      	ldr	r2, [r3, #4]
 80205aa:	46a1      	mov	r9, r4
 80205ac:	4690      	mov	r8, r2
 80205ae:	6819      	ldr	r1, [r3, #0]
 80205b0:	689a      	ldr	r2, [r3, #8]
 80205b2:	699f      	ldr	r7, [r3, #24]
 80205b4:	188d      	adds	r5, r1, r2
 80205b6:	444d      	add	r5, r9
 80205b8:	19ed      	adds	r5, r5, r7
 80205ba:	69de      	ldr	r6, [r3, #28]
 80205bc:	601d      	str	r5, [r3, #0]
 80205be:	4645      	mov	r5, r8
 80205c0:	46b4      	mov	ip, r6
 80205c2:	68d8      	ldr	r0, [r3, #12]
 80205c4:	695c      	ldr	r4, [r3, #20]
 80205c6:	182d      	adds	r5, r5, r0
 80205c8:	192d      	adds	r5, r5, r4
 80205ca:	4465      	add	r5, ip
 80205cc:	605d      	str	r5, [r3, #4]
 80205ce:	1a8d      	subs	r5, r1, r2
 80205d0:	444d      	add	r5, r9
 80205d2:	1bed      	subs	r5, r5, r7
 80205d4:	609d      	str	r5, [r3, #8]
 80205d6:	4645      	mov	r5, r8
 80205d8:	1a2d      	subs	r5, r5, r0
 80205da:	192d      	adds	r5, r5, r4
 80205dc:	1bad      	subs	r5, r5, r6
 80205de:	464e      	mov	r6, r9
 80205e0:	60dd      	str	r5, [r3, #12]
 80205e2:	180d      	adds	r5, r1, r0
 80205e4:	1bad      	subs	r5, r5, r6
 80205e6:	4666      	mov	r6, ip
 80205e8:	1bad      	subs	r5, r5, r6
 80205ea:	611d      	str	r5, [r3, #16]
 80205ec:	4645      	mov	r5, r8
 80205ee:	1aad      	subs	r5, r5, r2
 80205f0:	4442      	add	r2, r8
 80205f2:	1b12      	subs	r2, r2, r4
 80205f4:	1bd2      	subs	r2, r2, r7
 80205f6:	1a08      	subs	r0, r1, r0
 80205f8:	61da      	str	r2, [r3, #28]
 80205fa:	4649      	mov	r1, r9
 80205fc:	2201      	movs	r2, #1
 80205fe:	1a41      	subs	r1, r0, r1
 8020600:	4252      	negs	r2, r2
 8020602:	4461      	add	r1, ip
 8020604:	4694      	mov	ip, r2
 8020606:	44e2      	add	sl, ip
 8020608:	4652      	mov	r2, sl
 802060a:	1b2d      	subs	r5, r5, r4
 802060c:	19ed      	adds	r5, r5, r7
 802060e:	615d      	str	r5, [r3, #20]
 8020610:	6199      	str	r1, [r3, #24]
 8020612:	3320      	adds	r3, #32
 8020614:	2a00      	cmp	r2, #0
 8020616:	d1c6      	bne.n	80205a6 <arm_radix4_butterfly_q31+0x4c6>
 8020618:	b027      	add	sp, #156	@ 0x9c
 802061a:	bc3c      	pop	{r2, r3, r4, r5}
 802061c:	4690      	mov	r8, r2
 802061e:	4699      	mov	r9, r3
 8020620:	46a2      	mov	sl, r4
 8020622:	46ab      	mov	fp, r5
 8020624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020626:	469a      	mov	sl, r3
 8020628:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802062a:	e7bc      	b.n	80205a6 <arm_radix4_butterfly_q31+0x4c6>

0802062c <arm_radix4_butterfly_inverse_q31>:
 802062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802062e:	464d      	mov	r5, r9
 8020630:	4644      	mov	r4, r8
 8020632:	465f      	mov	r7, fp
 8020634:	4656      	mov	r6, sl
 8020636:	b4f0      	push	{r4, r5, r6, r7}
 8020638:	b0a7      	sub	sp, #156	@ 0x9c
 802063a:	469c      	mov	ip, r3
 802063c:	9114      	str	r1, [sp, #80]	@ 0x50
 802063e:	0889      	lsrs	r1, r1, #2
 8020640:	9310      	str	r3, [sp, #64]	@ 0x40
 8020642:	00cb      	lsls	r3, r1, #3
 8020644:	0015      	movs	r5, r2
 8020646:	9223      	str	r2, [sp, #140]	@ 0x8c
 8020648:	18c2      	adds	r2, r0, r3
 802064a:	000c      	movs	r4, r1
 802064c:	9124      	str	r1, [sp, #144]	@ 0x90
 802064e:	18d1      	adds	r1, r2, r3
 8020650:	468b      	mov	fp, r1
 8020652:	469a      	mov	sl, r3
 8020654:	4663      	mov	r3, ip
 8020656:	44da      	add	sl, fp
 8020658:	46d0      	mov	r8, sl
 802065a:	4681      	mov	r9, r0
 802065c:	4692      	mov	sl, r2
 802065e:	0119      	lsls	r1, r3, #4
 8020660:	910d      	str	r1, [sp, #52]	@ 0x34
 8020662:	00d9      	lsls	r1, r3, #3
 8020664:	005b      	lsls	r3, r3, #1
 8020666:	4463      	add	r3, ip
 8020668:	910e      	str	r1, [sp, #56]	@ 0x38
 802066a:	00d9      	lsls	r1, r3, #3
 802066c:	9022      	str	r0, [sp, #136]	@ 0x88
 802066e:	9025      	str	r0, [sp, #148]	@ 0x94
 8020670:	910f      	str	r1, [sp, #60]	@ 0x3c
 8020672:	9502      	str	r5, [sp, #8]
 8020674:	9500      	str	r5, [sp, #0]
 8020676:	9501      	str	r5, [sp, #4]
 8020678:	9409      	str	r4, [sp, #36]	@ 0x24
 802067a:	464b      	mov	r3, r9
 802067c:	681b      	ldr	r3, [r3, #0]
 802067e:	4652      	mov	r2, sl
 8020680:	111c      	asrs	r4, r3, #4
 8020682:	465b      	mov	r3, fp
 8020684:	4648      	mov	r0, r9
 8020686:	681b      	ldr	r3, [r3, #0]
 8020688:	6812      	ldr	r2, [r2, #0]
 802068a:	6840      	ldr	r0, [r0, #4]
 802068c:	111b      	asrs	r3, r3, #4
 802068e:	18e7      	adds	r7, r4, r3
 8020690:	1ae3      	subs	r3, r4, r3
 8020692:	1114      	asrs	r4, r2, #4
 8020694:	4642      	mov	r2, r8
 8020696:	1105      	asrs	r5, r0, #4
 8020698:	4658      	mov	r0, fp
 802069a:	6812      	ldr	r2, [r2, #0]
 802069c:	6840      	ldr	r0, [r0, #4]
 802069e:	9303      	str	r3, [sp, #12]
 80206a0:	1113      	asrs	r3, r2, #4
 80206a2:	18e2      	adds	r2, r4, r3
 80206a4:	1103      	asrs	r3, r0, #4
 80206a6:	18ee      	adds	r6, r5, r3
 80206a8:	1ae8      	subs	r0, r5, r3
 80206aa:	464d      	mov	r5, r9
 80206ac:	18bb      	adds	r3, r7, r2
 80206ae:	602b      	str	r3, [r5, #0]
 80206b0:	4641      	mov	r1, r8
 80206b2:	4655      	mov	r5, sl
 80206b4:	6849      	ldr	r1, [r1, #4]
 80206b6:	686d      	ldr	r5, [r5, #4]
 80206b8:	110b      	asrs	r3, r1, #4
 80206ba:	112d      	asrs	r5, r5, #4
 80206bc:	18eb      	adds	r3, r5, r3
 80206be:	464d      	mov	r5, r9
 80206c0:	18f1      	adds	r1, r6, r3
 80206c2:	6069      	str	r1, [r5, #4]
 80206c4:	4655      	mov	r5, sl
 80206c6:	686d      	ldr	r5, [r5, #4]
 80206c8:	9004      	str	r0, [sp, #16]
 80206ca:	112c      	asrs	r4, r5, #4
 80206cc:	4645      	mov	r5, r8
 80206ce:	686d      	ldr	r5, [r5, #4]
 80206d0:	1129      	asrs	r1, r5, #4
 80206d2:	1a65      	subs	r5, r4, r1
 80206d4:	4651      	mov	r1, sl
 80206d6:	6809      	ldr	r1, [r1, #0]
 80206d8:	1abc      	subs	r4, r7, r2
 80206da:	1108      	asrs	r0, r1, #4
 80206dc:	4641      	mov	r1, r8
 80206de:	17e2      	asrs	r2, r4, #31
 80206e0:	6809      	ldr	r1, [r1, #0]
 80206e2:	9207      	str	r2, [sp, #28]
 80206e4:	9a01      	ldr	r2, [sp, #4]
 80206e6:	1109      	asrs	r1, r1, #4
 80206e8:	6817      	ldr	r7, [r2, #0]
 80206ea:	1a41      	subs	r1, r0, r1
 80206ec:	9106      	str	r1, [sp, #24]
 80206ee:	0039      	movs	r1, r7
 80206f0:	17ff      	asrs	r7, r7, #31
 80206f2:	0038      	movs	r0, r7
 80206f4:	9505      	str	r5, [sp, #20]
 80206f6:	1af5      	subs	r5, r6, r3
 80206f8:	17ef      	asrs	r7, r5, #31
 80206fa:	970b      	str	r7, [sp, #44]	@ 0x2c
 80206fc:	6857      	ldr	r7, [r2, #4]
 80206fe:	0003      	movs	r3, r0
 8020700:	17fe      	asrs	r6, r7, #31
 8020702:	000a      	movs	r2, r1
 8020704:	9108      	str	r1, [sp, #32]
 8020706:	900a      	str	r0, [sp, #40]	@ 0x28
 8020708:	17e1      	asrs	r1, r4, #31
 802070a:	0020      	movs	r0, r4
 802070c:	960c      	str	r6, [sp, #48]	@ 0x30
 802070e:	f7df ff57 	bl	80005c0 <__aeabi_lmul>
 8020712:	003a      	movs	r2, r7
 8020714:	17fb      	asrs	r3, r7, #31
 8020716:	000e      	movs	r6, r1
 8020718:	0028      	movs	r0, r5
 802071a:	17e9      	asrs	r1, r5, #31
 802071c:	f7df ff50 	bl	80005c0 <__aeabi_lmul>
 8020720:	4653      	mov	r3, sl
 8020722:	1a76      	subs	r6, r6, r1
 8020724:	0076      	lsls	r6, r6, #1
 8020726:	601e      	str	r6, [r3, #0]
 8020728:	002a      	movs	r2, r5
 802072a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802072c:	9808      	ldr	r0, [sp, #32]
 802072e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020730:	f7df ff46 	bl	80005c0 <__aeabi_lmul>
 8020734:	003a      	movs	r2, r7
 8020736:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020738:	000d      	movs	r5, r1
 802073a:	0020      	movs	r0, r4
 802073c:	9907      	ldr	r1, [sp, #28]
 802073e:	f7df ff3f 	bl	80005c0 <__aeabi_lmul>
 8020742:	4657      	mov	r7, sl
 8020744:	186d      	adds	r5, r5, r1
 8020746:	006d      	lsls	r5, r5, #1
 8020748:	607d      	str	r5, [r7, #4]
 802074a:	9b03      	ldr	r3, [sp, #12]
 802074c:	9e06      	ldr	r6, [sp, #24]
 802074e:	9d05      	ldr	r5, [sp, #20]
 8020750:	46b4      	mov	ip, r6
 8020752:	1b5d      	subs	r5, r3, r5
 8020754:	9b00      	ldr	r3, [sp, #0]
 8020756:	17ef      	asrs	r7, r5, #31
 8020758:	0039      	movs	r1, r7
 802075a:	681f      	ldr	r7, [r3, #0]
 802075c:	17fc      	asrs	r4, r7, #31
 802075e:	0020      	movs	r0, r4
 8020760:	9c04      	ldr	r4, [sp, #16]
 8020762:	4464      	add	r4, ip
 8020764:	17e6      	asrs	r6, r4, #31
 8020766:	9407      	str	r4, [sp, #28]
 8020768:	9608      	str	r6, [sp, #32]
 802076a:	685e      	ldr	r6, [r3, #4]
 802076c:	900b      	str	r0, [sp, #44]	@ 0x2c
 802076e:	17f2      	asrs	r2, r6, #31
 8020770:	0003      	movs	r3, r0
 8020772:	920c      	str	r2, [sp, #48]	@ 0x30
 8020774:	0028      	movs	r0, r5
 8020776:	003a      	movs	r2, r7
 8020778:	910a      	str	r1, [sp, #40]	@ 0x28
 802077a:	f7df ff21 	bl	80005c0 <__aeabi_lmul>
 802077e:	0032      	movs	r2, r6
 8020780:	17f3      	asrs	r3, r6, #31
 8020782:	9807      	ldr	r0, [sp, #28]
 8020784:	000c      	movs	r4, r1
 8020786:	9908      	ldr	r1, [sp, #32]
 8020788:	f7df ff1a 	bl	80005c0 <__aeabi_lmul>
 802078c:	4658      	mov	r0, fp
 802078e:	1a64      	subs	r4, r4, r1
 8020790:	0064      	lsls	r4, r4, #1
 8020792:	9a07      	ldr	r2, [sp, #28]
 8020794:	6004      	str	r4, [r0, #0]
 8020796:	9b08      	ldr	r3, [sp, #32]
 8020798:	0038      	movs	r0, r7
 802079a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802079c:	f7df ff10 	bl	80005c0 <__aeabi_lmul>
 80207a0:	0032      	movs	r2, r6
 80207a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80207a4:	000c      	movs	r4, r1
 80207a6:	0028      	movs	r0, r5
 80207a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80207aa:	f7df ff09 	bl	80005c0 <__aeabi_lmul>
 80207ae:	9d05      	ldr	r5, [sp, #20]
 80207b0:	465f      	mov	r7, fp
 80207b2:	46ac      	mov	ip, r5
 80207b4:	1864      	adds	r4, r4, r1
 80207b6:	9903      	ldr	r1, [sp, #12]
 80207b8:	0064      	lsls	r4, r4, #1
 80207ba:	4461      	add	r1, ip
 80207bc:	607c      	str	r4, [r7, #4]
 80207be:	000c      	movs	r4, r1
 80207c0:	17c9      	asrs	r1, r1, #31
 80207c2:	9105      	str	r1, [sp, #20]
 80207c4:	9902      	ldr	r1, [sp, #8]
 80207c6:	9804      	ldr	r0, [sp, #16]
 80207c8:	680d      	ldr	r5, [r1, #0]
 80207ca:	9e06      	ldr	r6, [sp, #24]
 80207cc:	002b      	movs	r3, r5
 80207ce:	17ed      	asrs	r5, r5, #31
 80207d0:	684f      	ldr	r7, [r1, #4]
 80207d2:	9503      	str	r5, [sp, #12]
 80207d4:	1b85      	subs	r5, r0, r6
 80207d6:	17e8      	asrs	r0, r5, #31
 80207d8:	001a      	movs	r2, r3
 80207da:	9006      	str	r0, [sp, #24]
 80207dc:	17fe      	asrs	r6, r7, #31
 80207de:	9304      	str	r3, [sp, #16]
 80207e0:	0020      	movs	r0, r4
 80207e2:	9b03      	ldr	r3, [sp, #12]
 80207e4:	17e1      	asrs	r1, r4, #31
 80207e6:	9607      	str	r6, [sp, #28]
 80207e8:	f7df feea 	bl	80005c0 <__aeabi_lmul>
 80207ec:	003a      	movs	r2, r7
 80207ee:	000e      	movs	r6, r1
 80207f0:	17fb      	asrs	r3, r7, #31
 80207f2:	0028      	movs	r0, r5
 80207f4:	17e9      	asrs	r1, r5, #31
 80207f6:	f7df fee3 	bl	80005c0 <__aeabi_lmul>
 80207fa:	4640      	mov	r0, r8
 80207fc:	1a76      	subs	r6, r6, r1
 80207fe:	0076      	lsls	r6, r6, #1
 8020800:	002a      	movs	r2, r5
 8020802:	9b06      	ldr	r3, [sp, #24]
 8020804:	6006      	str	r6, [r0, #0]
 8020806:	9903      	ldr	r1, [sp, #12]
 8020808:	9804      	ldr	r0, [sp, #16]
 802080a:	f7df fed9 	bl	80005c0 <__aeabi_lmul>
 802080e:	0020      	movs	r0, r4
 8020810:	2408      	movs	r4, #8
 8020812:	9b07      	ldr	r3, [sp, #28]
 8020814:	000d      	movs	r5, r1
 8020816:	003a      	movs	r2, r7
 8020818:	9905      	ldr	r1, [sp, #20]
 802081a:	f7df fed1 	bl	80005c0 <__aeabi_lmul>
 802081e:	4640      	mov	r0, r8
 8020820:	46a4      	mov	ip, r4
 8020822:	186d      	adds	r5, r5, r1
 8020824:	006d      	lsls	r5, r5, #1
 8020826:	6045      	str	r5, [r0, #4]
 8020828:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802082a:	44e1      	add	r9, ip
 802082c:	3801      	subs	r0, #1
 802082e:	9009      	str	r0, [sp, #36]	@ 0x24
 8020830:	9a01      	ldr	r2, [sp, #4]
 8020832:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020834:	44e2      	add	sl, ip
 8020836:	44e3      	add	fp, ip
 8020838:	44e0      	add	r8, ip
 802083a:	46a4      	mov	ip, r4
 802083c:	4462      	add	r2, ip
 802083e:	9201      	str	r2, [sp, #4]
 8020840:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020842:	9b00      	ldr	r3, [sp, #0]
 8020844:	4694      	mov	ip, r2
 8020846:	4463      	add	r3, ip
 8020848:	9300      	str	r3, [sp, #0]
 802084a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802084c:	9902      	ldr	r1, [sp, #8]
 802084e:	469c      	mov	ip, r3
 8020850:	4461      	add	r1, ip
 8020852:	9102      	str	r1, [sp, #8]
 8020854:	2800      	cmp	r0, #0
 8020856:	d000      	beq.n	802085a <arm_radix4_butterfly_inverse_q31+0x22e>
 8020858:	e70f      	b.n	802067a <arm_radix4_butterfly_inverse_q31+0x4e>
 802085a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802085c:	009b      	lsls	r3, r3, #2
 802085e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020860:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020862:	9320      	str	r3, [sp, #128]	@ 0x80
 8020864:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020866:	2b04      	cmp	r3, #4
 8020868:	d800      	bhi.n	802086c <arm_radix4_butterfly_inverse_q31+0x240>
 802086a:	e17c      	b.n	8020b66 <arm_radix4_butterfly_inverse_q31+0x53a>
 802086c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802086e:	0893      	lsrs	r3, r2, #2
 8020870:	1e59      	subs	r1, r3, #1
 8020872:	9321      	str	r3, [sp, #132]	@ 0x84
 8020874:	00db      	lsls	r3, r3, #3
 8020876:	931b      	str	r3, [sp, #108]	@ 0x6c
 8020878:	00d3      	lsls	r3, r2, #3
 802087a:	9300      	str	r3, [sp, #0]
 802087c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802087e:	911a      	str	r1, [sp, #104]	@ 0x68
 8020880:	00da      	lsls	r2, r3, #3
 8020882:	921e      	str	r2, [sp, #120]	@ 0x78
 8020884:	011a      	lsls	r2, r3, #4
 8020886:	921d      	str	r2, [sp, #116]	@ 0x74
 8020888:	001a      	movs	r2, r3
 802088a:	4694      	mov	ip, r2
 802088c:	005b      	lsls	r3, r3, #1
 802088e:	4463      	add	r3, ip
 8020890:	00db      	lsls	r3, r3, #3
 8020892:	931c      	str	r3, [sp, #112]	@ 0x70
 8020894:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020896:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020898:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802089a:	9318      	str	r3, [sp, #96]	@ 0x60
 802089c:	9319      	str	r3, [sp, #100]	@ 0x64
 802089e:	9316      	str	r3, [sp, #88]	@ 0x58
 80208a0:	2300      	movs	r3, #0
 80208a2:	9315      	str	r3, [sp, #84]	@ 0x54
 80208a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80208a6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80208a8:	681a      	ldr	r2, [r3, #0]
 80208aa:	685b      	ldr	r3, [r3, #4]
 80208ac:	9205      	str	r2, [sp, #20]
 80208ae:	9306      	str	r3, [sp, #24]
 80208b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80208b2:	468c      	mov	ip, r1
 80208b4:	681a      	ldr	r2, [r3, #0]
 80208b6:	685b      	ldr	r3, [r3, #4]
 80208b8:	9207      	str	r2, [sp, #28]
 80208ba:	9308      	str	r3, [sp, #32]
 80208bc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80208be:	681a      	ldr	r2, [r3, #0]
 80208c0:	685b      	ldr	r3, [r3, #4]
 80208c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80208c4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80208c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80208c8:	0013      	movs	r3, r2
 80208ca:	4463      	add	r3, ip
 80208cc:	4698      	mov	r8, r3
 80208ce:	0013      	movs	r3, r2
 80208d0:	4442      	add	r2, r8
 80208d2:	4691      	mov	r9, r2
 80208d4:	001a      	movs	r2, r3
 80208d6:	444a      	add	r2, r9
 80208d8:	4692      	mov	sl, r2
 80208da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80208dc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80208de:	4293      	cmp	r3, r2
 80208e0:	d800      	bhi.n	80208e4 <arm_radix4_butterfly_inverse_q31+0x2b8>
 80208e2:	e0d9      	b.n	8020a98 <arm_radix4_butterfly_inverse_q31+0x46c>
 80208e4:	4694      	mov	ip, r2
 80208e6:	4644      	mov	r4, r8
 80208e8:	4655      	mov	r5, sl
 80208ea:	4688      	mov	r8, r1
 80208ec:	9b07      	ldr	r3, [sp, #28]
 80208ee:	17db      	asrs	r3, r3, #31
 80208f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80208f2:	9b08      	ldr	r3, [sp, #32]
 80208f4:	17db      	asrs	r3, r3, #31
 80208f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80208f8:	9b05      	ldr	r3, [sp, #20]
 80208fa:	17db      	asrs	r3, r3, #31
 80208fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80208fe:	9b06      	ldr	r3, [sp, #24]
 8020900:	17db      	asrs	r3, r3, #31
 8020902:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020906:	17db      	asrs	r3, r3, #31
 8020908:	9310      	str	r3, [sp, #64]	@ 0x40
 802090a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802090c:	17db      	asrs	r3, r3, #31
 802090e:	9311      	str	r3, [sp, #68]	@ 0x44
 8020910:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020912:	4463      	add	r3, ip
 8020914:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020916:	4643      	mov	r3, r8
 8020918:	4641      	mov	r1, r8
 802091a:	681a      	ldr	r2, [r3, #0]
 802091c:	464b      	mov	r3, r9
 802091e:	684f      	ldr	r7, [r1, #4]
 8020920:	4649      	mov	r1, r9
 8020922:	681b      	ldr	r3, [r3, #0]
 8020924:	18d6      	adds	r6, r2, r3
 8020926:	1ad3      	subs	r3, r2, r3
 8020928:	9301      	str	r3, [sp, #4]
 802092a:	684b      	ldr	r3, [r1, #4]
 802092c:	1af9      	subs	r1, r7, r3
 802092e:	9102      	str	r1, [sp, #8]
 8020930:	6829      	ldr	r1, [r5, #0]
 8020932:	18f8      	adds	r0, r7, r3
 8020934:	468c      	mov	ip, r1
 8020936:	6827      	ldr	r7, [r4, #0]
 8020938:	4467      	add	r7, ip
 802093a:	003a      	movs	r2, r7
 802093c:	19f3      	adds	r3, r6, r7
 802093e:	4647      	mov	r7, r8
 8020940:	109b      	asrs	r3, r3, #2
 8020942:	603b      	str	r3, [r7, #0]
 8020944:	6869      	ldr	r1, [r5, #4]
 8020946:	6867      	ldr	r7, [r4, #4]
 8020948:	468c      	mov	ip, r1
 802094a:	4467      	add	r7, ip
 802094c:	003b      	movs	r3, r7
 802094e:	19c1      	adds	r1, r0, r7
 8020950:	4647      	mov	r7, r8
 8020952:	1ab6      	subs	r6, r6, r2
 8020954:	1089      	asrs	r1, r1, #2
 8020956:	6079      	str	r1, [r7, #4]
 8020958:	17f2      	asrs	r2, r6, #31
 802095a:	9900      	ldr	r1, [sp, #0]
 802095c:	4692      	mov	sl, r2
 802095e:	468c      	mov	ip, r1
 8020960:	6867      	ldr	r7, [r4, #4]
 8020962:	6869      	ldr	r1, [r5, #4]
 8020964:	44e0      	add	r8, ip
 8020966:	1a7f      	subs	r7, r7, r1
 8020968:	9703      	str	r7, [sp, #12]
 802096a:	6821      	ldr	r1, [r4, #0]
 802096c:	682f      	ldr	r7, [r5, #0]
 802096e:	1bc9      	subs	r1, r1, r7
 8020970:	1ac7      	subs	r7, r0, r3
 8020972:	17fa      	asrs	r2, r7, #31
 8020974:	4693      	mov	fp, r2
 8020976:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020978:	9a07      	ldr	r2, [sp, #28]
 802097a:	9104      	str	r1, [sp, #16]
 802097c:	0030      	movs	r0, r6
 802097e:	4651      	mov	r1, sl
 8020980:	f7df fe1e 	bl	80005c0 <__aeabi_lmul>
 8020984:	9a08      	ldr	r2, [sp, #32]
 8020986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020988:	9112      	str	r1, [sp, #72]	@ 0x48
 802098a:	0038      	movs	r0, r7
 802098c:	4659      	mov	r1, fp
 802098e:	f7df fe17 	bl	80005c0 <__aeabi_lmul>
 8020992:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020994:	9a07      	ldr	r2, [sp, #28]
 8020996:	1a41      	subs	r1, r0, r1
 8020998:	1049      	asrs	r1, r1, #1
 802099a:	6021      	str	r1, [r4, #0]
 802099c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802099e:	0038      	movs	r0, r7
 80209a0:	4659      	mov	r1, fp
 80209a2:	f7df fe0d 	bl	80005c0 <__aeabi_lmul>
 80209a6:	9a08      	ldr	r2, [sp, #32]
 80209a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80209aa:	000f      	movs	r7, r1
 80209ac:	0030      	movs	r0, r6
 80209ae:	4651      	mov	r1, sl
 80209b0:	f7df fe06 	bl	80005c0 <__aeabi_lmul>
 80209b4:	9b00      	ldr	r3, [sp, #0]
 80209b6:	187f      	adds	r7, r7, r1
 80209b8:	469c      	mov	ip, r3
 80209ba:	107f      	asrs	r7, r7, #1
 80209bc:	6067      	str	r7, [r4, #4]
 80209be:	9a01      	ldr	r2, [sp, #4]
 80209c0:	9f03      	ldr	r7, [sp, #12]
 80209c2:	9802      	ldr	r0, [sp, #8]
 80209c4:	1bd7      	subs	r7, r2, r7
 80209c6:	17fe      	asrs	r6, r7, #31
 80209c8:	0031      	movs	r1, r6
 80209ca:	9e04      	ldr	r6, [sp, #16]
 80209cc:	4682      	mov	sl, r0
 80209ce:	4464      	add	r4, ip
 80209d0:	46b4      	mov	ip, r6
 80209d2:	44e2      	add	sl, ip
 80209d4:	4652      	mov	r2, sl
 80209d6:	17d2      	asrs	r2, r2, #31
 80209d8:	4693      	mov	fp, r2
 80209da:	0038      	movs	r0, r7
 80209dc:	9a05      	ldr	r2, [sp, #20]
 80209de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80209e0:	9112      	str	r1, [sp, #72]	@ 0x48
 80209e2:	f7df fded 	bl	80005c0 <__aeabi_lmul>
 80209e6:	9a06      	ldr	r2, [sp, #24]
 80209e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80209ea:	000e      	movs	r6, r1
 80209ec:	4650      	mov	r0, sl
 80209ee:	4659      	mov	r1, fp
 80209f0:	f7df fde6 	bl	80005c0 <__aeabi_lmul>
 80209f4:	4648      	mov	r0, r9
 80209f6:	1a76      	subs	r6, r6, r1
 80209f8:	1076      	asrs	r6, r6, #1
 80209fa:	6006      	str	r6, [r0, #0]
 80209fc:	9a05      	ldr	r2, [sp, #20]
 80209fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020a00:	4650      	mov	r0, sl
 8020a02:	4659      	mov	r1, fp
 8020a04:	f7df fddc 	bl	80005c0 <__aeabi_lmul>
 8020a08:	9a06      	ldr	r2, [sp, #24]
 8020a0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020a0c:	000e      	movs	r6, r1
 8020a0e:	0038      	movs	r0, r7
 8020a10:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8020a12:	f7df fdd5 	bl	80005c0 <__aeabi_lmul>
 8020a16:	9a00      	ldr	r2, [sp, #0]
 8020a18:	9f03      	ldr	r7, [sp, #12]
 8020a1a:	4694      	mov	ip, r2
 8020a1c:	1876      	adds	r6, r6, r1
 8020a1e:	4649      	mov	r1, r9
 8020a20:	44e1      	add	r9, ip
 8020a22:	46bc      	mov	ip, r7
 8020a24:	9b01      	ldr	r3, [sp, #4]
 8020a26:	1076      	asrs	r6, r6, #1
 8020a28:	4463      	add	r3, ip
 8020a2a:	17df      	asrs	r7, r3, #31
 8020a2c:	604e      	str	r6, [r1, #4]
 8020a2e:	46ba      	mov	sl, r7
 8020a30:	001e      	movs	r6, r3
 8020a32:	9802      	ldr	r0, [sp, #8]
 8020a34:	9b04      	ldr	r3, [sp, #16]
 8020a36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020a38:	1ac7      	subs	r7, r0, r3
 8020a3a:	17fb      	asrs	r3, r7, #31
 8020a3c:	469b      	mov	fp, r3
 8020a3e:	0030      	movs	r0, r6
 8020a40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020a42:	4651      	mov	r1, sl
 8020a44:	f7df fdbc 	bl	80005c0 <__aeabi_lmul>
 8020a48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020a4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020a4c:	9101      	str	r1, [sp, #4]
 8020a4e:	0038      	movs	r0, r7
 8020a50:	4659      	mov	r1, fp
 8020a52:	f7df fdb5 	bl	80005c0 <__aeabi_lmul>
 8020a56:	9801      	ldr	r0, [sp, #4]
 8020a58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020a5a:	1a41      	subs	r1, r0, r1
 8020a5c:	1049      	asrs	r1, r1, #1
 8020a5e:	6029      	str	r1, [r5, #0]
 8020a60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020a62:	0038      	movs	r0, r7
 8020a64:	4659      	mov	r1, fp
 8020a66:	f7df fdab 	bl	80005c0 <__aeabi_lmul>
 8020a6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020a6c:	000f      	movs	r7, r1
 8020a6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020a70:	0030      	movs	r0, r6
 8020a72:	4651      	mov	r1, sl
 8020a74:	f7df fda4 	bl	80005c0 <__aeabi_lmul>
 8020a78:	187f      	adds	r7, r7, r1
 8020a7a:	107f      	asrs	r7, r7, #1
 8020a7c:	606f      	str	r7, [r5, #4]
 8020a7e:	9a00      	ldr	r2, [sp, #0]
 8020a80:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020a82:	4694      	mov	ip, r2
 8020a84:	4465      	add	r5, ip
 8020a86:	468c      	mov	ip, r1
 8020a88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020a8a:	0013      	movs	r3, r2
 8020a8c:	4462      	add	r2, ip
 8020a8e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020a90:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020a92:	429a      	cmp	r2, r3
 8020a94:	d900      	bls.n	8020a98 <arm_radix4_butterfly_inverse_q31+0x46c>
 8020a96:	e73e      	b.n	8020916 <arm_radix4_butterfly_inverse_q31+0x2ea>
 8020a98:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8020a9a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020a9c:	468c      	mov	ip, r1
 8020a9e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8020aa0:	4462      	add	r2, ip
 8020aa2:	468c      	mov	ip, r1
 8020aa4:	9216      	str	r2, [sp, #88]	@ 0x58
 8020aa6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8020aa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020aaa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020aac:	4462      	add	r2, ip
 8020aae:	468c      	mov	ip, r1
 8020ab0:	9219      	str	r2, [sp, #100]	@ 0x64
 8020ab2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020ab4:	3301      	adds	r3, #1
 8020ab6:	4462      	add	r2, ip
 8020ab8:	9218      	str	r2, [sp, #96]	@ 0x60
 8020aba:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8020abc:	9315      	str	r3, [sp, #84]	@ 0x54
 8020abe:	3208      	adds	r2, #8
 8020ac0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8020ac2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020ac4:	4293      	cmp	r3, r2
 8020ac6:	d800      	bhi.n	8020aca <arm_radix4_butterfly_inverse_q31+0x49e>
 8020ac8:	e6ec      	b.n	80208a4 <arm_radix4_butterfly_inverse_q31+0x278>
 8020aca:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020acc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8020ace:	009b      	lsls	r3, r3, #2
 8020ad0:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020ad2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020ad4:	9213      	str	r2, [sp, #76]	@ 0x4c
 8020ad6:	089b      	lsrs	r3, r3, #2
 8020ad8:	9320      	str	r3, [sp, #128]	@ 0x80
 8020ada:	2b04      	cmp	r3, #4
 8020adc:	d900      	bls.n	8020ae0 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8020ade:	e6c5      	b.n	802086c <arm_radix4_butterfly_inverse_q31+0x240>
 8020ae0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020ae2:	469a      	mov	sl, r3
 8020ae4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020ae6:	681a      	ldr	r2, [r3, #0]
 8020ae8:	6918      	ldr	r0, [r3, #16]
 8020aea:	4691      	mov	r9, r2
 8020aec:	464c      	mov	r4, r9
 8020aee:	4680      	mov	r8, r0
 8020af0:	69de      	ldr	r6, [r3, #28]
 8020af2:	689d      	ldr	r5, [r3, #8]
 8020af4:	46b4      	mov	ip, r6
 8020af6:	6998      	ldr	r0, [r3, #24]
 8020af8:	1964      	adds	r4, r4, r5
 8020afa:	6859      	ldr	r1, [r3, #4]
 8020afc:	68da      	ldr	r2, [r3, #12]
 8020afe:	4444      	add	r4, r8
 8020b00:	695f      	ldr	r7, [r3, #20]
 8020b02:	1824      	adds	r4, r4, r0
 8020b04:	601c      	str	r4, [r3, #0]
 8020b06:	188c      	adds	r4, r1, r2
 8020b08:	19e4      	adds	r4, r4, r7
 8020b0a:	4464      	add	r4, ip
 8020b0c:	605c      	str	r4, [r3, #4]
 8020b0e:	464c      	mov	r4, r9
 8020b10:	1b64      	subs	r4, r4, r5
 8020b12:	4444      	add	r4, r8
 8020b14:	1a24      	subs	r4, r4, r0
 8020b16:	609c      	str	r4, [r3, #8]
 8020b18:	1a8c      	subs	r4, r1, r2
 8020b1a:	19e4      	adds	r4, r4, r7
 8020b1c:	1ba4      	subs	r4, r4, r6
 8020b1e:	60dc      	str	r4, [r3, #12]
 8020b20:	464c      	mov	r4, r9
 8020b22:	4646      	mov	r6, r8
 8020b24:	1aa4      	subs	r4, r4, r2
 8020b26:	1ba4      	subs	r4, r4, r6
 8020b28:	4464      	add	r4, ip
 8020b2a:	611c      	str	r4, [r3, #16]
 8020b2c:	194c      	adds	r4, r1, r5
 8020b2e:	1be4      	subs	r4, r4, r7
 8020b30:	1a24      	subs	r4, r4, r0
 8020b32:	615c      	str	r4, [r3, #20]
 8020b34:	4644      	mov	r4, r8
 8020b36:	4666      	mov	r6, ip
 8020b38:	444a      	add	r2, r9
 8020b3a:	1b12      	subs	r2, r2, r4
 8020b3c:	1b92      	subs	r2, r2, r6
 8020b3e:	619a      	str	r2, [r3, #24]
 8020b40:	1b4a      	subs	r2, r1, r5
 8020b42:	1bd1      	subs	r1, r2, r7
 8020b44:	2201      	movs	r2, #1
 8020b46:	4252      	negs	r2, r2
 8020b48:	4694      	mov	ip, r2
 8020b4a:	44e2      	add	sl, ip
 8020b4c:	4652      	mov	r2, sl
 8020b4e:	1809      	adds	r1, r1, r0
 8020b50:	61d9      	str	r1, [r3, #28]
 8020b52:	3320      	adds	r3, #32
 8020b54:	2a00      	cmp	r2, #0
 8020b56:	d1c6      	bne.n	8020ae6 <arm_radix4_butterfly_inverse_q31+0x4ba>
 8020b58:	b027      	add	sp, #156	@ 0x9c
 8020b5a:	bc3c      	pop	{r2, r3, r4, r5}
 8020b5c:	4690      	mov	r8, r2
 8020b5e:	4699      	mov	r9, r3
 8020b60:	46a2      	mov	sl, r4
 8020b62:	46ab      	mov	fp, r5
 8020b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b66:	469a      	mov	sl, r3
 8020b68:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020b6a:	e7bc      	b.n	8020ae6 <arm_radix4_butterfly_inverse_q31+0x4ba>

08020b6c <arm_cmplx_mag_squared_q31>:
 8020b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b6e:	464f      	mov	r7, r9
 8020b70:	4646      	mov	r6, r8
 8020b72:	0004      	movs	r4, r0
 8020b74:	b4c0      	push	{r6, r7}
 8020b76:	0016      	movs	r6, r2
 8020b78:	000f      	movs	r7, r1
 8020b7a:	2a00      	cmp	r2, #0
 8020b7c:	d018      	beq.n	8020bb0 <arm_cmplx_mag_squared_q31+0x44>
 8020b7e:	6823      	ldr	r3, [r4, #0]
 8020b80:	6822      	ldr	r2, [r4, #0]
 8020b82:	17d9      	asrs	r1, r3, #31
 8020b84:	6863      	ldr	r3, [r4, #4]
 8020b86:	0010      	movs	r0, r2
 8020b88:	4698      	mov	r8, r3
 8020b8a:	17db      	asrs	r3, r3, #31
 8020b8c:	4699      	mov	r9, r3
 8020b8e:	000b      	movs	r3, r1
 8020b90:	f7df fd16 	bl	80005c0 <__aeabi_lmul>
 8020b94:	4642      	mov	r2, r8
 8020b96:	104d      	asrs	r5, r1, #1
 8020b98:	464b      	mov	r3, r9
 8020b9a:	4640      	mov	r0, r8
 8020b9c:	4649      	mov	r1, r9
 8020b9e:	f7df fd0f 	bl	80005c0 <__aeabi_lmul>
 8020ba2:	1049      	asrs	r1, r1, #1
 8020ba4:	1869      	adds	r1, r5, r1
 8020ba6:	3e01      	subs	r6, #1
 8020ba8:	c702      	stmia	r7!, {r1}
 8020baa:	3408      	adds	r4, #8
 8020bac:	2e00      	cmp	r6, #0
 8020bae:	d1e6      	bne.n	8020b7e <arm_cmplx_mag_squared_q31+0x12>
 8020bb0:	bc0c      	pop	{r2, r3}
 8020bb2:	4690      	mov	r8, r2
 8020bb4:	4699      	mov	r9, r3
 8020bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020bb8 <arm_mult_q31>:
 8020bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bba:	4646      	mov	r6, r8
 8020bbc:	464f      	mov	r7, r9
 8020bbe:	4690      	mov	r8, r2
 8020bc0:	b4c0      	push	{r6, r7}
 8020bc2:	001d      	movs	r5, r3
 8020bc4:	0006      	movs	r6, r0
 8020bc6:	000f      	movs	r7, r1
 8020bc8:	2400      	movs	r4, #0
 8020bca:	2b00      	cmp	r3, #0
 8020bcc:	d020      	beq.n	8020c10 <arm_mult_q31+0x58>
 8020bce:	4b12      	ldr	r3, [pc, #72]	@ (8020c18 <arm_mult_q31+0x60>)
 8020bd0:	4699      	mov	r9, r3
 8020bd2:	e007      	b.n	8020be4 <arm_mult_q31+0x2c>
 8020bd4:	464b      	mov	r3, r9
 8020bd6:	4059      	eors	r1, r3
 8020bd8:	4643      	mov	r3, r8
 8020bda:	3d01      	subs	r5, #1
 8020bdc:	5119      	str	r1, [r3, r4]
 8020bde:	3404      	adds	r4, #4
 8020be0:	2d00      	cmp	r5, #0
 8020be2:	d015      	beq.n	8020c10 <arm_mult_q31+0x58>
 8020be4:	5933      	ldr	r3, [r6, r4]
 8020be6:	593a      	ldr	r2, [r7, r4]
 8020be8:	17d9      	asrs	r1, r3, #31
 8020bea:	593b      	ldr	r3, [r7, r4]
 8020bec:	5930      	ldr	r0, [r6, r4]
 8020bee:	17db      	asrs	r3, r3, #31
 8020bf0:	f7df fce6 	bl	80005c0 <__aeabi_lmul>
 8020bf4:	004b      	lsls	r3, r1, #1
 8020bf6:	0fc0      	lsrs	r0, r0, #31
 8020bf8:	4318      	orrs	r0, r3
 8020bfa:	17c9      	asrs	r1, r1, #31
 8020bfc:	17c3      	asrs	r3, r0, #31
 8020bfe:	428b      	cmp	r3, r1
 8020c00:	d1e8      	bne.n	8020bd4 <arm_mult_q31+0x1c>
 8020c02:	0001      	movs	r1, r0
 8020c04:	4643      	mov	r3, r8
 8020c06:	3d01      	subs	r5, #1
 8020c08:	5119      	str	r1, [r3, r4]
 8020c0a:	3404      	adds	r4, #4
 8020c0c:	2d00      	cmp	r5, #0
 8020c0e:	d1e9      	bne.n	8020be4 <arm_mult_q31+0x2c>
 8020c10:	bc0c      	pop	{r2, r3}
 8020c12:	4690      	mov	r8, r2
 8020c14:	4699      	mov	r9, r3
 8020c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c18:	7fffffff 	.word	0x7fffffff

08020c1c <arm_add_q31>:
 8020c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c1e:	465f      	mov	r7, fp
 8020c20:	4656      	mov	r6, sl
 8020c22:	464d      	mov	r5, r9
 8020c24:	4644      	mov	r4, r8
 8020c26:	b4f0      	push	{r4, r5, r6, r7}
 8020c28:	4693      	mov	fp, r2
 8020c2a:	b083      	sub	sp, #12
 8020c2c:	4681      	mov	r9, r0
 8020c2e:	468a      	mov	sl, r1
 8020c30:	4698      	mov	r8, r3
 8020c32:	2200      	movs	r2, #0
 8020c34:	2b00      	cmp	r3, #0
 8020c36:	d020      	beq.n	8020c7a <arm_add_q31+0x5e>
 8020c38:	4649      	mov	r1, r9
 8020c3a:	4653      	mov	r3, sl
 8020c3c:	588e      	ldr	r6, [r1, r2]
 8020c3e:	589b      	ldr	r3, [r3, r2]
 8020c40:	17f7      	asrs	r7, r6, #31
 8020c42:	001c      	movs	r4, r3
 8020c44:	0030      	movs	r0, r6
 8020c46:	0039      	movs	r1, r7
 8020c48:	17dd      	asrs	r5, r3, #31
 8020c4a:	46b4      	mov	ip, r6
 8020c4c:	1900      	adds	r0, r0, r4
 8020c4e:	4169      	adcs	r1, r5
 8020c50:	4463      	add	r3, ip
 8020c52:	9000      	str	r0, [sp, #0]
 8020c54:	9101      	str	r1, [sp, #4]
 8020c56:	17d9      	asrs	r1, r3, #31
 8020c58:	468c      	mov	ip, r1
 8020c5a:	9901      	ldr	r1, [sp, #4]
 8020c5c:	458c      	cmp	ip, r1
 8020c5e:	d002      	beq.n	8020c66 <arm_add_q31+0x4a>
 8020c60:	17cb      	asrs	r3, r1, #31
 8020c62:	4909      	ldr	r1, [pc, #36]	@ (8020c88 <arm_add_q31+0x6c>)
 8020c64:	404b      	eors	r3, r1
 8020c66:	4659      	mov	r1, fp
 8020c68:	508b      	str	r3, [r1, r2]
 8020c6a:	2301      	movs	r3, #1
 8020c6c:	425b      	negs	r3, r3
 8020c6e:	469c      	mov	ip, r3
 8020c70:	44e0      	add	r8, ip
 8020c72:	4643      	mov	r3, r8
 8020c74:	3204      	adds	r2, #4
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	d1de      	bne.n	8020c38 <arm_add_q31+0x1c>
 8020c7a:	b003      	add	sp, #12
 8020c7c:	bc3c      	pop	{r2, r3, r4, r5}
 8020c7e:	4690      	mov	r8, r2
 8020c80:	4699      	mov	r9, r3
 8020c82:	46a2      	mov	sl, r4
 8020c84:	46ab      	mov	fp, r5
 8020c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020c88:	7fffffff 	.word	0x7fffffff

08020c8c <atof>:
 8020c8c:	b510      	push	{r4, lr}
 8020c8e:	2100      	movs	r1, #0
 8020c90:	f000 fe12 	bl	80218b8 <strtod>
 8020c94:	bd10      	pop	{r4, pc}

08020c96 <atoi>:
 8020c96:	b510      	push	{r4, lr}
 8020c98:	220a      	movs	r2, #10
 8020c9a:	2100      	movs	r1, #0
 8020c9c:	f000 fea4 	bl	80219e8 <strtol>
 8020ca0:	bd10      	pop	{r4, pc}
	...

08020ca4 <sulp>:
 8020ca4:	b570      	push	{r4, r5, r6, lr}
 8020ca6:	0016      	movs	r6, r2
 8020ca8:	000d      	movs	r5, r1
 8020caa:	f003 fd15 	bl	80246d8 <__ulp>
 8020cae:	2e00      	cmp	r6, #0
 8020cb0:	d00d      	beq.n	8020cce <sulp+0x2a>
 8020cb2:	236b      	movs	r3, #107	@ 0x6b
 8020cb4:	006a      	lsls	r2, r5, #1
 8020cb6:	0d52      	lsrs	r2, r2, #21
 8020cb8:	1a9b      	subs	r3, r3, r2
 8020cba:	2b00      	cmp	r3, #0
 8020cbc:	dd07      	ble.n	8020cce <sulp+0x2a>
 8020cbe:	2400      	movs	r4, #0
 8020cc0:	4a03      	ldr	r2, [pc, #12]	@ (8020cd0 <sulp+0x2c>)
 8020cc2:	051b      	lsls	r3, r3, #20
 8020cc4:	189d      	adds	r5, r3, r2
 8020cc6:	002b      	movs	r3, r5
 8020cc8:	0022      	movs	r2, r4
 8020cca:	f7e1 fcb7 	bl	800263c <__aeabi_dmul>
 8020cce:	bd70      	pop	{r4, r5, r6, pc}
 8020cd0:	3ff00000 	.word	0x3ff00000

08020cd4 <_strtod_l>:
 8020cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020cd6:	b0a3      	sub	sp, #140	@ 0x8c
 8020cd8:	921b      	str	r2, [sp, #108]	@ 0x6c
 8020cda:	2200      	movs	r2, #0
 8020cdc:	2600      	movs	r6, #0
 8020cde:	2700      	movs	r7, #0
 8020ce0:	9005      	str	r0, [sp, #20]
 8020ce2:	9109      	str	r1, [sp, #36]	@ 0x24
 8020ce4:	921e      	str	r2, [sp, #120]	@ 0x78
 8020ce6:	911d      	str	r1, [sp, #116]	@ 0x74
 8020ce8:	780a      	ldrb	r2, [r1, #0]
 8020cea:	2a2b      	cmp	r2, #43	@ 0x2b
 8020cec:	d053      	beq.n	8020d96 <_strtod_l+0xc2>
 8020cee:	d83f      	bhi.n	8020d70 <_strtod_l+0x9c>
 8020cf0:	2a0d      	cmp	r2, #13
 8020cf2:	d839      	bhi.n	8020d68 <_strtod_l+0x94>
 8020cf4:	2a08      	cmp	r2, #8
 8020cf6:	d839      	bhi.n	8020d6c <_strtod_l+0x98>
 8020cf8:	2a00      	cmp	r2, #0
 8020cfa:	d042      	beq.n	8020d82 <_strtod_l+0xae>
 8020cfc:	2200      	movs	r2, #0
 8020cfe:	9212      	str	r2, [sp, #72]	@ 0x48
 8020d00:	2100      	movs	r1, #0
 8020d02:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8020d04:	910c      	str	r1, [sp, #48]	@ 0x30
 8020d06:	782a      	ldrb	r2, [r5, #0]
 8020d08:	2a30      	cmp	r2, #48	@ 0x30
 8020d0a:	d000      	beq.n	8020d0e <_strtod_l+0x3a>
 8020d0c:	e083      	b.n	8020e16 <_strtod_l+0x142>
 8020d0e:	786a      	ldrb	r2, [r5, #1]
 8020d10:	3120      	adds	r1, #32
 8020d12:	438a      	bics	r2, r1
 8020d14:	2a58      	cmp	r2, #88	@ 0x58
 8020d16:	d000      	beq.n	8020d1a <_strtod_l+0x46>
 8020d18:	e073      	b.n	8020e02 <_strtod_l+0x12e>
 8020d1a:	9302      	str	r3, [sp, #8]
 8020d1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020d1e:	4a95      	ldr	r2, [pc, #596]	@ (8020f74 <_strtod_l+0x2a0>)
 8020d20:	9301      	str	r3, [sp, #4]
 8020d22:	ab1e      	add	r3, sp, #120	@ 0x78
 8020d24:	9300      	str	r3, [sp, #0]
 8020d26:	9805      	ldr	r0, [sp, #20]
 8020d28:	ab1f      	add	r3, sp, #124	@ 0x7c
 8020d2a:	a91d      	add	r1, sp, #116	@ 0x74
 8020d2c:	f002 fd84 	bl	8023838 <__gethex>
 8020d30:	230f      	movs	r3, #15
 8020d32:	0002      	movs	r2, r0
 8020d34:	401a      	ands	r2, r3
 8020d36:	0004      	movs	r4, r0
 8020d38:	9206      	str	r2, [sp, #24]
 8020d3a:	4218      	tst	r0, r3
 8020d3c:	d005      	beq.n	8020d4a <_strtod_l+0x76>
 8020d3e:	2a06      	cmp	r2, #6
 8020d40:	d12b      	bne.n	8020d9a <_strtod_l+0xc6>
 8020d42:	2300      	movs	r3, #0
 8020d44:	3501      	adds	r5, #1
 8020d46:	951d      	str	r5, [sp, #116]	@ 0x74
 8020d48:	9312      	str	r3, [sp, #72]	@ 0x48
 8020d4a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020d4c:	2b00      	cmp	r3, #0
 8020d4e:	d002      	beq.n	8020d56 <_strtod_l+0x82>
 8020d50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020d52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020d54:	6013      	str	r3, [r2, #0]
 8020d56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020d58:	2b00      	cmp	r3, #0
 8020d5a:	d019      	beq.n	8020d90 <_strtod_l+0xbc>
 8020d5c:	2380      	movs	r3, #128	@ 0x80
 8020d5e:	0030      	movs	r0, r6
 8020d60:	061b      	lsls	r3, r3, #24
 8020d62:	18f9      	adds	r1, r7, r3
 8020d64:	b023      	add	sp, #140	@ 0x8c
 8020d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d68:	2a20      	cmp	r2, #32
 8020d6a:	d1c7      	bne.n	8020cfc <_strtod_l+0x28>
 8020d6c:	3101      	adds	r1, #1
 8020d6e:	e7ba      	b.n	8020ce6 <_strtod_l+0x12>
 8020d70:	2a2d      	cmp	r2, #45	@ 0x2d
 8020d72:	d1c3      	bne.n	8020cfc <_strtod_l+0x28>
 8020d74:	3a2c      	subs	r2, #44	@ 0x2c
 8020d76:	9212      	str	r2, [sp, #72]	@ 0x48
 8020d78:	1c4a      	adds	r2, r1, #1
 8020d7a:	921d      	str	r2, [sp, #116]	@ 0x74
 8020d7c:	784a      	ldrb	r2, [r1, #1]
 8020d7e:	2a00      	cmp	r2, #0
 8020d80:	d1be      	bne.n	8020d00 <_strtod_l+0x2c>
 8020d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d84:	931d      	str	r3, [sp, #116]	@ 0x74
 8020d86:	2300      	movs	r3, #0
 8020d88:	9312      	str	r3, [sp, #72]	@ 0x48
 8020d8a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	d1df      	bne.n	8020d50 <_strtod_l+0x7c>
 8020d90:	0030      	movs	r0, r6
 8020d92:	0039      	movs	r1, r7
 8020d94:	e7e6      	b.n	8020d64 <_strtod_l+0x90>
 8020d96:	2200      	movs	r2, #0
 8020d98:	e7ed      	b.n	8020d76 <_strtod_l+0xa2>
 8020d9a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8020d9c:	2a00      	cmp	r2, #0
 8020d9e:	d007      	beq.n	8020db0 <_strtod_l+0xdc>
 8020da0:	2135      	movs	r1, #53	@ 0x35
 8020da2:	a820      	add	r0, sp, #128	@ 0x80
 8020da4:	f003 fd8e 	bl	80248c4 <__copybits>
 8020da8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8020daa:	9805      	ldr	r0, [sp, #20]
 8020dac:	f003 f948 	bl	8024040 <_Bfree>
 8020db0:	9806      	ldr	r0, [sp, #24]
 8020db2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020db4:	3801      	subs	r0, #1
 8020db6:	2804      	cmp	r0, #4
 8020db8:	d806      	bhi.n	8020dc8 <_strtod_l+0xf4>
 8020dba:	f7df f9df 	bl	800017c <__gnu_thumb1_case_uqi>
 8020dbe:	0312      	.short	0x0312
 8020dc0:	1e1c      	.short	0x1e1c
 8020dc2:	12          	.byte	0x12
 8020dc3:	00          	.byte	0x00
 8020dc4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8020dc6:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8020dc8:	05e4      	lsls	r4, r4, #23
 8020dca:	d502      	bpl.n	8020dd2 <_strtod_l+0xfe>
 8020dcc:	2380      	movs	r3, #128	@ 0x80
 8020dce:	061b      	lsls	r3, r3, #24
 8020dd0:	431f      	orrs	r7, r3
 8020dd2:	4b69      	ldr	r3, [pc, #420]	@ (8020f78 <_strtod_l+0x2a4>)
 8020dd4:	423b      	tst	r3, r7
 8020dd6:	d1b8      	bne.n	8020d4a <_strtod_l+0x76>
 8020dd8:	f001 fdb2 	bl	8022940 <__errno>
 8020ddc:	2322      	movs	r3, #34	@ 0x22
 8020dde:	6003      	str	r3, [r0, #0]
 8020de0:	e7b3      	b.n	8020d4a <_strtod_l+0x76>
 8020de2:	4966      	ldr	r1, [pc, #408]	@ (8020f7c <_strtod_l+0x2a8>)
 8020de4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8020de6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8020de8:	400a      	ands	r2, r1
 8020dea:	4965      	ldr	r1, [pc, #404]	@ (8020f80 <_strtod_l+0x2ac>)
 8020dec:	185b      	adds	r3, r3, r1
 8020dee:	051b      	lsls	r3, r3, #20
 8020df0:	431a      	orrs	r2, r3
 8020df2:	0017      	movs	r7, r2
 8020df4:	e7e8      	b.n	8020dc8 <_strtod_l+0xf4>
 8020df6:	4f60      	ldr	r7, [pc, #384]	@ (8020f78 <_strtod_l+0x2a4>)
 8020df8:	e7e6      	b.n	8020dc8 <_strtod_l+0xf4>
 8020dfa:	2601      	movs	r6, #1
 8020dfc:	4f61      	ldr	r7, [pc, #388]	@ (8020f84 <_strtod_l+0x2b0>)
 8020dfe:	4276      	negs	r6, r6
 8020e00:	e7e2      	b.n	8020dc8 <_strtod_l+0xf4>
 8020e02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020e04:	1c5a      	adds	r2, r3, #1
 8020e06:	921d      	str	r2, [sp, #116]	@ 0x74
 8020e08:	785b      	ldrb	r3, [r3, #1]
 8020e0a:	2b30      	cmp	r3, #48	@ 0x30
 8020e0c:	d0f9      	beq.n	8020e02 <_strtod_l+0x12e>
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	d09b      	beq.n	8020d4a <_strtod_l+0x76>
 8020e12:	2301      	movs	r3, #1
 8020e14:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e16:	2500      	movs	r5, #0
 8020e18:	220a      	movs	r2, #10
 8020e1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020e1c:	950d      	str	r5, [sp, #52]	@ 0x34
 8020e1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020e20:	9508      	str	r5, [sp, #32]
 8020e22:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8020e24:	7804      	ldrb	r4, [r0, #0]
 8020e26:	0023      	movs	r3, r4
 8020e28:	3b30      	subs	r3, #48	@ 0x30
 8020e2a:	b2d9      	uxtb	r1, r3
 8020e2c:	2909      	cmp	r1, #9
 8020e2e:	d927      	bls.n	8020e80 <_strtod_l+0x1ac>
 8020e30:	2201      	movs	r2, #1
 8020e32:	4955      	ldr	r1, [pc, #340]	@ (8020f88 <_strtod_l+0x2b4>)
 8020e34:	f001 fcf6 	bl	8022824 <strncmp>
 8020e38:	2800      	cmp	r0, #0
 8020e3a:	d031      	beq.n	8020ea0 <_strtod_l+0x1cc>
 8020e3c:	2000      	movs	r0, #0
 8020e3e:	0023      	movs	r3, r4
 8020e40:	4684      	mov	ip, r0
 8020e42:	9a08      	ldr	r2, [sp, #32]
 8020e44:	900e      	str	r0, [sp, #56]	@ 0x38
 8020e46:	9206      	str	r2, [sp, #24]
 8020e48:	2220      	movs	r2, #32
 8020e4a:	0019      	movs	r1, r3
 8020e4c:	4391      	bics	r1, r2
 8020e4e:	000a      	movs	r2, r1
 8020e50:	2100      	movs	r1, #0
 8020e52:	9107      	str	r1, [sp, #28]
 8020e54:	2a45      	cmp	r2, #69	@ 0x45
 8020e56:	d000      	beq.n	8020e5a <_strtod_l+0x186>
 8020e58:	e0c0      	b.n	8020fdc <_strtod_l+0x308>
 8020e5a:	9b06      	ldr	r3, [sp, #24]
 8020e5c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020e5e:	4303      	orrs	r3, r0
 8020e60:	4313      	orrs	r3, r2
 8020e62:	428b      	cmp	r3, r1
 8020e64:	d08d      	beq.n	8020d82 <_strtod_l+0xae>
 8020e66:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020e68:	9309      	str	r3, [sp, #36]	@ 0x24
 8020e6a:	3301      	adds	r3, #1
 8020e6c:	931d      	str	r3, [sp, #116]	@ 0x74
 8020e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e70:	785b      	ldrb	r3, [r3, #1]
 8020e72:	2b2b      	cmp	r3, #43	@ 0x2b
 8020e74:	d070      	beq.n	8020f58 <_strtod_l+0x284>
 8020e76:	000c      	movs	r4, r1
 8020e78:	2b2d      	cmp	r3, #45	@ 0x2d
 8020e7a:	d173      	bne.n	8020f64 <_strtod_l+0x290>
 8020e7c:	2401      	movs	r4, #1
 8020e7e:	e06c      	b.n	8020f5a <_strtod_l+0x286>
 8020e80:	9908      	ldr	r1, [sp, #32]
 8020e82:	2908      	cmp	r1, #8
 8020e84:	dc09      	bgt.n	8020e9a <_strtod_l+0x1c6>
 8020e86:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8020e88:	4351      	muls	r1, r2
 8020e8a:	185b      	adds	r3, r3, r1
 8020e8c:	930d      	str	r3, [sp, #52]	@ 0x34
 8020e8e:	9b08      	ldr	r3, [sp, #32]
 8020e90:	3001      	adds	r0, #1
 8020e92:	3301      	adds	r3, #1
 8020e94:	9308      	str	r3, [sp, #32]
 8020e96:	901d      	str	r0, [sp, #116]	@ 0x74
 8020e98:	e7c3      	b.n	8020e22 <_strtod_l+0x14e>
 8020e9a:	4355      	muls	r5, r2
 8020e9c:	195d      	adds	r5, r3, r5
 8020e9e:	e7f6      	b.n	8020e8e <_strtod_l+0x1ba>
 8020ea0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020ea2:	1c5a      	adds	r2, r3, #1
 8020ea4:	921d      	str	r2, [sp, #116]	@ 0x74
 8020ea6:	9a08      	ldr	r2, [sp, #32]
 8020ea8:	785b      	ldrb	r3, [r3, #1]
 8020eaa:	2a00      	cmp	r2, #0
 8020eac:	d03a      	beq.n	8020f24 <_strtod_l+0x250>
 8020eae:	900e      	str	r0, [sp, #56]	@ 0x38
 8020eb0:	9206      	str	r2, [sp, #24]
 8020eb2:	001a      	movs	r2, r3
 8020eb4:	3a30      	subs	r2, #48	@ 0x30
 8020eb6:	2a09      	cmp	r2, #9
 8020eb8:	d912      	bls.n	8020ee0 <_strtod_l+0x20c>
 8020eba:	2201      	movs	r2, #1
 8020ebc:	4694      	mov	ip, r2
 8020ebe:	e7c3      	b.n	8020e48 <_strtod_l+0x174>
 8020ec0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020ec2:	3001      	adds	r0, #1
 8020ec4:	1c5a      	adds	r2, r3, #1
 8020ec6:	921d      	str	r2, [sp, #116]	@ 0x74
 8020ec8:	785b      	ldrb	r3, [r3, #1]
 8020eca:	2b30      	cmp	r3, #48	@ 0x30
 8020ecc:	d0f8      	beq.n	8020ec0 <_strtod_l+0x1ec>
 8020ece:	001a      	movs	r2, r3
 8020ed0:	3a31      	subs	r2, #49	@ 0x31
 8020ed2:	2a08      	cmp	r2, #8
 8020ed4:	d83b      	bhi.n	8020f4e <_strtod_l+0x27a>
 8020ed6:	900e      	str	r0, [sp, #56]	@ 0x38
 8020ed8:	2000      	movs	r0, #0
 8020eda:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8020edc:	9006      	str	r0, [sp, #24]
 8020ede:	9213      	str	r2, [sp, #76]	@ 0x4c
 8020ee0:	001a      	movs	r2, r3
 8020ee2:	1c41      	adds	r1, r0, #1
 8020ee4:	3a30      	subs	r2, #48	@ 0x30
 8020ee6:	2b30      	cmp	r3, #48	@ 0x30
 8020ee8:	d016      	beq.n	8020f18 <_strtod_l+0x244>
 8020eea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020eec:	185b      	adds	r3, r3, r1
 8020eee:	930e      	str	r3, [sp, #56]	@ 0x38
 8020ef0:	9b06      	ldr	r3, [sp, #24]
 8020ef2:	210a      	movs	r1, #10
 8020ef4:	469c      	mov	ip, r3
 8020ef6:	4484      	add	ip, r0
 8020ef8:	459c      	cmp	ip, r3
 8020efa:	d115      	bne.n	8020f28 <_strtod_l+0x254>
 8020efc:	9906      	ldr	r1, [sp, #24]
 8020efe:	9b06      	ldr	r3, [sp, #24]
 8020f00:	3101      	adds	r1, #1
 8020f02:	1809      	adds	r1, r1, r0
 8020f04:	181b      	adds	r3, r3, r0
 8020f06:	9106      	str	r1, [sp, #24]
 8020f08:	2b08      	cmp	r3, #8
 8020f0a:	dc19      	bgt.n	8020f40 <_strtod_l+0x26c>
 8020f0c:	230a      	movs	r3, #10
 8020f0e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8020f10:	434b      	muls	r3, r1
 8020f12:	2100      	movs	r1, #0
 8020f14:	18d3      	adds	r3, r2, r3
 8020f16:	930d      	str	r3, [sp, #52]	@ 0x34
 8020f18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020f1a:	0008      	movs	r0, r1
 8020f1c:	1c5a      	adds	r2, r3, #1
 8020f1e:	921d      	str	r2, [sp, #116]	@ 0x74
 8020f20:	785b      	ldrb	r3, [r3, #1]
 8020f22:	e7c6      	b.n	8020eb2 <_strtod_l+0x1de>
 8020f24:	9808      	ldr	r0, [sp, #32]
 8020f26:	e7d0      	b.n	8020eca <_strtod_l+0x1f6>
 8020f28:	1c5c      	adds	r4, r3, #1
 8020f2a:	2b08      	cmp	r3, #8
 8020f2c:	dc04      	bgt.n	8020f38 <_strtod_l+0x264>
 8020f2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020f30:	434b      	muls	r3, r1
 8020f32:	930d      	str	r3, [sp, #52]	@ 0x34
 8020f34:	0023      	movs	r3, r4
 8020f36:	e7df      	b.n	8020ef8 <_strtod_l+0x224>
 8020f38:	2c10      	cmp	r4, #16
 8020f3a:	dcfb      	bgt.n	8020f34 <_strtod_l+0x260>
 8020f3c:	434d      	muls	r5, r1
 8020f3e:	e7f9      	b.n	8020f34 <_strtod_l+0x260>
 8020f40:	2100      	movs	r1, #0
 8020f42:	2b0f      	cmp	r3, #15
 8020f44:	dce8      	bgt.n	8020f18 <_strtod_l+0x244>
 8020f46:	230a      	movs	r3, #10
 8020f48:	435d      	muls	r5, r3
 8020f4a:	1955      	adds	r5, r2, r5
 8020f4c:	e7e4      	b.n	8020f18 <_strtod_l+0x244>
 8020f4e:	2200      	movs	r2, #0
 8020f50:	920e      	str	r2, [sp, #56]	@ 0x38
 8020f52:	9206      	str	r2, [sp, #24]
 8020f54:	3201      	adds	r2, #1
 8020f56:	e7b1      	b.n	8020ebc <_strtod_l+0x1e8>
 8020f58:	2400      	movs	r4, #0
 8020f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f5c:	3302      	adds	r3, #2
 8020f5e:	931d      	str	r3, [sp, #116]	@ 0x74
 8020f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f62:	789b      	ldrb	r3, [r3, #2]
 8020f64:	001a      	movs	r2, r3
 8020f66:	3a30      	subs	r2, #48	@ 0x30
 8020f68:	2a09      	cmp	r2, #9
 8020f6a:	d913      	bls.n	8020f94 <_strtod_l+0x2c0>
 8020f6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020f6e:	921d      	str	r2, [sp, #116]	@ 0x74
 8020f70:	2200      	movs	r2, #0
 8020f72:	e032      	b.n	8020fda <_strtod_l+0x306>
 8020f74:	08029038 	.word	0x08029038
 8020f78:	7ff00000 	.word	0x7ff00000
 8020f7c:	ffefffff 	.word	0xffefffff
 8020f80:	00000433 	.word	0x00000433
 8020f84:	7fffffff 	.word	0x7fffffff
 8020f88:	08029020 	.word	0x08029020
 8020f8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020f8e:	1c5a      	adds	r2, r3, #1
 8020f90:	921d      	str	r2, [sp, #116]	@ 0x74
 8020f92:	785b      	ldrb	r3, [r3, #1]
 8020f94:	2b30      	cmp	r3, #48	@ 0x30
 8020f96:	d0f9      	beq.n	8020f8c <_strtod_l+0x2b8>
 8020f98:	2200      	movs	r2, #0
 8020f9a:	9207      	str	r2, [sp, #28]
 8020f9c:	001a      	movs	r2, r3
 8020f9e:	3a31      	subs	r2, #49	@ 0x31
 8020fa0:	2a08      	cmp	r2, #8
 8020fa2:	d81b      	bhi.n	8020fdc <_strtod_l+0x308>
 8020fa4:	3b30      	subs	r3, #48	@ 0x30
 8020fa6:	9310      	str	r3, [sp, #64]	@ 0x40
 8020fa8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020faa:	9307      	str	r3, [sp, #28]
 8020fac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020fae:	1c59      	adds	r1, r3, #1
 8020fb0:	911d      	str	r1, [sp, #116]	@ 0x74
 8020fb2:	785b      	ldrb	r3, [r3, #1]
 8020fb4:	001a      	movs	r2, r3
 8020fb6:	3a30      	subs	r2, #48	@ 0x30
 8020fb8:	2a09      	cmp	r2, #9
 8020fba:	d93a      	bls.n	8021032 <_strtod_l+0x35e>
 8020fbc:	9a07      	ldr	r2, [sp, #28]
 8020fbe:	1a8a      	subs	r2, r1, r2
 8020fc0:	49b4      	ldr	r1, [pc, #720]	@ (8021294 <_strtod_l+0x5c0>)
 8020fc2:	9107      	str	r1, [sp, #28]
 8020fc4:	2a08      	cmp	r2, #8
 8020fc6:	dc04      	bgt.n	8020fd2 <_strtod_l+0x2fe>
 8020fc8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020fca:	9207      	str	r2, [sp, #28]
 8020fcc:	428a      	cmp	r2, r1
 8020fce:	dd00      	ble.n	8020fd2 <_strtod_l+0x2fe>
 8020fd0:	9107      	str	r1, [sp, #28]
 8020fd2:	2c00      	cmp	r4, #0
 8020fd4:	d002      	beq.n	8020fdc <_strtod_l+0x308>
 8020fd6:	9a07      	ldr	r2, [sp, #28]
 8020fd8:	4252      	negs	r2, r2
 8020fda:	9207      	str	r2, [sp, #28]
 8020fdc:	9a06      	ldr	r2, [sp, #24]
 8020fde:	2a00      	cmp	r2, #0
 8020fe0:	d14d      	bne.n	802107e <_strtod_l+0x3aa>
 8020fe2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020fe4:	4310      	orrs	r0, r2
 8020fe6:	d000      	beq.n	8020fea <_strtod_l+0x316>
 8020fe8:	e6af      	b.n	8020d4a <_strtod_l+0x76>
 8020fea:	4662      	mov	r2, ip
 8020fec:	2a00      	cmp	r2, #0
 8020fee:	d000      	beq.n	8020ff2 <_strtod_l+0x31e>
 8020ff0:	e6c7      	b.n	8020d82 <_strtod_l+0xae>
 8020ff2:	2b69      	cmp	r3, #105	@ 0x69
 8020ff4:	d027      	beq.n	8021046 <_strtod_l+0x372>
 8020ff6:	dc23      	bgt.n	8021040 <_strtod_l+0x36c>
 8020ff8:	2b49      	cmp	r3, #73	@ 0x49
 8020ffa:	d024      	beq.n	8021046 <_strtod_l+0x372>
 8020ffc:	2b4e      	cmp	r3, #78	@ 0x4e
 8020ffe:	d000      	beq.n	8021002 <_strtod_l+0x32e>
 8021000:	e6bf      	b.n	8020d82 <_strtod_l+0xae>
 8021002:	49a5      	ldr	r1, [pc, #660]	@ (8021298 <_strtod_l+0x5c4>)
 8021004:	a81d      	add	r0, sp, #116	@ 0x74
 8021006:	f002 fe4d 	bl	8023ca4 <__match>
 802100a:	2800      	cmp	r0, #0
 802100c:	d100      	bne.n	8021010 <_strtod_l+0x33c>
 802100e:	e6b8      	b.n	8020d82 <_strtod_l+0xae>
 8021010:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021012:	781b      	ldrb	r3, [r3, #0]
 8021014:	2b28      	cmp	r3, #40	@ 0x28
 8021016:	d12c      	bne.n	8021072 <_strtod_l+0x39e>
 8021018:	49a0      	ldr	r1, [pc, #640]	@ (802129c <_strtod_l+0x5c8>)
 802101a:	aa20      	add	r2, sp, #128	@ 0x80
 802101c:	a81d      	add	r0, sp, #116	@ 0x74
 802101e:	f002 fe55 	bl	8023ccc <__hexnan>
 8021022:	2805      	cmp	r0, #5
 8021024:	d125      	bne.n	8021072 <_strtod_l+0x39e>
 8021026:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8021028:	4a9d      	ldr	r2, [pc, #628]	@ (80212a0 <_strtod_l+0x5cc>)
 802102a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802102c:	431a      	orrs	r2, r3
 802102e:	0017      	movs	r7, r2
 8021030:	e68b      	b.n	8020d4a <_strtod_l+0x76>
 8021032:	220a      	movs	r2, #10
 8021034:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021036:	434a      	muls	r2, r1
 8021038:	18d2      	adds	r2, r2, r3
 802103a:	3a30      	subs	r2, #48	@ 0x30
 802103c:	9210      	str	r2, [sp, #64]	@ 0x40
 802103e:	e7b5      	b.n	8020fac <_strtod_l+0x2d8>
 8021040:	2b6e      	cmp	r3, #110	@ 0x6e
 8021042:	d0de      	beq.n	8021002 <_strtod_l+0x32e>
 8021044:	e69d      	b.n	8020d82 <_strtod_l+0xae>
 8021046:	4997      	ldr	r1, [pc, #604]	@ (80212a4 <_strtod_l+0x5d0>)
 8021048:	a81d      	add	r0, sp, #116	@ 0x74
 802104a:	f002 fe2b 	bl	8023ca4 <__match>
 802104e:	2800      	cmp	r0, #0
 8021050:	d100      	bne.n	8021054 <_strtod_l+0x380>
 8021052:	e696      	b.n	8020d82 <_strtod_l+0xae>
 8021054:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021056:	4994      	ldr	r1, [pc, #592]	@ (80212a8 <_strtod_l+0x5d4>)
 8021058:	3b01      	subs	r3, #1
 802105a:	a81d      	add	r0, sp, #116	@ 0x74
 802105c:	931d      	str	r3, [sp, #116]	@ 0x74
 802105e:	f002 fe21 	bl	8023ca4 <__match>
 8021062:	2800      	cmp	r0, #0
 8021064:	d102      	bne.n	802106c <_strtod_l+0x398>
 8021066:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021068:	3301      	adds	r3, #1
 802106a:	931d      	str	r3, [sp, #116]	@ 0x74
 802106c:	2600      	movs	r6, #0
 802106e:	4f8c      	ldr	r7, [pc, #560]	@ (80212a0 <_strtod_l+0x5cc>)
 8021070:	e66b      	b.n	8020d4a <_strtod_l+0x76>
 8021072:	488e      	ldr	r0, [pc, #568]	@ (80212ac <_strtod_l+0x5d8>)
 8021074:	f001 fca6 	bl	80229c4 <nan>
 8021078:	0006      	movs	r6, r0
 802107a:	000f      	movs	r7, r1
 802107c:	e665      	b.n	8020d4a <_strtod_l+0x76>
 802107e:	9b07      	ldr	r3, [sp, #28]
 8021080:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021082:	1a9b      	subs	r3, r3, r2
 8021084:	930c      	str	r3, [sp, #48]	@ 0x30
 8021086:	9b08      	ldr	r3, [sp, #32]
 8021088:	2b00      	cmp	r3, #0
 802108a:	d101      	bne.n	8021090 <_strtod_l+0x3bc>
 802108c:	9b06      	ldr	r3, [sp, #24]
 802108e:	9308      	str	r3, [sp, #32]
 8021090:	9c06      	ldr	r4, [sp, #24]
 8021092:	2c10      	cmp	r4, #16
 8021094:	dd00      	ble.n	8021098 <_strtod_l+0x3c4>
 8021096:	2410      	movs	r4, #16
 8021098:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802109a:	f7e2 f9bf 	bl	800341c <__aeabi_ui2d>
 802109e:	9b06      	ldr	r3, [sp, #24]
 80210a0:	0006      	movs	r6, r0
 80210a2:	000f      	movs	r7, r1
 80210a4:	2b09      	cmp	r3, #9
 80210a6:	dc13      	bgt.n	80210d0 <_strtod_l+0x3fc>
 80210a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80210aa:	2b00      	cmp	r3, #0
 80210ac:	d100      	bne.n	80210b0 <_strtod_l+0x3dc>
 80210ae:	e64c      	b.n	8020d4a <_strtod_l+0x76>
 80210b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80210b2:	2b00      	cmp	r3, #0
 80210b4:	dc00      	bgt.n	80210b8 <_strtod_l+0x3e4>
 80210b6:	e07e      	b.n	80211b6 <_strtod_l+0x4e2>
 80210b8:	2b16      	cmp	r3, #22
 80210ba:	dc63      	bgt.n	8021184 <_strtod_l+0x4b0>
 80210bc:	497c      	ldr	r1, [pc, #496]	@ (80212b0 <_strtod_l+0x5dc>)
 80210be:	00db      	lsls	r3, r3, #3
 80210c0:	18c9      	adds	r1, r1, r3
 80210c2:	0032      	movs	r2, r6
 80210c4:	6808      	ldr	r0, [r1, #0]
 80210c6:	6849      	ldr	r1, [r1, #4]
 80210c8:	003b      	movs	r3, r7
 80210ca:	f7e1 fab7 	bl	800263c <__aeabi_dmul>
 80210ce:	e7d3      	b.n	8021078 <_strtod_l+0x3a4>
 80210d0:	0022      	movs	r2, r4
 80210d2:	4b77      	ldr	r3, [pc, #476]	@ (80212b0 <_strtod_l+0x5dc>)
 80210d4:	3a09      	subs	r2, #9
 80210d6:	00d2      	lsls	r2, r2, #3
 80210d8:	189b      	adds	r3, r3, r2
 80210da:	681a      	ldr	r2, [r3, #0]
 80210dc:	685b      	ldr	r3, [r3, #4]
 80210de:	f7e1 faad 	bl	800263c <__aeabi_dmul>
 80210e2:	0006      	movs	r6, r0
 80210e4:	0028      	movs	r0, r5
 80210e6:	000f      	movs	r7, r1
 80210e8:	f7e2 f998 	bl	800341c <__aeabi_ui2d>
 80210ec:	000b      	movs	r3, r1
 80210ee:	0002      	movs	r2, r0
 80210f0:	0039      	movs	r1, r7
 80210f2:	0030      	movs	r0, r6
 80210f4:	f7e0 fafa 	bl	80016ec <__aeabi_dadd>
 80210f8:	9b06      	ldr	r3, [sp, #24]
 80210fa:	0006      	movs	r6, r0
 80210fc:	000f      	movs	r7, r1
 80210fe:	2b0f      	cmp	r3, #15
 8021100:	ddd2      	ble.n	80210a8 <_strtod_l+0x3d4>
 8021102:	9b06      	ldr	r3, [sp, #24]
 8021104:	1b1c      	subs	r4, r3, r4
 8021106:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021108:	18e4      	adds	r4, r4, r3
 802110a:	2c00      	cmp	r4, #0
 802110c:	dc00      	bgt.n	8021110 <_strtod_l+0x43c>
 802110e:	e09b      	b.n	8021248 <_strtod_l+0x574>
 8021110:	220f      	movs	r2, #15
 8021112:	0023      	movs	r3, r4
 8021114:	4013      	ands	r3, r2
 8021116:	4214      	tst	r4, r2
 8021118:	d00a      	beq.n	8021130 <_strtod_l+0x45c>
 802111a:	4965      	ldr	r1, [pc, #404]	@ (80212b0 <_strtod_l+0x5dc>)
 802111c:	00db      	lsls	r3, r3, #3
 802111e:	18c9      	adds	r1, r1, r3
 8021120:	0032      	movs	r2, r6
 8021122:	6808      	ldr	r0, [r1, #0]
 8021124:	6849      	ldr	r1, [r1, #4]
 8021126:	003b      	movs	r3, r7
 8021128:	f7e1 fa88 	bl	800263c <__aeabi_dmul>
 802112c:	0006      	movs	r6, r0
 802112e:	000f      	movs	r7, r1
 8021130:	230f      	movs	r3, #15
 8021132:	439c      	bics	r4, r3
 8021134:	d073      	beq.n	802121e <_strtod_l+0x54a>
 8021136:	3326      	adds	r3, #38	@ 0x26
 8021138:	33ff      	adds	r3, #255	@ 0xff
 802113a:	429c      	cmp	r4, r3
 802113c:	dd4b      	ble.n	80211d6 <_strtod_l+0x502>
 802113e:	2300      	movs	r3, #0
 8021140:	9306      	str	r3, [sp, #24]
 8021142:	9307      	str	r3, [sp, #28]
 8021144:	930d      	str	r3, [sp, #52]	@ 0x34
 8021146:	9308      	str	r3, [sp, #32]
 8021148:	2322      	movs	r3, #34	@ 0x22
 802114a:	2600      	movs	r6, #0
 802114c:	9a05      	ldr	r2, [sp, #20]
 802114e:	4f54      	ldr	r7, [pc, #336]	@ (80212a0 <_strtod_l+0x5cc>)
 8021150:	6013      	str	r3, [r2, #0]
 8021152:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021154:	42b3      	cmp	r3, r6
 8021156:	d100      	bne.n	802115a <_strtod_l+0x486>
 8021158:	e5f7      	b.n	8020d4a <_strtod_l+0x76>
 802115a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802115c:	9805      	ldr	r0, [sp, #20]
 802115e:	f002 ff6f 	bl	8024040 <_Bfree>
 8021162:	9908      	ldr	r1, [sp, #32]
 8021164:	9805      	ldr	r0, [sp, #20]
 8021166:	f002 ff6b 	bl	8024040 <_Bfree>
 802116a:	9907      	ldr	r1, [sp, #28]
 802116c:	9805      	ldr	r0, [sp, #20]
 802116e:	f002 ff67 	bl	8024040 <_Bfree>
 8021172:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021174:	9805      	ldr	r0, [sp, #20]
 8021176:	f002 ff63 	bl	8024040 <_Bfree>
 802117a:	9906      	ldr	r1, [sp, #24]
 802117c:	9805      	ldr	r0, [sp, #20]
 802117e:	f002 ff5f 	bl	8024040 <_Bfree>
 8021182:	e5e2      	b.n	8020d4a <_strtod_l+0x76>
 8021184:	2325      	movs	r3, #37	@ 0x25
 8021186:	9a06      	ldr	r2, [sp, #24]
 8021188:	1a9b      	subs	r3, r3, r2
 802118a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802118c:	4293      	cmp	r3, r2
 802118e:	dbb8      	blt.n	8021102 <_strtod_l+0x42e>
 8021190:	240f      	movs	r4, #15
 8021192:	9b06      	ldr	r3, [sp, #24]
 8021194:	4d46      	ldr	r5, [pc, #280]	@ (80212b0 <_strtod_l+0x5dc>)
 8021196:	1ae4      	subs	r4, r4, r3
 8021198:	00e1      	lsls	r1, r4, #3
 802119a:	1869      	adds	r1, r5, r1
 802119c:	0032      	movs	r2, r6
 802119e:	6808      	ldr	r0, [r1, #0]
 80211a0:	6849      	ldr	r1, [r1, #4]
 80211a2:	003b      	movs	r3, r7
 80211a4:	f7e1 fa4a 	bl	800263c <__aeabi_dmul>
 80211a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80211aa:	1b1c      	subs	r4, r3, r4
 80211ac:	00e4      	lsls	r4, r4, #3
 80211ae:	192d      	adds	r5, r5, r4
 80211b0:	682a      	ldr	r2, [r5, #0]
 80211b2:	686b      	ldr	r3, [r5, #4]
 80211b4:	e789      	b.n	80210ca <_strtod_l+0x3f6>
 80211b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80211b8:	3316      	adds	r3, #22
 80211ba:	dba2      	blt.n	8021102 <_strtod_l+0x42e>
 80211bc:	9907      	ldr	r1, [sp, #28]
 80211be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80211c0:	4b3b      	ldr	r3, [pc, #236]	@ (80212b0 <_strtod_l+0x5dc>)
 80211c2:	1a52      	subs	r2, r2, r1
 80211c4:	00d2      	lsls	r2, r2, #3
 80211c6:	189b      	adds	r3, r3, r2
 80211c8:	0030      	movs	r0, r6
 80211ca:	681a      	ldr	r2, [r3, #0]
 80211cc:	685b      	ldr	r3, [r3, #4]
 80211ce:	0039      	movs	r1, r7
 80211d0:	f7e0 fdf0 	bl	8001db4 <__aeabi_ddiv>
 80211d4:	e750      	b.n	8021078 <_strtod_l+0x3a4>
 80211d6:	2300      	movs	r3, #0
 80211d8:	0030      	movs	r0, r6
 80211da:	0039      	movs	r1, r7
 80211dc:	4d35      	ldr	r5, [pc, #212]	@ (80212b4 <_strtod_l+0x5e0>)
 80211de:	1124      	asrs	r4, r4, #4
 80211e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80211e2:	2c01      	cmp	r4, #1
 80211e4:	dc1e      	bgt.n	8021224 <_strtod_l+0x550>
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	d001      	beq.n	80211ee <_strtod_l+0x51a>
 80211ea:	0006      	movs	r6, r0
 80211ec:	000f      	movs	r7, r1
 80211ee:	4b32      	ldr	r3, [pc, #200]	@ (80212b8 <_strtod_l+0x5e4>)
 80211f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80211f2:	18ff      	adds	r7, r7, r3
 80211f4:	4b2f      	ldr	r3, [pc, #188]	@ (80212b4 <_strtod_l+0x5e0>)
 80211f6:	00d5      	lsls	r5, r2, #3
 80211f8:	195d      	adds	r5, r3, r5
 80211fa:	0032      	movs	r2, r6
 80211fc:	6828      	ldr	r0, [r5, #0]
 80211fe:	6869      	ldr	r1, [r5, #4]
 8021200:	003b      	movs	r3, r7
 8021202:	f7e1 fa1b 	bl	800263c <__aeabi_dmul>
 8021206:	4b26      	ldr	r3, [pc, #152]	@ (80212a0 <_strtod_l+0x5cc>)
 8021208:	4a2c      	ldr	r2, [pc, #176]	@ (80212bc <_strtod_l+0x5e8>)
 802120a:	0006      	movs	r6, r0
 802120c:	400b      	ands	r3, r1
 802120e:	4293      	cmp	r3, r2
 8021210:	d895      	bhi.n	802113e <_strtod_l+0x46a>
 8021212:	4a2b      	ldr	r2, [pc, #172]	@ (80212c0 <_strtod_l+0x5ec>)
 8021214:	4293      	cmp	r3, r2
 8021216:	d913      	bls.n	8021240 <_strtod_l+0x56c>
 8021218:	2601      	movs	r6, #1
 802121a:	4f2a      	ldr	r7, [pc, #168]	@ (80212c4 <_strtod_l+0x5f0>)
 802121c:	4276      	negs	r6, r6
 802121e:	2300      	movs	r3, #0
 8021220:	9309      	str	r3, [sp, #36]	@ 0x24
 8021222:	e086      	b.n	8021332 <_strtod_l+0x65e>
 8021224:	2201      	movs	r2, #1
 8021226:	4214      	tst	r4, r2
 8021228:	d004      	beq.n	8021234 <_strtod_l+0x560>
 802122a:	682a      	ldr	r2, [r5, #0]
 802122c:	686b      	ldr	r3, [r5, #4]
 802122e:	f7e1 fa05 	bl	800263c <__aeabi_dmul>
 8021232:	2301      	movs	r3, #1
 8021234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021236:	1064      	asrs	r4, r4, #1
 8021238:	3201      	adds	r2, #1
 802123a:	9209      	str	r2, [sp, #36]	@ 0x24
 802123c:	3508      	adds	r5, #8
 802123e:	e7d0      	b.n	80211e2 <_strtod_l+0x50e>
 8021240:	23d4      	movs	r3, #212	@ 0xd4
 8021242:	049b      	lsls	r3, r3, #18
 8021244:	18cf      	adds	r7, r1, r3
 8021246:	e7ea      	b.n	802121e <_strtod_l+0x54a>
 8021248:	2c00      	cmp	r4, #0
 802124a:	d0e8      	beq.n	802121e <_strtod_l+0x54a>
 802124c:	4264      	negs	r4, r4
 802124e:	230f      	movs	r3, #15
 8021250:	0022      	movs	r2, r4
 8021252:	401a      	ands	r2, r3
 8021254:	421c      	tst	r4, r3
 8021256:	d00a      	beq.n	802126e <_strtod_l+0x59a>
 8021258:	4b15      	ldr	r3, [pc, #84]	@ (80212b0 <_strtod_l+0x5dc>)
 802125a:	00d2      	lsls	r2, r2, #3
 802125c:	189b      	adds	r3, r3, r2
 802125e:	0030      	movs	r0, r6
 8021260:	681a      	ldr	r2, [r3, #0]
 8021262:	685b      	ldr	r3, [r3, #4]
 8021264:	0039      	movs	r1, r7
 8021266:	f7e0 fda5 	bl	8001db4 <__aeabi_ddiv>
 802126a:	0006      	movs	r6, r0
 802126c:	000f      	movs	r7, r1
 802126e:	1124      	asrs	r4, r4, #4
 8021270:	d0d5      	beq.n	802121e <_strtod_l+0x54a>
 8021272:	2c1f      	cmp	r4, #31
 8021274:	dd28      	ble.n	80212c8 <_strtod_l+0x5f4>
 8021276:	2300      	movs	r3, #0
 8021278:	9306      	str	r3, [sp, #24]
 802127a:	9307      	str	r3, [sp, #28]
 802127c:	930d      	str	r3, [sp, #52]	@ 0x34
 802127e:	9308      	str	r3, [sp, #32]
 8021280:	2322      	movs	r3, #34	@ 0x22
 8021282:	9a05      	ldr	r2, [sp, #20]
 8021284:	2600      	movs	r6, #0
 8021286:	6013      	str	r3, [r2, #0]
 8021288:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802128a:	2700      	movs	r7, #0
 802128c:	2b00      	cmp	r3, #0
 802128e:	d000      	beq.n	8021292 <_strtod_l+0x5be>
 8021290:	e763      	b.n	802115a <_strtod_l+0x486>
 8021292:	e55a      	b.n	8020d4a <_strtod_l+0x76>
 8021294:	00004e1f 	.word	0x00004e1f
 8021298:	08029186 	.word	0x08029186
 802129c:	08029024 	.word	0x08029024
 80212a0:	7ff00000 	.word	0x7ff00000
 80212a4:	0802917e 	.word	0x0802917e
 80212a8:	080291b8 	.word	0x080291b8
 80212ac:	08029444 	.word	0x08029444
 80212b0:	08029330 	.word	0x08029330
 80212b4:	08029308 	.word	0x08029308
 80212b8:	fcb00000 	.word	0xfcb00000
 80212bc:	7ca00000 	.word	0x7ca00000
 80212c0:	7c900000 	.word	0x7c900000
 80212c4:	7fefffff 	.word	0x7fefffff
 80212c8:	2310      	movs	r3, #16
 80212ca:	0022      	movs	r2, r4
 80212cc:	401a      	ands	r2, r3
 80212ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80212d0:	421c      	tst	r4, r3
 80212d2:	d001      	beq.n	80212d8 <_strtod_l+0x604>
 80212d4:	335a      	adds	r3, #90	@ 0x5a
 80212d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80212d8:	0030      	movs	r0, r6
 80212da:	0039      	movs	r1, r7
 80212dc:	2300      	movs	r3, #0
 80212de:	4dbf      	ldr	r5, [pc, #764]	@ (80215dc <_strtod_l+0x908>)
 80212e0:	2201      	movs	r2, #1
 80212e2:	4214      	tst	r4, r2
 80212e4:	d004      	beq.n	80212f0 <_strtod_l+0x61c>
 80212e6:	682a      	ldr	r2, [r5, #0]
 80212e8:	686b      	ldr	r3, [r5, #4]
 80212ea:	f7e1 f9a7 	bl	800263c <__aeabi_dmul>
 80212ee:	2301      	movs	r3, #1
 80212f0:	1064      	asrs	r4, r4, #1
 80212f2:	3508      	adds	r5, #8
 80212f4:	2c00      	cmp	r4, #0
 80212f6:	d1f3      	bne.n	80212e0 <_strtod_l+0x60c>
 80212f8:	2b00      	cmp	r3, #0
 80212fa:	d001      	beq.n	8021300 <_strtod_l+0x62c>
 80212fc:	0006      	movs	r6, r0
 80212fe:	000f      	movs	r7, r1
 8021300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021302:	2b00      	cmp	r3, #0
 8021304:	d00d      	beq.n	8021322 <_strtod_l+0x64e>
 8021306:	236b      	movs	r3, #107	@ 0x6b
 8021308:	007a      	lsls	r2, r7, #1
 802130a:	0d52      	lsrs	r2, r2, #21
 802130c:	0039      	movs	r1, r7
 802130e:	1a9b      	subs	r3, r3, r2
 8021310:	2b00      	cmp	r3, #0
 8021312:	dd06      	ble.n	8021322 <_strtod_l+0x64e>
 8021314:	2b1f      	cmp	r3, #31
 8021316:	dd5a      	ble.n	80213ce <_strtod_l+0x6fa>
 8021318:	2600      	movs	r6, #0
 802131a:	2b34      	cmp	r3, #52	@ 0x34
 802131c:	dd50      	ble.n	80213c0 <_strtod_l+0x6ec>
 802131e:	27dc      	movs	r7, #220	@ 0xdc
 8021320:	04bf      	lsls	r7, r7, #18
 8021322:	2200      	movs	r2, #0
 8021324:	2300      	movs	r3, #0
 8021326:	0030      	movs	r0, r6
 8021328:	0039      	movs	r1, r7
 802132a:	f7df f8c1 	bl	80004b0 <__aeabi_dcmpeq>
 802132e:	2800      	cmp	r0, #0
 8021330:	d1a1      	bne.n	8021276 <_strtod_l+0x5a2>
 8021332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021334:	9a08      	ldr	r2, [sp, #32]
 8021336:	9300      	str	r3, [sp, #0]
 8021338:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802133a:	9b06      	ldr	r3, [sp, #24]
 802133c:	9805      	ldr	r0, [sp, #20]
 802133e:	f002 fee7 	bl	8024110 <__s2b>
 8021342:	900d      	str	r0, [sp, #52]	@ 0x34
 8021344:	2800      	cmp	r0, #0
 8021346:	d100      	bne.n	802134a <_strtod_l+0x676>
 8021348:	e6f9      	b.n	802113e <_strtod_l+0x46a>
 802134a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802134c:	9907      	ldr	r1, [sp, #28]
 802134e:	17da      	asrs	r2, r3, #31
 8021350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021352:	1a5b      	subs	r3, r3, r1
 8021354:	401a      	ands	r2, r3
 8021356:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021358:	9217      	str	r2, [sp, #92]	@ 0x5c
 802135a:	43db      	mvns	r3, r3
 802135c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802135e:	17db      	asrs	r3, r3, #31
 8021360:	401a      	ands	r2, r3
 8021362:	2300      	movs	r3, #0
 8021364:	921a      	str	r2, [sp, #104]	@ 0x68
 8021366:	9306      	str	r3, [sp, #24]
 8021368:	9307      	str	r3, [sp, #28]
 802136a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802136c:	9805      	ldr	r0, [sp, #20]
 802136e:	6859      	ldr	r1, [r3, #4]
 8021370:	f002 fe22 	bl	8023fb8 <_Balloc>
 8021374:	9008      	str	r0, [sp, #32]
 8021376:	2800      	cmp	r0, #0
 8021378:	d100      	bne.n	802137c <_strtod_l+0x6a8>
 802137a:	e6e5      	b.n	8021148 <_strtod_l+0x474>
 802137c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802137e:	300c      	adds	r0, #12
 8021380:	0019      	movs	r1, r3
 8021382:	691a      	ldr	r2, [r3, #16]
 8021384:	310c      	adds	r1, #12
 8021386:	3202      	adds	r2, #2
 8021388:	0092      	lsls	r2, r2, #2
 802138a:	f001 fb11 	bl	80229b0 <memcpy>
 802138e:	ab20      	add	r3, sp, #128	@ 0x80
 8021390:	9301      	str	r3, [sp, #4]
 8021392:	ab1f      	add	r3, sp, #124	@ 0x7c
 8021394:	9300      	str	r3, [sp, #0]
 8021396:	0032      	movs	r2, r6
 8021398:	003b      	movs	r3, r7
 802139a:	9805      	ldr	r0, [sp, #20]
 802139c:	9610      	str	r6, [sp, #64]	@ 0x40
 802139e:	9711      	str	r7, [sp, #68]	@ 0x44
 80213a0:	f003 fa06 	bl	80247b0 <__d2b>
 80213a4:	901e      	str	r0, [sp, #120]	@ 0x78
 80213a6:	2800      	cmp	r0, #0
 80213a8:	d100      	bne.n	80213ac <_strtod_l+0x6d8>
 80213aa:	e6cd      	b.n	8021148 <_strtod_l+0x474>
 80213ac:	2101      	movs	r1, #1
 80213ae:	9805      	ldr	r0, [sp, #20]
 80213b0:	f002 ff4a 	bl	8024248 <__i2b>
 80213b4:	9007      	str	r0, [sp, #28]
 80213b6:	2800      	cmp	r0, #0
 80213b8:	d10e      	bne.n	80213d8 <_strtod_l+0x704>
 80213ba:	2300      	movs	r3, #0
 80213bc:	9307      	str	r3, [sp, #28]
 80213be:	e6c3      	b.n	8021148 <_strtod_l+0x474>
 80213c0:	234b      	movs	r3, #75	@ 0x4b
 80213c2:	1a9a      	subs	r2, r3, r2
 80213c4:	3b4c      	subs	r3, #76	@ 0x4c
 80213c6:	4093      	lsls	r3, r2
 80213c8:	4019      	ands	r1, r3
 80213ca:	000f      	movs	r7, r1
 80213cc:	e7a9      	b.n	8021322 <_strtod_l+0x64e>
 80213ce:	2201      	movs	r2, #1
 80213d0:	4252      	negs	r2, r2
 80213d2:	409a      	lsls	r2, r3
 80213d4:	4016      	ands	r6, r2
 80213d6:	e7a4      	b.n	8021322 <_strtod_l+0x64e>
 80213d8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80213da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80213dc:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80213de:	1ad4      	subs	r4, r2, r3
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	db01      	blt.n	80213e8 <_strtod_l+0x714>
 80213e4:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80213e6:	195d      	adds	r5, r3, r5
 80213e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80213ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80213ec:	1a5b      	subs	r3, r3, r1
 80213ee:	2136      	movs	r1, #54	@ 0x36
 80213f0:	189b      	adds	r3, r3, r2
 80213f2:	1a8a      	subs	r2, r1, r2
 80213f4:	497a      	ldr	r1, [pc, #488]	@ (80215e0 <_strtod_l+0x90c>)
 80213f6:	2001      	movs	r0, #1
 80213f8:	468c      	mov	ip, r1
 80213fa:	2100      	movs	r1, #0
 80213fc:	3b01      	subs	r3, #1
 80213fe:	9116      	str	r1, [sp, #88]	@ 0x58
 8021400:	9014      	str	r0, [sp, #80]	@ 0x50
 8021402:	4563      	cmp	r3, ip
 8021404:	da06      	bge.n	8021414 <_strtod_l+0x740>
 8021406:	4661      	mov	r1, ip
 8021408:	1ac9      	subs	r1, r1, r3
 802140a:	1a52      	subs	r2, r2, r1
 802140c:	291f      	cmp	r1, #31
 802140e:	dc3f      	bgt.n	8021490 <_strtod_l+0x7bc>
 8021410:	4088      	lsls	r0, r1
 8021412:	9014      	str	r0, [sp, #80]	@ 0x50
 8021414:	18ab      	adds	r3, r5, r2
 8021416:	930e      	str	r3, [sp, #56]	@ 0x38
 8021418:	18a4      	adds	r4, r4, r2
 802141a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802141c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802141e:	191c      	adds	r4, r3, r4
 8021420:	002b      	movs	r3, r5
 8021422:	4295      	cmp	r5, r2
 8021424:	dd00      	ble.n	8021428 <_strtod_l+0x754>
 8021426:	0013      	movs	r3, r2
 8021428:	42a3      	cmp	r3, r4
 802142a:	dd00      	ble.n	802142e <_strtod_l+0x75a>
 802142c:	0023      	movs	r3, r4
 802142e:	2b00      	cmp	r3, #0
 8021430:	dd04      	ble.n	802143c <_strtod_l+0x768>
 8021432:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021434:	1ae4      	subs	r4, r4, r3
 8021436:	1ad2      	subs	r2, r2, r3
 8021438:	920e      	str	r2, [sp, #56]	@ 0x38
 802143a:	1aed      	subs	r5, r5, r3
 802143c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802143e:	2b00      	cmp	r3, #0
 8021440:	dd16      	ble.n	8021470 <_strtod_l+0x79c>
 8021442:	001a      	movs	r2, r3
 8021444:	9907      	ldr	r1, [sp, #28]
 8021446:	9805      	ldr	r0, [sp, #20]
 8021448:	f002 ffc8 	bl	80243dc <__pow5mult>
 802144c:	9007      	str	r0, [sp, #28]
 802144e:	2800      	cmp	r0, #0
 8021450:	d0b3      	beq.n	80213ba <_strtod_l+0x6e6>
 8021452:	0001      	movs	r1, r0
 8021454:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8021456:	9805      	ldr	r0, [sp, #20]
 8021458:	f002 ff0e 	bl	8024278 <__multiply>
 802145c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802145e:	2800      	cmp	r0, #0
 8021460:	d100      	bne.n	8021464 <_strtod_l+0x790>
 8021462:	e671      	b.n	8021148 <_strtod_l+0x474>
 8021464:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8021466:	9805      	ldr	r0, [sp, #20]
 8021468:	f002 fdea 	bl	8024040 <_Bfree>
 802146c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802146e:	931e      	str	r3, [sp, #120]	@ 0x78
 8021470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021472:	2b00      	cmp	r3, #0
 8021474:	dc12      	bgt.n	802149c <_strtod_l+0x7c8>
 8021476:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021478:	2b00      	cmp	r3, #0
 802147a:	dd18      	ble.n	80214ae <_strtod_l+0x7da>
 802147c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802147e:	9908      	ldr	r1, [sp, #32]
 8021480:	9805      	ldr	r0, [sp, #20]
 8021482:	f002 ffab 	bl	80243dc <__pow5mult>
 8021486:	9008      	str	r0, [sp, #32]
 8021488:	2800      	cmp	r0, #0
 802148a:	d110      	bne.n	80214ae <_strtod_l+0x7da>
 802148c:	2300      	movs	r3, #0
 802148e:	e65a      	b.n	8021146 <_strtod_l+0x472>
 8021490:	4954      	ldr	r1, [pc, #336]	@ (80215e4 <_strtod_l+0x910>)
 8021492:	1acb      	subs	r3, r1, r3
 8021494:	0001      	movs	r1, r0
 8021496:	4099      	lsls	r1, r3
 8021498:	9116      	str	r1, [sp, #88]	@ 0x58
 802149a:	e7ba      	b.n	8021412 <_strtod_l+0x73e>
 802149c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802149e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80214a0:	9805      	ldr	r0, [sp, #20]
 80214a2:	f002 fff7 	bl	8024494 <__lshift>
 80214a6:	901e      	str	r0, [sp, #120]	@ 0x78
 80214a8:	2800      	cmp	r0, #0
 80214aa:	d1e4      	bne.n	8021476 <_strtod_l+0x7a2>
 80214ac:	e64c      	b.n	8021148 <_strtod_l+0x474>
 80214ae:	2c00      	cmp	r4, #0
 80214b0:	dd07      	ble.n	80214c2 <_strtod_l+0x7ee>
 80214b2:	0022      	movs	r2, r4
 80214b4:	9908      	ldr	r1, [sp, #32]
 80214b6:	9805      	ldr	r0, [sp, #20]
 80214b8:	f002 ffec 	bl	8024494 <__lshift>
 80214bc:	9008      	str	r0, [sp, #32]
 80214be:	2800      	cmp	r0, #0
 80214c0:	d0e4      	beq.n	802148c <_strtod_l+0x7b8>
 80214c2:	2d00      	cmp	r5, #0
 80214c4:	dd08      	ble.n	80214d8 <_strtod_l+0x804>
 80214c6:	002a      	movs	r2, r5
 80214c8:	9907      	ldr	r1, [sp, #28]
 80214ca:	9805      	ldr	r0, [sp, #20]
 80214cc:	f002 ffe2 	bl	8024494 <__lshift>
 80214d0:	9007      	str	r0, [sp, #28]
 80214d2:	2800      	cmp	r0, #0
 80214d4:	d100      	bne.n	80214d8 <_strtod_l+0x804>
 80214d6:	e637      	b.n	8021148 <_strtod_l+0x474>
 80214d8:	9a08      	ldr	r2, [sp, #32]
 80214da:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80214dc:	9805      	ldr	r0, [sp, #20]
 80214de:	f003 f861 	bl	80245a4 <__mdiff>
 80214e2:	9006      	str	r0, [sp, #24]
 80214e4:	2800      	cmp	r0, #0
 80214e6:	d100      	bne.n	80214ea <_strtod_l+0x816>
 80214e8:	e62e      	b.n	8021148 <_strtod_l+0x474>
 80214ea:	68c3      	ldr	r3, [r0, #12]
 80214ec:	9907      	ldr	r1, [sp, #28]
 80214ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80214f0:	2300      	movs	r3, #0
 80214f2:	60c3      	str	r3, [r0, #12]
 80214f4:	f003 f83a 	bl	802456c <__mcmp>
 80214f8:	2800      	cmp	r0, #0
 80214fa:	da3b      	bge.n	8021574 <_strtod_l+0x8a0>
 80214fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80214fe:	4333      	orrs	r3, r6
 8021500:	d167      	bne.n	80215d2 <_strtod_l+0x8fe>
 8021502:	033b      	lsls	r3, r7, #12
 8021504:	d165      	bne.n	80215d2 <_strtod_l+0x8fe>
 8021506:	22d6      	movs	r2, #214	@ 0xd6
 8021508:	4b37      	ldr	r3, [pc, #220]	@ (80215e8 <_strtod_l+0x914>)
 802150a:	04d2      	lsls	r2, r2, #19
 802150c:	403b      	ands	r3, r7
 802150e:	4293      	cmp	r3, r2
 8021510:	d95f      	bls.n	80215d2 <_strtod_l+0x8fe>
 8021512:	9b06      	ldr	r3, [sp, #24]
 8021514:	695b      	ldr	r3, [r3, #20]
 8021516:	2b00      	cmp	r3, #0
 8021518:	d103      	bne.n	8021522 <_strtod_l+0x84e>
 802151a:	9b06      	ldr	r3, [sp, #24]
 802151c:	691b      	ldr	r3, [r3, #16]
 802151e:	2b01      	cmp	r3, #1
 8021520:	dd57      	ble.n	80215d2 <_strtod_l+0x8fe>
 8021522:	9906      	ldr	r1, [sp, #24]
 8021524:	2201      	movs	r2, #1
 8021526:	9805      	ldr	r0, [sp, #20]
 8021528:	f002 ffb4 	bl	8024494 <__lshift>
 802152c:	9907      	ldr	r1, [sp, #28]
 802152e:	9006      	str	r0, [sp, #24]
 8021530:	f003 f81c 	bl	802456c <__mcmp>
 8021534:	2800      	cmp	r0, #0
 8021536:	dd4c      	ble.n	80215d2 <_strtod_l+0x8fe>
 8021538:	4b2b      	ldr	r3, [pc, #172]	@ (80215e8 <_strtod_l+0x914>)
 802153a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802153c:	403b      	ands	r3, r7
 802153e:	2a00      	cmp	r2, #0
 8021540:	d074      	beq.n	802162c <_strtod_l+0x958>
 8021542:	22d6      	movs	r2, #214	@ 0xd6
 8021544:	04d2      	lsls	r2, r2, #19
 8021546:	4293      	cmp	r3, r2
 8021548:	d870      	bhi.n	802162c <_strtod_l+0x958>
 802154a:	22dc      	movs	r2, #220	@ 0xdc
 802154c:	0492      	lsls	r2, r2, #18
 802154e:	4293      	cmp	r3, r2
 8021550:	d800      	bhi.n	8021554 <_strtod_l+0x880>
 8021552:	e695      	b.n	8021280 <_strtod_l+0x5ac>
 8021554:	0030      	movs	r0, r6
 8021556:	0039      	movs	r1, r7
 8021558:	4b24      	ldr	r3, [pc, #144]	@ (80215ec <_strtod_l+0x918>)
 802155a:	2200      	movs	r2, #0
 802155c:	f7e1 f86e 	bl	800263c <__aeabi_dmul>
 8021560:	4b21      	ldr	r3, [pc, #132]	@ (80215e8 <_strtod_l+0x914>)
 8021562:	0006      	movs	r6, r0
 8021564:	000f      	movs	r7, r1
 8021566:	420b      	tst	r3, r1
 8021568:	d000      	beq.n	802156c <_strtod_l+0x898>
 802156a:	e5f6      	b.n	802115a <_strtod_l+0x486>
 802156c:	2322      	movs	r3, #34	@ 0x22
 802156e:	9a05      	ldr	r2, [sp, #20]
 8021570:	6013      	str	r3, [r2, #0]
 8021572:	e5f2      	b.n	802115a <_strtod_l+0x486>
 8021574:	970e      	str	r7, [sp, #56]	@ 0x38
 8021576:	2800      	cmp	r0, #0
 8021578:	d175      	bne.n	8021666 <_strtod_l+0x992>
 802157a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802157c:	033b      	lsls	r3, r7, #12
 802157e:	0b1b      	lsrs	r3, r3, #12
 8021580:	2a00      	cmp	r2, #0
 8021582:	d039      	beq.n	80215f8 <_strtod_l+0x924>
 8021584:	4a1a      	ldr	r2, [pc, #104]	@ (80215f0 <_strtod_l+0x91c>)
 8021586:	4293      	cmp	r3, r2
 8021588:	d138      	bne.n	80215fc <_strtod_l+0x928>
 802158a:	2101      	movs	r1, #1
 802158c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802158e:	4249      	negs	r1, r1
 8021590:	0032      	movs	r2, r6
 8021592:	0008      	movs	r0, r1
 8021594:	2b00      	cmp	r3, #0
 8021596:	d00b      	beq.n	80215b0 <_strtod_l+0x8dc>
 8021598:	24d4      	movs	r4, #212	@ 0xd4
 802159a:	4b13      	ldr	r3, [pc, #76]	@ (80215e8 <_strtod_l+0x914>)
 802159c:	0008      	movs	r0, r1
 802159e:	403b      	ands	r3, r7
 80215a0:	04e4      	lsls	r4, r4, #19
 80215a2:	42a3      	cmp	r3, r4
 80215a4:	d804      	bhi.n	80215b0 <_strtod_l+0x8dc>
 80215a6:	306c      	adds	r0, #108	@ 0x6c
 80215a8:	0d1b      	lsrs	r3, r3, #20
 80215aa:	1ac3      	subs	r3, r0, r3
 80215ac:	4099      	lsls	r1, r3
 80215ae:	0008      	movs	r0, r1
 80215b0:	4282      	cmp	r2, r0
 80215b2:	d123      	bne.n	80215fc <_strtod_l+0x928>
 80215b4:	4b0f      	ldr	r3, [pc, #60]	@ (80215f4 <_strtod_l+0x920>)
 80215b6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80215b8:	4299      	cmp	r1, r3
 80215ba:	d102      	bne.n	80215c2 <_strtod_l+0x8ee>
 80215bc:	3201      	adds	r2, #1
 80215be:	d100      	bne.n	80215c2 <_strtod_l+0x8ee>
 80215c0:	e5c2      	b.n	8021148 <_strtod_l+0x474>
 80215c2:	4b09      	ldr	r3, [pc, #36]	@ (80215e8 <_strtod_l+0x914>)
 80215c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80215c6:	2600      	movs	r6, #0
 80215c8:	401a      	ands	r2, r3
 80215ca:	0013      	movs	r3, r2
 80215cc:	2280      	movs	r2, #128	@ 0x80
 80215ce:	0352      	lsls	r2, r2, #13
 80215d0:	189f      	adds	r7, r3, r2
 80215d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80215d4:	2b00      	cmp	r3, #0
 80215d6:	d1bd      	bne.n	8021554 <_strtod_l+0x880>
 80215d8:	e5bf      	b.n	802115a <_strtod_l+0x486>
 80215da:	46c0      	nop			@ (mov r8, r8)
 80215dc:	08029050 	.word	0x08029050
 80215e0:	fffffc02 	.word	0xfffffc02
 80215e4:	fffffbe2 	.word	0xfffffbe2
 80215e8:	7ff00000 	.word	0x7ff00000
 80215ec:	39500000 	.word	0x39500000
 80215f0:	000fffff 	.word	0x000fffff
 80215f4:	7fefffff 	.word	0x7fefffff
 80215f8:	4333      	orrs	r3, r6
 80215fa:	d09d      	beq.n	8021538 <_strtod_l+0x864>
 80215fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80215fe:	2b00      	cmp	r3, #0
 8021600:	d01c      	beq.n	802163c <_strtod_l+0x968>
 8021602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021604:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021606:	4213      	tst	r3, r2
 8021608:	d0e3      	beq.n	80215d2 <_strtod_l+0x8fe>
 802160a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802160c:	0030      	movs	r0, r6
 802160e:	0039      	movs	r1, r7
 8021610:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021612:	2b00      	cmp	r3, #0
 8021614:	d016      	beq.n	8021644 <_strtod_l+0x970>
 8021616:	f7ff fb45 	bl	8020ca4 <sulp>
 802161a:	0002      	movs	r2, r0
 802161c:	000b      	movs	r3, r1
 802161e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021620:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021622:	f7e0 f863 	bl	80016ec <__aeabi_dadd>
 8021626:	0006      	movs	r6, r0
 8021628:	000f      	movs	r7, r1
 802162a:	e7d2      	b.n	80215d2 <_strtod_l+0x8fe>
 802162c:	2601      	movs	r6, #1
 802162e:	4a92      	ldr	r2, [pc, #584]	@ (8021878 <_strtod_l+0xba4>)
 8021630:	4276      	negs	r6, r6
 8021632:	189b      	adds	r3, r3, r2
 8021634:	4a91      	ldr	r2, [pc, #580]	@ (802187c <_strtod_l+0xba8>)
 8021636:	431a      	orrs	r2, r3
 8021638:	0017      	movs	r7, r2
 802163a:	e7ca      	b.n	80215d2 <_strtod_l+0x8fe>
 802163c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802163e:	4233      	tst	r3, r6
 8021640:	d0c7      	beq.n	80215d2 <_strtod_l+0x8fe>
 8021642:	e7e2      	b.n	802160a <_strtod_l+0x936>
 8021644:	f7ff fb2e 	bl	8020ca4 <sulp>
 8021648:	0002      	movs	r2, r0
 802164a:	000b      	movs	r3, r1
 802164c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802164e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021650:	f7e1 fabc 	bl	8002bcc <__aeabi_dsub>
 8021654:	2200      	movs	r2, #0
 8021656:	2300      	movs	r3, #0
 8021658:	0006      	movs	r6, r0
 802165a:	000f      	movs	r7, r1
 802165c:	f7de ff28 	bl	80004b0 <__aeabi_dcmpeq>
 8021660:	2800      	cmp	r0, #0
 8021662:	d0b6      	beq.n	80215d2 <_strtod_l+0x8fe>
 8021664:	e60c      	b.n	8021280 <_strtod_l+0x5ac>
 8021666:	9907      	ldr	r1, [sp, #28]
 8021668:	9806      	ldr	r0, [sp, #24]
 802166a:	f003 f901 	bl	8024870 <__ratio>
 802166e:	2380      	movs	r3, #128	@ 0x80
 8021670:	2200      	movs	r2, #0
 8021672:	05db      	lsls	r3, r3, #23
 8021674:	0004      	movs	r4, r0
 8021676:	000d      	movs	r5, r1
 8021678:	f7de ff2a 	bl	80004d0 <__aeabi_dcmple>
 802167c:	2800      	cmp	r0, #0
 802167e:	d06c      	beq.n	802175a <_strtod_l+0xa86>
 8021680:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021682:	2b00      	cmp	r3, #0
 8021684:	d177      	bne.n	8021776 <_strtod_l+0xaa2>
 8021686:	2e00      	cmp	r6, #0
 8021688:	d157      	bne.n	802173a <_strtod_l+0xa66>
 802168a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802168c:	031b      	lsls	r3, r3, #12
 802168e:	d15a      	bne.n	8021746 <_strtod_l+0xa72>
 8021690:	2200      	movs	r2, #0
 8021692:	0020      	movs	r0, r4
 8021694:	0029      	movs	r1, r5
 8021696:	4b7a      	ldr	r3, [pc, #488]	@ (8021880 <_strtod_l+0xbac>)
 8021698:	f7de ff10 	bl	80004bc <__aeabi_dcmplt>
 802169c:	2800      	cmp	r0, #0
 802169e:	d159      	bne.n	8021754 <_strtod_l+0xa80>
 80216a0:	0020      	movs	r0, r4
 80216a2:	0029      	movs	r1, r5
 80216a4:	2200      	movs	r2, #0
 80216a6:	4b77      	ldr	r3, [pc, #476]	@ (8021884 <_strtod_l+0xbb0>)
 80216a8:	f7e0 ffc8 	bl	800263c <__aeabi_dmul>
 80216ac:	0004      	movs	r4, r0
 80216ae:	000d      	movs	r5, r1
 80216b0:	2380      	movs	r3, #128	@ 0x80
 80216b2:	061b      	lsls	r3, r3, #24
 80216b4:	18eb      	adds	r3, r5, r3
 80216b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80216b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80216ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80216bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80216be:	9214      	str	r2, [sp, #80]	@ 0x50
 80216c0:	9315      	str	r3, [sp, #84]	@ 0x54
 80216c2:	4a71      	ldr	r2, [pc, #452]	@ (8021888 <_strtod_l+0xbb4>)
 80216c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80216c6:	4013      	ands	r3, r2
 80216c8:	9316      	str	r3, [sp, #88]	@ 0x58
 80216ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80216cc:	4b6f      	ldr	r3, [pc, #444]	@ (802188c <_strtod_l+0xbb8>)
 80216ce:	429a      	cmp	r2, r3
 80216d0:	d000      	beq.n	80216d4 <_strtod_l+0xa00>
 80216d2:	e087      	b.n	80217e4 <_strtod_l+0xb10>
 80216d4:	4a6e      	ldr	r2, [pc, #440]	@ (8021890 <_strtod_l+0xbbc>)
 80216d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80216d8:	4694      	mov	ip, r2
 80216da:	4463      	add	r3, ip
 80216dc:	001f      	movs	r7, r3
 80216de:	0030      	movs	r0, r6
 80216e0:	0019      	movs	r1, r3
 80216e2:	f002 fff9 	bl	80246d8 <__ulp>
 80216e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80216e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80216ea:	f7e0 ffa7 	bl	800263c <__aeabi_dmul>
 80216ee:	0032      	movs	r2, r6
 80216f0:	003b      	movs	r3, r7
 80216f2:	f7df fffb 	bl	80016ec <__aeabi_dadd>
 80216f6:	4a64      	ldr	r2, [pc, #400]	@ (8021888 <_strtod_l+0xbb4>)
 80216f8:	4b66      	ldr	r3, [pc, #408]	@ (8021894 <_strtod_l+0xbc0>)
 80216fa:	0006      	movs	r6, r0
 80216fc:	400a      	ands	r2, r1
 80216fe:	429a      	cmp	r2, r3
 8021700:	d940      	bls.n	8021784 <_strtod_l+0xab0>
 8021702:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021704:	4a64      	ldr	r2, [pc, #400]	@ (8021898 <_strtod_l+0xbc4>)
 8021706:	4293      	cmp	r3, r2
 8021708:	d103      	bne.n	8021712 <_strtod_l+0xa3e>
 802170a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802170c:	3301      	adds	r3, #1
 802170e:	d100      	bne.n	8021712 <_strtod_l+0xa3e>
 8021710:	e51a      	b.n	8021148 <_strtod_l+0x474>
 8021712:	2601      	movs	r6, #1
 8021714:	4f60      	ldr	r7, [pc, #384]	@ (8021898 <_strtod_l+0xbc4>)
 8021716:	4276      	negs	r6, r6
 8021718:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802171a:	9805      	ldr	r0, [sp, #20]
 802171c:	f002 fc90 	bl	8024040 <_Bfree>
 8021720:	9908      	ldr	r1, [sp, #32]
 8021722:	9805      	ldr	r0, [sp, #20]
 8021724:	f002 fc8c 	bl	8024040 <_Bfree>
 8021728:	9907      	ldr	r1, [sp, #28]
 802172a:	9805      	ldr	r0, [sp, #20]
 802172c:	f002 fc88 	bl	8024040 <_Bfree>
 8021730:	9906      	ldr	r1, [sp, #24]
 8021732:	9805      	ldr	r0, [sp, #20]
 8021734:	f002 fc84 	bl	8024040 <_Bfree>
 8021738:	e617      	b.n	802136a <_strtod_l+0x696>
 802173a:	2e01      	cmp	r6, #1
 802173c:	d103      	bne.n	8021746 <_strtod_l+0xa72>
 802173e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021740:	2b00      	cmp	r3, #0
 8021742:	d100      	bne.n	8021746 <_strtod_l+0xa72>
 8021744:	e59c      	b.n	8021280 <_strtod_l+0x5ac>
 8021746:	2300      	movs	r3, #0
 8021748:	4c54      	ldr	r4, [pc, #336]	@ (802189c <_strtod_l+0xbc8>)
 802174a:	4d4d      	ldr	r5, [pc, #308]	@ (8021880 <_strtod_l+0xbac>)
 802174c:	930a      	str	r3, [sp, #40]	@ 0x28
 802174e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021750:	2400      	movs	r4, #0
 8021752:	e7b2      	b.n	80216ba <_strtod_l+0x9e6>
 8021754:	2400      	movs	r4, #0
 8021756:	4d4b      	ldr	r5, [pc, #300]	@ (8021884 <_strtod_l+0xbb0>)
 8021758:	e7aa      	b.n	80216b0 <_strtod_l+0x9dc>
 802175a:	0020      	movs	r0, r4
 802175c:	0029      	movs	r1, r5
 802175e:	4b49      	ldr	r3, [pc, #292]	@ (8021884 <_strtod_l+0xbb0>)
 8021760:	2200      	movs	r2, #0
 8021762:	f7e0 ff6b 	bl	800263c <__aeabi_dmul>
 8021766:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021768:	0004      	movs	r4, r0
 802176a:	000d      	movs	r5, r1
 802176c:	2b00      	cmp	r3, #0
 802176e:	d09f      	beq.n	80216b0 <_strtod_l+0x9dc>
 8021770:	940a      	str	r4, [sp, #40]	@ 0x28
 8021772:	950b      	str	r5, [sp, #44]	@ 0x2c
 8021774:	e7a1      	b.n	80216ba <_strtod_l+0x9e6>
 8021776:	2300      	movs	r3, #0
 8021778:	4c41      	ldr	r4, [pc, #260]	@ (8021880 <_strtod_l+0xbac>)
 802177a:	0025      	movs	r5, r4
 802177c:	930a      	str	r3, [sp, #40]	@ 0x28
 802177e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021780:	001c      	movs	r4, r3
 8021782:	e79a      	b.n	80216ba <_strtod_l+0x9e6>
 8021784:	23d4      	movs	r3, #212	@ 0xd4
 8021786:	049b      	lsls	r3, r3, #18
 8021788:	18cf      	adds	r7, r1, r3
 802178a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802178c:	9710      	str	r7, [sp, #64]	@ 0x40
 802178e:	2b00      	cmp	r3, #0
 8021790:	d1c2      	bne.n	8021718 <_strtod_l+0xa44>
 8021792:	4b3d      	ldr	r3, [pc, #244]	@ (8021888 <_strtod_l+0xbb4>)
 8021794:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021796:	403b      	ands	r3, r7
 8021798:	429a      	cmp	r2, r3
 802179a:	d1bd      	bne.n	8021718 <_strtod_l+0xa44>
 802179c:	0020      	movs	r0, r4
 802179e:	0029      	movs	r1, r5
 80217a0:	f7de ff72 	bl	8000688 <__aeabi_d2lz>
 80217a4:	f7de ffaa 	bl	80006fc <__aeabi_l2d>
 80217a8:	0002      	movs	r2, r0
 80217aa:	000b      	movs	r3, r1
 80217ac:	0020      	movs	r0, r4
 80217ae:	0029      	movs	r1, r5
 80217b0:	f7e1 fa0c 	bl	8002bcc <__aeabi_dsub>
 80217b4:	033c      	lsls	r4, r7, #12
 80217b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80217b8:	0b24      	lsrs	r4, r4, #12
 80217ba:	4334      	orrs	r4, r6
 80217bc:	900e      	str	r0, [sp, #56]	@ 0x38
 80217be:	910f      	str	r1, [sp, #60]	@ 0x3c
 80217c0:	4a37      	ldr	r2, [pc, #220]	@ (80218a0 <_strtod_l+0xbcc>)
 80217c2:	431c      	orrs	r4, r3
 80217c4:	d052      	beq.n	802186c <_strtod_l+0xb98>
 80217c6:	4b37      	ldr	r3, [pc, #220]	@ (80218a4 <_strtod_l+0xbd0>)
 80217c8:	f7de fe78 	bl	80004bc <__aeabi_dcmplt>
 80217cc:	2800      	cmp	r0, #0
 80217ce:	d000      	beq.n	80217d2 <_strtod_l+0xafe>
 80217d0:	e4c3      	b.n	802115a <_strtod_l+0x486>
 80217d2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80217d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80217d6:	4a34      	ldr	r2, [pc, #208]	@ (80218a8 <_strtod_l+0xbd4>)
 80217d8:	4b2a      	ldr	r3, [pc, #168]	@ (8021884 <_strtod_l+0xbb0>)
 80217da:	f7de fe83 	bl	80004e4 <__aeabi_dcmpgt>
 80217de:	2800      	cmp	r0, #0
 80217e0:	d09a      	beq.n	8021718 <_strtod_l+0xa44>
 80217e2:	e4ba      	b.n	802115a <_strtod_l+0x486>
 80217e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80217e6:	2b00      	cmp	r3, #0
 80217e8:	d02a      	beq.n	8021840 <_strtod_l+0xb6c>
 80217ea:	23d4      	movs	r3, #212	@ 0xd4
 80217ec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80217ee:	04db      	lsls	r3, r3, #19
 80217f0:	429a      	cmp	r2, r3
 80217f2:	d825      	bhi.n	8021840 <_strtod_l+0xb6c>
 80217f4:	0020      	movs	r0, r4
 80217f6:	0029      	movs	r1, r5
 80217f8:	4a2c      	ldr	r2, [pc, #176]	@ (80218ac <_strtod_l+0xbd8>)
 80217fa:	4b2d      	ldr	r3, [pc, #180]	@ (80218b0 <_strtod_l+0xbdc>)
 80217fc:	f7de fe68 	bl	80004d0 <__aeabi_dcmple>
 8021800:	2800      	cmp	r0, #0
 8021802:	d016      	beq.n	8021832 <_strtod_l+0xb5e>
 8021804:	0020      	movs	r0, r4
 8021806:	0029      	movs	r1, r5
 8021808:	f7de ff20 	bl	800064c <__aeabi_d2uiz>
 802180c:	2800      	cmp	r0, #0
 802180e:	d100      	bne.n	8021812 <_strtod_l+0xb3e>
 8021810:	3001      	adds	r0, #1
 8021812:	f7e1 fe03 	bl	800341c <__aeabi_ui2d>
 8021816:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021818:	0004      	movs	r4, r0
 802181a:	000d      	movs	r5, r1
 802181c:	2b00      	cmp	r3, #0
 802181e:	d122      	bne.n	8021866 <_strtod_l+0xb92>
 8021820:	2380      	movs	r3, #128	@ 0x80
 8021822:	061b      	lsls	r3, r3, #24
 8021824:	18cb      	adds	r3, r1, r3
 8021826:	9018      	str	r0, [sp, #96]	@ 0x60
 8021828:	9319      	str	r3, [sp, #100]	@ 0x64
 802182a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802182c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802182e:	9214      	str	r2, [sp, #80]	@ 0x50
 8021830:	9315      	str	r3, [sp, #84]	@ 0x54
 8021832:	22d6      	movs	r2, #214	@ 0xd6
 8021834:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021836:	04d2      	lsls	r2, r2, #19
 8021838:	189b      	adds	r3, r3, r2
 802183a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802183c:	1a9b      	subs	r3, r3, r2
 802183e:	9315      	str	r3, [sp, #84]	@ 0x54
 8021840:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021842:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021844:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8021846:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8021848:	f002 ff46 	bl	80246d8 <__ulp>
 802184c:	0002      	movs	r2, r0
 802184e:	000b      	movs	r3, r1
 8021850:	0030      	movs	r0, r6
 8021852:	0039      	movs	r1, r7
 8021854:	f7e0 fef2 	bl	800263c <__aeabi_dmul>
 8021858:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802185a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802185c:	f7df ff46 	bl	80016ec <__aeabi_dadd>
 8021860:	0006      	movs	r6, r0
 8021862:	000f      	movs	r7, r1
 8021864:	e791      	b.n	802178a <_strtod_l+0xab6>
 8021866:	9418      	str	r4, [sp, #96]	@ 0x60
 8021868:	9519      	str	r5, [sp, #100]	@ 0x64
 802186a:	e7de      	b.n	802182a <_strtod_l+0xb56>
 802186c:	4b11      	ldr	r3, [pc, #68]	@ (80218b4 <_strtod_l+0xbe0>)
 802186e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8021870:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021872:	f7de fe23 	bl	80004bc <__aeabi_dcmplt>
 8021876:	e7b2      	b.n	80217de <_strtod_l+0xb0a>
 8021878:	fff00000 	.word	0xfff00000
 802187c:	000fffff 	.word	0x000fffff
 8021880:	3ff00000 	.word	0x3ff00000
 8021884:	3fe00000 	.word	0x3fe00000
 8021888:	7ff00000 	.word	0x7ff00000
 802188c:	7fe00000 	.word	0x7fe00000
 8021890:	fcb00000 	.word	0xfcb00000
 8021894:	7c9fffff 	.word	0x7c9fffff
 8021898:	7fefffff 	.word	0x7fefffff
 802189c:	bff00000 	.word	0xbff00000
 80218a0:	94a03595 	.word	0x94a03595
 80218a4:	3fdfffff 	.word	0x3fdfffff
 80218a8:	35afe535 	.word	0x35afe535
 80218ac:	ffc00000 	.word	0xffc00000
 80218b0:	41dfffff 	.word	0x41dfffff
 80218b4:	3fcfffff 	.word	0x3fcfffff

080218b8 <strtod>:
 80218b8:	b510      	push	{r4, lr}
 80218ba:	4c04      	ldr	r4, [pc, #16]	@ (80218cc <strtod+0x14>)
 80218bc:	000a      	movs	r2, r1
 80218be:	0001      	movs	r1, r0
 80218c0:	4b03      	ldr	r3, [pc, #12]	@ (80218d0 <strtod+0x18>)
 80218c2:	6820      	ldr	r0, [r4, #0]
 80218c4:	f7ff fa06 	bl	8020cd4 <_strtod_l>
 80218c8:	bd10      	pop	{r4, pc}
 80218ca:	46c0      	nop			@ (mov r8, r8)
 80218cc:	200003dc 	.word	0x200003dc
 80218d0:	20000270 	.word	0x20000270

080218d4 <_strtol_l.constprop.0>:
 80218d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80218d6:	b085      	sub	sp, #20
 80218d8:	0017      	movs	r7, r2
 80218da:	001e      	movs	r6, r3
 80218dc:	9003      	str	r0, [sp, #12]
 80218de:	9101      	str	r1, [sp, #4]
 80218e0:	2b24      	cmp	r3, #36	@ 0x24
 80218e2:	d844      	bhi.n	802196e <_strtol_l.constprop.0+0x9a>
 80218e4:	000c      	movs	r4, r1
 80218e6:	2b01      	cmp	r3, #1
 80218e8:	d041      	beq.n	802196e <_strtol_l.constprop.0+0x9a>
 80218ea:	4b3d      	ldr	r3, [pc, #244]	@ (80219e0 <_strtol_l.constprop.0+0x10c>)
 80218ec:	2208      	movs	r2, #8
 80218ee:	469c      	mov	ip, r3
 80218f0:	0023      	movs	r3, r4
 80218f2:	4661      	mov	r1, ip
 80218f4:	781d      	ldrb	r5, [r3, #0]
 80218f6:	3401      	adds	r4, #1
 80218f8:	5d48      	ldrb	r0, [r1, r5]
 80218fa:	0001      	movs	r1, r0
 80218fc:	4011      	ands	r1, r2
 80218fe:	4210      	tst	r0, r2
 8021900:	d1f6      	bne.n	80218f0 <_strtol_l.constprop.0+0x1c>
 8021902:	2d2d      	cmp	r5, #45	@ 0x2d
 8021904:	d13a      	bne.n	802197c <_strtol_l.constprop.0+0xa8>
 8021906:	7825      	ldrb	r5, [r4, #0]
 8021908:	1c9c      	adds	r4, r3, #2
 802190a:	2301      	movs	r3, #1
 802190c:	9300      	str	r3, [sp, #0]
 802190e:	2210      	movs	r2, #16
 8021910:	0033      	movs	r3, r6
 8021912:	4393      	bics	r3, r2
 8021914:	d109      	bne.n	802192a <_strtol_l.constprop.0+0x56>
 8021916:	2d30      	cmp	r5, #48	@ 0x30
 8021918:	d136      	bne.n	8021988 <_strtol_l.constprop.0+0xb4>
 802191a:	2120      	movs	r1, #32
 802191c:	7823      	ldrb	r3, [r4, #0]
 802191e:	438b      	bics	r3, r1
 8021920:	2b58      	cmp	r3, #88	@ 0x58
 8021922:	d131      	bne.n	8021988 <_strtol_l.constprop.0+0xb4>
 8021924:	0016      	movs	r6, r2
 8021926:	7865      	ldrb	r5, [r4, #1]
 8021928:	3402      	adds	r4, #2
 802192a:	4a2e      	ldr	r2, [pc, #184]	@ (80219e4 <_strtol_l.constprop.0+0x110>)
 802192c:	9b00      	ldr	r3, [sp, #0]
 802192e:	4694      	mov	ip, r2
 8021930:	4463      	add	r3, ip
 8021932:	0031      	movs	r1, r6
 8021934:	0018      	movs	r0, r3
 8021936:	9302      	str	r3, [sp, #8]
 8021938:	f7de fcba 	bl	80002b0 <__aeabi_uidivmod>
 802193c:	2200      	movs	r2, #0
 802193e:	4684      	mov	ip, r0
 8021940:	0010      	movs	r0, r2
 8021942:	002b      	movs	r3, r5
 8021944:	3b30      	subs	r3, #48	@ 0x30
 8021946:	2b09      	cmp	r3, #9
 8021948:	d825      	bhi.n	8021996 <_strtol_l.constprop.0+0xc2>
 802194a:	001d      	movs	r5, r3
 802194c:	42ae      	cmp	r6, r5
 802194e:	dd31      	ble.n	80219b4 <_strtol_l.constprop.0+0xe0>
 8021950:	1c53      	adds	r3, r2, #1
 8021952:	d009      	beq.n	8021968 <_strtol_l.constprop.0+0x94>
 8021954:	2201      	movs	r2, #1
 8021956:	4252      	negs	r2, r2
 8021958:	4584      	cmp	ip, r0
 802195a:	d305      	bcc.n	8021968 <_strtol_l.constprop.0+0x94>
 802195c:	d101      	bne.n	8021962 <_strtol_l.constprop.0+0x8e>
 802195e:	42a9      	cmp	r1, r5
 8021960:	db25      	blt.n	80219ae <_strtol_l.constprop.0+0xda>
 8021962:	2201      	movs	r2, #1
 8021964:	4370      	muls	r0, r6
 8021966:	1828      	adds	r0, r5, r0
 8021968:	7825      	ldrb	r5, [r4, #0]
 802196a:	3401      	adds	r4, #1
 802196c:	e7e9      	b.n	8021942 <_strtol_l.constprop.0+0x6e>
 802196e:	f000 ffe7 	bl	8022940 <__errno>
 8021972:	2316      	movs	r3, #22
 8021974:	6003      	str	r3, [r0, #0]
 8021976:	2000      	movs	r0, #0
 8021978:	b005      	add	sp, #20
 802197a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802197c:	9100      	str	r1, [sp, #0]
 802197e:	2d2b      	cmp	r5, #43	@ 0x2b
 8021980:	d1c5      	bne.n	802190e <_strtol_l.constprop.0+0x3a>
 8021982:	7825      	ldrb	r5, [r4, #0]
 8021984:	1c9c      	adds	r4, r3, #2
 8021986:	e7c2      	b.n	802190e <_strtol_l.constprop.0+0x3a>
 8021988:	2e00      	cmp	r6, #0
 802198a:	d1ce      	bne.n	802192a <_strtol_l.constprop.0+0x56>
 802198c:	3608      	adds	r6, #8
 802198e:	2d30      	cmp	r5, #48	@ 0x30
 8021990:	d0cb      	beq.n	802192a <_strtol_l.constprop.0+0x56>
 8021992:	3602      	adds	r6, #2
 8021994:	e7c9      	b.n	802192a <_strtol_l.constprop.0+0x56>
 8021996:	002b      	movs	r3, r5
 8021998:	3b41      	subs	r3, #65	@ 0x41
 802199a:	2b19      	cmp	r3, #25
 802199c:	d801      	bhi.n	80219a2 <_strtol_l.constprop.0+0xce>
 802199e:	3d37      	subs	r5, #55	@ 0x37
 80219a0:	e7d4      	b.n	802194c <_strtol_l.constprop.0+0x78>
 80219a2:	002b      	movs	r3, r5
 80219a4:	3b61      	subs	r3, #97	@ 0x61
 80219a6:	2b19      	cmp	r3, #25
 80219a8:	d804      	bhi.n	80219b4 <_strtol_l.constprop.0+0xe0>
 80219aa:	3d57      	subs	r5, #87	@ 0x57
 80219ac:	e7ce      	b.n	802194c <_strtol_l.constprop.0+0x78>
 80219ae:	2201      	movs	r2, #1
 80219b0:	4252      	negs	r2, r2
 80219b2:	e7d9      	b.n	8021968 <_strtol_l.constprop.0+0x94>
 80219b4:	1c53      	adds	r3, r2, #1
 80219b6:	d108      	bne.n	80219ca <_strtol_l.constprop.0+0xf6>
 80219b8:	2322      	movs	r3, #34	@ 0x22
 80219ba:	9a03      	ldr	r2, [sp, #12]
 80219bc:	9802      	ldr	r0, [sp, #8]
 80219be:	6013      	str	r3, [r2, #0]
 80219c0:	2f00      	cmp	r7, #0
 80219c2:	d0d9      	beq.n	8021978 <_strtol_l.constprop.0+0xa4>
 80219c4:	1e63      	subs	r3, r4, #1
 80219c6:	9301      	str	r3, [sp, #4]
 80219c8:	e007      	b.n	80219da <_strtol_l.constprop.0+0x106>
 80219ca:	9b00      	ldr	r3, [sp, #0]
 80219cc:	2b00      	cmp	r3, #0
 80219ce:	d000      	beq.n	80219d2 <_strtol_l.constprop.0+0xfe>
 80219d0:	4240      	negs	r0, r0
 80219d2:	2f00      	cmp	r7, #0
 80219d4:	d0d0      	beq.n	8021978 <_strtol_l.constprop.0+0xa4>
 80219d6:	2a00      	cmp	r2, #0
 80219d8:	d1f4      	bne.n	80219c4 <_strtol_l.constprop.0+0xf0>
 80219da:	9b01      	ldr	r3, [sp, #4]
 80219dc:	603b      	str	r3, [r7, #0]
 80219de:	e7cb      	b.n	8021978 <_strtol_l.constprop.0+0xa4>
 80219e0:	08029079 	.word	0x08029079
 80219e4:	7fffffff 	.word	0x7fffffff

080219e8 <strtol>:
 80219e8:	b510      	push	{r4, lr}
 80219ea:	4c04      	ldr	r4, [pc, #16]	@ (80219fc <strtol+0x14>)
 80219ec:	0013      	movs	r3, r2
 80219ee:	000a      	movs	r2, r1
 80219f0:	0001      	movs	r1, r0
 80219f2:	6820      	ldr	r0, [r4, #0]
 80219f4:	f7ff ff6e 	bl	80218d4 <_strtol_l.constprop.0>
 80219f8:	bd10      	pop	{r4, pc}
 80219fa:	46c0      	nop			@ (mov r8, r8)
 80219fc:	200003dc 	.word	0x200003dc

08021a00 <__cvt>:
 8021a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021a02:	001f      	movs	r7, r3
 8021a04:	2300      	movs	r3, #0
 8021a06:	0016      	movs	r6, r2
 8021a08:	b08b      	sub	sp, #44	@ 0x2c
 8021a0a:	429f      	cmp	r7, r3
 8021a0c:	da04      	bge.n	8021a18 <__cvt+0x18>
 8021a0e:	2180      	movs	r1, #128	@ 0x80
 8021a10:	0609      	lsls	r1, r1, #24
 8021a12:	187b      	adds	r3, r7, r1
 8021a14:	001f      	movs	r7, r3
 8021a16:	232d      	movs	r3, #45	@ 0x2d
 8021a18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021a1a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021a1c:	7013      	strb	r3, [r2, #0]
 8021a1e:	2320      	movs	r3, #32
 8021a20:	2203      	movs	r2, #3
 8021a22:	439d      	bics	r5, r3
 8021a24:	2d46      	cmp	r5, #70	@ 0x46
 8021a26:	d007      	beq.n	8021a38 <__cvt+0x38>
 8021a28:	002b      	movs	r3, r5
 8021a2a:	3b45      	subs	r3, #69	@ 0x45
 8021a2c:	4259      	negs	r1, r3
 8021a2e:	414b      	adcs	r3, r1
 8021a30:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021a32:	3a01      	subs	r2, #1
 8021a34:	18cb      	adds	r3, r1, r3
 8021a36:	9310      	str	r3, [sp, #64]	@ 0x40
 8021a38:	ab09      	add	r3, sp, #36	@ 0x24
 8021a3a:	9304      	str	r3, [sp, #16]
 8021a3c:	ab08      	add	r3, sp, #32
 8021a3e:	9303      	str	r3, [sp, #12]
 8021a40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021a42:	9200      	str	r2, [sp, #0]
 8021a44:	9302      	str	r3, [sp, #8]
 8021a46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021a48:	0032      	movs	r2, r6
 8021a4a:	9301      	str	r3, [sp, #4]
 8021a4c:	003b      	movs	r3, r7
 8021a4e:	f001 f84d 	bl	8022aec <_dtoa_r>
 8021a52:	0004      	movs	r4, r0
 8021a54:	2d47      	cmp	r5, #71	@ 0x47
 8021a56:	d11b      	bne.n	8021a90 <__cvt+0x90>
 8021a58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021a5a:	07db      	lsls	r3, r3, #31
 8021a5c:	d511      	bpl.n	8021a82 <__cvt+0x82>
 8021a5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021a60:	18c3      	adds	r3, r0, r3
 8021a62:	9307      	str	r3, [sp, #28]
 8021a64:	2200      	movs	r2, #0
 8021a66:	2300      	movs	r3, #0
 8021a68:	0030      	movs	r0, r6
 8021a6a:	0039      	movs	r1, r7
 8021a6c:	f7de fd20 	bl	80004b0 <__aeabi_dcmpeq>
 8021a70:	2800      	cmp	r0, #0
 8021a72:	d001      	beq.n	8021a78 <__cvt+0x78>
 8021a74:	9b07      	ldr	r3, [sp, #28]
 8021a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8021a78:	2230      	movs	r2, #48	@ 0x30
 8021a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021a7c:	9907      	ldr	r1, [sp, #28]
 8021a7e:	428b      	cmp	r3, r1
 8021a80:	d320      	bcc.n	8021ac4 <__cvt+0xc4>
 8021a82:	0020      	movs	r0, r4
 8021a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021a86:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8021a88:	1b1b      	subs	r3, r3, r4
 8021a8a:	6013      	str	r3, [r2, #0]
 8021a8c:	b00b      	add	sp, #44	@ 0x2c
 8021a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021a90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021a92:	18c3      	adds	r3, r0, r3
 8021a94:	9307      	str	r3, [sp, #28]
 8021a96:	2d46      	cmp	r5, #70	@ 0x46
 8021a98:	d1e4      	bne.n	8021a64 <__cvt+0x64>
 8021a9a:	7803      	ldrb	r3, [r0, #0]
 8021a9c:	2b30      	cmp	r3, #48	@ 0x30
 8021a9e:	d10c      	bne.n	8021aba <__cvt+0xba>
 8021aa0:	2200      	movs	r2, #0
 8021aa2:	2300      	movs	r3, #0
 8021aa4:	0030      	movs	r0, r6
 8021aa6:	0039      	movs	r1, r7
 8021aa8:	f7de fd02 	bl	80004b0 <__aeabi_dcmpeq>
 8021aac:	2800      	cmp	r0, #0
 8021aae:	d104      	bne.n	8021aba <__cvt+0xba>
 8021ab0:	2301      	movs	r3, #1
 8021ab2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021ab4:	1a9b      	subs	r3, r3, r2
 8021ab6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021ab8:	6013      	str	r3, [r2, #0]
 8021aba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021abc:	9a07      	ldr	r2, [sp, #28]
 8021abe:	681b      	ldr	r3, [r3, #0]
 8021ac0:	18d3      	adds	r3, r2, r3
 8021ac2:	e7ce      	b.n	8021a62 <__cvt+0x62>
 8021ac4:	1c59      	adds	r1, r3, #1
 8021ac6:	9109      	str	r1, [sp, #36]	@ 0x24
 8021ac8:	701a      	strb	r2, [r3, #0]
 8021aca:	e7d6      	b.n	8021a7a <__cvt+0x7a>

08021acc <__exponent>:
 8021acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ace:	232b      	movs	r3, #43	@ 0x2b
 8021ad0:	0005      	movs	r5, r0
 8021ad2:	000c      	movs	r4, r1
 8021ad4:	b085      	sub	sp, #20
 8021ad6:	7002      	strb	r2, [r0, #0]
 8021ad8:	2900      	cmp	r1, #0
 8021ada:	da01      	bge.n	8021ae0 <__exponent+0x14>
 8021adc:	424c      	negs	r4, r1
 8021ade:	3302      	adds	r3, #2
 8021ae0:	706b      	strb	r3, [r5, #1]
 8021ae2:	2c09      	cmp	r4, #9
 8021ae4:	dd2c      	ble.n	8021b40 <__exponent+0x74>
 8021ae6:	ab02      	add	r3, sp, #8
 8021ae8:	1dde      	adds	r6, r3, #7
 8021aea:	0020      	movs	r0, r4
 8021aec:	210a      	movs	r1, #10
 8021aee:	f7de fcc9 	bl	8000484 <__aeabi_idivmod>
 8021af2:	0037      	movs	r7, r6
 8021af4:	3130      	adds	r1, #48	@ 0x30
 8021af6:	3e01      	subs	r6, #1
 8021af8:	0020      	movs	r0, r4
 8021afa:	7031      	strb	r1, [r6, #0]
 8021afc:	210a      	movs	r1, #10
 8021afe:	9401      	str	r4, [sp, #4]
 8021b00:	f7de fbda 	bl	80002b8 <__divsi3>
 8021b04:	9b01      	ldr	r3, [sp, #4]
 8021b06:	0004      	movs	r4, r0
 8021b08:	2b63      	cmp	r3, #99	@ 0x63
 8021b0a:	dcee      	bgt.n	8021aea <__exponent+0x1e>
 8021b0c:	1eba      	subs	r2, r7, #2
 8021b0e:	1ca8      	adds	r0, r5, #2
 8021b10:	0001      	movs	r1, r0
 8021b12:	0013      	movs	r3, r2
 8021b14:	3430      	adds	r4, #48	@ 0x30
 8021b16:	7014      	strb	r4, [r2, #0]
 8021b18:	ac02      	add	r4, sp, #8
 8021b1a:	3407      	adds	r4, #7
 8021b1c:	429c      	cmp	r4, r3
 8021b1e:	d80a      	bhi.n	8021b36 <__exponent+0x6a>
 8021b20:	2300      	movs	r3, #0
 8021b22:	42a2      	cmp	r2, r4
 8021b24:	d803      	bhi.n	8021b2e <__exponent+0x62>
 8021b26:	3309      	adds	r3, #9
 8021b28:	aa02      	add	r2, sp, #8
 8021b2a:	189b      	adds	r3, r3, r2
 8021b2c:	1bdb      	subs	r3, r3, r7
 8021b2e:	18c0      	adds	r0, r0, r3
 8021b30:	1b40      	subs	r0, r0, r5
 8021b32:	b005      	add	sp, #20
 8021b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021b36:	781c      	ldrb	r4, [r3, #0]
 8021b38:	3301      	adds	r3, #1
 8021b3a:	700c      	strb	r4, [r1, #0]
 8021b3c:	3101      	adds	r1, #1
 8021b3e:	e7eb      	b.n	8021b18 <__exponent+0x4c>
 8021b40:	2330      	movs	r3, #48	@ 0x30
 8021b42:	18e4      	adds	r4, r4, r3
 8021b44:	70ab      	strb	r3, [r5, #2]
 8021b46:	1d28      	adds	r0, r5, #4
 8021b48:	70ec      	strb	r4, [r5, #3]
 8021b4a:	e7f1      	b.n	8021b30 <__exponent+0x64>

08021b4c <_printf_float>:
 8021b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021b4e:	b097      	sub	sp, #92	@ 0x5c
 8021b50:	000d      	movs	r5, r1
 8021b52:	920a      	str	r2, [sp, #40]	@ 0x28
 8021b54:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8021b56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021b58:	9009      	str	r0, [sp, #36]	@ 0x24
 8021b5a:	f000 fe9f 	bl	802289c <_localeconv_r>
 8021b5e:	6803      	ldr	r3, [r0, #0]
 8021b60:	0018      	movs	r0, r3
 8021b62:	930d      	str	r3, [sp, #52]	@ 0x34
 8021b64:	f7de fb02 	bl	800016c <strlen>
 8021b68:	2300      	movs	r3, #0
 8021b6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8021b6c:	9314      	str	r3, [sp, #80]	@ 0x50
 8021b6e:	7e2b      	ldrb	r3, [r5, #24]
 8021b70:	2207      	movs	r2, #7
 8021b72:	930c      	str	r3, [sp, #48]	@ 0x30
 8021b74:	682b      	ldr	r3, [r5, #0]
 8021b76:	930e      	str	r3, [sp, #56]	@ 0x38
 8021b78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021b7a:	6823      	ldr	r3, [r4, #0]
 8021b7c:	05c9      	lsls	r1, r1, #23
 8021b7e:	d545      	bpl.n	8021c0c <_printf_float+0xc0>
 8021b80:	189b      	adds	r3, r3, r2
 8021b82:	4393      	bics	r3, r2
 8021b84:	001a      	movs	r2, r3
 8021b86:	3208      	adds	r2, #8
 8021b88:	6022      	str	r2, [r4, #0]
 8021b8a:	2201      	movs	r2, #1
 8021b8c:	681e      	ldr	r6, [r3, #0]
 8021b8e:	685f      	ldr	r7, [r3, #4]
 8021b90:	007b      	lsls	r3, r7, #1
 8021b92:	085b      	lsrs	r3, r3, #1
 8021b94:	9311      	str	r3, [sp, #68]	@ 0x44
 8021b96:	9610      	str	r6, [sp, #64]	@ 0x40
 8021b98:	64ae      	str	r6, [r5, #72]	@ 0x48
 8021b9a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8021b9c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021b9e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021ba0:	4ba7      	ldr	r3, [pc, #668]	@ (8021e40 <_printf_float+0x2f4>)
 8021ba2:	4252      	negs	r2, r2
 8021ba4:	f7e1 fbae 	bl	8003304 <__aeabi_dcmpun>
 8021ba8:	2800      	cmp	r0, #0
 8021baa:	d131      	bne.n	8021c10 <_printf_float+0xc4>
 8021bac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021bae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021bb0:	2201      	movs	r2, #1
 8021bb2:	4ba3      	ldr	r3, [pc, #652]	@ (8021e40 <_printf_float+0x2f4>)
 8021bb4:	4252      	negs	r2, r2
 8021bb6:	f7de fc8b 	bl	80004d0 <__aeabi_dcmple>
 8021bba:	2800      	cmp	r0, #0
 8021bbc:	d128      	bne.n	8021c10 <_printf_float+0xc4>
 8021bbe:	2200      	movs	r2, #0
 8021bc0:	2300      	movs	r3, #0
 8021bc2:	0030      	movs	r0, r6
 8021bc4:	0039      	movs	r1, r7
 8021bc6:	f7de fc79 	bl	80004bc <__aeabi_dcmplt>
 8021bca:	2800      	cmp	r0, #0
 8021bcc:	d003      	beq.n	8021bd6 <_printf_float+0x8a>
 8021bce:	002b      	movs	r3, r5
 8021bd0:	222d      	movs	r2, #45	@ 0x2d
 8021bd2:	3343      	adds	r3, #67	@ 0x43
 8021bd4:	701a      	strb	r2, [r3, #0]
 8021bd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021bd8:	4f9a      	ldr	r7, [pc, #616]	@ (8021e44 <_printf_float+0x2f8>)
 8021bda:	2b47      	cmp	r3, #71	@ 0x47
 8021bdc:	d900      	bls.n	8021be0 <_printf_float+0x94>
 8021bde:	4f9a      	ldr	r7, [pc, #616]	@ (8021e48 <_printf_float+0x2fc>)
 8021be0:	2303      	movs	r3, #3
 8021be2:	2400      	movs	r4, #0
 8021be4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021be6:	612b      	str	r3, [r5, #16]
 8021be8:	3301      	adds	r3, #1
 8021bea:	439a      	bics	r2, r3
 8021bec:	602a      	str	r2, [r5, #0]
 8021bee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021bf0:	0029      	movs	r1, r5
 8021bf2:	9300      	str	r3, [sp, #0]
 8021bf4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021bf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021bf8:	aa15      	add	r2, sp, #84	@ 0x54
 8021bfa:	f000 f9e5 	bl	8021fc8 <_printf_common>
 8021bfe:	3001      	adds	r0, #1
 8021c00:	d000      	beq.n	8021c04 <_printf_float+0xb8>
 8021c02:	e09f      	b.n	8021d44 <_printf_float+0x1f8>
 8021c04:	2001      	movs	r0, #1
 8021c06:	4240      	negs	r0, r0
 8021c08:	b017      	add	sp, #92	@ 0x5c
 8021c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c0c:	3307      	adds	r3, #7
 8021c0e:	e7b8      	b.n	8021b82 <_printf_float+0x36>
 8021c10:	0032      	movs	r2, r6
 8021c12:	003b      	movs	r3, r7
 8021c14:	0030      	movs	r0, r6
 8021c16:	0039      	movs	r1, r7
 8021c18:	f7e1 fb74 	bl	8003304 <__aeabi_dcmpun>
 8021c1c:	2800      	cmp	r0, #0
 8021c1e:	d00b      	beq.n	8021c38 <_printf_float+0xec>
 8021c20:	2f00      	cmp	r7, #0
 8021c22:	da03      	bge.n	8021c2c <_printf_float+0xe0>
 8021c24:	002b      	movs	r3, r5
 8021c26:	222d      	movs	r2, #45	@ 0x2d
 8021c28:	3343      	adds	r3, #67	@ 0x43
 8021c2a:	701a      	strb	r2, [r3, #0]
 8021c2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021c2e:	4f87      	ldr	r7, [pc, #540]	@ (8021e4c <_printf_float+0x300>)
 8021c30:	2b47      	cmp	r3, #71	@ 0x47
 8021c32:	d9d5      	bls.n	8021be0 <_printf_float+0x94>
 8021c34:	4f86      	ldr	r7, [pc, #536]	@ (8021e50 <_printf_float+0x304>)
 8021c36:	e7d3      	b.n	8021be0 <_printf_float+0x94>
 8021c38:	2220      	movs	r2, #32
 8021c3a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021c3c:	686b      	ldr	r3, [r5, #4]
 8021c3e:	4394      	bics	r4, r2
 8021c40:	1c5a      	adds	r2, r3, #1
 8021c42:	d146      	bne.n	8021cd2 <_printf_float+0x186>
 8021c44:	3307      	adds	r3, #7
 8021c46:	606b      	str	r3, [r5, #4]
 8021c48:	2380      	movs	r3, #128	@ 0x80
 8021c4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021c4c:	00db      	lsls	r3, r3, #3
 8021c4e:	4313      	orrs	r3, r2
 8021c50:	2200      	movs	r2, #0
 8021c52:	602b      	str	r3, [r5, #0]
 8021c54:	9206      	str	r2, [sp, #24]
 8021c56:	aa14      	add	r2, sp, #80	@ 0x50
 8021c58:	9205      	str	r2, [sp, #20]
 8021c5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021c5c:	a90a      	add	r1, sp, #40	@ 0x28
 8021c5e:	9204      	str	r2, [sp, #16]
 8021c60:	aa13      	add	r2, sp, #76	@ 0x4c
 8021c62:	9203      	str	r2, [sp, #12]
 8021c64:	2223      	movs	r2, #35	@ 0x23
 8021c66:	1852      	adds	r2, r2, r1
 8021c68:	9202      	str	r2, [sp, #8]
 8021c6a:	9301      	str	r3, [sp, #4]
 8021c6c:	686b      	ldr	r3, [r5, #4]
 8021c6e:	0032      	movs	r2, r6
 8021c70:	9300      	str	r3, [sp, #0]
 8021c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021c74:	003b      	movs	r3, r7
 8021c76:	f7ff fec3 	bl	8021a00 <__cvt>
 8021c7a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021c7c:	0007      	movs	r7, r0
 8021c7e:	2c47      	cmp	r4, #71	@ 0x47
 8021c80:	d12d      	bne.n	8021cde <_printf_float+0x192>
 8021c82:	1cd3      	adds	r3, r2, #3
 8021c84:	db02      	blt.n	8021c8c <_printf_float+0x140>
 8021c86:	686b      	ldr	r3, [r5, #4]
 8021c88:	429a      	cmp	r2, r3
 8021c8a:	dd48      	ble.n	8021d1e <_printf_float+0x1d2>
 8021c8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021c8e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8021c90:	3b02      	subs	r3, #2
 8021c92:	b2db      	uxtb	r3, r3
 8021c94:	930c      	str	r3, [sp, #48]	@ 0x30
 8021c96:	0028      	movs	r0, r5
 8021c98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021c9a:	3901      	subs	r1, #1
 8021c9c:	3050      	adds	r0, #80	@ 0x50
 8021c9e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021ca0:	f7ff ff14 	bl	8021acc <__exponent>
 8021ca4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021ca6:	0004      	movs	r4, r0
 8021ca8:	1813      	adds	r3, r2, r0
 8021caa:	612b      	str	r3, [r5, #16]
 8021cac:	2a01      	cmp	r2, #1
 8021cae:	dc02      	bgt.n	8021cb6 <_printf_float+0x16a>
 8021cb0:	682a      	ldr	r2, [r5, #0]
 8021cb2:	07d2      	lsls	r2, r2, #31
 8021cb4:	d501      	bpl.n	8021cba <_printf_float+0x16e>
 8021cb6:	3301      	adds	r3, #1
 8021cb8:	612b      	str	r3, [r5, #16]
 8021cba:	2323      	movs	r3, #35	@ 0x23
 8021cbc:	aa0a      	add	r2, sp, #40	@ 0x28
 8021cbe:	189b      	adds	r3, r3, r2
 8021cc0:	781b      	ldrb	r3, [r3, #0]
 8021cc2:	2b00      	cmp	r3, #0
 8021cc4:	d100      	bne.n	8021cc8 <_printf_float+0x17c>
 8021cc6:	e792      	b.n	8021bee <_printf_float+0xa2>
 8021cc8:	002b      	movs	r3, r5
 8021cca:	222d      	movs	r2, #45	@ 0x2d
 8021ccc:	3343      	adds	r3, #67	@ 0x43
 8021cce:	701a      	strb	r2, [r3, #0]
 8021cd0:	e78d      	b.n	8021bee <_printf_float+0xa2>
 8021cd2:	2c47      	cmp	r4, #71	@ 0x47
 8021cd4:	d1b8      	bne.n	8021c48 <_printf_float+0xfc>
 8021cd6:	2b00      	cmp	r3, #0
 8021cd8:	d1b6      	bne.n	8021c48 <_printf_float+0xfc>
 8021cda:	3301      	adds	r3, #1
 8021cdc:	e7b3      	b.n	8021c46 <_printf_float+0xfa>
 8021cde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021ce0:	0011      	movs	r1, r2
 8021ce2:	2b65      	cmp	r3, #101	@ 0x65
 8021ce4:	d9d7      	bls.n	8021c96 <_printf_float+0x14a>
 8021ce6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021ce8:	2b66      	cmp	r3, #102	@ 0x66
 8021cea:	d11a      	bne.n	8021d22 <_printf_float+0x1d6>
 8021cec:	686b      	ldr	r3, [r5, #4]
 8021cee:	2a00      	cmp	r2, #0
 8021cf0:	dd09      	ble.n	8021d06 <_printf_float+0x1ba>
 8021cf2:	612a      	str	r2, [r5, #16]
 8021cf4:	2b00      	cmp	r3, #0
 8021cf6:	d102      	bne.n	8021cfe <_printf_float+0x1b2>
 8021cf8:	6829      	ldr	r1, [r5, #0]
 8021cfa:	07c9      	lsls	r1, r1, #31
 8021cfc:	d50b      	bpl.n	8021d16 <_printf_float+0x1ca>
 8021cfe:	3301      	adds	r3, #1
 8021d00:	189b      	adds	r3, r3, r2
 8021d02:	612b      	str	r3, [r5, #16]
 8021d04:	e007      	b.n	8021d16 <_printf_float+0x1ca>
 8021d06:	2b00      	cmp	r3, #0
 8021d08:	d103      	bne.n	8021d12 <_printf_float+0x1c6>
 8021d0a:	2201      	movs	r2, #1
 8021d0c:	6829      	ldr	r1, [r5, #0]
 8021d0e:	4211      	tst	r1, r2
 8021d10:	d000      	beq.n	8021d14 <_printf_float+0x1c8>
 8021d12:	1c9a      	adds	r2, r3, #2
 8021d14:	612a      	str	r2, [r5, #16]
 8021d16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021d18:	2400      	movs	r4, #0
 8021d1a:	65ab      	str	r3, [r5, #88]	@ 0x58
 8021d1c:	e7cd      	b.n	8021cba <_printf_float+0x16e>
 8021d1e:	2367      	movs	r3, #103	@ 0x67
 8021d20:	930c      	str	r3, [sp, #48]	@ 0x30
 8021d22:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8021d24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021d26:	4299      	cmp	r1, r3
 8021d28:	db06      	blt.n	8021d38 <_printf_float+0x1ec>
 8021d2a:	682b      	ldr	r3, [r5, #0]
 8021d2c:	6129      	str	r1, [r5, #16]
 8021d2e:	07db      	lsls	r3, r3, #31
 8021d30:	d5f1      	bpl.n	8021d16 <_printf_float+0x1ca>
 8021d32:	3101      	adds	r1, #1
 8021d34:	6129      	str	r1, [r5, #16]
 8021d36:	e7ee      	b.n	8021d16 <_printf_float+0x1ca>
 8021d38:	2201      	movs	r2, #1
 8021d3a:	2900      	cmp	r1, #0
 8021d3c:	dce0      	bgt.n	8021d00 <_printf_float+0x1b4>
 8021d3e:	1892      	adds	r2, r2, r2
 8021d40:	1a52      	subs	r2, r2, r1
 8021d42:	e7dd      	b.n	8021d00 <_printf_float+0x1b4>
 8021d44:	682a      	ldr	r2, [r5, #0]
 8021d46:	0553      	lsls	r3, r2, #21
 8021d48:	d408      	bmi.n	8021d5c <_printf_float+0x210>
 8021d4a:	692b      	ldr	r3, [r5, #16]
 8021d4c:	003a      	movs	r2, r7
 8021d4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021d50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021d52:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021d54:	47a0      	blx	r4
 8021d56:	3001      	adds	r0, #1
 8021d58:	d129      	bne.n	8021dae <_printf_float+0x262>
 8021d5a:	e753      	b.n	8021c04 <_printf_float+0xb8>
 8021d5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021d5e:	2b65      	cmp	r3, #101	@ 0x65
 8021d60:	d800      	bhi.n	8021d64 <_printf_float+0x218>
 8021d62:	e0da      	b.n	8021f1a <_printf_float+0x3ce>
 8021d64:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8021d66:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8021d68:	2200      	movs	r2, #0
 8021d6a:	2300      	movs	r3, #0
 8021d6c:	f7de fba0 	bl	80004b0 <__aeabi_dcmpeq>
 8021d70:	2800      	cmp	r0, #0
 8021d72:	d033      	beq.n	8021ddc <_printf_float+0x290>
 8021d74:	2301      	movs	r3, #1
 8021d76:	4a37      	ldr	r2, [pc, #220]	@ (8021e54 <_printf_float+0x308>)
 8021d78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021d7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021d7c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021d7e:	47a0      	blx	r4
 8021d80:	3001      	adds	r0, #1
 8021d82:	d100      	bne.n	8021d86 <_printf_float+0x23a>
 8021d84:	e73e      	b.n	8021c04 <_printf_float+0xb8>
 8021d86:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8021d88:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021d8a:	42b3      	cmp	r3, r6
 8021d8c:	db02      	blt.n	8021d94 <_printf_float+0x248>
 8021d8e:	682b      	ldr	r3, [r5, #0]
 8021d90:	07db      	lsls	r3, r3, #31
 8021d92:	d50c      	bpl.n	8021dae <_printf_float+0x262>
 8021d94:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021d96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021d98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021d9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021d9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021d9e:	47a0      	blx	r4
 8021da0:	2400      	movs	r4, #0
 8021da2:	3001      	adds	r0, #1
 8021da4:	d100      	bne.n	8021da8 <_printf_float+0x25c>
 8021da6:	e72d      	b.n	8021c04 <_printf_float+0xb8>
 8021da8:	1e73      	subs	r3, r6, #1
 8021daa:	42a3      	cmp	r3, r4
 8021dac:	dc0a      	bgt.n	8021dc4 <_printf_float+0x278>
 8021dae:	682b      	ldr	r3, [r5, #0]
 8021db0:	079b      	lsls	r3, r3, #30
 8021db2:	d500      	bpl.n	8021db6 <_printf_float+0x26a>
 8021db4:	e105      	b.n	8021fc2 <_printf_float+0x476>
 8021db6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021db8:	68e8      	ldr	r0, [r5, #12]
 8021dba:	4298      	cmp	r0, r3
 8021dbc:	db00      	blt.n	8021dc0 <_printf_float+0x274>
 8021dbe:	e723      	b.n	8021c08 <_printf_float+0xbc>
 8021dc0:	0018      	movs	r0, r3
 8021dc2:	e721      	b.n	8021c08 <_printf_float+0xbc>
 8021dc4:	002a      	movs	r2, r5
 8021dc6:	2301      	movs	r3, #1
 8021dc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021dca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021dcc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8021dce:	321a      	adds	r2, #26
 8021dd0:	47b8      	blx	r7
 8021dd2:	3001      	adds	r0, #1
 8021dd4:	d100      	bne.n	8021dd8 <_printf_float+0x28c>
 8021dd6:	e715      	b.n	8021c04 <_printf_float+0xb8>
 8021dd8:	3401      	adds	r4, #1
 8021dda:	e7e5      	b.n	8021da8 <_printf_float+0x25c>
 8021ddc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021dde:	2b00      	cmp	r3, #0
 8021de0:	dc3a      	bgt.n	8021e58 <_printf_float+0x30c>
 8021de2:	2301      	movs	r3, #1
 8021de4:	4a1b      	ldr	r2, [pc, #108]	@ (8021e54 <_printf_float+0x308>)
 8021de6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021de8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021dea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021dec:	47a0      	blx	r4
 8021dee:	3001      	adds	r0, #1
 8021df0:	d100      	bne.n	8021df4 <_printf_float+0x2a8>
 8021df2:	e707      	b.n	8021c04 <_printf_float+0xb8>
 8021df4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8021df6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021df8:	4333      	orrs	r3, r6
 8021dfa:	d102      	bne.n	8021e02 <_printf_float+0x2b6>
 8021dfc:	682b      	ldr	r3, [r5, #0]
 8021dfe:	07db      	lsls	r3, r3, #31
 8021e00:	d5d5      	bpl.n	8021dae <_printf_float+0x262>
 8021e02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021e04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021e06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021e08:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021e0a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021e0c:	47a0      	blx	r4
 8021e0e:	2300      	movs	r3, #0
 8021e10:	3001      	adds	r0, #1
 8021e12:	d100      	bne.n	8021e16 <_printf_float+0x2ca>
 8021e14:	e6f6      	b.n	8021c04 <_printf_float+0xb8>
 8021e16:	930c      	str	r3, [sp, #48]	@ 0x30
 8021e18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021e1a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021e1c:	425b      	negs	r3, r3
 8021e1e:	4293      	cmp	r3, r2
 8021e20:	dc01      	bgt.n	8021e26 <_printf_float+0x2da>
 8021e22:	0033      	movs	r3, r6
 8021e24:	e792      	b.n	8021d4c <_printf_float+0x200>
 8021e26:	002a      	movs	r2, r5
 8021e28:	2301      	movs	r3, #1
 8021e2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021e2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021e2e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021e30:	321a      	adds	r2, #26
 8021e32:	47a0      	blx	r4
 8021e34:	3001      	adds	r0, #1
 8021e36:	d100      	bne.n	8021e3a <_printf_float+0x2ee>
 8021e38:	e6e4      	b.n	8021c04 <_printf_float+0xb8>
 8021e3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021e3c:	3301      	adds	r3, #1
 8021e3e:	e7ea      	b.n	8021e16 <_printf_float+0x2ca>
 8021e40:	7fefffff 	.word	0x7fefffff
 8021e44:	08029179 	.word	0x08029179
 8021e48:	0802917d 	.word	0x0802917d
 8021e4c:	08029181 	.word	0x08029181
 8021e50:	08029185 	.word	0x08029185
 8021e54:	08029189 	.word	0x08029189
 8021e58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021e5a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8021e5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8021e5e:	429e      	cmp	r6, r3
 8021e60:	dd00      	ble.n	8021e64 <_printf_float+0x318>
 8021e62:	001e      	movs	r6, r3
 8021e64:	2e00      	cmp	r6, #0
 8021e66:	dc31      	bgt.n	8021ecc <_printf_float+0x380>
 8021e68:	43f3      	mvns	r3, r6
 8021e6a:	2400      	movs	r4, #0
 8021e6c:	17db      	asrs	r3, r3, #31
 8021e6e:	4033      	ands	r3, r6
 8021e70:	930e      	str	r3, [sp, #56]	@ 0x38
 8021e72:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8021e74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021e76:	1af3      	subs	r3, r6, r3
 8021e78:	42a3      	cmp	r3, r4
 8021e7a:	dc30      	bgt.n	8021ede <_printf_float+0x392>
 8021e7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021e7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021e80:	429a      	cmp	r2, r3
 8021e82:	dc38      	bgt.n	8021ef6 <_printf_float+0x3aa>
 8021e84:	682b      	ldr	r3, [r5, #0]
 8021e86:	07db      	lsls	r3, r3, #31
 8021e88:	d435      	bmi.n	8021ef6 <_printf_float+0x3aa>
 8021e8a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021e8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021e8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021e90:	1b9b      	subs	r3, r3, r6
 8021e92:	1b14      	subs	r4, r2, r4
 8021e94:	429c      	cmp	r4, r3
 8021e96:	dd00      	ble.n	8021e9a <_printf_float+0x34e>
 8021e98:	001c      	movs	r4, r3
 8021e9a:	2c00      	cmp	r4, #0
 8021e9c:	dc34      	bgt.n	8021f08 <_printf_float+0x3bc>
 8021e9e:	43e3      	mvns	r3, r4
 8021ea0:	2600      	movs	r6, #0
 8021ea2:	17db      	asrs	r3, r3, #31
 8021ea4:	401c      	ands	r4, r3
 8021ea6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021ea8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021eaa:	1ad3      	subs	r3, r2, r3
 8021eac:	1b1b      	subs	r3, r3, r4
 8021eae:	42b3      	cmp	r3, r6
 8021eb0:	dc00      	bgt.n	8021eb4 <_printf_float+0x368>
 8021eb2:	e77c      	b.n	8021dae <_printf_float+0x262>
 8021eb4:	002a      	movs	r2, r5
 8021eb6:	2301      	movs	r3, #1
 8021eb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021ebc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8021ebe:	321a      	adds	r2, #26
 8021ec0:	47b8      	blx	r7
 8021ec2:	3001      	adds	r0, #1
 8021ec4:	d100      	bne.n	8021ec8 <_printf_float+0x37c>
 8021ec6:	e69d      	b.n	8021c04 <_printf_float+0xb8>
 8021ec8:	3601      	adds	r6, #1
 8021eca:	e7ec      	b.n	8021ea6 <_printf_float+0x35a>
 8021ecc:	0033      	movs	r3, r6
 8021ece:	003a      	movs	r2, r7
 8021ed0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021ed4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021ed6:	47a0      	blx	r4
 8021ed8:	3001      	adds	r0, #1
 8021eda:	d1c5      	bne.n	8021e68 <_printf_float+0x31c>
 8021edc:	e692      	b.n	8021c04 <_printf_float+0xb8>
 8021ede:	002a      	movs	r2, r5
 8021ee0:	2301      	movs	r3, #1
 8021ee2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021ee4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021ee6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021ee8:	321a      	adds	r2, #26
 8021eea:	47b0      	blx	r6
 8021eec:	3001      	adds	r0, #1
 8021eee:	d100      	bne.n	8021ef2 <_printf_float+0x3a6>
 8021ef0:	e688      	b.n	8021c04 <_printf_float+0xb8>
 8021ef2:	3401      	adds	r4, #1
 8021ef4:	e7bd      	b.n	8021e72 <_printf_float+0x326>
 8021ef6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021ef8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021efa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021efc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021efe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021f00:	47a0      	blx	r4
 8021f02:	3001      	adds	r0, #1
 8021f04:	d1c1      	bne.n	8021e8a <_printf_float+0x33e>
 8021f06:	e67d      	b.n	8021c04 <_printf_float+0xb8>
 8021f08:	19ba      	adds	r2, r7, r6
 8021f0a:	0023      	movs	r3, r4
 8021f0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021f0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021f10:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021f12:	47b0      	blx	r6
 8021f14:	3001      	adds	r0, #1
 8021f16:	d1c2      	bne.n	8021e9e <_printf_float+0x352>
 8021f18:	e674      	b.n	8021c04 <_printf_float+0xb8>
 8021f1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021f1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8021f1e:	2b01      	cmp	r3, #1
 8021f20:	dc02      	bgt.n	8021f28 <_printf_float+0x3dc>
 8021f22:	2301      	movs	r3, #1
 8021f24:	421a      	tst	r2, r3
 8021f26:	d039      	beq.n	8021f9c <_printf_float+0x450>
 8021f28:	2301      	movs	r3, #1
 8021f2a:	003a      	movs	r2, r7
 8021f2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021f2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021f30:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021f32:	47b0      	blx	r6
 8021f34:	3001      	adds	r0, #1
 8021f36:	d100      	bne.n	8021f3a <_printf_float+0x3ee>
 8021f38:	e664      	b.n	8021c04 <_printf_float+0xb8>
 8021f3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021f3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021f3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021f40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021f42:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021f44:	47b0      	blx	r6
 8021f46:	3001      	adds	r0, #1
 8021f48:	d100      	bne.n	8021f4c <_printf_float+0x400>
 8021f4a:	e65b      	b.n	8021c04 <_printf_float+0xb8>
 8021f4c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8021f4e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8021f50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021f52:	2200      	movs	r2, #0
 8021f54:	3b01      	subs	r3, #1
 8021f56:	930c      	str	r3, [sp, #48]	@ 0x30
 8021f58:	2300      	movs	r3, #0
 8021f5a:	f7de faa9 	bl	80004b0 <__aeabi_dcmpeq>
 8021f5e:	2800      	cmp	r0, #0
 8021f60:	d11a      	bne.n	8021f98 <_printf_float+0x44c>
 8021f62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021f64:	1c7a      	adds	r2, r7, #1
 8021f66:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021f68:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021f6a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021f6c:	47b0      	blx	r6
 8021f6e:	3001      	adds	r0, #1
 8021f70:	d10e      	bne.n	8021f90 <_printf_float+0x444>
 8021f72:	e647      	b.n	8021c04 <_printf_float+0xb8>
 8021f74:	002a      	movs	r2, r5
 8021f76:	2301      	movs	r3, #1
 8021f78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021f7c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8021f7e:	321a      	adds	r2, #26
 8021f80:	47b8      	blx	r7
 8021f82:	3001      	adds	r0, #1
 8021f84:	d100      	bne.n	8021f88 <_printf_float+0x43c>
 8021f86:	e63d      	b.n	8021c04 <_printf_float+0xb8>
 8021f88:	3601      	adds	r6, #1
 8021f8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021f8c:	429e      	cmp	r6, r3
 8021f8e:	dbf1      	blt.n	8021f74 <_printf_float+0x428>
 8021f90:	002a      	movs	r2, r5
 8021f92:	0023      	movs	r3, r4
 8021f94:	3250      	adds	r2, #80	@ 0x50
 8021f96:	e6da      	b.n	8021d4e <_printf_float+0x202>
 8021f98:	2600      	movs	r6, #0
 8021f9a:	e7f6      	b.n	8021f8a <_printf_float+0x43e>
 8021f9c:	003a      	movs	r2, r7
 8021f9e:	e7e2      	b.n	8021f66 <_printf_float+0x41a>
 8021fa0:	002a      	movs	r2, r5
 8021fa2:	2301      	movs	r3, #1
 8021fa4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021fa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021fa8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021faa:	3219      	adds	r2, #25
 8021fac:	47b0      	blx	r6
 8021fae:	3001      	adds	r0, #1
 8021fb0:	d100      	bne.n	8021fb4 <_printf_float+0x468>
 8021fb2:	e627      	b.n	8021c04 <_printf_float+0xb8>
 8021fb4:	3401      	adds	r4, #1
 8021fb6:	68eb      	ldr	r3, [r5, #12]
 8021fb8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8021fba:	1a9b      	subs	r3, r3, r2
 8021fbc:	42a3      	cmp	r3, r4
 8021fbe:	dcef      	bgt.n	8021fa0 <_printf_float+0x454>
 8021fc0:	e6f9      	b.n	8021db6 <_printf_float+0x26a>
 8021fc2:	2400      	movs	r4, #0
 8021fc4:	e7f7      	b.n	8021fb6 <_printf_float+0x46a>
 8021fc6:	46c0      	nop			@ (mov r8, r8)

08021fc8 <_printf_common>:
 8021fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021fca:	0016      	movs	r6, r2
 8021fcc:	9301      	str	r3, [sp, #4]
 8021fce:	688a      	ldr	r2, [r1, #8]
 8021fd0:	690b      	ldr	r3, [r1, #16]
 8021fd2:	000c      	movs	r4, r1
 8021fd4:	9000      	str	r0, [sp, #0]
 8021fd6:	4293      	cmp	r3, r2
 8021fd8:	da00      	bge.n	8021fdc <_printf_common+0x14>
 8021fda:	0013      	movs	r3, r2
 8021fdc:	0022      	movs	r2, r4
 8021fde:	6033      	str	r3, [r6, #0]
 8021fe0:	3243      	adds	r2, #67	@ 0x43
 8021fe2:	7812      	ldrb	r2, [r2, #0]
 8021fe4:	2a00      	cmp	r2, #0
 8021fe6:	d001      	beq.n	8021fec <_printf_common+0x24>
 8021fe8:	3301      	adds	r3, #1
 8021fea:	6033      	str	r3, [r6, #0]
 8021fec:	6823      	ldr	r3, [r4, #0]
 8021fee:	069b      	lsls	r3, r3, #26
 8021ff0:	d502      	bpl.n	8021ff8 <_printf_common+0x30>
 8021ff2:	6833      	ldr	r3, [r6, #0]
 8021ff4:	3302      	adds	r3, #2
 8021ff6:	6033      	str	r3, [r6, #0]
 8021ff8:	6822      	ldr	r2, [r4, #0]
 8021ffa:	2306      	movs	r3, #6
 8021ffc:	0015      	movs	r5, r2
 8021ffe:	401d      	ands	r5, r3
 8022000:	421a      	tst	r2, r3
 8022002:	d027      	beq.n	8022054 <_printf_common+0x8c>
 8022004:	0023      	movs	r3, r4
 8022006:	3343      	adds	r3, #67	@ 0x43
 8022008:	781b      	ldrb	r3, [r3, #0]
 802200a:	1e5a      	subs	r2, r3, #1
 802200c:	4193      	sbcs	r3, r2
 802200e:	6822      	ldr	r2, [r4, #0]
 8022010:	0692      	lsls	r2, r2, #26
 8022012:	d430      	bmi.n	8022076 <_printf_common+0xae>
 8022014:	0022      	movs	r2, r4
 8022016:	9901      	ldr	r1, [sp, #4]
 8022018:	9800      	ldr	r0, [sp, #0]
 802201a:	9d08      	ldr	r5, [sp, #32]
 802201c:	3243      	adds	r2, #67	@ 0x43
 802201e:	47a8      	blx	r5
 8022020:	3001      	adds	r0, #1
 8022022:	d025      	beq.n	8022070 <_printf_common+0xa8>
 8022024:	2206      	movs	r2, #6
 8022026:	6823      	ldr	r3, [r4, #0]
 8022028:	2500      	movs	r5, #0
 802202a:	4013      	ands	r3, r2
 802202c:	2b04      	cmp	r3, #4
 802202e:	d105      	bne.n	802203c <_printf_common+0x74>
 8022030:	6833      	ldr	r3, [r6, #0]
 8022032:	68e5      	ldr	r5, [r4, #12]
 8022034:	1aed      	subs	r5, r5, r3
 8022036:	43eb      	mvns	r3, r5
 8022038:	17db      	asrs	r3, r3, #31
 802203a:	401d      	ands	r5, r3
 802203c:	68a3      	ldr	r3, [r4, #8]
 802203e:	6922      	ldr	r2, [r4, #16]
 8022040:	4293      	cmp	r3, r2
 8022042:	dd01      	ble.n	8022048 <_printf_common+0x80>
 8022044:	1a9b      	subs	r3, r3, r2
 8022046:	18ed      	adds	r5, r5, r3
 8022048:	2600      	movs	r6, #0
 802204a:	42b5      	cmp	r5, r6
 802204c:	d120      	bne.n	8022090 <_printf_common+0xc8>
 802204e:	2000      	movs	r0, #0
 8022050:	e010      	b.n	8022074 <_printf_common+0xac>
 8022052:	3501      	adds	r5, #1
 8022054:	68e3      	ldr	r3, [r4, #12]
 8022056:	6832      	ldr	r2, [r6, #0]
 8022058:	1a9b      	subs	r3, r3, r2
 802205a:	42ab      	cmp	r3, r5
 802205c:	ddd2      	ble.n	8022004 <_printf_common+0x3c>
 802205e:	0022      	movs	r2, r4
 8022060:	2301      	movs	r3, #1
 8022062:	9901      	ldr	r1, [sp, #4]
 8022064:	9800      	ldr	r0, [sp, #0]
 8022066:	9f08      	ldr	r7, [sp, #32]
 8022068:	3219      	adds	r2, #25
 802206a:	47b8      	blx	r7
 802206c:	3001      	adds	r0, #1
 802206e:	d1f0      	bne.n	8022052 <_printf_common+0x8a>
 8022070:	2001      	movs	r0, #1
 8022072:	4240      	negs	r0, r0
 8022074:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022076:	2030      	movs	r0, #48	@ 0x30
 8022078:	18e1      	adds	r1, r4, r3
 802207a:	3143      	adds	r1, #67	@ 0x43
 802207c:	7008      	strb	r0, [r1, #0]
 802207e:	0021      	movs	r1, r4
 8022080:	1c5a      	adds	r2, r3, #1
 8022082:	3145      	adds	r1, #69	@ 0x45
 8022084:	7809      	ldrb	r1, [r1, #0]
 8022086:	18a2      	adds	r2, r4, r2
 8022088:	3243      	adds	r2, #67	@ 0x43
 802208a:	3302      	adds	r3, #2
 802208c:	7011      	strb	r1, [r2, #0]
 802208e:	e7c1      	b.n	8022014 <_printf_common+0x4c>
 8022090:	0022      	movs	r2, r4
 8022092:	2301      	movs	r3, #1
 8022094:	9901      	ldr	r1, [sp, #4]
 8022096:	9800      	ldr	r0, [sp, #0]
 8022098:	9f08      	ldr	r7, [sp, #32]
 802209a:	321a      	adds	r2, #26
 802209c:	47b8      	blx	r7
 802209e:	3001      	adds	r0, #1
 80220a0:	d0e6      	beq.n	8022070 <_printf_common+0xa8>
 80220a2:	3601      	adds	r6, #1
 80220a4:	e7d1      	b.n	802204a <_printf_common+0x82>
	...

080220a8 <_printf_i>:
 80220a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80220aa:	b08b      	sub	sp, #44	@ 0x2c
 80220ac:	9206      	str	r2, [sp, #24]
 80220ae:	000a      	movs	r2, r1
 80220b0:	3243      	adds	r2, #67	@ 0x43
 80220b2:	9307      	str	r3, [sp, #28]
 80220b4:	9005      	str	r0, [sp, #20]
 80220b6:	9203      	str	r2, [sp, #12]
 80220b8:	7e0a      	ldrb	r2, [r1, #24]
 80220ba:	000c      	movs	r4, r1
 80220bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80220be:	2a78      	cmp	r2, #120	@ 0x78
 80220c0:	d809      	bhi.n	80220d6 <_printf_i+0x2e>
 80220c2:	2a62      	cmp	r2, #98	@ 0x62
 80220c4:	d80b      	bhi.n	80220de <_printf_i+0x36>
 80220c6:	2a00      	cmp	r2, #0
 80220c8:	d100      	bne.n	80220cc <_printf_i+0x24>
 80220ca:	e0bc      	b.n	8022246 <_printf_i+0x19e>
 80220cc:	497b      	ldr	r1, [pc, #492]	@ (80222bc <_printf_i+0x214>)
 80220ce:	9104      	str	r1, [sp, #16]
 80220d0:	2a58      	cmp	r2, #88	@ 0x58
 80220d2:	d100      	bne.n	80220d6 <_printf_i+0x2e>
 80220d4:	e090      	b.n	80221f8 <_printf_i+0x150>
 80220d6:	0025      	movs	r5, r4
 80220d8:	3542      	adds	r5, #66	@ 0x42
 80220da:	702a      	strb	r2, [r5, #0]
 80220dc:	e022      	b.n	8022124 <_printf_i+0x7c>
 80220de:	0010      	movs	r0, r2
 80220e0:	3863      	subs	r0, #99	@ 0x63
 80220e2:	2815      	cmp	r0, #21
 80220e4:	d8f7      	bhi.n	80220d6 <_printf_i+0x2e>
 80220e6:	f7de f853 	bl	8000190 <__gnu_thumb1_case_shi>
 80220ea:	0016      	.short	0x0016
 80220ec:	fff6001f 	.word	0xfff6001f
 80220f0:	fff6fff6 	.word	0xfff6fff6
 80220f4:	001ffff6 	.word	0x001ffff6
 80220f8:	fff6fff6 	.word	0xfff6fff6
 80220fc:	fff6fff6 	.word	0xfff6fff6
 8022100:	003600a1 	.word	0x003600a1
 8022104:	fff60080 	.word	0xfff60080
 8022108:	00b2fff6 	.word	0x00b2fff6
 802210c:	0036fff6 	.word	0x0036fff6
 8022110:	fff6fff6 	.word	0xfff6fff6
 8022114:	0084      	.short	0x0084
 8022116:	0025      	movs	r5, r4
 8022118:	681a      	ldr	r2, [r3, #0]
 802211a:	3542      	adds	r5, #66	@ 0x42
 802211c:	1d11      	adds	r1, r2, #4
 802211e:	6019      	str	r1, [r3, #0]
 8022120:	6813      	ldr	r3, [r2, #0]
 8022122:	702b      	strb	r3, [r5, #0]
 8022124:	2301      	movs	r3, #1
 8022126:	e0a0      	b.n	802226a <_printf_i+0x1c2>
 8022128:	6818      	ldr	r0, [r3, #0]
 802212a:	6809      	ldr	r1, [r1, #0]
 802212c:	1d02      	adds	r2, r0, #4
 802212e:	060d      	lsls	r5, r1, #24
 8022130:	d50b      	bpl.n	802214a <_printf_i+0xa2>
 8022132:	6806      	ldr	r6, [r0, #0]
 8022134:	601a      	str	r2, [r3, #0]
 8022136:	2e00      	cmp	r6, #0
 8022138:	da03      	bge.n	8022142 <_printf_i+0x9a>
 802213a:	232d      	movs	r3, #45	@ 0x2d
 802213c:	9a03      	ldr	r2, [sp, #12]
 802213e:	4276      	negs	r6, r6
 8022140:	7013      	strb	r3, [r2, #0]
 8022142:	4b5e      	ldr	r3, [pc, #376]	@ (80222bc <_printf_i+0x214>)
 8022144:	270a      	movs	r7, #10
 8022146:	9304      	str	r3, [sp, #16]
 8022148:	e018      	b.n	802217c <_printf_i+0xd4>
 802214a:	6806      	ldr	r6, [r0, #0]
 802214c:	601a      	str	r2, [r3, #0]
 802214e:	0649      	lsls	r1, r1, #25
 8022150:	d5f1      	bpl.n	8022136 <_printf_i+0x8e>
 8022152:	b236      	sxth	r6, r6
 8022154:	e7ef      	b.n	8022136 <_printf_i+0x8e>
 8022156:	6808      	ldr	r0, [r1, #0]
 8022158:	6819      	ldr	r1, [r3, #0]
 802215a:	c940      	ldmia	r1!, {r6}
 802215c:	0605      	lsls	r5, r0, #24
 802215e:	d402      	bmi.n	8022166 <_printf_i+0xbe>
 8022160:	0640      	lsls	r0, r0, #25
 8022162:	d500      	bpl.n	8022166 <_printf_i+0xbe>
 8022164:	b2b6      	uxth	r6, r6
 8022166:	6019      	str	r1, [r3, #0]
 8022168:	4b54      	ldr	r3, [pc, #336]	@ (80222bc <_printf_i+0x214>)
 802216a:	270a      	movs	r7, #10
 802216c:	9304      	str	r3, [sp, #16]
 802216e:	2a6f      	cmp	r2, #111	@ 0x6f
 8022170:	d100      	bne.n	8022174 <_printf_i+0xcc>
 8022172:	3f02      	subs	r7, #2
 8022174:	0023      	movs	r3, r4
 8022176:	2200      	movs	r2, #0
 8022178:	3343      	adds	r3, #67	@ 0x43
 802217a:	701a      	strb	r2, [r3, #0]
 802217c:	6863      	ldr	r3, [r4, #4]
 802217e:	60a3      	str	r3, [r4, #8]
 8022180:	2b00      	cmp	r3, #0
 8022182:	db03      	blt.n	802218c <_printf_i+0xe4>
 8022184:	2104      	movs	r1, #4
 8022186:	6822      	ldr	r2, [r4, #0]
 8022188:	438a      	bics	r2, r1
 802218a:	6022      	str	r2, [r4, #0]
 802218c:	2e00      	cmp	r6, #0
 802218e:	d102      	bne.n	8022196 <_printf_i+0xee>
 8022190:	9d03      	ldr	r5, [sp, #12]
 8022192:	2b00      	cmp	r3, #0
 8022194:	d00c      	beq.n	80221b0 <_printf_i+0x108>
 8022196:	9d03      	ldr	r5, [sp, #12]
 8022198:	0030      	movs	r0, r6
 802219a:	0039      	movs	r1, r7
 802219c:	f7de f888 	bl	80002b0 <__aeabi_uidivmod>
 80221a0:	9b04      	ldr	r3, [sp, #16]
 80221a2:	3d01      	subs	r5, #1
 80221a4:	5c5b      	ldrb	r3, [r3, r1]
 80221a6:	702b      	strb	r3, [r5, #0]
 80221a8:	0033      	movs	r3, r6
 80221aa:	0006      	movs	r6, r0
 80221ac:	429f      	cmp	r7, r3
 80221ae:	d9f3      	bls.n	8022198 <_printf_i+0xf0>
 80221b0:	2f08      	cmp	r7, #8
 80221b2:	d109      	bne.n	80221c8 <_printf_i+0x120>
 80221b4:	6823      	ldr	r3, [r4, #0]
 80221b6:	07db      	lsls	r3, r3, #31
 80221b8:	d506      	bpl.n	80221c8 <_printf_i+0x120>
 80221ba:	6862      	ldr	r2, [r4, #4]
 80221bc:	6923      	ldr	r3, [r4, #16]
 80221be:	429a      	cmp	r2, r3
 80221c0:	dc02      	bgt.n	80221c8 <_printf_i+0x120>
 80221c2:	2330      	movs	r3, #48	@ 0x30
 80221c4:	3d01      	subs	r5, #1
 80221c6:	702b      	strb	r3, [r5, #0]
 80221c8:	9b03      	ldr	r3, [sp, #12]
 80221ca:	1b5b      	subs	r3, r3, r5
 80221cc:	6123      	str	r3, [r4, #16]
 80221ce:	9b07      	ldr	r3, [sp, #28]
 80221d0:	0021      	movs	r1, r4
 80221d2:	9300      	str	r3, [sp, #0]
 80221d4:	9805      	ldr	r0, [sp, #20]
 80221d6:	9b06      	ldr	r3, [sp, #24]
 80221d8:	aa09      	add	r2, sp, #36	@ 0x24
 80221da:	f7ff fef5 	bl	8021fc8 <_printf_common>
 80221de:	3001      	adds	r0, #1
 80221e0:	d148      	bne.n	8022274 <_printf_i+0x1cc>
 80221e2:	2001      	movs	r0, #1
 80221e4:	4240      	negs	r0, r0
 80221e6:	b00b      	add	sp, #44	@ 0x2c
 80221e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80221ea:	2220      	movs	r2, #32
 80221ec:	6809      	ldr	r1, [r1, #0]
 80221ee:	430a      	orrs	r2, r1
 80221f0:	6022      	str	r2, [r4, #0]
 80221f2:	2278      	movs	r2, #120	@ 0x78
 80221f4:	4932      	ldr	r1, [pc, #200]	@ (80222c0 <_printf_i+0x218>)
 80221f6:	9104      	str	r1, [sp, #16]
 80221f8:	0021      	movs	r1, r4
 80221fa:	3145      	adds	r1, #69	@ 0x45
 80221fc:	700a      	strb	r2, [r1, #0]
 80221fe:	6819      	ldr	r1, [r3, #0]
 8022200:	6822      	ldr	r2, [r4, #0]
 8022202:	c940      	ldmia	r1!, {r6}
 8022204:	0610      	lsls	r0, r2, #24
 8022206:	d402      	bmi.n	802220e <_printf_i+0x166>
 8022208:	0650      	lsls	r0, r2, #25
 802220a:	d500      	bpl.n	802220e <_printf_i+0x166>
 802220c:	b2b6      	uxth	r6, r6
 802220e:	6019      	str	r1, [r3, #0]
 8022210:	07d3      	lsls	r3, r2, #31
 8022212:	d502      	bpl.n	802221a <_printf_i+0x172>
 8022214:	2320      	movs	r3, #32
 8022216:	4313      	orrs	r3, r2
 8022218:	6023      	str	r3, [r4, #0]
 802221a:	2e00      	cmp	r6, #0
 802221c:	d001      	beq.n	8022222 <_printf_i+0x17a>
 802221e:	2710      	movs	r7, #16
 8022220:	e7a8      	b.n	8022174 <_printf_i+0xcc>
 8022222:	2220      	movs	r2, #32
 8022224:	6823      	ldr	r3, [r4, #0]
 8022226:	4393      	bics	r3, r2
 8022228:	6023      	str	r3, [r4, #0]
 802222a:	e7f8      	b.n	802221e <_printf_i+0x176>
 802222c:	681a      	ldr	r2, [r3, #0]
 802222e:	680d      	ldr	r5, [r1, #0]
 8022230:	1d10      	adds	r0, r2, #4
 8022232:	6949      	ldr	r1, [r1, #20]
 8022234:	6018      	str	r0, [r3, #0]
 8022236:	6813      	ldr	r3, [r2, #0]
 8022238:	062e      	lsls	r6, r5, #24
 802223a:	d501      	bpl.n	8022240 <_printf_i+0x198>
 802223c:	6019      	str	r1, [r3, #0]
 802223e:	e002      	b.n	8022246 <_printf_i+0x19e>
 8022240:	066d      	lsls	r5, r5, #25
 8022242:	d5fb      	bpl.n	802223c <_printf_i+0x194>
 8022244:	8019      	strh	r1, [r3, #0]
 8022246:	2300      	movs	r3, #0
 8022248:	9d03      	ldr	r5, [sp, #12]
 802224a:	6123      	str	r3, [r4, #16]
 802224c:	e7bf      	b.n	80221ce <_printf_i+0x126>
 802224e:	681a      	ldr	r2, [r3, #0]
 8022250:	1d11      	adds	r1, r2, #4
 8022252:	6019      	str	r1, [r3, #0]
 8022254:	6815      	ldr	r5, [r2, #0]
 8022256:	2100      	movs	r1, #0
 8022258:	0028      	movs	r0, r5
 802225a:	6862      	ldr	r2, [r4, #4]
 802225c:	f000 fb9d 	bl	802299a <memchr>
 8022260:	2800      	cmp	r0, #0
 8022262:	d001      	beq.n	8022268 <_printf_i+0x1c0>
 8022264:	1b40      	subs	r0, r0, r5
 8022266:	6060      	str	r0, [r4, #4]
 8022268:	6863      	ldr	r3, [r4, #4]
 802226a:	6123      	str	r3, [r4, #16]
 802226c:	2300      	movs	r3, #0
 802226e:	9a03      	ldr	r2, [sp, #12]
 8022270:	7013      	strb	r3, [r2, #0]
 8022272:	e7ac      	b.n	80221ce <_printf_i+0x126>
 8022274:	002a      	movs	r2, r5
 8022276:	6923      	ldr	r3, [r4, #16]
 8022278:	9906      	ldr	r1, [sp, #24]
 802227a:	9805      	ldr	r0, [sp, #20]
 802227c:	9d07      	ldr	r5, [sp, #28]
 802227e:	47a8      	blx	r5
 8022280:	3001      	adds	r0, #1
 8022282:	d0ae      	beq.n	80221e2 <_printf_i+0x13a>
 8022284:	6823      	ldr	r3, [r4, #0]
 8022286:	079b      	lsls	r3, r3, #30
 8022288:	d415      	bmi.n	80222b6 <_printf_i+0x20e>
 802228a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802228c:	68e0      	ldr	r0, [r4, #12]
 802228e:	4298      	cmp	r0, r3
 8022290:	daa9      	bge.n	80221e6 <_printf_i+0x13e>
 8022292:	0018      	movs	r0, r3
 8022294:	e7a7      	b.n	80221e6 <_printf_i+0x13e>
 8022296:	0022      	movs	r2, r4
 8022298:	2301      	movs	r3, #1
 802229a:	9906      	ldr	r1, [sp, #24]
 802229c:	9805      	ldr	r0, [sp, #20]
 802229e:	9e07      	ldr	r6, [sp, #28]
 80222a0:	3219      	adds	r2, #25
 80222a2:	47b0      	blx	r6
 80222a4:	3001      	adds	r0, #1
 80222a6:	d09c      	beq.n	80221e2 <_printf_i+0x13a>
 80222a8:	3501      	adds	r5, #1
 80222aa:	68e3      	ldr	r3, [r4, #12]
 80222ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80222ae:	1a9b      	subs	r3, r3, r2
 80222b0:	42ab      	cmp	r3, r5
 80222b2:	dcf0      	bgt.n	8022296 <_printf_i+0x1ee>
 80222b4:	e7e9      	b.n	802228a <_printf_i+0x1e2>
 80222b6:	2500      	movs	r5, #0
 80222b8:	e7f7      	b.n	80222aa <_printf_i+0x202>
 80222ba:	46c0      	nop			@ (mov r8, r8)
 80222bc:	0802918b 	.word	0x0802918b
 80222c0:	0802919c 	.word	0x0802919c

080222c4 <std>:
 80222c4:	2300      	movs	r3, #0
 80222c6:	b510      	push	{r4, lr}
 80222c8:	0004      	movs	r4, r0
 80222ca:	6003      	str	r3, [r0, #0]
 80222cc:	6043      	str	r3, [r0, #4]
 80222ce:	6083      	str	r3, [r0, #8]
 80222d0:	8181      	strh	r1, [r0, #12]
 80222d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80222d4:	81c2      	strh	r2, [r0, #14]
 80222d6:	6103      	str	r3, [r0, #16]
 80222d8:	6143      	str	r3, [r0, #20]
 80222da:	6183      	str	r3, [r0, #24]
 80222dc:	0019      	movs	r1, r3
 80222de:	2208      	movs	r2, #8
 80222e0:	305c      	adds	r0, #92	@ 0x5c
 80222e2:	f000 fa89 	bl	80227f8 <memset>
 80222e6:	4b0b      	ldr	r3, [pc, #44]	@ (8022314 <std+0x50>)
 80222e8:	6224      	str	r4, [r4, #32]
 80222ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80222ec:	4b0a      	ldr	r3, [pc, #40]	@ (8022318 <std+0x54>)
 80222ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80222f0:	4b0a      	ldr	r3, [pc, #40]	@ (802231c <std+0x58>)
 80222f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80222f4:	4b0a      	ldr	r3, [pc, #40]	@ (8022320 <std+0x5c>)
 80222f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80222f8:	4b0a      	ldr	r3, [pc, #40]	@ (8022324 <std+0x60>)
 80222fa:	429c      	cmp	r4, r3
 80222fc:	d005      	beq.n	802230a <std+0x46>
 80222fe:	4b0a      	ldr	r3, [pc, #40]	@ (8022328 <std+0x64>)
 8022300:	429c      	cmp	r4, r3
 8022302:	d002      	beq.n	802230a <std+0x46>
 8022304:	4b09      	ldr	r3, [pc, #36]	@ (802232c <std+0x68>)
 8022306:	429c      	cmp	r4, r3
 8022308:	d103      	bne.n	8022312 <std+0x4e>
 802230a:	0020      	movs	r0, r4
 802230c:	3058      	adds	r0, #88	@ 0x58
 802230e:	f000 fb41 	bl	8022994 <__retarget_lock_init_recursive>
 8022312:	bd10      	pop	{r4, pc}
 8022314:	0802256d 	.word	0x0802256d
 8022318:	08022595 	.word	0x08022595
 802231c:	080225cd 	.word	0x080225cd
 8022320:	080225f9 	.word	0x080225f9
 8022324:	20003434 	.word	0x20003434
 8022328:	2000349c 	.word	0x2000349c
 802232c:	20003504 	.word	0x20003504

08022330 <stdio_exit_handler>:
 8022330:	b510      	push	{r4, lr}
 8022332:	4a03      	ldr	r2, [pc, #12]	@ (8022340 <stdio_exit_handler+0x10>)
 8022334:	4903      	ldr	r1, [pc, #12]	@ (8022344 <stdio_exit_handler+0x14>)
 8022336:	4804      	ldr	r0, [pc, #16]	@ (8022348 <stdio_exit_handler+0x18>)
 8022338:	f000 f86c 	bl	8022414 <_fwalk_sglue>
 802233c:	bd10      	pop	{r4, pc}
 802233e:	46c0      	nop			@ (mov r8, r8)
 8022340:	20000264 	.word	0x20000264
 8022344:	08024fb9 	.word	0x08024fb9
 8022348:	200003e0 	.word	0x200003e0

0802234c <cleanup_stdio>:
 802234c:	6841      	ldr	r1, [r0, #4]
 802234e:	4b0b      	ldr	r3, [pc, #44]	@ (802237c <cleanup_stdio+0x30>)
 8022350:	b510      	push	{r4, lr}
 8022352:	0004      	movs	r4, r0
 8022354:	4299      	cmp	r1, r3
 8022356:	d001      	beq.n	802235c <cleanup_stdio+0x10>
 8022358:	f002 fe2e 	bl	8024fb8 <_fflush_r>
 802235c:	68a1      	ldr	r1, [r4, #8]
 802235e:	4b08      	ldr	r3, [pc, #32]	@ (8022380 <cleanup_stdio+0x34>)
 8022360:	4299      	cmp	r1, r3
 8022362:	d002      	beq.n	802236a <cleanup_stdio+0x1e>
 8022364:	0020      	movs	r0, r4
 8022366:	f002 fe27 	bl	8024fb8 <_fflush_r>
 802236a:	68e1      	ldr	r1, [r4, #12]
 802236c:	4b05      	ldr	r3, [pc, #20]	@ (8022384 <cleanup_stdio+0x38>)
 802236e:	4299      	cmp	r1, r3
 8022370:	d002      	beq.n	8022378 <cleanup_stdio+0x2c>
 8022372:	0020      	movs	r0, r4
 8022374:	f002 fe20 	bl	8024fb8 <_fflush_r>
 8022378:	bd10      	pop	{r4, pc}
 802237a:	46c0      	nop			@ (mov r8, r8)
 802237c:	20003434 	.word	0x20003434
 8022380:	2000349c 	.word	0x2000349c
 8022384:	20003504 	.word	0x20003504

08022388 <global_stdio_init.part.0>:
 8022388:	b510      	push	{r4, lr}
 802238a:	4b09      	ldr	r3, [pc, #36]	@ (80223b0 <global_stdio_init.part.0+0x28>)
 802238c:	4a09      	ldr	r2, [pc, #36]	@ (80223b4 <global_stdio_init.part.0+0x2c>)
 802238e:	2104      	movs	r1, #4
 8022390:	601a      	str	r2, [r3, #0]
 8022392:	4809      	ldr	r0, [pc, #36]	@ (80223b8 <global_stdio_init.part.0+0x30>)
 8022394:	2200      	movs	r2, #0
 8022396:	f7ff ff95 	bl	80222c4 <std>
 802239a:	2201      	movs	r2, #1
 802239c:	2109      	movs	r1, #9
 802239e:	4807      	ldr	r0, [pc, #28]	@ (80223bc <global_stdio_init.part.0+0x34>)
 80223a0:	f7ff ff90 	bl	80222c4 <std>
 80223a4:	2202      	movs	r2, #2
 80223a6:	2112      	movs	r1, #18
 80223a8:	4805      	ldr	r0, [pc, #20]	@ (80223c0 <global_stdio_init.part.0+0x38>)
 80223aa:	f7ff ff8b 	bl	80222c4 <std>
 80223ae:	bd10      	pop	{r4, pc}
 80223b0:	2000356c 	.word	0x2000356c
 80223b4:	08022331 	.word	0x08022331
 80223b8:	20003434 	.word	0x20003434
 80223bc:	2000349c 	.word	0x2000349c
 80223c0:	20003504 	.word	0x20003504

080223c4 <__sfp_lock_acquire>:
 80223c4:	b510      	push	{r4, lr}
 80223c6:	4802      	ldr	r0, [pc, #8]	@ (80223d0 <__sfp_lock_acquire+0xc>)
 80223c8:	f000 fae5 	bl	8022996 <__retarget_lock_acquire_recursive>
 80223cc:	bd10      	pop	{r4, pc}
 80223ce:	46c0      	nop			@ (mov r8, r8)
 80223d0:	20003575 	.word	0x20003575

080223d4 <__sfp_lock_release>:
 80223d4:	b510      	push	{r4, lr}
 80223d6:	4802      	ldr	r0, [pc, #8]	@ (80223e0 <__sfp_lock_release+0xc>)
 80223d8:	f000 fade 	bl	8022998 <__retarget_lock_release_recursive>
 80223dc:	bd10      	pop	{r4, pc}
 80223de:	46c0      	nop			@ (mov r8, r8)
 80223e0:	20003575 	.word	0x20003575

080223e4 <__sinit>:
 80223e4:	b510      	push	{r4, lr}
 80223e6:	0004      	movs	r4, r0
 80223e8:	f7ff ffec 	bl	80223c4 <__sfp_lock_acquire>
 80223ec:	6a23      	ldr	r3, [r4, #32]
 80223ee:	2b00      	cmp	r3, #0
 80223f0:	d002      	beq.n	80223f8 <__sinit+0x14>
 80223f2:	f7ff ffef 	bl	80223d4 <__sfp_lock_release>
 80223f6:	bd10      	pop	{r4, pc}
 80223f8:	4b04      	ldr	r3, [pc, #16]	@ (802240c <__sinit+0x28>)
 80223fa:	6223      	str	r3, [r4, #32]
 80223fc:	4b04      	ldr	r3, [pc, #16]	@ (8022410 <__sinit+0x2c>)
 80223fe:	681b      	ldr	r3, [r3, #0]
 8022400:	2b00      	cmp	r3, #0
 8022402:	d1f6      	bne.n	80223f2 <__sinit+0xe>
 8022404:	f7ff ffc0 	bl	8022388 <global_stdio_init.part.0>
 8022408:	e7f3      	b.n	80223f2 <__sinit+0xe>
 802240a:	46c0      	nop			@ (mov r8, r8)
 802240c:	0802234d 	.word	0x0802234d
 8022410:	2000356c 	.word	0x2000356c

08022414 <_fwalk_sglue>:
 8022414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022416:	0014      	movs	r4, r2
 8022418:	2600      	movs	r6, #0
 802241a:	9000      	str	r0, [sp, #0]
 802241c:	9101      	str	r1, [sp, #4]
 802241e:	68a5      	ldr	r5, [r4, #8]
 8022420:	6867      	ldr	r7, [r4, #4]
 8022422:	3f01      	subs	r7, #1
 8022424:	d504      	bpl.n	8022430 <_fwalk_sglue+0x1c>
 8022426:	6824      	ldr	r4, [r4, #0]
 8022428:	2c00      	cmp	r4, #0
 802242a:	d1f8      	bne.n	802241e <_fwalk_sglue+0xa>
 802242c:	0030      	movs	r0, r6
 802242e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022430:	89ab      	ldrh	r3, [r5, #12]
 8022432:	2b01      	cmp	r3, #1
 8022434:	d908      	bls.n	8022448 <_fwalk_sglue+0x34>
 8022436:	220e      	movs	r2, #14
 8022438:	5eab      	ldrsh	r3, [r5, r2]
 802243a:	3301      	adds	r3, #1
 802243c:	d004      	beq.n	8022448 <_fwalk_sglue+0x34>
 802243e:	0029      	movs	r1, r5
 8022440:	9800      	ldr	r0, [sp, #0]
 8022442:	9b01      	ldr	r3, [sp, #4]
 8022444:	4798      	blx	r3
 8022446:	4306      	orrs	r6, r0
 8022448:	3568      	adds	r5, #104	@ 0x68
 802244a:	e7ea      	b.n	8022422 <_fwalk_sglue+0xe>

0802244c <iprintf>:
 802244c:	b40f      	push	{r0, r1, r2, r3}
 802244e:	b507      	push	{r0, r1, r2, lr}
 8022450:	4905      	ldr	r1, [pc, #20]	@ (8022468 <iprintf+0x1c>)
 8022452:	ab04      	add	r3, sp, #16
 8022454:	6808      	ldr	r0, [r1, #0]
 8022456:	cb04      	ldmia	r3!, {r2}
 8022458:	6881      	ldr	r1, [r0, #8]
 802245a:	9301      	str	r3, [sp, #4]
 802245c:	f002 fc0a 	bl	8024c74 <_vfiprintf_r>
 8022460:	b003      	add	sp, #12
 8022462:	bc08      	pop	{r3}
 8022464:	b004      	add	sp, #16
 8022466:	4718      	bx	r3
 8022468:	200003dc 	.word	0x200003dc

0802246c <_puts_r>:
 802246c:	6a03      	ldr	r3, [r0, #32]
 802246e:	b570      	push	{r4, r5, r6, lr}
 8022470:	0005      	movs	r5, r0
 8022472:	000e      	movs	r6, r1
 8022474:	6884      	ldr	r4, [r0, #8]
 8022476:	2b00      	cmp	r3, #0
 8022478:	d101      	bne.n	802247e <_puts_r+0x12>
 802247a:	f7ff ffb3 	bl	80223e4 <__sinit>
 802247e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022480:	07db      	lsls	r3, r3, #31
 8022482:	d405      	bmi.n	8022490 <_puts_r+0x24>
 8022484:	89a3      	ldrh	r3, [r4, #12]
 8022486:	059b      	lsls	r3, r3, #22
 8022488:	d402      	bmi.n	8022490 <_puts_r+0x24>
 802248a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802248c:	f000 fa83 	bl	8022996 <__retarget_lock_acquire_recursive>
 8022490:	89a3      	ldrh	r3, [r4, #12]
 8022492:	071b      	lsls	r3, r3, #28
 8022494:	d502      	bpl.n	802249c <_puts_r+0x30>
 8022496:	6923      	ldr	r3, [r4, #16]
 8022498:	2b00      	cmp	r3, #0
 802249a:	d11f      	bne.n	80224dc <_puts_r+0x70>
 802249c:	0021      	movs	r1, r4
 802249e:	0028      	movs	r0, r5
 80224a0:	f000 f94c 	bl	802273c <__swsetup_r>
 80224a4:	2800      	cmp	r0, #0
 80224a6:	d019      	beq.n	80224dc <_puts_r+0x70>
 80224a8:	2501      	movs	r5, #1
 80224aa:	426d      	negs	r5, r5
 80224ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80224ae:	07db      	lsls	r3, r3, #31
 80224b0:	d405      	bmi.n	80224be <_puts_r+0x52>
 80224b2:	89a3      	ldrh	r3, [r4, #12]
 80224b4:	059b      	lsls	r3, r3, #22
 80224b6:	d402      	bmi.n	80224be <_puts_r+0x52>
 80224b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80224ba:	f000 fa6d 	bl	8022998 <__retarget_lock_release_recursive>
 80224be:	0028      	movs	r0, r5
 80224c0:	bd70      	pop	{r4, r5, r6, pc}
 80224c2:	3601      	adds	r6, #1
 80224c4:	60a3      	str	r3, [r4, #8]
 80224c6:	2b00      	cmp	r3, #0
 80224c8:	da04      	bge.n	80224d4 <_puts_r+0x68>
 80224ca:	69a2      	ldr	r2, [r4, #24]
 80224cc:	429a      	cmp	r2, r3
 80224ce:	dc16      	bgt.n	80224fe <_puts_r+0x92>
 80224d0:	290a      	cmp	r1, #10
 80224d2:	d014      	beq.n	80224fe <_puts_r+0x92>
 80224d4:	6823      	ldr	r3, [r4, #0]
 80224d6:	1c5a      	adds	r2, r3, #1
 80224d8:	6022      	str	r2, [r4, #0]
 80224da:	7019      	strb	r1, [r3, #0]
 80224dc:	68a3      	ldr	r3, [r4, #8]
 80224de:	7831      	ldrb	r1, [r6, #0]
 80224e0:	3b01      	subs	r3, #1
 80224e2:	2900      	cmp	r1, #0
 80224e4:	d1ed      	bne.n	80224c2 <_puts_r+0x56>
 80224e6:	60a3      	str	r3, [r4, #8]
 80224e8:	2b00      	cmp	r3, #0
 80224ea:	da0f      	bge.n	802250c <_puts_r+0xa0>
 80224ec:	0022      	movs	r2, r4
 80224ee:	0028      	movs	r0, r5
 80224f0:	310a      	adds	r1, #10
 80224f2:	f000 f8e1 	bl	80226b8 <__swbuf_r>
 80224f6:	3001      	adds	r0, #1
 80224f8:	d0d6      	beq.n	80224a8 <_puts_r+0x3c>
 80224fa:	250a      	movs	r5, #10
 80224fc:	e7d6      	b.n	80224ac <_puts_r+0x40>
 80224fe:	0022      	movs	r2, r4
 8022500:	0028      	movs	r0, r5
 8022502:	f000 f8d9 	bl	80226b8 <__swbuf_r>
 8022506:	3001      	adds	r0, #1
 8022508:	d1e8      	bne.n	80224dc <_puts_r+0x70>
 802250a:	e7cd      	b.n	80224a8 <_puts_r+0x3c>
 802250c:	6823      	ldr	r3, [r4, #0]
 802250e:	1c5a      	adds	r2, r3, #1
 8022510:	6022      	str	r2, [r4, #0]
 8022512:	220a      	movs	r2, #10
 8022514:	701a      	strb	r2, [r3, #0]
 8022516:	e7f0      	b.n	80224fa <_puts_r+0x8e>

08022518 <puts>:
 8022518:	b510      	push	{r4, lr}
 802251a:	4b03      	ldr	r3, [pc, #12]	@ (8022528 <puts+0x10>)
 802251c:	0001      	movs	r1, r0
 802251e:	6818      	ldr	r0, [r3, #0]
 8022520:	f7ff ffa4 	bl	802246c <_puts_r>
 8022524:	bd10      	pop	{r4, pc}
 8022526:	46c0      	nop			@ (mov r8, r8)
 8022528:	200003dc 	.word	0x200003dc

0802252c <siprintf>:
 802252c:	b40e      	push	{r1, r2, r3}
 802252e:	b500      	push	{lr}
 8022530:	490b      	ldr	r1, [pc, #44]	@ (8022560 <siprintf+0x34>)
 8022532:	b09c      	sub	sp, #112	@ 0x70
 8022534:	ab1d      	add	r3, sp, #116	@ 0x74
 8022536:	9002      	str	r0, [sp, #8]
 8022538:	9006      	str	r0, [sp, #24]
 802253a:	9107      	str	r1, [sp, #28]
 802253c:	9104      	str	r1, [sp, #16]
 802253e:	4809      	ldr	r0, [pc, #36]	@ (8022564 <siprintf+0x38>)
 8022540:	4909      	ldr	r1, [pc, #36]	@ (8022568 <siprintf+0x3c>)
 8022542:	cb04      	ldmia	r3!, {r2}
 8022544:	9105      	str	r1, [sp, #20]
 8022546:	6800      	ldr	r0, [r0, #0]
 8022548:	a902      	add	r1, sp, #8
 802254a:	9301      	str	r3, [sp, #4]
 802254c:	f002 fa6c 	bl	8024a28 <_svfiprintf_r>
 8022550:	2200      	movs	r2, #0
 8022552:	9b02      	ldr	r3, [sp, #8]
 8022554:	701a      	strb	r2, [r3, #0]
 8022556:	b01c      	add	sp, #112	@ 0x70
 8022558:	bc08      	pop	{r3}
 802255a:	b003      	add	sp, #12
 802255c:	4718      	bx	r3
 802255e:	46c0      	nop			@ (mov r8, r8)
 8022560:	7fffffff 	.word	0x7fffffff
 8022564:	200003dc 	.word	0x200003dc
 8022568:	ffff0208 	.word	0xffff0208

0802256c <__sread>:
 802256c:	b570      	push	{r4, r5, r6, lr}
 802256e:	000c      	movs	r4, r1
 8022570:	250e      	movs	r5, #14
 8022572:	5f49      	ldrsh	r1, [r1, r5]
 8022574:	f000 f9bc 	bl	80228f0 <_read_r>
 8022578:	2800      	cmp	r0, #0
 802257a:	db03      	blt.n	8022584 <__sread+0x18>
 802257c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802257e:	181b      	adds	r3, r3, r0
 8022580:	6563      	str	r3, [r4, #84]	@ 0x54
 8022582:	bd70      	pop	{r4, r5, r6, pc}
 8022584:	89a3      	ldrh	r3, [r4, #12]
 8022586:	4a02      	ldr	r2, [pc, #8]	@ (8022590 <__sread+0x24>)
 8022588:	4013      	ands	r3, r2
 802258a:	81a3      	strh	r3, [r4, #12]
 802258c:	e7f9      	b.n	8022582 <__sread+0x16>
 802258e:	46c0      	nop			@ (mov r8, r8)
 8022590:	ffffefff 	.word	0xffffefff

08022594 <__swrite>:
 8022594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022596:	001f      	movs	r7, r3
 8022598:	898b      	ldrh	r3, [r1, #12]
 802259a:	0005      	movs	r5, r0
 802259c:	000c      	movs	r4, r1
 802259e:	0016      	movs	r6, r2
 80225a0:	05db      	lsls	r3, r3, #23
 80225a2:	d505      	bpl.n	80225b0 <__swrite+0x1c>
 80225a4:	230e      	movs	r3, #14
 80225a6:	5ec9      	ldrsh	r1, [r1, r3]
 80225a8:	2200      	movs	r2, #0
 80225aa:	2302      	movs	r3, #2
 80225ac:	f000 f98c 	bl	80228c8 <_lseek_r>
 80225b0:	89a3      	ldrh	r3, [r4, #12]
 80225b2:	4a05      	ldr	r2, [pc, #20]	@ (80225c8 <__swrite+0x34>)
 80225b4:	0028      	movs	r0, r5
 80225b6:	4013      	ands	r3, r2
 80225b8:	81a3      	strh	r3, [r4, #12]
 80225ba:	0032      	movs	r2, r6
 80225bc:	230e      	movs	r3, #14
 80225be:	5ee1      	ldrsh	r1, [r4, r3]
 80225c0:	003b      	movs	r3, r7
 80225c2:	f000 f9a9 	bl	8022918 <_write_r>
 80225c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80225c8:	ffffefff 	.word	0xffffefff

080225cc <__sseek>:
 80225cc:	b570      	push	{r4, r5, r6, lr}
 80225ce:	000c      	movs	r4, r1
 80225d0:	250e      	movs	r5, #14
 80225d2:	5f49      	ldrsh	r1, [r1, r5]
 80225d4:	f000 f978 	bl	80228c8 <_lseek_r>
 80225d8:	89a3      	ldrh	r3, [r4, #12]
 80225da:	1c42      	adds	r2, r0, #1
 80225dc:	d103      	bne.n	80225e6 <__sseek+0x1a>
 80225de:	4a05      	ldr	r2, [pc, #20]	@ (80225f4 <__sseek+0x28>)
 80225e0:	4013      	ands	r3, r2
 80225e2:	81a3      	strh	r3, [r4, #12]
 80225e4:	bd70      	pop	{r4, r5, r6, pc}
 80225e6:	2280      	movs	r2, #128	@ 0x80
 80225e8:	0152      	lsls	r2, r2, #5
 80225ea:	4313      	orrs	r3, r2
 80225ec:	81a3      	strh	r3, [r4, #12]
 80225ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80225f0:	e7f8      	b.n	80225e4 <__sseek+0x18>
 80225f2:	46c0      	nop			@ (mov r8, r8)
 80225f4:	ffffefff 	.word	0xffffefff

080225f8 <__sclose>:
 80225f8:	b510      	push	{r4, lr}
 80225fa:	230e      	movs	r3, #14
 80225fc:	5ec9      	ldrsh	r1, [r1, r3]
 80225fe:	f000 f951 	bl	80228a4 <_close_r>
 8022602:	bd10      	pop	{r4, pc}

08022604 <_vsniprintf_r>:
 8022604:	b530      	push	{r4, r5, lr}
 8022606:	0014      	movs	r4, r2
 8022608:	0005      	movs	r5, r0
 802260a:	001a      	movs	r2, r3
 802260c:	b09b      	sub	sp, #108	@ 0x6c
 802260e:	2c00      	cmp	r4, #0
 8022610:	da05      	bge.n	802261e <_vsniprintf_r+0x1a>
 8022612:	238b      	movs	r3, #139	@ 0x8b
 8022614:	6003      	str	r3, [r0, #0]
 8022616:	2001      	movs	r0, #1
 8022618:	4240      	negs	r0, r0
 802261a:	b01b      	add	sp, #108	@ 0x6c
 802261c:	bd30      	pop	{r4, r5, pc}
 802261e:	2382      	movs	r3, #130	@ 0x82
 8022620:	4668      	mov	r0, sp
 8022622:	009b      	lsls	r3, r3, #2
 8022624:	8183      	strh	r3, [r0, #12]
 8022626:	2300      	movs	r3, #0
 8022628:	9100      	str	r1, [sp, #0]
 802262a:	9104      	str	r1, [sp, #16]
 802262c:	429c      	cmp	r4, r3
 802262e:	d000      	beq.n	8022632 <_vsniprintf_r+0x2e>
 8022630:	1e63      	subs	r3, r4, #1
 8022632:	9302      	str	r3, [sp, #8]
 8022634:	9305      	str	r3, [sp, #20]
 8022636:	2301      	movs	r3, #1
 8022638:	4669      	mov	r1, sp
 802263a:	425b      	negs	r3, r3
 802263c:	81cb      	strh	r3, [r1, #14]
 802263e:	0028      	movs	r0, r5
 8022640:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022642:	f002 f9f1 	bl	8024a28 <_svfiprintf_r>
 8022646:	1c43      	adds	r3, r0, #1
 8022648:	da01      	bge.n	802264e <_vsniprintf_r+0x4a>
 802264a:	238b      	movs	r3, #139	@ 0x8b
 802264c:	602b      	str	r3, [r5, #0]
 802264e:	2c00      	cmp	r4, #0
 8022650:	d0e3      	beq.n	802261a <_vsniprintf_r+0x16>
 8022652:	2200      	movs	r2, #0
 8022654:	9b00      	ldr	r3, [sp, #0]
 8022656:	701a      	strb	r2, [r3, #0]
 8022658:	e7df      	b.n	802261a <_vsniprintf_r+0x16>
	...

0802265c <vsniprintf>:
 802265c:	b513      	push	{r0, r1, r4, lr}
 802265e:	4c04      	ldr	r4, [pc, #16]	@ (8022670 <vsniprintf+0x14>)
 8022660:	9300      	str	r3, [sp, #0]
 8022662:	0013      	movs	r3, r2
 8022664:	000a      	movs	r2, r1
 8022666:	0001      	movs	r1, r0
 8022668:	6820      	ldr	r0, [r4, #0]
 802266a:	f7ff ffcb 	bl	8022604 <_vsniprintf_r>
 802266e:	bd16      	pop	{r1, r2, r4, pc}
 8022670:	200003dc 	.word	0x200003dc

08022674 <_vsiprintf_r>:
 8022674:	b500      	push	{lr}
 8022676:	b09b      	sub	sp, #108	@ 0x6c
 8022678:	9100      	str	r1, [sp, #0]
 802267a:	9104      	str	r1, [sp, #16]
 802267c:	4906      	ldr	r1, [pc, #24]	@ (8022698 <_vsiprintf_r+0x24>)
 802267e:	9105      	str	r1, [sp, #20]
 8022680:	9102      	str	r1, [sp, #8]
 8022682:	4906      	ldr	r1, [pc, #24]	@ (802269c <_vsiprintf_r+0x28>)
 8022684:	9103      	str	r1, [sp, #12]
 8022686:	4669      	mov	r1, sp
 8022688:	f002 f9ce 	bl	8024a28 <_svfiprintf_r>
 802268c:	2200      	movs	r2, #0
 802268e:	9b00      	ldr	r3, [sp, #0]
 8022690:	701a      	strb	r2, [r3, #0]
 8022692:	b01b      	add	sp, #108	@ 0x6c
 8022694:	bd00      	pop	{pc}
 8022696:	46c0      	nop			@ (mov r8, r8)
 8022698:	7fffffff 	.word	0x7fffffff
 802269c:	ffff0208 	.word	0xffff0208

080226a0 <vsiprintf>:
 80226a0:	b510      	push	{r4, lr}
 80226a2:	4c04      	ldr	r4, [pc, #16]	@ (80226b4 <vsiprintf+0x14>)
 80226a4:	0013      	movs	r3, r2
 80226a6:	000a      	movs	r2, r1
 80226a8:	0001      	movs	r1, r0
 80226aa:	6820      	ldr	r0, [r4, #0]
 80226ac:	f7ff ffe2 	bl	8022674 <_vsiprintf_r>
 80226b0:	bd10      	pop	{r4, pc}
 80226b2:	46c0      	nop			@ (mov r8, r8)
 80226b4:	200003dc 	.word	0x200003dc

080226b8 <__swbuf_r>:
 80226b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226ba:	0006      	movs	r6, r0
 80226bc:	000d      	movs	r5, r1
 80226be:	0014      	movs	r4, r2
 80226c0:	2800      	cmp	r0, #0
 80226c2:	d004      	beq.n	80226ce <__swbuf_r+0x16>
 80226c4:	6a03      	ldr	r3, [r0, #32]
 80226c6:	2b00      	cmp	r3, #0
 80226c8:	d101      	bne.n	80226ce <__swbuf_r+0x16>
 80226ca:	f7ff fe8b 	bl	80223e4 <__sinit>
 80226ce:	69a3      	ldr	r3, [r4, #24]
 80226d0:	60a3      	str	r3, [r4, #8]
 80226d2:	89a3      	ldrh	r3, [r4, #12]
 80226d4:	071b      	lsls	r3, r3, #28
 80226d6:	d502      	bpl.n	80226de <__swbuf_r+0x26>
 80226d8:	6923      	ldr	r3, [r4, #16]
 80226da:	2b00      	cmp	r3, #0
 80226dc:	d109      	bne.n	80226f2 <__swbuf_r+0x3a>
 80226de:	0021      	movs	r1, r4
 80226e0:	0030      	movs	r0, r6
 80226e2:	f000 f82b 	bl	802273c <__swsetup_r>
 80226e6:	2800      	cmp	r0, #0
 80226e8:	d003      	beq.n	80226f2 <__swbuf_r+0x3a>
 80226ea:	2501      	movs	r5, #1
 80226ec:	426d      	negs	r5, r5
 80226ee:	0028      	movs	r0, r5
 80226f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80226f2:	6923      	ldr	r3, [r4, #16]
 80226f4:	6820      	ldr	r0, [r4, #0]
 80226f6:	b2ef      	uxtb	r7, r5
 80226f8:	1ac0      	subs	r0, r0, r3
 80226fa:	6963      	ldr	r3, [r4, #20]
 80226fc:	b2ed      	uxtb	r5, r5
 80226fe:	4283      	cmp	r3, r0
 8022700:	dc05      	bgt.n	802270e <__swbuf_r+0x56>
 8022702:	0021      	movs	r1, r4
 8022704:	0030      	movs	r0, r6
 8022706:	f002 fc57 	bl	8024fb8 <_fflush_r>
 802270a:	2800      	cmp	r0, #0
 802270c:	d1ed      	bne.n	80226ea <__swbuf_r+0x32>
 802270e:	68a3      	ldr	r3, [r4, #8]
 8022710:	3001      	adds	r0, #1
 8022712:	3b01      	subs	r3, #1
 8022714:	60a3      	str	r3, [r4, #8]
 8022716:	6823      	ldr	r3, [r4, #0]
 8022718:	1c5a      	adds	r2, r3, #1
 802271a:	6022      	str	r2, [r4, #0]
 802271c:	701f      	strb	r7, [r3, #0]
 802271e:	6963      	ldr	r3, [r4, #20]
 8022720:	4283      	cmp	r3, r0
 8022722:	d004      	beq.n	802272e <__swbuf_r+0x76>
 8022724:	89a3      	ldrh	r3, [r4, #12]
 8022726:	07db      	lsls	r3, r3, #31
 8022728:	d5e1      	bpl.n	80226ee <__swbuf_r+0x36>
 802272a:	2d0a      	cmp	r5, #10
 802272c:	d1df      	bne.n	80226ee <__swbuf_r+0x36>
 802272e:	0021      	movs	r1, r4
 8022730:	0030      	movs	r0, r6
 8022732:	f002 fc41 	bl	8024fb8 <_fflush_r>
 8022736:	2800      	cmp	r0, #0
 8022738:	d0d9      	beq.n	80226ee <__swbuf_r+0x36>
 802273a:	e7d6      	b.n	80226ea <__swbuf_r+0x32>

0802273c <__swsetup_r>:
 802273c:	4b2d      	ldr	r3, [pc, #180]	@ (80227f4 <__swsetup_r+0xb8>)
 802273e:	b570      	push	{r4, r5, r6, lr}
 8022740:	0005      	movs	r5, r0
 8022742:	6818      	ldr	r0, [r3, #0]
 8022744:	000c      	movs	r4, r1
 8022746:	2800      	cmp	r0, #0
 8022748:	d004      	beq.n	8022754 <__swsetup_r+0x18>
 802274a:	6a03      	ldr	r3, [r0, #32]
 802274c:	2b00      	cmp	r3, #0
 802274e:	d101      	bne.n	8022754 <__swsetup_r+0x18>
 8022750:	f7ff fe48 	bl	80223e4 <__sinit>
 8022754:	230c      	movs	r3, #12
 8022756:	5ee2      	ldrsh	r2, [r4, r3]
 8022758:	0713      	lsls	r3, r2, #28
 802275a:	d423      	bmi.n	80227a4 <__swsetup_r+0x68>
 802275c:	06d3      	lsls	r3, r2, #27
 802275e:	d407      	bmi.n	8022770 <__swsetup_r+0x34>
 8022760:	2309      	movs	r3, #9
 8022762:	602b      	str	r3, [r5, #0]
 8022764:	2340      	movs	r3, #64	@ 0x40
 8022766:	2001      	movs	r0, #1
 8022768:	4313      	orrs	r3, r2
 802276a:	81a3      	strh	r3, [r4, #12]
 802276c:	4240      	negs	r0, r0
 802276e:	e03a      	b.n	80227e6 <__swsetup_r+0xaa>
 8022770:	0752      	lsls	r2, r2, #29
 8022772:	d513      	bpl.n	802279c <__swsetup_r+0x60>
 8022774:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022776:	2900      	cmp	r1, #0
 8022778:	d008      	beq.n	802278c <__swsetup_r+0x50>
 802277a:	0023      	movs	r3, r4
 802277c:	3344      	adds	r3, #68	@ 0x44
 802277e:	4299      	cmp	r1, r3
 8022780:	d002      	beq.n	8022788 <__swsetup_r+0x4c>
 8022782:	0028      	movs	r0, r5
 8022784:	f000 ffa6 	bl	80236d4 <_free_r>
 8022788:	2300      	movs	r3, #0
 802278a:	6363      	str	r3, [r4, #52]	@ 0x34
 802278c:	2224      	movs	r2, #36	@ 0x24
 802278e:	89a3      	ldrh	r3, [r4, #12]
 8022790:	4393      	bics	r3, r2
 8022792:	81a3      	strh	r3, [r4, #12]
 8022794:	2300      	movs	r3, #0
 8022796:	6063      	str	r3, [r4, #4]
 8022798:	6923      	ldr	r3, [r4, #16]
 802279a:	6023      	str	r3, [r4, #0]
 802279c:	2308      	movs	r3, #8
 802279e:	89a2      	ldrh	r2, [r4, #12]
 80227a0:	4313      	orrs	r3, r2
 80227a2:	81a3      	strh	r3, [r4, #12]
 80227a4:	6923      	ldr	r3, [r4, #16]
 80227a6:	2b00      	cmp	r3, #0
 80227a8:	d10b      	bne.n	80227c2 <__swsetup_r+0x86>
 80227aa:	21a0      	movs	r1, #160	@ 0xa0
 80227ac:	2280      	movs	r2, #128	@ 0x80
 80227ae:	89a3      	ldrh	r3, [r4, #12]
 80227b0:	0089      	lsls	r1, r1, #2
 80227b2:	0092      	lsls	r2, r2, #2
 80227b4:	400b      	ands	r3, r1
 80227b6:	4293      	cmp	r3, r2
 80227b8:	d003      	beq.n	80227c2 <__swsetup_r+0x86>
 80227ba:	0021      	movs	r1, r4
 80227bc:	0028      	movs	r0, r5
 80227be:	f002 fc51 	bl	8025064 <__smakebuf_r>
 80227c2:	230c      	movs	r3, #12
 80227c4:	5ee2      	ldrsh	r2, [r4, r3]
 80227c6:	2101      	movs	r1, #1
 80227c8:	0013      	movs	r3, r2
 80227ca:	400b      	ands	r3, r1
 80227cc:	420a      	tst	r2, r1
 80227ce:	d00b      	beq.n	80227e8 <__swsetup_r+0xac>
 80227d0:	2300      	movs	r3, #0
 80227d2:	60a3      	str	r3, [r4, #8]
 80227d4:	6963      	ldr	r3, [r4, #20]
 80227d6:	425b      	negs	r3, r3
 80227d8:	61a3      	str	r3, [r4, #24]
 80227da:	2000      	movs	r0, #0
 80227dc:	6923      	ldr	r3, [r4, #16]
 80227de:	4283      	cmp	r3, r0
 80227e0:	d101      	bne.n	80227e6 <__swsetup_r+0xaa>
 80227e2:	0613      	lsls	r3, r2, #24
 80227e4:	d4be      	bmi.n	8022764 <__swsetup_r+0x28>
 80227e6:	bd70      	pop	{r4, r5, r6, pc}
 80227e8:	0791      	lsls	r1, r2, #30
 80227ea:	d400      	bmi.n	80227ee <__swsetup_r+0xb2>
 80227ec:	6963      	ldr	r3, [r4, #20]
 80227ee:	60a3      	str	r3, [r4, #8]
 80227f0:	e7f3      	b.n	80227da <__swsetup_r+0x9e>
 80227f2:	46c0      	nop			@ (mov r8, r8)
 80227f4:	200003dc 	.word	0x200003dc

080227f8 <memset>:
 80227f8:	0003      	movs	r3, r0
 80227fa:	1882      	adds	r2, r0, r2
 80227fc:	4293      	cmp	r3, r2
 80227fe:	d100      	bne.n	8022802 <memset+0xa>
 8022800:	4770      	bx	lr
 8022802:	7019      	strb	r1, [r3, #0]
 8022804:	3301      	adds	r3, #1
 8022806:	e7f9      	b.n	80227fc <memset+0x4>

08022808 <strchr>:
 8022808:	b2c9      	uxtb	r1, r1
 802280a:	7803      	ldrb	r3, [r0, #0]
 802280c:	2b00      	cmp	r3, #0
 802280e:	d004      	beq.n	802281a <strchr+0x12>
 8022810:	428b      	cmp	r3, r1
 8022812:	d100      	bne.n	8022816 <strchr+0xe>
 8022814:	4770      	bx	lr
 8022816:	3001      	adds	r0, #1
 8022818:	e7f7      	b.n	802280a <strchr+0x2>
 802281a:	424b      	negs	r3, r1
 802281c:	4159      	adcs	r1, r3
 802281e:	4249      	negs	r1, r1
 8022820:	4008      	ands	r0, r1
 8022822:	e7f7      	b.n	8022814 <strchr+0xc>

08022824 <strncmp>:
 8022824:	b530      	push	{r4, r5, lr}
 8022826:	0005      	movs	r5, r0
 8022828:	1e10      	subs	r0, r2, #0
 802282a:	d00b      	beq.n	8022844 <strncmp+0x20>
 802282c:	2400      	movs	r4, #0
 802282e:	3a01      	subs	r2, #1
 8022830:	5d2b      	ldrb	r3, [r5, r4]
 8022832:	5d08      	ldrb	r0, [r1, r4]
 8022834:	4283      	cmp	r3, r0
 8022836:	d104      	bne.n	8022842 <strncmp+0x1e>
 8022838:	42a2      	cmp	r2, r4
 802283a:	d002      	beq.n	8022842 <strncmp+0x1e>
 802283c:	3401      	adds	r4, #1
 802283e:	2b00      	cmp	r3, #0
 8022840:	d1f6      	bne.n	8022830 <strncmp+0xc>
 8022842:	1a18      	subs	r0, r3, r0
 8022844:	bd30      	pop	{r4, r5, pc}

08022846 <strncpy>:
 8022846:	0003      	movs	r3, r0
 8022848:	b530      	push	{r4, r5, lr}
 802284a:	001d      	movs	r5, r3
 802284c:	2a00      	cmp	r2, #0
 802284e:	d006      	beq.n	802285e <strncpy+0x18>
 8022850:	780c      	ldrb	r4, [r1, #0]
 8022852:	3a01      	subs	r2, #1
 8022854:	3301      	adds	r3, #1
 8022856:	702c      	strb	r4, [r5, #0]
 8022858:	3101      	adds	r1, #1
 802285a:	2c00      	cmp	r4, #0
 802285c:	d1f5      	bne.n	802284a <strncpy+0x4>
 802285e:	2100      	movs	r1, #0
 8022860:	189a      	adds	r2, r3, r2
 8022862:	4293      	cmp	r3, r2
 8022864:	d100      	bne.n	8022868 <strncpy+0x22>
 8022866:	bd30      	pop	{r4, r5, pc}
 8022868:	7019      	strb	r1, [r3, #0]
 802286a:	3301      	adds	r3, #1
 802286c:	e7f9      	b.n	8022862 <strncpy+0x1c>

0802286e <strstr>:
 802286e:	780a      	ldrb	r2, [r1, #0]
 8022870:	b530      	push	{r4, r5, lr}
 8022872:	2a00      	cmp	r2, #0
 8022874:	d10c      	bne.n	8022890 <strstr+0x22>
 8022876:	bd30      	pop	{r4, r5, pc}
 8022878:	429a      	cmp	r2, r3
 802287a:	d108      	bne.n	802288e <strstr+0x20>
 802287c:	2301      	movs	r3, #1
 802287e:	5ccc      	ldrb	r4, [r1, r3]
 8022880:	2c00      	cmp	r4, #0
 8022882:	d0f8      	beq.n	8022876 <strstr+0x8>
 8022884:	5cc5      	ldrb	r5, [r0, r3]
 8022886:	42a5      	cmp	r5, r4
 8022888:	d101      	bne.n	802288e <strstr+0x20>
 802288a:	3301      	adds	r3, #1
 802288c:	e7f7      	b.n	802287e <strstr+0x10>
 802288e:	3001      	adds	r0, #1
 8022890:	7803      	ldrb	r3, [r0, #0]
 8022892:	2b00      	cmp	r3, #0
 8022894:	d1f0      	bne.n	8022878 <strstr+0xa>
 8022896:	0018      	movs	r0, r3
 8022898:	e7ed      	b.n	8022876 <strstr+0x8>
	...

0802289c <_localeconv_r>:
 802289c:	4800      	ldr	r0, [pc, #0]	@ (80228a0 <_localeconv_r+0x4>)
 802289e:	4770      	bx	lr
 80228a0:	20000360 	.word	0x20000360

080228a4 <_close_r>:
 80228a4:	2300      	movs	r3, #0
 80228a6:	b570      	push	{r4, r5, r6, lr}
 80228a8:	4d06      	ldr	r5, [pc, #24]	@ (80228c4 <_close_r+0x20>)
 80228aa:	0004      	movs	r4, r0
 80228ac:	0008      	movs	r0, r1
 80228ae:	602b      	str	r3, [r5, #0]
 80228b0:	f7ed f9e6 	bl	800fc80 <_close>
 80228b4:	1c43      	adds	r3, r0, #1
 80228b6:	d103      	bne.n	80228c0 <_close_r+0x1c>
 80228b8:	682b      	ldr	r3, [r5, #0]
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	d000      	beq.n	80228c0 <_close_r+0x1c>
 80228be:	6023      	str	r3, [r4, #0]
 80228c0:	bd70      	pop	{r4, r5, r6, pc}
 80228c2:	46c0      	nop			@ (mov r8, r8)
 80228c4:	20003570 	.word	0x20003570

080228c8 <_lseek_r>:
 80228c8:	b570      	push	{r4, r5, r6, lr}
 80228ca:	0004      	movs	r4, r0
 80228cc:	0008      	movs	r0, r1
 80228ce:	0011      	movs	r1, r2
 80228d0:	001a      	movs	r2, r3
 80228d2:	2300      	movs	r3, #0
 80228d4:	4d05      	ldr	r5, [pc, #20]	@ (80228ec <_lseek_r+0x24>)
 80228d6:	602b      	str	r3, [r5, #0]
 80228d8:	f7ed f9f3 	bl	800fcc2 <_lseek>
 80228dc:	1c43      	adds	r3, r0, #1
 80228de:	d103      	bne.n	80228e8 <_lseek_r+0x20>
 80228e0:	682b      	ldr	r3, [r5, #0]
 80228e2:	2b00      	cmp	r3, #0
 80228e4:	d000      	beq.n	80228e8 <_lseek_r+0x20>
 80228e6:	6023      	str	r3, [r4, #0]
 80228e8:	bd70      	pop	{r4, r5, r6, pc}
 80228ea:	46c0      	nop			@ (mov r8, r8)
 80228ec:	20003570 	.word	0x20003570

080228f0 <_read_r>:
 80228f0:	b570      	push	{r4, r5, r6, lr}
 80228f2:	0004      	movs	r4, r0
 80228f4:	0008      	movs	r0, r1
 80228f6:	0011      	movs	r1, r2
 80228f8:	001a      	movs	r2, r3
 80228fa:	2300      	movs	r3, #0
 80228fc:	4d05      	ldr	r5, [pc, #20]	@ (8022914 <_read_r+0x24>)
 80228fe:	602b      	str	r3, [r5, #0]
 8022900:	f7ed f9a1 	bl	800fc46 <_read>
 8022904:	1c43      	adds	r3, r0, #1
 8022906:	d103      	bne.n	8022910 <_read_r+0x20>
 8022908:	682b      	ldr	r3, [r5, #0]
 802290a:	2b00      	cmp	r3, #0
 802290c:	d000      	beq.n	8022910 <_read_r+0x20>
 802290e:	6023      	str	r3, [r4, #0]
 8022910:	bd70      	pop	{r4, r5, r6, pc}
 8022912:	46c0      	nop			@ (mov r8, r8)
 8022914:	20003570 	.word	0x20003570

08022918 <_write_r>:
 8022918:	b570      	push	{r4, r5, r6, lr}
 802291a:	0004      	movs	r4, r0
 802291c:	0008      	movs	r0, r1
 802291e:	0011      	movs	r1, r2
 8022920:	001a      	movs	r2, r3
 8022922:	2300      	movs	r3, #0
 8022924:	4d05      	ldr	r5, [pc, #20]	@ (802293c <_write_r+0x24>)
 8022926:	602b      	str	r3, [r5, #0]
 8022928:	f7ed fe5e 	bl	80105e8 <_write>
 802292c:	1c43      	adds	r3, r0, #1
 802292e:	d103      	bne.n	8022938 <_write_r+0x20>
 8022930:	682b      	ldr	r3, [r5, #0]
 8022932:	2b00      	cmp	r3, #0
 8022934:	d000      	beq.n	8022938 <_write_r+0x20>
 8022936:	6023      	str	r3, [r4, #0]
 8022938:	bd70      	pop	{r4, r5, r6, pc}
 802293a:	46c0      	nop			@ (mov r8, r8)
 802293c:	20003570 	.word	0x20003570

08022940 <__errno>:
 8022940:	4b01      	ldr	r3, [pc, #4]	@ (8022948 <__errno+0x8>)
 8022942:	6818      	ldr	r0, [r3, #0]
 8022944:	4770      	bx	lr
 8022946:	46c0      	nop			@ (mov r8, r8)
 8022948:	200003dc 	.word	0x200003dc

0802294c <__libc_init_array>:
 802294c:	b570      	push	{r4, r5, r6, lr}
 802294e:	2600      	movs	r6, #0
 8022950:	4c0c      	ldr	r4, [pc, #48]	@ (8022984 <__libc_init_array+0x38>)
 8022952:	4d0d      	ldr	r5, [pc, #52]	@ (8022988 <__libc_init_array+0x3c>)
 8022954:	1b64      	subs	r4, r4, r5
 8022956:	10a4      	asrs	r4, r4, #2
 8022958:	42a6      	cmp	r6, r4
 802295a:	d109      	bne.n	8022970 <__libc_init_array+0x24>
 802295c:	2600      	movs	r6, #0
 802295e:	f002 fee9 	bl	8025734 <_init>
 8022962:	4c0a      	ldr	r4, [pc, #40]	@ (802298c <__libc_init_array+0x40>)
 8022964:	4d0a      	ldr	r5, [pc, #40]	@ (8022990 <__libc_init_array+0x44>)
 8022966:	1b64      	subs	r4, r4, r5
 8022968:	10a4      	asrs	r4, r4, #2
 802296a:	42a6      	cmp	r6, r4
 802296c:	d105      	bne.n	802297a <__libc_init_array+0x2e>
 802296e:	bd70      	pop	{r4, r5, r6, pc}
 8022970:	00b3      	lsls	r3, r6, #2
 8022972:	58eb      	ldr	r3, [r5, r3]
 8022974:	4798      	blx	r3
 8022976:	3601      	adds	r6, #1
 8022978:	e7ee      	b.n	8022958 <__libc_init_array+0xc>
 802297a:	00b3      	lsls	r3, r6, #2
 802297c:	58eb      	ldr	r3, [r5, r3]
 802297e:	4798      	blx	r3
 8022980:	3601      	adds	r6, #1
 8022982:	e7f2      	b.n	802296a <__libc_init_array+0x1e>
 8022984:	08029468 	.word	0x08029468
 8022988:	08029468 	.word	0x08029468
 802298c:	0802946c 	.word	0x0802946c
 8022990:	08029468 	.word	0x08029468

08022994 <__retarget_lock_init_recursive>:
 8022994:	4770      	bx	lr

08022996 <__retarget_lock_acquire_recursive>:
 8022996:	4770      	bx	lr

08022998 <__retarget_lock_release_recursive>:
 8022998:	4770      	bx	lr

0802299a <memchr>:
 802299a:	b2c9      	uxtb	r1, r1
 802299c:	1882      	adds	r2, r0, r2
 802299e:	4290      	cmp	r0, r2
 80229a0:	d101      	bne.n	80229a6 <memchr+0xc>
 80229a2:	2000      	movs	r0, #0
 80229a4:	4770      	bx	lr
 80229a6:	7803      	ldrb	r3, [r0, #0]
 80229a8:	428b      	cmp	r3, r1
 80229aa:	d0fb      	beq.n	80229a4 <memchr+0xa>
 80229ac:	3001      	adds	r0, #1
 80229ae:	e7f6      	b.n	802299e <memchr+0x4>

080229b0 <memcpy>:
 80229b0:	2300      	movs	r3, #0
 80229b2:	b510      	push	{r4, lr}
 80229b4:	429a      	cmp	r2, r3
 80229b6:	d100      	bne.n	80229ba <memcpy+0xa>
 80229b8:	bd10      	pop	{r4, pc}
 80229ba:	5ccc      	ldrb	r4, [r1, r3]
 80229bc:	54c4      	strb	r4, [r0, r3]
 80229be:	3301      	adds	r3, #1
 80229c0:	e7f8      	b.n	80229b4 <memcpy+0x4>
	...

080229c4 <nan>:
 80229c4:	2000      	movs	r0, #0
 80229c6:	4901      	ldr	r1, [pc, #4]	@ (80229cc <nan+0x8>)
 80229c8:	4770      	bx	lr
 80229ca:	46c0      	nop			@ (mov r8, r8)
 80229cc:	7ff80000 	.word	0x7ff80000

080229d0 <quorem>:
 80229d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80229d2:	6902      	ldr	r2, [r0, #16]
 80229d4:	690f      	ldr	r7, [r1, #16]
 80229d6:	b087      	sub	sp, #28
 80229d8:	0006      	movs	r6, r0
 80229da:	000b      	movs	r3, r1
 80229dc:	2000      	movs	r0, #0
 80229de:	9102      	str	r1, [sp, #8]
 80229e0:	42ba      	cmp	r2, r7
 80229e2:	db6d      	blt.n	8022ac0 <quorem+0xf0>
 80229e4:	3f01      	subs	r7, #1
 80229e6:	00bc      	lsls	r4, r7, #2
 80229e8:	3314      	adds	r3, #20
 80229ea:	9305      	str	r3, [sp, #20]
 80229ec:	191b      	adds	r3, r3, r4
 80229ee:	9303      	str	r3, [sp, #12]
 80229f0:	0033      	movs	r3, r6
 80229f2:	3314      	adds	r3, #20
 80229f4:	191c      	adds	r4, r3, r4
 80229f6:	9301      	str	r3, [sp, #4]
 80229f8:	6823      	ldr	r3, [r4, #0]
 80229fa:	9304      	str	r3, [sp, #16]
 80229fc:	9b03      	ldr	r3, [sp, #12]
 80229fe:	9804      	ldr	r0, [sp, #16]
 8022a00:	681d      	ldr	r5, [r3, #0]
 8022a02:	3501      	adds	r5, #1
 8022a04:	0029      	movs	r1, r5
 8022a06:	f7dd fbcd 	bl	80001a4 <__udivsi3>
 8022a0a:	9b04      	ldr	r3, [sp, #16]
 8022a0c:	9000      	str	r0, [sp, #0]
 8022a0e:	42ab      	cmp	r3, r5
 8022a10:	d32b      	bcc.n	8022a6a <quorem+0x9a>
 8022a12:	9b05      	ldr	r3, [sp, #20]
 8022a14:	9d01      	ldr	r5, [sp, #4]
 8022a16:	469c      	mov	ip, r3
 8022a18:	2300      	movs	r3, #0
 8022a1a:	9305      	str	r3, [sp, #20]
 8022a1c:	9304      	str	r3, [sp, #16]
 8022a1e:	4662      	mov	r2, ip
 8022a20:	ca08      	ldmia	r2!, {r3}
 8022a22:	6828      	ldr	r0, [r5, #0]
 8022a24:	4694      	mov	ip, r2
 8022a26:	9a00      	ldr	r2, [sp, #0]
 8022a28:	b299      	uxth	r1, r3
 8022a2a:	4351      	muls	r1, r2
 8022a2c:	9a05      	ldr	r2, [sp, #20]
 8022a2e:	0c1b      	lsrs	r3, r3, #16
 8022a30:	1889      	adds	r1, r1, r2
 8022a32:	9a00      	ldr	r2, [sp, #0]
 8022a34:	4353      	muls	r3, r2
 8022a36:	0c0a      	lsrs	r2, r1, #16
 8022a38:	189b      	adds	r3, r3, r2
 8022a3a:	0c1a      	lsrs	r2, r3, #16
 8022a3c:	b289      	uxth	r1, r1
 8022a3e:	9205      	str	r2, [sp, #20]
 8022a40:	b282      	uxth	r2, r0
 8022a42:	1a52      	subs	r2, r2, r1
 8022a44:	9904      	ldr	r1, [sp, #16]
 8022a46:	0c00      	lsrs	r0, r0, #16
 8022a48:	1852      	adds	r2, r2, r1
 8022a4a:	b29b      	uxth	r3, r3
 8022a4c:	1411      	asrs	r1, r2, #16
 8022a4e:	1ac3      	subs	r3, r0, r3
 8022a50:	185b      	adds	r3, r3, r1
 8022a52:	1419      	asrs	r1, r3, #16
 8022a54:	b292      	uxth	r2, r2
 8022a56:	041b      	lsls	r3, r3, #16
 8022a58:	431a      	orrs	r2, r3
 8022a5a:	9b03      	ldr	r3, [sp, #12]
 8022a5c:	9104      	str	r1, [sp, #16]
 8022a5e:	c504      	stmia	r5!, {r2}
 8022a60:	4563      	cmp	r3, ip
 8022a62:	d2dc      	bcs.n	8022a1e <quorem+0x4e>
 8022a64:	6823      	ldr	r3, [r4, #0]
 8022a66:	2b00      	cmp	r3, #0
 8022a68:	d030      	beq.n	8022acc <quorem+0xfc>
 8022a6a:	0030      	movs	r0, r6
 8022a6c:	9902      	ldr	r1, [sp, #8]
 8022a6e:	f001 fd7d 	bl	802456c <__mcmp>
 8022a72:	2800      	cmp	r0, #0
 8022a74:	db23      	blt.n	8022abe <quorem+0xee>
 8022a76:	0034      	movs	r4, r6
 8022a78:	2500      	movs	r5, #0
 8022a7a:	9902      	ldr	r1, [sp, #8]
 8022a7c:	3414      	adds	r4, #20
 8022a7e:	3114      	adds	r1, #20
 8022a80:	6823      	ldr	r3, [r4, #0]
 8022a82:	c901      	ldmia	r1!, {r0}
 8022a84:	9302      	str	r3, [sp, #8]
 8022a86:	466b      	mov	r3, sp
 8022a88:	891b      	ldrh	r3, [r3, #8]
 8022a8a:	b282      	uxth	r2, r0
 8022a8c:	1a9a      	subs	r2, r3, r2
 8022a8e:	9b02      	ldr	r3, [sp, #8]
 8022a90:	1952      	adds	r2, r2, r5
 8022a92:	0c00      	lsrs	r0, r0, #16
 8022a94:	0c1b      	lsrs	r3, r3, #16
 8022a96:	1a1b      	subs	r3, r3, r0
 8022a98:	1410      	asrs	r0, r2, #16
 8022a9a:	181b      	adds	r3, r3, r0
 8022a9c:	141d      	asrs	r5, r3, #16
 8022a9e:	b292      	uxth	r2, r2
 8022aa0:	041b      	lsls	r3, r3, #16
 8022aa2:	431a      	orrs	r2, r3
 8022aa4:	9b03      	ldr	r3, [sp, #12]
 8022aa6:	c404      	stmia	r4!, {r2}
 8022aa8:	428b      	cmp	r3, r1
 8022aaa:	d2e9      	bcs.n	8022a80 <quorem+0xb0>
 8022aac:	9a01      	ldr	r2, [sp, #4]
 8022aae:	00bb      	lsls	r3, r7, #2
 8022ab0:	18d3      	adds	r3, r2, r3
 8022ab2:	681a      	ldr	r2, [r3, #0]
 8022ab4:	2a00      	cmp	r2, #0
 8022ab6:	d013      	beq.n	8022ae0 <quorem+0x110>
 8022ab8:	9b00      	ldr	r3, [sp, #0]
 8022aba:	3301      	adds	r3, #1
 8022abc:	9300      	str	r3, [sp, #0]
 8022abe:	9800      	ldr	r0, [sp, #0]
 8022ac0:	b007      	add	sp, #28
 8022ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022ac4:	6823      	ldr	r3, [r4, #0]
 8022ac6:	2b00      	cmp	r3, #0
 8022ac8:	d104      	bne.n	8022ad4 <quorem+0x104>
 8022aca:	3f01      	subs	r7, #1
 8022acc:	9b01      	ldr	r3, [sp, #4]
 8022ace:	3c04      	subs	r4, #4
 8022ad0:	42a3      	cmp	r3, r4
 8022ad2:	d3f7      	bcc.n	8022ac4 <quorem+0xf4>
 8022ad4:	6137      	str	r7, [r6, #16]
 8022ad6:	e7c8      	b.n	8022a6a <quorem+0x9a>
 8022ad8:	681a      	ldr	r2, [r3, #0]
 8022ada:	2a00      	cmp	r2, #0
 8022adc:	d104      	bne.n	8022ae8 <quorem+0x118>
 8022ade:	3f01      	subs	r7, #1
 8022ae0:	9a01      	ldr	r2, [sp, #4]
 8022ae2:	3b04      	subs	r3, #4
 8022ae4:	429a      	cmp	r2, r3
 8022ae6:	d3f7      	bcc.n	8022ad8 <quorem+0x108>
 8022ae8:	6137      	str	r7, [r6, #16]
 8022aea:	e7e5      	b.n	8022ab8 <quorem+0xe8>

08022aec <_dtoa_r>:
 8022aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022aee:	0014      	movs	r4, r2
 8022af0:	001d      	movs	r5, r3
 8022af2:	69c6      	ldr	r6, [r0, #28]
 8022af4:	b09d      	sub	sp, #116	@ 0x74
 8022af6:	940a      	str	r4, [sp, #40]	@ 0x28
 8022af8:	950b      	str	r5, [sp, #44]	@ 0x2c
 8022afa:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8022afc:	9003      	str	r0, [sp, #12]
 8022afe:	2e00      	cmp	r6, #0
 8022b00:	d10f      	bne.n	8022b22 <_dtoa_r+0x36>
 8022b02:	2010      	movs	r0, #16
 8022b04:	f001 f98a 	bl	8023e1c <malloc>
 8022b08:	9b03      	ldr	r3, [sp, #12]
 8022b0a:	1e02      	subs	r2, r0, #0
 8022b0c:	61d8      	str	r0, [r3, #28]
 8022b0e:	d104      	bne.n	8022b1a <_dtoa_r+0x2e>
 8022b10:	21ef      	movs	r1, #239	@ 0xef
 8022b12:	4bc7      	ldr	r3, [pc, #796]	@ (8022e30 <_dtoa_r+0x344>)
 8022b14:	48c7      	ldr	r0, [pc, #796]	@ (8022e34 <_dtoa_r+0x348>)
 8022b16:	f002 fb2f 	bl	8025178 <__assert_func>
 8022b1a:	6046      	str	r6, [r0, #4]
 8022b1c:	6086      	str	r6, [r0, #8]
 8022b1e:	6006      	str	r6, [r0, #0]
 8022b20:	60c6      	str	r6, [r0, #12]
 8022b22:	9b03      	ldr	r3, [sp, #12]
 8022b24:	69db      	ldr	r3, [r3, #28]
 8022b26:	6819      	ldr	r1, [r3, #0]
 8022b28:	2900      	cmp	r1, #0
 8022b2a:	d00b      	beq.n	8022b44 <_dtoa_r+0x58>
 8022b2c:	685a      	ldr	r2, [r3, #4]
 8022b2e:	2301      	movs	r3, #1
 8022b30:	4093      	lsls	r3, r2
 8022b32:	604a      	str	r2, [r1, #4]
 8022b34:	608b      	str	r3, [r1, #8]
 8022b36:	9803      	ldr	r0, [sp, #12]
 8022b38:	f001 fa82 	bl	8024040 <_Bfree>
 8022b3c:	2200      	movs	r2, #0
 8022b3e:	9b03      	ldr	r3, [sp, #12]
 8022b40:	69db      	ldr	r3, [r3, #28]
 8022b42:	601a      	str	r2, [r3, #0]
 8022b44:	2d00      	cmp	r5, #0
 8022b46:	da1e      	bge.n	8022b86 <_dtoa_r+0x9a>
 8022b48:	2301      	movs	r3, #1
 8022b4a:	603b      	str	r3, [r7, #0]
 8022b4c:	006b      	lsls	r3, r5, #1
 8022b4e:	085b      	lsrs	r3, r3, #1
 8022b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022b52:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022b54:	4bb8      	ldr	r3, [pc, #736]	@ (8022e38 <_dtoa_r+0x34c>)
 8022b56:	4ab8      	ldr	r2, [pc, #736]	@ (8022e38 <_dtoa_r+0x34c>)
 8022b58:	403b      	ands	r3, r7
 8022b5a:	4293      	cmp	r3, r2
 8022b5c:	d116      	bne.n	8022b8c <_dtoa_r+0xa0>
 8022b5e:	4bb7      	ldr	r3, [pc, #732]	@ (8022e3c <_dtoa_r+0x350>)
 8022b60:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022b62:	6013      	str	r3, [r2, #0]
 8022b64:	033b      	lsls	r3, r7, #12
 8022b66:	0b1b      	lsrs	r3, r3, #12
 8022b68:	4323      	orrs	r3, r4
 8022b6a:	d101      	bne.n	8022b70 <_dtoa_r+0x84>
 8022b6c:	f000 fd83 	bl	8023676 <_dtoa_r+0xb8a>
 8022b70:	4bb3      	ldr	r3, [pc, #716]	@ (8022e40 <_dtoa_r+0x354>)
 8022b72:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022b74:	9308      	str	r3, [sp, #32]
 8022b76:	2a00      	cmp	r2, #0
 8022b78:	d002      	beq.n	8022b80 <_dtoa_r+0x94>
 8022b7a:	4bb2      	ldr	r3, [pc, #712]	@ (8022e44 <_dtoa_r+0x358>)
 8022b7c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022b7e:	6013      	str	r3, [r2, #0]
 8022b80:	9808      	ldr	r0, [sp, #32]
 8022b82:	b01d      	add	sp, #116	@ 0x74
 8022b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022b86:	2300      	movs	r3, #0
 8022b88:	603b      	str	r3, [r7, #0]
 8022b8a:	e7e2      	b.n	8022b52 <_dtoa_r+0x66>
 8022b8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022b8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022b90:	9212      	str	r2, [sp, #72]	@ 0x48
 8022b92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022b94:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022b96:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022b98:	2200      	movs	r2, #0
 8022b9a:	2300      	movs	r3, #0
 8022b9c:	f7dd fc88 	bl	80004b0 <__aeabi_dcmpeq>
 8022ba0:	1e06      	subs	r6, r0, #0
 8022ba2:	d00b      	beq.n	8022bbc <_dtoa_r+0xd0>
 8022ba4:	2301      	movs	r3, #1
 8022ba6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022ba8:	6013      	str	r3, [r2, #0]
 8022baa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022bac:	2b00      	cmp	r3, #0
 8022bae:	d002      	beq.n	8022bb6 <_dtoa_r+0xca>
 8022bb0:	4ba5      	ldr	r3, [pc, #660]	@ (8022e48 <_dtoa_r+0x35c>)
 8022bb2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022bb4:	6013      	str	r3, [r2, #0]
 8022bb6:	4ba5      	ldr	r3, [pc, #660]	@ (8022e4c <_dtoa_r+0x360>)
 8022bb8:	9308      	str	r3, [sp, #32]
 8022bba:	e7e1      	b.n	8022b80 <_dtoa_r+0x94>
 8022bbc:	ab1a      	add	r3, sp, #104	@ 0x68
 8022bbe:	9301      	str	r3, [sp, #4]
 8022bc0:	ab1b      	add	r3, sp, #108	@ 0x6c
 8022bc2:	9300      	str	r3, [sp, #0]
 8022bc4:	9803      	ldr	r0, [sp, #12]
 8022bc6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022bc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022bca:	f001 fdf1 	bl	80247b0 <__d2b>
 8022bce:	007a      	lsls	r2, r7, #1
 8022bd0:	9005      	str	r0, [sp, #20]
 8022bd2:	0d52      	lsrs	r2, r2, #21
 8022bd4:	d100      	bne.n	8022bd8 <_dtoa_r+0xec>
 8022bd6:	e07b      	b.n	8022cd0 <_dtoa_r+0x1e4>
 8022bd8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022bda:	9618      	str	r6, [sp, #96]	@ 0x60
 8022bdc:	0319      	lsls	r1, r3, #12
 8022bde:	4b9c      	ldr	r3, [pc, #624]	@ (8022e50 <_dtoa_r+0x364>)
 8022be0:	0b09      	lsrs	r1, r1, #12
 8022be2:	430b      	orrs	r3, r1
 8022be4:	499b      	ldr	r1, [pc, #620]	@ (8022e54 <_dtoa_r+0x368>)
 8022be6:	1857      	adds	r7, r2, r1
 8022be8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022bea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022bec:	0019      	movs	r1, r3
 8022bee:	2200      	movs	r2, #0
 8022bf0:	4b99      	ldr	r3, [pc, #612]	@ (8022e58 <_dtoa_r+0x36c>)
 8022bf2:	f7df ffeb 	bl	8002bcc <__aeabi_dsub>
 8022bf6:	4a99      	ldr	r2, [pc, #612]	@ (8022e5c <_dtoa_r+0x370>)
 8022bf8:	4b99      	ldr	r3, [pc, #612]	@ (8022e60 <_dtoa_r+0x374>)
 8022bfa:	f7df fd1f 	bl	800263c <__aeabi_dmul>
 8022bfe:	4a99      	ldr	r2, [pc, #612]	@ (8022e64 <_dtoa_r+0x378>)
 8022c00:	4b99      	ldr	r3, [pc, #612]	@ (8022e68 <_dtoa_r+0x37c>)
 8022c02:	f7de fd73 	bl	80016ec <__aeabi_dadd>
 8022c06:	0004      	movs	r4, r0
 8022c08:	0038      	movs	r0, r7
 8022c0a:	000d      	movs	r5, r1
 8022c0c:	f7e0 fbd8 	bl	80033c0 <__aeabi_i2d>
 8022c10:	4a96      	ldr	r2, [pc, #600]	@ (8022e6c <_dtoa_r+0x380>)
 8022c12:	4b97      	ldr	r3, [pc, #604]	@ (8022e70 <_dtoa_r+0x384>)
 8022c14:	f7df fd12 	bl	800263c <__aeabi_dmul>
 8022c18:	0002      	movs	r2, r0
 8022c1a:	000b      	movs	r3, r1
 8022c1c:	0020      	movs	r0, r4
 8022c1e:	0029      	movs	r1, r5
 8022c20:	f7de fd64 	bl	80016ec <__aeabi_dadd>
 8022c24:	0004      	movs	r4, r0
 8022c26:	000d      	movs	r5, r1
 8022c28:	f7e0 fb8e 	bl	8003348 <__aeabi_d2iz>
 8022c2c:	2200      	movs	r2, #0
 8022c2e:	9004      	str	r0, [sp, #16]
 8022c30:	2300      	movs	r3, #0
 8022c32:	0020      	movs	r0, r4
 8022c34:	0029      	movs	r1, r5
 8022c36:	f7dd fc41 	bl	80004bc <__aeabi_dcmplt>
 8022c3a:	2800      	cmp	r0, #0
 8022c3c:	d00b      	beq.n	8022c56 <_dtoa_r+0x16a>
 8022c3e:	9804      	ldr	r0, [sp, #16]
 8022c40:	f7e0 fbbe 	bl	80033c0 <__aeabi_i2d>
 8022c44:	002b      	movs	r3, r5
 8022c46:	0022      	movs	r2, r4
 8022c48:	f7dd fc32 	bl	80004b0 <__aeabi_dcmpeq>
 8022c4c:	4243      	negs	r3, r0
 8022c4e:	4158      	adcs	r0, r3
 8022c50:	9b04      	ldr	r3, [sp, #16]
 8022c52:	1a1b      	subs	r3, r3, r0
 8022c54:	9304      	str	r3, [sp, #16]
 8022c56:	2301      	movs	r3, #1
 8022c58:	9315      	str	r3, [sp, #84]	@ 0x54
 8022c5a:	9b04      	ldr	r3, [sp, #16]
 8022c5c:	2b16      	cmp	r3, #22
 8022c5e:	d810      	bhi.n	8022c82 <_dtoa_r+0x196>
 8022c60:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022c62:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022c64:	9a04      	ldr	r2, [sp, #16]
 8022c66:	4b83      	ldr	r3, [pc, #524]	@ (8022e74 <_dtoa_r+0x388>)
 8022c68:	00d2      	lsls	r2, r2, #3
 8022c6a:	189b      	adds	r3, r3, r2
 8022c6c:	681a      	ldr	r2, [r3, #0]
 8022c6e:	685b      	ldr	r3, [r3, #4]
 8022c70:	f7dd fc24 	bl	80004bc <__aeabi_dcmplt>
 8022c74:	2800      	cmp	r0, #0
 8022c76:	d047      	beq.n	8022d08 <_dtoa_r+0x21c>
 8022c78:	9b04      	ldr	r3, [sp, #16]
 8022c7a:	3b01      	subs	r3, #1
 8022c7c:	9304      	str	r3, [sp, #16]
 8022c7e:	2300      	movs	r3, #0
 8022c80:	9315      	str	r3, [sp, #84]	@ 0x54
 8022c82:	2200      	movs	r2, #0
 8022c84:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8022c86:	9206      	str	r2, [sp, #24]
 8022c88:	1bdb      	subs	r3, r3, r7
 8022c8a:	1e5a      	subs	r2, r3, #1
 8022c8c:	d53e      	bpl.n	8022d0c <_dtoa_r+0x220>
 8022c8e:	2201      	movs	r2, #1
 8022c90:	1ad3      	subs	r3, r2, r3
 8022c92:	9306      	str	r3, [sp, #24]
 8022c94:	2300      	movs	r3, #0
 8022c96:	930d      	str	r3, [sp, #52]	@ 0x34
 8022c98:	9b04      	ldr	r3, [sp, #16]
 8022c9a:	2b00      	cmp	r3, #0
 8022c9c:	db38      	blt.n	8022d10 <_dtoa_r+0x224>
 8022c9e:	9a04      	ldr	r2, [sp, #16]
 8022ca0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022ca2:	4694      	mov	ip, r2
 8022ca4:	4463      	add	r3, ip
 8022ca6:	930d      	str	r3, [sp, #52]	@ 0x34
 8022ca8:	2300      	movs	r3, #0
 8022caa:	9214      	str	r2, [sp, #80]	@ 0x50
 8022cac:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022cae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022cb0:	2401      	movs	r4, #1
 8022cb2:	2b09      	cmp	r3, #9
 8022cb4:	d867      	bhi.n	8022d86 <_dtoa_r+0x29a>
 8022cb6:	2b05      	cmp	r3, #5
 8022cb8:	dd02      	ble.n	8022cc0 <_dtoa_r+0x1d4>
 8022cba:	2400      	movs	r4, #0
 8022cbc:	3b04      	subs	r3, #4
 8022cbe:	9322      	str	r3, [sp, #136]	@ 0x88
 8022cc0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022cc2:	1e98      	subs	r0, r3, #2
 8022cc4:	2803      	cmp	r0, #3
 8022cc6:	d867      	bhi.n	8022d98 <_dtoa_r+0x2ac>
 8022cc8:	f7dd fa58 	bl	800017c <__gnu_thumb1_case_uqi>
 8022ccc:	5b383a2b 	.word	0x5b383a2b
 8022cd0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022cd2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8022cd4:	18f6      	adds	r6, r6, r3
 8022cd6:	4b68      	ldr	r3, [pc, #416]	@ (8022e78 <_dtoa_r+0x38c>)
 8022cd8:	18f2      	adds	r2, r6, r3
 8022cda:	2a20      	cmp	r2, #32
 8022cdc:	dd0f      	ble.n	8022cfe <_dtoa_r+0x212>
 8022cde:	2340      	movs	r3, #64	@ 0x40
 8022ce0:	1a9b      	subs	r3, r3, r2
 8022ce2:	409f      	lsls	r7, r3
 8022ce4:	4b65      	ldr	r3, [pc, #404]	@ (8022e7c <_dtoa_r+0x390>)
 8022ce6:	0038      	movs	r0, r7
 8022ce8:	18f3      	adds	r3, r6, r3
 8022cea:	40dc      	lsrs	r4, r3
 8022cec:	4320      	orrs	r0, r4
 8022cee:	f7e0 fb95 	bl	800341c <__aeabi_ui2d>
 8022cf2:	2201      	movs	r2, #1
 8022cf4:	4b62      	ldr	r3, [pc, #392]	@ (8022e80 <_dtoa_r+0x394>)
 8022cf6:	1e77      	subs	r7, r6, #1
 8022cf8:	18cb      	adds	r3, r1, r3
 8022cfa:	9218      	str	r2, [sp, #96]	@ 0x60
 8022cfc:	e776      	b.n	8022bec <_dtoa_r+0x100>
 8022cfe:	2320      	movs	r3, #32
 8022d00:	0020      	movs	r0, r4
 8022d02:	1a9b      	subs	r3, r3, r2
 8022d04:	4098      	lsls	r0, r3
 8022d06:	e7f2      	b.n	8022cee <_dtoa_r+0x202>
 8022d08:	9015      	str	r0, [sp, #84]	@ 0x54
 8022d0a:	e7ba      	b.n	8022c82 <_dtoa_r+0x196>
 8022d0c:	920d      	str	r2, [sp, #52]	@ 0x34
 8022d0e:	e7c3      	b.n	8022c98 <_dtoa_r+0x1ac>
 8022d10:	9b06      	ldr	r3, [sp, #24]
 8022d12:	9a04      	ldr	r2, [sp, #16]
 8022d14:	1a9b      	subs	r3, r3, r2
 8022d16:	9306      	str	r3, [sp, #24]
 8022d18:	4253      	negs	r3, r2
 8022d1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022d1c:	2300      	movs	r3, #0
 8022d1e:	9314      	str	r3, [sp, #80]	@ 0x50
 8022d20:	e7c5      	b.n	8022cae <_dtoa_r+0x1c2>
 8022d22:	2300      	movs	r3, #0
 8022d24:	9310      	str	r3, [sp, #64]	@ 0x40
 8022d26:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022d28:	930e      	str	r3, [sp, #56]	@ 0x38
 8022d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d2c:	2b00      	cmp	r3, #0
 8022d2e:	dc13      	bgt.n	8022d58 <_dtoa_r+0x26c>
 8022d30:	2301      	movs	r3, #1
 8022d32:	001a      	movs	r2, r3
 8022d34:	930e      	str	r3, [sp, #56]	@ 0x38
 8022d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d38:	9223      	str	r2, [sp, #140]	@ 0x8c
 8022d3a:	e00d      	b.n	8022d58 <_dtoa_r+0x26c>
 8022d3c:	2301      	movs	r3, #1
 8022d3e:	e7f1      	b.n	8022d24 <_dtoa_r+0x238>
 8022d40:	2300      	movs	r3, #0
 8022d42:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8022d44:	9310      	str	r3, [sp, #64]	@ 0x40
 8022d46:	4694      	mov	ip, r2
 8022d48:	9b04      	ldr	r3, [sp, #16]
 8022d4a:	4463      	add	r3, ip
 8022d4c:	930e      	str	r3, [sp, #56]	@ 0x38
 8022d4e:	3301      	adds	r3, #1
 8022d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d52:	2b00      	cmp	r3, #0
 8022d54:	dc00      	bgt.n	8022d58 <_dtoa_r+0x26c>
 8022d56:	2301      	movs	r3, #1
 8022d58:	9a03      	ldr	r2, [sp, #12]
 8022d5a:	2100      	movs	r1, #0
 8022d5c:	69d0      	ldr	r0, [r2, #28]
 8022d5e:	2204      	movs	r2, #4
 8022d60:	0015      	movs	r5, r2
 8022d62:	3514      	adds	r5, #20
 8022d64:	429d      	cmp	r5, r3
 8022d66:	d91b      	bls.n	8022da0 <_dtoa_r+0x2b4>
 8022d68:	6041      	str	r1, [r0, #4]
 8022d6a:	9803      	ldr	r0, [sp, #12]
 8022d6c:	f001 f924 	bl	8023fb8 <_Balloc>
 8022d70:	9008      	str	r0, [sp, #32]
 8022d72:	2800      	cmp	r0, #0
 8022d74:	d117      	bne.n	8022da6 <_dtoa_r+0x2ba>
 8022d76:	21b0      	movs	r1, #176	@ 0xb0
 8022d78:	4b42      	ldr	r3, [pc, #264]	@ (8022e84 <_dtoa_r+0x398>)
 8022d7a:	482e      	ldr	r0, [pc, #184]	@ (8022e34 <_dtoa_r+0x348>)
 8022d7c:	9a08      	ldr	r2, [sp, #32]
 8022d7e:	31ff      	adds	r1, #255	@ 0xff
 8022d80:	e6c9      	b.n	8022b16 <_dtoa_r+0x2a>
 8022d82:	2301      	movs	r3, #1
 8022d84:	e7dd      	b.n	8022d42 <_dtoa_r+0x256>
 8022d86:	2300      	movs	r3, #0
 8022d88:	9410      	str	r4, [sp, #64]	@ 0x40
 8022d8a:	9322      	str	r3, [sp, #136]	@ 0x88
 8022d8c:	3b01      	subs	r3, #1
 8022d8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8022d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d92:	2200      	movs	r2, #0
 8022d94:	3313      	adds	r3, #19
 8022d96:	e7cf      	b.n	8022d38 <_dtoa_r+0x24c>
 8022d98:	2301      	movs	r3, #1
 8022d9a:	9310      	str	r3, [sp, #64]	@ 0x40
 8022d9c:	3b02      	subs	r3, #2
 8022d9e:	e7f6      	b.n	8022d8e <_dtoa_r+0x2a2>
 8022da0:	3101      	adds	r1, #1
 8022da2:	0052      	lsls	r2, r2, #1
 8022da4:	e7dc      	b.n	8022d60 <_dtoa_r+0x274>
 8022da6:	9b03      	ldr	r3, [sp, #12]
 8022da8:	9a08      	ldr	r2, [sp, #32]
 8022daa:	69db      	ldr	r3, [r3, #28]
 8022dac:	601a      	str	r2, [r3, #0]
 8022dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022db0:	2b0e      	cmp	r3, #14
 8022db2:	d900      	bls.n	8022db6 <_dtoa_r+0x2ca>
 8022db4:	e0d9      	b.n	8022f6a <_dtoa_r+0x47e>
 8022db6:	2c00      	cmp	r4, #0
 8022db8:	d100      	bne.n	8022dbc <_dtoa_r+0x2d0>
 8022dba:	e0d6      	b.n	8022f6a <_dtoa_r+0x47e>
 8022dbc:	9b04      	ldr	r3, [sp, #16]
 8022dbe:	2b00      	cmp	r3, #0
 8022dc0:	dd64      	ble.n	8022e8c <_dtoa_r+0x3a0>
 8022dc2:	210f      	movs	r1, #15
 8022dc4:	9a04      	ldr	r2, [sp, #16]
 8022dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8022e74 <_dtoa_r+0x388>)
 8022dc8:	400a      	ands	r2, r1
 8022dca:	00d2      	lsls	r2, r2, #3
 8022dcc:	189b      	adds	r3, r3, r2
 8022dce:	681e      	ldr	r6, [r3, #0]
 8022dd0:	685f      	ldr	r7, [r3, #4]
 8022dd2:	9b04      	ldr	r3, [sp, #16]
 8022dd4:	2402      	movs	r4, #2
 8022dd6:	111d      	asrs	r5, r3, #4
 8022dd8:	05db      	lsls	r3, r3, #23
 8022dda:	d50a      	bpl.n	8022df2 <_dtoa_r+0x306>
 8022ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8022e88 <_dtoa_r+0x39c>)
 8022dde:	400d      	ands	r5, r1
 8022de0:	6a1a      	ldr	r2, [r3, #32]
 8022de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022de4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022de6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022de8:	f7de ffe4 	bl	8001db4 <__aeabi_ddiv>
 8022dec:	900a      	str	r0, [sp, #40]	@ 0x28
 8022dee:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022df0:	3401      	adds	r4, #1
 8022df2:	4b25      	ldr	r3, [pc, #148]	@ (8022e88 <_dtoa_r+0x39c>)
 8022df4:	930c      	str	r3, [sp, #48]	@ 0x30
 8022df6:	2d00      	cmp	r5, #0
 8022df8:	d108      	bne.n	8022e0c <_dtoa_r+0x320>
 8022dfa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8022dfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022dfe:	0032      	movs	r2, r6
 8022e00:	003b      	movs	r3, r7
 8022e02:	f7de ffd7 	bl	8001db4 <__aeabi_ddiv>
 8022e06:	900a      	str	r0, [sp, #40]	@ 0x28
 8022e08:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022e0a:	e05a      	b.n	8022ec2 <_dtoa_r+0x3d6>
 8022e0c:	2301      	movs	r3, #1
 8022e0e:	421d      	tst	r5, r3
 8022e10:	d009      	beq.n	8022e26 <_dtoa_r+0x33a>
 8022e12:	18e4      	adds	r4, r4, r3
 8022e14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022e16:	0030      	movs	r0, r6
 8022e18:	681a      	ldr	r2, [r3, #0]
 8022e1a:	685b      	ldr	r3, [r3, #4]
 8022e1c:	0039      	movs	r1, r7
 8022e1e:	f7df fc0d 	bl	800263c <__aeabi_dmul>
 8022e22:	0006      	movs	r6, r0
 8022e24:	000f      	movs	r7, r1
 8022e26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022e28:	106d      	asrs	r5, r5, #1
 8022e2a:	3308      	adds	r3, #8
 8022e2c:	e7e2      	b.n	8022df4 <_dtoa_r+0x308>
 8022e2e:	46c0      	nop			@ (mov r8, r8)
 8022e30:	080291c2 	.word	0x080291c2
 8022e34:	080291d9 	.word	0x080291d9
 8022e38:	7ff00000 	.word	0x7ff00000
 8022e3c:	0000270f 	.word	0x0000270f
 8022e40:	080291be 	.word	0x080291be
 8022e44:	080291c1 	.word	0x080291c1
 8022e48:	0802918a 	.word	0x0802918a
 8022e4c:	08029189 	.word	0x08029189
 8022e50:	3ff00000 	.word	0x3ff00000
 8022e54:	fffffc01 	.word	0xfffffc01
 8022e58:	3ff80000 	.word	0x3ff80000
 8022e5c:	636f4361 	.word	0x636f4361
 8022e60:	3fd287a7 	.word	0x3fd287a7
 8022e64:	8b60c8b3 	.word	0x8b60c8b3
 8022e68:	3fc68a28 	.word	0x3fc68a28
 8022e6c:	509f79fb 	.word	0x509f79fb
 8022e70:	3fd34413 	.word	0x3fd34413
 8022e74:	08029330 	.word	0x08029330
 8022e78:	00000432 	.word	0x00000432
 8022e7c:	00000412 	.word	0x00000412
 8022e80:	fe100000 	.word	0xfe100000
 8022e84:	08029231 	.word	0x08029231
 8022e88:	08029308 	.word	0x08029308
 8022e8c:	9b04      	ldr	r3, [sp, #16]
 8022e8e:	2402      	movs	r4, #2
 8022e90:	2b00      	cmp	r3, #0
 8022e92:	d016      	beq.n	8022ec2 <_dtoa_r+0x3d6>
 8022e94:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022e96:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022e98:	220f      	movs	r2, #15
 8022e9a:	425d      	negs	r5, r3
 8022e9c:	402a      	ands	r2, r5
 8022e9e:	4bd7      	ldr	r3, [pc, #860]	@ (80231fc <_dtoa_r+0x710>)
 8022ea0:	00d2      	lsls	r2, r2, #3
 8022ea2:	189b      	adds	r3, r3, r2
 8022ea4:	681a      	ldr	r2, [r3, #0]
 8022ea6:	685b      	ldr	r3, [r3, #4]
 8022ea8:	f7df fbc8 	bl	800263c <__aeabi_dmul>
 8022eac:	2701      	movs	r7, #1
 8022eae:	2300      	movs	r3, #0
 8022eb0:	900a      	str	r0, [sp, #40]	@ 0x28
 8022eb2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022eb4:	4ed2      	ldr	r6, [pc, #840]	@ (8023200 <_dtoa_r+0x714>)
 8022eb6:	112d      	asrs	r5, r5, #4
 8022eb8:	2d00      	cmp	r5, #0
 8022eba:	d000      	beq.n	8022ebe <_dtoa_r+0x3d2>
 8022ebc:	e0ba      	b.n	8023034 <_dtoa_r+0x548>
 8022ebe:	2b00      	cmp	r3, #0
 8022ec0:	d1a1      	bne.n	8022e06 <_dtoa_r+0x31a>
 8022ec2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8022ec4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022ec6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022ec8:	2b00      	cmp	r3, #0
 8022eca:	d100      	bne.n	8022ece <_dtoa_r+0x3e2>
 8022ecc:	e0bd      	b.n	802304a <_dtoa_r+0x55e>
 8022ece:	2200      	movs	r2, #0
 8022ed0:	0030      	movs	r0, r6
 8022ed2:	0039      	movs	r1, r7
 8022ed4:	4bcb      	ldr	r3, [pc, #812]	@ (8023204 <_dtoa_r+0x718>)
 8022ed6:	f7dd faf1 	bl	80004bc <__aeabi_dcmplt>
 8022eda:	2800      	cmp	r0, #0
 8022edc:	d100      	bne.n	8022ee0 <_dtoa_r+0x3f4>
 8022ede:	e0b4      	b.n	802304a <_dtoa_r+0x55e>
 8022ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022ee2:	2b00      	cmp	r3, #0
 8022ee4:	d100      	bne.n	8022ee8 <_dtoa_r+0x3fc>
 8022ee6:	e0b0      	b.n	802304a <_dtoa_r+0x55e>
 8022ee8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022eea:	2b00      	cmp	r3, #0
 8022eec:	dd39      	ble.n	8022f62 <_dtoa_r+0x476>
 8022eee:	9b04      	ldr	r3, [sp, #16]
 8022ef0:	2200      	movs	r2, #0
 8022ef2:	3b01      	subs	r3, #1
 8022ef4:	930c      	str	r3, [sp, #48]	@ 0x30
 8022ef6:	0030      	movs	r0, r6
 8022ef8:	4bc3      	ldr	r3, [pc, #780]	@ (8023208 <_dtoa_r+0x71c>)
 8022efa:	0039      	movs	r1, r7
 8022efc:	f7df fb9e 	bl	800263c <__aeabi_dmul>
 8022f00:	900a      	str	r0, [sp, #40]	@ 0x28
 8022f02:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022f04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022f06:	3401      	adds	r4, #1
 8022f08:	0020      	movs	r0, r4
 8022f0a:	9311      	str	r3, [sp, #68]	@ 0x44
 8022f0c:	f7e0 fa58 	bl	80033c0 <__aeabi_i2d>
 8022f10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022f12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022f14:	f7df fb92 	bl	800263c <__aeabi_dmul>
 8022f18:	4bbc      	ldr	r3, [pc, #752]	@ (802320c <_dtoa_r+0x720>)
 8022f1a:	2200      	movs	r2, #0
 8022f1c:	f7de fbe6 	bl	80016ec <__aeabi_dadd>
 8022f20:	4bbb      	ldr	r3, [pc, #748]	@ (8023210 <_dtoa_r+0x724>)
 8022f22:	0006      	movs	r6, r0
 8022f24:	18cf      	adds	r7, r1, r3
 8022f26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022f28:	2b00      	cmp	r3, #0
 8022f2a:	d000      	beq.n	8022f2e <_dtoa_r+0x442>
 8022f2c:	e091      	b.n	8023052 <_dtoa_r+0x566>
 8022f2e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8022f30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022f32:	2200      	movs	r2, #0
 8022f34:	4bb7      	ldr	r3, [pc, #732]	@ (8023214 <_dtoa_r+0x728>)
 8022f36:	f7df fe49 	bl	8002bcc <__aeabi_dsub>
 8022f3a:	0032      	movs	r2, r6
 8022f3c:	003b      	movs	r3, r7
 8022f3e:	0004      	movs	r4, r0
 8022f40:	000d      	movs	r5, r1
 8022f42:	f7dd facf 	bl	80004e4 <__aeabi_dcmpgt>
 8022f46:	2800      	cmp	r0, #0
 8022f48:	d000      	beq.n	8022f4c <_dtoa_r+0x460>
 8022f4a:	e29d      	b.n	8023488 <_dtoa_r+0x99c>
 8022f4c:	2180      	movs	r1, #128	@ 0x80
 8022f4e:	0609      	lsls	r1, r1, #24
 8022f50:	187b      	adds	r3, r7, r1
 8022f52:	0032      	movs	r2, r6
 8022f54:	0020      	movs	r0, r4
 8022f56:	0029      	movs	r1, r5
 8022f58:	f7dd fab0 	bl	80004bc <__aeabi_dcmplt>
 8022f5c:	2800      	cmp	r0, #0
 8022f5e:	d000      	beq.n	8022f62 <_dtoa_r+0x476>
 8022f60:	e130      	b.n	80231c4 <_dtoa_r+0x6d8>
 8022f62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022f64:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8022f68:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022f6a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022f6c:	2b00      	cmp	r3, #0
 8022f6e:	da00      	bge.n	8022f72 <_dtoa_r+0x486>
 8022f70:	e177      	b.n	8023262 <_dtoa_r+0x776>
 8022f72:	9a04      	ldr	r2, [sp, #16]
 8022f74:	2a0e      	cmp	r2, #14
 8022f76:	dd00      	ble.n	8022f7a <_dtoa_r+0x48e>
 8022f78:	e173      	b.n	8023262 <_dtoa_r+0x776>
 8022f7a:	4ba0      	ldr	r3, [pc, #640]	@ (80231fc <_dtoa_r+0x710>)
 8022f7c:	00d2      	lsls	r2, r2, #3
 8022f7e:	189b      	adds	r3, r3, r2
 8022f80:	685c      	ldr	r4, [r3, #4]
 8022f82:	681b      	ldr	r3, [r3, #0]
 8022f84:	9306      	str	r3, [sp, #24]
 8022f86:	9407      	str	r4, [sp, #28]
 8022f88:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022f8a:	2b00      	cmp	r3, #0
 8022f8c:	da03      	bge.n	8022f96 <_dtoa_r+0x4aa>
 8022f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f90:	2b00      	cmp	r3, #0
 8022f92:	dc00      	bgt.n	8022f96 <_dtoa_r+0x4aa>
 8022f94:	e106      	b.n	80231a4 <_dtoa_r+0x6b8>
 8022f96:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8022f98:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f9c:	9d08      	ldr	r5, [sp, #32]
 8022f9e:	3b01      	subs	r3, #1
 8022fa0:	195b      	adds	r3, r3, r5
 8022fa2:	930a      	str	r3, [sp, #40]	@ 0x28
 8022fa4:	9a06      	ldr	r2, [sp, #24]
 8022fa6:	9b07      	ldr	r3, [sp, #28]
 8022fa8:	0030      	movs	r0, r6
 8022faa:	0039      	movs	r1, r7
 8022fac:	f7de ff02 	bl	8001db4 <__aeabi_ddiv>
 8022fb0:	f7e0 f9ca 	bl	8003348 <__aeabi_d2iz>
 8022fb4:	9009      	str	r0, [sp, #36]	@ 0x24
 8022fb6:	f7e0 fa03 	bl	80033c0 <__aeabi_i2d>
 8022fba:	9a06      	ldr	r2, [sp, #24]
 8022fbc:	9b07      	ldr	r3, [sp, #28]
 8022fbe:	f7df fb3d 	bl	800263c <__aeabi_dmul>
 8022fc2:	0002      	movs	r2, r0
 8022fc4:	000b      	movs	r3, r1
 8022fc6:	0030      	movs	r0, r6
 8022fc8:	0039      	movs	r1, r7
 8022fca:	f7df fdff 	bl	8002bcc <__aeabi_dsub>
 8022fce:	002b      	movs	r3, r5
 8022fd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022fd2:	3501      	adds	r5, #1
 8022fd4:	3230      	adds	r2, #48	@ 0x30
 8022fd6:	701a      	strb	r2, [r3, #0]
 8022fd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022fda:	002c      	movs	r4, r5
 8022fdc:	429a      	cmp	r2, r3
 8022fde:	d000      	beq.n	8022fe2 <_dtoa_r+0x4f6>
 8022fe0:	e131      	b.n	8023246 <_dtoa_r+0x75a>
 8022fe2:	0002      	movs	r2, r0
 8022fe4:	000b      	movs	r3, r1
 8022fe6:	f7de fb81 	bl	80016ec <__aeabi_dadd>
 8022fea:	9a06      	ldr	r2, [sp, #24]
 8022fec:	9b07      	ldr	r3, [sp, #28]
 8022fee:	0006      	movs	r6, r0
 8022ff0:	000f      	movs	r7, r1
 8022ff2:	f7dd fa77 	bl	80004e4 <__aeabi_dcmpgt>
 8022ff6:	2800      	cmp	r0, #0
 8022ff8:	d000      	beq.n	8022ffc <_dtoa_r+0x510>
 8022ffa:	e10f      	b.n	802321c <_dtoa_r+0x730>
 8022ffc:	9a06      	ldr	r2, [sp, #24]
 8022ffe:	9b07      	ldr	r3, [sp, #28]
 8023000:	0030      	movs	r0, r6
 8023002:	0039      	movs	r1, r7
 8023004:	f7dd fa54 	bl	80004b0 <__aeabi_dcmpeq>
 8023008:	2800      	cmp	r0, #0
 802300a:	d003      	beq.n	8023014 <_dtoa_r+0x528>
 802300c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802300e:	07dd      	lsls	r5, r3, #31
 8023010:	d500      	bpl.n	8023014 <_dtoa_r+0x528>
 8023012:	e103      	b.n	802321c <_dtoa_r+0x730>
 8023014:	9905      	ldr	r1, [sp, #20]
 8023016:	9803      	ldr	r0, [sp, #12]
 8023018:	f001 f812 	bl	8024040 <_Bfree>
 802301c:	2300      	movs	r3, #0
 802301e:	7023      	strb	r3, [r4, #0]
 8023020:	9b04      	ldr	r3, [sp, #16]
 8023022:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023024:	3301      	adds	r3, #1
 8023026:	6013      	str	r3, [r2, #0]
 8023028:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802302a:	2b00      	cmp	r3, #0
 802302c:	d100      	bne.n	8023030 <_dtoa_r+0x544>
 802302e:	e5a7      	b.n	8022b80 <_dtoa_r+0x94>
 8023030:	601c      	str	r4, [r3, #0]
 8023032:	e5a5      	b.n	8022b80 <_dtoa_r+0x94>
 8023034:	423d      	tst	r5, r7
 8023036:	d005      	beq.n	8023044 <_dtoa_r+0x558>
 8023038:	6832      	ldr	r2, [r6, #0]
 802303a:	6873      	ldr	r3, [r6, #4]
 802303c:	f7df fafe 	bl	800263c <__aeabi_dmul>
 8023040:	003b      	movs	r3, r7
 8023042:	3401      	adds	r4, #1
 8023044:	106d      	asrs	r5, r5, #1
 8023046:	3608      	adds	r6, #8
 8023048:	e736      	b.n	8022eb8 <_dtoa_r+0x3cc>
 802304a:	9b04      	ldr	r3, [sp, #16]
 802304c:	930c      	str	r3, [sp, #48]	@ 0x30
 802304e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023050:	e75a      	b.n	8022f08 <_dtoa_r+0x41c>
 8023052:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023054:	4b69      	ldr	r3, [pc, #420]	@ (80231fc <_dtoa_r+0x710>)
 8023056:	3a01      	subs	r2, #1
 8023058:	00d2      	lsls	r2, r2, #3
 802305a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802305c:	189b      	adds	r3, r3, r2
 802305e:	681a      	ldr	r2, [r3, #0]
 8023060:	685b      	ldr	r3, [r3, #4]
 8023062:	2900      	cmp	r1, #0
 8023064:	d04c      	beq.n	8023100 <_dtoa_r+0x614>
 8023066:	2000      	movs	r0, #0
 8023068:	496b      	ldr	r1, [pc, #428]	@ (8023218 <_dtoa_r+0x72c>)
 802306a:	f7de fea3 	bl	8001db4 <__aeabi_ddiv>
 802306e:	0032      	movs	r2, r6
 8023070:	003b      	movs	r3, r7
 8023072:	f7df fdab 	bl	8002bcc <__aeabi_dsub>
 8023076:	9a08      	ldr	r2, [sp, #32]
 8023078:	0006      	movs	r6, r0
 802307a:	4694      	mov	ip, r2
 802307c:	000f      	movs	r7, r1
 802307e:	9b08      	ldr	r3, [sp, #32]
 8023080:	9316      	str	r3, [sp, #88]	@ 0x58
 8023082:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023084:	4463      	add	r3, ip
 8023086:	9311      	str	r3, [sp, #68]	@ 0x44
 8023088:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802308a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802308c:	f7e0 f95c 	bl	8003348 <__aeabi_d2iz>
 8023090:	0005      	movs	r5, r0
 8023092:	f7e0 f995 	bl	80033c0 <__aeabi_i2d>
 8023096:	0002      	movs	r2, r0
 8023098:	000b      	movs	r3, r1
 802309a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802309c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802309e:	f7df fd95 	bl	8002bcc <__aeabi_dsub>
 80230a2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80230a4:	3530      	adds	r5, #48	@ 0x30
 80230a6:	1c5c      	adds	r4, r3, #1
 80230a8:	701d      	strb	r5, [r3, #0]
 80230aa:	0032      	movs	r2, r6
 80230ac:	003b      	movs	r3, r7
 80230ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80230b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80230b2:	f7dd fa03 	bl	80004bc <__aeabi_dcmplt>
 80230b6:	2800      	cmp	r0, #0
 80230b8:	d16a      	bne.n	8023190 <_dtoa_r+0x6a4>
 80230ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80230bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80230be:	2000      	movs	r0, #0
 80230c0:	4950      	ldr	r1, [pc, #320]	@ (8023204 <_dtoa_r+0x718>)
 80230c2:	f7df fd83 	bl	8002bcc <__aeabi_dsub>
 80230c6:	0032      	movs	r2, r6
 80230c8:	003b      	movs	r3, r7
 80230ca:	f7dd f9f7 	bl	80004bc <__aeabi_dcmplt>
 80230ce:	2800      	cmp	r0, #0
 80230d0:	d000      	beq.n	80230d4 <_dtoa_r+0x5e8>
 80230d2:	e0a5      	b.n	8023220 <_dtoa_r+0x734>
 80230d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80230d6:	42a3      	cmp	r3, r4
 80230d8:	d100      	bne.n	80230dc <_dtoa_r+0x5f0>
 80230da:	e742      	b.n	8022f62 <_dtoa_r+0x476>
 80230dc:	2200      	movs	r2, #0
 80230de:	0030      	movs	r0, r6
 80230e0:	0039      	movs	r1, r7
 80230e2:	4b49      	ldr	r3, [pc, #292]	@ (8023208 <_dtoa_r+0x71c>)
 80230e4:	f7df faaa 	bl	800263c <__aeabi_dmul>
 80230e8:	2200      	movs	r2, #0
 80230ea:	0006      	movs	r6, r0
 80230ec:	000f      	movs	r7, r1
 80230ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80230f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80230f2:	4b45      	ldr	r3, [pc, #276]	@ (8023208 <_dtoa_r+0x71c>)
 80230f4:	f7df faa2 	bl	800263c <__aeabi_dmul>
 80230f8:	9416      	str	r4, [sp, #88]	@ 0x58
 80230fa:	900a      	str	r0, [sp, #40]	@ 0x28
 80230fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80230fe:	e7c3      	b.n	8023088 <_dtoa_r+0x59c>
 8023100:	0030      	movs	r0, r6
 8023102:	0039      	movs	r1, r7
 8023104:	f7df fa9a 	bl	800263c <__aeabi_dmul>
 8023108:	9d08      	ldr	r5, [sp, #32]
 802310a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802310c:	002b      	movs	r3, r5
 802310e:	4694      	mov	ip, r2
 8023110:	9016      	str	r0, [sp, #88]	@ 0x58
 8023112:	9117      	str	r1, [sp, #92]	@ 0x5c
 8023114:	4463      	add	r3, ip
 8023116:	9319      	str	r3, [sp, #100]	@ 0x64
 8023118:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802311a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802311c:	f7e0 f914 	bl	8003348 <__aeabi_d2iz>
 8023120:	0004      	movs	r4, r0
 8023122:	f7e0 f94d 	bl	80033c0 <__aeabi_i2d>
 8023126:	000b      	movs	r3, r1
 8023128:	0002      	movs	r2, r0
 802312a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802312c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802312e:	f7df fd4d 	bl	8002bcc <__aeabi_dsub>
 8023132:	3430      	adds	r4, #48	@ 0x30
 8023134:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023136:	702c      	strb	r4, [r5, #0]
 8023138:	3501      	adds	r5, #1
 802313a:	0006      	movs	r6, r0
 802313c:	000f      	movs	r7, r1
 802313e:	42ab      	cmp	r3, r5
 8023140:	d129      	bne.n	8023196 <_dtoa_r+0x6aa>
 8023142:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8023144:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023146:	9b08      	ldr	r3, [sp, #32]
 8023148:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802314a:	469c      	mov	ip, r3
 802314c:	2200      	movs	r2, #0
 802314e:	4b32      	ldr	r3, [pc, #200]	@ (8023218 <_dtoa_r+0x72c>)
 8023150:	4464      	add	r4, ip
 8023152:	f7de facb 	bl	80016ec <__aeabi_dadd>
 8023156:	0002      	movs	r2, r0
 8023158:	000b      	movs	r3, r1
 802315a:	0030      	movs	r0, r6
 802315c:	0039      	movs	r1, r7
 802315e:	f7dd f9c1 	bl	80004e4 <__aeabi_dcmpgt>
 8023162:	2800      	cmp	r0, #0
 8023164:	d15c      	bne.n	8023220 <_dtoa_r+0x734>
 8023166:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023168:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802316a:	2000      	movs	r0, #0
 802316c:	492a      	ldr	r1, [pc, #168]	@ (8023218 <_dtoa_r+0x72c>)
 802316e:	f7df fd2d 	bl	8002bcc <__aeabi_dsub>
 8023172:	0002      	movs	r2, r0
 8023174:	000b      	movs	r3, r1
 8023176:	0030      	movs	r0, r6
 8023178:	0039      	movs	r1, r7
 802317a:	f7dd f99f 	bl	80004bc <__aeabi_dcmplt>
 802317e:	2800      	cmp	r0, #0
 8023180:	d100      	bne.n	8023184 <_dtoa_r+0x698>
 8023182:	e6ee      	b.n	8022f62 <_dtoa_r+0x476>
 8023184:	0023      	movs	r3, r4
 8023186:	3c01      	subs	r4, #1
 8023188:	7822      	ldrb	r2, [r4, #0]
 802318a:	2a30      	cmp	r2, #48	@ 0x30
 802318c:	d0fa      	beq.n	8023184 <_dtoa_r+0x698>
 802318e:	001c      	movs	r4, r3
 8023190:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023192:	9304      	str	r3, [sp, #16]
 8023194:	e73e      	b.n	8023014 <_dtoa_r+0x528>
 8023196:	2200      	movs	r2, #0
 8023198:	4b1b      	ldr	r3, [pc, #108]	@ (8023208 <_dtoa_r+0x71c>)
 802319a:	f7df fa4f 	bl	800263c <__aeabi_dmul>
 802319e:	900a      	str	r0, [sp, #40]	@ 0x28
 80231a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80231a2:	e7b9      	b.n	8023118 <_dtoa_r+0x62c>
 80231a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231a6:	2b00      	cmp	r3, #0
 80231a8:	d10c      	bne.n	80231c4 <_dtoa_r+0x6d8>
 80231aa:	9806      	ldr	r0, [sp, #24]
 80231ac:	9907      	ldr	r1, [sp, #28]
 80231ae:	2200      	movs	r2, #0
 80231b0:	4b18      	ldr	r3, [pc, #96]	@ (8023214 <_dtoa_r+0x728>)
 80231b2:	f7df fa43 	bl	800263c <__aeabi_dmul>
 80231b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80231b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80231ba:	f7dd f99d 	bl	80004f8 <__aeabi_dcmpge>
 80231be:	2800      	cmp	r0, #0
 80231c0:	d100      	bne.n	80231c4 <_dtoa_r+0x6d8>
 80231c2:	e164      	b.n	802348e <_dtoa_r+0x9a2>
 80231c4:	2600      	movs	r6, #0
 80231c6:	0037      	movs	r7, r6
 80231c8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80231ca:	9c08      	ldr	r4, [sp, #32]
 80231cc:	43db      	mvns	r3, r3
 80231ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80231d0:	2300      	movs	r3, #0
 80231d2:	9304      	str	r3, [sp, #16]
 80231d4:	0031      	movs	r1, r6
 80231d6:	9803      	ldr	r0, [sp, #12]
 80231d8:	f000 ff32 	bl	8024040 <_Bfree>
 80231dc:	2f00      	cmp	r7, #0
 80231de:	d0d7      	beq.n	8023190 <_dtoa_r+0x6a4>
 80231e0:	9b04      	ldr	r3, [sp, #16]
 80231e2:	2b00      	cmp	r3, #0
 80231e4:	d005      	beq.n	80231f2 <_dtoa_r+0x706>
 80231e6:	42bb      	cmp	r3, r7
 80231e8:	d003      	beq.n	80231f2 <_dtoa_r+0x706>
 80231ea:	0019      	movs	r1, r3
 80231ec:	9803      	ldr	r0, [sp, #12]
 80231ee:	f000 ff27 	bl	8024040 <_Bfree>
 80231f2:	0039      	movs	r1, r7
 80231f4:	9803      	ldr	r0, [sp, #12]
 80231f6:	f000 ff23 	bl	8024040 <_Bfree>
 80231fa:	e7c9      	b.n	8023190 <_dtoa_r+0x6a4>
 80231fc:	08029330 	.word	0x08029330
 8023200:	08029308 	.word	0x08029308
 8023204:	3ff00000 	.word	0x3ff00000
 8023208:	40240000 	.word	0x40240000
 802320c:	401c0000 	.word	0x401c0000
 8023210:	fcc00000 	.word	0xfcc00000
 8023214:	40140000 	.word	0x40140000
 8023218:	3fe00000 	.word	0x3fe00000
 802321c:	9b04      	ldr	r3, [sp, #16]
 802321e:	930c      	str	r3, [sp, #48]	@ 0x30
 8023220:	0023      	movs	r3, r4
 8023222:	001c      	movs	r4, r3
 8023224:	3b01      	subs	r3, #1
 8023226:	781a      	ldrb	r2, [r3, #0]
 8023228:	2a39      	cmp	r2, #57	@ 0x39
 802322a:	d108      	bne.n	802323e <_dtoa_r+0x752>
 802322c:	9a08      	ldr	r2, [sp, #32]
 802322e:	429a      	cmp	r2, r3
 8023230:	d1f7      	bne.n	8023222 <_dtoa_r+0x736>
 8023232:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023234:	9908      	ldr	r1, [sp, #32]
 8023236:	3201      	adds	r2, #1
 8023238:	920c      	str	r2, [sp, #48]	@ 0x30
 802323a:	2230      	movs	r2, #48	@ 0x30
 802323c:	700a      	strb	r2, [r1, #0]
 802323e:	781a      	ldrb	r2, [r3, #0]
 8023240:	3201      	adds	r2, #1
 8023242:	701a      	strb	r2, [r3, #0]
 8023244:	e7a4      	b.n	8023190 <_dtoa_r+0x6a4>
 8023246:	2200      	movs	r2, #0
 8023248:	4bc6      	ldr	r3, [pc, #792]	@ (8023564 <_dtoa_r+0xa78>)
 802324a:	f7df f9f7 	bl	800263c <__aeabi_dmul>
 802324e:	2200      	movs	r2, #0
 8023250:	2300      	movs	r3, #0
 8023252:	0006      	movs	r6, r0
 8023254:	000f      	movs	r7, r1
 8023256:	f7dd f92b 	bl	80004b0 <__aeabi_dcmpeq>
 802325a:	2800      	cmp	r0, #0
 802325c:	d100      	bne.n	8023260 <_dtoa_r+0x774>
 802325e:	e6a1      	b.n	8022fa4 <_dtoa_r+0x4b8>
 8023260:	e6d8      	b.n	8023014 <_dtoa_r+0x528>
 8023262:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8023264:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8023266:	9c06      	ldr	r4, [sp, #24]
 8023268:	2f00      	cmp	r7, #0
 802326a:	d014      	beq.n	8023296 <_dtoa_r+0x7aa>
 802326c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802326e:	2a01      	cmp	r2, #1
 8023270:	dd00      	ble.n	8023274 <_dtoa_r+0x788>
 8023272:	e0c8      	b.n	8023406 <_dtoa_r+0x91a>
 8023274:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023276:	2a00      	cmp	r2, #0
 8023278:	d100      	bne.n	802327c <_dtoa_r+0x790>
 802327a:	e0be      	b.n	80233fa <_dtoa_r+0x90e>
 802327c:	4aba      	ldr	r2, [pc, #744]	@ (8023568 <_dtoa_r+0xa7c>)
 802327e:	189b      	adds	r3, r3, r2
 8023280:	9a06      	ldr	r2, [sp, #24]
 8023282:	2101      	movs	r1, #1
 8023284:	18d2      	adds	r2, r2, r3
 8023286:	9206      	str	r2, [sp, #24]
 8023288:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802328a:	9803      	ldr	r0, [sp, #12]
 802328c:	18d3      	adds	r3, r2, r3
 802328e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023290:	f000 ffda 	bl	8024248 <__i2b>
 8023294:	0007      	movs	r7, r0
 8023296:	2c00      	cmp	r4, #0
 8023298:	d00e      	beq.n	80232b8 <_dtoa_r+0x7cc>
 802329a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802329c:	2b00      	cmp	r3, #0
 802329e:	dd0b      	ble.n	80232b8 <_dtoa_r+0x7cc>
 80232a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80232a2:	0023      	movs	r3, r4
 80232a4:	4294      	cmp	r4, r2
 80232a6:	dd00      	ble.n	80232aa <_dtoa_r+0x7be>
 80232a8:	0013      	movs	r3, r2
 80232aa:	9a06      	ldr	r2, [sp, #24]
 80232ac:	1ae4      	subs	r4, r4, r3
 80232ae:	1ad2      	subs	r2, r2, r3
 80232b0:	9206      	str	r2, [sp, #24]
 80232b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80232b4:	1ad3      	subs	r3, r2, r3
 80232b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80232b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80232ba:	2b00      	cmp	r3, #0
 80232bc:	d01f      	beq.n	80232fe <_dtoa_r+0x812>
 80232be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80232c0:	2b00      	cmp	r3, #0
 80232c2:	d100      	bne.n	80232c6 <_dtoa_r+0x7da>
 80232c4:	e0b5      	b.n	8023432 <_dtoa_r+0x946>
 80232c6:	2d00      	cmp	r5, #0
 80232c8:	d010      	beq.n	80232ec <_dtoa_r+0x800>
 80232ca:	0039      	movs	r1, r7
 80232cc:	002a      	movs	r2, r5
 80232ce:	9803      	ldr	r0, [sp, #12]
 80232d0:	f001 f884 	bl	80243dc <__pow5mult>
 80232d4:	9a05      	ldr	r2, [sp, #20]
 80232d6:	0001      	movs	r1, r0
 80232d8:	0007      	movs	r7, r0
 80232da:	9803      	ldr	r0, [sp, #12]
 80232dc:	f000 ffcc 	bl	8024278 <__multiply>
 80232e0:	0006      	movs	r6, r0
 80232e2:	9905      	ldr	r1, [sp, #20]
 80232e4:	9803      	ldr	r0, [sp, #12]
 80232e6:	f000 feab 	bl	8024040 <_Bfree>
 80232ea:	9605      	str	r6, [sp, #20]
 80232ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80232ee:	1b5a      	subs	r2, r3, r5
 80232f0:	42ab      	cmp	r3, r5
 80232f2:	d004      	beq.n	80232fe <_dtoa_r+0x812>
 80232f4:	9905      	ldr	r1, [sp, #20]
 80232f6:	9803      	ldr	r0, [sp, #12]
 80232f8:	f001 f870 	bl	80243dc <__pow5mult>
 80232fc:	9005      	str	r0, [sp, #20]
 80232fe:	2101      	movs	r1, #1
 8023300:	9803      	ldr	r0, [sp, #12]
 8023302:	f000 ffa1 	bl	8024248 <__i2b>
 8023306:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023308:	0006      	movs	r6, r0
 802330a:	2b00      	cmp	r3, #0
 802330c:	d100      	bne.n	8023310 <_dtoa_r+0x824>
 802330e:	e1bc      	b.n	802368a <_dtoa_r+0xb9e>
 8023310:	001a      	movs	r2, r3
 8023312:	0001      	movs	r1, r0
 8023314:	9803      	ldr	r0, [sp, #12]
 8023316:	f001 f861 	bl	80243dc <__pow5mult>
 802331a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802331c:	0006      	movs	r6, r0
 802331e:	2500      	movs	r5, #0
 8023320:	2b01      	cmp	r3, #1
 8023322:	dc16      	bgt.n	8023352 <_dtoa_r+0x866>
 8023324:	2500      	movs	r5, #0
 8023326:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023328:	42ab      	cmp	r3, r5
 802332a:	d10e      	bne.n	802334a <_dtoa_r+0x85e>
 802332c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802332e:	031b      	lsls	r3, r3, #12
 8023330:	42ab      	cmp	r3, r5
 8023332:	d10a      	bne.n	802334a <_dtoa_r+0x85e>
 8023334:	4b8d      	ldr	r3, [pc, #564]	@ (802356c <_dtoa_r+0xa80>)
 8023336:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023338:	4213      	tst	r3, r2
 802333a:	d006      	beq.n	802334a <_dtoa_r+0x85e>
 802333c:	9b06      	ldr	r3, [sp, #24]
 802333e:	3501      	adds	r5, #1
 8023340:	3301      	adds	r3, #1
 8023342:	9306      	str	r3, [sp, #24]
 8023344:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023346:	3301      	adds	r3, #1
 8023348:	930d      	str	r3, [sp, #52]	@ 0x34
 802334a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802334c:	2001      	movs	r0, #1
 802334e:	2b00      	cmp	r3, #0
 8023350:	d008      	beq.n	8023364 <_dtoa_r+0x878>
 8023352:	6933      	ldr	r3, [r6, #16]
 8023354:	3303      	adds	r3, #3
 8023356:	009b      	lsls	r3, r3, #2
 8023358:	18f3      	adds	r3, r6, r3
 802335a:	6858      	ldr	r0, [r3, #4]
 802335c:	f000 ff24 	bl	80241a8 <__hi0bits>
 8023360:	2320      	movs	r3, #32
 8023362:	1a18      	subs	r0, r3, r0
 8023364:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023366:	1818      	adds	r0, r3, r0
 8023368:	0002      	movs	r2, r0
 802336a:	231f      	movs	r3, #31
 802336c:	401a      	ands	r2, r3
 802336e:	4218      	tst	r0, r3
 8023370:	d065      	beq.n	802343e <_dtoa_r+0x952>
 8023372:	3301      	adds	r3, #1
 8023374:	1a9b      	subs	r3, r3, r2
 8023376:	2b04      	cmp	r3, #4
 8023378:	dd5d      	ble.n	8023436 <_dtoa_r+0x94a>
 802337a:	231c      	movs	r3, #28
 802337c:	1a9b      	subs	r3, r3, r2
 802337e:	9a06      	ldr	r2, [sp, #24]
 8023380:	18e4      	adds	r4, r4, r3
 8023382:	18d2      	adds	r2, r2, r3
 8023384:	9206      	str	r2, [sp, #24]
 8023386:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023388:	18d3      	adds	r3, r2, r3
 802338a:	930d      	str	r3, [sp, #52]	@ 0x34
 802338c:	9b06      	ldr	r3, [sp, #24]
 802338e:	2b00      	cmp	r3, #0
 8023390:	dd05      	ble.n	802339e <_dtoa_r+0x8b2>
 8023392:	001a      	movs	r2, r3
 8023394:	9905      	ldr	r1, [sp, #20]
 8023396:	9803      	ldr	r0, [sp, #12]
 8023398:	f001 f87c 	bl	8024494 <__lshift>
 802339c:	9005      	str	r0, [sp, #20]
 802339e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80233a0:	2b00      	cmp	r3, #0
 80233a2:	dd05      	ble.n	80233b0 <_dtoa_r+0x8c4>
 80233a4:	0031      	movs	r1, r6
 80233a6:	001a      	movs	r2, r3
 80233a8:	9803      	ldr	r0, [sp, #12]
 80233aa:	f001 f873 	bl	8024494 <__lshift>
 80233ae:	0006      	movs	r6, r0
 80233b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d045      	beq.n	8023442 <_dtoa_r+0x956>
 80233b6:	0031      	movs	r1, r6
 80233b8:	9805      	ldr	r0, [sp, #20]
 80233ba:	f001 f8d7 	bl	802456c <__mcmp>
 80233be:	2800      	cmp	r0, #0
 80233c0:	da3f      	bge.n	8023442 <_dtoa_r+0x956>
 80233c2:	9b04      	ldr	r3, [sp, #16]
 80233c4:	220a      	movs	r2, #10
 80233c6:	3b01      	subs	r3, #1
 80233c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80233ca:	9905      	ldr	r1, [sp, #20]
 80233cc:	2300      	movs	r3, #0
 80233ce:	9803      	ldr	r0, [sp, #12]
 80233d0:	f000 fe5a 	bl	8024088 <__multadd>
 80233d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80233d6:	9005      	str	r0, [sp, #20]
 80233d8:	2b00      	cmp	r3, #0
 80233da:	d100      	bne.n	80233de <_dtoa_r+0x8f2>
 80233dc:	e15c      	b.n	8023698 <_dtoa_r+0xbac>
 80233de:	2300      	movs	r3, #0
 80233e0:	0039      	movs	r1, r7
 80233e2:	220a      	movs	r2, #10
 80233e4:	9803      	ldr	r0, [sp, #12]
 80233e6:	f000 fe4f 	bl	8024088 <__multadd>
 80233ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80233ec:	0007      	movs	r7, r0
 80233ee:	2b00      	cmp	r3, #0
 80233f0:	dc55      	bgt.n	802349e <_dtoa_r+0x9b2>
 80233f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80233f4:	2b02      	cmp	r3, #2
 80233f6:	dc2d      	bgt.n	8023454 <_dtoa_r+0x968>
 80233f8:	e051      	b.n	802349e <_dtoa_r+0x9b2>
 80233fa:	2336      	movs	r3, #54	@ 0x36
 80233fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80233fe:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8023400:	9c06      	ldr	r4, [sp, #24]
 8023402:	1a9b      	subs	r3, r3, r2
 8023404:	e73c      	b.n	8023280 <_dtoa_r+0x794>
 8023406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023408:	1e5d      	subs	r5, r3, #1
 802340a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802340c:	42ab      	cmp	r3, r5
 802340e:	db08      	blt.n	8023422 <_dtoa_r+0x936>
 8023410:	1b5d      	subs	r5, r3, r5
 8023412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023414:	9c06      	ldr	r4, [sp, #24]
 8023416:	2b00      	cmp	r3, #0
 8023418:	db00      	blt.n	802341c <_dtoa_r+0x930>
 802341a:	e731      	b.n	8023280 <_dtoa_r+0x794>
 802341c:	1ae4      	subs	r4, r4, r3
 802341e:	2300      	movs	r3, #0
 8023420:	e72e      	b.n	8023280 <_dtoa_r+0x794>
 8023422:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023424:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023426:	1aeb      	subs	r3, r5, r3
 8023428:	18d3      	adds	r3, r2, r3
 802342a:	950f      	str	r5, [sp, #60]	@ 0x3c
 802342c:	9314      	str	r3, [sp, #80]	@ 0x50
 802342e:	2500      	movs	r5, #0
 8023430:	e7ef      	b.n	8023412 <_dtoa_r+0x926>
 8023432:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023434:	e75e      	b.n	80232f4 <_dtoa_r+0x808>
 8023436:	2b04      	cmp	r3, #4
 8023438:	d0a8      	beq.n	802338c <_dtoa_r+0x8a0>
 802343a:	331c      	adds	r3, #28
 802343c:	e79f      	b.n	802337e <_dtoa_r+0x892>
 802343e:	0013      	movs	r3, r2
 8023440:	e7fb      	b.n	802343a <_dtoa_r+0x94e>
 8023442:	9b04      	ldr	r3, [sp, #16]
 8023444:	930c      	str	r3, [sp, #48]	@ 0x30
 8023446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023448:	930e      	str	r3, [sp, #56]	@ 0x38
 802344a:	2b00      	cmp	r3, #0
 802344c:	dc23      	bgt.n	8023496 <_dtoa_r+0x9aa>
 802344e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023450:	2b02      	cmp	r3, #2
 8023452:	dd20      	ble.n	8023496 <_dtoa_r+0x9aa>
 8023454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023456:	2b00      	cmp	r3, #0
 8023458:	d000      	beq.n	802345c <_dtoa_r+0x970>
 802345a:	e6b5      	b.n	80231c8 <_dtoa_r+0x6dc>
 802345c:	0031      	movs	r1, r6
 802345e:	2205      	movs	r2, #5
 8023460:	9803      	ldr	r0, [sp, #12]
 8023462:	f000 fe11 	bl	8024088 <__multadd>
 8023466:	0006      	movs	r6, r0
 8023468:	0001      	movs	r1, r0
 802346a:	9805      	ldr	r0, [sp, #20]
 802346c:	f001 f87e 	bl	802456c <__mcmp>
 8023470:	2800      	cmp	r0, #0
 8023472:	dc00      	bgt.n	8023476 <_dtoa_r+0x98a>
 8023474:	e6a8      	b.n	80231c8 <_dtoa_r+0x6dc>
 8023476:	9b08      	ldr	r3, [sp, #32]
 8023478:	9a08      	ldr	r2, [sp, #32]
 802347a:	1c5c      	adds	r4, r3, #1
 802347c:	2331      	movs	r3, #49	@ 0x31
 802347e:	7013      	strb	r3, [r2, #0]
 8023480:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023482:	3301      	adds	r3, #1
 8023484:	930c      	str	r3, [sp, #48]	@ 0x30
 8023486:	e6a3      	b.n	80231d0 <_dtoa_r+0x6e4>
 8023488:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802348a:	0037      	movs	r7, r6
 802348c:	e7f3      	b.n	8023476 <_dtoa_r+0x98a>
 802348e:	9b04      	ldr	r3, [sp, #16]
 8023490:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8023492:	930c      	str	r3, [sp, #48]	@ 0x30
 8023494:	e7f9      	b.n	802348a <_dtoa_r+0x99e>
 8023496:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023498:	2b00      	cmp	r3, #0
 802349a:	d100      	bne.n	802349e <_dtoa_r+0x9b2>
 802349c:	e100      	b.n	80236a0 <_dtoa_r+0xbb4>
 802349e:	2c00      	cmp	r4, #0
 80234a0:	dd05      	ble.n	80234ae <_dtoa_r+0x9c2>
 80234a2:	0039      	movs	r1, r7
 80234a4:	0022      	movs	r2, r4
 80234a6:	9803      	ldr	r0, [sp, #12]
 80234a8:	f000 fff4 	bl	8024494 <__lshift>
 80234ac:	0007      	movs	r7, r0
 80234ae:	0038      	movs	r0, r7
 80234b0:	2d00      	cmp	r5, #0
 80234b2:	d018      	beq.n	80234e6 <_dtoa_r+0x9fa>
 80234b4:	6879      	ldr	r1, [r7, #4]
 80234b6:	9803      	ldr	r0, [sp, #12]
 80234b8:	f000 fd7e 	bl	8023fb8 <_Balloc>
 80234bc:	1e04      	subs	r4, r0, #0
 80234be:	d105      	bne.n	80234cc <_dtoa_r+0x9e0>
 80234c0:	0022      	movs	r2, r4
 80234c2:	4b2b      	ldr	r3, [pc, #172]	@ (8023570 <_dtoa_r+0xa84>)
 80234c4:	482b      	ldr	r0, [pc, #172]	@ (8023574 <_dtoa_r+0xa88>)
 80234c6:	492c      	ldr	r1, [pc, #176]	@ (8023578 <_dtoa_r+0xa8c>)
 80234c8:	f7ff fb25 	bl	8022b16 <_dtoa_r+0x2a>
 80234cc:	0039      	movs	r1, r7
 80234ce:	693a      	ldr	r2, [r7, #16]
 80234d0:	310c      	adds	r1, #12
 80234d2:	3202      	adds	r2, #2
 80234d4:	0092      	lsls	r2, r2, #2
 80234d6:	300c      	adds	r0, #12
 80234d8:	f7ff fa6a 	bl	80229b0 <memcpy>
 80234dc:	2201      	movs	r2, #1
 80234de:	0021      	movs	r1, r4
 80234e0:	9803      	ldr	r0, [sp, #12]
 80234e2:	f000 ffd7 	bl	8024494 <__lshift>
 80234e6:	9b08      	ldr	r3, [sp, #32]
 80234e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80234ea:	9306      	str	r3, [sp, #24]
 80234ec:	3b01      	subs	r3, #1
 80234ee:	189b      	adds	r3, r3, r2
 80234f0:	2201      	movs	r2, #1
 80234f2:	9704      	str	r7, [sp, #16]
 80234f4:	0007      	movs	r7, r0
 80234f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80234f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80234fa:	4013      	ands	r3, r2
 80234fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80234fe:	0031      	movs	r1, r6
 8023500:	9805      	ldr	r0, [sp, #20]
 8023502:	f7ff fa65 	bl	80229d0 <quorem>
 8023506:	9904      	ldr	r1, [sp, #16]
 8023508:	0005      	movs	r5, r0
 802350a:	900a      	str	r0, [sp, #40]	@ 0x28
 802350c:	9805      	ldr	r0, [sp, #20]
 802350e:	f001 f82d 	bl	802456c <__mcmp>
 8023512:	003a      	movs	r2, r7
 8023514:	900d      	str	r0, [sp, #52]	@ 0x34
 8023516:	0031      	movs	r1, r6
 8023518:	9803      	ldr	r0, [sp, #12]
 802351a:	f001 f843 	bl	80245a4 <__mdiff>
 802351e:	2201      	movs	r2, #1
 8023520:	68c3      	ldr	r3, [r0, #12]
 8023522:	0004      	movs	r4, r0
 8023524:	3530      	adds	r5, #48	@ 0x30
 8023526:	9209      	str	r2, [sp, #36]	@ 0x24
 8023528:	2b00      	cmp	r3, #0
 802352a:	d104      	bne.n	8023536 <_dtoa_r+0xa4a>
 802352c:	0001      	movs	r1, r0
 802352e:	9805      	ldr	r0, [sp, #20]
 8023530:	f001 f81c 	bl	802456c <__mcmp>
 8023534:	9009      	str	r0, [sp, #36]	@ 0x24
 8023536:	0021      	movs	r1, r4
 8023538:	9803      	ldr	r0, [sp, #12]
 802353a:	f000 fd81 	bl	8024040 <_Bfree>
 802353e:	9b06      	ldr	r3, [sp, #24]
 8023540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023542:	1c5c      	adds	r4, r3, #1
 8023544:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023546:	4313      	orrs	r3, r2
 8023548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802354a:	4313      	orrs	r3, r2
 802354c:	d116      	bne.n	802357c <_dtoa_r+0xa90>
 802354e:	2d39      	cmp	r5, #57	@ 0x39
 8023550:	d02f      	beq.n	80235b2 <_dtoa_r+0xac6>
 8023552:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023554:	2b00      	cmp	r3, #0
 8023556:	dd01      	ble.n	802355c <_dtoa_r+0xa70>
 8023558:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802355a:	3531      	adds	r5, #49	@ 0x31
 802355c:	9b06      	ldr	r3, [sp, #24]
 802355e:	701d      	strb	r5, [r3, #0]
 8023560:	e638      	b.n	80231d4 <_dtoa_r+0x6e8>
 8023562:	46c0      	nop			@ (mov r8, r8)
 8023564:	40240000 	.word	0x40240000
 8023568:	00000433 	.word	0x00000433
 802356c:	7ff00000 	.word	0x7ff00000
 8023570:	08029231 	.word	0x08029231
 8023574:	080291d9 	.word	0x080291d9
 8023578:	000002ef 	.word	0x000002ef
 802357c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802357e:	2b00      	cmp	r3, #0
 8023580:	db04      	blt.n	802358c <_dtoa_r+0xaa0>
 8023582:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8023584:	4313      	orrs	r3, r2
 8023586:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023588:	4313      	orrs	r3, r2
 802358a:	d11e      	bne.n	80235ca <_dtoa_r+0xade>
 802358c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802358e:	2b00      	cmp	r3, #0
 8023590:	dde4      	ble.n	802355c <_dtoa_r+0xa70>
 8023592:	9905      	ldr	r1, [sp, #20]
 8023594:	2201      	movs	r2, #1
 8023596:	9803      	ldr	r0, [sp, #12]
 8023598:	f000 ff7c 	bl	8024494 <__lshift>
 802359c:	0031      	movs	r1, r6
 802359e:	9005      	str	r0, [sp, #20]
 80235a0:	f000 ffe4 	bl	802456c <__mcmp>
 80235a4:	2800      	cmp	r0, #0
 80235a6:	dc02      	bgt.n	80235ae <_dtoa_r+0xac2>
 80235a8:	d1d8      	bne.n	802355c <_dtoa_r+0xa70>
 80235aa:	07eb      	lsls	r3, r5, #31
 80235ac:	d5d6      	bpl.n	802355c <_dtoa_r+0xa70>
 80235ae:	2d39      	cmp	r5, #57	@ 0x39
 80235b0:	d1d2      	bne.n	8023558 <_dtoa_r+0xa6c>
 80235b2:	2339      	movs	r3, #57	@ 0x39
 80235b4:	9a06      	ldr	r2, [sp, #24]
 80235b6:	7013      	strb	r3, [r2, #0]
 80235b8:	0023      	movs	r3, r4
 80235ba:	001c      	movs	r4, r3
 80235bc:	3b01      	subs	r3, #1
 80235be:	781a      	ldrb	r2, [r3, #0]
 80235c0:	2a39      	cmp	r2, #57	@ 0x39
 80235c2:	d04f      	beq.n	8023664 <_dtoa_r+0xb78>
 80235c4:	3201      	adds	r2, #1
 80235c6:	701a      	strb	r2, [r3, #0]
 80235c8:	e604      	b.n	80231d4 <_dtoa_r+0x6e8>
 80235ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80235cc:	2b00      	cmp	r3, #0
 80235ce:	dd03      	ble.n	80235d8 <_dtoa_r+0xaec>
 80235d0:	2d39      	cmp	r5, #57	@ 0x39
 80235d2:	d0ee      	beq.n	80235b2 <_dtoa_r+0xac6>
 80235d4:	3501      	adds	r5, #1
 80235d6:	e7c1      	b.n	802355c <_dtoa_r+0xa70>
 80235d8:	9b06      	ldr	r3, [sp, #24]
 80235da:	9a06      	ldr	r2, [sp, #24]
 80235dc:	701d      	strb	r5, [r3, #0]
 80235de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80235e0:	4293      	cmp	r3, r2
 80235e2:	d02a      	beq.n	802363a <_dtoa_r+0xb4e>
 80235e4:	2300      	movs	r3, #0
 80235e6:	220a      	movs	r2, #10
 80235e8:	9905      	ldr	r1, [sp, #20]
 80235ea:	9803      	ldr	r0, [sp, #12]
 80235ec:	f000 fd4c 	bl	8024088 <__multadd>
 80235f0:	9b04      	ldr	r3, [sp, #16]
 80235f2:	9005      	str	r0, [sp, #20]
 80235f4:	42bb      	cmp	r3, r7
 80235f6:	d109      	bne.n	802360c <_dtoa_r+0xb20>
 80235f8:	2300      	movs	r3, #0
 80235fa:	220a      	movs	r2, #10
 80235fc:	9904      	ldr	r1, [sp, #16]
 80235fe:	9803      	ldr	r0, [sp, #12]
 8023600:	f000 fd42 	bl	8024088 <__multadd>
 8023604:	9004      	str	r0, [sp, #16]
 8023606:	0007      	movs	r7, r0
 8023608:	9406      	str	r4, [sp, #24]
 802360a:	e778      	b.n	80234fe <_dtoa_r+0xa12>
 802360c:	9904      	ldr	r1, [sp, #16]
 802360e:	2300      	movs	r3, #0
 8023610:	220a      	movs	r2, #10
 8023612:	9803      	ldr	r0, [sp, #12]
 8023614:	f000 fd38 	bl	8024088 <__multadd>
 8023618:	2300      	movs	r3, #0
 802361a:	9004      	str	r0, [sp, #16]
 802361c:	220a      	movs	r2, #10
 802361e:	0039      	movs	r1, r7
 8023620:	9803      	ldr	r0, [sp, #12]
 8023622:	f000 fd31 	bl	8024088 <__multadd>
 8023626:	e7ee      	b.n	8023606 <_dtoa_r+0xb1a>
 8023628:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802362a:	2401      	movs	r4, #1
 802362c:	2b00      	cmp	r3, #0
 802362e:	dd00      	ble.n	8023632 <_dtoa_r+0xb46>
 8023630:	001c      	movs	r4, r3
 8023632:	9b08      	ldr	r3, [sp, #32]
 8023634:	191c      	adds	r4, r3, r4
 8023636:	2300      	movs	r3, #0
 8023638:	9304      	str	r3, [sp, #16]
 802363a:	9905      	ldr	r1, [sp, #20]
 802363c:	2201      	movs	r2, #1
 802363e:	9803      	ldr	r0, [sp, #12]
 8023640:	f000 ff28 	bl	8024494 <__lshift>
 8023644:	0031      	movs	r1, r6
 8023646:	9005      	str	r0, [sp, #20]
 8023648:	f000 ff90 	bl	802456c <__mcmp>
 802364c:	2800      	cmp	r0, #0
 802364e:	dcb3      	bgt.n	80235b8 <_dtoa_r+0xacc>
 8023650:	d101      	bne.n	8023656 <_dtoa_r+0xb6a>
 8023652:	07ed      	lsls	r5, r5, #31
 8023654:	d4b0      	bmi.n	80235b8 <_dtoa_r+0xacc>
 8023656:	0023      	movs	r3, r4
 8023658:	001c      	movs	r4, r3
 802365a:	3b01      	subs	r3, #1
 802365c:	781a      	ldrb	r2, [r3, #0]
 802365e:	2a30      	cmp	r2, #48	@ 0x30
 8023660:	d0fa      	beq.n	8023658 <_dtoa_r+0xb6c>
 8023662:	e5b7      	b.n	80231d4 <_dtoa_r+0x6e8>
 8023664:	9a08      	ldr	r2, [sp, #32]
 8023666:	429a      	cmp	r2, r3
 8023668:	d1a7      	bne.n	80235ba <_dtoa_r+0xace>
 802366a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802366c:	3301      	adds	r3, #1
 802366e:	930c      	str	r3, [sp, #48]	@ 0x30
 8023670:	2331      	movs	r3, #49	@ 0x31
 8023672:	7013      	strb	r3, [r2, #0]
 8023674:	e5ae      	b.n	80231d4 <_dtoa_r+0x6e8>
 8023676:	4b15      	ldr	r3, [pc, #84]	@ (80236cc <_dtoa_r+0xbe0>)
 8023678:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802367a:	9308      	str	r3, [sp, #32]
 802367c:	4b14      	ldr	r3, [pc, #80]	@ (80236d0 <_dtoa_r+0xbe4>)
 802367e:	2a00      	cmp	r2, #0
 8023680:	d001      	beq.n	8023686 <_dtoa_r+0xb9a>
 8023682:	f7ff fa7b 	bl	8022b7c <_dtoa_r+0x90>
 8023686:	f7ff fa7b 	bl	8022b80 <_dtoa_r+0x94>
 802368a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802368c:	2b01      	cmp	r3, #1
 802368e:	dc00      	bgt.n	8023692 <_dtoa_r+0xba6>
 8023690:	e648      	b.n	8023324 <_dtoa_r+0x838>
 8023692:	2001      	movs	r0, #1
 8023694:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8023696:	e665      	b.n	8023364 <_dtoa_r+0x878>
 8023698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802369a:	2b00      	cmp	r3, #0
 802369c:	dc00      	bgt.n	80236a0 <_dtoa_r+0xbb4>
 802369e:	e6d6      	b.n	802344e <_dtoa_r+0x962>
 80236a0:	2400      	movs	r4, #0
 80236a2:	0031      	movs	r1, r6
 80236a4:	9805      	ldr	r0, [sp, #20]
 80236a6:	f7ff f993 	bl	80229d0 <quorem>
 80236aa:	9b08      	ldr	r3, [sp, #32]
 80236ac:	3030      	adds	r0, #48	@ 0x30
 80236ae:	5518      	strb	r0, [r3, r4]
 80236b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80236b2:	3401      	adds	r4, #1
 80236b4:	0005      	movs	r5, r0
 80236b6:	429c      	cmp	r4, r3
 80236b8:	dab6      	bge.n	8023628 <_dtoa_r+0xb3c>
 80236ba:	2300      	movs	r3, #0
 80236bc:	220a      	movs	r2, #10
 80236be:	9905      	ldr	r1, [sp, #20]
 80236c0:	9803      	ldr	r0, [sp, #12]
 80236c2:	f000 fce1 	bl	8024088 <__multadd>
 80236c6:	9005      	str	r0, [sp, #20]
 80236c8:	e7eb      	b.n	80236a2 <_dtoa_r+0xbb6>
 80236ca:	46c0      	nop			@ (mov r8, r8)
 80236cc:	080291b5 	.word	0x080291b5
 80236d0:	080291bd 	.word	0x080291bd

080236d4 <_free_r>:
 80236d4:	b570      	push	{r4, r5, r6, lr}
 80236d6:	0005      	movs	r5, r0
 80236d8:	1e0c      	subs	r4, r1, #0
 80236da:	d010      	beq.n	80236fe <_free_r+0x2a>
 80236dc:	3c04      	subs	r4, #4
 80236de:	6823      	ldr	r3, [r4, #0]
 80236e0:	2b00      	cmp	r3, #0
 80236e2:	da00      	bge.n	80236e6 <_free_r+0x12>
 80236e4:	18e4      	adds	r4, r4, r3
 80236e6:	0028      	movs	r0, r5
 80236e8:	f000 fc56 	bl	8023f98 <__malloc_lock>
 80236ec:	4a1d      	ldr	r2, [pc, #116]	@ (8023764 <_free_r+0x90>)
 80236ee:	6813      	ldr	r3, [r2, #0]
 80236f0:	2b00      	cmp	r3, #0
 80236f2:	d105      	bne.n	8023700 <_free_r+0x2c>
 80236f4:	6063      	str	r3, [r4, #4]
 80236f6:	6014      	str	r4, [r2, #0]
 80236f8:	0028      	movs	r0, r5
 80236fa:	f000 fc55 	bl	8023fa8 <__malloc_unlock>
 80236fe:	bd70      	pop	{r4, r5, r6, pc}
 8023700:	42a3      	cmp	r3, r4
 8023702:	d908      	bls.n	8023716 <_free_r+0x42>
 8023704:	6820      	ldr	r0, [r4, #0]
 8023706:	1821      	adds	r1, r4, r0
 8023708:	428b      	cmp	r3, r1
 802370a:	d1f3      	bne.n	80236f4 <_free_r+0x20>
 802370c:	6819      	ldr	r1, [r3, #0]
 802370e:	685b      	ldr	r3, [r3, #4]
 8023710:	1809      	adds	r1, r1, r0
 8023712:	6021      	str	r1, [r4, #0]
 8023714:	e7ee      	b.n	80236f4 <_free_r+0x20>
 8023716:	001a      	movs	r2, r3
 8023718:	685b      	ldr	r3, [r3, #4]
 802371a:	2b00      	cmp	r3, #0
 802371c:	d001      	beq.n	8023722 <_free_r+0x4e>
 802371e:	42a3      	cmp	r3, r4
 8023720:	d9f9      	bls.n	8023716 <_free_r+0x42>
 8023722:	6811      	ldr	r1, [r2, #0]
 8023724:	1850      	adds	r0, r2, r1
 8023726:	42a0      	cmp	r0, r4
 8023728:	d10b      	bne.n	8023742 <_free_r+0x6e>
 802372a:	6820      	ldr	r0, [r4, #0]
 802372c:	1809      	adds	r1, r1, r0
 802372e:	1850      	adds	r0, r2, r1
 8023730:	6011      	str	r1, [r2, #0]
 8023732:	4283      	cmp	r3, r0
 8023734:	d1e0      	bne.n	80236f8 <_free_r+0x24>
 8023736:	6818      	ldr	r0, [r3, #0]
 8023738:	685b      	ldr	r3, [r3, #4]
 802373a:	1841      	adds	r1, r0, r1
 802373c:	6011      	str	r1, [r2, #0]
 802373e:	6053      	str	r3, [r2, #4]
 8023740:	e7da      	b.n	80236f8 <_free_r+0x24>
 8023742:	42a0      	cmp	r0, r4
 8023744:	d902      	bls.n	802374c <_free_r+0x78>
 8023746:	230c      	movs	r3, #12
 8023748:	602b      	str	r3, [r5, #0]
 802374a:	e7d5      	b.n	80236f8 <_free_r+0x24>
 802374c:	6820      	ldr	r0, [r4, #0]
 802374e:	1821      	adds	r1, r4, r0
 8023750:	428b      	cmp	r3, r1
 8023752:	d103      	bne.n	802375c <_free_r+0x88>
 8023754:	6819      	ldr	r1, [r3, #0]
 8023756:	685b      	ldr	r3, [r3, #4]
 8023758:	1809      	adds	r1, r1, r0
 802375a:	6021      	str	r1, [r4, #0]
 802375c:	6063      	str	r3, [r4, #4]
 802375e:	6054      	str	r4, [r2, #4]
 8023760:	e7ca      	b.n	80236f8 <_free_r+0x24>
 8023762:	46c0      	nop			@ (mov r8, r8)
 8023764:	2000357c 	.word	0x2000357c

08023768 <rshift>:
 8023768:	0002      	movs	r2, r0
 802376a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802376c:	6904      	ldr	r4, [r0, #16]
 802376e:	b085      	sub	sp, #20
 8023770:	3214      	adds	r2, #20
 8023772:	114b      	asrs	r3, r1, #5
 8023774:	0016      	movs	r6, r2
 8023776:	9302      	str	r3, [sp, #8]
 8023778:	429c      	cmp	r4, r3
 802377a:	dd31      	ble.n	80237e0 <rshift+0x78>
 802377c:	261f      	movs	r6, #31
 802377e:	000f      	movs	r7, r1
 8023780:	009b      	lsls	r3, r3, #2
 8023782:	00a5      	lsls	r5, r4, #2
 8023784:	18d3      	adds	r3, r2, r3
 8023786:	4037      	ands	r7, r6
 8023788:	1955      	adds	r5, r2, r5
 802378a:	9300      	str	r3, [sp, #0]
 802378c:	9701      	str	r7, [sp, #4]
 802378e:	4231      	tst	r1, r6
 8023790:	d10d      	bne.n	80237ae <rshift+0x46>
 8023792:	0016      	movs	r6, r2
 8023794:	0019      	movs	r1, r3
 8023796:	428d      	cmp	r5, r1
 8023798:	d836      	bhi.n	8023808 <rshift+0xa0>
 802379a:	9b00      	ldr	r3, [sp, #0]
 802379c:	2600      	movs	r6, #0
 802379e:	3b03      	subs	r3, #3
 80237a0:	429d      	cmp	r5, r3
 80237a2:	d302      	bcc.n	80237aa <rshift+0x42>
 80237a4:	9b02      	ldr	r3, [sp, #8]
 80237a6:	1ae4      	subs	r4, r4, r3
 80237a8:	00a6      	lsls	r6, r4, #2
 80237aa:	1996      	adds	r6, r2, r6
 80237ac:	e018      	b.n	80237e0 <rshift+0x78>
 80237ae:	2120      	movs	r1, #32
 80237b0:	9e01      	ldr	r6, [sp, #4]
 80237b2:	9f01      	ldr	r7, [sp, #4]
 80237b4:	1b89      	subs	r1, r1, r6
 80237b6:	9e00      	ldr	r6, [sp, #0]
 80237b8:	9103      	str	r1, [sp, #12]
 80237ba:	ce02      	ldmia	r6!, {r1}
 80237bc:	4694      	mov	ip, r2
 80237be:	40f9      	lsrs	r1, r7
 80237c0:	42b5      	cmp	r5, r6
 80237c2:	d816      	bhi.n	80237f2 <rshift+0x8a>
 80237c4:	9b00      	ldr	r3, [sp, #0]
 80237c6:	2600      	movs	r6, #0
 80237c8:	3301      	adds	r3, #1
 80237ca:	429d      	cmp	r5, r3
 80237cc:	d303      	bcc.n	80237d6 <rshift+0x6e>
 80237ce:	9b02      	ldr	r3, [sp, #8]
 80237d0:	1ae4      	subs	r4, r4, r3
 80237d2:	00a6      	lsls	r6, r4, #2
 80237d4:	3e04      	subs	r6, #4
 80237d6:	1996      	adds	r6, r2, r6
 80237d8:	6031      	str	r1, [r6, #0]
 80237da:	2900      	cmp	r1, #0
 80237dc:	d000      	beq.n	80237e0 <rshift+0x78>
 80237de:	3604      	adds	r6, #4
 80237e0:	1ab1      	subs	r1, r6, r2
 80237e2:	1089      	asrs	r1, r1, #2
 80237e4:	6101      	str	r1, [r0, #16]
 80237e6:	4296      	cmp	r6, r2
 80237e8:	d101      	bne.n	80237ee <rshift+0x86>
 80237ea:	2300      	movs	r3, #0
 80237ec:	6143      	str	r3, [r0, #20]
 80237ee:	b005      	add	sp, #20
 80237f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80237f2:	6837      	ldr	r7, [r6, #0]
 80237f4:	9b03      	ldr	r3, [sp, #12]
 80237f6:	409f      	lsls	r7, r3
 80237f8:	430f      	orrs	r7, r1
 80237fa:	4661      	mov	r1, ip
 80237fc:	c180      	stmia	r1!, {r7}
 80237fe:	468c      	mov	ip, r1
 8023800:	9b01      	ldr	r3, [sp, #4]
 8023802:	ce02      	ldmia	r6!, {r1}
 8023804:	40d9      	lsrs	r1, r3
 8023806:	e7db      	b.n	80237c0 <rshift+0x58>
 8023808:	c980      	ldmia	r1!, {r7}
 802380a:	c680      	stmia	r6!, {r7}
 802380c:	e7c3      	b.n	8023796 <rshift+0x2e>

0802380e <__hexdig_fun>:
 802380e:	0002      	movs	r2, r0
 8023810:	3a30      	subs	r2, #48	@ 0x30
 8023812:	0003      	movs	r3, r0
 8023814:	2a09      	cmp	r2, #9
 8023816:	d802      	bhi.n	802381e <__hexdig_fun+0x10>
 8023818:	3b20      	subs	r3, #32
 802381a:	b2d8      	uxtb	r0, r3
 802381c:	4770      	bx	lr
 802381e:	0002      	movs	r2, r0
 8023820:	3a61      	subs	r2, #97	@ 0x61
 8023822:	2a05      	cmp	r2, #5
 8023824:	d801      	bhi.n	802382a <__hexdig_fun+0x1c>
 8023826:	3b47      	subs	r3, #71	@ 0x47
 8023828:	e7f7      	b.n	802381a <__hexdig_fun+0xc>
 802382a:	001a      	movs	r2, r3
 802382c:	3a41      	subs	r2, #65	@ 0x41
 802382e:	2000      	movs	r0, #0
 8023830:	2a05      	cmp	r2, #5
 8023832:	d8f3      	bhi.n	802381c <__hexdig_fun+0xe>
 8023834:	3b27      	subs	r3, #39	@ 0x27
 8023836:	e7f0      	b.n	802381a <__hexdig_fun+0xc>

08023838 <__gethex>:
 8023838:	b5f0      	push	{r4, r5, r6, r7, lr}
 802383a:	b089      	sub	sp, #36	@ 0x24
 802383c:	9307      	str	r3, [sp, #28]
 802383e:	680b      	ldr	r3, [r1, #0]
 8023840:	9201      	str	r2, [sp, #4]
 8023842:	9003      	str	r0, [sp, #12]
 8023844:	9106      	str	r1, [sp, #24]
 8023846:	1c9a      	adds	r2, r3, #2
 8023848:	0011      	movs	r1, r2
 802384a:	3201      	adds	r2, #1
 802384c:	1e50      	subs	r0, r2, #1
 802384e:	7800      	ldrb	r0, [r0, #0]
 8023850:	2830      	cmp	r0, #48	@ 0x30
 8023852:	d0f9      	beq.n	8023848 <__gethex+0x10>
 8023854:	1acb      	subs	r3, r1, r3
 8023856:	3b02      	subs	r3, #2
 8023858:	9305      	str	r3, [sp, #20]
 802385a:	9100      	str	r1, [sp, #0]
 802385c:	f7ff ffd7 	bl	802380e <__hexdig_fun>
 8023860:	2300      	movs	r3, #0
 8023862:	001d      	movs	r5, r3
 8023864:	9302      	str	r3, [sp, #8]
 8023866:	4298      	cmp	r0, r3
 8023868:	d11e      	bne.n	80238a8 <__gethex+0x70>
 802386a:	2201      	movs	r2, #1
 802386c:	49a6      	ldr	r1, [pc, #664]	@ (8023b08 <__gethex+0x2d0>)
 802386e:	9800      	ldr	r0, [sp, #0]
 8023870:	f7fe ffd8 	bl	8022824 <strncmp>
 8023874:	0007      	movs	r7, r0
 8023876:	42a8      	cmp	r0, r5
 8023878:	d000      	beq.n	802387c <__gethex+0x44>
 802387a:	e06a      	b.n	8023952 <__gethex+0x11a>
 802387c:	9b00      	ldr	r3, [sp, #0]
 802387e:	7858      	ldrb	r0, [r3, #1]
 8023880:	1c5c      	adds	r4, r3, #1
 8023882:	f7ff ffc4 	bl	802380e <__hexdig_fun>
 8023886:	2301      	movs	r3, #1
 8023888:	9302      	str	r3, [sp, #8]
 802388a:	42a8      	cmp	r0, r5
 802388c:	d02f      	beq.n	80238ee <__gethex+0xb6>
 802388e:	9400      	str	r4, [sp, #0]
 8023890:	9b00      	ldr	r3, [sp, #0]
 8023892:	7818      	ldrb	r0, [r3, #0]
 8023894:	2830      	cmp	r0, #48	@ 0x30
 8023896:	d009      	beq.n	80238ac <__gethex+0x74>
 8023898:	f7ff ffb9 	bl	802380e <__hexdig_fun>
 802389c:	4242      	negs	r2, r0
 802389e:	4142      	adcs	r2, r0
 80238a0:	2301      	movs	r3, #1
 80238a2:	0025      	movs	r5, r4
 80238a4:	9202      	str	r2, [sp, #8]
 80238a6:	9305      	str	r3, [sp, #20]
 80238a8:	9c00      	ldr	r4, [sp, #0]
 80238aa:	e004      	b.n	80238b6 <__gethex+0x7e>
 80238ac:	9b00      	ldr	r3, [sp, #0]
 80238ae:	3301      	adds	r3, #1
 80238b0:	9300      	str	r3, [sp, #0]
 80238b2:	e7ed      	b.n	8023890 <__gethex+0x58>
 80238b4:	3401      	adds	r4, #1
 80238b6:	7820      	ldrb	r0, [r4, #0]
 80238b8:	f7ff ffa9 	bl	802380e <__hexdig_fun>
 80238bc:	1e07      	subs	r7, r0, #0
 80238be:	d1f9      	bne.n	80238b4 <__gethex+0x7c>
 80238c0:	2201      	movs	r2, #1
 80238c2:	0020      	movs	r0, r4
 80238c4:	4990      	ldr	r1, [pc, #576]	@ (8023b08 <__gethex+0x2d0>)
 80238c6:	f7fe ffad 	bl	8022824 <strncmp>
 80238ca:	2800      	cmp	r0, #0
 80238cc:	d10d      	bne.n	80238ea <__gethex+0xb2>
 80238ce:	2d00      	cmp	r5, #0
 80238d0:	d106      	bne.n	80238e0 <__gethex+0xa8>
 80238d2:	3401      	adds	r4, #1
 80238d4:	0025      	movs	r5, r4
 80238d6:	7820      	ldrb	r0, [r4, #0]
 80238d8:	f7ff ff99 	bl	802380e <__hexdig_fun>
 80238dc:	2800      	cmp	r0, #0
 80238de:	d102      	bne.n	80238e6 <__gethex+0xae>
 80238e0:	1b2d      	subs	r5, r5, r4
 80238e2:	00af      	lsls	r7, r5, #2
 80238e4:	e003      	b.n	80238ee <__gethex+0xb6>
 80238e6:	3401      	adds	r4, #1
 80238e8:	e7f5      	b.n	80238d6 <__gethex+0x9e>
 80238ea:	2d00      	cmp	r5, #0
 80238ec:	d1f8      	bne.n	80238e0 <__gethex+0xa8>
 80238ee:	2220      	movs	r2, #32
 80238f0:	7823      	ldrb	r3, [r4, #0]
 80238f2:	0026      	movs	r6, r4
 80238f4:	4393      	bics	r3, r2
 80238f6:	2b50      	cmp	r3, #80	@ 0x50
 80238f8:	d11d      	bne.n	8023936 <__gethex+0xfe>
 80238fa:	7863      	ldrb	r3, [r4, #1]
 80238fc:	2b2b      	cmp	r3, #43	@ 0x2b
 80238fe:	d02d      	beq.n	802395c <__gethex+0x124>
 8023900:	2b2d      	cmp	r3, #45	@ 0x2d
 8023902:	d02f      	beq.n	8023964 <__gethex+0x12c>
 8023904:	2300      	movs	r3, #0
 8023906:	1c66      	adds	r6, r4, #1
 8023908:	9304      	str	r3, [sp, #16]
 802390a:	7830      	ldrb	r0, [r6, #0]
 802390c:	f7ff ff7f 	bl	802380e <__hexdig_fun>
 8023910:	1e43      	subs	r3, r0, #1
 8023912:	b2db      	uxtb	r3, r3
 8023914:	0005      	movs	r5, r0
 8023916:	2b18      	cmp	r3, #24
 8023918:	d82a      	bhi.n	8023970 <__gethex+0x138>
 802391a:	7870      	ldrb	r0, [r6, #1]
 802391c:	f7ff ff77 	bl	802380e <__hexdig_fun>
 8023920:	1e43      	subs	r3, r0, #1
 8023922:	b2db      	uxtb	r3, r3
 8023924:	3601      	adds	r6, #1
 8023926:	3d10      	subs	r5, #16
 8023928:	2b18      	cmp	r3, #24
 802392a:	d91d      	bls.n	8023968 <__gethex+0x130>
 802392c:	9b04      	ldr	r3, [sp, #16]
 802392e:	2b00      	cmp	r3, #0
 8023930:	d000      	beq.n	8023934 <__gethex+0xfc>
 8023932:	426d      	negs	r5, r5
 8023934:	197f      	adds	r7, r7, r5
 8023936:	9b06      	ldr	r3, [sp, #24]
 8023938:	601e      	str	r6, [r3, #0]
 802393a:	9b02      	ldr	r3, [sp, #8]
 802393c:	2b00      	cmp	r3, #0
 802393e:	d019      	beq.n	8023974 <__gethex+0x13c>
 8023940:	9b05      	ldr	r3, [sp, #20]
 8023942:	2606      	movs	r6, #6
 8023944:	425a      	negs	r2, r3
 8023946:	4153      	adcs	r3, r2
 8023948:	425b      	negs	r3, r3
 802394a:	401e      	ands	r6, r3
 802394c:	0030      	movs	r0, r6
 802394e:	b009      	add	sp, #36	@ 0x24
 8023950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023952:	2301      	movs	r3, #1
 8023954:	2700      	movs	r7, #0
 8023956:	9c00      	ldr	r4, [sp, #0]
 8023958:	9302      	str	r3, [sp, #8]
 802395a:	e7c8      	b.n	80238ee <__gethex+0xb6>
 802395c:	2300      	movs	r3, #0
 802395e:	9304      	str	r3, [sp, #16]
 8023960:	1ca6      	adds	r6, r4, #2
 8023962:	e7d2      	b.n	802390a <__gethex+0xd2>
 8023964:	2301      	movs	r3, #1
 8023966:	e7fa      	b.n	802395e <__gethex+0x126>
 8023968:	230a      	movs	r3, #10
 802396a:	435d      	muls	r5, r3
 802396c:	182d      	adds	r5, r5, r0
 802396e:	e7d4      	b.n	802391a <__gethex+0xe2>
 8023970:	0026      	movs	r6, r4
 8023972:	e7e0      	b.n	8023936 <__gethex+0xfe>
 8023974:	9b00      	ldr	r3, [sp, #0]
 8023976:	9902      	ldr	r1, [sp, #8]
 8023978:	1ae3      	subs	r3, r4, r3
 802397a:	3b01      	subs	r3, #1
 802397c:	2b07      	cmp	r3, #7
 802397e:	dc0a      	bgt.n	8023996 <__gethex+0x15e>
 8023980:	9803      	ldr	r0, [sp, #12]
 8023982:	f000 fb19 	bl	8023fb8 <_Balloc>
 8023986:	1e05      	subs	r5, r0, #0
 8023988:	d108      	bne.n	802399c <__gethex+0x164>
 802398a:	002a      	movs	r2, r5
 802398c:	21e4      	movs	r1, #228	@ 0xe4
 802398e:	4b5f      	ldr	r3, [pc, #380]	@ (8023b0c <__gethex+0x2d4>)
 8023990:	485f      	ldr	r0, [pc, #380]	@ (8023b10 <__gethex+0x2d8>)
 8023992:	f001 fbf1 	bl	8025178 <__assert_func>
 8023996:	3101      	adds	r1, #1
 8023998:	105b      	asrs	r3, r3, #1
 802399a:	e7ef      	b.n	802397c <__gethex+0x144>
 802399c:	0003      	movs	r3, r0
 802399e:	3314      	adds	r3, #20
 80239a0:	9302      	str	r3, [sp, #8]
 80239a2:	9305      	str	r3, [sp, #20]
 80239a4:	2300      	movs	r3, #0
 80239a6:	001e      	movs	r6, r3
 80239a8:	9304      	str	r3, [sp, #16]
 80239aa:	9b00      	ldr	r3, [sp, #0]
 80239ac:	42a3      	cmp	r3, r4
 80239ae:	d338      	bcc.n	8023a22 <__gethex+0x1ea>
 80239b0:	9c05      	ldr	r4, [sp, #20]
 80239b2:	9b02      	ldr	r3, [sp, #8]
 80239b4:	c440      	stmia	r4!, {r6}
 80239b6:	1ae4      	subs	r4, r4, r3
 80239b8:	10a4      	asrs	r4, r4, #2
 80239ba:	0030      	movs	r0, r6
 80239bc:	612c      	str	r4, [r5, #16]
 80239be:	f000 fbf3 	bl	80241a8 <__hi0bits>
 80239c2:	9b01      	ldr	r3, [sp, #4]
 80239c4:	0164      	lsls	r4, r4, #5
 80239c6:	681b      	ldr	r3, [r3, #0]
 80239c8:	1a26      	subs	r6, r4, r0
 80239ca:	9300      	str	r3, [sp, #0]
 80239cc:	429e      	cmp	r6, r3
 80239ce:	dd52      	ble.n	8023a76 <__gethex+0x23e>
 80239d0:	1af6      	subs	r6, r6, r3
 80239d2:	0031      	movs	r1, r6
 80239d4:	0028      	movs	r0, r5
 80239d6:	f000 ff96 	bl	8024906 <__any_on>
 80239da:	1e04      	subs	r4, r0, #0
 80239dc:	d00f      	beq.n	80239fe <__gethex+0x1c6>
 80239de:	2401      	movs	r4, #1
 80239e0:	231f      	movs	r3, #31
 80239e2:	0020      	movs	r0, r4
 80239e4:	1e72      	subs	r2, r6, #1
 80239e6:	4013      	ands	r3, r2
 80239e8:	4098      	lsls	r0, r3
 80239ea:	0003      	movs	r3, r0
 80239ec:	1151      	asrs	r1, r2, #5
 80239ee:	9802      	ldr	r0, [sp, #8]
 80239f0:	0089      	lsls	r1, r1, #2
 80239f2:	5809      	ldr	r1, [r1, r0]
 80239f4:	4219      	tst	r1, r3
 80239f6:	d002      	beq.n	80239fe <__gethex+0x1c6>
 80239f8:	42a2      	cmp	r2, r4
 80239fa:	dc34      	bgt.n	8023a66 <__gethex+0x22e>
 80239fc:	2402      	movs	r4, #2
 80239fe:	0031      	movs	r1, r6
 8023a00:	0028      	movs	r0, r5
 8023a02:	f7ff feb1 	bl	8023768 <rshift>
 8023a06:	19bf      	adds	r7, r7, r6
 8023a08:	9b01      	ldr	r3, [sp, #4]
 8023a0a:	689b      	ldr	r3, [r3, #8]
 8023a0c:	42bb      	cmp	r3, r7
 8023a0e:	da42      	bge.n	8023a96 <__gethex+0x25e>
 8023a10:	0029      	movs	r1, r5
 8023a12:	9803      	ldr	r0, [sp, #12]
 8023a14:	f000 fb14 	bl	8024040 <_Bfree>
 8023a18:	2300      	movs	r3, #0
 8023a1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023a1c:	26a3      	movs	r6, #163	@ 0xa3
 8023a1e:	6013      	str	r3, [r2, #0]
 8023a20:	e794      	b.n	802394c <__gethex+0x114>
 8023a22:	3c01      	subs	r4, #1
 8023a24:	7823      	ldrb	r3, [r4, #0]
 8023a26:	2b2e      	cmp	r3, #46	@ 0x2e
 8023a28:	d012      	beq.n	8023a50 <__gethex+0x218>
 8023a2a:	9b04      	ldr	r3, [sp, #16]
 8023a2c:	2b20      	cmp	r3, #32
 8023a2e:	d104      	bne.n	8023a3a <__gethex+0x202>
 8023a30:	9b05      	ldr	r3, [sp, #20]
 8023a32:	c340      	stmia	r3!, {r6}
 8023a34:	2600      	movs	r6, #0
 8023a36:	9305      	str	r3, [sp, #20]
 8023a38:	9604      	str	r6, [sp, #16]
 8023a3a:	7820      	ldrb	r0, [r4, #0]
 8023a3c:	f7ff fee7 	bl	802380e <__hexdig_fun>
 8023a40:	230f      	movs	r3, #15
 8023a42:	4018      	ands	r0, r3
 8023a44:	9b04      	ldr	r3, [sp, #16]
 8023a46:	4098      	lsls	r0, r3
 8023a48:	3304      	adds	r3, #4
 8023a4a:	4306      	orrs	r6, r0
 8023a4c:	9304      	str	r3, [sp, #16]
 8023a4e:	e7ac      	b.n	80239aa <__gethex+0x172>
 8023a50:	9b00      	ldr	r3, [sp, #0]
 8023a52:	42a3      	cmp	r3, r4
 8023a54:	d8e9      	bhi.n	8023a2a <__gethex+0x1f2>
 8023a56:	2201      	movs	r2, #1
 8023a58:	0020      	movs	r0, r4
 8023a5a:	492b      	ldr	r1, [pc, #172]	@ (8023b08 <__gethex+0x2d0>)
 8023a5c:	f7fe fee2 	bl	8022824 <strncmp>
 8023a60:	2800      	cmp	r0, #0
 8023a62:	d1e2      	bne.n	8023a2a <__gethex+0x1f2>
 8023a64:	e7a1      	b.n	80239aa <__gethex+0x172>
 8023a66:	0028      	movs	r0, r5
 8023a68:	1eb1      	subs	r1, r6, #2
 8023a6a:	f000 ff4c 	bl	8024906 <__any_on>
 8023a6e:	2800      	cmp	r0, #0
 8023a70:	d0c4      	beq.n	80239fc <__gethex+0x1c4>
 8023a72:	2403      	movs	r4, #3
 8023a74:	e7c3      	b.n	80239fe <__gethex+0x1c6>
 8023a76:	9b00      	ldr	r3, [sp, #0]
 8023a78:	2400      	movs	r4, #0
 8023a7a:	429e      	cmp	r6, r3
 8023a7c:	dac4      	bge.n	8023a08 <__gethex+0x1d0>
 8023a7e:	1b9e      	subs	r6, r3, r6
 8023a80:	0029      	movs	r1, r5
 8023a82:	0032      	movs	r2, r6
 8023a84:	9803      	ldr	r0, [sp, #12]
 8023a86:	f000 fd05 	bl	8024494 <__lshift>
 8023a8a:	0003      	movs	r3, r0
 8023a8c:	3314      	adds	r3, #20
 8023a8e:	0005      	movs	r5, r0
 8023a90:	1bbf      	subs	r7, r7, r6
 8023a92:	9302      	str	r3, [sp, #8]
 8023a94:	e7b8      	b.n	8023a08 <__gethex+0x1d0>
 8023a96:	9b01      	ldr	r3, [sp, #4]
 8023a98:	685e      	ldr	r6, [r3, #4]
 8023a9a:	42be      	cmp	r6, r7
 8023a9c:	dd6f      	ble.n	8023b7e <__gethex+0x346>
 8023a9e:	9b00      	ldr	r3, [sp, #0]
 8023aa0:	1bf6      	subs	r6, r6, r7
 8023aa2:	42b3      	cmp	r3, r6
 8023aa4:	dc36      	bgt.n	8023b14 <__gethex+0x2dc>
 8023aa6:	9b01      	ldr	r3, [sp, #4]
 8023aa8:	68db      	ldr	r3, [r3, #12]
 8023aaa:	2b02      	cmp	r3, #2
 8023aac:	d024      	beq.n	8023af8 <__gethex+0x2c0>
 8023aae:	2b03      	cmp	r3, #3
 8023ab0:	d026      	beq.n	8023b00 <__gethex+0x2c8>
 8023ab2:	2b01      	cmp	r3, #1
 8023ab4:	d117      	bne.n	8023ae6 <__gethex+0x2ae>
 8023ab6:	9b00      	ldr	r3, [sp, #0]
 8023ab8:	42b3      	cmp	r3, r6
 8023aba:	d114      	bne.n	8023ae6 <__gethex+0x2ae>
 8023abc:	2b01      	cmp	r3, #1
 8023abe:	d10b      	bne.n	8023ad8 <__gethex+0x2a0>
 8023ac0:	9b01      	ldr	r3, [sp, #4]
 8023ac2:	9a07      	ldr	r2, [sp, #28]
 8023ac4:	685b      	ldr	r3, [r3, #4]
 8023ac6:	2662      	movs	r6, #98	@ 0x62
 8023ac8:	6013      	str	r3, [r2, #0]
 8023aca:	2301      	movs	r3, #1
 8023acc:	9a02      	ldr	r2, [sp, #8]
 8023ace:	612b      	str	r3, [r5, #16]
 8023ad0:	6013      	str	r3, [r2, #0]
 8023ad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023ad4:	601d      	str	r5, [r3, #0]
 8023ad6:	e739      	b.n	802394c <__gethex+0x114>
 8023ad8:	9900      	ldr	r1, [sp, #0]
 8023ada:	0028      	movs	r0, r5
 8023adc:	3901      	subs	r1, #1
 8023ade:	f000 ff12 	bl	8024906 <__any_on>
 8023ae2:	2800      	cmp	r0, #0
 8023ae4:	d1ec      	bne.n	8023ac0 <__gethex+0x288>
 8023ae6:	0029      	movs	r1, r5
 8023ae8:	9803      	ldr	r0, [sp, #12]
 8023aea:	f000 faa9 	bl	8024040 <_Bfree>
 8023aee:	2300      	movs	r3, #0
 8023af0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023af2:	2650      	movs	r6, #80	@ 0x50
 8023af4:	6013      	str	r3, [r2, #0]
 8023af6:	e729      	b.n	802394c <__gethex+0x114>
 8023af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023afa:	2b00      	cmp	r3, #0
 8023afc:	d1f3      	bne.n	8023ae6 <__gethex+0x2ae>
 8023afe:	e7df      	b.n	8023ac0 <__gethex+0x288>
 8023b00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023b02:	2b00      	cmp	r3, #0
 8023b04:	d1dc      	bne.n	8023ac0 <__gethex+0x288>
 8023b06:	e7ee      	b.n	8023ae6 <__gethex+0x2ae>
 8023b08:	08029020 	.word	0x08029020
 8023b0c:	08029231 	.word	0x08029231
 8023b10:	08029242 	.word	0x08029242
 8023b14:	1e77      	subs	r7, r6, #1
 8023b16:	2c00      	cmp	r4, #0
 8023b18:	d12f      	bne.n	8023b7a <__gethex+0x342>
 8023b1a:	2f00      	cmp	r7, #0
 8023b1c:	d004      	beq.n	8023b28 <__gethex+0x2f0>
 8023b1e:	0039      	movs	r1, r7
 8023b20:	0028      	movs	r0, r5
 8023b22:	f000 fef0 	bl	8024906 <__any_on>
 8023b26:	0004      	movs	r4, r0
 8023b28:	231f      	movs	r3, #31
 8023b2a:	117a      	asrs	r2, r7, #5
 8023b2c:	401f      	ands	r7, r3
 8023b2e:	3b1e      	subs	r3, #30
 8023b30:	40bb      	lsls	r3, r7
 8023b32:	9902      	ldr	r1, [sp, #8]
 8023b34:	0092      	lsls	r2, r2, #2
 8023b36:	5852      	ldr	r2, [r2, r1]
 8023b38:	421a      	tst	r2, r3
 8023b3a:	d001      	beq.n	8023b40 <__gethex+0x308>
 8023b3c:	2302      	movs	r3, #2
 8023b3e:	431c      	orrs	r4, r3
 8023b40:	9b00      	ldr	r3, [sp, #0]
 8023b42:	0031      	movs	r1, r6
 8023b44:	1b9b      	subs	r3, r3, r6
 8023b46:	2602      	movs	r6, #2
 8023b48:	0028      	movs	r0, r5
 8023b4a:	9300      	str	r3, [sp, #0]
 8023b4c:	f7ff fe0c 	bl	8023768 <rshift>
 8023b50:	9b01      	ldr	r3, [sp, #4]
 8023b52:	685f      	ldr	r7, [r3, #4]
 8023b54:	2c00      	cmp	r4, #0
 8023b56:	d03f      	beq.n	8023bd8 <__gethex+0x3a0>
 8023b58:	9b01      	ldr	r3, [sp, #4]
 8023b5a:	68db      	ldr	r3, [r3, #12]
 8023b5c:	2b02      	cmp	r3, #2
 8023b5e:	d010      	beq.n	8023b82 <__gethex+0x34a>
 8023b60:	2b03      	cmp	r3, #3
 8023b62:	d012      	beq.n	8023b8a <__gethex+0x352>
 8023b64:	2b01      	cmp	r3, #1
 8023b66:	d106      	bne.n	8023b76 <__gethex+0x33e>
 8023b68:	07a2      	lsls	r2, r4, #30
 8023b6a:	d504      	bpl.n	8023b76 <__gethex+0x33e>
 8023b6c:	9a02      	ldr	r2, [sp, #8]
 8023b6e:	6812      	ldr	r2, [r2, #0]
 8023b70:	4314      	orrs	r4, r2
 8023b72:	421c      	tst	r4, r3
 8023b74:	d10c      	bne.n	8023b90 <__gethex+0x358>
 8023b76:	2310      	movs	r3, #16
 8023b78:	e02d      	b.n	8023bd6 <__gethex+0x39e>
 8023b7a:	2401      	movs	r4, #1
 8023b7c:	e7d4      	b.n	8023b28 <__gethex+0x2f0>
 8023b7e:	2601      	movs	r6, #1
 8023b80:	e7e8      	b.n	8023b54 <__gethex+0x31c>
 8023b82:	2301      	movs	r3, #1
 8023b84:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023b86:	1a9b      	subs	r3, r3, r2
 8023b88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023b8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023b8c:	2b00      	cmp	r3, #0
 8023b8e:	d0f2      	beq.n	8023b76 <__gethex+0x33e>
 8023b90:	692b      	ldr	r3, [r5, #16]
 8023b92:	2000      	movs	r0, #0
 8023b94:	9302      	str	r3, [sp, #8]
 8023b96:	009b      	lsls	r3, r3, #2
 8023b98:	9304      	str	r3, [sp, #16]
 8023b9a:	002b      	movs	r3, r5
 8023b9c:	9a04      	ldr	r2, [sp, #16]
 8023b9e:	3314      	adds	r3, #20
 8023ba0:	1899      	adds	r1, r3, r2
 8023ba2:	681a      	ldr	r2, [r3, #0]
 8023ba4:	1c54      	adds	r4, r2, #1
 8023ba6:	d01c      	beq.n	8023be2 <__gethex+0x3aa>
 8023ba8:	3201      	adds	r2, #1
 8023baa:	601a      	str	r2, [r3, #0]
 8023bac:	002b      	movs	r3, r5
 8023bae:	3314      	adds	r3, #20
 8023bb0:	2e02      	cmp	r6, #2
 8023bb2:	d13f      	bne.n	8023c34 <__gethex+0x3fc>
 8023bb4:	9a01      	ldr	r2, [sp, #4]
 8023bb6:	9900      	ldr	r1, [sp, #0]
 8023bb8:	6812      	ldr	r2, [r2, #0]
 8023bba:	3a01      	subs	r2, #1
 8023bbc:	428a      	cmp	r2, r1
 8023bbe:	d109      	bne.n	8023bd4 <__gethex+0x39c>
 8023bc0:	000a      	movs	r2, r1
 8023bc2:	201f      	movs	r0, #31
 8023bc4:	4010      	ands	r0, r2
 8023bc6:	2201      	movs	r2, #1
 8023bc8:	4082      	lsls	r2, r0
 8023bca:	1149      	asrs	r1, r1, #5
 8023bcc:	0089      	lsls	r1, r1, #2
 8023bce:	58cb      	ldr	r3, [r1, r3]
 8023bd0:	4213      	tst	r3, r2
 8023bd2:	d13d      	bne.n	8023c50 <__gethex+0x418>
 8023bd4:	2320      	movs	r3, #32
 8023bd6:	431e      	orrs	r6, r3
 8023bd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023bda:	601d      	str	r5, [r3, #0]
 8023bdc:	9b07      	ldr	r3, [sp, #28]
 8023bde:	601f      	str	r7, [r3, #0]
 8023be0:	e6b4      	b.n	802394c <__gethex+0x114>
 8023be2:	c301      	stmia	r3!, {r0}
 8023be4:	4299      	cmp	r1, r3
 8023be6:	d8dc      	bhi.n	8023ba2 <__gethex+0x36a>
 8023be8:	68ab      	ldr	r3, [r5, #8]
 8023bea:	9a02      	ldr	r2, [sp, #8]
 8023bec:	429a      	cmp	r2, r3
 8023bee:	db18      	blt.n	8023c22 <__gethex+0x3ea>
 8023bf0:	6869      	ldr	r1, [r5, #4]
 8023bf2:	9803      	ldr	r0, [sp, #12]
 8023bf4:	3101      	adds	r1, #1
 8023bf6:	f000 f9df 	bl	8023fb8 <_Balloc>
 8023bfa:	1e04      	subs	r4, r0, #0
 8023bfc:	d104      	bne.n	8023c08 <__gethex+0x3d0>
 8023bfe:	0022      	movs	r2, r4
 8023c00:	2184      	movs	r1, #132	@ 0x84
 8023c02:	4b1d      	ldr	r3, [pc, #116]	@ (8023c78 <__gethex+0x440>)
 8023c04:	481d      	ldr	r0, [pc, #116]	@ (8023c7c <__gethex+0x444>)
 8023c06:	e6c4      	b.n	8023992 <__gethex+0x15a>
 8023c08:	0029      	movs	r1, r5
 8023c0a:	692a      	ldr	r2, [r5, #16]
 8023c0c:	310c      	adds	r1, #12
 8023c0e:	3202      	adds	r2, #2
 8023c10:	0092      	lsls	r2, r2, #2
 8023c12:	300c      	adds	r0, #12
 8023c14:	f7fe fecc 	bl	80229b0 <memcpy>
 8023c18:	0029      	movs	r1, r5
 8023c1a:	9803      	ldr	r0, [sp, #12]
 8023c1c:	f000 fa10 	bl	8024040 <_Bfree>
 8023c20:	0025      	movs	r5, r4
 8023c22:	692b      	ldr	r3, [r5, #16]
 8023c24:	1c5a      	adds	r2, r3, #1
 8023c26:	612a      	str	r2, [r5, #16]
 8023c28:	2201      	movs	r2, #1
 8023c2a:	3304      	adds	r3, #4
 8023c2c:	009b      	lsls	r3, r3, #2
 8023c2e:	18eb      	adds	r3, r5, r3
 8023c30:	605a      	str	r2, [r3, #4]
 8023c32:	e7bb      	b.n	8023bac <__gethex+0x374>
 8023c34:	692a      	ldr	r2, [r5, #16]
 8023c36:	9902      	ldr	r1, [sp, #8]
 8023c38:	428a      	cmp	r2, r1
 8023c3a:	dd0b      	ble.n	8023c54 <__gethex+0x41c>
 8023c3c:	2101      	movs	r1, #1
 8023c3e:	0028      	movs	r0, r5
 8023c40:	f7ff fd92 	bl	8023768 <rshift>
 8023c44:	9b01      	ldr	r3, [sp, #4]
 8023c46:	3701      	adds	r7, #1
 8023c48:	689b      	ldr	r3, [r3, #8]
 8023c4a:	42bb      	cmp	r3, r7
 8023c4c:	da00      	bge.n	8023c50 <__gethex+0x418>
 8023c4e:	e6df      	b.n	8023a10 <__gethex+0x1d8>
 8023c50:	2601      	movs	r6, #1
 8023c52:	e7bf      	b.n	8023bd4 <__gethex+0x39c>
 8023c54:	221f      	movs	r2, #31
 8023c56:	9c00      	ldr	r4, [sp, #0]
 8023c58:	9900      	ldr	r1, [sp, #0]
 8023c5a:	4014      	ands	r4, r2
 8023c5c:	4211      	tst	r1, r2
 8023c5e:	d0f7      	beq.n	8023c50 <__gethex+0x418>
 8023c60:	9a04      	ldr	r2, [sp, #16]
 8023c62:	189b      	adds	r3, r3, r2
 8023c64:	3b04      	subs	r3, #4
 8023c66:	6818      	ldr	r0, [r3, #0]
 8023c68:	f000 fa9e 	bl	80241a8 <__hi0bits>
 8023c6c:	2320      	movs	r3, #32
 8023c6e:	1b1b      	subs	r3, r3, r4
 8023c70:	4298      	cmp	r0, r3
 8023c72:	dbe3      	blt.n	8023c3c <__gethex+0x404>
 8023c74:	e7ec      	b.n	8023c50 <__gethex+0x418>
 8023c76:	46c0      	nop			@ (mov r8, r8)
 8023c78:	08029231 	.word	0x08029231
 8023c7c:	08029242 	.word	0x08029242

08023c80 <L_shift>:
 8023c80:	2308      	movs	r3, #8
 8023c82:	b570      	push	{r4, r5, r6, lr}
 8023c84:	2520      	movs	r5, #32
 8023c86:	1a9a      	subs	r2, r3, r2
 8023c88:	0092      	lsls	r2, r2, #2
 8023c8a:	1aad      	subs	r5, r5, r2
 8023c8c:	6843      	ldr	r3, [r0, #4]
 8023c8e:	6804      	ldr	r4, [r0, #0]
 8023c90:	001e      	movs	r6, r3
 8023c92:	40ae      	lsls	r6, r5
 8023c94:	40d3      	lsrs	r3, r2
 8023c96:	4334      	orrs	r4, r6
 8023c98:	6004      	str	r4, [r0, #0]
 8023c9a:	6043      	str	r3, [r0, #4]
 8023c9c:	3004      	adds	r0, #4
 8023c9e:	4288      	cmp	r0, r1
 8023ca0:	d3f4      	bcc.n	8023c8c <L_shift+0xc>
 8023ca2:	bd70      	pop	{r4, r5, r6, pc}

08023ca4 <__match>:
 8023ca4:	b530      	push	{r4, r5, lr}
 8023ca6:	6803      	ldr	r3, [r0, #0]
 8023ca8:	780c      	ldrb	r4, [r1, #0]
 8023caa:	3301      	adds	r3, #1
 8023cac:	2c00      	cmp	r4, #0
 8023cae:	d102      	bne.n	8023cb6 <__match+0x12>
 8023cb0:	6003      	str	r3, [r0, #0]
 8023cb2:	2001      	movs	r0, #1
 8023cb4:	bd30      	pop	{r4, r5, pc}
 8023cb6:	781a      	ldrb	r2, [r3, #0]
 8023cb8:	0015      	movs	r5, r2
 8023cba:	3d41      	subs	r5, #65	@ 0x41
 8023cbc:	2d19      	cmp	r5, #25
 8023cbe:	d800      	bhi.n	8023cc2 <__match+0x1e>
 8023cc0:	3220      	adds	r2, #32
 8023cc2:	3101      	adds	r1, #1
 8023cc4:	42a2      	cmp	r2, r4
 8023cc6:	d0ef      	beq.n	8023ca8 <__match+0x4>
 8023cc8:	2000      	movs	r0, #0
 8023cca:	e7f3      	b.n	8023cb4 <__match+0x10>

08023ccc <__hexnan>:
 8023ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023cce:	680b      	ldr	r3, [r1, #0]
 8023cd0:	b08b      	sub	sp, #44	@ 0x2c
 8023cd2:	9201      	str	r2, [sp, #4]
 8023cd4:	9901      	ldr	r1, [sp, #4]
 8023cd6:	115a      	asrs	r2, r3, #5
 8023cd8:	0092      	lsls	r2, r2, #2
 8023cda:	188a      	adds	r2, r1, r2
 8023cdc:	9202      	str	r2, [sp, #8]
 8023cde:	0019      	movs	r1, r3
 8023ce0:	221f      	movs	r2, #31
 8023ce2:	4011      	ands	r1, r2
 8023ce4:	9008      	str	r0, [sp, #32]
 8023ce6:	9106      	str	r1, [sp, #24]
 8023ce8:	4213      	tst	r3, r2
 8023cea:	d002      	beq.n	8023cf2 <__hexnan+0x26>
 8023cec:	9b02      	ldr	r3, [sp, #8]
 8023cee:	3304      	adds	r3, #4
 8023cf0:	9302      	str	r3, [sp, #8]
 8023cf2:	9b02      	ldr	r3, [sp, #8]
 8023cf4:	2500      	movs	r5, #0
 8023cf6:	1f1f      	subs	r7, r3, #4
 8023cf8:	003e      	movs	r6, r7
 8023cfa:	003c      	movs	r4, r7
 8023cfc:	9b08      	ldr	r3, [sp, #32]
 8023cfe:	603d      	str	r5, [r7, #0]
 8023d00:	681b      	ldr	r3, [r3, #0]
 8023d02:	9507      	str	r5, [sp, #28]
 8023d04:	9305      	str	r3, [sp, #20]
 8023d06:	9503      	str	r5, [sp, #12]
 8023d08:	9b05      	ldr	r3, [sp, #20]
 8023d0a:	3301      	adds	r3, #1
 8023d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8023d0e:	9b05      	ldr	r3, [sp, #20]
 8023d10:	785b      	ldrb	r3, [r3, #1]
 8023d12:	9304      	str	r3, [sp, #16]
 8023d14:	2b00      	cmp	r3, #0
 8023d16:	d028      	beq.n	8023d6a <__hexnan+0x9e>
 8023d18:	9804      	ldr	r0, [sp, #16]
 8023d1a:	f7ff fd78 	bl	802380e <__hexdig_fun>
 8023d1e:	2800      	cmp	r0, #0
 8023d20:	d155      	bne.n	8023dce <__hexnan+0x102>
 8023d22:	9b04      	ldr	r3, [sp, #16]
 8023d24:	2b20      	cmp	r3, #32
 8023d26:	d819      	bhi.n	8023d5c <__hexnan+0x90>
 8023d28:	9b03      	ldr	r3, [sp, #12]
 8023d2a:	9a07      	ldr	r2, [sp, #28]
 8023d2c:	4293      	cmp	r3, r2
 8023d2e:	dd12      	ble.n	8023d56 <__hexnan+0x8a>
 8023d30:	42b4      	cmp	r4, r6
 8023d32:	d206      	bcs.n	8023d42 <__hexnan+0x76>
 8023d34:	2d07      	cmp	r5, #7
 8023d36:	dc04      	bgt.n	8023d42 <__hexnan+0x76>
 8023d38:	002a      	movs	r2, r5
 8023d3a:	0031      	movs	r1, r6
 8023d3c:	0020      	movs	r0, r4
 8023d3e:	f7ff ff9f 	bl	8023c80 <L_shift>
 8023d42:	9b01      	ldr	r3, [sp, #4]
 8023d44:	2508      	movs	r5, #8
 8023d46:	429c      	cmp	r4, r3
 8023d48:	d905      	bls.n	8023d56 <__hexnan+0x8a>
 8023d4a:	1f26      	subs	r6, r4, #4
 8023d4c:	2500      	movs	r5, #0
 8023d4e:	0034      	movs	r4, r6
 8023d50:	9b03      	ldr	r3, [sp, #12]
 8023d52:	6035      	str	r5, [r6, #0]
 8023d54:	9307      	str	r3, [sp, #28]
 8023d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d58:	9305      	str	r3, [sp, #20]
 8023d5a:	e7d5      	b.n	8023d08 <__hexnan+0x3c>
 8023d5c:	9b04      	ldr	r3, [sp, #16]
 8023d5e:	2b29      	cmp	r3, #41	@ 0x29
 8023d60:	d15a      	bne.n	8023e18 <__hexnan+0x14c>
 8023d62:	9b05      	ldr	r3, [sp, #20]
 8023d64:	9a08      	ldr	r2, [sp, #32]
 8023d66:	3302      	adds	r3, #2
 8023d68:	6013      	str	r3, [r2, #0]
 8023d6a:	9b03      	ldr	r3, [sp, #12]
 8023d6c:	2b00      	cmp	r3, #0
 8023d6e:	d053      	beq.n	8023e18 <__hexnan+0x14c>
 8023d70:	42b4      	cmp	r4, r6
 8023d72:	d206      	bcs.n	8023d82 <__hexnan+0xb6>
 8023d74:	2d07      	cmp	r5, #7
 8023d76:	dc04      	bgt.n	8023d82 <__hexnan+0xb6>
 8023d78:	002a      	movs	r2, r5
 8023d7a:	0031      	movs	r1, r6
 8023d7c:	0020      	movs	r0, r4
 8023d7e:	f7ff ff7f 	bl	8023c80 <L_shift>
 8023d82:	9b01      	ldr	r3, [sp, #4]
 8023d84:	429c      	cmp	r4, r3
 8023d86:	d936      	bls.n	8023df6 <__hexnan+0x12a>
 8023d88:	001a      	movs	r2, r3
 8023d8a:	0023      	movs	r3, r4
 8023d8c:	cb02      	ldmia	r3!, {r1}
 8023d8e:	c202      	stmia	r2!, {r1}
 8023d90:	429f      	cmp	r7, r3
 8023d92:	d2fb      	bcs.n	8023d8c <__hexnan+0xc0>
 8023d94:	9b02      	ldr	r3, [sp, #8]
 8023d96:	1c61      	adds	r1, r4, #1
 8023d98:	1eda      	subs	r2, r3, #3
 8023d9a:	2304      	movs	r3, #4
 8023d9c:	4291      	cmp	r1, r2
 8023d9e:	d805      	bhi.n	8023dac <__hexnan+0xe0>
 8023da0:	9b02      	ldr	r3, [sp, #8]
 8023da2:	3b04      	subs	r3, #4
 8023da4:	1b1b      	subs	r3, r3, r4
 8023da6:	089b      	lsrs	r3, r3, #2
 8023da8:	3301      	adds	r3, #1
 8023daa:	009b      	lsls	r3, r3, #2
 8023dac:	9a01      	ldr	r2, [sp, #4]
 8023dae:	18d3      	adds	r3, r2, r3
 8023db0:	2200      	movs	r2, #0
 8023db2:	c304      	stmia	r3!, {r2}
 8023db4:	429f      	cmp	r7, r3
 8023db6:	d2fc      	bcs.n	8023db2 <__hexnan+0xe6>
 8023db8:	683b      	ldr	r3, [r7, #0]
 8023dba:	2b00      	cmp	r3, #0
 8023dbc:	d104      	bne.n	8023dc8 <__hexnan+0xfc>
 8023dbe:	9b01      	ldr	r3, [sp, #4]
 8023dc0:	429f      	cmp	r7, r3
 8023dc2:	d127      	bne.n	8023e14 <__hexnan+0x148>
 8023dc4:	2301      	movs	r3, #1
 8023dc6:	603b      	str	r3, [r7, #0]
 8023dc8:	2005      	movs	r0, #5
 8023dca:	b00b      	add	sp, #44	@ 0x2c
 8023dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023dce:	9b03      	ldr	r3, [sp, #12]
 8023dd0:	3501      	adds	r5, #1
 8023dd2:	3301      	adds	r3, #1
 8023dd4:	9303      	str	r3, [sp, #12]
 8023dd6:	2d08      	cmp	r5, #8
 8023dd8:	dd06      	ble.n	8023de8 <__hexnan+0x11c>
 8023dda:	9b01      	ldr	r3, [sp, #4]
 8023ddc:	429c      	cmp	r4, r3
 8023dde:	d9ba      	bls.n	8023d56 <__hexnan+0x8a>
 8023de0:	2300      	movs	r3, #0
 8023de2:	2501      	movs	r5, #1
 8023de4:	3c04      	subs	r4, #4
 8023de6:	6023      	str	r3, [r4, #0]
 8023de8:	220f      	movs	r2, #15
 8023dea:	6823      	ldr	r3, [r4, #0]
 8023dec:	4010      	ands	r0, r2
 8023dee:	011b      	lsls	r3, r3, #4
 8023df0:	4303      	orrs	r3, r0
 8023df2:	6023      	str	r3, [r4, #0]
 8023df4:	e7af      	b.n	8023d56 <__hexnan+0x8a>
 8023df6:	9b06      	ldr	r3, [sp, #24]
 8023df8:	2b00      	cmp	r3, #0
 8023dfa:	d0dd      	beq.n	8023db8 <__hexnan+0xec>
 8023dfc:	2320      	movs	r3, #32
 8023dfe:	9a06      	ldr	r2, [sp, #24]
 8023e00:	9902      	ldr	r1, [sp, #8]
 8023e02:	1a9b      	subs	r3, r3, r2
 8023e04:	2201      	movs	r2, #1
 8023e06:	4252      	negs	r2, r2
 8023e08:	40da      	lsrs	r2, r3
 8023e0a:	3904      	subs	r1, #4
 8023e0c:	680b      	ldr	r3, [r1, #0]
 8023e0e:	4013      	ands	r3, r2
 8023e10:	600b      	str	r3, [r1, #0]
 8023e12:	e7d1      	b.n	8023db8 <__hexnan+0xec>
 8023e14:	3f04      	subs	r7, #4
 8023e16:	e7cf      	b.n	8023db8 <__hexnan+0xec>
 8023e18:	2004      	movs	r0, #4
 8023e1a:	e7d6      	b.n	8023dca <__hexnan+0xfe>

08023e1c <malloc>:
 8023e1c:	b510      	push	{r4, lr}
 8023e1e:	4b03      	ldr	r3, [pc, #12]	@ (8023e2c <malloc+0x10>)
 8023e20:	0001      	movs	r1, r0
 8023e22:	6818      	ldr	r0, [r3, #0]
 8023e24:	f000 f826 	bl	8023e74 <_malloc_r>
 8023e28:	bd10      	pop	{r4, pc}
 8023e2a:	46c0      	nop			@ (mov r8, r8)
 8023e2c:	200003dc 	.word	0x200003dc

08023e30 <sbrk_aligned>:
 8023e30:	b570      	push	{r4, r5, r6, lr}
 8023e32:	4e0f      	ldr	r6, [pc, #60]	@ (8023e70 <sbrk_aligned+0x40>)
 8023e34:	000d      	movs	r5, r1
 8023e36:	6831      	ldr	r1, [r6, #0]
 8023e38:	0004      	movs	r4, r0
 8023e3a:	2900      	cmp	r1, #0
 8023e3c:	d102      	bne.n	8023e44 <sbrk_aligned+0x14>
 8023e3e:	f001 f989 	bl	8025154 <_sbrk_r>
 8023e42:	6030      	str	r0, [r6, #0]
 8023e44:	0029      	movs	r1, r5
 8023e46:	0020      	movs	r0, r4
 8023e48:	f001 f984 	bl	8025154 <_sbrk_r>
 8023e4c:	1c43      	adds	r3, r0, #1
 8023e4e:	d103      	bne.n	8023e58 <sbrk_aligned+0x28>
 8023e50:	2501      	movs	r5, #1
 8023e52:	426d      	negs	r5, r5
 8023e54:	0028      	movs	r0, r5
 8023e56:	bd70      	pop	{r4, r5, r6, pc}
 8023e58:	2303      	movs	r3, #3
 8023e5a:	1cc5      	adds	r5, r0, #3
 8023e5c:	439d      	bics	r5, r3
 8023e5e:	42a8      	cmp	r0, r5
 8023e60:	d0f8      	beq.n	8023e54 <sbrk_aligned+0x24>
 8023e62:	1a29      	subs	r1, r5, r0
 8023e64:	0020      	movs	r0, r4
 8023e66:	f001 f975 	bl	8025154 <_sbrk_r>
 8023e6a:	3001      	adds	r0, #1
 8023e6c:	d1f2      	bne.n	8023e54 <sbrk_aligned+0x24>
 8023e6e:	e7ef      	b.n	8023e50 <sbrk_aligned+0x20>
 8023e70:	20003578 	.word	0x20003578

08023e74 <_malloc_r>:
 8023e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023e76:	2203      	movs	r2, #3
 8023e78:	1ccb      	adds	r3, r1, #3
 8023e7a:	4393      	bics	r3, r2
 8023e7c:	3308      	adds	r3, #8
 8023e7e:	0005      	movs	r5, r0
 8023e80:	001f      	movs	r7, r3
 8023e82:	2b0c      	cmp	r3, #12
 8023e84:	d234      	bcs.n	8023ef0 <_malloc_r+0x7c>
 8023e86:	270c      	movs	r7, #12
 8023e88:	42b9      	cmp	r1, r7
 8023e8a:	d833      	bhi.n	8023ef4 <_malloc_r+0x80>
 8023e8c:	0028      	movs	r0, r5
 8023e8e:	f000 f883 	bl	8023f98 <__malloc_lock>
 8023e92:	4e37      	ldr	r6, [pc, #220]	@ (8023f70 <_malloc_r+0xfc>)
 8023e94:	6833      	ldr	r3, [r6, #0]
 8023e96:	001c      	movs	r4, r3
 8023e98:	2c00      	cmp	r4, #0
 8023e9a:	d12f      	bne.n	8023efc <_malloc_r+0x88>
 8023e9c:	0039      	movs	r1, r7
 8023e9e:	0028      	movs	r0, r5
 8023ea0:	f7ff ffc6 	bl	8023e30 <sbrk_aligned>
 8023ea4:	0004      	movs	r4, r0
 8023ea6:	1c43      	adds	r3, r0, #1
 8023ea8:	d15f      	bne.n	8023f6a <_malloc_r+0xf6>
 8023eaa:	6834      	ldr	r4, [r6, #0]
 8023eac:	9400      	str	r4, [sp, #0]
 8023eae:	9b00      	ldr	r3, [sp, #0]
 8023eb0:	2b00      	cmp	r3, #0
 8023eb2:	d14a      	bne.n	8023f4a <_malloc_r+0xd6>
 8023eb4:	2c00      	cmp	r4, #0
 8023eb6:	d052      	beq.n	8023f5e <_malloc_r+0xea>
 8023eb8:	6823      	ldr	r3, [r4, #0]
 8023eba:	0028      	movs	r0, r5
 8023ebc:	18e3      	adds	r3, r4, r3
 8023ebe:	9900      	ldr	r1, [sp, #0]
 8023ec0:	9301      	str	r3, [sp, #4]
 8023ec2:	f001 f947 	bl	8025154 <_sbrk_r>
 8023ec6:	9b01      	ldr	r3, [sp, #4]
 8023ec8:	4283      	cmp	r3, r0
 8023eca:	d148      	bne.n	8023f5e <_malloc_r+0xea>
 8023ecc:	6823      	ldr	r3, [r4, #0]
 8023ece:	0028      	movs	r0, r5
 8023ed0:	1aff      	subs	r7, r7, r3
 8023ed2:	0039      	movs	r1, r7
 8023ed4:	f7ff ffac 	bl	8023e30 <sbrk_aligned>
 8023ed8:	3001      	adds	r0, #1
 8023eda:	d040      	beq.n	8023f5e <_malloc_r+0xea>
 8023edc:	6823      	ldr	r3, [r4, #0]
 8023ede:	19db      	adds	r3, r3, r7
 8023ee0:	6023      	str	r3, [r4, #0]
 8023ee2:	6833      	ldr	r3, [r6, #0]
 8023ee4:	685a      	ldr	r2, [r3, #4]
 8023ee6:	2a00      	cmp	r2, #0
 8023ee8:	d133      	bne.n	8023f52 <_malloc_r+0xde>
 8023eea:	9b00      	ldr	r3, [sp, #0]
 8023eec:	6033      	str	r3, [r6, #0]
 8023eee:	e019      	b.n	8023f24 <_malloc_r+0xb0>
 8023ef0:	2b00      	cmp	r3, #0
 8023ef2:	dac9      	bge.n	8023e88 <_malloc_r+0x14>
 8023ef4:	230c      	movs	r3, #12
 8023ef6:	602b      	str	r3, [r5, #0]
 8023ef8:	2000      	movs	r0, #0
 8023efa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023efc:	6821      	ldr	r1, [r4, #0]
 8023efe:	1bc9      	subs	r1, r1, r7
 8023f00:	d420      	bmi.n	8023f44 <_malloc_r+0xd0>
 8023f02:	290b      	cmp	r1, #11
 8023f04:	d90a      	bls.n	8023f1c <_malloc_r+0xa8>
 8023f06:	19e2      	adds	r2, r4, r7
 8023f08:	6027      	str	r7, [r4, #0]
 8023f0a:	42a3      	cmp	r3, r4
 8023f0c:	d104      	bne.n	8023f18 <_malloc_r+0xa4>
 8023f0e:	6032      	str	r2, [r6, #0]
 8023f10:	6863      	ldr	r3, [r4, #4]
 8023f12:	6011      	str	r1, [r2, #0]
 8023f14:	6053      	str	r3, [r2, #4]
 8023f16:	e005      	b.n	8023f24 <_malloc_r+0xb0>
 8023f18:	605a      	str	r2, [r3, #4]
 8023f1a:	e7f9      	b.n	8023f10 <_malloc_r+0x9c>
 8023f1c:	6862      	ldr	r2, [r4, #4]
 8023f1e:	42a3      	cmp	r3, r4
 8023f20:	d10e      	bne.n	8023f40 <_malloc_r+0xcc>
 8023f22:	6032      	str	r2, [r6, #0]
 8023f24:	0028      	movs	r0, r5
 8023f26:	f000 f83f 	bl	8023fa8 <__malloc_unlock>
 8023f2a:	0020      	movs	r0, r4
 8023f2c:	2207      	movs	r2, #7
 8023f2e:	300b      	adds	r0, #11
 8023f30:	1d23      	adds	r3, r4, #4
 8023f32:	4390      	bics	r0, r2
 8023f34:	1ac2      	subs	r2, r0, r3
 8023f36:	4298      	cmp	r0, r3
 8023f38:	d0df      	beq.n	8023efa <_malloc_r+0x86>
 8023f3a:	1a1b      	subs	r3, r3, r0
 8023f3c:	50a3      	str	r3, [r4, r2]
 8023f3e:	e7dc      	b.n	8023efa <_malloc_r+0x86>
 8023f40:	605a      	str	r2, [r3, #4]
 8023f42:	e7ef      	b.n	8023f24 <_malloc_r+0xb0>
 8023f44:	0023      	movs	r3, r4
 8023f46:	6864      	ldr	r4, [r4, #4]
 8023f48:	e7a6      	b.n	8023e98 <_malloc_r+0x24>
 8023f4a:	9c00      	ldr	r4, [sp, #0]
 8023f4c:	6863      	ldr	r3, [r4, #4]
 8023f4e:	9300      	str	r3, [sp, #0]
 8023f50:	e7ad      	b.n	8023eae <_malloc_r+0x3a>
 8023f52:	001a      	movs	r2, r3
 8023f54:	685b      	ldr	r3, [r3, #4]
 8023f56:	42a3      	cmp	r3, r4
 8023f58:	d1fb      	bne.n	8023f52 <_malloc_r+0xde>
 8023f5a:	2300      	movs	r3, #0
 8023f5c:	e7da      	b.n	8023f14 <_malloc_r+0xa0>
 8023f5e:	230c      	movs	r3, #12
 8023f60:	0028      	movs	r0, r5
 8023f62:	602b      	str	r3, [r5, #0]
 8023f64:	f000 f820 	bl	8023fa8 <__malloc_unlock>
 8023f68:	e7c6      	b.n	8023ef8 <_malloc_r+0x84>
 8023f6a:	6007      	str	r7, [r0, #0]
 8023f6c:	e7da      	b.n	8023f24 <_malloc_r+0xb0>
 8023f6e:	46c0      	nop			@ (mov r8, r8)
 8023f70:	2000357c 	.word	0x2000357c

08023f74 <__ascii_mbtowc>:
 8023f74:	b082      	sub	sp, #8
 8023f76:	2900      	cmp	r1, #0
 8023f78:	d100      	bne.n	8023f7c <__ascii_mbtowc+0x8>
 8023f7a:	a901      	add	r1, sp, #4
 8023f7c:	1e10      	subs	r0, r2, #0
 8023f7e:	d006      	beq.n	8023f8e <__ascii_mbtowc+0x1a>
 8023f80:	2b00      	cmp	r3, #0
 8023f82:	d006      	beq.n	8023f92 <__ascii_mbtowc+0x1e>
 8023f84:	7813      	ldrb	r3, [r2, #0]
 8023f86:	600b      	str	r3, [r1, #0]
 8023f88:	7810      	ldrb	r0, [r2, #0]
 8023f8a:	1e43      	subs	r3, r0, #1
 8023f8c:	4198      	sbcs	r0, r3
 8023f8e:	b002      	add	sp, #8
 8023f90:	4770      	bx	lr
 8023f92:	2002      	movs	r0, #2
 8023f94:	4240      	negs	r0, r0
 8023f96:	e7fa      	b.n	8023f8e <__ascii_mbtowc+0x1a>

08023f98 <__malloc_lock>:
 8023f98:	b510      	push	{r4, lr}
 8023f9a:	4802      	ldr	r0, [pc, #8]	@ (8023fa4 <__malloc_lock+0xc>)
 8023f9c:	f7fe fcfb 	bl	8022996 <__retarget_lock_acquire_recursive>
 8023fa0:	bd10      	pop	{r4, pc}
 8023fa2:	46c0      	nop			@ (mov r8, r8)
 8023fa4:	20003574 	.word	0x20003574

08023fa8 <__malloc_unlock>:
 8023fa8:	b510      	push	{r4, lr}
 8023faa:	4802      	ldr	r0, [pc, #8]	@ (8023fb4 <__malloc_unlock+0xc>)
 8023fac:	f7fe fcf4 	bl	8022998 <__retarget_lock_release_recursive>
 8023fb0:	bd10      	pop	{r4, pc}
 8023fb2:	46c0      	nop			@ (mov r8, r8)
 8023fb4:	20003574 	.word	0x20003574

08023fb8 <_Balloc>:
 8023fb8:	b570      	push	{r4, r5, r6, lr}
 8023fba:	69c5      	ldr	r5, [r0, #28]
 8023fbc:	0006      	movs	r6, r0
 8023fbe:	000c      	movs	r4, r1
 8023fc0:	2d00      	cmp	r5, #0
 8023fc2:	d10e      	bne.n	8023fe2 <_Balloc+0x2a>
 8023fc4:	2010      	movs	r0, #16
 8023fc6:	f7ff ff29 	bl	8023e1c <malloc>
 8023fca:	1e02      	subs	r2, r0, #0
 8023fcc:	61f0      	str	r0, [r6, #28]
 8023fce:	d104      	bne.n	8023fda <_Balloc+0x22>
 8023fd0:	216b      	movs	r1, #107	@ 0x6b
 8023fd2:	4b19      	ldr	r3, [pc, #100]	@ (8024038 <_Balloc+0x80>)
 8023fd4:	4819      	ldr	r0, [pc, #100]	@ (802403c <_Balloc+0x84>)
 8023fd6:	f001 f8cf 	bl	8025178 <__assert_func>
 8023fda:	6045      	str	r5, [r0, #4]
 8023fdc:	6085      	str	r5, [r0, #8]
 8023fde:	6005      	str	r5, [r0, #0]
 8023fe0:	60c5      	str	r5, [r0, #12]
 8023fe2:	69f5      	ldr	r5, [r6, #28]
 8023fe4:	68eb      	ldr	r3, [r5, #12]
 8023fe6:	2b00      	cmp	r3, #0
 8023fe8:	d013      	beq.n	8024012 <_Balloc+0x5a>
 8023fea:	69f3      	ldr	r3, [r6, #28]
 8023fec:	00a2      	lsls	r2, r4, #2
 8023fee:	68db      	ldr	r3, [r3, #12]
 8023ff0:	189b      	adds	r3, r3, r2
 8023ff2:	6818      	ldr	r0, [r3, #0]
 8023ff4:	2800      	cmp	r0, #0
 8023ff6:	d118      	bne.n	802402a <_Balloc+0x72>
 8023ff8:	2101      	movs	r1, #1
 8023ffa:	000d      	movs	r5, r1
 8023ffc:	40a5      	lsls	r5, r4
 8023ffe:	1d6a      	adds	r2, r5, #5
 8024000:	0030      	movs	r0, r6
 8024002:	0092      	lsls	r2, r2, #2
 8024004:	f001 f8d6 	bl	80251b4 <_calloc_r>
 8024008:	2800      	cmp	r0, #0
 802400a:	d00c      	beq.n	8024026 <_Balloc+0x6e>
 802400c:	6044      	str	r4, [r0, #4]
 802400e:	6085      	str	r5, [r0, #8]
 8024010:	e00d      	b.n	802402e <_Balloc+0x76>
 8024012:	2221      	movs	r2, #33	@ 0x21
 8024014:	2104      	movs	r1, #4
 8024016:	0030      	movs	r0, r6
 8024018:	f001 f8cc 	bl	80251b4 <_calloc_r>
 802401c:	69f3      	ldr	r3, [r6, #28]
 802401e:	60e8      	str	r0, [r5, #12]
 8024020:	68db      	ldr	r3, [r3, #12]
 8024022:	2b00      	cmp	r3, #0
 8024024:	d1e1      	bne.n	8023fea <_Balloc+0x32>
 8024026:	2000      	movs	r0, #0
 8024028:	bd70      	pop	{r4, r5, r6, pc}
 802402a:	6802      	ldr	r2, [r0, #0]
 802402c:	601a      	str	r2, [r3, #0]
 802402e:	2300      	movs	r3, #0
 8024030:	6103      	str	r3, [r0, #16]
 8024032:	60c3      	str	r3, [r0, #12]
 8024034:	e7f8      	b.n	8024028 <_Balloc+0x70>
 8024036:	46c0      	nop			@ (mov r8, r8)
 8024038:	080291c2 	.word	0x080291c2
 802403c:	080292a2 	.word	0x080292a2

08024040 <_Bfree>:
 8024040:	b570      	push	{r4, r5, r6, lr}
 8024042:	69c6      	ldr	r6, [r0, #28]
 8024044:	0005      	movs	r5, r0
 8024046:	000c      	movs	r4, r1
 8024048:	2e00      	cmp	r6, #0
 802404a:	d10e      	bne.n	802406a <_Bfree+0x2a>
 802404c:	2010      	movs	r0, #16
 802404e:	f7ff fee5 	bl	8023e1c <malloc>
 8024052:	1e02      	subs	r2, r0, #0
 8024054:	61e8      	str	r0, [r5, #28]
 8024056:	d104      	bne.n	8024062 <_Bfree+0x22>
 8024058:	218f      	movs	r1, #143	@ 0x8f
 802405a:	4b09      	ldr	r3, [pc, #36]	@ (8024080 <_Bfree+0x40>)
 802405c:	4809      	ldr	r0, [pc, #36]	@ (8024084 <_Bfree+0x44>)
 802405e:	f001 f88b 	bl	8025178 <__assert_func>
 8024062:	6046      	str	r6, [r0, #4]
 8024064:	6086      	str	r6, [r0, #8]
 8024066:	6006      	str	r6, [r0, #0]
 8024068:	60c6      	str	r6, [r0, #12]
 802406a:	2c00      	cmp	r4, #0
 802406c:	d007      	beq.n	802407e <_Bfree+0x3e>
 802406e:	69eb      	ldr	r3, [r5, #28]
 8024070:	6862      	ldr	r2, [r4, #4]
 8024072:	68db      	ldr	r3, [r3, #12]
 8024074:	0092      	lsls	r2, r2, #2
 8024076:	189b      	adds	r3, r3, r2
 8024078:	681a      	ldr	r2, [r3, #0]
 802407a:	6022      	str	r2, [r4, #0]
 802407c:	601c      	str	r4, [r3, #0]
 802407e:	bd70      	pop	{r4, r5, r6, pc}
 8024080:	080291c2 	.word	0x080291c2
 8024084:	080292a2 	.word	0x080292a2

08024088 <__multadd>:
 8024088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802408a:	000f      	movs	r7, r1
 802408c:	9001      	str	r0, [sp, #4]
 802408e:	000c      	movs	r4, r1
 8024090:	001e      	movs	r6, r3
 8024092:	2000      	movs	r0, #0
 8024094:	690d      	ldr	r5, [r1, #16]
 8024096:	3714      	adds	r7, #20
 8024098:	683b      	ldr	r3, [r7, #0]
 802409a:	3001      	adds	r0, #1
 802409c:	b299      	uxth	r1, r3
 802409e:	4351      	muls	r1, r2
 80240a0:	0c1b      	lsrs	r3, r3, #16
 80240a2:	4353      	muls	r3, r2
 80240a4:	1989      	adds	r1, r1, r6
 80240a6:	0c0e      	lsrs	r6, r1, #16
 80240a8:	199b      	adds	r3, r3, r6
 80240aa:	0c1e      	lsrs	r6, r3, #16
 80240ac:	b289      	uxth	r1, r1
 80240ae:	041b      	lsls	r3, r3, #16
 80240b0:	185b      	adds	r3, r3, r1
 80240b2:	c708      	stmia	r7!, {r3}
 80240b4:	4285      	cmp	r5, r0
 80240b6:	dcef      	bgt.n	8024098 <__multadd+0x10>
 80240b8:	2e00      	cmp	r6, #0
 80240ba:	d022      	beq.n	8024102 <__multadd+0x7a>
 80240bc:	68a3      	ldr	r3, [r4, #8]
 80240be:	42ab      	cmp	r3, r5
 80240c0:	dc19      	bgt.n	80240f6 <__multadd+0x6e>
 80240c2:	6861      	ldr	r1, [r4, #4]
 80240c4:	9801      	ldr	r0, [sp, #4]
 80240c6:	3101      	adds	r1, #1
 80240c8:	f7ff ff76 	bl	8023fb8 <_Balloc>
 80240cc:	1e07      	subs	r7, r0, #0
 80240ce:	d105      	bne.n	80240dc <__multadd+0x54>
 80240d0:	003a      	movs	r2, r7
 80240d2:	21ba      	movs	r1, #186	@ 0xba
 80240d4:	4b0c      	ldr	r3, [pc, #48]	@ (8024108 <__multadd+0x80>)
 80240d6:	480d      	ldr	r0, [pc, #52]	@ (802410c <__multadd+0x84>)
 80240d8:	f001 f84e 	bl	8025178 <__assert_func>
 80240dc:	0021      	movs	r1, r4
 80240de:	6922      	ldr	r2, [r4, #16]
 80240e0:	310c      	adds	r1, #12
 80240e2:	3202      	adds	r2, #2
 80240e4:	0092      	lsls	r2, r2, #2
 80240e6:	300c      	adds	r0, #12
 80240e8:	f7fe fc62 	bl	80229b0 <memcpy>
 80240ec:	0021      	movs	r1, r4
 80240ee:	9801      	ldr	r0, [sp, #4]
 80240f0:	f7ff ffa6 	bl	8024040 <_Bfree>
 80240f4:	003c      	movs	r4, r7
 80240f6:	1d2b      	adds	r3, r5, #4
 80240f8:	009b      	lsls	r3, r3, #2
 80240fa:	18e3      	adds	r3, r4, r3
 80240fc:	3501      	adds	r5, #1
 80240fe:	605e      	str	r6, [r3, #4]
 8024100:	6125      	str	r5, [r4, #16]
 8024102:	0020      	movs	r0, r4
 8024104:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024106:	46c0      	nop			@ (mov r8, r8)
 8024108:	08029231 	.word	0x08029231
 802410c:	080292a2 	.word	0x080292a2

08024110 <__s2b>:
 8024110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024112:	0007      	movs	r7, r0
 8024114:	0018      	movs	r0, r3
 8024116:	000c      	movs	r4, r1
 8024118:	3008      	adds	r0, #8
 802411a:	2109      	movs	r1, #9
 802411c:	9301      	str	r3, [sp, #4]
 802411e:	0015      	movs	r5, r2
 8024120:	f7dc f8ca 	bl	80002b8 <__divsi3>
 8024124:	2301      	movs	r3, #1
 8024126:	2100      	movs	r1, #0
 8024128:	4283      	cmp	r3, r0
 802412a:	db0a      	blt.n	8024142 <__s2b+0x32>
 802412c:	0038      	movs	r0, r7
 802412e:	f7ff ff43 	bl	8023fb8 <_Balloc>
 8024132:	1e01      	subs	r1, r0, #0
 8024134:	d108      	bne.n	8024148 <__s2b+0x38>
 8024136:	000a      	movs	r2, r1
 8024138:	4b19      	ldr	r3, [pc, #100]	@ (80241a0 <__s2b+0x90>)
 802413a:	481a      	ldr	r0, [pc, #104]	@ (80241a4 <__s2b+0x94>)
 802413c:	31d3      	adds	r1, #211	@ 0xd3
 802413e:	f001 f81b 	bl	8025178 <__assert_func>
 8024142:	005b      	lsls	r3, r3, #1
 8024144:	3101      	adds	r1, #1
 8024146:	e7ef      	b.n	8024128 <__s2b+0x18>
 8024148:	9b08      	ldr	r3, [sp, #32]
 802414a:	6143      	str	r3, [r0, #20]
 802414c:	2301      	movs	r3, #1
 802414e:	6103      	str	r3, [r0, #16]
 8024150:	2d09      	cmp	r5, #9
 8024152:	dd18      	ble.n	8024186 <__s2b+0x76>
 8024154:	0023      	movs	r3, r4
 8024156:	3309      	adds	r3, #9
 8024158:	001e      	movs	r6, r3
 802415a:	9300      	str	r3, [sp, #0]
 802415c:	1964      	adds	r4, r4, r5
 802415e:	7833      	ldrb	r3, [r6, #0]
 8024160:	220a      	movs	r2, #10
 8024162:	0038      	movs	r0, r7
 8024164:	3b30      	subs	r3, #48	@ 0x30
 8024166:	f7ff ff8f 	bl	8024088 <__multadd>
 802416a:	3601      	adds	r6, #1
 802416c:	0001      	movs	r1, r0
 802416e:	42a6      	cmp	r6, r4
 8024170:	d1f5      	bne.n	802415e <__s2b+0x4e>
 8024172:	002c      	movs	r4, r5
 8024174:	9b00      	ldr	r3, [sp, #0]
 8024176:	3c08      	subs	r4, #8
 8024178:	191c      	adds	r4, r3, r4
 802417a:	002e      	movs	r6, r5
 802417c:	9b01      	ldr	r3, [sp, #4]
 802417e:	429e      	cmp	r6, r3
 8024180:	db04      	blt.n	802418c <__s2b+0x7c>
 8024182:	0008      	movs	r0, r1
 8024184:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024186:	2509      	movs	r5, #9
 8024188:	340a      	adds	r4, #10
 802418a:	e7f6      	b.n	802417a <__s2b+0x6a>
 802418c:	1b63      	subs	r3, r4, r5
 802418e:	5d9b      	ldrb	r3, [r3, r6]
 8024190:	220a      	movs	r2, #10
 8024192:	0038      	movs	r0, r7
 8024194:	3b30      	subs	r3, #48	@ 0x30
 8024196:	f7ff ff77 	bl	8024088 <__multadd>
 802419a:	3601      	adds	r6, #1
 802419c:	0001      	movs	r1, r0
 802419e:	e7ed      	b.n	802417c <__s2b+0x6c>
 80241a0:	08029231 	.word	0x08029231
 80241a4:	080292a2 	.word	0x080292a2

080241a8 <__hi0bits>:
 80241a8:	2280      	movs	r2, #128	@ 0x80
 80241aa:	0003      	movs	r3, r0
 80241ac:	0252      	lsls	r2, r2, #9
 80241ae:	2000      	movs	r0, #0
 80241b0:	4293      	cmp	r3, r2
 80241b2:	d201      	bcs.n	80241b8 <__hi0bits+0x10>
 80241b4:	041b      	lsls	r3, r3, #16
 80241b6:	3010      	adds	r0, #16
 80241b8:	2280      	movs	r2, #128	@ 0x80
 80241ba:	0452      	lsls	r2, r2, #17
 80241bc:	4293      	cmp	r3, r2
 80241be:	d201      	bcs.n	80241c4 <__hi0bits+0x1c>
 80241c0:	3008      	adds	r0, #8
 80241c2:	021b      	lsls	r3, r3, #8
 80241c4:	2280      	movs	r2, #128	@ 0x80
 80241c6:	0552      	lsls	r2, r2, #21
 80241c8:	4293      	cmp	r3, r2
 80241ca:	d201      	bcs.n	80241d0 <__hi0bits+0x28>
 80241cc:	3004      	adds	r0, #4
 80241ce:	011b      	lsls	r3, r3, #4
 80241d0:	2280      	movs	r2, #128	@ 0x80
 80241d2:	05d2      	lsls	r2, r2, #23
 80241d4:	4293      	cmp	r3, r2
 80241d6:	d201      	bcs.n	80241dc <__hi0bits+0x34>
 80241d8:	3002      	adds	r0, #2
 80241da:	009b      	lsls	r3, r3, #2
 80241dc:	2b00      	cmp	r3, #0
 80241de:	db03      	blt.n	80241e8 <__hi0bits+0x40>
 80241e0:	3001      	adds	r0, #1
 80241e2:	4213      	tst	r3, r2
 80241e4:	d100      	bne.n	80241e8 <__hi0bits+0x40>
 80241e6:	2020      	movs	r0, #32
 80241e8:	4770      	bx	lr

080241ea <__lo0bits>:
 80241ea:	6803      	ldr	r3, [r0, #0]
 80241ec:	0001      	movs	r1, r0
 80241ee:	2207      	movs	r2, #7
 80241f0:	0018      	movs	r0, r3
 80241f2:	4010      	ands	r0, r2
 80241f4:	4213      	tst	r3, r2
 80241f6:	d00d      	beq.n	8024214 <__lo0bits+0x2a>
 80241f8:	3a06      	subs	r2, #6
 80241fa:	2000      	movs	r0, #0
 80241fc:	4213      	tst	r3, r2
 80241fe:	d105      	bne.n	802420c <__lo0bits+0x22>
 8024200:	3002      	adds	r0, #2
 8024202:	4203      	tst	r3, r0
 8024204:	d003      	beq.n	802420e <__lo0bits+0x24>
 8024206:	40d3      	lsrs	r3, r2
 8024208:	0010      	movs	r0, r2
 802420a:	600b      	str	r3, [r1, #0]
 802420c:	4770      	bx	lr
 802420e:	089b      	lsrs	r3, r3, #2
 8024210:	600b      	str	r3, [r1, #0]
 8024212:	e7fb      	b.n	802420c <__lo0bits+0x22>
 8024214:	b29a      	uxth	r2, r3
 8024216:	2a00      	cmp	r2, #0
 8024218:	d101      	bne.n	802421e <__lo0bits+0x34>
 802421a:	2010      	movs	r0, #16
 802421c:	0c1b      	lsrs	r3, r3, #16
 802421e:	b2da      	uxtb	r2, r3
 8024220:	2a00      	cmp	r2, #0
 8024222:	d101      	bne.n	8024228 <__lo0bits+0x3e>
 8024224:	3008      	adds	r0, #8
 8024226:	0a1b      	lsrs	r3, r3, #8
 8024228:	071a      	lsls	r2, r3, #28
 802422a:	d101      	bne.n	8024230 <__lo0bits+0x46>
 802422c:	3004      	adds	r0, #4
 802422e:	091b      	lsrs	r3, r3, #4
 8024230:	079a      	lsls	r2, r3, #30
 8024232:	d101      	bne.n	8024238 <__lo0bits+0x4e>
 8024234:	3002      	adds	r0, #2
 8024236:	089b      	lsrs	r3, r3, #2
 8024238:	07da      	lsls	r2, r3, #31
 802423a:	d4e9      	bmi.n	8024210 <__lo0bits+0x26>
 802423c:	3001      	adds	r0, #1
 802423e:	085b      	lsrs	r3, r3, #1
 8024240:	d1e6      	bne.n	8024210 <__lo0bits+0x26>
 8024242:	2020      	movs	r0, #32
 8024244:	e7e2      	b.n	802420c <__lo0bits+0x22>
	...

08024248 <__i2b>:
 8024248:	b510      	push	{r4, lr}
 802424a:	000c      	movs	r4, r1
 802424c:	2101      	movs	r1, #1
 802424e:	f7ff feb3 	bl	8023fb8 <_Balloc>
 8024252:	2800      	cmp	r0, #0
 8024254:	d107      	bne.n	8024266 <__i2b+0x1e>
 8024256:	2146      	movs	r1, #70	@ 0x46
 8024258:	4c05      	ldr	r4, [pc, #20]	@ (8024270 <__i2b+0x28>)
 802425a:	0002      	movs	r2, r0
 802425c:	4b05      	ldr	r3, [pc, #20]	@ (8024274 <__i2b+0x2c>)
 802425e:	0020      	movs	r0, r4
 8024260:	31ff      	adds	r1, #255	@ 0xff
 8024262:	f000 ff89 	bl	8025178 <__assert_func>
 8024266:	2301      	movs	r3, #1
 8024268:	6144      	str	r4, [r0, #20]
 802426a:	6103      	str	r3, [r0, #16]
 802426c:	bd10      	pop	{r4, pc}
 802426e:	46c0      	nop			@ (mov r8, r8)
 8024270:	080292a2 	.word	0x080292a2
 8024274:	08029231 	.word	0x08029231

08024278 <__multiply>:
 8024278:	b5f0      	push	{r4, r5, r6, r7, lr}
 802427a:	0014      	movs	r4, r2
 802427c:	690a      	ldr	r2, [r1, #16]
 802427e:	6923      	ldr	r3, [r4, #16]
 8024280:	000d      	movs	r5, r1
 8024282:	b08b      	sub	sp, #44	@ 0x2c
 8024284:	429a      	cmp	r2, r3
 8024286:	db02      	blt.n	802428e <__multiply+0x16>
 8024288:	0023      	movs	r3, r4
 802428a:	000c      	movs	r4, r1
 802428c:	001d      	movs	r5, r3
 802428e:	6927      	ldr	r7, [r4, #16]
 8024290:	692e      	ldr	r6, [r5, #16]
 8024292:	6861      	ldr	r1, [r4, #4]
 8024294:	19bb      	adds	r3, r7, r6
 8024296:	9303      	str	r3, [sp, #12]
 8024298:	68a3      	ldr	r3, [r4, #8]
 802429a:	19ba      	adds	r2, r7, r6
 802429c:	4293      	cmp	r3, r2
 802429e:	da00      	bge.n	80242a2 <__multiply+0x2a>
 80242a0:	3101      	adds	r1, #1
 80242a2:	f7ff fe89 	bl	8023fb8 <_Balloc>
 80242a6:	9002      	str	r0, [sp, #8]
 80242a8:	2800      	cmp	r0, #0
 80242aa:	d106      	bne.n	80242ba <__multiply+0x42>
 80242ac:	21b1      	movs	r1, #177	@ 0xb1
 80242ae:	4b49      	ldr	r3, [pc, #292]	@ (80243d4 <__multiply+0x15c>)
 80242b0:	4849      	ldr	r0, [pc, #292]	@ (80243d8 <__multiply+0x160>)
 80242b2:	9a02      	ldr	r2, [sp, #8]
 80242b4:	0049      	lsls	r1, r1, #1
 80242b6:	f000 ff5f 	bl	8025178 <__assert_func>
 80242ba:	9b02      	ldr	r3, [sp, #8]
 80242bc:	2200      	movs	r2, #0
 80242be:	3314      	adds	r3, #20
 80242c0:	469c      	mov	ip, r3
 80242c2:	19bb      	adds	r3, r7, r6
 80242c4:	009b      	lsls	r3, r3, #2
 80242c6:	4463      	add	r3, ip
 80242c8:	9304      	str	r3, [sp, #16]
 80242ca:	4663      	mov	r3, ip
 80242cc:	9904      	ldr	r1, [sp, #16]
 80242ce:	428b      	cmp	r3, r1
 80242d0:	d32a      	bcc.n	8024328 <__multiply+0xb0>
 80242d2:	0023      	movs	r3, r4
 80242d4:	00bf      	lsls	r7, r7, #2
 80242d6:	3314      	adds	r3, #20
 80242d8:	3514      	adds	r5, #20
 80242da:	9308      	str	r3, [sp, #32]
 80242dc:	00b6      	lsls	r6, r6, #2
 80242de:	19db      	adds	r3, r3, r7
 80242e0:	9305      	str	r3, [sp, #20]
 80242e2:	19ab      	adds	r3, r5, r6
 80242e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80242e6:	2304      	movs	r3, #4
 80242e8:	9306      	str	r3, [sp, #24]
 80242ea:	0023      	movs	r3, r4
 80242ec:	9a05      	ldr	r2, [sp, #20]
 80242ee:	3315      	adds	r3, #21
 80242f0:	9501      	str	r5, [sp, #4]
 80242f2:	429a      	cmp	r2, r3
 80242f4:	d305      	bcc.n	8024302 <__multiply+0x8a>
 80242f6:	1b13      	subs	r3, r2, r4
 80242f8:	3b15      	subs	r3, #21
 80242fa:	089b      	lsrs	r3, r3, #2
 80242fc:	3301      	adds	r3, #1
 80242fe:	009b      	lsls	r3, r3, #2
 8024300:	9306      	str	r3, [sp, #24]
 8024302:	9b01      	ldr	r3, [sp, #4]
 8024304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024306:	4293      	cmp	r3, r2
 8024308:	d310      	bcc.n	802432c <__multiply+0xb4>
 802430a:	9b03      	ldr	r3, [sp, #12]
 802430c:	2b00      	cmp	r3, #0
 802430e:	dd05      	ble.n	802431c <__multiply+0xa4>
 8024310:	9b04      	ldr	r3, [sp, #16]
 8024312:	3b04      	subs	r3, #4
 8024314:	9304      	str	r3, [sp, #16]
 8024316:	681b      	ldr	r3, [r3, #0]
 8024318:	2b00      	cmp	r3, #0
 802431a:	d056      	beq.n	80243ca <__multiply+0x152>
 802431c:	9b02      	ldr	r3, [sp, #8]
 802431e:	9a03      	ldr	r2, [sp, #12]
 8024320:	0018      	movs	r0, r3
 8024322:	611a      	str	r2, [r3, #16]
 8024324:	b00b      	add	sp, #44	@ 0x2c
 8024326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024328:	c304      	stmia	r3!, {r2}
 802432a:	e7cf      	b.n	80242cc <__multiply+0x54>
 802432c:	9b01      	ldr	r3, [sp, #4]
 802432e:	6818      	ldr	r0, [r3, #0]
 8024330:	b280      	uxth	r0, r0
 8024332:	2800      	cmp	r0, #0
 8024334:	d01e      	beq.n	8024374 <__multiply+0xfc>
 8024336:	4667      	mov	r7, ip
 8024338:	2500      	movs	r5, #0
 802433a:	9e08      	ldr	r6, [sp, #32]
 802433c:	ce02      	ldmia	r6!, {r1}
 802433e:	683b      	ldr	r3, [r7, #0]
 8024340:	9307      	str	r3, [sp, #28]
 8024342:	b28b      	uxth	r3, r1
 8024344:	4343      	muls	r3, r0
 8024346:	001a      	movs	r2, r3
 8024348:	466b      	mov	r3, sp
 802434a:	0c09      	lsrs	r1, r1, #16
 802434c:	8b9b      	ldrh	r3, [r3, #28]
 802434e:	4341      	muls	r1, r0
 8024350:	18d3      	adds	r3, r2, r3
 8024352:	9a07      	ldr	r2, [sp, #28]
 8024354:	195b      	adds	r3, r3, r5
 8024356:	0c12      	lsrs	r2, r2, #16
 8024358:	1889      	adds	r1, r1, r2
 802435a:	0c1a      	lsrs	r2, r3, #16
 802435c:	188a      	adds	r2, r1, r2
 802435e:	b29b      	uxth	r3, r3
 8024360:	0c15      	lsrs	r5, r2, #16
 8024362:	0412      	lsls	r2, r2, #16
 8024364:	431a      	orrs	r2, r3
 8024366:	9b05      	ldr	r3, [sp, #20]
 8024368:	c704      	stmia	r7!, {r2}
 802436a:	42b3      	cmp	r3, r6
 802436c:	d8e6      	bhi.n	802433c <__multiply+0xc4>
 802436e:	4663      	mov	r3, ip
 8024370:	9a06      	ldr	r2, [sp, #24]
 8024372:	509d      	str	r5, [r3, r2]
 8024374:	9b01      	ldr	r3, [sp, #4]
 8024376:	6818      	ldr	r0, [r3, #0]
 8024378:	0c00      	lsrs	r0, r0, #16
 802437a:	d020      	beq.n	80243be <__multiply+0x146>
 802437c:	4663      	mov	r3, ip
 802437e:	0025      	movs	r5, r4
 8024380:	4661      	mov	r1, ip
 8024382:	2700      	movs	r7, #0
 8024384:	681b      	ldr	r3, [r3, #0]
 8024386:	3514      	adds	r5, #20
 8024388:	682a      	ldr	r2, [r5, #0]
 802438a:	680e      	ldr	r6, [r1, #0]
 802438c:	b292      	uxth	r2, r2
 802438e:	4342      	muls	r2, r0
 8024390:	0c36      	lsrs	r6, r6, #16
 8024392:	1992      	adds	r2, r2, r6
 8024394:	19d2      	adds	r2, r2, r7
 8024396:	0416      	lsls	r6, r2, #16
 8024398:	b29b      	uxth	r3, r3
 802439a:	431e      	orrs	r6, r3
 802439c:	600e      	str	r6, [r1, #0]
 802439e:	cd40      	ldmia	r5!, {r6}
 80243a0:	684b      	ldr	r3, [r1, #4]
 80243a2:	0c36      	lsrs	r6, r6, #16
 80243a4:	4346      	muls	r6, r0
 80243a6:	b29b      	uxth	r3, r3
 80243a8:	0c12      	lsrs	r2, r2, #16
 80243aa:	18f3      	adds	r3, r6, r3
 80243ac:	189b      	adds	r3, r3, r2
 80243ae:	9a05      	ldr	r2, [sp, #20]
 80243b0:	0c1f      	lsrs	r7, r3, #16
 80243b2:	3104      	adds	r1, #4
 80243b4:	42aa      	cmp	r2, r5
 80243b6:	d8e7      	bhi.n	8024388 <__multiply+0x110>
 80243b8:	4662      	mov	r2, ip
 80243ba:	9906      	ldr	r1, [sp, #24]
 80243bc:	5053      	str	r3, [r2, r1]
 80243be:	9b01      	ldr	r3, [sp, #4]
 80243c0:	3304      	adds	r3, #4
 80243c2:	9301      	str	r3, [sp, #4]
 80243c4:	2304      	movs	r3, #4
 80243c6:	449c      	add	ip, r3
 80243c8:	e79b      	b.n	8024302 <__multiply+0x8a>
 80243ca:	9b03      	ldr	r3, [sp, #12]
 80243cc:	3b01      	subs	r3, #1
 80243ce:	9303      	str	r3, [sp, #12]
 80243d0:	e79b      	b.n	802430a <__multiply+0x92>
 80243d2:	46c0      	nop			@ (mov r8, r8)
 80243d4:	08029231 	.word	0x08029231
 80243d8:	080292a2 	.word	0x080292a2

080243dc <__pow5mult>:
 80243dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80243de:	2303      	movs	r3, #3
 80243e0:	0015      	movs	r5, r2
 80243e2:	0007      	movs	r7, r0
 80243e4:	000e      	movs	r6, r1
 80243e6:	401a      	ands	r2, r3
 80243e8:	421d      	tst	r5, r3
 80243ea:	d008      	beq.n	80243fe <__pow5mult+0x22>
 80243ec:	4925      	ldr	r1, [pc, #148]	@ (8024484 <__pow5mult+0xa8>)
 80243ee:	3a01      	subs	r2, #1
 80243f0:	0092      	lsls	r2, r2, #2
 80243f2:	5852      	ldr	r2, [r2, r1]
 80243f4:	2300      	movs	r3, #0
 80243f6:	0031      	movs	r1, r6
 80243f8:	f7ff fe46 	bl	8024088 <__multadd>
 80243fc:	0006      	movs	r6, r0
 80243fe:	10ad      	asrs	r5, r5, #2
 8024400:	d03d      	beq.n	802447e <__pow5mult+0xa2>
 8024402:	69fc      	ldr	r4, [r7, #28]
 8024404:	2c00      	cmp	r4, #0
 8024406:	d10f      	bne.n	8024428 <__pow5mult+0x4c>
 8024408:	2010      	movs	r0, #16
 802440a:	f7ff fd07 	bl	8023e1c <malloc>
 802440e:	1e02      	subs	r2, r0, #0
 8024410:	61f8      	str	r0, [r7, #28]
 8024412:	d105      	bne.n	8024420 <__pow5mult+0x44>
 8024414:	21b4      	movs	r1, #180	@ 0xb4
 8024416:	4b1c      	ldr	r3, [pc, #112]	@ (8024488 <__pow5mult+0xac>)
 8024418:	481c      	ldr	r0, [pc, #112]	@ (802448c <__pow5mult+0xb0>)
 802441a:	31ff      	adds	r1, #255	@ 0xff
 802441c:	f000 feac 	bl	8025178 <__assert_func>
 8024420:	6044      	str	r4, [r0, #4]
 8024422:	6084      	str	r4, [r0, #8]
 8024424:	6004      	str	r4, [r0, #0]
 8024426:	60c4      	str	r4, [r0, #12]
 8024428:	69fb      	ldr	r3, [r7, #28]
 802442a:	689c      	ldr	r4, [r3, #8]
 802442c:	9301      	str	r3, [sp, #4]
 802442e:	2c00      	cmp	r4, #0
 8024430:	d108      	bne.n	8024444 <__pow5mult+0x68>
 8024432:	0038      	movs	r0, r7
 8024434:	4916      	ldr	r1, [pc, #88]	@ (8024490 <__pow5mult+0xb4>)
 8024436:	f7ff ff07 	bl	8024248 <__i2b>
 802443a:	9b01      	ldr	r3, [sp, #4]
 802443c:	0004      	movs	r4, r0
 802443e:	6098      	str	r0, [r3, #8]
 8024440:	2300      	movs	r3, #0
 8024442:	6003      	str	r3, [r0, #0]
 8024444:	2301      	movs	r3, #1
 8024446:	421d      	tst	r5, r3
 8024448:	d00a      	beq.n	8024460 <__pow5mult+0x84>
 802444a:	0031      	movs	r1, r6
 802444c:	0022      	movs	r2, r4
 802444e:	0038      	movs	r0, r7
 8024450:	f7ff ff12 	bl	8024278 <__multiply>
 8024454:	0031      	movs	r1, r6
 8024456:	9001      	str	r0, [sp, #4]
 8024458:	0038      	movs	r0, r7
 802445a:	f7ff fdf1 	bl	8024040 <_Bfree>
 802445e:	9e01      	ldr	r6, [sp, #4]
 8024460:	106d      	asrs	r5, r5, #1
 8024462:	d00c      	beq.n	802447e <__pow5mult+0xa2>
 8024464:	6820      	ldr	r0, [r4, #0]
 8024466:	2800      	cmp	r0, #0
 8024468:	d107      	bne.n	802447a <__pow5mult+0x9e>
 802446a:	0022      	movs	r2, r4
 802446c:	0021      	movs	r1, r4
 802446e:	0038      	movs	r0, r7
 8024470:	f7ff ff02 	bl	8024278 <__multiply>
 8024474:	2300      	movs	r3, #0
 8024476:	6020      	str	r0, [r4, #0]
 8024478:	6003      	str	r3, [r0, #0]
 802447a:	0004      	movs	r4, r0
 802447c:	e7e2      	b.n	8024444 <__pow5mult+0x68>
 802447e:	0030      	movs	r0, r6
 8024480:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024482:	46c0      	nop			@ (mov r8, r8)
 8024484:	080292fc 	.word	0x080292fc
 8024488:	080291c2 	.word	0x080291c2
 802448c:	080292a2 	.word	0x080292a2
 8024490:	00000271 	.word	0x00000271

08024494 <__lshift>:
 8024494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024496:	000c      	movs	r4, r1
 8024498:	0016      	movs	r6, r2
 802449a:	6923      	ldr	r3, [r4, #16]
 802449c:	1157      	asrs	r7, r2, #5
 802449e:	b085      	sub	sp, #20
 80244a0:	18fb      	adds	r3, r7, r3
 80244a2:	9301      	str	r3, [sp, #4]
 80244a4:	3301      	adds	r3, #1
 80244a6:	9300      	str	r3, [sp, #0]
 80244a8:	6849      	ldr	r1, [r1, #4]
 80244aa:	68a3      	ldr	r3, [r4, #8]
 80244ac:	9002      	str	r0, [sp, #8]
 80244ae:	9a00      	ldr	r2, [sp, #0]
 80244b0:	4293      	cmp	r3, r2
 80244b2:	db10      	blt.n	80244d6 <__lshift+0x42>
 80244b4:	9802      	ldr	r0, [sp, #8]
 80244b6:	f7ff fd7f 	bl	8023fb8 <_Balloc>
 80244ba:	2300      	movs	r3, #0
 80244bc:	0001      	movs	r1, r0
 80244be:	0005      	movs	r5, r0
 80244c0:	001a      	movs	r2, r3
 80244c2:	3114      	adds	r1, #20
 80244c4:	4298      	cmp	r0, r3
 80244c6:	d10c      	bne.n	80244e2 <__lshift+0x4e>
 80244c8:	21ef      	movs	r1, #239	@ 0xef
 80244ca:	002a      	movs	r2, r5
 80244cc:	4b25      	ldr	r3, [pc, #148]	@ (8024564 <__lshift+0xd0>)
 80244ce:	4826      	ldr	r0, [pc, #152]	@ (8024568 <__lshift+0xd4>)
 80244d0:	0049      	lsls	r1, r1, #1
 80244d2:	f000 fe51 	bl	8025178 <__assert_func>
 80244d6:	3101      	adds	r1, #1
 80244d8:	005b      	lsls	r3, r3, #1
 80244da:	e7e8      	b.n	80244ae <__lshift+0x1a>
 80244dc:	0098      	lsls	r0, r3, #2
 80244de:	500a      	str	r2, [r1, r0]
 80244e0:	3301      	adds	r3, #1
 80244e2:	42bb      	cmp	r3, r7
 80244e4:	dbfa      	blt.n	80244dc <__lshift+0x48>
 80244e6:	43fb      	mvns	r3, r7
 80244e8:	17db      	asrs	r3, r3, #31
 80244ea:	401f      	ands	r7, r3
 80244ec:	00bf      	lsls	r7, r7, #2
 80244ee:	0023      	movs	r3, r4
 80244f0:	201f      	movs	r0, #31
 80244f2:	19c9      	adds	r1, r1, r7
 80244f4:	0037      	movs	r7, r6
 80244f6:	6922      	ldr	r2, [r4, #16]
 80244f8:	3314      	adds	r3, #20
 80244fa:	0092      	lsls	r2, r2, #2
 80244fc:	189a      	adds	r2, r3, r2
 80244fe:	4007      	ands	r7, r0
 8024500:	4206      	tst	r6, r0
 8024502:	d029      	beq.n	8024558 <__lshift+0xc4>
 8024504:	3001      	adds	r0, #1
 8024506:	1bc0      	subs	r0, r0, r7
 8024508:	9003      	str	r0, [sp, #12]
 802450a:	468c      	mov	ip, r1
 802450c:	2000      	movs	r0, #0
 802450e:	681e      	ldr	r6, [r3, #0]
 8024510:	40be      	lsls	r6, r7
 8024512:	4306      	orrs	r6, r0
 8024514:	4660      	mov	r0, ip
 8024516:	c040      	stmia	r0!, {r6}
 8024518:	4684      	mov	ip, r0
 802451a:	9e03      	ldr	r6, [sp, #12]
 802451c:	cb01      	ldmia	r3!, {r0}
 802451e:	40f0      	lsrs	r0, r6
 8024520:	429a      	cmp	r2, r3
 8024522:	d8f4      	bhi.n	802450e <__lshift+0x7a>
 8024524:	0026      	movs	r6, r4
 8024526:	3615      	adds	r6, #21
 8024528:	2304      	movs	r3, #4
 802452a:	42b2      	cmp	r2, r6
 802452c:	d304      	bcc.n	8024538 <__lshift+0xa4>
 802452e:	1b13      	subs	r3, r2, r4
 8024530:	3b15      	subs	r3, #21
 8024532:	089b      	lsrs	r3, r3, #2
 8024534:	3301      	adds	r3, #1
 8024536:	009b      	lsls	r3, r3, #2
 8024538:	50c8      	str	r0, [r1, r3]
 802453a:	2800      	cmp	r0, #0
 802453c:	d002      	beq.n	8024544 <__lshift+0xb0>
 802453e:	9b01      	ldr	r3, [sp, #4]
 8024540:	3302      	adds	r3, #2
 8024542:	9300      	str	r3, [sp, #0]
 8024544:	9b00      	ldr	r3, [sp, #0]
 8024546:	9802      	ldr	r0, [sp, #8]
 8024548:	3b01      	subs	r3, #1
 802454a:	0021      	movs	r1, r4
 802454c:	612b      	str	r3, [r5, #16]
 802454e:	f7ff fd77 	bl	8024040 <_Bfree>
 8024552:	0028      	movs	r0, r5
 8024554:	b005      	add	sp, #20
 8024556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024558:	cb01      	ldmia	r3!, {r0}
 802455a:	c101      	stmia	r1!, {r0}
 802455c:	429a      	cmp	r2, r3
 802455e:	d8fb      	bhi.n	8024558 <__lshift+0xc4>
 8024560:	e7f0      	b.n	8024544 <__lshift+0xb0>
 8024562:	46c0      	nop			@ (mov r8, r8)
 8024564:	08029231 	.word	0x08029231
 8024568:	080292a2 	.word	0x080292a2

0802456c <__mcmp>:
 802456c:	b530      	push	{r4, r5, lr}
 802456e:	690b      	ldr	r3, [r1, #16]
 8024570:	6904      	ldr	r4, [r0, #16]
 8024572:	0002      	movs	r2, r0
 8024574:	1ae0      	subs	r0, r4, r3
 8024576:	429c      	cmp	r4, r3
 8024578:	d10f      	bne.n	802459a <__mcmp+0x2e>
 802457a:	3214      	adds	r2, #20
 802457c:	009b      	lsls	r3, r3, #2
 802457e:	3114      	adds	r1, #20
 8024580:	0014      	movs	r4, r2
 8024582:	18c9      	adds	r1, r1, r3
 8024584:	18d2      	adds	r2, r2, r3
 8024586:	3a04      	subs	r2, #4
 8024588:	3904      	subs	r1, #4
 802458a:	6815      	ldr	r5, [r2, #0]
 802458c:	680b      	ldr	r3, [r1, #0]
 802458e:	429d      	cmp	r5, r3
 8024590:	d004      	beq.n	802459c <__mcmp+0x30>
 8024592:	2001      	movs	r0, #1
 8024594:	429d      	cmp	r5, r3
 8024596:	d200      	bcs.n	802459a <__mcmp+0x2e>
 8024598:	3802      	subs	r0, #2
 802459a:	bd30      	pop	{r4, r5, pc}
 802459c:	4294      	cmp	r4, r2
 802459e:	d3f2      	bcc.n	8024586 <__mcmp+0x1a>
 80245a0:	e7fb      	b.n	802459a <__mcmp+0x2e>
	...

080245a4 <__mdiff>:
 80245a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80245a6:	000c      	movs	r4, r1
 80245a8:	b087      	sub	sp, #28
 80245aa:	9000      	str	r0, [sp, #0]
 80245ac:	0011      	movs	r1, r2
 80245ae:	0020      	movs	r0, r4
 80245b0:	0017      	movs	r7, r2
 80245b2:	f7ff ffdb 	bl	802456c <__mcmp>
 80245b6:	1e05      	subs	r5, r0, #0
 80245b8:	d110      	bne.n	80245dc <__mdiff+0x38>
 80245ba:	0001      	movs	r1, r0
 80245bc:	9800      	ldr	r0, [sp, #0]
 80245be:	f7ff fcfb 	bl	8023fb8 <_Balloc>
 80245c2:	1e02      	subs	r2, r0, #0
 80245c4:	d104      	bne.n	80245d0 <__mdiff+0x2c>
 80245c6:	4b40      	ldr	r3, [pc, #256]	@ (80246c8 <__mdiff+0x124>)
 80245c8:	4840      	ldr	r0, [pc, #256]	@ (80246cc <__mdiff+0x128>)
 80245ca:	4941      	ldr	r1, [pc, #260]	@ (80246d0 <__mdiff+0x12c>)
 80245cc:	f000 fdd4 	bl	8025178 <__assert_func>
 80245d0:	2301      	movs	r3, #1
 80245d2:	6145      	str	r5, [r0, #20]
 80245d4:	6103      	str	r3, [r0, #16]
 80245d6:	0010      	movs	r0, r2
 80245d8:	b007      	add	sp, #28
 80245da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80245dc:	2600      	movs	r6, #0
 80245de:	42b0      	cmp	r0, r6
 80245e0:	da03      	bge.n	80245ea <__mdiff+0x46>
 80245e2:	0023      	movs	r3, r4
 80245e4:	003c      	movs	r4, r7
 80245e6:	001f      	movs	r7, r3
 80245e8:	3601      	adds	r6, #1
 80245ea:	6861      	ldr	r1, [r4, #4]
 80245ec:	9800      	ldr	r0, [sp, #0]
 80245ee:	f7ff fce3 	bl	8023fb8 <_Balloc>
 80245f2:	1e02      	subs	r2, r0, #0
 80245f4:	d103      	bne.n	80245fe <__mdiff+0x5a>
 80245f6:	4b34      	ldr	r3, [pc, #208]	@ (80246c8 <__mdiff+0x124>)
 80245f8:	4834      	ldr	r0, [pc, #208]	@ (80246cc <__mdiff+0x128>)
 80245fa:	4936      	ldr	r1, [pc, #216]	@ (80246d4 <__mdiff+0x130>)
 80245fc:	e7e6      	b.n	80245cc <__mdiff+0x28>
 80245fe:	6923      	ldr	r3, [r4, #16]
 8024600:	3414      	adds	r4, #20
 8024602:	9300      	str	r3, [sp, #0]
 8024604:	009b      	lsls	r3, r3, #2
 8024606:	18e3      	adds	r3, r4, r3
 8024608:	0021      	movs	r1, r4
 802460a:	9401      	str	r4, [sp, #4]
 802460c:	003c      	movs	r4, r7
 802460e:	9302      	str	r3, [sp, #8]
 8024610:	693b      	ldr	r3, [r7, #16]
 8024612:	3414      	adds	r4, #20
 8024614:	009b      	lsls	r3, r3, #2
 8024616:	18e3      	adds	r3, r4, r3
 8024618:	9303      	str	r3, [sp, #12]
 802461a:	0003      	movs	r3, r0
 802461c:	60c6      	str	r6, [r0, #12]
 802461e:	468c      	mov	ip, r1
 8024620:	2000      	movs	r0, #0
 8024622:	3314      	adds	r3, #20
 8024624:	9304      	str	r3, [sp, #16]
 8024626:	9305      	str	r3, [sp, #20]
 8024628:	4663      	mov	r3, ip
 802462a:	cb20      	ldmia	r3!, {r5}
 802462c:	b2a9      	uxth	r1, r5
 802462e:	000e      	movs	r6, r1
 8024630:	469c      	mov	ip, r3
 8024632:	cc08      	ldmia	r4!, {r3}
 8024634:	0c2d      	lsrs	r5, r5, #16
 8024636:	b299      	uxth	r1, r3
 8024638:	1a71      	subs	r1, r6, r1
 802463a:	1809      	adds	r1, r1, r0
 802463c:	0c1b      	lsrs	r3, r3, #16
 802463e:	1408      	asrs	r0, r1, #16
 8024640:	1aeb      	subs	r3, r5, r3
 8024642:	181b      	adds	r3, r3, r0
 8024644:	1418      	asrs	r0, r3, #16
 8024646:	b289      	uxth	r1, r1
 8024648:	041b      	lsls	r3, r3, #16
 802464a:	4319      	orrs	r1, r3
 802464c:	9b05      	ldr	r3, [sp, #20]
 802464e:	c302      	stmia	r3!, {r1}
 8024650:	9305      	str	r3, [sp, #20]
 8024652:	9b03      	ldr	r3, [sp, #12]
 8024654:	42a3      	cmp	r3, r4
 8024656:	d8e7      	bhi.n	8024628 <__mdiff+0x84>
 8024658:	0039      	movs	r1, r7
 802465a:	9c03      	ldr	r4, [sp, #12]
 802465c:	3115      	adds	r1, #21
 802465e:	2304      	movs	r3, #4
 8024660:	428c      	cmp	r4, r1
 8024662:	d304      	bcc.n	802466e <__mdiff+0xca>
 8024664:	1be3      	subs	r3, r4, r7
 8024666:	3b15      	subs	r3, #21
 8024668:	089b      	lsrs	r3, r3, #2
 802466a:	3301      	adds	r3, #1
 802466c:	009b      	lsls	r3, r3, #2
 802466e:	9901      	ldr	r1, [sp, #4]
 8024670:	18cd      	adds	r5, r1, r3
 8024672:	9904      	ldr	r1, [sp, #16]
 8024674:	002e      	movs	r6, r5
 8024676:	18cb      	adds	r3, r1, r3
 8024678:	001f      	movs	r7, r3
 802467a:	9902      	ldr	r1, [sp, #8]
 802467c:	428e      	cmp	r6, r1
 802467e:	d311      	bcc.n	80246a4 <__mdiff+0x100>
 8024680:	9c02      	ldr	r4, [sp, #8]
 8024682:	1ee9      	subs	r1, r5, #3
 8024684:	2000      	movs	r0, #0
 8024686:	428c      	cmp	r4, r1
 8024688:	d304      	bcc.n	8024694 <__mdiff+0xf0>
 802468a:	0021      	movs	r1, r4
 802468c:	3103      	adds	r1, #3
 802468e:	1b49      	subs	r1, r1, r5
 8024690:	0889      	lsrs	r1, r1, #2
 8024692:	0088      	lsls	r0, r1, #2
 8024694:	181b      	adds	r3, r3, r0
 8024696:	3b04      	subs	r3, #4
 8024698:	6819      	ldr	r1, [r3, #0]
 802469a:	2900      	cmp	r1, #0
 802469c:	d010      	beq.n	80246c0 <__mdiff+0x11c>
 802469e:	9b00      	ldr	r3, [sp, #0]
 80246a0:	6113      	str	r3, [r2, #16]
 80246a2:	e798      	b.n	80245d6 <__mdiff+0x32>
 80246a4:	4684      	mov	ip, r0
 80246a6:	ce02      	ldmia	r6!, {r1}
 80246a8:	b288      	uxth	r0, r1
 80246aa:	4460      	add	r0, ip
 80246ac:	1400      	asrs	r0, r0, #16
 80246ae:	0c0c      	lsrs	r4, r1, #16
 80246b0:	1904      	adds	r4, r0, r4
 80246b2:	4461      	add	r1, ip
 80246b4:	1420      	asrs	r0, r4, #16
 80246b6:	b289      	uxth	r1, r1
 80246b8:	0424      	lsls	r4, r4, #16
 80246ba:	4321      	orrs	r1, r4
 80246bc:	c702      	stmia	r7!, {r1}
 80246be:	e7dc      	b.n	802467a <__mdiff+0xd6>
 80246c0:	9900      	ldr	r1, [sp, #0]
 80246c2:	3901      	subs	r1, #1
 80246c4:	9100      	str	r1, [sp, #0]
 80246c6:	e7e6      	b.n	8024696 <__mdiff+0xf2>
 80246c8:	08029231 	.word	0x08029231
 80246cc:	080292a2 	.word	0x080292a2
 80246d0:	00000237 	.word	0x00000237
 80246d4:	00000245 	.word	0x00000245

080246d8 <__ulp>:
 80246d8:	b510      	push	{r4, lr}
 80246da:	2400      	movs	r4, #0
 80246dc:	4b0c      	ldr	r3, [pc, #48]	@ (8024710 <__ulp+0x38>)
 80246de:	4a0d      	ldr	r2, [pc, #52]	@ (8024714 <__ulp+0x3c>)
 80246e0:	400b      	ands	r3, r1
 80246e2:	189b      	adds	r3, r3, r2
 80246e4:	42a3      	cmp	r3, r4
 80246e6:	dc06      	bgt.n	80246f6 <__ulp+0x1e>
 80246e8:	425b      	negs	r3, r3
 80246ea:	151a      	asrs	r2, r3, #20
 80246ec:	2a13      	cmp	r2, #19
 80246ee:	dc05      	bgt.n	80246fc <__ulp+0x24>
 80246f0:	2380      	movs	r3, #128	@ 0x80
 80246f2:	031b      	lsls	r3, r3, #12
 80246f4:	4113      	asrs	r3, r2
 80246f6:	0019      	movs	r1, r3
 80246f8:	0020      	movs	r0, r4
 80246fa:	bd10      	pop	{r4, pc}
 80246fc:	3a14      	subs	r2, #20
 80246fe:	2401      	movs	r4, #1
 8024700:	2a1e      	cmp	r2, #30
 8024702:	dc02      	bgt.n	802470a <__ulp+0x32>
 8024704:	2480      	movs	r4, #128	@ 0x80
 8024706:	0624      	lsls	r4, r4, #24
 8024708:	40d4      	lsrs	r4, r2
 802470a:	2300      	movs	r3, #0
 802470c:	e7f3      	b.n	80246f6 <__ulp+0x1e>
 802470e:	46c0      	nop			@ (mov r8, r8)
 8024710:	7ff00000 	.word	0x7ff00000
 8024714:	fcc00000 	.word	0xfcc00000

08024718 <__b2d>:
 8024718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802471a:	0006      	movs	r6, r0
 802471c:	6903      	ldr	r3, [r0, #16]
 802471e:	3614      	adds	r6, #20
 8024720:	009b      	lsls	r3, r3, #2
 8024722:	18f3      	adds	r3, r6, r3
 8024724:	1f1d      	subs	r5, r3, #4
 8024726:	682c      	ldr	r4, [r5, #0]
 8024728:	000f      	movs	r7, r1
 802472a:	0020      	movs	r0, r4
 802472c:	9301      	str	r3, [sp, #4]
 802472e:	f7ff fd3b 	bl	80241a8 <__hi0bits>
 8024732:	2220      	movs	r2, #32
 8024734:	1a12      	subs	r2, r2, r0
 8024736:	603a      	str	r2, [r7, #0]
 8024738:	0003      	movs	r3, r0
 802473a:	4a1c      	ldr	r2, [pc, #112]	@ (80247ac <__b2d+0x94>)
 802473c:	280a      	cmp	r0, #10
 802473e:	dc15      	bgt.n	802476c <__b2d+0x54>
 8024740:	210b      	movs	r1, #11
 8024742:	0027      	movs	r7, r4
 8024744:	1a09      	subs	r1, r1, r0
 8024746:	40cf      	lsrs	r7, r1
 8024748:	433a      	orrs	r2, r7
 802474a:	468c      	mov	ip, r1
 802474c:	0011      	movs	r1, r2
 802474e:	2200      	movs	r2, #0
 8024750:	42ae      	cmp	r6, r5
 8024752:	d202      	bcs.n	802475a <__b2d+0x42>
 8024754:	9a01      	ldr	r2, [sp, #4]
 8024756:	3a08      	subs	r2, #8
 8024758:	6812      	ldr	r2, [r2, #0]
 802475a:	3315      	adds	r3, #21
 802475c:	409c      	lsls	r4, r3
 802475e:	4663      	mov	r3, ip
 8024760:	0027      	movs	r7, r4
 8024762:	40da      	lsrs	r2, r3
 8024764:	4317      	orrs	r7, r2
 8024766:	0038      	movs	r0, r7
 8024768:	b003      	add	sp, #12
 802476a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802476c:	2700      	movs	r7, #0
 802476e:	42ae      	cmp	r6, r5
 8024770:	d202      	bcs.n	8024778 <__b2d+0x60>
 8024772:	9d01      	ldr	r5, [sp, #4]
 8024774:	3d08      	subs	r5, #8
 8024776:	682f      	ldr	r7, [r5, #0]
 8024778:	210b      	movs	r1, #11
 802477a:	4249      	negs	r1, r1
 802477c:	468c      	mov	ip, r1
 802477e:	449c      	add	ip, r3
 8024780:	2b0b      	cmp	r3, #11
 8024782:	d010      	beq.n	80247a6 <__b2d+0x8e>
 8024784:	4661      	mov	r1, ip
 8024786:	2320      	movs	r3, #32
 8024788:	408c      	lsls	r4, r1
 802478a:	1a5b      	subs	r3, r3, r1
 802478c:	0039      	movs	r1, r7
 802478e:	40d9      	lsrs	r1, r3
 8024790:	430c      	orrs	r4, r1
 8024792:	4322      	orrs	r2, r4
 8024794:	0011      	movs	r1, r2
 8024796:	2200      	movs	r2, #0
 8024798:	42b5      	cmp	r5, r6
 802479a:	d901      	bls.n	80247a0 <__b2d+0x88>
 802479c:	3d04      	subs	r5, #4
 802479e:	682a      	ldr	r2, [r5, #0]
 80247a0:	4664      	mov	r4, ip
 80247a2:	40a7      	lsls	r7, r4
 80247a4:	e7dd      	b.n	8024762 <__b2d+0x4a>
 80247a6:	4322      	orrs	r2, r4
 80247a8:	0011      	movs	r1, r2
 80247aa:	e7dc      	b.n	8024766 <__b2d+0x4e>
 80247ac:	3ff00000 	.word	0x3ff00000

080247b0 <__d2b>:
 80247b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80247b2:	2101      	movs	r1, #1
 80247b4:	0016      	movs	r6, r2
 80247b6:	001f      	movs	r7, r3
 80247b8:	f7ff fbfe 	bl	8023fb8 <_Balloc>
 80247bc:	1e04      	subs	r4, r0, #0
 80247be:	d105      	bne.n	80247cc <__d2b+0x1c>
 80247c0:	0022      	movs	r2, r4
 80247c2:	4b25      	ldr	r3, [pc, #148]	@ (8024858 <__d2b+0xa8>)
 80247c4:	4825      	ldr	r0, [pc, #148]	@ (802485c <__d2b+0xac>)
 80247c6:	4926      	ldr	r1, [pc, #152]	@ (8024860 <__d2b+0xb0>)
 80247c8:	f000 fcd6 	bl	8025178 <__assert_func>
 80247cc:	033b      	lsls	r3, r7, #12
 80247ce:	007d      	lsls	r5, r7, #1
 80247d0:	0b1b      	lsrs	r3, r3, #12
 80247d2:	0d6d      	lsrs	r5, r5, #21
 80247d4:	d002      	beq.n	80247dc <__d2b+0x2c>
 80247d6:	2280      	movs	r2, #128	@ 0x80
 80247d8:	0352      	lsls	r2, r2, #13
 80247da:	4313      	orrs	r3, r2
 80247dc:	9301      	str	r3, [sp, #4]
 80247de:	2e00      	cmp	r6, #0
 80247e0:	d025      	beq.n	802482e <__d2b+0x7e>
 80247e2:	4668      	mov	r0, sp
 80247e4:	9600      	str	r6, [sp, #0]
 80247e6:	f7ff fd00 	bl	80241ea <__lo0bits>
 80247ea:	9b01      	ldr	r3, [sp, #4]
 80247ec:	9900      	ldr	r1, [sp, #0]
 80247ee:	2800      	cmp	r0, #0
 80247f0:	d01b      	beq.n	802482a <__d2b+0x7a>
 80247f2:	2220      	movs	r2, #32
 80247f4:	001e      	movs	r6, r3
 80247f6:	1a12      	subs	r2, r2, r0
 80247f8:	4096      	lsls	r6, r2
 80247fa:	0032      	movs	r2, r6
 80247fc:	40c3      	lsrs	r3, r0
 80247fe:	430a      	orrs	r2, r1
 8024800:	6162      	str	r2, [r4, #20]
 8024802:	9301      	str	r3, [sp, #4]
 8024804:	9e01      	ldr	r6, [sp, #4]
 8024806:	61a6      	str	r6, [r4, #24]
 8024808:	1e73      	subs	r3, r6, #1
 802480a:	419e      	sbcs	r6, r3
 802480c:	3601      	adds	r6, #1
 802480e:	6126      	str	r6, [r4, #16]
 8024810:	2d00      	cmp	r5, #0
 8024812:	d014      	beq.n	802483e <__d2b+0x8e>
 8024814:	2635      	movs	r6, #53	@ 0x35
 8024816:	4b13      	ldr	r3, [pc, #76]	@ (8024864 <__d2b+0xb4>)
 8024818:	18ed      	adds	r5, r5, r3
 802481a:	9b08      	ldr	r3, [sp, #32]
 802481c:	182d      	adds	r5, r5, r0
 802481e:	601d      	str	r5, [r3, #0]
 8024820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024822:	1a36      	subs	r6, r6, r0
 8024824:	601e      	str	r6, [r3, #0]
 8024826:	0020      	movs	r0, r4
 8024828:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802482a:	6161      	str	r1, [r4, #20]
 802482c:	e7ea      	b.n	8024804 <__d2b+0x54>
 802482e:	a801      	add	r0, sp, #4
 8024830:	f7ff fcdb 	bl	80241ea <__lo0bits>
 8024834:	9b01      	ldr	r3, [sp, #4]
 8024836:	2601      	movs	r6, #1
 8024838:	6163      	str	r3, [r4, #20]
 802483a:	3020      	adds	r0, #32
 802483c:	e7e7      	b.n	802480e <__d2b+0x5e>
 802483e:	4b0a      	ldr	r3, [pc, #40]	@ (8024868 <__d2b+0xb8>)
 8024840:	18c0      	adds	r0, r0, r3
 8024842:	9b08      	ldr	r3, [sp, #32]
 8024844:	6018      	str	r0, [r3, #0]
 8024846:	4b09      	ldr	r3, [pc, #36]	@ (802486c <__d2b+0xbc>)
 8024848:	18f3      	adds	r3, r6, r3
 802484a:	009b      	lsls	r3, r3, #2
 802484c:	18e3      	adds	r3, r4, r3
 802484e:	6958      	ldr	r0, [r3, #20]
 8024850:	f7ff fcaa 	bl	80241a8 <__hi0bits>
 8024854:	0176      	lsls	r6, r6, #5
 8024856:	e7e3      	b.n	8024820 <__d2b+0x70>
 8024858:	08029231 	.word	0x08029231
 802485c:	080292a2 	.word	0x080292a2
 8024860:	0000030f 	.word	0x0000030f
 8024864:	fffffbcd 	.word	0xfffffbcd
 8024868:	fffffbce 	.word	0xfffffbce
 802486c:	3fffffff 	.word	0x3fffffff

08024870 <__ratio>:
 8024870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024872:	b087      	sub	sp, #28
 8024874:	000f      	movs	r7, r1
 8024876:	a904      	add	r1, sp, #16
 8024878:	0006      	movs	r6, r0
 802487a:	f7ff ff4d 	bl	8024718 <__b2d>
 802487e:	9000      	str	r0, [sp, #0]
 8024880:	9101      	str	r1, [sp, #4]
 8024882:	9b00      	ldr	r3, [sp, #0]
 8024884:	9c01      	ldr	r4, [sp, #4]
 8024886:	0038      	movs	r0, r7
 8024888:	a905      	add	r1, sp, #20
 802488a:	9302      	str	r3, [sp, #8]
 802488c:	9403      	str	r4, [sp, #12]
 802488e:	f7ff ff43 	bl	8024718 <__b2d>
 8024892:	000d      	movs	r5, r1
 8024894:	0002      	movs	r2, r0
 8024896:	000b      	movs	r3, r1
 8024898:	6930      	ldr	r0, [r6, #16]
 802489a:	6939      	ldr	r1, [r7, #16]
 802489c:	9e04      	ldr	r6, [sp, #16]
 802489e:	1a40      	subs	r0, r0, r1
 80248a0:	9905      	ldr	r1, [sp, #20]
 80248a2:	0140      	lsls	r0, r0, #5
 80248a4:	1a71      	subs	r1, r6, r1
 80248a6:	1841      	adds	r1, r0, r1
 80248a8:	0508      	lsls	r0, r1, #20
 80248aa:	2900      	cmp	r1, #0
 80248ac:	dd08      	ble.n	80248c0 <__ratio+0x50>
 80248ae:	9901      	ldr	r1, [sp, #4]
 80248b0:	1841      	adds	r1, r0, r1
 80248b2:	9103      	str	r1, [sp, #12]
 80248b4:	9802      	ldr	r0, [sp, #8]
 80248b6:	9903      	ldr	r1, [sp, #12]
 80248b8:	f7dd fa7c 	bl	8001db4 <__aeabi_ddiv>
 80248bc:	b007      	add	sp, #28
 80248be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80248c0:	1a2b      	subs	r3, r5, r0
 80248c2:	e7f7      	b.n	80248b4 <__ratio+0x44>

080248c4 <__copybits>:
 80248c4:	b570      	push	{r4, r5, r6, lr}
 80248c6:	0014      	movs	r4, r2
 80248c8:	0005      	movs	r5, r0
 80248ca:	3901      	subs	r1, #1
 80248cc:	6913      	ldr	r3, [r2, #16]
 80248ce:	1149      	asrs	r1, r1, #5
 80248d0:	3101      	adds	r1, #1
 80248d2:	0089      	lsls	r1, r1, #2
 80248d4:	3414      	adds	r4, #20
 80248d6:	009b      	lsls	r3, r3, #2
 80248d8:	1841      	adds	r1, r0, r1
 80248da:	18e3      	adds	r3, r4, r3
 80248dc:	42a3      	cmp	r3, r4
 80248de:	d80d      	bhi.n	80248fc <__copybits+0x38>
 80248e0:	0014      	movs	r4, r2
 80248e2:	3411      	adds	r4, #17
 80248e4:	2500      	movs	r5, #0
 80248e6:	429c      	cmp	r4, r3
 80248e8:	d803      	bhi.n	80248f2 <__copybits+0x2e>
 80248ea:	1a9b      	subs	r3, r3, r2
 80248ec:	3b11      	subs	r3, #17
 80248ee:	089b      	lsrs	r3, r3, #2
 80248f0:	009d      	lsls	r5, r3, #2
 80248f2:	2300      	movs	r3, #0
 80248f4:	1940      	adds	r0, r0, r5
 80248f6:	4281      	cmp	r1, r0
 80248f8:	d803      	bhi.n	8024902 <__copybits+0x3e>
 80248fa:	bd70      	pop	{r4, r5, r6, pc}
 80248fc:	cc40      	ldmia	r4!, {r6}
 80248fe:	c540      	stmia	r5!, {r6}
 8024900:	e7ec      	b.n	80248dc <__copybits+0x18>
 8024902:	c008      	stmia	r0!, {r3}
 8024904:	e7f7      	b.n	80248f6 <__copybits+0x32>

08024906 <__any_on>:
 8024906:	0002      	movs	r2, r0
 8024908:	6900      	ldr	r0, [r0, #16]
 802490a:	b510      	push	{r4, lr}
 802490c:	3214      	adds	r2, #20
 802490e:	114b      	asrs	r3, r1, #5
 8024910:	4298      	cmp	r0, r3
 8024912:	db13      	blt.n	802493c <__any_on+0x36>
 8024914:	dd0c      	ble.n	8024930 <__any_on+0x2a>
 8024916:	241f      	movs	r4, #31
 8024918:	0008      	movs	r0, r1
 802491a:	4020      	ands	r0, r4
 802491c:	4221      	tst	r1, r4
 802491e:	d007      	beq.n	8024930 <__any_on+0x2a>
 8024920:	0099      	lsls	r1, r3, #2
 8024922:	588c      	ldr	r4, [r1, r2]
 8024924:	0021      	movs	r1, r4
 8024926:	40c1      	lsrs	r1, r0
 8024928:	4081      	lsls	r1, r0
 802492a:	2001      	movs	r0, #1
 802492c:	428c      	cmp	r4, r1
 802492e:	d104      	bne.n	802493a <__any_on+0x34>
 8024930:	009b      	lsls	r3, r3, #2
 8024932:	18d3      	adds	r3, r2, r3
 8024934:	4293      	cmp	r3, r2
 8024936:	d803      	bhi.n	8024940 <__any_on+0x3a>
 8024938:	2000      	movs	r0, #0
 802493a:	bd10      	pop	{r4, pc}
 802493c:	0003      	movs	r3, r0
 802493e:	e7f7      	b.n	8024930 <__any_on+0x2a>
 8024940:	3b04      	subs	r3, #4
 8024942:	6819      	ldr	r1, [r3, #0]
 8024944:	2900      	cmp	r1, #0
 8024946:	d0f5      	beq.n	8024934 <__any_on+0x2e>
 8024948:	2001      	movs	r0, #1
 802494a:	e7f6      	b.n	802493a <__any_on+0x34>

0802494c <__ascii_wctomb>:
 802494c:	0003      	movs	r3, r0
 802494e:	1e08      	subs	r0, r1, #0
 8024950:	d005      	beq.n	802495e <__ascii_wctomb+0x12>
 8024952:	2aff      	cmp	r2, #255	@ 0xff
 8024954:	d904      	bls.n	8024960 <__ascii_wctomb+0x14>
 8024956:	228a      	movs	r2, #138	@ 0x8a
 8024958:	2001      	movs	r0, #1
 802495a:	601a      	str	r2, [r3, #0]
 802495c:	4240      	negs	r0, r0
 802495e:	4770      	bx	lr
 8024960:	2001      	movs	r0, #1
 8024962:	700a      	strb	r2, [r1, #0]
 8024964:	e7fb      	b.n	802495e <__ascii_wctomb+0x12>
	...

08024968 <__ssputs_r>:
 8024968:	b5f0      	push	{r4, r5, r6, r7, lr}
 802496a:	688e      	ldr	r6, [r1, #8]
 802496c:	b085      	sub	sp, #20
 802496e:	001f      	movs	r7, r3
 8024970:	000c      	movs	r4, r1
 8024972:	680b      	ldr	r3, [r1, #0]
 8024974:	9002      	str	r0, [sp, #8]
 8024976:	9203      	str	r2, [sp, #12]
 8024978:	42be      	cmp	r6, r7
 802497a:	d830      	bhi.n	80249de <__ssputs_r+0x76>
 802497c:	210c      	movs	r1, #12
 802497e:	5e62      	ldrsh	r2, [r4, r1]
 8024980:	2190      	movs	r1, #144	@ 0x90
 8024982:	00c9      	lsls	r1, r1, #3
 8024984:	420a      	tst	r2, r1
 8024986:	d028      	beq.n	80249da <__ssputs_r+0x72>
 8024988:	2003      	movs	r0, #3
 802498a:	6921      	ldr	r1, [r4, #16]
 802498c:	1a5b      	subs	r3, r3, r1
 802498e:	9301      	str	r3, [sp, #4]
 8024990:	6963      	ldr	r3, [r4, #20]
 8024992:	4343      	muls	r3, r0
 8024994:	9801      	ldr	r0, [sp, #4]
 8024996:	0fdd      	lsrs	r5, r3, #31
 8024998:	18ed      	adds	r5, r5, r3
 802499a:	1c7b      	adds	r3, r7, #1
 802499c:	181b      	adds	r3, r3, r0
 802499e:	106d      	asrs	r5, r5, #1
 80249a0:	42ab      	cmp	r3, r5
 80249a2:	d900      	bls.n	80249a6 <__ssputs_r+0x3e>
 80249a4:	001d      	movs	r5, r3
 80249a6:	0552      	lsls	r2, r2, #21
 80249a8:	d528      	bpl.n	80249fc <__ssputs_r+0x94>
 80249aa:	0029      	movs	r1, r5
 80249ac:	9802      	ldr	r0, [sp, #8]
 80249ae:	f7ff fa61 	bl	8023e74 <_malloc_r>
 80249b2:	1e06      	subs	r6, r0, #0
 80249b4:	d02c      	beq.n	8024a10 <__ssputs_r+0xa8>
 80249b6:	9a01      	ldr	r2, [sp, #4]
 80249b8:	6921      	ldr	r1, [r4, #16]
 80249ba:	f7fd fff9 	bl	80229b0 <memcpy>
 80249be:	89a2      	ldrh	r2, [r4, #12]
 80249c0:	4b18      	ldr	r3, [pc, #96]	@ (8024a24 <__ssputs_r+0xbc>)
 80249c2:	401a      	ands	r2, r3
 80249c4:	2380      	movs	r3, #128	@ 0x80
 80249c6:	4313      	orrs	r3, r2
 80249c8:	81a3      	strh	r3, [r4, #12]
 80249ca:	9b01      	ldr	r3, [sp, #4]
 80249cc:	6126      	str	r6, [r4, #16]
 80249ce:	18f6      	adds	r6, r6, r3
 80249d0:	6026      	str	r6, [r4, #0]
 80249d2:	003e      	movs	r6, r7
 80249d4:	6165      	str	r5, [r4, #20]
 80249d6:	1aed      	subs	r5, r5, r3
 80249d8:	60a5      	str	r5, [r4, #8]
 80249da:	42be      	cmp	r6, r7
 80249dc:	d900      	bls.n	80249e0 <__ssputs_r+0x78>
 80249de:	003e      	movs	r6, r7
 80249e0:	0032      	movs	r2, r6
 80249e2:	9903      	ldr	r1, [sp, #12]
 80249e4:	6820      	ldr	r0, [r4, #0]
 80249e6:	f000 fb7e 	bl	80250e6 <memmove>
 80249ea:	2000      	movs	r0, #0
 80249ec:	68a3      	ldr	r3, [r4, #8]
 80249ee:	1b9b      	subs	r3, r3, r6
 80249f0:	60a3      	str	r3, [r4, #8]
 80249f2:	6823      	ldr	r3, [r4, #0]
 80249f4:	199b      	adds	r3, r3, r6
 80249f6:	6023      	str	r3, [r4, #0]
 80249f8:	b005      	add	sp, #20
 80249fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80249fc:	002a      	movs	r2, r5
 80249fe:	9802      	ldr	r0, [sp, #8]
 8024a00:	f000 fc05 	bl	802520e <_realloc_r>
 8024a04:	1e06      	subs	r6, r0, #0
 8024a06:	d1e0      	bne.n	80249ca <__ssputs_r+0x62>
 8024a08:	6921      	ldr	r1, [r4, #16]
 8024a0a:	9802      	ldr	r0, [sp, #8]
 8024a0c:	f7fe fe62 	bl	80236d4 <_free_r>
 8024a10:	230c      	movs	r3, #12
 8024a12:	2001      	movs	r0, #1
 8024a14:	9a02      	ldr	r2, [sp, #8]
 8024a16:	4240      	negs	r0, r0
 8024a18:	6013      	str	r3, [r2, #0]
 8024a1a:	89a2      	ldrh	r2, [r4, #12]
 8024a1c:	3334      	adds	r3, #52	@ 0x34
 8024a1e:	4313      	orrs	r3, r2
 8024a20:	81a3      	strh	r3, [r4, #12]
 8024a22:	e7e9      	b.n	80249f8 <__ssputs_r+0x90>
 8024a24:	fffffb7f 	.word	0xfffffb7f

08024a28 <_svfiprintf_r>:
 8024a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a2a:	b0a1      	sub	sp, #132	@ 0x84
 8024a2c:	9003      	str	r0, [sp, #12]
 8024a2e:	001d      	movs	r5, r3
 8024a30:	898b      	ldrh	r3, [r1, #12]
 8024a32:	000f      	movs	r7, r1
 8024a34:	0016      	movs	r6, r2
 8024a36:	061b      	lsls	r3, r3, #24
 8024a38:	d511      	bpl.n	8024a5e <_svfiprintf_r+0x36>
 8024a3a:	690b      	ldr	r3, [r1, #16]
 8024a3c:	2b00      	cmp	r3, #0
 8024a3e:	d10e      	bne.n	8024a5e <_svfiprintf_r+0x36>
 8024a40:	2140      	movs	r1, #64	@ 0x40
 8024a42:	f7ff fa17 	bl	8023e74 <_malloc_r>
 8024a46:	6038      	str	r0, [r7, #0]
 8024a48:	6138      	str	r0, [r7, #16]
 8024a4a:	2800      	cmp	r0, #0
 8024a4c:	d105      	bne.n	8024a5a <_svfiprintf_r+0x32>
 8024a4e:	230c      	movs	r3, #12
 8024a50:	9a03      	ldr	r2, [sp, #12]
 8024a52:	6013      	str	r3, [r2, #0]
 8024a54:	2001      	movs	r0, #1
 8024a56:	4240      	negs	r0, r0
 8024a58:	e0cf      	b.n	8024bfa <_svfiprintf_r+0x1d2>
 8024a5a:	2340      	movs	r3, #64	@ 0x40
 8024a5c:	617b      	str	r3, [r7, #20]
 8024a5e:	2300      	movs	r3, #0
 8024a60:	ac08      	add	r4, sp, #32
 8024a62:	6163      	str	r3, [r4, #20]
 8024a64:	3320      	adds	r3, #32
 8024a66:	7663      	strb	r3, [r4, #25]
 8024a68:	3310      	adds	r3, #16
 8024a6a:	76a3      	strb	r3, [r4, #26]
 8024a6c:	9507      	str	r5, [sp, #28]
 8024a6e:	0035      	movs	r5, r6
 8024a70:	782b      	ldrb	r3, [r5, #0]
 8024a72:	2b00      	cmp	r3, #0
 8024a74:	d001      	beq.n	8024a7a <_svfiprintf_r+0x52>
 8024a76:	2b25      	cmp	r3, #37	@ 0x25
 8024a78:	d148      	bne.n	8024b0c <_svfiprintf_r+0xe4>
 8024a7a:	1bab      	subs	r3, r5, r6
 8024a7c:	9305      	str	r3, [sp, #20]
 8024a7e:	42b5      	cmp	r5, r6
 8024a80:	d00b      	beq.n	8024a9a <_svfiprintf_r+0x72>
 8024a82:	0032      	movs	r2, r6
 8024a84:	0039      	movs	r1, r7
 8024a86:	9803      	ldr	r0, [sp, #12]
 8024a88:	f7ff ff6e 	bl	8024968 <__ssputs_r>
 8024a8c:	3001      	adds	r0, #1
 8024a8e:	d100      	bne.n	8024a92 <_svfiprintf_r+0x6a>
 8024a90:	e0ae      	b.n	8024bf0 <_svfiprintf_r+0x1c8>
 8024a92:	6963      	ldr	r3, [r4, #20]
 8024a94:	9a05      	ldr	r2, [sp, #20]
 8024a96:	189b      	adds	r3, r3, r2
 8024a98:	6163      	str	r3, [r4, #20]
 8024a9a:	782b      	ldrb	r3, [r5, #0]
 8024a9c:	2b00      	cmp	r3, #0
 8024a9e:	d100      	bne.n	8024aa2 <_svfiprintf_r+0x7a>
 8024aa0:	e0a6      	b.n	8024bf0 <_svfiprintf_r+0x1c8>
 8024aa2:	2201      	movs	r2, #1
 8024aa4:	2300      	movs	r3, #0
 8024aa6:	4252      	negs	r2, r2
 8024aa8:	6062      	str	r2, [r4, #4]
 8024aaa:	a904      	add	r1, sp, #16
 8024aac:	3254      	adds	r2, #84	@ 0x54
 8024aae:	1852      	adds	r2, r2, r1
 8024ab0:	1c6e      	adds	r6, r5, #1
 8024ab2:	6023      	str	r3, [r4, #0]
 8024ab4:	60e3      	str	r3, [r4, #12]
 8024ab6:	60a3      	str	r3, [r4, #8]
 8024ab8:	7013      	strb	r3, [r2, #0]
 8024aba:	65a3      	str	r3, [r4, #88]	@ 0x58
 8024abc:	4b54      	ldr	r3, [pc, #336]	@ (8024c10 <_svfiprintf_r+0x1e8>)
 8024abe:	2205      	movs	r2, #5
 8024ac0:	0018      	movs	r0, r3
 8024ac2:	7831      	ldrb	r1, [r6, #0]
 8024ac4:	9305      	str	r3, [sp, #20]
 8024ac6:	f7fd ff68 	bl	802299a <memchr>
 8024aca:	1c75      	adds	r5, r6, #1
 8024acc:	2800      	cmp	r0, #0
 8024ace:	d11f      	bne.n	8024b10 <_svfiprintf_r+0xe8>
 8024ad0:	6822      	ldr	r2, [r4, #0]
 8024ad2:	06d3      	lsls	r3, r2, #27
 8024ad4:	d504      	bpl.n	8024ae0 <_svfiprintf_r+0xb8>
 8024ad6:	2353      	movs	r3, #83	@ 0x53
 8024ad8:	a904      	add	r1, sp, #16
 8024ada:	185b      	adds	r3, r3, r1
 8024adc:	2120      	movs	r1, #32
 8024ade:	7019      	strb	r1, [r3, #0]
 8024ae0:	0713      	lsls	r3, r2, #28
 8024ae2:	d504      	bpl.n	8024aee <_svfiprintf_r+0xc6>
 8024ae4:	2353      	movs	r3, #83	@ 0x53
 8024ae6:	a904      	add	r1, sp, #16
 8024ae8:	185b      	adds	r3, r3, r1
 8024aea:	212b      	movs	r1, #43	@ 0x2b
 8024aec:	7019      	strb	r1, [r3, #0]
 8024aee:	7833      	ldrb	r3, [r6, #0]
 8024af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8024af2:	d016      	beq.n	8024b22 <_svfiprintf_r+0xfa>
 8024af4:	0035      	movs	r5, r6
 8024af6:	2100      	movs	r1, #0
 8024af8:	200a      	movs	r0, #10
 8024afa:	68e3      	ldr	r3, [r4, #12]
 8024afc:	782a      	ldrb	r2, [r5, #0]
 8024afe:	1c6e      	adds	r6, r5, #1
 8024b00:	3a30      	subs	r2, #48	@ 0x30
 8024b02:	2a09      	cmp	r2, #9
 8024b04:	d950      	bls.n	8024ba8 <_svfiprintf_r+0x180>
 8024b06:	2900      	cmp	r1, #0
 8024b08:	d111      	bne.n	8024b2e <_svfiprintf_r+0x106>
 8024b0a:	e017      	b.n	8024b3c <_svfiprintf_r+0x114>
 8024b0c:	3501      	adds	r5, #1
 8024b0e:	e7af      	b.n	8024a70 <_svfiprintf_r+0x48>
 8024b10:	9b05      	ldr	r3, [sp, #20]
 8024b12:	6822      	ldr	r2, [r4, #0]
 8024b14:	1ac0      	subs	r0, r0, r3
 8024b16:	2301      	movs	r3, #1
 8024b18:	4083      	lsls	r3, r0
 8024b1a:	4313      	orrs	r3, r2
 8024b1c:	002e      	movs	r6, r5
 8024b1e:	6023      	str	r3, [r4, #0]
 8024b20:	e7cc      	b.n	8024abc <_svfiprintf_r+0x94>
 8024b22:	9b07      	ldr	r3, [sp, #28]
 8024b24:	1d19      	adds	r1, r3, #4
 8024b26:	681b      	ldr	r3, [r3, #0]
 8024b28:	9107      	str	r1, [sp, #28]
 8024b2a:	2b00      	cmp	r3, #0
 8024b2c:	db01      	blt.n	8024b32 <_svfiprintf_r+0x10a>
 8024b2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024b30:	e004      	b.n	8024b3c <_svfiprintf_r+0x114>
 8024b32:	425b      	negs	r3, r3
 8024b34:	60e3      	str	r3, [r4, #12]
 8024b36:	2302      	movs	r3, #2
 8024b38:	4313      	orrs	r3, r2
 8024b3a:	6023      	str	r3, [r4, #0]
 8024b3c:	782b      	ldrb	r3, [r5, #0]
 8024b3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8024b40:	d10c      	bne.n	8024b5c <_svfiprintf_r+0x134>
 8024b42:	786b      	ldrb	r3, [r5, #1]
 8024b44:	2b2a      	cmp	r3, #42	@ 0x2a
 8024b46:	d134      	bne.n	8024bb2 <_svfiprintf_r+0x18a>
 8024b48:	9b07      	ldr	r3, [sp, #28]
 8024b4a:	3502      	adds	r5, #2
 8024b4c:	1d1a      	adds	r2, r3, #4
 8024b4e:	681b      	ldr	r3, [r3, #0]
 8024b50:	9207      	str	r2, [sp, #28]
 8024b52:	2b00      	cmp	r3, #0
 8024b54:	da01      	bge.n	8024b5a <_svfiprintf_r+0x132>
 8024b56:	2301      	movs	r3, #1
 8024b58:	425b      	negs	r3, r3
 8024b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024b5c:	4e2d      	ldr	r6, [pc, #180]	@ (8024c14 <_svfiprintf_r+0x1ec>)
 8024b5e:	2203      	movs	r2, #3
 8024b60:	0030      	movs	r0, r6
 8024b62:	7829      	ldrb	r1, [r5, #0]
 8024b64:	f7fd ff19 	bl	802299a <memchr>
 8024b68:	2800      	cmp	r0, #0
 8024b6a:	d006      	beq.n	8024b7a <_svfiprintf_r+0x152>
 8024b6c:	2340      	movs	r3, #64	@ 0x40
 8024b6e:	1b80      	subs	r0, r0, r6
 8024b70:	4083      	lsls	r3, r0
 8024b72:	6822      	ldr	r2, [r4, #0]
 8024b74:	3501      	adds	r5, #1
 8024b76:	4313      	orrs	r3, r2
 8024b78:	6023      	str	r3, [r4, #0]
 8024b7a:	7829      	ldrb	r1, [r5, #0]
 8024b7c:	2206      	movs	r2, #6
 8024b7e:	4826      	ldr	r0, [pc, #152]	@ (8024c18 <_svfiprintf_r+0x1f0>)
 8024b80:	1c6e      	adds	r6, r5, #1
 8024b82:	7621      	strb	r1, [r4, #24]
 8024b84:	f7fd ff09 	bl	802299a <memchr>
 8024b88:	2800      	cmp	r0, #0
 8024b8a:	d038      	beq.n	8024bfe <_svfiprintf_r+0x1d6>
 8024b8c:	4b23      	ldr	r3, [pc, #140]	@ (8024c1c <_svfiprintf_r+0x1f4>)
 8024b8e:	2b00      	cmp	r3, #0
 8024b90:	d122      	bne.n	8024bd8 <_svfiprintf_r+0x1b0>
 8024b92:	2207      	movs	r2, #7
 8024b94:	9b07      	ldr	r3, [sp, #28]
 8024b96:	3307      	adds	r3, #7
 8024b98:	4393      	bics	r3, r2
 8024b9a:	3308      	adds	r3, #8
 8024b9c:	9307      	str	r3, [sp, #28]
 8024b9e:	6963      	ldr	r3, [r4, #20]
 8024ba0:	9a04      	ldr	r2, [sp, #16]
 8024ba2:	189b      	adds	r3, r3, r2
 8024ba4:	6163      	str	r3, [r4, #20]
 8024ba6:	e762      	b.n	8024a6e <_svfiprintf_r+0x46>
 8024ba8:	4343      	muls	r3, r0
 8024baa:	0035      	movs	r5, r6
 8024bac:	2101      	movs	r1, #1
 8024bae:	189b      	adds	r3, r3, r2
 8024bb0:	e7a4      	b.n	8024afc <_svfiprintf_r+0xd4>
 8024bb2:	2300      	movs	r3, #0
 8024bb4:	200a      	movs	r0, #10
 8024bb6:	0019      	movs	r1, r3
 8024bb8:	3501      	adds	r5, #1
 8024bba:	6063      	str	r3, [r4, #4]
 8024bbc:	782a      	ldrb	r2, [r5, #0]
 8024bbe:	1c6e      	adds	r6, r5, #1
 8024bc0:	3a30      	subs	r2, #48	@ 0x30
 8024bc2:	2a09      	cmp	r2, #9
 8024bc4:	d903      	bls.n	8024bce <_svfiprintf_r+0x1a6>
 8024bc6:	2b00      	cmp	r3, #0
 8024bc8:	d0c8      	beq.n	8024b5c <_svfiprintf_r+0x134>
 8024bca:	9109      	str	r1, [sp, #36]	@ 0x24
 8024bcc:	e7c6      	b.n	8024b5c <_svfiprintf_r+0x134>
 8024bce:	4341      	muls	r1, r0
 8024bd0:	0035      	movs	r5, r6
 8024bd2:	2301      	movs	r3, #1
 8024bd4:	1889      	adds	r1, r1, r2
 8024bd6:	e7f1      	b.n	8024bbc <_svfiprintf_r+0x194>
 8024bd8:	aa07      	add	r2, sp, #28
 8024bda:	9200      	str	r2, [sp, #0]
 8024bdc:	0021      	movs	r1, r4
 8024bde:	003a      	movs	r2, r7
 8024be0:	4b0f      	ldr	r3, [pc, #60]	@ (8024c20 <_svfiprintf_r+0x1f8>)
 8024be2:	9803      	ldr	r0, [sp, #12]
 8024be4:	f7fc ffb2 	bl	8021b4c <_printf_float>
 8024be8:	9004      	str	r0, [sp, #16]
 8024bea:	9b04      	ldr	r3, [sp, #16]
 8024bec:	3301      	adds	r3, #1
 8024bee:	d1d6      	bne.n	8024b9e <_svfiprintf_r+0x176>
 8024bf0:	89bb      	ldrh	r3, [r7, #12]
 8024bf2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024bf4:	065b      	lsls	r3, r3, #25
 8024bf6:	d500      	bpl.n	8024bfa <_svfiprintf_r+0x1d2>
 8024bf8:	e72c      	b.n	8024a54 <_svfiprintf_r+0x2c>
 8024bfa:	b021      	add	sp, #132	@ 0x84
 8024bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024bfe:	aa07      	add	r2, sp, #28
 8024c00:	9200      	str	r2, [sp, #0]
 8024c02:	0021      	movs	r1, r4
 8024c04:	003a      	movs	r2, r7
 8024c06:	4b06      	ldr	r3, [pc, #24]	@ (8024c20 <_svfiprintf_r+0x1f8>)
 8024c08:	9803      	ldr	r0, [sp, #12]
 8024c0a:	f7fd fa4d 	bl	80220a8 <_printf_i>
 8024c0e:	e7eb      	b.n	8024be8 <_svfiprintf_r+0x1c0>
 8024c10:	080293f8 	.word	0x080293f8
 8024c14:	080293fe 	.word	0x080293fe
 8024c18:	08029402 	.word	0x08029402
 8024c1c:	08021b4d 	.word	0x08021b4d
 8024c20:	08024969 	.word	0x08024969

08024c24 <__sfputc_r>:
 8024c24:	6893      	ldr	r3, [r2, #8]
 8024c26:	b510      	push	{r4, lr}
 8024c28:	3b01      	subs	r3, #1
 8024c2a:	6093      	str	r3, [r2, #8]
 8024c2c:	2b00      	cmp	r3, #0
 8024c2e:	da04      	bge.n	8024c3a <__sfputc_r+0x16>
 8024c30:	6994      	ldr	r4, [r2, #24]
 8024c32:	42a3      	cmp	r3, r4
 8024c34:	db07      	blt.n	8024c46 <__sfputc_r+0x22>
 8024c36:	290a      	cmp	r1, #10
 8024c38:	d005      	beq.n	8024c46 <__sfputc_r+0x22>
 8024c3a:	6813      	ldr	r3, [r2, #0]
 8024c3c:	1c58      	adds	r0, r3, #1
 8024c3e:	6010      	str	r0, [r2, #0]
 8024c40:	7019      	strb	r1, [r3, #0]
 8024c42:	0008      	movs	r0, r1
 8024c44:	bd10      	pop	{r4, pc}
 8024c46:	f7fd fd37 	bl	80226b8 <__swbuf_r>
 8024c4a:	0001      	movs	r1, r0
 8024c4c:	e7f9      	b.n	8024c42 <__sfputc_r+0x1e>

08024c4e <__sfputs_r>:
 8024c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c50:	0006      	movs	r6, r0
 8024c52:	000f      	movs	r7, r1
 8024c54:	0014      	movs	r4, r2
 8024c56:	18d5      	adds	r5, r2, r3
 8024c58:	42ac      	cmp	r4, r5
 8024c5a:	d101      	bne.n	8024c60 <__sfputs_r+0x12>
 8024c5c:	2000      	movs	r0, #0
 8024c5e:	e007      	b.n	8024c70 <__sfputs_r+0x22>
 8024c60:	7821      	ldrb	r1, [r4, #0]
 8024c62:	003a      	movs	r2, r7
 8024c64:	0030      	movs	r0, r6
 8024c66:	f7ff ffdd 	bl	8024c24 <__sfputc_r>
 8024c6a:	3401      	adds	r4, #1
 8024c6c:	1c43      	adds	r3, r0, #1
 8024c6e:	d1f3      	bne.n	8024c58 <__sfputs_r+0xa>
 8024c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024c74 <_vfiprintf_r>:
 8024c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024c76:	b0a1      	sub	sp, #132	@ 0x84
 8024c78:	000f      	movs	r7, r1
 8024c7a:	0015      	movs	r5, r2
 8024c7c:	001e      	movs	r6, r3
 8024c7e:	9003      	str	r0, [sp, #12]
 8024c80:	2800      	cmp	r0, #0
 8024c82:	d004      	beq.n	8024c8e <_vfiprintf_r+0x1a>
 8024c84:	6a03      	ldr	r3, [r0, #32]
 8024c86:	2b00      	cmp	r3, #0
 8024c88:	d101      	bne.n	8024c8e <_vfiprintf_r+0x1a>
 8024c8a:	f7fd fbab 	bl	80223e4 <__sinit>
 8024c8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024c90:	07db      	lsls	r3, r3, #31
 8024c92:	d405      	bmi.n	8024ca0 <_vfiprintf_r+0x2c>
 8024c94:	89bb      	ldrh	r3, [r7, #12]
 8024c96:	059b      	lsls	r3, r3, #22
 8024c98:	d402      	bmi.n	8024ca0 <_vfiprintf_r+0x2c>
 8024c9a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8024c9c:	f7fd fe7b 	bl	8022996 <__retarget_lock_acquire_recursive>
 8024ca0:	89bb      	ldrh	r3, [r7, #12]
 8024ca2:	071b      	lsls	r3, r3, #28
 8024ca4:	d502      	bpl.n	8024cac <_vfiprintf_r+0x38>
 8024ca6:	693b      	ldr	r3, [r7, #16]
 8024ca8:	2b00      	cmp	r3, #0
 8024caa:	d113      	bne.n	8024cd4 <_vfiprintf_r+0x60>
 8024cac:	0039      	movs	r1, r7
 8024cae:	9803      	ldr	r0, [sp, #12]
 8024cb0:	f7fd fd44 	bl	802273c <__swsetup_r>
 8024cb4:	2800      	cmp	r0, #0
 8024cb6:	d00d      	beq.n	8024cd4 <_vfiprintf_r+0x60>
 8024cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024cba:	07db      	lsls	r3, r3, #31
 8024cbc:	d503      	bpl.n	8024cc6 <_vfiprintf_r+0x52>
 8024cbe:	2001      	movs	r0, #1
 8024cc0:	4240      	negs	r0, r0
 8024cc2:	b021      	add	sp, #132	@ 0x84
 8024cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024cc6:	89bb      	ldrh	r3, [r7, #12]
 8024cc8:	059b      	lsls	r3, r3, #22
 8024cca:	d4f8      	bmi.n	8024cbe <_vfiprintf_r+0x4a>
 8024ccc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8024cce:	f7fd fe63 	bl	8022998 <__retarget_lock_release_recursive>
 8024cd2:	e7f4      	b.n	8024cbe <_vfiprintf_r+0x4a>
 8024cd4:	2300      	movs	r3, #0
 8024cd6:	ac08      	add	r4, sp, #32
 8024cd8:	6163      	str	r3, [r4, #20]
 8024cda:	3320      	adds	r3, #32
 8024cdc:	7663      	strb	r3, [r4, #25]
 8024cde:	3310      	adds	r3, #16
 8024ce0:	76a3      	strb	r3, [r4, #26]
 8024ce2:	9607      	str	r6, [sp, #28]
 8024ce4:	002e      	movs	r6, r5
 8024ce6:	7833      	ldrb	r3, [r6, #0]
 8024ce8:	2b00      	cmp	r3, #0
 8024cea:	d001      	beq.n	8024cf0 <_vfiprintf_r+0x7c>
 8024cec:	2b25      	cmp	r3, #37	@ 0x25
 8024cee:	d148      	bne.n	8024d82 <_vfiprintf_r+0x10e>
 8024cf0:	1b73      	subs	r3, r6, r5
 8024cf2:	9305      	str	r3, [sp, #20]
 8024cf4:	42ae      	cmp	r6, r5
 8024cf6:	d00b      	beq.n	8024d10 <_vfiprintf_r+0x9c>
 8024cf8:	002a      	movs	r2, r5
 8024cfa:	0039      	movs	r1, r7
 8024cfc:	9803      	ldr	r0, [sp, #12]
 8024cfe:	f7ff ffa6 	bl	8024c4e <__sfputs_r>
 8024d02:	3001      	adds	r0, #1
 8024d04:	d100      	bne.n	8024d08 <_vfiprintf_r+0x94>
 8024d06:	e0ae      	b.n	8024e66 <_vfiprintf_r+0x1f2>
 8024d08:	6963      	ldr	r3, [r4, #20]
 8024d0a:	9a05      	ldr	r2, [sp, #20]
 8024d0c:	189b      	adds	r3, r3, r2
 8024d0e:	6163      	str	r3, [r4, #20]
 8024d10:	7833      	ldrb	r3, [r6, #0]
 8024d12:	2b00      	cmp	r3, #0
 8024d14:	d100      	bne.n	8024d18 <_vfiprintf_r+0xa4>
 8024d16:	e0a6      	b.n	8024e66 <_vfiprintf_r+0x1f2>
 8024d18:	2201      	movs	r2, #1
 8024d1a:	2300      	movs	r3, #0
 8024d1c:	4252      	negs	r2, r2
 8024d1e:	6062      	str	r2, [r4, #4]
 8024d20:	a904      	add	r1, sp, #16
 8024d22:	3254      	adds	r2, #84	@ 0x54
 8024d24:	1852      	adds	r2, r2, r1
 8024d26:	1c75      	adds	r5, r6, #1
 8024d28:	6023      	str	r3, [r4, #0]
 8024d2a:	60e3      	str	r3, [r4, #12]
 8024d2c:	60a3      	str	r3, [r4, #8]
 8024d2e:	7013      	strb	r3, [r2, #0]
 8024d30:	65a3      	str	r3, [r4, #88]	@ 0x58
 8024d32:	4b59      	ldr	r3, [pc, #356]	@ (8024e98 <_vfiprintf_r+0x224>)
 8024d34:	2205      	movs	r2, #5
 8024d36:	0018      	movs	r0, r3
 8024d38:	7829      	ldrb	r1, [r5, #0]
 8024d3a:	9305      	str	r3, [sp, #20]
 8024d3c:	f7fd fe2d 	bl	802299a <memchr>
 8024d40:	1c6e      	adds	r6, r5, #1
 8024d42:	2800      	cmp	r0, #0
 8024d44:	d11f      	bne.n	8024d86 <_vfiprintf_r+0x112>
 8024d46:	6822      	ldr	r2, [r4, #0]
 8024d48:	06d3      	lsls	r3, r2, #27
 8024d4a:	d504      	bpl.n	8024d56 <_vfiprintf_r+0xe2>
 8024d4c:	2353      	movs	r3, #83	@ 0x53
 8024d4e:	a904      	add	r1, sp, #16
 8024d50:	185b      	adds	r3, r3, r1
 8024d52:	2120      	movs	r1, #32
 8024d54:	7019      	strb	r1, [r3, #0]
 8024d56:	0713      	lsls	r3, r2, #28
 8024d58:	d504      	bpl.n	8024d64 <_vfiprintf_r+0xf0>
 8024d5a:	2353      	movs	r3, #83	@ 0x53
 8024d5c:	a904      	add	r1, sp, #16
 8024d5e:	185b      	adds	r3, r3, r1
 8024d60:	212b      	movs	r1, #43	@ 0x2b
 8024d62:	7019      	strb	r1, [r3, #0]
 8024d64:	782b      	ldrb	r3, [r5, #0]
 8024d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8024d68:	d016      	beq.n	8024d98 <_vfiprintf_r+0x124>
 8024d6a:	002e      	movs	r6, r5
 8024d6c:	2100      	movs	r1, #0
 8024d6e:	200a      	movs	r0, #10
 8024d70:	68e3      	ldr	r3, [r4, #12]
 8024d72:	7832      	ldrb	r2, [r6, #0]
 8024d74:	1c75      	adds	r5, r6, #1
 8024d76:	3a30      	subs	r2, #48	@ 0x30
 8024d78:	2a09      	cmp	r2, #9
 8024d7a:	d950      	bls.n	8024e1e <_vfiprintf_r+0x1aa>
 8024d7c:	2900      	cmp	r1, #0
 8024d7e:	d111      	bne.n	8024da4 <_vfiprintf_r+0x130>
 8024d80:	e017      	b.n	8024db2 <_vfiprintf_r+0x13e>
 8024d82:	3601      	adds	r6, #1
 8024d84:	e7af      	b.n	8024ce6 <_vfiprintf_r+0x72>
 8024d86:	9b05      	ldr	r3, [sp, #20]
 8024d88:	6822      	ldr	r2, [r4, #0]
 8024d8a:	1ac0      	subs	r0, r0, r3
 8024d8c:	2301      	movs	r3, #1
 8024d8e:	4083      	lsls	r3, r0
 8024d90:	4313      	orrs	r3, r2
 8024d92:	0035      	movs	r5, r6
 8024d94:	6023      	str	r3, [r4, #0]
 8024d96:	e7cc      	b.n	8024d32 <_vfiprintf_r+0xbe>
 8024d98:	9b07      	ldr	r3, [sp, #28]
 8024d9a:	1d19      	adds	r1, r3, #4
 8024d9c:	681b      	ldr	r3, [r3, #0]
 8024d9e:	9107      	str	r1, [sp, #28]
 8024da0:	2b00      	cmp	r3, #0
 8024da2:	db01      	blt.n	8024da8 <_vfiprintf_r+0x134>
 8024da4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024da6:	e004      	b.n	8024db2 <_vfiprintf_r+0x13e>
 8024da8:	425b      	negs	r3, r3
 8024daa:	60e3      	str	r3, [r4, #12]
 8024dac:	2302      	movs	r3, #2
 8024dae:	4313      	orrs	r3, r2
 8024db0:	6023      	str	r3, [r4, #0]
 8024db2:	7833      	ldrb	r3, [r6, #0]
 8024db4:	2b2e      	cmp	r3, #46	@ 0x2e
 8024db6:	d10c      	bne.n	8024dd2 <_vfiprintf_r+0x15e>
 8024db8:	7873      	ldrb	r3, [r6, #1]
 8024dba:	2b2a      	cmp	r3, #42	@ 0x2a
 8024dbc:	d134      	bne.n	8024e28 <_vfiprintf_r+0x1b4>
 8024dbe:	9b07      	ldr	r3, [sp, #28]
 8024dc0:	3602      	adds	r6, #2
 8024dc2:	1d1a      	adds	r2, r3, #4
 8024dc4:	681b      	ldr	r3, [r3, #0]
 8024dc6:	9207      	str	r2, [sp, #28]
 8024dc8:	2b00      	cmp	r3, #0
 8024dca:	da01      	bge.n	8024dd0 <_vfiprintf_r+0x15c>
 8024dcc:	2301      	movs	r3, #1
 8024dce:	425b      	negs	r3, r3
 8024dd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8024dd2:	4d32      	ldr	r5, [pc, #200]	@ (8024e9c <_vfiprintf_r+0x228>)
 8024dd4:	2203      	movs	r2, #3
 8024dd6:	0028      	movs	r0, r5
 8024dd8:	7831      	ldrb	r1, [r6, #0]
 8024dda:	f7fd fdde 	bl	802299a <memchr>
 8024dde:	2800      	cmp	r0, #0
 8024de0:	d006      	beq.n	8024df0 <_vfiprintf_r+0x17c>
 8024de2:	2340      	movs	r3, #64	@ 0x40
 8024de4:	1b40      	subs	r0, r0, r5
 8024de6:	4083      	lsls	r3, r0
 8024de8:	6822      	ldr	r2, [r4, #0]
 8024dea:	3601      	adds	r6, #1
 8024dec:	4313      	orrs	r3, r2
 8024dee:	6023      	str	r3, [r4, #0]
 8024df0:	7831      	ldrb	r1, [r6, #0]
 8024df2:	2206      	movs	r2, #6
 8024df4:	482a      	ldr	r0, [pc, #168]	@ (8024ea0 <_vfiprintf_r+0x22c>)
 8024df6:	1c75      	adds	r5, r6, #1
 8024df8:	7621      	strb	r1, [r4, #24]
 8024dfa:	f7fd fdce 	bl	802299a <memchr>
 8024dfe:	2800      	cmp	r0, #0
 8024e00:	d040      	beq.n	8024e84 <_vfiprintf_r+0x210>
 8024e02:	4b28      	ldr	r3, [pc, #160]	@ (8024ea4 <_vfiprintf_r+0x230>)
 8024e04:	2b00      	cmp	r3, #0
 8024e06:	d122      	bne.n	8024e4e <_vfiprintf_r+0x1da>
 8024e08:	2207      	movs	r2, #7
 8024e0a:	9b07      	ldr	r3, [sp, #28]
 8024e0c:	3307      	adds	r3, #7
 8024e0e:	4393      	bics	r3, r2
 8024e10:	3308      	adds	r3, #8
 8024e12:	9307      	str	r3, [sp, #28]
 8024e14:	6963      	ldr	r3, [r4, #20]
 8024e16:	9a04      	ldr	r2, [sp, #16]
 8024e18:	189b      	adds	r3, r3, r2
 8024e1a:	6163      	str	r3, [r4, #20]
 8024e1c:	e762      	b.n	8024ce4 <_vfiprintf_r+0x70>
 8024e1e:	4343      	muls	r3, r0
 8024e20:	002e      	movs	r6, r5
 8024e22:	2101      	movs	r1, #1
 8024e24:	189b      	adds	r3, r3, r2
 8024e26:	e7a4      	b.n	8024d72 <_vfiprintf_r+0xfe>
 8024e28:	2300      	movs	r3, #0
 8024e2a:	200a      	movs	r0, #10
 8024e2c:	0019      	movs	r1, r3
 8024e2e:	3601      	adds	r6, #1
 8024e30:	6063      	str	r3, [r4, #4]
 8024e32:	7832      	ldrb	r2, [r6, #0]
 8024e34:	1c75      	adds	r5, r6, #1
 8024e36:	3a30      	subs	r2, #48	@ 0x30
 8024e38:	2a09      	cmp	r2, #9
 8024e3a:	d903      	bls.n	8024e44 <_vfiprintf_r+0x1d0>
 8024e3c:	2b00      	cmp	r3, #0
 8024e3e:	d0c8      	beq.n	8024dd2 <_vfiprintf_r+0x15e>
 8024e40:	9109      	str	r1, [sp, #36]	@ 0x24
 8024e42:	e7c6      	b.n	8024dd2 <_vfiprintf_r+0x15e>
 8024e44:	4341      	muls	r1, r0
 8024e46:	002e      	movs	r6, r5
 8024e48:	2301      	movs	r3, #1
 8024e4a:	1889      	adds	r1, r1, r2
 8024e4c:	e7f1      	b.n	8024e32 <_vfiprintf_r+0x1be>
 8024e4e:	aa07      	add	r2, sp, #28
 8024e50:	9200      	str	r2, [sp, #0]
 8024e52:	0021      	movs	r1, r4
 8024e54:	003a      	movs	r2, r7
 8024e56:	4b14      	ldr	r3, [pc, #80]	@ (8024ea8 <_vfiprintf_r+0x234>)
 8024e58:	9803      	ldr	r0, [sp, #12]
 8024e5a:	f7fc fe77 	bl	8021b4c <_printf_float>
 8024e5e:	9004      	str	r0, [sp, #16]
 8024e60:	9b04      	ldr	r3, [sp, #16]
 8024e62:	3301      	adds	r3, #1
 8024e64:	d1d6      	bne.n	8024e14 <_vfiprintf_r+0x1a0>
 8024e66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024e68:	07db      	lsls	r3, r3, #31
 8024e6a:	d405      	bmi.n	8024e78 <_vfiprintf_r+0x204>
 8024e6c:	89bb      	ldrh	r3, [r7, #12]
 8024e6e:	059b      	lsls	r3, r3, #22
 8024e70:	d402      	bmi.n	8024e78 <_vfiprintf_r+0x204>
 8024e72:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8024e74:	f7fd fd90 	bl	8022998 <__retarget_lock_release_recursive>
 8024e78:	89bb      	ldrh	r3, [r7, #12]
 8024e7a:	065b      	lsls	r3, r3, #25
 8024e7c:	d500      	bpl.n	8024e80 <_vfiprintf_r+0x20c>
 8024e7e:	e71e      	b.n	8024cbe <_vfiprintf_r+0x4a>
 8024e80:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024e82:	e71e      	b.n	8024cc2 <_vfiprintf_r+0x4e>
 8024e84:	aa07      	add	r2, sp, #28
 8024e86:	9200      	str	r2, [sp, #0]
 8024e88:	0021      	movs	r1, r4
 8024e8a:	003a      	movs	r2, r7
 8024e8c:	4b06      	ldr	r3, [pc, #24]	@ (8024ea8 <_vfiprintf_r+0x234>)
 8024e8e:	9803      	ldr	r0, [sp, #12]
 8024e90:	f7fd f90a 	bl	80220a8 <_printf_i>
 8024e94:	e7e3      	b.n	8024e5e <_vfiprintf_r+0x1ea>
 8024e96:	46c0      	nop			@ (mov r8, r8)
 8024e98:	080293f8 	.word	0x080293f8
 8024e9c:	080293fe 	.word	0x080293fe
 8024ea0:	08029402 	.word	0x08029402
 8024ea4:	08021b4d 	.word	0x08021b4d
 8024ea8:	08024c4f 	.word	0x08024c4f

08024eac <__sflush_r>:
 8024eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024eae:	220c      	movs	r2, #12
 8024eb0:	5e8b      	ldrsh	r3, [r1, r2]
 8024eb2:	0005      	movs	r5, r0
 8024eb4:	000c      	movs	r4, r1
 8024eb6:	071a      	lsls	r2, r3, #28
 8024eb8:	d456      	bmi.n	8024f68 <__sflush_r+0xbc>
 8024eba:	684a      	ldr	r2, [r1, #4]
 8024ebc:	2a00      	cmp	r2, #0
 8024ebe:	dc02      	bgt.n	8024ec6 <__sflush_r+0x1a>
 8024ec0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8024ec2:	2a00      	cmp	r2, #0
 8024ec4:	dd4e      	ble.n	8024f64 <__sflush_r+0xb8>
 8024ec6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8024ec8:	2f00      	cmp	r7, #0
 8024eca:	d04b      	beq.n	8024f64 <__sflush_r+0xb8>
 8024ecc:	2200      	movs	r2, #0
 8024ece:	2080      	movs	r0, #128	@ 0x80
 8024ed0:	682e      	ldr	r6, [r5, #0]
 8024ed2:	602a      	str	r2, [r5, #0]
 8024ed4:	001a      	movs	r2, r3
 8024ed6:	0140      	lsls	r0, r0, #5
 8024ed8:	6a21      	ldr	r1, [r4, #32]
 8024eda:	4002      	ands	r2, r0
 8024edc:	4203      	tst	r3, r0
 8024ede:	d033      	beq.n	8024f48 <__sflush_r+0x9c>
 8024ee0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8024ee2:	89a3      	ldrh	r3, [r4, #12]
 8024ee4:	075b      	lsls	r3, r3, #29
 8024ee6:	d506      	bpl.n	8024ef6 <__sflush_r+0x4a>
 8024ee8:	6863      	ldr	r3, [r4, #4]
 8024eea:	1ad2      	subs	r2, r2, r3
 8024eec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8024eee:	2b00      	cmp	r3, #0
 8024ef0:	d001      	beq.n	8024ef6 <__sflush_r+0x4a>
 8024ef2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8024ef4:	1ad2      	subs	r2, r2, r3
 8024ef6:	2300      	movs	r3, #0
 8024ef8:	0028      	movs	r0, r5
 8024efa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8024efc:	6a21      	ldr	r1, [r4, #32]
 8024efe:	47b8      	blx	r7
 8024f00:	89a2      	ldrh	r2, [r4, #12]
 8024f02:	1c43      	adds	r3, r0, #1
 8024f04:	d106      	bne.n	8024f14 <__sflush_r+0x68>
 8024f06:	6829      	ldr	r1, [r5, #0]
 8024f08:	291d      	cmp	r1, #29
 8024f0a:	d846      	bhi.n	8024f9a <__sflush_r+0xee>
 8024f0c:	4b29      	ldr	r3, [pc, #164]	@ (8024fb4 <__sflush_r+0x108>)
 8024f0e:	410b      	asrs	r3, r1
 8024f10:	07db      	lsls	r3, r3, #31
 8024f12:	d442      	bmi.n	8024f9a <__sflush_r+0xee>
 8024f14:	2300      	movs	r3, #0
 8024f16:	6063      	str	r3, [r4, #4]
 8024f18:	6923      	ldr	r3, [r4, #16]
 8024f1a:	6023      	str	r3, [r4, #0]
 8024f1c:	04d2      	lsls	r2, r2, #19
 8024f1e:	d505      	bpl.n	8024f2c <__sflush_r+0x80>
 8024f20:	1c43      	adds	r3, r0, #1
 8024f22:	d102      	bne.n	8024f2a <__sflush_r+0x7e>
 8024f24:	682b      	ldr	r3, [r5, #0]
 8024f26:	2b00      	cmp	r3, #0
 8024f28:	d100      	bne.n	8024f2c <__sflush_r+0x80>
 8024f2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8024f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024f2e:	602e      	str	r6, [r5, #0]
 8024f30:	2900      	cmp	r1, #0
 8024f32:	d017      	beq.n	8024f64 <__sflush_r+0xb8>
 8024f34:	0023      	movs	r3, r4
 8024f36:	3344      	adds	r3, #68	@ 0x44
 8024f38:	4299      	cmp	r1, r3
 8024f3a:	d002      	beq.n	8024f42 <__sflush_r+0x96>
 8024f3c:	0028      	movs	r0, r5
 8024f3e:	f7fe fbc9 	bl	80236d4 <_free_r>
 8024f42:	2300      	movs	r3, #0
 8024f44:	6363      	str	r3, [r4, #52]	@ 0x34
 8024f46:	e00d      	b.n	8024f64 <__sflush_r+0xb8>
 8024f48:	2301      	movs	r3, #1
 8024f4a:	0028      	movs	r0, r5
 8024f4c:	47b8      	blx	r7
 8024f4e:	0002      	movs	r2, r0
 8024f50:	1c43      	adds	r3, r0, #1
 8024f52:	d1c6      	bne.n	8024ee2 <__sflush_r+0x36>
 8024f54:	682b      	ldr	r3, [r5, #0]
 8024f56:	2b00      	cmp	r3, #0
 8024f58:	d0c3      	beq.n	8024ee2 <__sflush_r+0x36>
 8024f5a:	2b1d      	cmp	r3, #29
 8024f5c:	d001      	beq.n	8024f62 <__sflush_r+0xb6>
 8024f5e:	2b16      	cmp	r3, #22
 8024f60:	d11a      	bne.n	8024f98 <__sflush_r+0xec>
 8024f62:	602e      	str	r6, [r5, #0]
 8024f64:	2000      	movs	r0, #0
 8024f66:	e01e      	b.n	8024fa6 <__sflush_r+0xfa>
 8024f68:	690e      	ldr	r6, [r1, #16]
 8024f6a:	2e00      	cmp	r6, #0
 8024f6c:	d0fa      	beq.n	8024f64 <__sflush_r+0xb8>
 8024f6e:	680f      	ldr	r7, [r1, #0]
 8024f70:	600e      	str	r6, [r1, #0]
 8024f72:	1bba      	subs	r2, r7, r6
 8024f74:	9201      	str	r2, [sp, #4]
 8024f76:	2200      	movs	r2, #0
 8024f78:	079b      	lsls	r3, r3, #30
 8024f7a:	d100      	bne.n	8024f7e <__sflush_r+0xd2>
 8024f7c:	694a      	ldr	r2, [r1, #20]
 8024f7e:	60a2      	str	r2, [r4, #8]
 8024f80:	9b01      	ldr	r3, [sp, #4]
 8024f82:	2b00      	cmp	r3, #0
 8024f84:	ddee      	ble.n	8024f64 <__sflush_r+0xb8>
 8024f86:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8024f88:	0032      	movs	r2, r6
 8024f8a:	001f      	movs	r7, r3
 8024f8c:	0028      	movs	r0, r5
 8024f8e:	9b01      	ldr	r3, [sp, #4]
 8024f90:	6a21      	ldr	r1, [r4, #32]
 8024f92:	47b8      	blx	r7
 8024f94:	2800      	cmp	r0, #0
 8024f96:	dc07      	bgt.n	8024fa8 <__sflush_r+0xfc>
 8024f98:	89a2      	ldrh	r2, [r4, #12]
 8024f9a:	2340      	movs	r3, #64	@ 0x40
 8024f9c:	2001      	movs	r0, #1
 8024f9e:	4313      	orrs	r3, r2
 8024fa0:	b21b      	sxth	r3, r3
 8024fa2:	81a3      	strh	r3, [r4, #12]
 8024fa4:	4240      	negs	r0, r0
 8024fa6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024fa8:	9b01      	ldr	r3, [sp, #4]
 8024faa:	1836      	adds	r6, r6, r0
 8024fac:	1a1b      	subs	r3, r3, r0
 8024fae:	9301      	str	r3, [sp, #4]
 8024fb0:	e7e6      	b.n	8024f80 <__sflush_r+0xd4>
 8024fb2:	46c0      	nop			@ (mov r8, r8)
 8024fb4:	dfbffffe 	.word	0xdfbffffe

08024fb8 <_fflush_r>:
 8024fb8:	690b      	ldr	r3, [r1, #16]
 8024fba:	b570      	push	{r4, r5, r6, lr}
 8024fbc:	0005      	movs	r5, r0
 8024fbe:	000c      	movs	r4, r1
 8024fc0:	2b00      	cmp	r3, #0
 8024fc2:	d102      	bne.n	8024fca <_fflush_r+0x12>
 8024fc4:	2500      	movs	r5, #0
 8024fc6:	0028      	movs	r0, r5
 8024fc8:	bd70      	pop	{r4, r5, r6, pc}
 8024fca:	2800      	cmp	r0, #0
 8024fcc:	d004      	beq.n	8024fd8 <_fflush_r+0x20>
 8024fce:	6a03      	ldr	r3, [r0, #32]
 8024fd0:	2b00      	cmp	r3, #0
 8024fd2:	d101      	bne.n	8024fd8 <_fflush_r+0x20>
 8024fd4:	f7fd fa06 	bl	80223e4 <__sinit>
 8024fd8:	220c      	movs	r2, #12
 8024fda:	5ea3      	ldrsh	r3, [r4, r2]
 8024fdc:	2b00      	cmp	r3, #0
 8024fde:	d0f1      	beq.n	8024fc4 <_fflush_r+0xc>
 8024fe0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8024fe2:	07d2      	lsls	r2, r2, #31
 8024fe4:	d404      	bmi.n	8024ff0 <_fflush_r+0x38>
 8024fe6:	059b      	lsls	r3, r3, #22
 8024fe8:	d402      	bmi.n	8024ff0 <_fflush_r+0x38>
 8024fea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024fec:	f7fd fcd3 	bl	8022996 <__retarget_lock_acquire_recursive>
 8024ff0:	0028      	movs	r0, r5
 8024ff2:	0021      	movs	r1, r4
 8024ff4:	f7ff ff5a 	bl	8024eac <__sflush_r>
 8024ff8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024ffa:	0005      	movs	r5, r0
 8024ffc:	07db      	lsls	r3, r3, #31
 8024ffe:	d4e2      	bmi.n	8024fc6 <_fflush_r+0xe>
 8025000:	89a3      	ldrh	r3, [r4, #12]
 8025002:	059b      	lsls	r3, r3, #22
 8025004:	d4df      	bmi.n	8024fc6 <_fflush_r+0xe>
 8025006:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025008:	f7fd fcc6 	bl	8022998 <__retarget_lock_release_recursive>
 802500c:	e7db      	b.n	8024fc6 <_fflush_r+0xe>
	...

08025010 <__swhatbuf_r>:
 8025010:	b570      	push	{r4, r5, r6, lr}
 8025012:	000e      	movs	r6, r1
 8025014:	001d      	movs	r5, r3
 8025016:	230e      	movs	r3, #14
 8025018:	5ec9      	ldrsh	r1, [r1, r3]
 802501a:	0014      	movs	r4, r2
 802501c:	b096      	sub	sp, #88	@ 0x58
 802501e:	2900      	cmp	r1, #0
 8025020:	da0c      	bge.n	802503c <__swhatbuf_r+0x2c>
 8025022:	89b2      	ldrh	r2, [r6, #12]
 8025024:	2380      	movs	r3, #128	@ 0x80
 8025026:	0011      	movs	r1, r2
 8025028:	4019      	ands	r1, r3
 802502a:	421a      	tst	r2, r3
 802502c:	d114      	bne.n	8025058 <__swhatbuf_r+0x48>
 802502e:	2380      	movs	r3, #128	@ 0x80
 8025030:	00db      	lsls	r3, r3, #3
 8025032:	2000      	movs	r0, #0
 8025034:	6029      	str	r1, [r5, #0]
 8025036:	6023      	str	r3, [r4, #0]
 8025038:	b016      	add	sp, #88	@ 0x58
 802503a:	bd70      	pop	{r4, r5, r6, pc}
 802503c:	466a      	mov	r2, sp
 802503e:	f000 f865 	bl	802510c <_fstat_r>
 8025042:	2800      	cmp	r0, #0
 8025044:	dbed      	blt.n	8025022 <__swhatbuf_r+0x12>
 8025046:	23f0      	movs	r3, #240	@ 0xf0
 8025048:	9901      	ldr	r1, [sp, #4]
 802504a:	021b      	lsls	r3, r3, #8
 802504c:	4019      	ands	r1, r3
 802504e:	4b04      	ldr	r3, [pc, #16]	@ (8025060 <__swhatbuf_r+0x50>)
 8025050:	18c9      	adds	r1, r1, r3
 8025052:	424b      	negs	r3, r1
 8025054:	4159      	adcs	r1, r3
 8025056:	e7ea      	b.n	802502e <__swhatbuf_r+0x1e>
 8025058:	2100      	movs	r1, #0
 802505a:	2340      	movs	r3, #64	@ 0x40
 802505c:	e7e9      	b.n	8025032 <__swhatbuf_r+0x22>
 802505e:	46c0      	nop			@ (mov r8, r8)
 8025060:	ffffe000 	.word	0xffffe000

08025064 <__smakebuf_r>:
 8025064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025066:	2602      	movs	r6, #2
 8025068:	898b      	ldrh	r3, [r1, #12]
 802506a:	0005      	movs	r5, r0
 802506c:	000c      	movs	r4, r1
 802506e:	b085      	sub	sp, #20
 8025070:	4233      	tst	r3, r6
 8025072:	d007      	beq.n	8025084 <__smakebuf_r+0x20>
 8025074:	0023      	movs	r3, r4
 8025076:	3347      	adds	r3, #71	@ 0x47
 8025078:	6023      	str	r3, [r4, #0]
 802507a:	6123      	str	r3, [r4, #16]
 802507c:	2301      	movs	r3, #1
 802507e:	6163      	str	r3, [r4, #20]
 8025080:	b005      	add	sp, #20
 8025082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025084:	ab03      	add	r3, sp, #12
 8025086:	aa02      	add	r2, sp, #8
 8025088:	f7ff ffc2 	bl	8025010 <__swhatbuf_r>
 802508c:	9f02      	ldr	r7, [sp, #8]
 802508e:	9001      	str	r0, [sp, #4]
 8025090:	0039      	movs	r1, r7
 8025092:	0028      	movs	r0, r5
 8025094:	f7fe feee 	bl	8023e74 <_malloc_r>
 8025098:	2800      	cmp	r0, #0
 802509a:	d108      	bne.n	80250ae <__smakebuf_r+0x4a>
 802509c:	220c      	movs	r2, #12
 802509e:	5ea3      	ldrsh	r3, [r4, r2]
 80250a0:	059a      	lsls	r2, r3, #22
 80250a2:	d4ed      	bmi.n	8025080 <__smakebuf_r+0x1c>
 80250a4:	2203      	movs	r2, #3
 80250a6:	4393      	bics	r3, r2
 80250a8:	431e      	orrs	r6, r3
 80250aa:	81a6      	strh	r6, [r4, #12]
 80250ac:	e7e2      	b.n	8025074 <__smakebuf_r+0x10>
 80250ae:	2380      	movs	r3, #128	@ 0x80
 80250b0:	89a2      	ldrh	r2, [r4, #12]
 80250b2:	6020      	str	r0, [r4, #0]
 80250b4:	4313      	orrs	r3, r2
 80250b6:	81a3      	strh	r3, [r4, #12]
 80250b8:	9b03      	ldr	r3, [sp, #12]
 80250ba:	6120      	str	r0, [r4, #16]
 80250bc:	6167      	str	r7, [r4, #20]
 80250be:	2b00      	cmp	r3, #0
 80250c0:	d00c      	beq.n	80250dc <__smakebuf_r+0x78>
 80250c2:	0028      	movs	r0, r5
 80250c4:	230e      	movs	r3, #14
 80250c6:	5ee1      	ldrsh	r1, [r4, r3]
 80250c8:	f000 f832 	bl	8025130 <_isatty_r>
 80250cc:	2800      	cmp	r0, #0
 80250ce:	d005      	beq.n	80250dc <__smakebuf_r+0x78>
 80250d0:	2303      	movs	r3, #3
 80250d2:	89a2      	ldrh	r2, [r4, #12]
 80250d4:	439a      	bics	r2, r3
 80250d6:	3b02      	subs	r3, #2
 80250d8:	4313      	orrs	r3, r2
 80250da:	81a3      	strh	r3, [r4, #12]
 80250dc:	89a3      	ldrh	r3, [r4, #12]
 80250de:	9a01      	ldr	r2, [sp, #4]
 80250e0:	4313      	orrs	r3, r2
 80250e2:	81a3      	strh	r3, [r4, #12]
 80250e4:	e7cc      	b.n	8025080 <__smakebuf_r+0x1c>

080250e6 <memmove>:
 80250e6:	b510      	push	{r4, lr}
 80250e8:	4288      	cmp	r0, r1
 80250ea:	d806      	bhi.n	80250fa <memmove+0x14>
 80250ec:	2300      	movs	r3, #0
 80250ee:	429a      	cmp	r2, r3
 80250f0:	d008      	beq.n	8025104 <memmove+0x1e>
 80250f2:	5ccc      	ldrb	r4, [r1, r3]
 80250f4:	54c4      	strb	r4, [r0, r3]
 80250f6:	3301      	adds	r3, #1
 80250f8:	e7f9      	b.n	80250ee <memmove+0x8>
 80250fa:	188b      	adds	r3, r1, r2
 80250fc:	4298      	cmp	r0, r3
 80250fe:	d2f5      	bcs.n	80250ec <memmove+0x6>
 8025100:	3a01      	subs	r2, #1
 8025102:	d200      	bcs.n	8025106 <memmove+0x20>
 8025104:	bd10      	pop	{r4, pc}
 8025106:	5c8b      	ldrb	r3, [r1, r2]
 8025108:	5483      	strb	r3, [r0, r2]
 802510a:	e7f9      	b.n	8025100 <memmove+0x1a>

0802510c <_fstat_r>:
 802510c:	2300      	movs	r3, #0
 802510e:	b570      	push	{r4, r5, r6, lr}
 8025110:	4d06      	ldr	r5, [pc, #24]	@ (802512c <_fstat_r+0x20>)
 8025112:	0004      	movs	r4, r0
 8025114:	0008      	movs	r0, r1
 8025116:	0011      	movs	r1, r2
 8025118:	602b      	str	r3, [r5, #0]
 802511a:	f7ea fdbb 	bl	800fc94 <_fstat>
 802511e:	1c43      	adds	r3, r0, #1
 8025120:	d103      	bne.n	802512a <_fstat_r+0x1e>
 8025122:	682b      	ldr	r3, [r5, #0]
 8025124:	2b00      	cmp	r3, #0
 8025126:	d000      	beq.n	802512a <_fstat_r+0x1e>
 8025128:	6023      	str	r3, [r4, #0]
 802512a:	bd70      	pop	{r4, r5, r6, pc}
 802512c:	20003570 	.word	0x20003570

08025130 <_isatty_r>:
 8025130:	2300      	movs	r3, #0
 8025132:	b570      	push	{r4, r5, r6, lr}
 8025134:	4d06      	ldr	r5, [pc, #24]	@ (8025150 <_isatty_r+0x20>)
 8025136:	0004      	movs	r4, r0
 8025138:	0008      	movs	r0, r1
 802513a:	602b      	str	r3, [r5, #0]
 802513c:	f7ea fdb8 	bl	800fcb0 <_isatty>
 8025140:	1c43      	adds	r3, r0, #1
 8025142:	d103      	bne.n	802514c <_isatty_r+0x1c>
 8025144:	682b      	ldr	r3, [r5, #0]
 8025146:	2b00      	cmp	r3, #0
 8025148:	d000      	beq.n	802514c <_isatty_r+0x1c>
 802514a:	6023      	str	r3, [r4, #0]
 802514c:	bd70      	pop	{r4, r5, r6, pc}
 802514e:	46c0      	nop			@ (mov r8, r8)
 8025150:	20003570 	.word	0x20003570

08025154 <_sbrk_r>:
 8025154:	2300      	movs	r3, #0
 8025156:	b570      	push	{r4, r5, r6, lr}
 8025158:	4d06      	ldr	r5, [pc, #24]	@ (8025174 <_sbrk_r+0x20>)
 802515a:	0004      	movs	r4, r0
 802515c:	0008      	movs	r0, r1
 802515e:	602b      	str	r3, [r5, #0]
 8025160:	f7ea fdba 	bl	800fcd8 <_sbrk>
 8025164:	1c43      	adds	r3, r0, #1
 8025166:	d103      	bne.n	8025170 <_sbrk_r+0x1c>
 8025168:	682b      	ldr	r3, [r5, #0]
 802516a:	2b00      	cmp	r3, #0
 802516c:	d000      	beq.n	8025170 <_sbrk_r+0x1c>
 802516e:	6023      	str	r3, [r4, #0]
 8025170:	bd70      	pop	{r4, r5, r6, pc}
 8025172:	46c0      	nop			@ (mov r8, r8)
 8025174:	20003570 	.word	0x20003570

08025178 <__assert_func>:
 8025178:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802517a:	0014      	movs	r4, r2
 802517c:	001a      	movs	r2, r3
 802517e:	4b09      	ldr	r3, [pc, #36]	@ (80251a4 <__assert_func+0x2c>)
 8025180:	0005      	movs	r5, r0
 8025182:	681b      	ldr	r3, [r3, #0]
 8025184:	000e      	movs	r6, r1
 8025186:	68d8      	ldr	r0, [r3, #12]
 8025188:	4b07      	ldr	r3, [pc, #28]	@ (80251a8 <__assert_func+0x30>)
 802518a:	2c00      	cmp	r4, #0
 802518c:	d101      	bne.n	8025192 <__assert_func+0x1a>
 802518e:	4b07      	ldr	r3, [pc, #28]	@ (80251ac <__assert_func+0x34>)
 8025190:	001c      	movs	r4, r3
 8025192:	4907      	ldr	r1, [pc, #28]	@ (80251b0 <__assert_func+0x38>)
 8025194:	9301      	str	r3, [sp, #4]
 8025196:	9402      	str	r4, [sp, #8]
 8025198:	002b      	movs	r3, r5
 802519a:	9600      	str	r6, [sp, #0]
 802519c:	f000 f866 	bl	802526c <fiprintf>
 80251a0:	f000 f874 	bl	802528c <abort>
 80251a4:	200003dc 	.word	0x200003dc
 80251a8:	08029409 	.word	0x08029409
 80251ac:	08029444 	.word	0x08029444
 80251b0:	08029416 	.word	0x08029416

080251b4 <_calloc_r>:
 80251b4:	b570      	push	{r4, r5, r6, lr}
 80251b6:	0c0b      	lsrs	r3, r1, #16
 80251b8:	0c15      	lsrs	r5, r2, #16
 80251ba:	2b00      	cmp	r3, #0
 80251bc:	d11e      	bne.n	80251fc <_calloc_r+0x48>
 80251be:	2d00      	cmp	r5, #0
 80251c0:	d10c      	bne.n	80251dc <_calloc_r+0x28>
 80251c2:	b289      	uxth	r1, r1
 80251c4:	b294      	uxth	r4, r2
 80251c6:	434c      	muls	r4, r1
 80251c8:	0021      	movs	r1, r4
 80251ca:	f7fe fe53 	bl	8023e74 <_malloc_r>
 80251ce:	1e05      	subs	r5, r0, #0
 80251d0:	d01a      	beq.n	8025208 <_calloc_r+0x54>
 80251d2:	0022      	movs	r2, r4
 80251d4:	2100      	movs	r1, #0
 80251d6:	f7fd fb0f 	bl	80227f8 <memset>
 80251da:	e016      	b.n	802520a <_calloc_r+0x56>
 80251dc:	1c2b      	adds	r3, r5, #0
 80251de:	1c0c      	adds	r4, r1, #0
 80251e0:	b289      	uxth	r1, r1
 80251e2:	b292      	uxth	r2, r2
 80251e4:	434a      	muls	r2, r1
 80251e6:	b29b      	uxth	r3, r3
 80251e8:	b2a1      	uxth	r1, r4
 80251ea:	4359      	muls	r1, r3
 80251ec:	0c14      	lsrs	r4, r2, #16
 80251ee:	190c      	adds	r4, r1, r4
 80251f0:	0c23      	lsrs	r3, r4, #16
 80251f2:	d107      	bne.n	8025204 <_calloc_r+0x50>
 80251f4:	0424      	lsls	r4, r4, #16
 80251f6:	b292      	uxth	r2, r2
 80251f8:	4314      	orrs	r4, r2
 80251fa:	e7e5      	b.n	80251c8 <_calloc_r+0x14>
 80251fc:	2d00      	cmp	r5, #0
 80251fe:	d101      	bne.n	8025204 <_calloc_r+0x50>
 8025200:	1c14      	adds	r4, r2, #0
 8025202:	e7ed      	b.n	80251e0 <_calloc_r+0x2c>
 8025204:	230c      	movs	r3, #12
 8025206:	6003      	str	r3, [r0, #0]
 8025208:	2500      	movs	r5, #0
 802520a:	0028      	movs	r0, r5
 802520c:	bd70      	pop	{r4, r5, r6, pc}

0802520e <_realloc_r>:
 802520e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025210:	0006      	movs	r6, r0
 8025212:	000c      	movs	r4, r1
 8025214:	0015      	movs	r5, r2
 8025216:	2900      	cmp	r1, #0
 8025218:	d105      	bne.n	8025226 <_realloc_r+0x18>
 802521a:	0011      	movs	r1, r2
 802521c:	f7fe fe2a 	bl	8023e74 <_malloc_r>
 8025220:	0004      	movs	r4, r0
 8025222:	0020      	movs	r0, r4
 8025224:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025226:	2a00      	cmp	r2, #0
 8025228:	d103      	bne.n	8025232 <_realloc_r+0x24>
 802522a:	f7fe fa53 	bl	80236d4 <_free_r>
 802522e:	2400      	movs	r4, #0
 8025230:	e7f7      	b.n	8025222 <_realloc_r+0x14>
 8025232:	f000 f832 	bl	802529a <_malloc_usable_size_r>
 8025236:	0007      	movs	r7, r0
 8025238:	4285      	cmp	r5, r0
 802523a:	d802      	bhi.n	8025242 <_realloc_r+0x34>
 802523c:	0843      	lsrs	r3, r0, #1
 802523e:	42ab      	cmp	r3, r5
 8025240:	d3ef      	bcc.n	8025222 <_realloc_r+0x14>
 8025242:	0029      	movs	r1, r5
 8025244:	0030      	movs	r0, r6
 8025246:	f7fe fe15 	bl	8023e74 <_malloc_r>
 802524a:	9001      	str	r0, [sp, #4]
 802524c:	2800      	cmp	r0, #0
 802524e:	d0ee      	beq.n	802522e <_realloc_r+0x20>
 8025250:	002a      	movs	r2, r5
 8025252:	42bd      	cmp	r5, r7
 8025254:	d900      	bls.n	8025258 <_realloc_r+0x4a>
 8025256:	003a      	movs	r2, r7
 8025258:	0021      	movs	r1, r4
 802525a:	9801      	ldr	r0, [sp, #4]
 802525c:	f7fd fba8 	bl	80229b0 <memcpy>
 8025260:	0021      	movs	r1, r4
 8025262:	0030      	movs	r0, r6
 8025264:	f7fe fa36 	bl	80236d4 <_free_r>
 8025268:	9c01      	ldr	r4, [sp, #4]
 802526a:	e7da      	b.n	8025222 <_realloc_r+0x14>

0802526c <fiprintf>:
 802526c:	b40e      	push	{r1, r2, r3}
 802526e:	b517      	push	{r0, r1, r2, r4, lr}
 8025270:	4c05      	ldr	r4, [pc, #20]	@ (8025288 <fiprintf+0x1c>)
 8025272:	ab05      	add	r3, sp, #20
 8025274:	cb04      	ldmia	r3!, {r2}
 8025276:	0001      	movs	r1, r0
 8025278:	6820      	ldr	r0, [r4, #0]
 802527a:	9301      	str	r3, [sp, #4]
 802527c:	f7ff fcfa 	bl	8024c74 <_vfiprintf_r>
 8025280:	bc1e      	pop	{r1, r2, r3, r4}
 8025282:	bc08      	pop	{r3}
 8025284:	b003      	add	sp, #12
 8025286:	4718      	bx	r3
 8025288:	200003dc 	.word	0x200003dc

0802528c <abort>:
 802528c:	2006      	movs	r0, #6
 802528e:	b510      	push	{r4, lr}
 8025290:	f000 f834 	bl	80252fc <raise>
 8025294:	2001      	movs	r0, #1
 8025296:	f7ea fcc9 	bl	800fc2c <_exit>

0802529a <_malloc_usable_size_r>:
 802529a:	1f0b      	subs	r3, r1, #4
 802529c:	681b      	ldr	r3, [r3, #0]
 802529e:	1f18      	subs	r0, r3, #4
 80252a0:	2b00      	cmp	r3, #0
 80252a2:	da01      	bge.n	80252a8 <_malloc_usable_size_r+0xe>
 80252a4:	580b      	ldr	r3, [r1, r0]
 80252a6:	18c0      	adds	r0, r0, r3
 80252a8:	4770      	bx	lr

080252aa <_raise_r>:
 80252aa:	b570      	push	{r4, r5, r6, lr}
 80252ac:	0004      	movs	r4, r0
 80252ae:	000d      	movs	r5, r1
 80252b0:	291f      	cmp	r1, #31
 80252b2:	d904      	bls.n	80252be <_raise_r+0x14>
 80252b4:	2316      	movs	r3, #22
 80252b6:	6003      	str	r3, [r0, #0]
 80252b8:	2001      	movs	r0, #1
 80252ba:	4240      	negs	r0, r0
 80252bc:	bd70      	pop	{r4, r5, r6, pc}
 80252be:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80252c0:	2b00      	cmp	r3, #0
 80252c2:	d004      	beq.n	80252ce <_raise_r+0x24>
 80252c4:	008a      	lsls	r2, r1, #2
 80252c6:	189b      	adds	r3, r3, r2
 80252c8:	681a      	ldr	r2, [r3, #0]
 80252ca:	2a00      	cmp	r2, #0
 80252cc:	d108      	bne.n	80252e0 <_raise_r+0x36>
 80252ce:	0020      	movs	r0, r4
 80252d0:	f000 f830 	bl	8025334 <_getpid_r>
 80252d4:	002a      	movs	r2, r5
 80252d6:	0001      	movs	r1, r0
 80252d8:	0020      	movs	r0, r4
 80252da:	f000 f819 	bl	8025310 <_kill_r>
 80252de:	e7ed      	b.n	80252bc <_raise_r+0x12>
 80252e0:	2a01      	cmp	r2, #1
 80252e2:	d009      	beq.n	80252f8 <_raise_r+0x4e>
 80252e4:	1c51      	adds	r1, r2, #1
 80252e6:	d103      	bne.n	80252f0 <_raise_r+0x46>
 80252e8:	2316      	movs	r3, #22
 80252ea:	6003      	str	r3, [r0, #0]
 80252ec:	2001      	movs	r0, #1
 80252ee:	e7e5      	b.n	80252bc <_raise_r+0x12>
 80252f0:	2100      	movs	r1, #0
 80252f2:	0028      	movs	r0, r5
 80252f4:	6019      	str	r1, [r3, #0]
 80252f6:	4790      	blx	r2
 80252f8:	2000      	movs	r0, #0
 80252fa:	e7df      	b.n	80252bc <_raise_r+0x12>

080252fc <raise>:
 80252fc:	b510      	push	{r4, lr}
 80252fe:	4b03      	ldr	r3, [pc, #12]	@ (802530c <raise+0x10>)
 8025300:	0001      	movs	r1, r0
 8025302:	6818      	ldr	r0, [r3, #0]
 8025304:	f7ff ffd1 	bl	80252aa <_raise_r>
 8025308:	bd10      	pop	{r4, pc}
 802530a:	46c0      	nop			@ (mov r8, r8)
 802530c:	200003dc 	.word	0x200003dc

08025310 <_kill_r>:
 8025310:	2300      	movs	r3, #0
 8025312:	b570      	push	{r4, r5, r6, lr}
 8025314:	4d06      	ldr	r5, [pc, #24]	@ (8025330 <_kill_r+0x20>)
 8025316:	0004      	movs	r4, r0
 8025318:	0008      	movs	r0, r1
 802531a:	0011      	movs	r1, r2
 802531c:	602b      	str	r3, [r5, #0]
 802531e:	f7ea fc75 	bl	800fc0c <_kill>
 8025322:	1c43      	adds	r3, r0, #1
 8025324:	d103      	bne.n	802532e <_kill_r+0x1e>
 8025326:	682b      	ldr	r3, [r5, #0]
 8025328:	2b00      	cmp	r3, #0
 802532a:	d000      	beq.n	802532e <_kill_r+0x1e>
 802532c:	6023      	str	r3, [r4, #0]
 802532e:	bd70      	pop	{r4, r5, r6, pc}
 8025330:	20003570 	.word	0x20003570

08025334 <_getpid_r>:
 8025334:	b510      	push	{r4, lr}
 8025336:	f7ea fc63 	bl	800fc00 <_getpid>
 802533a:	bd10      	pop	{r4, pc}

0802533c <expf>:
 802533c:	b570      	push	{r4, r5, r6, lr}
 802533e:	1c04      	adds	r4, r0, #0
 8025340:	f000 f8e6 	bl	8025510 <__ieee754_expf>
 8025344:	1c05      	adds	r5, r0, #0
 8025346:	1c20      	adds	r0, r4, #0
 8025348:	f000 f83c 	bl	80253c4 <finitef>
 802534c:	2800      	cmp	r0, #0
 802534e:	d00b      	beq.n	8025368 <expf+0x2c>
 8025350:	490c      	ldr	r1, [pc, #48]	@ (8025384 <expf+0x48>)
 8025352:	1c20      	adds	r0, r4, #0
 8025354:	f7db f900 	bl	8000558 <__aeabi_fcmpgt>
 8025358:	2800      	cmp	r0, #0
 802535a:	d007      	beq.n	802536c <expf+0x30>
 802535c:	f7fd faf0 	bl	8022940 <__errno>
 8025360:	25ff      	movs	r5, #255	@ 0xff
 8025362:	2322      	movs	r3, #34	@ 0x22
 8025364:	05ed      	lsls	r5, r5, #23
 8025366:	6003      	str	r3, [r0, #0]
 8025368:	1c28      	adds	r0, r5, #0
 802536a:	bd70      	pop	{r4, r5, r6, pc}
 802536c:	4906      	ldr	r1, [pc, #24]	@ (8025388 <expf+0x4c>)
 802536e:	1c20      	adds	r0, r4, #0
 8025370:	f7db f8de 	bl	8000530 <__aeabi_fcmplt>
 8025374:	2800      	cmp	r0, #0
 8025376:	d0f7      	beq.n	8025368 <expf+0x2c>
 8025378:	f7fd fae2 	bl	8022940 <__errno>
 802537c:	2322      	movs	r3, #34	@ 0x22
 802537e:	2500      	movs	r5, #0
 8025380:	6003      	str	r3, [r0, #0]
 8025382:	e7f1      	b.n	8025368 <expf+0x2c>
 8025384:	42b17217 	.word	0x42b17217
 8025388:	c2cff1b5 	.word	0xc2cff1b5

0802538c <sqrtf>:
 802538c:	b570      	push	{r4, r5, r6, lr}
 802538e:	1c05      	adds	r5, r0, #0
 8025390:	f000 f822 	bl	80253d8 <__ieee754_sqrtf>
 8025394:	1c29      	adds	r1, r5, #0
 8025396:	1c04      	adds	r4, r0, #0
 8025398:	1c28      	adds	r0, r5, #0
 802539a:	f7dc f8e3 	bl	8001564 <__aeabi_fcmpun>
 802539e:	2800      	cmp	r0, #0
 80253a0:	d10e      	bne.n	80253c0 <sqrtf+0x34>
 80253a2:	2100      	movs	r1, #0
 80253a4:	1c28      	adds	r0, r5, #0
 80253a6:	f7db f8c3 	bl	8000530 <__aeabi_fcmplt>
 80253aa:	2800      	cmp	r0, #0
 80253ac:	d008      	beq.n	80253c0 <sqrtf+0x34>
 80253ae:	f7fd fac7 	bl	8022940 <__errno>
 80253b2:	2321      	movs	r3, #33	@ 0x21
 80253b4:	2100      	movs	r1, #0
 80253b6:	6003      	str	r3, [r0, #0]
 80253b8:	1c08      	adds	r0, r1, #0
 80253ba:	f7db fc0b 	bl	8000bd4 <__aeabi_fdiv>
 80253be:	1c04      	adds	r4, r0, #0
 80253c0:	1c20      	adds	r0, r4, #0
 80253c2:	bd70      	pop	{r4, r5, r6, pc}

080253c4 <finitef>:
 80253c4:	22ff      	movs	r2, #255	@ 0xff
 80253c6:	0043      	lsls	r3, r0, #1
 80253c8:	085b      	lsrs	r3, r3, #1
 80253ca:	2001      	movs	r0, #1
 80253cc:	05d2      	lsls	r2, r2, #23
 80253ce:	4293      	cmp	r3, r2
 80253d0:	db00      	blt.n	80253d4 <finitef+0x10>
 80253d2:	2000      	movs	r0, #0
 80253d4:	4770      	bx	lr
	...

080253d8 <__ieee754_sqrtf>:
 80253d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80253da:	0003      	movs	r3, r0
 80253dc:	0042      	lsls	r2, r0, #1
 80253de:	1c04      	adds	r4, r0, #0
 80253e0:	20ff      	movs	r0, #255	@ 0xff
 80253e2:	0852      	lsrs	r2, r2, #1
 80253e4:	05c0      	lsls	r0, r0, #23
 80253e6:	4282      	cmp	r2, r0
 80253e8:	d30a      	bcc.n	8025400 <__ieee754_sqrtf+0x28>
 80253ea:	1c21      	adds	r1, r4, #0
 80253ec:	1c20      	adds	r0, r4, #0
 80253ee:	f7db fdd7 	bl	8000fa0 <__aeabi_fmul>
 80253f2:	1c01      	adds	r1, r0, #0
 80253f4:	1c20      	adds	r0, r4, #0
 80253f6:	f7db fa63 	bl	80008c0 <__aeabi_fadd>
 80253fa:	1c04      	adds	r4, r0, #0
 80253fc:	1c20      	adds	r0, r4, #0
 80253fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025400:	2a00      	cmp	r2, #0
 8025402:	d0fb      	beq.n	80253fc <__ieee754_sqrtf+0x24>
 8025404:	2c00      	cmp	r4, #0
 8025406:	da07      	bge.n	8025418 <__ieee754_sqrtf+0x40>
 8025408:	1c21      	adds	r1, r4, #0
 802540a:	1c20      	adds	r0, r4, #0
 802540c:	f7db ff06 	bl	800121c <__aeabi_fsub>
 8025410:	1c01      	adds	r1, r0, #0
 8025412:	f7db fbdf 	bl	8000bd4 <__aeabi_fdiv>
 8025416:	e7f0      	b.n	80253fa <__ieee754_sqrtf+0x22>
 8025418:	0022      	movs	r2, r4
 802541a:	15e1      	asrs	r1, r4, #23
 802541c:	4002      	ands	r2, r0
 802541e:	4204      	tst	r4, r0
 8025420:	d046      	beq.n	80254b0 <__ieee754_sqrtf+0xd8>
 8025422:	2280      	movs	r2, #128	@ 0x80
 8025424:	000f      	movs	r7, r1
 8025426:	025b      	lsls	r3, r3, #9
 8025428:	0a5b      	lsrs	r3, r3, #9
 802542a:	0412      	lsls	r2, r2, #16
 802542c:	3f7f      	subs	r7, #127	@ 0x7f
 802542e:	4313      	orrs	r3, r2
 8025430:	07c9      	lsls	r1, r1, #31
 8025432:	d400      	bmi.n	8025436 <__ieee754_sqrtf+0x5e>
 8025434:	005b      	lsls	r3, r3, #1
 8025436:	2400      	movs	r4, #0
 8025438:	2180      	movs	r1, #128	@ 0x80
 802543a:	2019      	movs	r0, #25
 802543c:	0026      	movs	r6, r4
 802543e:	107f      	asrs	r7, r7, #1
 8025440:	005b      	lsls	r3, r3, #1
 8025442:	0449      	lsls	r1, r1, #17
 8025444:	1875      	adds	r5, r6, r1
 8025446:	001a      	movs	r2, r3
 8025448:	429d      	cmp	r5, r3
 802544a:	dc02      	bgt.n	8025452 <__ieee754_sqrtf+0x7a>
 802544c:	186e      	adds	r6, r5, r1
 802544e:	1b5a      	subs	r2, r3, r5
 8025450:	1864      	adds	r4, r4, r1
 8025452:	3801      	subs	r0, #1
 8025454:	0053      	lsls	r3, r2, #1
 8025456:	0849      	lsrs	r1, r1, #1
 8025458:	2800      	cmp	r0, #0
 802545a:	d1f3      	bne.n	8025444 <__ieee754_sqrtf+0x6c>
 802545c:	2a00      	cmp	r2, #0
 802545e:	d019      	beq.n	8025494 <__ieee754_sqrtf+0xbc>
 8025460:	4d17      	ldr	r5, [pc, #92]	@ (80254c0 <__ieee754_sqrtf+0xe8>)
 8025462:	4e18      	ldr	r6, [pc, #96]	@ (80254c4 <__ieee754_sqrtf+0xec>)
 8025464:	6828      	ldr	r0, [r5, #0]
 8025466:	6831      	ldr	r1, [r6, #0]
 8025468:	682b      	ldr	r3, [r5, #0]
 802546a:	9301      	str	r3, [sp, #4]
 802546c:	f7db fed6 	bl	800121c <__aeabi_fsub>
 8025470:	1c01      	adds	r1, r0, #0
 8025472:	9801      	ldr	r0, [sp, #4]
 8025474:	f7db f866 	bl	8000544 <__aeabi_fcmple>
 8025478:	2800      	cmp	r0, #0
 802547a:	d00b      	beq.n	8025494 <__ieee754_sqrtf+0xbc>
 802547c:	6828      	ldr	r0, [r5, #0]
 802547e:	6831      	ldr	r1, [r6, #0]
 8025480:	f7db fa1e 	bl	80008c0 <__aeabi_fadd>
 8025484:	682d      	ldr	r5, [r5, #0]
 8025486:	1c01      	adds	r1, r0, #0
 8025488:	1c28      	adds	r0, r5, #0
 802548a:	f7db f851 	bl	8000530 <__aeabi_fcmplt>
 802548e:	2800      	cmp	r0, #0
 8025490:	d011      	beq.n	80254b6 <__ieee754_sqrtf+0xde>
 8025492:	3402      	adds	r4, #2
 8025494:	23fc      	movs	r3, #252	@ 0xfc
 8025496:	1064      	asrs	r4, r4, #1
 8025498:	059b      	lsls	r3, r3, #22
 802549a:	18e3      	adds	r3, r4, r3
 802549c:	05fc      	lsls	r4, r7, #23
 802549e:	18e4      	adds	r4, r4, r3
 80254a0:	e7ac      	b.n	80253fc <__ieee754_sqrtf+0x24>
 80254a2:	005b      	lsls	r3, r3, #1
 80254a4:	3201      	adds	r2, #1
 80254a6:	4203      	tst	r3, r0
 80254a8:	d0fb      	beq.n	80254a2 <__ieee754_sqrtf+0xca>
 80254aa:	3a01      	subs	r2, #1
 80254ac:	1a89      	subs	r1, r1, r2
 80254ae:	e7b8      	b.n	8025422 <__ieee754_sqrtf+0x4a>
 80254b0:	2080      	movs	r0, #128	@ 0x80
 80254b2:	0400      	lsls	r0, r0, #16
 80254b4:	e7f7      	b.n	80254a6 <__ieee754_sqrtf+0xce>
 80254b6:	2301      	movs	r3, #1
 80254b8:	3401      	adds	r4, #1
 80254ba:	439c      	bics	r4, r3
 80254bc:	e7ea      	b.n	8025494 <__ieee754_sqrtf+0xbc>
 80254be:	46c0      	nop			@ (mov r8, r8)
 80254c0:	20000430 	.word	0x20000430
 80254c4:	2000042c 	.word	0x2000042c

080254c8 <roundf>:
 80254c8:	0dc3      	lsrs	r3, r0, #23
 80254ca:	b2db      	uxtb	r3, r3
 80254cc:	3b7f      	subs	r3, #127	@ 0x7f
 80254ce:	0002      	movs	r2, r0
 80254d0:	b510      	push	{r4, lr}
 80254d2:	2b16      	cmp	r3, #22
 80254d4:	dc13      	bgt.n	80254fe <roundf+0x36>
 80254d6:	2b00      	cmp	r3, #0
 80254d8:	da07      	bge.n	80254ea <roundf+0x22>
 80254da:	0fc2      	lsrs	r2, r0, #31
 80254dc:	07d0      	lsls	r0, r2, #31
 80254de:	3301      	adds	r3, #1
 80254e0:	d102      	bne.n	80254e8 <roundf+0x20>
 80254e2:	23fe      	movs	r3, #254	@ 0xfe
 80254e4:	059b      	lsls	r3, r3, #22
 80254e6:	4318      	orrs	r0, r3
 80254e8:	bd10      	pop	{r4, pc}
 80254ea:	4908      	ldr	r1, [pc, #32]	@ (802550c <roundf+0x44>)
 80254ec:	4119      	asrs	r1, r3
 80254ee:	4208      	tst	r0, r1
 80254f0:	d0fa      	beq.n	80254e8 <roundf+0x20>
 80254f2:	2080      	movs	r0, #128	@ 0x80
 80254f4:	03c0      	lsls	r0, r0, #15
 80254f6:	4118      	asrs	r0, r3
 80254f8:	1880      	adds	r0, r0, r2
 80254fa:	4388      	bics	r0, r1
 80254fc:	e7f4      	b.n	80254e8 <roundf+0x20>
 80254fe:	2b80      	cmp	r3, #128	@ 0x80
 8025500:	d1f2      	bne.n	80254e8 <roundf+0x20>
 8025502:	1c01      	adds	r1, r0, #0
 8025504:	f7db f9dc 	bl	80008c0 <__aeabi_fadd>
 8025508:	e7ee      	b.n	80254e8 <roundf+0x20>
 802550a:	46c0      	nop			@ (mov r8, r8)
 802550c:	007fffff 	.word	0x007fffff

08025510 <__ieee754_expf>:
 8025510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025512:	21ff      	movs	r1, #255	@ 0xff
 8025514:	0043      	lsls	r3, r0, #1
 8025516:	1c04      	adds	r4, r0, #0
 8025518:	085b      	lsrs	r3, r3, #1
 802551a:	05c9      	lsls	r1, r1, #23
 802551c:	428b      	cmp	r3, r1
 802551e:	d904      	bls.n	802552a <__ieee754_expf+0x1a>
 8025520:	1c01      	adds	r1, r0, #0
 8025522:	1c20      	adds	r0, r4, #0
 8025524:	f7db f9cc 	bl	80008c0 <__aeabi_fadd>
 8025528:	e00d      	b.n	8025546 <__ieee754_expf+0x36>
 802552a:	0fc6      	lsrs	r6, r0, #31
 802552c:	428b      	cmp	r3, r1
 802552e:	d104      	bne.n	802553a <__ieee754_expf+0x2a>
 8025530:	2e00      	cmp	r6, #0
 8025532:	d000      	beq.n	8025536 <__ieee754_expf+0x26>
 8025534:	e0ba      	b.n	80256ac <__ieee754_expf+0x19c>
 8025536:	1c20      	adds	r0, r4, #0
 8025538:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802553a:	495d      	ldr	r1, [pc, #372]	@ (80256b0 <__ieee754_expf+0x1a0>)
 802553c:	4288      	cmp	r0, r1
 802553e:	dd04      	ble.n	802554a <__ieee754_expf+0x3a>
 8025540:	2000      	movs	r0, #0
 8025542:	f000 f8f1 	bl	8025728 <__math_oflowf>
 8025546:	1c04      	adds	r4, r0, #0
 8025548:	e7f5      	b.n	8025536 <__ieee754_expf+0x26>
 802554a:	2800      	cmp	r0, #0
 802554c:	da06      	bge.n	802555c <__ieee754_expf+0x4c>
 802554e:	4a59      	ldr	r2, [pc, #356]	@ (80256b4 <__ieee754_expf+0x1a4>)
 8025550:	4293      	cmp	r3, r2
 8025552:	d903      	bls.n	802555c <__ieee754_expf+0x4c>
 8025554:	2000      	movs	r0, #0
 8025556:	f000 f8e1 	bl	802571c <__math_uflowf>
 802555a:	e7f4      	b.n	8025546 <__ieee754_expf+0x36>
 802555c:	4a56      	ldr	r2, [pc, #344]	@ (80256b8 <__ieee754_expf+0x1a8>)
 802555e:	4293      	cmp	r3, r2
 8025560:	d96e      	bls.n	8025640 <__ieee754_expf+0x130>
 8025562:	4a56      	ldr	r2, [pc, #344]	@ (80256bc <__ieee754_expf+0x1ac>)
 8025564:	00b5      	lsls	r5, r6, #2
 8025566:	4293      	cmp	r3, r2
 8025568:	d84e      	bhi.n	8025608 <__ieee754_expf+0xf8>
 802556a:	4b55      	ldr	r3, [pc, #340]	@ (80256c0 <__ieee754_expf+0x1b0>)
 802556c:	1c20      	adds	r0, r4, #0
 802556e:	5959      	ldr	r1, [r3, r5]
 8025570:	f7db fe54 	bl	800121c <__aeabi_fsub>
 8025574:	4b53      	ldr	r3, [pc, #332]	@ (80256c4 <__ieee754_expf+0x1b4>)
 8025576:	1c07      	adds	r7, r0, #0
 8025578:	595b      	ldr	r3, [r3, r5]
 802557a:	2501      	movs	r5, #1
 802557c:	1bad      	subs	r5, r5, r6
 802557e:	9300      	str	r3, [sp, #0]
 8025580:	1bad      	subs	r5, r5, r6
 8025582:	9900      	ldr	r1, [sp, #0]
 8025584:	1c38      	adds	r0, r7, #0
 8025586:	f7db fe49 	bl	800121c <__aeabi_fsub>
 802558a:	1c04      	adds	r4, r0, #0
 802558c:	1c21      	adds	r1, r4, #0
 802558e:	1c20      	adds	r0, r4, #0
 8025590:	f7db fd06 	bl	8000fa0 <__aeabi_fmul>
 8025594:	494c      	ldr	r1, [pc, #304]	@ (80256c8 <__ieee754_expf+0x1b8>)
 8025596:	1c06      	adds	r6, r0, #0
 8025598:	f7db fd02 	bl	8000fa0 <__aeabi_fmul>
 802559c:	494b      	ldr	r1, [pc, #300]	@ (80256cc <__ieee754_expf+0x1bc>)
 802559e:	f7db fe3d 	bl	800121c <__aeabi_fsub>
 80255a2:	1c31      	adds	r1, r6, #0
 80255a4:	f7db fcfc 	bl	8000fa0 <__aeabi_fmul>
 80255a8:	4949      	ldr	r1, [pc, #292]	@ (80256d0 <__ieee754_expf+0x1c0>)
 80255aa:	f7db f989 	bl	80008c0 <__aeabi_fadd>
 80255ae:	1c31      	adds	r1, r6, #0
 80255b0:	f7db fcf6 	bl	8000fa0 <__aeabi_fmul>
 80255b4:	4947      	ldr	r1, [pc, #284]	@ (80256d4 <__ieee754_expf+0x1c4>)
 80255b6:	f7db fe31 	bl	800121c <__aeabi_fsub>
 80255ba:	1c31      	adds	r1, r6, #0
 80255bc:	f7db fcf0 	bl	8000fa0 <__aeabi_fmul>
 80255c0:	4945      	ldr	r1, [pc, #276]	@ (80256d8 <__ieee754_expf+0x1c8>)
 80255c2:	f7db f97d 	bl	80008c0 <__aeabi_fadd>
 80255c6:	1c31      	adds	r1, r6, #0
 80255c8:	f7db fcea 	bl	8000fa0 <__aeabi_fmul>
 80255cc:	1c01      	adds	r1, r0, #0
 80255ce:	1c20      	adds	r0, r4, #0
 80255d0:	f7db fe24 	bl	800121c <__aeabi_fsub>
 80255d4:	1c01      	adds	r1, r0, #0
 80255d6:	1c06      	adds	r6, r0, #0
 80255d8:	1c20      	adds	r0, r4, #0
 80255da:	f7db fce1 	bl	8000fa0 <__aeabi_fmul>
 80255de:	9001      	str	r0, [sp, #4]
 80255e0:	2d00      	cmp	r5, #0
 80255e2:	d140      	bne.n	8025666 <__ieee754_expf+0x156>
 80255e4:	2180      	movs	r1, #128	@ 0x80
 80255e6:	1c30      	adds	r0, r6, #0
 80255e8:	05c9      	lsls	r1, r1, #23
 80255ea:	f7db fe17 	bl	800121c <__aeabi_fsub>
 80255ee:	1c01      	adds	r1, r0, #0
 80255f0:	9801      	ldr	r0, [sp, #4]
 80255f2:	f7db faef 	bl	8000bd4 <__aeabi_fdiv>
 80255f6:	1c21      	adds	r1, r4, #0
 80255f8:	f7db fe10 	bl	800121c <__aeabi_fsub>
 80255fc:	1c01      	adds	r1, r0, #0
 80255fe:	20fe      	movs	r0, #254	@ 0xfe
 8025600:	0580      	lsls	r0, r0, #22
 8025602:	f7db fe0b 	bl	800121c <__aeabi_fsub>
 8025606:	e79e      	b.n	8025546 <__ieee754_expf+0x36>
 8025608:	4934      	ldr	r1, [pc, #208]	@ (80256dc <__ieee754_expf+0x1cc>)
 802560a:	1c20      	adds	r0, r4, #0
 802560c:	f7db fcc8 	bl	8000fa0 <__aeabi_fmul>
 8025610:	4b33      	ldr	r3, [pc, #204]	@ (80256e0 <__ieee754_expf+0x1d0>)
 8025612:	5959      	ldr	r1, [r3, r5]
 8025614:	f7db f954 	bl	80008c0 <__aeabi_fadd>
 8025618:	f7db ffba 	bl	8001590 <__aeabi_f2iz>
 802561c:	0005      	movs	r5, r0
 802561e:	f7db ffd7 	bl	80015d0 <__aeabi_i2f>
 8025622:	4930      	ldr	r1, [pc, #192]	@ (80256e4 <__ieee754_expf+0x1d4>)
 8025624:	1c06      	adds	r6, r0, #0
 8025626:	f7db fcbb 	bl	8000fa0 <__aeabi_fmul>
 802562a:	1c01      	adds	r1, r0, #0
 802562c:	1c20      	adds	r0, r4, #0
 802562e:	f7db fdf5 	bl	800121c <__aeabi_fsub>
 8025632:	492d      	ldr	r1, [pc, #180]	@ (80256e8 <__ieee754_expf+0x1d8>)
 8025634:	1c07      	adds	r7, r0, #0
 8025636:	1c30      	adds	r0, r6, #0
 8025638:	f7db fcb2 	bl	8000fa0 <__aeabi_fmul>
 802563c:	9000      	str	r0, [sp, #0]
 802563e:	e7a0      	b.n	8025582 <__ieee754_expf+0x72>
 8025640:	22d0      	movs	r2, #208	@ 0xd0
 8025642:	0592      	lsls	r2, r2, #22
 8025644:	4293      	cmp	r3, r2
 8025646:	d20c      	bcs.n	8025662 <__ieee754_expf+0x152>
 8025648:	4928      	ldr	r1, [pc, #160]	@ (80256ec <__ieee754_expf+0x1dc>)
 802564a:	1c20      	adds	r0, r4, #0
 802564c:	f7db f938 	bl	80008c0 <__aeabi_fadd>
 8025650:	21fe      	movs	r1, #254	@ 0xfe
 8025652:	0589      	lsls	r1, r1, #22
 8025654:	f7da ff80 	bl	8000558 <__aeabi_fcmpgt>
 8025658:	1e05      	subs	r5, r0, #0
 802565a:	d097      	beq.n	802558c <__ieee754_expf+0x7c>
 802565c:	21fe      	movs	r1, #254	@ 0xfe
 802565e:	0589      	lsls	r1, r1, #22
 8025660:	e75f      	b.n	8025522 <__ieee754_expf+0x12>
 8025662:	2500      	movs	r5, #0
 8025664:	e792      	b.n	802558c <__ieee754_expf+0x7c>
 8025666:	2080      	movs	r0, #128	@ 0x80
 8025668:	1c31      	adds	r1, r6, #0
 802566a:	05c0      	lsls	r0, r0, #23
 802566c:	f7db fdd6 	bl	800121c <__aeabi_fsub>
 8025670:	1c01      	adds	r1, r0, #0
 8025672:	9801      	ldr	r0, [sp, #4]
 8025674:	f7db faae 	bl	8000bd4 <__aeabi_fdiv>
 8025678:	1c01      	adds	r1, r0, #0
 802567a:	9800      	ldr	r0, [sp, #0]
 802567c:	f7db fdce 	bl	800121c <__aeabi_fsub>
 8025680:	1c39      	adds	r1, r7, #0
 8025682:	f7db fdcb 	bl	800121c <__aeabi_fsub>
 8025686:	1c01      	adds	r1, r0, #0
 8025688:	20fe      	movs	r0, #254	@ 0xfe
 802568a:	0580      	lsls	r0, r0, #22
 802568c:	f7db fdc6 	bl	800121c <__aeabi_fsub>
 8025690:	002b      	movs	r3, r5
 8025692:	337d      	adds	r3, #125	@ 0x7d
 8025694:	db02      	blt.n	802569c <__ieee754_expf+0x18c>
 8025696:	05ec      	lsls	r4, r5, #23
 8025698:	1824      	adds	r4, r4, r0
 802569a:	e74c      	b.n	8025536 <__ieee754_expf+0x26>
 802569c:	21d8      	movs	r1, #216	@ 0xd8
 802569e:	3564      	adds	r5, #100	@ 0x64
 80256a0:	05ed      	lsls	r5, r5, #23
 80256a2:	1828      	adds	r0, r5, r0
 80256a4:	0509      	lsls	r1, r1, #20
 80256a6:	f7db fc7b 	bl	8000fa0 <__aeabi_fmul>
 80256aa:	e74c      	b.n	8025546 <__ieee754_expf+0x36>
 80256ac:	2400      	movs	r4, #0
 80256ae:	e742      	b.n	8025536 <__ieee754_expf+0x26>
 80256b0:	42b17217 	.word	0x42b17217
 80256b4:	42cff1b5 	.word	0x42cff1b5
 80256b8:	3eb17218 	.word	0x3eb17218
 80256bc:	3f851591 	.word	0x3f851591
 80256c0:	08029450 	.word	0x08029450
 80256c4:	08029448 	.word	0x08029448
 80256c8:	3331bb4c 	.word	0x3331bb4c
 80256cc:	35ddea0e 	.word	0x35ddea0e
 80256d0:	388ab355 	.word	0x388ab355
 80256d4:	3b360b61 	.word	0x3b360b61
 80256d8:	3e2aaaab 	.word	0x3e2aaaab
 80256dc:	3fb8aa3b 	.word	0x3fb8aa3b
 80256e0:	08029458 	.word	0x08029458
 80256e4:	3f317180 	.word	0x3f317180
 80256e8:	3717f7d1 	.word	0x3717f7d1
 80256ec:	7149f2ca 	.word	0x7149f2ca

080256f0 <with_errnof>:
 80256f0:	b570      	push	{r4, r5, r6, lr}
 80256f2:	000d      	movs	r5, r1
 80256f4:	1c04      	adds	r4, r0, #0
 80256f6:	f7fd f923 	bl	8022940 <__errno>
 80256fa:	6005      	str	r5, [r0, #0]
 80256fc:	1c20      	adds	r0, r4, #0
 80256fe:	bd70      	pop	{r4, r5, r6, pc}

08025700 <xflowf>:
 8025700:	b510      	push	{r4, lr}
 8025702:	1c0b      	adds	r3, r1, #0
 8025704:	2800      	cmp	r0, #0
 8025706:	d002      	beq.n	802570e <xflowf+0xe>
 8025708:	2380      	movs	r3, #128	@ 0x80
 802570a:	061b      	lsls	r3, r3, #24
 802570c:	18cb      	adds	r3, r1, r3
 802570e:	1c18      	adds	r0, r3, #0
 8025710:	f7db fc46 	bl	8000fa0 <__aeabi_fmul>
 8025714:	2122      	movs	r1, #34	@ 0x22
 8025716:	f7ff ffeb 	bl	80256f0 <with_errnof>
 802571a:	bd10      	pop	{r4, pc}

0802571c <__math_uflowf>:
 802571c:	2180      	movs	r1, #128	@ 0x80
 802571e:	b510      	push	{r4, lr}
 8025720:	0549      	lsls	r1, r1, #21
 8025722:	f7ff ffed 	bl	8025700 <xflowf>
 8025726:	bd10      	pop	{r4, pc}

08025728 <__math_oflowf>:
 8025728:	21e0      	movs	r1, #224	@ 0xe0
 802572a:	b510      	push	{r4, lr}
 802572c:	05c9      	lsls	r1, r1, #23
 802572e:	f7ff ffe7 	bl	8025700 <xflowf>
 8025732:	bd10      	pop	{r4, pc}

08025734 <_init>:
 8025734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025736:	46c0      	nop			@ (mov r8, r8)
 8025738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802573a:	bc08      	pop	{r3}
 802573c:	469e      	mov	lr, r3
 802573e:	4770      	bx	lr

08025740 <_fini>:
 8025740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025742:	46c0      	nop			@ (mov r8, r8)
 8025744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025746:	bc08      	pop	{r3}
 8025748:	469e      	mov	lr, r3
 802574a:	4770      	bx	lr
